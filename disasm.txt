
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 a3 f7 00 00       	call   c000f7c3 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 f3 6f 02 00       	call   c0027018 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 74 7b 02 c0       	mov    ebx,0xc0027b74
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 80 7b 02 c0    	cmp    ebx,0xc0027b80
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 b8 be 02 c0       	mov    eax,0xc002beb8
c0000049:	3d b8 be 02 c0       	cmp    eax,0xc002beb8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 b8 be 02 c0       	push   0xc002beb8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 b8 be 02 c0       	mov    eax,0xc002beb8
c0000075:	2d b8 be 02 c0       	sub    eax,0xc002beb8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 b8 be 02 c0       	push   0xc002beb8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d e8 c4 02 c0 00 	cmp    BYTE PTR ds:0xc002c4e8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 88 7b 02 c0       	mov    ebx,0xc0027b88
c00000bb:	81 eb 84 7b 02 c0    	sub    ebx,0xc0027b84
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 84 7b 02 c0       	mov    esi,0xc0027b84
c00000ca:	a1 ec c4 02 c0       	mov    eax,ds:0xc002c4ec
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 ec c4 02 c0       	mov    ds:0xc002c4ec,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 ec c4 02 c0       	mov    eax,ds:0xc002c4ec
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 b8 be 02 c0       	push   0xc002beb8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 e8 c4 02 c0 01 	mov    BYTE PTR ds:0xc002c4e8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 f0 c4 02 c0       	push   0xc002c4f0
c000012c:	68 b8 be 02 c0       	push   0xc002beb8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <prepareTramp>:
c0000150:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000157:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c000015e:	50                   	push   eax
c000015f:	0f 20 d8             	mov    eax,cr3
c0000162:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000167:	58                   	pop    eax
c0000168:	c3                   	ret    

c0000169 <voodooXADD>:
c0000169:	55                   	push   ebp
c000016a:	89 e5                	mov    ebp,esp
c000016c:	60                   	pusha  
c000016d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000170:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0000173:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0000176:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c0000179:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000017c:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c000017f:	0f 02 ff             	lar    edi,di
c0000182:	c1 ef 0d             	shr    edi,0xd
c0000185:	66 81 e7 03 00       	and    di,0x3
c000018a:	75 09                	jne    c0000195 <voodooXADD.usermode>
c000018c:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c000018f:	81 c4 14 00 00 00    	add    esp,0x14

c0000195 <voodooXADD.usermode>:
c0000195:	89 35 30 02 00 c0    	mov    DWORD PTR ds:0xc0000230,esi
c000019b:	89 25 2c 02 00 c0    	mov    DWORD PTR ds:0xc000022c,esp
c00001a1:	60                   	pusha  
c00001a2:	b0 90                	mov    al,0x90
c00001a4:	b9 20 00 00 00       	mov    ecx,0x20
c00001a9:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001ae:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001b0:	61                   	popa   
c00001b1:	60                   	pusha  
c00001b2:	89 d6                	mov    esi,edx
c00001b4:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001bb:	61                   	popa   
c00001bc:	60                   	pusha  
c00001bd:	89 d6                	mov    esi,edx
c00001bf:	bf 13 02 00 c0       	mov    edi,0xc0000213
c00001c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001c6:	61                   	popa   
c00001c7:	b1 90                	mov    cl,0x90
c00001c9:	85 db                	test   ebx,ebx
c00001cb:	74 06                	je     c00001d3 <voodooXADD.skipChange>
c00001cd:	8a 8b 02 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdfe]

c00001d3 <voodooXADD.skipChange>:
c00001d3:	88 8b 03 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdfd],cl
c00001d9:	80 ab 04 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdfc],0x3a
c00001e0:	88 8b 13 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffded],cl
c00001e6:	80 ab 14 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffdec],0xbe
c00001ed:	89 c4                	mov    esp,eax
c00001ef:	81 c4 10 00 00 00    	add    esp,0x10
c00001f5:	5f                   	pop    edi
c00001f6:	5e                   	pop    esi
c00001f7:	5d                   	pop    ebp
c00001f8:	5b                   	pop    ebx
c00001f9:	5b                   	pop    ebx
c00001fa:	5a                   	pop    edx
c00001fb:	59                   	pop    ecx
c00001fc:	58                   	pop    eax
c00001fd:	8b 25 30 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000230

c0000203 <voodooXADD.helper>:
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	90                   	nop
c0000217:	90                   	nop
c0000218:	90                   	nop
c0000219:	90                   	nop
c000021a:	90                   	nop
c000021b:	90                   	nop
c000021c:	90                   	nop
c000021d:	90                   	nop
c000021e:	90                   	nop
c000021f:	90                   	nop
c0000220:	90                   	nop
c0000221:	90                   	nop
c0000222:	90                   	nop
c0000223:	8b 25 2c 02 00 c0    	mov    esp,DWORD PTR ds:0xc000022c
c0000229:	61                   	popa   
c000022a:	c9                   	leave  
c000022b:	c3                   	ret    

c000022c <voodooXADD.oldStack>:
c000022c:	00 00                	add    BYTE PTR [eax],al
	...

c0000230 <voodooXADD.newStack>:
c0000230:	00 00                	add    BYTE PTR [eax],al
	...

c0000234 <doTPAUSE>:
c0000234:	fb                   	sti    
c0000235:	31 c0                	xor    eax,eax
c0000237:	31 d2                	xor    edx,edx
c0000239:	66 0f ae f0          	tpause eax
c000023d:	c3                   	ret    

c000023e <hasLegacyFPU>:
c000023e:	0f 20 c2             	mov    edx,cr0
c0000241:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000247:	0f 22 c2             	mov    cr0,edx
c000024a:	db e3                	fninit 
c000024c:	dd 3d 61 02 00 c0    	fnstsw WORD PTR ds:0xc0000261
c0000252:	31 c0                	xor    eax,eax
c0000254:	66 81 3d 61 02 00 c0 00 00 	cmp    WORD PTR ds:0xc0000261,0x0
c000025d:	75 01                	jne    c0000260 <hasLegacyFPU.nofpu>

c000025f <hasLegacyFPU.hasfpu>:
c000025f:	40                   	inc    eax

c0000260 <hasLegacyFPU.nofpu>:
c0000260:	c3                   	ret    

c0000261 <testword>:
c0000261:	aa                   	stos   BYTE PTR es:[edi],al
c0000262:	55                   	push   ebp

c0000263 <is486>:
c0000263:	0f 09                	wbinvd 
c0000265:	31 c0                	xor    eax,eax
c0000267:	40                   	inc    eax
c0000268:	c3                   	ret    
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	90                   	nop
c000026f:	90                   	nop
c0000270:	90                   	nop
c0000271:	90                   	nop
c0000272:	90                   	nop
c0000273:	90                   	nop
c0000274:	90                   	nop
c0000275:	90                   	nop
c0000276:	90                   	nop
c0000277:	90                   	nop
c0000278:	90                   	nop
c0000279:	90                   	nop
c000027a:	90                   	nop
c000027b:	90                   	nop
c000027c:	90                   	nop
c000027d:	90                   	nop
c000027e:	90                   	nop
c000027f:	90                   	nop
c0000280:	90                   	nop
c0000281:	90                   	nop
c0000282:	90                   	nop
c0000283:	90                   	nop
c0000284:	90                   	nop
c0000285:	90                   	nop
c0000286:	90                   	nop
c0000287:	90                   	nop
c0000288:	90                   	nop
c0000289:	90                   	nop
c000028a:	90                   	nop
c000028b:	90                   	nop
c000028c:	90                   	nop
c000028d:	90                   	nop
c000028e:	90                   	nop
c000028f:	90                   	nop
c0000290:	90                   	nop
c0000291:	90                   	nop
c0000292:	90                   	nop
c0000293:	90                   	nop
c0000294:	90                   	nop
c0000295:	90                   	nop
c0000296:	31 c0                	xor    eax,eax
c0000298:	c3                   	ret    

c0000299 <detectCPUID>:
c0000299:	9c                   	pushf  
c000029a:	9c                   	pushf  
c000029b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002a2:	9d                   	popf   
c00002a3:	9c                   	pushf  
c00002a4:	58                   	pop    eax
c00002a5:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002a8:	9d                   	popf   
c00002a9:	25 00 00 20 00       	and    eax,0x200000
c00002ae:	c3                   	ret    

c00002af <goToVM86>:
c00002af:	55                   	push   ebp
c00002b0:	89 e5                	mov    ebp,esp
c00002b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00002b5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00002b8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00002bb:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00002be:	25 ff ff 00 00       	and    eax,0xffff
c00002c3:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00002c9:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00002cf:	81 e2 ff ff 00 00    	and    edx,0xffff
c00002d5:	52                   	push   edx
c00002d6:	51                   	push   ecx
c00002d7:	68 02 02 02 00       	push   0x20202
c00002dc:	53                   	push   ebx
c00002dd:	50                   	push   eax
c00002de:	cf                   	iret   

c00002df <goToUsermode>:
c00002df:	55                   	push   ebp
c00002e0:	89 e5                	mov    ebp,esp
c00002e2:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00002e5:	66 b8 23 00          	mov    ax,0x23
c00002e9:	66 8e d8             	mov    ds,ax
c00002ec:	66 8e c0             	mov    es,ax
c00002ef:	66 8e e0             	mov    fs,ax
c00002f2:	66 8e e8             	mov    gs,ax
c00002f5:	89 e0                	mov    eax,esp
c00002f7:	68 23 00 00 00       	push   0x23
c00002fc:	50                   	push   eax
c00002fd:	68 02 02 00 00       	push   0x202
c0000302:	68 1b 00 00 00       	push   0x1b
c0000307:	53                   	push   ebx
c0000308:	cf                   	iret   

c0000309 <switchToThreadASMFirstTime>:
c0000309:	9c                   	pushf  
c000030a:	fa                   	cli    
c000030b:	50                   	push   eax
c000030c:	53                   	push   ebx
c000030d:	51                   	push   ecx
c000030e:	52                   	push   edx
c000030f:	56                   	push   esi
c0000310:	57                   	push   edi
c0000311:	55                   	push   ebp
c0000312:	e9 11 00 00 00       	jmp    c0000328 <commonThreadSwitch>

c0000317 <switchToThreadASM>:
c0000317:	9c                   	pushf  
c0000318:	50                   	push   eax
c0000319:	53                   	push   ebx
c000031a:	51                   	push   ecx
c000031b:	52                   	push   edx
c000031c:	56                   	push   esi
c000031d:	57                   	push   edi
c000031e:	55                   	push   ebp
c000031f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000325:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000328 <commonThreadSwitch>:
c0000328:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000032c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000332:	8b 06                	mov    eax,DWORD PTR [esi]
c0000334:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000337:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000033a:	0f 20 d9             	mov    ecx,cr3
c000033d:	39 c8                	cmp    eax,ecx
c000033f:	74 03                	je     c0000344 <commonThreadSwitch.doneVAS>
c0000341:	0f 22 d8             	mov    cr3,eax

c0000344 <commonThreadSwitch.doneVAS>:
c0000344:	85 d2                	test   edx,edx
c0000346:	75 11                	jne    c0000359 <commonThreadSwitch.firstTime>
c0000348:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000034b:	e8 70 c5 01 00       	call   c001c8c0 <changeTSS>
c0000350:	5d                   	pop    ebp
c0000351:	5f                   	pop    edi
c0000352:	5e                   	pop    esi
c0000353:	5a                   	pop    edx
c0000354:	59                   	pop    ecx
c0000355:	5b                   	pop    ebx
c0000356:	58                   	pop    eax
c0000357:	9d                   	popf   
c0000358:	c3                   	ret    

c0000359 <commonThreadSwitch.firstTime>:
c0000359:	fa                   	cli    
c000035a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000035d:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000362:	60                   	pusha  
c0000363:	e8 c7 21 01 00       	call   c001252f <mapVASFirstTime>
c0000368:	61                   	popa   
c0000369:	89 c4                	mov    esp,eax
c000036b:	56                   	push   esi
c000036c:	52                   	push   edx
c000036d:	e8 4e c5 01 00       	call   c001c8c0 <changeTSS>
c0000372:	5a                   	pop    edx
c0000373:	5e                   	pop    esi
c0000374:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c000037b:	5d                   	pop    ebp
c000037c:	5f                   	pop    edi
c000037d:	5e                   	pop    esi
c000037e:	59                   	pop    ecx
c000037f:	59                   	pop    ecx
c0000380:	5b                   	pop    ebx
c0000381:	58                   	pop    eax
c0000382:	81 c4 04 00 00 00    	add    esp,0x4
c0000388:	6a 02                	push   0x2
c000038a:	9d                   	popf   
c000038b:	52                   	push   edx
c000038c:	e8 9c c9 01 00       	call   c001cd2d <taskStartupFunction>
c0000391:	5a                   	pop    edx
c0000392:	50                   	push   eax
c0000393:	ff d2                	call   edx
c0000395:	e8 4a cf 01 00       	call   c001d2e4 <taskReturned>
c000039a:	e9 fb ff ff ff       	jmp    c000039a <commonThreadSwitch.firstTime+0x41>

c000039f <asmQuickAcquireLock>:
c000039f:	55                   	push   ebp
c00003a0:	89 e5                	mov    ebp,esp
c00003a2:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003a5 <asmQuickAcquireLock.retry>:
c00003a5:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003aa:	72 02                	jb     c00003ae <asmQuickAcquireLock.spin_with_pause>
c00003ac:	fa                   	cli    
c00003ad:	c3                   	ret    

c00003ae <asmQuickAcquireLock.spin_with_pause>:
c00003ae:	f3 90                	pause  
c00003b0:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003b6:	75 f6                	jne    c00003ae <asmQuickAcquireLock.spin_with_pause>
c00003b8:	e9 e8 ff ff ff       	jmp    c00003a5 <asmQuickAcquireLock.retry>

c00003bd <asmQuickReleaseLock>:
c00003bd:	55                   	push   ebp
c00003be:	89 e5                	mov    ebp,esp
c00003c0:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003c7:	5d                   	pop    ebp
c00003c8:	c3                   	ret    

c00003c9 <asmAcquireLock>:
c00003c9:	55                   	push   ebp
c00003ca:	89 e5                	mov    ebp,esp
c00003cc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003cf <asmAcquireLock.retry>:
c00003cf:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003d4:	72 05                	jb     c00003db <asmAcquireLock.spin_with_pause>
c00003d6:	9c                   	pushf  
c00003d7:	58                   	pop    eax
c00003d8:	fa                   	cli    
c00003d9:	5d                   	pop    ebp
c00003da:	c3                   	ret    

c00003db <asmAcquireLock.spin_with_pause>:
c00003db:	f3 90                	pause  
c00003dd:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003e3:	75 f6                	jne    c00003db <asmAcquireLock.spin_with_pause>
c00003e5:	e9 e5 ff ff ff       	jmp    c00003cf <asmAcquireLock.retry>

c00003ea <asmReleaseLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00003f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00003f3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00003f9:	52                   	push   edx
c00003fa:	9d                   	popf   
c00003fb:	5d                   	pop    ebp
c00003fc:	c3                   	ret    

c00003fd <loadGDT>:
c00003fd:	0f 01 15 30 c9 02 c0 	lgdtd  ds:0xc002c930
c0000404:	66 b8 10 00          	mov    ax,0x10
c0000408:	66 8e d8             	mov    ds,ax
c000040b:	66 8e c0             	mov    es,ax
c000040e:	66 8e e0             	mov    fs,ax
c0000411:	66 8e e8             	mov    gs,ax
c0000414:	66 8e d0             	mov    ss,ax
c0000417:	e9 00 00 00 00       	jmp    c000041c <flush2>

c000041c <flush2>:
c000041c:	c3                   	ret    

c000041d <isr0>:
c000041d:	fa                   	cli    
c000041e:	68 00 00 00 00       	push   0x0
c0000423:	68 00 00 00 00       	push   0x0
c0000428:	e9 44 01 00 00       	jmp    c0000571 <int_common_stub>

c000042d <isr1>:
c000042d:	fa                   	cli    
c000042e:	6a 00                	push   0x0
c0000430:	6a 01                	push   0x1
c0000432:	e9 3a 01 00 00       	jmp    c0000571 <int_common_stub>

c0000437 <isr2>:
c0000437:	fa                   	cli    
c0000438:	6a 00                	push   0x0
c000043a:	6a 02                	push   0x2
c000043c:	e9 30 01 00 00       	jmp    c0000571 <int_common_stub>

c0000441 <isr3>:
c0000441:	fa                   	cli    
c0000442:	6a 00                	push   0x0
c0000444:	6a 03                	push   0x3
c0000446:	e9 26 01 00 00       	jmp    c0000571 <int_common_stub>

c000044b <isr4>:
c000044b:	fa                   	cli    
c000044c:	6a 00                	push   0x0
c000044e:	6a 04                	push   0x4
c0000450:	e9 1c 01 00 00       	jmp    c0000571 <int_common_stub>

c0000455 <isr5>:
c0000455:	fa                   	cli    
c0000456:	6a 00                	push   0x0
c0000458:	6a 05                	push   0x5
c000045a:	e9 12 01 00 00       	jmp    c0000571 <int_common_stub>

c000045f <isr6>:
c000045f:	fa                   	cli    
c0000460:	6a 00                	push   0x0
c0000462:	6a 06                	push   0x6
c0000464:	e9 08 01 00 00       	jmp    c0000571 <int_common_stub>

c0000469 <isr7>:
c0000469:	fa                   	cli    
c000046a:	6a 00                	push   0x0
c000046c:	6a 07                	push   0x7
c000046e:	e9 fe 00 00 00       	jmp    c0000571 <int_common_stub>

c0000473 <isr8>:
c0000473:	fa                   	cli    
c0000474:	6a 08                	push   0x8
c0000476:	e9 f6 00 00 00       	jmp    c0000571 <int_common_stub>

c000047b <isr9>:
c000047b:	fa                   	cli    
c000047c:	6a 00                	push   0x0
c000047e:	6a 09                	push   0x9
c0000480:	e9 ec 00 00 00       	jmp    c0000571 <int_common_stub>

c0000485 <isr10>:
c0000485:	fa                   	cli    
c0000486:	6a 0a                	push   0xa
c0000488:	e9 e4 00 00 00       	jmp    c0000571 <int_common_stub>

c000048d <isr11>:
c000048d:	fa                   	cli    
c000048e:	6a 0b                	push   0xb
c0000490:	e9 dc 00 00 00       	jmp    c0000571 <int_common_stub>

c0000495 <isr12>:
c0000495:	fa                   	cli    
c0000496:	6a 0c                	push   0xc
c0000498:	e9 d4 00 00 00       	jmp    c0000571 <int_common_stub>

c000049d <isr13>:
c000049d:	fa                   	cli    
c000049e:	6a 0d                	push   0xd
c00004a0:	e9 cc 00 00 00       	jmp    c0000571 <int_common_stub>

c00004a5 <isr14>:
c00004a5:	fa                   	cli    
c00004a6:	6a 0e                	push   0xe
c00004a8:	e9 c4 00 00 00       	jmp    c0000571 <int_common_stub>

c00004ad <isr15>:
c00004ad:	fa                   	cli    
c00004ae:	6a 00                	push   0x0
c00004b0:	6a 0f                	push   0xf
c00004b2:	e9 ba 00 00 00       	jmp    c0000571 <int_common_stub>

c00004b7 <isr16>:
c00004b7:	fa                   	cli    
c00004b8:	6a 00                	push   0x0
c00004ba:	6a 10                	push   0x10
c00004bc:	e9 b0 00 00 00       	jmp    c0000571 <int_common_stub>

c00004c1 <isr17>:
c00004c1:	fa                   	cli    
c00004c2:	6a 00                	push   0x0
c00004c4:	6a 11                	push   0x11
c00004c6:	e9 a6 00 00 00       	jmp    c0000571 <int_common_stub>

c00004cb <isr18>:
c00004cb:	fa                   	cli    
c00004cc:	6a 00                	push   0x0
c00004ce:	6a 12                	push   0x12
c00004d0:	e9 9c 00 00 00       	jmp    c0000571 <int_common_stub>

c00004d5 <irq3>:
c00004d5:	fa                   	cli    
c00004d6:	6a 00                	push   0x0
c00004d8:	6a 23                	push   0x23
c00004da:	e9 92 00 00 00       	jmp    c0000571 <int_common_stub>

c00004df <irq4>:
c00004df:	fa                   	cli    
c00004e0:	6a 00                	push   0x0
c00004e2:	6a 24                	push   0x24
c00004e4:	e9 88 00 00 00       	jmp    c0000571 <int_common_stub>

c00004e9 <irq5>:
c00004e9:	fa                   	cli    
c00004ea:	6a 00                	push   0x0
c00004ec:	6a 25                	push   0x25
c00004ee:	e9 7e 00 00 00       	jmp    c0000571 <int_common_stub>

c00004f3 <irq6>:
c00004f3:	fa                   	cli    
c00004f4:	6a 00                	push   0x0
c00004f6:	6a 26                	push   0x26
c00004f8:	e9 74 00 00 00       	jmp    c0000571 <int_common_stub>

c00004fd <irq7>:
c00004fd:	fa                   	cli    
c00004fe:	6a 00                	push   0x0
c0000500:	6a 27                	push   0x27
c0000502:	e9 6a 00 00 00       	jmp    c0000571 <int_common_stub>

c0000507 <irq8>:
c0000507:	fa                   	cli    
c0000508:	6a 00                	push   0x0
c000050a:	6a 28                	push   0x28
c000050c:	e9 60 00 00 00       	jmp    c0000571 <int_common_stub>

c0000511 <irq9>:
c0000511:	fa                   	cli    
c0000512:	6a 00                	push   0x0
c0000514:	6a 29                	push   0x29
c0000516:	e9 56 00 00 00       	jmp    c0000571 <int_common_stub>

c000051b <irq10>:
c000051b:	fa                   	cli    
c000051c:	6a 00                	push   0x0
c000051e:	6a 2a                	push   0x2a
c0000520:	e9 4c 00 00 00       	jmp    c0000571 <int_common_stub>

c0000525 <irq11>:
c0000525:	fa                   	cli    
c0000526:	6a 00                	push   0x0
c0000528:	6a 2b                	push   0x2b
c000052a:	e9 42 00 00 00       	jmp    c0000571 <int_common_stub>

c000052f <irq12>:
c000052f:	fa                   	cli    
c0000530:	6a 00                	push   0x0
c0000532:	6a 2c                	push   0x2c
c0000534:	e9 38 00 00 00       	jmp    c0000571 <int_common_stub>

c0000539 <irq13>:
c0000539:	fa                   	cli    
c000053a:	6a 00                	push   0x0
c000053c:	6a 2d                	push   0x2d
c000053e:	e9 2e 00 00 00       	jmp    c0000571 <int_common_stub>

c0000543 <irq14>:
c0000543:	fa                   	cli    
c0000544:	6a 00                	push   0x0
c0000546:	6a 2e                	push   0x2e
c0000548:	e9 24 00 00 00       	jmp    c0000571 <int_common_stub>

c000054d <irq15>:
c000054d:	fa                   	cli    
c000054e:	6a 00                	push   0x0
c0000550:	6a 2f                	push   0x2f
c0000552:	e9 1a 00 00 00       	jmp    c0000571 <int_common_stub>

c0000557 <irq1>:
c0000557:	fa                   	cli    
c0000558:	6a 00                	push   0x0
c000055a:	6a 21                	push   0x21
c000055c:	eb 13                	jmp    c0000571 <int_common_stub>

c000055e <irq2>:
c000055e:	fa                   	cli    
c000055f:	6a 00                	push   0x0
c0000561:	6a 22                	push   0x22
c0000563:	eb 0c                	jmp    c0000571 <int_common_stub>

c0000565 <isr96>:
c0000565:	6a 00                	push   0x0
c0000567:	6a 60                	push   0x60
c0000569:	fb                   	sti    
c000056a:	eb 05                	jmp    c0000571 <int_common_stub>

c000056c <irq0>:
c000056c:	fa                   	cli    
c000056d:	6a 00                	push   0x0
c000056f:	6a 20                	push   0x20

c0000571 <int_common_stub>:
c0000571:	60                   	pusha  
c0000572:	1e                   	push   ds
c0000573:	06                   	push   es
c0000574:	0f a0                	push   fs
c0000576:	0f a8                	push   gs
c0000578:	66 b8 10 00          	mov    ax,0x10
c000057c:	66 8e d8             	mov    ds,ax
c000057f:	66 8e c0             	mov    es,ax
c0000582:	66 8e e0             	mov    fs,ax
c0000585:	66 8e e8             	mov    gs,ax
c0000588:	54                   	push   esp
c0000589:	e8 59 3e 01 00       	call   c00143e7 <int_handler>
c000058e:	81 c4 04 00 00 00    	add    esp,0x4
c0000594:	0f a9                	pop    gs
c0000596:	0f a1                	pop    fs
c0000598:	07                   	pop    es
c0000599:	1f                   	pop    ds
c000059a:	61                   	popa   
c000059b:	81 c4 08 00 00 00    	add    esp,0x8
c00005a1:	cf                   	iret   

c00005a2 <irq16>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 30                	push   0x30
c00005a7:	e9 c5 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005ac <irq17>:
c00005ac:	fa                   	cli    
c00005ad:	6a 00                	push   0x0
c00005af:	6a 31                	push   0x31
c00005b1:	e9 bb ff ff ff       	jmp    c0000571 <int_common_stub>

c00005b6 <irq18>:
c00005b6:	fa                   	cli    
c00005b7:	6a 00                	push   0x0
c00005b9:	6a 32                	push   0x32
c00005bb:	e9 b1 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005c0 <irq19>:
c00005c0:	fa                   	cli    
c00005c1:	6a 00                	push   0x0
c00005c3:	6a 33                	push   0x33
c00005c5:	e9 a7 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005ca <irq20>:
c00005ca:	fa                   	cli    
c00005cb:	6a 00                	push   0x0
c00005cd:	6a 34                	push   0x34
c00005cf:	e9 9d ff ff ff       	jmp    c0000571 <int_common_stub>

c00005d4 <irq21>:
c00005d4:	fa                   	cli    
c00005d5:	6a 00                	push   0x0
c00005d7:	6a 35                	push   0x35
c00005d9:	e9 93 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005de <irq22>:
c00005de:	fa                   	cli    
c00005df:	6a 00                	push   0x0
c00005e1:	6a 36                	push   0x36
c00005e3:	e9 89 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005e8 <irq23>:
c00005e8:	fa                   	cli    
c00005e9:	6a 00                	push   0x0
c00005eb:	6a 37                	push   0x37
c00005ed:	e9 7f ff ff ff       	jmp    c0000571 <int_common_stub>

c00005f2 <memcmp>:
c00005f2:	56                   	push   esi
c00005f3:	53                   	push   ebx
c00005f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00005f8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00005fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000600:	01 d6                	add    esi,edx
c0000602:	39 f2                	cmp    edx,esi
c0000604:	74 0e                	je     c0000614 <memcmp+0x22>
c0000606:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000609:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000060c:	38 c8                	cmp    al,cl
c000060e:	75 08                	jne    c0000618 <memcmp+0x26>
c0000610:	42                   	inc    edx
c0000611:	43                   	inc    ebx
c0000612:	eb ee                	jmp    c0000602 <memcmp+0x10>
c0000614:	31 c0                	xor    eax,eax
c0000616:	eb 02                	jmp    c000061a <memcmp+0x28>
c0000618:	29 c8                	sub    eax,ecx
c000061a:	5b                   	pop    ebx
c000061b:	5e                   	pop    esi
c000061c:	c3                   	ret    

c000061d <memmove>:
c000061d:	56                   	push   esi
c000061e:	53                   	push   ebx
c000061f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000623:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000062b:	39 c8                	cmp    eax,ecx
c000062d:	73 12                	jae    c0000641 <memmove+0x24>
c000062f:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000632:	89 c3                	mov    ebx,eax
c0000634:	39 f1                	cmp    ecx,esi
c0000636:	74 1a                	je     c0000652 <memmove+0x35>
c0000638:	8a 11                	mov    dl,BYTE PTR [ecx]
c000063a:	43                   	inc    ebx
c000063b:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c000063e:	41                   	inc    ecx
c000063f:	eb f3                	jmp    c0000634 <memmove+0x17>
c0000641:	76 0f                	jbe    c0000652 <memmove+0x35>
c0000643:	85 d2                	test   edx,edx
c0000645:	74 0b                	je     c0000652 <memmove+0x35>
c0000647:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c000064b:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c000064f:	4a                   	dec    edx
c0000650:	eb f1                	jmp    c0000643 <memmove+0x26>
c0000652:	5b                   	pop    ebx
c0000653:	5e                   	pop    esi
c0000654:	c3                   	ret    

c0000655 <memcpy>:
c0000655:	57                   	push   edi
c0000656:	56                   	push   esi
c0000657:	53                   	push   ebx
c0000658:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000065c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000660:	89 da                	mov    edx,ebx
c0000662:	89 d9                	mov    ecx,ebx
c0000664:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000668:	83 e2 fc             	and    edx,0xfffffffc
c000066b:	c1 e9 02             	shr    ecx,0x2
c000066e:	89 c7                	mov    edi,eax
c0000670:	fc                   	cld    
c0000671:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000673:	8d 0c 16             	lea    ecx,[esi+edx*1]
c0000676:	01 c2                	add    edx,eax
c0000678:	01 de                	add    esi,ebx
c000067a:	39 f1                	cmp    ecx,esi
c000067c:	74 09                	je     c0000687 <memcpy+0x32>
c000067e:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000680:	42                   	inc    edx
c0000681:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000684:	41                   	inc    ecx
c0000685:	eb f3                	jmp    c000067a <memcpy+0x25>
c0000687:	5b                   	pop    ebx
c0000688:	5e                   	pop    esi
c0000689:	5f                   	pop    edi
c000068a:	c3                   	ret    

c000068b <memset>:
c000068b:	53                   	push   ebx
c000068c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000690:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000694:	89 c2                	mov    edx,eax
c0000696:	01 c1                	add    ecx,eax
c0000698:	39 ca                	cmp    edx,ecx
c000069a:	74 0a                	je     c00006a6 <memset+0x1b>
c000069c:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006a0:	42                   	inc    edx
c00006a1:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006a4:	eb f2                	jmp    c0000698 <memset+0xd>
c00006a6:	5b                   	pop    ebx
c00006a7:	c3                   	ret    

c00006a8 <strlen>:
c00006a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006ac:	31 c0                	xor    eax,eax
c00006ae:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006b2:	74 03                	je     c00006b7 <strlen+0xf>
c00006b4:	40                   	inc    eax
c00006b5:	eb f7                	jmp    c00006ae <strlen+0x6>
c00006b7:	c3                   	ret    

c00006b8 <strpbrk>:
c00006b8:	53                   	push   ebx
c00006b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006bd:	8a 08                	mov    cl,BYTE PTR [eax]
c00006bf:	84 c9                	test   cl,cl
c00006c1:	74 14                	je     c00006d7 <strpbrk+0x1f>
c00006c3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00006c7:	8a 1a                	mov    bl,BYTE PTR [edx]
c00006c9:	84 db                	test   bl,bl
c00006cb:	74 07                	je     c00006d4 <strpbrk+0x1c>
c00006cd:	38 cb                	cmp    bl,cl
c00006cf:	74 08                	je     c00006d9 <strpbrk+0x21>
c00006d1:	42                   	inc    edx
c00006d2:	eb f3                	jmp    c00006c7 <strpbrk+0xf>
c00006d4:	40                   	inc    eax
c00006d5:	eb e6                	jmp    c00006bd <strpbrk+0x5>
c00006d7:	31 c0                	xor    eax,eax
c00006d9:	5b                   	pop    ebx
c00006da:	c3                   	ret    

c00006db <strtok>:
c00006db:	56                   	push   esi
c00006dc:	53                   	push   ebx
c00006dd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006e5:	85 db                	test   ebx,ebx
c00006e7:	75 0e                	jne    c00006f7 <strtok+0x1c>
c00006e9:	8b 1d 08 c5 02 c0    	mov    ebx,DWORD PTR ds:0xc002c508
c00006ef:	85 db                	test   ebx,ebx
c00006f1:	75 04                	jne    c00006f7 <strtok+0x1c>
c00006f3:	31 db                	xor    ebx,ebx
c00006f5:	eb 2e                	jmp    c0000725 <strtok+0x4a>
c00006f7:	56                   	push   esi
c00006f8:	53                   	push   ebx
c00006f9:	e8 ba ff ff ff       	call   c00006b8 <strpbrk>
c00006fe:	5a                   	pop    edx
c00006ff:	a3 08 c5 02 c0       	mov    ds:0xc002c508,eax
c0000704:	59                   	pop    ecx
c0000705:	a1 08 c5 02 c0       	mov    eax,ds:0xc002c508
c000070a:	39 d8                	cmp    eax,ebx
c000070c:	75 07                	jne    c0000715 <strtok+0x3a>
c000070e:	43                   	inc    ebx
c000070f:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000713:	eb e2                	jmp    c00006f7 <strtok+0x1c>
c0000715:	85 c0                	test   eax,eax
c0000717:	74 da                	je     c00006f3 <strtok+0x18>
c0000719:	8d 50 01             	lea    edx,[eax+0x1]
c000071c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000071f:	89 15 08 c5 02 c0    	mov    DWORD PTR ds:0xc002c508,edx
c0000725:	89 d8                	mov    eax,ebx
c0000727:	5b                   	pop    ebx
c0000728:	5e                   	pop    esi
c0000729:	c3                   	ret    

c000072a <strcpy>:
c000072a:	53                   	push   ebx
c000072b:	31 d2                	xor    edx,edx
c000072d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000731:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000735:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000738:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c000073b:	84 c9                	test   cl,cl
c000073d:	74 06                	je     c0000745 <strcpy+0x1b>
c000073f:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0000742:	42                   	inc    edx
c0000743:	eb ec                	jmp    c0000731 <strcpy+0x7>
c0000745:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000748:	5b                   	pop    ebx
c0000749:	c3                   	ret    

c000074a <strncpy>:
c000074a:	56                   	push   esi
c000074b:	53                   	push   ebx
c000074c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000750:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000754:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0000758:	89 c3                	mov    ebx,eax
c000075a:	85 c9                	test   ecx,ecx
c000075c:	74 1a                	je     c0000778 <strncpy+0x2e>
c000075e:	46                   	inc    esi
c000075f:	43                   	inc    ebx
c0000760:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c0000763:	49                   	dec    ecx
c0000764:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000767:	84 d2                	test   dl,dl
c0000769:	75 ef                	jne    c000075a <strncpy+0x10>
c000076b:	31 d2                	xor    edx,edx
c000076d:	39 d1                	cmp    ecx,edx
c000076f:	74 07                	je     c0000778 <strncpy+0x2e>
c0000771:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c0000775:	42                   	inc    edx
c0000776:	eb f5                	jmp    c000076d <strncpy+0x23>
c0000778:	5b                   	pop    ebx
c0000779:	5e                   	pop    esi
c000077a:	c3                   	ret    

c000077b <strcmp>:
c000077b:	31 c9                	xor    ecx,ecx
c000077d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000781:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000785:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0000789:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c000078d:	38 d0                	cmp    al,dl
c000078f:	75 08                	jne    c0000799 <strcmp+0x1e>
c0000791:	41                   	inc    ecx
c0000792:	84 c0                	test   al,al
c0000794:	75 e7                	jne    c000077d <strcmp+0x2>
c0000796:	31 c0                	xor    eax,eax
c0000798:	c3                   	ret    
c0000799:	29 d0                	sub    eax,edx
c000079b:	c3                   	ret    

c000079c <strchr>:
c000079c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007a0:	8a 10                	mov    dl,BYTE PTR [eax]
c00007a2:	84 d2                	test   dl,dl
c00007a4:	74 09                	je     c00007af <strchr+0x13>
c00007a6:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c00007aa:	74 05                	je     c00007b1 <strchr+0x15>
c00007ac:	40                   	inc    eax
c00007ad:	eb f1                	jmp    c00007a0 <strchr+0x4>
c00007af:	31 c0                	xor    eax,eax
c00007b1:	c3                   	ret    

c00007b2 <strncmp>:
c00007b2:	56                   	push   esi
c00007b3:	53                   	push   ebx
c00007b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007b8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007bc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007c0:	01 d6                	add    esi,edx
c00007c2:	39 f2                	cmp    edx,esi
c00007c4:	74 12                	je     c00007d8 <strncmp+0x26>
c00007c6:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c00007c9:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007cc:	38 c8                	cmp    al,cl
c00007ce:	75 0c                	jne    c00007dc <strncmp+0x2a>
c00007d0:	42                   	inc    edx
c00007d1:	84 c0                	test   al,al
c00007d3:	74 03                	je     c00007d8 <strncmp+0x26>
c00007d5:	43                   	inc    ebx
c00007d6:	eb ea                	jmp    c00007c2 <strncmp+0x10>
c00007d8:	31 c0                	xor    eax,eax
c00007da:	eb 02                	jmp    c00007de <strncmp+0x2c>
c00007dc:	29 c8                	sub    eax,ecx
c00007de:	5b                   	pop    ebx
c00007df:	5e                   	pop    esi
c00007e0:	c3                   	ret    

c00007e1 <strcat>:
c00007e1:	53                   	push   ebx
c00007e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007e6:	89 c1                	mov    ecx,eax
c00007e8:	8d 51 01             	lea    edx,[ecx+0x1]
c00007eb:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007ef:	74 04                	je     c00007f5 <strcat+0x14>
c00007f1:	89 d1                	mov    ecx,edx
c00007f3:	eb f3                	jmp    c00007e8 <strcat+0x7>
c00007f5:	31 d2                	xor    edx,edx
c00007f7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007fb:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c00007fe:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c0000801:	42                   	inc    edx
c0000802:	84 db                	test   bl,bl
c0000804:	75 f1                	jne    c00007f7 <strcat+0x16>
c0000806:	5b                   	pop    ebx
c0000807:	c3                   	ret    

c0000808 <strncat>:
c0000808:	56                   	push   esi
c0000809:	53                   	push   ebx
c000080a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000080e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000812:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000816:	89 c2                	mov    edx,eax
c0000818:	85 db                	test   ebx,ebx
c000081a:	74 23                	je     c000083f <strncat+0x37>
c000081c:	8d 72 01             	lea    esi,[edx+0x1]
c000081f:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c0000823:	74 04                	je     c0000829 <strncat+0x21>
c0000825:	89 f2                	mov    edx,esi
c0000827:	eb f3                	jmp    c000081c <strncat+0x14>
c0000829:	8d 34 19             	lea    esi,[ecx+ebx*1]
c000082c:	41                   	inc    ecx
c000082d:	42                   	inc    edx
c000082e:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000831:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000834:	84 db                	test   bl,bl
c0000836:	74 07                	je     c000083f <strncat+0x37>
c0000838:	39 f1                	cmp    ecx,esi
c000083a:	75 f0                	jne    c000082c <strncat+0x24>
c000083c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000083f:	5b                   	pop    ebx
c0000840:	5e                   	pop    esi
c0000841:	c3                   	ret    

c0000842 <strstr>:
c0000842:	57                   	push   edi
c0000843:	56                   	push   esi
c0000844:	53                   	push   ebx
c0000845:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000849:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000084d:	57                   	push   edi
c000084e:	e8 55 fe ff ff       	call   c00006a8 <strlen>
c0000853:	59                   	pop    ecx
c0000854:	89 c6                	mov    esi,eax
c0000856:	85 c0                	test   eax,eax
c0000858:	74 1f                	je     c0000879 <strstr+0x37>
c000085a:	53                   	push   ebx
c000085b:	e8 48 fe ff ff       	call   c00006a8 <strlen>
c0000860:	5a                   	pop    edx
c0000861:	39 f0                	cmp    eax,esi
c0000863:	72 12                	jb     c0000877 <strstr+0x35>
c0000865:	56                   	push   esi
c0000866:	57                   	push   edi
c0000867:	53                   	push   ebx
c0000868:	e8 85 fd ff ff       	call   c00005f2 <memcmp>
c000086d:	83 c4 0c             	add    esp,0xc
c0000870:	85 c0                	test   eax,eax
c0000872:	74 05                	je     c0000879 <strstr+0x37>
c0000874:	43                   	inc    ebx
c0000875:	eb e3                	jmp    c000085a <strstr+0x18>
c0000877:	31 db                	xor    ebx,ebx
c0000879:	89 d8                	mov    eax,ebx
c000087b:	5b                   	pop    ebx
c000087c:	5e                   	pop    esi
c000087d:	5f                   	pop    edi
c000087e:	c3                   	ret    

c000087f <toupper>:
c000087f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000883:	0f b6 d0             	movzx  edx,al
c0000886:	f6 82 a0 7b 02 c0 02 	test   BYTE PTR [edx-0x3ffd8460],0x2
c000088d:	74 03                	je     c0000892 <toupper+0x13>
c000088f:	83 e8 20             	sub    eax,0x20
c0000892:	c3                   	ret    

c0000893 <tolower>:
c0000893:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000897:	0f b6 d0             	movzx  edx,al
c000089a:	f6 82 a0 7b 02 c0 01 	test   BYTE PTR [edx-0x3ffd8460],0x1
c00008a1:	74 03                	je     c00008a6 <tolower+0x13>
c00008a3:	83 c0 20             	add    eax,0x20
c00008a6:	c3                   	ret    

c00008a7 <simple_strtoul>:
c00008a7:	55                   	push   ebp
c00008a8:	57                   	push   edi
c00008a9:	56                   	push   esi
c00008aa:	53                   	push   ebx
c00008ab:	83 ec 08             	sub    esp,0x8
c00008ae:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008b2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008b6:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008b9:	f6 82 a0 7b 02 c0 08 	test   BYTE PTR [edx-0x3ffd8460],0x8
c00008c0:	74 03                	je     c00008c5 <simple_strtoul+0x1e>
c00008c2:	41                   	inc    ecx
c00008c3:	eb f1                	jmp    c00008b6 <simple_strtoul+0xf>
c00008c5:	80 fa 09             	cmp    dl,0x9
c00008c8:	74 f8                	je     c00008c2 <simple_strtoul+0x1b>
c00008ca:	80 fa 2d             	cmp    dl,0x2d
c00008cd:	75 0b                	jne    c00008da <simple_strtoul+0x33>
c00008cf:	41                   	inc    ecx
c00008d0:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00008d8:	eb 0e                	jmp    c00008e8 <simple_strtoul+0x41>
c00008da:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00008e2:	80 fa 2b             	cmp    dl,0x2b
c00008e5:	75 01                	jne    c00008e8 <simple_strtoul+0x41>
c00008e7:	41                   	inc    ecx
c00008e8:	85 f6                	test   esi,esi
c00008ea:	75 22                	jne    c000090e <simple_strtoul+0x67>
c00008ec:	be 0a 00 00 00       	mov    esi,0xa
c00008f1:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008f4:	75 5a                	jne    c0000950 <simple_strtoul+0xa9>
c00008f6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008fa:	50                   	push   eax
c00008fb:	e8 93 ff ff ff       	call   c0000893 <tolower>
c0000900:	5a                   	pop    edx
c0000901:	83 f8 78             	cmp    eax,0x78
c0000904:	74 03                	je     c0000909 <simple_strtoul+0x62>
c0000906:	41                   	inc    ecx
c0000907:	eb 16                	jmp    c000091f <simple_strtoul+0x78>
c0000909:	83 c1 02             	add    ecx,0x2
c000090c:	eb 22                	jmp    c0000930 <simple_strtoul+0x89>
c000090e:	8d 46 fe             	lea    eax,[esi-0x2]
c0000911:	83 f8 22             	cmp    eax,0x22
c0000914:	0f 87 b7 00 00 00    	ja     c00009d1 <simple_strtoul+0x12a>
c000091a:	83 fe 08             	cmp    esi,0x8
c000091d:	75 0c                	jne    c000092b <simple_strtoul+0x84>
c000091f:	be 08 00 00 00       	mov    esi,0x8
c0000924:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000927:	75 27                	jne    c0000950 <simple_strtoul+0xa9>
c0000929:	eb 1f                	jmp    c000094a <simple_strtoul+0xa3>
c000092b:	83 fe 10             	cmp    esi,0x10
c000092e:	75 20                	jne    c0000950 <simple_strtoul+0xa9>
c0000930:	be 10 00 00 00       	mov    esi,0x10
c0000935:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000938:	75 16                	jne    c0000950 <simple_strtoul+0xa9>
c000093a:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c000093e:	50                   	push   eax
c000093f:	e8 4f ff ff ff       	call   c0000893 <tolower>
c0000944:	5d                   	pop    ebp
c0000945:	83 f8 78             	cmp    eax,0x78
c0000948:	74 03                	je     c000094d <simple_strtoul+0xa6>
c000094a:	41                   	inc    ecx
c000094b:	eb 03                	jmp    c0000950 <simple_strtoul+0xa9>
c000094d:	83 c1 02             	add    ecx,0x2
c0000950:	31 ed                	xor    ebp,ebp
c0000952:	31 db                	xor    ebx,ebx
c0000954:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000095b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000095d:	84 d2                	test   dl,dl
c000095f:	74 27                	je     c0000988 <simple_strtoul+0xe1>
c0000961:	0f b6 fa             	movzx  edi,dl
c0000964:	f6 87 a0 7b 02 c0 04 	test   BYTE PTR [edi-0x3ffd8460],0x4
c000096b:	74 05                	je     c0000972 <simple_strtoul+0xcb>
c000096d:	83 ef 30             	sub    edi,0x30
c0000970:	eb 22                	jmp    c0000994 <simple_strtoul+0xed>
c0000972:	0f be d2             	movsx  edx,dl
c0000975:	52                   	push   edx
c0000976:	e8 04 ff ff ff       	call   c000087f <toupper>
c000097b:	5f                   	pop    edi
c000097c:	0f b6 d0             	movzx  edx,al
c000097f:	f6 82 a0 7b 02 c0 01 	test   BYTE PTR [edx-0x3ffd8460],0x1
c0000986:	75 09                	jne    c0000991 <simple_strtoul+0xea>
c0000988:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000098d:	75 2d                	jne    c00009bc <simple_strtoul+0x115>
c000098f:	eb 57                	jmp    c00009e8 <simple_strtoul+0x141>
c0000991:	8d 78 c9             	lea    edi,[eax-0x37]
c0000994:	39 f7                	cmp    edi,esi
c0000996:	73 f0                	jae    c0000988 <simple_strtoul+0xe1>
c0000998:	31 d2                	xor    edx,edx
c000099a:	89 f8                	mov    eax,edi
c000099c:	f7 d0                	not    eax
c000099e:	f7 f6                	div    esi
c00009a0:	39 d8                	cmp    eax,ebx
c00009a2:	72 0e                	jb     c00009b2 <simple_strtoul+0x10b>
c00009a4:	0f af de             	imul   ebx,esi
c00009a7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009ae:	01 fb                	add    ebx,edi
c00009b0:	eb 07                	jmp    c00009b9 <simple_strtoul+0x112>
c00009b2:	bd 01 00 00 00       	mov    ebp,0x1
c00009b7:	31 db                	xor    ebx,ebx
c00009b9:	41                   	inc    ecx
c00009ba:	eb 9f                	jmp    c000095b <simple_strtoul+0xb4>
c00009bc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009bf:	09 d8                	or     eax,ebx
c00009c1:	75 1f                	jne    c00009e2 <simple_strtoul+0x13b>
c00009c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009c7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00009cb:	31 db                	xor    ebx,ebx
c00009cd:	89 38                	mov    DWORD PTR [eax],edi
c00009cf:	eb 17                	jmp    c00009e8 <simple_strtoul+0x141>
c00009d1:	31 db                	xor    ebx,ebx
c00009d3:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009d8:	74 14                	je     c00009ee <simple_strtoul+0x147>
c00009da:	31 ed                	xor    ebp,ebp
c00009dc:	85 c9                	test   ecx,ecx
c00009de:	75 e3                	jne    c00009c3 <simple_strtoul+0x11c>
c00009e0:	31 db                	xor    ebx,ebx
c00009e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e6:	89 08                	mov    DWORD PTR [eax],ecx
c00009e8:	4d                   	dec    ebp
c00009e9:	75 03                	jne    c00009ee <simple_strtoul+0x147>
c00009eb:	83 cb ff             	or     ebx,0xffffffff
c00009ee:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009f3:	75 02                	jne    c00009f7 <simple_strtoul+0x150>
c00009f5:	f7 db                	neg    ebx
c00009f7:	83 c4 08             	add    esp,0x8
c00009fa:	89 d8                	mov    eax,ebx
c00009fc:	5b                   	pop    ebx
c00009fd:	5e                   	pop    esi
c00009fe:	5f                   	pop    edi
c00009ff:	5d                   	pop    ebp
c0000a00:	c3                   	ret    

c0000a01 <largebin_index>:
c0000a01:	89 c2                	mov    edx,eax
c0000a03:	c1 ea 08             	shr    edx,0x8
c0000a06:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a0c:	77 10                	ja     c0000a1e <largebin_index+0x1d>
c0000a0e:	0f bd d2             	bsr    edx,edx
c0000a11:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a14:	d3 e8                	shr    eax,cl
c0000a16:	83 e0 03             	and    eax,0x3
c0000a19:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a1d:	c3                   	ret    
c0000a1e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a23:	c3                   	ret    

c0000a24 <malloc_init_state>:
c0000a24:	53                   	push   ebx
c0000a25:	8d 50 34             	lea    edx,[eax+0x34]
c0000a28:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a2e:	89 d1                	mov    ecx,edx
c0000a30:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a33:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a36:	83 c2 08             	add    edx,0x8
c0000a39:	39 da                	cmp    edx,ebx
c0000a3b:	75 f3                	jne    c0000a30 <malloc_init_state+0xc>
c0000a3d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a3f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a49:	83 e2 03             	and    edx,0x3
c0000a4c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a56:	83 ca 48             	or     edx,0x48
c0000a59:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000a63:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000a6d:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000a74:	89 10                	mov    DWORD PTR [eax],edx
c0000a76:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000a79:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a83:	5b                   	pop    ebx
c0000a84:	c3                   	ret    

c0000a85 <malloc_consolidate>:
c0000a85:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a87:	85 d2                	test   edx,edx
c0000a89:	0f 84 d8 00 00 00    	je     c0000b67 <malloc_consolidate+0xe2>
c0000a8f:	55                   	push   ebp
c0000a90:	83 e2 fd             	and    edx,0xfffffffd
c0000a93:	57                   	push   edi
c0000a94:	89 c5                	mov    ebp,eax
c0000a96:	56                   	push   esi
c0000a97:	8d 78 34             	lea    edi,[eax+0x34]
c0000a9a:	53                   	push   ebx
c0000a9b:	83 ec 10             	sub    esp,0x10
c0000a9e:	89 10                	mov    DWORD PTR [eax],edx
c0000aa0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000aa4:	c1 ea 03             	shr    edx,0x3
c0000aa7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000aab:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000aaf:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ab2:	85 d2                	test   edx,edx
c0000ab4:	0f 84 98 00 00 00    	je     c0000b52 <malloc_consolidate+0xcd>
c0000aba:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ac1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000ac4:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ac7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000acb:	89 f9                	mov    ecx,edi
c0000acd:	83 e1 fe             	and    ecx,0xfffffffe
c0000ad0:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ad3:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000ad6:	83 e3 fc             	and    ebx,0xfffffffc
c0000ad9:	83 e7 01             	and    edi,0x1
c0000adc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000adf:	75 14                	jne    c0000af5 <malloc_consolidate+0x70>
c0000ae1:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000ae3:	29 fa                	sub    edx,edi
c0000ae5:	01 f9                	add    ecx,edi
c0000ae7:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000aea:	89 fb                	mov    ebx,edi
c0000aec:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000aef:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000af2:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000af5:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000af8:	74 40                	je     c0000b3a <malloc_consolidate+0xb5>
c0000afa:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000afd:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b00:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b04:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b07:	83 e7 01             	and    edi,0x1
c0000b0a:	75 0e                	jne    c0000b1a <malloc_consolidate+0x95>
c0000b0c:	01 d9                	add    ecx,ebx
c0000b0e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b11:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b14:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b17:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b1a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b1d:	89 ce                	mov    esi,ecx
c0000b1f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b22:	83 ce 01             	or     esi,0x1
c0000b25:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b28:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b2b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b2e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b32:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b35:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b38:	eb 0c                	jmp    c0000b46 <malloc_consolidate+0xc1>
c0000b3a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b3d:	83 c9 01             	or     ecx,0x1
c0000b40:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b43:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b46:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b4a:	85 d2                	test   edx,edx
c0000b4c:	0f 85 6f ff ff ff    	jne    c0000ac1 <malloc_consolidate+0x3c>
c0000b52:	83 c5 04             	add    ebp,0x4
c0000b55:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b59:	0f 85 50 ff ff ff    	jne    c0000aaf <malloc_consolidate+0x2a>
c0000b5f:	83 c4 10             	add    esp,0x10
c0000b62:	5b                   	pop    ebx
c0000b63:	5e                   	pop    esi
c0000b64:	5f                   	pop    edi
c0000b65:	5d                   	pop    ebp
c0000b66:	c3                   	ret    
c0000b67:	e9 b8 fe ff ff       	jmp    c0000a24 <malloc_init_state>

c0000b6c <dlfree>:
c0000b6c:	57                   	push   edi
c0000b6d:	56                   	push   esi
c0000b6e:	53                   	push   ebx
c0000b6f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000b73:	85 db                	test   ebx,ebx
c0000b75:	0f 84 e2 00 00 00    	je     c0000c5d <dlfree+0xf1>
c0000b7b:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000b7e:	8b 0d 20 c5 02 c0    	mov    ecx,DWORD PTR ds:0xc002c520
c0000b84:	89 f0                	mov    eax,esi
c0000b86:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b89:	83 e0 fc             	and    eax,0xfffffffc
c0000b8c:	39 c1                	cmp    ecx,eax
c0000b8e:	72 24                	jb     c0000bb4 <dlfree+0x48>
c0000b90:	83 c9 03             	or     ecx,0x3
c0000b93:	c1 e8 03             	shr    eax,0x3
c0000b96:	89 0d 20 c5 02 c0    	mov    DWORD PTR ds:0xc002c520,ecx
c0000b9c:	83 e8 02             	sub    eax,0x2
c0000b9f:	8b 0c 85 24 c5 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3adc]
c0000ba6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000ba8:	89 14 85 24 c5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3adc],edx
c0000baf:	e9 a9 00 00 00       	jmp    c0000c5d <dlfree+0xf1>
c0000bb4:	83 e6 02             	and    esi,0x2
c0000bb7:	0f 85 a0 00 00 00    	jne    c0000c5d <dlfree+0xf1>
c0000bbd:	83 c9 01             	or     ecx,0x1
c0000bc0:	8d 34 02             	lea    esi,[edx+eax*1]
c0000bc3:	89 0d 20 c5 02 c0    	mov    DWORD PTR ds:0xc002c520,ecx
c0000bc9:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000bcc:	83 e1 fc             	and    ecx,0xfffffffc
c0000bcf:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000bd3:	75 13                	jne    c0000be8 <dlfree+0x7c>
c0000bd5:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000bd8:	29 da                	sub    edx,ebx
c0000bda:	01 d8                	add    eax,ebx
c0000bdc:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000bdf:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000be2:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000be5:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000be8:	39 35 4c c5 02 c0    	cmp    DWORD PTR ds:0xc002c54c,esi
c0000bee:	74 40                	je     c0000c30 <dlfree+0xc4>
c0000bf0:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000bf4:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000bf7:	80 e3 01             	and    bl,0x1
c0000bfa:	75 0e                	jne    c0000c0a <dlfree+0x9e>
c0000bfc:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000bff:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c02:	01 c8                	add    eax,ecx
c0000c04:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c07:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c0a:	8b 0d 5c c5 02 c0    	mov    ecx,DWORD PTR ds:0xc002c55c
c0000c10:	c7 42 0c 54 c5 02 c0 	mov    DWORD PTR [edx+0xc],0xc002c554
c0000c17:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c1a:	89 15 5c c5 02 c0    	mov    DWORD PTR ds:0xc002c55c,edx
c0000c20:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c23:	89 c1                	mov    ecx,eax
c0000c25:	83 c9 01             	or     ecx,0x1
c0000c28:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c2b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c2e:	eb 10                	jmp    c0000c40 <dlfree+0xd4>
c0000c30:	01 c8                	add    eax,ecx
c0000c32:	89 c1                	mov    ecx,eax
c0000c34:	83 c9 01             	or     ecx,0x1
c0000c37:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c3a:	89 15 4c c5 02 c0    	mov    DWORD PTR ds:0xc002c54c,edx
c0000c40:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c45:	76 16                	jbe    c0000c5d <dlfree+0xf1>
c0000c47:	f6 05 20 c5 02 c0 02 	test   BYTE PTR ds:0xc002c520,0x2
c0000c4e:	74 0d                	je     c0000c5d <dlfree+0xf1>
c0000c50:	5b                   	pop    ebx
c0000c51:	b8 20 c5 02 c0       	mov    eax,0xc002c520
c0000c56:	5e                   	pop    esi
c0000c57:	5f                   	pop    edi
c0000c58:	e9 28 fe ff ff       	jmp    c0000a85 <malloc_consolidate>
c0000c5d:	5b                   	pop    ebx
c0000c5e:	5e                   	pop    esi
c0000c5f:	5f                   	pop    edi
c0000c60:	c3                   	ret    

c0000c61 <sYSMALLOc>:
c0000c61:	55                   	push   ebp
c0000c62:	57                   	push   edi
c0000c63:	56                   	push   esi
c0000c64:	53                   	push   ebx
c0000c65:	89 d3                	mov    ebx,edx
c0000c67:	83 ec 2c             	sub    esp,0x2c
c0000c6a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000c6e:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000c74:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000c77:	8d 42 ff             	lea    eax,[edx-0x1]
c0000c7a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000c7e:	74 1f                	je     c0000c9f <sYSMALLOc+0x3e>
c0000c80:	89 d8                	mov    eax,ebx
c0000c82:	e8 fe fd ff ff       	call   c0000a85 <malloc_consolidate>
c0000c87:	83 ec 0c             	sub    esp,0xc
c0000c8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c8e:	83 e8 07             	sub    eax,0x7
c0000c91:	50                   	push   eax
c0000c92:	e8 30 02 00 00       	call   c0000ec7 <dlmalloc>
c0000c97:	83 c4 10             	add    esp,0x10
c0000c9a:	e9 20 02 00 00       	jmp    c0000ebf <sYSMALLOc+0x25e>
c0000c9f:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ca2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ca8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000cab:	83 e0 fc             	and    eax,0xfffffffc
c0000cae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000cb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000cb6:	83 c0 10             	add    eax,0x10
c0000cb9:	01 c1                	add    ecx,eax
c0000cbb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000cbf:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000cc6:	74 04                	je     c0000ccc <sYSMALLOc+0x6b>
c0000cc8:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ccc:	f7 da                	neg    edx
c0000cce:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000cd2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000cd6:	21 d1                	and    ecx,edx
c0000cd8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000cdc:	7f 07                	jg     c0000ce5 <sYSMALLOc+0x84>
c0000cde:	31 c0                	xor    eax,eax
c0000ce0:	e9 da 01 00 00       	jmp    c0000ebf <sYSMALLOc+0x25e>
c0000ce5:	83 ec 0c             	sub    esp,0xc
c0000ce8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000cec:	e8 3a e6 00 00       	call   c000f32b <sbrk>
c0000cf1:	83 c4 10             	add    esp,0x10
c0000cf4:	89 c6                	mov    esi,eax
c0000cf6:	83 f8 ff             	cmp    eax,0xffffffff
c0000cf9:	74 e3                	je     c0000cde <sYSMALLOc+0x7d>
c0000cfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000cff:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000d03:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000d06:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000d0c:	39 f1                	cmp    ecx,esi
c0000d0e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000d14:	75 13                	jne    c0000d29 <sYSMALLOc+0xc8>
c0000d16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d1a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d1e:	83 c8 01             	or     eax,0x1
c0000d21:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d24:	e9 3e 01 00 00       	jmp    c0000e67 <sYSMALLOc+0x206>
c0000d29:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000d2f:	88 d0                	mov    al,dl
c0000d31:	83 e0 01             	and    eax,0x1
c0000d34:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d39:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000d3d:	0f 95 c0             	setne  al
c0000d40:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000d44:	39 f1                	cmp    ecx,esi
c0000d46:	76 12                	jbe    c0000d5a <sYSMALLOc+0xf9>
c0000d48:	84 c0                	test   al,al
c0000d4a:	74 0e                	je     c0000d5a <sYSMALLOc+0xf9>
c0000d4c:	83 e2 fe             	and    edx,0xfffffffe
c0000d4f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000d55:	e9 83 00 00 00       	jmp    c0000ddd <sYSMALLOc+0x17c>
c0000d5a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000d5f:	74 7c                	je     c0000ddd <sYSMALLOc+0x17c>
c0000d61:	84 c0                	test   al,al
c0000d63:	74 0c                	je     c0000d71 <sYSMALLOc+0x110>
c0000d65:	89 f0                	mov    eax,esi
c0000d67:	29 c8                	sub    eax,ecx
c0000d69:	01 e8                	add    eax,ebp
c0000d6b:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000d71:	89 f2                	mov    edx,esi
c0000d73:	83 e2 07             	and    edx,0x7
c0000d76:	74 0c                	je     c0000d84 <sYSMALLOc+0x123>
c0000d78:	b8 08 00 00 00       	mov    eax,0x8
c0000d7d:	29 d0                	sub    eax,edx
c0000d7f:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000d82:	eb 04                	jmp    c0000d88 <sYSMALLOc+0x127>
c0000d84:	89 f5                	mov    ebp,esi
c0000d86:	31 c0                	xor    eax,eax
c0000d88:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d8c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d90:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d94:	01 c1                	add    ecx,eax
c0000d96:	83 ec 0c             	sub    esp,0xc
c0000d99:	01 f1                	add    ecx,esi
c0000d9b:	01 ca                	add    edx,ecx
c0000d9d:	29 c8                	sub    eax,ecx
c0000d9f:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000da3:	01 c2                	add    edx,eax
c0000da5:	52                   	push   edx
c0000da6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000daa:	e8 7c e5 00 00       	call   c000f32b <sbrk>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	83 f8 ff             	cmp    eax,0xffffffff
c0000db5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000db9:	75 0f                	jne    c0000dca <sYSMALLOc+0x169>
c0000dbb:	83 ec 0c             	sub    esp,0xc
c0000dbe:	6a 00                	push   0x0
c0000dc0:	e8 66 e5 00 00       	call   c000f32b <sbrk>
c0000dc5:	83 c4 10             	add    esp,0x10
c0000dc8:	eb 30                	jmp    c0000dfa <sYSMALLOc+0x199>
c0000dca:	39 c6                	cmp    esi,eax
c0000dcc:	76 33                	jbe    c0000e01 <sYSMALLOc+0x1a0>
c0000dce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000dd2:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000dd9:	01 f0                	add    eax,esi
c0000ddb:	eb 1d                	jmp    c0000dfa <sYSMALLOc+0x199>
c0000ddd:	83 ec 0c             	sub    esp,0xc
c0000de0:	89 f5                	mov    ebp,esi
c0000de2:	6a 00                	push   0x0
c0000de4:	e8 42 e5 00 00       	call   c000f32b <sbrk>
c0000de9:	89 c2                	mov    edx,eax
c0000deb:	29 f2                	sub    edx,esi
c0000ded:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000df1:	83 c4 10             	add    esp,0x10
c0000df4:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000dfa:	31 d2                	xor    edx,edx
c0000dfc:	83 f8 ff             	cmp    eax,0xffffffff
c0000dff:	74 66                	je     c0000e67 <sYSMALLOc+0x206>
c0000e01:	29 e8                	sub    eax,ebp
c0000e03:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000e06:	01 d0                	add    eax,edx
c0000e08:	83 c8 01             	or     eax,0x1
c0000e0b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000e0e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e14:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e19:	74 4c                	je     c0000e67 <sYSMALLOc+0x206>
c0000e1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e1f:	83 e8 0c             	sub    eax,0xc
c0000e22:	83 e0 f8             	and    eax,0xfffffff8
c0000e25:	89 c2                	mov    edx,eax
c0000e27:	83 ca 01             	or     edx,0x1
c0000e2a:	83 f8 0f             	cmp    eax,0xf
c0000e2d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e30:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e38:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e40:	76 25                	jbe    c0000e67 <sYSMALLOc+0x206>
c0000e42:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000e48:	83 ec 0c             	sub    esp,0xc
c0000e4b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000e55:	83 c7 08             	add    edi,0x8
c0000e58:	57                   	push   edi
c0000e59:	e8 0e fd ff ff       	call   c0000b6c <dlfree>
c0000e5e:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000e64:	83 c4 10             	add    esp,0x10
c0000e67:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000e6d:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000e73:	73 06                	jae    c0000e7b <sYSMALLOc+0x21a>
c0000e75:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000e7b:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000e81:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e87:	73 06                	jae    c0000e8f <sYSMALLOc+0x22e>
c0000e89:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e8f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e92:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e95:	83 e2 fc             	and    edx,0xfffffffc
c0000e98:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e9c:	0f 82 3c fe ff ff    	jb     c0000cde <sYSMALLOc+0x7d>
c0000ea2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ea6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ea9:	29 fa                	sub    edx,edi
c0000eab:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000eae:	83 ca 01             	or     edx,0x1
c0000eb1:	89 fb                	mov    ebx,edi
c0000eb3:	83 c0 08             	add    eax,0x8
c0000eb6:	83 cb 01             	or     ebx,0x1
c0000eb9:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000ebc:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000ebf:	83 c4 2c             	add    esp,0x2c
c0000ec2:	5b                   	pop    ebx
c0000ec3:	5e                   	pop    esi
c0000ec4:	5f                   	pop    edi
c0000ec5:	5d                   	pop    ebp
c0000ec6:	c3                   	ret    

c0000ec7 <dlmalloc>:
c0000ec7:	55                   	push   ebp
c0000ec8:	57                   	push   edi
c0000ec9:	56                   	push   esi
c0000eca:	53                   	push   ebx
c0000ecb:	83 ec 1c             	sub    esp,0x1c
c0000ece:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000ed2:	83 f8 df             	cmp    eax,0xffffffdf
c0000ed5:	0f 87 70 03 00 00    	ja     c000124b <dlmalloc+0x384>
c0000edb:	83 c0 0b             	add    eax,0xb
c0000ede:	be 10 00 00 00       	mov    esi,0x10
c0000ee3:	83 f8 0f             	cmp    eax,0xf
c0000ee6:	76 05                	jbe    c0000eed <dlmalloc+0x26>
c0000ee8:	83 e0 f8             	and    eax,0xfffffff8
c0000eeb:	89 c6                	mov    esi,eax
c0000eed:	8b 3d 20 c5 02 c0    	mov    edi,DWORD PTR ds:0xc002c520
c0000ef3:	f7 c7 01 00 00 00    	test   edi,0x1
c0000ef9:	75 17                	jne    c0000f12 <dlmalloc+0x4b>
c0000efb:	85 ff                	test   edi,edi
c0000efd:	0f 85 05 03 00 00    	jne    c0001208 <dlmalloc+0x341>
c0000f03:	b8 20 c5 02 c0       	mov    eax,0xc002c520
c0000f08:	e8 78 fb ff ff       	call   c0000a85 <malloc_consolidate>
c0000f0d:	e9 f6 02 00 00       	jmp    c0001208 <dlmalloc+0x341>
c0000f12:	39 f7                	cmp    edi,esi
c0000f14:	72 1f                	jb     c0000f35 <dlmalloc+0x6e>
c0000f16:	89 f2                	mov    edx,esi
c0000f18:	c1 ea 03             	shr    edx,0x3
c0000f1b:	83 ea 02             	sub    edx,0x2
c0000f1e:	8b 04 95 24 c5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3adc]
c0000f25:	85 c0                	test   eax,eax
c0000f27:	74 0c                	je     c0000f35 <dlmalloc+0x6e>
c0000f29:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f2c:	89 0c 95 24 c5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3adc],ecx
c0000f33:	eb 30                	jmp    c0000f65 <dlmalloc+0x9e>
c0000f35:	89 f0                	mov    eax,esi
c0000f37:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f3d:	77 2e                	ja     c0000f6d <dlmalloc+0xa6>
c0000f3f:	c1 e8 03             	shr    eax,0x3
c0000f42:	8d 14 c5 54 c5 02 c0 	lea    edx,[eax*8-0x3ffd3aac]
c0000f49:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f4d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f50:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f53:	39 c3                	cmp    ebx,eax
c0000f55:	74 2e                	je     c0000f85 <dlmalloc+0xbe>
c0000f57:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f5a:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000f5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f62:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000f65:	83 c0 08             	add    eax,0x8
c0000f68:	e9 e0 02 00 00       	jmp    c000124d <dlmalloc+0x386>
c0000f6d:	e8 8f fa ff ff       	call   c0000a01 <largebin_index>
c0000f72:	83 e7 02             	and    edi,0x2
c0000f75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f79:	74 0a                	je     c0000f85 <dlmalloc+0xbe>
c0000f7b:	b8 20 c5 02 c0       	mov    eax,0xc002c520
c0000f80:	e8 00 fb ff ff       	call   c0000a85 <malloc_consolidate>
c0000f85:	8d 46 10             	lea    eax,[esi+0x10]
c0000f88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f8c:	8b 1d 60 c5 02 c0    	mov    ebx,DWORD PTR ds:0xc002c560
c0000f92:	81 fb 54 c5 02 c0    	cmp    ebx,0xc002c554
c0000f98:	0f 84 13 01 00 00    	je     c00010b1 <dlmalloc+0x1ea>
c0000f9e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000fa1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000fa4:	83 e7 fc             	and    edi,0xfffffffc
c0000fa7:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000fad:	77 4c                	ja     c0000ffb <dlmalloc+0x134>
c0000faf:	3d 54 c5 02 c0       	cmp    eax,0xc002c554
c0000fb4:	75 45                	jne    c0000ffb <dlmalloc+0x134>
c0000fb6:	39 1d 50 c5 02 c0    	cmp    DWORD PTR ds:0xc002c550,ebx
c0000fbc:	75 3d                	jne    c0000ffb <dlmalloc+0x134>
c0000fbe:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000fc2:	73 37                	jae    c0000ffb <dlmalloc+0x134>
c0000fc4:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000fc7:	89 fa                	mov    edx,edi
c0000fc9:	a3 5c c5 02 c0       	mov    ds:0xc002c55c,eax
c0000fce:	a3 60 c5 02 c0       	mov    ds:0xc002c560,eax
c0000fd3:	a3 50 c5 02 c0       	mov    ds:0xc002c550,eax
c0000fd8:	29 f2                	sub    edx,esi
c0000fda:	c7 40 08 54 c5 02 c0 	mov    DWORD PTR [eax+0x8],0xc002c554
c0000fe1:	c7 40 0c 54 c5 02 c0 	mov    DWORD PTR [eax+0xc],0xc002c554
c0000fe8:	83 ce 01             	or     esi,0x1
c0000feb:	89 d1                	mov    ecx,edx
c0000fed:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000ff0:	83 c9 01             	or     ecx,0x1
c0000ff3:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000ff6:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000ff9:	eb 15                	jmp    c0001010 <dlmalloc+0x149>
c0000ffb:	a3 60 c5 02 c0       	mov    ds:0xc002c560,eax
c0001000:	39 fe                	cmp    esi,edi
c0001002:	c7 40 08 54 c5 02 c0 	mov    DWORD PTR [eax+0x8],0xc002c554
c0001009:	75 0d                	jne    c0001018 <dlmalloc+0x151>
c000100b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001010:	8d 43 08             	lea    eax,[ebx+0x8]
c0001013:	e9 35 02 00 00       	jmp    c000124d <dlmalloc+0x386>
c0001018:	89 f8                	mov    eax,edi
c000101a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001020:	77 19                	ja     c000103b <dlmalloc+0x174>
c0001022:	c1 e8 03             	shr    eax,0x3
c0001025:	8d 14 00             	lea    edx,[eax+eax*1]
c0001028:	83 c2 0d             	add    edx,0xd
c000102b:	8d 2c 95 18 c5 02 c0 	lea    ebp,[edx*4-0x3ffd3ae8]
c0001032:	8b 14 95 20 c5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3ae0]
c0001039:	eb 46                	jmp    c0001081 <dlmalloc+0x1ba>
c000103b:	e8 c1 f9 ff ff       	call   c0000a01 <largebin_index>
c0001040:	8d 14 00             	lea    edx,[eax+eax*1]
c0001043:	83 c2 0d             	add    edx,0xd
c0001046:	8d 0c 95 20 c5 02 c0 	lea    ecx,[edx*4-0x3ffd3ae0]
c000104d:	8b 14 95 20 c5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3ae0]
c0001054:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001057:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000105b:	89 d5                	mov    ebp,edx
c000105d:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001061:	74 1e                	je     c0001081 <dlmalloc+0x1ba>
c0001063:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001066:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001069:	77 12                	ja     c000107d <dlmalloc+0x1b6>
c000106b:	83 cf 01             	or     edi,0x1
c000106e:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001071:	76 05                	jbe    c0001078 <dlmalloc+0x1b1>
c0001073:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001076:	eb f6                	jmp    c000106e <dlmalloc+0x1a7>
c0001078:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000107b:	eb 04                	jmp    c0001081 <dlmalloc+0x1ba>
c000107d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001081:	89 c7                	mov    edi,eax
c0001083:	88 c1                	mov    cl,al
c0001085:	c1 ff 05             	sar    edi,0x5
c0001088:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000108c:	bf 01 00 00 00       	mov    edi,0x1
c0001091:	d3 e7                	shl    edi,cl
c0001093:	89 f8                	mov    eax,edi
c0001095:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001099:	09 04 bd 54 c8 02 c0 	or     DWORD PTR [edi*4-0x3ffd37ac],eax
c00010a0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010a3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00010a6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00010a9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00010ac:	e9 db fe ff ff       	jmp    c0000f8c <dlmalloc+0xc5>
c00010b1:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010b7:	76 78                	jbe    c0001131 <dlmalloc+0x26a>
c00010b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010bd:	8d 04 c5 54 c5 02 c0 	lea    eax,[eax*8-0x3ffd3aac]
c00010c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00010c7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010ca:	39 ca                	cmp    edx,ecx
c00010cc:	74 63                	je     c0001131 <dlmalloc+0x26a>
c00010ce:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00010d1:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00010d4:	83 e3 fc             	and    ebx,0xfffffffc
c00010d7:	39 de                	cmp    esi,ebx
c00010d9:	77 52                	ja     c000112d <dlmalloc+0x266>
c00010db:	89 df                	mov    edi,ebx
c00010dd:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00010e0:	29 f7                	sub    edi,esi
c00010e2:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00010e5:	01 d3                	add    ebx,edx
c00010e7:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00010ea:	83 ff 0f             	cmp    edi,0xf
c00010ed:	8d 42 08             	lea    eax,[edx+0x8]
c00010f0:	77 09                	ja     c00010fb <dlmalloc+0x234>
c00010f2:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00010f6:	e9 52 01 00 00       	jmp    c000124d <dlmalloc+0x386>
c00010fb:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00010fe:	83 ce 01             	or     esi,0x1
c0001101:	89 0d 5c c5 02 c0    	mov    DWORD PTR ds:0xc002c55c,ecx
c0001107:	89 0d 60 c5 02 c0    	mov    DWORD PTR ds:0xc002c560,ecx
c000110d:	c7 41 08 54 c5 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002c554
c0001114:	c7 41 0c 54 c5 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002c554
c000111b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000111e:	89 fa                	mov    edx,edi
c0001120:	83 ca 01             	or     edx,0x1
c0001123:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001126:	89 3b                	mov    DWORD PTR [ebx],edi
c0001128:	e9 20 01 00 00       	jmp    c000124d <dlmalloc+0x386>
c000112d:	89 c2                	mov    edx,eax
c000112f:	eb 99                	jmp    c00010ca <dlmalloc+0x203>
c0001131:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001135:	b8 01 00 00 00       	mov    eax,0x1
c000113a:	41                   	inc    ecx
c000113b:	89 cb                	mov    ebx,ecx
c000113d:	8d 14 cd 4c c5 02 c0 	lea    edx,[ecx*8-0x3ffd3ab4]
c0001144:	c1 eb 05             	shr    ebx,0x5
c0001147:	d3 e0                	shl    eax,cl
c0001149:	8b 3c 9d 54 c8 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd37ac]
c0001150:	39 f8                	cmp    eax,edi
c0001152:	77 04                	ja     c0001158 <dlmalloc+0x291>
c0001154:	85 c0                	test   eax,eax
c0001156:	75 26                	jne    c000117e <dlmalloc+0x2b7>
c0001158:	43                   	inc    ebx
c0001159:	83 fb 02             	cmp    ebx,0x2
c000115c:	0f 87 a6 00 00 00    	ja     c0001208 <dlmalloc+0x341>
c0001162:	8b 3c 9d 54 c8 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd37ac]
c0001169:	85 ff                	test   edi,edi
c000116b:	74 eb                	je     c0001158 <dlmalloc+0x291>
c000116d:	89 d8                	mov    eax,ebx
c000116f:	c1 e0 06             	shl    eax,0x6
c0001172:	8d 14 85 4c c5 02 c0 	lea    edx,[eax*4-0x3ffd3ab4]
c0001179:	b8 01 00 00 00       	mov    eax,0x1
c000117e:	85 f8                	test   eax,edi
c0001180:	75 07                	jne    c0001189 <dlmalloc+0x2c2>
c0001182:	83 c2 08             	add    edx,0x8
c0001185:	01 c0                	add    eax,eax
c0001187:	eb f5                	jmp    c000117e <dlmalloc+0x2b7>
c0001189:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000118c:	39 ca                	cmp    edx,ecx
c000118e:	75 14                	jne    c00011a4 <dlmalloc+0x2dd>
c0001190:	89 c1                	mov    ecx,eax
c0001192:	83 c2 08             	add    edx,0x8
c0001195:	f7 d1                	not    ecx
c0001197:	01 c0                	add    eax,eax
c0001199:	21 cf                	and    edi,ecx
c000119b:	89 3c 9d 54 c8 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd37ac],edi
c00011a2:	eb ac                	jmp    c0001150 <dlmalloc+0x289>
c00011a4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00011a7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00011aa:	83 e0 fc             	and    eax,0xfffffffc
c00011ad:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011b0:	89 c3                	mov    ebx,eax
c00011b2:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011b5:	29 f3                	sub    ebx,esi
c00011b7:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011ba:	83 fb 0f             	cmp    ebx,0xf
c00011bd:	8d 41 08             	lea    eax,[ecx+0x8]
c00011c0:	77 09                	ja     c00011cb <dlmalloc+0x304>
c00011c2:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00011c6:	e9 82 00 00 00       	jmp    c000124d <dlmalloc+0x386>
c00011cb:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00011ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d4:	89 3d 5c c5 02 c0    	mov    DWORD PTR ds:0xc002c55c,edi
c00011da:	89 3d 60 c5 02 c0    	mov    DWORD PTR ds:0xc002c560,edi
c00011e0:	c7 47 08 54 c5 02 c0 	mov    DWORD PTR [edi+0x8],0xc002c554
c00011e7:	c7 47 0c 54 c5 02 c0 	mov    DWORD PTR [edi+0xc],0xc002c554
c00011ee:	77 06                	ja     c00011f6 <dlmalloc+0x32f>
c00011f0:	89 3d 50 c5 02 c0    	mov    DWORD PTR ds:0xc002c550,edi
c00011f6:	83 ce 01             	or     esi,0x1
c00011f9:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00011fc:	89 d9                	mov    ecx,ebx
c00011fe:	83 c9 01             	or     ecx,0x1
c0001201:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001204:	89 1a                	mov    DWORD PTR [edx],ebx
c0001206:	eb 45                	jmp    c000124d <dlmalloc+0x386>
c0001208:	a1 4c c5 02 c0       	mov    eax,ds:0xc002c54c
c000120d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001210:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001213:	83 e2 fc             	and    edx,0xfffffffc
c0001216:	39 d1                	cmp    ecx,edx
c0001218:	77 1e                	ja     c0001238 <dlmalloc+0x371>
c000121a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000121d:	89 f3                	mov    ebx,esi
c000121f:	89 0d 4c c5 02 c0    	mov    DWORD PTR ds:0xc002c54c,ecx
c0001225:	83 cb 01             	or     ebx,0x1
c0001228:	29 f2                	sub    edx,esi
c000122a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000122d:	83 ca 01             	or     edx,0x1
c0001230:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001233:	e9 2d fd ff ff       	jmp    c0000f65 <dlmalloc+0x9e>
c0001238:	83 c4 1c             	add    esp,0x1c
c000123b:	89 f0                	mov    eax,esi
c000123d:	5b                   	pop    ebx
c000123e:	ba 20 c5 02 c0       	mov    edx,0xc002c520
c0001243:	5e                   	pop    esi
c0001244:	5f                   	pop    edi
c0001245:	5d                   	pop    ebp
c0001246:	e9 16 fa ff ff       	jmp    c0000c61 <sYSMALLOc>
c000124b:	31 c0                	xor    eax,eax
c000124d:	83 c4 1c             	add    esp,0x1c
c0001250:	5b                   	pop    ebx
c0001251:	5e                   	pop    esi
c0001252:	5f                   	pop    edi
c0001253:	5d                   	pop    ebp
c0001254:	c3                   	ret    

c0001255 <iALLOc>:
c0001255:	55                   	push   ebp
c0001256:	89 c5                	mov    ebp,eax
c0001258:	57                   	push   edi
c0001259:	56                   	push   esi
c000125a:	53                   	push   ebx
c000125b:	83 ec 2c             	sub    esp,0x2c
c000125e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001262:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001266:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000126a:	83 3d 20 c5 02 c0 00 	cmp    DWORD PTR ds:0xc002c520,0x0
c0001271:	75 12                	jne    c0001285 <iALLOc+0x30>
c0001273:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001277:	b8 20 c5 02 c0       	mov    eax,0xc002c520
c000127c:	e8 04 f8 ff ff       	call   c0000a85 <malloc_consolidate>
c0001281:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001285:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000128a:	74 12                	je     c000129e <iALLOc+0x49>
c000128c:	85 ed                	test   ebp,ebp
c000128e:	0f 84 64 01 00 00    	je     c00013f8 <iALLOc+0x1a3>
c0001294:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000129c:	eb 33                	jmp    c00012d1 <iALLOc+0x7c>
c000129e:	85 ed                	test   ebp,ebp
c00012a0:	75 14                	jne    c00012b6 <iALLOc+0x61>
c00012a2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00012aa:	83 c4 2c             	add    esp,0x2c
c00012ad:	5b                   	pop    ebx
c00012ae:	5e                   	pop    esi
c00012af:	5f                   	pop    edi
c00012b0:	5d                   	pop    ebp
c00012b1:	e9 11 fc ff ff       	jmp    c0000ec7 <dlmalloc>
c00012b6:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012bd:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00012c5:	83 f8 0f             	cmp    eax,0xf
c00012c8:	76 07                	jbe    c00012d1 <iALLOc+0x7c>
c00012ca:	83 e0 f8             	and    eax,0xfffffff8
c00012cd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00012d1:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00012d6:	75 09                	jne    c00012e1 <iALLOc+0x8c>
c00012d8:	89 d0                	mov    eax,edx
c00012da:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00012dd:	31 f6                	xor    esi,esi
c00012df:	eb 3b                	jmp    c000131c <iALLOc+0xc7>
c00012e1:	8b 02                	mov    eax,DWORD PTR [edx]
c00012e3:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00012eb:	83 c0 0b             	add    eax,0xb
c00012ee:	83 f8 0f             	cmp    eax,0xf
c00012f1:	76 07                	jbe    c00012fa <iALLOc+0xa5>
c00012f3:	83 e0 f8             	and    eax,0xfffffff8
c00012f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00012fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00012fe:	0f af f5             	imul   esi,ebp
c0001301:	eb 25                	jmp    c0001328 <iALLOc+0xd3>
c0001303:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001305:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001308:	bb 10 00 00 00       	mov    ebx,0x10
c000130d:	83 f9 0f             	cmp    ecx,0xf
c0001310:	76 05                	jbe    c0001317 <iALLOc+0xc2>
c0001312:	83 e1 f8             	and    ecx,0xfffffff8
c0001315:	89 cb                	mov    ebx,ecx
c0001317:	01 de                	add    esi,ebx
c0001319:	83 c0 04             	add    eax,0x4
c000131c:	39 c7                	cmp    edi,eax
c000131e:	75 e3                	jne    c0001303 <iALLOc+0xae>
c0001320:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001328:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000132c:	8b 1d 74 c8 02 c0    	mov    ebx,DWORD PTR ds:0xc002c874
c0001332:	83 ec 0c             	sub    esp,0xc
c0001335:	c7 05 74 c8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c874,0x0
c000133f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001343:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001347:	50                   	push   eax
c0001348:	e8 7a fb ff ff       	call   c0000ec7 <dlmalloc>
c000134d:	83 c4 10             	add    esp,0x10
c0001350:	89 1d 74 c8 02 c0    	mov    DWORD PTR ds:0xc002c874,ebx
c0001356:	85 c0                	test   eax,eax
c0001358:	0f 84 92 00 00 00    	je     c00013f0 <iALLOc+0x19b>
c000135e:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001361:	8d 78 f8             	lea    edi,[eax-0x8]
c0001364:	83 e3 fc             	and    ebx,0xfffffffc
c0001367:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000136b:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001370:	74 1e                	je     c0001390 <iALLOc+0x13b>
c0001372:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001376:	89 d9                	mov    ecx,ebx
c0001378:	52                   	push   edx
c0001379:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000137d:	83 e9 04             	sub    ecx,0x4
c0001380:	51                   	push   ecx
c0001381:	6a 00                	push   0x0
c0001383:	50                   	push   eax
c0001384:	e8 02 f3 ff ff       	call   c000068b <memset>
c0001389:	83 c4 10             	add    esp,0x10
c000138c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001390:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001395:	75 14                	jne    c00013ab <iALLOc+0x156>
c0001397:	8d 04 37             	lea    eax,[edi+esi*1]
c000139a:	29 f3                	sub    ebx,esi
c000139c:	8d 48 08             	lea    ecx,[eax+0x8]
c000139f:	83 cb 01             	or     ebx,0x1
c00013a2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013a6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013a9:	89 f3                	mov    ebx,esi
c00013ab:	31 c0                	xor    eax,eax
c00013ad:	4d                   	dec    ebp
c00013ae:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013b1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013b5:	39 c5                	cmp    ebp,eax
c00013b7:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013ba:	74 2c                	je     c00013e8 <iALLOc+0x193>
c00013bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013c0:	85 c9                	test   ecx,ecx
c00013c2:	75 15                	jne    c00013d9 <iALLOc+0x184>
c00013c4:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00013c7:	8d 71 0b             	lea    esi,[ecx+0xb]
c00013ca:	b9 10 00 00 00       	mov    ecx,0x10
c00013cf:	83 fe 0f             	cmp    esi,0xf
c00013d2:	76 05                	jbe    c00013d9 <iALLOc+0x184>
c00013d4:	83 e6 f8             	and    esi,0xfffffff8
c00013d7:	89 f1                	mov    ecx,esi
c00013d9:	89 ce                	mov    esi,ecx
c00013db:	29 cb                	sub    ebx,ecx
c00013dd:	83 ce 01             	or     esi,0x1
c00013e0:	40                   	inc    eax
c00013e1:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00013e4:	01 cf                	add    edi,ecx
c00013e6:	eb c6                	jmp    c00013ae <iALLOc+0x159>
c00013e8:	83 cb 01             	or     ebx,0x1
c00013eb:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00013ee:	eb 08                	jmp    c00013f8 <iALLOc+0x1a3>
c00013f0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00013f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00013fc:	83 c4 2c             	add    esp,0x2c
c00013ff:	5b                   	pop    ebx
c0001400:	5e                   	pop    esi
c0001401:	5f                   	pop    edi
c0001402:	5d                   	pop    ebp
c0001403:	c3                   	ret    

c0001404 <dlrealloc>:
c0001404:	55                   	push   ebp
c0001405:	57                   	push   edi
c0001406:	56                   	push   esi
c0001407:	53                   	push   ebx
c0001408:	83 ec 1c             	sub    esp,0x1c
c000140b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000140f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001413:	85 db                	test   ebx,ebx
c0001415:	75 10                	jne    c0001427 <dlrealloc+0x23>
c0001417:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000141b:	83 c4 1c             	add    esp,0x1c
c000141e:	5b                   	pop    ebx
c000141f:	5e                   	pop    esi
c0001420:	5f                   	pop    edi
c0001421:	5d                   	pop    ebp
c0001422:	e9 a0 fa ff ff       	jmp    c0000ec7 <dlmalloc>
c0001427:	83 f8 df             	cmp    eax,0xffffffdf
c000142a:	76 07                	jbe    c0001433 <dlrealloc+0x2f>
c000142c:	31 db                	xor    ebx,ebx
c000142e:	e9 7c 01 00 00       	jmp    c00015af <dlrealloc+0x1ab>
c0001433:	83 c0 0b             	add    eax,0xb
c0001436:	bf 10 00 00 00       	mov    edi,0x10
c000143b:	83 f8 0f             	cmp    eax,0xf
c000143e:	76 05                	jbe    c0001445 <dlrealloc+0x41>
c0001440:	83 e0 f8             	and    eax,0xfffffff8
c0001443:	89 c7                	mov    edi,eax
c0001445:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001448:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000144b:	89 c6                	mov    esi,eax
c000144d:	83 e6 fc             	and    esi,0xfffffffc
c0001450:	a8 02                	test   al,0x2
c0001452:	75 d8                	jne    c000142c <dlrealloc+0x28>
c0001454:	39 f7                	cmp    edi,esi
c0001456:	0f 86 15 01 00 00    	jbe    c0001571 <dlrealloc+0x16d>
c000145c:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0001460:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001463:	39 15 4c c5 02 c0    	cmp    DWORD PTR ds:0xc002c54c,edx
c0001469:	75 33                	jne    c000149e <dlrealloc+0x9a>
c000146b:	83 e1 fc             	and    ecx,0xfffffffc
c000146e:	01 f1                	add    ecx,esi
c0001470:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001474:	8d 4f 10             	lea    ecx,[edi+0x10]
c0001477:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000147b:	77 49                	ja     c00014c6 <dlrealloc+0xc2>
c000147d:	01 fd                	add    ebp,edi
c000147f:	83 e0 01             	and    eax,0x1
c0001482:	09 f8                	or     eax,edi
c0001484:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001487:	89 2d 4c c5 02 c0    	mov    DWORD PTR ds:0xc002c54c,ebp
c000148d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001491:	29 f8                	sub    eax,edi
c0001493:	83 c8 01             	or     eax,0x1
c0001496:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001499:	e9 11 01 00 00       	jmp    c00015af <dlrealloc+0x1ab>
c000149e:	89 c8                	mov    eax,ecx
c00014a0:	83 e0 fe             	and    eax,0xfffffffe
c00014a3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00014a8:	75 1c                	jne    c00014c6 <dlrealloc+0xc2>
c00014aa:	83 e1 fc             	and    ecx,0xfffffffc
c00014ad:	01 f1                	add    ecx,esi
c00014af:	39 cf                	cmp    edi,ecx
c00014b1:	77 13                	ja     c00014c6 <dlrealloc+0xc2>
c00014b3:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014b6:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014b9:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014bc:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00014bf:	89 ce                	mov    esi,ecx
c00014c1:	e9 ab 00 00 00       	jmp    c0001571 <dlrealloc+0x16d>
c00014c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00014ca:	8d 47 f9             	lea    eax,[edi-0x7]
c00014cd:	83 ec 0c             	sub    esp,0xc
c00014d0:	50                   	push   eax
c00014d1:	e8 f1 f9 ff ff       	call   c0000ec7 <dlmalloc>
c00014d6:	83 c4 10             	add    esp,0x10
c00014d9:	89 c1                	mov    ecx,eax
c00014db:	85 c0                	test   eax,eax
c00014dd:	0f 84 49 ff ff ff    	je     c000142c <dlrealloc+0x28>
c00014e3:	8d 40 f8             	lea    eax,[eax-0x8]
c00014e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00014ea:	39 c2                	cmp    edx,eax
c00014ec:	75 0a                	jne    c00014f8 <dlrealloc+0xf4>
c00014ee:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00014f1:	83 e0 fc             	and    eax,0xfffffffc
c00014f4:	01 c6                	add    esi,eax
c00014f6:	eb 79                	jmp    c0001571 <dlrealloc+0x16d>
c00014f8:	83 ee 04             	sub    esi,0x4
c00014fb:	83 fe 27             	cmp    esi,0x27
c00014fe:	76 16                	jbe    c0001516 <dlrealloc+0x112>
c0001500:	50                   	push   eax
c0001501:	56                   	push   esi
c0001502:	53                   	push   ebx
c0001503:	51                   	push   ecx
c0001504:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001508:	e8 48 f1 ff ff       	call   c0000655 <memcpy>
c000150d:	83 c4 10             	add    esp,0x10
c0001510:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001514:	eb 43                	jmp    c0001559 <dlrealloc+0x155>
c0001516:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001518:	83 fe 13             	cmp    esi,0x13
c000151b:	89 01                	mov    DWORD PTR [ecx],eax
c000151d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001520:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001523:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001526:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001529:	76 2e                	jbe    c0001559 <dlrealloc+0x155>
c000152b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000152e:	83 fe 1b             	cmp    esi,0x1b
c0001531:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001534:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001537:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000153a:	76 1d                	jbe    c0001559 <dlrealloc+0x155>
c000153c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000153f:	83 fe 23             	cmp    esi,0x23
c0001542:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001545:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001548:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000154b:	76 0c                	jbe    c0001559 <dlrealloc+0x155>
c000154d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0001550:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c0001553:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0001556:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c0001559:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000155d:	83 ec 0c             	sub    esp,0xc
c0001560:	53                   	push   ebx
c0001561:	e8 06 f6 ff ff       	call   c0000b6c <dlfree>
c0001566:	83 c4 10             	add    esp,0x10
c0001569:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000156d:	89 cb                	mov    ebx,ecx
c000156f:	eb 3e                	jmp    c00015af <dlrealloc+0x1ab>
c0001571:	89 f2                	mov    edx,esi
c0001573:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001576:	29 fa                	sub    edx,edi
c0001578:	83 e1 01             	and    ecx,0x1
c000157b:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c000157f:	83 fa 0f             	cmp    edx,0xf
c0001582:	77 0b                	ja     c000158f <dlrealloc+0x18b>
c0001584:	09 ce                	or     esi,ecx
c0001586:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001589:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000158d:	eb 20                	jmp    c00015af <dlrealloc+0x1ab>
c000158f:	01 fd                	add    ebp,edi
c0001591:	83 ec 0c             	sub    esp,0xc
c0001594:	09 cf                	or     edi,ecx
c0001596:	83 ca 01             	or     edx,0x1
c0001599:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c000159c:	83 c5 08             	add    ebp,0x8
c000159f:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00015a2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015a6:	55                   	push   ebp
c00015a7:	e8 c0 f5 ff ff       	call   c0000b6c <dlfree>
c00015ac:	83 c4 10             	add    esp,0x10
c00015af:	83 c4 1c             	add    esp,0x1c
c00015b2:	89 d8                	mov    eax,ebx
c00015b4:	5b                   	pop    ebx
c00015b5:	5e                   	pop    esi
c00015b6:	5f                   	pop    edi
c00015b7:	5d                   	pop    ebp
c00015b8:	c3                   	ret    

c00015b9 <dlmemalign>:
c00015b9:	55                   	push   ebp
c00015ba:	57                   	push   edi
c00015bb:	56                   	push   esi
c00015bc:	53                   	push   ebx
c00015bd:	83 ec 0c             	sub    esp,0xc
c00015c0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00015c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00015c8:	83 fa 08             	cmp    edx,0x8
c00015cb:	77 10                	ja     c00015dd <dlmemalign+0x24>
c00015cd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00015d1:	83 c4 0c             	add    esp,0xc
c00015d4:	5b                   	pop    ebx
c00015d5:	5e                   	pop    esi
c00015d6:	5f                   	pop    edi
c00015d7:	5d                   	pop    ebp
c00015d8:	e9 ea f8 ff ff       	jmp    c0000ec7 <dlmalloc>
c00015dd:	bf 10 00 00 00       	mov    edi,0x10
c00015e2:	83 fa 0f             	cmp    edx,0xf
c00015e5:	76 13                	jbe    c00015fa <dlmemalign+0x41>
c00015e7:	8d 4a ff             	lea    ecx,[edx-0x1]
c00015ea:	85 d1                	test   ecx,edx
c00015ec:	75 04                	jne    c00015f2 <dlmemalign+0x39>
c00015ee:	89 d7                	mov    edi,edx
c00015f0:	eb 08                	jmp    c00015fa <dlmemalign+0x41>
c00015f2:	39 d7                	cmp    edi,edx
c00015f4:	73 04                	jae    c00015fa <dlmemalign+0x41>
c00015f6:	01 ff                	add    edi,edi
c00015f8:	eb f8                	jmp    c00015f2 <dlmemalign+0x39>
c00015fa:	83 f8 df             	cmp    eax,0xffffffdf
c00015fd:	76 07                	jbe    c0001606 <dlmemalign+0x4d>
c00015ff:	31 c0                	xor    eax,eax
c0001601:	e9 ce 00 00 00       	jmp    c00016d4 <dlmemalign+0x11b>
c0001606:	83 c0 0b             	add    eax,0xb
c0001609:	bd 10 00 00 00       	mov    ebp,0x10
c000160e:	83 f8 0f             	cmp    eax,0xf
c0001611:	76 05                	jbe    c0001618 <dlmemalign+0x5f>
c0001613:	83 e0 f8             	and    eax,0xfffffff8
c0001616:	89 c5                	mov    ebp,eax
c0001618:	83 ec 0c             	sub    esp,0xc
c000161b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000161f:	50                   	push   eax
c0001620:	e8 a2 f8 ff ff       	call   c0000ec7 <dlmalloc>
c0001625:	83 c4 10             	add    esp,0x10
c0001628:	89 c1                	mov    ecx,eax
c000162a:	85 c0                	test   eax,eax
c000162c:	74 d1                	je     c00015ff <dlmemalign+0x46>
c000162e:	31 d2                	xor    edx,edx
c0001630:	8d 70 f8             	lea    esi,[eax-0x8]
c0001633:	f7 f7                	div    edi
c0001635:	85 d2                	test   edx,edx
c0001637:	74 62                	je     c000169b <dlmemalign+0xe2>
c0001639:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000163d:	89 f8                	mov    eax,edi
c000163f:	f7 d8                	neg    eax
c0001641:	21 c3                	and    ebx,eax
c0001643:	83 eb 08             	sub    ebx,0x8
c0001646:	89 d8                	mov    eax,ebx
c0001648:	29 f0                	sub    eax,esi
c000164a:	83 f8 0f             	cmp    eax,0xf
c000164d:	77 02                	ja     c0001651 <dlmemalign+0x98>
c000164f:	01 fb                	add    ebx,edi
c0001651:	89 d8                	mov    eax,ebx
c0001653:	29 f0                	sub    eax,esi
c0001655:	89 c6                	mov    esi,eax
c0001657:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000165a:	89 c2                	mov    edx,eax
c000165c:	83 e2 fc             	and    edx,0xfffffffc
c000165f:	29 f2                	sub    edx,esi
c0001661:	a8 02                	test   al,0x2
c0001663:	74 10                	je     c0001675 <dlmemalign+0xbc>
c0001665:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001668:	83 ca 02             	or     edx,0x2
c000166b:	8d 43 08             	lea    eax,[ebx+0x8]
c000166e:	89 33                	mov    DWORD PTR [ebx],esi
c0001670:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001673:	eb 5f                	jmp    c00016d4 <dlmemalign+0x11b>
c0001675:	83 ec 0c             	sub    esp,0xc
c0001678:	89 d0                	mov    eax,edx
c000167a:	83 c8 01             	or     eax,0x1
c000167d:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001680:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001685:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001688:	83 e0 01             	and    eax,0x1
c000168b:	09 f0                	or     eax,esi
c000168d:	89 de                	mov    esi,ebx
c000168f:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001692:	51                   	push   ecx
c0001693:	e8 d4 f4 ff ff       	call   c0000b6c <dlfree>
c0001698:	83 c4 10             	add    esp,0x10
c000169b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000169e:	a8 02                	test   al,0x2
c00016a0:	75 2f                	jne    c00016d1 <dlmemalign+0x118>
c00016a2:	83 e0 fc             	and    eax,0xfffffffc
c00016a5:	8d 55 10             	lea    edx,[ebp+0x10]
c00016a8:	39 c2                	cmp    edx,eax
c00016aa:	73 25                	jae    c00016d1 <dlmemalign+0x118>
c00016ac:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016af:	83 ec 0c             	sub    esp,0xc
c00016b2:	29 e8                	sub    eax,ebp
c00016b4:	83 c2 08             	add    edx,0x8
c00016b7:	83 c8 01             	or     eax,0x1
c00016ba:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00016bd:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016c0:	83 e0 01             	and    eax,0x1
c00016c3:	09 c5                	or     ebp,eax
c00016c5:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00016c8:	52                   	push   edx
c00016c9:	e8 9e f4 ff ff       	call   c0000b6c <dlfree>
c00016ce:	83 c4 10             	add    esp,0x10
c00016d1:	8d 46 08             	lea    eax,[esi+0x8]
c00016d4:	83 c4 0c             	add    esp,0xc
c00016d7:	5b                   	pop    ebx
c00016d8:	5e                   	pop    esi
c00016d9:	5f                   	pop    edi
c00016da:	5d                   	pop    ebp
c00016db:	c3                   	ret    

c00016dc <dlcalloc>:
c00016dc:	53                   	push   ebx
c00016dd:	83 ec 14             	sub    esp,0x14
c00016e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016e4:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00016e9:	50                   	push   eax
c00016ea:	e8 d8 f7 ff ff       	call   c0000ec7 <dlmalloc>
c00016ef:	83 c4 10             	add    esp,0x10
c00016f2:	89 c3                	mov    ebx,eax
c00016f4:	85 c0                	test   eax,eax
c00016f6:	74 77                	je     c000176f <dlcalloc+0x93>
c00016f8:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00016fb:	89 d0                	mov    eax,edx
c00016fd:	83 e0 fc             	and    eax,0xfffffffc
c0001700:	80 e2 02             	and    dl,0x2
c0001703:	75 5a                	jne    c000175f <dlcalloc+0x83>
c0001705:	83 e8 04             	sub    eax,0x4
c0001708:	83 f8 27             	cmp    eax,0x27
c000170b:	76 03                	jbe    c0001710 <dlcalloc+0x34>
c000170d:	51                   	push   ecx
c000170e:	eb 53                	jmp    c0001763 <dlcalloc+0x87>
c0001710:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001716:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000171d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001724:	83 f8 13             	cmp    eax,0x13
c0001727:	76 46                	jbe    c000176f <dlcalloc+0x93>
c0001729:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001730:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001737:	83 f8 1b             	cmp    eax,0x1b
c000173a:	76 33                	jbe    c000176f <dlcalloc+0x93>
c000173c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001743:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000174a:	83 f8 23             	cmp    eax,0x23
c000174d:	76 20                	jbe    c000176f <dlcalloc+0x93>
c000174f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001756:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000175d:	eb 10                	jmp    c000176f <dlcalloc+0x93>
c000175f:	83 e8 08             	sub    eax,0x8
c0001762:	52                   	push   edx
c0001763:	50                   	push   eax
c0001764:	6a 00                	push   0x0
c0001766:	53                   	push   ebx
c0001767:	e8 1f ef ff ff       	call   c000068b <memset>
c000176c:	83 c4 10             	add    esp,0x10
c000176f:	89 d8                	mov    eax,ebx
c0001771:	83 c4 08             	add    esp,0x8
c0001774:	5b                   	pop    ebx
c0001775:	c3                   	ret    

c0001776 <dlcfree>:
c0001776:	e9 f1 f3 ff ff       	jmp    c0000b6c <dlfree>

c000177b <dlindependent_calloc>:
c000177b:	83 ec 28             	sub    esp,0x28
c000177e:	b9 03 00 00 00       	mov    ecx,0x3
c0001783:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001787:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000178b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000178f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001793:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001797:	e8 b9 fa ff ff       	call   c0001255 <iALLOc>
c000179c:	83 c4 2c             	add    esp,0x2c
c000179f:	c3                   	ret    

c00017a0 <dlindependent_comalloc>:
c00017a0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00017a8:	31 c9                	xor    ecx,ecx
c00017aa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017b2:	e9 9e fa ff ff       	jmp    c0001255 <iALLOc>

c00017b7 <dlvalloc>:
c00017b7:	83 ec 0c             	sub    esp,0xc
c00017ba:	83 3d 20 c5 02 c0 00 	cmp    DWORD PTR ds:0xc002c520,0x0
c00017c1:	75 0a                	jne    c00017cd <dlvalloc+0x16>
c00017c3:	b8 20 c5 02 c0       	mov    eax,0xc002c520
c00017c8:	e8 b8 f2 ff ff       	call   c0000a85 <malloc_consolidate>
c00017cd:	50                   	push   eax
c00017ce:	50                   	push   eax
c00017cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00017d3:	ff 35 7c c8 02 c0    	push   DWORD PTR ds:0xc002c87c
c00017d9:	e8 db fd ff ff       	call   c00015b9 <dlmemalign>
c00017de:	83 c4 1c             	add    esp,0x1c
c00017e1:	c3                   	ret    

c00017e2 <dlpvalloc>:
c00017e2:	83 ec 0c             	sub    esp,0xc
c00017e5:	83 3d 20 c5 02 c0 00 	cmp    DWORD PTR ds:0xc002c520,0x0
c00017ec:	75 0a                	jne    c00017f8 <dlpvalloc+0x16>
c00017ee:	b8 20 c5 02 c0       	mov    eax,0xc002c520
c00017f3:	e8 8d f2 ff ff       	call   c0000a85 <malloc_consolidate>
c00017f8:	a1 7c c8 02 c0       	mov    eax,ds:0xc002c87c
c00017fd:	89 c1                	mov    ecx,eax
c00017ff:	52                   	push   edx
c0001800:	f7 d9                	neg    ecx
c0001802:	52                   	push   edx
c0001803:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001807:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c000180b:	21 ca                	and    edx,ecx
c000180d:	52                   	push   edx
c000180e:	50                   	push   eax
c000180f:	e8 a5 fd ff ff       	call   c00015b9 <dlmemalign>
c0001814:	83 c4 1c             	add    esp,0x1c
c0001817:	c3                   	ret    

c0001818 <dlmalloc_trim>:
c0001818:	b8 20 c5 02 c0       	mov    eax,0xc002c520
c000181d:	e8 63 f2 ff ff       	call   c0000a85 <malloc_consolidate>
c0001822:	31 c0                	xor    eax,eax
c0001824:	c3                   	ret    

c0001825 <dlmalloc_usable_size>:
c0001825:	53                   	push   ebx
c0001826:	31 c0                	xor    eax,eax
c0001828:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000182c:	85 c9                	test   ecx,ecx
c000182e:	74 24                	je     c0001854 <dlmalloc_usable_size+0x2f>
c0001830:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001833:	f6 c2 02             	test   dl,0x2
c0001836:	74 08                	je     c0001840 <dlmalloc_usable_size+0x1b>
c0001838:	83 e2 fc             	and    edx,0xfffffffc
c000183b:	8d 42 f8             	lea    eax,[edx-0x8]
c000183e:	eb 14                	jmp    c0001854 <dlmalloc_usable_size+0x2f>
c0001840:	89 d3                	mov    ebx,edx
c0001842:	31 c0                	xor    eax,eax
c0001844:	83 e3 fe             	and    ebx,0xfffffffe
c0001847:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c000184c:	74 06                	je     c0001854 <dlmalloc_usable_size+0x2f>
c000184e:	83 e2 fc             	and    edx,0xfffffffc
c0001851:	8d 42 fc             	lea    eax,[edx-0x4]
c0001854:	5b                   	pop    ebx
c0001855:	c3                   	ret    

c0001856 <dlmallinfo>:
c0001856:	55                   	push   ebp
c0001857:	57                   	push   edi
c0001858:	56                   	push   esi
c0001859:	53                   	push   ebx
c000185a:	83 ec 08             	sub    esp,0x8
c000185d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001861:	83 3d 4c c5 02 c0 00 	cmp    DWORD PTR ds:0xc002c54c,0x0
c0001868:	75 0a                	jne    c0001874 <dlmallinfo+0x1e>
c000186a:	b8 20 c5 02 c0       	mov    eax,0xc002c520
c000186f:	e8 11 f2 ff ff       	call   c0000a85 <malloc_consolidate>
c0001874:	a1 4c c5 02 c0       	mov    eax,ds:0xc002c54c
c0001879:	31 ed                	xor    ebp,ebp
c000187b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000187e:	31 c9                	xor    ecx,ecx
c0001880:	83 e0 fc             	and    eax,0xfffffffc
c0001883:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001887:	31 c0                	xor    eax,eax
c0001889:	8b 14 85 24 c5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3adc]
c0001890:	85 d2                	test   edx,edx
c0001892:	74 0e                	je     c00018a2 <dlmallinfo+0x4c>
c0001894:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001897:	45                   	inc    ebp
c0001898:	83 e6 fc             	and    esi,0xfffffffc
c000189b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000189e:	01 f1                	add    ecx,esi
c00018a0:	eb ee                	jmp    c0001890 <dlmallinfo+0x3a>
c00018a2:	40                   	inc    eax
c00018a3:	83 f8 0a             	cmp    eax,0xa
c00018a6:	75 e1                	jne    c0001889 <dlmallinfo+0x33>
c00018a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018ac:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018b3:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018b6:	b8 54 c5 02 c0       	mov    eax,0xc002c554
c00018bb:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018be:	39 f0                	cmp    eax,esi
c00018c0:	74 10                	je     c00018d2 <dlmallinfo+0x7c>
c00018c2:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00018c5:	ff 04 24             	inc    DWORD PTR [esp]
c00018c8:	83 e7 fc             	and    edi,0xfffffffc
c00018cb:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00018ce:	01 fa                	add    edx,edi
c00018d0:	eb ec                	jmp    c00018be <dlmallinfo+0x68>
c00018d2:	83 c0 08             	add    eax,0x8
c00018d5:	3d 4c c8 02 c0       	cmp    eax,0xc002c84c
c00018da:	75 df                	jne    c00018bb <dlmallinfo+0x65>
c00018dc:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00018df:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00018e2:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c00018e5:	a1 88 c8 02 c0       	mov    eax,ds:0xc002c888
c00018ea:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00018ed:	89 03                	mov    DWORD PTR [ebx],eax
c00018ef:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00018f2:	8b 35 70 c8 02 c0    	mov    esi,DWORD PTR ds:0xc002c870
c00018f8:	29 d0                	sub    eax,edx
c00018fa:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c00018fd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001900:	8b 35 84 c8 02 c0    	mov    esi,DWORD PTR ds:0xc002c884
c0001906:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000190a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000190d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001910:	8b 35 94 c8 02 c0    	mov    esi,DWORD PTR ds:0xc002c894
c0001916:	89 d8                	mov    eax,ebx
c0001918:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000191b:	83 c4 08             	add    esp,0x8
c000191e:	5b                   	pop    ebx
c000191f:	5e                   	pop    esi
c0001920:	5f                   	pop    edi
c0001921:	5d                   	pop    ebp
c0001922:	c2 04 00             	ret    0x4

c0001925 <dlmalloc_stats>:
c0001925:	83 ec 30             	sub    esp,0x30
c0001928:	8d 44 24 08          	lea    eax,[esp+0x8]
c000192c:	50                   	push   eax
c000192d:	e8 24 ff ff ff       	call   c0001856 <dlmallinfo>
c0001932:	83 c4 30             	add    esp,0x30
c0001935:	c3                   	ret    

c0001936 <dlmallopt>:
c0001936:	56                   	push   esi
c0001937:	b8 20 c5 02 c0       	mov    eax,0xc002c520
c000193c:	53                   	push   ebx
c000193d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001941:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001945:	e8 3b f1 ff ff       	call   c0000a85 <malloc_consolidate>
c000194a:	8d 46 04             	lea    eax,[esi+0x4]
c000194d:	83 f8 05             	cmp    eax,0x5
c0001950:	77 67                	ja     c00019b9 <dlmallopt+0x83>
c0001952:	ff 24 85 a4 7c 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd835c]
c0001959:	83 fb 50             	cmp    ebx,0x50
c000195c:	77 5b                	ja     c00019b9 <dlmallopt+0x83>
c000195e:	ba 08 00 00 00       	mov    edx,0x8
c0001963:	85 db                	test   ebx,ebx
c0001965:	74 12                	je     c0001979 <dlmallopt+0x43>
c0001967:	83 c3 0b             	add    ebx,0xb
c000196a:	ba 10 00 00 00       	mov    edx,0x10
c000196f:	83 fb 0f             	cmp    ebx,0xf
c0001972:	76 05                	jbe    c0001979 <dlmallopt+0x43>
c0001974:	89 da                	mov    edx,ebx
c0001976:	83 e2 f8             	and    edx,0xfffffff8
c0001979:	a1 20 c5 02 c0       	mov    eax,ds:0xc002c520
c000197e:	83 e0 03             	and    eax,0x3
c0001981:	09 d0                	or     eax,edx
c0001983:	a3 20 c5 02 c0       	mov    ds:0xc002c520,eax
c0001988:	eb 31                	jmp    c00019bb <dlmallopt+0x85>
c000198a:	89 1d 64 c8 02 c0    	mov    DWORD PTR ds:0xc002c864,ebx
c0001990:	eb 06                	jmp    c0001998 <dlmallopt+0x62>
c0001992:	89 1d 68 c8 02 c0    	mov    DWORD PTR ds:0xc002c868,ebx
c0001998:	be 01 00 00 00       	mov    esi,0x1
c000199d:	eb 1c                	jmp    c00019bb <dlmallopt+0x85>
c000199f:	89 1d 6c c8 02 c0    	mov    DWORD PTR ds:0xc002c86c,ebx
c00019a5:	eb f1                	jmp    c0001998 <dlmallopt+0x62>
c00019a7:	31 f6                	xor    esi,esi
c00019a9:	85 db                	test   ebx,ebx
c00019ab:	75 0e                	jne    c00019bb <dlmallopt+0x85>
c00019ad:	c7 05 74 c8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c874,0x0
c00019b7:	eb df                	jmp    c0001998 <dlmallopt+0x62>
c00019b9:	31 f6                	xor    esi,esi
c00019bb:	89 f0                	mov    eax,esi
c00019bd:	5b                   	pop    ebx
c00019be:	5e                   	pop    esi
c00019bf:	c3                   	ret    

c00019c0 <disk_status>:
c00019c0:	31 c0                	xor    eax,eax
c00019c2:	c3                   	ret    

c00019c3 <disk_initialize>:
c00019c3:	31 c0                	xor    eax,eax
c00019c5:	c3                   	ret    

c00019c6 <disk_read>:
c00019c6:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019cb:	0f b6 04 85 c0 df 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd2040]
c00019d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019d7:	e9 00 e3 01 00       	jmp    c001fcdc <fatWrapperReadDisk>

c00019dc <disk_write>:
c00019dc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019e1:	0f b6 04 85 c0 df 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd2040]
c00019e9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019ed:	e9 31 e3 01 00       	jmp    c001fd23 <fatWrapperWriteDisk>

c00019f2 <disk_ioctl>:
c00019f2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00019f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00019fb:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a00:	0f b6 04 85 c0 df 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd2040]
c0001a08:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a0c:	e9 59 e3 01 00       	jmp    c001fd6a <fatWrapperIoctl>

c0001a11 <ld_word>:
c0001a11:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a15:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a18:	c1 e2 08             	shl    edx,0x8
c0001a1b:	09 d0                	or     eax,edx
c0001a1d:	c3                   	ret    

c0001a1e <ld_dword>:
c0001a1e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a22:	89 d1                	mov    ecx,edx
c0001a24:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a28:	c1 e1 08             	shl    ecx,0x8
c0001a2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a2e:	09 ca                	or     edx,ecx
c0001a30:	c1 e2 08             	shl    edx,0x8
c0001a33:	09 d0                	or     eax,edx
c0001a35:	c3                   	ret    

c0001a36 <ld_qword>:
c0001a36:	57                   	push   edi
c0001a37:	56                   	push   esi
c0001a38:	53                   	push   ebx
c0001a39:	31 db                	xor    ebx,ebx
c0001a3b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a3e:	89 df                	mov    edi,ebx
c0001a40:	89 ce                	mov    esi,ecx
c0001a42:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a46:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a4a:	c1 e6 08             	shl    esi,0x8
c0001a4d:	09 f2                	or     edx,esi
c0001a4f:	89 d6                	mov    esi,edx
c0001a51:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a55:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a59:	c1 e6 08             	shl    esi,0x8
c0001a5c:	09 f2                	or     edx,esi
c0001a5e:	89 d6                	mov    esi,edx
c0001a60:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a64:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a68:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a6b:	c1 e6 08             	shl    esi,0x8
c0001a6e:	89 fb                	mov    ebx,edi
c0001a70:	09 f2                	or     edx,esi
c0001a72:	89 d1                	mov    ecx,edx
c0001a74:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001a78:	c1 e1 08             	shl    ecx,0x8
c0001a7b:	89 da                	mov    edx,ebx
c0001a7d:	09 c8                	or     eax,ecx
c0001a7f:	5b                   	pop    ebx
c0001a80:	5e                   	pop    esi
c0001a81:	5f                   	pop    edi
c0001a82:	c3                   	ret    

c0001a83 <st_word>:
c0001a83:	66 89 10             	mov    WORD PTR [eax],dx
c0001a86:	c3                   	ret    

c0001a87 <st_dword>:
c0001a87:	89 10                	mov    DWORD PTR [eax],edx
c0001a89:	c3                   	ret    

c0001a8a <st_qword>:
c0001a8a:	89 10                	mov    DWORD PTR [eax],edx
c0001a8c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001a8f:	c3                   	ret    

c0001a90 <mem_cpy>:
c0001a90:	85 c9                	test   ecx,ecx
c0001a92:	74 10                	je     c0001aa4 <mem_cpy+0x14>
c0001a94:	57                   	push   edi
c0001a95:	01 c1                	add    ecx,eax
c0001a97:	56                   	push   esi
c0001a98:	89 c7                	mov    edi,eax
c0001a9a:	89 d6                	mov    esi,edx
c0001a9c:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a9d:	39 f9                	cmp    ecx,edi
c0001a9f:	75 fb                	jne    c0001a9c <mem_cpy+0xc>
c0001aa1:	5e                   	pop    esi
c0001aa2:	5f                   	pop    edi
c0001aa3:	c3                   	ret    
c0001aa4:	c3                   	ret    

c0001aa5 <mem_set>:
c0001aa5:	01 c1                	add    ecx,eax
c0001aa7:	40                   	inc    eax
c0001aa8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001aab:	39 c8                	cmp    eax,ecx
c0001aad:	75 f8                	jne    c0001aa7 <mem_set+0x2>
c0001aaf:	c3                   	ret    

c0001ab0 <mem_cmp>:
c0001ab0:	57                   	push   edi
c0001ab1:	56                   	push   esi
c0001ab2:	89 c6                	mov    esi,eax
c0001ab4:	53                   	push   ebx
c0001ab5:	46                   	inc    esi
c0001ab6:	42                   	inc    edx
c0001ab7:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001abb:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001abf:	29 fb                	sub    ebx,edi
c0001ac1:	89 cf                	mov    edi,ecx
c0001ac3:	29 f7                	sub    edi,esi
c0001ac5:	01 c7                	add    edi,eax
c0001ac7:	74 04                	je     c0001acd <mem_cmp+0x1d>
c0001ac9:	85 db                	test   ebx,ebx
c0001acb:	74 e8                	je     c0001ab5 <mem_cmp+0x5>
c0001acd:	89 d8                	mov    eax,ebx
c0001acf:	5b                   	pop    ebx
c0001ad0:	5e                   	pop    esi
c0001ad1:	5f                   	pop    edi
c0001ad2:	c3                   	ret    

c0001ad3 <chk_chr>:
c0001ad3:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001ad6:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001ad9:	74 07                	je     c0001ae2 <chk_chr+0xf>
c0001adb:	39 d1                	cmp    ecx,edx
c0001add:	74 03                	je     c0001ae2 <chk_chr+0xf>
c0001adf:	40                   	inc    eax
c0001ae0:	eb f1                	jmp    c0001ad3 <chk_chr>
c0001ae2:	89 c8                	mov    eax,ecx
c0001ae4:	c3                   	ret    

c0001ae5 <dbc_1st>:
c0001ae5:	31 c0                	xor    eax,eax
c0001ae7:	c3                   	ret    

c0001ae8 <dbc_2nd>:
c0001ae8:	31 c0                	xor    eax,eax
c0001aea:	c3                   	ret    

c0001aeb <tchar2uni>:
c0001aeb:	57                   	push   edi
c0001aec:	89 c7                	mov    edi,eax
c0001aee:	56                   	push   esi
c0001aef:	53                   	push   ebx
c0001af0:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001af2:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001af4:	8d 73 01             	lea    esi,[ebx+0x1]
c0001af7:	84 c9                	test   cl,cl
c0001af9:	78 0a                	js     c0001b05 <tchar2uni+0x1a>
c0001afb:	0f b6 d1             	movzx  edx,cl
c0001afe:	89 f3                	mov    ebx,esi
c0001b00:	e9 9f 00 00 00       	jmp    c0001ba4 <tchar2uni+0xb9>
c0001b05:	88 ca                	mov    dl,cl
c0001b07:	83 e2 e0             	and    edx,0xffffffe0
c0001b0a:	80 fa c0             	cmp    dl,0xc0
c0001b0d:	75 0c                	jne    c0001b1b <tchar2uni+0x30>
c0001b0f:	89 ca                	mov    edx,ecx
c0001b11:	b9 01 00 00 00       	mov    ecx,0x1
c0001b16:	83 e2 1f             	and    edx,0x1f
c0001b19:	eb 2e                	jmp    c0001b49 <tchar2uni+0x5e>
c0001b1b:	88 ca                	mov    dl,cl
c0001b1d:	83 e2 f0             	and    edx,0xfffffff0
c0001b20:	80 fa e0             	cmp    dl,0xe0
c0001b23:	75 0c                	jne    c0001b31 <tchar2uni+0x46>
c0001b25:	89 ca                	mov    edx,ecx
c0001b27:	b9 02 00 00 00       	mov    ecx,0x2
c0001b2c:	83 e2 0f             	and    edx,0xf
c0001b2f:	eb 18                	jmp    c0001b49 <tchar2uni+0x5e>
c0001b31:	88 ca                	mov    dl,cl
c0001b33:	83 e2 f8             	and    edx,0xfffffff8
c0001b36:	88 d0                	mov    al,dl
c0001b38:	83 ca ff             	or     edx,0xffffffff
c0001b3b:	3c f0                	cmp    al,0xf0
c0001b3d:	75 6c                	jne    c0001bab <tchar2uni+0xc0>
c0001b3f:	89 ca                	mov    edx,ecx
c0001b41:	b9 03 00 00 00       	mov    ecx,0x3
c0001b46:	83 e2 07             	and    edx,0x7
c0001b49:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b4d:	46                   	inc    esi
c0001b4e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b51:	88 c8                	mov    al,cl
c0001b53:	83 e0 c0             	and    eax,0xffffffc0
c0001b56:	3c 80                	cmp    al,0x80
c0001b58:	75 4e                	jne    c0001ba8 <tchar2uni+0xbd>
c0001b5a:	c1 e2 06             	shl    edx,0x6
c0001b5d:	83 e1 3f             	and    ecx,0x3f
c0001b60:	09 ca                	or     edx,ecx
c0001b62:	39 de                	cmp    esi,ebx
c0001b64:	75 e7                	jne    c0001b4d <tchar2uni+0x62>
c0001b66:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001b69:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001b6f:	77 37                	ja     c0001ba8 <tchar2uni+0xbd>
c0001b71:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001b77:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b7d:	76 29                	jbe    c0001ba8 <tchar2uni+0xbd>
c0001b7f:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001b85:	76 1d                	jbe    c0001ba4 <tchar2uni+0xb9>
c0001b87:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001b8d:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b93:	c1 e1 06             	shl    ecx,0x6
c0001b96:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b9c:	09 ca                	or     edx,ecx
c0001b9e:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001ba4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001ba6:	eb 03                	jmp    c0001bab <tchar2uni+0xc0>
c0001ba8:	83 ca ff             	or     edx,0xffffffff
c0001bab:	5b                   	pop    ebx
c0001bac:	89 d0                	mov    eax,edx
c0001bae:	5e                   	pop    esi
c0001baf:	5f                   	pop    edi
c0001bb0:	c3                   	ret    

c0001bb1 <put_utf>:
c0001bb1:	53                   	push   ebx
c0001bb2:	83 f8 7f             	cmp    eax,0x7f
c0001bb5:	89 c3                	mov    ebx,eax
c0001bb7:	b0 00                	mov    al,0x0
c0001bb9:	77 11                	ja     c0001bcc <put_utf+0x1b>
c0001bbb:	85 c9                	test   ecx,ecx
c0001bbd:	0f 84 e5 00 00 00    	je     c0001ca8 <put_utf+0xf7>
c0001bc3:	88 1a                	mov    BYTE PTR [edx],bl
c0001bc5:	b0 01                	mov    al,0x1
c0001bc7:	e9 dc 00 00 00       	jmp    c0001ca8 <put_utf+0xf7>
c0001bcc:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001bd2:	77 23                	ja     c0001bf7 <put_utf+0x46>
c0001bd4:	83 f9 01             	cmp    ecx,0x1
c0001bd7:	0f 86 cb 00 00 00    	jbe    c0001ca8 <put_utf+0xf7>
c0001bdd:	89 d8                	mov    eax,ebx
c0001bdf:	83 e3 3f             	and    ebx,0x3f
c0001be2:	c1 e8 06             	shr    eax,0x6
c0001be5:	83 cb 80             	or     ebx,0xffffff80
c0001be8:	83 c8 c0             	or     eax,0xffffffc0
c0001beb:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001bee:	88 02                	mov    BYTE PTR [edx],al
c0001bf0:	b0 02                	mov    al,0x2
c0001bf2:	e9 b1 00 00 00       	jmp    c0001ca8 <put_utf+0xf7>
c0001bf7:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001bfd:	77 40                	ja     c0001c3f <put_utf+0x8e>
c0001bff:	83 f9 02             	cmp    ecx,0x2
c0001c02:	0f 86 a0 00 00 00    	jbe    c0001ca8 <put_utf+0xf7>
c0001c08:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c0e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c14:	0f 86 8e 00 00 00    	jbe    c0001ca8 <put_utf+0xf7>
c0001c1a:	89 d8                	mov    eax,ebx
c0001c1c:	c1 e8 0c             	shr    eax,0xc
c0001c1f:	83 c8 e0             	or     eax,0xffffffe0
c0001c22:	88 02                	mov    BYTE PTR [edx],al
c0001c24:	89 d8                	mov    eax,ebx
c0001c26:	83 e3 3f             	and    ebx,0x3f
c0001c29:	c1 e8 06             	shr    eax,0x6
c0001c2c:	83 cb 80             	or     ebx,0xffffff80
c0001c2f:	83 e0 3f             	and    eax,0x3f
c0001c32:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c35:	83 c8 80             	or     eax,0xffffff80
c0001c38:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c3b:	b0 03                	mov    al,0x3
c0001c3d:	eb 69                	jmp    c0001ca8 <put_utf+0xf7>
c0001c3f:	83 f9 03             	cmp    ecx,0x3
c0001c42:	76 64                	jbe    c0001ca8 <put_utf+0xf7>
c0001c44:	89 d9                	mov    ecx,ebx
c0001c46:	0f b7 c3             	movzx  eax,bx
c0001c49:	66 31 c9             	xor    cx,cx
c0001c4c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c52:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c58:	c1 e9 06             	shr    ecx,0x6
c0001c5b:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001c61:	77 43                	ja     c0001ca6 <put_utf+0xf5>
c0001c63:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001c69:	77 3b                	ja     c0001ca6 <put_utf+0xf5>
c0001c6b:	09 cb                	or     ebx,ecx
c0001c6d:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001c73:	89 d8                	mov    eax,ebx
c0001c75:	c1 e8 12             	shr    eax,0x12
c0001c78:	83 c8 f0             	or     eax,0xfffffff0
c0001c7b:	88 02                	mov    BYTE PTR [edx],al
c0001c7d:	89 d8                	mov    eax,ebx
c0001c7f:	c1 e8 0c             	shr    eax,0xc
c0001c82:	83 e0 3f             	and    eax,0x3f
c0001c85:	83 c8 80             	or     eax,0xffffff80
c0001c88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c8b:	89 d8                	mov    eax,ebx
c0001c8d:	83 e3 3f             	and    ebx,0x3f
c0001c90:	c1 e8 06             	shr    eax,0x6
c0001c93:	83 cb 80             	or     ebx,0xffffff80
c0001c96:	83 e0 3f             	and    eax,0x3f
c0001c99:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c9c:	83 c8 80             	or     eax,0xffffff80
c0001c9f:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ca2:	b0 04                	mov    al,0x4
c0001ca4:	eb 02                	jmp    c0001ca8 <put_utf+0xf7>
c0001ca6:	31 c0                	xor    eax,eax
c0001ca8:	5b                   	pop    ebx
c0001ca9:	c3                   	ret    

c0001caa <clst2sect>:
c0001caa:	89 c1                	mov    ecx,eax
c0001cac:	83 ea 02             	sub    edx,0x2
c0001caf:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001cb2:	83 e8 02             	sub    eax,0x2
c0001cb5:	39 d0                	cmp    eax,edx
c0001cb7:	76 0d                	jbe    c0001cc6 <clst2sect+0x1c>
c0001cb9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001cbd:	f7 e2                	mul    edx
c0001cbf:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001cc2:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001cc5:	c3                   	ret    
c0001cc6:	31 c0                	xor    eax,eax
c0001cc8:	31 d2                	xor    edx,edx
c0001cca:	c3                   	ret    

c0001ccb <clmt_clust>:
c0001ccb:	57                   	push   edi
c0001ccc:	89 cf                	mov    edi,ecx
c0001cce:	56                   	push   esi
c0001ccf:	89 d6                	mov    esi,edx
c0001cd1:	53                   	push   ebx
c0001cd2:	0f ac fe 09          	shrd   esi,edi,0x9
c0001cd6:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001cd9:	89 f2                	mov    edx,esi
c0001cdb:	8b 00                	mov    eax,DWORD PTR [eax]
c0001cdd:	c1 ef 09             	shr    edi,0x9
c0001ce0:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001ce4:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001ce7:	89 f9                	mov    ecx,edi
c0001ce9:	31 ff                	xor    edi,edi
c0001ceb:	57                   	push   edi
c0001cec:	56                   	push   esi
c0001ced:	51                   	push   ecx
c0001cee:	52                   	push   edx
c0001cef:	e8 88 36 02 00       	call   c002537c <__udivdi3>
c0001cf4:	83 c4 10             	add    esp,0x10
c0001cf7:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001cf9:	85 d2                	test   edx,edx
c0001cfb:	74 10                	je     c0001d0d <clmt_clust+0x42>
c0001cfd:	39 d0                	cmp    eax,edx
c0001cff:	72 07                	jb     c0001d08 <clmt_clust+0x3d>
c0001d01:	29 d0                	sub    eax,edx
c0001d03:	83 c3 08             	add    ebx,0x8
c0001d06:	eb ef                	jmp    c0001cf7 <clmt_clust+0x2c>
c0001d08:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d0b:	89 c2                	mov    edx,eax
c0001d0d:	5b                   	pop    ebx
c0001d0e:	89 d0                	mov    eax,edx
c0001d10:	5e                   	pop    esi
c0001d11:	5f                   	pop    edi
c0001d12:	c3                   	ret    

c0001d13 <pick_lfn>:
c0001d13:	55                   	push   ebp
c0001d14:	57                   	push   edi
c0001d15:	56                   	push   esi
c0001d16:	89 d6                	mov    esi,edx
c0001d18:	53                   	push   ebx
c0001d19:	89 c3                	mov    ebx,eax
c0001d1b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d1e:	e8 ee fc ff ff       	call   c0001a11 <ld_word>
c0001d23:	66 85 c0             	test   ax,ax
c0001d26:	74 04                	je     c0001d2c <pick_lfn+0x19>
c0001d28:	31 c0                	xor    eax,eax
c0001d2a:	eb 5c                	jmp    c0001d88 <pick_lfn+0x75>
c0001d2c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d2f:	bd 01 00 00 00       	mov    ebp,0x1
c0001d34:	83 e1 bf             	and    ecx,0xffffffbf
c0001d37:	31 ff                	xor    edi,edi
c0001d39:	49                   	dec    ecx
c0001d3a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d3d:	0f b6 87 c0 7d 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd8240]
c0001d44:	01 f0                	add    eax,esi
c0001d46:	e8 c6 fc ff ff       	call   c0001a11 <ld_word>
c0001d4b:	66 85 ed             	test   bp,bp
c0001d4e:	74 11                	je     c0001d61 <pick_lfn+0x4e>
c0001d50:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d56:	77 d0                	ja     c0001d28 <pick_lfn+0x15>
c0001d58:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d5c:	89 c5                	mov    ebp,eax
c0001d5e:	41                   	inc    ecx
c0001d5f:	eb 04                	jmp    c0001d65 <pick_lfn+0x52>
c0001d61:	66 40                	inc    ax
c0001d63:	75 c3                	jne    c0001d28 <pick_lfn+0x15>
c0001d65:	47                   	inc    edi
c0001d66:	83 ff 0d             	cmp    edi,0xd
c0001d69:	75 d2                	jne    c0001d3d <pick_lfn+0x2a>
c0001d6b:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001d6e:	74 13                	je     c0001d83 <pick_lfn+0x70>
c0001d70:	66 85 ed             	test   bp,bp
c0001d73:	74 0e                	je     c0001d83 <pick_lfn+0x70>
c0001d75:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d7b:	77 ab                	ja     c0001d28 <pick_lfn+0x15>
c0001d7d:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001d83:	b8 01 00 00 00       	mov    eax,0x1
c0001d88:	5b                   	pop    ebx
c0001d89:	5e                   	pop    esi
c0001d8a:	5f                   	pop    edi
c0001d8b:	5d                   	pop    ebp
c0001d8c:	c3                   	ret    

c0001d8d <put_lfn>:
c0001d8d:	55                   	push   ebp
c0001d8e:	31 ed                	xor    ebp,ebp
c0001d90:	57                   	push   edi
c0001d91:	89 d7                	mov    edi,edx
c0001d93:	56                   	push   esi
c0001d94:	31 f6                	xor    esi,esi
c0001d96:	53                   	push   ebx
c0001d97:	83 ec 08             	sub    esp,0x8
c0001d9a:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d9d:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001da1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001da5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001dab:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001dae:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001db1:	31 d2                	xor    edx,edx
c0001db3:	e8 cb fc ff ff       	call   c0001a83 <st_word>
c0001db8:	0f b6 d9             	movzx  ebx,cl
c0001dbb:	4b                   	dec    ebx
c0001dbc:	6b db 0d             	imul   ebx,ebx,0xd
c0001dbf:	66 83 fe ff          	cmp    si,0xffff
c0001dc3:	74 08                	je     c0001dcd <put_lfn+0x40>
c0001dc5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001dc8:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001dcc:	43                   	inc    ebx
c0001dcd:	0f b6 85 c0 7d 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd8240]
c0001dd4:	0f b7 d6             	movzx  edx,si
c0001dd7:	01 f8                	add    eax,edi
c0001dd9:	e8 a5 fc ff ff       	call   c0001a83 <st_word>
c0001dde:	66 85 f6             	test   si,si
c0001de1:	75 03                	jne    c0001de6 <put_lfn+0x59>
c0001de3:	83 ce ff             	or     esi,0xffffffff
c0001de6:	45                   	inc    ebp
c0001de7:	83 fd 0d             	cmp    ebp,0xd
c0001dea:	75 d3                	jne    c0001dbf <put_lfn+0x32>
c0001dec:	66 46                	inc    si
c0001dee:	74 0a                	je     c0001dfa <put_lfn+0x6d>
c0001df0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001df3:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001df8:	75 09                	jne    c0001e03 <put_lfn+0x76>
c0001dfa:	88 c8                	mov    al,cl
c0001dfc:	83 c8 40             	or     eax,0x40
c0001dff:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e03:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e07:	88 07                	mov    BYTE PTR [edi],al
c0001e09:	83 c4 08             	add    esp,0x8
c0001e0c:	5b                   	pop    ebx
c0001e0d:	5e                   	pop    esi
c0001e0e:	5f                   	pop    edi
c0001e0f:	5d                   	pop    ebp
c0001e10:	c3                   	ret    

c0001e11 <gen_numname>:
c0001e11:	57                   	push   edi
c0001e12:	89 cf                	mov    edi,ecx
c0001e14:	56                   	push   esi
c0001e15:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e1a:	53                   	push   ebx
c0001e1b:	89 c6                	mov    esi,eax
c0001e1d:	83 ec 10             	sub    esp,0x10
c0001e20:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e24:	e8 67 fc ff ff       	call   c0001a90 <mem_cpy>
c0001e29:	83 fb 05             	cmp    ebx,0x5
c0001e2c:	76 2d                	jbe    c0001e5b <gen_numname+0x4a>
c0001e2e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e31:	66 85 c0             	test   ax,ax
c0001e34:	74 25                	je     c0001e5b <gen_numname+0x4a>
c0001e36:	83 c7 02             	add    edi,0x2
c0001e39:	ba 10 00 00 00       	mov    edx,0x10
c0001e3e:	01 db                	add    ebx,ebx
c0001e40:	89 c1                	mov    ecx,eax
c0001e42:	66 d1 e8             	shr    ax,1
c0001e45:	83 e1 01             	and    ecx,0x1
c0001e48:	01 cb                	add    ebx,ecx
c0001e4a:	0f ba e3 10          	bt     ebx,0x10
c0001e4e:	73 06                	jae    c0001e56 <gen_numname+0x45>
c0001e50:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e56:	4a                   	dec    edx
c0001e57:	75 e5                	jne    c0001e3e <gen_numname+0x2d>
c0001e59:	eb d3                	jmp    c0001e2e <gen_numname+0x1d>
c0001e5b:	b8 07 00 00 00       	mov    eax,0x7
c0001e60:	88 d9                	mov    cl,bl
c0001e62:	83 e1 0f             	and    ecx,0xf
c0001e65:	8d 51 30             	lea    edx,[ecx+0x30]
c0001e68:	80 fa 39             	cmp    dl,0x39
c0001e6b:	76 03                	jbe    c0001e70 <gen_numname+0x5f>
c0001e6d:	8d 51 37             	lea    edx,[ecx+0x37]
c0001e70:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001e73:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001e77:	89 da                	mov    edx,ebx
c0001e79:	c1 ea 04             	shr    edx,0x4
c0001e7c:	83 fb 0f             	cmp    ebx,0xf
c0001e7f:	76 06                	jbe    c0001e87 <gen_numname+0x76>
c0001e81:	89 c8                	mov    eax,ecx
c0001e83:	89 d3                	mov    ebx,edx
c0001e85:	eb d9                	jmp    c0001e60 <gen_numname+0x4f>
c0001e87:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001e8c:	31 d2                	xor    edx,edx
c0001e8e:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001e91:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e94:	39 ca                	cmp    edx,ecx
c0001e96:	73 18                	jae    c0001eb0 <gen_numname+0x9f>
c0001e98:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e9b:	3c 20                	cmp    al,0x20
c0001e9d:	74 11                	je     c0001eb0 <gen_numname+0x9f>
c0001e9f:	e8 41 fc ff ff       	call   c0001ae5 <dbc_1st>
c0001ea4:	85 c0                	test   eax,eax
c0001ea6:	74 05                	je     c0001ead <gen_numname+0x9c>
c0001ea8:	39 d3                	cmp    ebx,edx
c0001eaa:	74 04                	je     c0001eb0 <gen_numname+0x9f>
c0001eac:	42                   	inc    edx
c0001ead:	42                   	inc    edx
c0001eae:	eb e1                	jmp    c0001e91 <gen_numname+0x80>
c0001eb0:	b0 20                	mov    al,0x20
c0001eb2:	83 f9 07             	cmp    ecx,0x7
c0001eb5:	77 05                	ja     c0001ebc <gen_numname+0xab>
c0001eb7:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001ebb:	41                   	inc    ecx
c0001ebc:	42                   	inc    edx
c0001ebd:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001ec1:	83 fa 07             	cmp    edx,0x7
c0001ec4:	76 ea                	jbe    c0001eb0 <gen_numname+0x9f>
c0001ec6:	83 c4 10             	add    esp,0x10
c0001ec9:	5b                   	pop    ebx
c0001eca:	5e                   	pop    esi
c0001ecb:	5f                   	pop    edi
c0001ecc:	c3                   	ret    

c0001ecd <sum_sfn>:
c0001ecd:	31 c9                	xor    ecx,ecx
c0001ecf:	31 d2                	xor    edx,edx
c0001ed1:	d0 ca                	ror    dl,1
c0001ed3:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001ed6:	41                   	inc    ecx
c0001ed7:	83 f9 0b             	cmp    ecx,0xb
c0001eda:	75 f5                	jne    c0001ed1 <sum_sfn+0x4>
c0001edc:	88 d0                	mov    al,dl
c0001ede:	c3                   	ret    

c0001edf <xdir_sum>:
c0001edf:	56                   	push   esi
c0001ee0:	31 c9                	xor    ecx,ecx
c0001ee2:	53                   	push   ebx
c0001ee3:	31 d2                	xor    edx,edx
c0001ee5:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001ee9:	43                   	inc    ebx
c0001eea:	c1 e3 05             	shl    ebx,0x5
c0001eed:	83 fa 02             	cmp    edx,0x2
c0001ef0:	74 0b                	je     c0001efd <xdir_sum+0x1e>
c0001ef2:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001ef6:	66 d1 c9             	ror    cx,1
c0001ef9:	01 f1                	add    ecx,esi
c0001efb:	eb 05                	jmp    c0001f02 <xdir_sum+0x23>
c0001efd:	ba 03 00 00 00       	mov    edx,0x3
c0001f02:	42                   	inc    edx
c0001f03:	39 d3                	cmp    ebx,edx
c0001f05:	77 e6                	ja     c0001eed <xdir_sum+0xe>
c0001f07:	89 c8                	mov    eax,ecx
c0001f09:	5b                   	pop    ebx
c0001f0a:	5e                   	pop    esi
c0001f0b:	c3                   	ret    

c0001f0c <xsum32>:
c0001f0c:	d1 ca                	ror    edx,1
c0001f0e:	0f b6 c0             	movzx  eax,al
c0001f11:	01 d0                	add    eax,edx
c0001f13:	c3                   	ret    

c0001f14 <get_xfileinfo>:
c0001f14:	55                   	push   ebp
c0001f15:	31 c9                	xor    ecx,ecx
c0001f17:	57                   	push   edi
c0001f18:	bd 40 00 00 00       	mov    ebp,0x40
c0001f1d:	56                   	push   esi
c0001f1e:	31 ff                	xor    edi,edi
c0001f20:	53                   	push   ebx
c0001f21:	89 c6                	mov    esi,eax
c0001f23:	83 ec 0c             	sub    esp,0xc
c0001f26:	89 d3                	mov    ebx,edx
c0001f28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f2f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f33:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f36:	76 6d                	jbe    c0001fa5 <get_xfileinfo+0x91>
c0001f38:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f3e:	76 0b                	jbe    c0001f4b <get_xfileinfo+0x37>
c0001f40:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f44:	bf 01 00 00 00       	mov    edi,0x1
c0001f49:	eb 63                	jmp    c0001fae <get_xfileinfo+0x9a>
c0001f4b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f51:	75 03                	jne    c0001f56 <get_xfileinfo+0x42>
c0001f53:	83 c5 02             	add    ebp,0x2
c0001f56:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f59:	83 c5 02             	add    ebp,0x2
c0001f5c:	e8 b0 fa ff ff       	call   c0001a11 <ld_word>
c0001f61:	ff 04 24             	inc    DWORD PTR [esp]
c0001f64:	66 85 c9             	test   cx,cx
c0001f67:	75 0d                	jne    c0001f76 <get_xfileinfo+0x62>
c0001f69:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001f6f:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001f74:	76 2b                	jbe    c0001fa1 <get_xfileinfo+0x8d>
c0001f76:	c1 e1 10             	shl    ecx,0x10
c0001f79:	ba ff 00 00 00       	mov    edx,0xff
c0001f7e:	0f b7 c0             	movzx  eax,ax
c0001f81:	29 fa                	sub    edx,edi
c0001f83:	09 c8                	or     eax,ecx
c0001f85:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001f89:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001f8d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001f91:	e8 1b fc ff ff       	call   c0001bb1 <put_utf>
c0001f96:	84 c0                	test   al,al
c0001f98:	74 a6                	je     c0001f40 <get_xfileinfo+0x2c>
c0001f9a:	0f b6 c0             	movzx  eax,al
c0001f9d:	01 c7                	add    edi,eax
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	89 c1                	mov    ecx,eax
c0001fa3:	eb 8a                	jmp    c0001f2f <get_xfileinfo+0x1b>
c0001fa5:	85 ff                	test   edi,edi
c0001fa7:	74 97                	je     c0001f40 <get_xfileinfo+0x2c>
c0001fa9:	66 85 c9             	test   cx,cx
c0001fac:	75 92                	jne    c0001f40 <get_xfileinfo+0x2c>
c0001fae:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001fb3:	31 c0                	xor    eax,eax
c0001fb5:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001fb9:	31 d2                	xor    edx,edx
c0001fbb:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001fbe:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001fc1:	80 e1 10             	and    cl,0x10
c0001fc4:	75 08                	jne    c0001fce <get_xfileinfo+0xba>
c0001fc6:	8d 46 38             	lea    eax,[esi+0x38]
c0001fc9:	e8 68 fa ff ff       	call   c0001a36 <ld_qword>
c0001fce:	89 03                	mov    DWORD PTR [ebx],eax
c0001fd0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001fd3:	8d 46 0c             	lea    eax,[esi+0xc]
c0001fd6:	e8 36 fa ff ff       	call   c0001a11 <ld_word>
c0001fdb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001fdf:	8d 46 0e             	lea    eax,[esi+0xe]
c0001fe2:	e8 2a fa ff ff       	call   c0001a11 <ld_word>
c0001fe7:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001feb:	83 c4 0c             	add    esp,0xc
c0001fee:	5b                   	pop    ebx
c0001fef:	5e                   	pop    esi
c0001ff0:	5f                   	pop    edi
c0001ff1:	5d                   	pop    ebp
c0001ff2:	c3                   	ret    

c0001ff3 <get_ldnumber>:
c0001ff3:	8b 10                	mov    edx,DWORD PTR [eax]
c0001ff5:	85 d2                	test   edx,edx
c0001ff7:	74 14                	je     c000200d <get_ldnumber+0x1a>
c0001ff9:	56                   	push   esi
c0001ffa:	53                   	push   ebx
c0001ffb:	89 d3                	mov    ebx,edx
c0001ffd:	43                   	inc    ebx
c0001ffe:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002001:	80 f9 1f             	cmp    cl,0x1f
c0002004:	76 0d                	jbe    c0002013 <get_ldnumber+0x20>
c0002006:	80 f9 3a             	cmp    cl,0x3a
c0002009:	75 f2                	jne    c0001ffd <get_ldnumber+0xa>
c000200b:	eb 0a                	jmp    c0002017 <get_ldnumber+0x24>
c000200d:	83 c9 ff             	or     ecx,0xffffffff
c0002010:	89 c8                	mov    eax,ecx
c0002012:	c3                   	ret    
c0002013:	31 c9                	xor    ecx,ecx
c0002015:	eb 24                	jmp    c000203b <get_ldnumber+0x48>
c0002017:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000201a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000201d:	80 f9 09             	cmp    cl,0x9
c0002020:	77 16                	ja     c0002038 <get_ldnumber+0x45>
c0002022:	83 c2 02             	add    edx,0x2
c0002025:	83 c9 ff             	or     ecx,0xffffffff
c0002028:	39 d3                	cmp    ebx,edx
c000202a:	75 0f                	jne    c000203b <get_ldnumber+0x48>
c000202c:	89 f2                	mov    edx,esi
c000202e:	89 18                	mov    DWORD PTR [eax],ebx
c0002030:	0f be ca             	movsx  ecx,dl
c0002033:	83 e9 30             	sub    ecx,0x30
c0002036:	eb 03                	jmp    c000203b <get_ldnumber+0x48>
c0002038:	83 c9 ff             	or     ecx,0xffffffff
c000203b:	89 c8                	mov    eax,ecx
c000203d:	5b                   	pop    ebx
c000203e:	5e                   	pop    esi
c000203f:	c3                   	ret    

c0002040 <crc32>:
c0002040:	56                   	push   esi
c0002041:	89 d6                	mov    esi,edx
c0002043:	53                   	push   ebx
c0002044:	b2 01                	mov    dl,0x1
c0002046:	bb 08 00 00 00       	mov    ebx,0x8
c000204b:	89 f1                	mov    ecx,esi
c000204d:	84 d1                	test   cl,dl
c000204f:	0f 95 c1             	setne  cl
c0002052:	0f b6 c9             	movzx  ecx,cl
c0002055:	31 c1                	xor    ecx,eax
c0002057:	89 c8                	mov    eax,ecx
c0002059:	d1 e8                	shr    eax,1
c000205b:	80 e1 01             	and    cl,0x1
c000205e:	74 05                	je     c0002065 <crc32+0x25>
c0002060:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0002065:	d1 e2                	shl    edx,1
c0002067:	4b                   	dec    ebx
c0002068:	75 e1                	jne    c000204b <crc32+0xb>
c000206a:	5b                   	pop    ebx
c000206b:	5e                   	pop    esi
c000206c:	c3                   	ret    

c000206d <test_gpt_header>:
c000206d:	55                   	push   ebp
c000206e:	b9 10 00 00 00       	mov    ecx,0x10
c0002073:	57                   	push   edi
c0002074:	ba c0 7c 02 c0       	mov    edx,0xc0027cc0
c0002079:	56                   	push   esi
c000207a:	31 ff                	xor    edi,edi
c000207c:	53                   	push   ebx
c000207d:	89 c3                	mov    ebx,eax
c000207f:	e8 2c fa ff ff       	call   c0001ab0 <mem_cmp>
c0002084:	85 c0                	test   eax,eax
c0002086:	75 55                	jne    c00020dd <test_gpt_header+0x70>
c0002088:	89 c7                	mov    edi,eax
c000208a:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c000208f:	83 ce ff             	or     esi,0xffffffff
c0002092:	31 d2                	xor    edx,edx
c0002094:	83 fd 03             	cmp    ebp,0x3
c0002097:	76 05                	jbe    c000209e <test_gpt_header+0x31>
c0002099:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c000209e:	89 f0                	mov    eax,esi
c00020a0:	45                   	inc    ebp
c00020a1:	e8 9a ff ff ff       	call   c0002040 <crc32>
c00020a6:	83 fd 4c             	cmp    ebp,0x4c
c00020a9:	89 c6                	mov    esi,eax
c00020ab:	75 e5                	jne    c0002092 <test_gpt_header+0x25>
c00020ad:	8d 43 10             	lea    eax,[ebx+0x10]
c00020b0:	f7 d6                	not    esi
c00020b2:	e8 67 f9 ff ff       	call   c0001a1e <ld_dword>
c00020b7:	39 c6                	cmp    esi,eax
c00020b9:	75 22                	jne    c00020dd <test_gpt_header+0x70>
c00020bb:	8d 43 54             	lea    eax,[ebx+0x54]
c00020be:	e8 5b f9 ff ff       	call   c0001a1e <ld_dword>
c00020c3:	83 c0 80             	add    eax,0xffffff80
c00020c6:	75 15                	jne    c00020dd <test_gpt_header+0x70>
c00020c8:	8d 43 50             	lea    eax,[ebx+0x50]
c00020cb:	e8 4e f9 ff ff       	call   c0001a1e <ld_dword>
c00020d0:	3d 80 00 00 00       	cmp    eax,0x80
c00020d5:	0f 96 c0             	setbe  al
c00020d8:	0f b6 c0             	movzx  eax,al
c00020db:	89 c7                	mov    edi,eax
c00020dd:	5b                   	pop    ebx
c00020de:	89 f8                	mov    eax,edi
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	5d                   	pop    ebp
c00020e3:	c3                   	ret    

c00020e4 <make_rand>:
c00020e4:	56                   	push   esi
c00020e5:	85 c0                	test   eax,eax
c00020e7:	53                   	push   ebx
c00020e8:	75 05                	jne    c00020ef <make_rand+0xb>
c00020ea:	b8 01 00 00 00       	mov    eax,0x1
c00020ef:	01 d1                	add    ecx,edx
c00020f1:	bb 08 00 00 00       	mov    ebx,0x8
c00020f6:	89 c6                	mov    esi,eax
c00020f8:	d1 e8                	shr    eax,1
c00020fa:	83 e6 01             	and    esi,0x1
c00020fd:	85 f6                	test   esi,esi
c00020ff:	74 05                	je     c0002106 <make_rand+0x22>
c0002101:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002106:	4b                   	dec    ebx
c0002107:	75 ed                	jne    c00020f6 <make_rand+0x12>
c0002109:	42                   	inc    edx
c000210a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000210d:	39 ca                	cmp    edx,ecx
c000210f:	75 e0                	jne    c00020f1 <make_rand+0xd>
c0002111:	5b                   	pop    ebx
c0002112:	5e                   	pop    esi
c0002113:	c3                   	ret    

c0002114 <validate>:
c0002114:	56                   	push   esi
c0002115:	53                   	push   ebx
c0002116:	89 d6                	mov    esi,edx
c0002118:	51                   	push   ecx
c0002119:	85 c0                	test   eax,eax
c000211b:	75 09                	jne    c0002126 <validate+0x12>
c000211d:	b8 09 00 00 00       	mov    eax,0x9
c0002122:	31 c9                	xor    ecx,ecx
c0002124:	eb 2f                	jmp    c0002155 <validate+0x41>
c0002126:	89 c3                	mov    ebx,eax
c0002128:	8b 00                	mov    eax,DWORD PTR [eax]
c000212a:	85 c0                	test   eax,eax
c000212c:	74 ef                	je     c000211d <validate+0x9>
c000212e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002131:	74 ea                	je     c000211d <validate+0x9>
c0002133:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002137:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000213b:	75 e0                	jne    c000211d <validate+0x9>
c000213d:	83 ec 0c             	sub    esp,0xc
c0002140:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002144:	50                   	push   eax
c0002145:	e8 76 f8 ff ff       	call   c00019c0 <disk_status>
c000214a:	83 c4 10             	add    esp,0x10
c000214d:	a8 01                	test   al,0x1
c000214f:	75 cc                	jne    c000211d <validate+0x9>
c0002151:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002153:	31 c0                	xor    eax,eax
c0002155:	89 0e                	mov    DWORD PTR [esi],ecx
c0002157:	5a                   	pop    edx
c0002158:	5b                   	pop    ebx
c0002159:	5e                   	pop    esi
c000215a:	c3                   	ret    

c000215b <sync_window>:
c000215b:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c000215f:	0f 84 85 00 00 00    	je     c00021ea <sync_window+0x8f>
c0002165:	55                   	push   ebp
c0002166:	8d 68 54             	lea    ebp,[eax+0x54]
c0002169:	57                   	push   edi
c000216a:	56                   	push   esi
c000216b:	53                   	push   ebx
c000216c:	89 c3                	mov    ebx,eax
c000216e:	83 ec 28             	sub    esp,0x28
c0002171:	6a 01                	push   0x1
c0002173:	ff 70 50             	push   DWORD PTR [eax+0x50]
c0002176:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c0002179:	55                   	push   ebp
c000217a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000217e:	50                   	push   eax
c000217f:	e8 58 f8 ff ff       	call   c00019dc <disk_write>
c0002184:	83 c4 20             	add    esp,0x20
c0002187:	ba 01 00 00 00       	mov    edx,0x1
c000218c:	85 c0                	test   eax,eax
c000218e:	75 50                	jne    c00021e0 <sync_window+0x85>
c0002190:	31 ff                	xor    edi,edi
c0002192:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0002195:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002199:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000219d:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021a0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021a3:	89 c6                	mov    esi,eax
c00021a5:	89 d7                	mov    edi,edx
c00021a7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00021aa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021ae:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021b1:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021b5:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021b9:	73 23                	jae    c00021de <sync_window+0x83>
c00021bb:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021bf:	75 1d                	jne    c00021de <sync_window+0x83>
c00021c1:	83 ec 0c             	sub    esp,0xc
c00021c4:	6a 01                	push   0x1
c00021c6:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00021ca:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00021ce:	52                   	push   edx
c00021cf:	50                   	push   eax
c00021d0:	55                   	push   ebp
c00021d1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021d5:	50                   	push   eax
c00021d6:	e8 01 f8 ff ff       	call   c00019dc <disk_write>
c00021db:	83 c4 20             	add    esp,0x20
c00021de:	31 d2                	xor    edx,edx
c00021e0:	83 c4 1c             	add    esp,0x1c
c00021e3:	89 d0                	mov    eax,edx
c00021e5:	5b                   	pop    ebx
c00021e6:	5e                   	pop    esi
c00021e7:	5f                   	pop    edi
c00021e8:	5d                   	pop    ebp
c00021e9:	c3                   	ret    
c00021ea:	31 d2                	xor    edx,edx
c00021ec:	89 d0                	mov    eax,edx
c00021ee:	c3                   	ret    

c00021ef <move_window>:
c00021ef:	56                   	push   esi
c00021f0:	53                   	push   ebx
c00021f1:	89 c3                	mov    ebx,eax
c00021f3:	83 ec 14             	sub    esp,0x14
c00021f6:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c00021f9:	75 07                	jne    c0002202 <move_window+0x13>
c00021fb:	31 f6                	xor    esi,esi
c00021fd:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002200:	74 59                	je     c000225b <move_window+0x6c>
c0002202:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002206:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000220a:	89 d8                	mov    eax,ebx
c000220c:	e8 4a ff ff ff       	call   c000215b <sync_window>
c0002211:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002215:	89 c6                	mov    esi,eax
c0002217:	85 c0                	test   eax,eax
c0002219:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000221d:	75 3c                	jne    c000225b <move_window+0x6c>
c000221f:	83 ec 0c             	sub    esp,0xc
c0002222:	8d 43 54             	lea    eax,[ebx+0x54]
c0002225:	6a 01                	push   0x1
c0002227:	51                   	push   ecx
c0002228:	52                   	push   edx
c0002229:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000222d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002231:	50                   	push   eax
c0002232:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002236:	50                   	push   eax
c0002237:	e8 8a f7 ff ff       	call   c00019c6 <disk_read>
c000223c:	83 c4 20             	add    esp,0x20
c000223f:	85 c0                	test   eax,eax
c0002241:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002245:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002249:	74 0a                	je     c0002255 <move_window+0x66>
c000224b:	83 ca ff             	or     edx,0xffffffff
c000224e:	be 01 00 00 00       	mov    esi,0x1
c0002253:	89 d1                	mov    ecx,edx
c0002255:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c0002258:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c000225b:	89 f0                	mov    eax,esi
c000225d:	83 c4 14             	add    esp,0x14
c0002260:	5b                   	pop    ebx
c0002261:	5e                   	pop    esi
c0002262:	c3                   	ret    

c0002263 <check_fs>:
c0002263:	53                   	push   ebx
c0002264:	89 c3                	mov    ebx,eax
c0002266:	83 ec 08             	sub    esp,0x8
c0002269:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000226d:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c0002274:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c000227b:	e8 6f ff ff ff       	call   c00021ef <move_window>
c0002280:	ba 04 00 00 00       	mov    edx,0x4
c0002285:	85 c0                	test   eax,eax
c0002287:	0f 85 89 00 00 00    	jne    c0002316 <check_fs+0xb3>
c000228d:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0002293:	e8 79 f7 ff ff       	call   c0001a11 <ld_word>
c0002298:	ba 03 00 00 00       	mov    edx,0x3
c000229d:	66 3d 55 aa          	cmp    ax,0xaa55
c00022a1:	75 73                	jne    c0002316 <check_fs+0xb3>
c00022a3:	ba e0 7d 02 c0       	mov    edx,0xc0027de0
c00022a8:	8d 43 54             	lea    eax,[ebx+0x54]
c00022ab:	b9 0b 00 00 00       	mov    ecx,0xb
c00022b0:	e8 fb f7 ff ff       	call   c0001ab0 <mem_cmp>
c00022b5:	ba 01 00 00 00       	mov    edx,0x1
c00022ba:	85 c0                	test   eax,eax
c00022bc:	74 58                	je     c0002316 <check_fs+0xb3>
c00022be:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00022c1:	8d 50 18             	lea    edx,[eax+0x18]
c00022c4:	80 fa 01             	cmp    dl,0x1
c00022c7:	76 09                	jbe    c00022d2 <check_fs+0x6f>
c00022c9:	ba 02 00 00 00       	mov    edx,0x2
c00022ce:	3c eb                	cmp    al,0xeb
c00022d0:	75 44                	jne    c0002316 <check_fs+0xb3>
c00022d2:	ba 90 ad 02 c0       	mov    edx,0xc002ad90
c00022d7:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00022dd:	b9 03 00 00 00       	mov    ecx,0x3
c00022e2:	e8 c9 f7 ff ff       	call   c0001ab0 <mem_cmp>
c00022e7:	31 d2                	xor    edx,edx
c00022e9:	85 c0                	test   eax,eax
c00022eb:	74 29                	je     c0002316 <check_fs+0xb3>
c00022ed:	ba ec 7d 02 c0       	mov    edx,0xc0027dec
c00022f2:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c00022f8:	b9 05 00 00 00       	mov    ecx,0x5
c00022fd:	e8 ae f7 ff ff       	call   c0001ab0 <mem_cmp>
c0002302:	31 d2                	xor    edx,edx
c0002304:	85 c0                	test   eax,eax
c0002306:	74 0e                	je     c0002316 <check_fs+0xb3>
c0002308:	31 d2                	xor    edx,edx
c000230a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002311:	0f 95 c2             	setne  dl
c0002314:	01 d2                	add    edx,edx
c0002316:	89 d0                	mov    eax,edx
c0002318:	83 c4 08             	add    esp,0x8
c000231b:	5b                   	pop    ebx
c000231c:	c3                   	ret    

c000231d <find_volume>:
c000231d:	55                   	push   ebp
c000231e:	31 c9                	xor    ecx,ecx
c0002320:	57                   	push   edi
c0002321:	56                   	push   esi
c0002322:	89 d6                	mov    esi,edx
c0002324:	53                   	push   ebx
c0002325:	31 d2                	xor    edx,edx
c0002327:	83 ec 3c             	sub    esp,0x3c
c000232a:	89 c3                	mov    ebx,eax
c000232c:	e8 32 ff ff ff       	call   c0002263 <check_fs>
c0002331:	83 f8 02             	cmp    eax,0x2
c0002334:	74 0e                	je     c0002344 <find_volume+0x27>
c0002336:	0f 87 5d 01 00 00    	ja     c0002499 <find_volume+0x17c>
c000233c:	85 f6                	test   esi,esi
c000233e:	0f 84 55 01 00 00    	je     c0002499 <find_volume+0x17c>
c0002344:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000234b:	0f 85 dd 00 00 00    	jne    c000242e <find_volume+0x111>
c0002351:	31 c9                	xor    ecx,ecx
c0002353:	ba 01 00 00 00       	mov    edx,0x1
c0002358:	89 d8                	mov    eax,ebx
c000235a:	e8 90 fe ff ff       	call   c00021ef <move_window>
c000235f:	85 c0                	test   eax,eax
c0002361:	74 0a                	je     c000236d <find_volume+0x50>
c0002363:	b8 04 00 00 00       	mov    eax,0x4
c0002368:	e9 2c 01 00 00       	jmp    c0002499 <find_volume+0x17c>
c000236d:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002370:	89 e8                	mov    eax,ebp
c0002372:	e8 f6 fc ff ff       	call   c000206d <test_gpt_header>
c0002377:	85 c0                	test   eax,eax
c0002379:	75 0a                	jne    c0002385 <find_volume+0x68>
c000237b:	b8 03 00 00 00       	mov    eax,0x3
c0002380:	e9 14 01 00 00       	jmp    c0002499 <find_volume+0x17c>
c0002385:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c000238b:	e8 8e f6 ff ff       	call   c0001a1e <ld_dword>
c0002390:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002394:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c000239a:	e8 97 f6 ff ff       	call   c0001a36 <ld_qword>
c000239f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00023a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00023ab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023af:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023b7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023bb:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023bf:	74 ba                	je     c000237b <find_volume+0x5e>
c00023c1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00023c5:	31 c9                	xor    ecx,ecx
c00023c7:	c1 e7 07             	shl    edi,0x7
c00023ca:	89 d8                	mov    eax,ebx
c00023cc:	89 fa                	mov    edx,edi
c00023ce:	c1 ea 09             	shr    edx,0x9
c00023d1:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00023d5:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00023d9:	e8 11 fe ff ff       	call   c00021ef <move_window>
c00023de:	85 c0                	test   eax,eax
c00023e0:	75 81                	jne    c0002363 <find_volume+0x46>
c00023e2:	81 e7 80 01 00 00    	and    edi,0x180
c00023e8:	b9 10 00 00 00       	mov    ecx,0x10
c00023ed:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c00023f1:	ba d0 7d 02 c0       	mov    edx,0xc0027dd0
c00023f6:	e8 b5 f6 ff ff       	call   c0001ab0 <mem_cmp>
c00023fb:	85 c0                	test   eax,eax
c00023fd:	75 29                	jne    c0002428 <find_volume+0x10b>
c00023ff:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002403:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002407:	e8 2a f6 ff ff       	call   c0001a36 <ld_qword>
c000240c:	89 d1                	mov    ecx,edx
c000240e:	89 c2                	mov    edx,eax
c0002410:	89 d8                	mov    eax,ebx
c0002412:	e8 4c fe ff ff       	call   c0002263 <check_fs>
c0002417:	85 f6                	test   esi,esi
c0002419:	75 07                	jne    c0002422 <find_volume+0x105>
c000241b:	83 f8 01             	cmp    eax,0x1
c000241e:	77 08                	ja     c0002428 <find_volume+0x10b>
c0002420:	eb 77                	jmp    c0002499 <find_volume+0x17c>
c0002422:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002426:	74 71                	je     c0002499 <find_volume+0x17c>
c0002428:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000242c:	eb 89                	jmp    c00023b7 <find_volume+0x9a>
c000242e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002432:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002438:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000243e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002442:	89 cd                	mov    ebp,ecx
c0002444:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002448:	89 f8                	mov    eax,edi
c000244a:	83 c7 10             	add    edi,0x10
c000244d:	e8 cc f5 ff ff       	call   c0001a1e <ld_dword>
c0002452:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002456:	89 01                	mov    DWORD PTR [ecx],eax
c0002458:	83 c1 04             	add    ecx,0x4
c000245b:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000245f:	75 e3                	jne    c0002444 <find_volume+0x127>
c0002461:	31 ff                	xor    edi,edi
c0002463:	85 f6                	test   esi,esi
c0002465:	74 03                	je     c000246a <find_volume+0x14d>
c0002467:	8d 7e ff             	lea    edi,[esi-0x1]
c000246a:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c000246e:	85 d2                	test   edx,edx
c0002470:	74 14                	je     c0002486 <find_volume+0x169>
c0002472:	31 c9                	xor    ecx,ecx
c0002474:	89 d8                	mov    eax,ebx
c0002476:	e8 e8 fd ff ff       	call   c0002263 <check_fs>
c000247b:	83 f8 01             	cmp    eax,0x1
c000247e:	76 19                	jbe    c0002499 <find_volume+0x17c>
c0002480:	85 f6                	test   esi,esi
c0002482:	74 0f                	je     c0002493 <find_volume+0x176>
c0002484:	eb 13                	jmp    c0002499 <find_volume+0x17c>
c0002486:	85 f6                	test   esi,esi
c0002488:	0f 85 ed fe ff ff    	jne    c000237b <find_volume+0x5e>
c000248e:	b8 03 00 00 00       	mov    eax,0x3
c0002493:	47                   	inc    edi
c0002494:	83 ff 03             	cmp    edi,0x3
c0002497:	76 d1                	jbe    c000246a <find_volume+0x14d>
c0002499:	83 c4 3c             	add    esp,0x3c
c000249c:	5b                   	pop    ebx
c000249d:	5e                   	pop    esi
c000249e:	5f                   	pop    edi
c000249f:	5d                   	pop    ebp
c00024a0:	c3                   	ret    

c00024a1 <mount_volume>:
c00024a1:	55                   	push   ebp
c00024a2:	57                   	push   edi
c00024a3:	89 cf                	mov    edi,ecx
c00024a5:	56                   	push   esi
c00024a6:	53                   	push   ebx
c00024a7:	bb 0b 00 00 00       	mov    ebx,0xb
c00024ac:	83 ec 3c             	sub    esp,0x3c
c00024af:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024b5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024b9:	e8 35 fb ff ff       	call   c0001ff3 <get_ldnumber>
c00024be:	85 c0                	test   eax,eax
c00024c0:	0f 88 3a 05 00 00    	js     c0002a00 <mount_volume+0x55f>
c00024c6:	8b 2c 85 c0 c8 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd3740]
c00024cd:	89 c6                	mov    esi,eax
c00024cf:	bb 0c 00 00 00       	mov    ebx,0xc
c00024d4:	85 ed                	test   ebp,ebp
c00024d6:	0f 84 24 05 00 00    	je     c0002a00 <mount_volume+0x55f>
c00024dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00024e0:	83 e7 fe             	and    edi,0xfffffffe
c00024e3:	89 2a                	mov    DWORD PTR [edx],ebp
c00024e5:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00024e9:	74 32                	je     c000251d <mount_volume+0x7c>
c00024eb:	83 ec 0c             	sub    esp,0xc
c00024ee:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00024f2:	50                   	push   eax
c00024f3:	e8 c8 f4 ff ff       	call   c00019c0 <disk_status>
c00024f8:	83 c4 10             	add    esp,0x10
c00024fb:	a8 01                	test   al,0x1
c00024fd:	75 1e                	jne    c000251d <mount_volume+0x7c>
c00024ff:	31 db                	xor    ebx,ebx
c0002501:	89 f9                	mov    ecx,edi
c0002503:	84 c9                	test   cl,cl
c0002505:	0f 84 f5 04 00 00    	je     c0002a00 <mount_volume+0x55f>
c000250b:	a8 04                	test   al,0x4
c000250d:	0f 84 ed 04 00 00    	je     c0002a00 <mount_volume+0x55f>
c0002513:	bb 0a 00 00 00       	mov    ebx,0xa
c0002518:	e9 e3 04 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	89 f0                	mov    eax,esi
c0002522:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002526:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002529:	0f b6 f0             	movzx  esi,al
c000252c:	bb 03 00 00 00       	mov    ebx,0x3
c0002531:	56                   	push   esi
c0002532:	e8 8c f4 ff ff       	call   c00019c3 <disk_initialize>
c0002537:	83 c4 10             	add    esp,0x10
c000253a:	a8 01                	test   al,0x1
c000253c:	0f 85 be 04 00 00    	jne    c0002a00 <mount_volume+0x55f>
c0002542:	89 f9                	mov    ecx,edi
c0002544:	84 c9                	test   cl,cl
c0002546:	74 04                	je     c000254c <mount_volume+0xab>
c0002548:	a8 04                	test   al,0x4
c000254a:	75 c7                	jne    c0002513 <mount_volume+0x72>
c000254c:	31 d2                	xor    edx,edx
c000254e:	89 e8                	mov    eax,ebp
c0002550:	e8 c8 fd ff ff       	call   c000231d <find_volume>
c0002555:	83 f8 04             	cmp    eax,0x4
c0002558:	75 0a                	jne    c0002564 <mount_volume+0xc3>
c000255a:	bb 01 00 00 00       	mov    ebx,0x1
c000255f:	e9 9c 04 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c0002564:	83 f8 01             	cmp    eax,0x1
c0002567:	76 0a                	jbe    c0002573 <mount_volume+0xd2>
c0002569:	bb 0d 00 00 00       	mov    ebx,0xd
c000256e:	e9 8d 04 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c0002573:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c0002576:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c0002579:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000257d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002581:	75 17                	jne    c000259a <mount_volume+0xf9>
c0002583:	b8 0b 00 00 00       	mov    eax,0xb
c0002588:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c000258d:	75 da                	jne    c0002569 <mount_volume+0xc8>
c000258f:	40                   	inc    eax
c0002590:	83 f8 40             	cmp    eax,0x40
c0002593:	75 f3                	jne    c0002588 <mount_volume+0xe7>
c0002595:	e9 5a 02 00 00       	jmp    c00027f4 <mount_volume+0x353>
c000259a:	8d 45 5f             	lea    eax,[ebp+0x5f]
c000259d:	e8 6f f4 ff ff       	call   c0001a11 <ld_word>
c00025a2:	66 3d 00 02          	cmp    ax,0x200
c00025a6:	75 c1                	jne    c0002569 <mount_volume+0xc8>
c00025a8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00025ab:	e8 61 f4 ff ff       	call   c0001a11 <ld_word>
c00025b0:	0f b7 c0             	movzx  eax,ax
c00025b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025b7:	85 c0                	test   eax,eax
c00025b9:	75 0c                	jne    c00025c7 <mount_volume+0x126>
c00025bb:	8d 45 78             	lea    eax,[ebp+0x78]
c00025be:	e8 5b f4 ff ff       	call   c0001a1e <ld_dword>
c00025c3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00025cb:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00025ce:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00025d1:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00025d5:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00025d8:	48                   	dec    eax
c00025d9:	3c 01                	cmp    al,0x1
c00025db:	77 8c                	ja     c0002569 <mount_volume+0xc8>
c00025dd:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00025e1:	89 c3                	mov    ebx,eax
c00025e3:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00025e7:	66 85 c0             	test   ax,ax
c00025ea:	0f 84 79 ff ff ff    	je     c0002569 <mount_volume+0xc8>
c00025f0:	8d 40 ff             	lea    eax,[eax-0x1]
c00025f3:	85 d8                	test   eax,ebx
c00025f5:	0f 85 6e ff ff ff    	jne    c0002569 <mount_volume+0xc8>
c00025fb:	8d 45 65             	lea    eax,[ebp+0x65]
c00025fe:	e8 0e f4 ff ff       	call   c0001a11 <ld_word>
c0002603:	89 c7                	mov    edi,eax
c0002605:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002609:	a8 0f                	test   al,0xf
c000260b:	0f 85 58 ff ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002611:	8d 45 67             	lea    eax,[ebp+0x67]
c0002614:	e8 f8 f3 ff ff       	call   c0001a11 <ld_word>
c0002619:	0f b7 f0             	movzx  esi,ax
c000261c:	85 f6                	test   esi,esi
c000261e:	75 0a                	jne    c000262a <mount_volume+0x189>
c0002620:	8d 45 74             	lea    eax,[ebp+0x74]
c0002623:	e8 f6 f3 ff ff       	call   c0001a1e <ld_dword>
c0002628:	89 c6                	mov    esi,eax
c000262a:	8d 45 62             	lea    eax,[ebp+0x62]
c000262d:	e8 df f3 ff ff       	call   c0001a11 <ld_word>
c0002632:	66 85 c0             	test   ax,ax
c0002635:	0f 84 2e ff ff ff    	je     c0002569 <mount_volume+0xc8>
c000263b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002640:	0f b7 c8             	movzx  ecx,ax
c0002643:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002648:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000264c:	89 fa                	mov    edx,edi
c000264e:	66 c1 ea 04          	shr    dx,0x4
c0002652:	0f b7 d2             	movzx  edx,dx
c0002655:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c0002659:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000265c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002660:	39 c6                	cmp    esi,eax
c0002662:	0f 82 01 ff ff ff    	jb     c0002569 <mount_volume+0xc8>
c0002668:	29 c6                	sub    esi,eax
c000266a:	31 d2                	xor    edx,edx
c000266c:	89 f0                	mov    eax,esi
c000266e:	f7 f3                	div    ebx
c0002670:	39 de                	cmp    esi,ebx
c0002672:	0f 82 f1 fe ff ff    	jb     c0002569 <mount_volume+0xc8>
c0002678:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000267d:	0f 87 e6 fe ff ff    	ja     c0002569 <mount_volume+0xc8>
c0002683:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002688:	0f 86 63 03 00 00    	jbe    c00029f1 <mount_volume+0x550>
c000268e:	bb 03 00 00 00       	mov    ebx,0x3
c0002693:	8d 70 02             	lea    esi,[eax+0x2]
c0002696:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000269a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000269e:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026a1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026a4:	31 d2                	xor    edx,edx
c00026a6:	89 c8                	mov    eax,ecx
c00026a8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00026ab:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026af:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026b3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026b7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026bb:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026be:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026c5:	31 d2                	xor    edx,edx
c00026c7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026cb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026cf:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00026d2:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00026d5:	83 fb 03             	cmp    ebx,0x3
c00026d8:	75 2b                	jne    c0002705 <mount_volume+0x264>
c00026da:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00026dd:	e8 2f f3 ff ff       	call   c0001a11 <ld_word>
c00026e2:	66 09 c7             	or     di,ax
c00026e5:	0f 85 7e fe ff ff    	jne    c0002569 <mount_volume+0xc8>
c00026eb:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c00026f1:	c1 e6 02             	shl    esi,0x2
c00026f4:	e8 25 f3 ff ff       	call   c0001a1e <ld_dword>
c00026f9:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002700:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002703:	eb 30                	jmp    c0002735 <mount_volume+0x294>
c0002705:	66 85 ff             	test   di,di
c0002708:	0f 84 5b fe ff ff    	je     c0002569 <mount_volume+0xc8>
c000270e:	31 d2                	xor    edx,edx
c0002710:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002714:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002718:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000271c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000271f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002722:	83 fb 02             	cmp    ebx,0x2
c0002725:	75 04                	jne    c000272b <mount_volume+0x28a>
c0002727:	01 f6                	add    esi,esi
c0002729:	eb 0a                	jmp    c0002735 <mount_volume+0x294>
c000272b:	8d 04 76             	lea    eax,[esi+esi*2]
c000272e:	83 e6 01             	and    esi,0x1
c0002731:	d1 e8                	shr    eax,1
c0002733:	01 c6                	add    esi,eax
c0002735:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000273b:	c1 ee 09             	shr    esi,0x9
c000273e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002742:	0f 87 21 fe ff ff    	ja     c0002569 <mount_volume+0xc8>
c0002748:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000274f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002756:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c000275a:	83 fb 03             	cmp    ebx,0x3
c000275d:	75 7a                	jne    c00027d9 <mount_volume+0x338>
c000275f:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c0002765:	e8 a7 f2 ff ff       	call   c0001a11 <ld_word>
c000276a:	66 48                	dec    ax
c000276c:	75 6b                	jne    c00027d9 <mount_volume+0x338>
c000276e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002772:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002776:	83 c2 01             	add    edx,0x1
c0002779:	89 e8                	mov    eax,ebp
c000277b:	83 d1 00             	adc    ecx,0x0
c000277e:	e8 6c fa ff ff       	call   c00021ef <move_window>
c0002783:	85 c0                	test   eax,eax
c0002785:	75 52                	jne    c00027d9 <mount_volume+0x338>
c0002787:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c000278b:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c0002791:	e8 7b f2 ff ff       	call   c0001a11 <ld_word>
c0002796:	66 3d 55 aa          	cmp    ax,0xaa55
c000279a:	75 3d                	jne    c00027d9 <mount_volume+0x338>
c000279c:	8d 45 54             	lea    eax,[ebp+0x54]
c000279f:	e8 7a f2 ff ff       	call   c0001a1e <ld_dword>
c00027a4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027a9:	75 2e                	jne    c00027d9 <mount_volume+0x338>
c00027ab:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027b1:	e8 68 f2 ff ff       	call   c0001a1e <ld_dword>
c00027b6:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027bb:	75 1c                	jne    c00027d9 <mount_volume+0x338>
c00027bd:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027c3:	e8 56 f2 ff ff       	call   c0001a1e <ld_dword>
c00027c8:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00027cb:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00027d1:	e8 48 f2 ff ff       	call   c0001a1e <ld_dword>
c00027d6:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00027d9:	66 a1 a0 c8 02 c0    	mov    ax,ds:0xc002c8a0
c00027df:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00027e2:	40                   	inc    eax
c00027e3:	31 db                	xor    ebx,ebx
c00027e5:	66 a3 a0 c8 02 c0    	mov    ds:0xc002c8a0,ax
c00027eb:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c00027ef:	e9 0c 02 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c00027f4:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c00027fa:	e8 12 f2 ff ff       	call   c0001a11 <ld_word>
c00027ff:	66 3d 00 01          	cmp    ax,0x100
c0002803:	0f 85 60 fd ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002809:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002810:	0f 85 53 fd ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002816:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c000281c:	e8 15 f2 ff ff       	call   c0001a36 <ld_qword>
c0002821:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002825:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002829:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c000282f:	e8 ea f1 ff ff       	call   c0001a1e <ld_dword>
c0002834:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002837:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c000283d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002840:	fe c8                	dec    al
c0002842:	0f 85 21 fd ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002848:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c000284f:	bb 01 00 00 00       	mov    ebx,0x1
c0002854:	d3 e3                	shl    ebx,cl
c0002856:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c000285a:	66 85 db             	test   bx,bx
c000285d:	0f 84 06 fd ff ff    	je     c0002569 <mount_volume+0xc8>
c0002863:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002869:	e8 b0 f1 ff ff       	call   c0001a1e <ld_dword>
c000286e:	89 c6                	mov    esi,eax
c0002870:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002875:	0f 87 ee fc ff ff    	ja     c0002569 <mount_volume+0xc8>
c000287b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000287f:	8d 40 02             	lea    eax,[eax+0x2]
c0002882:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002885:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002888:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000288c:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000288f:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002895:	e8 84 f1 ff ff       	call   c0001a1e <ld_dword>
c000289a:	31 d2                	xor    edx,edx
c000289c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028a0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028a8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00028ac:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028af:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028b2:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028b8:	e8 61 f1 ff ff       	call   c0001a1e <ld_dword>
c00028bd:	31 d2                	xor    edx,edx
c00028bf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00028c3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028cb:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028ce:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d1:	0f b7 c3             	movzx  eax,bx
c00028d4:	31 d2                	xor    edx,edx
c00028d6:	0f af f0             	imul   esi,eax
c00028d9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00028dd:	89 f0                	mov    eax,esi
c00028df:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00028e3:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c00028e7:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00028eb:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c00028ef:	39 c1                	cmp    ecx,eax
c00028f1:	89 df                	mov    edi,ebx
c00028f3:	19 d7                	sbb    edi,edx
c00028f5:	0f 82 6e fc ff ff    	jb     c0002569 <mount_volume+0xc8>
c00028fb:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002901:	31 db                	xor    ebx,ebx
c0002903:	e8 16 f1 ff ff       	call   c0001a1e <ld_dword>
c0002908:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000290f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002912:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000291a:	85 db                	test   ebx,ebx
c000291c:	75 39                	jne    c0002957 <mount_volume+0x4b6>
c000291e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002922:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002926:	0f 86 3d fc ff ff    	jbe    c0002569 <mount_volume+0xc8>
c000292c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c000292f:	31 ff                	xor    edi,edi
c0002931:	89 e8                	mov    eax,ebp
c0002933:	e8 72 f3 ff ff       	call   c0001caa <clst2sect>
c0002938:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000293c:	01 c6                	add    esi,eax
c000293e:	89 e8                	mov    eax,ebp
c0002940:	11 d7                	adc    edi,edx
c0002942:	89 f2                	mov    edx,esi
c0002944:	89 f9                	mov    ecx,edi
c0002946:	e8 a4 f8 ff ff       	call   c00021ef <move_window>
c000294b:	85 c0                	test   eax,eax
c000294d:	0f 85 07 fc ff ff    	jne    c000255a <mount_volume+0xb9>
c0002953:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002957:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c000295c:	74 0b                	je     c0002969 <mount_volume+0x4c8>
c000295e:	83 c3 20             	add    ebx,0x20
c0002961:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002967:	eb b1                	jmp    c000291a <mount_volume+0x479>
c0002969:	8d 75 54             	lea    esi,[ebp+0x54]
c000296c:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002970:	e8 a9 f0 ff ff       	call   c0001a1e <ld_dword>
c0002975:	89 c3                	mov    ebx,eax
c0002977:	83 f8 01             	cmp    eax,0x1
c000297a:	0f 86 e9 fb ff ff    	jbe    c0002569 <mount_volume+0xc8>
c0002980:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002983:	0f 86 e0 fb ff ff    	jbe    c0002569 <mount_volume+0xc8>
c0002989:	8d 53 fe             	lea    edx,[ebx-0x2]
c000298c:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002990:	0f af c2             	imul   eax,edx
c0002993:	31 d2                	xor    edx,edx
c0002995:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002998:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c000299b:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c000299e:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029a1:	31 c9                	xor    ecx,ecx
c00029a3:	89 da                	mov    edx,ebx
c00029a5:	89 e8                	mov    eax,ebp
c00029a7:	c1 ea 07             	shr    edx,0x7
c00029aa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c00029ad:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029b0:	e8 3a f8 ff ff       	call   c00021ef <move_window>
c00029b5:	85 c0                	test   eax,eax
c00029b7:	0f 85 9d fb ff ff    	jne    c000255a <mount_volume+0xb9>
c00029bd:	89 d8                	mov    eax,ebx
c00029bf:	83 e0 7f             	and    eax,0x7f
c00029c2:	8d 04 86             	lea    eax,[esi+eax*4]
c00029c5:	e8 54 f0 ff ff       	call   c0001a1e <ld_dword>
c00029ca:	83 f8 ff             	cmp    eax,0xffffffff
c00029cd:	74 0a                	je     c00029d9 <mount_volume+0x538>
c00029cf:	43                   	inc    ebx
c00029d0:	39 d8                	cmp    eax,ebx
c00029d2:	74 cd                	je     c00029a1 <mount_volume+0x500>
c00029d4:	e9 90 fb ff ff       	jmp    c0002569 <mount_volume+0xc8>
c00029d9:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00029e0:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029e7:	bb 04 00 00 00       	mov    ebx,0x4
c00029ec:	e9 e8 fd ff ff       	jmp    c00027d9 <mount_volume+0x338>
c00029f1:	3d f6 0f 00 00       	cmp    eax,0xff6
c00029f6:	19 db                	sbb    ebx,ebx
c00029f8:	83 c3 02             	add    ebx,0x2
c00029fb:	e9 93 fc ff ff       	jmp    c0002693 <mount_volume+0x1f2>
c0002a00:	83 c4 3c             	add    esp,0x3c
c0002a03:	89 d8                	mov    eax,ebx
c0002a05:	5b                   	pop    ebx
c0002a06:	5e                   	pop    esi
c0002a07:	5f                   	pop    edi
c0002a08:	5d                   	pop    ebp
c0002a09:	c3                   	ret    

c0002a0a <find_bitmap>:
c0002a0a:	55                   	push   ebp
c0002a0b:	57                   	push   edi
c0002a0c:	89 c7                	mov    edi,eax
c0002a0e:	56                   	push   esi
c0002a0f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a12:	53                   	push   ebx
c0002a13:	83 ec 1c             	sub    esp,0x1c
c0002a16:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a19:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a1d:	83 e8 02             	sub    eax,0x2
c0002a20:	39 f0                	cmp    eax,esi
c0002a22:	77 02                	ja     c0002a26 <find_bitmap+0x1c>
c0002a24:	31 f6                	xor    esi,esi
c0002a26:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a2a:	89 f3                	mov    ebx,esi
c0002a2c:	31 ed                	xor    ebp,ebp
c0002a2e:	31 c9                	xor    ecx,ecx
c0002a30:	89 da                	mov    edx,ebx
c0002a32:	89 f8                	mov    eax,edi
c0002a34:	c1 ea 0c             	shr    edx,0xc
c0002a37:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a3a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a3d:	e8 ad f7 ff ff       	call   c00021ef <move_window>
c0002a42:	85 c0                	test   eax,eax
c0002a44:	75 68                	jne    c0002aae <find_bitmap+0xa4>
c0002a46:	89 da                	mov    edx,ebx
c0002a48:	89 d9                	mov    ecx,ebx
c0002a4a:	c1 ea 03             	shr    edx,0x3
c0002a4d:	83 e1 07             	and    ecx,0x7
c0002a50:	b8 01 00 00 00       	mov    eax,0x1
c0002a55:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a5b:	d3 e0                	shl    eax,cl
c0002a5d:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a60:	83 e9 02             	sub    ecx,0x2
c0002a63:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a67:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002a6b:	43                   	inc    ebx
c0002a6c:	21 c1                	and    ecx,eax
c0002a6e:	d1 e0                	shl    eax,1
c0002a70:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002a74:	77 09                	ja     c0002a7f <find_bitmap+0x75>
c0002a76:	31 db                	xor    ebx,ebx
c0002a78:	ba 00 02 00 00       	mov    edx,0x200
c0002a7d:	31 c0                	xor    eax,eax
c0002a7f:	84 c9                	test   cl,cl
c0002a81:	75 10                	jne    c0002a93 <find_bitmap+0x89>
c0002a83:	45                   	inc    ebp
c0002a84:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002a88:	75 0f                	jne    c0002a99 <find_bitmap+0x8f>
c0002a8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a8e:	83 c0 02             	add    eax,0x2
c0002a91:	eb 22                	jmp    c0002ab5 <find_bitmap+0xab>
c0002a93:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a97:	31 ed                	xor    ebp,ebp
c0002a99:	39 de                	cmp    esi,ebx
c0002a9b:	74 16                	je     c0002ab3 <find_bitmap+0xa9>
c0002a9d:	84 c0                	test   al,al
c0002a9f:	75 c6                	jne    c0002a67 <find_bitmap+0x5d>
c0002aa1:	42                   	inc    edx
c0002aa2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002aa8:	77 84                	ja     c0002a2e <find_bitmap+0x24>
c0002aaa:	b0 01                	mov    al,0x1
c0002aac:	eb b9                	jmp    c0002a67 <find_bitmap+0x5d>
c0002aae:	83 c8 ff             	or     eax,0xffffffff
c0002ab1:	eb 02                	jmp    c0002ab5 <find_bitmap+0xab>
c0002ab3:	31 c0                	xor    eax,eax
c0002ab5:	83 c4 1c             	add    esp,0x1c
c0002ab8:	5b                   	pop    ebx
c0002ab9:	5e                   	pop    esi
c0002aba:	5f                   	pop    edi
c0002abb:	5d                   	pop    ebp
c0002abc:	c3                   	ret    

c0002abd <change_bitmap>:
c0002abd:	55                   	push   ebp
c0002abe:	89 cd                	mov    ebp,ecx
c0002ac0:	57                   	push   edi
c0002ac1:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002ac4:	56                   	push   esi
c0002ac5:	89 c7                	mov    edi,eax
c0002ac7:	53                   	push   ebx
c0002ac8:	89 c8                	mov    eax,ecx
c0002aca:	83 ec 1c             	sub    esp,0x1c
c0002acd:	31 d2                	xor    edx,edx
c0002acf:	89 ce                	mov    esi,ecx
c0002ad1:	c1 e8 0c             	shr    eax,0xc
c0002ad4:	bb 01 00 00 00       	mov    ebx,0x1
c0002ad9:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002adc:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002adf:	c1 ee 03             	shr    esi,0x3
c0002ae2:	83 e1 07             	and    ecx,0x7
c0002ae5:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002aeb:	d3 e3                	shl    ebx,cl
c0002aed:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002af1:	89 c1                	mov    ecx,eax
c0002af3:	89 d3                	mov    ebx,edx
c0002af5:	83 c1 01             	add    ecx,0x1
c0002af8:	83 d3 00             	adc    ebx,0x0
c0002afb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002aff:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b03:	89 d1                	mov    ecx,edx
c0002b05:	89 c2                	mov    edx,eax
c0002b07:	89 f8                	mov    eax,edi
c0002b09:	e8 e1 f6 ff ff       	call   c00021ef <move_window>
c0002b0e:	89 c1                	mov    ecx,eax
c0002b10:	85 c0                	test   eax,eax
c0002b12:	75 48                	jne    c0002b5c <change_bitmap+0x9f>
c0002b14:	31 d2                	xor    edx,edx
c0002b16:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b1a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b1e:	0f 95 c2             	setne  dl
c0002b21:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b25:	74 3c                	je     c0002b63 <change_bitmap+0xa6>
c0002b27:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b2b:	4d                   	dec    ebp
c0002b2c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b34:	74 32                	je     c0002b68 <change_bitmap+0xab>
c0002b36:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b3a:	75 d8                	jne    c0002b14 <change_bitmap+0x57>
c0002b3c:	8d 46 01             	lea    eax,[esi+0x1]
c0002b3f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b44:	89 c3                	mov    ebx,eax
c0002b46:	31 f6                	xor    esi,esi
c0002b48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b4c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b50:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b56:	74 99                	je     c0002af1 <change_bitmap+0x34>
c0002b58:	89 de                	mov    esi,ebx
c0002b5a:	eb b8                	jmp    c0002b14 <change_bitmap+0x57>
c0002b5c:	b9 01 00 00 00       	mov    ecx,0x1
c0002b61:	eb 05                	jmp    c0002b68 <change_bitmap+0xab>
c0002b63:	b9 02 00 00 00       	mov    ecx,0x2
c0002b68:	83 c4 1c             	add    esp,0x1c
c0002b6b:	89 c8                	mov    eax,ecx
c0002b6d:	5b                   	pop    ebx
c0002b6e:	5e                   	pop    esi
c0002b6f:	5f                   	pop    edi
c0002b70:	5d                   	pop    ebp
c0002b71:	c3                   	ret    

c0002b72 <put_fat>:
c0002b72:	83 fa 01             	cmp    edx,0x1
c0002b75:	0f 86 7b 01 00 00    	jbe    c0002cf6 <put_fat+0x184>
c0002b7b:	55                   	push   ebp
c0002b7c:	57                   	push   edi
c0002b7d:	89 cf                	mov    edi,ecx
c0002b7f:	56                   	push   esi
c0002b80:	b9 02 00 00 00       	mov    ecx,0x2
c0002b85:	53                   	push   ebx
c0002b86:	89 c6                	mov    esi,eax
c0002b88:	83 ec 1c             	sub    esp,0x1c
c0002b8b:	89 d3                	mov    ebx,edx
c0002b8d:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002b90:	0f 86 68 01 00 00    	jbe    c0002cfe <put_fat+0x18c>
c0002b96:	8a 00                	mov    al,BYTE PTR [eax]
c0002b98:	3c 02                	cmp    al,0x2
c0002b9a:	0f 84 c7 00 00 00    	je     c0002c67 <put_fat+0xf5>
c0002ba0:	77 09                	ja     c0002bab <put_fat+0x39>
c0002ba2:	fe c8                	dec    al
c0002ba4:	74 17                	je     c0002bbd <put_fat+0x4b>
c0002ba6:	e9 53 01 00 00       	jmp    c0002cfe <put_fat+0x18c>
c0002bab:	b9 02 00 00 00       	mov    ecx,0x2
c0002bb0:	3c 04                	cmp    al,0x4
c0002bb2:	0f 86 e1 00 00 00    	jbe    c0002c99 <put_fat+0x127>
c0002bb8:	e9 41 01 00 00       	jmp    c0002cfe <put_fat+0x18c>
c0002bbd:	89 d5                	mov    ebp,edx
c0002bbf:	31 c9                	xor    ecx,ecx
c0002bc1:	d1 ed                	shr    ebp,1
c0002bc3:	89 f0                	mov    eax,esi
c0002bc5:	01 d5                	add    ebp,edx
c0002bc7:	89 ea                	mov    edx,ebp
c0002bc9:	c1 ea 09             	shr    edx,0x9
c0002bcc:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bcf:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bd2:	e8 18 f6 ff ff       	call   c00021ef <move_window>
c0002bd7:	89 c1                	mov    ecx,eax
c0002bd9:	85 c0                	test   eax,eax
c0002bdb:	0f 85 1d 01 00 00    	jne    c0002cfe <put_fat+0x18c>
c0002be1:	8d 46 54             	lea    eax,[esi+0x54]
c0002be4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002be8:	8d 45 01             	lea    eax,[ebp+0x1]
c0002beb:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002bf1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002bf5:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002bf9:	89 f8                	mov    eax,edi
c0002bfb:	83 e3 01             	and    ebx,0x1
c0002bfe:	74 0d                	je     c0002c0d <put_fat+0x9b>
c0002c00:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c03:	89 fa                	mov    edx,edi
c0002c05:	83 e0 0f             	and    eax,0xf
c0002c08:	c1 e2 04             	shl    edx,0x4
c0002c0b:	09 d0                	or     eax,edx
c0002c0d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c10:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c14:	31 c9                	xor    ecx,ecx
c0002c16:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c1a:	c1 ea 09             	shr    edx,0x9
c0002c1d:	89 f0                	mov    eax,esi
c0002c1f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c22:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c25:	e8 c5 f5 ff ff       	call   c00021ef <move_window>
c0002c2a:	89 c1                	mov    ecx,eax
c0002c2c:	85 c0                	test   eax,eax
c0002c2e:	0f 85 ca 00 00 00    	jne    c0002cfe <put_fat+0x18c>
c0002c34:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c38:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c3e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c42:	85 db                	test   ebx,ebx
c0002c44:	74 07                	je     c0002c4d <put_fat+0xdb>
c0002c46:	c1 ef 04             	shr    edi,0x4
c0002c49:	89 fa                	mov    edx,edi
c0002c4b:	eb 0e                	jmp    c0002c5b <put_fat+0xe9>
c0002c4d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c50:	c1 ef 08             	shr    edi,0x8
c0002c53:	83 e2 f0             	and    edx,0xfffffff0
c0002c56:	83 e7 0f             	and    edi,0xf
c0002c59:	09 fa                	or     edx,edi
c0002c5b:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c5e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c62:	e9 97 00 00 00       	jmp    c0002cfe <put_fat+0x18c>
c0002c67:	31 c9                	xor    ecx,ecx
c0002c69:	c1 ea 08             	shr    edx,0x8
c0002c6c:	89 f0                	mov    eax,esi
c0002c6e:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c71:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c74:	e8 76 f5 ff ff       	call   c00021ef <move_window>
c0002c79:	89 c1                	mov    ecx,eax
c0002c7b:	85 c0                	test   eax,eax
c0002c7d:	75 7f                	jne    c0002cfe <put_fat+0x18c>
c0002c7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c83:	01 db                	add    ebx,ebx
c0002c85:	0f b7 d7             	movzx  edx,di
c0002c88:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002c8e:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c92:	e8 ec ed ff ff       	call   c0001a83 <st_word>
c0002c97:	eb 53                	jmp    c0002cec <put_fat+0x17a>
c0002c99:	31 c9                	xor    ecx,ecx
c0002c9b:	c1 ea 07             	shr    edx,0x7
c0002c9e:	89 f0                	mov    eax,esi
c0002ca0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ca3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ca6:	e8 44 f5 ff ff       	call   c00021ef <move_window>
c0002cab:	89 c1                	mov    ecx,eax
c0002cad:	85 c0                	test   eax,eax
c0002caf:	75 4d                	jne    c0002cfe <put_fat+0x18c>
c0002cb1:	c1 e3 02             	shl    ebx,0x2
c0002cb4:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002cba:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002cbd:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002cc1:	74 1c                	je     c0002cdf <put_fat+0x16d>
c0002cc3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cc7:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ccd:	89 d8                	mov    eax,ebx
c0002ccf:	e8 4a ed ff ff       	call   c0001a1e <ld_dword>
c0002cd4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002cd8:	25 00 00 00 f0       	and    eax,0xf0000000
c0002cdd:	09 c7                	or     edi,eax
c0002cdf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ce3:	89 fa                	mov    edx,edi
c0002ce5:	89 d8                	mov    eax,ebx
c0002ce7:	e8 9b ed ff ff       	call   c0001a87 <st_dword>
c0002cec:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002cf0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002cf4:	eb 08                	jmp    c0002cfe <put_fat+0x18c>
c0002cf6:	b9 02 00 00 00       	mov    ecx,0x2
c0002cfb:	89 c8                	mov    eax,ecx
c0002cfd:	c3                   	ret    
c0002cfe:	83 c4 1c             	add    esp,0x1c
c0002d01:	89 c8                	mov    eax,ecx
c0002d03:	5b                   	pop    ebx
c0002d04:	5e                   	pop    esi
c0002d05:	5f                   	pop    edi
c0002d06:	5d                   	pop    ebp
c0002d07:	c3                   	ret    

c0002d08 <fill_last_frag>:
c0002d08:	57                   	push   edi
c0002d09:	89 cf                	mov    edi,ecx
c0002d0b:	56                   	push   esi
c0002d0c:	89 d6                	mov    esi,edx
c0002d0e:	53                   	push   ebx
c0002d0f:	89 c3                	mov    ebx,eax
c0002d11:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d14:	85 c0                	test   eax,eax
c0002d16:	74 21                	je     c0002d39 <fill_last_frag+0x31>
c0002d18:	89 f9                	mov    ecx,edi
c0002d1a:	83 f8 01             	cmp    eax,0x1
c0002d1d:	76 05                	jbe    c0002d24 <fill_last_frag+0x1c>
c0002d1f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d22:	29 c1                	sub    ecx,eax
c0002d24:	8d 56 01             	lea    edx,[esi+0x1]
c0002d27:	29 c2                	sub    edx,eax
c0002d29:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d2b:	e8 42 fe ff ff       	call   c0002b72 <put_fat>
c0002d30:	85 c0                	test   eax,eax
c0002d32:	75 05                	jne    c0002d39 <fill_last_frag+0x31>
c0002d34:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d37:	eb d8                	jmp    c0002d11 <fill_last_frag+0x9>
c0002d39:	5b                   	pop    ebx
c0002d3a:	5e                   	pop    esi
c0002d3b:	5f                   	pop    edi
c0002d3c:	c3                   	ret    

c0002d3d <fill_first_frag>:
c0002d3d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d41:	75 2d                	jne    c0002d70 <fill_first_frag+0x33>
c0002d43:	57                   	push   edi
c0002d44:	56                   	push   esi
c0002d45:	53                   	push   ebx
c0002d46:	89 c3                	mov    ebx,eax
c0002d48:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d4b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d4e:	01 d7                	add    edi,edx
c0002d50:	39 fa                	cmp    edx,edi
c0002d52:	74 14                	je     c0002d68 <fill_first_frag+0x2b>
c0002d54:	8d 72 01             	lea    esi,[edx+0x1]
c0002d57:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d59:	89 f1                	mov    ecx,esi
c0002d5b:	e8 12 fe ff ff       	call   c0002b72 <put_fat>
c0002d60:	89 f2                	mov    edx,esi
c0002d62:	85 c0                	test   eax,eax
c0002d64:	74 ea                	je     c0002d50 <fill_first_frag+0x13>
c0002d66:	eb 0b                	jmp    c0002d73 <fill_first_frag+0x36>
c0002d68:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002d6c:	31 c0                	xor    eax,eax
c0002d6e:	eb 03                	jmp    c0002d73 <fill_first_frag+0x36>
c0002d70:	31 c0                	xor    eax,eax
c0002d72:	c3                   	ret    
c0002d73:	5b                   	pop    ebx
c0002d74:	5e                   	pop    esi
c0002d75:	5f                   	pop    edi
c0002d76:	c3                   	ret    

c0002d77 <get_fat>:
c0002d77:	83 fa 01             	cmp    edx,0x1
c0002d7a:	0f 86 db 01 00 00    	jbe    c0002f5b <get_fat+0x1e4>
c0002d80:	55                   	push   ebp
c0002d81:	b9 01 00 00 00       	mov    ecx,0x1
c0002d86:	57                   	push   edi
c0002d87:	56                   	push   esi
c0002d88:	53                   	push   ebx
c0002d89:	83 ec 1c             	sub    esp,0x1c
c0002d8c:	8b 38                	mov    edi,DWORD PTR [eax]
c0002d8e:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002d91:	0f 86 cc 01 00 00    	jbe    c0002f63 <get_fat+0x1ec>
c0002d97:	89 c3                	mov    ebx,eax
c0002d99:	89 d6                	mov    esi,edx
c0002d9b:	8a 07                	mov    al,BYTE PTR [edi]
c0002d9d:	3c 02                	cmp    al,0x2
c0002d9f:	0f 84 99 00 00 00    	je     c0002e3e <get_fat+0xc7>
c0002da5:	77 09                	ja     c0002db0 <get_fat+0x39>
c0002da7:	fe c8                	dec    al
c0002da9:	74 1a                	je     c0002dc5 <get_fat+0x4e>
c0002dab:	e9 b3 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002db0:	3c 03                	cmp    al,0x3
c0002db2:	0f 84 b5 00 00 00    	je     c0002e6d <get_fat+0xf6>
c0002db8:	3c 04                	cmp    al,0x4
c0002dba:	0f 84 e3 00 00 00    	je     c0002ea3 <get_fat+0x12c>
c0002dc0:	e9 9e 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002dc5:	89 d3                	mov    ebx,edx
c0002dc7:	31 c9                	xor    ecx,ecx
c0002dc9:	d1 eb                	shr    ebx,1
c0002dcb:	89 f8                	mov    eax,edi
c0002dcd:	01 d3                	add    ebx,edx
c0002dcf:	89 da                	mov    edx,ebx
c0002dd1:	c1 ea 09             	shr    edx,0x9
c0002dd4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dd7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002dda:	e8 10 f4 ff ff       	call   c00021ef <move_window>
c0002ddf:	85 c0                	test   eax,eax
c0002de1:	74 08                	je     c0002deb <get_fat+0x74>
c0002de3:	83 c9 ff             	or     ecx,0xffffffff
c0002de6:	e9 78 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002deb:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002dee:	31 c9                	xor    ecx,ecx
c0002df0:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002df6:	89 ea                	mov    edx,ebp
c0002df8:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002dfc:	c1 ea 09             	shr    edx,0x9
c0002dff:	89 f8                	mov    eax,edi
c0002e01:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e04:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e07:	e8 e3 f3 ff ff       	call   c00021ef <move_window>
c0002e0c:	85 c0                	test   eax,eax
c0002e0e:	75 d3                	jne    c0002de3 <get_fat+0x6c>
c0002e10:	0f b6 c3             	movzx  eax,bl
c0002e13:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e19:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e1e:	c1 e3 08             	shl    ebx,0x8
c0002e21:	09 c3                	or     ebx,eax
c0002e23:	89 d9                	mov    ecx,ebx
c0002e25:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e2b:	83 e6 01             	and    esi,0x1
c0002e2e:	0f 84 2f 01 00 00    	je     c0002f63 <get_fat+0x1ec>
c0002e34:	89 d9                	mov    ecx,ebx
c0002e36:	c1 e9 04             	shr    ecx,0x4
c0002e39:	e9 25 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002e3e:	31 c9                	xor    ecx,ecx
c0002e40:	c1 ea 08             	shr    edx,0x8
c0002e43:	89 f8                	mov    eax,edi
c0002e45:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e48:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e4b:	e8 9f f3 ff ff       	call   c00021ef <move_window>
c0002e50:	85 c0                	test   eax,eax
c0002e52:	75 8f                	jne    c0002de3 <get_fat+0x6c>
c0002e54:	01 f6                	add    esi,esi
c0002e56:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e5c:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e60:	e8 ac eb ff ff       	call   c0001a11 <ld_word>
c0002e65:	0f b7 c8             	movzx  ecx,ax
c0002e68:	e9 f6 00 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002e6d:	31 c9                	xor    ecx,ecx
c0002e6f:	c1 ea 07             	shr    edx,0x7
c0002e72:	89 f8                	mov    eax,edi
c0002e74:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e77:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e7a:	e8 70 f3 ff ff       	call   c00021ef <move_window>
c0002e7f:	85 c0                	test   eax,eax
c0002e81:	0f 85 5c ff ff ff    	jne    c0002de3 <get_fat+0x6c>
c0002e87:	c1 e6 02             	shl    esi,0x2
c0002e8a:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002e90:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e94:	e8 85 eb ff ff       	call   c0001a1e <ld_dword>
c0002e99:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e9e:	e9 b4 00 00 00       	jmp    c0002f57 <get_fat+0x1e0>
c0002ea3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ea6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ea9:	89 d1                	mov    ecx,edx
c0002eab:	09 c1                	or     ecx,eax
c0002ead:	74 06                	je     c0002eb5 <get_fat+0x13e>
c0002eaf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002eb3:	75 0f                	jne    c0002ec4 <get_fat+0x14d>
c0002eb5:	b9 01 00 00 00       	mov    ecx,0x1
c0002eba:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002ebe:	0f 85 9f 00 00 00    	jne    c0002f63 <get_fat+0x1ec>
c0002ec4:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002ec8:	89 f5                	mov    ebp,esi
c0002eca:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002ecf:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002ed2:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002ed5:	80 f9 02             	cmp    cl,0x2
c0002ed8:	75 35                	jne    c0002f0f <get_fat+0x198>
c0002eda:	83 c0 ff             	add    eax,0xffffffff
c0002edd:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002ee2:	83 d2 ff             	adc    edx,0xffffffff
c0002ee5:	31 db                	xor    ebx,ebx
c0002ee7:	0f ac d0 09          	shrd   eax,edx,0x9
c0002eeb:	53                   	push   ebx
c0002eec:	c1 ea 09             	shr    edx,0x9
c0002eef:	51                   	push   ecx
c0002ef0:	52                   	push   edx
c0002ef1:	50                   	push   eax
c0002ef2:	e8 85 24 02 00       	call   c002537c <__udivdi3>
c0002ef7:	83 c4 10             	add    esp,0x10
c0002efa:	b9 01 00 00 00       	mov    ecx,0x1
c0002eff:	39 c5                	cmp    ebp,eax
c0002f01:	77 60                	ja     c0002f63 <get_fat+0x1ec>
c0002f03:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f08:	74 59                	je     c0002f63 <get_fat+0x1ec>
c0002f0a:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f0d:	eb 54                	jmp    c0002f63 <get_fat+0x1ec>
c0002f0f:	80 f9 03             	cmp    cl,0x3
c0002f12:	75 05                	jne    c0002f19 <get_fat+0x1a2>
c0002f14:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f17:	77 f1                	ja     c0002f0a <get_fat+0x193>
c0002f19:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f1e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f22:	75 3f                	jne    c0002f63 <get_fat+0x1ec>
c0002f24:	31 c9                	xor    ecx,ecx
c0002f26:	89 f2                	mov    edx,esi
c0002f28:	89 f8                	mov    eax,edi
c0002f2a:	c1 ea 07             	shr    edx,0x7
c0002f2d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f30:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f33:	e8 b7 f2 ff ff       	call   c00021ef <move_window>
c0002f38:	85 c0                	test   eax,eax
c0002f3a:	0f 85 a3 fe ff ff    	jne    c0002de3 <get_fat+0x6c>
c0002f40:	c1 e6 02             	shl    esi,0x2
c0002f43:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f49:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f4d:	e8 cc ea ff ff       	call   c0001a1e <ld_dword>
c0002f52:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f57:	89 c1                	mov    ecx,eax
c0002f59:	eb 08                	jmp    c0002f63 <get_fat+0x1ec>
c0002f5b:	b9 01 00 00 00       	mov    ecx,0x1
c0002f60:	89 c8                	mov    eax,ecx
c0002f62:	c3                   	ret    
c0002f63:	83 c4 1c             	add    esp,0x1c
c0002f66:	89 c8                	mov    eax,ecx
c0002f68:	5b                   	pop    ebx
c0002f69:	5e                   	pop    esi
c0002f6a:	5f                   	pop    edi
c0002f6b:	5d                   	pop    ebp
c0002f6c:	c3                   	ret    

c0002f6d <dir_sdi>:
c0002f6d:	55                   	push   ebp
c0002f6e:	57                   	push   edi
c0002f6f:	56                   	push   esi
c0002f70:	53                   	push   ebx
c0002f71:	89 c3                	mov    ebx,eax
c0002f73:	83 ec 1c             	sub    esp,0x1c
c0002f76:	8b 38                	mov    edi,DWORD PTR [eax]
c0002f78:	31 c0                	xor    eax,eax
c0002f7a:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002f7d:	0f 94 c0             	sete   al
c0002f80:	48                   	dec    eax
c0002f81:	25 00 00 20 f0       	and    eax,0xf0200000
c0002f86:	05 00 00 00 10       	add    eax,0x10000000
c0002f8b:	39 d0                	cmp    eax,edx
c0002f8d:	77 0a                	ja     c0002f99 <dir_sdi+0x2c>
c0002f8f:	b8 02 00 00 00       	mov    eax,0x2
c0002f94:	e9 c4 00 00 00       	jmp    c000305d <dir_sdi+0xf0>
c0002f99:	89 d6                	mov    esi,edx
c0002f9b:	f6 c2 1f             	test   dl,0x1f
c0002f9e:	75 ef                	jne    c0002f8f <dir_sdi+0x22>
c0002fa0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002fa3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002fa6:	85 c9                	test   ecx,ecx
c0002fa8:	75 2d                	jne    c0002fd7 <dir_sdi+0x6a>
c0002faa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002fad:	77 1b                	ja     c0002fca <dir_sdi+0x5d>
c0002faf:	89 f2                	mov    edx,esi
c0002fb1:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fb5:	c1 ea 05             	shr    edx,0x5
c0002fb8:	39 c2                	cmp    edx,eax
c0002fba:	73 d3                	jae    c0002f8f <dir_sdi+0x22>
c0002fbc:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fbf:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002fc2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fc5:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fc8:	eb 4b                	jmp    c0003015 <dir_sdi+0xa8>
c0002fca:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fcd:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fd1:	85 c0                	test   eax,eax
c0002fd3:	74 da                	je     c0002faf <dir_sdi+0x42>
c0002fd5:	89 c1                	mov    ecx,eax
c0002fd7:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002fdb:	c1 e5 09             	shl    ebp,0x9
c0002fde:	89 ca                	mov    edx,ecx
c0002fe0:	39 ee                	cmp    esi,ebp
c0002fe2:	72 1c                	jb     c0003000 <dir_sdi+0x93>
c0002fe4:	89 d8                	mov    eax,ebx
c0002fe6:	e8 8c fd ff ff       	call   c0002d77 <get_fat>
c0002feb:	89 c1                	mov    ecx,eax
c0002fed:	83 f8 ff             	cmp    eax,0xffffffff
c0002ff0:	74 66                	je     c0003058 <dir_sdi+0xeb>
c0002ff2:	83 f8 01             	cmp    eax,0x1
c0002ff5:	76 98                	jbe    c0002f8f <dir_sdi+0x22>
c0002ff7:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002ffa:	76 93                	jbe    c0002f8f <dir_sdi+0x22>
c0002ffc:	29 ee                	sub    esi,ebp
c0002ffe:	eb de                	jmp    c0002fde <dir_sdi+0x71>
c0003000:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003004:	89 f8                	mov    eax,edi
c0003006:	e8 9f ec ff ff       	call   c0001caa <clst2sect>
c000300b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000300f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003012:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003015:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003018:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000301b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000301e:	89 d1                	mov    ecx,edx
c0003020:	09 c1                	or     ecx,eax
c0003022:	0f 84 67 ff ff ff    	je     c0002f8f <dir_sdi+0x22>
c0003028:	89 f1                	mov    ecx,esi
c000302a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003032:	c1 e9 09             	shr    ecx,0x9
c0003035:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003039:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000303d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003041:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003044:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000304a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000304d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003051:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003054:	31 c0                	xor    eax,eax
c0003056:	eb 05                	jmp    c000305d <dir_sdi+0xf0>
c0003058:	b8 01 00 00 00       	mov    eax,0x1
c000305d:	83 c4 1c             	add    esp,0x1c
c0003060:	5b                   	pop    ebx
c0003061:	5e                   	pop    esi
c0003062:	5f                   	pop    edi
c0003063:	5d                   	pop    ebp
c0003064:	c3                   	ret    

c0003065 <create_chain>:
c0003065:	55                   	push   ebp
c0003066:	89 c5                	mov    ebp,eax
c0003068:	57                   	push   edi
c0003069:	56                   	push   esi
c000306a:	53                   	push   ebx
c000306b:	83 ec 1c             	sub    esp,0x1c
c000306e:	85 d2                	test   edx,edx
c0003070:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003074:	8b 30                	mov    esi,DWORD PTR [eax]
c0003076:	75 0e                	jne    c0003086 <create_chain+0x21>
c0003078:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000307b:	85 ff                	test   edi,edi
c000307d:	74 39                	je     c00030b8 <create_chain+0x53>
c000307f:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003082:	77 39                	ja     c00030bd <create_chain+0x58>
c0003084:	eb 32                	jmp    c00030b8 <create_chain+0x53>
c0003086:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000308a:	e8 e8 fc ff ff       	call   c0002d77 <get_fat>
c000308f:	89 c3                	mov    ebx,eax
c0003091:	83 f8 01             	cmp    eax,0x1
c0003094:	77 0a                	ja     c00030a0 <create_chain+0x3b>
c0003096:	bb 01 00 00 00       	mov    ebx,0x1
c000309b:	e9 ba 01 00 00       	jmp    c000325a <create_chain+0x1f5>
c00030a0:	83 f8 ff             	cmp    eax,0xffffffff
c00030a3:	0f 84 62 01 00 00    	je     c000320b <create_chain+0x1a6>
c00030a9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030ac:	0f 87 a8 01 00 00    	ja     c000325a <create_chain+0x1f5>
c00030b2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030b6:	eb 05                	jmp    c00030bd <create_chain+0x58>
c00030b8:	bf 01 00 00 00       	mov    edi,0x1
c00030bd:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030c1:	75 07                	jne    c00030ca <create_chain+0x65>
c00030c3:	31 db                	xor    ebx,ebx
c00030c5:	e9 90 01 00 00       	jmp    c000325a <create_chain+0x1f5>
c00030ca:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00030cd:	75 74                	jne    c0003143 <create_chain+0xde>
c00030cf:	b9 01 00 00 00       	mov    ecx,0x1
c00030d4:	89 fa                	mov    edx,edi
c00030d6:	89 f0                	mov    eax,esi
c00030d8:	e8 2d f9 ff ff       	call   c0002a0a <find_bitmap>
c00030dd:	89 c3                	mov    ebx,eax
c00030df:	8d 40 ff             	lea    eax,[eax-0x1]
c00030e2:	83 f8 fd             	cmp    eax,0xfffffffd
c00030e5:	0f 87 6f 01 00 00    	ja     c000325a <create_chain+0x1f5>
c00030eb:	83 ec 0c             	sub    esp,0xc
c00030ee:	b9 01 00 00 00       	mov    ecx,0x1
c00030f3:	6a 01                	push   0x1
c00030f5:	89 da                	mov    edx,ebx
c00030f7:	89 f0                	mov    eax,esi
c00030f9:	e8 bf f9 ff ff       	call   c0002abd <change_bitmap>
c00030fe:	83 c4 10             	add    esp,0x10
c0003101:	83 f8 02             	cmp    eax,0x2
c0003104:	74 90                	je     c0003096 <create_chain+0x31>
c0003106:	83 f8 01             	cmp    eax,0x1
c0003109:	0f 84 fc 00 00 00    	je     c000320b <create_chain+0x1a6>
c000310f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003114:	75 09                	jne    c000311f <create_chain+0xba>
c0003116:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000311a:	e9 0c 01 00 00       	jmp    c000322b <create_chain+0x1c6>
c000311f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003123:	0f 85 e7 00 00 00    	jne    c0003210 <create_chain+0x1ab>
c0003129:	8d 57 01             	lea    edx,[edi+0x1]
c000312c:	39 da                	cmp    edx,ebx
c000312e:	0f 84 f7 00 00 00    	je     c000322b <create_chain+0x1c6>
c0003134:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003137:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000313b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000313e:	e9 cd 00 00 00       	jmp    c0003210 <create_chain+0x1ab>
c0003143:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003147:	75 41                	jne    c000318a <create_chain+0x125>
c0003149:	8d 5f 01             	lea    ebx,[edi+0x1]
c000314c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000314f:	77 05                	ja     c0003156 <create_chain+0xf1>
c0003151:	bb 02 00 00 00       	mov    ebx,0x2
c0003156:	89 da                	mov    edx,ebx
c0003158:	89 e8                	mov    eax,ebp
c000315a:	e8 18 fc ff ff       	call   c0002d77 <get_fat>
c000315f:	83 f8 01             	cmp    eax,0x1
c0003162:	0f 84 2e ff ff ff    	je     c0003096 <create_chain+0x31>
c0003168:	83 f8 ff             	cmp    eax,0xffffffff
c000316b:	0f 84 9a 00 00 00    	je     c000320b <create_chain+0x1a6>
c0003171:	85 c0                	test   eax,eax
c0003173:	74 11                	je     c0003186 <create_chain+0x121>
c0003175:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0003178:	83 f8 01             	cmp    eax,0x1
c000317b:	76 0d                	jbe    c000318a <create_chain+0x125>
c000317d:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003180:	76 08                	jbe    c000318a <create_chain+0x125>
c0003182:	89 c7                	mov    edi,eax
c0003184:	eb 04                	jmp    c000318a <create_chain+0x125>
c0003186:	85 db                	test   ebx,ebx
c0003188:	75 38                	jne    c00031c2 <create_chain+0x15d>
c000318a:	89 fb                	mov    ebx,edi
c000318c:	43                   	inc    ebx
c000318d:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003190:	77 0e                	ja     c00031a0 <create_chain+0x13b>
c0003192:	83 ff 01             	cmp    edi,0x1
c0003195:	0f 86 28 ff ff ff    	jbe    c00030c3 <create_chain+0x5e>
c000319b:	bb 02 00 00 00       	mov    ebx,0x2
c00031a0:	89 da                	mov    edx,ebx
c00031a2:	89 e8                	mov    eax,ebp
c00031a4:	e8 ce fb ff ff       	call   c0002d77 <get_fat>
c00031a9:	85 c0                	test   eax,eax
c00031ab:	74 15                	je     c00031c2 <create_chain+0x15d>
c00031ad:	83 f8 01             	cmp    eax,0x1
c00031b0:	0f 84 e0 fe ff ff    	je     c0003096 <create_chain+0x31>
c00031b6:	40                   	inc    eax
c00031b7:	74 52                	je     c000320b <create_chain+0x1a6>
c00031b9:	39 fb                	cmp    ebx,edi
c00031bb:	75 cf                	jne    c000318c <create_chain+0x127>
c00031bd:	e9 01 ff ff ff       	jmp    c00030c3 <create_chain+0x5e>
c00031c2:	83 c9 ff             	or     ecx,0xffffffff
c00031c5:	89 da                	mov    edx,ebx
c00031c7:	89 f0                	mov    eax,esi
c00031c9:	e8 a4 f9 ff ff       	call   c0002b72 <put_fat>
c00031ce:	85 c0                	test   eax,eax
c00031d0:	75 32                	jne    c0003204 <create_chain+0x19f>
c00031d2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00031d7:	74 11                	je     c00031ea <create_chain+0x185>
c00031d9:	89 d9                	mov    ecx,ebx
c00031db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031df:	89 f0                	mov    eax,esi
c00031e1:	e8 8c f9 ff ff       	call   c0002b72 <put_fat>
c00031e6:	85 c0                	test   eax,eax
c00031e8:	75 1a                	jne    c0003204 <create_chain+0x19f>
c00031ea:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00031ed:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c00031f0:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c00031f3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00031f6:	39 d0                	cmp    eax,edx
c00031f8:	77 04                	ja     c00031fe <create_chain+0x199>
c00031fa:	48                   	dec    eax
c00031fb:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00031fe:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003202:	eb 56                	jmp    c000325a <create_chain+0x1f5>
c0003204:	48                   	dec    eax
c0003205:	0f 85 8b fe ff ff    	jne    c0003096 <create_chain+0x31>
c000320b:	83 cb ff             	or     ebx,0xffffffff
c000320e:	eb 4a                	jmp    c000325a <create_chain+0x1f5>
c0003210:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003214:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003217:	41                   	inc    ecx
c0003218:	39 d9                	cmp    ecx,ebx
c000321a:	75 19                	jne    c0003235 <create_chain+0x1d0>
c000321c:	b9 02 00 00 00       	mov    ecx,0x2
c0003221:	85 d2                	test   edx,edx
c0003223:	74 03                	je     c0003228 <create_chain+0x1c3>
c0003225:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003228:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000322b:	85 c0                	test   eax,eax
c000322d:	0f 85 63 fe ff ff    	jne    c0003096 <create_chain+0x31>
c0003233:	eb b5                	jmp    c00031ea <create_chain+0x185>
c0003235:	85 d2                	test   edx,edx
c0003237:	75 07                	jne    c0003240 <create_chain+0x1db>
c0003239:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003240:	89 d9                	mov    ecx,ebx
c0003242:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003246:	89 e8                	mov    eax,ebp
c0003248:	e8 bb fa ff ff       	call   c0002d08 <fill_last_frag>
c000324d:	85 c0                	test   eax,eax
c000324f:	75 b3                	jne    c0003204 <create_chain+0x19f>
c0003251:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003258:	eb 90                	jmp    c00031ea <create_chain+0x185>
c000325a:	83 c4 1c             	add    esp,0x1c
c000325d:	89 d8                	mov    eax,ebx
c000325f:	5b                   	pop    ebx
c0003260:	5e                   	pop    esi
c0003261:	5f                   	pop    edi
c0003262:	5d                   	pop    ebp
c0003263:	c3                   	ret    

c0003264 <remove_chain>:
c0003264:	55                   	push   ebp
c0003265:	57                   	push   edi
c0003266:	56                   	push   esi
c0003267:	53                   	push   ebx
c0003268:	83 ec 1c             	sub    esp,0x1c
c000326b:	83 fa 01             	cmp    edx,0x1
c000326e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003272:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003274:	77 0a                	ja     c0003280 <remove_chain+0x1c>
c0003276:	b8 02 00 00 00       	mov    eax,0x2
c000327b:	e9 24 01 00 00       	jmp    c00033a4 <remove_chain+0x140>
c0003280:	89 d6                	mov    esi,edx
c0003282:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c0003285:	76 ef                	jbe    c0003276 <remove_chain+0x12>
c0003287:	89 c7                	mov    edi,eax
c0003289:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000328e:	75 06                	jne    c0003296 <remove_chain+0x32>
c0003290:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003294:	eb 54                	jmp    c00032ea <remove_chain+0x86>
c0003296:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003299:	75 06                	jne    c00032a1 <remove_chain+0x3d>
c000329b:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c000329f:	74 ef                	je     c0003290 <remove_chain+0x2c>
c00032a1:	83 c9 ff             	or     ecx,0xffffffff
c00032a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00032a8:	89 d8                	mov    eax,ebx
c00032aa:	e8 c3 f8 ff ff       	call   c0002b72 <put_fat>
c00032af:	85 c0                	test   eax,eax
c00032b1:	74 dd                	je     c0003290 <remove_chain+0x2c>
c00032b3:	e9 ec 00 00 00       	jmp    c00033a4 <remove_chain+0x140>
c00032b8:	83 f8 01             	cmp    eax,0x1
c00032bb:	74 b9                	je     c0003276 <remove_chain+0x12>
c00032bd:	83 f8 ff             	cmp    eax,0xffffffff
c00032c0:	74 6d                	je     c000332f <remove_chain+0xcb>
c00032c2:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032c5:	75 6f                	jne    c0003336 <remove_chain+0xd2>
c00032c7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00032ca:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00032cd:	8d 51 fe             	lea    edx,[ecx-0x2]
c00032d0:	39 d0                	cmp    eax,edx
c00032d2:	73 08                	jae    c00032dc <remove_chain+0x78>
c00032d4:	40                   	inc    eax
c00032d5:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00032d9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00032dc:	8d 4e 01             	lea    ecx,[esi+0x1]
c00032df:	39 e9                	cmp    ecx,ebp
c00032e1:	75 64                	jne    c0003347 <remove_chain+0xe3>
c00032e3:	89 ee                	mov    esi,ebp
c00032e5:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00032e8:	76 0f                	jbe    c00032f9 <remove_chain+0x95>
c00032ea:	89 f2                	mov    edx,esi
c00032ec:	89 f8                	mov    eax,edi
c00032ee:	e8 84 fa ff ff       	call   c0002d77 <get_fat>
c00032f3:	89 c5                	mov    ebp,eax
c00032f5:	85 c0                	test   eax,eax
c00032f7:	75 bf                	jne    c00032b8 <remove_chain+0x54>
c00032f9:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032fc:	0f 85 a0 00 00 00    	jne    c00033a2 <remove_chain+0x13e>
c0003302:	eb 6c                	jmp    c0003370 <remove_chain+0x10c>
c0003304:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003307:	84 c0                	test   al,al
c0003309:	75 7d                	jne    c0003388 <remove_chain+0x124>
c000330b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000330e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003312:	0f 84 86 00 00 00    	je     c000339e <remove_chain+0x13a>
c0003318:	89 da                	mov    edx,ebx
c000331a:	89 f8                	mov    eax,edi
c000331c:	e8 56 fa ff ff       	call   c0002d77 <get_fat>
c0003321:	83 f8 01             	cmp    eax,0x1
c0003324:	0f 86 4c ff ff ff    	jbe    c0003276 <remove_chain+0x12>
c000332a:	83 f8 ff             	cmp    eax,0xffffffff
c000332d:	75 4e                	jne    c000337d <remove_chain+0x119>
c000332f:	b8 01 00 00 00       	mov    eax,0x1
c0003334:	eb 6e                	jmp    c00033a4 <remove_chain+0x140>
c0003336:	31 c9                	xor    ecx,ecx
c0003338:	89 f2                	mov    edx,esi
c000333a:	89 d8                	mov    eax,ebx
c000333c:	e8 31 f8 ff ff       	call   c0002b72 <put_fat>
c0003341:	85 c0                	test   eax,eax
c0003343:	74 82                	je     c00032c7 <remove_chain+0x63>
c0003345:	eb 5d                	jmp    c00033a4 <remove_chain+0x140>
c0003347:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000334a:	75 1b                	jne    c0003367 <remove_chain+0x103>
c000334c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003350:	89 d8                	mov    eax,ebx
c0003352:	83 ec 0c             	sub    esp,0xc
c0003355:	6a 00                	push   0x0
c0003357:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000335b:	e8 5d f7 ff ff       	call   c0002abd <change_bitmap>
c0003360:	83 c4 10             	add    esp,0x10
c0003363:	85 c0                	test   eax,eax
c0003365:	75 3d                	jne    c00033a4 <remove_chain+0x140>
c0003367:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000336b:	e9 73 ff ff ff       	jmp    c00032e3 <remove_chain+0x7f>
c0003370:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003375:	75 8d                	jne    c0003304 <remove_chain+0xa0>
c0003377:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c000337b:	eb 25                	jmp    c00033a2 <remove_chain+0x13e>
c000337d:	8d 53 01             	lea    edx,[ebx+0x1]
c0003380:	89 c3                	mov    ebx,eax
c0003382:	39 c2                	cmp    edx,eax
c0003384:	74 88                	je     c000330e <remove_chain+0xaa>
c0003386:	eb 1a                	jmp    c00033a2 <remove_chain+0x13e>
c0003388:	3c 03                	cmp    al,0x3
c000338a:	75 16                	jne    c00033a2 <remove_chain+0x13e>
c000338c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000338f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003393:	77 0d                	ja     c00033a2 <remove_chain+0x13e>
c0003395:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c0003398:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000339c:	72 04                	jb     c00033a2 <remove_chain+0x13e>
c000339e:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033a2:	31 c0                	xor    eax,eax
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	5b                   	pop    ebx
c00033a8:	5e                   	pop    esi
c00033a9:	5f                   	pop    edi
c00033aa:	5d                   	pop    ebp
c00033ab:	c3                   	ret    

c00033ac <dir_clear>:
c00033ac:	55                   	push   ebp
c00033ad:	57                   	push   edi
c00033ae:	56                   	push   esi
c00033af:	89 c6                	mov    esi,eax
c00033b1:	53                   	push   ebx
c00033b2:	83 ec 1c             	sub    esp,0x1c
c00033b5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033b9:	e8 9d ed ff ff       	call   c000215b <sync_window>
c00033be:	85 c0                	test   eax,eax
c00033c0:	0f 85 de 00 00 00    	jne    c00034a4 <dir_clear+0xf8>
c00033c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033ca:	89 f0                	mov    eax,esi
c00033cc:	8d 6e 54             	lea    ebp,[esi+0x54]
c00033cf:	e8 d6 e8 ff ff       	call   c0001caa <clst2sect>
c00033d4:	b9 00 02 00 00       	mov    ecx,0x200
c00033d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00033dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00033e1:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00033e4:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00033e7:	89 e8                	mov    eax,ebp
c00033e9:	31 d2                	xor    edx,edx
c00033eb:	e8 b5 e6 ff ff       	call   c0001aa5 <mem_set>
c00033f0:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c00033f4:	c1 e3 09             	shl    ebx,0x9
c00033f7:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c00033fd:	76 1f                	jbe    c000341e <dir_clear+0x72>
c00033ff:	bb 00 80 00 00       	mov    ebx,0x8000
c0003404:	eb 18                	jmp    c000341e <dir_clear+0x72>
c0003406:	83 ec 0c             	sub    esp,0xc
c0003409:	53                   	push   ebx
c000340a:	e8 35 4e 00 00       	call   c0008244 <ff_memalloc>
c000340f:	83 c4 10             	add    esp,0x10
c0003412:	89 c7                	mov    edi,eax
c0003414:	85 c0                	test   eax,eax
c0003416:	0f 85 8f 00 00 00    	jne    c00034ab <dir_clear+0xff>
c000341c:	d1 eb                	shr    ebx,1
c000341e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003424:	77 e0                	ja     c0003406 <dir_clear+0x5a>
c0003426:	31 db                	xor    ebx,ebx
c0003428:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000342c:	39 d8                	cmp    eax,ebx
c000342e:	76 66                	jbe    c0003496 <dir_clear+0xea>
c0003430:	83 ec 0c             	sub    esp,0xc
c0003433:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003437:	6a 01                	push   0x1
c0003439:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000343d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003441:	55                   	push   ebp
c0003442:	50                   	push   eax
c0003443:	e8 94 e5 ff ff       	call   c00019dc <disk_write>
c0003448:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000344d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003452:	83 c4 20             	add    esp,0x20
c0003455:	85 c0                	test   eax,eax
c0003457:	75 3d                	jne    c0003496 <dir_clear+0xea>
c0003459:	43                   	inc    ebx
c000345a:	eb cc                	jmp    c0003428 <dir_clear+0x7c>
c000345c:	83 ec 0c             	sub    esp,0xc
c000345f:	31 d2                	xor    edx,edx
c0003461:	55                   	push   ebp
c0003462:	89 d8                	mov    eax,ebx
c0003464:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0003468:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000346c:	52                   	push   edx
c000346d:	50                   	push   eax
c000346e:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003472:	57                   	push   edi
c0003473:	50                   	push   eax
c0003474:	e8 63 e5 ff ff       	call   c00019dc <disk_write>
c0003479:	83 c4 20             	add    esp,0x20
c000347c:	85 c0                	test   eax,eax
c000347e:	75 0a                	jne    c000348a <dir_clear+0xde>
c0003480:	01 eb                	add    ebx,ebp
c0003482:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003486:	39 d8                	cmp    eax,ebx
c0003488:	77 d2                	ja     c000345c <dir_clear+0xb0>
c000348a:	83 ec 0c             	sub    esp,0xc
c000348d:	57                   	push   edi
c000348e:	e8 c7 4d 00 00       	call   c000825a <ff_memfree>
c0003493:	83 c4 10             	add    esp,0x10
c0003496:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000349a:	39 d8                	cmp    eax,ebx
c000349c:	0f 95 c0             	setne  al
c000349f:	0f b6 c0             	movzx  eax,al
c00034a2:	eb 19                	jmp    c00034bd <dir_clear+0x111>
c00034a4:	b8 01 00 00 00       	mov    eax,0x1
c00034a9:	eb 12                	jmp    c00034bd <dir_clear+0x111>
c00034ab:	89 d9                	mov    ecx,ebx
c00034ad:	31 d2                	xor    edx,edx
c00034af:	c1 eb 09             	shr    ebx,0x9
c00034b2:	e8 ee e5 ff ff       	call   c0001aa5 <mem_set>
c00034b7:	89 dd                	mov    ebp,ebx
c00034b9:	31 db                	xor    ebx,ebx
c00034bb:	eb c5                	jmp    c0003482 <dir_clear+0xd6>
c00034bd:	83 c4 1c             	add    esp,0x1c
c00034c0:	5b                   	pop    ebx
c00034c1:	5e                   	pop    esi
c00034c2:	5f                   	pop    edi
c00034c3:	5d                   	pop    ebp
c00034c4:	c3                   	ret    

c00034c5 <dir_next>:
c00034c5:	55                   	push   ebp
c00034c6:	57                   	push   edi
c00034c7:	56                   	push   esi
c00034c8:	53                   	push   ebx
c00034c9:	89 c3                	mov    ebx,eax
c00034cb:	83 ec 1c             	sub    esp,0x1c
c00034ce:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034d0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00034d4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00034d7:	8d 78 20             	lea    edi,[eax+0x20]
c00034da:	31 c0                	xor    eax,eax
c00034dc:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00034e0:	0f 94 c0             	sete   al
c00034e3:	48                   	dec    eax
c00034e4:	25 00 00 20 f0       	and    eax,0xf0200000
c00034e9:	05 00 00 00 10       	add    eax,0x10000000
c00034ee:	39 f8                	cmp    eax,edi
c00034f0:	77 0e                	ja     c0003500 <dir_next+0x3b>
c00034f2:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034f9:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003500:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003503:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003506:	b8 04 00 00 00       	mov    eax,0x4
c000350b:	89 ce                	mov    esi,ecx
c000350d:	09 d6                	or     esi,edx
c000350f:	0f 84 da 00 00 00    	je     c00035ef <dir_next+0x12a>
c0003515:	89 f8                	mov    eax,edi
c0003517:	25 ff 01 00 00       	and    eax,0x1ff
c000351c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003520:	0f 85 b9 00 00 00    	jne    c00035df <dir_next+0x11a>
c0003526:	83 c2 01             	add    edx,0x1
c0003529:	83 d1 00             	adc    ecx,0x0
c000352c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000352f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003532:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003535:	85 d2                	test   edx,edx
c0003537:	75 29                	jne    c0003562 <dir_next+0x9d>
c0003539:	89 fa                	mov    edx,edi
c000353b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000353f:	c1 ea 05             	shr    edx,0x5
c0003542:	39 c2                	cmp    edx,eax
c0003544:	0f 82 95 00 00 00    	jb     c00035df <dir_next+0x11a>
c000354a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003551:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003558:	b8 04 00 00 00       	mov    eax,0x4
c000355d:	e9 8d 00 00 00       	jmp    c00035ef <dir_next+0x12a>
c0003562:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003566:	89 f9                	mov    ecx,edi
c0003568:	48                   	dec    eax
c0003569:	c1 e9 09             	shr    ecx,0x9
c000356c:	85 c8                	test   eax,ecx
c000356e:	75 6f                	jne    c00035df <dir_next+0x11a>
c0003570:	89 d8                	mov    eax,ebx
c0003572:	e8 00 f8 ff ff       	call   c0002d77 <get_fat>
c0003577:	89 c6                	mov    esi,eax
c0003579:	83 f8 01             	cmp    eax,0x1
c000357c:	77 07                	ja     c0003585 <dir_next+0xc0>
c000357e:	b8 02 00 00 00       	mov    eax,0x2
c0003583:	eb 6a                	jmp    c00035ef <dir_next+0x12a>
c0003585:	83 f8 ff             	cmp    eax,0xffffffff
c0003588:	75 07                	jne    c0003591 <dir_next+0xcc>
c000358a:	b8 01 00 00 00       	mov    eax,0x1
c000358f:	eb 5e                	jmp    c00035ef <dir_next+0x12a>
c0003591:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0003594:	77 37                	ja     c00035cd <dir_next+0x108>
c0003596:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000359b:	74 ad                	je     c000354a <dir_next+0x85>
c000359d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	e8 be fa ff ff       	call   c0003065 <create_chain>
c00035a7:	89 c6                	mov    esi,eax
c00035a9:	b8 07 00 00 00       	mov    eax,0x7
c00035ae:	85 f6                	test   esi,esi
c00035b0:	74 3d                	je     c00035ef <dir_next+0x12a>
c00035b2:	83 fe 01             	cmp    esi,0x1
c00035b5:	74 c7                	je     c000357e <dir_next+0xb9>
c00035b7:	83 fe ff             	cmp    esi,0xffffffff
c00035ba:	74 ce                	je     c000358a <dir_next+0xc5>
c00035bc:	89 f2                	mov    edx,esi
c00035be:	89 e8                	mov    eax,ebp
c00035c0:	e8 e7 fd ff ff       	call   c00033ac <dir_clear>
c00035c5:	85 c0                	test   eax,eax
c00035c7:	75 c1                	jne    c000358a <dir_next+0xc5>
c00035c9:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00035cd:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00035d0:	89 f2                	mov    edx,esi
c00035d2:	89 e8                	mov    eax,ebp
c00035d4:	e8 d1 e6 ff ff       	call   c0001caa <clst2sect>
c00035d9:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00035dc:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00035df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00035e3:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00035e6:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c00035ea:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00035ed:	31 c0                	xor    eax,eax
c00035ef:	83 c4 1c             	add    esp,0x1c
c00035f2:	5b                   	pop    ebx
c00035f3:	5e                   	pop    esi
c00035f4:	5f                   	pop    edi
c00035f5:	5d                   	pop    ebp
c00035f6:	c3                   	ret    

c00035f7 <load_xdir>:
c00035f7:	55                   	push   ebp
c00035f8:	57                   	push   edi
c00035f9:	56                   	push   esi
c00035fa:	89 c6                	mov    esi,eax
c00035fc:	53                   	push   ebx
c00035fd:	83 ec 1c             	sub    esp,0x1c
c0003600:	8b 00                	mov    eax,DWORD PTR [eax]
c0003602:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003605:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003608:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000360b:	e8 df eb ff ff       	call   c00021ef <move_window>
c0003610:	89 c3                	mov    ebx,eax
c0003612:	85 c0                	test   eax,eax
c0003614:	0f 85 0c 01 00 00    	jne    c0003726 <load_xdir+0x12f>
c000361a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000361d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003620:	0f 85 fb 00 00 00    	jne    c0003721 <load_xdir+0x12a>
c0003626:	89 f8                	mov    eax,edi
c0003628:	b9 20 00 00 00       	mov    ecx,0x20
c000362d:	e8 5e e4 ff ff       	call   c0001a90 <mem_cpy>
c0003632:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003636:	40                   	inc    eax
c0003637:	c1 e0 05             	shl    eax,0x5
c000363a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000363e:	83 e8 60             	sub    eax,0x60
c0003641:	3d 00 02 00 00       	cmp    eax,0x200
c0003646:	0f 87 d5 00 00 00    	ja     c0003721 <load_xdir+0x12a>
c000364c:	31 d2                	xor    edx,edx
c000364e:	89 f0                	mov    eax,esi
c0003650:	e8 70 fe ff ff       	call   c00034c5 <dir_next>
c0003655:	89 c3                	mov    ebx,eax
c0003657:	83 f8 04             	cmp    eax,0x4
c000365a:	0f 84 c1 00 00 00    	je     c0003721 <load_xdir+0x12a>
c0003660:	85 c0                	test   eax,eax
c0003662:	0f 85 be 00 00 00    	jne    c0003726 <load_xdir+0x12f>
c0003668:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000366b:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000366e:	8b 06                	mov    eax,DWORD PTR [esi]
c0003670:	e8 7a eb ff ff       	call   c00021ef <move_window>
c0003675:	89 c3                	mov    ebx,eax
c0003677:	85 c0                	test   eax,eax
c0003679:	0f 85 a7 00 00 00    	jne    c0003726 <load_xdir+0x12f>
c000367f:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003682:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c0003685:	0f 85 96 00 00 00    	jne    c0003721 <load_xdir+0x12a>
c000368b:	8d 47 20             	lea    eax,[edi+0x20]
c000368e:	b9 20 00 00 00       	mov    ecx,0x20
c0003693:	e8 f8 e3 ff ff       	call   c0001a90 <mem_cpy>
c0003698:	31 d2                	xor    edx,edx
c000369a:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c000369e:	b9 0f 00 00 00       	mov    ecx,0xf
c00036a3:	83 c0 2c             	add    eax,0x2c
c00036a6:	f7 f1                	div    ecx
c00036a8:	c1 e0 05             	shl    eax,0x5
c00036ab:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036af:	77 70                	ja     c0003721 <load_xdir+0x12a>
c00036b1:	bd 40 00 00 00       	mov    ebp,0x40
c00036b6:	31 d2                	xor    edx,edx
c00036b8:	89 f0                	mov    eax,esi
c00036ba:	e8 06 fe ff ff       	call   c00034c5 <dir_next>
c00036bf:	89 c3                	mov    ebx,eax
c00036c1:	83 f8 04             	cmp    eax,0x4
c00036c4:	74 5b                	je     c0003721 <load_xdir+0x12a>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 5c                	jne    c0003726 <load_xdir+0x12f>
c00036ca:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036cd:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036d0:	8b 06                	mov    eax,DWORD PTR [esi]
c00036d2:	e8 18 eb ff ff       	call   c00021ef <move_window>
c00036d7:	89 c3                	mov    ebx,eax
c00036d9:	85 c0                	test   eax,eax
c00036db:	75 49                	jne    c0003726 <load_xdir+0x12f>
c00036dd:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036e0:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00036e3:	75 3c                	jne    c0003721 <load_xdir+0x12a>
c00036e5:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c00036eb:	77 0d                	ja     c00036fa <load_xdir+0x103>
c00036ed:	8d 04 2f             	lea    eax,[edi+ebp*1]
c00036f0:	b9 20 00 00 00       	mov    ecx,0x20
c00036f5:	e8 96 e3 ff ff       	call   c0001a90 <mem_cpy>
c00036fa:	83 c5 20             	add    ebp,0x20
c00036fd:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003701:	77 b3                	ja     c00036b6 <load_xdir+0xbf>
c0003703:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003709:	77 1b                	ja     c0003726 <load_xdir+0x12f>
c000370b:	89 f8                	mov    eax,edi
c000370d:	e8 cd e7 ff ff       	call   c0001edf <xdir_sum>
c0003712:	89 c1                	mov    ecx,eax
c0003714:	8d 47 02             	lea    eax,[edi+0x2]
c0003717:	e8 f5 e2 ff ff       	call   c0001a11 <ld_word>
c000371c:	66 39 c1             	cmp    cx,ax
c000371f:	74 05                	je     c0003726 <load_xdir+0x12f>
c0003721:	bb 02 00 00 00       	mov    ebx,0x2
c0003726:	83 c4 1c             	add    esp,0x1c
c0003729:	89 d8                	mov    eax,ebx
c000372b:	5b                   	pop    ebx
c000372c:	5e                   	pop    esi
c000372d:	5f                   	pop    edi
c000372e:	5d                   	pop    ebp
c000372f:	c3                   	ret    

c0003730 <load_obj_xdir>:
c0003730:	53                   	push   ebx
c0003731:	89 c3                	mov    ebx,eax
c0003733:	83 ec 08             	sub    esp,0x8
c0003736:	8b 02                	mov    eax,DWORD PTR [edx]
c0003738:	89 03                	mov    DWORD PTR [ebx],eax
c000373a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000373d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003740:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003743:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003746:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003749:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003750:	30 c0                	xor    al,al
c0003752:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003759:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000375c:	89 d8                	mov    eax,ebx
c000375e:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003761:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c0003764:	e8 04 f8 ff ff       	call   c0002f6d <dir_sdi>
c0003769:	85 c0                	test   eax,eax
c000376b:	75 0b                	jne    c0003778 <load_obj_xdir+0x48>
c000376d:	89 d8                	mov    eax,ebx
c000376f:	83 c4 08             	add    esp,0x8
c0003772:	5b                   	pop    ebx
c0003773:	e9 7f fe ff ff       	jmp    c00035f7 <load_xdir>
c0003778:	83 c4 08             	add    esp,0x8
c000377b:	5b                   	pop    ebx
c000377c:	c3                   	ret    

c000377d <dir_read>:
c000377d:	55                   	push   ebp
c000377e:	bd 04 00 00 00       	mov    ebp,0x4
c0003783:	57                   	push   edi
c0003784:	56                   	push   esi
c0003785:	be ff ff ff ff       	mov    esi,0xffffffff
c000378a:	53                   	push   ebx
c000378b:	89 c3                	mov    ebx,eax
c000378d:	83 ec 1c             	sub    esp,0x1c
c0003790:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003794:	8b 38                	mov    edi,DWORD PTR [eax]
c0003796:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000379b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000379e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037a1:	89 c8                	mov    eax,ecx
c00037a3:	09 d0                	or     eax,edx
c00037a5:	0f 84 25 01 00 00    	je     c00038d0 <dir_read+0x153>
c00037ab:	89 f8                	mov    eax,edi
c00037ad:	e8 3d ea ff ff       	call   c00021ef <move_window>
c00037b2:	89 c5                	mov    ebp,eax
c00037b4:	85 c0                	test   eax,eax
c00037b6:	0f 85 23 01 00 00    	jne    c00038df <dir_read+0x162>
c00037bc:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037bf:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037c1:	84 c9                	test   cl,cl
c00037c3:	0f 84 11 01 00 00    	je     c00038da <dir_read+0x15d>
c00037c9:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00037cc:	75 48                	jne    c0003816 <dir_read+0x99>
c00037ce:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037d3:	74 10                	je     c00037e5 <dir_read+0x68>
c00037d5:	80 f9 83             	cmp    cl,0x83
c00037d8:	0f 85 dd 00 00 00    	jne    c00038bb <dir_read+0x13e>
c00037de:	31 ed                	xor    ebp,ebp
c00037e0:	e9 08 01 00 00       	jmp    c00038ed <dir_read+0x170>
c00037e5:	80 f9 85             	cmp    cl,0x85
c00037e8:	0f 85 cd 00 00 00    	jne    c00038bb <dir_read+0x13e>
c00037ee:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037f1:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037f4:	89 d8                	mov    eax,ebx
c00037f6:	e8 fc fd ff ff       	call   c00035f7 <load_xdir>
c00037fb:	89 c5                	mov    ebp,eax
c00037fd:	85 c0                	test   eax,eax
c00037ff:	0f 85 da 00 00 00    	jne    c00038df <dir_read+0x162>
c0003805:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003808:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000380b:	83 e0 3f             	and    eax,0x3f
c000380e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003811:	e9 d7 00 00 00       	jmp    c00038ed <dir_read+0x170>
c0003816:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003819:	83 e0 3f             	and    eax,0x3f
c000381c:	80 f9 2e             	cmp    cl,0x2e
c000381f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003823:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003826:	0f 84 8a 00 00 00    	je     c00038b6 <dir_read+0x139>
c000382c:	80 f9 e5             	cmp    cl,0xe5
c000382f:	0f 84 81 00 00 00    	je     c00038b6 <dir_read+0x139>
c0003835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003839:	83 e0 1f             	and    eax,0x1f
c000383c:	83 f8 08             	cmp    eax,0x8
c000383f:	0f 94 c0             	sete   al
c0003842:	0f b6 c0             	movzx  eax,al
c0003845:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003849:	75 6b                	jne    c00038b6 <dir_read+0x139>
c000384b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003850:	75 44                	jne    c0003896 <dir_read+0x119>
c0003852:	f6 c1 40             	test   cl,0x40
c0003855:	74 12                	je     c0003869 <dir_read+0xec>
c0003857:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000385a:	83 e1 bf             	and    ecx,0xffffffbf
c000385d:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003861:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003864:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003867:	eb 06                	jmp    c000386f <dir_read+0xf2>
c0003869:	89 f0                	mov    eax,esi
c000386b:	38 c8                	cmp    al,cl
c000386d:	75 47                	jne    c00038b6 <dir_read+0x139>
c000386f:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003873:	be ff ff ff ff       	mov    esi,0xffffffff
c0003878:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c000387b:	75 3e                	jne    c00038bb <dir_read+0x13e>
c000387d:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003881:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003884:	e8 8a e4 ff ff       	call   c0001d13 <pick_lfn>
c0003889:	85 c0                	test   eax,eax
c000388b:	74 2e                	je     c00038bb <dir_read+0x13e>
c000388d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003891:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003894:	eb 25                	jmp    c00038bb <dir_read+0x13e>
c0003896:	89 f0                	mov    eax,esi
c0003898:	84 c0                	test   al,al
c000389a:	75 11                	jne    c00038ad <dir_read+0x130>
c000389c:	89 d0                	mov    eax,edx
c000389e:	e8 2a e6 ff ff       	call   c0001ecd <sum_sfn>
c00038a3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00038a7:	0f 84 31 ff ff ff    	je     c00037de <dir_read+0x61>
c00038ad:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038b4:	eb 37                	jmp    c00038ed <dir_read+0x170>
c00038b6:	be ff ff ff ff       	mov    esi,0xffffffff
c00038bb:	31 d2                	xor    edx,edx
c00038bd:	89 d8                	mov    eax,ebx
c00038bf:	e8 01 fc ff ff       	call   c00034c5 <dir_next>
c00038c4:	89 c5                	mov    ebp,eax
c00038c6:	85 c0                	test   eax,eax
c00038c8:	0f 84 cd fe ff ff    	je     c000379b <dir_read+0x1e>
c00038ce:	eb 0f                	jmp    c00038df <dir_read+0x162>
c00038d0:	85 ed                	test   ebp,ebp
c00038d2:	0f 84 06 ff ff ff    	je     c00037de <dir_read+0x61>
c00038d8:	eb 05                	jmp    c00038df <dir_read+0x162>
c00038da:	bd 04 00 00 00       	mov    ebp,0x4
c00038df:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00038e6:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00038ed:	83 c4 1c             	add    esp,0x1c
c00038f0:	89 e8                	mov    eax,ebp
c00038f2:	5b                   	pop    ebx
c00038f3:	5e                   	pop    esi
c00038f4:	5f                   	pop    edi
c00038f5:	5d                   	pop    ebp
c00038f6:	c3                   	ret    

c00038f7 <dir_alloc>:
c00038f7:	55                   	push   ebp
c00038f8:	89 d5                	mov    ebp,edx
c00038fa:	57                   	push   edi
c00038fb:	31 d2                	xor    edx,edx
c00038fd:	56                   	push   esi
c00038fe:	53                   	push   ebx
c00038ff:	89 c3                	mov    ebx,eax
c0003901:	83 ec 0c             	sub    esp,0xc
c0003904:	8b 38                	mov    edi,DWORD PTR [eax]
c0003906:	e8 62 f6 ff ff       	call   c0002f6d <dir_sdi>
c000390b:	85 c0                	test   eax,eax
c000390d:	75 4e                	jne    c000395d <dir_alloc+0x66>
c000390f:	31 f6                	xor    esi,esi
c0003911:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003914:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003917:	89 f8                	mov    eax,edi
c0003919:	e8 d1 e8 ff ff       	call   c00021ef <move_window>
c000391e:	85 c0                	test   eax,eax
c0003920:	75 3b                	jne    c000395d <dir_alloc+0x66>
c0003922:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003925:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003928:	8a 12                	mov    dl,BYTE PTR [edx]
c000392a:	75 07                	jne    c0003933 <dir_alloc+0x3c>
c000392c:	f7 d2                	not    edx
c000392e:	c0 ea 07             	shr    dl,0x7
c0003931:	eb 0d                	jmp    c0003940 <dir_alloc+0x49>
c0003933:	84 d2                	test   dl,dl
c0003935:	0f 94 c1             	sete   cl
c0003938:	80 fa e5             	cmp    dl,0xe5
c000393b:	0f 94 c2             	sete   dl
c000393e:	09 ca                	or     edx,ecx
c0003940:	84 d2                	test   dl,dl
c0003942:	74 07                	je     c000394b <dir_alloc+0x54>
c0003944:	46                   	inc    esi
c0003945:	39 ee                	cmp    esi,ebp
c0003947:	75 04                	jne    c000394d <dir_alloc+0x56>
c0003949:	eb 1c                	jmp    c0003967 <dir_alloc+0x70>
c000394b:	31 f6                	xor    esi,esi
c000394d:	ba 01 00 00 00       	mov    edx,0x1
c0003952:	89 d8                	mov    eax,ebx
c0003954:	e8 6c fb ff ff       	call   c00034c5 <dir_next>
c0003959:	85 c0                	test   eax,eax
c000395b:	74 b4                	je     c0003911 <dir_alloc+0x1a>
c000395d:	83 f8 04             	cmp    eax,0x4
c0003960:	75 05                	jne    c0003967 <dir_alloc+0x70>
c0003962:	b8 07 00 00 00       	mov    eax,0x7
c0003967:	83 c4 0c             	add    esp,0xc
c000396a:	5b                   	pop    ebx
c000396b:	5e                   	pop    esi
c000396c:	5f                   	pop    edi
c000396d:	5d                   	pop    ebp
c000396e:	c3                   	ret    

c000396f <store_xdir>:
c000396f:	55                   	push   ebp
c0003970:	57                   	push   edi
c0003971:	89 c7                	mov    edi,eax
c0003973:	56                   	push   esi
c0003974:	53                   	push   ebx
c0003975:	83 ec 0c             	sub    esp,0xc
c0003978:	8b 00                	mov    eax,DWORD PTR [eax]
c000397a:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c000397d:	89 e8                	mov    eax,ebp
c000397f:	e8 5b e5 ff ff       	call   c0001edf <xdir_sum>
c0003984:	0f b7 d0             	movzx  edx,ax
c0003987:	8d 45 02             	lea    eax,[ebp+0x2]
c000398a:	e8 f4 e0 ff ff       	call   c0001a83 <st_word>
c000398f:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003993:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003996:	89 f8                	mov    eax,edi
c0003998:	e8 d0 f5 ff ff       	call   c0002f6d <dir_sdi>
c000399d:	89 c6                	mov    esi,eax
c000399f:	85 f6                	test   esi,esi
c00039a1:	75 3d                	jne    c00039e0 <store_xdir+0x71>
c00039a3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c00039a6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c00039a9:	8b 07                	mov    eax,DWORD PTR [edi]
c00039ab:	e8 3f e8 ff ff       	call   c00021ef <move_window>
c00039b0:	89 c6                	mov    esi,eax
c00039b2:	85 c0                	test   eax,eax
c00039b4:	75 2a                	jne    c00039e0 <store_xdir+0x71>
c00039b6:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039b9:	b9 20 00 00 00       	mov    ecx,0x20
c00039be:	89 ea                	mov    edx,ebp
c00039c0:	e8 cb e0 ff ff       	call   c0001a90 <mem_cpy>
c00039c5:	8b 07                	mov    eax,DWORD PTR [edi]
c00039c7:	85 db                	test   ebx,ebx
c00039c9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00039cd:	74 11                	je     c00039e0 <store_xdir+0x71>
c00039cf:	31 d2                	xor    edx,edx
c00039d1:	89 f8                	mov    eax,edi
c00039d3:	83 c5 20             	add    ebp,0x20
c00039d6:	e8 ea fa ff ff       	call   c00034c5 <dir_next>
c00039db:	4b                   	dec    ebx
c00039dc:	89 c6                	mov    esi,eax
c00039de:	eb bf                	jmp    c000399f <store_xdir+0x30>
c00039e0:	89 f0                	mov    eax,esi
c00039e2:	83 fe 02             	cmp    esi,0x2
c00039e5:	76 05                	jbe    c00039ec <store_xdir+0x7d>
c00039e7:	b8 02 00 00 00       	mov    eax,0x2
c00039ec:	83 c4 0c             	add    esp,0xc
c00039ef:	5b                   	pop    ebx
c00039f0:	5e                   	pop    esi
c00039f1:	5f                   	pop    edi
c00039f2:	5d                   	pop    ebp
c00039f3:	c3                   	ret    

c00039f4 <dir_remove>:
c00039f4:	57                   	push   edi
c00039f5:	56                   	push   esi
c00039f6:	53                   	push   ebx
c00039f7:	89 c3                	mov    ebx,eax
c00039f9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00039fc:	8b 30                	mov    esi,DWORD PTR [eax]
c00039fe:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a01:	83 fa ff             	cmp    edx,0xffffffff
c0003a04:	74 09                	je     c0003a0f <dir_remove+0x1b>
c0003a06:	e8 62 f5 ff ff       	call   c0002f6d <dir_sdi>
c0003a0b:	85 c0                	test   eax,eax
c0003a0d:	75 41                	jne    c0003a50 <dir_remove+0x5c>
c0003a0f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a12:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a15:	89 f0                	mov    eax,esi
c0003a17:	e8 d3 e7 ff ff       	call   c00021ef <move_window>
c0003a1c:	85 c0                	test   eax,eax
c0003a1e:	75 26                	jne    c0003a46 <dir_remove+0x52>
c0003a20:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a23:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a26:	75 05                	jne    c0003a2d <dir_remove+0x39>
c0003a28:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a2b:	eb 03                	jmp    c0003a30 <dir_remove+0x3c>
c0003a2d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a30:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a34:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a37:	73 17                	jae    c0003a50 <dir_remove+0x5c>
c0003a39:	31 d2                	xor    edx,edx
c0003a3b:	89 d8                	mov    eax,ebx
c0003a3d:	e8 83 fa ff ff       	call   c00034c5 <dir_next>
c0003a42:	85 c0                	test   eax,eax
c0003a44:	74 c9                	je     c0003a0f <dir_remove+0x1b>
c0003a46:	83 f8 04             	cmp    eax,0x4
c0003a49:	75 05                	jne    c0003a50 <dir_remove+0x5c>
c0003a4b:	b8 02 00 00 00       	mov    eax,0x2
c0003a50:	5b                   	pop    ebx
c0003a51:	5e                   	pop    esi
c0003a52:	5f                   	pop    edi
c0003a53:	c3                   	ret    

c0003a54 <create_name>:
c0003a54:	55                   	push   ebp
c0003a55:	89 d5                	mov    ebp,edx
c0003a57:	57                   	push   edi
c0003a58:	89 c7                	mov    edi,eax
c0003a5a:	56                   	push   esi
c0003a5b:	31 f6                	xor    esi,esi
c0003a5d:	53                   	push   ebx
c0003a5e:	83 ec 3c             	sub    esp,0x3c
c0003a61:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a63:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a67:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a69:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003a6c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003a70:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003a74:	e8 72 e0 ff ff       	call   c0001aeb <tchar2uni>
c0003a79:	89 c3                	mov    ebx,eax
c0003a7b:	83 f8 ff             	cmp    eax,0xffffffff
c0003a7e:	75 0a                	jne    c0003a8a <create_name+0x36>
c0003a80:	b8 06 00 00 00       	mov    eax,0x6
c0003a85:	e9 9e 02 00 00       	jmp    c0003d28 <create_name+0x2d4>
c0003a8a:	3d ff ff 00 00       	cmp    eax,0xffff
c0003a8f:	76 0c                	jbe    c0003a9d <create_name+0x49>
c0003a91:	c1 e8 10             	shr    eax,0x10
c0003a94:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003a98:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a9c:	46                   	inc    esi
c0003a9d:	66 83 fb 1f          	cmp    bx,0x1f
c0003aa1:	76 4f                	jbe    c0003af2 <create_name+0x9e>
c0003aa3:	66 83 fb 5c          	cmp    bx,0x5c
c0003aa7:	74 35                	je     c0003ade <create_name+0x8a>
c0003aa9:	66 83 fb 2f          	cmp    bx,0x2f
c0003aad:	74 2f                	je     c0003ade <create_name+0x8a>
c0003aaf:	66 83 fb 7f          	cmp    bx,0x7f
c0003ab3:	77 11                	ja     c0003ac6 <create_name+0x72>
c0003ab5:	0f b7 d3             	movzx  edx,bx
c0003ab8:	b8 f2 7d 02 c0       	mov    eax,0xc0027df2
c0003abd:	e8 11 e0 ff ff       	call   c0001ad3 <chk_chr>
c0003ac2:	85 c0                	test   eax,eax
c0003ac4:	75 ba                	jne    c0003a80 <create_name+0x2c>
c0003ac6:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003acc:	77 b2                	ja     c0003a80 <create_name+0x2c>
c0003ace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ad2:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003ad6:	46                   	inc    esi
c0003ad7:	eb 97                	jmp    c0003a70 <create_name+0x1c>
c0003ad9:	40                   	inc    eax
c0003ada:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ade:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003ae2:	8a 10                	mov    dl,BYTE PTR [eax]
c0003ae4:	80 fa 2f             	cmp    dl,0x2f
c0003ae7:	74 f0                	je     c0003ad9 <create_name+0x85>
c0003ae9:	80 fa 5c             	cmp    dl,0x5c
c0003aec:	74 eb                	je     c0003ad9 <create_name+0x85>
c0003aee:	31 db                	xor    ebx,ebx
c0003af0:	eb 02                	jmp    c0003af4 <create_name+0xa0>
c0003af2:	b3 04                	mov    bl,0x4
c0003af4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003af8:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003afb:	85 f6                	test   esi,esi
c0003afd:	74 18                	je     c0003b17 <create_name+0xc3>
c0003aff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b03:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b08:	66 83 f8 20          	cmp    ax,0x20
c0003b0c:	74 06                	je     c0003b14 <create_name+0xc0>
c0003b0e:	66 83 f8 2e          	cmp    ax,0x2e
c0003b12:	75 03                	jne    c0003b17 <create_name+0xc3>
c0003b14:	4e                   	dec    esi
c0003b15:	eb e4                	jmp    c0003afb <create_name+0xa7>
c0003b17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b1b:	31 ed                	xor    ebp,ebp
c0003b1d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b23:	85 f6                	test   esi,esi
c0003b25:	0f 84 55 ff ff ff    	je     c0003a80 <create_name+0x2c>
c0003b2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b2f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b32:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b36:	66 83 f8 20          	cmp    ax,0x20
c0003b3a:	75 04                	jne    c0003b40 <create_name+0xec>
c0003b3c:	89 d5                	mov    ebp,edx
c0003b3e:	eb eb                	jmp    c0003b2b <create_name+0xd7>
c0003b40:	85 ed                	test   ebp,ebp
c0003b42:	75 06                	jne    c0003b4a <create_name+0xf6>
c0003b44:	66 83 f8 2e          	cmp    ax,0x2e
c0003b48:	75 08                	jne    c0003b52 <create_name+0xfe>
c0003b4a:	83 cb 03             	or     ebx,0x3
c0003b4d:	eb 03                	jmp    c0003b52 <create_name+0xfe>
c0003b4f:	4e                   	dec    esi
c0003b50:	74 0c                	je     c0003b5e <create_name+0x10a>
c0003b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b56:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b5c:	75 f1                	jne    c0003b4f <create_name+0xfb>
c0003b5e:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b63:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003b66:	ba 20 00 00 00       	mov    edx,0x20
c0003b6b:	e8 35 df ff ff       	call   c0001aa5 <mem_set>
c0003b70:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003b78:	31 c9                	xor    ecx,ecx
c0003b7a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003b7f:	8d 45 01             	lea    eax,[ebp+0x1]
c0003b82:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003b86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b8a:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003b8e:	66 85 ed             	test   bp,bp
c0003b91:	0f 84 30 01 00 00    	je     c0003cc7 <create_name+0x273>
c0003b97:	66 83 fd 20          	cmp    bp,0x20
c0003b9b:	74 10                	je     c0003bad <create_name+0x159>
c0003b9d:	66 83 fd 2e          	cmp    bp,0x2e
c0003ba1:	75 13                	jne    c0003bb6 <create_name+0x162>
c0003ba3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003ba7:	0f 84 6b 01 00 00    	je     c0003d18 <create_name+0x2c4>
c0003bad:	83 cb 03             	or     ebx,0x3
c0003bb0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003bb4:	eb c9                	jmp    c0003b7f <create_name+0x12b>
c0003bb6:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003bba:	73 0b                	jae    c0003bc7 <create_name+0x173>
c0003bbc:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bc0:	75 47                	jne    c0003c09 <create_name+0x1b5>
c0003bc2:	e9 51 01 00 00       	jmp    c0003d18 <create_name+0x2c4>
c0003bc7:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003bcc:	75 10                	jne    c0003bde <create_name+0x18a>
c0003bce:	83 cb 03             	or     ebx,0x3
c0003bd1:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003bd9:	e9 e9 00 00 00       	jmp    c0003cc7 <create_name+0x273>
c0003bde:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003be2:	74 0d                	je     c0003bf1 <create_name+0x19d>
c0003be4:	83 cb 03             	or     ebx,0x3
c0003be7:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003beb:	0f 87 d6 00 00 00    	ja     c0003cc7 <create_name+0x273>
c0003bf1:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003bf6:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003bfa:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c02:	b9 08 00 00 00       	mov    ecx,0x8
c0003c07:	eb a7                	jmp    c0003bb0 <create_name+0x15c>
c0003c09:	66 83 fd 7f          	cmp    bp,0x7f
c0003c0d:	76 68                	jbe    c0003c77 <create_name+0x223>
c0003c0f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c13:	88 da                	mov    dl,bl
c0003c15:	83 ca 02             	or     edx,0x2
c0003c18:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c1c:	50                   	push   eax
c0003c1d:	50                   	push   eax
c0003c1e:	68 b5 01 00 00       	push   0x1b5
c0003c23:	55                   	push   ebp
c0003c24:	e8 48 46 00 00       	call   c0008271 <ff_uni2oem>
c0003c29:	83 c4 10             	add    esp,0x10
c0003c2c:	89 c5                	mov    ebp,eax
c0003c2e:	a8 80                	test   al,0x80
c0003c30:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c34:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c38:	74 0c                	je     c0003c46 <create_name+0x1f2>
c0003c3a:	83 e5 7f             	and    ebp,0x7f
c0003c3d:	0f b6 ad 40 7d 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd82c0]
c0003c44:	eb 2a                	jmp    c0003c70 <create_name+0x21c>
c0003c46:	66 3d ff 00          	cmp    ax,0xff
c0003c4a:	76 24                	jbe    c0003c70 <create_name+0x21c>
c0003c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003c50:	48                   	dec    eax
c0003c51:	39 c8                	cmp    eax,ecx
c0003c53:	77 0c                	ja     c0003c61 <create_name+0x20d>
c0003c55:	83 cb 03             	or     ebx,0x3
c0003c58:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003c5c:	e9 4f ff ff ff       	jmp    c0003bb0 <create_name+0x15c>
c0003c61:	89 e8                	mov    eax,ebp
c0003c63:	88 d3                	mov    bl,dl
c0003c65:	66 c1 e8 08          	shr    ax,0x8
c0003c69:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c6d:	41                   	inc    ecx
c0003c6e:	eb 4b                	jmp    c0003cbb <create_name+0x267>
c0003c70:	88 d3                	mov    bl,dl
c0003c72:	66 85 ed             	test   bp,bp
c0003c75:	74 19                	je     c0003c90 <create_name+0x23c>
c0003c77:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003c7b:	0f b7 d5             	movzx  edx,bp
c0003c7e:	b8 fb 7d 02 c0       	mov    eax,0xc0027dfb
c0003c83:	e8 4b de ff ff       	call   c0001ad3 <chk_chr>
c0003c88:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003c8c:	85 c0                	test   eax,eax
c0003c8e:	74 0a                	je     c0003c9a <create_name+0x246>
c0003c90:	83 cb 03             	or     ebx,0x3
c0003c93:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c98:	eb 21                	jmp    c0003cbb <create_name+0x267>
c0003c9a:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c9d:	66 83 f8 19          	cmp    ax,0x19
c0003ca1:	77 07                	ja     c0003caa <create_name+0x256>
c0003ca3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ca8:	eb 11                	jmp    c0003cbb <create_name+0x267>
c0003caa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003cad:	66 83 f8 19          	cmp    ax,0x19
c0003cb1:	77 08                	ja     c0003cbb <create_name+0x267>
c0003cb3:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003cb8:	83 ed 20             	sub    ebp,0x20
c0003cbb:	89 e8                	mov    eax,ebp
c0003cbd:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cc1:	41                   	inc    ecx
c0003cc2:	e9 e9 fe ff ff       	jmp    c0003bb0 <create_name+0x15c>
c0003cc7:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ccb:	75 04                	jne    c0003cd1 <create_name+0x27d>
c0003ccd:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003cd1:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003cd6:	75 05                	jne    c0003cdd <create_name+0x289>
c0003cd8:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003cdd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ce1:	83 e0 0c             	and    eax,0xc
c0003ce4:	3c 0c                	cmp    al,0xc
c0003ce6:	74 0b                	je     c0003cf3 <create_name+0x29f>
c0003ce8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003cec:	83 e0 03             	and    eax,0x3
c0003cef:	3c 03                	cmp    al,0x3
c0003cf1:	75 05                	jne    c0003cf8 <create_name+0x2a4>
c0003cf3:	83 cb 02             	or     ebx,0x2
c0003cf6:	eb 19                	jmp    c0003d11 <create_name+0x2bd>
c0003cf8:	f6 c3 02             	test   bl,0x2
c0003cfb:	75 14                	jne    c0003d11 <create_name+0x2bd>
c0003cfd:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003d02:	74 03                	je     c0003d07 <create_name+0x2b3>
c0003d04:	83 cb 10             	or     ebx,0x10
c0003d07:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003d0c:	74 03                	je     c0003d11 <create_name+0x2bd>
c0003d0e:	83 cb 08             	or     ebx,0x8
c0003d11:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d14:	31 c0                	xor    eax,eax
c0003d16:	eb 10                	jmp    c0003d28 <create_name+0x2d4>
c0003d18:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d1d:	0f 85 ce fe ff ff    	jne    c0003bf1 <create_name+0x19d>
c0003d23:	e9 a6 fe ff ff       	jmp    c0003bce <create_name+0x17a>
c0003d28:	83 c4 3c             	add    esp,0x3c
c0003d2b:	5b                   	pop    ebx
c0003d2c:	5e                   	pop    esi
c0003d2d:	5f                   	pop    edi
c0003d2e:	5d                   	pop    ebp
c0003d2f:	c3                   	ret    

c0003d30 <xname_sum>:
c0003d30:	56                   	push   esi
c0003d31:	53                   	push   ebx
c0003d32:	89 c6                	mov    esi,eax
c0003d34:	51                   	push   ecx
c0003d35:	31 db                	xor    ebx,ebx
c0003d37:	83 c6 02             	add    esi,0x2
c0003d3a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d3e:	66 85 c0             	test   ax,ax
c0003d41:	74 1f                	je     c0003d62 <xname_sum+0x32>
c0003d43:	83 ec 0c             	sub    esp,0xc
c0003d46:	66 d1 cb             	ror    bx,1
c0003d49:	50                   	push   eax
c0003d4a:	e8 1e 46 00 00       	call   c000836d <ff_wtoupper>
c0003d4f:	83 c4 10             	add    esp,0x10
c0003d52:	0f b6 d0             	movzx  edx,al
c0003d55:	66 c1 e8 08          	shr    ax,0x8
c0003d59:	01 d3                	add    ebx,edx
c0003d5b:	66 d1 cb             	ror    bx,1
c0003d5e:	01 c3                	add    ebx,eax
c0003d60:	eb d5                	jmp    c0003d37 <xname_sum+0x7>
c0003d62:	89 d8                	mov    eax,ebx
c0003d64:	5a                   	pop    edx
c0003d65:	5b                   	pop    ebx
c0003d66:	5e                   	pop    esi
c0003d67:	c3                   	ret    

c0003d68 <create_xdir>:
c0003d68:	55                   	push   ebp
c0003d69:	b9 40 00 00 00       	mov    ecx,0x40
c0003d6e:	57                   	push   edi
c0003d6f:	bd 01 00 00 00       	mov    ebp,0x1
c0003d74:	56                   	push   esi
c0003d75:	31 ff                	xor    edi,edi
c0003d77:	53                   	push   ebx
c0003d78:	be 40 00 00 00       	mov    esi,0x40
c0003d7d:	89 c3                	mov    ebx,eax
c0003d7f:	83 ec 1c             	sub    esp,0x1c
c0003d82:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d86:	31 d2                	xor    edx,edx
c0003d88:	e8 18 dd ff ff       	call   c0001aa5 <mem_set>
c0003d8d:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003d90:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003d94:	31 c9                	xor    ecx,ecx
c0003d96:	8d 46 01             	lea    eax,[esi+0x1]
c0003d99:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003d9d:	83 c6 02             	add    esi,0x2
c0003da0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	74 12                	je     c0003dbb <create_xdir+0x53>
c0003da9:	0f b6 c1             	movzx  eax,cl
c0003dac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003db0:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003db4:	66 83 fd 01          	cmp    bp,0x1
c0003db8:	80 d9 ff             	sbb    cl,0xff
c0003dbb:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003dbe:	0f b7 d5             	movzx  edx,bp
c0003dc1:	83 c6 02             	add    esi,0x2
c0003dc4:	e8 ba dc ff ff       	call   c0001a83 <st_word>
c0003dc9:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003dcf:	75 d3                	jne    c0003da4 <create_xdir+0x3c>
c0003dd1:	8d 47 01             	lea    eax,[edi+0x1]
c0003dd4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dd8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ddc:	0f b6 c1             	movzx  eax,cl
c0003ddf:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003de4:	74 07                	je     c0003ded <create_xdir+0x85>
c0003de6:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003deb:	eb a9                	jmp    c0003d96 <create_xdir+0x2e>
c0003ded:	8d 47 02             	lea    eax,[edi+0x2]
c0003df0:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003df3:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003df6:	89 d0                	mov    eax,edx
c0003df8:	e8 33 ff ff ff       	call   c0003d30 <xname_sum>
c0003dfd:	83 c4 1c             	add    esp,0x1c
c0003e00:	0f b7 d0             	movzx  edx,ax
c0003e03:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e06:	5b                   	pop    ebx
c0003e07:	5e                   	pop    esi
c0003e08:	5f                   	pop    edi
c0003e09:	5d                   	pop    ebp
c0003e0a:	e9 74 dc ff ff       	jmp    c0001a83 <st_word>

c0003e0f <cmp_lfn>:
c0003e0f:	55                   	push   ebp
c0003e10:	57                   	push   edi
c0003e11:	89 d7                	mov    edi,edx
c0003e13:	56                   	push   esi
c0003e14:	53                   	push   ebx
c0003e15:	83 ec 1c             	sub    esp,0x1c
c0003e18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e1c:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e1f:	e8 ed db ff ff       	call   c0001a11 <ld_word>
c0003e24:	66 85 c0             	test   ax,ax
c0003e27:	74 07                	je     c0003e30 <cmp_lfn+0x21>
c0003e29:	31 c0                	xor    eax,eax
c0003e2b:	e9 9a 00 00 00       	jmp    c0003eca <cmp_lfn+0xbb>
c0003e30:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e32:	bd 01 00 00 00       	mov    ebp,0x1
c0003e37:	83 e3 3f             	and    ebx,0x3f
c0003e3a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e42:	4b                   	dec    ebx
c0003e43:	6b db 0d             	imul   ebx,ebx,0xd
c0003e46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e4a:	0f b6 80 c0 7d 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd8240]
c0003e51:	01 f8                	add    eax,edi
c0003e53:	e8 b9 db ff ff       	call   c0001a11 <ld_word>
c0003e58:	66 85 ed             	test   bp,bp
c0003e5b:	89 c6                	mov    esi,eax
c0003e5d:	74 3c                	je     c0003e9b <cmp_lfn+0x8c>
c0003e5f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e65:	77 c2                	ja     c0003e29 <cmp_lfn+0x1a>
c0003e67:	83 ec 0c             	sub    esp,0xc
c0003e6a:	0f b7 c0             	movzx  eax,ax
c0003e6d:	50                   	push   eax
c0003e6e:	e8 fa 44 00 00       	call   c000836d <ff_wtoupper>
c0003e73:	89 c5                	mov    ebp,eax
c0003e75:	8d 43 01             	lea    eax,[ebx+0x1]
c0003e78:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003e7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003e80:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e84:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e87:	e8 e1 44 00 00       	call   c000836d <ff_wtoupper>
c0003e8c:	83 c4 10             	add    esp,0x10
c0003e8f:	39 c5                	cmp    ebp,eax
c0003e91:	75 96                	jne    c0003e29 <cmp_lfn+0x1a>
c0003e93:	89 f5                	mov    ebp,esi
c0003e95:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003e99:	eb 04                	jmp    c0003e9f <cmp_lfn+0x90>
c0003e9b:	66 46                	inc    si
c0003e9d:	75 8a                	jne    c0003e29 <cmp_lfn+0x1a>
c0003e9f:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003ea3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ea8:	75 9c                	jne    c0003e46 <cmp_lfn+0x37>
c0003eaa:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ead:	74 16                	je     c0003ec5 <cmp_lfn+0xb6>
c0003eaf:	66 85 ed             	test   bp,bp
c0003eb2:	74 11                	je     c0003ec5 <cmp_lfn+0xb6>
c0003eb4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003eb8:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003ebd:	0f 94 c0             	sete   al
c0003ec0:	0f b6 c0             	movzx  eax,al
c0003ec3:	eb 05                	jmp    c0003eca <cmp_lfn+0xbb>
c0003ec5:	b8 01 00 00 00       	mov    eax,0x1
c0003eca:	83 c4 1c             	add    esp,0x1c
c0003ecd:	5b                   	pop    ebx
c0003ece:	5e                   	pop    esi
c0003ecf:	5f                   	pop    edi
c0003ed0:	5d                   	pop    ebp
c0003ed1:	c3                   	ret    

c0003ed2 <dir_find>:
c0003ed2:	55                   	push   ebp
c0003ed3:	31 d2                	xor    edx,edx
c0003ed5:	57                   	push   edi
c0003ed6:	56                   	push   esi
c0003ed7:	53                   	push   ebx
c0003ed8:	89 c3                	mov    ebx,eax
c0003eda:	83 ec 1c             	sub    esp,0x1c
c0003edd:	8b 30                	mov    esi,DWORD PTR [eax]
c0003edf:	e8 89 f0 ff ff       	call   c0002f6d <dir_sdi>
c0003ee4:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ee7:	85 c0                	test   eax,eax
c0003ee9:	0f 85 9e 01 00 00    	jne    c000408d <dir_find+0x1bb>
c0003eef:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003ef2:	0f 85 8d 00 00 00    	jne    c0003f85 <dir_find+0xb3>
c0003ef8:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003efb:	e8 30 fe ff ff       	call   c0003d30 <xname_sum>
c0003f00:	89 c7                	mov    edi,eax
c0003f02:	31 d2                	xor    edx,edx
c0003f04:	89 d8                	mov    eax,ebx
c0003f06:	e8 72 f8 ff ff       	call   c000377d <dir_read>
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	0f 85 5e 01 00 00    	jne    c0004071 <dir_find+0x19f>
c0003f13:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f16:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f19:	e8 f3 da ff ff       	call   c0001a11 <ld_word>
c0003f1e:	66 39 f8             	cmp    ax,di
c0003f21:	75 df                	jne    c0003f02 <dir_find+0x30>
c0003f23:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003f26:	31 ed                	xor    ebp,ebp
c0003f28:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003f2c:	ba 40 00 00 00       	mov    edx,0x40
c0003f31:	89 e9                	mov    ecx,ebp
c0003f33:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003f37:	0f 84 42 01 00 00    	je     c000407f <dir_find+0x1ad>
c0003f3d:	f6 c2 1f             	test   dl,0x1f
c0003f40:	75 03                	jne    c0003f45 <dir_find+0x73>
c0003f42:	83 c2 02             	add    edx,0x2
c0003f45:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003f49:	89 d0                	mov    eax,edx
c0003f4b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f4e:	e8 be da ff ff       	call   c0001a11 <ld_word>
c0003f53:	83 ec 0c             	sub    esp,0xc
c0003f56:	0f b7 c0             	movzx  eax,ax
c0003f59:	50                   	push   eax
c0003f5a:	e8 0e 44 00 00       	call   c000836d <ff_wtoupper>
c0003f5f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f63:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f66:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003f6a:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f6d:	e8 fb 43 00 00       	call   c000836d <ff_wtoupper>
c0003f72:	83 c4 10             	add    esp,0x10
c0003f75:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003f79:	75 87                	jne    c0003f02 <dir_find+0x30>
c0003f7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003f7f:	45                   	inc    ebp
c0003f80:	83 c2 02             	add    edx,0x2
c0003f83:	eb ac                	jmp    c0003f31 <dir_find+0x5f>
c0003f85:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003f8c:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003f91:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f96:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003f99:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003f9c:	89 f0                	mov    eax,esi
c0003f9e:	e8 4c e2 ff ff       	call   c00021ef <move_window>
c0003fa3:	85 c0                	test   eax,eax
c0003fa5:	0f 85 c6 00 00 00    	jne    c0004071 <dir_find+0x19f>
c0003fab:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fae:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003fb1:	84 c9                	test   cl,cl
c0003fb3:	0f 84 bd 00 00 00    	je     c0004076 <dir_find+0x1a4>
c0003fb9:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003fbc:	88 d0                	mov    al,dl
c0003fbe:	83 e0 3f             	and    eax,0x3f
c0003fc1:	80 f9 e5             	cmp    cl,0xe5
c0003fc4:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003fc7:	0f 84 87 00 00 00    	je     c0004054 <dir_find+0x182>
c0003fcd:	80 e2 08             	and    dl,0x8
c0003fd0:	74 06                	je     c0003fd8 <dir_find+0x106>
c0003fd2:	3c 0f                	cmp    al,0xf
c0003fd4:	75 7e                	jne    c0004054 <dir_find+0x182>
c0003fd6:	eb 04                	jmp    c0003fdc <dir_find+0x10a>
c0003fd8:	3c 0f                	cmp    al,0xf
c0003fda:	75 4c                	jne    c0004028 <dir_find+0x156>
c0003fdc:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003fe0:	75 7e                	jne    c0004060 <dir_find+0x18e>
c0003fe2:	f6 c1 40             	test   cl,0x40
c0003fe5:	74 12                	je     c0003ff9 <dir_find+0x127>
c0003fe7:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003fea:	83 e1 bf             	and    ecx,0xffffffbf
c0003fed:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003ff1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ff4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ff7:	eb 06                	jmp    c0003fff <dir_find+0x12d>
c0003ff9:	89 f8                	mov    eax,edi
c0003ffb:	38 c8                	cmp    al,cl
c0003ffd:	75 5c                	jne    c000405b <dir_find+0x189>
c0003fff:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004003:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004008:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000400b:	75 53                	jne    c0004060 <dir_find+0x18e>
c000400d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004011:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004014:	89 ea                	mov    edx,ebp
c0004016:	e8 f4 fd ff ff       	call   c0003e0f <cmp_lfn>
c000401b:	85 c0                	test   eax,eax
c000401d:	74 41                	je     c0004060 <dir_find+0x18e>
c000401f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004023:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004026:	eb 38                	jmp    c0004060 <dir_find+0x18e>
c0004028:	89 f8                	mov    eax,edi
c000402a:	84 c0                	test   al,al
c000402c:	75 0d                	jne    c000403b <dir_find+0x169>
c000402e:	89 e8                	mov    eax,ebp
c0004030:	e8 98 de ff ff       	call   c0001ecd <sum_sfn>
c0004035:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004039:	74 52                	je     c000408d <dir_find+0x1bb>
c000403b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000403f:	75 13                	jne    c0004054 <dir_find+0x182>
c0004041:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004044:	b9 0b 00 00 00       	mov    ecx,0xb
c0004049:	89 e8                	mov    eax,ebp
c000404b:	e8 60 da ff ff       	call   c0001ab0 <mem_cmp>
c0004050:	85 c0                	test   eax,eax
c0004052:	74 39                	je     c000408d <dir_find+0x1bb>
c0004054:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000405b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004060:	31 d2                	xor    edx,edx
c0004062:	89 d8                	mov    eax,ebx
c0004064:	e8 5c f4 ff ff       	call   c00034c5 <dir_next>
c0004069:	85 c0                	test   eax,eax
c000406b:	0f 84 25 ff ff ff    	je     c0003f96 <dir_find+0xc4>
c0004071:	89 04 24             	mov    DWORD PTR [esp],eax
c0004074:	eb 17                	jmp    c000408d <dir_find+0x1bb>
c0004076:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000407d:	eb 0e                	jmp    c000408d <dir_find+0x1bb>
c000407f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004082:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0004087:	0f 85 75 fe ff ff    	jne    c0003f02 <dir_find+0x30>
c000408d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004090:	83 c4 1c             	add    esp,0x1c
c0004093:	5b                   	pop    ebx
c0004094:	5e                   	pop    esi
c0004095:	5f                   	pop    edi
c0004096:	5d                   	pop    ebp
c0004097:	c3                   	ret    

c0004098 <dir_register>:
c0004098:	55                   	push   ebp
c0004099:	57                   	push   edi
c000409a:	56                   	push   esi
c000409b:	be 06 00 00 00       	mov    esi,0x6
c00040a0:	53                   	push   ebx
c00040a1:	83 ec 6c             	sub    esp,0x6c
c00040a4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00040a8:	0f 85 62 02 00 00    	jne    c0004310 <dir_register+0x278>
c00040ae:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040b0:	31 ff                	xor    edi,edi
c00040b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040b5:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040ba:	74 03                	je     c00040bf <dir_register+0x27>
c00040bc:	47                   	inc    edi
c00040bd:	eb f6                	jmp    c00040b5 <dir_register+0x1d>
c00040bf:	89 c3                	mov    ebx,eax
c00040c1:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040c5:	0f 85 e1 00 00 00    	jne    c00041ac <dir_register+0x114>
c00040cb:	83 c7 0e             	add    edi,0xe
c00040ce:	b9 0f 00 00 00       	mov    ecx,0xf
c00040d3:	89 f8                	mov    eax,edi
c00040d5:	31 d2                	xor    edx,edx
c00040d7:	f7 f1                	div    ecx
c00040d9:	8d 50 02             	lea    edx,[eax+0x2]
c00040dc:	89 c7                	mov    edi,eax
c00040de:	89 d8                	mov    eax,ebx
c00040e0:	e8 12 f8 ff ff       	call   c00038f7 <dir_alloc>
c00040e5:	89 c6                	mov    esi,eax
c00040e7:	85 c0                	test   eax,eax
c00040e9:	0f 85 21 02 00 00    	jne    c0004310 <dir_register+0x278>
c00040ef:	81 c7 01 00 00 08    	add    edi,0x8000001
c00040f5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00040f8:	c1 e7 05             	shl    edi,0x5
c00040fb:	29 f8                	sub    eax,edi
c00040fd:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004100:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004103:	a8 04                	test   al,0x4
c0004105:	0f 84 91 00 00 00    	je     c000419c <dir_register+0x104>
c000410b:	83 e0 fb             	and    eax,0xfffffffb
c000410e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004111:	89 d8                	mov    eax,ebx
c0004113:	e8 25 ec ff ff       	call   c0002d3d <fill_first_frag>
c0004118:	85 c0                	test   eax,eax
c000411a:	0f 85 ee 01 00 00    	jne    c000430e <dir_register+0x276>
c0004120:	83 c9 ff             	or     ecx,0xffffffff
c0004123:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004126:	89 d8                	mov    eax,ebx
c0004128:	e8 db eb ff ff       	call   c0002d08 <fill_last_frag>
c000412d:	85 c0                	test   eax,eax
c000412f:	0f 85 d9 01 00 00    	jne    c000430e <dir_register+0x276>
c0004135:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004139:	74 61                	je     c000419c <dir_register+0x104>
c000413b:	89 da                	mov    edx,ebx
c000413d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004141:	e8 ea f5 ff ff       	call   c0003730 <load_obj_xdir>
c0004146:	85 c0                	test   eax,eax
c0004148:	0f 85 c0 01 00 00    	jne    c000430e <dir_register+0x276>
c000414e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004152:	31 c9                	xor    ecx,ecx
c0004154:	c1 e2 09             	shl    edx,0x9
c0004157:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c000415a:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000415d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004160:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004163:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004166:	83 c0 38             	add    eax,0x38
c0004169:	e8 1c d9 ff ff       	call   c0001a8a <st_qword>
c000416e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004171:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004174:	83 c0 28             	add    eax,0x28
c0004177:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000417a:	e8 0b d9 ff ff       	call   c0001a8a <st_qword>
c000417f:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004182:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0004185:	83 c8 01             	or     eax,0x1
c0004188:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c000418b:	8d 44 24 14          	lea    eax,[esp+0x14]
c000418f:	e8 db f7 ff ff       	call   c000396f <store_xdir>
c0004194:	85 c0                	test   eax,eax
c0004196:	0f 85 72 01 00 00    	jne    c000430e <dir_register+0x276>
c000419c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000419f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041a2:	e8 c1 fb ff ff       	call   c0003d68 <create_xdir>
c00041a7:	e9 64 01 00 00       	jmp    c0004310 <dir_register+0x278>
c00041ac:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041af:	b9 0c 00 00 00       	mov    ecx,0xc
c00041b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041b8:	89 c2                	mov    edx,eax
c00041ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041be:	e8 cd d8 ff ff       	call   c0001a90 <mem_cpy>
c00041c3:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00041c8:	74 58                	je     c0004222 <dir_register+0x18a>
c00041ca:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00041ce:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00041d6:	83 ec 0c             	sub    esp,0xc
c00041d9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00041dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00041e0:	8d 54 24 24          	lea    edx,[esp+0x24]
c00041e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00041e8:	e8 24 dc ff ff       	call   c0001e11 <gen_numname>
c00041ed:	89 d8                	mov    eax,ebx
c00041ef:	e8 de fc ff ff       	call   c0003ed2 <dir_find>
c00041f4:	83 c4 10             	add    esp,0x10
c00041f7:	89 c6                	mov    esi,eax
c00041f9:	85 c0                	test   eax,eax
c00041fb:	75 15                	jne    c0004212 <dir_register+0x17a>
c00041fd:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004201:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004206:	75 ce                	jne    c00041d6 <dir_register+0x13e>
c0004208:	be 07 00 00 00       	mov    esi,0x7
c000420d:	e9 fe 00 00 00       	jmp    c0004310 <dir_register+0x278>
c0004212:	83 f8 04             	cmp    eax,0x4
c0004215:	0f 85 f5 00 00 00    	jne    c0004310 <dir_register+0x278>
c000421b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000421f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004222:	b9 01 00 00 00       	mov    ecx,0x1
c0004227:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000422c:	74 0f                	je     c000423d <dir_register+0x1a5>
c000422e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004233:	8d 47 0c             	lea    eax,[edi+0xc]
c0004236:	31 d2                	xor    edx,edx
c0004238:	f7 f1                	div    ecx
c000423a:	8d 48 01             	lea    ecx,[eax+0x1]
c000423d:	89 ca                	mov    edx,ecx
c000423f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004243:	89 d8                	mov    eax,ebx
c0004245:	e8 ad f6 ff ff       	call   c00038f7 <dir_alloc>
c000424a:	89 c6                	mov    esi,eax
c000424c:	85 c0                	test   eax,eax
c000424e:	0f 85 bc 00 00 00    	jne    c0004310 <dir_register+0x278>
c0004254:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004258:	49                   	dec    ecx
c0004259:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000425d:	74 6a                	je     c00042c9 <dir_register+0x231>
c000425f:	89 c8                	mov    eax,ecx
c0004261:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004264:	c1 e0 05             	shl    eax,0x5
c0004267:	29 c2                	sub    edx,eax
c0004269:	89 d8                	mov    eax,ebx
c000426b:	e8 fd ec ff ff       	call   c0002f6d <dir_sdi>
c0004270:	89 c6                	mov    esi,eax
c0004272:	85 c0                	test   eax,eax
c0004274:	0f 85 96 00 00 00    	jne    c0004310 <dir_register+0x278>
c000427a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000427e:	e8 4a dc ff ff       	call   c0001ecd <sum_sfn>
c0004283:	0f b6 f8             	movzx  edi,al
c0004286:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004289:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000428c:	89 e8                	mov    eax,ebp
c000428e:	e8 5c df ff ff       	call   c00021ef <move_window>
c0004293:	89 c6                	mov    esi,eax
c0004295:	85 c0                	test   eax,eax
c0004297:	75 77                	jne    c0004310 <dir_register+0x278>
c0004299:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c000429e:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042a1:	83 ec 0c             	sub    esp,0xc
c00042a4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00042a7:	57                   	push   edi
c00042a8:	e8 e0 da ff ff       	call   c0001d8d <put_lfn>
c00042ad:	31 d2                	xor    edx,edx
c00042af:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042b3:	89 d8                	mov    eax,ebx
c00042b5:	e8 0b f2 ff ff       	call   c00034c5 <dir_next>
c00042ba:	83 c4 10             	add    esp,0x10
c00042bd:	89 c6                	mov    esi,eax
c00042bf:	85 c0                	test   eax,eax
c00042c1:	75 4d                	jne    c0004310 <dir_register+0x278>
c00042c3:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00042c7:	75 bd                	jne    c0004286 <dir_register+0x1ee>
c00042c9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042cc:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042cf:	89 e8                	mov    eax,ebp
c00042d1:	e8 19 df ff ff       	call   c00021ef <move_window>
c00042d6:	89 c6                	mov    esi,eax
c00042d8:	85 c0                	test   eax,eax
c00042da:	75 34                	jne    c0004310 <dir_register+0x278>
c00042dc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042df:	b9 20 00 00 00       	mov    ecx,0x20
c00042e4:	31 d2                	xor    edx,edx
c00042e6:	e8 ba d7 ff ff       	call   c0001aa5 <mem_set>
c00042eb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00042f2:	b9 0b 00 00 00       	mov    ecx,0xb
c00042f7:	e8 94 d7 ff ff       	call   c0001a90 <mem_cpy>
c00042fc:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c00042ff:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004302:	83 e0 18             	and    eax,0x18
c0004305:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004308:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000430c:	eb 02                	jmp    c0004310 <dir_register+0x278>
c000430e:	89 c6                	mov    esi,eax
c0004310:	83 c4 6c             	add    esp,0x6c
c0004313:	89 f0                	mov    eax,esi
c0004315:	5b                   	pop    ebx
c0004316:	5e                   	pop    esi
c0004317:	5f                   	pop    edi
c0004318:	5d                   	pop    ebp
c0004319:	c3                   	ret    

c000431a <sync_fs>:
c000431a:	56                   	push   esi
c000431b:	53                   	push   ebx
c000431c:	53                   	push   ebx
c000431d:	89 c3                	mov    ebx,eax
c000431f:	e8 37 de ff ff       	call   c000215b <sync_window>
c0004324:	85 c0                	test   eax,eax
c0004326:	0f 85 b1 00 00 00    	jne    c00043dd <sync_fs+0xc3>
c000432c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000432f:	0f 85 8e 00 00 00    	jne    c00043c3 <sync_fs+0xa9>
c0004335:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004339:	0f 85 84 00 00 00    	jne    c00043c3 <sync_fs+0xa9>
c000433f:	b9 00 02 00 00       	mov    ecx,0x200
c0004344:	8d 73 54             	lea    esi,[ebx+0x54]
c0004347:	31 d2                	xor    edx,edx
c0004349:	89 f0                	mov    eax,esi
c000434b:	e8 55 d7 ff ff       	call   c0001aa5 <mem_set>
c0004350:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004356:	ba 55 aa 00 00       	mov    edx,0xaa55
c000435b:	e8 23 d7 ff ff       	call   c0001a83 <st_word>
c0004360:	ba 52 52 61 41       	mov    edx,0x41615252
c0004365:	89 f0                	mov    eax,esi
c0004367:	e8 1b d7 ff ff       	call   c0001a87 <st_dword>
c000436c:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004372:	ba 72 72 41 61       	mov    edx,0x61417272
c0004377:	e8 0b d7 ff ff       	call   c0001a87 <st_dword>
c000437c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000437f:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c0004385:	e8 fd d6 ff ff       	call   c0001a87 <st_dword>
c000438a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000438d:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0004393:	e8 ef d6 ff ff       	call   c0001a87 <st_dword>
c0004398:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000439b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000439e:	83 c0 01             	add    eax,0x1
c00043a1:	83 d2 00             	adc    edx,0x0
c00043a4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00043a7:	83 ec 0c             	sub    esp,0xc
c00043aa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00043ad:	6a 01                	push   0x1
c00043af:	52                   	push   edx
c00043b0:	50                   	push   eax
c00043b1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043b5:	56                   	push   esi
c00043b6:	50                   	push   eax
c00043b7:	e8 20 d6 ff ff       	call   c00019dc <disk_write>
c00043bc:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043c0:	83 c4 20             	add    esp,0x20
c00043c3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043c7:	51                   	push   ecx
c00043c8:	6a 00                	push   0x0
c00043ca:	6a 00                	push   0x0
c00043cc:	50                   	push   eax
c00043cd:	e8 20 d6 ff ff       	call   c00019f2 <disk_ioctl>
c00043d2:	83 c4 10             	add    esp,0x10
c00043d5:	85 c0                	test   eax,eax
c00043d7:	0f 95 c0             	setne  al
c00043da:	0f b6 c0             	movzx  eax,al
c00043dd:	5a                   	pop    edx
c00043de:	5b                   	pop    ebx
c00043df:	5e                   	pop    esi
c00043e0:	c3                   	ret    

c00043e1 <create_partition>:
c00043e1:	55                   	push   ebp
c00043e2:	0f b6 c0             	movzx  eax,al
c00043e5:	57                   	push   edi
c00043e6:	56                   	push   esi
c00043e7:	53                   	push   ebx
c00043e8:	83 ec 60             	sub    esp,0x60
c00043eb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043ef:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c00043f3:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00043f7:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00043fb:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c00043ff:	50                   	push   eax
c0004400:	6a 01                	push   0x1
c0004402:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004406:	e8 e7 d5 ff ff       	call   c00019f2 <disk_ioctl>
c000440b:	83 c4 10             	add    esp,0x10
c000440e:	85 c0                	test   eax,eax
c0004410:	74 0a                	je     c000441c <create_partition+0x3b>
c0004412:	b8 01 00 00 00       	mov    eax,0x1
c0004417:	e9 67 05 00 00       	jmp    c0004983 <create_partition+0x5a2>
c000441c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004420:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004424:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004428:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000442c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004431:	0f 86 ed 03 00 00    	jbe    c0004824 <create_partition+0x443>
c0004437:	83 c0 df             	add    eax,0xffffffdf
c000443a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004442:	83 d2 ff             	adc    edx,0xffffffff
c0004445:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004449:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000444d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004451:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004455:	83 c0 bd             	add    eax,0xffffffbd
c0004458:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000445f:	83 d2 ff             	adc    edx,0xffffffff
c0004462:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004466:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000446a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004472:	be 22 00 00 00       	mov    esi,0x22
c0004477:	31 ff                	xor    edi,edi
c0004479:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004481:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c0004489:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0004491:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004495:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000449b:	75 0e                	jne    c00044ab <create_partition+0xca>
c000449d:	b9 00 02 00 00       	mov    ecx,0x200
c00044a2:	31 d2                	xor    edx,edx
c00044a4:	89 d8                	mov    eax,ebx
c00044a6:	e8 fa d5 ff ff       	call   c0001aa5 <mem_set>
c00044ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044b7:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044ba:	0f 84 23 01 00 00    	je     c00045e3 <create_partition+0x202>
c00044c0:	89 f0                	mov    eax,esi
c00044c2:	89 fa                	mov    edx,edi
c00044c4:	05 ff 07 00 00       	add    eax,0x7ff
c00044c9:	83 d2 00             	adc    edx,0x0
c00044cc:	89 c1                	mov    ecx,eax
c00044ce:	89 d7                	mov    edi,edx
c00044d0:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044d6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00044da:	89 ce                	mov    esi,ecx
c00044dc:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00044e0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00044e4:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00044e8:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c00044eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00044f2:	b8 64 00 00 00       	mov    eax,0x64
c00044f7:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00044fa:	b8 00 00 00 00       	mov    eax,0x0
c00044ff:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004503:	72 41                	jb     c0004546 <create_partition+0x165>
c0004505:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004509:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000450d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004511:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004516:	01 c1                	add    ecx,eax
c0004518:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000451c:	f7 24 24             	mul    DWORD PTR [esp]
c000451f:	6a 00                	push   0x0
c0004521:	01 ca                	add    edx,ecx
c0004523:	6a 64                	push   0x64
c0004525:	52                   	push   edx
c0004526:	50                   	push   eax
c0004527:	e8 50 0e 02 00       	call   c002537c <__udivdi3>
c000452c:	83 c4 10             	add    esp,0x10
c000452f:	05 ff 07 00 00       	add    eax,0x7ff
c0004534:	83 d2 00             	adc    edx,0x0
c0004537:	89 c1                	mov    ecx,eax
c0004539:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000453d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004543:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004546:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004549:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000454d:	01 f0                	add    eax,esi
c000454f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004553:	11 fa                	adc    edx,edi
c0004555:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0004559:	19 d1                	sbb    ecx,edx
c000455b:	73 2e                	jae    c000458b <create_partition+0x1aa>
c000455d:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004561:	89 f8                	mov    eax,edi
c0004563:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000456a:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c000456e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004576:	73 6b                	jae    c00045e3 <create_partition+0x202>
c0004578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000457c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004580:	29 f0                	sub    eax,esi
c0004582:	19 fa                	sbb    edx,edi
c0004584:	89 04 24             	mov    DWORD PTR [esp],eax
c0004587:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000458b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000458f:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004592:	74 4f                	je     c00045e3 <create_partition+0x202>
c0004594:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004597:	b9 10 00 00 00       	mov    ecx,0x10
c000459c:	ba d0 7d 02 c0       	mov    edx,0xc0027dd0
c00045a1:	e8 ea d4 ff ff       	call   c0001a90 <mem_cpy>
c00045a6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00045aa:	b9 10 00 00 00       	mov    ecx,0x10
c00045af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045b3:	e8 2c db ff ff       	call   c00020e4 <make_rand>
c00045b8:	89 f2                	mov    edx,esi
c00045ba:	89 f9                	mov    ecx,edi
c00045bc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045c0:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045c4:	e8 c1 d4 ff ff       	call   c0001a8a <st_qword>
c00045c9:	03 34 24             	add    esi,DWORD PTR [esp]
c00045cc:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00045d0:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00045d4:	89 f2                	mov    edx,esi
c00045d6:	89 f9                	mov    ecx,edi
c00045d8:	83 c2 ff             	add    edx,0xffffffff
c00045db:	83 d1 ff             	adc    ecx,0xffffffff
c00045de:	e8 a7 d4 ff ff       	call   c0001a8a <st_qword>
c00045e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00045e7:	83 e8 80             	sub    eax,0xffffff80
c00045ea:	89 c5                	mov    ebp,eax
c00045ec:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00045f0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045f6:	75 6b                	jne    c0004663 <create_partition+0x282>
c00045f8:	45                   	inc    ebp
c00045f9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045fd:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004602:	e8 39 da ff ff       	call   c0002040 <crc32>
c0004607:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000460d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004611:	75 e5                	jne    c00045f8 <create_partition+0x217>
c0004613:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004617:	31 d2                	xor    edx,edx
c0004619:	83 ec 0c             	sub    esp,0xc
c000461c:	c1 ed 09             	shr    ebp,0x9
c000461f:	6a 01                	push   0x1
c0004621:	8d 45 02             	lea    eax,[ebp+0x2]
c0004624:	52                   	push   edx
c0004625:	50                   	push   eax
c0004626:	53                   	push   ebx
c0004627:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000462b:	e8 ac d3 ff ff       	call   c00019dc <disk_write>
c0004630:	83 c4 20             	add    esp,0x20
c0004633:	85 c0                	test   eax,eax
c0004635:	0f 85 d7 fd ff ff    	jne    c0004412 <create_partition+0x31>
c000463b:	83 ec 0c             	sub    esp,0xc
c000463e:	31 d2                	xor    edx,edx
c0004640:	6a 01                	push   0x1
c0004642:	89 e8                	mov    eax,ebp
c0004644:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004648:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000464c:	52                   	push   edx
c000464d:	50                   	push   eax
c000464e:	53                   	push   ebx
c000464f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004653:	e8 84 d3 ff ff       	call   c00019dc <disk_write>
c0004658:	83 c4 20             	add    esp,0x20
c000465b:	85 c0                	test   eax,eax
c000465d:	0f 85 af fd ff ff    	jne    c0004412 <create_partition+0x31>
c0004663:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004667:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000466b:	3d 00 40 00 00       	cmp    eax,0x4000
c0004670:	74 0d                	je     c000467f <create_partition+0x29e>
c0004672:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0004676:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000467a:	e9 12 fe ff ff       	jmp    c0004491 <create_partition+0xb0>
c000467f:	31 d2                	xor    edx,edx
c0004681:	b9 00 02 00 00       	mov    ecx,0x200
c0004686:	89 d8                	mov    eax,ebx
c0004688:	8d 6b 20             	lea    ebp,[ebx+0x20]
c000468b:	e8 15 d4 ff ff       	call   c0001aa5 <mem_set>
c0004690:	8d 7b 48             	lea    edi,[ebx+0x48]
c0004693:	b9 10 00 00 00       	mov    ecx,0x10
c0004698:	ba c0 7c 02 c0       	mov    edx,0xc0027cc0
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 ec d3 ff ff       	call   c0001a90 <mem_cpy>
c00046a4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00046a8:	8d 43 58             	lea    eax,[ebx+0x58]
c00046ab:	f7 d2                	not    edx
c00046ad:	e8 d5 d3 ff ff       	call   c0001a87 <st_dword>
c00046b2:	8d 43 18             	lea    eax,[ebx+0x18]
c00046b5:	31 c9                	xor    ecx,ecx
c00046b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00046ba:	ba 01 00 00 00       	mov    edx,0x1
c00046bf:	e8 c6 d3 ff ff       	call   c0001a8a <st_qword>
c00046c4:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046c8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046cc:	83 c2 ff             	add    edx,0xffffffff
c00046cf:	89 e8                	mov    eax,ebp
c00046d1:	83 d1 ff             	adc    ecx,0xffffffff
c00046d4:	e8 b1 d3 ff ff       	call   c0001a8a <st_qword>
c00046d9:	31 c9                	xor    ecx,ecx
c00046db:	8d 43 28             	lea    eax,[ebx+0x28]
c00046de:	ba 22 00 00 00       	mov    edx,0x22
c00046e3:	e8 a2 d3 ff ff       	call   c0001a8a <st_qword>
c00046e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00046ec:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00046f0:	83 c2 de             	add    edx,0xffffffde
c00046f3:	8d 43 30             	lea    eax,[ebx+0x30]
c00046f6:	83 d1 ff             	adc    ecx,0xffffffff
c00046f9:	31 f6                	xor    esi,esi
c00046fb:	e8 8a d3 ff ff       	call   c0001a8a <st_qword>
c0004700:	8d 43 54             	lea    eax,[ebx+0x54]
c0004703:	ba 80 00 00 00       	mov    edx,0x80
c0004708:	e8 7a d3 ff ff       	call   c0001a87 <st_dword>
c000470d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004710:	ba 80 00 00 00       	mov    edx,0x80
c0004715:	e8 6d d3 ff ff       	call   c0001a87 <st_dword>
c000471a:	ba 02 00 00 00       	mov    edx,0x2
c000471f:	89 f8                	mov    eax,edi
c0004721:	e8 61 d3 ff ff       	call   c0001a87 <st_dword>
c0004726:	8d 53 38             	lea    edx,[ebx+0x38]
c0004729:	b9 10 00 00 00       	mov    ecx,0x10
c000472e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004732:	e8 ad d9 ff ff       	call   c00020e4 <make_rand>
c0004737:	83 c8 ff             	or     eax,0xffffffff
c000473a:	46                   	inc    esi
c000473b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004740:	e8 fb d8 ff ff       	call   c0002040 <crc32>
c0004745:	83 fe 5c             	cmp    esi,0x5c
c0004748:	75 f0                	jne    c000473a <create_partition+0x359>
c000474a:	f7 d0                	not    eax
c000474c:	8d 73 10             	lea    esi,[ebx+0x10]
c000474f:	89 c2                	mov    edx,eax
c0004751:	89 f0                	mov    eax,esi
c0004753:	e8 2f d3 ff ff       	call   c0001a87 <st_dword>
c0004758:	83 ec 0c             	sub    esp,0xc
c000475b:	6a 01                	push   0x1
c000475d:	6a 00                	push   0x0
c000475f:	6a 01                	push   0x1
c0004761:	53                   	push   ebx
c0004762:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004766:	e8 71 d2 ff ff       	call   c00019dc <disk_write>
c000476b:	83 c4 20             	add    esp,0x20
c000476e:	85 c0                	test   eax,eax
c0004770:	0f 85 9c fc ff ff    	jne    c0004412 <create_partition+0x31>
c0004776:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000477a:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000477e:	83 c2 ff             	add    edx,0xffffffff
c0004781:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004784:	83 d1 ff             	adc    ecx,0xffffffff
c0004787:	e8 fe d2 ff ff       	call   c0001a8a <st_qword>
c000478c:	ba 01 00 00 00       	mov    edx,0x1
c0004791:	31 c9                	xor    ecx,ecx
c0004793:	89 e8                	mov    eax,ebp
c0004795:	e8 f0 d2 ff ff       	call   c0001a8a <st_qword>
c000479a:	89 f8                	mov    eax,edi
c000479c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047a0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a4:	31 ff                	xor    edi,edi
c00047a6:	e8 df d2 ff ff       	call   c0001a8a <st_qword>
c00047ab:	89 f0                	mov    eax,esi
c00047ad:	31 d2                	xor    edx,edx
c00047af:	e8 d3 d2 ff ff       	call   c0001a87 <st_dword>
c00047b4:	83 c8 ff             	or     eax,0xffffffff
c00047b7:	47                   	inc    edi
c00047b8:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047bd:	e8 7e d8 ff ff       	call   c0002040 <crc32>
c00047c2:	83 ff 5c             	cmp    edi,0x5c
c00047c5:	75 f0                	jne    c00047b7 <create_partition+0x3d6>
c00047c7:	f7 d0                	not    eax
c00047c9:	89 c2                	mov    edx,eax
c00047cb:	89 f0                	mov    eax,esi
c00047cd:	e8 b5 d2 ff ff       	call   c0001a87 <st_dword>
c00047d2:	83 ec 0c             	sub    esp,0xc
c00047d5:	6a 01                	push   0x1
c00047d7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00047db:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00047df:	83 c0 ff             	add    eax,0xffffffff
c00047e2:	83 d2 ff             	adc    edx,0xffffffff
c00047e5:	52                   	push   edx
c00047e6:	50                   	push   eax
c00047e7:	53                   	push   ebx
c00047e8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047ec:	e8 eb d1 ff ff       	call   c00019dc <disk_write>
c00047f1:	83 c4 20             	add    esp,0x20
c00047f4:	85 c0                	test   eax,eax
c00047f6:	0f 85 16 fc ff ff    	jne    c0004412 <create_partition+0x31>
c00047fc:	31 d2                	xor    edx,edx
c00047fe:	89 d8                	mov    eax,ebx
c0004800:	b9 00 02 00 00       	mov    ecx,0x200
c0004805:	e8 9b d2 ff ff       	call   c0001aa5 <mem_set>
c000480a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004810:	b9 10 00 00 00       	mov    ecx,0x10
c0004815:	ba d0 7c 02 c0       	mov    edx,0xc0027cd0
c000481a:	e8 71 d2 ff ff       	call   c0001a90 <mem_cpy>
c000481f:	e9 21 01 00 00       	jmp    c0004945 <create_partition+0x564>
c0004824:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004828:	b9 05 00 00 00       	mov    ecx,0x5
c000482d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004830:	bf 08 00 00 00       	mov    edi,0x8
c0004835:	89 f8                	mov    eax,edi
c0004837:	31 d2                	xor    edx,edx
c0004839:	0f b6 f0             	movzx  esi,al
c000483c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000483f:	f7 f6                	div    esi
c0004841:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004846:	76 0a                	jbe    c0004852 <create_partition+0x471>
c0004848:	d1 e7                	shl    edi,1
c000484a:	49                   	dec    ecx
c000484b:	75 e8                	jne    c0004835 <create_partition+0x454>
c000484d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004852:	b9 00 02 00 00       	mov    ecx,0x200
c0004857:	31 d2                	xor    edx,edx
c0004859:	89 d8                	mov    eax,ebx
c000485b:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004861:	e8 3f d2 ff ff       	call   c0001aa5 <mem_set>
c0004866:	b9 64 00 00 00       	mov    ecx,0x64
c000486b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000486e:	31 d2                	xor    edx,edx
c0004870:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004878:	f7 f1                	div    ecx
c000487a:	b9 3f 00 00 00       	mov    ecx,0x3f
c000487f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004883:	89 f8                	mov    eax,edi
c0004885:	0f b6 c0             	movzx  eax,al
c0004888:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000488c:	e9 80 00 00 00       	jmp    c0004911 <create_partition+0x530>
c0004891:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004894:	29 cf                	sub    edi,ecx
c0004896:	89 ca                	mov    edx,ecx
c0004898:	89 f0                	mov    eax,esi
c000489a:	bd 3f 00 00 00       	mov    ebp,0x3f
c000489f:	e8 e3 d1 ff ff       	call   c0001a87 <st_dword>
c00048a4:	8d 46 04             	lea    eax,[esi+0x4]
c00048a7:	89 fa                	mov    edx,edi
c00048a9:	83 c6 10             	add    esi,0x10
c00048ac:	e8 d6 d1 ff ff       	call   c0001a87 <st_dword>
c00048b1:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00048b5:	31 d2                	xor    edx,edx
c00048b7:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00048ba:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00048be:	89 c8                	mov    eax,ecx
c00048c0:	01 f9                	add    ecx,edi
c00048c2:	f7 f5                	div    ebp
c00048c4:	89 d5                	mov    ebp,edx
c00048c6:	31 d2                	xor    edx,edx
c00048c8:	45                   	inc    ebp
c00048c9:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048cd:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c00048d0:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c00048d3:	89 c2                	mov    edx,eax
c00048d5:	8d 41 ff             	lea    eax,[ecx-0x1]
c00048d8:	c1 ea 02             	shr    edx,0x2
c00048db:	83 e2 c0             	and    edx,0xffffffc0
c00048de:	09 ea                	or     edx,ebp
c00048e0:	bd 3f 00 00 00       	mov    ebp,0x3f
c00048e5:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c00048e8:	31 d2                	xor    edx,edx
c00048ea:	f7 f5                	div    ebp
c00048ec:	89 d7                	mov    edi,edx
c00048ee:	31 d2                	xor    edx,edx
c00048f0:	47                   	inc    edi
c00048f1:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048f5:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c00048f8:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c00048fb:	89 c5                	mov    ebp,eax
c00048fd:	c1 ed 02             	shr    ebp,0x2
c0004900:	83 e5 c0             	and    ebp,0xffffffc0
c0004903:	09 ef                	or     edi,ebp
c0004905:	89 fa                	mov    edx,edi
c0004907:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c000490a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c000490f:	74 34                	je     c0004945 <create_partition+0x564>
c0004911:	85 c9                	test   ecx,ecx
c0004913:	74 30                	je     c0004945 <create_partition+0x564>
c0004915:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004918:	76 2b                	jbe    c0004945 <create_partition+0x564>
c000491a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000491e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004922:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004925:	83 ff 64             	cmp    edi,0x64
c0004928:	76 4b                	jbe    c0004975 <create_partition+0x594>
c000492a:	89 f8                	mov    eax,edi
c000492c:	01 c8                	add    eax,ecx
c000492e:	0f 82 5d ff ff ff    	jb     c0004891 <create_partition+0x4b0>
c0004934:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004937:	0f 87 54 ff ff ff    	ja     c0004891 <create_partition+0x4b0>
c000493d:	85 ff                	test   edi,edi
c000493f:	0f 85 51 ff ff ff    	jne    c0004896 <create_partition+0x4b5>
c0004945:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000494b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004950:	e8 2e d1 ff ff       	call   c0001a83 <st_word>
c0004955:	83 ec 0c             	sub    esp,0xc
c0004958:	6a 01                	push   0x1
c000495a:	6a 00                	push   0x0
c000495c:	6a 00                	push   0x0
c000495e:	53                   	push   ebx
c000495f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004963:	e8 74 d0 ff ff       	call   c00019dc <disk_write>
c0004968:	83 c4 20             	add    esp,0x20
c000496b:	85 c0                	test   eax,eax
c000496d:	0f 95 c0             	setne  al
c0004970:	0f b6 c0             	movzx  eax,al
c0004973:	eb 0e                	jmp    c0004983 <create_partition+0x5a2>
c0004975:	74 07                	je     c000497e <create_partition+0x59d>
c0004977:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c000497c:	eb ac                	jmp    c000492a <create_partition+0x549>
c000497e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004981:	eb a7                	jmp    c000492a <create_partition+0x549>
c0004983:	83 c4 5c             	add    esp,0x5c
c0004986:	5b                   	pop    ebx
c0004987:	5e                   	pop    esi
c0004988:	5f                   	pop    edi
c0004989:	5d                   	pop    ebp
c000498a:	c3                   	ret    

c000498b <get_fileinfo>:
c000498b:	55                   	push   ebp
c000498c:	57                   	push   edi
c000498d:	56                   	push   esi
c000498e:	53                   	push   ebx
c000498f:	83 ec 1c             	sub    esp,0x1c
c0004992:	8b 30                	mov    esi,DWORD PTR [eax]
c0004994:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004998:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000499c:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c000499f:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049a2:	0f 84 dc 01 00 00    	je     c0004b84 <get_fileinfo+0x1f9>
c00049a8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00049ab:	75 0f                	jne    c00049bc <get_fileinfo+0x31>
c00049ad:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049b0:	83 c4 1c             	add    esp,0x1c
c00049b3:	5b                   	pop    ebx
c00049b4:	5e                   	pop    esi
c00049b5:	5f                   	pop    edi
c00049b6:	5d                   	pop    ebp
c00049b7:	e9 58 d5 ff ff       	jmp    c0001f14 <get_xfileinfo>
c00049bc:	89 d3                	mov    ebx,edx
c00049be:	89 c6                	mov    esi,eax
c00049c0:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049c4:	74 6a                	je     c0004a30 <get_fileinfo+0xa5>
c00049c6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00049ce:	31 ed                	xor    ebp,ebp
c00049d0:	31 ff                	xor    edi,edi
c00049d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00049d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00049dd:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c00049e1:	66 85 d2             	test   dx,dx
c00049e4:	74 3e                	je     c0004a24 <get_fileinfo+0x99>
c00049e6:	66 85 ed             	test   bp,bp
c00049e9:	75 0c                	jne    c00049f7 <get_fileinfo+0x6c>
c00049eb:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c00049f1:	66 3d ff 07          	cmp    ax,0x7ff
c00049f5:	76 22                	jbe    c0004a19 <get_fileinfo+0x8e>
c00049f7:	b9 ff 00 00 00       	mov    ecx,0xff
c00049fc:	89 e8                	mov    eax,ebp
c00049fe:	29 f9                	sub    ecx,edi
c0004a00:	c1 e0 10             	shl    eax,0x10
c0004a03:	09 d0                	or     eax,edx
c0004a05:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a09:	e8 a3 d1 ff ff       	call   c0001bb1 <put_utf>
c0004a0e:	84 c0                	test   al,al
c0004a10:	74 10                	je     c0004a22 <get_fileinfo+0x97>
c0004a12:	0f b6 c0             	movzx  eax,al
c0004a15:	31 d2                	xor    edx,edx
c0004a17:	01 c7                	add    edi,eax
c0004a19:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a1e:	89 d5                	mov    ebp,edx
c0004a20:	eb b0                	jmp    c00049d2 <get_fileinfo+0x47>
c0004a22:	31 ff                	xor    edi,edi
c0004a24:	66 85 ed             	test   bp,bp
c0004a27:	74 02                	je     c0004a2b <get_fileinfo+0xa0>
c0004a29:	31 ff                	xor    edi,edi
c0004a2b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a30:	31 ff                	xor    edi,edi
c0004a32:	31 c9                	xor    ecx,ecx
c0004a34:	83 f9 0a             	cmp    ecx,0xa
c0004a37:	0f 87 ad 00 00 00    	ja     c0004aea <get_fileinfo+0x15f>
c0004a3d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a40:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a43:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a47:	66 83 fa 20          	cmp    dx,0x20
c0004a4b:	0f 84 92 00 00 00    	je     c0004ae3 <get_fileinfo+0x158>
c0004a51:	66 83 fa 05          	cmp    dx,0x5
c0004a55:	75 05                	jne    c0004a5c <get_fileinfo+0xd1>
c0004a57:	ba e5 00 00 00       	mov    edx,0xe5
c0004a5c:	83 ff 0b             	cmp    edi,0xb
c0004a5f:	77 0b                	ja     c0004a6c <get_fileinfo+0xe1>
c0004a61:	83 fd 09             	cmp    ebp,0x9
c0004a64:	75 06                	jne    c0004a6c <get_fileinfo+0xe1>
c0004a66:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004a6b:	47                   	inc    edi
c0004a6c:	0f b7 c2             	movzx  eax,dx
c0004a6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a73:	e8 6d d0 ff ff       	call   c0001ae5 <dbc_1st>
c0004a78:	85 c0                	test   eax,eax
c0004a7a:	74 2f                	je     c0004aab <get_fileinfo+0x120>
c0004a7c:	83 fd 08             	cmp    ebp,0x8
c0004a7f:	74 2a                	je     c0004aab <get_fileinfo+0x120>
c0004a81:	83 fd 0b             	cmp    ebp,0xb
c0004a84:	74 25                	je     c0004aab <get_fileinfo+0x120>
c0004a86:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a89:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004a8d:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004a91:	e8 52 d0 ff ff       	call   c0001ae8 <dbc_2nd>
c0004a96:	85 c0                	test   eax,eax
c0004a98:	74 11                	je     c0004aab <get_fileinfo+0x120>
c0004a9a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a9e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004aa3:	c1 e2 08             	shl    edx,0x8
c0004aa6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004aa9:	09 c2                	or     edx,eax
c0004aab:	0f b7 d2             	movzx  edx,dx
c0004aae:	50                   	push   eax
c0004aaf:	50                   	push   eax
c0004ab0:	68 b5 01 00 00       	push   0x1b5
c0004ab5:	52                   	push   edx
c0004ab6:	e8 46 38 00 00       	call   c0008301 <ff_oem2uni>
c0004abb:	83 c4 10             	add    esp,0x10
c0004abe:	66 85 c0             	test   ax,ax
c0004ac1:	75 04                	jne    c0004ac7 <get_fileinfo+0x13c>
c0004ac3:	31 ff                	xor    edi,edi
c0004ac5:	eb 23                	jmp    c0004aea <get_fileinfo+0x15f>
c0004ac7:	b9 0c 00 00 00       	mov    ecx,0xc
c0004acc:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ad0:	29 f9                	sub    ecx,edi
c0004ad2:	0f b7 c0             	movzx  eax,ax
c0004ad5:	e8 d7 d0 ff ff       	call   c0001bb1 <put_utf>
c0004ada:	84 c0                	test   al,al
c0004adc:	74 e5                	je     c0004ac3 <get_fileinfo+0x138>
c0004ade:	0f b6 c0             	movzx  eax,al
c0004ae1:	01 c7                	add    edi,eax
c0004ae3:	89 e9                	mov    ecx,ebp
c0004ae5:	e9 4a ff ff ff       	jmp    c0004a34 <get_fileinfo+0xa9>
c0004aea:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004aef:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004af3:	75 54                	jne    c0004b49 <get_fileinfo+0x1be>
c0004af5:	85 ff                	test   edi,edi
c0004af7:	75 0b                	jne    c0004b04 <get_fileinfo+0x179>
c0004af9:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004afd:	ba 01 00 00 00       	mov    edx,0x1
c0004b02:	eb 33                	jmp    c0004b37 <get_fileinfo+0x1ac>
c0004b04:	b1 08                	mov    cl,0x8
c0004b06:	31 d2                	xor    edx,edx
c0004b08:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b0e:	84 c0                	test   al,al
c0004b10:	74 25                	je     c0004b37 <get_fileinfo+0x1ac>
c0004b12:	66 83 f8 2e          	cmp    ax,0x2e
c0004b16:	74 16                	je     c0004b2e <get_fileinfo+0x1a3>
c0004b18:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b1b:	66 83 ff 19          	cmp    di,0x19
c0004b1f:	77 0f                	ja     c0004b30 <get_fileinfo+0x1a5>
c0004b21:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b24:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b27:	74 07                	je     c0004b30 <get_fileinfo+0x1a5>
c0004b29:	83 c0 20             	add    eax,0x20
c0004b2c:	eb 02                	jmp    c0004b30 <get_fileinfo+0x1a5>
c0004b2e:	b1 10                	mov    cl,0x10
c0004b30:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b34:	42                   	inc    edx
c0004b35:	eb d1                	jmp    c0004b08 <get_fileinfo+0x17d>
c0004b37:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b3c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b3f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b43:	75 04                	jne    c0004b49 <get_fileinfo+0x1be>
c0004b45:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b49:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b4c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b4f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b55:	83 c0 1c             	add    eax,0x1c
c0004b58:	e8 c1 ce ff ff       	call   c0001a1e <ld_dword>
c0004b5d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b64:	89 03                	mov    DWORD PTR [ebx],eax
c0004b66:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b69:	83 c0 16             	add    eax,0x16
c0004b6c:	e8 a0 ce ff ff       	call   c0001a11 <ld_word>
c0004b71:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004b75:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b78:	83 c0 18             	add    eax,0x18
c0004b7b:	e8 91 ce ff ff       	call   c0001a11 <ld_word>
c0004b80:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004b84:	83 c4 1c             	add    esp,0x1c
c0004b87:	5b                   	pop    ebx
c0004b88:	5e                   	pop    esi
c0004b89:	5f                   	pop    edi
c0004b8a:	5d                   	pop    ebp
c0004b8b:	c3                   	ret    

c0004b8c <ld_clust.isra.0>:
c0004b8c:	56                   	push   esi
c0004b8d:	89 c6                	mov    esi,eax
c0004b8f:	53                   	push   ebx
c0004b90:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004b93:	89 d3                	mov    ebx,edx
c0004b95:	e8 77 ce ff ff       	call   c0001a11 <ld_word>
c0004b9a:	0f b7 c8             	movzx  ecx,ax
c0004b9d:	89 f0                	mov    eax,esi
c0004b9f:	3c 03                	cmp    al,0x3
c0004ba1:	75 0d                	jne    c0004bb0 <ld_clust.isra.0+0x24>
c0004ba3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004ba6:	e8 66 ce ff ff       	call   c0001a11 <ld_word>
c0004bab:	c1 e0 10             	shl    eax,0x10
c0004bae:	09 c1                	or     ecx,eax
c0004bb0:	89 c8                	mov    eax,ecx
c0004bb2:	5b                   	pop    ebx
c0004bb3:	5e                   	pop    esi
c0004bb4:	c3                   	ret    

c0004bb5 <st_clust.isra.1>:
c0004bb5:	56                   	push   esi
c0004bb6:	89 c6                	mov    esi,eax
c0004bb8:	53                   	push   ebx
c0004bb9:	89 d3                	mov    ebx,edx
c0004bbb:	0f b7 d1             	movzx  edx,cx
c0004bbe:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004bc1:	e8 bd ce ff ff       	call   c0001a83 <st_word>
c0004bc6:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004bc9:	75 0f                	jne    c0004bda <st_clust.isra.1+0x25>
c0004bcb:	c1 e9 10             	shr    ecx,0x10
c0004bce:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bd1:	89 ca                	mov    edx,ecx
c0004bd3:	5b                   	pop    ebx
c0004bd4:	5e                   	pop    esi
c0004bd5:	e9 a9 ce ff ff       	jmp    c0001a83 <st_word>
c0004bda:	5b                   	pop    ebx
c0004bdb:	5e                   	pop    esi
c0004bdc:	c3                   	ret    

c0004bdd <init_alloc_info.isra.2>:
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	89 c6                	mov    esi,eax
c0004be1:	89 d3                	mov    ebx,edx
c0004be3:	51                   	push   ecx
c0004be4:	8b 00                	mov    eax,DWORD PTR [eax]
c0004be6:	83 c0 34             	add    eax,0x34
c0004be9:	e8 30 ce ff ff       	call   c0001a1e <ld_dword>
c0004bee:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004bf1:	8b 06                	mov    eax,DWORD PTR [esi]
c0004bf3:	83 c0 38             	add    eax,0x38
c0004bf6:	e8 3b ce ff ff       	call   c0001a36 <ld_qword>
c0004bfb:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004bfe:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c01:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c03:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c06:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c0d:	83 e0 02             	and    eax,0x2
c0004c10:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c13:	5b                   	pop    ebx
c0004c14:	5b                   	pop    ebx
c0004c15:	5e                   	pop    esi
c0004c16:	c3                   	ret    

c0004c17 <follow_path>:
c0004c17:	56                   	push   esi
c0004c18:	53                   	push   ebx
c0004c19:	89 c3                	mov    ebx,eax
c0004c1b:	83 ec 14             	sub    esp,0x14
c0004c1e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c22:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c28:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c2a:	80 fa 5c             	cmp    dl,0x5c
c0004c2d:	75 07                	jne    c0004c36 <follow_path+0x1f>
c0004c2f:	40                   	inc    eax
c0004c30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c34:	eb ee                	jmp    c0004c24 <follow_path+0xd>
c0004c36:	80 fa 2f             	cmp    dl,0x2f
c0004c39:	74 f4                	je     c0004c2f <follow_path+0x18>
c0004c3b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c42:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c49:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c4c:	77 52                	ja     c0004ca0 <follow_path+0x89>
c0004c4e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c52:	31 d2                	xor    edx,edx
c0004c54:	89 d8                	mov    eax,ebx
c0004c56:	e8 12 e3 ff ff       	call   c0002f6d <dir_sdi>
c0004c5b:	eb 7c                	jmp    c0004cd9 <follow_path+0xc2>
c0004c5d:	89 d8                	mov    eax,ebx
c0004c5f:	e8 6e f2 ff ff       	call   c0003ed2 <dir_find>
c0004c64:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004c67:	85 c0                	test   eax,eax
c0004c69:	75 46                	jne    c0004cb1 <follow_path+0x9a>
c0004c6b:	80 e2 04             	and    dl,0x4
c0004c6e:	75 69                	jne    c0004cd9 <follow_path+0xc2>
c0004c70:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004c74:	74 5e                	je     c0004cd4 <follow_path+0xbd>
c0004c76:	8a 06                	mov    al,BYTE PTR [esi]
c0004c78:	3c 04                	cmp    al,0x4
c0004c7a:	75 41                	jne    c0004cbd <follow_path+0xa6>
c0004c7c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004c7f:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004c83:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004c86:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004c89:	30 c0                	xor    al,al
c0004c8b:	09 d0                	or     eax,edx
c0004c8d:	89 da                	mov    edx,ebx
c0004c8f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004c92:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004c95:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c98:	8d 46 10             	lea    eax,[esi+0x10]
c0004c9b:	e8 3d ff ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0004ca0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ca4:	89 d8                	mov    eax,ebx
c0004ca6:	e8 a9 ed ff ff       	call   c0003a54 <create_name>
c0004cab:	85 c0                	test   eax,eax
c0004cad:	74 ae                	je     c0004c5d <follow_path+0x46>
c0004caf:	eb 28                	jmp    c0004cd9 <follow_path+0xc2>
c0004cb1:	83 f8 04             	cmp    eax,0x4
c0004cb4:	75 23                	jne    c0004cd9 <follow_path+0xc2>
c0004cb6:	80 e2 04             	and    dl,0x4
c0004cb9:	74 19                	je     c0004cd4 <follow_path+0xbd>
c0004cbb:	eb 1c                	jmp    c0004cd9 <follow_path+0xc2>
c0004cbd:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004cc0:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004cc6:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004cca:	e8 bd fe ff ff       	call   c0004b8c <ld_clust.isra.0>
c0004ccf:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004cd2:	eb cc                	jmp    c0004ca0 <follow_path+0x89>
c0004cd4:	b8 05 00 00 00       	mov    eax,0x5
c0004cd9:	83 c4 14             	add    esp,0x14
c0004cdc:	5b                   	pop    ebx
c0004cdd:	5e                   	pop    esi
c0004cde:	c3                   	ret    

c0004cdf <f_mount>:
c0004cdf:	53                   	push   ebx
c0004ce0:	83 ec 18             	sub    esp,0x18
c0004ce3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004ce7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004ceb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004cf3:	e8 fb d2 ff ff       	call   c0001ff3 <get_ldnumber>
c0004cf8:	89 c2                	mov    edx,eax
c0004cfa:	b8 0b 00 00 00       	mov    eax,0xb
c0004cff:	85 d2                	test   edx,edx
c0004d01:	78 39                	js     c0004d3c <f_mount+0x5d>
c0004d03:	8b 04 95 c0 c8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3740]
c0004d0a:	85 c0                	test   eax,eax
c0004d0c:	74 03                	je     c0004d11 <f_mount+0x32>
c0004d0e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d15:	85 c0                	test   eax,eax
c0004d17:	74 03                	je     c0004d1c <f_mount+0x3d>
c0004d19:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d20:	89 04 95 c0 c8 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3740],eax
c0004d27:	31 c0                	xor    eax,eax
c0004d29:	84 db                	test   bl,bl
c0004d2b:	74 0f                	je     c0004d3c <f_mount+0x5d>
c0004d2d:	31 c9                	xor    ecx,ecx
c0004d2f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d33:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d37:	e8 65 d7 ff ff       	call   c00024a1 <mount_volume>
c0004d3c:	83 c4 18             	add    esp,0x18
c0004d3f:	5b                   	pop    ebx
c0004d40:	c3                   	ret    

c0004d41 <f_open>:
c0004d41:	55                   	push   ebp
c0004d42:	bd 09 00 00 00       	mov    ebp,0x9
c0004d47:	57                   	push   edi
c0004d48:	56                   	push   esi
c0004d49:	53                   	push   ebx
c0004d4a:	83 ec 7c             	sub    esp,0x7c
c0004d4d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d54:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d5b:	85 db                	test   ebx,ebx
c0004d5d:	0f 84 10 04 00 00    	je     c0005173 <f_open+0x432>
c0004d63:	89 fe                	mov    esi,edi
c0004d65:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d69:	83 e6 3f             	and    esi,0x3f
c0004d6c:	89 f0                	mov    eax,esi
c0004d6e:	0f b6 c8             	movzx  ecx,al
c0004d71:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004d78:	e8 24 d7 ff ff       	call   c00024a1 <mount_volume>
c0004d7d:	89 c5                	mov    ebp,eax
c0004d7f:	85 c0                	test   eax,eax
c0004d81:	0f 85 e6 03 00 00    	jne    c000516d <f_open+0x42c>
c0004d87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d8b:	bd 11 00 00 00       	mov    ebp,0x11
c0004d90:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d94:	83 ec 0c             	sub    esp,0xc
c0004d97:	68 60 04 00 00       	push   0x460
c0004d9c:	e8 a3 34 00 00       	call   c0008244 <ff_memalloc>
c0004da1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004da5:	83 c4 10             	add    esp,0x10
c0004da8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004dad:	0f 84 c0 03 00 00    	je     c0005173 <f_open+0x432>
c0004db3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004db7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004dbb:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004dc1:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004dc4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004dc7:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004dce:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004dd2:	e8 40 fe ff ff       	call   c0004c17 <follow_path>
c0004dd7:	89 c5                	mov    ebp,eax
c0004dd9:	85 c0                	test   eax,eax
c0004ddb:	75 0c                	jne    c0004de9 <f_open+0xa8>
c0004ddd:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004de2:	79 05                	jns    c0004de9 <f_open+0xa8>
c0004de4:	bd 06 00 00 00       	mov    ebp,0x6
c0004de9:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004def:	0f 84 84 01 00 00    	je     c0004f79 <f_open+0x238>
c0004df5:	85 ed                	test   ebp,ebp
c0004df7:	74 20                	je     c0004e19 <f_open+0xd8>
c0004df9:	83 fd 04             	cmp    ebp,0x4
c0004dfc:	0f 85 58 03 00 00    	jne    c000515a <f_open+0x419>
c0004e02:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e06:	83 ce 08             	or     esi,0x8
c0004e09:	e8 8a f2 ff ff       	call   c0004098 <dir_register>
c0004e0e:	89 c5                	mov    ebp,eax
c0004e10:	85 c0                	test   eax,eax
c0004e12:	74 2f                	je     c0004e43 <f_open+0x102>
c0004e14:	e9 41 03 00 00       	jmp    c000515a <f_open+0x419>
c0004e19:	bd 07 00 00 00       	mov    ebp,0x7
c0004e1e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e23:	0f 85 31 03 00 00    	jne    c000515a <f_open+0x419>
c0004e29:	bd 08 00 00 00       	mov    ebp,0x8
c0004e2e:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e34:	0f 85 20 03 00 00    	jne    c000515a <f_open+0x419>
c0004e3a:	83 e7 08             	and    edi,0x8
c0004e3d:	0f 84 65 01 00 00    	je     c0004fa8 <f_open+0x267>
c0004e43:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e47:	8a 02                	mov    al,BYTE PTR [edx]
c0004e49:	3c 04                	cmp    al,0x4
c0004e4b:	0f 85 97 00 00 00    	jne    c0004ee8 <f_open+0x1a7>
c0004e51:	8d 42 10             	lea    eax,[edx+0x10]
c0004e54:	89 13                	mov    DWORD PTR [ebx],edx
c0004e56:	89 da                	mov    edx,ebx
c0004e58:	e8 80 fd ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0004e5d:	31 d2                	xor    edx,edx
c0004e5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e63:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004e68:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e6b:	83 c0 02             	add    eax,0x2
c0004e6e:	e8 32 cc ff ff       	call   c0001aa5 <mem_set>
c0004e73:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004e78:	31 d2                	xor    edx,edx
c0004e7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e7e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e81:	83 c0 26             	add    eax,0x26
c0004e84:	e8 1c cc ff ff       	call   c0001aa5 <mem_set>
c0004e89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e8d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004e90:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004e94:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e99:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e9c:	83 c0 08             	add    eax,0x8
c0004e9f:	e8 e3 cb ff ff       	call   c0001a87 <st_dword>
c0004ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ea8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004eab:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004eaf:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004eb3:	e8 b7 ea ff ff       	call   c000396f <store_xdir>
c0004eb8:	89 c5                	mov    ebp,eax
c0004eba:	85 c0                	test   eax,eax
c0004ebc:	0f 85 98 02 00 00    	jne    c000515a <f_open+0x419>
c0004ec2:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004ec5:	85 d2                	test   edx,edx
c0004ec7:	0f 84 db 00 00 00    	je     c0004fa8 <f_open+0x267>
c0004ecd:	31 c9                	xor    ecx,ecx
c0004ecf:	89 d8                	mov    eax,ebx
c0004ed1:	e8 8e e3 ff ff       	call   c0003264 <remove_chain>
c0004ed6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004eda:	89 c5                	mov    ebp,eax
c0004edc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004edf:	48                   	dec    eax
c0004ee0:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004ee3:	e9 b8 00 00 00       	jmp    c0004fa0 <f_open+0x25f>
c0004ee8:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004eec:	89 ea                	mov    edx,ebp
c0004eee:	e8 99 fc ff ff       	call   c0004b8c <ld_clust.isra.0>
c0004ef3:	ba 00 00 21 50       	mov    edx,0x50210000
c0004ef8:	89 c7                	mov    edi,eax
c0004efa:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004efd:	e8 85 cb ff ff       	call   c0001a87 <st_dword>
c0004f02:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f06:	31 c9                	xor    ecx,ecx
c0004f08:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f10:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f14:	e8 9c fc ff ff       	call   c0004bb5 <st_clust.isra.1>
c0004f19:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f1d:	31 d2                	xor    edx,edx
c0004f1f:	83 c0 1c             	add    eax,0x1c
c0004f22:	e8 60 cb ff ff       	call   c0001a87 <st_dword>
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 ff                	test   edi,edi
c0004f2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f31:	74 75                	je     c0004fa8 <f_open+0x267>
c0004f33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f37:	31 c9                	xor    ecx,ecx
c0004f39:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f3c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f3f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f43:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f47:	89 fa                	mov    edx,edi
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 12 e3 ff ff       	call   c0003264 <remove_chain>
c0004f52:	89 c5                	mov    ebp,eax
c0004f54:	85 c0                	test   eax,eax
c0004f56:	0f 85 fe 01 00 00    	jne    c000515a <f_open+0x419>
c0004f5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f60:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f68:	4f                   	dec    edi
c0004f69:	e8 81 d2 ff ff       	call   c00021ef <move_window>
c0004f6e:	89 c5                	mov    ebp,eax
c0004f70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f74:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004f77:	eb 27                	jmp    c0004fa0 <f_open+0x25f>
c0004f79:	85 ed                	test   ebp,ebp
c0004f7b:	0f 85 d9 01 00 00    	jne    c000515a <f_open+0x419>
c0004f81:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004f85:	bd 04 00 00 00       	mov    ebp,0x4
c0004f8a:	a8 10                	test   al,0x10
c0004f8c:	0f 85 c8 01 00 00    	jne    c000515a <f_open+0x419>
c0004f92:	83 e7 02             	and    edi,0x2
c0004f95:	74 11                	je     c0004fa8 <f_open+0x267>
c0004f97:	bd 07 00 00 00       	mov    ebp,0x7
c0004f9c:	a8 01                	test   al,0x1
c0004f9e:	eb 02                	jmp    c0004fa2 <f_open+0x261>
c0004fa0:	85 ed                	test   ebp,ebp
c0004fa2:	0f 85 b2 01 00 00    	jne    c000515a <f_open+0x419>
c0004fa8:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fae:	74 03                	je     c0004fb3 <f_open+0x272>
c0004fb0:	83 ce 40             	or     esi,0x40
c0004fb3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004fb7:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004fba:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004fbd:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004fc0:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004fc3:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004fc7:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004fca:	8a 02                	mov    al,BYTE PTR [edx]
c0004fcc:	3c 04                	cmp    al,0x4
c0004fce:	75 2a                	jne    c0004ffa <f_open+0x2b9>
c0004fd0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004fd4:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004fd9:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004fdc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004fe0:	30 c0                	xor    al,al
c0004fe2:	09 c8                	or     eax,ecx
c0004fe4:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004fe7:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004feb:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004fee:	8d 42 10             	lea    eax,[edx+0x10]
c0004ff1:	89 da                	mov    edx,ebx
c0004ff3:	e8 e5 fb ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0004ff8:	eb 1c                	jmp    c0005016 <f_open+0x2d5>
c0004ffa:	89 fa                	mov    edx,edi
c0004ffc:	e8 8b fb ff ff       	call   c0004b8c <ld_clust.isra.0>
c0005001:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005004:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005007:	e8 12 ca ff ff       	call   c0001a1e <ld_dword>
c000500c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005013:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005016:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000501a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005021:	89 03                	mov    DWORD PTR [ebx],eax
c0005023:	31 d2                	xor    edx,edx
c0005025:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005029:	b9 00 02 00 00       	mov    ecx,0x200
c000502e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005032:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005036:	89 f0                	mov    eax,esi
c0005038:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000503f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005042:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005049:	8d 43 50             	lea    eax,[ebx+0x50]
c000504c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005053:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000505a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000505e:	e8 42 ca ff ff       	call   c0001aa5 <mem_set>
c0005063:	83 e6 20             	and    esi,0x20
c0005066:	75 07                	jne    c000506f <f_open+0x32e>
c0005068:	31 ed                	xor    ebp,ebp
c000506a:	e9 eb 00 00 00       	jmp    c000515a <f_open+0x419>
c000506f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005072:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005075:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005079:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000507d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005081:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005085:	74 e1                	je     c0005068 <f_open+0x327>
c0005087:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000508b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000508f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005092:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005095:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005099:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000509c:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050a0:	31 ff                	xor    edi,edi
c00050a2:	c1 e5 09             	shl    ebp,0x9
c00050a5:	89 ee                	mov    esi,ebp
c00050a7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00050ab:	89 f8                	mov    eax,edi
c00050ad:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050b1:	73 22                	jae    c00050d5 <f_open+0x394>
c00050b3:	89 d8                	mov    eax,ebx
c00050b5:	e8 bd dc ff ff       	call   c0002d77 <get_fat>
c00050ba:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050be:	89 c2                	mov    edx,eax
c00050c0:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050c4:	83 f8 01             	cmp    eax,0x1
c00050c7:	76 10                	jbe    c00050d9 <f_open+0x398>
c00050c9:	83 f8 ff             	cmp    eax,0xffffffff
c00050cc:	75 d9                	jne    c00050a7 <f_open+0x366>
c00050ce:	bd 01 00 00 00       	mov    ebp,0x1
c00050d3:	eb 09                	jmp    c00050de <f_open+0x39d>
c00050d5:	31 ed                	xor    ebp,ebp
c00050d7:	eb 05                	jmp    c00050de <f_open+0x39d>
c00050d9:	bd 02 00 00 00       	mov    ebp,0x2
c00050de:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00050e1:	85 ed                	test   ebp,ebp
c00050e3:	75 75                	jne    c000515a <f_open+0x419>
c00050e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050e9:	25 ff 01 00 00       	and    eax,0x1ff
c00050ee:	0f 84 74 ff ff ff    	je     c0005068 <f_open+0x327>
c00050f4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00050f8:	bd 02 00 00 00       	mov    ebp,0x2
c00050fd:	89 c8                	mov    eax,ecx
c00050ff:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005103:	e8 a2 cb ff ff       	call   c0001caa <clst2sect>
c0005108:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000510c:	89 d7                	mov    edi,edx
c000510e:	09 c7                	or     edi,eax
c0005110:	74 48                	je     c000515a <f_open+0x419>
c0005112:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005116:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000511a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005122:	0f ac fe 09          	shrd   esi,edi,0x9
c0005126:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000512a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000512e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005131:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005135:	83 ec 0c             	sub    esp,0xc
c0005138:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000513b:	6a 01                	push   0x1
c000513d:	52                   	push   edx
c000513e:	50                   	push   eax
c000513f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005143:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005147:	50                   	push   eax
c0005148:	e8 79 c8 ff ff       	call   c00019c6 <disk_read>
c000514d:	83 c4 20             	add    esp,0x20
c0005150:	85 c0                	test   eax,eax
c0005152:	0f 95 c0             	setne  al
c0005155:	0f b6 c0             	movzx  eax,al
c0005158:	89 c5                	mov    ebp,eax
c000515a:	83 ec 0c             	sub    esp,0xc
c000515d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005161:	e8 f4 30 00 00       	call   c000825a <ff_memfree>
c0005166:	83 c4 10             	add    esp,0x10
c0005169:	85 ed                	test   ebp,ebp
c000516b:	74 06                	je     c0005173 <f_open+0x432>
c000516d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005173:	83 c4 7c             	add    esp,0x7c
c0005176:	89 e8                	mov    eax,ebp
c0005178:	5b                   	pop    ebx
c0005179:	5e                   	pop    esi
c000517a:	5f                   	pop    edi
c000517b:	5d                   	pop    ebp
c000517c:	c3                   	ret    

c000517d <f_read>:
c000517d:	55                   	push   ebp
c000517e:	57                   	push   edi
c000517f:	56                   	push   esi
c0005180:	53                   	push   ebx
c0005181:	83 ec 2c             	sub    esp,0x2c
c0005184:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005188:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000518c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005192:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005196:	89 d8                	mov    eax,ebx
c0005198:	e8 77 cf ff ff       	call   c0002114 <validate>
c000519d:	89 c5                	mov    ebp,eax
c000519f:	85 c0                	test   eax,eax
c00051a1:	0f 85 4c 02 00 00    	jne    c00053f3 <f_read+0x276>
c00051a7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00051ab:	85 ed                	test   ebp,ebp
c00051ad:	0f 85 40 02 00 00    	jne    c00053f3 <f_read+0x276>
c00051b3:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051b7:	0f 84 31 02 00 00    	je     c00053ee <f_read+0x271>
c00051bd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051c0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051c3:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00051c6:	bf 00 00 00 00       	mov    edi,0x0
c00051cb:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00051ce:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00051d2:	89 d1                	mov    ecx,edx
c00051d4:	19 f9                	sbb    ecx,edi
c00051d6:	0f 83 cf 00 00 00    	jae    c00052ab <f_read+0x12e>
c00051dc:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00051e0:	e9 c6 00 00 00       	jmp    c00052ab <f_read+0x12e>
c00051e5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00051e8:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00051eb:	89 d0                	mov    eax,edx
c00051ed:	25 ff 01 00 00       	and    eax,0x1ff
c00051f2:	0f 85 c9 01 00 00    	jne    c00053c1 <f_read+0x244>
c00051f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051fc:	89 d6                	mov    esi,edx
c00051fe:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005202:	89 cf                	mov    edi,ecx
c0005204:	48                   	dec    eax
c0005205:	0f ac fe 09          	shrd   esi,edi,0x9
c0005209:	21 f0                	and    eax,esi
c000520b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000520f:	0f 84 a6 00 00 00    	je     c00052bb <f_read+0x13e>
c0005215:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005219:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000521c:	89 c8                	mov    eax,ecx
c000521e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005221:	e8 84 ca ff ff       	call   c0001caa <clst2sect>
c0005226:	89 d7                	mov    edi,edx
c0005228:	09 c7                	or     edi,eax
c000522a:	0f 84 b4 00 00 00    	je     c00052e4 <f_read+0x167>
c0005230:	31 ff                	xor    edi,edi
c0005232:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005236:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005239:	01 c6                	add    esi,eax
c000523b:	11 d7                	adc    edi,edx
c000523d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005245:	0f 86 fd 00 00 00    	jbe    c0005348 <f_read+0x1cb>
c000524b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000524f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005253:	c1 e8 09             	shr    eax,0x9
c0005256:	89 04 24             	mov    DWORD PTR [esp],eax
c0005259:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000525d:	03 14 24             	add    edx,DWORD PTR [esp]
c0005260:	39 c2                	cmp    edx,eax
c0005262:	76 07                	jbe    c000526b <f_read+0xee>
c0005264:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005268:	89 04 24             	mov    DWORD PTR [esp],eax
c000526b:	83 ec 0c             	sub    esp,0xc
c000526e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005272:	57                   	push   edi
c0005273:	56                   	push   esi
c0005274:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005278:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000527c:	50                   	push   eax
c000527d:	e8 44 c7 ff ff       	call   c00019c6 <disk_read>
c0005282:	83 c4 20             	add    esp,0x20
c0005285:	85 c0                	test   eax,eax
c0005287:	75 6e                	jne    c00052f7 <f_read+0x17a>
c0005289:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000528d:	78 7e                	js     c000530d <f_read+0x190>
c000528f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005292:	c1 e6 09             	shl    esi,0x9
c0005295:	31 ff                	xor    edi,edi
c0005297:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000529b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000529f:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052a3:	01 30                	add    DWORD PTR [eax],esi
c00052a5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00052a8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00052ab:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052b0:	0f 85 2f ff ff ff    	jne    c00051e5 <f_read+0x68>
c00052b6:	e9 38 01 00 00       	jmp    c00053f3 <f_read+0x276>
c00052bb:	89 c8                	mov    eax,ecx
c00052bd:	09 d0                	or     eax,edx
c00052bf:	75 05                	jne    c00052c6 <f_read+0x149>
c00052c1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052c4:	eb 19                	jmp    c00052df <f_read+0x162>
c00052c6:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00052ca:	74 09                	je     c00052d5 <f_read+0x158>
c00052cc:	89 d8                	mov    eax,ebx
c00052ce:	e8 f8 c9 ff ff       	call   c0001ccb <clmt_clust>
c00052d3:	eb 0a                	jmp    c00052df <f_read+0x162>
c00052d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00052d8:	89 d8                	mov    eax,ebx
c00052da:	e8 98 da ff ff       	call   c0002d77 <get_fat>
c00052df:	83 f8 01             	cmp    eax,0x1
c00052e2:	77 0e                	ja     c00052f2 <f_read+0x175>
c00052e4:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00052e8:	bd 02 00 00 00       	mov    ebp,0x2
c00052ed:	e9 01 01 00 00       	jmp    c00053f3 <f_read+0x276>
c00052f2:	83 f8 ff             	cmp    eax,0xffffffff
c00052f5:	75 0e                	jne    c0005305 <f_read+0x188>
c00052f7:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00052fb:	bd 01 00 00 00       	mov    ebp,0x1
c0005300:	e9 ee 00 00 00       	jmp    c00053f3 <f_read+0x276>
c0005305:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005308:	e9 08 ff ff ff       	jmp    c0005215 <f_read+0x98>
c000530d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005310:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005313:	29 f0                	sub    eax,esi
c0005315:	19 fa                	sbb    edx,edi
c0005317:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000531a:	89 d7                	mov    edi,edx
c000531c:	ba 00 00 00 00       	mov    edx,0x0
c0005321:	89 f9                	mov    ecx,edi
c0005323:	19 d1                	sbb    ecx,edx
c0005325:	0f 83 64 ff ff ff    	jae    c000528f <f_read+0x112>
c000532b:	89 c7                	mov    edi,eax
c000532d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005337:	b9 00 02 00 00       	mov    ecx,0x200
c000533c:	01 f8                	add    eax,edi
c000533e:	e8 4d c7 ff ff       	call   c0001a90 <mem_cpy>
c0005343:	e9 47 ff ff ff       	jmp    c000528f <f_read+0x112>
c0005348:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000534b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000534e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005351:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005355:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c0005359:	75 05                	jne    c0005360 <f_read+0x1e3>
c000535b:	39 34 24             	cmp    DWORD PTR [esp],esi
c000535e:	74 5b                	je     c00053bb <f_read+0x23e>
c0005360:	8d 43 50             	lea    eax,[ebx+0x50]
c0005363:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005367:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000536b:	79 2a                	jns    c0005397 <f_read+0x21a>
c000536d:	83 ec 0c             	sub    esp,0xc
c0005370:	6a 01                	push   0x1
c0005372:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005376:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000537a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000537e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005382:	50                   	push   eax
c0005383:	e8 54 c6 ff ff       	call   c00019dc <disk_write>
c0005388:	83 c4 20             	add    esp,0x20
c000538b:	85 c0                	test   eax,eax
c000538d:	0f 85 64 ff ff ff    	jne    c00052f7 <f_read+0x17a>
c0005393:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005397:	83 ec 0c             	sub    esp,0xc
c000539a:	6a 01                	push   0x1
c000539c:	57                   	push   edi
c000539d:	56                   	push   esi
c000539e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053a2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00053a6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00053aa:	50                   	push   eax
c00053ab:	e8 16 c6 ff ff       	call   c00019c6 <disk_read>
c00053b0:	83 c4 20             	add    esp,0x20
c00053b3:	85 c0                	test   eax,eax
c00053b5:	0f 85 3c ff ff ff    	jne    c00052f7 <f_read+0x17a>
c00053bb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053be:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053c1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053c4:	ba 00 02 00 00       	mov    edx,0x200
c00053c9:	25 ff 01 00 00       	and    eax,0x1ff
c00053ce:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00053d2:	29 c2                	sub    edx,eax
c00053d4:	39 d6                	cmp    esi,edx
c00053d6:	76 02                	jbe    c00053da <f_read+0x25d>
c00053d8:	89 d6                	mov    esi,edx
c00053da:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00053de:	89 f1                	mov    ecx,esi
c00053e0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e4:	e8 a7 c6 ff ff       	call   c0001a90 <mem_cpy>
c00053e9:	e9 a7 fe ff ff       	jmp    c0005295 <f_read+0x118>
c00053ee:	bd 07 00 00 00       	mov    ebp,0x7
c00053f3:	83 c4 2c             	add    esp,0x2c
c00053f6:	89 e8                	mov    eax,ebp
c00053f8:	5b                   	pop    ebx
c00053f9:	5e                   	pop    esi
c00053fa:	5f                   	pop    edi
c00053fb:	5d                   	pop    ebp
c00053fc:	c3                   	ret    

c00053fd <f_write>:
c00053fd:	55                   	push   ebp
c00053fe:	57                   	push   edi
c00053ff:	56                   	push   esi
c0005400:	53                   	push   ebx
c0005401:	83 ec 2c             	sub    esp,0x2c
c0005404:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005408:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000540c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005412:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005416:	89 d8                	mov    eax,ebx
c0005418:	e8 f7 cc ff ff       	call   c0002114 <validate>
c000541d:	89 c5                	mov    ebp,eax
c000541f:	85 c0                	test   eax,eax
c0005421:	0f 85 86 02 00 00    	jne    c00056ad <f_write+0x2b0>
c0005427:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000542b:	85 ed                	test   ebp,ebp
c000542d:	0f 85 7a 02 00 00    	jne    c00056ad <f_write+0x2b0>
c0005433:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005437:	0f 84 6b 02 00 00    	je     c00056a8 <f_write+0x2ab>
c000543d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005441:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005444:	0f 84 43 01 00 00    	je     c000558d <f_write+0x190>
c000544a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000544d:	89 c1                	mov    ecx,eax
c000544f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005453:	0f 83 34 01 00 00    	jae    c000558d <f_write+0x190>
c0005459:	f7 d0                	not    eax
c000545b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000545f:	e9 29 01 00 00       	jmp    c000558d <f_write+0x190>
c0005464:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005467:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000546a:	89 d0                	mov    eax,edx
c000546c:	25 ff 01 00 00       	and    eax,0x1ff
c0005471:	0f 85 00 02 00 00    	jne    c0005677 <f_write+0x27a>
c0005477:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000547b:	89 d6                	mov    esi,edx
c000547d:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005481:	89 cf                	mov    edi,ecx
c0005483:	48                   	dec    eax
c0005484:	0f ac fe 09          	shrd   esi,edi,0x9
c0005488:	21 f0                	and    eax,esi
c000548a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000548e:	0f 84 06 01 00 00    	je     c000559a <f_write+0x19d>
c0005494:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005498:	0f 88 6e 01 00 00    	js     c000560c <f_write+0x20f>
c000549e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054a2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054a5:	89 c8                	mov    eax,ecx
c00054a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00054ab:	e8 fa c7 ff ff       	call   c0001caa <clst2sect>
c00054b0:	89 d1                	mov    ecx,edx
c00054b2:	09 c1                	or     ecx,eax
c00054b4:	0f 84 1c 01 00 00    	je     c00055d6 <f_write+0x1d9>
c00054ba:	31 ff                	xor    edi,edi
c00054bc:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054c0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054c4:	01 c6                	add    esi,eax
c00054c6:	11 d7                	adc    edi,edx
c00054c8:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054d0:	0f 86 63 01 00 00    	jbe    c0005639 <f_write+0x23c>
c00054d6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054de:	c1 e8 09             	shr    eax,0x9
c00054e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054e5:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054e9:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c00054ed:	39 c2                	cmp    edx,eax
c00054ef:	76 08                	jbe    c00054f9 <f_write+0xfc>
c00054f1:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054f9:	83 ec 0c             	sub    esp,0xc
c00054fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005500:	57                   	push   edi
c0005501:	56                   	push   esi
c0005502:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005506:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000550a:	50                   	push   eax
c000550b:	e8 cc c4 ff ff       	call   c00019dc <disk_write>
c0005510:	83 c4 20             	add    esp,0x20
c0005513:	85 c0                	test   eax,eax
c0005515:	0f 85 ce 00 00 00    	jne    c00055e9 <f_write+0x1ec>
c000551b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000551e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005521:	29 f0                	sub    eax,esi
c0005523:	19 fa                	sbb    edx,edi
c0005525:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005529:	89 d7                	mov    edi,edx
c000552b:	ba 00 00 00 00       	mov    edx,0x0
c0005530:	89 f9                	mov    ecx,edi
c0005532:	19 d1                	sbb    ecx,edx
c0005534:	73 1c                	jae    c0005552 <f_write+0x155>
c0005536:	89 c7                	mov    edi,eax
c0005538:	b9 00 02 00 00       	mov    ecx,0x200
c000553d:	c1 e7 09             	shl    edi,0x9
c0005540:	8d 43 50             	lea    eax,[ebx+0x50]
c0005543:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005547:	89 fa                	mov    edx,edi
c0005549:	e8 42 c5 ff ff       	call   c0001a90 <mem_cpy>
c000554e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005552:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005556:	c1 e6 09             	shl    esi,0x9
c0005559:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000555d:	31 ff                	xor    edi,edi
c000555f:	01 30                	add    DWORD PTR [eax],esi
c0005561:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005565:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005569:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000556c:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c000556f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005572:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c0005575:	89 c1                	mov    ecx,eax
c0005577:	39 f2                	cmp    edx,esi
c0005579:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000557c:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000557f:	19 f9                	sbb    ecx,edi
c0005581:	73 04                	jae    c0005587 <f_write+0x18a>
c0005583:	89 f2                	mov    edx,esi
c0005585:	89 f8                	mov    eax,edi
c0005587:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000558a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000558d:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005592:	0f 85 cc fe ff ff    	jne    c0005464 <f_write+0x67>
c0005598:	eb 2e                	jmp    c00055c8 <f_write+0x1cb>
c000559a:	89 c8                	mov    eax,ecx
c000559c:	09 d0                	or     eax,edx
c000559e:	75 0b                	jne    c00055ab <f_write+0x1ae>
c00055a0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055a3:	31 d2                	xor    edx,edx
c00055a5:	85 c0                	test   eax,eax
c00055a7:	75 28                	jne    c00055d1 <f_write+0x1d4>
c00055a9:	eb 12                	jmp    c00055bd <f_write+0x1c0>
c00055ab:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055af:	74 09                	je     c00055ba <f_write+0x1bd>
c00055b1:	89 d8                	mov    eax,ebx
c00055b3:	e8 13 c7 ff ff       	call   c0001ccb <clmt_clust>
c00055b8:	eb 0a                	jmp    c00055c4 <f_write+0x1c7>
c00055ba:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055bd:	89 d8                	mov    eax,ebx
c00055bf:	e8 a1 da ff ff       	call   c0003065 <create_chain>
c00055c4:	85 c0                	test   eax,eax
c00055c6:	75 09                	jne    c00055d1 <f_write+0x1d4>
c00055c8:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00055cc:	e9 dc 00 00 00       	jmp    c00056ad <f_write+0x2b0>
c00055d1:	83 f8 01             	cmp    eax,0x1
c00055d4:	75 0e                	jne    c00055e4 <f_write+0x1e7>
c00055d6:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00055da:	bd 02 00 00 00       	mov    ebp,0x2
c00055df:	e9 c9 00 00 00       	jmp    c00056ad <f_write+0x2b0>
c00055e4:	83 f8 ff             	cmp    eax,0xffffffff
c00055e7:	75 0e                	jne    c00055f7 <f_write+0x1fa>
c00055e9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00055ed:	bd 01 00 00 00       	mov    ebp,0x1
c00055f2:	e9 b6 00 00 00       	jmp    c00056ad <f_write+0x2b0>
c00055f7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00055fa:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00055fe:	0f 85 90 fe ff ff    	jne    c0005494 <f_write+0x97>
c0005604:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005607:	e9 88 fe ff ff       	jmp    c0005494 <f_write+0x97>
c000560c:	83 ec 0c             	sub    esp,0xc
c000560f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005612:	6a 01                	push   0x1
c0005614:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005617:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000561a:	50                   	push   eax
c000561b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000561f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005623:	50                   	push   eax
c0005624:	e8 b3 c3 ff ff       	call   c00019dc <disk_write>
c0005629:	83 c4 20             	add    esp,0x20
c000562c:	85 c0                	test   eax,eax
c000562e:	75 b9                	jne    c00055e9 <f_write+0x1ec>
c0005630:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005634:	e9 65 fe ff ff       	jmp    c000549e <f_write+0xa1>
c0005639:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000563c:	75 05                	jne    c0005643 <f_write+0x246>
c000563e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005641:	74 2e                	je     c0005671 <f_write+0x274>
c0005643:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005646:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005649:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000564c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000564f:	73 20                	jae    c0005671 <f_write+0x274>
c0005651:	83 ec 0c             	sub    esp,0xc
c0005654:	8d 43 50             	lea    eax,[ebx+0x50]
c0005657:	6a 01                	push   0x1
c0005659:	57                   	push   edi
c000565a:	56                   	push   esi
c000565b:	50                   	push   eax
c000565c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005660:	50                   	push   eax
c0005661:	e8 60 c3 ff ff       	call   c00019c6 <disk_read>
c0005666:	83 c4 20             	add    esp,0x20
c0005669:	85 c0                	test   eax,eax
c000566b:	0f 85 78 ff ff ff    	jne    c00055e9 <f_write+0x1ec>
c0005671:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005674:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005677:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000567a:	ba 00 02 00 00       	mov    edx,0x200
c000567f:	25 ff 01 00 00       	and    eax,0x1ff
c0005684:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005688:	29 c2                	sub    edx,eax
c000568a:	39 d6                	cmp    esi,edx
c000568c:	76 02                	jbe    c0005690 <f_write+0x293>
c000568e:	89 d6                	mov    esi,edx
c0005690:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c0005694:	89 f1                	mov    ecx,esi
c0005696:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000569a:	e8 f1 c3 ff ff       	call   c0001a90 <mem_cpy>
c000569f:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056a3:	e9 b1 fe ff ff       	jmp    c0005559 <f_write+0x15c>
c00056a8:	bd 07 00 00 00       	mov    ebp,0x7
c00056ad:	83 c4 2c             	add    esp,0x2c
c00056b0:	89 e8                	mov    eax,ebp
c00056b2:	5b                   	pop    ebx
c00056b3:	5e                   	pop    esi
c00056b4:	5f                   	pop    edi
c00056b5:	5d                   	pop    ebp
c00056b6:	c3                   	ret    

c00056b7 <f_sync>:
c00056b7:	56                   	push   esi
c00056b8:	53                   	push   ebx
c00056b9:	83 ec 64             	sub    esp,0x64
c00056bc:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056c0:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056c4:	89 d8                	mov    eax,ebx
c00056c6:	e8 49 ca ff ff       	call   c0002114 <validate>
c00056cb:	85 c0                	test   eax,eax
c00056cd:	0f 85 ba 01 00 00    	jne    c000588d <f_sync+0x1d6>
c00056d3:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00056d6:	f6 c2 40             	test   dl,0x40
c00056d9:	0f 84 ae 01 00 00    	je     c000588d <f_sync+0x1d6>
c00056df:	84 d2                	test   dl,dl
c00056e1:	79 33                	jns    c0005716 <f_sync+0x5f>
c00056e3:	83 ec 0c             	sub    esp,0xc
c00056e6:	8d 43 50             	lea    eax,[ebx+0x50]
c00056e9:	6a 01                	push   0x1
c00056eb:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00056ee:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00056f1:	50                   	push   eax
c00056f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00056fa:	50                   	push   eax
c00056fb:	e8 dc c2 ff ff       	call   c00019dc <disk_write>
c0005700:	83 c4 20             	add    esp,0x20
c0005703:	89 c2                	mov    edx,eax
c0005705:	b8 01 00 00 00       	mov    eax,0x1
c000570a:	85 d2                	test   edx,edx
c000570c:	0f 85 7b 01 00 00    	jne    c000588d <f_sync+0x1d6>
c0005712:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000571a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000571d:	0f 85 11 01 00 00    	jne    c0005834 <f_sync+0x17d>
c0005723:	89 d8                	mov    eax,ebx
c0005725:	e8 13 d6 ff ff       	call   c0002d3d <fill_first_frag>
c000572a:	85 c0                	test   eax,eax
c000572c:	0f 85 5b 01 00 00    	jne    c000588d <f_sync+0x1d6>
c0005732:	83 c9 ff             	or     ecx,0xffffffff
c0005735:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005738:	89 d8                	mov    eax,ebx
c000573a:	e8 c9 d5 ff ff       	call   c0002d08 <fill_last_frag>
c000573f:	85 c0                	test   eax,eax
c0005741:	0f 85 46 01 00 00    	jne    c000588d <f_sync+0x1d6>
c0005747:	83 ec 0c             	sub    esp,0xc
c000574a:	68 60 04 00 00       	push   0x460
c000574f:	e8 f0 2a 00 00       	call   c0008244 <ff_memalloc>
c0005754:	83 c4 10             	add    esp,0x10
c0005757:	89 c6                	mov    esi,eax
c0005759:	b8 11 00 00 00       	mov    eax,0x11
c000575e:	85 f6                	test   esi,esi
c0005760:	0f 84 27 01 00 00    	je     c000588d <f_sync+0x1d6>
c0005766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000576a:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005770:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005773:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005776:	89 da                	mov    edx,ebx
c0005778:	8d 44 24 14          	lea    eax,[esp+0x14]
c000577c:	e8 af df ff ff       	call   c0003730 <load_obj_xdir>
c0005781:	85 c0                	test   eax,eax
c0005783:	0f 85 95 00 00 00    	jne    c000581e <f_sync+0x167>
c0005789:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000578d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005790:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005794:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005797:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c000579a:	83 ca 01             	or     edx,0x1
c000579d:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057a0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057a3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057a6:	83 c0 34             	add    eax,0x34
c00057a9:	e8 d9 c2 ff ff       	call   c0001a87 <st_dword>
c00057ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057b2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057b5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057b8:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057bb:	83 c0 38             	add    eax,0x38
c00057be:	e8 c7 c2 ff ff       	call   c0001a8a <st_qword>
c00057c3:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ca:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057cd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057d0:	83 c0 28             	add    eax,0x28
c00057d3:	e8 b2 c2 ff ff       	call   c0001a8a <st_qword>
c00057d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057dc:	ba 00 00 21 50       	mov    edx,0x50210000
c00057e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057e4:	83 c0 0c             	add    eax,0xc
c00057e7:	e8 9b c2 ff ff       	call   c0001a87 <st_dword>
c00057ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057f0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057f3:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c00057f7:	31 d2                	xor    edx,edx
c00057f9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057fc:	83 c0 10             	add    eax,0x10
c00057ff:	e8 83 c2 ff ff       	call   c0001a87 <st_dword>
c0005804:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005808:	e8 62 e1 ff ff       	call   c000396f <store_xdir>
c000580d:	85 c0                	test   eax,eax
c000580f:	75 0d                	jne    c000581e <f_sync+0x167>
c0005811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005815:	e8 00 eb ff ff       	call   c000431a <sync_fs>
c000581a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000581e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	56                   	push   esi
c0005826:	e8 2f 2a 00 00       	call   c000825a <ff_memfree>
c000582b:	83 c4 10             	add    esp,0x10
c000582e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005832:	eb 59                	jmp    c000588d <f_sync+0x1d6>
c0005834:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005837:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c000583a:	e8 b0 c9 ff ff       	call   c00021ef <move_window>
c000583f:	85 c0                	test   eax,eax
c0005841:	75 4a                	jne    c000588d <f_sync+0x1d6>
c0005843:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005846:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c000584a:	89 f2                	mov    edx,esi
c000584c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000584f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005851:	e8 5f f3 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0005856:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005859:	8d 46 1c             	lea    eax,[esi+0x1c]
c000585c:	e8 26 c2 ff ff       	call   c0001a87 <st_dword>
c0005861:	8d 46 16             	lea    eax,[esi+0x16]
c0005864:	ba 00 00 21 50       	mov    edx,0x50210000
c0005869:	e8 19 c2 ff ff       	call   c0001a87 <st_dword>
c000586e:	8d 46 12             	lea    eax,[esi+0x12]
c0005871:	31 d2                	xor    edx,edx
c0005873:	e8 0b c2 ff ff       	call   c0001a83 <st_word>
c0005878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000587c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005884:	e8 91 ea ff ff       	call   c000431a <sync_fs>
c0005889:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000588d:	83 c4 64             	add    esp,0x64
c0005890:	5b                   	pop    ebx
c0005891:	5e                   	pop    esi
c0005892:	c3                   	ret    

c0005893 <f_close>:
c0005893:	53                   	push   ebx
c0005894:	83 ec 24             	sub    esp,0x24
c0005897:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000589b:	53                   	push   ebx
c000589c:	e8 16 fe ff ff       	call   c00056b7 <f_sync>
c00058a1:	83 c4 10             	add    esp,0x10
c00058a4:	85 c0                	test   eax,eax
c00058a6:	75 15                	jne    c00058bd <f_close+0x2a>
c00058a8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00058ac:	89 d8                	mov    eax,ebx
c00058ae:	e8 61 c8 ff ff       	call   c0002114 <validate>
c00058b3:	85 c0                	test   eax,eax
c00058b5:	75 06                	jne    c00058bd <f_close+0x2a>
c00058b7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058bd:	83 c4 18             	add    esp,0x18
c00058c0:	5b                   	pop    ebx
c00058c1:	c3                   	ret    

c00058c2 <f_lseek>:
c00058c2:	55                   	push   ebp
c00058c3:	57                   	push   edi
c00058c4:	56                   	push   esi
c00058c5:	53                   	push   ebx
c00058c6:	83 ec 3c             	sub    esp,0x3c
c00058c9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00058cd:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00058d1:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00058d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00058d8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00058dc:	89 d8                	mov    eax,ebx
c00058de:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00058e2:	e8 2d c8 ff ff       	call   c0002114 <validate>
c00058e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058eb:	85 c0                	test   eax,eax
c00058ed:	0f 85 7a 04 00 00    	jne    c0005d6d <f_lseek+0x4ab>
c00058f3:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c00058f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058fb:	85 c0                	test   eax,eax
c00058fd:	0f 85 6a 04 00 00    	jne    c0005d6d <f_lseek+0x4ab>
c0005903:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005907:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000590a:	74 0c                	je     c0005918 <f_lseek+0x56>
c000590c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000590f:	85 c0                	test   eax,eax
c0005911:	75 1f                	jne    c0005932 <f_lseek+0x70>
c0005913:	e9 b5 01 00 00       	jmp    c0005acd <f_lseek+0x20b>
c0005918:	83 c9 ff             	or     ecx,0xffffffff
c000591b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000591e:	89 d8                	mov    eax,ebx
c0005920:	e8 e3 d3 ff ff       	call   c0002d08 <fill_last_frag>
c0005925:	85 c0                	test   eax,eax
c0005927:	74 e3                	je     c000590c <f_lseek+0x4a>
c0005929:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000592d:	e9 3b 04 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c0005932:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005937:	0f 85 ac 00 00 00    	jne    c00059e9 <f_lseek+0x127>
c000593d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005941:	0f 85 a2 00 00 00    	jne    c00059e9 <f_lseek+0x127>
c0005947:	8d 78 04             	lea    edi,[eax+0x4]
c000594a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c000594d:	8b 00                	mov    eax,DWORD PTR [eax]
c000594f:	be 02 00 00 00       	mov    esi,0x2
c0005954:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005958:	85 ed                	test   ebp,ebp
c000595a:	74 73                	je     c00059cf <f_lseek+0x10d>
c000595c:	89 e9                	mov    ecx,ebp
c000595e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005965:	ff 04 24             	inc    DWORD PTR [esp]
c0005968:	89 ca                	mov    edx,ecx
c000596a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000596e:	89 d8                	mov    eax,ebx
c0005970:	e8 02 d4 ff ff       	call   c0002d77 <get_fat>
c0005975:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005979:	83 f8 01             	cmp    eax,0x1
c000597c:	77 11                	ja     c000598f <f_lseek+0xcd>
c000597e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005982:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c000598a:	e9 de 03 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c000598f:	83 f8 ff             	cmp    eax,0xffffffff
c0005992:	75 11                	jne    c00059a5 <f_lseek+0xe3>
c0005994:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005998:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c00059a0:	e9 c8 03 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c00059a5:	8d 51 01             	lea    edx,[ecx+0x1]
c00059a8:	89 c1                	mov    ecx,eax
c00059aa:	39 c2                	cmp    edx,eax
c00059ac:	74 b7                	je     c0005965 <f_lseek+0xa3>
c00059ae:	83 c6 02             	add    esi,0x2
c00059b1:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00059b5:	72 0b                	jb     c00059c2 <f_lseek+0x100>
c00059b7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059ba:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059bd:	89 0f                	mov    DWORD PTR [edi],ecx
c00059bf:	83 c7 08             	add    edi,0x8
c00059c2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00059c6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c00059c9:	76 04                	jbe    c00059cf <f_lseek+0x10d>
c00059cb:	89 c5                	mov    ebp,eax
c00059cd:	eb 8d                	jmp    c000595c <f_lseek+0x9a>
c00059cf:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00059d2:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00059d6:	89 30                	mov    DWORD PTR [eax],esi
c00059d8:	0f 87 87 03 00 00    	ja     c0005d65 <f_lseek+0x4a3>
c00059de:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c00059e4:	e9 84 03 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c00059e9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00059ec:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00059ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00059f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00059f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00059fb:	39 04 24             	cmp    DWORD PTR [esp],eax
c00059fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a02:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005a06:	73 0f                	jae    c0005a17 <f_lseek+0x155>
c0005a08:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005a0b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005a0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a13:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a17:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a1b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005a1f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005a22:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005a25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a29:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005a2d:	0f 84 3a 03 00 00    	je     c0005d6d <f_lseek+0x4ab>
c0005a33:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005a37:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005a3b:	83 c6 ff             	add    esi,0xffffffff
c0005a3e:	89 d8                	mov    eax,ebx
c0005a40:	83 d7 ff             	adc    edi,0xffffffff
c0005a43:	89 f2                	mov    edx,esi
c0005a45:	89 f9                	mov    ecx,edi
c0005a47:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005a4b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005a4e:	e8 78 c2 ff ff       	call   c0001ccb <clmt_clust>
c0005a53:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a57:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a5a:	89 c2                	mov    edx,eax
c0005a5c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005a60:	89 c8                	mov    eax,ecx
c0005a62:	e8 43 c2 ff ff       	call   c0001caa <clst2sect>
c0005a67:	89 d7                	mov    edi,edx
c0005a69:	09 c7                	or     edi,eax
c0005a6b:	0f 84 0d ff ff ff    	je     c000597e <f_lseek+0xbc>
c0005a71:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005a75:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005a7b:	0f 84 ec 02 00 00    	je     c0005d6d <f_lseek+0x4ab>
c0005a81:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a85:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005a89:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a8c:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a90:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a94:	4d                   	dec    ebp
c0005a95:	31 ff                	xor    edi,edi
c0005a97:	21 ee                	and    esi,ebp
c0005a99:	01 c6                	add    esi,eax
c0005a9b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a9e:	11 d7                	adc    edi,edx
c0005aa0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005aa3:	39 fa                	cmp    edx,edi
c0005aa5:	75 08                	jne    c0005aaf <f_lseek+0x1ed>
c0005aa7:	39 f0                	cmp    eax,esi
c0005aa9:	0f 84 be 02 00 00    	je     c0005d6d <f_lseek+0x4ab>
c0005aaf:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005ab2:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ab6:	0f 89 80 02 00 00    	jns    c0005d3c <f_lseek+0x47a>
c0005abc:	83 ec 0c             	sub    esp,0xc
c0005abf:	6a 01                	push   0x1
c0005ac1:	52                   	push   edx
c0005ac2:	50                   	push   eax
c0005ac3:	55                   	push   ebp
c0005ac4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005ac8:	e9 5a 02 00 00       	jmp    c0005d27 <f_lseek+0x465>
c0005acd:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ad1:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005ad4:	74 16                	je     c0005aec <f_lseek+0x22a>
c0005ad6:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005adb:	76 0f                	jbe    c0005aec <f_lseek+0x22a>
c0005add:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005ae4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005aec:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aef:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005af2:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005af5:	89 c7                	mov    edi,eax
c0005af7:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005afb:	73 0d                	jae    c0005b0a <f_lseek+0x248>
c0005afd:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005b01:	75 07                	jne    c0005b0a <f_lseek+0x248>
c0005b03:	89 14 24             	mov    DWORD PTR [esp],edx
c0005b06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b0a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b0d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b10:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b14:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b1b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b22:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b25:	75 09                	jne    c0005b30 <f_lseek+0x26e>
c0005b27:	31 f6                	xor    esi,esi
c0005b29:	31 ff                	xor    edi,edi
c0005b2b:	e9 af 01 00 00       	jmp    c0005cdf <f_lseek+0x41d>
c0005b30:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b34:	89 d7                	mov    edi,edx
c0005b36:	c1 e1 09             	shl    ecx,0x9
c0005b39:	09 c7                	or     edi,eax
c0005b3b:	89 cd                	mov    ebp,ecx
c0005b3d:	74 6d                	je     c0005bac <f_lseek+0x2ea>
c0005b3f:	83 c0 ff             	add    eax,0xffffffff
c0005b42:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b46:	83 d2 ff             	adc    edx,0xffffffff
c0005b49:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b4c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b50:	83 c0 ff             	add    eax,0xffffffff
c0005b53:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b57:	83 d2 ff             	adc    edx,0xffffffff
c0005b5a:	31 ff                	xor    edi,edi
c0005b5c:	57                   	push   edi
c0005b5d:	51                   	push   ecx
c0005b5e:	52                   	push   edx
c0005b5f:	50                   	push   eax
c0005b60:	e8 17 f8 01 00       	call   c002537c <__udivdi3>
c0005b65:	83 c4 10             	add    esp,0x10
c0005b68:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b6c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005b70:	57                   	push   edi
c0005b71:	55                   	push   ebp
c0005b72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b7a:	e8 fd f7 01 00       	call   c002537c <__udivdi3>
c0005b7f:	83 c4 10             	add    esp,0x10
c0005b82:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005b86:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005b8a:	19 d1                	sbb    ecx,edx
c0005b8c:	72 1e                	jb     c0005bac <f_lseek+0x2ea>
c0005b8e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b92:	89 e9                	mov    ecx,ebp
c0005b94:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b97:	f7 d9                	neg    ecx
c0005b99:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b9c:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005ba0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ba3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005ba6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005baa:	eb 28                	jmp    c0005bd4 <f_lseek+0x312>
c0005bac:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005baf:	85 c0                	test   eax,eax
c0005bb1:	75 1e                	jne    c0005bd1 <f_lseek+0x30f>
c0005bb3:	31 d2                	xor    edx,edx
c0005bb5:	89 d8                	mov    eax,ebx
c0005bb7:	e8 a9 d4 ff ff       	call   c0003065 <create_chain>
c0005bbc:	83 f8 01             	cmp    eax,0x1
c0005bbf:	0f 84 b9 fd ff ff    	je     c000597e <f_lseek+0xbc>
c0005bc5:	83 f8 ff             	cmp    eax,0xffffffff
c0005bc8:	0f 84 c6 fd ff ff    	je     c0005994 <f_lseek+0xd2>
c0005bce:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005bd1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005bd4:	85 c0                	test   eax,eax
c0005bd6:	0f 84 4b ff ff ff    	je     c0005b27 <f_lseek+0x265>
c0005bdc:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005be0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005be8:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005beb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005bef:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005bf2:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005bf5:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005bf9:	0f 83 9d 00 00 00    	jae    c0005c9c <f_lseek+0x3da>
c0005bff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005c03:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c07:	29 34 24             	sub    DWORD PTR [esp],esi
c0005c0a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005c0e:	01 f2                	add    edx,esi
c0005c10:	11 f9                	adc    ecx,edi
c0005c12:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005c16:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005c1a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005c1d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005c20:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005c23:	f6 c1 02             	test   cl,0x2
c0005c26:	74 35                	je     c0005c5d <f_lseek+0x39b>
c0005c28:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005c2c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005c2f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005c32:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005c36:	73 16                	jae    c0005c4e <f_lseek+0x38c>
c0005c38:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c3c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c40:	88 ca                	mov    dl,cl
c0005c42:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c45:	83 ca 40             	or     edx,0x40
c0005c48:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c4b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c4e:	89 c2                	mov    edx,eax
c0005c50:	89 d8                	mov    eax,ebx
c0005c52:	e8 0e d4 ff ff       	call   c0003065 <create_chain>
c0005c57:	85 c0                	test   eax,eax
c0005c59:	75 0b                	jne    c0005c66 <f_lseek+0x3a4>
c0005c5b:	eb 30                	jmp    c0005c8d <f_lseek+0x3cb>
c0005c5d:	89 c2                	mov    edx,eax
c0005c5f:	89 d8                	mov    eax,ebx
c0005c61:	e8 11 d1 ff ff       	call   c0002d77 <get_fat>
c0005c66:	83 f8 ff             	cmp    eax,0xffffffff
c0005c69:	0f 84 25 fd ff ff    	je     c0005994 <f_lseek+0xd2>
c0005c6f:	83 f8 01             	cmp    eax,0x1
c0005c72:	0f 86 06 fd ff ff    	jbe    c000597e <f_lseek+0xbc>
c0005c78:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c7c:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c7f:	0f 86 f9 fc ff ff    	jbe    c000597e <f_lseek+0xbc>
c0005c85:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c88:	e9 5b ff ff ff       	jmp    c0005be8 <f_lseek+0x326>
c0005c8d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c94:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c9c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c9f:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ca3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ca6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ca9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005cac:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005cb2:	0f 84 6f fe ff ff    	je     c0005b27 <f_lseek+0x265>
c0005cb8:	89 c2                	mov    edx,eax
c0005cba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005cbe:	e8 e7 bf ff ff       	call   c0001caa <clst2sect>
c0005cc3:	89 d7                	mov    edi,edx
c0005cc5:	09 c7                	or     edi,eax
c0005cc7:	0f 84 b1 fc ff ff    	je     c000597e <f_lseek+0xbc>
c0005ccd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cd4:	0f ac fe 09          	shrd   esi,edi,0x9
c0005cd8:	c1 ef 09             	shr    edi,0x9
c0005cdb:	01 c6                	add    esi,eax
c0005cdd:	11 d7                	adc    edi,edx
c0005cdf:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ce2:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005ce5:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005ce8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005ceb:	19 d1                	sbb    ecx,edx
c0005ced:	73 0a                	jae    c0005cf9 <f_lseek+0x437>
c0005cef:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005cf2:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005cf5:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005cf9:	a9 ff 01 00 00       	test   eax,0x1ff
c0005cfe:	74 6d                	je     c0005d6d <f_lseek+0x4ab>
c0005d00:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005d03:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005d06:	39 fa                	cmp    edx,edi
c0005d08:	75 04                	jne    c0005d0e <f_lseek+0x44c>
c0005d0a:	39 f0                	cmp    eax,esi
c0005d0c:	74 5f                	je     c0005d6d <f_lseek+0x4ab>
c0005d0e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d11:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d15:	79 25                	jns    c0005d3c <f_lseek+0x47a>
c0005d17:	83 ec 0c             	sub    esp,0xc
c0005d1a:	6a 01                	push   0x1
c0005d1c:	52                   	push   edx
c0005d1d:	50                   	push   eax
c0005d1e:	55                   	push   ebp
c0005d1f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d23:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d27:	50                   	push   eax
c0005d28:	e8 af bc ff ff       	call   c00019dc <disk_write>
c0005d2d:	83 c4 20             	add    esp,0x20
c0005d30:	85 c0                	test   eax,eax
c0005d32:	0f 85 5c fc ff ff    	jne    c0005994 <f_lseek+0xd2>
c0005d38:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d3c:	83 ec 0c             	sub    esp,0xc
c0005d3f:	6a 01                	push   0x1
c0005d41:	57                   	push   edi
c0005d42:	56                   	push   esi
c0005d43:	55                   	push   ebp
c0005d44:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d48:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d4c:	50                   	push   eax
c0005d4d:	e8 74 bc ff ff       	call   c00019c6 <disk_read>
c0005d52:	83 c4 20             	add    esp,0x20
c0005d55:	85 c0                	test   eax,eax
c0005d57:	0f 85 37 fc ff ff    	jne    c0005994 <f_lseek+0xd2>
c0005d5d:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d60:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d63:	eb 08                	jmp    c0005d6d <f_lseek+0x4ab>
c0005d65:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005d6d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005d71:	83 c4 3c             	add    esp,0x3c
c0005d74:	5b                   	pop    ebx
c0005d75:	5e                   	pop    esi
c0005d76:	5f                   	pop    edi
c0005d77:	5d                   	pop    ebp
c0005d78:	c3                   	ret    

c0005d79 <f_opendir>:
c0005d79:	56                   	push   esi
c0005d7a:	b8 09 00 00 00       	mov    eax,0x9
c0005d7f:	53                   	push   ebx
c0005d80:	83 ec 24             	sub    esp,0x24
c0005d83:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d87:	85 db                	test   ebx,ebx
c0005d89:	0f 84 e6 00 00 00    	je     c0005e75 <f_opendir+0xfc>
c0005d8f:	31 c9                	xor    ecx,ecx
c0005d91:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d95:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d99:	e8 03 c7 ff ff       	call   c00024a1 <mount_volume>
c0005d9e:	85 c0                	test   eax,eax
c0005da0:	0f 85 c9 00 00 00    	jne    c0005e6f <f_opendir+0xf6>
c0005da6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005daa:	83 ec 0c             	sub    esp,0xc
c0005dad:	89 03                	mov    DWORD PTR [ebx],eax
c0005daf:	68 60 04 00 00       	push   0x460
c0005db4:	e8 8b 24 00 00       	call   c0008244 <ff_memalloc>
c0005db9:	83 c4 10             	add    esp,0x10
c0005dbc:	89 c6                	mov    esi,eax
c0005dbe:	b8 11 00 00 00       	mov    eax,0x11
c0005dc3:	85 f6                	test   esi,esi
c0005dc5:	0f 84 aa 00 00 00    	je     c0005e75 <f_opendir+0xfc>
c0005dcb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005dcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005dd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005dd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ddb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ddf:	89 d8                	mov    eax,ebx
c0005de1:	e8 31 ee ff ff       	call   c0004c17 <follow_path>
c0005de6:	85 c0                	test   eax,eax
c0005de8:	75 61                	jne    c0005e4b <f_opendir+0xd2>
c0005dea:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005dee:	78 46                	js     c0005e36 <f_opendir+0xbd>
c0005df0:	b8 05 00 00 00       	mov    eax,0x5
c0005df5:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005df9:	74 50                	je     c0005e4b <f_opendir+0xd2>
c0005dfb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dff:	8a 01                	mov    al,BYTE PTR [ecx]
c0005e01:	3c 04                	cmp    al,0x4
c0005e03:	75 26                	jne    c0005e2b <f_opendir+0xb2>
c0005e05:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e08:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005e0b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005e0e:	30 d2                	xor    dl,dl
c0005e10:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005e14:	09 c2                	or     edx,eax
c0005e16:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005e19:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005e1c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e1f:	89 da                	mov    edx,ebx
c0005e21:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e24:	e8 b4 ed ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0005e29:	eb 0b                	jmp    c0005e36 <f_opendir+0xbd>
c0005e2b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e2e:	e8 59 ed ff ff       	call   c0004b8c <ld_clust.isra.0>
c0005e33:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e36:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e3a:	31 d2                	xor    edx,edx
c0005e3c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e40:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e44:	89 d8                	mov    eax,ebx
c0005e46:	e8 22 d1 ff ff       	call   c0002f6d <dir_sdi>
c0005e4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e4f:	83 ec 0c             	sub    esp,0xc
c0005e52:	56                   	push   esi
c0005e53:	e8 02 24 00 00       	call   c000825a <ff_memfree>
c0005e58:	83 c4 10             	add    esp,0x10
c0005e5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e5f:	83 f8 04             	cmp    eax,0x4
c0005e62:	74 06                	je     c0005e6a <f_opendir+0xf1>
c0005e64:	85 c0                	test   eax,eax
c0005e66:	74 0d                	je     c0005e75 <f_opendir+0xfc>
c0005e68:	eb 05                	jmp    c0005e6f <f_opendir+0xf6>
c0005e6a:	b8 05 00 00 00       	mov    eax,0x5
c0005e6f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e75:	83 c4 24             	add    esp,0x24
c0005e78:	5b                   	pop    ebx
c0005e79:	5e                   	pop    esi
c0005e7a:	c3                   	ret    

c0005e7b <f_closedir>:
c0005e7b:	53                   	push   ebx
c0005e7c:	83 ec 18             	sub    esp,0x18
c0005e7f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e83:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e87:	89 d8                	mov    eax,ebx
c0005e89:	e8 86 c2 ff ff       	call   c0002114 <validate>
c0005e8e:	85 c0                	test   eax,eax
c0005e90:	75 06                	jne    c0005e98 <f_closedir+0x1d>
c0005e92:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e98:	83 c4 18             	add    esp,0x18
c0005e9b:	5b                   	pop    ebx
c0005e9c:	c3                   	ret    

c0005e9d <f_readdir>:
c0005e9d:	57                   	push   edi
c0005e9e:	56                   	push   esi
c0005e9f:	53                   	push   ebx
c0005ea0:	83 ec 20             	sub    esp,0x20
c0005ea3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ea7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005eab:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 5e c2 ff ff       	call   c0002114 <validate>
c0005eb6:	85 c0                	test   eax,eax
c0005eb8:	75 77                	jne    c0005f31 <f_readdir+0x94>
c0005eba:	85 ff                	test   edi,edi
c0005ebc:	75 0b                	jne    c0005ec9 <f_readdir+0x2c>
c0005ebe:	31 d2                	xor    edx,edx
c0005ec0:	89 d8                	mov    eax,ebx
c0005ec2:	e8 a6 d0 ff ff       	call   c0002f6d <dir_sdi>
c0005ec7:	eb 68                	jmp    c0005f31 <f_readdir+0x94>
c0005ec9:	83 ec 0c             	sub    esp,0xc
c0005ecc:	68 60 04 00 00       	push   0x460
c0005ed1:	e8 6e 23 00 00       	call   c0008244 <ff_memalloc>
c0005ed6:	83 c4 10             	add    esp,0x10
c0005ed9:	89 c6                	mov    esi,eax
c0005edb:	b8 11 00 00 00       	mov    eax,0x11
c0005ee0:	85 f6                	test   esi,esi
c0005ee2:	74 4d                	je     c0005f31 <f_readdir+0x94>
c0005ee4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ee8:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005eee:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005ef1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ef4:	31 d2                	xor    edx,edx
c0005ef6:	89 d8                	mov    eax,ebx
c0005ef8:	e8 80 d8 ff ff       	call   c000377d <dir_read>
c0005efd:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005f02:	75 19                	jne    c0005f1d <f_readdir+0x80>
c0005f04:	89 fa                	mov    edx,edi
c0005f06:	89 d8                	mov    eax,ebx
c0005f08:	e8 7e ea ff ff       	call   c000498b <get_fileinfo>
c0005f0d:	31 d2                	xor    edx,edx
c0005f0f:	89 d8                	mov    eax,ebx
c0005f11:	e8 af d5 ff ff       	call   c00034c5 <dir_next>
c0005f16:	83 f8 04             	cmp    eax,0x4
c0005f19:	75 02                	jne    c0005f1d <f_readdir+0x80>
c0005f1b:	31 c0                	xor    eax,eax
c0005f1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f21:	83 ec 0c             	sub    esp,0xc
c0005f24:	56                   	push   esi
c0005f25:	e8 30 23 00 00       	call   c000825a <ff_memfree>
c0005f2a:	83 c4 10             	add    esp,0x10
c0005f2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f31:	83 c4 20             	add    esp,0x20
c0005f34:	5b                   	pop    ebx
c0005f35:	5e                   	pop    esi
c0005f36:	5f                   	pop    edi
c0005f37:	c3                   	ret    

c0005f38 <f_stat>:
c0005f38:	57                   	push   edi
c0005f39:	31 c9                	xor    ecx,ecx
c0005f3b:	56                   	push   esi
c0005f3c:	53                   	push   ebx
c0005f3d:	83 ec 50             	sub    esp,0x50
c0005f40:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f44:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f48:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f4c:	e8 50 c5 ff ff       	call   c00024a1 <mount_volume>
c0005f51:	89 c3                	mov    ebx,eax
c0005f53:	85 c0                	test   eax,eax
c0005f55:	75 67                	jne    c0005fbe <f_stat+0x86>
c0005f57:	83 ec 0c             	sub    esp,0xc
c0005f5a:	bb 11 00 00 00       	mov    ebx,0x11
c0005f5f:	68 60 04 00 00       	push   0x460
c0005f64:	e8 db 22 00 00       	call   c0008244 <ff_memalloc>
c0005f69:	83 c4 10             	add    esp,0x10
c0005f6c:	89 c6                	mov    esi,eax
c0005f6e:	85 c0                	test   eax,eax
c0005f70:	74 4c                	je     c0005fbe <f_stat+0x86>
c0005f72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f76:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f7c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f7f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f82:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f86:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f8a:	e8 88 ec ff ff       	call   c0004c17 <follow_path>
c0005f8f:	89 c3                	mov    ebx,eax
c0005f91:	85 c0                	test   eax,eax
c0005f93:	75 1d                	jne    c0005fb2 <f_stat+0x7a>
c0005f95:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f9a:	78 11                	js     c0005fad <f_stat+0x75>
c0005f9c:	85 ff                	test   edi,edi
c0005f9e:	74 12                	je     c0005fb2 <f_stat+0x7a>
c0005fa0:	89 fa                	mov    edx,edi
c0005fa2:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fa6:	e8 e0 e9 ff ff       	call   c000498b <get_fileinfo>
c0005fab:	eb 05                	jmp    c0005fb2 <f_stat+0x7a>
c0005fad:	bb 06 00 00 00       	mov    ebx,0x6
c0005fb2:	83 ec 0c             	sub    esp,0xc
c0005fb5:	56                   	push   esi
c0005fb6:	e8 9f 22 00 00       	call   c000825a <ff_memfree>
c0005fbb:	83 c4 10             	add    esp,0x10
c0005fbe:	83 c4 50             	add    esp,0x50
c0005fc1:	89 d8                	mov    eax,ebx
c0005fc3:	5b                   	pop    ebx
c0005fc4:	5e                   	pop    esi
c0005fc5:	5f                   	pop    edi
c0005fc6:	c3                   	ret    

c0005fc7 <f_getfree>:
c0005fc7:	55                   	push   ebp
c0005fc8:	31 c9                	xor    ecx,ecx
c0005fca:	57                   	push   edi
c0005fcb:	56                   	push   esi
c0005fcc:	53                   	push   ebx
c0005fcd:	83 ec 5c             	sub    esp,0x5c
c0005fd0:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005fd4:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005fd8:	e8 c4 c4 ff ff       	call   c00024a1 <mount_volume>
c0005fdd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fe1:	85 c0                	test   eax,eax
c0005fe3:	0f 85 9d 01 00 00    	jne    c0006186 <f_getfree+0x1bf>
c0005fe9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fed:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005ff1:	89 02                	mov    DWORD PTR [edx],eax
c0005ff3:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0005ff6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005ff9:	8d 71 fe             	lea    esi,[ecx-0x2]
c0005ffc:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006000:	39 f2                	cmp    edx,esi
c0006002:	77 0b                	ja     c000600f <f_getfree+0x48>
c0006004:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006008:	89 10                	mov    DWORD PTR [eax],edx
c000600a:	e9 77 01 00 00       	jmp    c0006186 <f_getfree+0x1bf>
c000600f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006011:	80 fa 01             	cmp    dl,0x1
c0006014:	75 3a                	jne    c0006050 <f_getfree+0x89>
c0006016:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000601a:	be 02 00 00 00       	mov    esi,0x2
c000601f:	31 db                	xor    ebx,ebx
c0006021:	89 f2                	mov    edx,esi
c0006023:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006027:	e8 4b cd ff ff       	call   c0002d77 <get_fat>
c000602c:	83 f8 ff             	cmp    eax,0xffffffff
c000602f:	0f 84 28 01 00 00    	je     c000615d <f_getfree+0x196>
c0006035:	83 f8 01             	cmp    eax,0x1
c0006038:	0f 84 29 01 00 00    	je     c0006167 <f_getfree+0x1a0>
c000603e:	83 d3 00             	adc    ebx,0x0
c0006041:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006045:	46                   	inc    esi
c0006046:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006049:	77 d6                	ja     c0006021 <f_getfree+0x5a>
c000604b:	e9 25 01 00 00       	jmp    c0006175 <f_getfree+0x1ae>
c0006050:	80 fa 04             	cmp    dl,0x4
c0006053:	0f 85 88 00 00 00    	jne    c00060e1 <f_getfree+0x11a>
c0006059:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000605c:	31 ed                	xor    ebp,ebp
c000605e:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006061:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006065:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006069:	31 db                	xor    ebx,ebx
c000606b:	85 ed                	test   ebp,ebp
c000606d:	75 3f                	jne    c00060ae <f_getfree+0xe7>
c000606f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006073:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006077:	83 c0 01             	add    eax,0x1
c000607a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000607e:	83 d2 00             	adc    edx,0x0
c0006081:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006085:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006089:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000608d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006091:	e8 59 c1 ff ff       	call   c00021ef <move_window>
c0006096:	85 c0                	test   eax,eax
c0006098:	0f 85 d3 00 00 00    	jne    c0006171 <f_getfree+0x1aa>
c000609e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060a2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00060a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060aa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00060ae:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060b2:	8d 4e f8             	lea    ecx,[esi-0x8]
c00060b5:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00060b9:	89 cf                	mov    edi,ecx
c00060bb:	85 f6                	test   esi,esi
c00060bd:	74 12                	je     c00060d1 <f_getfree+0x10a>
c00060bf:	88 c1                	mov    cl,al
c00060c1:	83 e1 01             	and    ecx,0x1
c00060c4:	80 f9 01             	cmp    cl,0x1
c00060c7:	83 d3 00             	adc    ebx,0x0
c00060ca:	d0 e8                	shr    al,1
c00060cc:	4e                   	dec    esi
c00060cd:	39 fe                	cmp    esi,edi
c00060cf:	75 ea                	jne    c00060bb <f_getfree+0xf4>
c00060d1:	45                   	inc    ebp
c00060d2:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00060d8:	85 f6                	test   esi,esi
c00060da:	75 8f                	jne    c000606b <f_getfree+0xa4>
c00060dc:	e9 94 00 00 00       	jmp    c0006175 <f_getfree+0x1ae>
c00060e1:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00060e4:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00060e7:	31 f6                	xor    esi,esi
c00060e9:	31 db                	xor    ebx,ebx
c00060eb:	85 f6                	test   esi,esi
c00060ed:	75 1b                	jne    c000610a <f_getfree+0x143>
c00060ef:	89 d7                	mov    edi,edx
c00060f1:	89 cd                	mov    ebp,ecx
c00060f3:	83 c7 01             	add    edi,0x1
c00060f6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060fa:	83 d5 00             	adc    ebp,0x0
c00060fd:	e8 ed c0 ff ff       	call   c00021ef <move_window>
c0006102:	85 c0                	test   eax,eax
c0006104:	75 6b                	jne    c0006171 <f_getfree+0x1aa>
c0006106:	89 fa                	mov    edx,edi
c0006108:	89 e9                	mov    ecx,ebp
c000610a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000610e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006112:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006116:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006119:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000611d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006121:	75 11                	jne    c0006134 <f_getfree+0x16d>
c0006123:	e8 e9 b8 ff ff       	call   c0001a11 <ld_word>
c0006128:	66 83 f8 01          	cmp    ax,0x1
c000612c:	83 d3 00             	adc    ebx,0x0
c000612f:	83 c6 02             	add    esi,0x2
c0006132:	eb 13                	jmp    c0006147 <f_getfree+0x180>
c0006134:	e8 e5 b8 ff ff       	call   c0001a1e <ld_dword>
c0006139:	25 ff ff ff 0f       	and    eax,0xfffffff
c000613e:	83 f8 01             	cmp    eax,0x1
c0006141:	83 d3 00             	adc    ebx,0x0
c0006144:	83 c6 04             	add    esi,0x4
c0006147:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000614d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006151:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006155:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c0006159:	75 90                	jne    c00060eb <f_getfree+0x124>
c000615b:	eb 18                	jmp    c0006175 <f_getfree+0x1ae>
c000615d:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0006165:	eb 0e                	jmp    c0006175 <f_getfree+0x1ae>
c0006167:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c000616f:	eb 04                	jmp    c0006175 <f_getfree+0x1ae>
c0006171:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006175:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006179:	89 18                	mov    DWORD PTR [eax],ebx
c000617b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000617f:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006182:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006186:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000618a:	83 c4 5c             	add    esp,0x5c
c000618d:	5b                   	pop    ebx
c000618e:	5e                   	pop    esi
c000618f:	5f                   	pop    edi
c0006190:	5d                   	pop    ebp
c0006191:	c3                   	ret    

c0006192 <f_truncate>:
c0006192:	56                   	push   esi
c0006193:	53                   	push   ebx
c0006194:	83 ec 14             	sub    esp,0x14
c0006197:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000619b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000619f:	89 d8                	mov    eax,ebx
c00061a1:	e8 6e bf ff ff       	call   c0002114 <validate>
c00061a6:	89 c6                	mov    esi,eax
c00061a8:	85 c0                	test   eax,eax
c00061aa:	0f 85 d2 00 00 00    	jne    c0006282 <f_truncate+0xf0>
c00061b0:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00061b4:	85 f6                	test   esi,esi
c00061b6:	0f 85 c6 00 00 00    	jne    c0006282 <f_truncate+0xf0>
c00061bc:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061c0:	0f 84 b7 00 00 00    	je     c000627d <f_truncate+0xeb>
c00061c6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00061c9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00061cc:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00061cf:	89 d1                	mov    ecx,edx
c00061d1:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00061d4:	0f 83 a8 00 00 00    	jae    c0006282 <f_truncate+0xf0>
c00061da:	09 c2                	or     edx,eax
c00061dc:	75 15                	jne    c00061f3 <f_truncate+0x61>
c00061de:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00061e1:	31 c9                	xor    ecx,ecx
c00061e3:	89 d8                	mov    eax,ebx
c00061e5:	e8 7a d0 ff ff       	call   c0003264 <remove_chain>
c00061ea:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00061f1:	eb 35                	jmp    c0006228 <f_truncate+0x96>
c00061f3:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00061f6:	89 d8                	mov    eax,ebx
c00061f8:	e8 7a cb ff ff       	call   c0002d77 <get_fat>
c00061fd:	89 c2                	mov    edx,eax
c00061ff:	b8 01 00 00 00       	mov    eax,0x1
c0006204:	83 fa ff             	cmp    edx,0xffffffff
c0006207:	74 1f                	je     c0006228 <f_truncate+0x96>
c0006209:	b8 02 00 00 00       	mov    eax,0x2
c000620e:	83 fa 01             	cmp    edx,0x1
c0006211:	74 15                	je     c0006228 <f_truncate+0x96>
c0006213:	31 c0                	xor    eax,eax
c0006215:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006219:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000621c:	76 0a                	jbe    c0006228 <f_truncate+0x96>
c000621e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006221:	89 d8                	mov    eax,ebx
c0006223:	e8 3c d0 ff ff       	call   c0003264 <remove_chain>
c0006228:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000622b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000622e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006231:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006234:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006237:	83 ca 40             	or     edx,0x40
c000623a:	85 c0                	test   eax,eax
c000623c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000623f:	75 35                	jne    c0006276 <f_truncate+0xe4>
c0006241:	84 d2                	test   dl,dl
c0006243:	79 3d                	jns    c0006282 <f_truncate+0xf0>
c0006245:	83 ec 0c             	sub    esp,0xc
c0006248:	8d 43 50             	lea    eax,[ebx+0x50]
c000624b:	6a 01                	push   0x1
c000624d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006250:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006253:	50                   	push   eax
c0006254:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006258:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000625c:	50                   	push   eax
c000625d:	e8 7a b7 ff ff       	call   c00019dc <disk_write>
c0006262:	83 c4 20             	add    esp,0x20
c0006265:	85 c0                	test   eax,eax
c0006267:	75 08                	jne    c0006271 <f_truncate+0xdf>
c0006269:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000626d:	31 f6                	xor    esi,esi
c000626f:	eb 11                	jmp    c0006282 <f_truncate+0xf0>
c0006271:	b8 01 00 00 00       	mov    eax,0x1
c0006276:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c0006279:	89 c6                	mov    esi,eax
c000627b:	eb 05                	jmp    c0006282 <f_truncate+0xf0>
c000627d:	be 07 00 00 00       	mov    esi,0x7
c0006282:	89 f0                	mov    eax,esi
c0006284:	83 c4 14             	add    esp,0x14
c0006287:	5b                   	pop    ebx
c0006288:	5e                   	pop    esi
c0006289:	c3                   	ret    

c000628a <f_unlink>:
c000628a:	56                   	push   esi
c000628b:	b9 02 00 00 00       	mov    ecx,0x2
c0006290:	53                   	push   ebx
c0006291:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006297:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000629b:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00062a2:	e8 fa c1 ff ff       	call   c00024a1 <mount_volume>
c00062a7:	85 c0                	test   eax,eax
c00062a9:	0f 85 55 01 00 00    	jne    c0006404 <f_unlink+0x17a>
c00062af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062b3:	83 ec 0c             	sub    esp,0xc
c00062b6:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062ba:	68 60 04 00 00       	push   0x460
c00062bf:	e8 80 1f 00 00       	call   c0008244 <ff_memalloc>
c00062c4:	83 c4 10             	add    esp,0x10
c00062c7:	89 c3                	mov    ebx,eax
c00062c9:	b8 11 00 00 00       	mov    eax,0x11
c00062ce:	85 db                	test   ebx,ebx
c00062d0:	0f 84 2e 01 00 00    	je     c0006404 <f_unlink+0x17a>
c00062d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062da:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00062e0:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00062e3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00062e6:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c00062ed:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062f1:	e8 21 e9 ff ff       	call   c0004c17 <follow_path>
c00062f6:	85 c0                	test   eax,eax
c00062f8:	0f 85 f2 00 00 00    	jne    c00063f0 <f_unlink+0x166>
c00062fe:	b8 06 00 00 00       	mov    eax,0x6
c0006303:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000630b:	0f 88 df 00 00 00    	js     c00063f0 <f_unlink+0x166>
c0006311:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006316:	74 0a                	je     c0006322 <f_unlink+0x98>
c0006318:	b8 07 00 00 00       	mov    eax,0x7
c000631d:	e9 ce 00 00 00       	jmp    c00063f0 <f_unlink+0x166>
c0006322:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006326:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000632a:	8a 02                	mov    al,BYTE PTR [edx]
c000632c:	3c 04                	cmp    al,0x4
c000632e:	75 12                	jne    c0006342 <f_unlink+0xb8>
c0006330:	8d 42 10             	lea    eax,[edx+0x10]
c0006333:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006337:	e8 a1 e8 ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c000633c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006340:	eb 0e                	jmp    c0006350 <f_unlink+0xc6>
c0006342:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006349:	e8 3e e8 ff ff       	call   c0004b8c <ld_clust.isra.0>
c000634e:	89 c6                	mov    esi,eax
c0006350:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006355:	75 12                	jne    c0006369 <f_unlink+0xdf>
c0006357:	8d 44 24 48          	lea    eax,[esp+0x48]
c000635b:	e8 94 d6 ff ff       	call   c00039f4 <dir_remove>
c0006360:	85 c0                	test   eax,eax
c0006362:	74 6c                	je     c00063d0 <f_unlink+0x146>
c0006364:	e9 87 00 00 00       	jmp    c00063f0 <f_unlink+0x166>
c0006369:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000636d:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c0006374:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c000637b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000637e:	75 21                	jne    c00063a1 <f_unlink+0x117>
c0006380:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006384:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006388:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c000638f:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006396:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c000639a:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00063a1:	31 d2                	xor    edx,edx
c00063a3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063aa:	e8 be cb ff ff       	call   c0002f6d <dir_sdi>
c00063af:	85 c0                	test   eax,eax
c00063b1:	75 3d                	jne    c00063f0 <f_unlink+0x166>
c00063b3:	31 d2                	xor    edx,edx
c00063b5:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063bc:	e8 bc d3 ff ff       	call   c000377d <dir_read>
c00063c1:	85 c0                	test   eax,eax
c00063c3:	0f 84 4f ff ff ff    	je     c0006318 <f_unlink+0x8e>
c00063c9:	83 f8 04             	cmp    eax,0x4
c00063cc:	75 22                	jne    c00063f0 <f_unlink+0x166>
c00063ce:	eb 87                	jmp    c0006357 <f_unlink+0xcd>
c00063d0:	85 f6                	test   esi,esi
c00063d2:	75 0b                	jne    c00063df <f_unlink+0x155>
c00063d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063d8:	e8 3d df ff ff       	call   c000431a <sync_fs>
c00063dd:	eb 11                	jmp    c00063f0 <f_unlink+0x166>
c00063df:	31 c9                	xor    ecx,ecx
c00063e1:	89 f2                	mov    edx,esi
c00063e3:	8d 44 24 20          	lea    eax,[esp+0x20]
c00063e7:	e8 78 ce ff ff       	call   c0003264 <remove_chain>
c00063ec:	85 c0                	test   eax,eax
c00063ee:	74 e4                	je     c00063d4 <f_unlink+0x14a>
c00063f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063f4:	83 ec 0c             	sub    esp,0xc
c00063f7:	53                   	push   ebx
c00063f8:	e8 5d 1e 00 00       	call   c000825a <ff_memfree>
c00063fd:	83 c4 10             	add    esp,0x10
c0006400:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006404:	81 c4 e4 00 00 00    	add    esp,0xe4
c000640a:	5b                   	pop    ebx
c000640b:	5e                   	pop    esi
c000640c:	c3                   	ret    

c000640d <f_mkdir>:
c000640d:	57                   	push   edi
c000640e:	b9 02 00 00 00       	mov    ecx,0x2
c0006413:	56                   	push   esi
c0006414:	53                   	push   ebx
c0006415:	83 c4 80             	add    esp,0xffffff80
c0006418:	8d 54 24 08          	lea    edx,[esp+0x8]
c000641c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006423:	e8 79 c0 ff ff       	call   c00024a1 <mount_volume>
c0006428:	89 c3                	mov    ebx,eax
c000642a:	85 c0                	test   eax,eax
c000642c:	0f 85 fe 01 00 00    	jne    c0006630 <f_mkdir+0x223>
c0006432:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006436:	bb 11 00 00 00       	mov    ebx,0x11
c000643b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000643f:	83 ec 0c             	sub    esp,0xc
c0006442:	68 60 04 00 00       	push   0x460
c0006447:	e8 f8 1d 00 00       	call   c0008244 <ff_memalloc>
c000644c:	83 c4 10             	add    esp,0x10
c000644f:	89 c7                	mov    edi,eax
c0006451:	85 c0                	test   eax,eax
c0006453:	0f 84 d7 01 00 00    	je     c0006630 <f_mkdir+0x223>
c0006459:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000645d:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006463:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0006466:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006469:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006470:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006474:	e8 9e e7 ff ff       	call   c0004c17 <follow_path>
c0006479:	89 c3                	mov    ebx,eax
c000647b:	85 c0                	test   eax,eax
c000647d:	74 3e                	je     c00064bd <f_mkdir+0xb0>
c000647f:	83 f8 04             	cmp    eax,0x4
c0006482:	75 3e                	jne    c00064c2 <f_mkdir+0xb5>
c0006484:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006488:	31 d2                	xor    edx,edx
c000648a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000648e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006492:	e8 ce cb ff ff       	call   c0003065 <create_chain>
c0006497:	89 c6                	mov    esi,eax
c0006499:	85 c0                	test   eax,eax
c000649b:	74 0c                	je     c00064a9 <f_mkdir+0x9c>
c000649d:	bb 02 00 00 00       	mov    ebx,0x2
c00064a2:	83 f8 01             	cmp    eax,0x1
c00064a5:	74 07                	je     c00064ae <f_mkdir+0xa1>
c00064a7:	eb 2a                	jmp    c00064d3 <f_mkdir+0xc6>
c00064a9:	bb 07 00 00 00       	mov    ebx,0x7
c00064ae:	31 c9                	xor    ecx,ecx
c00064b0:	89 f2                	mov    edx,esi
c00064b2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064b6:	e8 a9 cd ff ff       	call   c0003264 <remove_chain>
c00064bb:	eb 05                	jmp    c00064c2 <f_mkdir+0xb5>
c00064bd:	bb 08 00 00 00       	mov    ebx,0x8
c00064c2:	83 ec 0c             	sub    esp,0xc
c00064c5:	57                   	push   edi
c00064c6:	e8 8f 1d 00 00       	call   c000825a <ff_memfree>
c00064cb:	83 c4 10             	add    esp,0x10
c00064ce:	e9 5d 01 00 00       	jmp    c0006630 <f_mkdir+0x223>
c00064d3:	bb 01 00 00 00       	mov    ebx,0x1
c00064d8:	83 f8 ff             	cmp    eax,0xffffffff
c00064db:	74 d1                	je     c00064ae <f_mkdir+0xa1>
c00064dd:	89 f2                	mov    edx,esi
c00064df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064e3:	e8 c4 ce ff ff       	call   c00033ac <dir_clear>
c00064e8:	89 c3                	mov    ebx,eax
c00064ea:	85 c0                	test   eax,eax
c00064ec:	75 c0                	jne    c00064ae <f_mkdir+0xa1>
c00064ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064f2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064f5:	74 69                	je     c0006560 <f_mkdir+0x153>
c00064f7:	b9 0b 00 00 00       	mov    ecx,0xb
c00064fc:	83 c0 54             	add    eax,0x54
c00064ff:	ba 20 00 00 00       	mov    edx,0x20
c0006504:	e8 9c b5 ff ff       	call   c0001aa5 <mem_set>
c0006509:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000650d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006512:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006516:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000651a:	83 c0 6a             	add    eax,0x6a
c000651d:	e8 65 b5 ff ff       	call   c0001a87 <st_dword>
c0006522:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006526:	89 f1                	mov    ecx,esi
c0006528:	8d 50 54             	lea    edx,[eax+0x54]
c000652b:	e8 85 e6 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0006530:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006534:	b9 20 00 00 00       	mov    ecx,0x20
c0006539:	8d 50 54             	lea    edx,[eax+0x54]
c000653c:	83 c0 74             	add    eax,0x74
c000653f:	e8 4c b5 ff ff       	call   c0001a90 <mem_cpy>
c0006544:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006548:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000654c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006550:	8d 50 74             	lea    edx,[eax+0x74]
c0006553:	e8 5d e6 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0006558:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000655c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006560:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006564:	e8 2f db ff ff       	call   c0004098 <dir_register>
c0006569:	89 c3                	mov    ebx,eax
c000656b:	85 c0                	test   eax,eax
c000656d:	0f 85 3b ff ff ff    	jne    c00064ae <f_mkdir+0xa1>
c0006573:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006577:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000657a:	75 74                	jne    c00065f0 <f_mkdir+0x1e3>
c000657c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000657f:	ba 00 00 21 50       	mov    edx,0x50210000
c0006584:	83 c0 0c             	add    eax,0xc
c0006587:	e8 fb b4 ff ff       	call   c0001a87 <st_dword>
c000658c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006590:	89 f2                	mov    edx,esi
c0006592:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006595:	83 c0 34             	add    eax,0x34
c0006598:	e8 ea b4 ff ff       	call   c0001a87 <st_dword>
c000659d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065a5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065a8:	c1 e2 09             	shl    edx,0x9
c00065ab:	83 c0 38             	add    eax,0x38
c00065ae:	e8 d4 b4 ff ff       	call   c0001a87 <st_dword>
c00065b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065be:	c1 e2 09             	shl    edx,0x9
c00065c1:	83 c0 28             	add    eax,0x28
c00065c4:	e8 be b4 ff ff       	call   c0001a87 <st_dword>
c00065c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00065d0:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00065d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065d7:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00065db:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065df:	e8 8b d3 ff ff       	call   c000396f <store_xdir>
c00065e4:	89 c3                	mov    ebx,eax
c00065e6:	85 c0                	test   eax,eax
c00065e8:	0f 85 d4 fe ff ff    	jne    c00064c2 <f_mkdir+0xb5>
c00065ee:	eb 30                	jmp    c0006620 <f_mkdir+0x213>
c00065f0:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00065f4:	ba 00 00 21 50       	mov    edx,0x50210000
c00065f9:	83 c0 16             	add    eax,0x16
c00065fc:	e8 86 b4 ff ff       	call   c0001a87 <st_dword>
c0006601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006605:	89 f1                	mov    ecx,esi
c0006607:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000660b:	e8 a5 e5 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0006610:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006614:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006618:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000661c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006620:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006624:	e8 f1 dc ff ff       	call   c000431a <sync_fs>
c0006629:	89 c3                	mov    ebx,eax
c000662b:	e9 92 fe ff ff       	jmp    c00064c2 <f_mkdir+0xb5>
c0006630:	83 ec 80             	sub    esp,0xffffff80
c0006633:	89 d8                	mov    eax,ebx
c0006635:	5b                   	pop    ebx
c0006636:	5e                   	pop    esi
c0006637:	5f                   	pop    edi
c0006638:	c3                   	ret    

c0006639 <f_rename>:
c0006639:	55                   	push   ebp
c000663a:	57                   	push   edi
c000663b:	56                   	push   esi
c000663c:	53                   	push   ebx
c000663d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006643:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000664a:	e8 a4 b9 ff ff       	call   c0001ff3 <get_ldnumber>
c000664f:	b9 02 00 00 00       	mov    ecx,0x2
c0006654:	8d 54 24 14          	lea    edx,[esp+0x14]
c0006658:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c000665f:	e8 3d be ff ff       	call   c00024a1 <mount_volume>
c0006664:	85 c0                	test   eax,eax
c0006666:	0f 85 b5 02 00 00    	jne    c0006921 <f_rename+0x2e8>
c000666c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006670:	83 ec 0c             	sub    esp,0xc
c0006673:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0006677:	68 60 04 00 00       	push   0x460
c000667c:	e8 c3 1b 00 00       	call   c0008244 <ff_memalloc>
c0006681:	83 c4 10             	add    esp,0x10
c0006684:	89 c3                	mov    ebx,eax
c0006686:	b8 11 00 00 00       	mov    eax,0x11
c000668b:	85 db                	test   ebx,ebx
c000668d:	0f 84 8e 02 00 00    	je     c0006921 <f_rename+0x2e8>
c0006693:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006697:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000669d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00066a0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066a3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00066aa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00066ae:	e8 64 e5 ff ff       	call   c0004c17 <follow_path>
c00066b3:	85 c0                	test   eax,eax
c00066b5:	0f 85 52 02 00 00    	jne    c000690d <f_rename+0x2d4>
c00066bb:	b8 06 00 00 00       	mov    eax,0x6
c00066c0:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00066c8:	0f 85 3f 02 00 00    	jne    c000690d <f_rename+0x2d4>
c00066ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066d2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066d5:	0f 85 05 01 00 00    	jne    c00067e0 <f_rename+0x1a7>
c00066db:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00066de:	b9 40 00 00 00       	mov    ecx,0x40
c00066e3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00066e7:	e8 a4 b3 ff ff       	call   c0001a90 <mem_cpy>
c00066ec:	b9 4c 00 00 00       	mov    ecx,0x4c
c00066f1:	8d 54 24 58          	lea    edx,[esp+0x58]
c00066f5:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066fc:	e8 8f b3 ff ff       	call   c0001a90 <mem_cpy>
c0006701:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006708:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000670f:	e8 03 e5 ff ff       	call   c0004c17 <follow_path>
c0006714:	85 c0                	test   eax,eax
c0006716:	75 29                	jne    c0006741 <f_rename+0x108>
c0006718:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000671c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006723:	74 0a                	je     c000672f <f_rename+0xf6>
c0006725:	b8 08 00 00 00       	mov    eax,0x8
c000672a:	e9 de 01 00 00       	jmp    c000690d <f_rename+0x2d4>
c000672f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006736:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000673d:	75 e6                	jne    c0006725 <f_rename+0xec>
c000673f:	eb 09                	jmp    c000674a <f_rename+0x111>
c0006741:	83 f8 04             	cmp    eax,0x4
c0006744:	0f 85 c3 01 00 00    	jne    c000690d <f_rename+0x2d4>
c000674a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006751:	e8 42 d9 ff ff       	call   c0004098 <dir_register>
c0006756:	85 c0                	test   eax,eax
c0006758:	0f 85 af 01 00 00    	jne    c000690d <f_rename+0x2d4>
c000675e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006762:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0006765:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0006768:	89 c5                	mov    ebp,eax
c000676a:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c000676d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006771:	8d 46 24             	lea    eax,[esi+0x24]
c0006774:	e8 98 b2 ff ff       	call   c0001a11 <ld_word>
c0006779:	b9 40 00 00 00       	mov    ecx,0x40
c000677e:	89 c7                	mov    edi,eax
c0006780:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006784:	89 f0                	mov    eax,esi
c0006786:	e8 05 b3 ff ff       	call   c0001a90 <mem_cpy>
c000678b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000678f:	89 e9                	mov    ecx,ebp
c0006791:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006794:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006797:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c000679b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000679f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067a2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00067a5:	0f b7 d7             	movzx  edx,di
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 24             	add    eax,0x24
c00067ae:	e8 d0 b2 ff ff       	call   c0001a83 <st_word>
c00067b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067b7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067ba:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067bd:	a8 10                	test   al,0x10
c00067bf:	75 06                	jne    c00067c7 <f_rename+0x18e>
c00067c1:	83 c8 20             	or     eax,0x20
c00067c4:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00067c7:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067ce:	e8 9c d1 ff ff       	call   c000396f <store_xdir>
c00067d3:	85 c0                	test   eax,eax
c00067d5:	0f 84 1c 01 00 00    	je     c00068f7 <f_rename+0x2be>
c00067db:	e9 2d 01 00 00       	jmp    c000690d <f_rename+0x2d4>
c00067e0:	b9 20 00 00 00       	mov    ecx,0x20
c00067e5:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00067ec:	8d 44 24 18          	lea    eax,[esp+0x18]
c00067f0:	e8 9b b2 ff ff       	call   c0001a90 <mem_cpy>
c00067f5:	b9 4c 00 00 00       	mov    ecx,0x4c
c00067fa:	8d 54 24 58          	lea    edx,[esp+0x58]
c00067fe:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006805:	e8 86 b2 ff ff       	call   c0001a90 <mem_cpy>
c000680a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006811:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006818:	e8 fa e3 ff ff       	call   c0004c17 <follow_path>
c000681d:	85 c0                	test   eax,eax
c000681f:	75 27                	jne    c0006848 <f_rename+0x20f>
c0006821:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006825:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000682c:	0f 85 f3 fe ff ff    	jne    c0006725 <f_rename+0xec>
c0006832:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006839:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006840:	0f 85 df fe ff ff    	jne    c0006725 <f_rename+0xec>
c0006846:	eb 09                	jmp    c0006851 <f_rename+0x218>
c0006848:	83 f8 04             	cmp    eax,0x4
c000684b:	0f 85 bc 00 00 00    	jne    c000690d <f_rename+0x2d4>
c0006851:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006858:	e8 3b d8 ff ff       	call   c0004098 <dir_register>
c000685d:	85 c0                	test   eax,eax
c000685f:	0f 85 a8 00 00 00    	jne    c000690d <f_rename+0x2d4>
c0006865:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c000686c:	b9 13 00 00 00       	mov    ecx,0x13
c0006871:	8d 46 0d             	lea    eax,[esi+0xd]
c0006874:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006878:	e8 13 b2 ff ff       	call   c0001a90 <mem_cpy>
c000687d:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006881:	a8 10                	test   al,0x10
c0006883:	75 03                	jne    c0006888 <f_rename+0x24f>
c0006885:	83 c8 20             	or     eax,0x20
c0006888:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c000688b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000688f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006893:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006897:	74 5e                	je     c00068f7 <f_rename+0x2be>
c0006899:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00068a0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00068a4:	74 51                	je     c00068f7 <f_rename+0x2be>
c00068a6:	89 f2                	mov    edx,esi
c00068a8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00068ac:	8a 07                	mov    al,BYTE PTR [edi]
c00068ae:	e8 d9 e2 ff ff       	call   c0004b8c <ld_clust.isra.0>
c00068b3:	89 c2                	mov    edx,eax
c00068b5:	89 f8                	mov    eax,edi
c00068b7:	e8 ee b3 ff ff       	call   c0001caa <clst2sect>
c00068bc:	89 c6                	mov    esi,eax
c00068be:	89 d1                	mov    ecx,edx
c00068c0:	b8 02 00 00 00       	mov    eax,0x2
c00068c5:	09 f2                	or     edx,esi
c00068c7:	74 44                	je     c000690d <f_rename+0x2d4>
c00068c9:	89 f2                	mov    edx,esi
c00068cb:	89 f8                	mov    eax,edi
c00068cd:	e8 1d b9 ff ff       	call   c00021ef <move_window>
c00068d2:	85 c0                	test   eax,eax
c00068d4:	75 37                	jne    c000690d <f_rename+0x2d4>
c00068d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068da:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c00068de:	75 17                	jne    c00068f7 <f_rename+0x2be>
c00068e0:	8d 50 74             	lea    edx,[eax+0x74]
c00068e3:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c00068ea:	e8 c6 e2 ff ff       	call   c0004bb5 <st_clust.isra.1>
c00068ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068f3:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068f7:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fb:	e8 f4 d0 ff ff       	call   c00039f4 <dir_remove>
c0006900:	85 c0                	test   eax,eax
c0006902:	75 09                	jne    c000690d <f_rename+0x2d4>
c0006904:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006908:	e8 0d da ff ff       	call   c000431a <sync_fs>
c000690d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006911:	83 ec 0c             	sub    esp,0xc
c0006914:	53                   	push   ebx
c0006915:	e8 40 19 00 00       	call   c000825a <ff_memfree>
c000691a:	83 c4 10             	add    esp,0x10
c000691d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006921:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006927:	5b                   	pop    ebx
c0006928:	5e                   	pop    esi
c0006929:	5f                   	pop    edi
c000692a:	5d                   	pop    ebp
c000692b:	c3                   	ret    

c000692c <f_chmod>:
c000692c:	57                   	push   edi
c000692d:	b9 02 00 00 00       	mov    ecx,0x2
c0006932:	56                   	push   esi
c0006933:	53                   	push   ebx
c0006934:	83 ec 60             	sub    esp,0x60
c0006937:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000693b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000693f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006943:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006947:	e8 55 bb ff ff       	call   c00024a1 <mount_volume>
c000694c:	85 c0                	test   eax,eax
c000694e:	0f 85 af 00 00 00    	jne    c0006a03 <f_chmod+0xd7>
c0006954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006958:	83 ec 0c             	sub    esp,0xc
c000695b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000695f:	68 60 04 00 00       	push   0x460
c0006964:	e8 db 18 00 00       	call   c0008244 <ff_memalloc>
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	89 c6                	mov    esi,eax
c000696e:	b8 11 00 00 00       	mov    eax,0x11
c0006973:	85 f6                	test   esi,esi
c0006975:	0f 84 88 00 00 00    	je     c0006a03 <f_chmod+0xd7>
c000697b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000697f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006985:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006988:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000698b:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c000698f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006993:	e8 7f e2 ff ff       	call   c0004c17 <follow_path>
c0006998:	85 c0                	test   eax,eax
c000699a:	75 53                	jne    c00069ef <f_chmod+0xc3>
c000699c:	b8 06 00 00 00       	mov    eax,0x6
c00069a1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069a6:	75 47                	jne    c00069ef <f_chmod+0xc3>
c00069a8:	89 f9                	mov    ecx,edi
c00069aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ae:	83 e1 27             	and    ecx,0x27
c00069b1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069b4:	75 1d                	jne    c00069d3 <f_chmod+0xa7>
c00069b6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069b9:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069bc:	21 cb                	and    ebx,ecx
c00069be:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069c1:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069c4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069c8:	e8 a2 cf ff ff       	call   c000396f <store_xdir>
c00069cd:	85 c0                	test   eax,eax
c00069cf:	75 1e                	jne    c00069ef <f_chmod+0xc3>
c00069d1:	eb 13                	jmp    c00069e6 <f_chmod+0xba>
c00069d3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00069d7:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069da:	21 cb                	and    ebx,ecx
c00069dc:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069df:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c00069e2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ea:	e8 2b d9 ff ff       	call   c000431a <sync_fs>
c00069ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00069f3:	83 ec 0c             	sub    esp,0xc
c00069f6:	56                   	push   esi
c00069f7:	e8 5e 18 00 00       	call   c000825a <ff_memfree>
c00069fc:	83 c4 10             	add    esp,0x10
c00069ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a03:	83 c4 60             	add    esp,0x60
c0006a06:	5b                   	pop    ebx
c0006a07:	5e                   	pop    esi
c0006a08:	5f                   	pop    edi
c0006a09:	c3                   	ret    

c0006a0a <f_utime>:
c0006a0a:	56                   	push   esi
c0006a0b:	b9 02 00 00 00       	mov    ecx,0x2
c0006a10:	53                   	push   ebx
c0006a11:	83 ec 64             	sub    esp,0x64
c0006a14:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a18:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a1c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a20:	e8 7c ba ff ff       	call   c00024a1 <mount_volume>
c0006a25:	85 c0                	test   eax,eax
c0006a27:	0f 85 b5 00 00 00    	jne    c0006ae2 <f_utime+0xd8>
c0006a2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a31:	83 ec 0c             	sub    esp,0xc
c0006a34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a38:	68 60 04 00 00       	push   0x460
c0006a3d:	e8 02 18 00 00       	call   c0008244 <ff_memalloc>
c0006a42:	83 c4 10             	add    esp,0x10
c0006a45:	89 c3                	mov    ebx,eax
c0006a47:	b8 11 00 00 00       	mov    eax,0x11
c0006a4c:	85 db                	test   ebx,ebx
c0006a4e:	0f 84 8e 00 00 00    	je     c0006ae2 <f_utime+0xd8>
c0006a54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a58:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a5e:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a61:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a64:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006a68:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a6c:	e8 a6 e1 ff ff       	call   c0004c17 <follow_path>
c0006a71:	85 c0                	test   eax,eax
c0006a73:	75 59                	jne    c0006ace <f_utime+0xc4>
c0006a75:	b8 06 00 00 00       	mov    eax,0x6
c0006a7a:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006a7f:	75 4d                	jne    c0006ace <f_utime+0xc4>
c0006a81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a85:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a89:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a8d:	c1 e2 10             	shl    edx,0x10
c0006a90:	09 ca                	or     edx,ecx
c0006a92:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a95:	75 1a                	jne    c0006ab1 <f_utime+0xa7>
c0006a97:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a9a:	83 c0 0c             	add    eax,0xc
c0006a9d:	e8 e5 af ff ff       	call   c0001a87 <st_dword>
c0006aa2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aa6:	e8 c4 ce ff ff       	call   c000396f <store_xdir>
c0006aab:	85 c0                	test   eax,eax
c0006aad:	75 1f                	jne    c0006ace <f_utime+0xc4>
c0006aaf:	eb 14                	jmp    c0006ac5 <f_utime+0xbb>
c0006ab1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ab5:	83 c0 16             	add    eax,0x16
c0006ab8:	e8 ca af ff ff       	call   c0001a87 <st_dword>
c0006abd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac9:	e8 4c d8 ff ff       	call   c000431a <sync_fs>
c0006ace:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ad2:	83 ec 0c             	sub    esp,0xc
c0006ad5:	53                   	push   ebx
c0006ad6:	e8 7f 17 00 00       	call   c000825a <ff_memfree>
c0006adb:	83 c4 10             	add    esp,0x10
c0006ade:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ae2:	83 c4 64             	add    esp,0x64
c0006ae5:	5b                   	pop    ebx
c0006ae6:	5e                   	pop    esi
c0006ae7:	c3                   	ret    

c0006ae8 <f_getlabel>:
c0006ae8:	55                   	push   ebp
c0006ae9:	31 c9                	xor    ecx,ecx
c0006aeb:	57                   	push   edi
c0006aec:	56                   	push   esi
c0006aed:	53                   	push   ebx
c0006aee:	83 ec 6c             	sub    esp,0x6c
c0006af1:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006af5:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006afc:	e8 a0 b9 ff ff       	call   c00024a1 <mount_volume>
c0006b01:	89 c6                	mov    esi,eax
c0006b03:	85 c0                	test   eax,eax
c0006b05:	0f 85 c1 01 00 00    	jne    c0006ccc <f_getlabel+0x1e4>
c0006b0b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b13:	0f 84 5f 01 00 00    	je     c0006c78 <f_getlabel+0x190>
c0006b19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b1d:	31 d2                	xor    edx,edx
c0006b1f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b23:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b2b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b2f:	e8 39 c4 ff ff       	call   c0002f6d <dir_sdi>
c0006b34:	85 c0                	test   eax,eax
c0006b36:	0f 85 2d 01 00 00    	jne    c0006c69 <f_getlabel+0x181>
c0006b3c:	ba 01 00 00 00       	mov    edx,0x1
c0006b41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b45:	e8 33 cc ff ff       	call   c000377d <dir_read>
c0006b4a:	85 c0                	test   eax,eax
c0006b4c:	0f 85 17 01 00 00    	jne    c0006c69 <f_getlabel+0x181>
c0006b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b56:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b59:	74 09                	je     c0006b64 <f_getlabel+0x7c>
c0006b5b:	31 db                	xor    ebx,ebx
c0006b5d:	31 c9                	xor    ecx,ecx
c0006b5f:	e9 c8 00 00 00       	jmp    c0006c2c <f_getlabel+0x144>
c0006b64:	31 ed                	xor    ebp,ebp
c0006b66:	31 db                	xor    ebx,ebx
c0006b68:	31 ff                	xor    edi,edi
c0006b6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006b6e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006b72:	39 fa                	cmp    edx,edi
c0006b74:	76 4b                	jbe    c0006bc1 <f_getlabel+0xd9>
c0006b76:	47                   	inc    edi
c0006b77:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006b7a:	01 d0                	add    eax,edx
c0006b7c:	e8 90 ae ff ff       	call   c0001a11 <ld_word>
c0006b81:	66 85 ed             	test   bp,bp
c0006b84:	75 0d                	jne    c0006b93 <f_getlabel+0xab>
c0006b86:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b8c:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b91:	76 28                	jbe    c0006bbb <f_getlabel+0xd3>
c0006b93:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b9a:	89 e9                	mov    ecx,ebp
c0006b9c:	01 da                	add    edx,ebx
c0006b9e:	c1 e1 10             	shl    ecx,0x10
c0006ba1:	0f b7 c0             	movzx  eax,ax
c0006ba4:	09 c8                	or     eax,ecx
c0006ba6:	b9 04 00 00 00       	mov    ecx,0x4
c0006bab:	e8 01 b0 ff ff       	call   c0001bb1 <put_utf>
c0006bb0:	84 c0                	test   al,al
c0006bb2:	74 0b                	je     c0006bbf <f_getlabel+0xd7>
c0006bb4:	0f b6 c0             	movzx  eax,al
c0006bb7:	01 c3                	add    ebx,eax
c0006bb9:	31 c0                	xor    eax,eax
c0006bbb:	89 c5                	mov    ebp,eax
c0006bbd:	eb ab                	jmp    c0006b6a <f_getlabel+0x82>
c0006bbf:	31 db                	xor    ebx,ebx
c0006bc1:	66 85 ed             	test   bp,bp
c0006bc4:	74 02                	je     c0006bc8 <f_getlabel+0xe0>
c0006bc6:	31 db                	xor    ebx,ebx
c0006bc8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bcf:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006bd3:	e9 a0 00 00 00       	jmp    c0006c78 <f_getlabel+0x190>
c0006bd8:	83 ff 0b             	cmp    edi,0xb
c0006bdb:	74 11                	je     c0006bee <f_getlabel+0x106>
c0006bdd:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006be2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006be6:	8d 79 02             	lea    edi,[ecx+0x2]
c0006be9:	c1 e0 08             	shl    eax,0x8
c0006bec:	09 c2                	or     edx,eax
c0006bee:	0f b7 d2             	movzx  edx,dx
c0006bf1:	50                   	push   eax
c0006bf2:	50                   	push   eax
c0006bf3:	68 b5 01 00 00       	push   0x1b5
c0006bf8:	52                   	push   edx
c0006bf9:	e8 03 17 00 00       	call   c0008301 <ff_oem2uni>
c0006bfe:	83 c4 10             	add    esp,0x10
c0006c01:	66 85 c0             	test   ax,ax
c0006c04:	74 46                	je     c0006c4c <f_getlabel+0x164>
c0006c06:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006c0d:	0f b7 c0             	movzx  eax,ax
c0006c10:	01 da                	add    edx,ebx
c0006c12:	b9 04 00 00 00       	mov    ecx,0x4
c0006c17:	e8 95 af ff ff       	call   c0001bb1 <put_utf>
c0006c1c:	84 c0                	test   al,al
c0006c1e:	74 2c                	je     c0006c4c <f_getlabel+0x164>
c0006c20:	0f b6 c0             	movzx  eax,al
c0006c23:	01 c3                	add    ebx,eax
c0006c25:	83 ff 0b             	cmp    edi,0xb
c0006c28:	74 24                	je     c0006c4e <f_getlabel+0x166>
c0006c2a:	89 f9                	mov    ecx,edi
c0006c2c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c30:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c33:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c38:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c41:	e8 9f ae ff ff       	call   c0001ae5 <dbc_1st>
c0006c46:	85 c0                	test   eax,eax
c0006c48:	74 a4                	je     c0006bee <f_getlabel+0x106>
c0006c4a:	eb 8c                	jmp    c0006bd8 <f_getlabel+0xf0>
c0006c4c:	31 db                	xor    ebx,ebx
c0006c4e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006c55:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006c58:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006c5f:	74 17                	je     c0006c78 <f_getlabel+0x190>
c0006c61:	4b                   	dec    ebx
c0006c62:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006c65:	74 ee                	je     c0006c55 <f_getlabel+0x16d>
c0006c67:	eb 0f                	jmp    c0006c78 <f_getlabel+0x190>
c0006c69:	83 f8 04             	cmp    eax,0x4
c0006c6c:	75 5c                	jne    c0006cca <f_getlabel+0x1e2>
c0006c6e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c75:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006c78:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006c80:	74 4a                	je     c0006ccc <f_getlabel+0x1e4>
c0006c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c86:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c89:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c8c:	e8 5e b5 ff ff       	call   c00021ef <move_window>
c0006c91:	89 c6                	mov    esi,eax
c0006c93:	85 c0                	test   eax,eax
c0006c95:	75 35                	jne    c0006ccc <f_getlabel+0x1e4>
c0006c97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c9b:	b8 43 00 00 00       	mov    eax,0x43
c0006ca0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ca2:	80 f9 03             	cmp    cl,0x3
c0006ca5:	74 0f                	je     c0006cb6 <f_getlabel+0x1ce>
c0006ca7:	31 c0                	xor    eax,eax
c0006ca9:	80 f9 04             	cmp    cl,0x4
c0006cac:	0f 94 c0             	sete   al
c0006caf:	48                   	dec    eax
c0006cb0:	83 e0 c3             	and    eax,0xffffffc3
c0006cb3:	83 c0 64             	add    eax,0x64
c0006cb6:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006cba:	e8 5f ad ff ff       	call   c0001a1e <ld_dword>
c0006cbf:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006cc6:	89 07                	mov    DWORD PTR [edi],eax
c0006cc8:	eb 02                	jmp    c0006ccc <f_getlabel+0x1e4>
c0006cca:	89 c6                	mov    esi,eax
c0006ccc:	83 c4 6c             	add    esp,0x6c
c0006ccf:	89 f0                	mov    eax,esi
c0006cd1:	5b                   	pop    ebx
c0006cd2:	5e                   	pop    esi
c0006cd3:	5f                   	pop    edi
c0006cd4:	5d                   	pop    ebp
c0006cd5:	c3                   	ret    

c0006cd6 <f_setlabel>:
c0006cd6:	56                   	push   esi
c0006cd7:	b9 02 00 00 00       	mov    ecx,0x2
c0006cdc:	53                   	push   ebx
c0006cdd:	83 ec 74             	sub    esp,0x74
c0006ce0:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006ce4:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006ceb:	e8 b1 b7 ff ff       	call   c00024a1 <mount_volume>
c0006cf0:	89 c6                	mov    esi,eax
c0006cf2:	85 c0                	test   eax,eax
c0006cf4:	0f 85 41 02 00 00    	jne    c0006f3b <f_setlabel+0x265>
c0006cfa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006cfe:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d01:	0f 85 8e 00 00 00    	jne    c0006d95 <f_setlabel+0xbf>
c0006d07:	b9 16 00 00 00       	mov    ecx,0x16
c0006d0c:	31 d2                	xor    edx,edx
c0006d0e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d12:	31 db                	xor    ebx,ebx
c0006d14:	e8 8c ad ff ff       	call   c0001aa5 <mem_set>
c0006d19:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d20:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d23:	0f 86 0a 01 00 00    	jbe    c0006e33 <f_setlabel+0x15d>
c0006d29:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d30:	e8 b6 ad ff ff       	call   c0001aeb <tchar2uni>
c0006d35:	89 c6                	mov    esi,eax
c0006d37:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d3c:	76 2a                	jbe    c0006d68 <f_setlabel+0x92>
c0006d3e:	83 f8 ff             	cmp    eax,0xffffffff
c0006d41:	74 05                	je     c0006d48 <f_setlabel+0x72>
c0006d43:	83 fb 09             	cmp    ebx,0x9
c0006d46:	76 0a                	jbe    c0006d52 <f_setlabel+0x7c>
c0006d48:	be 06 00 00 00       	mov    esi,0x6
c0006d4d:	e9 e9 01 00 00       	jmp    c0006f3b <f_setlabel+0x265>
c0006d52:	89 c2                	mov    edx,eax
c0006d54:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d58:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d5b:	c1 ea 10             	shr    edx,0x10
c0006d5e:	01 c8                	add    eax,ecx
c0006d60:	43                   	inc    ebx
c0006d61:	e8 1d ad ff ff       	call   c0001a83 <st_word>
c0006d66:	eb 04                	jmp    c0006d6c <f_setlabel+0x96>
c0006d68:	85 c0                	test   eax,eax
c0006d6a:	74 dc                	je     c0006d48 <f_setlabel+0x72>
c0006d6c:	89 f2                	mov    edx,esi
c0006d6e:	b8 17 7d 02 c0       	mov    eax,0xc0027d17
c0006d73:	e8 5b ad ff ff       	call   c0001ad3 <chk_chr>
c0006d78:	85 c0                	test   eax,eax
c0006d7a:	75 cc                	jne    c0006d48 <f_setlabel+0x72>
c0006d7c:	83 fb 0a             	cmp    ebx,0xa
c0006d7f:	77 c7                	ja     c0006d48 <f_setlabel+0x72>
c0006d81:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d84:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d88:	0f b7 d6             	movzx  edx,si
c0006d8b:	01 c8                	add    eax,ecx
c0006d8d:	43                   	inc    ebx
c0006d8e:	e8 f0 ac ff ff       	call   c0001a83 <st_word>
c0006d93:	eb 84                	jmp    c0006d19 <f_setlabel+0x43>
c0006d95:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d9a:	ba 20 00 00 00       	mov    edx,0x20
c0006d9f:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006da3:	31 db                	xor    ebx,ebx
c0006da5:	e8 fb ac ff ff       	call   c0001aa5 <mem_set>
c0006daa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006db1:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006db4:	76 60                	jbe    c0006e16 <f_setlabel+0x140>
c0006db6:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006dbd:	e8 29 ad ff ff       	call   c0001aeb <tchar2uni>
c0006dc2:	3d ff ff 00 00       	cmp    eax,0xffff
c0006dc7:	0f 87 7b ff ff ff    	ja     c0006d48 <f_setlabel+0x72>
c0006dcd:	83 ec 0c             	sub    esp,0xc
c0006dd0:	50                   	push   eax
c0006dd1:	e8 97 15 00 00       	call   c000836d <ff_wtoupper>
c0006dd6:	5a                   	pop    edx
c0006dd7:	59                   	pop    ecx
c0006dd8:	68 b5 01 00 00       	push   0x1b5
c0006ddd:	50                   	push   eax
c0006dde:	e8 8e 14 00 00       	call   c0008271 <ff_uni2oem>
c0006de3:	83 c4 10             	add    esp,0x10
c0006de6:	89 c6                	mov    esi,eax
c0006de8:	66 85 c0             	test   ax,ax
c0006deb:	0f 84 57 ff ff ff    	je     c0006d48 <f_setlabel+0x72>
c0006df1:	0f b7 d0             	movzx  edx,ax
c0006df4:	b8 10 7d 02 c0       	mov    eax,0xc0027d10
c0006df9:	e8 d5 ac ff ff       	call   c0001ad3 <chk_chr>
c0006dfe:	85 c0                	test   eax,eax
c0006e00:	0f 85 42 ff ff ff    	jne    c0006d48 <f_setlabel+0x72>
c0006e06:	66 81 fe ff 00       	cmp    si,0xff
c0006e0b:	0f 87 14 01 00 00    	ja     c0006f25 <f_setlabel+0x24f>
c0006e11:	e9 fa 00 00 00       	jmp    c0006f10 <f_setlabel+0x23a>
c0006e16:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e1b:	0f 84 27 ff ff ff    	je     c0006d48 <f_setlabel+0x72>
c0006e21:	85 db                	test   ebx,ebx
c0006e23:	74 0e                	je     c0006e33 <f_setlabel+0x15d>
c0006e25:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e28:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e2d:	75 04                	jne    c0006e33 <f_setlabel+0x15d>
c0006e2f:	89 c3                	mov    ebx,eax
c0006e31:	eb ee                	jmp    c0006e21 <f_setlabel+0x14b>
c0006e33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e37:	31 d2                	xor    edx,edx
c0006e39:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e3d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e45:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e49:	e8 1f c1 ff ff       	call   c0002f6d <dir_sdi>
c0006e4e:	89 c6                	mov    esi,eax
c0006e50:	85 c0                	test   eax,eax
c0006e52:	0f 85 e3 00 00 00    	jne    c0006f3b <f_setlabel+0x265>
c0006e58:	ba 01 00 00 00       	mov    edx,0x1
c0006e5d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e61:	e8 17 c9 ff ff       	call   c000377d <dir_read>
c0006e66:	85 c0                	test   eax,eax
c0006e68:	75 21                	jne    c0006e8b <f_setlabel+0x1b5>
c0006e6a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006e6e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e72:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006e75:	74 5d                	je     c0006ed4 <f_setlabel+0x1fe>
c0006e77:	85 db                	test   ebx,ebx
c0006e79:	74 0b                	je     c0006e86 <f_setlabel+0x1b0>
c0006e7b:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e80:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e84:	eb 70                	jmp    c0006ef6 <f_setlabel+0x220>
c0006e86:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e89:	eb 70                	jmp    c0006efb <f_setlabel+0x225>
c0006e8b:	83 f8 04             	cmp    eax,0x4
c0006e8e:	75 7c                	jne    c0006f0c <f_setlabel+0x236>
c0006e90:	85 db                	test   ebx,ebx
c0006e92:	0f 84 a3 00 00 00    	je     c0006f3b <f_setlabel+0x265>
c0006e98:	ba 01 00 00 00       	mov    edx,0x1
c0006e9d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006ea1:	e8 51 ca ff ff       	call   c00038f7 <dir_alloc>
c0006ea6:	89 c6                	mov    esi,eax
c0006ea8:	85 c0                	test   eax,eax
c0006eaa:	0f 85 8b 00 00 00    	jne    c0006f3b <f_setlabel+0x265>
c0006eb0:	31 d2                	xor    edx,edx
c0006eb2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006eb6:	b9 20 00 00 00       	mov    ecx,0x20
c0006ebb:	e8 e5 ab ff ff       	call   c0001aa5 <mem_set>
c0006ec0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ec4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ec7:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ecb:	75 18                	jne    c0006ee5 <f_setlabel+0x20f>
c0006ecd:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006ed0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ed4:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006ed7:	b9 16 00 00 00       	mov    ecx,0x16
c0006edc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ee0:	83 c0 02             	add    eax,0x2
c0006ee3:	eb 9b                	jmp    c0006e80 <f_setlabel+0x1aa>
c0006ee5:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006ee9:	b9 0b 00 00 00       	mov    ecx,0xb
c0006eee:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006ef2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ef6:	e8 95 ab ff ff       	call   c0001a90 <mem_cpy>
c0006efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006eff:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006f03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f07:	e8 0e d4 ff ff       	call   c000431a <sync_fs>
c0006f0c:	89 c6                	mov    esi,eax
c0006f0e:	eb 2b                	jmp    c0006f3b <f_setlabel+0x265>
c0006f10:	83 fb 0a             	cmp    ebx,0xa
c0006f13:	0f 87 2f fe ff ff    	ja     c0006d48 <f_setlabel+0x72>
c0006f19:	89 f0                	mov    eax,esi
c0006f1b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f1f:	43                   	inc    ebx
c0006f20:	e9 85 fe ff ff       	jmp    c0006daa <f_setlabel+0xd4>
c0006f25:	83 fb 09             	cmp    ebx,0x9
c0006f28:	0f 87 1a fe ff ff    	ja     c0006d48 <f_setlabel+0x72>
c0006f2e:	89 f0                	mov    eax,esi
c0006f30:	66 c1 e8 08          	shr    ax,0x8
c0006f34:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f38:	43                   	inc    ebx
c0006f39:	eb de                	jmp    c0006f19 <f_setlabel+0x243>
c0006f3b:	89 f0                	mov    eax,esi
c0006f3d:	83 c4 74             	add    esp,0x74
c0006f40:	5b                   	pop    ebx
c0006f41:	5e                   	pop    esi
c0006f42:	c3                   	ret    

c0006f43 <f_forward>:
c0006f43:	55                   	push   ebp
c0006f44:	57                   	push   edi
c0006f45:	56                   	push   esi
c0006f46:	53                   	push   ebx
c0006f47:	83 ec 2c             	sub    esp,0x2c
c0006f4a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f4e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f52:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f58:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f5c:	89 d8                	mov    eax,ebx
c0006f5e:	e8 b1 b1 ff ff       	call   c0002114 <validate>
c0006f63:	89 c5                	mov    ebp,eax
c0006f65:	85 c0                	test   eax,eax
c0006f67:	0f 85 aa 01 00 00    	jne    c0007117 <f_forward+0x1d4>
c0006f6d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006f71:	85 ed                	test   ebp,ebp
c0006f73:	0f 85 9e 01 00 00    	jne    c0007117 <f_forward+0x1d4>
c0006f79:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006f7d:	0f 84 8f 01 00 00    	je     c0007112 <f_forward+0x1cf>
c0006f83:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f86:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f89:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f8c:	bf 00 00 00 00       	mov    edi,0x0
c0006f91:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f94:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f98:	89 d1                	mov    ecx,edx
c0006f9a:	19 f9                	sbb    ecx,edi
c0006f9c:	0f 83 cf 00 00 00    	jae    c0007071 <f_forward+0x12e>
c0006fa2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006fa6:	e9 c6 00 00 00       	jmp    c0007071 <f_forward+0x12e>
c0006fab:	50                   	push   eax
c0006fac:	50                   	push   eax
c0006fad:	6a 00                	push   0x0
c0006faf:	6a 00                	push   0x0
c0006fb1:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fb5:	83 c4 10             	add    esp,0x10
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	0f 84 57 01 00 00    	je     c0007117 <f_forward+0x1d4>
c0006fc0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fc3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fc7:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006fca:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006fce:	89 d7                	mov    edi,edx
c0006fd0:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006fd3:	89 c6                	mov    esi,eax
c0006fd5:	0f ac fe 09          	shrd   esi,edi,0x9
c0006fd9:	21 ce                	and    esi,ecx
c0006fdb:	89 c1                	mov    ecx,eax
c0006fdd:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006fe3:	0f 84 98 00 00 00    	je     c0007081 <f_forward+0x13e>
c0006fe9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fed:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006ff0:	89 c8                	mov    eax,ecx
c0006ff2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006ff6:	e8 af ac ff ff       	call   c0001caa <clst2sect>
c0006ffb:	89 d7                	mov    edi,edx
c0006ffd:	09 c7                	or     edi,eax
c0006fff:	0f 84 9e 00 00 00    	je     c00070a3 <f_forward+0x160>
c0007005:	31 ff                	xor    edi,edi
c0007007:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000700a:	01 c6                	add    esi,eax
c000700c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007010:	11 d7                	adc    edi,edx
c0007012:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007015:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007018:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000701c:	39 fa                	cmp    edx,edi
c000701e:	0f 85 a2 00 00 00    	jne    c00070c6 <f_forward+0x183>
c0007024:	39 f0                	cmp    eax,esi
c0007026:	0f 85 9a 00 00 00    	jne    c00070c6 <f_forward+0x183>
c000702c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000702f:	ba 00 02 00 00       	mov    edx,0x200
c0007034:	25 ff 01 00 00       	and    eax,0x1ff
c0007039:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000703d:	29 c2                	sub    edx,eax
c000703f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007042:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007045:	39 d1                	cmp    ecx,edx
c0007047:	76 02                	jbe    c000704b <f_forward+0x108>
c0007049:	89 d1                	mov    ecx,edx
c000704b:	8d 73 50             	lea    esi,[ebx+0x50]
c000704e:	52                   	push   edx
c000704f:	01 c6                	add    esi,eax
c0007051:	52                   	push   edx
c0007052:	51                   	push   ecx
c0007053:	56                   	push   esi
c0007054:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007058:	83 c4 10             	add    esp,0x10
c000705b:	85 c0                	test   eax,eax
c000705d:	74 44                	je     c00070a3 <f_forward+0x160>
c000705f:	31 ff                	xor    edi,edi
c0007061:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0007064:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007067:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c000706b:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c000706f:	01 07                	add    DWORD PTR [edi],eax
c0007071:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0007076:	0f 85 2f ff ff ff    	jne    c0006fab <f_forward+0x68>
c000707c:	e9 96 00 00 00       	jmp    c0007117 <f_forward+0x1d4>
c0007081:	85 f6                	test   esi,esi
c0007083:	0f 85 60 ff ff ff    	jne    c0006fe9 <f_forward+0xa6>
c0007089:	89 d7                	mov    edi,edx
c000708b:	09 c7                	or     edi,eax
c000708d:	75 05                	jne    c0007094 <f_forward+0x151>
c000708f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007092:	eb 0a                	jmp    c000709e <f_forward+0x15b>
c0007094:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007097:	89 d8                	mov    eax,ebx
c0007099:	e8 d9 bc ff ff       	call   c0002d77 <get_fat>
c000709e:	83 f8 01             	cmp    eax,0x1
c00070a1:	77 0b                	ja     c00070ae <f_forward+0x16b>
c00070a3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00070a7:	bd 02 00 00 00       	mov    ebp,0x2
c00070ac:	eb 69                	jmp    c0007117 <f_forward+0x1d4>
c00070ae:	83 f8 ff             	cmp    eax,0xffffffff
c00070b1:	75 0b                	jne    c00070be <f_forward+0x17b>
c00070b3:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070b7:	bd 01 00 00 00       	mov    ebp,0x1
c00070bc:	eb 59                	jmp    c0007117 <f_forward+0x1d4>
c00070be:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070c1:	e9 23 ff ff ff       	jmp    c0006fe9 <f_forward+0xa6>
c00070c6:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00070ca:	79 20                	jns    c00070ec <f_forward+0x1a9>
c00070cc:	83 ec 0c             	sub    esp,0xc
c00070cf:	6a 01                	push   0x1
c00070d1:	52                   	push   edx
c00070d2:	50                   	push   eax
c00070d3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070d7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00070db:	50                   	push   eax
c00070dc:	e8 fb a8 ff ff       	call   c00019dc <disk_write>
c00070e1:	83 c4 20             	add    esp,0x20
c00070e4:	85 c0                	test   eax,eax
c00070e6:	75 cb                	jne    c00070b3 <f_forward+0x170>
c00070e8:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00070ec:	83 ec 0c             	sub    esp,0xc
c00070ef:	6a 01                	push   0x1
c00070f1:	57                   	push   edi
c00070f2:	56                   	push   esi
c00070f3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070f7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00070fb:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00070ff:	50                   	push   eax
c0007100:	e8 c1 a8 ff ff       	call   c00019c6 <disk_read>
c0007105:	83 c4 20             	add    esp,0x20
c0007108:	85 c0                	test   eax,eax
c000710a:	0f 84 1c ff ff ff    	je     c000702c <f_forward+0xe9>
c0007110:	eb a1                	jmp    c00070b3 <f_forward+0x170>
c0007112:	bd 07 00 00 00       	mov    ebp,0x7
c0007117:	83 c4 2c             	add    esp,0x2c
c000711a:	89 e8                	mov    eax,ebp
c000711c:	5b                   	pop    ebx
c000711d:	5e                   	pop    esi
c000711e:	5f                   	pop    edi
c000711f:	5d                   	pop    ebp
c0007120:	c3                   	ret    

c0007121 <f_mkfs>:
c0007121:	55                   	push   ebp
c0007122:	57                   	push   edi
c0007123:	56                   	push   esi
c0007124:	53                   	push   ebx
c0007125:	bb 0b 00 00 00       	mov    ebx,0xb
c000712a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007130:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007137:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000713e:	e8 b0 ae ff ff       	call   c0001ff3 <get_ldnumber>
c0007143:	85 c0                	test   eax,eax
c0007145:	0f 88 ec 10 00 00    	js     c0008237 <f_mkfs+0x1116>
c000714b:	8b 14 85 c0 c8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3740]
c0007152:	85 d2                	test   edx,edx
c0007154:	74 03                	je     c0007159 <f_mkfs+0x38>
c0007156:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0007159:	85 f6                	test   esi,esi
c000715b:	75 05                	jne    c0007162 <f_mkfs+0x41>
c000715d:	be 00 7d 02 c0       	mov    esi,0xc0027d00
c0007162:	83 ec 0c             	sub    esp,0xc
c0007165:	0f b6 c0             	movzx  eax,al
c0007168:	bb 03 00 00 00       	mov    ebx,0x3
c000716d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007171:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007175:	e8 49 a8 ff ff       	call   c00019c3 <disk_initialize>
c000717a:	83 c4 10             	add    esp,0x10
c000717d:	a8 01                	test   al,0x1
c000717f:	0f 85 b2 10 00 00    	jne    c0008237 <f_mkfs+0x1116>
c0007185:	bb 0a 00 00 00       	mov    ebx,0xa
c000718a:	a8 04                	test   al,0x4
c000718c:	0f 85 a5 10 00 00    	jne    c0008237 <f_mkfs+0x1116>
c0007192:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007195:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007199:	85 c0                	test   eax,eax
c000719b:	75 20                	jne    c00071bd <f_mkfs+0x9c>
c000719d:	51                   	push   ecx
c000719e:	8d 44 24 78          	lea    eax,[esp+0x78]
c00071a2:	50                   	push   eax
c00071a3:	6a 03                	push   0x3
c00071a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071a9:	e8 44 a8 ff ff       	call   c00019f2 <disk_ioctl>
c00071ae:	83 c4 10             	add    esp,0x10
c00071b1:	85 c0                	test   eax,eax
c00071b3:	74 08                	je     c00071bd <f_mkfs+0x9c>
c00071b5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071bd:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071c1:	8d 42 ff             	lea    eax,[edx-0x1]
c00071c4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071c9:	77 04                	ja     c00071cf <f_mkfs+0xae>
c00071cb:	85 c2                	test   edx,eax
c00071cd:	74 08                	je     c00071d7 <f_mkfs+0xb6>
c00071cf:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071d7:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00071da:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00071de:	48                   	dec    eax
c00071df:	3c 01                	cmp    al,0x1
c00071e1:	76 05                	jbe    c00071e8 <f_mkfs+0xc7>
c00071e3:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00071e8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00071eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00071ef:	48                   	dec    eax
c00071f0:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071f5:	77 07                	ja     c00071fe <f_mkfs+0xdd>
c00071f7:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c00071fc:	74 08                	je     c0007206 <f_mkfs+0xe5>
c00071fe:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007206:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007209:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000720f:	77 07                	ja     c0007218 <f_mkfs+0xf7>
c0007211:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007214:	85 d8                	test   eax,ebx
c0007216:	74 02                	je     c000721a <f_mkfs+0xf9>
c0007218:	31 db                	xor    ebx,ebx
c000721a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007225:	77 0a                	ja     c0007231 <f_mkfs+0x110>
c0007227:	bb 11 00 00 00       	mov    ebx,0x11
c000722c:	e9 06 10 00 00       	jmp    c0008237 <f_mkfs+0x1116>
c0007231:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007238:	8b 36                	mov    esi,DWORD PTR [esi]
c000723a:	85 ed                	test   ebp,ebp
c000723c:	75 1e                	jne    c000725c <f_mkfs+0x13b>
c000723e:	83 ec 0c             	sub    esp,0xc
c0007241:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007248:	25 00 fe ff ff       	and    eax,0xfffffe00
c000724d:	50                   	push   eax
c000724e:	e8 f1 0f 00 00       	call   c0008244 <ff_memalloc>
c0007253:	83 c4 10             	add    esp,0x10
c0007256:	89 c5                	mov    ebp,eax
c0007258:	85 c0                	test   eax,eax
c000725a:	74 cb                	je     c0007227 <f_mkfs+0x106>
c000725c:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c0007264:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c000726c:	52                   	push   edx
c000726d:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007271:	50                   	push   eax
c0007272:	6a 01                	push   0x1
c0007274:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007278:	e8 75 a7 ff ff       	call   c00019f2 <disk_ioctl>
c000727d:	83 c4 10             	add    esp,0x10
c0007280:	85 c0                	test   eax,eax
c0007282:	0f 85 4a 0f 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007288:	89 f1                	mov    ecx,esi
c000728a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007292:	83 e1 0f             	and    ecx,0xf
c0007295:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000729d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00072a1:	83 e6 08             	and    esi,0x8
c00072a4:	75 56                	jne    c00072fc <f_mkfs+0x1db>
c00072a6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00072aa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00072ae:	83 ff 00             	cmp    edi,0x0
c00072b1:	76 20                	jbe    c00072d3 <f_mkfs+0x1b2>
c00072b3:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072b8:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072c0:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00072c6:	83 d7 ff             	adc    edi,0xffffffff
c00072c9:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072cd:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072d1:	eb 21                	jmp    c00072f4 <f_mkfs+0x1d3>
c00072d3:	ba 3f 00 00 00       	mov    edx,0x3f
c00072d8:	39 f2                	cmp    edx,esi
c00072da:	19 f8                	sbb    eax,edi
c00072dc:	73 1e                	jae    c00072fc <f_mkfs+0x1db>
c00072de:	83 c6 c1             	add    esi,0xffffffc1
c00072e1:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00072e9:	83 d7 ff             	adc    edi,0xffffffff
c00072ec:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072f0:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072f4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072fc:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007300:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007304:	89 04 24             	mov    DWORD PTR [esp],eax
c0007307:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000730b:	31 c0                	xor    eax,eax
c000730d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007312:	89 c7                	mov    edi,eax
c0007314:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007317:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000731b:	0f 83 c5 0a 00 00    	jae    c0007de6 <f_mkfs+0xcc5>
c0007321:	89 df                	mov    edi,ebx
c0007323:	c1 ef 09             	shr    edi,0x9
c0007326:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000732a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007331:	c1 ef 09             	shr    edi,0x9
c0007334:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007339:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000733d:	74 29                	je     c0007368 <f_mkfs+0x247>
c000733f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007345:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000734a:	0f 97 c2             	seta   dl
c000734d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007350:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007354:	0f 92 c0             	setb   al
c0007357:	08 c2                	or     dl,al
c0007359:	75 5b                	jne    c00073b6 <f_mkfs+0x295>
c000735b:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000735f:	83 e0 07             	and    eax,0x7
c0007362:	3c 04                	cmp    al,0x4
c0007364:	74 50                	je     c00073b6 <f_mkfs+0x295>
c0007366:	eb 1b                	jmp    c0007383 <f_mkfs+0x262>
c0007368:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000736d:	0f 87 73 0a 00 00    	ja     c0007de6 <f_mkfs+0xcc5>
c0007373:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007379:	76 08                	jbe    c0007383 <f_mkfs+0x262>
c000737b:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007383:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007387:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000738b:	83 e0 01             	and    eax,0x1
c000738e:	80 e1 02             	and    cl,0x2
c0007391:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007395:	74 0d                	je     c00073a4 <f_mkfs+0x283>
c0007397:	84 c0                	test   al,al
c0007399:	0f 84 53 09 00 00    	je     c0007cf2 <f_mkfs+0xbd1>
c000739f:	e9 12 08 00 00       	jmp    c0007bb6 <f_mkfs+0xa95>
c00073a4:	bb 13 00 00 00       	mov    ebx,0x13
c00073a9:	84 c0                	test   al,al
c00073ab:	0f 85 05 08 00 00    	jne    c0007bb6 <f_mkfs+0xa95>
c00073b1:	e9 39 0e 00 00       	jmp    c00081ef <f_mkfs+0x10ce>
c00073b6:	31 c0                	xor    eax,eax
c00073b8:	ba ff 0f 00 00       	mov    edx,0xfff
c00073bd:	89 c7                	mov    edi,eax
c00073bf:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073c2:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00073c6:	0f 83 1a 0a 00 00    	jae    c0007de6 <f_mkfs+0xcc5>
c00073cc:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00073d2:	77 39                	ja     c000740d <f_mkfs+0x2ec>
c00073d4:	ba ff ff 07 00       	mov    edx,0x7ffff
c00073d9:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00073e1:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073e4:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073e8:	73 08                	jae    c00073f2 <f_mkfs+0x2d1>
c00073ea:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c00073f2:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c00073f7:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00073fa:	b8 00 00 00 00       	mov    eax,0x0
c00073ff:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007403:	73 08                	jae    c000740d <f_mkfs+0x2ec>
c0007405:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000740d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007411:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007415:	83 c0 20             	add    eax,0x20
c0007418:	83 d2 00             	adc    edx,0x0
c000741b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000741f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007423:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007427:	31 d2                	xor    edx,edx
c0007429:	31 ff                	xor    edi,edi
c000742b:	52                   	push   edx
c000742c:	89 fb                	mov    ebx,edi
c000742e:	50                   	push   eax
c000742f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007433:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007437:	e8 40 df 01 00       	call   c002537c <__udivdi3>
c000743c:	83 c4 10             	add    esp,0x10
c000743f:	c1 e0 02             	shl    eax,0x2
c0007442:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007446:	05 07 02 00 00       	add    eax,0x207
c000744b:	89 f1                	mov    ecx,esi
c000744d:	c1 e8 09             	shr    eax,0x9
c0007450:	83 c1 ff             	add    ecx,0xffffffff
c0007453:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007457:	83 d3 ff             	adc    ebx,0xffffffff
c000745a:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000745e:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007462:	31 d2                	xor    edx,edx
c0007464:	01 c8                	add    eax,ecx
c0007466:	11 da                	adc    edx,ebx
c0007468:	89 c1                	mov    ecx,eax
c000746a:	f7 de                	neg    esi
c000746c:	89 d0                	mov    eax,edx
c000746e:	83 d7 00             	adc    edi,0x0
c0007471:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007475:	f7 df                	neg    edi
c0007477:	21 f1                	and    ecx,esi
c0007479:	21 f8                	and    eax,edi
c000747b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000747f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007483:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007487:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000748b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000748f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007492:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007496:	0f ac d0 01          	shrd   eax,edx,0x1
c000749a:	89 df                	mov    edi,ebx
c000749c:	d1 ea                	shr    edx,1
c000749e:	39 c1                	cmp    ecx,eax
c00074a0:	19 d7                	sbb    edi,edx
c00074a2:	0f 83 3e 09 00 00    	jae    c0007de6 <f_mkfs+0xcc5>
c00074a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074ac:	31 d2                	xor    edx,edx
c00074ae:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00074b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074b6:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074ba:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074bd:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074c1:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074c5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00074c9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00074cd:	83 f8 0f             	cmp    eax,0xf
c00074d0:	0f 86 10 09 00 00    	jbe    c0007de6 <f_mkfs+0xcc5>
c00074d6:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00074de:	0f 87 02 09 00 00    	ja     c0007de6 <f_mkfs+0xcc5>
c00074e4:	31 d2                	xor    edx,edx
c00074e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00074ea:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00074f2:	83 c0 07             	add    eax,0x7
c00074f5:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00074fd:	c1 e8 03             	shr    eax,0x3
c0007500:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007507:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000750b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000750f:	c1 e0 09             	shl    eax,0x9
c0007512:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007516:	48                   	dec    eax
c0007517:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000751b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000751f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007523:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007527:	31 d2                	xor    edx,edx
c0007529:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000752d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007534:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007538:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000753d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007541:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007545:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007549:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000754d:	31 ff                	xor    edi,edi
c000754f:	31 f6                	xor    esi,esi
c0007551:	31 db                	xor    ebx,ebx
c0007553:	85 ff                	test   edi,edi
c0007555:	74 05                	je     c000755c <f_mkfs+0x43b>
c0007557:	4f                   	dec    edi
c0007558:	74 44                	je     c000759e <f_mkfs+0x47d>
c000755a:	eb 4f                	jmp    c00075ab <f_mkfs+0x48a>
c000755c:	83 ec 0c             	sub    esp,0xc
c000755f:	0f b7 c3             	movzx  eax,bx
c0007562:	50                   	push   eax
c0007563:	e8 05 0e 00 00       	call   c000836d <ff_wtoupper>
c0007568:	83 c4 10             	add    esp,0x10
c000756b:	89 c1                	mov    ecx,eax
c000756d:	8d 53 01             	lea    edx,[ebx+0x1]
c0007570:	66 39 c3             	cmp    bx,ax
c0007573:	75 3e                	jne    c00075b3 <f_mkfs+0x492>
c0007575:	be 01 00 00 00       	mov    esi,0x1
c000757a:	89 df                	mov    edi,ebx
c000757c:	66 01 f7             	add    di,si
c000757f:	75 07                	jne    c0007588 <f_mkfs+0x467>
c0007581:	83 fe 7f             	cmp    esi,0x7f
c0007584:	77 31                	ja     c00075b7 <f_mkfs+0x496>
c0007586:	eb 16                	jmp    c000759e <f_mkfs+0x47d>
c0007588:	83 ec 0c             	sub    esp,0xc
c000758b:	0f b7 ff             	movzx  edi,di
c000758e:	57                   	push   edi
c000758f:	e8 d9 0d 00 00       	call   c000836d <ff_wtoupper>
c0007594:	83 c4 10             	add    esp,0x10
c0007597:	39 c7                	cmp    edi,eax
c0007599:	75 e6                	jne    c0007581 <f_mkfs+0x460>
c000759b:	46                   	inc    esi
c000759c:	eb dc                	jmp    c000757a <f_mkfs+0x459>
c000759e:	31 c0                	xor    eax,eax
c00075a0:	89 d9                	mov    ecx,ebx
c00075a2:	4e                   	dec    esi
c00075a3:	0f 95 c0             	setne  al
c00075a6:	43                   	inc    ebx
c00075a7:	89 c7                	mov    edi,eax
c00075a9:	eb 14                	jmp    c00075bf <f_mkfs+0x49e>
c00075ab:	89 f1                	mov    ecx,esi
c00075ad:	01 f3                	add    ebx,esi
c00075af:	31 ff                	xor    edi,edi
c00075b1:	eb 0c                	jmp    c00075bf <f_mkfs+0x49e>
c00075b3:	89 d3                	mov    ebx,edx
c00075b5:	eb 08                	jmp    c00075bf <f_mkfs+0x49e>
c00075b7:	bf 02 00 00 00       	mov    edi,0x2
c00075bc:	83 c9 ff             	or     ecx,0xffffffff
c00075bf:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075c6:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00075ca:	0f b6 c1             	movzx  eax,cl
c00075cd:	e8 3a a9 ff ff       	call   c0001f0c <xsum32>
c00075d2:	66 c1 e9 08          	shr    cx,0x8
c00075d6:	89 c2                	mov    edx,eax
c00075d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075db:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00075df:	0f b7 c1             	movzx  eax,cx
c00075e2:	e8 25 a9 ff ff       	call   c0001f0c <xsum32>
c00075e7:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c00075ec:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00075f0:	66 85 db             	test   bx,bx
c00075f3:	74 1f                	je     c0007614 <f_mkfs+0x4f3>
c00075f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075f8:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c00075ff:	83 c0 02             	add    eax,0x2
c0007602:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007608:	39 c2                	cmp    edx,eax
c000760a:	74 08                	je     c0007614 <f_mkfs+0x4f3>
c000760c:	89 04 24             	mov    DWORD PTR [esp],eax
c000760f:	e9 3f ff ff ff       	jmp    c0007553 <f_mkfs+0x432>
c0007614:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007617:	83 ec 0c             	sub    esp,0xc
c000761a:	05 01 02 00 00       	add    eax,0x201
c000761f:	c1 e8 09             	shr    eax,0x9
c0007622:	50                   	push   eax
c0007623:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007627:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000762b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000762f:	55                   	push   ebp
c0007630:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007634:	e8 a3 a3 ff ff       	call   c00019dc <disk_write>
c0007639:	83 c4 20             	add    esp,0x20
c000763c:	85 c0                	test   eax,eax
c000763e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007641:	0f 85 8b 0b 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007647:	89 d0                	mov    eax,edx
c0007649:	31 d2                	xor    edx,edx
c000764b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000764f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007653:	66 85 db             	test   bx,bx
c0007656:	74 04                	je     c000765c <f_mkfs+0x53b>
c0007658:	31 c0                	xor    eax,eax
c000765a:	eb b0                	jmp    c000760c <f_mkfs+0x4eb>
c000765c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007660:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007664:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007668:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c000766e:	31 d2                	xor    edx,edx
c0007670:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c000767b:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000767f:	c1 eb 09             	shr    ebx,0x9
c0007682:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007689:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000768d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007691:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007695:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007699:	8d 70 01             	lea    esi,[eax+0x1]
c000769c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00076a4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00076ab:	31 d2                	xor    edx,edx
c00076ad:	25 00 fe ff ff       	and    eax,0xfffffe00
c00076b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00076b5:	89 c1                	mov    ecx,eax
c00076b7:	89 e8                	mov    eax,ebp
c00076b9:	e8 e7 a3 ff ff       	call   c0001aa5 <mem_set>
c00076be:	31 c0                	xor    eax,eax
c00076c0:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076c3:	76 10                	jbe    c00076d5 <f_mkfs+0x5b4>
c00076c5:	83 fe 07             	cmp    esi,0x7
c00076c8:	76 0b                	jbe    c00076d5 <f_mkfs+0x5b4>
c00076ca:	40                   	inc    eax
c00076cb:	83 ee 08             	sub    esi,0x8
c00076ce:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00076d3:	eb eb                	jmp    c00076c0 <f_mkfs+0x59f>
c00076d5:	b2 01                	mov    dl,0x1
c00076d7:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00076db:	85 f6                	test   esi,esi
c00076dd:	74 0c                	je     c00076eb <f_mkfs+0x5ca>
c00076df:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076e2:	76 07                	jbe    c00076eb <f_mkfs+0x5ca>
c00076e4:	08 11                	or     BYTE PTR [ecx],dl
c00076e6:	4e                   	dec    esi
c00076e7:	d1 e2                	shl    edx,1
c00076e9:	eb f0                	jmp    c00076db <f_mkfs+0x5ba>
c00076eb:	89 df                	mov    edi,ebx
c00076ed:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00076f1:	76 04                	jbe    c00076f7 <f_mkfs+0x5d6>
c00076f3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00076f7:	83 ec 0c             	sub    esp,0xc
c00076fa:	57                   	push   edi
c00076fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007703:	55                   	push   ebp
c0007704:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007708:	e8 cf a2 ff ff       	call   c00019dc <disk_write>
c000770d:	83 c4 20             	add    esp,0x20
c0007710:	85 c0                	test   eax,eax
c0007712:	0f 85 ba 0a 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007718:	31 d2                	xor    edx,edx
c000771a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000771e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007722:	29 fb                	sub    ebx,edi
c0007724:	0f 85 7a ff ff ff    	jne    c00076a4 <f_mkfs+0x583>
c000772a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000772e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007736:	31 f6                	xor    esi,esi
c0007738:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000773c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000773f:	31 d2                	xor    edx,edx
c0007741:	89 e8                	mov    eax,ebp
c0007743:	e8 5d a3 ff ff       	call   c0001aa5 <mem_set>
c0007748:	31 c9                	xor    ecx,ecx
c000774a:	85 db                	test   ebx,ebx
c000774c:	75 40                	jne    c000778e <f_mkfs+0x66d>
c000774e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007753:	89 e8                	mov    eax,ebp
c0007755:	bb 02 00 00 00       	mov    ebx,0x2
c000775a:	e8 28 a3 ff ff       	call   c0001a87 <st_dword>
c000775f:	8d 45 04             	lea    eax,[ebp+0x4]
c0007762:	83 ca ff             	or     edx,0xffffffff
c0007765:	e8 1d a3 ff ff       	call   c0001a87 <st_dword>
c000776a:	b9 08 00 00 00       	mov    ecx,0x8
c000776f:	eb 1d                	jmp    c000778e <f_mkfs+0x66d>
c0007771:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007774:	76 3b                	jbe    c00077b1 <f_mkfs+0x690>
c0007776:	43                   	inc    ebx
c0007777:	83 fe 01             	cmp    esi,0x1
c000777a:	89 da                	mov    edx,ebx
c000777c:	77 03                	ja     c0007781 <f_mkfs+0x660>
c000777e:	83 ca ff             	or     edx,0xffffffff
c0007781:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007785:	4e                   	dec    esi
c0007786:	e8 fc a2 ff ff       	call   c0001a87 <st_dword>
c000778b:	83 c1 04             	add    ecx,0x4
c000778e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007792:	85 f6                	test   esi,esi
c0007794:	75 db                	jne    c0007771 <f_mkfs+0x650>
c0007796:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c000779b:	77 14                	ja     c00077b1 <f_mkfs+0x690>
c000779d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00077a1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00077a8:	85 f6                	test   esi,esi
c00077aa:	74 05                	je     c00077b1 <f_mkfs+0x690>
c00077ac:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077af:	77 dd                	ja     c000778e <f_mkfs+0x66d>
c00077b1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00077b5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077b9:	39 cf                	cmp    edi,ecx
c00077bb:	76 02                	jbe    c00077bf <f_mkfs+0x69e>
c00077bd:	89 cf                	mov    edi,ecx
c00077bf:	83 ec 0c             	sub    esp,0xc
c00077c2:	57                   	push   edi
c00077c3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077c7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077cb:	55                   	push   ebp
c00077cc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077d0:	e8 07 a2 ff ff       	call   c00019dc <disk_write>
c00077d5:	83 c4 20             	add    esp,0x20
c00077d8:	85 c0                	test   eax,eax
c00077da:	0f 85 f2 09 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c00077e0:	31 d2                	xor    edx,edx
c00077e2:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00077e6:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c00077ea:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c00077ee:	0f 85 48 ff ff ff    	jne    c000773c <f_mkfs+0x61b>
c00077f4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00077f7:	31 d2                	xor    edx,edx
c00077f9:	89 e8                	mov    eax,ebp
c00077fb:	31 ff                	xor    edi,edi
c00077fd:	e8 a3 a2 ff ff       	call   c0001aa5 <mem_set>
c0007802:	8d 45 34             	lea    eax,[ebp+0x34]
c0007805:	ba 02 00 00 00       	mov    edx,0x2
c000780a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c000780e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007812:	e8 70 a2 ff ff       	call   c0001a87 <st_dword>
c0007817:	8d 45 38             	lea    eax,[ebp+0x38]
c000781a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000781e:	e8 64 a2 ff ff       	call   c0001a87 <st_dword>
c0007823:	8d 45 44             	lea    eax,[ebp+0x44]
c0007826:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000782a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c000782e:	e8 54 a2 ff ff       	call   c0001a87 <st_dword>
c0007833:	8d 45 54             	lea    eax,[ebp+0x54]
c0007836:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000783a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000783e:	83 c2 02             	add    edx,0x2
c0007841:	e8 41 a2 ff ff       	call   c0001a87 <st_dword>
c0007846:	8d 45 58             	lea    eax,[ebp+0x58]
c0007849:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c000784d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007851:	e8 31 a2 ff ff       	call   c0001a87 <st_dword>
c0007856:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000785a:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000785f:	89 c6                	mov    esi,eax
c0007861:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007865:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007869:	89 04 24             	mov    DWORD PTR [esp],eax
c000786c:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007870:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007873:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007877:	39 cb                	cmp    ebx,ecx
c0007879:	76 02                	jbe    c000787d <f_mkfs+0x75c>
c000787b:	89 cb                	mov    ebx,ecx
c000787d:	83 ec 0c             	sub    esp,0xc
c0007880:	53                   	push   ebx
c0007881:	57                   	push   edi
c0007882:	56                   	push   esi
c0007883:	55                   	push   ebp
c0007884:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007888:	e8 4f a1 ff ff       	call   c00019dc <disk_write>
c000788d:	83 c4 20             	add    esp,0x20
c0007890:	85 c0                	test   eax,eax
c0007892:	0f 85 3a 09 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007898:	31 d2                	xor    edx,edx
c000789a:	b9 00 02 00 00       	mov    ecx,0x200
c000789f:	89 e8                	mov    eax,ebp
c00078a1:	e8 ff a1 ff ff       	call   c0001aa5 <mem_set>
c00078a6:	31 d2                	xor    edx,edx
c00078a8:	01 de                	add    esi,ebx
c00078aa:	11 d7                	adc    edi,edx
c00078ac:	29 1c 24             	sub    DWORD PTR [esp],ebx
c00078af:	75 bf                	jne    c0007870 <f_mkfs+0x74f>
c00078b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00078b5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078b9:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078c1:	b9 00 02 00 00       	mov    ecx,0x200
c00078c6:	31 d2                	xor    edx,edx
c00078c8:	89 e8                	mov    eax,ebp
c00078ca:	e8 d6 a1 ff ff       	call   c0001aa5 <mem_set>
c00078cf:	b9 0b 00 00 00       	mov    ecx,0xb
c00078d4:	ba e0 7d 02 c0       	mov    edx,0xc0027de0
c00078d9:	89 e8                	mov    eax,ebp
c00078db:	e8 b0 a1 ff ff       	call   c0001a90 <mem_cpy>
c00078e0:	8d 45 40             	lea    eax,[ebp+0x40]
c00078e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00078e7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00078eb:	e8 9a a1 ff ff       	call   c0001a8a <st_qword>
c00078f0:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00078f4:	8d 45 48             	lea    eax,[ebp+0x48]
c00078f7:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00078fb:	e8 8a a1 ff ff       	call   c0001a8a <st_qword>
c0007900:	8d 45 50             	lea    eax,[ebp+0x50]
c0007903:	ba 20 00 00 00       	mov    edx,0x20
c0007908:	e8 7a a1 ff ff       	call   c0001a87 <st_dword>
c000790d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007911:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007915:	e8 6d a1 ff ff       	call   c0001a87 <st_dword>
c000791a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000791e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007922:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007926:	e8 5c a1 ff ff       	call   c0001a87 <st_dword>
c000792b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c000792e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007932:	e8 50 a1 ff ff       	call   c0001a87 <st_dword>
c0007937:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000793b:	8d 50 02             	lea    edx,[eax+0x2]
c000793e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007941:	e8 41 a1 ff ff       	call   c0001a87 <st_dword>
c0007946:	8d 45 64             	lea    eax,[ebp+0x64]
c0007949:	ba 00 00 21 50       	mov    edx,0x50210000
c000794e:	e8 34 a1 ff ff       	call   c0001a87 <st_dword>
c0007953:	8d 45 68             	lea    eax,[ebp+0x68]
c0007956:	ba 00 01 00 00       	mov    edx,0x100
c000795b:	e8 23 a1 ff ff       	call   c0001a83 <st_word>
c0007960:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007964:	b8 0a 00 00 00       	mov    eax,0xa
c0007969:	48                   	dec    eax
c000796a:	74 05                	je     c0007971 <f_mkfs+0x850>
c000796c:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c000796f:	eb f8                	jmp    c0007969 <f_mkfs+0x848>
c0007971:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007975:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007979:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000797d:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007981:	74 05                	je     c0007988 <f_mkfs+0x867>
c0007983:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007986:	eb f5                	jmp    c000797d <f_mkfs+0x85c>
c0007988:	8d 45 78             	lea    eax,[ebp+0x78]
c000798b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007990:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007996:	31 db                	xor    ebx,ebx
c0007998:	e8 e6 a0 ff ff       	call   c0001a83 <st_word>
c000799d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c00079a3:	ba 55 aa 00 00       	mov    edx,0xaa55
c00079a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00079ab:	e8 d3 a0 ff ff       	call   c0001a83 <st_word>
c00079b0:	31 c9                	xor    ecx,ecx
c00079b2:	8d 41 96             	lea    eax,[ecx-0x6a]
c00079b5:	83 f8 01             	cmp    eax,0x1
c00079b8:	76 13                	jbe    c00079cd <f_mkfs+0x8ac>
c00079ba:	83 f9 70             	cmp    ecx,0x70
c00079bd:	74 0e                	je     c00079cd <f_mkfs+0x8ac>
c00079bf:	89 da                	mov    edx,ebx
c00079c1:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00079c6:	e8 41 a5 ff ff       	call   c0001f0c <xsum32>
c00079cb:	89 c3                	mov    ebx,eax
c00079cd:	41                   	inc    ecx
c00079ce:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079d4:	75 dc                	jne    c00079b2 <f_mkfs+0x891>
c00079d6:	89 f0                	mov    eax,esi
c00079d8:	89 fa                	mov    edx,edi
c00079da:	83 c0 01             	add    eax,0x1
c00079dd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00079e1:	83 d2 00             	adc    edx,0x0
c00079e4:	83 ec 0c             	sub    esp,0xc
c00079e7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00079eb:	6a 01                	push   0x1
c00079ed:	57                   	push   edi
c00079ee:	56                   	push   esi
c00079ef:	55                   	push   ebp
c00079f0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079f4:	e8 e3 9f ff ff       	call   c00019dc <disk_write>
c00079f9:	83 c4 20             	add    esp,0x20
c00079fc:	85 c0                	test   eax,eax
c00079fe:	0f 85 ce 07 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007a04:	31 d2                	xor    edx,edx
c0007a06:	b9 00 02 00 00       	mov    ecx,0x200
c0007a0b:	89 e8                	mov    eax,ebp
c0007a0d:	e8 93 a0 ff ff       	call   c0001aa5 <mem_set>
c0007a12:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a17:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a1a:	e8 64 a0 ff ff       	call   c0001a83 <st_word>
c0007a1f:	89 f0                	mov    eax,esi
c0007a21:	89 fa                	mov    edx,edi
c0007a23:	83 c0 09             	add    eax,0x9
c0007a26:	83 d2 00             	adc    edx,0x0
c0007a29:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a2c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a30:	31 c9                	xor    ecx,ecx
c0007a32:	41                   	inc    ecx
c0007a33:	89 da                	mov    edx,ebx
c0007a35:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a3a:	e8 cd a4 ff ff       	call   c0001f0c <xsum32>
c0007a3f:	89 c3                	mov    ebx,eax
c0007a41:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a47:	75 e9                	jne    c0007a32 <f_mkfs+0x911>
c0007a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a4d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a51:	83 c0 01             	add    eax,0x1
c0007a54:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a58:	83 d2 00             	adc    edx,0x0
c0007a5b:	83 ec 0c             	sub    esp,0xc
c0007a5e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007a62:	6a 01                	push   0x1
c0007a64:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a68:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a6c:	55                   	push   ebp
c0007a6d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a71:	e8 66 9f ff ff       	call   c00019dc <disk_write>
c0007a76:	83 c4 20             	add    esp,0x20
c0007a79:	85 c0                	test   eax,eax
c0007a7b:	0f 85 51 07 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007a81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a85:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a89:	75 09                	jne    c0007a94 <f_mkfs+0x973>
c0007a8b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a8e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a92:	74 12                	je     c0007aa6 <f_mkfs+0x985>
c0007a94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a98:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a9c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007aa0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007aa4:	eb 8a                	jmp    c0007a30 <f_mkfs+0x90f>
c0007aa6:	31 d2                	xor    edx,edx
c0007aa8:	b9 00 02 00 00       	mov    ecx,0x200
c0007aad:	89 e8                	mov    eax,ebp
c0007aaf:	e8 f1 9f ff ff       	call   c0001aa5 <mem_set>
c0007ab4:	83 c6 0b             	add    esi,0xb
c0007ab7:	83 d7 00             	adc    edi,0x0
c0007aba:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007abe:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007ac2:	31 c9                	xor    ecx,ecx
c0007ac4:	41                   	inc    ecx
c0007ac5:	89 da                	mov    edx,ebx
c0007ac7:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007acc:	e8 3b a4 ff ff       	call   c0001f0c <xsum32>
c0007ad1:	89 c3                	mov    ebx,eax
c0007ad3:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007ad9:	75 e9                	jne    c0007ac4 <f_mkfs+0x9a3>
c0007adb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ade:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ae2:	83 c6 01             	add    esi,0x1
c0007ae5:	83 d7 00             	adc    edi,0x0
c0007ae8:	83 ec 0c             	sub    esp,0xc
c0007aeb:	6a 01                	push   0x1
c0007aed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007af1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007af5:	55                   	push   ebp
c0007af6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007afa:	e8 dd 9e ff ff       	call   c00019dc <disk_write>
c0007aff:	83 c4 20             	add    esp,0x20
c0007b02:	85 c0                	test   eax,eax
c0007b04:	0f 85 c8 06 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007b0a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007b0e:	75 06                	jne    c0007b16 <f_mkfs+0x9f5>
c0007b10:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b14:	74 09                	je     c0007b1f <f_mkfs+0x9fe>
c0007b16:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b19:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b1d:	eb a3                	jmp    c0007ac2 <f_mkfs+0x9a1>
c0007b1f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b23:	89 da                	mov    edx,ebx
c0007b25:	01 e8                	add    eax,ebp
c0007b27:	e8 5b 9f ff ff       	call   c0001a87 <st_dword>
c0007b2c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b31:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b39:	75 e4                	jne    c0007b1f <f_mkfs+0x9fe>
c0007b3b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b3e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b42:	83 c6 02             	add    esi,0x2
c0007b45:	83 d7 00             	adc    edi,0x0
c0007b48:	83 ec 0c             	sub    esp,0xc
c0007b4b:	6a 01                	push   0x1
c0007b4d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b51:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b55:	55                   	push   ebp
c0007b56:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b5a:	e8 7d 9e ff ff       	call   c00019dc <disk_write>
c0007b5f:	83 c4 20             	add    esp,0x20
c0007b62:	85 c0                	test   eax,eax
c0007b64:	0f 85 68 06 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007b6a:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007b6f:	74 0d                	je     c0007b7e <f_mkfs+0xa5d>
c0007b71:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007b79:	e9 43 fd ff ff       	jmp    c00078c1 <f_mkfs+0x7a0>
c0007b7e:	b1 07                	mov    cl,0x7
c0007b80:	e9 e3 05 00 00       	jmp    c0008168 <f_mkfs+0x1047>
c0007b85:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b8a:	0f 85 4f 02 00 00    	jne    c0007ddf <f_mkfs+0xcbe>
c0007b90:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b95:	0f 86 22 02 00 00    	jbe    c0007dbd <f_mkfs+0xc9c>
c0007b9b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ba0:	0f 85 81 06 00 00    	jne    c0008227 <f_mkfs+0x1106>
c0007ba6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007ba9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007bad:	83 f8 40             	cmp    eax,0x40
c0007bb0:	0f 87 51 06 00 00    	ja     c0008207 <f_mkfs+0x10e6>
c0007bb6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007bba:	85 ff                	test   edi,edi
c0007bbc:	75 1c                	jne    c0007bda <f_mkfs+0xab9>
c0007bbe:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007bc1:	ba e0 7c 02 c0       	mov    edx,0xc0027ce0
c0007bc6:	c1 e9 0c             	shr    ecx,0xc
c0007bc9:	bf 01 00 00 00       	mov    edi,0x1
c0007bce:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007bd1:	66 85 c0             	test   ax,ax
c0007bd4:	0f 85 95 01 00 00    	jne    c0007d6f <f_mkfs+0xc4e>
c0007bda:	31 d2                	xor    edx,edx
c0007bdc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007bdf:	f7 f7                	div    edi
c0007be1:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007be6:	0f 86 95 01 00 00    	jbe    c0007d81 <f_mkfs+0xc60>
c0007bec:	83 c0 02             	add    eax,0x2
c0007bef:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007bf4:	01 c0                	add    eax,eax
c0007bf6:	05 ff 01 00 00       	add    eax,0x1ff
c0007bfb:	be 01 00 00 00       	mov    esi,0x1
c0007c00:	c1 e8 09             	shr    eax,0x9
c0007c03:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007c07:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c0b:	c1 e0 05             	shl    eax,0x5
c0007c0e:	c1 e8 09             	shr    eax,0x9
c0007c11:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c15:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c20:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007c24:	89 f0                	mov    eax,esi
c0007c26:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c2a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c2e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c32:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c3a:	31 d2                	xor    edx,edx
c0007c3c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007c41:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c45:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c49:	31 db                	xor    ebx,ebx
c0007c4b:	01 c8                	add    eax,ecx
c0007c4d:	11 da                	adc    edx,ebx
c0007c4f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c53:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c57:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c5b:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c5f:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c63:	f7 da                	neg    edx
c0007c65:	21 d1                	and    ecx,edx
c0007c67:	29 d9                	sub    ecx,ebx
c0007c69:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c6e:	0f 85 20 01 00 00    	jne    c0007d94 <f_mkfs+0xc73>
c0007c74:	31 db                	xor    ebx,ebx
c0007c76:	01 ce                	add    esi,ecx
c0007c78:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007c7c:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007c80:	31 d2                	xor    edx,edx
c0007c82:	89 f8                	mov    eax,edi
c0007c84:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c88:	c1 e0 04             	shl    eax,0x4
c0007c8b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c8f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c93:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c97:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c9b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c9e:	19 d3                	sbb    ebx,edx
c0007ca0:	0f 82 40 01 00 00    	jb     c0007de6 <f_mkfs+0xcc5>
c0007ca6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ca9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cad:	89 c8                	mov    eax,ecx
c0007caf:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007cb4:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007cb8:	29 f0                	sub    eax,esi
c0007cba:	29 d0                	sub    eax,edx
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	f7 f7                	div    edi
c0007cc0:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cc5:	89 c3                	mov    ebx,eax
c0007cc7:	0f 85 b8 fe ff ff    	jne    c0007b85 <f_mkfs+0xa64>
c0007ccd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007cd2:	0f 87 1d 01 00 00    	ja     c0007df5 <f_mkfs+0xcd4>
c0007cd8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007cdd:	0f 85 03 01 00 00    	jne    c0007de6 <f_mkfs+0xcc5>
c0007ce3:	83 ff 01             	cmp    edi,0x1
c0007ce6:	0f 86 fa 00 00 00    	jbe    c0007de6 <f_mkfs+0xcc5>
c0007cec:	d1 ef                	shr    edi,1
c0007cee:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007cf2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007cf6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007cf9:	85 db                	test   ebx,ebx
c0007cfb:	75 2d                	jne    c0007d2a <f_mkfs+0xc09>
c0007cfd:	89 cb                	mov    ebx,ecx
c0007cff:	ba f0 7c 02 c0       	mov    edx,0xc0027cf0
c0007d04:	c1 eb 11             	shr    ebx,0x11
c0007d07:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007d0f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d12:	66 85 c0             	test   ax,ax
c0007d15:	74 11                	je     c0007d28 <f_mkfs+0xc07>
c0007d17:	83 c2 02             	add    edx,0x2
c0007d1a:	39 d8                	cmp    eax,ebx
c0007d1c:	77 0a                	ja     c0007d28 <f_mkfs+0xc07>
c0007d1e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d22:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d26:	eb e7                	jmp    c0007d0f <f_mkfs+0xbee>
c0007d28:	31 db                	xor    ebx,ebx
c0007d2a:	31 d2                	xor    edx,edx
c0007d2c:	89 c8                	mov    eax,ecx
c0007d2e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d32:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d39:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d3e:	c1 ea 09             	shr    edx,0x9
c0007d41:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d46:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d4a:	0f 87 96 00 00 00    	ja     c0007de6 <f_mkfs+0xcc5>
c0007d50:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d54:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007d5c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d60:	be 20 00 00 00       	mov    esi,0x20
c0007d65:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007d6a:	e9 a6 fe ff ff       	jmp    c0007c15 <f_mkfs+0xaf4>
c0007d6f:	83 c2 02             	add    edx,0x2
c0007d72:	39 c8                	cmp    eax,ecx
c0007d74:	0f 87 60 fe ff ff    	ja     c0007bda <f_mkfs+0xab9>
c0007d7a:	01 ff                	add    edi,edi
c0007d7c:	e9 4d fe ff ff       	jmp    c0007bce <f_mkfs+0xaad>
c0007d81:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d84:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d89:	40                   	inc    eax
c0007d8a:	d1 e8                	shr    eax,1
c0007d8c:	83 c0 03             	add    eax,0x3
c0007d8f:	e9 62 fe ff ff       	jmp    c0007bf6 <f_mkfs+0xad5>
c0007d94:	31 d2                	xor    edx,edx
c0007d96:	89 c8                	mov    eax,ecx
c0007d98:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d9c:	85 d2                	test   edx,edx
c0007d9e:	74 0c                	je     c0007dac <f_mkfs+0xc8b>
c0007da0:	49                   	dec    ecx
c0007da1:	46                   	inc    esi
c0007da2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007da7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007dac:	89 c8                	mov    eax,ecx
c0007dae:	31 d2                	xor    edx,edx
c0007db0:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007db4:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007db8:	e9 c3 fe ff ff       	jmp    c0007c80 <f_mkfs+0xb5f>
c0007dbd:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dc2:	77 31                	ja     c0007df5 <f_mkfs+0xcd4>
c0007dc4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007dc9:	75 1b                	jne    c0007de6 <f_mkfs+0xcc5>
c0007dcb:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dd2:	3d 80 00 00 00       	cmp    eax,0x80
c0007dd7:	0f 86 d9 fd ff ff    	jbe    c0007bb6 <f_mkfs+0xa95>
c0007ddd:	eb 07                	jmp    c0007de6 <f_mkfs+0xcc5>
c0007ddf:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007de4:	76 0a                	jbe    c0007df0 <f_mkfs+0xccf>
c0007de6:	bb 0e 00 00 00       	mov    ebx,0xe
c0007deb:	e9 ff 03 00 00       	jmp    c00081ef <f_mkfs+0x10ce>
c0007df0:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007df5:	31 d2                	xor    edx,edx
c0007df7:	b9 00 02 00 00       	mov    ecx,0x200
c0007dfc:	89 e8                	mov    eax,ebp
c0007dfe:	e8 a2 9c ff ff       	call   c0001aa5 <mem_set>
c0007e03:	b9 0b 00 00 00       	mov    ecx,0xb
c0007e08:	ba 02 7e 02 c0       	mov    edx,0xc0027e02
c0007e0d:	89 e8                	mov    eax,ebp
c0007e0f:	e8 7c 9c ff ff       	call   c0001a90 <mem_cpy>
c0007e14:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e17:	ba 00 02 00 00       	mov    edx,0x200
c0007e1c:	e8 62 9c ff ff       	call   c0001a83 <st_word>
c0007e21:	89 f8                	mov    eax,edi
c0007e23:	0f b7 d6             	movzx  edx,si
c0007e26:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e29:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e2c:	e8 52 9c ff ff       	call   c0001a83 <st_word>
c0007e31:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007e35:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e3a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e3d:	75 08                	jne    c0007e47 <f_mkfs+0xd26>
c0007e3f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e47:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e4a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e4e:	e8 30 9c ff ff       	call   c0001a83 <st_word>
c0007e53:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e58:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e5c:	39 d0                	cmp    eax,edx
c0007e5e:	b8 00 00 00 00       	mov    eax,0x0
c0007e63:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007e67:	72 0a                	jb     c0007e73 <f_mkfs+0xd52>
c0007e69:	8d 45 13             	lea    eax,[ebp+0x13]
c0007e6c:	e8 12 9c ff ff       	call   c0001a83 <st_word>
c0007e71:	eb 08                	jmp    c0007e7b <f_mkfs+0xd5a>
c0007e73:	8d 45 20             	lea    eax,[ebp+0x20]
c0007e76:	e8 0c 9c ff ff       	call   c0001a87 <st_dword>
c0007e7b:	8d 45 18             	lea    eax,[ebp+0x18]
c0007e7e:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e83:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e87:	e8 f7 9b ff ff       	call   c0001a83 <st_word>
c0007e8c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e8f:	ba ff 00 00 00       	mov    edx,0xff
c0007e94:	e8 ea 9b ff ff       	call   c0001a83 <st_word>
c0007e99:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e9c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007ea0:	e8 e2 9b ff ff       	call   c0001a87 <st_dword>
c0007ea5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007eaa:	75 57                	jne    c0007f03 <f_mkfs+0xde2>
c0007eac:	8d 45 43             	lea    eax,[ebp+0x43]
c0007eaf:	ba 00 00 21 50       	mov    edx,0x50210000
c0007eb4:	e8 ce 9b ff ff       	call   c0001a87 <st_dword>
c0007eb9:	8d 45 24             	lea    eax,[ebp+0x24]
c0007ebc:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec0:	e8 c2 9b ff ff       	call   c0001a87 <st_dword>
c0007ec5:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007ec8:	ba 02 00 00 00       	mov    edx,0x2
c0007ecd:	e8 b5 9b ff ff       	call   c0001a87 <st_dword>
c0007ed2:	8d 45 30             	lea    eax,[ebp+0x30]
c0007ed5:	ba 01 00 00 00       	mov    edx,0x1
c0007eda:	e8 a4 9b ff ff       	call   c0001a83 <st_word>
c0007edf:	8d 45 32             	lea    eax,[ebp+0x32]
c0007ee2:	ba 06 00 00 00       	mov    edx,0x6
c0007ee7:	e8 97 9b ff ff       	call   c0001a83 <st_word>
c0007eec:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007ef0:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007ef4:	8d 45 47             	lea    eax,[ebp+0x47]
c0007ef7:	b9 13 00 00 00       	mov    ecx,0x13
c0007efc:	ba 0e 7e 02 c0       	mov    edx,0xc0027e0e
c0007f01:	eb 2f                	jmp    c0007f32 <f_mkfs+0xe11>
c0007f03:	8d 45 27             	lea    eax,[ebp+0x27]
c0007f06:	ba 00 00 21 50       	mov    edx,0x50210000
c0007f0b:	e8 77 9b ff ff       	call   c0001a87 <st_dword>
c0007f10:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f15:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f18:	e8 66 9b ff ff       	call   c0001a83 <st_word>
c0007f1d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f21:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f25:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f28:	b9 13 00 00 00       	mov    ecx,0x13
c0007f2d:	ba 22 7e 02 c0       	mov    edx,0xc0027e22
c0007f32:	e8 59 9b ff ff       	call   c0001a90 <mem_cpy>
c0007f37:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f42:	89 f0                	mov    eax,esi
c0007f44:	e8 3a 9b ff ff       	call   c0001a83 <st_word>
c0007f49:	83 ec 0c             	sub    esp,0xc
c0007f4c:	6a 01                	push   0x1
c0007f4e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f52:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f56:	55                   	push   ebp
c0007f57:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f5b:	e8 7c 9a ff ff       	call   c00019dc <disk_write>
c0007f60:	83 c4 20             	add    esp,0x20
c0007f63:	85 c0                	test   eax,eax
c0007f65:	0f 85 67 02 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007f6b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f70:	0f 85 b7 00 00 00    	jne    c000802d <f_mkfs+0xf0c>
c0007f76:	83 ec 0c             	sub    esp,0xc
c0007f79:	6a 01                	push   0x1
c0007f7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f7f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f83:	83 c0 06             	add    eax,0x6
c0007f86:	83 d2 00             	adc    edx,0x0
c0007f89:	52                   	push   edx
c0007f8a:	50                   	push   eax
c0007f8b:	55                   	push   ebp
c0007f8c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f90:	e8 47 9a ff ff       	call   c00019dc <disk_write>
c0007f95:	83 c4 20             	add    esp,0x20
c0007f98:	b9 00 02 00 00       	mov    ecx,0x200
c0007f9d:	31 d2                	xor    edx,edx
c0007f9f:	89 e8                	mov    eax,ebp
c0007fa1:	e8 ff 9a ff ff       	call   c0001aa5 <mem_set>
c0007fa6:	ba 52 52 61 41       	mov    edx,0x41615252
c0007fab:	89 e8                	mov    eax,ebp
c0007fad:	e8 d5 9a ff ff       	call   c0001a87 <st_dword>
c0007fb2:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007fb8:	ba 72 72 41 61       	mov    edx,0x61417272
c0007fbd:	e8 c5 9a ff ff       	call   c0001a87 <st_dword>
c0007fc2:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007fc5:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007fcb:	e8 b7 9a ff ff       	call   c0001a87 <st_dword>
c0007fd0:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007fd6:	ba 02 00 00 00       	mov    edx,0x2
c0007fdb:	e8 a7 9a ff ff       	call   c0001a87 <st_dword>
c0007fe0:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007fe5:	89 f0                	mov    eax,esi
c0007fe7:	e8 97 9a ff ff       	call   c0001a83 <st_word>
c0007fec:	83 ec 0c             	sub    esp,0xc
c0007fef:	6a 01                	push   0x1
c0007ff1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ff5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007ff9:	83 c0 07             	add    eax,0x7
c0007ffc:	83 d2 00             	adc    edx,0x0
c0007fff:	52                   	push   edx
c0008000:	50                   	push   eax
c0008001:	55                   	push   ebp
c0008002:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008006:	e8 d1 99 ff ff       	call   c00019dc <disk_write>
c000800b:	83 c4 14             	add    esp,0x14
c000800e:	6a 01                	push   0x1
c0008010:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008014:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008018:	83 c0 01             	add    eax,0x1
c000801b:	83 d2 00             	adc    edx,0x0
c000801e:	52                   	push   edx
c000801f:	50                   	push   eax
c0008020:	55                   	push   ebp
c0008021:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008025:	e8 b2 99 ff ff       	call   c00019dc <disk_write>
c000802a:	83 c4 20             	add    esp,0x20
c000802d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008034:	31 d2                	xor    edx,edx
c0008036:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000803c:	31 db                	xor    ebx,ebx
c000803e:	89 e8                	mov    eax,ebp
c0008040:	e8 60 9a ff ff       	call   c0001aa5 <mem_set>
c0008045:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000804a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008051:	0f 94 c3             	sete   bl
c0008054:	4b                   	dec    ebx
c0008055:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c000805b:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008061:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008066:	75 21                	jne    c0008089 <f_mkfs+0xf68>
c0008068:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000806d:	89 e8                	mov    eax,ebp
c000806f:	e8 13 9a ff ff       	call   c0001a87 <st_dword>
c0008074:	8d 45 04             	lea    eax,[ebp+0x4]
c0008077:	83 ca ff             	or     edx,0xffffffff
c000807a:	e8 08 9a ff ff       	call   c0001a87 <st_dword>
c000807f:	8d 45 08             	lea    eax,[ebp+0x8]
c0008082:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008087:	eb 04                	jmp    c000808d <f_mkfs+0xf6c>
c0008089:	89 da                	mov    edx,ebx
c000808b:	89 e8                	mov    eax,ebp
c000808d:	e8 f5 99 ff ff       	call   c0001a87 <st_dword>
c0008092:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008096:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000809a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000809e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00080a2:	39 ce                	cmp    esi,ecx
c00080a4:	76 02                	jbe    c00080a8 <f_mkfs+0xf87>
c00080a6:	89 ce                	mov    esi,ecx
c00080a8:	83 ec 0c             	sub    esp,0xc
c00080ab:	56                   	push   esi
c00080ac:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080b0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080b4:	55                   	push   ebp
c00080b5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080b9:	e8 1e 99 ff ff       	call   c00019dc <disk_write>
c00080be:	83 c4 20             	add    esp,0x20
c00080c1:	85 c0                	test   eax,eax
c00080c3:	0f 85 09 01 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c00080c9:	31 d2                	xor    edx,edx
c00080cb:	b9 00 02 00 00       	mov    ecx,0x200
c00080d0:	89 e8                	mov    eax,ebp
c00080d2:	e8 ce 99 ff ff       	call   c0001aa5 <mem_set>
c00080d7:	31 d2                	xor    edx,edx
c00080d9:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00080dd:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080e1:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00080e5:	75 b3                	jne    c000809a <f_mkfs+0xf79>
c00080e7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00080ea:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00080f1:	40                   	inc    eax
c00080f2:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c00080f6:	0f 87 65 ff ff ff    	ja     c0008061 <f_mkfs+0xf40>
c00080fc:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008101:	74 04                	je     c0008107 <f_mkfs+0xfe6>
c0008103:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008107:	89 fb                	mov    ebx,edi
c0008109:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000810d:	76 04                	jbe    c0008113 <f_mkfs+0xff2>
c000810f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008113:	83 ec 0c             	sub    esp,0xc
c0008116:	53                   	push   ebx
c0008117:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000811b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000811f:	55                   	push   ebp
c0008120:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008124:	e8 b3 98 ff ff       	call   c00019dc <disk_write>
c0008129:	83 c4 20             	add    esp,0x20
c000812c:	85 c0                	test   eax,eax
c000812e:	0f 85 9e 00 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0008134:	31 d2                	xor    edx,edx
c0008136:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000813a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000813e:	29 df                	sub    edi,ebx
c0008140:	75 c5                	jne    c0008107 <f_mkfs+0xfe6>
c0008142:	b1 0c                	mov    cl,0xc
c0008144:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008149:	74 1d                	je     c0008168 <f_mkfs+0x1047>
c000814b:	b8 ff ff 00 00       	mov    eax,0xffff
c0008150:	b1 06                	mov    cl,0x6
c0008152:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008156:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c000815a:	72 0c                	jb     c0008168 <f_mkfs+0x1047>
c000815c:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008161:	0f 94 c1             	sete   cl
c0008164:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c0008168:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c000816d:	75 4c                	jne    c00081bb <f_mkfs+0x109a>
c000816f:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008173:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0008177:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000817e:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008185:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008190:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000819b:	0f b6 c9             	movzx  ecx,cl
c000819e:	83 ec 0c             	sub    esp,0xc
c00081a1:	55                   	push   ebp
c00081a2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00081a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081ad:	e8 2f c2 ff ff       	call   c00043e1 <create_partition>
c00081b2:	83 c4 10             	add    esp,0x10
c00081b5:	89 c3                	mov    ebx,eax
c00081b7:	85 c0                	test   eax,eax
c00081b9:	75 34                	jne    c00081ef <f_mkfs+0x10ce>
c00081bb:	31 db                	xor    ebx,ebx
c00081bd:	50                   	push   eax
c00081be:	6a 00                	push   0x0
c00081c0:	6a 00                	push   0x0
c00081c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081c6:	e8 27 98 ff ff       	call   c00019f2 <disk_ioctl>
c00081cb:	83 c4 10             	add    esp,0x10
c00081ce:	85 c0                	test   eax,eax
c00081d0:	74 1d                	je     c00081ef <f_mkfs+0x10ce>
c00081d2:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081da:	75 0c                	jne    c00081e8 <f_mkfs+0x10c7>
c00081dc:	83 ec 0c             	sub    esp,0xc
c00081df:	55                   	push   ebp
c00081e0:	e8 75 00 00 00       	call   c000825a <ff_memfree>
c00081e5:	83 c4 10             	add    esp,0x10
c00081e8:	bb 01 00 00 00       	mov    ebx,0x1
c00081ed:	eb 48                	jmp    c0008237 <f_mkfs+0x1116>
c00081ef:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081f7:	75 3e                	jne    c0008237 <f_mkfs+0x1116>
c00081f9:	83 ec 0c             	sub    esp,0xc
c00081fc:	55                   	push   ebp
c00081fd:	e8 58 00 00 00       	call   c000825a <ff_memfree>
c0008202:	83 c4 10             	add    esp,0x10
c0008205:	eb 30                	jmp    c0008237 <f_mkfs+0x1116>
c0008207:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000820c:	0f 85 eb fa ff ff    	jne    c0007cfd <f_mkfs+0xbdc>
c0008212:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008216:	81 ff 80 00 00 00    	cmp    edi,0x80
c000821c:	0f 86 b8 f9 ff ff    	jbe    c0007bda <f_mkfs+0xab9>
c0008222:	e9 bf fb ff ff       	jmp    c0007de6 <f_mkfs+0xcc5>
c0008227:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000822c:	0f 85 c0 fa ff ff    	jne    c0007cf2 <f_mkfs+0xbd1>
c0008232:	e9 af fb ff ff       	jmp    c0007de6 <f_mkfs+0xcc5>
c0008237:	81 c4 9c 00 00 00    	add    esp,0x9c
c000823d:	89 d8                	mov    eax,ebx
c000823f:	5b                   	pop    ebx
c0008240:	5e                   	pop    esi
c0008241:	5f                   	pop    edi
c0008242:	5d                   	pop    ebp
c0008243:	c3                   	ret    

c0008244 <ff_memalloc>:
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	83 ec 0c             	sub    esp,0xc
c000824a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000824e:	e8 81 72 00 00       	call   c000f4d4 <malloc>
c0008253:	83 c4 10             	add    esp,0x10
c0008256:	83 c4 0c             	add    esp,0xc
c0008259:	c3                   	ret    

c000825a <ff_memfree>:
c000825a:	83 ec 0c             	sub    esp,0xc
c000825d:	83 ec 0c             	sub    esp,0xc
c0008260:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008264:	e8 7b 72 00 00       	call   c000f4e4 <free>
c0008269:	83 c4 10             	add    esp,0x10
c000826c:	90                   	nop
c000826d:	83 c4 0c             	add    esp,0xc
c0008270:	c3                   	ret    

c0008271 <ff_uni2oem>:
c0008271:	83 ec 14             	sub    esp,0x14
c0008274:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008278:	66 89 04 24          	mov    WORD PTR [esp],ax
c000827c:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008283:	c7 44 24 0c 40 81 02 c0 	mov    DWORD PTR [esp+0xc],0xc0028140
c000828b:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008290:	77 0b                	ja     c000829d <ff_uni2oem+0x2c>
c0008292:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008296:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000829b:	eb 5b                	jmp    c00082f8 <ff_uni2oem+0x87>
c000829d:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00082a5:	77 51                	ja     c00082f8 <ff_uni2oem+0x87>
c00082a7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082ad:	75 49                	jne    c00082f8 <ff_uni2oem+0x87>
c00082af:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082b6:	eb 0b                	jmp    c00082c3 <ff_uni2oem+0x52>
c00082b8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082bd:	40                   	inc    eax
c00082be:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082c3:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00082c9:	77 1b                	ja     c00082e6 <ff_uni2oem+0x75>
c00082cb:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00082d0:	01 c0                	add    eax,eax
c00082d2:	89 c2                	mov    edx,eax
c00082d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082d8:	01 d0                	add    eax,edx
c00082da:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082dd:	0f b7 c0             	movzx  eax,ax
c00082e0:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00082e4:	75 d2                	jne    c00082b8 <ff_uni2oem+0x47>
c00082e6:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082eb:	83 e8 80             	sub    eax,0xffffff80
c00082ee:	25 ff 00 00 00       	and    eax,0xff
c00082f3:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082f8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082fd:	83 c4 14             	add    esp,0x14
c0008300:	c3                   	ret    

c0008301 <ff_oem2uni>:
c0008301:	83 ec 18             	sub    esp,0x18
c0008304:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008308:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000830c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008311:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008315:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000831c:	c7 44 24 10 40 81 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028140
c0008324:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000832a:	77 0b                	ja     c0008337 <ff_oem2uni+0x36>
c000832c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008330:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008335:	eb 2d                	jmp    c0008364 <ff_oem2uni+0x63>
c0008337:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000833d:	75 25                	jne    c0008364 <ff_oem2uni+0x63>
c000833f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008346:	77 1c                	ja     c0008364 <ff_oem2uni+0x63>
c0008348:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000834d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008352:	01 c0                	add    eax,eax
c0008354:	89 c2                	mov    edx,eax
c0008356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000835a:	01 d0                	add    eax,edx
c000835c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000835f:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008364:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0008369:	83 c4 18             	add    esp,0x18
c000836c:	c3                   	ret    

c000836d <ff_wtoupper>:
c000836d:	83 ec 10             	sub    esp,0x10
c0008370:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0008378:	0f 87 3e 01 00 00    	ja     c00084bc <ff_wtoupper+0x14f>
c000837e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008382:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008387:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c000838e:	77 07                	ja     c0008397 <ff_wtoupper+0x2a>
c0008390:	b8 40 7f 02 c0       	mov    eax,0xc0027f40
c0008395:	eb 05                	jmp    c000839c <ff_wtoupper+0x2f>
c0008397:	b8 80 7e 02 c0       	mov    eax,0xc0027e80
c000839c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083a4:	8d 50 02             	lea    edx,[eax+0x2]
c00083a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083ab:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083ae:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083b3:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083b9:	0f 84 f4 00 00 00    	je     c00084b3 <ff_wtoupper+0x146>
c00083bf:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083c4:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00083c9:	0f 82 e4 00 00 00    	jb     c00084b3 <ff_wtoupper+0x146>
c00083cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083d3:	8d 50 02             	lea    edx,[eax+0x2]
c00083d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083da:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083dd:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00083e2:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00083e7:	66 c1 e8 08          	shr    ax,0x8
c00083eb:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00083f0:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c00083f7:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00083fc:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008401:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008406:	01 ca                	add    edx,ecx
c0008408:	39 d0                	cmp    eax,edx
c000840a:	0f 8d 86 00 00 00    	jge    c0008496 <ff_wtoupper+0x129>
c0008410:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008415:	83 f8 08             	cmp    eax,0x8
c0008418:	0f 87 94 00 00 00    	ja     c00084b2 <ff_wtoupper+0x145>
c000841e:	8b 04 85 40 7e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd81c0]
c0008425:	ff e0                	jmp    eax
c0008427:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000842c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008431:	29 c2                	sub    edx,eax
c0008433:	89 d0                	mov    eax,edx
c0008435:	01 c0                	add    eax,eax
c0008437:	89 c2                	mov    edx,eax
c0008439:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000843d:	01 d0                	add    eax,edx
c000843f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008442:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008447:	eb 4b                	jmp    c0008494 <ff_wtoupper+0x127>
c0008449:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000844e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008452:	83 e0 01             	and    eax,0x1
c0008455:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c000845a:	eb 38                	jmp    c0008494 <ff_wtoupper+0x127>
c000845c:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008462:	eb 30                	jmp    c0008494 <ff_wtoupper+0x127>
c0008464:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c000846a:	eb 28                	jmp    c0008494 <ff_wtoupper+0x127>
c000846c:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008472:	eb 20                	jmp    c0008494 <ff_wtoupper+0x127>
c0008474:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c000847a:	eb 18                	jmp    c0008494 <ff_wtoupper+0x127>
c000847c:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008482:	eb 10                	jmp    c0008494 <ff_wtoupper+0x127>
c0008484:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c000848a:	eb 08                	jmp    c0008494 <ff_wtoupper+0x127>
c000848c:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008493:	90                   	nop
c0008494:	eb 1c                	jmp    c00084b2 <ff_wtoupper+0x145>
c0008496:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000849c:	0f 85 fe fe ff ff    	jne    c00083a0 <ff_wtoupper+0x33>
c00084a2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00084a7:	01 c0                	add    eax,eax
c00084a9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00084ad:	e9 ee fe ff ff       	jmp    c00083a0 <ff_wtoupper+0x33>
c00084b2:	90                   	nop
c00084b3:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00084b8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084c0:	83 c4 10             	add    esp,0x10
c00084c3:	c3                   	ret    

c00084c4 <psrc_set_converter>:
c00084c4:	56                   	push   esi
c00084c5:	89 d6                	mov    esi,edx
c00084c7:	53                   	push   ebx
c00084c8:	89 c3                	mov    ebx,eax
c00084ca:	83 ec 0c             	sub    esp,0xc
c00084cd:	52                   	push   edx
c00084ce:	50                   	push   eax
c00084cf:	e8 6f 55 00 00       	call   c000da43 <sinc_set_converter>
c00084d4:	83 c4 10             	add    esp,0x10
c00084d7:	85 c0                	test   eax,eax
c00084d9:	74 25                	je     c0008500 <psrc_set_converter+0x3c>
c00084db:	50                   	push   eax
c00084dc:	50                   	push   eax
c00084dd:	56                   	push   esi
c00084de:	53                   	push   ebx
c00084df:	e8 17 5d 00 00       	call   c000e1fb <zoh_set_converter>
c00084e4:	83 c4 10             	add    esp,0x10
c00084e7:	85 c0                	test   eax,eax
c00084e9:	74 15                	je     c0008500 <psrc_set_converter+0x3c>
c00084eb:	51                   	push   ecx
c00084ec:	51                   	push   ecx
c00084ed:	56                   	push   esi
c00084ee:	53                   	push   ebx
c00084ef:	e8 0f 11 00 00       	call   c0009603 <linear_set_converter>
c00084f4:	83 c4 10             	add    esp,0x10
c00084f7:	ba 0a 00 00 00       	mov    edx,0xa
c00084fc:	85 c0                	test   eax,eax
c00084fe:	75 02                	jne    c0008502 <psrc_set_converter+0x3e>
c0008500:	31 d2                	xor    edx,edx
c0008502:	89 d0                	mov    eax,edx
c0008504:	5a                   	pop    edx
c0008505:	5b                   	pop    ebx
c0008506:	5e                   	pop    esi
c0008507:	c3                   	ret    

c0008508 <src_delete>:
c0008508:	53                   	push   ebx
c0008509:	83 ec 08             	sub    esp,0x8
c000850c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008510:	85 db                	test   ebx,ebx
c0008512:	74 29                	je     c000853d <src_delete+0x35>
c0008514:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008517:	85 c0                	test   eax,eax
c0008519:	74 0c                	je     c0008527 <src_delete+0x1f>
c000851b:	83 ec 0c             	sub    esp,0xc
c000851e:	50                   	push   eax
c000851f:	e8 c0 6f 00 00       	call   c000f4e4 <free>
c0008524:	83 c4 10             	add    esp,0x10
c0008527:	50                   	push   eax
c0008528:	6a 3c                	push   0x3c
c000852a:	6a 00                	push   0x0
c000852c:	53                   	push   ebx
c000852d:	e8 59 81 ff ff       	call   c000068b <memset>
c0008532:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008535:	e8 aa 6f 00 00       	call   c000f4e4 <free>
c000853a:	83 c4 10             	add    esp,0x10
c000853d:	31 c0                	xor    eax,eax
c000853f:	83 c4 08             	add    esp,0x8
c0008542:	5b                   	pop    ebx
c0008543:	c3                   	ret    

c0008544 <src_process>:
c0008544:	55                   	push   ebp
c0008545:	57                   	push   edi
c0008546:	56                   	push   esi
c0008547:	53                   	push   ebx
c0008548:	83 ec 1c             	sub    esp,0x1c
c000854b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000854f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008553:	85 ed                	test   ebp,ebp
c0008555:	0f 84 6f 01 00 00    	je     c00086ca <src_process+0x186>
c000855b:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c000855f:	0f 84 6c 01 00 00    	je     c00086d1 <src_process+0x18d>
c0008565:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c0008569:	0f 84 62 01 00 00    	je     c00086d1 <src_process+0x18d>
c000856f:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c0008576:	0f 85 5c 01 00 00    	jne    c00086d8 <src_process+0x194>
c000857c:	85 db                	test   ebx,ebx
c000857e:	0f 84 5b 01 00 00    	je     c00086df <src_process+0x19b>
c0008584:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008586:	85 f6                	test   esi,esi
c0008588:	0f 84 58 01 00 00    	je     c00086e6 <src_process+0x1a2>
c000858e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008591:	85 ff                	test   edi,edi
c0008593:	0f 84 4d 01 00 00    	je     c00086e6 <src_process+0x1a2>
c0008599:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000859c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000859f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00085a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085a7:	68 00 00 70 3f       	push   0x3f700000
c00085ac:	6a 00                	push   0x0
c00085ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085b6:	e8 94 e8 01 00       	call   c0026e4f <__ltdf2>
c00085bb:	83 c4 10             	add    esp,0x10
c00085be:	85 c0                	test   eax,eax
c00085c0:	0f 88 27 01 00 00    	js     c00086ed <src_process+0x1a9>
c00085c6:	68 00 00 70 40       	push   0x40700000
c00085cb:	6a 00                	push   0x0
c00085cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085d5:	e8 57 e8 01 00       	call   c0026e31 <__gtdf2>
c00085da:	83 c4 10             	add    esp,0x10
c00085dd:	85 c0                	test   eax,eax
c00085df:	0f 8f 08 01 00 00    	jg     c00086ed <src_process+0x1a9>
c00085e5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00085e9:	79 07                	jns    c00085f2 <src_process+0xae>
c00085eb:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00085f2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00085f5:	85 c0                	test   eax,eax
c00085f7:	79 50                	jns    c0008649 <src_process+0x105>
c00085f9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008600:	39 fe                	cmp    esi,edi
c0008602:	72 37                	jb     c000863b <src_process+0xf7>
c0008604:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000860b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008612:	68 00 00 70 3f       	push   0x3f700000
c0008617:	6a 00                	push   0x0
c0008619:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000861c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000861f:	e8 2b e8 01 00       	call   c0026e4f <__ltdf2>
c0008624:	83 c4 10             	add    esp,0x10
c0008627:	85 c0                	test   eax,eax
c0008629:	79 37                	jns    c0008662 <src_process+0x11e>
c000862b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000862f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008633:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008636:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008639:	eb 27                	jmp    c0008662 <src_process+0x11e>
c000863b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000863e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008642:	8d 04 86             	lea    eax,[esi+eax*4]
c0008645:	39 c7                	cmp    edi,eax
c0008647:	eb 0d                	jmp    c0008656 <src_process+0x112>
c0008649:	39 fe                	cmp    esi,edi
c000864b:	72 ee                	jb     c000863b <src_process+0xf7>
c000864d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008651:	8d 04 87             	lea    eax,[edi+eax*4]
c0008654:	39 c6                	cmp    esi,eax
c0008656:	73 ac                	jae    c0008604 <src_process+0xc0>
c0008658:	b8 10 00 00 00       	mov    eax,0x10
c000865d:	e9 90 00 00 00       	jmp    c00086f2 <src_process+0x1ae>
c0008662:	83 ec 10             	sub    esp,0x10
c0008665:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008668:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000866b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000866e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008671:	e8 de de 01 00       	call   c0026554 <__subdf3>
c0008676:	83 c4 18             	add    esp,0x18
c0008679:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000867d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008681:	52                   	push   edx
c0008682:	50                   	push   eax
c0008683:	e8 58 e9 01 00       	call   c0026fe0 <fabs>
c0008688:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000868c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008690:	83 c4 10             	add    esp,0x10
c0008693:	68 af 03 d2 3c       	push   0x3cd203af
c0008698:	68 16 56 e7 9e       	push   0x9ee75616
c000869d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086a5:	e8 a5 e7 01 00       	call   c0026e4f <__ltdf2>
c00086aa:	83 c4 10             	add    esp,0x10
c00086ad:	85 c0                	test   eax,eax
c00086af:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00086b3:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00086b7:	79 05                	jns    c00086be <src_process+0x17a>
c00086b9:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00086bc:	eb 03                	jmp    c00086c1 <src_process+0x17d>
c00086be:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00086c1:	83 c4 1c             	add    esp,0x1c
c00086c4:	5b                   	pop    ebx
c00086c5:	5e                   	pop    esi
c00086c6:	5f                   	pop    edi
c00086c7:	5d                   	pop    ebp
c00086c8:	ff e0                	jmp    eax
c00086ca:	b8 02 00 00 00       	mov    eax,0x2
c00086cf:	eb 21                	jmp    c00086f2 <src_process+0x1ae>
c00086d1:	b8 07 00 00 00       	mov    eax,0x7
c00086d6:	eb 1a                	jmp    c00086f2 <src_process+0x1ae>
c00086d8:	b8 12 00 00 00       	mov    eax,0x12
c00086dd:	eb 13                	jmp    c00086f2 <src_process+0x1ae>
c00086df:	b8 03 00 00 00       	mov    eax,0x3
c00086e4:	eb 0c                	jmp    c00086f2 <src_process+0x1ae>
c00086e6:	b8 04 00 00 00       	mov    eax,0x4
c00086eb:	eb 05                	jmp    c00086f2 <src_process+0x1ae>
c00086ed:	b8 06 00 00 00       	mov    eax,0x6
c00086f2:	83 c4 1c             	add    esp,0x1c
c00086f5:	5b                   	pop    ebx
c00086f6:	5e                   	pop    esi
c00086f7:	5f                   	pop    edi
c00086f8:	5d                   	pop    ebp
c00086f9:	c3                   	ret    

c00086fa <src_callback_read>:
c00086fa:	55                   	push   ebp
c00086fb:	57                   	push   edi
c00086fc:	56                   	push   esi
c00086fd:	53                   	push   ebx
c00086fe:	83 ec 3c             	sub    esp,0x3c
c0008701:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008705:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008709:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000870d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008711:	85 ed                	test   ebp,ebp
c0008713:	0f 8e 52 01 00 00    	jle    c000886b <src_callback_read+0x171>
c0008719:	85 db                	test   ebx,ebx
c000871b:	0f 84 4a 01 00 00    	je     c000886b <src_callback_read+0x171>
c0008721:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008728:	74 0c                	je     c0008736 <src_callback_read+0x3c>
c000872a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008731:	e9 35 01 00 00       	jmp    c000886b <src_callback_read+0x171>
c0008736:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000873a:	75 0c                	jne    c0008748 <src_callback_read+0x4e>
c000873c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008743:	e9 23 01 00 00       	jmp    c000886b <src_callback_read+0x171>
c0008748:	51                   	push   ecx
c0008749:	6a 24                	push   0x24
c000874b:	6a 00                	push   0x0
c000874d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008751:	50                   	push   eax
c0008752:	e8 34 7f ff ff       	call   c000068b <memset>
c0008757:	83 c4 10             	add    esp,0x10
c000875a:	68 00 00 70 3f       	push   0x3f700000
c000875f:	6a 00                	push   0x0
c0008761:	57                   	push   edi
c0008762:	56                   	push   esi
c0008763:	e8 e7 e6 01 00       	call   c0026e4f <__ltdf2>
c0008768:	83 c4 10             	add    esp,0x10
c000876b:	85 c0                	test   eax,eax
c000876d:	78 3e                	js     c00087ad <src_callback_read+0xb3>
c000876f:	68 00 00 70 40       	push   0x40700000
c0008774:	6a 00                	push   0x0
c0008776:	57                   	push   edi
c0008777:	56                   	push   esi
c0008778:	e8 b4 e6 01 00       	call   c0026e31 <__gtdf2>
c000877d:	83 c4 10             	add    esp,0x10
c0008780:	85 c0                	test   eax,eax
c0008782:	7f 29                	jg     c00087ad <src_callback_read+0xb3>
c0008784:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0008788:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000878c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008790:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0008794:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008797:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000879b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000879f:	31 f6                	xor    esi,esi
c00087a1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00087a4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00087a8:	e9 97 00 00 00       	jmp    c0008844 <src_callback_read+0x14a>
c00087ad:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00087b4:	e9 b2 00 00 00       	jmp    c000886b <src_callback_read+0x171>
c00087b9:	8d 44 24 04          	lea    eax,[esp+0x4]
c00087bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087c1:	52                   	push   edx
c00087c2:	52                   	push   edx
c00087c3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00087c7:	50                   	push   eax
c00087c8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087cb:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00087ce:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00087d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00087d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00087da:	83 c4 10             	add    esp,0x10
c00087dd:	85 c0                	test   eax,eax
c00087df:	75 08                	jne    c00087e9 <src_callback_read+0xef>
c00087e1:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00087e9:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c00087f0:	50                   	push   eax
c00087f1:	50                   	push   eax
c00087f2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00087f6:	50                   	push   eax
c00087f7:	53                   	push   ebx
c00087f8:	e8 47 fd ff ff       	call   c0008544 <src_process>
c00087fd:	83 c4 10             	add    esp,0x10
c0008800:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008807:	85 c0                	test   eax,eax
c0008809:	75 49                	jne    c0008854 <src_callback_read+0x15a>
c000880b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000880f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008812:	89 f9                	mov    ecx,edi
c0008814:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008818:	0f af ca             	imul   ecx,edx
c000881b:	c1 e1 02             	shl    ecx,0x2
c000881e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008822:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008826:	0f af d1             	imul   edx,ecx
c0008829:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c000882d:	c1 e2 02             	shl    edx,0x2
c0008830:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008834:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008837:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000883c:	74 12                	je     c0008850 <src_callback_read+0x156>
c000883e:	39 d5                	cmp    ebp,edx
c0008840:	7e 14                	jle    c0008856 <src_callback_read+0x15c>
c0008842:	89 d6                	mov    esi,edx
c0008844:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008849:	75 9e                	jne    c00087e9 <src_callback_read+0xef>
c000884b:	e9 69 ff ff ff       	jmp    c00087b9 <src_callback_read+0xbf>
c0008850:	85 c9                	test   ecx,ecx
c0008852:	75 ea                	jne    c000883e <src_callback_read+0x144>
c0008854:	89 f2                	mov    edx,esi
c0008856:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000885a:	85 c0                	test   eax,eax
c000885c:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c000885f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008863:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008866:	74 05                	je     c000886d <src_callback_read+0x173>
c0008868:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000886b:	31 d2                	xor    edx,edx
c000886d:	83 c4 3c             	add    esp,0x3c
c0008870:	89 d0                	mov    eax,edx
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	5f                   	pop    edi
c0008875:	5d                   	pop    ebp
c0008876:	c3                   	ret    

c0008877 <src_set_ratio>:
c0008877:	57                   	push   edi
c0008878:	ba 02 00 00 00       	mov    edx,0x2
c000887d:	56                   	push   esi
c000887e:	53                   	push   ebx
c000887f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008883:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008887:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000888b:	85 db                	test   ebx,ebx
c000888d:	74 4c                	je     c00088db <src_set_ratio+0x64>
c000888f:	ba 07 00 00 00       	mov    edx,0x7
c0008894:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008898:	74 41                	je     c00088db <src_set_ratio+0x64>
c000889a:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c000889e:	74 3b                	je     c00088db <src_set_ratio+0x64>
c00088a0:	68 00 00 70 3f       	push   0x3f700000
c00088a5:	6a 00                	push   0x0
c00088a7:	57                   	push   edi
c00088a8:	56                   	push   esi
c00088a9:	e8 a1 e5 01 00       	call   c0026e4f <__ltdf2>
c00088ae:	83 c4 10             	add    esp,0x10
c00088b1:	ba 06 00 00 00       	mov    edx,0x6
c00088b6:	85 c0                	test   eax,eax
c00088b8:	78 21                	js     c00088db <src_set_ratio+0x64>
c00088ba:	68 00 00 70 40       	push   0x40700000
c00088bf:	6a 00                	push   0x0
c00088c1:	57                   	push   edi
c00088c2:	56                   	push   esi
c00088c3:	e8 69 e5 01 00       	call   c0026e31 <__gtdf2>
c00088c8:	83 c4 10             	add    esp,0x10
c00088cb:	ba 06 00 00 00       	mov    edx,0x6
c00088d0:	85 c0                	test   eax,eax
c00088d2:	7f 07                	jg     c00088db <src_set_ratio+0x64>
c00088d4:	89 33                	mov    DWORD PTR [ebx],esi
c00088d6:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00088d9:	31 d2                	xor    edx,edx
c00088db:	5b                   	pop    ebx
c00088dc:	89 d0                	mov    eax,edx
c00088de:	5e                   	pop    esi
c00088df:	5f                   	pop    edi
c00088e0:	c3                   	ret    

c00088e1 <src_get_channels>:
c00088e1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00088e5:	b8 02 00 00 00       	mov    eax,0x2
c00088ea:	85 d2                	test   edx,edx
c00088ec:	74 14                	je     c0008902 <src_get_channels+0x21>
c00088ee:	b8 07 00 00 00       	mov    eax,0x7
c00088f3:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00088f7:	74 09                	je     c0008902 <src_get_channels+0x21>
c00088f9:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c00088fd:	74 03                	je     c0008902 <src_get_channels+0x21>
c00088ff:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008902:	c3                   	ret    

c0008903 <src_reset>:
c0008903:	53                   	push   ebx
c0008904:	b8 02 00 00 00       	mov    eax,0x2
c0008909:	83 ec 08             	sub    esp,0x8
c000890c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008910:	85 db                	test   ebx,ebx
c0008912:	74 36                	je     c000894a <src_reset+0x47>
c0008914:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008917:	85 c0                	test   eax,eax
c0008919:	74 09                	je     c0008924 <src_reset+0x21>
c000891b:	83 ec 0c             	sub    esp,0xc
c000891e:	53                   	push   ebx
c000891f:	ff d0                	call   eax
c0008921:	83 c4 10             	add    esp,0x10
c0008924:	31 c0                	xor    eax,eax
c0008926:	31 d2                	xor    edx,edx
c0008928:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000892b:	89 03                	mov    DWORD PTR [ebx],eax
c000892d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008930:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008933:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000893a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008941:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008948:	31 c0                	xor    eax,eax
c000894a:	83 c4 08             	add    esp,0x8
c000894d:	5b                   	pop    ebx
c000894e:	c3                   	ret    

c000894f <src_new>:
c000894f:	57                   	push   edi
c0008950:	56                   	push   esi
c0008951:	53                   	push   ebx
c0008952:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008956:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000895a:	85 f6                	test   esi,esi
c000895c:	74 73                	je     c00089d1 <src_new+0x82>
c000895e:	85 ff                	test   edi,edi
c0008960:	7f 08                	jg     c000896a <src_new+0x1b>
c0008962:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008968:	eb 1e                	jmp    c0008988 <src_new+0x39>
c000896a:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008970:	50                   	push   eax
c0008971:	50                   	push   eax
c0008972:	6a 3c                	push   0x3c
c0008974:	6a 01                	push   0x1
c0008976:	e8 89 6b 00 00       	call   c000f504 <calloc>
c000897b:	83 c4 10             	add    esp,0x10
c000897e:	89 c3                	mov    ebx,eax
c0008980:	85 c0                	test   eax,eax
c0008982:	75 10                	jne    c0008994 <src_new+0x45>
c0008984:	85 f6                	test   esi,esi
c0008986:	75 04                	jne    c000898c <src_new+0x3d>
c0008988:	31 db                	xor    ebx,ebx
c000898a:	eb 4b                	jmp    c00089d7 <src_new+0x88>
c000898c:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008992:	eb 43                	jmp    c00089d7 <src_new+0x88>
c0008994:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008997:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c000899e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00089a2:	e8 1d fb ff ff       	call   c00084c4 <psrc_set_converter>
c00089a7:	85 c0                	test   eax,eax
c00089a9:	74 18                	je     c00089c3 <src_new+0x74>
c00089ab:	85 f6                	test   esi,esi
c00089ad:	74 06                	je     c00089b5 <src_new+0x66>
c00089af:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00089b5:	83 ec 0c             	sub    esp,0xc
c00089b8:	53                   	push   ebx
c00089b9:	31 db                	xor    ebx,ebx
c00089bb:	e8 24 6b 00 00       	call   c000f4e4 <free>
c00089c0:	83 c4 10             	add    esp,0x10
c00089c3:	83 ec 0c             	sub    esp,0xc
c00089c6:	53                   	push   ebx
c00089c7:	e8 37 ff ff ff       	call   c0008903 <src_reset>
c00089cc:	83 c4 10             	add    esp,0x10
c00089cf:	eb 06                	jmp    c00089d7 <src_new+0x88>
c00089d1:	85 ff                	test   edi,edi
c00089d3:	7f 9b                	jg     c0008970 <src_new+0x21>
c00089d5:	eb b1                	jmp    c0008988 <src_new+0x39>
c00089d7:	89 d8                	mov    eax,ebx
c00089d9:	5b                   	pop    ebx
c00089da:	5e                   	pop    esi
c00089db:	5f                   	pop    edi
c00089dc:	c3                   	ret    

c00089dd <src_callback_new>:
c00089dd:	56                   	push   esi
c00089de:	53                   	push   ebx
c00089df:	53                   	push   ebx
c00089e0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00089e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089e8:	85 f6                	test   esi,esi
c00089ea:	75 0e                	jne    c00089fa <src_callback_new+0x1d>
c00089ec:	31 db                	xor    ebx,ebx
c00089ee:	85 c0                	test   eax,eax
c00089f0:	74 47                	je     c0008a39 <src_callback_new+0x5c>
c00089f2:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c00089f8:	eb 3f                	jmp    c0008a39 <src_callback_new+0x5c>
c00089fa:	85 c0                	test   eax,eax
c00089fc:	74 06                	je     c0008a04 <src_callback_new+0x27>
c00089fe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a04:	51                   	push   ecx
c0008a05:	50                   	push   eax
c0008a06:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a0a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a0e:	e8 3c ff ff ff       	call   c000894f <src_new>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	89 c3                	mov    ebx,eax
c0008a18:	85 c0                	test   eax,eax
c0008a1a:	74 1d                	je     c0008a39 <src_callback_new+0x5c>
c0008a1c:	83 ec 0c             	sub    esp,0xc
c0008a1f:	50                   	push   eax
c0008a20:	e8 de fe ff ff       	call   c0008903 <src_reset>
c0008a25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a29:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a30:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008a33:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008a36:	83 c4 10             	add    esp,0x10
c0008a39:	89 d8                	mov    eax,ebx
c0008a3b:	5a                   	pop    edx
c0008a3c:	5b                   	pop    ebx
c0008a3d:	5e                   	pop    esi
c0008a3e:	c3                   	ret    

c0008a3f <src_get_name>:
c0008a3f:	53                   	push   ebx
c0008a40:	83 ec 14             	sub    esp,0x14
c0008a43:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a47:	53                   	push   ebx
c0008a48:	e8 d0 4f 00 00       	call   c000da1d <sinc_get_name>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	85 c0                	test   eax,eax
c0008a52:	75 1d                	jne    c0008a71 <src_get_name+0x32>
c0008a54:	83 ec 0c             	sub    esp,0xc
c0008a57:	53                   	push   ebx
c0008a58:	e8 80 57 00 00       	call   c000e1dd <zoh_get_name>
c0008a5d:	83 c4 10             	add    esp,0x10
c0008a60:	85 c0                	test   eax,eax
c0008a62:	75 0d                	jne    c0008a71 <src_get_name+0x32>
c0008a64:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a68:	83 c4 08             	add    esp,0x8
c0008a6b:	5b                   	pop    ebx
c0008a6c:	e9 74 0b 00 00       	jmp    c00095e5 <linear_get_name>
c0008a71:	83 c4 08             	add    esp,0x8
c0008a74:	5b                   	pop    ebx
c0008a75:	c3                   	ret    

c0008a76 <src_get_description>:
c0008a76:	53                   	push   ebx
c0008a77:	83 ec 14             	sub    esp,0x14
c0008a7a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a7e:	53                   	push   ebx
c0008a7f:	e8 ac 4f 00 00       	call   c000da30 <sinc_get_description>
c0008a84:	83 c4 10             	add    esp,0x10
c0008a87:	85 c0                	test   eax,eax
c0008a89:	75 1d                	jne    c0008aa8 <src_get_description+0x32>
c0008a8b:	83 ec 0c             	sub    esp,0xc
c0008a8e:	53                   	push   ebx
c0008a8f:	e8 58 57 00 00       	call   c000e1ec <zoh_get_description>
c0008a94:	83 c4 10             	add    esp,0x10
c0008a97:	85 c0                	test   eax,eax
c0008a99:	75 0d                	jne    c0008aa8 <src_get_description+0x32>
c0008a9b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a9f:	83 c4 08             	add    esp,0x8
c0008aa2:	5b                   	pop    ebx
c0008aa3:	e9 4c 0b 00 00       	jmp    c00095f4 <linear_get_description>
c0008aa8:	83 c4 08             	add    esp,0x8
c0008aab:	5b                   	pop    ebx
c0008aac:	c3                   	ret    

c0008aad <src_get_version>:
c0008aad:	b8 40 82 02 c0       	mov    eax,0xc0028240
c0008ab2:	c3                   	ret    

c0008ab3 <src_is_valid_ratio>:
c0008ab3:	83 ec 1c             	sub    esp,0x1c
c0008ab6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008aba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008abe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ac2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ac6:	68 00 00 70 3f       	push   0x3f700000
c0008acb:	6a 00                	push   0x0
c0008acd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ad1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ad5:	e8 75 e3 01 00       	call   c0026e4f <__ltdf2>
c0008ada:	83 c4 10             	add    esp,0x10
c0008add:	31 d2                	xor    edx,edx
c0008adf:	85 c0                	test   eax,eax
c0008ae1:	78 1e                	js     c0008b01 <src_is_valid_ratio+0x4e>
c0008ae3:	68 00 00 70 40       	push   0x40700000
c0008ae8:	6a 00                	push   0x0
c0008aea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008aee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008af2:	e8 3a e3 01 00       	call   c0026e31 <__gtdf2>
c0008af7:	31 d2                	xor    edx,edx
c0008af9:	83 c4 10             	add    esp,0x10
c0008afc:	85 c0                	test   eax,eax
c0008afe:	0f 9e c2             	setle  dl
c0008b01:	89 d0                	mov    eax,edx
c0008b03:	83 c4 1c             	add    esp,0x1c
c0008b06:	c3                   	ret    

c0008b07 <src_error>:
c0008b07:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b0b:	31 c0                	xor    eax,eax
c0008b0d:	85 d2                	test   edx,edx
c0008b0f:	74 03                	je     c0008b14 <src_error+0xd>
c0008b11:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008b14:	c3                   	ret    

c0008b15 <src_strerror>:
c0008b15:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b19:	31 c0                	xor    eax,eax
c0008b1b:	83 fa 17             	cmp    edx,0x17
c0008b1e:	77 07                	ja     c0008b27 <src_strerror+0x12>
c0008b20:	8b 04 95 a0 86 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7960]
c0008b27:	c3                   	ret    

c0008b28 <src_simple>:
c0008b28:	56                   	push   esi
c0008b29:	53                   	push   ebx
c0008b2a:	83 ec 18             	sub    esp,0x18
c0008b2d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b31:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008b35:	50                   	push   eax
c0008b36:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b3a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b3e:	e8 0c fe ff ff       	call   c000894f <src_new>
c0008b43:	83 c4 10             	add    esp,0x10
c0008b46:	85 c0                	test   eax,eax
c0008b48:	75 06                	jne    c0008b50 <src_simple+0x28>
c0008b4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b4e:	eb 25                	jmp    c0008b75 <src_simple+0x4d>
c0008b50:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008b57:	89 c3                	mov    ebx,eax
c0008b59:	50                   	push   eax
c0008b5a:	50                   	push   eax
c0008b5b:	56                   	push   esi
c0008b5c:	53                   	push   ebx
c0008b5d:	e8 e2 f9 ff ff       	call   c0008544 <src_process>
c0008b62:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008b65:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b69:	e8 9a f9 ff ff       	call   c0008508 <src_delete>
c0008b6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b72:	83 c4 10             	add    esp,0x10
c0008b75:	83 c4 14             	add    esp,0x14
c0008b78:	5b                   	pop    ebx
c0008b79:	5e                   	pop    esi
c0008b7a:	c3                   	ret    

c0008b7b <src_short_to_float_array>:
c0008b7b:	53                   	push   ebx
c0008b7c:	83 ec 18             	sub    esp,0x18
c0008b7f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008b83:	85 db                	test   ebx,ebx
c0008b85:	74 54                	je     c0008bdb <src_short_to_float_array+0x60>
c0008b87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b8b:	4b                   	dec    ebx
c0008b8c:	83 ec 0c             	sub    esp,0xc
c0008b8f:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008b93:	50                   	push   eax
c0008b94:	e8 4a e0 01 00       	call   c0026be3 <__floatsidf>
c0008b99:	83 c4 10             	add    esp,0x10
c0008b9c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ba0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ba4:	68 00 00 00 3f       	push   0x3f000000
c0008ba9:	6a 00                	push   0x0
c0008bab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008baf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb3:	e8 c8 d9 01 00       	call   c0026580 <__muldf3>
c0008bb8:	59                   	pop    ecx
c0008bb9:	59                   	pop    ecx
c0008bba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008bbe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008bc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bca:	e8 84 e2 01 00       	call   c0026e53 <__truncdfsf2>
c0008bcf:	83 c4 10             	add    esp,0x10
c0008bd2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008bd6:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008bd9:	eb a8                	jmp    c0008b83 <src_short_to_float_array+0x8>
c0008bdb:	83 c4 18             	add    esp,0x18
c0008bde:	5b                   	pop    ebx
c0008bdf:	c3                   	ret    

c0008be0 <src_float_to_short_array>:
c0008be0:	56                   	push   esi
c0008be1:	53                   	push   ebx
c0008be2:	83 ec 14             	sub    esp,0x14
c0008be5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008be9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008bed:	85 db                	test   ebx,ebx
c0008bef:	0f 84 a4 00 00 00    	je     c0008c99 <src_float_to_short_array+0xb9>
c0008bf5:	83 ec 0c             	sub    esp,0xc
c0008bf8:	4b                   	dec    ebx
c0008bf9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008bfd:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008c00:	e8 72 e3 01 00       	call   c0026f77 <__extendsfdf2>
c0008c05:	83 c4 10             	add    esp,0x10
c0008c08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c0c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c10:	68 00 00 e0 41       	push   0x41e00000
c0008c15:	6a 00                	push   0x0
c0008c17:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c1f:	e8 5c d9 01 00       	call   c0026580 <__muldf3>
c0008c24:	83 c4 10             	add    esp,0x10
c0008c27:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c2b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c2f:	68 ff ff df 41       	push   0x41dfffff
c0008c34:	68 00 00 c0 ff       	push   0xffc00000
c0008c39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c41:	e8 07 e2 01 00       	call   c0026e4d <__gedf2>
c0008c46:	83 c4 10             	add    esp,0x10
c0008c49:	85 c0                	test   eax,eax
c0008c4b:	78 08                	js     c0008c55 <src_float_to_short_array+0x75>
c0008c4d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008c53:	eb 98                	jmp    c0008bed <src_float_to_short_array+0xd>
c0008c55:	68 00 00 e0 c1       	push   0xc1e00000
c0008c5a:	6a 00                	push   0x0
c0008c5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c64:	e8 e8 e1 01 00       	call   c0026e51 <__ledf2>
c0008c69:	83 c4 10             	add    esp,0x10
c0008c6c:	85 c0                	test   eax,eax
c0008c6e:	7f 0b                	jg     c0008c7b <src_float_to_short_array+0x9b>
c0008c70:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008c76:	e9 72 ff ff ff       	jmp    c0008bed <src_float_to_short_array+0xd>
c0008c7b:	50                   	push   eax
c0008c7c:	50                   	push   eax
c0008c7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c85:	e8 76 e3 01 00       	call   c0027000 <lrint>
c0008c8a:	83 c4 10             	add    esp,0x10
c0008c8d:	c1 f8 10             	sar    eax,0x10
c0008c90:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008c94:	e9 54 ff ff ff       	jmp    c0008bed <src_float_to_short_array+0xd>
c0008c99:	83 c4 14             	add    esp,0x14
c0008c9c:	5b                   	pop    ebx
c0008c9d:	5e                   	pop    esi
c0008c9e:	c3                   	ret    

c0008c9f <src_int_to_float_array>:
c0008c9f:	53                   	push   ebx
c0008ca0:	83 ec 18             	sub    esp,0x18
c0008ca3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ca7:	85 db                	test   ebx,ebx
c0008ca9:	74 52                	je     c0008cfd <src_int_to_float_array+0x5e>
c0008cab:	83 ec 0c             	sub    esp,0xc
c0008cae:	4b                   	dec    ebx
c0008caf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008cb3:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008cb6:	e8 28 df 01 00       	call   c0026be3 <__floatsidf>
c0008cbb:	83 c4 10             	add    esp,0x10
c0008cbe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cc2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cc6:	68 00 00 00 3e       	push   0x3e000000
c0008ccb:	6a 00                	push   0x0
c0008ccd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cd5:	e8 a6 d8 01 00       	call   c0026580 <__muldf3>
c0008cda:	59                   	pop    ecx
c0008cdb:	59                   	pop    ecx
c0008cdc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ce0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008ce4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cec:	e8 62 e1 01 00       	call   c0026e53 <__truncdfsf2>
c0008cf1:	83 c4 10             	add    esp,0x10
c0008cf4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cf8:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008cfb:	eb aa                	jmp    c0008ca7 <src_int_to_float_array+0x8>
c0008cfd:	83 c4 18             	add    esp,0x18
c0008d00:	5b                   	pop    ebx
c0008d01:	c3                   	ret    

c0008d02 <src_float_to_int_array>:
c0008d02:	56                   	push   esi
c0008d03:	53                   	push   ebx
c0008d04:	83 ec 14             	sub    esp,0x14
c0008d07:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d0b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d0f:	85 db                	test   ebx,ebx
c0008d11:	0f 84 a2 00 00 00    	je     c0008db9 <src_float_to_int_array+0xb7>
c0008d17:	83 ec 0c             	sub    esp,0xc
c0008d1a:	4b                   	dec    ebx
c0008d1b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008d1f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008d22:	e8 50 e2 01 00       	call   c0026f77 <__extendsfdf2>
c0008d27:	83 c4 10             	add    esp,0x10
c0008d2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d32:	68 00 00 e0 41       	push   0x41e00000
c0008d37:	6a 00                	push   0x0
c0008d39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d41:	e8 3a d8 01 00       	call   c0026580 <__muldf3>
c0008d46:	83 c4 10             	add    esp,0x10
c0008d49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d51:	68 ff ff df 41       	push   0x41dfffff
c0008d56:	68 00 00 c0 ff       	push   0xffc00000
c0008d5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d63:	e8 e5 e0 01 00       	call   c0026e4d <__gedf2>
c0008d68:	83 c4 10             	add    esp,0x10
c0008d6b:	85 c0                	test   eax,eax
c0008d6d:	78 09                	js     c0008d78 <src_float_to_int_array+0x76>
c0008d6f:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008d76:	eb 97                	jmp    c0008d0f <src_float_to_int_array+0xd>
c0008d78:	68 00 00 e0 c1       	push   0xc1e00000
c0008d7d:	6a 00                	push   0x0
c0008d7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d87:	e8 c5 e0 01 00       	call   c0026e51 <__ledf2>
c0008d8c:	83 c4 10             	add    esp,0x10
c0008d8f:	85 c0                	test   eax,eax
c0008d91:	7f 0c                	jg     c0008d9f <src_float_to_int_array+0x9d>
c0008d93:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008d9a:	e9 70 ff ff ff       	jmp    c0008d0f <src_float_to_int_array+0xd>
c0008d9f:	50                   	push   eax
c0008da0:	50                   	push   eax
c0008da1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008da5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008da9:	e8 52 e2 01 00       	call   c0027000 <lrint>
c0008dae:	83 c4 10             	add    esp,0x10
c0008db1:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008db4:	e9 56 ff ff ff       	jmp    c0008d0f <src_float_to_int_array+0xd>
c0008db9:	83 c4 14             	add    esp,0x14
c0008dbc:	5b                   	pop    ebx
c0008dbd:	5e                   	pop    esi
c0008dbe:	c3                   	ret    

c0008dbf <linear_vari_process>:
c0008dbf:	55                   	push   ebp
c0008dc0:	31 d2                	xor    edx,edx
c0008dc2:	57                   	push   edi
c0008dc3:	56                   	push   esi
c0008dc4:	53                   	push   ebx
c0008dc5:	83 ec 3c             	sub    esp,0x3c
c0008dc8:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008dcc:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008dd0:	0f 8e d3 07 00 00    	jle    c00095a9 <linear_vari_process+0x7ea>
c0008dd6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008dda:	ba 05 00 00 00       	mov    edx,0x5
c0008ddf:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008de2:	85 db                	test   ebx,ebx
c0008de4:	0f 84 bf 07 00 00    	je     c00095a9 <linear_vari_process+0x7ea>
c0008dea:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008ded:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008df1:	74 19                	je     c0008e0c <linear_vari_process+0x4d>
c0008df3:	31 d2                	xor    edx,edx
c0008df5:	39 c2                	cmp    edx,eax
c0008df7:	7d 0c                	jge    c0008e05 <linear_vari_process+0x46>
c0008df9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008dfb:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0008dfe:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0008e02:	42                   	inc    edx
c0008e03:	eb f0                	jmp    c0008df5 <linear_vari_process+0x36>
c0008e05:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008e0c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008e0f:	0f af d0             	imul   edx,eax
c0008e12:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008e15:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008e19:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008e20:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008e23:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008e2a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e2e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008e31:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e37:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e3b:	68 00 00 70 3f       	push   0x3f700000
c0008e40:	6a 00                	push   0x0
c0008e42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e4a:	e8 00 e0 01 00       	call   c0026e4f <__ltdf2>
c0008e4f:	83 c4 10             	add    esp,0x10
c0008e52:	ba 16 00 00 00       	mov    edx,0x16
c0008e57:	85 c0                	test   eax,eax
c0008e59:	0f 88 4a 07 00 00    	js     c00095a9 <linear_vari_process+0x7ea>
c0008e5f:	68 00 00 70 40       	push   0x40700000
c0008e64:	6a 00                	push   0x0
c0008e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e6e:	e8 be df 01 00       	call   c0026e31 <__gtdf2>
c0008e73:	83 c4 10             	add    esp,0x10
c0008e76:	ba 16 00 00 00       	mov    edx,0x16
c0008e7b:	85 c0                	test   eax,eax
c0008e7d:	0f 8f 26 07 00 00    	jg     c00095a9 <linear_vari_process+0x7ea>
c0008e83:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e87:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0008e8a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008e8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e95:	68 00 00 f0 3f       	push   0x3ff00000
c0008e9a:	6a 00                	push   0x0
c0008e9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ea0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ea4:	e8 a6 df 01 00       	call   c0026e4f <__ltdf2>
c0008ea9:	83 c4 10             	add    esp,0x10
c0008eac:	85 c0                	test   eax,eax
c0008eae:	0f 89 89 02 00 00    	jns    c000913d <linear_vari_process+0x37e>
c0008eb4:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0008eb7:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0008eba:	0f 8d 7d 02 00 00    	jge    c000913d <linear_vari_process+0x37e>
c0008ec0:	83 ec 0c             	sub    esp,0xc
c0008ec3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0008ec6:	e8 18 dd 01 00       	call   c0026be3 <__floatsidf>
c0008ecb:	83 c4 10             	add    esp,0x10
c0008ece:	89 04 24             	mov    DWORD PTR [esp],eax
c0008ed1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008ed5:	68 00 00 f0 3f       	push   0x3ff00000
c0008eda:	6a 00                	push   0x0
c0008edc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee4:	e8 1a d0 01 00       	call   c0025f03 <__adddf3>
c0008ee9:	83 c4 10             	add    esp,0x10
c0008eec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ef0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008ef4:	52                   	push   edx
c0008ef5:	50                   	push   eax
c0008ef6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008efa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008efe:	e8 7d d6 01 00       	call   c0026580 <__muldf3>
c0008f03:	5d                   	pop    ebp
c0008f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f08:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f0c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0008f0f:	e8 cf dc 01 00       	call   c0026be3 <__floatsidf>
c0008f14:	83 c4 10             	add    esp,0x10
c0008f17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f1b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f1f:	52                   	push   edx
c0008f20:	50                   	push   eax
c0008f21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f25:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f29:	e8 d5 cf 01 00       	call   c0025f03 <__adddf3>
c0008f2e:	59                   	pop    ecx
c0008f2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f33:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f37:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0008f3a:	e8 a4 dc 01 00       	call   c0026be3 <__floatsidf>
c0008f3f:	83 c4 10             	add    esp,0x10
c0008f42:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f46:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f4a:	52                   	push   edx
c0008f4b:	50                   	push   eax
c0008f4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f54:	e8 f4 de 01 00       	call   c0026e4d <__gedf2>
c0008f59:	83 c4 10             	add    esp,0x10
c0008f5c:	85 c0                	test   eax,eax
c0008f5e:	0f 89 d9 01 00 00    	jns    c000913d <linear_vari_process+0x37e>
c0008f64:	85 ff                	test   edi,edi
c0008f66:	0f 8e f4 00 00 00    	jle    c0009060 <linear_vari_process+0x2a1>
c0008f6c:	83 ec 10             	sub    esp,0x10
c0008f6f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008f72:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008f75:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0008f79:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0008f7c:	ff 30                	push   DWORD PTR [eax]
c0008f7e:	e8 d1 d5 01 00       	call   c0026554 <__subdf3>
c0008f83:	83 c4 18             	add    esp,0x18
c0008f86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f8e:	52                   	push   edx
c0008f8f:	50                   	push   eax
c0008f90:	e8 4b e0 01 00       	call   c0026fe0 <fabs>
c0008f95:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f99:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f9d:	83 c4 10             	add    esp,0x10
c0008fa0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0008fa5:	68 23 42 92 0c       	push   0xc924223
c0008faa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fb2:	e8 7a de 01 00       	call   c0026e31 <__gtdf2>
c0008fb7:	83 c4 10             	add    esp,0x10
c0008fba:	85 c0                	test   eax,eax
c0008fbc:	0f 8e 9e 00 00 00    	jle    c0009060 <linear_vari_process+0x2a1>
c0008fc2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008fc6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008fc9:	8b 00                	mov    eax,DWORD PTR [eax]
c0008fcb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008fcf:	89 04 24             	mov    DWORD PTR [esp],eax
c0008fd2:	52                   	push   edx
c0008fd3:	50                   	push   eax
c0008fd4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008fd7:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008fda:	e8 75 d5 01 00       	call   c0026554 <__subdf3>
c0008fdf:	59                   	pop    ecx
c0008fe0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008fe4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0008fe8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008feb:	e8 f3 db 01 00       	call   c0026be3 <__floatsidf>
c0008ff0:	83 c4 10             	add    esp,0x10
c0008ff3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ff7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008ffb:	52                   	push   edx
c0008ffc:	50                   	push   eax
c0008ffd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009001:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009005:	e8 76 d5 01 00       	call   c0026580 <__muldf3>
c000900a:	5f                   	pop    edi
c000900b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000900f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009013:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009016:	e8 c8 db 01 00       	call   c0026be3 <__floatsidf>
c000901b:	83 c4 10             	add    esp,0x10
c000901e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009022:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009026:	52                   	push   edx
c0009027:	50                   	push   eax
c0009028:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000902c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009030:	e8 2f d8 01 00       	call   c0026864 <__divdf3>
c0009035:	83 c4 10             	add    esp,0x10
c0009038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000903c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009040:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009044:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000904c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009050:	e8 ae ce 01 00       	call   c0025f03 <__adddf3>
c0009055:	83 c4 10             	add    esp,0x10
c0009058:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000905c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009060:	31 ff                	xor    edi,edi
c0009062:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c0009065:	0f 8e 9d 00 00 00    	jle    c0009108 <linear_vari_process+0x349>
c000906b:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c000906e:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009072:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009075:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0009079:	89 04 24             	mov    DWORD PTR [esp],eax
c000907c:	8b 06                	mov    eax,DWORD PTR [esi]
c000907e:	52                   	push   edx
c000907f:	52                   	push   edx
c0009080:	55                   	push   ebp
c0009081:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c0009084:	47                   	inc    edi
c0009085:	e8 0e c8 01 00       	call   c0025898 <__subsf3>
c000908a:	89 04 24             	mov    DWORD PTR [esp],eax
c000908d:	e8 e5 de 01 00       	call   c0026f77 <__extendsfdf2>
c0009092:	83 c4 10             	add    esp,0x10
c0009095:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009099:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000909d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090a1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090ad:	e8 ce d4 01 00       	call   c0026580 <__muldf3>
c00090b2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00090b5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00090b9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00090bd:	e8 b5 de 01 00       	call   c0026f77 <__extendsfdf2>
c00090c2:	83 c4 10             	add    esp,0x10
c00090c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090c9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00090cd:	52                   	push   edx
c00090ce:	50                   	push   eax
c00090cf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090d3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090d7:	e8 27 ce 01 00       	call   c0025f03 <__adddf3>
c00090dc:	59                   	pop    ecx
c00090dd:	5d                   	pop    ebp
c00090de:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090e2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00090e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090ea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090ee:	e8 60 dd 01 00       	call   c0026e53 <__truncdfsf2>
c00090f3:	83 c4 10             	add    esp,0x10
c00090f6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00090f9:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00090fd:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009100:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009103:	e9 5a ff ff ff       	jmp    c0009062 <linear_vari_process+0x2a3>
c0009108:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000910c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009110:	68 00 00 f0 3f       	push   0x3ff00000
c0009115:	6a 00                	push   0x0
c0009117:	e8 48 d7 01 00       	call   c0026864 <__divdf3>
c000911c:	83 c4 10             	add    esp,0x10
c000911f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009122:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009126:	52                   	push   edx
c0009127:	50                   	push   eax
c0009128:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	e8 ce cd 01 00       	call   c0025f03 <__adddf3>
c0009135:	83 c4 10             	add    esp,0x10
c0009138:	e9 50 fd ff ff       	jmp    c0008e8d <linear_vari_process+0xce>
c000913d:	50                   	push   eax
c000913e:	50                   	push   eax
c000913f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009143:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009147:	e8 b4 de 01 00       	call   c0027000 <lrint>
c000914c:	83 ec 0c             	sub    esp,0xc
c000914f:	50                   	push   eax
c0009150:	e8 8e da 01 00       	call   c0026be3 <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000915c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009166:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000916a:	e8 e5 d3 01 00       	call   c0026554 <__subdf3>
c000916f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009173:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009177:	83 c4 20             	add    esp,0x20
c000917a:	6a 00                	push   0x0
c000917c:	6a 00                	push   0x0
c000917e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009182:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009186:	e8 c4 dc 01 00       	call   c0026e4f <__ltdf2>
c000918b:	83 c4 10             	add    esp,0x10
c000918e:	85 c0                	test   eax,eax
c0009190:	79 1e                	jns    c00091b0 <linear_vari_process+0x3f1>
c0009192:	68 00 00 f0 3f       	push   0x3ff00000
c0009197:	6a 00                	push   0x0
c0009199:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000919d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a1:	e8 5d cd 01 00       	call   c0025f03 <__adddf3>
c00091a6:	83 c4 10             	add    esp,0x10
c00091a9:	89 04 24             	mov    DWORD PTR [esp],eax
c00091ac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00091b3:	83 ec 10             	sub    esp,0x10
c00091b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091c6:	e8 89 d3 01 00       	call   c0026554 <__subdf3>
c00091cb:	83 c4 18             	add    esp,0x18
c00091ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091d6:	52                   	push   edx
c00091d7:	50                   	push   eax
c00091d8:	e8 23 de 01 00       	call   c0027000 <lrint>
c00091dd:	83 c4 10             	add    esp,0x10
c00091e0:	0f af f8             	imul   edi,eax
c00091e3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00091e6:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00091e9:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00091ec:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c00091ef:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c00091f2:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00091f6:	0f 8d 13 03 00 00    	jge    c000950f <linear_vari_process+0x750>
c00091fc:	83 ec 0c             	sub    esp,0xc
c00091ff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009202:	e8 dc d9 01 00       	call   c0026be3 <__floatsidf>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000920e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009212:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009216:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000921a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000921e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009222:	e8 59 d3 01 00       	call   c0026580 <__muldf3>
c0009227:	89 3c 24             	mov    DWORD PTR [esp],edi
c000922a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000922e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009232:	e8 ac d9 01 00       	call   c0026be3 <__floatsidf>
c0009237:	83 c4 10             	add    esp,0x10
c000923a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000923e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009242:	52                   	push   edx
c0009243:	50                   	push   eax
c0009244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009248:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000924c:	e8 b2 cc 01 00       	call   c0025f03 <__adddf3>
c0009251:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009254:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009258:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000925c:	e8 82 d9 01 00       	call   c0026be3 <__floatsidf>
c0009261:	83 c4 10             	add    esp,0x10
c0009264:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009268:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000926c:	52                   	push   edx
c000926d:	50                   	push   eax
c000926e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009272:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009276:	e8 d4 db 01 00       	call   c0026e4f <__ltdf2>
c000927b:	83 c4 10             	add    esp,0x10
c000927e:	85 c0                	test   eax,eax
c0009280:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009284:	0f 89 85 02 00 00    	jns    c000950f <linear_vari_process+0x750>
c000928a:	85 c9                	test   ecx,ecx
c000928c:	0f 8e f5 00 00 00    	jle    c0009387 <linear_vari_process+0x5c8>
c0009292:	83 ec 10             	sub    esp,0x10
c0009295:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009298:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000929b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000929f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00092a2:	ff 30                	push   DWORD PTR [eax]
c00092a4:	e8 ab d2 01 00       	call   c0026554 <__subdf3>
c00092a9:	83 c4 18             	add    esp,0x18
c00092ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b4:	52                   	push   edx
c00092b5:	50                   	push   eax
c00092b6:	e8 25 dd 01 00       	call   c0026fe0 <fabs>
c00092bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092bf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092c3:	83 c4 10             	add    esp,0x10
c00092c6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00092cb:	68 23 42 92 0c       	push   0xc924223
c00092d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092d8:	e8 54 db 01 00       	call   c0026e31 <__gtdf2>
c00092dd:	83 c4 10             	add    esp,0x10
c00092e0:	85 c0                	test   eax,eax
c00092e2:	0f 8e 9f 00 00 00    	jle    c0009387 <linear_vari_process+0x5c8>
c00092e8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00092ec:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00092ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00092f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00092f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00092f9:	52                   	push   edx
c00092fa:	50                   	push   eax
c00092fb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00092fe:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009301:	e8 4e d2 01 00       	call   c0026554 <__subdf3>
c0009306:	5f                   	pop    edi
c0009307:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000930b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000930f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009312:	e8 cc d8 01 00       	call   c0026be3 <__floatsidf>
c0009317:	83 c4 10             	add    esp,0x10
c000931a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000931e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009322:	52                   	push   edx
c0009323:	50                   	push   eax
c0009324:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009328:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000932c:	e8 4f d2 01 00       	call   c0026580 <__muldf3>
c0009331:	5d                   	pop    ebp
c0009332:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009336:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000933a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000933d:	e8 a1 d8 01 00       	call   c0026be3 <__floatsidf>
c0009342:	83 c4 10             	add    esp,0x10
c0009345:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009349:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000934d:	52                   	push   edx
c000934e:	50                   	push   eax
c000934f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009353:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009357:	e8 08 d5 01 00       	call   c0026864 <__divdf3>
c000935c:	83 c4 10             	add    esp,0x10
c000935f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009363:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009367:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000936b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000936f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009373:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009377:	e8 87 cb 01 00       	call   c0025f03 <__adddf3>
c000937c:	83 c4 10             	add    esp,0x10
c000937f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009383:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009387:	31 ff                	xor    edi,edi
c0009389:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000938c:	39 f8                	cmp    eax,edi
c000938e:	0f 8e ac 00 00 00    	jle    c0009440 <linear_vari_process+0x681>
c0009394:	8b 16                	mov    edx,DWORD PTR [esi]
c0009396:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0009399:	29 c1                	sub    ecx,eax
c000939b:	89 c8                	mov    eax,ecx
c000939d:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00093a0:	01 f8                	add    eax,edi
c00093a2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00093a6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00093a9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00093ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093b0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00093b3:	51                   	push   ecx
c00093b4:	01 f8                	add    eax,edi
c00093b6:	51                   	push   ecx
c00093b7:	47                   	inc    edi
c00093b8:	55                   	push   ebp
c00093b9:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00093bc:	e8 d7 c4 01 00       	call   c0025898 <__subsf3>
c00093c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c4:	e8 ae db 01 00       	call   c0026f77 <__extendsfdf2>
c00093c9:	83 c4 10             	add    esp,0x10
c00093cc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00093d0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00093d4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00093d8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00093dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093e4:	e8 97 d1 01 00       	call   c0026580 <__muldf3>
c00093e9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00093ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00093f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00093f4:	e8 7e db 01 00       	call   c0026f77 <__extendsfdf2>
c00093f9:	83 c4 10             	add    esp,0x10
c00093fc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009400:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009404:	52                   	push   edx
c0009405:	50                   	push   eax
c0009406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000940a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000940e:	e8 f0 ca 01 00       	call   c0025f03 <__adddf3>
c0009413:	5d                   	pop    ebp
c0009414:	59                   	pop    ecx
c0009415:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009419:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000941d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009421:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009425:	e8 29 da 01 00       	call   c0026e53 <__truncdfsf2>
c000942a:	83 c4 10             	add    esp,0x10
c000942d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009431:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009435:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009438:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000943b:	e9 49 ff ff ff       	jmp    c0009389 <linear_vari_process+0x5ca>
c0009440:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009444:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009448:	68 00 00 f0 3f       	push   0x3ff00000
c000944d:	6a 00                	push   0x0
c000944f:	e8 10 d4 01 00       	call   c0026864 <__divdf3>
c0009454:	83 c4 10             	add    esp,0x10
c0009457:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000945f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009463:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009467:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946f:	e8 8f ca 01 00       	call   c0025f03 <__adddf3>
c0009474:	59                   	pop    ecx
c0009475:	5f                   	pop    edi
c0009476:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000947a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000947e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009482:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009486:	e8 75 db 01 00       	call   c0027000 <lrint>
c000948b:	83 ec 0c             	sub    esp,0xc
c000948e:	50                   	push   eax
c000948f:	e8 4f d7 01 00       	call   c0026be3 <__floatsidf>
c0009494:	83 c4 10             	add    esp,0x10
c0009497:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000949b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000949f:	52                   	push   edx
c00094a0:	50                   	push   eax
c00094a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094a9:	e8 a6 d0 01 00       	call   c0026554 <__subdf3>
c00094ae:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00094b2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00094b6:	83 c4 20             	add    esp,0x20
c00094b9:	6a 00                	push   0x0
c00094bb:	6a 00                	push   0x0
c00094bd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094c1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094c5:	e8 85 d9 01 00       	call   c0026e4f <__ltdf2>
c00094ca:	83 c4 10             	add    esp,0x10
c00094cd:	85 c0                	test   eax,eax
c00094cf:	79 1e                	jns    c00094ef <linear_vari_process+0x730>
c00094d1:	68 00 00 f0 3f       	push   0x3ff00000
c00094d6:	6a 00                	push   0x0
c00094d8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094dc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094e0:	e8 1e ca 01 00       	call   c0025f03 <__adddf3>
c00094e5:	83 c4 10             	add    esp,0x10
c00094e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00094eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00094ef:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00094f2:	83 ec 10             	sub    esp,0x10
c00094f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009501:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009505:	e8 4a d0 01 00       	call   c0026554 <__subdf3>
c000950a:	e9 bc fc ff ff       	jmp    c00091cb <linear_vari_process+0x40c>
c000950f:	39 fd                	cmp    ebp,edi
c0009511:	7d 38                	jge    c000954b <linear_vari_process+0x78c>
c0009513:	83 ec 0c             	sub    esp,0xc
c0009516:	89 f8                	mov    eax,edi
c0009518:	29 e8                	sub    eax,ebp
c000951a:	99                   	cdq    
c000951b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000951e:	50                   	push   eax
c000951f:	e8 bf d6 01 00       	call   c0026be3 <__floatsidf>
c0009524:	83 c4 10             	add    esp,0x10
c0009527:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000952b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000952f:	52                   	push   edx
c0009530:	50                   	push   eax
c0009531:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009535:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009539:	e8 c5 c9 01 00       	call   c0025f03 <__adddf3>
c000953e:	83 c4 10             	add    esp,0x10
c0009541:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009544:	89 04 24             	mov    DWORD PTR [esp],eax
c0009547:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000954b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000954f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009552:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009556:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0009559:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000955c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000955f:	85 c0                	test   eax,eax
c0009561:	7f 29                	jg     c000958c <linear_vari_process+0x7cd>
c0009563:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000956b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000956f:	89 01                	mov    DWORD PTR [ecx],eax
c0009571:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0009574:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009577:	99                   	cdq    
c0009578:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000957b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000957e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009581:	99                   	cdq    
c0009582:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009585:	31 d2                	xor    edx,edx
c0009587:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000958a:	eb 1d                	jmp    c00095a9 <linear_vari_process+0x7ea>
c000958c:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000958f:	31 d2                	xor    edx,edx
c0009591:	29 c8                	sub    eax,ecx
c0009593:	c1 e0 02             	shl    eax,0x2
c0009596:	39 d1                	cmp    ecx,edx
c0009598:	7e c9                	jle    c0009563 <linear_vari_process+0x7a4>
c000959a:	8b 3e                	mov    edi,DWORD PTR [esi]
c000959c:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c000959f:	83 c0 04             	add    eax,0x4
c00095a2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00095a6:	42                   	inc    edx
c00095a7:	eb ed                	jmp    c0009596 <linear_vari_process+0x7d7>
c00095a9:	83 c4 3c             	add    esp,0x3c
c00095ac:	89 d0                	mov    eax,edx
c00095ae:	5b                   	pop    ebx
c00095af:	5e                   	pop    esi
c00095b0:	5f                   	pop    edi
c00095b1:	5d                   	pop    ebp
c00095b2:	c3                   	ret    

c00095b3 <linear_reset>:
c00095b3:	83 ec 0c             	sub    esp,0xc
c00095b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00095ba:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00095bd:	85 c0                	test   eax,eax
c00095bf:	74 20                	je     c00095e1 <linear_reset+0x2e>
c00095c1:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00095c4:	83 c0 1c             	add    eax,0x1c
c00095c7:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00095ca:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00095d1:	c1 e2 02             	shl    edx,0x2
c00095d4:	51                   	push   ecx
c00095d5:	52                   	push   edx
c00095d6:	6a 00                	push   0x0
c00095d8:	50                   	push   eax
c00095d9:	e8 ad 70 ff ff       	call   c000068b <memset>
c00095de:	83 c4 10             	add    esp,0x10
c00095e1:	83 c4 0c             	add    esp,0xc
c00095e4:	c3                   	ret    

c00095e5 <linear_get_name>:
c00095e5:	31 c0                	xor    eax,eax
c00095e7:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095ec:	75 05                	jne    c00095f3 <linear_get_name+0xe>
c00095ee:	b8 00 87 02 c0       	mov    eax,0xc0028700
c00095f3:	c3                   	ret    

c00095f4 <linear_get_description>:
c00095f4:	31 c0                	xor    eax,eax
c00095f6:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095fb:	75 05                	jne    c0009602 <linear_get_description+0xe>
c00095fd:	b8 14 87 02 c0       	mov    eax,0xc0028714
c0009602:	c3                   	ret    

c0009603 <linear_set_converter>:
c0009603:	53                   	push   ebx
c0009604:	b8 0a 00 00 00       	mov    eax,0xa
c0009609:	83 ec 08             	sub    esp,0x8
c000960c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009610:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009615:	75 6e                	jne    c0009685 <linear_set_converter+0x82>
c0009617:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000961a:	85 c0                	test   eax,eax
c000961c:	74 13                	je     c0009631 <linear_set_converter+0x2e>
c000961e:	83 ec 0c             	sub    esp,0xc
c0009621:	50                   	push   eax
c0009622:	e8 bd 5e 00 00       	call   c000f4e4 <free>
c0009627:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000962e:	83 c4 10             	add    esp,0x10
c0009631:	50                   	push   eax
c0009632:	50                   	push   eax
c0009633:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009636:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000963d:	50                   	push   eax
c000963e:	6a 01                	push   0x1
c0009640:	e8 bf 5e 00 00       	call   c000f504 <calloc>
c0009645:	83 c4 10             	add    esp,0x10
c0009648:	89 c2                	mov    edx,eax
c000964a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000964d:	85 d2                	test   edx,edx
c000964f:	b8 01 00 00 00       	mov    eax,0x1
c0009654:	74 2f                	je     c0009685 <linear_set_converter+0x82>
c0009656:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009659:	83 ec 0c             	sub    esp,0xc
c000965c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000965f:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009665:	c7 43 24 bf 8d 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008dbf
c000966c:	c7 43 20 bf 8d 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008dbf
c0009673:	c7 43 28 b3 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095b3
c000967a:	53                   	push   ebx
c000967b:	e8 33 ff ff ff       	call   c00095b3 <linear_reset>
c0009680:	83 c4 10             	add    esp,0x10
c0009683:	31 c0                	xor    eax,eax
c0009685:	83 c4 08             	add    esp,0x8
c0009688:	5b                   	pop    ebx
c0009689:	c3                   	ret    

c000968a <int_to_fp>:
c000968a:	c1 e0 0c             	shl    eax,0xc
c000968d:	c3                   	ret    

c000968e <fp_to_int>:
c000968e:	c1 f8 0c             	sar    eax,0xc
c0009691:	c3                   	ret    

c0009692 <fp_fraction_part>:
c0009692:	25 ff 0f 00 00       	and    eax,0xfff
c0009697:	c3                   	ret    

c0009698 <fp_to_double>:
c0009698:	83 ec 1c             	sub    esp,0x1c
c000969b:	e8 f2 ff ff ff       	call   c0009692 <fp_fraction_part>
c00096a0:	83 ec 0c             	sub    esp,0xc
c00096a3:	50                   	push   eax
c00096a4:	e8 3a d5 01 00       	call   c0026be3 <__floatsidf>
c00096a9:	83 c4 10             	add    esp,0x10
c00096ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096b4:	68 00 00 30 3f       	push   0x3f300000
c00096b9:	6a 00                	push   0x0
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c3:	e8 b8 ce 01 00       	call   c0026580 <__muldf3>
c00096c8:	83 c4 2c             	add    esp,0x2c
c00096cb:	c3                   	ret    

c00096cc <calc_output_single>:
c00096cc:	55                   	push   ebp
c00096cd:	57                   	push   edi
c00096ce:	56                   	push   esi
c00096cf:	89 c6                	mov    esi,eax
c00096d1:	53                   	push   ebx
c00096d2:	89 d3                	mov    ebx,edx
c00096d4:	83 ec 4c             	sub    esp,0x4c
c00096d7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00096db:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00096de:	e8 a7 ff ff ff       	call   c000968a <int_to_fp>
c00096e3:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00096e6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00096ea:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00096ee:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c00096f2:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c00096f5:	99                   	cdq    
c00096f6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00096fe:	f7 fb                	idiv   ebx
c0009700:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009708:	89 da                	mov    edx,ebx
c000970a:	0f af d0             	imul   edx,eax
c000970d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009711:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009715:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009719:	29 c2                	sub    edx,eax
c000971b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000971e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009722:	83 c5 04             	add    ebp,0x4
c0009725:	e8 6e ff ff ff       	call   c0009698 <fp_to_double>
c000972a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000972e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009736:	e8 53 ff ff ff       	call   c000968e <fp_to_int>
c000973b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000973e:	52                   	push   edx
c000973f:	52                   	push   edx
c0009740:	51                   	push   ecx
c0009741:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009745:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009749:	e8 4a c1 01 00       	call   c0025898 <__subsf3>
c000974e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009751:	e8 21 d8 01 00       	call   c0026f77 <__extendsfdf2>
c0009756:	83 c4 10             	add    esp,0x10
c0009759:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000975d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009761:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009765:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009769:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000976d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009771:	e8 0a ce 01 00       	call   c0026580 <__muldf3>
c0009776:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000977a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000977e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009781:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009785:	e8 ed d7 01 00       	call   c0026f77 <__extendsfdf2>
c000978a:	83 c4 10             	add    esp,0x10
c000978d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009791:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009795:	52                   	push   edx
c0009796:	50                   	push   eax
c0009797:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000979b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000979f:	e8 5f c7 01 00       	call   c0025f03 <__adddf3>
c00097a4:	59                   	pop    ecx
c00097a5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00097a9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00097ad:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00097b3:	e8 bf d7 01 00       	call   c0026f77 <__extendsfdf2>
c00097b8:	83 c4 10             	add    esp,0x10
c00097bb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097bf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097c3:	52                   	push   edx
c00097c4:	50                   	push   eax
c00097c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097cd:	e8 ae cd 01 00       	call   c0026580 <__muldf3>
c00097d2:	83 c4 10             	add    esp,0x10
c00097d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00097d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00097dd:	52                   	push   edx
c00097de:	50                   	push   eax
c00097df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097e7:	e8 17 c7 01 00       	call   c0025f03 <__adddf3>
c00097ec:	83 c4 10             	add    esp,0x10
c00097ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00097f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00097f7:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c00097fb:	0f 89 1d ff ff ff    	jns    c000971e <calc_output_single+0x52>
c0009801:	89 d9                	mov    ecx,ebx
c0009803:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009807:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000980b:	89 dd                	mov    ebp,ebx
c000980d:	29 c8                	sub    eax,ecx
c000980f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009817:	99                   	cdq    
c0009818:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009820:	f7 fb                	idiv   ebx
c0009822:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009826:	0f af e8             	imul   ebp,eax
c0009829:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c000982d:	01 cd                	add    ebp,ecx
c000982f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009832:	89 e8                	mov    eax,ebp
c0009834:	83 ee 04             	sub    esi,0x4
c0009837:	e8 5c fe ff ff       	call   c0009698 <fp_to_double>
c000983c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009840:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009844:	89 e8                	mov    eax,ebp
c0009846:	29 dd                	sub    ebp,ebx
c0009848:	e8 41 fe ff ff       	call   c000968e <fp_to_int>
c000984d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009850:	52                   	push   edx
c0009851:	52                   	push   edx
c0009852:	51                   	push   ecx
c0009853:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009857:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000985b:	e8 38 c0 01 00       	call   c0025898 <__subsf3>
c0009860:	89 04 24             	mov    DWORD PTR [esp],eax
c0009863:	e8 0f d7 01 00       	call   c0026f77 <__extendsfdf2>
c0009868:	83 c4 10             	add    esp,0x10
c000986b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000986f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009873:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009877:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000987b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000987f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009883:	e8 f8 cc 01 00       	call   c0026580 <__muldf3>
c0009888:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000988c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009890:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009893:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009897:	e8 db d6 01 00       	call   c0026f77 <__extendsfdf2>
c000989c:	83 c4 10             	add    esp,0x10
c000989f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098a3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098a7:	52                   	push   edx
c00098a8:	50                   	push   eax
c00098a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098b1:	e8 4d c6 01 00       	call   c0025f03 <__adddf3>
c00098b6:	59                   	pop    ecx
c00098b7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00098bb:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00098bf:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c00098c5:	e8 ad d6 01 00       	call   c0026f77 <__extendsfdf2>
c00098ca:	83 c4 10             	add    esp,0x10
c00098cd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098d1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098d5:	52                   	push   edx
c00098d6:	50                   	push   eax
c00098d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098db:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098df:	e8 9c cc 01 00       	call   c0026580 <__muldf3>
c00098e4:	83 c4 10             	add    esp,0x10
c00098e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00098eb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00098ef:	52                   	push   edx
c00098f0:	50                   	push   eax
c00098f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098f9:	e8 05 c6 01 00       	call   c0025f03 <__adddf3>
c00098fe:	83 c4 10             	add    esp,0x10
c0009901:	85 ed                	test   ebp,ebp
c0009903:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009907:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000990b:	0f 8f 21 ff ff ff    	jg     c0009832 <calc_output_single+0x166>
c0009911:	52                   	push   edx
c0009912:	50                   	push   eax
c0009913:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009917:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000991b:	e8 e3 c5 01 00       	call   c0025f03 <__adddf3>
c0009920:	83 c4 5c             	add    esp,0x5c
c0009923:	5b                   	pop    ebx
c0009924:	5e                   	pop    esi
c0009925:	5f                   	pop    edi
c0009926:	5d                   	pop    ebp
c0009927:	c3                   	ret    

c0009928 <calc_output_stereo>:
c0009928:	55                   	push   ebp
c0009929:	89 cd                	mov    ebp,ecx
c000992b:	57                   	push   edi
c000992c:	56                   	push   esi
c000992d:	53                   	push   ebx
c000992e:	89 c3                	mov    ebx,eax
c0009930:	83 ec 6c             	sub    esp,0x6c
c0009933:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009937:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000993e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009945:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009949:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000994d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009950:	e8 35 fd ff ff       	call   c000968a <int_to_fp>
c0009955:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000995d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009961:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009969:	29 c8                	sub    eax,ecx
c000996b:	99                   	cdq    
c000996c:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009970:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009974:	0f af d0             	imul   edx,eax
c0009977:	8d 34 0a             	lea    esi,[edx+ecx*1]
c000997a:	31 d2                	xor    edx,edx
c000997c:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009980:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009984:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009987:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000998b:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c000998e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009992:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009996:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009999:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000999e:	29 c1                	sub    ecx,eax
c00099a0:	31 c0                	xor    eax,eax
c00099a2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c00099a5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00099a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099ad:	83 c7 08             	add    edi,0x8
c00099b0:	e8 e3 fc ff ff       	call   c0009698 <fp_to_double>
c00099b5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00099b9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00099bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099c1:	e8 c8 fc ff ff       	call   c000968e <fp_to_int>
c00099c6:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c00099c9:	52                   	push   edx
c00099ca:	52                   	push   edx
c00099cb:	51                   	push   ecx
c00099cc:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c00099d0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c00099d4:	e8 bf be 01 00       	call   c0025898 <__subsf3>
c00099d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00099dc:	e8 96 d5 01 00       	call   c0026f77 <__extendsfdf2>
c00099e1:	83 c4 10             	add    esp,0x10
c00099e4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00099e8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c00099ec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00099f0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00099f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00099f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00099fc:	e8 7f cb 01 00       	call   c0026580 <__muldf3>
c0009a01:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009a05:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009a09:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a0c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009a10:	e8 62 d5 01 00       	call   c0026f77 <__extendsfdf2>
c0009a15:	83 c4 10             	add    esp,0x10
c0009a18:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a1c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a20:	52                   	push   edx
c0009a21:	50                   	push   eax
c0009a22:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a26:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a2a:	e8 d4 c4 01 00       	call   c0025f03 <__adddf3>
c0009a2f:	59                   	pop    ecx
c0009a30:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009a34:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009a38:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009a3e:	e8 34 d5 01 00       	call   c0026f77 <__extendsfdf2>
c0009a43:	83 c4 10             	add    esp,0x10
c0009a46:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a4a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a4e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a52:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a56:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a5a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a5e:	e8 1d cb 01 00       	call   c0026580 <__muldf3>
c0009a63:	83 c4 10             	add    esp,0x10
c0009a66:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a6a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a6e:	52                   	push   edx
c0009a6f:	50                   	push   eax
c0009a70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a78:	e8 86 c4 01 00       	call   c0025f03 <__adddf3>
c0009a7d:	59                   	pop    ecx
c0009a7e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009a82:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009a86:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009a8c:	e8 e6 d4 01 00       	call   c0026f77 <__extendsfdf2>
c0009a91:	83 c4 10             	add    esp,0x10
c0009a94:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a98:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a9c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009aa0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009aa4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009aa8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009aac:	e8 cf ca 01 00       	call   c0026580 <__muldf3>
c0009ab1:	83 c4 10             	add    esp,0x10
c0009ab4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009ab8:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009abc:	52                   	push   edx
c0009abd:	50                   	push   eax
c0009abe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ac2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ac6:	e8 38 c4 01 00       	call   c0025f03 <__adddf3>
c0009acb:	83 c4 10             	add    esp,0x10
c0009ace:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ad2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ad6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ada:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009ade:	0f 89 c5 fe ff ff    	jns    c00099a9 <calc_output_stereo+0x81>
c0009ae4:	29 e9                	sub    ecx,ebp
c0009ae6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009aea:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009aee:	29 c8                	sub    eax,ecx
c0009af0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009af8:	99                   	cdq    
c0009af9:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009afd:	31 d2                	xor    edx,edx
c0009aff:	0f af f8             	imul   edi,eax
c0009b02:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b06:	40                   	inc    eax
c0009b07:	01 cf                	add    edi,ecx
c0009b09:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009b0e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009b12:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009b1a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009b1d:	31 c0                	xor    eax,eax
c0009b1f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b23:	89 f8                	mov    eax,edi
c0009b25:	83 eb 08             	sub    ebx,0x8
c0009b28:	e8 6b fb ff ff       	call   c0009698 <fp_to_double>
c0009b2d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009b31:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009b35:	89 f8                	mov    eax,edi
c0009b37:	e8 52 fb ff ff       	call   c000968e <fp_to_int>
c0009b3c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009b3f:	52                   	push   edx
c0009b40:	52                   	push   edx
c0009b41:	55                   	push   ebp
c0009b42:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009b46:	e8 4d bd 01 00       	call   c0025898 <__subsf3>
c0009b4b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b4e:	e8 24 d4 01 00       	call   c0026f77 <__extendsfdf2>
c0009b53:	83 c4 10             	add    esp,0x10
c0009b56:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b5a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b62:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b6a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b6e:	e8 0d ca 01 00       	call   c0026580 <__muldf3>
c0009b73:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009b76:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b7a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b7e:	e8 f4 d3 01 00       	call   c0026f77 <__extendsfdf2>
c0009b83:	83 c4 10             	add    esp,0x10
c0009b86:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b8a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b8e:	52                   	push   edx
c0009b8f:	50                   	push   eax
c0009b90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009b94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009b98:	e8 66 c3 01 00       	call   c0025f03 <__adddf3>
c0009b9d:	59                   	pop    ecx
c0009b9e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009ba2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009ba6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009bac:	e8 c6 d3 01 00       	call   c0026f77 <__extendsfdf2>
c0009bb1:	83 c4 10             	add    esp,0x10
c0009bb4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bbc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bc0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bc4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bc8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bcc:	e8 af c9 01 00       	call   c0026580 <__muldf3>
c0009bd1:	83 c4 10             	add    esp,0x10
c0009bd4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bd8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bdc:	52                   	push   edx
c0009bdd:	50                   	push   eax
c0009bde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009be2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009be6:	e8 18 c3 01 00       	call   c0025f03 <__adddf3>
c0009beb:	5d                   	pop    ebp
c0009bec:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009bf0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009bf4:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009bfa:	e8 78 d3 01 00       	call   c0026f77 <__extendsfdf2>
c0009bff:	83 c4 10             	add    esp,0x10
c0009c02:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c06:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c0a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c0e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c12:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c16:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c1a:	e8 61 c9 01 00       	call   c0026580 <__muldf3>
c0009c1f:	83 c4 10             	add    esp,0x10
c0009c22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009c26:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009c2a:	52                   	push   edx
c0009c2b:	50                   	push   eax
c0009c2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c30:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c34:	e8 ca c2 01 00       	call   c0025f03 <__adddf3>
c0009c39:	83 c4 10             	add    esp,0x10
c0009c3c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009c40:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009c44:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009c48:	85 ff                	test   edi,edi
c0009c4a:	0f 8f d3 fe ff ff    	jg     c0009b23 <calc_output_stereo+0x1fb>
c0009c50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c60:	e8 9e c2 01 00       	call   c0025f03 <__adddf3>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c6c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009c70:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c74:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c80:	e8 fb c8 01 00       	call   c0026580 <__muldf3>
c0009c85:	59                   	pop    ecx
c0009c86:	5b                   	pop    ebx
c0009c87:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009c8b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c97:	e8 b7 d1 01 00       	call   c0026e53 <__truncdfsf2>
c0009c9c:	83 c4 10             	add    esp,0x10
c0009c9f:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ca6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ca8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cb0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cb8:	e8 46 c2 01 00       	call   c0025f03 <__adddf3>
c0009cbd:	83 c4 10             	add    esp,0x10
c0009cc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009cc4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009cc8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ccc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cd4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cd8:	e8 a3 c8 01 00       	call   c0026580 <__muldf3>
c0009cdd:	5e                   	pop    esi
c0009cde:	5f                   	pop    edi
c0009cdf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ce3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ceb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cef:	e8 5f d1 01 00       	call   c0026e53 <__truncdfsf2>
c0009cf4:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009cfb:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009cfe:	83 c4 7c             	add    esp,0x7c
c0009d01:	5b                   	pop    ebx
c0009d02:	5e                   	pop    esi
c0009d03:	5f                   	pop    edi
c0009d04:	5d                   	pop    ebp
c0009d05:	c3                   	ret    

c0009d06 <calc_output_quad>:
c0009d06:	55                   	push   ebp
c0009d07:	57                   	push   edi
c0009d08:	56                   	push   esi
c0009d09:	89 c6                	mov    esi,eax
c0009d0b:	53                   	push   ebx
c0009d0c:	83 ec 7c             	sub    esp,0x7c
c0009d0f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d13:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009d17:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009d1e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009d25:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d29:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d2d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009d30:	e8 55 f9 ff ff       	call   c000968a <int_to_fp>
c0009d35:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009d38:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009d3b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009d3f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009d43:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009d47:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009d4b:	99                   	cdq    
c0009d4c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009d50:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d54:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009d57:	31 d2                	xor    edx,edx
c0009d59:	0f af d8             	imul   ebx,eax
c0009d5c:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009d64:	0f af c7             	imul   eax,edi
c0009d67:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009d6b:	29 c1                	sub    ecx,eax
c0009d6d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009d75:	31 c0                	xor    eax,eax
c0009d77:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009d7a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d7e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d82:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d86:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d8a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d8e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d92:	89 d8                	mov    eax,ebx
c0009d94:	83 c7 10             	add    edi,0x10
c0009d97:	e8 fc f8 ff ff       	call   c0009698 <fp_to_double>
c0009d9c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009da0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009da4:	89 d8                	mov    eax,ebx
c0009da6:	e8 e3 f8 ff ff       	call   c000968e <fp_to_int>
c0009dab:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009daf:	52                   	push   edx
c0009db0:	52                   	push   edx
c0009db1:	51                   	push   ecx
c0009db2:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009db6:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009dba:	e8 d9 ba 01 00       	call   c0025898 <__subsf3>
c0009dbf:	89 04 24             	mov    DWORD PTR [esp],eax
c0009dc2:	e8 b0 d1 01 00       	call   c0026f77 <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009dce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009dd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dda:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009dde:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009de2:	e8 99 c7 01 00       	call   c0026580 <__muldf3>
c0009de7:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0009deb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009def:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009df2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009df6:	e8 7c d1 01 00       	call   c0026f77 <__extendsfdf2>
c0009dfb:	83 c4 10             	add    esp,0x10
c0009dfe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e02:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e06:	52                   	push   edx
c0009e07:	50                   	push   eax
c0009e08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e0c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e10:	e8 ee c0 01 00       	call   c0025f03 <__adddf3>
c0009e15:	59                   	pop    ecx
c0009e16:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e1a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e1e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c0009e24:	e8 4e d1 01 00       	call   c0026f77 <__extendsfdf2>
c0009e29:	83 c4 10             	add    esp,0x10
c0009e2c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e30:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e3c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e40:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e44:	e8 37 c7 01 00       	call   c0026580 <__muldf3>
c0009e49:	83 c4 10             	add    esp,0x10
c0009e4c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e50:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e54:	52                   	push   edx
c0009e55:	50                   	push   eax
c0009e56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e5e:	e8 a0 c0 01 00       	call   c0025f03 <__adddf3>
c0009e63:	59                   	pop    ecx
c0009e64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009e68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009e6c:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c0009e72:	e8 00 d1 01 00       	call   c0026f77 <__extendsfdf2>
c0009e77:	83 c4 10             	add    esp,0x10
c0009e7a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e7e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e8a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e8e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e92:	e8 e9 c6 01 00       	call   c0026580 <__muldf3>
c0009e97:	83 c4 10             	add    esp,0x10
c0009e9a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e9e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ea2:	52                   	push   edx
c0009ea3:	50                   	push   eax
c0009ea4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ea8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009eac:	e8 52 c0 01 00       	call   c0025f03 <__adddf3>
c0009eb1:	59                   	pop    ecx
c0009eb2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009eb6:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009eba:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009ec0:	e8 b2 d0 01 00       	call   c0026f77 <__extendsfdf2>
c0009ec5:	83 c4 10             	add    esp,0x10
c0009ec8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ecc:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ed0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ed4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ed8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009edc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ee0:	e8 9b c6 01 00       	call   c0026580 <__muldf3>
c0009ee5:	83 c4 10             	add    esp,0x10
c0009ee8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009eec:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ef0:	52                   	push   edx
c0009ef1:	50                   	push   eax
c0009ef2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009ef6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009efa:	e8 04 c0 01 00       	call   c0025f03 <__adddf3>
c0009eff:	59                   	pop    ecx
c0009f00:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009f04:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009f08:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009f0e:	e8 64 d0 01 00       	call   c0026f77 <__extendsfdf2>
c0009f13:	83 c4 10             	add    esp,0x10
c0009f16:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f1a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f26:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f2a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f2e:	e8 4d c6 01 00       	call   c0026580 <__muldf3>
c0009f33:	83 c4 10             	add    esp,0x10
c0009f36:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f3a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009f3e:	52                   	push   edx
c0009f3f:	50                   	push   eax
c0009f40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f44:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f48:	e8 b6 bf 01 00       	call   c0025f03 <__adddf3>
c0009f4d:	83 c4 10             	add    esp,0x10
c0009f50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009f54:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009f58:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c0009f5c:	0f 89 30 fe ff ff    	jns    c0009d92 <calc_output_quad+0x8c>
c0009f62:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0009f66:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009f6a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f6e:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0009f72:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0009f7a:	29 c8                	sub    eax,ecx
c0009f7c:	99                   	cdq    
c0009f7d:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f81:	31 d2                	xor    edx,edx
c0009f83:	0f af d8             	imul   ebx,eax
c0009f86:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009f8a:	40                   	inc    eax
c0009f8b:	01 cb                	add    ebx,ecx
c0009f8d:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0009f92:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009f96:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c0009f9a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009f9e:	8d 34 86             	lea    esi,[esi+eax*4]
c0009fa1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0009fa9:	31 c0                	xor    eax,eax
c0009fab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009faf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009fb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009fb7:	89 d8                	mov    eax,ebx
c0009fb9:	83 ee 10             	sub    esi,0x10
c0009fbc:	e8 d7 f6 ff ff       	call   c0009698 <fp_to_double>
c0009fc1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fc5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fc9:	89 d8                	mov    eax,ebx
c0009fcb:	e8 be f6 ff ff       	call   c000968e <fp_to_int>
c0009fd0:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c0009fd4:	52                   	push   edx
c0009fd5:	52                   	push   edx
c0009fd6:	57                   	push   edi
c0009fd7:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fdb:	e8 b8 b8 01 00       	call   c0025898 <__subsf3>
c0009fe0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fe3:	e8 8f cf 01 00       	call   c0026f77 <__extendsfdf2>
c0009fe8:	83 c4 10             	add    esp,0x10
c0009feb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fef:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ff3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ffb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009fff:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a003:	e8 78 c5 01 00       	call   c0026580 <__muldf3>
c000a008:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a00b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a00f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a013:	e8 5f cf 01 00       	call   c0026f77 <__extendsfdf2>
c000a018:	83 c4 10             	add    esp,0x10
c000a01b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a023:	52                   	push   edx
c000a024:	50                   	push   eax
c000a025:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a029:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a02d:	e8 d1 be 01 00       	call   c0025f03 <__adddf3>
c000a032:	59                   	pop    ecx
c000a033:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a037:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a03b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a041:	e8 31 cf 01 00       	call   c0026f77 <__extendsfdf2>
c000a046:	83 c4 10             	add    esp,0x10
c000a049:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a04d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a051:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a055:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a059:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a061:	e8 1a c5 01 00       	call   c0026580 <__muldf3>
c000a066:	83 c4 10             	add    esp,0x10
c000a069:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a06d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a071:	52                   	push   edx
c000a072:	50                   	push   eax
c000a073:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a077:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a07b:	e8 83 be 01 00       	call   c0025f03 <__adddf3>
c000a080:	5f                   	pop    edi
c000a081:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a085:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a089:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a08f:	e8 e3 ce 01 00       	call   c0026f77 <__extendsfdf2>
c000a094:	83 c4 10             	add    esp,0x10
c000a097:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a09b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a09f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0ab:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0af:	e8 cc c4 01 00       	call   c0026580 <__muldf3>
c000a0b4:	83 c4 10             	add    esp,0x10
c000a0b7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0bb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0bf:	52                   	push   edx
c000a0c0:	50                   	push   eax
c000a0c1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0c5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0c9:	e8 35 be 01 00       	call   c0025f03 <__adddf3>
c000a0ce:	59                   	pop    ecx
c000a0cf:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a0d3:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a0d7:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a0dd:	e8 95 ce 01 00       	call   c0026f77 <__extendsfdf2>
c000a0e2:	83 c4 10             	add    esp,0x10
c000a0e5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0f5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0fd:	e8 7e c4 01 00       	call   c0026580 <__muldf3>
c000a102:	83 c4 10             	add    esp,0x10
c000a105:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a109:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a10d:	52                   	push   edx
c000a10e:	50                   	push   eax
c000a10f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a113:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a117:	e8 e7 bd 01 00       	call   c0025f03 <__adddf3>
c000a11c:	5f                   	pop    edi
c000a11d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a121:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a125:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a12b:	e8 47 ce 01 00       	call   c0026f77 <__extendsfdf2>
c000a130:	83 c4 10             	add    esp,0x10
c000a133:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a137:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a13b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a143:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a147:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a14b:	e8 30 c4 01 00       	call   c0026580 <__muldf3>
c000a150:	83 c4 10             	add    esp,0x10
c000a153:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a157:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a15b:	52                   	push   edx
c000a15c:	50                   	push   eax
c000a15d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a161:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a165:	e8 99 bd 01 00       	call   c0025f03 <__adddf3>
c000a16a:	83 c4 10             	add    esp,0x10
c000a16d:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a171:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a175:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a179:	85 db                	test   ebx,ebx
c000a17b:	0f 8f 36 fe ff ff    	jg     c0009fb7 <calc_output_quad+0x2b1>
c000a181:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a185:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a189:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a18d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a191:	e8 6d bd 01 00       	call   c0025f03 <__adddf3>
c000a196:	83 c4 10             	add    esp,0x10
c000a199:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a19d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1b1:	e8 ca c3 01 00       	call   c0026580 <__muldf3>
c000a1b6:	59                   	pop    ecx
c000a1b7:	5b                   	pop    ebx
c000a1b8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a1bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a1c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1c8:	e8 86 cc 01 00       	call   c0026e53 <__truncdfsf2>
c000a1cd:	83 c4 10             	add    esp,0x10
c000a1d0:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a1d7:	89 06                	mov    DWORD PTR [esi],eax
c000a1d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1e1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a1e5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a1e9:	e8 15 bd 01 00       	call   c0025f03 <__adddf3>
c000a1ee:	83 c4 10             	add    esp,0x10
c000a1f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a1f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a201:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a205:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a209:	e8 72 c3 01 00       	call   c0026580 <__muldf3>
c000a20e:	5e                   	pop    esi
c000a20f:	5f                   	pop    edi
c000a210:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a214:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a21c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a220:	e8 2e cc 01 00       	call   c0026e53 <__truncdfsf2>
c000a225:	83 c4 10             	add    esp,0x10
c000a228:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a22f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a232:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a236:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a23a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a23e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a242:	e8 bc bc 01 00       	call   c0025f03 <__adddf3>
c000a247:	83 c4 10             	add    esp,0x10
c000a24a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a24e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a252:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a256:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a25a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a25e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a262:	e8 19 c3 01 00       	call   c0026580 <__muldf3>
c000a267:	5d                   	pop    ebp
c000a268:	59                   	pop    ecx
c000a269:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a26d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a271:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a275:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a279:	e8 d5 cb 01 00       	call   c0026e53 <__truncdfsf2>
c000a27e:	83 c4 10             	add    esp,0x10
c000a281:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a288:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a28b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a28f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a293:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a297:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a29b:	e8 63 bc 01 00       	call   c0025f03 <__adddf3>
c000a2a0:	83 c4 10             	add    esp,0x10
c000a2a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a2a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a2ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2bb:	e8 c0 c2 01 00       	call   c0026580 <__muldf3>
c000a2c0:	5b                   	pop    ebx
c000a2c1:	5e                   	pop    esi
c000a2c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a2ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2d2:	e8 7c cb 01 00       	call   c0026e53 <__truncdfsf2>
c000a2d7:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a2de:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a2e1:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a2e7:	5b                   	pop    ebx
c000a2e8:	5e                   	pop    esi
c000a2e9:	5f                   	pop    edi
c000a2ea:	5d                   	pop    ebp
c000a2eb:	c3                   	ret    

c000a2ec <calc_output_hex>:
c000a2ec:	55                   	push   ebp
c000a2ed:	89 cd                	mov    ebp,ecx
c000a2ef:	57                   	push   edi
c000a2f0:	56                   	push   esi
c000a2f1:	53                   	push   ebx
c000a2f2:	89 c3                	mov    ebx,eax
c000a2f4:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a2fa:	89 14 24             	mov    DWORD PTR [esp],edx
c000a2fd:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a304:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a30b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a30f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a313:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a316:	e8 6f f3 ff ff       	call   c000968a <int_to_fp>
c000a31b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a31e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a322:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a325:	29 c8                	sub    eax,ecx
c000a327:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a32b:	99                   	cdq    
c000a32c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a334:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a337:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a33f:	0f af f8             	imul   edi,eax
c000a342:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a345:	01 cf                	add    edi,ecx
c000a347:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a34b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a34e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a352:	0f af c2             	imul   eax,edx
c000a355:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a359:	29 c1                	sub    ecx,eax
c000a35b:	31 d2                	xor    edx,edx
c000a35d:	31 c0                	xor    eax,eax
c000a35f:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a362:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a366:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a36a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a36e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a372:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a376:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a37a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a37e:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a382:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a386:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a38a:	89 f8                	mov    eax,edi
c000a38c:	e8 07 f3 ff ff       	call   c0009698 <fp_to_double>
c000a391:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a395:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a399:	89 f8                	mov    eax,edi
c000a39b:	e8 ee f2 ff ff       	call   c000968e <fp_to_int>
c000a3a0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a3a4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a3a7:	52                   	push   edx
c000a3a8:	52                   	push   edx
c000a3a9:	51                   	push   ecx
c000a3aa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a3ae:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a3b5:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a3b9:	e8 da b4 01 00       	call   c0025898 <__subsf3>
c000a3be:	89 04 24             	mov    DWORD PTR [esp],eax
c000a3c1:	e8 b1 cb 01 00       	call   c0026f77 <__extendsfdf2>
c000a3c6:	83 c4 10             	add    esp,0x10
c000a3c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a3cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a3d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3e1:	e8 9a c1 01 00       	call   c0026580 <__muldf3>
c000a3e6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a3ea:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a3ee:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a3f1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a3f5:	e8 7d cb 01 00       	call   c0026f77 <__extendsfdf2>
c000a3fa:	83 c4 10             	add    esp,0x10
c000a3fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a401:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a405:	52                   	push   edx
c000a406:	50                   	push   eax
c000a407:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a40b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a40f:	e8 ef ba 01 00       	call   c0025f03 <__adddf3>
c000a414:	59                   	pop    ecx
c000a415:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a419:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a41d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a423:	e8 4f cb 01 00       	call   c0026f77 <__extendsfdf2>
c000a428:	83 c4 10             	add    esp,0x10
c000a42b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a42f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a433:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a437:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a43b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a43f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a443:	e8 38 c1 01 00       	call   c0026580 <__muldf3>
c000a448:	83 c4 10             	add    esp,0x10
c000a44b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a44f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a453:	52                   	push   edx
c000a454:	50                   	push   eax
c000a455:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a459:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a45d:	e8 a1 ba 01 00       	call   c0025f03 <__adddf3>
c000a462:	59                   	pop    ecx
c000a463:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a467:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a46b:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a471:	e8 01 cb 01 00       	call   c0026f77 <__extendsfdf2>
c000a476:	83 c4 10             	add    esp,0x10
c000a479:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a47d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a481:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a485:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a489:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a48d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a491:	e8 ea c0 01 00       	call   c0026580 <__muldf3>
c000a496:	83 c4 10             	add    esp,0x10
c000a499:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a49d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4a1:	52                   	push   edx
c000a4a2:	50                   	push   eax
c000a4a3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ab:	e8 53 ba 01 00       	call   c0025f03 <__adddf3>
c000a4b0:	59                   	pop    ecx
c000a4b1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a4b5:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a4b9:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a4bf:	e8 b3 ca 01 00       	call   c0026f77 <__extendsfdf2>
c000a4c4:	83 c4 10             	add    esp,0x10
c000a4c7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4cb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4db:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4df:	e8 9c c0 01 00       	call   c0026580 <__muldf3>
c000a4e4:	83 c4 10             	add    esp,0x10
c000a4e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4ef:	52                   	push   edx
c000a4f0:	50                   	push   eax
c000a4f1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a4f5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a4f9:	e8 05 ba 01 00       	call   c0025f03 <__adddf3>
c000a4fe:	59                   	pop    ecx
c000a4ff:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a503:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a507:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a50d:	e8 65 ca 01 00       	call   c0026f77 <__extendsfdf2>
c000a512:	83 c4 10             	add    esp,0x10
c000a515:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a519:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a51d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a521:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a525:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a529:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a52d:	e8 4e c0 01 00       	call   c0026580 <__muldf3>
c000a532:	83 c4 10             	add    esp,0x10
c000a535:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a539:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a53d:	52                   	push   edx
c000a53e:	50                   	push   eax
c000a53f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a543:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a547:	e8 b7 b9 01 00       	call   c0025f03 <__adddf3>
c000a54c:	59                   	pop    ecx
c000a54d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a551:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a555:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a55b:	e8 17 ca 01 00       	call   c0026f77 <__extendsfdf2>
c000a560:	83 c4 10             	add    esp,0x10
c000a563:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a567:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a573:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a577:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a57b:	e8 00 c0 01 00       	call   c0026580 <__muldf3>
c000a580:	83 c4 10             	add    esp,0x10
c000a583:	83 c6 18             	add    esi,0x18
c000a586:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a58a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a58e:	52                   	push   edx
c000a58f:	50                   	push   eax
c000a590:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a594:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a598:	e8 66 b9 01 00       	call   c0025f03 <__adddf3>
c000a59d:	59                   	pop    ecx
c000a59e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a5a2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a5a6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a5ac:	e8 c6 c9 01 00       	call   c0026f77 <__extendsfdf2>
c000a5b1:	83 c4 10             	add    esp,0x10
c000a5b4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5b8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5c4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5c8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5cc:	e8 af bf 01 00       	call   c0026580 <__muldf3>
c000a5d1:	83 c4 10             	add    esp,0x10
c000a5d4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5d8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5dc:	52                   	push   edx
c000a5dd:	50                   	push   eax
c000a5de:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a5e2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a5e6:	e8 18 b9 01 00       	call   c0025f03 <__adddf3>
c000a5eb:	83 c4 10             	add    esp,0x10
c000a5ee:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a5f2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a5f6:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a5f9:	0f 89 8b fd ff ff    	jns    c000a38a <calc_output_hex+0x9e>
c000a5ff:	31 f6                	xor    esi,esi
c000a601:	31 ff                	xor    edi,edi
c000a603:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a607:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a60a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a60e:	29 e9                	sub    ecx,ebp
c000a610:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a614:	29 c8                	sub    eax,ecx
c000a616:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a619:	99                   	cdq    
c000a61a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a61e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a621:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a625:	0f af e8             	imul   ebp,eax
c000a628:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a62c:	40                   	inc    eax
c000a62d:	01 cd                	add    ebp,ecx
c000a62f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a634:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a638:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a63c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a640:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a643:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a647:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a64b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a64f:	89 e8                	mov    eax,ebp
c000a651:	e8 42 f0 ff ff       	call   c0009698 <fp_to_double>
c000a656:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a65a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a65e:	89 e8                	mov    eax,ebp
c000a660:	e8 29 f0 ff ff       	call   c000968e <fp_to_int>
c000a665:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a669:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a66c:	52                   	push   edx
c000a66d:	52                   	push   edx
c000a66e:	51                   	push   ecx
c000a66f:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a676:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a67d:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a681:	e8 12 b2 01 00       	call   c0025898 <__subsf3>
c000a686:	89 04 24             	mov    DWORD PTR [esp],eax
c000a689:	e8 e9 c8 01 00       	call   c0026f77 <__extendsfdf2>
c000a68e:	83 c4 10             	add    esp,0x10
c000a691:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a695:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a699:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6a1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6a5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6a9:	e8 d2 be 01 00       	call   c0026580 <__muldf3>
c000a6ae:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a6b5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6b9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a6bc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a6c0:	e8 b2 c8 01 00       	call   c0026f77 <__extendsfdf2>
c000a6c5:	83 c4 10             	add    esp,0x10
c000a6c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6d0:	52                   	push   edx
c000a6d1:	50                   	push   eax
c000a6d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6da:	e8 24 b8 01 00       	call   c0025f03 <__adddf3>
c000a6df:	59                   	pop    ecx
c000a6e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a6e4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a6e8:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a6ee:	e8 84 c8 01 00       	call   c0026f77 <__extendsfdf2>
c000a6f3:	83 c4 10             	add    esp,0x10
c000a6f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a702:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a706:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a70a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a70e:	e8 6d be 01 00       	call   c0026580 <__muldf3>
c000a713:	83 c4 10             	add    esp,0x10
c000a716:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a71a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a71e:	52                   	push   edx
c000a71f:	50                   	push   eax
c000a720:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a724:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a728:	e8 d6 b7 01 00       	call   c0025f03 <__adddf3>
c000a72d:	59                   	pop    ecx
c000a72e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a732:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a736:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a73c:	e8 36 c8 01 00       	call   c0026f77 <__extendsfdf2>
c000a741:	83 c4 10             	add    esp,0x10
c000a744:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a748:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a74c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a750:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a754:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a758:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a75c:	e8 1f be 01 00       	call   c0026580 <__muldf3>
c000a761:	83 c4 10             	add    esp,0x10
c000a764:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a768:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a76c:	52                   	push   edx
c000a76d:	50                   	push   eax
c000a76e:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a772:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a776:	e8 88 b7 01 00       	call   c0025f03 <__adddf3>
c000a77b:	59                   	pop    ecx
c000a77c:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a780:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a784:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a78a:	e8 e8 c7 01 00       	call   c0026f77 <__extendsfdf2>
c000a78f:	83 c4 10             	add    esp,0x10
c000a792:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a796:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a79a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a79e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7a2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7a6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7aa:	e8 d1 bd 01 00       	call   c0026580 <__muldf3>
c000a7af:	83 c4 10             	add    esp,0x10
c000a7b2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7b6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7ba:	52                   	push   edx
c000a7bb:	50                   	push   eax
c000a7bc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c4:	e8 3a b7 01 00       	call   c0025f03 <__adddf3>
c000a7c9:	59                   	pop    ecx
c000a7ca:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a7ce:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a7d2:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a7d8:	e8 9a c7 01 00       	call   c0026f77 <__extendsfdf2>
c000a7dd:	83 c4 10             	add    esp,0x10
c000a7e0:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7e4:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7f0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7f4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7f8:	e8 83 bd 01 00       	call   c0026580 <__muldf3>
c000a7fd:	83 c4 10             	add    esp,0x10
c000a800:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a804:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a808:	52                   	push   edx
c000a809:	50                   	push   eax
c000a80a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a80e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a812:	e8 ec b6 01 00       	call   c0025f03 <__adddf3>
c000a817:	59                   	pop    ecx
c000a818:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a81c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a820:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000a826:	e8 4c c7 01 00       	call   c0026f77 <__extendsfdf2>
c000a82b:	83 c4 10             	add    esp,0x10
c000a82e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a832:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a836:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a83a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a83e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a842:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a846:	e8 35 bd 01 00       	call   c0026580 <__muldf3>
c000a84b:	83 c4 10             	add    esp,0x10
c000a84e:	83 eb 18             	sub    ebx,0x18
c000a851:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a855:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a859:	52                   	push   edx
c000a85a:	50                   	push   eax
c000a85b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a85f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a863:	e8 9b b6 01 00       	call   c0025f03 <__adddf3>
c000a868:	59                   	pop    ecx
c000a869:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a86d:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000a871:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000a877:	e8 fb c6 01 00       	call   c0026f77 <__extendsfdf2>
c000a87c:	83 c4 10             	add    esp,0x10
c000a87f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a883:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a887:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a88b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a88f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a893:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a897:	e8 e4 bc 01 00       	call   c0026580 <__muldf3>
c000a89c:	83 c4 10             	add    esp,0x10
c000a89f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8a3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8a7:	52                   	push   edx
c000a8a8:	50                   	push   eax
c000a8a9:	57                   	push   edi
c000a8aa:	56                   	push   esi
c000a8ab:	e8 53 b6 01 00       	call   c0025f03 <__adddf3>
c000a8b0:	83 c4 10             	add    esp,0x10
c000a8b3:	89 c6                	mov    esi,eax
c000a8b5:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000a8b8:	89 d7                	mov    edi,edx
c000a8ba:	85 ed                	test   ebp,ebp
c000a8bc:	0f 8f 8d fd ff ff    	jg     c000a64f <calc_output_hex+0x363>
c000a8c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8d2:	e8 2c b6 01 00       	call   c0025f03 <__adddf3>
c000a8d7:	83 c4 10             	add    esp,0x10
c000a8da:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8f1:	e8 8a bc 01 00       	call   c0026580 <__muldf3>
c000a8f6:	59                   	pop    ecx
c000a8f7:	5b                   	pop    ebx
c000a8f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a8fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a900:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a904:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a908:	e8 46 c5 01 00       	call   c0026e53 <__truncdfsf2>
c000a90d:	83 c4 10             	add    esp,0x10
c000a910:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a917:	89 03                	mov    DWORD PTR [ebx],eax
c000a919:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a91d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a921:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a925:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a929:	e8 d5 b5 01 00       	call   c0025f03 <__adddf3>
c000a92e:	83 c4 10             	add    esp,0x10
c000a931:	89 04 24             	mov    DWORD PTR [esp],eax
c000a934:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a938:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a93c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a940:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a944:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a948:	e8 33 bc 01 00       	call   c0026580 <__muldf3>
c000a94d:	5d                   	pop    ebp
c000a94e:	59                   	pop    ecx
c000a94f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a953:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a957:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a95b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a95f:	e8 ef c4 01 00       	call   c0026e53 <__truncdfsf2>
c000a964:	83 c4 10             	add    esp,0x10
c000a967:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a96e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a971:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a975:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a979:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a97d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a981:	e8 7d b5 01 00       	call   c0025f03 <__adddf3>
c000a986:	83 c4 10             	add    esp,0x10
c000a989:	89 04 24             	mov    DWORD PTR [esp],eax
c000a98c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a990:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a994:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a998:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a99c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9a0:	e8 db bb 01 00       	call   c0026580 <__muldf3>
c000a9a5:	5b                   	pop    ebx
c000a9a6:	5d                   	pop    ebp
c000a9a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a9ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9b7:	e8 97 c4 01 00       	call   c0026e53 <__truncdfsf2>
c000a9bc:	83 c4 10             	add    esp,0x10
c000a9bf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9c6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000a9c9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9cd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9d1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a9d5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a9d9:	e8 25 b5 01 00       	call   c0025f03 <__adddf3>
c000a9de:	83 c4 10             	add    esp,0x10
c000a9e1:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9e4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9e8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9ec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f8:	e8 83 bb 01 00       	call   c0026580 <__muldf3>
c000a9fd:	59                   	pop    ecx
c000a9fe:	5b                   	pop    ebx
c000a9ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa07:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa0b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa0f:	e8 3f c4 01 00       	call   c0026e53 <__truncdfsf2>
c000aa14:	83 c4 10             	add    esp,0x10
c000aa17:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa1e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000aa21:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa25:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa29:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa2d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa31:	e8 cd b4 01 00       	call   c0025f03 <__adddf3>
c000aa36:	83 c4 10             	add    esp,0x10
c000aa39:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa48:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa50:	e8 2b bb 01 00       	call   c0026580 <__muldf3>
c000aa55:	5d                   	pop    ebp
c000aa56:	59                   	pop    ecx
c000aa57:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa5f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa63:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa67:	e8 e7 c3 01 00       	call   c0026e53 <__truncdfsf2>
c000aa6c:	83 c4 10             	add    esp,0x10
c000aa6f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa76:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aa79:	57                   	push   edi
c000aa7a:	56                   	push   esi
c000aa7b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa7f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa83:	e8 7b b4 01 00       	call   c0025f03 <__adddf3>
c000aa88:	83 c4 10             	add    esp,0x10
c000aa8b:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa8e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa92:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa96:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa9a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa9e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaa2:	e8 d9 ba 01 00       	call   c0026580 <__muldf3>
c000aaa7:	5b                   	pop    ebx
c000aaa8:	5e                   	pop    esi
c000aaa9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aaad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aab1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aab5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aab9:	e8 95 c3 01 00       	call   c0026e53 <__truncdfsf2>
c000aabe:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000aac5:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000aac8:	81 c4 9c 00 00 00    	add    esp,0x9c
c000aace:	5b                   	pop    ebx
c000aacf:	5e                   	pop    esi
c000aad0:	5f                   	pop    edi
c000aad1:	5d                   	pop    ebp
c000aad2:	c3                   	ret    

c000aad3 <sinc_reset>:
c000aad3:	56                   	push   esi
c000aad4:	53                   	push   ebx
c000aad5:	51                   	push   ecx
c000aad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aada:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000aadd:	85 db                	test   ebx,ebx
c000aadf:	74 59                	je     c000ab3a <sinc_reset+0x67>
c000aae1:	31 d2                	xor    edx,edx
c000aae3:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000aaea:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000aaed:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000aaf0:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000aaf7:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000aafe:	31 c0                	xor    eax,eax
c000ab00:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ab06:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ab09:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ab0c:	52                   	push   edx
c000ab0d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab10:	c1 e0 02             	shl    eax,0x2
c000ab13:	50                   	push   eax
c000ab14:	6a 00                	push   0x0
c000ab16:	56                   	push   esi
c000ab17:	e8 6f 5b ff ff       	call   c000068b <memset>
c000ab1c:	83 c4 0c             	add    esp,0xc
c000ab1f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab22:	c1 e0 02             	shl    eax,0x2
c000ab25:	50                   	push   eax
c000ab26:	68 aa 00 00 00       	push   0xaa
c000ab2b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab2e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ab31:	50                   	push   eax
c000ab32:	e8 54 5b ff ff       	call   c000068b <memset>
c000ab37:	83 c4 10             	add    esp,0x10
c000ab3a:	58                   	pop    eax
c000ab3b:	5b                   	pop    ebx
c000ab3c:	5e                   	pop    esi
c000ab3d:	c3                   	ret    

c000ab3e <calc_output_multi>:
c000ab3e:	55                   	push   ebp
c000ab3f:	57                   	push   edi
c000ab40:	56                   	push   esi
c000ab41:	89 c6                	mov    esi,eax
c000ab43:	53                   	push   ebx
c000ab44:	83 ec 4c             	sub    esp,0x4c
c000ab47:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ab4b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ab4f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ab53:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ab57:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ab5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ab5f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ab63:	8d 46 44             	lea    eax,[esi+0x44]
c000ab66:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab69:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ab6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ab73:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ab76:	e8 0f eb ff ff       	call   c000968a <int_to_fp>
c000ab7b:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ab7e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ab82:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ab86:	99                   	cdq    
c000ab87:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ab8b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ab8f:	0f af d0             	imul   edx,eax
c000ab92:	0f af c3             	imul   eax,ebx
c000ab95:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ab99:	29 c1                	sub    ecx,eax
c000ab9b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ab9f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000aba3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000abaa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000abae:	57                   	push   edi
c000abaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000abb3:	6a 00                	push   0x0
c000abb5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb9:	e8 cd 5a ff ff       	call   c000068b <memset>
c000abbe:	83 c4 10             	add    esp,0x10
c000abc1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abc5:	89 df                	mov    edi,ebx
c000abc7:	e8 cc ea ff ff       	call   c0009698 <fp_to_double>
c000abcc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000abd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000abd4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abd8:	e8 b1 ea ff ff       	call   c000968e <fp_to_int>
c000abdd:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000abe0:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000abe3:	51                   	push   ecx
c000abe4:	51                   	push   ecx
c000abe5:	55                   	push   ebp
c000abe6:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000abea:	e8 a9 ac 01 00       	call   c0025898 <__subsf3>
c000abef:	89 04 24             	mov    DWORD PTR [esp],eax
c000abf2:	e8 80 c3 01 00       	call   c0026f77 <__extendsfdf2>
c000abf7:	83 c4 10             	add    esp,0x10
c000abfa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000abfe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac0a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac0e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac12:	e8 69 b9 01 00       	call   c0026580 <__muldf3>
c000ac17:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ac1a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ac1e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ac22:	e8 50 c3 01 00       	call   c0026f77 <__extendsfdf2>
c000ac27:	83 c4 10             	add    esp,0x10
c000ac2a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac2e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac32:	52                   	push   edx
c000ac33:	50                   	push   eax
c000ac34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac3c:	e8 c2 b2 01 00       	call   c0025f03 <__adddf3>
c000ac41:	83 c4 10             	add    esp,0x10
c000ac44:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac48:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac4c:	89 f8                	mov    eax,edi
c000ac4e:	b9 08 00 00 00       	mov    ecx,0x8
c000ac53:	99                   	cdq    
c000ac54:	f7 f9                	idiv   ecx
c000ac56:	4a                   	dec    edx
c000ac57:	83 fa 06             	cmp    edx,0x6
c000ac5a:	77 07                	ja     c000ac63 <calc_output_multi+0x125>
c000ac5c:	ff 24 95 44 87 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd78bc]
c000ac63:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ac66:	4f                   	dec    edi
c000ac67:	83 ec 0c             	sub    esp,0xc
c000ac6a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ac6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac71:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ac78:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ac7c:	e8 f6 c2 01 00       	call   c0026f77 <__extendsfdf2>
c000ac81:	83 c4 10             	add    esp,0x10
c000ac84:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac88:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac90:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac9c:	e8 df b8 01 00       	call   c0026580 <__muldf3>
c000aca1:	83 c4 10             	add    esp,0x10
c000aca4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aca8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acac:	52                   	push   edx
c000acad:	50                   	push   eax
c000acae:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000acb1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000acb4:	e8 4a b2 01 00       	call   c0025f03 <__adddf3>
c000acb9:	83 c4 10             	add    esp,0x10
c000acbc:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000acbf:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000acc2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000acc5:	4f                   	dec    edi
c000acc6:	83 ec 0c             	sub    esp,0xc
c000acc9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000accc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000acd0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000acd7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000acdb:	e8 97 c2 01 00       	call   c0026f77 <__extendsfdf2>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ace7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aceb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acf3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acf7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acfb:	e8 80 b8 01 00       	call   c0026580 <__muldf3>
c000ad00:	83 c4 10             	add    esp,0x10
c000ad03:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad07:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad0b:	52                   	push   edx
c000ad0c:	50                   	push   eax
c000ad0d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad10:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad13:	e8 eb b1 01 00       	call   c0025f03 <__adddf3>
c000ad18:	83 c4 10             	add    esp,0x10
c000ad1b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad1e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad21:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad24:	4f                   	dec    edi
c000ad25:	83 ec 0c             	sub    esp,0xc
c000ad28:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad2f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad36:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad3a:	e8 38 c2 01 00       	call   c0026f77 <__extendsfdf2>
c000ad3f:	83 c4 10             	add    esp,0x10
c000ad42:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad46:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad52:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad56:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad5a:	e8 21 b8 01 00       	call   c0026580 <__muldf3>
c000ad5f:	83 c4 10             	add    esp,0x10
c000ad62:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad66:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad6a:	52                   	push   edx
c000ad6b:	50                   	push   eax
c000ad6c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad6f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad72:	e8 8c b1 01 00       	call   c0025f03 <__adddf3>
c000ad77:	83 c4 10             	add    esp,0x10
c000ad7a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad7d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad80:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad83:	4f                   	dec    edi
c000ad84:	83 ec 0c             	sub    esp,0xc
c000ad87:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad8e:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad95:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad99:	e8 d9 c1 01 00       	call   c0026f77 <__extendsfdf2>
c000ad9e:	83 c4 10             	add    esp,0x10
c000ada1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ada5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ada9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adb1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adb5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adb9:	e8 c2 b7 01 00       	call   c0026580 <__muldf3>
c000adbe:	83 c4 10             	add    esp,0x10
c000adc1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adc5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000adc9:	52                   	push   edx
c000adca:	50                   	push   eax
c000adcb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000adce:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000add1:	e8 2d b1 01 00       	call   c0025f03 <__adddf3>
c000add6:	83 c4 10             	add    esp,0x10
c000add9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000addc:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000addf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ade2:	4f                   	dec    edi
c000ade3:	83 ec 0c             	sub    esp,0xc
c000ade6:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ade9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aded:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000adf4:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000adf8:	e8 7a c1 01 00       	call   c0026f77 <__extendsfdf2>
c000adfd:	83 c4 10             	add    esp,0x10
c000ae00:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae04:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae10:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae18:	e8 63 b7 01 00       	call   c0026580 <__muldf3>
c000ae1d:	83 c4 10             	add    esp,0x10
c000ae20:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae24:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae28:	52                   	push   edx
c000ae29:	50                   	push   eax
c000ae2a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae2d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae30:	e8 ce b0 01 00       	call   c0025f03 <__adddf3>
c000ae35:	83 c4 10             	add    esp,0x10
c000ae38:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae3b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae3e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae41:	4f                   	dec    edi
c000ae42:	83 ec 0c             	sub    esp,0xc
c000ae45:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae48:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae4c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae53:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae57:	e8 1b c1 01 00       	call   c0026f77 <__extendsfdf2>
c000ae5c:	83 c4 10             	add    esp,0x10
c000ae5f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae63:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae6f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae73:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae77:	e8 04 b7 01 00       	call   c0026580 <__muldf3>
c000ae7c:	83 c4 10             	add    esp,0x10
c000ae7f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae83:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae87:	52                   	push   edx
c000ae88:	50                   	push   eax
c000ae89:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae8c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae8f:	e8 6f b0 01 00       	call   c0025f03 <__adddf3>
c000ae94:	83 c4 10             	add    esp,0x10
c000ae97:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae9a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae9d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aea0:	4f                   	dec    edi
c000aea1:	83 ec 0c             	sub    esp,0xc
c000aea4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aea7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aeab:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeb2:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aeb6:	e8 bc c0 01 00       	call   c0026f77 <__extendsfdf2>
c000aebb:	83 c4 10             	add    esp,0x10
c000aebe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aec2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aece:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aed2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aed6:	e8 a5 b6 01 00       	call   c0026580 <__muldf3>
c000aedb:	83 c4 10             	add    esp,0x10
c000aede:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aee2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aee6:	52                   	push   edx
c000aee7:	50                   	push   eax
c000aee8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aeeb:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeee:	e8 10 b0 01 00       	call   c0025f03 <__adddf3>
c000aef3:	83 c4 10             	add    esp,0x10
c000aef6:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aef9:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aefc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeff:	4f                   	dec    edi
c000af00:	83 ec 0c             	sub    esp,0xc
c000af03:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af06:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af0a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af11:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af15:	e8 5d c0 01 00       	call   c0026f77 <__extendsfdf2>
c000af1a:	83 c4 10             	add    esp,0x10
c000af1d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af21:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af2d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af31:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af35:	e8 46 b6 01 00       	call   c0026580 <__muldf3>
c000af3a:	83 c4 10             	add    esp,0x10
c000af3d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af41:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af45:	52                   	push   edx
c000af46:	50                   	push   eax
c000af47:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af4a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af4d:	e8 b1 af 01 00       	call   c0025f03 <__adddf3>
c000af52:	83 c4 10             	add    esp,0x10
c000af55:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af58:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af5b:	85 ff                	test   edi,edi
c000af5d:	0f 8f e9 fc ff ff    	jg     c000ac4c <calc_output_multi+0x10e>
c000af63:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000af67:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000af6b:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000af6f:	0f 89 4c fc ff ff    	jns    c000abc1 <calc_output_multi+0x83>
c000af75:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000af79:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000af7d:	29 c8                	sub    eax,ecx
c000af7f:	99                   	cdq    
c000af80:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000af84:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000af88:	0f af d0             	imul   edx,eax
c000af8b:	40                   	inc    eax
c000af8c:	01 d1                	add    ecx,edx
c000af8e:	0f af c3             	imul   eax,ebx
c000af91:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000af95:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000af98:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000af9c:	55                   	push   ebp
c000af9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000afa1:	6a 00                	push   0x0
c000afa3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000afa7:	e8 df 56 ff ff       	call   c000068b <memset>
c000afac:	83 c4 10             	add    esp,0x10
c000afaf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afb3:	e8 e0 e6 ff ff       	call   c0009698 <fp_to_double>
c000afb8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000afbc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000afc0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afc4:	e8 c5 e6 ff ff       	call   c000968e <fp_to_int>
c000afc9:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000afcc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000afcf:	57                   	push   edi
c000afd0:	57                   	push   edi
c000afd1:	89 df                	mov    edi,ebx
c000afd3:	55                   	push   ebp
c000afd4:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000afd8:	e8 bb a8 01 00       	call   c0025898 <__subsf3>
c000afdd:	89 04 24             	mov    DWORD PTR [esp],eax
c000afe0:	e8 92 bf 01 00       	call   c0026f77 <__extendsfdf2>
c000afe5:	83 c4 10             	add    esp,0x10
c000afe8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000afec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000aff0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aff4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aff8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000affc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b000:	e8 7b b5 01 00       	call   c0026580 <__muldf3>
c000b005:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b008:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b00c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b010:	e8 62 bf 01 00       	call   c0026f77 <__extendsfdf2>
c000b015:	83 c4 10             	add    esp,0x10
c000b018:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b01c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b020:	52                   	push   edx
c000b021:	50                   	push   eax
c000b022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b02a:	e8 d4 ae 01 00       	call   c0025f03 <__adddf3>
c000b02f:	83 c4 10             	add    esp,0x10
c000b032:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b036:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b03a:	89 f8                	mov    eax,edi
c000b03c:	b9 08 00 00 00       	mov    ecx,0x8
c000b041:	99                   	cdq    
c000b042:	f7 f9                	idiv   ecx
c000b044:	4a                   	dec    edx
c000b045:	83 fa 06             	cmp    edx,0x6
c000b048:	77 07                	ja     c000b051 <calc_output_multi+0x513>
c000b04a:	ff 24 95 60 87 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd78a0]
c000b051:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b055:	4f                   	dec    edi
c000b056:	83 ec 0c             	sub    esp,0xc
c000b059:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b060:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b067:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06b:	e8 07 bf 01 00       	call   c0026f77 <__extendsfdf2>
c000b070:	83 c4 10             	add    esp,0x10
c000b073:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b077:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b07b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b07f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b083:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b087:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b08b:	e8 f0 b4 01 00       	call   c0026580 <__muldf3>
c000b090:	83 c4 10             	add    esp,0x10
c000b093:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b097:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b09b:	52                   	push   edx
c000b09c:	50                   	push   eax
c000b09d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a3:	e8 5b ae 01 00       	call   c0025f03 <__adddf3>
c000b0a8:	83 c4 10             	add    esp,0x10
c000b0ab:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ae:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0b5:	4f                   	dec    edi
c000b0b6:	83 ec 0c             	sub    esp,0xc
c000b0b9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cb:	e8 a7 be 01 00       	call   c0026f77 <__extendsfdf2>
c000b0d0:	83 c4 10             	add    esp,0x10
c000b0d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0eb:	e8 90 b4 01 00       	call   c0026580 <__muldf3>
c000b0f0:	83 c4 10             	add    esp,0x10
c000b0f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0fb:	52                   	push   edx
c000b0fc:	50                   	push   eax
c000b0fd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b100:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b103:	e8 fb ad 01 00       	call   c0025f03 <__adddf3>
c000b108:	83 c4 10             	add    esp,0x10
c000b10b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b111:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 47 be 01 00       	call   c0026f77 <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b137:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b147:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b14b:	e8 30 b4 01 00       	call   c0026580 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b157:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 9b ad 01 00       	call   c0025f03 <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b175:	4f                   	dec    edi
c000b176:	83 ec 0c             	sub    esp,0xc
c000b179:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b17c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b180:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b187:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b18b:	e8 e7 bd 01 00       	call   c0026f77 <__extendsfdf2>
c000b190:	83 c4 10             	add    esp,0x10
c000b193:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b197:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b19b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b19f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1a3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1a7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1ab:	e8 d0 b3 01 00       	call   c0026580 <__muldf3>
c000b1b0:	83 c4 10             	add    esp,0x10
c000b1b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1bb:	52                   	push   edx
c000b1bc:	50                   	push   eax
c000b1bd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1c0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1c3:	e8 3b ad 01 00       	call   c0025f03 <__adddf3>
c000b1c8:	83 c4 10             	add    esp,0x10
c000b1cb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1ce:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1d5:	4f                   	dec    edi
c000b1d6:	83 ec 0c             	sub    esp,0xc
c000b1d9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1e0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1e7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1eb:	e8 87 bd 01 00       	call   c0026f77 <__extendsfdf2>
c000b1f0:	83 c4 10             	add    esp,0x10
c000b1f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b203:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b207:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b20b:	e8 70 b3 01 00       	call   c0026580 <__muldf3>
c000b210:	83 c4 10             	add    esp,0x10
c000b213:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b217:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b21b:	52                   	push   edx
c000b21c:	50                   	push   eax
c000b21d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b220:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b223:	e8 db ac 01 00       	call   c0025f03 <__adddf3>
c000b228:	83 c4 10             	add    esp,0x10
c000b22b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b22e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b231:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b235:	4f                   	dec    edi
c000b236:	83 ec 0c             	sub    esp,0xc
c000b239:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b23c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b240:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b247:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b24b:	e8 27 bd 01 00       	call   c0026f77 <__extendsfdf2>
c000b250:	83 c4 10             	add    esp,0x10
c000b253:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b257:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b25b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b25f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b263:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b267:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b26b:	e8 10 b3 01 00       	call   c0026580 <__muldf3>
c000b270:	83 c4 10             	add    esp,0x10
c000b273:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b277:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b27b:	52                   	push   edx
c000b27c:	50                   	push   eax
c000b27d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b280:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b283:	e8 7b ac 01 00       	call   c0025f03 <__adddf3>
c000b288:	83 c4 10             	add    esp,0x10
c000b28b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b28e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b291:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b295:	4f                   	dec    edi
c000b296:	83 ec 0c             	sub    esp,0xc
c000b299:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b29c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2a0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2a7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2ab:	e8 c7 bc 01 00       	call   c0026f77 <__extendsfdf2>
c000b2b0:	83 c4 10             	add    esp,0x10
c000b2b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2cb:	e8 b0 b2 01 00       	call   c0026580 <__muldf3>
c000b2d0:	83 c4 10             	add    esp,0x10
c000b2d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2db:	52                   	push   edx
c000b2dc:	50                   	push   eax
c000b2dd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2e0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2e3:	e8 1b ac 01 00       	call   c0025f03 <__adddf3>
c000b2e8:	83 c4 10             	add    esp,0x10
c000b2eb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2ee:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2f5:	4f                   	dec    edi
c000b2f6:	83 ec 0c             	sub    esp,0xc
c000b2f9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2fc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b300:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b307:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b30b:	e8 67 bc 01 00       	call   c0026f77 <__extendsfdf2>
c000b310:	83 c4 10             	add    esp,0x10
c000b313:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b317:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b31b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b31f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b323:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b327:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b32b:	e8 50 b2 01 00       	call   c0026580 <__muldf3>
c000b330:	83 c4 10             	add    esp,0x10
c000b333:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b337:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b33b:	52                   	push   edx
c000b33c:	50                   	push   eax
c000b33d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b340:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b343:	e8 bb ab 01 00       	call   c0025f03 <__adddf3>
c000b348:	83 c4 10             	add    esp,0x10
c000b34b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b34e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b351:	85 ff                	test   edi,edi
c000b353:	0f 8f e1 fc ff ff    	jg     c000b03a <calc_output_multi+0x4fc>
c000b359:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b35d:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b361:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b365:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b36a:	0f 8f 3f fc ff ff    	jg     c000afaf <calc_output_multi+0x471>
c000b370:	be 08 00 00 00       	mov    esi,0x8
c000b375:	89 d8                	mov    eax,ebx
c000b377:	99                   	cdq    
c000b378:	f7 fe                	idiv   esi
c000b37a:	4a                   	dec    edx
c000b37b:	83 fa 06             	cmp    edx,0x6
c000b37e:	77 07                	ja     c000b387 <calc_output_multi+0x849>
c000b380:	ff 24 95 7c 87 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd7884]
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4b                   	dec    ebx
c000b38c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b390:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b393:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b397:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b39b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b39e:	e8 60 ab 01 00       	call   c0025f03 <__adddf3>
c000b3a3:	83 c4 10             	add    esp,0x10
c000b3a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3aa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3be:	e8 bd b1 01 00       	call   c0026580 <__muldf3>
c000b3c3:	5d                   	pop    ebp
c000b3c4:	59                   	pop    ecx
c000b3c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b3c9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b3cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3d5:	e8 79 ba 01 00       	call   c0026e53 <__truncdfsf2>
c000b3da:	83 c4 10             	add    esp,0x10
c000b3dd:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b3e1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b3e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3e8:	4b                   	dec    ebx
c000b3e9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3ed:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b3f4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3f8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3fb:	e8 03 ab 01 00       	call   c0025f03 <__adddf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b407:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b40b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b40f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b41b:	e8 60 b1 01 00       	call   c0026580 <__muldf3>
c000b420:	59                   	pop    ecx
c000b421:	5f                   	pop    edi
c000b422:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b42a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b432:	e8 1c ba 01 00       	call   c0026e53 <__truncdfsf2>
c000b437:	83 c4 10             	add    esp,0x10
c000b43a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b43e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b441:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b445:	4b                   	dec    ebx
c000b446:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b44a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b44d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b451:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b455:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b458:	e8 a6 aa 01 00       	call   c0025f03 <__adddf3>
c000b45d:	83 c4 10             	add    esp,0x10
c000b460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b468:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b46c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b478:	e8 03 b1 01 00       	call   c0026580 <__muldf3>
c000b47d:	5f                   	pop    edi
c000b47e:	5d                   	pop    ebp
c000b47f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b483:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b48f:	e8 bf b9 01 00       	call   c0026e53 <__truncdfsf2>
c000b494:	83 c4 10             	add    esp,0x10
c000b497:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b49b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b49e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4a2:	4b                   	dec    ebx
c000b4a3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4a7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4ae:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4b2:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4b5:	e8 49 aa 01 00       	call   c0025f03 <__adddf3>
c000b4ba:	83 c4 10             	add    esp,0x10
c000b4bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	e8 a6 b0 01 00       	call   c0026580 <__muldf3>
c000b4da:	5d                   	pop    ebp
c000b4db:	59                   	pop    ecx
c000b4dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b4e0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4ec:	e8 62 b9 01 00       	call   c0026e53 <__truncdfsf2>
c000b4f1:	83 c4 10             	add    esp,0x10
c000b4f4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b4f8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b4fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ff:	4b                   	dec    ebx
c000b500:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b504:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b507:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b50b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b50f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b512:	e8 ec a9 01 00       	call   c0025f03 <__adddf3>
c000b517:	83 c4 10             	add    esp,0x10
c000b51a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b51e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b522:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b52a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b52e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b532:	e8 49 b0 01 00       	call   c0026580 <__muldf3>
c000b537:	59                   	pop    ecx
c000b538:	5f                   	pop    edi
c000b539:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b53d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b541:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b545:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b549:	e8 05 b9 01 00       	call   c0026e53 <__truncdfsf2>
c000b54e:	83 c4 10             	add    esp,0x10
c000b551:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b555:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b558:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b55c:	4b                   	dec    ebx
c000b55d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b561:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b564:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b568:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b56c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b56f:	e8 8f a9 01 00       	call   c0025f03 <__adddf3>
c000b574:	83 c4 10             	add    esp,0x10
c000b577:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b57b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b57f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b587:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58f:	e8 ec af 01 00       	call   c0026580 <__muldf3>
c000b594:	5f                   	pop    edi
c000b595:	5d                   	pop    ebp
c000b596:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b59a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5a6:	e8 a8 b8 01 00       	call   c0026e53 <__truncdfsf2>
c000b5ab:	83 c4 10             	add    esp,0x10
c000b5ae:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5b2:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5b9:	4b                   	dec    ebx
c000b5ba:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5be:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5c5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5c9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5cc:	e8 32 a9 01 00       	call   c0025f03 <__adddf3>
c000b5d1:	83 c4 10             	add    esp,0x10
c000b5d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ec:	e8 8f af 01 00       	call   c0026580 <__muldf3>
c000b5f1:	5d                   	pop    ebp
c000b5f2:	59                   	pop    ecx
c000b5f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5f7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b603:	e8 4b b8 01 00       	call   c0026e53 <__truncdfsf2>
c000b608:	83 c4 10             	add    esp,0x10
c000b60b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b60f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b612:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b616:	4b                   	dec    ebx
c000b617:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b61b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b61e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b622:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b626:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b629:	e8 d5 a8 01 00       	call   c0025f03 <__adddf3>
c000b62e:	83 c4 10             	add    esp,0x10
c000b631:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b635:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b639:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b63d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b641:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b645:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b649:	e8 32 af 01 00       	call   c0026580 <__muldf3>
c000b64e:	59                   	pop    ecx
c000b64f:	5f                   	pop    edi
c000b650:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b654:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b658:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b65c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b660:	e8 ee b7 01 00       	call   c0026e53 <__truncdfsf2>
c000b665:	83 c4 10             	add    esp,0x10
c000b668:	85 db                	test   ebx,ebx
c000b66a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b66e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b671:	0f 8f fe fc ff ff    	jg     c000b375 <calc_output_multi+0x837>
c000b677:	83 c4 4c             	add    esp,0x4c
c000b67a:	5b                   	pop    ebx
c000b67b:	5e                   	pop    esi
c000b67c:	5f                   	pop    edi
c000b67d:	5d                   	pop    ebp
c000b67e:	c3                   	ret    

c000b67f <double_to_fp>:
c000b67f:	83 ec 0c             	sub    esp,0xc
c000b682:	68 00 00 b0 40       	push   0x40b00000
c000b687:	6a 00                	push   0x0
c000b689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b68d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b691:	e8 ea ae 01 00       	call   c0026580 <__muldf3>
c000b696:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b69a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b69e:	83 c4 1c             	add    esp,0x1c
c000b6a1:	e9 5a b9 01 00       	jmp    c0027000 <lrint>

c000b6a6 <prepare_data>:
c000b6a6:	55                   	push   ebp
c000b6a7:	57                   	push   edi
c000b6a8:	56                   	push   esi
c000b6a9:	53                   	push   ebx
c000b6aa:	83 ec 1c             	sub    esp,0x1c
c000b6ad:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b6b1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b6b5:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b6b9:	0f 89 57 01 00 00    	jns    c000b816 <prepare_data+0x170>
c000b6bf:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b6c2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b6c5:	85 d2                	test   edx,edx
c000b6c7:	75 0d                	jne    c000b6d6 <prepare_data+0x30>
c000b6c9:	8d 14 36             	lea    edx,[esi+esi*1]
c000b6cc:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b6cf:	29 d0                	sub    eax,edx
c000b6d1:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b6d4:	eb 44                	jmp    c000b71a <prepare_data+0x74>
c000b6d6:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b6d9:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b6dc:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b6df:	39 c1                	cmp    ecx,eax
c000b6e1:	7d 04                	jge    c000b6e7 <prepare_data+0x41>
c000b6e3:	29 d0                	sub    eax,edx
c000b6e5:	eb 2d                	jmp    c000b714 <prepare_data+0x6e>
c000b6e7:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b6ed:	29 d7                	sub    edi,edx
c000b6ef:	01 f7                	add    edi,esi
c000b6f1:	51                   	push   ecx
c000b6f2:	29 f2                	sub    edx,esi
c000b6f4:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b6fb:	8d 14 90             	lea    edx,[eax+edx*4]
c000b6fe:	51                   	push   ecx
c000b6ff:	52                   	push   edx
c000b700:	50                   	push   eax
c000b701:	e8 17 4f ff ff       	call   c000061d <memmove>
c000b706:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b709:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b70c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b70f:	29 f0                	sub    eax,esi
c000b711:	83 c4 10             	add    esp,0x10
c000b714:	29 f0                	sub    eax,esi
c000b716:	79 02                	jns    c000b71a <prepare_data+0x74>
c000b718:	31 c0                	xor    eax,eax
c000b71a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b71d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b720:	29 ef                	sub    edi,ebp
c000b722:	39 c7                	cmp    edi,eax
c000b724:	7e 02                	jle    c000b728 <prepare_data+0x82>
c000b726:	89 c7                	mov    edi,eax
c000b728:	89 f8                	mov    eax,edi
c000b72a:	99                   	cdq    
c000b72b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b72e:	b8 15 00 00 00       	mov    eax,0x15
c000b733:	29 d7                	sub    edi,edx
c000b735:	0f 88 dd 00 00 00    	js     c000b818 <prepare_data+0x172>
c000b73b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b73e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b741:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b744:	0f 8f ce 00 00 00    	jg     c000b818 <prepare_data+0x172>
c000b74a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b750:	50                   	push   eax
c000b751:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b758:	50                   	push   eax
c000b759:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b75d:	8b 00                	mov    eax,DWORD PTR [eax]
c000b75f:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b762:	50                   	push   eax
c000b763:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b766:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b76a:	50                   	push   eax
c000b76b:	e8 e5 4e ff ff       	call   c0000655 <memcpy>
c000b770:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b773:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b776:	01 fd                	add    ebp,edi
c000b778:	01 f9                	add    ecx,edi
c000b77a:	83 c4 10             	add    esp,0x10
c000b77d:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b780:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b783:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b786:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b78a:	0f 85 86 00 00 00    	jne    c000b816 <prepare_data+0x170>
c000b790:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b793:	89 e8                	mov    eax,ebp
c000b795:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b798:	29 c8                	sub    eax,ecx
c000b79a:	39 f8                	cmp    eax,edi
c000b79c:	7d 78                	jge    c000b816 <prepare_data+0x170>
c000b79e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b7a2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b7a6:	74 6e                	je     c000b816 <prepare_data+0x170>
c000b7a8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b7ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b7af:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b7b2:	29 ef                	sub    edi,ebp
c000b7b4:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b7b8:	7c 29                	jl     c000b7e3 <prepare_data+0x13d>
c000b7ba:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7bd:	29 f1                	sub    ecx,esi
c000b7bf:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b7c6:	55                   	push   ebp
c000b7c7:	50                   	push   eax
c000b7c8:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b7cb:	50                   	push   eax
c000b7cc:	52                   	push   edx
c000b7cd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b7d1:	e8 47 4e ff ff       	call   c000061d <memmove>
c000b7d6:	83 c4 10             	add    esp,0x10
c000b7d9:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b7dc:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b7df:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b7e3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b7e6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b7e9:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000b7ec:	83 c6 05             	add    esi,0x5
c000b7ef:	78 07                	js     c000b7f8 <prepare_data+0x152>
c000b7f1:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7f4:	39 cf                	cmp    edi,ecx
c000b7f6:	7e 04                	jle    c000b7fc <prepare_data+0x156>
c000b7f8:	89 ce                	mov    esi,ecx
c000b7fa:	29 c6                	sub    esi,eax
c000b7fc:	8d 04 82             	lea    eax,[edx+eax*4]
c000b7ff:	51                   	push   ecx
c000b800:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000b807:	51                   	push   ecx
c000b808:	6a 00                	push   0x0
c000b80a:	50                   	push   eax
c000b80b:	e8 7b 4e ff ff       	call   c000068b <memset>
c000b810:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000b813:	83 c4 10             	add    esp,0x10
c000b816:	31 c0                	xor    eax,eax
c000b818:	83 c4 1c             	add    esp,0x1c
c000b81b:	5b                   	pop    ebx
c000b81c:	5e                   	pop    esi
c000b81d:	5f                   	pop    edi
c000b81e:	5d                   	pop    ebp
c000b81f:	c3                   	ret    

c000b820 <sinc_multichan_vari_process>:
c000b820:	55                   	push   ebp
c000b821:	ba 05 00 00 00       	mov    edx,0x5
c000b826:	57                   	push   edi
c000b827:	56                   	push   esi
c000b828:	53                   	push   ebx
c000b829:	83 ec 4c             	sub    esp,0x4c
c000b82c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000b830:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000b834:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000b837:	85 db                	test   ebx,ebx
c000b839:	0f 84 9b 06 00 00    	je     c000beda <sinc_multichan_vari_process+0x6ba>
c000b83f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000b842:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000b845:	0f af c5             	imul   eax,ebp
c000b848:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000b84b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000b84e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b855:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000b85c:	0f af c5             	imul   eax,ebp
c000b85f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000b862:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b865:	8b 06                	mov    eax,DWORD PTR [esi]
c000b867:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86f:	68 00 00 70 3f       	push   0x3f700000
c000b874:	6a 00                	push   0x0
c000b876:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b87a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b87e:	e8 cc b5 01 00       	call   c0026e4f <__ltdf2>
c000b883:	83 c4 10             	add    esp,0x10
c000b886:	ba 16 00 00 00       	mov    edx,0x16
c000b88b:	85 c0                	test   eax,eax
c000b88d:	0f 88 47 06 00 00    	js     c000beda <sinc_multichan_vari_process+0x6ba>
c000b893:	68 00 00 70 40       	push   0x40700000
c000b898:	6a 00                	push   0x0
c000b89a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b89e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a2:	e8 8a b5 01 00       	call   c0026e31 <__gtdf2>
c000b8a7:	83 c4 10             	add    esp,0x10
c000b8aa:	ba 16 00 00 00       	mov    edx,0x16
c000b8af:	85 c0                	test   eax,eax
c000b8b1:	0f 8f 23 06 00 00    	jg     c000beda <sinc_multichan_vari_process+0x6ba>
c000b8b7:	83 ec 0c             	sub    esp,0xc
c000b8ba:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b8bd:	e8 21 b3 01 00       	call   c0026be3 <__floatsidf>
c000b8c2:	83 c4 10             	add    esp,0x10
c000b8c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b8cd:	68 00 00 00 40       	push   0x40000000
c000b8d2:	6a 00                	push   0x0
c000b8d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8dc:	e8 22 a6 01 00       	call   c0025f03 <__adddf3>
c000b8e1:	59                   	pop    ecx
c000b8e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b8e6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b8ea:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b8ed:	e8 f1 b2 01 00       	call   c0026be3 <__floatsidf>
c000b8f2:	83 c4 10             	add    esp,0x10
c000b8f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b8f9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b8fd:	52                   	push   edx
c000b8fe:	50                   	push   eax
c000b8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b907:	e8 58 af 01 00       	call   c0026864 <__divdf3>
c000b90c:	83 c4 10             	add    esp,0x10
c000b90f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b913:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b917:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000b91a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000b91d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b921:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b925:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b929:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b92d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b931:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b935:	e8 f7 b4 01 00       	call   c0026e31 <__gtdf2>
c000b93a:	83 c4 10             	add    esp,0x10
c000b93d:	85 c0                	test   eax,eax
c000b93f:	7e 2d                	jle    c000b96e <sinc_multichan_vari_process+0x14e>
c000b941:	68 00 00 f0 3f       	push   0x3ff00000
c000b946:	6a 00                	push   0x0
c000b948:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b94c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b950:	e8 fa b4 01 00       	call   c0026e4f <__ltdf2>
c000b955:	83 c4 10             	add    esp,0x10
c000b958:	85 c0                	test   eax,eax
c000b95a:	79 4d                	jns    c000b9a9 <sinc_multichan_vari_process+0x189>
c000b95c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b960:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b964:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b968:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b96c:	eb 1b                	jmp    c000b989 <sinc_multichan_vari_process+0x169>
c000b96e:	68 00 00 f0 3f       	push   0x3ff00000
c000b973:	6a 00                	push   0x0
c000b975:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b979:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b97d:	e8 cd b4 01 00       	call   c0026e4f <__ltdf2>
c000b982:	83 c4 10             	add    esp,0x10
c000b985:	85 c0                	test   eax,eax
c000b987:	79 20                	jns    c000b9a9 <sinc_multichan_vari_process+0x189>
c000b989:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b98d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b991:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b995:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b999:	e8 c6 ae 01 00       	call   c0026864 <__divdf3>
c000b99e:	83 c4 10             	add    esp,0x10
c000b9a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9a9:	50                   	push   eax
c000b9aa:	50                   	push   eax
c000b9ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9b3:	e8 48 b6 01 00       	call   c0027000 <lrint>
c000b9b8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000b9bb:	40                   	inc    eax
c000b9bc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b9c0:	0f af c5             	imul   eax,ebp
c000b9c3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000b9c7:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000b9ca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b9ce:	58                   	pop    eax
c000b9cf:	5a                   	pop    edx
c000b9d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9d8:	e8 23 b6 01 00       	call   c0027000 <lrint>
c000b9dd:	83 ec 0c             	sub    esp,0xc
c000b9e0:	50                   	push   eax
c000b9e1:	e8 fd b1 01 00       	call   c0026be3 <__floatsidf>
c000b9e6:	83 c4 10             	add    esp,0x10
c000b9e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9f1:	52                   	push   edx
c000b9f2:	50                   	push   eax
c000b9f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b9fb:	e8 54 ab 01 00       	call   c0026554 <__subdf3>
c000ba00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ba04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ba08:	83 c4 20             	add    esp,0x20
c000ba0b:	6a 00                	push   0x0
c000ba0d:	6a 00                	push   0x0
c000ba0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba17:	e8 33 b4 01 00       	call   c0026e4f <__ltdf2>
c000ba1c:	83 c4 10             	add    esp,0x10
c000ba1f:	85 c0                	test   eax,eax
c000ba21:	79 1f                	jns    c000ba42 <sinc_multichan_vari_process+0x222>
c000ba23:	68 00 00 f0 3f       	push   0x3ff00000
c000ba28:	6a 00                	push   0x0
c000ba2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba32:	e8 cc a4 01 00       	call   c0025f03 <__adddf3>
c000ba37:	83 c4 10             	add    esp,0x10
c000ba3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba3e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba42:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ba45:	83 ec 10             	sub    esp,0x10
c000ba48:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ba4c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba57:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba5b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba5f:	e8 f0 aa 01 00       	call   c0026554 <__subdf3>
c000ba64:	83 c4 18             	add    esp,0x18
c000ba67:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ba6b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ba6f:	52                   	push   edx
c000ba70:	50                   	push   eax
c000ba71:	e8 8a b5 01 00       	call   c0027000 <lrint>
c000ba76:	0f af e8             	imul   ebp,eax
c000ba79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ba7d:	01 e8                	add    eax,ebp
c000ba7f:	99                   	cdq    
c000ba80:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ba83:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ba86:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba8a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba8e:	68 00 00 f0 3f       	push   0x3ff00000
c000ba93:	6a 00                	push   0x0
c000ba95:	e8 ca ad 01 00       	call   c0026864 <__divdf3>
c000ba9a:	83 c4 10             	add    esp,0x10
c000ba9d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000baa1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000baa5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000baaa:	68 23 42 92 0c       	push   0xc924223
c000baaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bab3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bab7:	e8 47 a4 01 00       	call   c0025f03 <__adddf3>
c000babc:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bac0:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bac4:	83 c4 20             	add    esp,0x20
c000bac7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bacf:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bad7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bada:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000badd:	7d 50                	jge    c000bb2f <sinc_multichan_vari_process+0x30f>
c000badf:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bae2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bae5:	01 c8                	add    eax,ecx
c000bae7:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000baea:	99                   	cdq    
c000baeb:	f7 f9                	idiv   ecx
c000baed:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000baf1:	7d 0c                	jge    c000baff <sinc_multichan_vari_process+0x2df>
c000baf3:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000baf6:	85 ed                	test   ebp,ebp
c000baf8:	79 6b                	jns    c000bb65 <sinc_multichan_vari_process+0x345>
c000bafa:	e9 e6 00 00 00       	jmp    c000bbe5 <sinc_multichan_vari_process+0x3c5>
c000baff:	50                   	push   eax
c000bb00:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bb04:	57                   	push   edi
c000bb05:	53                   	push   ebx
c000bb06:	e8 9b fb ff ff       	call   c000b6a6 <prepare_data>
c000bb0b:	83 c4 10             	add    esp,0x10
c000bb0e:	89 c2                	mov    edx,eax
c000bb10:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bb13:	85 c0                	test   eax,eax
c000bb15:	0f 85 bf 03 00 00    	jne    c000beda <sinc_multichan_vari_process+0x6ba>
c000bb1b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb1e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb21:	01 c8                	add    eax,ecx
c000bb23:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb26:	99                   	cdq    
c000bb27:	f7 f9                	idiv   ecx
c000bb29:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bb2d:	7c c4                	jl     c000baf3 <sinc_multichan_vari_process+0x2d3>
c000bb2f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb33:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bb37:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bb3a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bb3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb41:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb45:	89 06                	mov    DWORD PTR [esi],eax
c000bb47:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bb4a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bb4d:	99                   	cdq    
c000bb4e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb51:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bb54:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bb57:	99                   	cdq    
c000bb58:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb5b:	31 d2                	xor    edx,edx
c000bb5d:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bb60:	e9 75 03 00 00       	jmp    c000beda <sinc_multichan_vari_process+0x6ba>
c000bb65:	83 ec 0c             	sub    esp,0xc
c000bb68:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bb6b:	e8 73 b0 01 00       	call   c0026be3 <__floatsidf>
c000bb70:	83 c4 10             	add    esp,0x10
c000bb73:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb77:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bb7b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bb7f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bb83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb8b:	e8 73 a3 01 00       	call   c0025f03 <__adddf3>
c000bb90:	83 c4 10             	add    esp,0x10
c000bb93:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb97:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bb9b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bb9f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bba3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bba7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbab:	e8 53 a3 01 00       	call   c0025f03 <__adddf3>
c000bbb0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bbb3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bbb7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bbbb:	e8 23 b0 01 00       	call   c0026be3 <__floatsidf>
c000bbc0:	83 c4 10             	add    esp,0x10
c000bbc3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbc7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbcb:	52                   	push   edx
c000bbcc:	50                   	push   eax
c000bbcd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbd1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbd5:	e8 73 b2 01 00       	call   c0026e4d <__gedf2>
c000bbda:	83 c4 10             	add    esp,0x10
c000bbdd:	85 c0                	test   eax,eax
c000bbdf:	0f 89 4a ff ff ff    	jns    c000bb2f <sinc_multichan_vari_process+0x30f>
c000bbe5:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bbe9:	0f 8e ed 00 00 00    	jle    c000bcdc <sinc_multichan_vari_process+0x4bc>
c000bbef:	83 ec 10             	sub    esp,0x10
c000bbf2:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bbf5:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bbf8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000bbfb:	ff 36                	push   DWORD PTR [esi]
c000bbfd:	e8 52 a9 01 00       	call   c0026554 <__subdf3>
c000bc02:	83 c4 18             	add    esp,0x18
c000bc05:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc09:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc0d:	52                   	push   edx
c000bc0e:	50                   	push   eax
c000bc0f:	e8 cc b3 01 00       	call   c0026fe0 <fabs>
c000bc14:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc18:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bc1c:	83 c4 10             	add    esp,0x10
c000bc1f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000bc24:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000bc29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc31:	e8 fb b1 01 00       	call   c0026e31 <__gtdf2>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	85 c0                	test   eax,eax
c000bc3b:	0f 8e 9b 00 00 00    	jle    c000bcdc <sinc_multichan_vari_process+0x4bc>
c000bc41:	8b 06                	mov    eax,DWORD PTR [esi]
c000bc43:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bc46:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc4a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bc4e:	52                   	push   edx
c000bc4f:	50                   	push   eax
c000bc50:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bc53:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bc56:	e8 f9 a8 01 00       	call   c0026554 <__subdf3>
c000bc5b:	59                   	pop    ecx
c000bc5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc60:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc64:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bc67:	e8 77 af 01 00       	call   c0026be3 <__floatsidf>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc73:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc77:	52                   	push   edx
c000bc78:	50                   	push   eax
c000bc79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc81:	e8 fa a8 01 00       	call   c0026580 <__muldf3>
c000bc86:	5d                   	pop    ebp
c000bc87:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc8b:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc8f:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bc92:	e8 4c af 01 00       	call   c0026be3 <__floatsidf>
c000bc97:	83 c4 10             	add    esp,0x10
c000bc9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bca2:	52                   	push   edx
c000bca3:	50                   	push   eax
c000bca4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bca8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcac:	e8 b3 ab 01 00       	call   c0026864 <__divdf3>
c000bcb1:	83 c4 10             	add    esp,0x10
c000bcb4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcb8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcc4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcc8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bccc:	e8 32 a2 01 00       	call   c0025f03 <__adddf3>
c000bcd1:	83 c4 10             	add    esp,0x10
c000bcd4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bcd8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bcdc:	83 ec 0c             	sub    esp,0xc
c000bcdf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bce2:	e8 fc ae 01 00       	call   c0026be3 <__floatsidf>
c000bce7:	83 c4 10             	add    esp,0x10
c000bcea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd02:	e8 48 b1 01 00       	call   c0026e4f <__ltdf2>
c000bd07:	83 c4 10             	add    esp,0x10
c000bd0a:	85 c0                	test   eax,eax
c000bd0c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd10:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bd14:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bd18:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bd1c:	78 10                	js     c000bd2e <sinc_multichan_vari_process+0x50e>
c000bd1e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bd22:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bd26:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd2a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd3a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd3e:	e8 3d a8 01 00       	call   c0026580 <__muldf3>
c000bd43:	59                   	pop    ecx
c000bd44:	5d                   	pop    ebp
c000bd45:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd49:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd55:	e8 25 f9 ff ff       	call   c000b67f <double_to_fp>
c000bd5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd5e:	89 c5                	mov    ebp,eax
c000bd60:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd68:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd6c:	e8 0f a8 01 00       	call   c0026580 <__muldf3>
c000bd71:	83 c4 18             	add    esp,0x18
c000bd74:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bd78:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bd7c:	52                   	push   edx
c000bd7d:	50                   	push   eax
c000bd7e:	e8 fc f8 ff ff       	call   c000b67f <double_to_fp>
c000bd83:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bd86:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bd8a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bd8d:	8d 04 90             	lea    eax,[eax+edx*4]
c000bd90:	50                   	push   eax
c000bd91:	50                   	push   eax
c000bd92:	50                   	push   eax
c000bd93:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd96:	e8 48 ae 01 00       	call   c0026be3 <__floatsidf>
c000bd9b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bd9f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bda3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bda7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdab:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdaf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdb3:	e8 ac aa 01 00       	call   c0026864 <__divdf3>
c000bdb8:	83 c4 1c             	add    esp,0x1c
c000bdbb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bdbf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bdc3:	52                   	push   edx
c000bdc4:	89 ea                	mov    edx,ebp
c000bdc6:	50                   	push   eax
c000bdc7:	89 d8                	mov    eax,ebx
c000bdc9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bdcc:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bdd0:	e8 69 ed ff ff       	call   c000ab3e <calc_output_multi>
c000bdd5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bdd8:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bddb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bddf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bde3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bde7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bdeb:	e8 74 aa 01 00       	call   c0026864 <__divdf3>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000bdf7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000bdfb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be03:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be07:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be0b:	e8 f3 a0 01 00       	call   c0025f03 <__adddf3>
c000be10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000be14:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000be18:	83 c4 28             	add    esp,0x28
c000be1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be1f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be23:	e8 d8 b1 01 00       	call   c0027000 <lrint>
c000be28:	83 ec 0c             	sub    esp,0xc
c000be2b:	50                   	push   eax
c000be2c:	e8 b2 ad 01 00       	call   c0026be3 <__floatsidf>
c000be31:	83 c4 10             	add    esp,0x10
c000be34:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be38:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be3c:	52                   	push   edx
c000be3d:	50                   	push   eax
c000be3e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be42:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be46:	e8 09 a7 01 00       	call   c0026554 <__subdf3>
c000be4b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be4f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be53:	83 c4 20             	add    esp,0x20
c000be56:	6a 00                	push   0x0
c000be58:	6a 00                	push   0x0
c000be5a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be62:	e8 e8 af 01 00       	call   c0026e4f <__ltdf2>
c000be67:	83 c4 10             	add    esp,0x10
c000be6a:	85 c0                	test   eax,eax
c000be6c:	79 20                	jns    c000be8e <sinc_multichan_vari_process+0x66e>
c000be6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7e:	e8 80 a0 01 00       	call   c0025f03 <__adddf3>
c000be83:	83 c4 10             	add    esp,0x10
c000be86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000be8e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000be91:	83 ec 10             	sub    esp,0x10
c000be94:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000be98:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000be9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bea3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bea7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000beab:	e8 a4 a6 01 00       	call   c0026554 <__subdf3>
c000beb0:	83 c4 18             	add    esp,0x18
c000beb3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bebb:	52                   	push   edx
c000bebc:	50                   	push   eax
c000bebd:	e8 3e b1 01 00       	call   c0027000 <lrint>
c000bec2:	0f af e8             	imul   ebp,eax
c000bec5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bec9:	83 c4 10             	add    esp,0x10
c000becc:	01 e8                	add    eax,ebp
c000bece:	99                   	cdq    
c000becf:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bed2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bed5:	e9 fd fb ff ff       	jmp    c000bad7 <sinc_multichan_vari_process+0x2b7>
c000beda:	83 c4 4c             	add    esp,0x4c
c000bedd:	89 d0                	mov    eax,edx
c000bedf:	5b                   	pop    ebx
c000bee0:	5e                   	pop    esi
c000bee1:	5f                   	pop    edi
c000bee2:	5d                   	pop    ebp
c000bee3:	c3                   	ret    

c000bee4 <sinc_hex_vari_process>:
c000bee4:	55                   	push   ebp
c000bee5:	ba 05 00 00 00       	mov    edx,0x5
c000beea:	57                   	push   edi
c000beeb:	56                   	push   esi
c000beec:	53                   	push   ebx
c000beed:	83 ec 4c             	sub    esp,0x4c
c000bef0:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000bef4:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000bef8:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000befb:	85 db                	test   ebx,ebx
c000befd:	0f 84 9c 06 00 00    	je     c000c59f <sinc_hex_vari_process+0x6bb>
c000bf03:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bf06:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000bf09:	0f af c7             	imul   eax,edi
c000bf0c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000bf0f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000bf12:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bf19:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bf20:	0f af c7             	imul   eax,edi
c000bf23:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bf26:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bf29:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bf2c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf30:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf34:	68 00 00 70 3f       	push   0x3f700000
c000bf39:	6a 00                	push   0x0
c000bf3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf43:	e8 07 af 01 00       	call   c0026e4f <__ltdf2>
c000bf48:	83 c4 10             	add    esp,0x10
c000bf4b:	ba 16 00 00 00       	mov    edx,0x16
c000bf50:	85 c0                	test   eax,eax
c000bf52:	0f 88 47 06 00 00    	js     c000c59f <sinc_hex_vari_process+0x6bb>
c000bf58:	68 00 00 70 40       	push   0x40700000
c000bf5d:	6a 00                	push   0x0
c000bf5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf67:	e8 c5 ae 01 00       	call   c0026e31 <__gtdf2>
c000bf6c:	83 c4 10             	add    esp,0x10
c000bf6f:	ba 16 00 00 00       	mov    edx,0x16
c000bf74:	85 c0                	test   eax,eax
c000bf76:	0f 8f 23 06 00 00    	jg     c000c59f <sinc_hex_vari_process+0x6bb>
c000bf7c:	83 ec 0c             	sub    esp,0xc
c000bf7f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bf82:	e8 5c ac 01 00       	call   c0026be3 <__floatsidf>
c000bf87:	83 c4 10             	add    esp,0x10
c000bf8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bf8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bf92:	68 00 00 00 40       	push   0x40000000
c000bf97:	6a 00                	push   0x0
c000bf99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfa1:	e8 5d 9f 01 00       	call   c0025f03 <__adddf3>
c000bfa6:	59                   	pop    ecx
c000bfa7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bfab:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bfaf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfb2:	e8 2c ac 01 00       	call   c0026be3 <__floatsidf>
c000bfb7:	83 c4 10             	add    esp,0x10
c000bfba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfbe:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfc2:	52                   	push   edx
c000bfc3:	50                   	push   eax
c000bfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfcc:	e8 93 a8 01 00       	call   c0026864 <__divdf3>
c000bfd1:	83 c4 10             	add    esp,0x10
c000bfd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfdc:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000bfdf:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000bfe2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bfe6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bfea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bff2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bff6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bffa:	e8 32 ae 01 00       	call   c0026e31 <__gtdf2>
c000bfff:	83 c4 10             	add    esp,0x10
c000c002:	85 c0                	test   eax,eax
c000c004:	7e 2d                	jle    c000c033 <sinc_hex_vari_process+0x14f>
c000c006:	68 00 00 f0 3f       	push   0x3ff00000
c000c00b:	6a 00                	push   0x0
c000c00d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c011:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c015:	e8 35 ae 01 00       	call   c0026e4f <__ltdf2>
c000c01a:	83 c4 10             	add    esp,0x10
c000c01d:	85 c0                	test   eax,eax
c000c01f:	79 4d                	jns    c000c06e <sinc_hex_vari_process+0x18a>
c000c021:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c025:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c029:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c02d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c031:	eb 1b                	jmp    c000c04e <sinc_hex_vari_process+0x16a>
c000c033:	68 00 00 f0 3f       	push   0x3ff00000
c000c038:	6a 00                	push   0x0
c000c03a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c03e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c042:	e8 08 ae 01 00       	call   c0026e4f <__ltdf2>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	85 c0                	test   eax,eax
c000c04c:	79 20                	jns    c000c06e <sinc_hex_vari_process+0x18a>
c000c04e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c052:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c056:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c05a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c05e:	e8 01 a8 01 00       	call   c0026864 <__divdf3>
c000c063:	83 c4 10             	add    esp,0x10
c000c066:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c06a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c06e:	50                   	push   eax
c000c06f:	50                   	push   eax
c000c070:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c074:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c078:	e8 83 af 01 00       	call   c0027000 <lrint>
c000c07d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c080:	40                   	inc    eax
c000c081:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c085:	0f af c7             	imul   eax,edi
c000c088:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c08c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c08f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c093:	58                   	pop    eax
c000c094:	5a                   	pop    edx
c000c095:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c099:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c09d:	e8 5e af 01 00       	call   c0027000 <lrint>
c000c0a2:	83 ec 0c             	sub    esp,0xc
c000c0a5:	50                   	push   eax
c000c0a6:	e8 38 ab 01 00       	call   c0026be3 <__floatsidf>
c000c0ab:	83 c4 10             	add    esp,0x10
c000c0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c0b6:	52                   	push   edx
c000c0b7:	50                   	push   eax
c000c0b8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0c0:	e8 8f a4 01 00       	call   c0026554 <__subdf3>
c000c0c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	83 c4 20             	add    esp,0x20
c000c0d0:	6a 00                	push   0x0
c000c0d2:	6a 00                	push   0x0
c000c0d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0dc:	e8 6e ad 01 00       	call   c0026e4f <__ltdf2>
c000c0e1:	83 c4 10             	add    esp,0x10
c000c0e4:	85 c0                	test   eax,eax
c000c0e6:	79 1f                	jns    c000c107 <sinc_hex_vari_process+0x223>
c000c0e8:	68 00 00 f0 3f       	push   0x3ff00000
c000c0ed:	6a 00                	push   0x0
c000c0ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0f7:	e8 07 9e 01 00       	call   c0025f03 <__adddf3>
c000c0fc:	83 c4 10             	add    esp,0x10
c000c0ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c103:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c107:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c10a:	83 ec 10             	sub    esp,0x10
c000c10d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c111:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c118:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c11c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c120:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c124:	e8 2b a4 01 00       	call   c0026554 <__subdf3>
c000c129:	83 c4 18             	add    esp,0x18
c000c12c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c130:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c134:	52                   	push   edx
c000c135:	50                   	push   eax
c000c136:	e8 c5 ae 01 00       	call   c0027000 <lrint>
c000c13b:	0f af f8             	imul   edi,eax
c000c13e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c142:	01 f8                	add    eax,edi
c000c144:	99                   	cdq    
c000c145:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c148:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c14b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c14f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c153:	68 00 00 f0 3f       	push   0x3ff00000
c000c158:	6a 00                	push   0x0
c000c15a:	e8 05 a7 01 00       	call   c0026864 <__divdf3>
c000c15f:	83 c4 10             	add    esp,0x10
c000c162:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c166:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c16a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c16f:	68 23 42 92 0c       	push   0xc924223
c000c174:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c178:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c17c:	e8 82 9d 01 00       	call   c0025f03 <__adddf3>
c000c181:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c185:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c189:	83 c4 20             	add    esp,0x20
c000c18c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c194:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c19c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c19f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c1a2:	7d 50                	jge    c000c1f4 <sinc_hex_vari_process+0x310>
c000c1a4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c1a7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c1aa:	01 c8                	add    eax,ecx
c000c1ac:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1af:	99                   	cdq    
c000c1b0:	f7 f9                	idiv   ecx
c000c1b2:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1b6:	7d 0c                	jge    c000c1c4 <sinc_hex_vari_process+0x2e0>
c000c1b8:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c1bb:	85 ff                	test   edi,edi
c000c1bd:	79 6c                	jns    c000c22b <sinc_hex_vari_process+0x347>
c000c1bf:	e9 e7 00 00 00       	jmp    c000c2ab <sinc_hex_vari_process+0x3c7>
c000c1c4:	50                   	push   eax
c000c1c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c1c9:	56                   	push   esi
c000c1ca:	53                   	push   ebx
c000c1cb:	e8 d6 f4 ff ff       	call   c000b6a6 <prepare_data>
c000c1d0:	83 c4 10             	add    esp,0x10
c000c1d3:	89 c2                	mov    edx,eax
c000c1d5:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c1d8:	85 c0                	test   eax,eax
c000c1da:	0f 85 bf 03 00 00    	jne    c000c59f <sinc_hex_vari_process+0x6bb>
c000c1e0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c1e3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c1e6:	01 c8                	add    eax,ecx
c000c1e8:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1eb:	99                   	cdq    
c000c1ec:	f7 f9                	idiv   ecx
c000c1ee:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1f2:	7c c4                	jl     c000c1b8 <sinc_hex_vari_process+0x2d4>
c000c1f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c1f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c1fc:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c1ff:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c206:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c20a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c20d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c210:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c213:	99                   	cdq    
c000c214:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c217:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c21a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c21d:	99                   	cdq    
c000c21e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c221:	31 d2                	xor    edx,edx
c000c223:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c226:	e9 74 03 00 00       	jmp    c000c59f <sinc_hex_vari_process+0x6bb>
c000c22b:	83 ec 0c             	sub    esp,0xc
c000c22e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c231:	e8 ad a9 01 00       	call   c0026be3 <__floatsidf>
c000c236:	83 c4 10             	add    esp,0x10
c000c239:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c23d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c241:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c249:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c24d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c251:	e8 ad 9c 01 00       	call   c0025f03 <__adddf3>
c000c256:	83 c4 10             	add    esp,0x10
c000c259:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c25d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c261:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c265:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c269:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c271:	e8 8d 9c 01 00       	call   c0025f03 <__adddf3>
c000c276:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c279:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c27d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c281:	e8 5d a9 01 00       	call   c0026be3 <__floatsidf>
c000c286:	83 c4 10             	add    esp,0x10
c000c289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c291:	52                   	push   edx
c000c292:	50                   	push   eax
c000c293:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c297:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c29b:	e8 ad ab 01 00       	call   c0026e4d <__gedf2>
c000c2a0:	83 c4 10             	add    esp,0x10
c000c2a3:	85 c0                	test   eax,eax
c000c2a5:	0f 89 49 ff ff ff    	jns    c000c1f4 <sinc_hex_vari_process+0x310>
c000c2ab:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c2af:	0f 8e ef 00 00 00    	jle    c000c3a4 <sinc_hex_vari_process+0x4c0>
c000c2b5:	83 ec 10             	sub    esp,0x10
c000c2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c2be:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c2c1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c2c4:	e8 8b a2 01 00       	call   c0026554 <__subdf3>
c000c2c9:	83 c4 18             	add    esp,0x18
c000c2cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d4:	52                   	push   edx
c000c2d5:	50                   	push   eax
c000c2d6:	e8 05 ad 01 00       	call   c0026fe0 <fabs>
c000c2db:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c2df:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c2e3:	83 c4 10             	add    esp,0x10
c000c2e6:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c2eb:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2f8:	e8 34 ab 01 00       	call   c0026e31 <__gtdf2>
c000c2fd:	83 c4 10             	add    esp,0x10
c000c300:	85 c0                	test   eax,eax
c000c302:	0f 8e 9c 00 00 00    	jle    c000c3a4 <sinc_hex_vari_process+0x4c0>
c000c308:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c30b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c30e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c312:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c316:	52                   	push   edx
c000c317:	50                   	push   eax
c000c318:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c31b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c31e:	e8 31 a2 01 00       	call   c0026554 <__subdf3>
c000c323:	59                   	pop    ecx
c000c324:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c328:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c32c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c32f:	e8 af a8 01 00       	call   c0026be3 <__floatsidf>
c000c334:	83 c4 10             	add    esp,0x10
c000c337:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c33b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c33f:	52                   	push   edx
c000c340:	50                   	push   eax
c000c341:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c345:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c349:	e8 32 a2 01 00       	call   c0026580 <__muldf3>
c000c34e:	5f                   	pop    edi
c000c34f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c353:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c357:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c35a:	e8 84 a8 01 00       	call   c0026be3 <__floatsidf>
c000c35f:	83 c4 10             	add    esp,0x10
c000c362:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c366:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c36a:	52                   	push   edx
c000c36b:	50                   	push   eax
c000c36c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c370:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c374:	e8 eb a4 01 00       	call   c0026864 <__divdf3>
c000c379:	83 c4 10             	add    esp,0x10
c000c37c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c380:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c384:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c388:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c38c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c390:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c394:	e8 6a 9b 01 00       	call   c0025f03 <__adddf3>
c000c399:	83 c4 10             	add    esp,0x10
c000c39c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c3a0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c3a4:	83 ec 0c             	sub    esp,0xc
c000c3a7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c3aa:	e8 34 a8 01 00       	call   c0026be3 <__floatsidf>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3ca:	e8 80 aa 01 00       	call   c0026e4f <__ltdf2>
c000c3cf:	83 c4 10             	add    esp,0x10
c000c3d2:	85 c0                	test   eax,eax
c000c3d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c3d8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c3dc:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c3e0:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c3e4:	78 10                	js     c000c3f6 <sinc_hex_vari_process+0x512>
c000c3e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c3ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c3ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c3f2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c3f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3fa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c406:	e8 75 a1 01 00       	call   c0026580 <__muldf3>
c000c40b:	59                   	pop    ecx
c000c40c:	5f                   	pop    edi
c000c40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c411:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c415:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c419:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c41d:	e8 5d f2 ff ff       	call   c000b67f <double_to_fp>
c000c422:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c426:	89 c7                	mov    edi,eax
c000c428:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c42c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c430:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c434:	e8 47 a1 01 00       	call   c0026580 <__muldf3>
c000c439:	83 c4 18             	add    esp,0x18
c000c43c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c440:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c444:	52                   	push   edx
c000c445:	50                   	push   eax
c000c446:	e8 34 f2 ff ff       	call   c000b67f <double_to_fp>
c000c44b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c44e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c452:	83 c4 0c             	add    esp,0xc
c000c455:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c458:	8d 04 90             	lea    eax,[eax+edx*4]
c000c45b:	50                   	push   eax
c000c45c:	50                   	push   eax
c000c45d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c460:	e8 7e a7 01 00       	call   c0026be3 <__floatsidf>
c000c465:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c469:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c46d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c471:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c475:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c479:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c47d:	e8 e2 a3 01 00       	call   c0026864 <__divdf3>
c000c482:	83 c4 18             	add    esp,0x18
c000c485:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c489:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c48d:	52                   	push   edx
c000c48e:	89 fa                	mov    edx,edi
c000c490:	50                   	push   eax
c000c491:	89 d8                	mov    eax,ebx
c000c493:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c497:	e8 50 de ff ff       	call   c000a2ec <calc_output_hex>
c000c49c:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c4a0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4a4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4a8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b0:	e8 af a3 01 00       	call   c0026864 <__divdf3>
c000c4b5:	83 c4 10             	add    esp,0x10
c000c4b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4bc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4c8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4cc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4d0:	e8 2e 9a 01 00       	call   c0025f03 <__adddf3>
c000c4d5:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c4d9:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c4dd:	83 c4 18             	add    esp,0x18
c000c4e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e8:	e8 13 ab 01 00       	call   c0027000 <lrint>
c000c4ed:	83 ec 0c             	sub    esp,0xc
c000c4f0:	50                   	push   eax
c000c4f1:	e8 ed a6 01 00       	call   c0026be3 <__floatsidf>
c000c4f6:	83 c4 10             	add    esp,0x10
c000c4f9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4fd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c501:	52                   	push   edx
c000c502:	50                   	push   eax
c000c503:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c507:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c50b:	e8 44 a0 01 00       	call   c0026554 <__subdf3>
c000c510:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c514:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c518:	83 c4 20             	add    esp,0x20
c000c51b:	6a 00                	push   0x0
c000c51d:	6a 00                	push   0x0
c000c51f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c523:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c527:	e8 23 a9 01 00       	call   c0026e4f <__ltdf2>
c000c52c:	83 c4 10             	add    esp,0x10
c000c52f:	85 c0                	test   eax,eax
c000c531:	79 20                	jns    c000c553 <sinc_hex_vari_process+0x66f>
c000c533:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c537:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c53b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c53f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c543:	e8 bb 99 01 00       	call   c0025f03 <__adddf3>
c000c548:	83 c4 10             	add    esp,0x10
c000c54b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c54f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c553:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c556:	83 ec 10             	sub    esp,0x10
c000c559:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c55d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c560:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c564:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c568:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c56c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c570:	e8 df 9f 01 00       	call   c0026554 <__subdf3>
c000c575:	83 c4 18             	add    esp,0x18
c000c578:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c57c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	e8 79 aa 01 00       	call   c0027000 <lrint>
c000c587:	0f af f8             	imul   edi,eax
c000c58a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c58e:	83 c4 10             	add    esp,0x10
c000c591:	01 f8                	add    eax,edi
c000c593:	99                   	cdq    
c000c594:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c597:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c59a:	e9 fd fb ff ff       	jmp    c000c19c <sinc_hex_vari_process+0x2b8>
c000c59f:	83 c4 4c             	add    esp,0x4c
c000c5a2:	89 d0                	mov    eax,edx
c000c5a4:	5b                   	pop    ebx
c000c5a5:	5e                   	pop    esi
c000c5a6:	5f                   	pop    edi
c000c5a7:	5d                   	pop    ebp
c000c5a8:	c3                   	ret    

c000c5a9 <sinc_quad_vari_process>:
c000c5a9:	55                   	push   ebp
c000c5aa:	ba 05 00 00 00       	mov    edx,0x5
c000c5af:	57                   	push   edi
c000c5b0:	56                   	push   esi
c000c5b1:	53                   	push   ebx
c000c5b2:	83 ec 4c             	sub    esp,0x4c
c000c5b5:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c5b9:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c5bd:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c5c0:	85 db                	test   ebx,ebx
c000c5c2:	0f 84 9c 06 00 00    	je     c000cc64 <sinc_quad_vari_process+0x6bb>
c000c5c8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c5cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c5ce:	0f af c7             	imul   eax,edi
c000c5d1:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c5d4:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c5d7:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c5de:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c5e5:	0f af c7             	imul   eax,edi
c000c5e8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c5eb:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c5ee:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c5f1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f9:	68 00 00 70 3f       	push   0x3f700000
c000c5fe:	6a 00                	push   0x0
c000c600:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c604:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c608:	e8 42 a8 01 00       	call   c0026e4f <__ltdf2>
c000c60d:	83 c4 10             	add    esp,0x10
c000c610:	ba 16 00 00 00       	mov    edx,0x16
c000c615:	85 c0                	test   eax,eax
c000c617:	0f 88 47 06 00 00    	js     c000cc64 <sinc_quad_vari_process+0x6bb>
c000c61d:	68 00 00 70 40       	push   0x40700000
c000c622:	6a 00                	push   0x0
c000c624:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c628:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c62c:	e8 00 a8 01 00       	call   c0026e31 <__gtdf2>
c000c631:	83 c4 10             	add    esp,0x10
c000c634:	ba 16 00 00 00       	mov    edx,0x16
c000c639:	85 c0                	test   eax,eax
c000c63b:	0f 8f 23 06 00 00    	jg     c000cc64 <sinc_quad_vari_process+0x6bb>
c000c641:	83 ec 0c             	sub    esp,0xc
c000c644:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c647:	e8 97 a5 01 00       	call   c0026be3 <__floatsidf>
c000c64c:	83 c4 10             	add    esp,0x10
c000c64f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c653:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c657:	68 00 00 00 40       	push   0x40000000
c000c65c:	6a 00                	push   0x0
c000c65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c662:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c666:	e8 98 98 01 00       	call   c0025f03 <__adddf3>
c000c66b:	59                   	pop    ecx
c000c66c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c670:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c674:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c677:	e8 67 a5 01 00       	call   c0026be3 <__floatsidf>
c000c67c:	83 c4 10             	add    esp,0x10
c000c67f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c683:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c687:	52                   	push   edx
c000c688:	50                   	push   eax
c000c689:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c68d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c691:	e8 ce a1 01 00       	call   c0026864 <__divdf3>
c000c696:	83 c4 10             	add    esp,0x10
c000c699:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c69d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c6a1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c6a4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c6a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6bf:	e8 6d a7 01 00       	call   c0026e31 <__gtdf2>
c000c6c4:	83 c4 10             	add    esp,0x10
c000c6c7:	85 c0                	test   eax,eax
c000c6c9:	7e 2d                	jle    c000c6f8 <sinc_quad_vari_process+0x14f>
c000c6cb:	68 00 00 f0 3f       	push   0x3ff00000
c000c6d0:	6a 00                	push   0x0
c000c6d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	e8 70 a7 01 00       	call   c0026e4f <__ltdf2>
c000c6df:	83 c4 10             	add    esp,0x10
c000c6e2:	85 c0                	test   eax,eax
c000c6e4:	79 4d                	jns    c000c733 <sinc_quad_vari_process+0x18a>
c000c6e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c6ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6f6:	eb 1b                	jmp    c000c713 <sinc_quad_vari_process+0x16a>
c000c6f8:	68 00 00 f0 3f       	push   0x3ff00000
c000c6fd:	6a 00                	push   0x0
c000c6ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c703:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c707:	e8 43 a7 01 00       	call   c0026e4f <__ltdf2>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	85 c0                	test   eax,eax
c000c711:	79 20                	jns    c000c733 <sinc_quad_vari_process+0x18a>
c000c713:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c717:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c71b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c71f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c723:	e8 3c a1 01 00       	call   c0026864 <__divdf3>
c000c728:	83 c4 10             	add    esp,0x10
c000c72b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c72f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c733:	50                   	push   eax
c000c734:	50                   	push   eax
c000c735:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c739:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c73d:	e8 be a8 01 00       	call   c0027000 <lrint>
c000c742:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c745:	40                   	inc    eax
c000c746:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c74a:	0f af c7             	imul   eax,edi
c000c74d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c751:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c754:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c758:	58                   	pop    eax
c000c759:	5a                   	pop    edx
c000c75a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c75e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c762:	e8 99 a8 01 00       	call   c0027000 <lrint>
c000c767:	83 ec 0c             	sub    esp,0xc
c000c76a:	50                   	push   eax
c000c76b:	e8 73 a4 01 00       	call   c0026be3 <__floatsidf>
c000c770:	83 c4 10             	add    esp,0x10
c000c773:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c777:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c77b:	52                   	push   edx
c000c77c:	50                   	push   eax
c000c77d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c781:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c785:	e8 ca 9d 01 00       	call   c0026554 <__subdf3>
c000c78a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	83 c4 20             	add    esp,0x20
c000c795:	6a 00                	push   0x0
c000c797:	6a 00                	push   0x0
c000c799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7a1:	e8 a9 a6 01 00       	call   c0026e4f <__ltdf2>
c000c7a6:	83 c4 10             	add    esp,0x10
c000c7a9:	85 c0                	test   eax,eax
c000c7ab:	79 1f                	jns    c000c7cc <sinc_quad_vari_process+0x223>
c000c7ad:	68 00 00 f0 3f       	push   0x3ff00000
c000c7b2:	6a 00                	push   0x0
c000c7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7bc:	e8 42 97 01 00       	call   c0025f03 <__adddf3>
c000c7c1:	83 c4 10             	add    esp,0x10
c000c7c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7cc:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7cf:	83 ec 10             	sub    esp,0x10
c000c7d2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c7d6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7e1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7e9:	e8 66 9d 01 00       	call   c0026554 <__subdf3>
c000c7ee:	83 c4 18             	add    esp,0x18
c000c7f1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c7f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c7f9:	52                   	push   edx
c000c7fa:	50                   	push   eax
c000c7fb:	e8 00 a8 01 00       	call   c0027000 <lrint>
c000c800:	0f af f8             	imul   edi,eax
c000c803:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c807:	01 f8                	add    eax,edi
c000c809:	99                   	cdq    
c000c80a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c80d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c810:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c814:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c818:	68 00 00 f0 3f       	push   0x3ff00000
c000c81d:	6a 00                	push   0x0
c000c81f:	e8 40 a0 01 00       	call   c0026864 <__divdf3>
c000c824:	83 c4 10             	add    esp,0x10
c000c827:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c82b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c82f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c834:	68 23 42 92 0c       	push   0xc924223
c000c839:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c83d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c841:	e8 bd 96 01 00       	call   c0025f03 <__adddf3>
c000c846:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c84a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c84e:	83 c4 20             	add    esp,0x20
c000c851:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c859:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c861:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c864:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c867:	7d 50                	jge    c000c8b9 <sinc_quad_vari_process+0x310>
c000c869:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c86c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c86f:	01 c8                	add    eax,ecx
c000c871:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c874:	99                   	cdq    
c000c875:	f7 f9                	idiv   ecx
c000c877:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c87b:	7d 0c                	jge    c000c889 <sinc_quad_vari_process+0x2e0>
c000c87d:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c880:	85 ff                	test   edi,edi
c000c882:	79 6c                	jns    c000c8f0 <sinc_quad_vari_process+0x347>
c000c884:	e9 e7 00 00 00       	jmp    c000c970 <sinc_quad_vari_process+0x3c7>
c000c889:	50                   	push   eax
c000c88a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c88e:	56                   	push   esi
c000c88f:	53                   	push   ebx
c000c890:	e8 11 ee ff ff       	call   c000b6a6 <prepare_data>
c000c895:	83 c4 10             	add    esp,0x10
c000c898:	89 c2                	mov    edx,eax
c000c89a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c89d:	85 c0                	test   eax,eax
c000c89f:	0f 85 bf 03 00 00    	jne    c000cc64 <sinc_quad_vari_process+0x6bb>
c000c8a5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c8a8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c8ab:	01 c8                	add    eax,ecx
c000c8ad:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c8b0:	99                   	cdq    
c000c8b1:	f7 f9                	idiv   ecx
c000c8b3:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c8b7:	7c c4                	jl     c000c87d <sinc_quad_vari_process+0x2d4>
c000c8b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c8bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c8c1:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c8c4:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c8cf:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c8d2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c8d5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c8d8:	99                   	cdq    
c000c8d9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c8dc:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c8df:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c8e2:	99                   	cdq    
c000c8e3:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c8e6:	31 d2                	xor    edx,edx
c000c8e8:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c8eb:	e9 74 03 00 00       	jmp    c000cc64 <sinc_quad_vari_process+0x6bb>
c000c8f0:	83 ec 0c             	sub    esp,0xc
c000c8f3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c8f6:	e8 e8 a2 01 00       	call   c0026be3 <__floatsidf>
c000c8fb:	83 c4 10             	add    esp,0x10
c000c8fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c902:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c906:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c90a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c90e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c912:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c916:	e8 e8 95 01 00       	call   c0025f03 <__adddf3>
c000c91b:	83 c4 10             	add    esp,0x10
c000c91e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c922:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c926:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c92a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c92e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c932:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c936:	e8 c8 95 01 00       	call   c0025f03 <__adddf3>
c000c93b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c93e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c942:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c946:	e8 98 a2 01 00       	call   c0026be3 <__floatsidf>
c000c94b:	83 c4 10             	add    esp,0x10
c000c94e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c952:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c956:	52                   	push   edx
c000c957:	50                   	push   eax
c000c958:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c95c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c960:	e8 e8 a4 01 00       	call   c0026e4d <__gedf2>
c000c965:	83 c4 10             	add    esp,0x10
c000c968:	85 c0                	test   eax,eax
c000c96a:	0f 89 49 ff ff ff    	jns    c000c8b9 <sinc_quad_vari_process+0x310>
c000c970:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c974:	0f 8e ef 00 00 00    	jle    c000ca69 <sinc_quad_vari_process+0x4c0>
c000c97a:	83 ec 10             	sub    esp,0x10
c000c97d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c980:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c983:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c986:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c989:	e8 c6 9b 01 00       	call   c0026554 <__subdf3>
c000c98e:	83 c4 18             	add    esp,0x18
c000c991:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c995:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c999:	52                   	push   edx
c000c99a:	50                   	push   eax
c000c99b:	e8 40 a6 01 00       	call   c0026fe0 <fabs>
c000c9a0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9a4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c9a8:	83 c4 10             	add    esp,0x10
c000c9ab:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c9b0:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c9b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9bd:	e8 6f a4 01 00       	call   c0026e31 <__gtdf2>
c000c9c2:	83 c4 10             	add    esp,0x10
c000c9c5:	85 c0                	test   eax,eax
c000c9c7:	0f 8e 9c 00 00 00    	jle    c000ca69 <sinc_quad_vari_process+0x4c0>
c000c9cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c9d0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c9d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c9d7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c9db:	52                   	push   edx
c000c9dc:	50                   	push   eax
c000c9dd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c9e0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c9e3:	e8 6c 9b 01 00       	call   c0026554 <__subdf3>
c000c9e8:	59                   	pop    ecx
c000c9e9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c9ed:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c9f1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c9f4:	e8 ea a1 01 00       	call   c0026be3 <__floatsidf>
c000c9f9:	83 c4 10             	add    esp,0x10
c000c9fc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca00:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca04:	52                   	push   edx
c000ca05:	50                   	push   eax
c000ca06:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca0e:	e8 6d 9b 01 00       	call   c0026580 <__muldf3>
c000ca13:	5f                   	pop    edi
c000ca14:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ca18:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ca1c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ca1f:	e8 bf a1 01 00       	call   c0026be3 <__floatsidf>
c000ca24:	83 c4 10             	add    esp,0x10
c000ca27:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca2b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca2f:	52                   	push   edx
c000ca30:	50                   	push   eax
c000ca31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca39:	e8 26 9e 01 00       	call   c0026864 <__divdf3>
c000ca3e:	83 c4 10             	add    esp,0x10
c000ca41:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca45:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca59:	e8 a5 94 01 00       	call   c0025f03 <__adddf3>
c000ca5e:	83 c4 10             	add    esp,0x10
c000ca61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca65:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca69:	83 ec 0c             	sub    esp,0xc
c000ca6c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ca6f:	e8 6f a1 01 00       	call   c0026be3 <__floatsidf>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca8f:	e8 bb a3 01 00       	call   c0026e4f <__ltdf2>
c000ca94:	83 c4 10             	add    esp,0x10
c000ca97:	85 c0                	test   eax,eax
c000ca99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ca9d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000caa1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000caa5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000caa9:	78 10                	js     c000cabb <sinc_quad_vari_process+0x512>
c000caab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000caaf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cab3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cab7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cabb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cabf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cac3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cac7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cacb:	e8 b0 9a 01 00       	call   c0026580 <__muldf3>
c000cad0:	59                   	pop    ecx
c000cad1:	5f                   	pop    edi
c000cad2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cad6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cada:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cade:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cae2:	e8 98 eb ff ff       	call   c000b67f <double_to_fp>
c000cae7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000caeb:	89 c7                	mov    edi,eax
c000caed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000caf1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000caf5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000caf9:	e8 82 9a 01 00       	call   c0026580 <__muldf3>
c000cafe:	83 c4 18             	add    esp,0x18
c000cb01:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb05:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb09:	52                   	push   edx
c000cb0a:	50                   	push   eax
c000cb0b:	e8 6f eb ff ff       	call   c000b67f <double_to_fp>
c000cb10:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cb13:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cb17:	83 c4 0c             	add    esp,0xc
c000cb1a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cb1d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cb20:	50                   	push   eax
c000cb21:	50                   	push   eax
c000cb22:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cb25:	e8 b9 a0 01 00       	call   c0026be3 <__floatsidf>
c000cb2a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cb2e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cb32:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb36:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb3a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb3e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb42:	e8 1d 9d 01 00       	call   c0026864 <__divdf3>
c000cb47:	83 c4 18             	add    esp,0x18
c000cb4a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb4e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb52:	52                   	push   edx
c000cb53:	89 fa                	mov    edx,edi
c000cb55:	50                   	push   eax
c000cb56:	89 d8                	mov    eax,ebx
c000cb58:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cb5c:	e8 a5 d1 ff ff       	call   c0009d06 <calc_output_quad>
c000cb61:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cb65:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb69:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb75:	e8 ea 9c 01 00       	call   c0026864 <__divdf3>
c000cb7a:	83 c4 10             	add    esp,0x10
c000cb7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb81:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb8d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb91:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb95:	e8 69 93 01 00       	call   c0025f03 <__adddf3>
c000cb9a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cb9e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cba2:	83 c4 18             	add    esp,0x18
c000cba5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cba9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbad:	e8 4e a4 01 00       	call   c0027000 <lrint>
c000cbb2:	83 ec 0c             	sub    esp,0xc
c000cbb5:	50                   	push   eax
c000cbb6:	e8 28 a0 01 00       	call   c0026be3 <__floatsidf>
c000cbbb:	83 c4 10             	add    esp,0x10
c000cbbe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cbc2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cbc6:	52                   	push   edx
c000cbc7:	50                   	push   eax
c000cbc8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbcc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbd0:	e8 7f 99 01 00       	call   c0026554 <__subdf3>
c000cbd5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbd9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbdd:	83 c4 20             	add    esp,0x20
c000cbe0:	6a 00                	push   0x0
c000cbe2:	6a 00                	push   0x0
c000cbe4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbe8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbec:	e8 5e a2 01 00       	call   c0026e4f <__ltdf2>
c000cbf1:	83 c4 10             	add    esp,0x10
c000cbf4:	85 c0                	test   eax,eax
c000cbf6:	79 20                	jns    c000cc18 <sinc_quad_vari_process+0x66f>
c000cbf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc08:	e8 f6 92 01 00       	call   c0025f03 <__adddf3>
c000cc0d:	83 c4 10             	add    esp,0x10
c000cc10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc18:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc1b:	83 ec 10             	sub    esp,0x10
c000cc1e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cc22:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc2d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc31:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc35:	e8 1a 99 01 00       	call   c0026554 <__subdf3>
c000cc3a:	83 c4 18             	add    esp,0x18
c000cc3d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc41:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	e8 b4 a3 01 00       	call   c0027000 <lrint>
c000cc4c:	0f af f8             	imul   edi,eax
c000cc4f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cc53:	83 c4 10             	add    esp,0x10
c000cc56:	01 f8                	add    eax,edi
c000cc58:	99                   	cdq    
c000cc59:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cc5c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cc5f:	e9 fd fb ff ff       	jmp    c000c861 <sinc_quad_vari_process+0x2b8>
c000cc64:	83 c4 4c             	add    esp,0x4c
c000cc67:	89 d0                	mov    eax,edx
c000cc69:	5b                   	pop    ebx
c000cc6a:	5e                   	pop    esi
c000cc6b:	5f                   	pop    edi
c000cc6c:	5d                   	pop    ebp
c000cc6d:	c3                   	ret    

c000cc6e <sinc_stereo_vari_process>:
c000cc6e:	55                   	push   ebp
c000cc6f:	ba 05 00 00 00       	mov    edx,0x5
c000cc74:	57                   	push   edi
c000cc75:	56                   	push   esi
c000cc76:	53                   	push   ebx
c000cc77:	83 ec 4c             	sub    esp,0x4c
c000cc7a:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cc7e:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000cc82:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000cc85:	85 db                	test   ebx,ebx
c000cc87:	0f 84 9c 06 00 00    	je     c000d329 <sinc_stereo_vari_process+0x6bb>
c000cc8d:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cc90:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc93:	0f af c7             	imul   eax,edi
c000cc96:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cc99:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cc9c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cca3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ccaa:	0f af c7             	imul   eax,edi
c000ccad:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ccb0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ccb3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ccb6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccbe:	68 00 00 70 3f       	push   0x3f700000
c000ccc3:	6a 00                	push   0x0
c000ccc5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cccd:	e8 7d a1 01 00       	call   c0026e4f <__ltdf2>
c000ccd2:	83 c4 10             	add    esp,0x10
c000ccd5:	ba 16 00 00 00       	mov    edx,0x16
c000ccda:	85 c0                	test   eax,eax
c000ccdc:	0f 88 47 06 00 00    	js     c000d329 <sinc_stereo_vari_process+0x6bb>
c000cce2:	68 00 00 70 40       	push   0x40700000
c000cce7:	6a 00                	push   0x0
c000cce9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cced:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccf1:	e8 3b a1 01 00       	call   c0026e31 <__gtdf2>
c000ccf6:	83 c4 10             	add    esp,0x10
c000ccf9:	ba 16 00 00 00       	mov    edx,0x16
c000ccfe:	85 c0                	test   eax,eax
c000cd00:	0f 8f 23 06 00 00    	jg     c000d329 <sinc_stereo_vari_process+0x6bb>
c000cd06:	83 ec 0c             	sub    esp,0xc
c000cd09:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cd0c:	e8 d2 9e 01 00       	call   c0026be3 <__floatsidf>
c000cd11:	83 c4 10             	add    esp,0x10
c000cd14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd1c:	68 00 00 00 40       	push   0x40000000
c000cd21:	6a 00                	push   0x0
c000cd23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd27:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd2b:	e8 d3 91 01 00       	call   c0025f03 <__adddf3>
c000cd30:	59                   	pop    ecx
c000cd31:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd35:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cd39:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3c:	e8 a2 9e 01 00       	call   c0026be3 <__floatsidf>
c000cd41:	83 c4 10             	add    esp,0x10
c000cd44:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd48:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd4c:	52                   	push   edx
c000cd4d:	50                   	push   eax
c000cd4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd56:	e8 09 9b 01 00       	call   c0026864 <__divdf3>
c000cd5b:	83 c4 10             	add    esp,0x10
c000cd5e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd62:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd66:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cd69:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cd6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd84:	e8 a8 a0 01 00       	call   c0026e31 <__gtdf2>
c000cd89:	83 c4 10             	add    esp,0x10
c000cd8c:	85 c0                	test   eax,eax
c000cd8e:	7e 2d                	jle    c000cdbd <sinc_stereo_vari_process+0x14f>
c000cd90:	68 00 00 f0 3f       	push   0x3ff00000
c000cd95:	6a 00                	push   0x0
c000cd97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	e8 ab a0 01 00       	call   c0026e4f <__ltdf2>
c000cda4:	83 c4 10             	add    esp,0x10
c000cda7:	85 c0                	test   eax,eax
c000cda9:	79 4d                	jns    c000cdf8 <sinc_stereo_vari_process+0x18a>
c000cdab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdaf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cdb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cdb7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cdbb:	eb 1b                	jmp    c000cdd8 <sinc_stereo_vari_process+0x16a>
c000cdbd:	68 00 00 f0 3f       	push   0x3ff00000
c000cdc2:	6a 00                	push   0x0
c000cdc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdcc:	e8 7e a0 01 00       	call   c0026e4f <__ltdf2>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	85 c0                	test   eax,eax
c000cdd6:	79 20                	jns    c000cdf8 <sinc_stereo_vari_process+0x18a>
c000cdd8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cddc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cde0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cde4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cde8:	e8 77 9a 01 00       	call   c0026864 <__divdf3>
c000cded:	83 c4 10             	add    esp,0x10
c000cdf0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdf4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cdf8:	50                   	push   eax
c000cdf9:	50                   	push   eax
c000cdfa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdfe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce02:	e8 f9 a1 01 00       	call   c0027000 <lrint>
c000ce07:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000ce0a:	40                   	inc    eax
c000ce0b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce0f:	0f af c7             	imul   eax,edi
c000ce12:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ce16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce19:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce1d:	58                   	pop    eax
c000ce1e:	5a                   	pop    edx
c000ce1f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce23:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce27:	e8 d4 a1 01 00       	call   c0027000 <lrint>
c000ce2c:	83 ec 0c             	sub    esp,0xc
c000ce2f:	50                   	push   eax
c000ce30:	e8 ae 9d 01 00       	call   c0026be3 <__floatsidf>
c000ce35:	83 c4 10             	add    esp,0x10
c000ce38:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce3c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce40:	52                   	push   edx
c000ce41:	50                   	push   eax
c000ce42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce4a:	e8 05 97 01 00       	call   c0026554 <__subdf3>
c000ce4f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	83 c4 20             	add    esp,0x20
c000ce5a:	6a 00                	push   0x0
c000ce5c:	6a 00                	push   0x0
c000ce5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce66:	e8 e4 9f 01 00       	call   c0026e4f <__ltdf2>
c000ce6b:	83 c4 10             	add    esp,0x10
c000ce6e:	85 c0                	test   eax,eax
c000ce70:	79 1f                	jns    c000ce91 <sinc_stereo_vari_process+0x223>
c000ce72:	68 00 00 f0 3f       	push   0x3ff00000
c000ce77:	6a 00                	push   0x0
c000ce79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce81:	e8 7d 90 01 00       	call   c0025f03 <__adddf3>
c000ce86:	83 c4 10             	add    esp,0x10
c000ce89:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce8d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce91:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce94:	83 ec 10             	sub    esp,0x10
c000ce97:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ce9b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cea2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cea6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ceaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ceae:	e8 a1 96 01 00       	call   c0026554 <__subdf3>
c000ceb3:	83 c4 18             	add    esp,0x18
c000ceb6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ceba:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cebe:	52                   	push   edx
c000cebf:	50                   	push   eax
c000cec0:	e8 3b a1 01 00       	call   c0027000 <lrint>
c000cec5:	0f af f8             	imul   edi,eax
c000cec8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cecc:	01 f8                	add    eax,edi
c000cece:	99                   	cdq    
c000cecf:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ced2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ced5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ced9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cedd:	68 00 00 f0 3f       	push   0x3ff00000
c000cee2:	6a 00                	push   0x0
c000cee4:	e8 7b 99 01 00       	call   c0026864 <__divdf3>
c000cee9:	83 c4 10             	add    esp,0x10
c000ceec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cef0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cef4:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000cef9:	68 23 42 92 0c       	push   0xc924223
c000cefe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf02:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf06:	e8 f8 8f 01 00       	call   c0025f03 <__adddf3>
c000cf0b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000cf0f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cf13:	83 c4 20             	add    esp,0x20
c000cf16:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cf1e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cf26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cf29:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cf2c:	7d 50                	jge    c000cf7e <sinc_stereo_vari_process+0x310>
c000cf2e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf31:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf34:	01 c8                	add    eax,ecx
c000cf36:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf39:	99                   	cdq    
c000cf3a:	f7 f9                	idiv   ecx
c000cf3c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf40:	7d 0c                	jge    c000cf4e <sinc_stereo_vari_process+0x2e0>
c000cf42:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cf45:	85 ff                	test   edi,edi
c000cf47:	79 6c                	jns    c000cfb5 <sinc_stereo_vari_process+0x347>
c000cf49:	e9 e7 00 00 00       	jmp    c000d035 <sinc_stereo_vari_process+0x3c7>
c000cf4e:	50                   	push   eax
c000cf4f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf53:	56                   	push   esi
c000cf54:	53                   	push   ebx
c000cf55:	e8 4c e7 ff ff       	call   c000b6a6 <prepare_data>
c000cf5a:	83 c4 10             	add    esp,0x10
c000cf5d:	89 c2                	mov    edx,eax
c000cf5f:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cf62:	85 c0                	test   eax,eax
c000cf64:	0f 85 bf 03 00 00    	jne    c000d329 <sinc_stereo_vari_process+0x6bb>
c000cf6a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf6d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf70:	01 c8                	add    eax,ecx
c000cf72:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf75:	99                   	cdq    
c000cf76:	f7 f9                	idiv   ecx
c000cf78:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf7c:	7c c4                	jl     c000cf42 <sinc_stereo_vari_process+0x2d4>
c000cf7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cf82:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cf86:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cf89:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cf8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf90:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cf94:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cf97:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cf9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cf9d:	99                   	cdq    
c000cf9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cfa1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cfa4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cfa7:	99                   	cdq    
c000cfa8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cfab:	31 d2                	xor    edx,edx
c000cfad:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cfb0:	e9 74 03 00 00       	jmp    c000d329 <sinc_stereo_vari_process+0x6bb>
c000cfb5:	83 ec 0c             	sub    esp,0xc
c000cfb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cfbb:	e8 23 9c 01 00       	call   c0026be3 <__floatsidf>
c000cfc0:	83 c4 10             	add    esp,0x10
c000cfc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cfc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cfcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cfcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cfd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfdb:	e8 23 8f 01 00       	call   c0025f03 <__adddf3>
c000cfe0:	83 c4 10             	add    esp,0x10
c000cfe3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cfe7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cfeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cff3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cff7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cffb:	e8 03 8f 01 00       	call   c0025f03 <__adddf3>
c000d000:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d003:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d007:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d00b:	e8 d3 9b 01 00       	call   c0026be3 <__floatsidf>
c000d010:	83 c4 10             	add    esp,0x10
c000d013:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d017:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d01b:	52                   	push   edx
c000d01c:	50                   	push   eax
c000d01d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d021:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d025:	e8 23 9e 01 00       	call   c0026e4d <__gedf2>
c000d02a:	83 c4 10             	add    esp,0x10
c000d02d:	85 c0                	test   eax,eax
c000d02f:	0f 89 49 ff ff ff    	jns    c000cf7e <sinc_stereo_vari_process+0x310>
c000d035:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d039:	0f 8e ef 00 00 00    	jle    c000d12e <sinc_stereo_vari_process+0x4c0>
c000d03f:	83 ec 10             	sub    esp,0x10
c000d042:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d045:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d048:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d04b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d04e:	e8 01 95 01 00       	call   c0026554 <__subdf3>
c000d053:	83 c4 18             	add    esp,0x18
c000d056:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d05a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05e:	52                   	push   edx
c000d05f:	50                   	push   eax
c000d060:	e8 7b 9f 01 00       	call   c0026fe0 <fabs>
c000d065:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d069:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d06d:	83 c4 10             	add    esp,0x10
c000d070:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d075:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d07a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d07e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d082:	e8 aa 9d 01 00       	call   c0026e31 <__gtdf2>
c000d087:	83 c4 10             	add    esp,0x10
c000d08a:	85 c0                	test   eax,eax
c000d08c:	0f 8e 9c 00 00 00    	jle    c000d12e <sinc_stereo_vari_process+0x4c0>
c000d092:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d095:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d098:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d09c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d0a0:	52                   	push   edx
c000d0a1:	50                   	push   eax
c000d0a2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d0a5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d0a8:	e8 a7 94 01 00       	call   c0026554 <__subdf3>
c000d0ad:	59                   	pop    ecx
c000d0ae:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0b2:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0b6:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d0b9:	e8 25 9b 01 00       	call   c0026be3 <__floatsidf>
c000d0be:	83 c4 10             	add    esp,0x10
c000d0c1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0c9:	52                   	push   edx
c000d0ca:	50                   	push   eax
c000d0cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0d3:	e8 a8 94 01 00       	call   c0026580 <__muldf3>
c000d0d8:	5f                   	pop    edi
c000d0d9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0dd:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0e1:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d0e4:	e8 fa 9a 01 00       	call   c0026be3 <__floatsidf>
c000d0e9:	83 c4 10             	add    esp,0x10
c000d0ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0f4:	52                   	push   edx
c000d0f5:	50                   	push   eax
c000d0f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0fe:	e8 61 97 01 00       	call   c0026864 <__divdf3>
c000d103:	83 c4 10             	add    esp,0x10
c000d106:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d112:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d116:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d11a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d11e:	e8 e0 8d 01 00       	call   c0025f03 <__adddf3>
c000d123:	83 c4 10             	add    esp,0x10
c000d126:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d12a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d12e:	83 ec 0c             	sub    esp,0xc
c000d131:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d134:	e8 aa 9a 01 00       	call   c0026be3 <__floatsidf>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d148:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d14c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d150:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d154:	e8 f6 9c 01 00       	call   c0026e4f <__ltdf2>
c000d159:	83 c4 10             	add    esp,0x10
c000d15c:	85 c0                	test   eax,eax
c000d15e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d162:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d166:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d16a:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d16e:	78 10                	js     c000d180 <sinc_stereo_vari_process+0x512>
c000d170:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d174:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d178:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d17c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d180:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d184:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d188:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d18c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d190:	e8 eb 93 01 00       	call   c0026580 <__muldf3>
c000d195:	59                   	pop    ecx
c000d196:	5f                   	pop    edi
c000d197:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d19b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d19f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1a7:	e8 d3 e4 ff ff       	call   c000b67f <double_to_fp>
c000d1ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1b0:	89 c7                	mov    edi,eax
c000d1b2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1be:	e8 bd 93 01 00       	call   c0026580 <__muldf3>
c000d1c3:	83 c4 18             	add    esp,0x18
c000d1c6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d1ca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d1ce:	52                   	push   edx
c000d1cf:	50                   	push   eax
c000d1d0:	e8 aa e4 ff ff       	call   c000b67f <double_to_fp>
c000d1d5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d1d8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d1dc:	83 c4 0c             	add    esp,0xc
c000d1df:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d1e2:	8d 04 90             	lea    eax,[eax+edx*4]
c000d1e5:	50                   	push   eax
c000d1e6:	50                   	push   eax
c000d1e7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d1ea:	e8 f4 99 01 00       	call   c0026be3 <__floatsidf>
c000d1ef:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d1f3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d1f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d203:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d207:	e8 58 96 01 00       	call   c0026864 <__divdf3>
c000d20c:	83 c4 18             	add    esp,0x18
c000d20f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d213:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d217:	52                   	push   edx
c000d218:	89 fa                	mov    edx,edi
c000d21a:	50                   	push   eax
c000d21b:	89 d8                	mov    eax,ebx
c000d21d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d221:	e8 02 c7 ff ff       	call   c0009928 <calc_output_stereo>
c000d226:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d22a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d22e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d232:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d236:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23a:	e8 25 96 01 00       	call   c0026864 <__divdf3>
c000d23f:	83 c4 10             	add    esp,0x10
c000d242:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d246:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d24a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d24e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d252:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d256:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d25a:	e8 a4 8c 01 00       	call   c0025f03 <__adddf3>
c000d25f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d263:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d267:	83 c4 18             	add    esp,0x18
c000d26a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d26e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d272:	e8 89 9d 01 00       	call   c0027000 <lrint>
c000d277:	83 ec 0c             	sub    esp,0xc
c000d27a:	50                   	push   eax
c000d27b:	e8 63 99 01 00       	call   c0026be3 <__floatsidf>
c000d280:	83 c4 10             	add    esp,0x10
c000d283:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d28b:	52                   	push   edx
c000d28c:	50                   	push   eax
c000d28d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d291:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d295:	e8 ba 92 01 00       	call   c0026554 <__subdf3>
c000d29a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d29e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2a2:	83 c4 20             	add    esp,0x20
c000d2a5:	6a 00                	push   0x0
c000d2a7:	6a 00                	push   0x0
c000d2a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2b1:	e8 99 9b 01 00       	call   c0026e4f <__ltdf2>
c000d2b6:	83 c4 10             	add    esp,0x10
c000d2b9:	85 c0                	test   eax,eax
c000d2bb:	79 20                	jns    c000d2dd <sinc_stereo_vari_process+0x66f>
c000d2bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2cd:	e8 31 8c 01 00       	call   c0025f03 <__adddf3>
c000d2d2:	83 c4 10             	add    esp,0x10
c000d2d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d2d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d2dd:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d2e0:	83 ec 10             	sub    esp,0x10
c000d2e3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d2e7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d2ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2f2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2f6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2fa:	e8 55 92 01 00       	call   c0026554 <__subdf3>
c000d2ff:	83 c4 18             	add    esp,0x18
c000d302:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d306:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	e8 ef 9c 01 00       	call   c0027000 <lrint>
c000d311:	0f af f8             	imul   edi,eax
c000d314:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d318:	83 c4 10             	add    esp,0x10
c000d31b:	01 f8                	add    eax,edi
c000d31d:	99                   	cdq    
c000d31e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d321:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d324:	e9 fd fb ff ff       	jmp    c000cf26 <sinc_stereo_vari_process+0x2b8>
c000d329:	83 c4 4c             	add    esp,0x4c
c000d32c:	89 d0                	mov    eax,edx
c000d32e:	5b                   	pop    ebx
c000d32f:	5e                   	pop    esi
c000d330:	5f                   	pop    edi
c000d331:	5d                   	pop    ebp
c000d332:	c3                   	ret    

c000d333 <sinc_mono_vari_process>:
c000d333:	55                   	push   ebp
c000d334:	ba 05 00 00 00       	mov    edx,0x5
c000d339:	57                   	push   edi
c000d33a:	56                   	push   esi
c000d33b:	53                   	push   ebx
c000d33c:	83 ec 4c             	sub    esp,0x4c
c000d33f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d343:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d347:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d34a:	85 db                	test   ebx,ebx
c000d34c:	0f 84 c1 06 00 00    	je     c000da13 <sinc_mono_vari_process+0x6e0>
c000d352:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d355:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d358:	0f af c7             	imul   eax,edi
c000d35b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d35e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d361:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d368:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d36f:	0f af c7             	imul   eax,edi
c000d372:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d375:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d379:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d37c:	8b 00                	mov    eax,DWORD PTR [eax]
c000d37e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d382:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d386:	68 00 00 70 3f       	push   0x3f700000
c000d38b:	6a 00                	push   0x0
c000d38d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d391:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d395:	e8 b5 9a 01 00       	call   c0026e4f <__ltdf2>
c000d39a:	83 c4 10             	add    esp,0x10
c000d39d:	ba 16 00 00 00       	mov    edx,0x16
c000d3a2:	85 c0                	test   eax,eax
c000d3a4:	0f 88 69 06 00 00    	js     c000da13 <sinc_mono_vari_process+0x6e0>
c000d3aa:	68 00 00 70 40       	push   0x40700000
c000d3af:	6a 00                	push   0x0
c000d3b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3b9:	e8 73 9a 01 00       	call   c0026e31 <__gtdf2>
c000d3be:	83 c4 10             	add    esp,0x10
c000d3c1:	ba 16 00 00 00       	mov    edx,0x16
c000d3c6:	85 c0                	test   eax,eax
c000d3c8:	0f 8f 45 06 00 00    	jg     c000da13 <sinc_mono_vari_process+0x6e0>
c000d3ce:	83 ec 0c             	sub    esp,0xc
c000d3d1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d3d4:	e8 0a 98 01 00       	call   c0026be3 <__floatsidf>
c000d3d9:	83 c4 10             	add    esp,0x10
c000d3dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d3e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d3e4:	68 00 00 00 40       	push   0x40000000
c000d3e9:	6a 00                	push   0x0
c000d3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d3f3:	e8 0b 8b 01 00       	call   c0025f03 <__adddf3>
c000d3f8:	59                   	pop    ecx
c000d3f9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d3fd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d401:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d404:	e8 da 97 01 00       	call   c0026be3 <__floatsidf>
c000d409:	83 c4 10             	add    esp,0x10
c000d40c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d410:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d414:	52                   	push   edx
c000d415:	50                   	push   eax
c000d416:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d41a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d41e:	e8 41 94 01 00       	call   c0026864 <__divdf3>
c000d423:	83 c4 10             	add    esp,0x10
c000d426:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d42a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d42e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d431:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d434:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d438:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d43c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d440:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d444:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d448:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d44c:	e8 e0 99 01 00       	call   c0026e31 <__gtdf2>
c000d451:	83 c4 10             	add    esp,0x10
c000d454:	85 c0                	test   eax,eax
c000d456:	7e 2d                	jle    c000d485 <sinc_mono_vari_process+0x152>
c000d458:	68 00 00 f0 3f       	push   0x3ff00000
c000d45d:	6a 00                	push   0x0
c000d45f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d463:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d467:	e8 e3 99 01 00       	call   c0026e4f <__ltdf2>
c000d46c:	83 c4 10             	add    esp,0x10
c000d46f:	85 c0                	test   eax,eax
c000d471:	79 4d                	jns    c000d4c0 <sinc_mono_vari_process+0x18d>
c000d473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d477:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d47b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d47f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d483:	eb 1b                	jmp    c000d4a0 <sinc_mono_vari_process+0x16d>
c000d485:	68 00 00 f0 3f       	push   0x3ff00000
c000d48a:	6a 00                	push   0x0
c000d48c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d490:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d494:	e8 b6 99 01 00       	call   c0026e4f <__ltdf2>
c000d499:	83 c4 10             	add    esp,0x10
c000d49c:	85 c0                	test   eax,eax
c000d49e:	79 20                	jns    c000d4c0 <sinc_mono_vari_process+0x18d>
c000d4a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4a4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4a8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4b0:	e8 af 93 01 00       	call   c0026864 <__divdf3>
c000d4b5:	83 c4 10             	add    esp,0x10
c000d4b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4bc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4c0:	50                   	push   eax
c000d4c1:	50                   	push   eax
c000d4c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ca:	e8 31 9b 01 00       	call   c0027000 <lrint>
c000d4cf:	40                   	inc    eax
c000d4d0:	0f af c7             	imul   eax,edi
c000d4d3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d4d7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d4db:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d4de:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d4e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4e9:	58                   	pop    eax
c000d4ea:	5a                   	pop    edx
c000d4eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4f3:	e8 08 9b 01 00       	call   c0027000 <lrint>
c000d4f8:	83 ec 0c             	sub    esp,0xc
c000d4fb:	50                   	push   eax
c000d4fc:	e8 e2 96 01 00       	call   c0026be3 <__floatsidf>
c000d501:	83 c4 10             	add    esp,0x10
c000d504:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d508:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d50c:	52                   	push   edx
c000d50d:	50                   	push   eax
c000d50e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d512:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d516:	e8 39 90 01 00       	call   c0026554 <__subdf3>
c000d51b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d51f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d523:	83 c4 20             	add    esp,0x20
c000d526:	6a 00                	push   0x0
c000d528:	6a 00                	push   0x0
c000d52a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d52e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d532:	e8 18 99 01 00       	call   c0026e4f <__ltdf2>
c000d537:	83 c4 10             	add    esp,0x10
c000d53a:	85 c0                	test   eax,eax
c000d53c:	79 1f                	jns    c000d55d <sinc_mono_vari_process+0x22a>
c000d53e:	68 00 00 f0 3f       	push   0x3ff00000
c000d543:	6a 00                	push   0x0
c000d545:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d549:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d54d:	e8 b1 89 01 00       	call   c0025f03 <__adddf3>
c000d552:	83 c4 10             	add    esp,0x10
c000d555:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d559:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d55d:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d560:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d563:	83 ec 10             	sub    esp,0x10
c000d566:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d56a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d56e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d572:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d576:	e8 d9 8f 01 00       	call   c0026554 <__subdf3>
c000d57b:	83 c4 18             	add    esp,0x18
c000d57e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d582:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d586:	52                   	push   edx
c000d587:	50                   	push   eax
c000d588:	e8 73 9a 01 00       	call   c0027000 <lrint>
c000d58d:	0f af f8             	imul   edi,eax
c000d590:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d593:	31 ff                	xor    edi,edi
c000d595:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d59a:	99                   	cdq    
c000d59b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d59e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d5a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5a9:	55                   	push   ebp
c000d5aa:	57                   	push   edi
c000d5ab:	e8 b4 92 01 00       	call   c0026864 <__divdf3>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5bb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d5c0:	68 23 42 92 0c       	push   0xc924223
c000d5c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5cd:	e8 31 89 01 00       	call   c0025f03 <__adddf3>
c000d5d2:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d5d6:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d5da:	83 c4 20             	add    esp,0x20
c000d5dd:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d5e1:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d5e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d5e8:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d5eb:	7d 54                	jge    c000d641 <sinc_mono_vari_process+0x30e>
c000d5ed:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d5f0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d5f3:	01 c8                	add    eax,ecx
c000d5f5:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d5f8:	99                   	cdq    
c000d5f9:	f7 f9                	idiv   ecx
c000d5fb:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d5ff:	7d 0c                	jge    c000d60d <sinc_mono_vari_process+0x2da>
c000d601:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d604:	85 ff                	test   edi,edi
c000d606:	79 73                	jns    c000d67b <sinc_mono_vari_process+0x348>
c000d608:	e9 ee 00 00 00       	jmp    c000d6fb <sinc_mono_vari_process+0x3c8>
c000d60d:	50                   	push   eax
c000d60e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d612:	56                   	push   esi
c000d613:	53                   	push   ebx
c000d614:	e8 8d e0 ff ff       	call   c000b6a6 <prepare_data>
c000d619:	89 c2                	mov    edx,eax
c000d61b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d625:	85 d2                	test   edx,edx
c000d627:	0f 85 e6 03 00 00    	jne    c000da13 <sinc_mono_vari_process+0x6e0>
c000d62d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d630:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d633:	01 c8                	add    eax,ecx
c000d635:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d638:	99                   	cdq    
c000d639:	f7 f9                	idiv   ecx
c000d63b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d63f:	7c c0                	jl     c000d601 <sinc_mono_vari_process+0x2ce>
c000d641:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d645:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d649:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d64d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d650:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d657:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d65b:	89 01                	mov    DWORD PTR [ecx],eax
c000d65d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d660:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d663:	99                   	cdq    
c000d664:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d667:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d66a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d66d:	99                   	cdq    
c000d66e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d671:	31 d2                	xor    edx,edx
c000d673:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d676:	e9 98 03 00 00       	jmp    c000da13 <sinc_mono_vari_process+0x6e0>
c000d67b:	83 ec 0c             	sub    esp,0xc
c000d67e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d681:	e8 5d 95 01 00       	call   c0026be3 <__floatsidf>
c000d686:	83 c4 10             	add    esp,0x10
c000d689:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d68d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d691:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d695:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d699:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d69d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6a1:	e8 5d 88 01 00       	call   c0025f03 <__adddf3>
c000d6a6:	83 c4 10             	add    esp,0x10
c000d6a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6b1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6b5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6c1:	e8 3d 88 01 00       	call   c0025f03 <__adddf3>
c000d6c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d6c9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d6cd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d6d1:	e8 0d 95 01 00       	call   c0026be3 <__floatsidf>
c000d6d6:	83 c4 10             	add    esp,0x10
c000d6d9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d6dd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d6e1:	52                   	push   edx
c000d6e2:	50                   	push   eax
c000d6e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6eb:	e8 41 97 01 00       	call   c0026e31 <__gtdf2>
c000d6f0:	83 c4 10             	add    esp,0x10
c000d6f3:	85 c0                	test   eax,eax
c000d6f5:	0f 8f 46 ff ff ff    	jg     c000d641 <sinc_mono_vari_process+0x30e>
c000d6fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d6ff:	0f 8e f5 00 00 00    	jle    c000d7fa <sinc_mono_vari_process+0x4c7>
c000d705:	83 ec 10             	sub    esp,0x10
c000d708:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d70b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d70e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d712:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d715:	ff 30                	push   DWORD PTR [eax]
c000d717:	e8 38 8e 01 00       	call   c0026554 <__subdf3>
c000d71c:	83 c4 18             	add    esp,0x18
c000d71f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d723:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d727:	52                   	push   edx
c000d728:	50                   	push   eax
c000d729:	e8 b2 98 01 00       	call   c0026fe0 <fabs>
c000d72e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d732:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d736:	83 c4 10             	add    esp,0x10
c000d739:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d73e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d743:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d747:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d74b:	e8 e1 96 01 00       	call   c0026e31 <__gtdf2>
c000d750:	83 c4 10             	add    esp,0x10
c000d753:	85 c0                	test   eax,eax
c000d755:	0f 8e 9f 00 00 00    	jle    c000d7fa <sinc_mono_vari_process+0x4c7>
c000d75b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d75f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d762:	8b 00                	mov    eax,DWORD PTR [eax]
c000d764:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d768:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d76c:	52                   	push   edx
c000d76d:	50                   	push   eax
c000d76e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d771:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d774:	e8 db 8d 01 00       	call   c0026554 <__subdf3>
c000d779:	5f                   	pop    edi
c000d77a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d77e:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d782:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d785:	e8 59 94 01 00       	call   c0026be3 <__floatsidf>
c000d78a:	83 c4 10             	add    esp,0x10
c000d78d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d791:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d795:	52                   	push   edx
c000d796:	50                   	push   eax
c000d797:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d79b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d79f:	e8 dc 8d 01 00       	call   c0026580 <__muldf3>
c000d7a4:	5d                   	pop    ebp
c000d7a5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d7a9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d7ad:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d7b0:	e8 2e 94 01 00       	call   c0026be3 <__floatsidf>
c000d7b5:	83 c4 10             	add    esp,0x10
c000d7b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7bc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d7c0:	52                   	push   edx
c000d7c1:	50                   	push   eax
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ca:	e8 95 90 01 00       	call   c0026864 <__divdf3>
c000d7cf:	83 c4 10             	add    esp,0x10
c000d7d2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7d6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7e2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ea:	e8 14 87 01 00       	call   c0025f03 <__adddf3>
c000d7ef:	83 c4 10             	add    esp,0x10
c000d7f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d7f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d7fa:	83 ec 0c             	sub    esp,0xc
c000d7fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d800:	e8 de 93 01 00       	call   c0026be3 <__floatsidf>
c000d805:	83 c4 10             	add    esp,0x10
c000d808:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d80c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d810:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d814:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d818:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d81c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d820:	e8 2a 96 01 00       	call   c0026e4f <__ltdf2>
c000d825:	83 c4 10             	add    esp,0x10
c000d828:	85 c0                	test   eax,eax
c000d82a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d82e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000d832:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000d836:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000d83a:	78 10                	js     c000d84c <sinc_mono_vari_process+0x519>
c000d83c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d840:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d844:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d848:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d84c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d850:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d854:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d858:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d85c:	e8 1f 8d 01 00       	call   c0026580 <__muldf3>
c000d861:	59                   	pop    ecx
c000d862:	5f                   	pop    edi
c000d863:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d867:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d86b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d86f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d873:	e8 07 de ff ff       	call   c000b67f <double_to_fp>
c000d878:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d87c:	89 c7                	mov    edi,eax
c000d87e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d882:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d886:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d88a:	e8 f1 8c 01 00       	call   c0026580 <__muldf3>
c000d88f:	83 c4 18             	add    esp,0x18
c000d892:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d896:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d89a:	52                   	push   edx
c000d89b:	50                   	push   eax
c000d89c:	e8 de dd ff ff       	call   c000b67f <double_to_fp>
c000d8a1:	83 ec 0c             	sub    esp,0xc
c000d8a4:	89 c5                	mov    ebp,eax
c000d8a6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d8a9:	e8 35 93 01 00       	call   c0026be3 <__floatsidf>
c000d8ae:	83 c4 10             	add    esp,0x10
c000d8b1:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8b5:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8b9:	52                   	push   edx
c000d8ba:	50                   	push   eax
c000d8bb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8c3:	e8 9c 8f 01 00       	call   c0026864 <__divdf3>
c000d8c8:	83 c4 10             	add    esp,0x10
c000d8cb:	89 e9                	mov    ecx,ebp
c000d8cd:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8d1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8d5:	89 d8                	mov    eax,ebx
c000d8d7:	89 fa                	mov    edx,edi
c000d8d9:	e8 ee bd ff ff       	call   c00096cc <calc_output_single>
c000d8de:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000d8e1:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000d8e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8ec:	52                   	push   edx
c000d8ed:	50                   	push   eax
c000d8ee:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d8f2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d8f6:	e8 85 8c 01 00       	call   c0026580 <__muldf3>
c000d8fb:	59                   	pop    ecx
c000d8fc:	59                   	pop    ecx
c000d8fd:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d901:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d905:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d909:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d90d:	e8 41 95 01 00       	call   c0026e53 <__truncdfsf2>
c000d912:	83 c4 10             	add    esp,0x10
c000d915:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000d918:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000d91b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d91f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d923:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d927:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d92b:	e8 34 8f 01 00       	call   c0026864 <__divdf3>
c000d930:	83 c4 10             	add    esp,0x10
c000d933:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d937:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d93b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d93f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d943:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d947:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d94b:	e8 b3 85 01 00       	call   c0025f03 <__adddf3>
c000d950:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000d954:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d958:	83 c4 18             	add    esp,0x18
c000d95b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d963:	e8 98 96 01 00       	call   c0027000 <lrint>
c000d968:	83 ec 0c             	sub    esp,0xc
c000d96b:	50                   	push   eax
c000d96c:	e8 72 92 01 00       	call   c0026be3 <__floatsidf>
c000d971:	83 c4 10             	add    esp,0x10
c000d974:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d978:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d97c:	52                   	push   edx
c000d97d:	50                   	push   eax
c000d97e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d982:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d986:	e8 c9 8b 01 00       	call   c0026554 <__subdf3>
c000d98b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d98f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d993:	83 c4 20             	add    esp,0x20
c000d996:	6a 00                	push   0x0
c000d998:	6a 00                	push   0x0
c000d99a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d99e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9a2:	e8 a8 94 01 00       	call   c0026e4f <__ltdf2>
c000d9a7:	83 c4 10             	add    esp,0x10
c000d9aa:	85 c0                	test   eax,eax
c000d9ac:	79 20                	jns    c000d9ce <sinc_mono_vari_process+0x69b>
c000d9ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9be:	e8 40 85 01 00       	call   c0025f03 <__adddf3>
c000d9c3:	83 c4 10             	add    esp,0x10
c000d9c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d9ce:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d9d1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d9d4:	83 ec 10             	sub    esp,0x10
c000d9d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9df:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9e3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9e7:	e8 68 8b 01 00       	call   c0026554 <__subdf3>
c000d9ec:	83 c4 18             	add    esp,0x18
c000d9ef:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9f3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9f7:	52                   	push   edx
c000d9f8:	50                   	push   eax
c000d9f9:	e8 02 96 01 00       	call   c0027000 <lrint>
c000d9fe:	83 c4 10             	add    esp,0x10
c000da01:	0f af f8             	imul   edi,eax
c000da04:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000da07:	99                   	cdq    
c000da08:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000da0b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000da0e:	e9 d2 fb ff ff       	jmp    c000d5e5 <sinc_mono_vari_process+0x2b2>
c000da13:	83 c4 4c             	add    esp,0x4c
c000da16:	89 d0                	mov    eax,edx
c000da18:	5b                   	pop    ebx
c000da19:	5e                   	pop    esi
c000da1a:	5f                   	pop    edi
c000da1b:	5d                   	pop    ebp
c000da1c:	c3                   	ret    

c000da1d <sinc_get_name>:
c000da1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da21:	31 c0                	xor    eax,eax
c000da23:	83 fa 02             	cmp    edx,0x2
c000da26:	77 07                	ja     c000da2f <sinc_get_name+0x12>
c000da28:	8b 04 95 a4 87 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd785c]
c000da2f:	c3                   	ret    

c000da30 <sinc_get_description>:
c000da30:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da34:	31 c0                	xor    eax,eax
c000da36:	83 fa 02             	cmp    edx,0x2
c000da39:	77 07                	ja     c000da42 <sinc_get_description+0x12>
c000da3b:	8b 04 95 98 87 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7868]
c000da42:	c3                   	ret    

c000da43 <sinc_set_converter>:
c000da43:	53                   	push   ebx
c000da44:	81 ec 58 08 00 00    	sub    esp,0x858
c000da4a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000da51:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000da54:	85 c0                	test   eax,eax
c000da56:	74 13                	je     c000da6b <sinc_set_converter+0x28>
c000da58:	83 ec 0c             	sub    esp,0xc
c000da5b:	50                   	push   eax
c000da5c:	e8 83 1a 00 00       	call   c000f4e4 <free>
c000da61:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000da68:	83 c4 10             	add    esp,0x10
c000da6b:	50                   	push   eax
c000da6c:	68 44 08 00 00       	push   0x844
c000da71:	6a 00                	push   0x0
c000da73:	8d 44 24 18          	lea    eax,[esp+0x18]
c000da77:	50                   	push   eax
c000da78:	e8 0e 2c ff ff       	call   c000068b <memset>
c000da7d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000da80:	83 c4 10             	add    esp,0x10
c000da83:	b8 0b 00 00 00       	mov    eax,0xb
c000da88:	81 fa 80 00 00 00    	cmp    edx,0x80
c000da8e:	7f 6e                	jg     c000dafe <sinc_set_converter+0xbb>
c000da90:	83 fa 01             	cmp    edx,0x1
c000da93:	75 10                	jne    c000daa5 <sinc_set_converter+0x62>
c000da95:	c7 43 24 33 d3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d333
c000da9c:	c7 43 20 33 d3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d333
c000daa3:	eb 4d                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000daa5:	83 fa 02             	cmp    edx,0x2
c000daa8:	75 10                	jne    c000daba <sinc_set_converter+0x77>
c000daaa:	c7 43 24 6e cc 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cc6e
c000dab1:	c7 43 20 6e cc 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cc6e
c000dab8:	eb 38                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000daba:	83 fa 04             	cmp    edx,0x4
c000dabd:	75 10                	jne    c000dacf <sinc_set_converter+0x8c>
c000dabf:	c7 43 24 a9 c5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c5a9
c000dac6:	c7 43 20 a9 c5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c5a9
c000dacd:	eb 23                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000dacf:	83 fa 06             	cmp    edx,0x6
c000dad2:	75 10                	jne    c000dae4 <sinc_set_converter+0xa1>
c000dad4:	c7 43 24 e4 be 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000bee4
c000dadb:	c7 43 20 e4 be 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000bee4
c000dae2:	eb 0e                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000dae4:	c7 43 24 20 b8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000b820
c000daeb:	c7 43 20 20 b8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000b820
c000daf2:	c7 43 28 d3 aa 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000aad3
c000daf9:	b8 0a 00 00 00       	mov    eax,0xa
c000dafe:	81 c4 58 08 00 00    	add    esp,0x858
c000db04:	5b                   	pop    ebx
c000db05:	c3                   	ret    

c000db06 <zoh_vari_process>:
c000db06:	55                   	push   ebp
c000db07:	31 d2                	xor    edx,edx
c000db09:	57                   	push   edi
c000db0a:	56                   	push   esi
c000db0b:	53                   	push   ebx
c000db0c:	83 ec 3c             	sub    esp,0x3c
c000db0f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000db13:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000db17:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000db1b:	0f 8e 80 06 00 00    	jle    c000e1a1 <zoh_vari_process+0x69b>
c000db21:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000db24:	ba 05 00 00 00       	mov    edx,0x5
c000db29:	85 db                	test   ebx,ebx
c000db2b:	0f 84 70 06 00 00    	je     c000e1a1 <zoh_vari_process+0x69b>
c000db31:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000db34:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000db38:	74 19                	je     c000db53 <zoh_vari_process+0x4d>
c000db3a:	31 d2                	xor    edx,edx
c000db3c:	39 c2                	cmp    edx,eax
c000db3e:	7d 0c                	jge    c000db4c <zoh_vari_process+0x46>
c000db40:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000db42:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000db45:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000db49:	42                   	inc    edx
c000db4a:	eb f0                	jmp    c000db3c <zoh_vari_process+0x36>
c000db4c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000db53:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000db56:	0f af d0             	imul   edx,eax
c000db59:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000db5c:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000db60:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000db67:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000db6a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000db71:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000db74:	8b 07                	mov    eax,DWORD PTR [edi]
c000db76:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000db7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db7e:	68 00 00 70 3f       	push   0x3f700000
c000db83:	6a 00                	push   0x0
c000db85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db8d:	e8 bd 92 01 00       	call   c0026e4f <__ltdf2>
c000db92:	83 c4 10             	add    esp,0x10
c000db95:	ba 16 00 00 00       	mov    edx,0x16
c000db9a:	85 c0                	test   eax,eax
c000db9c:	0f 88 ff 05 00 00    	js     c000e1a1 <zoh_vari_process+0x69b>
c000dba2:	68 00 00 70 40       	push   0x40700000
c000dba7:	6a 00                	push   0x0
c000dba9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb1:	e8 7b 92 01 00       	call   c0026e31 <__gtdf2>
c000dbb6:	83 c4 10             	add    esp,0x10
c000dbb9:	ba 16 00 00 00       	mov    edx,0x16
c000dbbe:	85 c0                	test   eax,eax
c000dbc0:	0f 8f db 05 00 00    	jg     c000e1a1 <zoh_vari_process+0x69b>
c000dbc6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dbc9:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dbcc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dbd4:	68 00 00 f0 3f       	push   0x3ff00000
c000dbd9:	6a 00                	push   0x0
c000dbdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbdf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbe3:	e8 67 92 01 00       	call   c0026e4f <__ltdf2>
c000dbe8:	83 c4 10             	add    esp,0x10
c000dbeb:	85 c0                	test   eax,eax
c000dbed:	0f 89 da 01 00 00    	jns    c000ddcd <zoh_vari_process+0x2c7>
c000dbf3:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000dbf6:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000dbf9:	0f 8d ce 01 00 00    	jge    c000ddcd <zoh_vari_process+0x2c7>
c000dbff:	83 ec 0c             	sub    esp,0xc
c000dc02:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dc05:	e8 d9 8f 01 00       	call   c0026be3 <__floatsidf>
c000dc0a:	83 c4 10             	add    esp,0x10
c000dc0d:	89 04 24             	mov    DWORD PTR [esp],eax
c000dc10:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dc14:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc24:	e8 57 89 01 00       	call   c0026580 <__muldf3>
c000dc29:	59                   	pop    ecx
c000dc2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc2e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000dc35:	e8 a9 8f 01 00       	call   c0026be3 <__floatsidf>
c000dc3a:	83 c4 10             	add    esp,0x10
c000dc3d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc41:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc45:	52                   	push   edx
c000dc46:	50                   	push   eax
c000dc47:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc4b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc4f:	e8 af 82 01 00       	call   c0025f03 <__adddf3>
c000dc54:	59                   	pop    ecx
c000dc55:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc59:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc5d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000dc60:	e8 7e 8f 01 00       	call   c0026be3 <__floatsidf>
c000dc65:	83 c4 10             	add    esp,0x10
c000dc68:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc6c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc70:	52                   	push   edx
c000dc71:	50                   	push   eax
c000dc72:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc76:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc7a:	e8 ce 91 01 00       	call   c0026e4d <__gedf2>
c000dc7f:	83 c4 10             	add    esp,0x10
c000dc82:	85 c0                	test   eax,eax
c000dc84:	0f 89 43 01 00 00    	jns    c000ddcd <zoh_vari_process+0x2c7>
c000dc8a:	85 ed                	test   ebp,ebp
c000dc8c:	0f 8e ec 00 00 00    	jle    c000dd7e <zoh_vari_process+0x278>
c000dc92:	83 ec 10             	sub    esp,0x10
c000dc95:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dc98:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dc9b:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000dc9e:	ff 37                	push   DWORD PTR [edi]
c000dca0:	e8 af 88 01 00       	call   c0026554 <__subdf3>
c000dca5:	83 c4 18             	add    esp,0x18
c000dca8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dcac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dcb0:	52                   	push   edx
c000dcb1:	50                   	push   eax
c000dcb2:	e8 29 93 01 00       	call   c0026fe0 <fabs>
c000dcb7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dcbb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dcbf:	83 c4 10             	add    esp,0x10
c000dcc2:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dcc7:	68 23 42 92 0c       	push   0xc924223
c000dccc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcd0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcd4:	e8 58 91 01 00       	call   c0026e31 <__gtdf2>
c000dcd9:	83 c4 10             	add    esp,0x10
c000dcdc:	85 c0                	test   eax,eax
c000dcde:	0f 8e 9a 00 00 00    	jle    c000dd7e <zoh_vari_process+0x278>
c000dce4:	8b 07                	mov    eax,DWORD PTR [edi]
c000dce6:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dce9:	89 04 24             	mov    DWORD PTR [esp],eax
c000dcec:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dcf0:	52                   	push   edx
c000dcf1:	50                   	push   eax
c000dcf2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dcf5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dcf8:	e8 57 88 01 00       	call   c0026554 <__subdf3>
c000dcfd:	59                   	pop    ecx
c000dcfe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd02:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd06:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dd09:	e8 d5 8e 01 00       	call   c0026be3 <__floatsidf>
c000dd0e:	83 c4 10             	add    esp,0x10
c000dd11:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd15:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd19:	52                   	push   edx
c000dd1a:	50                   	push   eax
c000dd1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd23:	e8 58 88 01 00       	call   c0026580 <__muldf3>
c000dd28:	5d                   	pop    ebp
c000dd29:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd2d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd31:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dd34:	e8 aa 8e 01 00       	call   c0026be3 <__floatsidf>
c000dd39:	83 c4 10             	add    esp,0x10
c000dd3c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd40:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd44:	52                   	push   edx
c000dd45:	50                   	push   eax
c000dd46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd4e:	e8 11 8b 01 00       	call   c0026864 <__divdf3>
c000dd53:	83 c4 10             	add    esp,0x10
c000dd56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd5e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd62:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd6e:	e8 90 81 01 00       	call   c0025f03 <__adddf3>
c000dd73:	83 c4 10             	add    esp,0x10
c000dd76:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd7a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd7e:	31 c0                	xor    eax,eax
c000dd80:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dd83:	7e 13                	jle    c000dd98 <zoh_vari_process+0x292>
c000dd85:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dd89:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dd8c:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dd8f:	40                   	inc    eax
c000dd90:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dd93:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dd96:	eb e8                	jmp    c000dd80 <zoh_vari_process+0x27a>
c000dd98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dda0:	68 00 00 f0 3f       	push   0x3ff00000
c000dda5:	6a 00                	push   0x0
c000dda7:	e8 b8 8a 01 00       	call   c0026864 <__divdf3>
c000ddac:	83 c4 10             	add    esp,0x10
c000ddaf:	89 04 24             	mov    DWORD PTR [esp],eax
c000ddb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ddb6:	52                   	push   edx
c000ddb7:	50                   	push   eax
c000ddb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddc0:	e8 3e 81 01 00       	call   c0025f03 <__adddf3>
c000ddc5:	83 c4 10             	add    esp,0x10
c000ddc8:	e9 ff fd ff ff       	jmp    c000dbcc <zoh_vari_process+0xc6>
c000ddcd:	55                   	push   ebp
c000ddce:	55                   	push   ebp
c000ddcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddd7:	e8 24 92 01 00       	call   c0027000 <lrint>
c000dddc:	83 ec 0c             	sub    esp,0xc
c000dddf:	50                   	push   eax
c000dde0:	e8 fe 8d 01 00       	call   c0026be3 <__floatsidf>
c000dde5:	83 c4 10             	add    esp,0x10
c000dde8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ddec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddf0:	52                   	push   edx
c000ddf1:	50                   	push   eax
c000ddf2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddf6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddfa:	e8 55 87 01 00       	call   c0026554 <__subdf3>
c000ddff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000de03:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000de07:	83 c4 20             	add    esp,0x20
c000de0a:	6a 00                	push   0x0
c000de0c:	6a 00                	push   0x0
c000de0e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de12:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de16:	e8 34 90 01 00       	call   c0026e4f <__ltdf2>
c000de1b:	83 c4 10             	add    esp,0x10
c000de1e:	85 c0                	test   eax,eax
c000de20:	79 1e                	jns    c000de40 <zoh_vari_process+0x33a>
c000de22:	68 00 00 f0 3f       	push   0x3ff00000
c000de27:	6a 00                	push   0x0
c000de29:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de2d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de31:	e8 cd 80 01 00       	call   c0025f03 <__adddf3>
c000de36:	83 c4 10             	add    esp,0x10
c000de39:	89 04 24             	mov    DWORD PTR [esp],eax
c000de3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de40:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000de43:	83 ec 10             	sub    esp,0x10
c000de46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de4e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de52:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de56:	e8 f9 86 01 00       	call   c0026554 <__subdf3>
c000de5b:	83 c4 18             	add    esp,0x18
c000de5e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de62:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de66:	52                   	push   edx
c000de67:	50                   	push   eax
c000de68:	e8 93 91 01 00       	call   c0027000 <lrint>
c000de6d:	83 c4 10             	add    esp,0x10
c000de70:	0f af e8             	imul   ebp,eax
c000de73:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000de76:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000de79:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000de7d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000de80:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000de83:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de87:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000de8a:	0f 8d 7a 02 00 00    	jge    c000e10a <zoh_vari_process+0x604>
c000de90:	83 ec 0c             	sub    esp,0xc
c000de93:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de96:	e8 48 8d 01 00       	call   c0026be3 <__floatsidf>
c000de9b:	83 c4 10             	add    esp,0x10
c000de9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dea2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dea6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000deaa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000deae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000deb2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000deb6:	e8 c5 86 01 00       	call   c0026580 <__muldf3>
c000debb:	59                   	pop    ecx
c000debc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000dec0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000dec4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dec8:	e8 16 8d 01 00       	call   c0026be3 <__floatsidf>
c000decd:	83 c4 10             	add    esp,0x10
c000ded0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ded4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ded8:	52                   	push   edx
c000ded9:	50                   	push   eax
c000deda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dede:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dee2:	e8 1c 80 01 00       	call   c0025f03 <__adddf3>
c000dee7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000deea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000deee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000def2:	e8 ec 8c 01 00       	call   c0026be3 <__floatsidf>
c000def7:	83 c4 10             	add    esp,0x10
c000defa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000defe:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df02:	52                   	push   edx
c000df03:	50                   	push   eax
c000df04:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df0c:	e8 40 8f 01 00       	call   c0026e51 <__ledf2>
c000df11:	83 c4 10             	add    esp,0x10
c000df14:	85 c0                	test   eax,eax
c000df16:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000df1a:	0f 8f ea 01 00 00    	jg     c000e10a <zoh_vari_process+0x604>
c000df20:	85 c9                	test   ecx,ecx
c000df22:	0f 8e ed 00 00 00    	jle    c000e015 <zoh_vari_process+0x50f>
c000df28:	83 ec 10             	sub    esp,0x10
c000df2b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df2e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df31:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000df34:	ff 37                	push   DWORD PTR [edi]
c000df36:	e8 19 86 01 00       	call   c0026554 <__subdf3>
c000df3b:	83 c4 18             	add    esp,0x18
c000df3e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df42:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df46:	52                   	push   edx
c000df47:	50                   	push   eax
c000df48:	e8 93 90 01 00       	call   c0026fe0 <fabs>
c000df4d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df51:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df55:	83 c4 10             	add    esp,0x10
c000df58:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df5d:	68 23 42 92 0c       	push   0xc924223
c000df62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df6a:	e8 c2 8e 01 00       	call   c0026e31 <__gtdf2>
c000df6f:	83 c4 10             	add    esp,0x10
c000df72:	85 c0                	test   eax,eax
c000df74:	0f 8e 9b 00 00 00    	jle    c000e015 <zoh_vari_process+0x50f>
c000df7a:	8b 07                	mov    eax,DWORD PTR [edi]
c000df7c:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df83:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df87:	52                   	push   edx
c000df88:	50                   	push   eax
c000df89:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df8c:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df8f:	e8 c0 85 01 00       	call   c0026554 <__subdf3>
c000df94:	5d                   	pop    ebp
c000df95:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000df99:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000df9d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dfa0:	e8 3e 8c 01 00       	call   c0026be3 <__floatsidf>
c000dfa5:	83 c4 10             	add    esp,0x10
c000dfa8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfac:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfb0:	52                   	push   edx
c000dfb1:	50                   	push   eax
c000dfb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfba:	e8 c1 85 01 00       	call   c0026580 <__muldf3>
c000dfbf:	59                   	pop    ecx
c000dfc0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dfc4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dfc8:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dfcb:	e8 13 8c 01 00       	call   c0026be3 <__floatsidf>
c000dfd0:	83 c4 10             	add    esp,0x10
c000dfd3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfd7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfdb:	52                   	push   edx
c000dfdc:	50                   	push   eax
c000dfdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe5:	e8 7a 88 01 00       	call   c0026864 <__divdf3>
c000dfea:	83 c4 10             	add    esp,0x10
c000dfed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dff1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dff5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dffd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e001:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e005:	e8 f9 7e 01 00       	call   c0025f03 <__adddf3>
c000e00a:	83 c4 10             	add    esp,0x10
c000e00d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e011:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e015:	31 d2                	xor    edx,edx
c000e017:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e01a:	39 d0                	cmp    eax,edx
c000e01c:	7e 1d                	jle    c000e03b <zoh_vari_process+0x535>
c000e01e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e021:	29 c1                	sub    ecx,eax
c000e023:	89 c8                	mov    eax,ecx
c000e025:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e027:	01 d0                	add    eax,edx
c000e029:	42                   	inc    edx
c000e02a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e02d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e030:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e033:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e036:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e039:	eb dc                	jmp    c000e017 <zoh_vari_process+0x511>
c000e03b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	68 00 00 f0 3f       	push   0x3ff00000
c000e048:	6a 00                	push   0x0
c000e04a:	e8 15 88 01 00       	call   c0026864 <__divdf3>
c000e04f:	83 c4 10             	add    esp,0x10
c000e052:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e056:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e05a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e05e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e06a:	e8 94 7e 01 00       	call   c0025f03 <__adddf3>
c000e06f:	5d                   	pop    ebp
c000e070:	59                   	pop    ecx
c000e071:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e075:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e079:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e07d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e081:	e8 7a 8f 01 00       	call   c0027000 <lrint>
c000e086:	83 ec 0c             	sub    esp,0xc
c000e089:	50                   	push   eax
c000e08a:	e8 54 8b 01 00       	call   c0026be3 <__floatsidf>
c000e08f:	83 c4 10             	add    esp,0x10
c000e092:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e096:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e09a:	52                   	push   edx
c000e09b:	50                   	push   eax
c000e09c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a4:	e8 ab 84 01 00       	call   c0026554 <__subdf3>
c000e0a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0b1:	83 c4 20             	add    esp,0x20
c000e0b4:	6a 00                	push   0x0
c000e0b6:	6a 00                	push   0x0
c000e0b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0bc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0c0:	e8 8a 8d 01 00       	call   c0026e4f <__ltdf2>
c000e0c5:	83 c4 10             	add    esp,0x10
c000e0c8:	85 c0                	test   eax,eax
c000e0ca:	79 1e                	jns    c000e0ea <zoh_vari_process+0x5e4>
c000e0cc:	68 00 00 f0 3f       	push   0x3ff00000
c000e0d1:	6a 00                	push   0x0
c000e0d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0db:	e8 23 7e 01 00       	call   c0025f03 <__adddf3>
c000e0e0:	83 c4 10             	add    esp,0x10
c000e0e3:	89 04 24             	mov    DWORD PTR [esp],eax
c000e0e6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e0ea:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e0ed:	83 ec 10             	sub    esp,0x10
c000e0f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e100:	e8 4f 84 01 00       	call   c0026554 <__subdf3>
c000e105:	e9 51 fd ff ff       	jmp    c000de5b <zoh_vari_process+0x355>
c000e10a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e10e:	7d 3a                	jge    c000e14a <zoh_vari_process+0x644>
c000e110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e114:	83 ec 0c             	sub    esp,0xc
c000e117:	29 e8                	sub    eax,ebp
c000e119:	99                   	cdq    
c000e11a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e11d:	50                   	push   eax
c000e11e:	e8 c0 8a 01 00       	call   c0026be3 <__floatsidf>
c000e123:	83 c4 10             	add    esp,0x10
c000e126:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e12a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e12e:	52                   	push   edx
c000e12f:	50                   	push   eax
c000e130:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e134:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e138:	e8 c6 7d 01 00       	call   c0025f03 <__adddf3>
c000e13d:	83 c4 10             	add    esp,0x10
c000e140:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e143:	89 04 24             	mov    DWORD PTR [esp],eax
c000e146:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e14a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e14d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e151:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e154:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e157:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e15a:	85 c0                	test   eax,eax
c000e15c:	7f 25                	jg     c000e183 <zoh_vari_process+0x67d>
c000e15e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e162:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e166:	89 07                	mov    DWORD PTR [edi],eax
c000e168:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e16b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e16e:	99                   	cdq    
c000e16f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e172:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e175:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e178:	99                   	cdq    
c000e179:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e17c:	31 d2                	xor    edx,edx
c000e17e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e181:	eb 1e                	jmp    c000e1a1 <zoh_vari_process+0x69b>
c000e183:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e186:	31 d2                	xor    edx,edx
c000e188:	29 c8                	sub    eax,ecx
c000e18a:	c1 e0 02             	shl    eax,0x2
c000e18d:	39 d1                	cmp    ecx,edx
c000e18f:	7e cd                	jle    c000e15e <zoh_vari_process+0x658>
c000e191:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e193:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e197:	83 c0 04             	add    eax,0x4
c000e19a:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e19e:	42                   	inc    edx
c000e19f:	eb ec                	jmp    c000e18d <zoh_vari_process+0x687>
c000e1a1:	83 c4 3c             	add    esp,0x3c
c000e1a4:	89 d0                	mov    eax,edx
c000e1a6:	5b                   	pop    ebx
c000e1a7:	5e                   	pop    esi
c000e1a8:	5f                   	pop    edi
c000e1a9:	5d                   	pop    ebp
c000e1aa:	c3                   	ret    

c000e1ab <zoh_reset>:
c000e1ab:	83 ec 0c             	sub    esp,0xc
c000e1ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e1b2:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e1b5:	85 c0                	test   eax,eax
c000e1b7:	74 20                	je     c000e1d9 <zoh_reset+0x2e>
c000e1b9:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e1bc:	83 c0 1c             	add    eax,0x1c
c000e1bf:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e1c2:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e1c9:	c1 e2 02             	shl    edx,0x2
c000e1cc:	51                   	push   ecx
c000e1cd:	52                   	push   edx
c000e1ce:	6a 00                	push   0x0
c000e1d0:	50                   	push   eax
c000e1d1:	e8 b5 24 ff ff       	call   c000068b <memset>
c000e1d6:	83 c4 10             	add    esp,0x10
c000e1d9:	83 c4 0c             	add    esp,0xc
c000e1dc:	c3                   	ret    

c000e1dd <zoh_get_name>:
c000e1dd:	31 c0                	xor    eax,eax
c000e1df:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e1e4:	75 05                	jne    c000e1eb <zoh_get_name+0xe>
c000e1e6:	b8 be 88 02 c0       	mov    eax,0xc00288be
c000e1eb:	c3                   	ret    

c000e1ec <zoh_get_description>:
c000e1ec:	31 c0                	xor    eax,eax
c000e1ee:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e1f3:	75 05                	jne    c000e1fa <zoh_get_description+0xe>
c000e1f5:	b8 cf 88 02 c0       	mov    eax,0xc00288cf
c000e1fa:	c3                   	ret    

c000e1fb <zoh_set_converter>:
c000e1fb:	53                   	push   ebx
c000e1fc:	b8 0a 00 00 00       	mov    eax,0xa
c000e201:	83 ec 08             	sub    esp,0x8
c000e204:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e208:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e20d:	75 6e                	jne    c000e27d <zoh_set_converter+0x82>
c000e20f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e212:	85 c0                	test   eax,eax
c000e214:	74 13                	je     c000e229 <zoh_set_converter+0x2e>
c000e216:	83 ec 0c             	sub    esp,0xc
c000e219:	50                   	push   eax
c000e21a:	e8 c5 12 00 00       	call   c000f4e4 <free>
c000e21f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e226:	83 c4 10             	add    esp,0x10
c000e229:	50                   	push   eax
c000e22a:	50                   	push   eax
c000e22b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e22e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e235:	50                   	push   eax
c000e236:	6a 01                	push   0x1
c000e238:	e8 c7 12 00 00       	call   c000f504 <calloc>
c000e23d:	83 c4 10             	add    esp,0x10
c000e240:	89 c2                	mov    edx,eax
c000e242:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e245:	85 d2                	test   edx,edx
c000e247:	b8 01 00 00 00       	mov    eax,0x1
c000e24c:	74 2f                	je     c000e27d <zoh_set_converter+0x82>
c000e24e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e251:	83 ec 0c             	sub    esp,0xc
c000e254:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e257:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e25d:	c7 43 24 06 db 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000db06
c000e264:	c7 43 20 06 db 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000db06
c000e26b:	c7 43 28 ab e1 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e1ab
c000e272:	53                   	push   ebx
c000e273:	e8 33 ff ff ff       	call   c000e1ab <zoh_reset>
c000e278:	83 c4 10             	add    esp,0x10
c000e27b:	31 c0                	xor    eax,eax
c000e27d:	83 c4 08             	add    esp,0x8
c000e280:	5b                   	pop    ebx
c000e281:	c3                   	ret    

c000e282 <CPU::current()>:
c000e282:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c000e287:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e28d:	90                   	nop
c000e28e:	c3                   	ret    

c000e28f <operator new(unsigned long)>:
c000e28f:	83 ec 0c             	sub    esp,0xc
c000e292:	83 ec 0c             	sub    esp,0xc
c000e295:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e299:	e8 36 12 00 00       	call   c000f4d4 <malloc>
c000e29e:	83 c4 10             	add    esp,0x10
c000e2a1:	83 c4 0c             	add    esp,0xc
c000e2a4:	c3                   	ret    
c000e2a5:	90                   	nop

c000e2a6 <Computer::close(int, int, void*)>:
c000e2a6:	57                   	push   edi
c000e2a7:	56                   	push   esi
c000e2a8:	53                   	push   ebx
c000e2a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e2ad:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e2b1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e2b5:	83 ec 0c             	sub    esp,0xc
c000e2b8:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e2be:	e8 f3 59 00 00       	call   c0013cb6 <Device::closeAll()>
c000e2c3:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e2c9:	83 c4 10             	add    esp,0x10
c000e2cc:	8b 10                	mov    edx,DWORD PTR [eax]
c000e2ce:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e2d2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e2da:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e2de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e2:	5b                   	pop    ebx
c000e2e3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e2e6:	5e                   	pop    esi
c000e2e7:	5f                   	pop    edi
c000e2e8:	ff e0                	jmp    eax

c000e2ea <Computer::Computer()>:
c000e2ea:	83 ec 0c             	sub    esp,0xc
c000e2ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2f1:	83 ec 08             	sub    esp,0x8
c000e2f4:	68 06 89 02 c0       	push   0xc0028906
c000e2f9:	50                   	push   eax
c000e2fa:	e8 31 5a 00 00       	call   c0013d30 <Device::Device(char const*)>
c000e2ff:	83 c4 10             	add    esp,0x10
c000e302:	ba d0 8a 02 c0       	mov    edx,0xc0028ad0
c000e307:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e30b:	89 10                	mov    DWORD PTR [eax],edx
c000e30d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e311:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e31b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e31f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e333:	83 ca 04             	or     edx,0x4
c000e336:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e33c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e340:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e346:	0f b6 d0             	movzx  edx,al
c000e349:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e34d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e354:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e358:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e35e:	0f b6 d0             	movzx  edx,al
c000e361:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e365:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e36a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e36e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e374:	8d 50 01             	lea    edx,[eax+0x1]
c000e377:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e37b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e381:	0f b6 d0             	movzx  edx,al
c000e384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e388:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e38c:	83 e1 3f             	and    ecx,0x3f
c000e38f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e397:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e39d:	0f b6 d0             	movzx  edx,al
c000e3a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3a4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e3ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3af:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3b5:	0f b6 d0             	movzx  edx,al
c000e3b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3bc:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e3c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3c5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3cb:	8d 50 01             	lea    edx,[eax+0x1]
c000e3ce:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e3d2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e3d8:	0f b6 d0             	movzx  edx,al
c000e3db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3df:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e3e3:	83 e1 3f             	and    ecx,0x3f
c000e3e6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e3ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3ee:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3f4:	0f b6 d0             	movzx  edx,al
c000e3f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3fb:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e406:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e40c:	0f b6 d0             	movzx  edx,al
c000e40f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e413:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e41c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e422:	8d 50 01             	lea    edx,[eax+0x1]
c000e425:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e429:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e42f:	0f b6 d0             	movzx  edx,al
c000e432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e436:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e43a:	83 e1 3f             	and    ecx,0x3f
c000e43d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e441:	90                   	nop
c000e442:	83 c4 0c             	add    esp,0xc
c000e445:	c3                   	ret    

c000e446 <Computer::setBootMessage(char const*)>:
c000e446:	c3                   	ret    
c000e447:	90                   	nop

c000e448 <Computer::start()>:
c000e448:	56                   	push   esi
c000e449:	53                   	push   ebx
c000e44a:	83 ec 10             	sub    esp,0x10
c000e44d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e451:	fb                   	sti    
c000e452:	68 3f 07 00 00       	push   0x73f
c000e457:	e8 78 10 00 00       	call   c000f4d4 <malloc>
c000e45c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e463:	89 c6                	mov    esi,eax
c000e465:	ff 35 54 de 02 c0    	push   DWORD PTR ds:0xc002de54
c000e46b:	68 0f 89 02 c0       	push   0xc002890f
c000e470:	6a 01                	push   0x1
c000e472:	50                   	push   eax
c000e473:	e8 b6 e6 00 00       	call   c001cb2e <Process::Process(bool, char const*, Process*, char**)>
c000e478:	83 c4 20             	add    esp,0x20
c000e47b:	68 ff 00 00 00       	push   0xff
c000e480:	6a 00                	push   0x0
c000e482:	68 69 ee 00 c0       	push   0xc000ee69
c000e487:	56                   	push   esi
c000e488:	e8 9f e9 00 00       	call   c001ce2c <Process::createThread(void (*)(void*), void*, int)>
c000e48d:	6a 7a                	push   0x7a
c000e48f:	6a 00                	push   0x0
c000e491:	68 8a d6 01 c0       	push   0xc001d68a
c000e496:	ff 35 54 de 02 c0    	push   DWORD PTR ds:0xc002de54
c000e49c:	e8 8b e9 00 00       	call   c001ce2c <Process::createThread(void (*)(void*), void*, int)>
c000e4a1:	83 c4 20             	add    esp,0x20
c000e4a4:	a3 08 de 02 c0       	mov    ds:0xc002de08,eax
c000e4a9:	e8 5d f5 00 00       	call   c001da0b <Vm::initialise8086()>
c000e4ae:	c6 05 2d c9 02 c0 01 	mov    BYTE PTR ds:0xc002c92d,0x1
c000e4b5:	e8 f2 45 00 00       	call   c0012aac <initVFS()>
c000e4ba:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e4c0:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4c2:	6a 00                	push   0x0
c000e4c4:	6a 00                	push   0x0
c000e4c6:	6a 00                	push   0x0
c000e4c8:	50                   	push   eax
c000e4c9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e4cc:	e8 61 b2 00 00       	call   c0019732 <Krnl::loadSystemEnv()>
c000e4d1:	e8 00 d0 00 00       	call   c001b4d6 <setupSystemCalls()>
c000e4d6:	e8 e3 50 00 00       	call   c00135be <loadClockSettings()>
c000e4db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e4de:	e8 a7 57 00 00       	call   c0013c8a <Device::loadDriversForAll()>
c000e4e3:	58                   	pop    eax
c000e4e4:	8b 1d 28 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c928
c000e4ea:	5a                   	pop    edx
c000e4eb:	6a 01                	push   0x1
c000e4ed:	68 1c 89 02 c0       	push   0xc002891c
c000e4f2:	e8 8f e1 00 00       	call   c001c686 <Thr::loadDLL(char const*, bool)>
c000e4f7:	59                   	pop    ecx
c000e4f8:	5e                   	pop    esi
c000e4f9:	53                   	push   ebx
c000e4fa:	50                   	push   eax
c000e4fb:	e8 95 e3 00 00       	call   c001c895 <Thr::executeDLL(unsigned long, void*)>
c000e500:	c7 04 24 98 9b 02 c0 	mov    DWORD PTR [esp],0xc0029b98
c000e507:	e8 45 42 00 00       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c000e50c:	83 c4 10             	add    esp,0x10
c000e50f:	83 ec 0c             	sub    esp,0xc
c000e512:	6a 02                	push   0x2
c000e514:	e8 77 ec 00 00       	call   c001d190 <blockTask(TaskState)>
c000e519:	83 c4 10             	add    esp,0x10
c000e51c:	eb f1                	jmp    c000e50f <Computer::start()+0xc7>

c000e51e <firstTask()>:
c000e51e:	83 ec 18             	sub    esp,0x18
c000e521:	ff 35 28 c9 02 c0    	push   DWORD PTR ds:0xc002c928
c000e527:	e8 1c ff ff ff       	call   c000e448 <Computer::start()>

c000e52c <Computer::detectFeatures()>:
c000e52c:	55                   	push   ebp
c000e52d:	57                   	push   edi
c000e52e:	56                   	push   esi
c000e52f:	53                   	push   ebx
c000e530:	83 ec 1c             	sub    esp,0x1c
c000e533:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e537:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e541:	e8 53 1d ff ff       	call   c0000299 <detectCPUID>
c000e546:	85 c0                	test   eax,eax
c000e548:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e54e:	0f 95 c2             	setne  dl
c000e551:	83 e0 fd             	and    eax,0xfffffffd
c000e554:	d1 e2                	shl    edx,1
c000e556:	09 d0                	or     eax,edx
c000e558:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e55e:	a8 02                	test   al,0x2
c000e560:	75 46                	jne    c000e5a8 <Computer::detectFeatures()+0x7c>
c000e562:	f6 05 41 c9 02 c0 04 	test   BYTE PTR ds:0xc002c941,0x4
c000e569:	74 07                	je     c000e572 <Computer::detectFeatures()+0x46>
c000e56b:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e572:	e8 cf 6a 01 00       	call   c0025046 <x87Detect>
c000e577:	83 e0 01             	and    eax,0x1
c000e57a:	c1 e0 04             	shl    eax,0x4
c000e57d:	88 c2                	mov    dl,al
c000e57f:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e585:	83 e0 ef             	and    eax,0xffffffef
c000e588:	09 d0                	or     eax,edx
c000e58a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e590:	a8 10                	test   al,0x10
c000e592:	0f 85 2a 01 00 00    	jne    c000e6c2 <Computer::detectFeatures()+0x196>
c000e598:	84 c0                	test   al,al
c000e59a:	0f 88 45 01 00 00    	js     c000e6e5 <Computer::detectFeatures()+0x1b9>
c000e5a0:	83 c4 1c             	add    esp,0x1c
c000e5a3:	5b                   	pop    ebx
c000e5a4:	5e                   	pop    esi
c000e5a5:	5f                   	pop    edi
c000e5a6:	5d                   	pop    ebp
c000e5a7:	c3                   	ret    
c000e5a8:	83 ec 0c             	sub    esp,0xc
c000e5ab:	6a 20                	push   0x20
c000e5ad:	e8 42 9b 00 00       	call   c00180f4 <CPU::cpuidCheckEDX(unsigned int)>
c000e5b2:	83 e0 01             	and    eax,0x1
c000e5b5:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e5bc:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e5c2:	83 e0 f7             	and    eax,0xfffffff7
c000e5c5:	09 d0                	or     eax,edx
c000e5c7:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e5cd:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e5d4:	e8 1b 9b 00 00       	call   c00180f4 <CPU::cpuidCheckEDX(unsigned int)>
c000e5d9:	83 e0 01             	and    eax,0x1
c000e5dc:	88 c2                	mov    dl,al
c000e5de:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e5e4:	83 e0 fe             	and    eax,0xfffffffe
c000e5e7:	09 d0                	or     eax,edx
c000e5e9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e5ef:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e5f6:	e8 f9 9a 00 00       	call   c00180f4 <CPU::cpuidCheckEDX(unsigned int)>
c000e5fb:	c1 e0 07             	shl    eax,0x7
c000e5fe:	88 c2                	mov    dl,al
c000e600:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e606:	83 e0 7f             	and    eax,0x7f
c000e609:	09 d0                	or     eax,edx
c000e60b:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e611:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e618:	e8 d7 9a 00 00       	call   c00180f4 <CPU::cpuidCheckEDX(unsigned int)>
c000e61d:	83 c4 10             	add    esp,0x10
c000e620:	83 e0 01             	and    eax,0x1
c000e623:	c1 e0 05             	shl    eax,0x5
c000e626:	88 c2                	mov    dl,al
c000e628:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e62e:	83 e0 df             	and    eax,0xffffffdf
c000e631:	09 d0                	or     eax,edx
c000e633:	f7 05 40 c9 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002c940,0x401
c000e63d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e643:	0f 84 c2 00 00 00    	je     c000e70b <Computer::detectFeatures()+0x1df>
c000e649:	83 e0 fe             	and    eax,0xfffffffe
c000e64c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e652:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e658:	88 c2                	mov    dl,al
c000e65a:	83 e2 09             	and    edx,0x9
c000e65d:	fe ca                	dec    dl
c000e65f:	75 09                	jne    c000e66a <Computer::detectFeatures()+0x13e>
c000e661:	83 e0 fe             	and    eax,0xfffffffe
c000e664:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e66a:	83 ec 0c             	sub    esp,0xc
c000e66d:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e671:	50                   	push   eax
c000e672:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e676:	55                   	push   ebp
c000e677:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e67b:	57                   	push   edi
c000e67c:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e680:	56                   	push   esi
c000e681:	68 00 00 00 80       	push   0x80000000
c000e686:	e8 e5 99 00 00       	call   c0018070 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e68b:	83 c4 20             	add    esp,0x20
c000e68e:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000e695:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e699:	0f 86 c3 fe ff ff    	jbe    c000e562 <Computer::detectFeatures()+0x36>
c000e69f:	83 ec 0c             	sub    esp,0xc
c000e6a2:	50                   	push   eax
c000e6a3:	55                   	push   ebp
c000e6a4:	57                   	push   edi
c000e6a5:	56                   	push   esi
c000e6a6:	68 01 00 00 80       	push   0x80000001
c000e6ab:	e8 c0 99 00 00       	call   c0018070 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e6b0:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000e6ba:	83 c4 20             	add    esp,0x20
c000e6bd:	e9 a0 fe ff ff       	jmp    c000e562 <Computer::detectFeatures()+0x36>
c000e6c2:	e8 39 69 01 00       	call   c0025000 <absolutelyNoChanceInHell>
c000e6c7:	88 c2                	mov    dl,al
c000e6c9:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e6cf:	c1 e2 07             	shl    edx,0x7
c000e6d2:	83 e0 7f             	and    eax,0x7f
c000e6d5:	09 d0                	or     eax,edx
c000e6d7:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e6dd:	84 c0                	test   al,al
c000e6df:	0f 89 bb fe ff ff    	jns    c000e5a0 <Computer::detectFeatures()+0x74>
c000e6e5:	e8 f6 68 01 00       	call   c0024fe0 <avxDetect>
c000e6ea:	83 e0 01             	and    eax,0x1
c000e6ed:	c1 e0 05             	shl    eax,0x5
c000e6f0:	88 c2                	mov    dl,al
c000e6f2:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e6f8:	83 e0 df             	and    eax,0xffffffdf
c000e6fb:	09 d0                	or     eax,edx
c000e6fd:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e703:	83 c4 1c             	add    esp,0x1c
c000e706:	5b                   	pop    ebx
c000e707:	5e                   	pop    esi
c000e708:	5f                   	pop    edi
c000e709:	5d                   	pop    ebp
c000e70a:	c3                   	ret    
c000e70b:	83 ec 0c             	sub    esp,0xc
c000e70e:	68 00 02 00 00       	push   0x200
c000e713:	e8 dc 99 00 00       	call   c00180f4 <CPU::cpuidCheckEDX(unsigned int)>
c000e718:	83 c4 10             	add    esp,0x10
c000e71b:	83 e0 01             	and    eax,0x1
c000e71e:	88 c2                	mov    dl,al
c000e720:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e726:	83 e0 fe             	and    eax,0xfffffffe
c000e729:	09 d0                	or     eax,edx
c000e72b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e731:	e9 1c ff ff ff       	jmp    c000e652 <Computer::detectFeatures()+0x126>

c000e736 <Computer::displayFeatures()>:
c000e736:	53                   	push   ebx
c000e737:	83 ec 14             	sub    esp,0x14
c000e73a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e73e:	68 3f 89 02 c0       	push   0xc002893f
c000e743:	e8 09 40 00 00       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c000e748:	83 c4 10             	add    esp,0x10
c000e74b:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000e752:	0f 85 73 02 00 00    	jne    c000e9cb <Computer::displayFeatures()+0x295>
c000e758:	b8 3c 89 02 c0       	mov    eax,0xc002893c
c000e75d:	83 ec 08             	sub    esp,0x8
c000e760:	50                   	push   eax
c000e761:	68 52 89 02 c0       	push   0xc0028952
c000e766:	e8 e6 3f 00 00       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c000e76b:	83 c4 10             	add    esp,0x10
c000e76e:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000e775:	0f 85 8c 02 00 00    	jne    c000ea07 <Computer::displayFeatures()+0x2d1>
c000e77b:	b8 3c 89 02 c0       	mov    eax,0xc002893c
c000e780:	83 ec 08             	sub    esp,0x8
c000e783:	50                   	push   eax
c000e784:	68 63 89 02 c0       	push   0xc0028963
c000e789:	e8 c3 3f 00 00       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c000e78e:	83 c4 10             	add    esp,0x10
c000e791:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000e798:	0f 85 5f 02 00 00    	jne    c000e9fd <Computer::displayFeatures()+0x2c7>
c000e79e:	b8 3c 89 02 c0       	mov    eax,0xc002893c
c000e7a3:	83 ec 08             	sub    esp,0x8
c000e7a6:	50                   	push   eax
c000e7a7:	68 74 89 02 c0       	push   0xc0028974
c000e7ac:	e8 a0 3f 00 00       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c000e7b1:	83 c4 10             	add    esp,0x10
c000e7b4:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000e7bb:	0f 85 32 02 00 00    	jne    c000e9f3 <Computer::displayFeatures()+0x2bd>
c000e7c1:	b8 3c 89 02 c0       	mov    eax,0xc002893c
c000e7c6:	83 ec 08             	sub    esp,0x8
c000e7c9:	50                   	push   eax
c000e7ca:	68 85 89 02 c0       	push   0xc0028985
c000e7cf:	e8 7d 3f 00 00       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c000e7d4:	83 c4 10             	add    esp,0x10
c000e7d7:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000e7de:	0f 85 05 02 00 00    	jne    c000e9e9 <Computer::displayFeatures()+0x2b3>
c000e7e4:	b8 3c 89 02 c0       	mov    eax,0xc002893c
c000e7e9:	83 ec 08             	sub    esp,0x8
c000e7ec:	50                   	push   eax
c000e7ed:	68 96 89 02 c0       	push   0xc0028996
c000e7f2:	e8 5a 3f 00 00       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c000e7f7:	83 c4 10             	add    esp,0x10
c000e7fa:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000e801:	0f 85 d8 01 00 00    	jne    c000e9df <Computer::displayFeatures()+0x2a9>
c000e807:	b8 3c 89 02 c0       	mov    eax,0xc002893c
c000e80c:	83 ec 08             	sub    esp,0x8
c000e80f:	50                   	push   eax
c000e810:	68 a7 89 02 c0       	push   0xc00289a7
c000e815:	e8 37 3f 00 00       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c000e81a:	83 c4 10             	add    esp,0x10
c000e81d:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000e824:	0f 85 ab 01 00 00    	jne    c000e9d5 <Computer::displayFeatures()+0x29f>
c000e82a:	b8 3c 89 02 c0       	mov    eax,0xc002893c
c000e82f:	83 ec 08             	sub    esp,0x8
c000e832:	50                   	push   eax
c000e833:	68 b8 89 02 c0       	push   0xc00289b8
c000e838:	e8 14 3f 00 00       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c000e83d:	83 c4 10             	add    esp,0x10
c000e840:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000e847:	0f 88 1b 02 00 00    	js     c000ea68 <Computer::displayFeatures()+0x332>
c000e84d:	b8 3c 89 02 c0       	mov    eax,0xc002893c
c000e852:	83 ec 08             	sub    esp,0x8
c000e855:	50                   	push   eax
c000e856:	68 c9 89 02 c0       	push   0xc00289c9
c000e85b:	e8 f1 3e 00 00       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c000e860:	83 c4 10             	add    esp,0x10
c000e863:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000e86a:	0f 85 a1 01 00 00    	jne    c000ea11 <Computer::displayFeatures()+0x2db>
c000e870:	b8 3c 89 02 c0       	mov    eax,0xc002893c
c000e875:	83 ec 08             	sub    esp,0x8
c000e878:	50                   	push   eax
c000e879:	68 da 89 02 c0       	push   0xc00289da
c000e87e:	e8 ce 3e 00 00       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c000e883:	83 c4 10             	add    esp,0x10
c000e886:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000e88d:	0f 85 cb 01 00 00    	jne    c000ea5e <Computer::displayFeatures()+0x328>
c000e893:	b8 3c 89 02 c0       	mov    eax,0xc002893c
c000e898:	83 ec 08             	sub    esp,0x8
c000e89b:	50                   	push   eax
c000e89c:	68 eb 89 02 c0       	push   0xc00289eb
c000e8a1:	e8 ab 3e 00 00       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c000e8a6:	83 c4 10             	add    esp,0x10
c000e8a9:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000e8b0:	0f 85 9e 01 00 00    	jne    c000ea54 <Computer::displayFeatures()+0x31e>
c000e8b6:	b8 3c 89 02 c0       	mov    eax,0xc002893c
c000e8bb:	83 ec 08             	sub    esp,0x8
c000e8be:	50                   	push   eax
c000e8bf:	68 fc 89 02 c0       	push   0xc00289fc
c000e8c4:	e8 88 3e 00 00       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c000e8c9:	83 c4 10             	add    esp,0x10
c000e8cc:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000e8d3:	0f 85 71 01 00 00    	jne    c000ea4a <Computer::displayFeatures()+0x314>
c000e8d9:	b8 3c 89 02 c0       	mov    eax,0xc002893c
c000e8de:	83 ec 08             	sub    esp,0x8
c000e8e1:	50                   	push   eax
c000e8e2:	68 0d 8a 02 c0       	push   0xc0028a0d
c000e8e7:	e8 65 3e 00 00       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c000e8ec:	83 c4 10             	add    esp,0x10
c000e8ef:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000e8f6:	0f 85 44 01 00 00    	jne    c000ea40 <Computer::displayFeatures()+0x30a>
c000e8fc:	b8 3c 89 02 c0       	mov    eax,0xc002893c
c000e901:	83 ec 08             	sub    esp,0x8
c000e904:	50                   	push   eax
c000e905:	68 1e 8a 02 c0       	push   0xc0028a1e
c000e90a:	e8 42 3e 00 00       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c000e90f:	83 c4 10             	add    esp,0x10
c000e912:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000e919:	0f 85 17 01 00 00    	jne    c000ea36 <Computer::displayFeatures()+0x300>
c000e91f:	b8 3c 89 02 c0       	mov    eax,0xc002893c
c000e924:	83 ec 08             	sub    esp,0x8
c000e927:	50                   	push   eax
c000e928:	68 2f 8a 02 c0       	push   0xc0028a2f
c000e92d:	e8 1f 3e 00 00       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c000e932:	83 c4 10             	add    esp,0x10
c000e935:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000e93c:	0f 85 ea 00 00 00    	jne    c000ea2c <Computer::displayFeatures()+0x2f6>
c000e942:	b8 3c 89 02 c0       	mov    eax,0xc002893c
c000e947:	83 ec 08             	sub    esp,0x8
c000e94a:	50                   	push   eax
c000e94b:	68 40 8a 02 c0       	push   0xc0028a40
c000e950:	e8 fc 3d 00 00       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c000e955:	83 c4 10             	add    esp,0x10
c000e958:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000e95f:	0f 88 0d 01 00 00    	js     c000ea72 <Computer::displayFeatures()+0x33c>
c000e965:	b8 3c 89 02 c0       	mov    eax,0xc002893c
c000e96a:	83 ec 08             	sub    esp,0x8
c000e96d:	50                   	push   eax
c000e96e:	68 51 8a 02 c0       	push   0xc0028a51
c000e973:	e8 d9 3d 00 00       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c000e978:	83 c4 10             	add    esp,0x10
c000e97b:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000e982:	0f 85 9a 00 00 00    	jne    c000ea22 <Computer::displayFeatures()+0x2ec>
c000e988:	b8 3c 89 02 c0       	mov    eax,0xc002893c
c000e98d:	83 ec 08             	sub    esp,0x8
c000e990:	50                   	push   eax
c000e991:	68 62 8a 02 c0       	push   0xc0028a62
c000e996:	e8 b6 3d 00 00       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c000e99b:	83 c4 10             	add    esp,0x10
c000e99e:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000e9a5:	75 74                	jne    c000ea1b <Computer::displayFeatures()+0x2e5>
c000e9a7:	b8 3c 89 02 c0       	mov    eax,0xc002893c
c000e9ac:	83 ec 08             	sub    esp,0x8
c000e9af:	50                   	push   eax
c000e9b0:	68 73 8a 02 c0       	push   0xc0028a73
c000e9b5:	e8 97 3d 00 00       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c000e9ba:	c7 44 24 20 3b a2 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a23b
c000e9c2:	83 c4 18             	add    esp,0x18
c000e9c5:	5b                   	pop    ebx
c000e9c6:	e9 86 3d 00 00       	jmp    c0012751 <Dbg::kprintf(char const*, ...)>
c000e9cb:	b8 38 89 02 c0       	mov    eax,0xc0028938
c000e9d0:	e9 88 fd ff ff       	jmp    c000e75d <Computer::displayFeatures()+0x27>
c000e9d5:	b8 38 89 02 c0       	mov    eax,0xc0028938
c000e9da:	e9 50 fe ff ff       	jmp    c000e82f <Computer::displayFeatures()+0xf9>
c000e9df:	b8 38 89 02 c0       	mov    eax,0xc0028938
c000e9e4:	e9 23 fe ff ff       	jmp    c000e80c <Computer::displayFeatures()+0xd6>
c000e9e9:	b8 38 89 02 c0       	mov    eax,0xc0028938
c000e9ee:	e9 f6 fd ff ff       	jmp    c000e7e9 <Computer::displayFeatures()+0xb3>
c000e9f3:	b8 38 89 02 c0       	mov    eax,0xc0028938
c000e9f8:	e9 c9 fd ff ff       	jmp    c000e7c6 <Computer::displayFeatures()+0x90>
c000e9fd:	b8 38 89 02 c0       	mov    eax,0xc0028938
c000ea02:	e9 9c fd ff ff       	jmp    c000e7a3 <Computer::displayFeatures()+0x6d>
c000ea07:	b8 38 89 02 c0       	mov    eax,0xc0028938
c000ea0c:	e9 6f fd ff ff       	jmp    c000e780 <Computer::displayFeatures()+0x4a>
c000ea11:	b8 38 89 02 c0       	mov    eax,0xc0028938
c000ea16:	e9 5a fe ff ff       	jmp    c000e875 <Computer::displayFeatures()+0x13f>
c000ea1b:	b8 38 89 02 c0       	mov    eax,0xc0028938
c000ea20:	eb 8a                	jmp    c000e9ac <Computer::displayFeatures()+0x276>
c000ea22:	b8 38 89 02 c0       	mov    eax,0xc0028938
c000ea27:	e9 61 ff ff ff       	jmp    c000e98d <Computer::displayFeatures()+0x257>
c000ea2c:	b8 38 89 02 c0       	mov    eax,0xc0028938
c000ea31:	e9 11 ff ff ff       	jmp    c000e947 <Computer::displayFeatures()+0x211>
c000ea36:	b8 38 89 02 c0       	mov    eax,0xc0028938
c000ea3b:	e9 e4 fe ff ff       	jmp    c000e924 <Computer::displayFeatures()+0x1ee>
c000ea40:	b8 38 89 02 c0       	mov    eax,0xc0028938
c000ea45:	e9 b7 fe ff ff       	jmp    c000e901 <Computer::displayFeatures()+0x1cb>
c000ea4a:	b8 38 89 02 c0       	mov    eax,0xc0028938
c000ea4f:	e9 8a fe ff ff       	jmp    c000e8de <Computer::displayFeatures()+0x1a8>
c000ea54:	b8 38 89 02 c0       	mov    eax,0xc0028938
c000ea59:	e9 5d fe ff ff       	jmp    c000e8bb <Computer::displayFeatures()+0x185>
c000ea5e:	b8 38 89 02 c0       	mov    eax,0xc0028938
c000ea63:	e9 30 fe ff ff       	jmp    c000e898 <Computer::displayFeatures()+0x162>
c000ea68:	b8 38 89 02 c0       	mov    eax,0xc0028938
c000ea6d:	e9 e0 fd ff ff       	jmp    c000e852 <Computer::displayFeatures()+0x11c>
c000ea72:	b8 38 89 02 c0       	mov    eax,0xc0028938
c000ea77:	e9 ee fe ff ff       	jmp    c000e96a <Computer::displayFeatures()+0x234>

c000ea7c <Computer::rdmsr(unsigned int)>:
c000ea7c:	83 ec 0c             	sub    esp,0xc
c000ea7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea83:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ea8a:	74 0a                	je     c000ea96 <Computer::rdmsr(unsigned int)+0x1a>
c000ea8c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ea90:	0f 32                	rdmsr  
c000ea92:	83 c4 0c             	add    esp,0xc
c000ea95:	c3                   	ret    
c000ea96:	83 ec 0c             	sub    esp,0xc
c000ea99:	68 84 8a 02 c0       	push   0xc0028a84
c000ea9e:	e8 c8 ad 00 00       	call   c001986b <Krnl::panic(char const*)>
c000eaa3:	83 c4 10             	add    esp,0x10
c000eaa6:	eb e4                	jmp    c000ea8c <Computer::rdmsr(unsigned int)+0x10>

c000eaa8 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eaa8:	57                   	push   edi
c000eaa9:	56                   	push   esi
c000eaaa:	52                   	push   edx
c000eaab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaaf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eab3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eab7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eabe:	74 0e                	je     c000eace <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eac0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eac4:	89 f0                	mov    eax,esi
c000eac6:	89 fa                	mov    edx,edi
c000eac8:	0f 30                	wrmsr  
c000eaca:	58                   	pop    eax
c000eacb:	5e                   	pop    esi
c000eacc:	5f                   	pop    edi
c000eacd:	c3                   	ret    
c000eace:	83 ec 0c             	sub    esp,0xc
c000ead1:	68 8a 8a 02 c0       	push   0xc0028a8a
c000ead6:	e8 90 ad 00 00       	call   c001986b <Krnl::panic(char const*)>
c000eadb:	83 c4 10             	add    esp,0x10
c000eade:	eb e0                	jmp    c000eac0 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eae0 <Computer::nmiEnabled()>:
c000eae0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eae4:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000eaea:	c3                   	ret    
c000eaeb:	90                   	nop

c000eaec <Computer::readCMOS(unsigned char)>:
c000eaec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eaf0:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eaf7:	19 c0                	sbb    eax,eax
c000eaf9:	83 e0 80             	and    eax,0xffffff80
c000eafc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000eb00:	e6 70                	out    0x70,al
c000eb02:	e4 71                	in     al,0x71
c000eb04:	c3                   	ret    
c000eb05:	90                   	nop

c000eb06 <Computer::enableNMI(bool)>:
c000eb06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eb0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eb0e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000eb14:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000eb1c:	eb ce                	jmp    c000eaec <Computer::readCMOS(unsigned char)>

c000eb1e <Computer::open(int, int, void*)>:
c000eb1e:	56                   	push   esi
c000eb1f:	53                   	push   ebx
c000eb20:	83 ec 10             	sub    esp,0x10
c000eb23:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eb27:	f6 05 40 c9 02 c0 04 	test   BYTE PTR ds:0xc002c940,0x4
c000eb2e:	68 68 22 00 00       	push   0x2268
c000eb33:	0f 94 05 64 b8 02 c0 	sete   BYTE PTR ds:0xc002b864
c000eb3a:	e8 95 09 00 00       	call   c000f4d4 <malloc>
c000eb3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb42:	89 c6                	mov    esi,eax
c000eb44:	e8 b7 8b 00 00       	call   c0017700 <ACPI::ACPI()>
c000eb49:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eb4f:	58                   	pop    eax
c000eb50:	5a                   	pop    edx
c000eb51:	56                   	push   esi
c000eb52:	53                   	push   ebx
c000eb53:	e8 e8 4f 00 00       	call   c0013b40 <Device::addChild(Device*)>
c000eb58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eb5b:	e8 cc f9 ff ff       	call   c000e52c <Computer::detectFeatures()>
c000eb60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eb63:	e8 ce fb ff ff       	call   c000e736 <Computer::displayFeatures()>
c000eb68:	59                   	pop    ecx
c000eb69:	5e                   	pop    esi
c000eb6a:	6a 01                	push   0x1
c000eb6c:	53                   	push   ebx
c000eb6d:	e8 94 ff ff ff       	call   c000eb06 <Computer::enableNMI(bool)>
c000eb72:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eb79:	e8 56 09 00 00       	call   c000f4d4 <malloc>
c000eb7e:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb81:	89 c6                	mov    esi,eax
c000eb83:	e8 24 96 00 00       	call   c00181ac <CPU::CPU()>
c000eb88:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eb8e:	58                   	pop    eax
c000eb8f:	5a                   	pop    edx
c000eb90:	56                   	push   esi
c000eb91:	53                   	push   ebx
c000eb92:	e8 a9 4f 00 00       	call   c0013b40 <Device::addChild(Device*)>
c000eb97:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000eb9d:	8b 10                	mov    edx,DWORD PTR [eax]
c000eb9f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eba3:	6a 00                	push   0x0
c000eba5:	6a 00                	push   0x0
c000eba7:	50                   	push   eax
c000eba8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ebab:	83 c4 20             	add    esp,0x20
c000ebae:	e8 ff 54 00 00       	call   c00140b2 <setupFPU()>
c000ebb3:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ebb9:	85 c0                	test   eax,eax
c000ebbb:	74 1f                	je     c000ebdc <Computer::open(int, int, void*)+0xbe>
c000ebbd:	83 ec 08             	sub    esp,0x8
c000ebc0:	50                   	push   eax
c000ebc1:	53                   	push   ebx
c000ebc2:	e8 79 4f 00 00       	call   c0013b40 <Device::addChild(Device*)>
c000ebc7:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ebcd:	8b 10                	mov    edx,DWORD PTR [eax]
c000ebcf:	6a 00                	push   0x0
c000ebd1:	6a 00                	push   0x0
c000ebd3:	6a 00                	push   0x0
c000ebd5:	50                   	push   eax
c000ebd6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ebd9:	83 c4 20             	add    esp,0x20
c000ebdc:	83 ec 0c             	sub    esp,0xc
c000ebdf:	68 1e e5 00 c0       	push   0xc000e51e
c000ebe4:	e8 43 e3 00 00       	call   c001cf2c <setupMultitasking(void (*)())>
c000ebe9:	83 c4 14             	add    esp,0x14
c000ebec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ebf1:	5b                   	pop    ebx
c000ebf2:	5e                   	pop    esi
c000ebf3:	c3                   	ret    

c000ebf4 <Computer::disableNMI()>:
c000ebf4:	6a 00                	push   0x0
c000ebf6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ebfa:	e8 07 ff ff ff       	call   c000eb06 <Computer::enableNMI(bool)>
c000ebff:	58                   	pop    eax
c000ec00:	5a                   	pop    edx
c000ec01:	c3                   	ret    

c000ec02 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ec02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec06:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ec0d:	19 c0                	sbb    eax,eax
c000ec0f:	83 e0 80             	and    eax,0xffffff80
c000ec12:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ec16:	e6 70                	out    0x70,al
c000ec18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec1c:	e6 71                	out    0x71,al
c000ec1e:	c3                   	ret    
c000ec1f:	90                   	nop

c000ec20 <Computer::handleNMI()>:
c000ec20:	56                   	push   esi
c000ec21:	53                   	push   ebx
c000ec22:	83 ec 10             	sub    esp,0x10
c000ec25:	e4 92                	in     al,0x92
c000ec27:	89 c6                	mov    esi,eax
c000ec29:	e4 61                	in     al,0x61
c000ec2b:	68 90 8a 02 c0       	push   0xc0028a90
c000ec30:	88 c3                	mov    bl,al
c000ec32:	e8 1a 3b 00 00       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c000ec37:	83 c4 10             	add    esp,0x10
c000ec3a:	83 e6 10             	and    esi,0x10
c000ec3d:	75 0d                	jne    c000ec4c <Computer::handleNMI()+0x2c>
c000ec3f:	f6 c3 40             	test   bl,0x40
c000ec42:	75 1d                	jne    c000ec61 <Computer::handleNMI()+0x41>
c000ec44:	84 db                	test   bl,bl
c000ec46:	78 2d                	js     c000ec75 <Computer::handleNMI()+0x55>
c000ec48:	58                   	pop    eax
c000ec49:	5b                   	pop    ebx
c000ec4a:	5e                   	pop    esi
c000ec4b:	c3                   	ret    
c000ec4c:	83 ec 0c             	sub    esp,0xc
c000ec4f:	68 a1 8a 02 c0       	push   0xc0028aa1
c000ec54:	e8 12 ac 00 00       	call   c001986b <Krnl::panic(char const*)>
c000ec59:	83 c4 10             	add    esp,0x10
c000ec5c:	f6 c3 40             	test   bl,0x40
c000ec5f:	74 e3                	je     c000ec44 <Computer::handleNMI()+0x24>
c000ec61:	83 ec 0c             	sub    esp,0xc
c000ec64:	68 ae 8a 02 c0       	push   0xc0028aae
c000ec69:	e8 fd ab 00 00       	call   c001986b <Krnl::panic(char const*)>
c000ec6e:	83 c4 10             	add    esp,0x10
c000ec71:	84 db                	test   bl,bl
c000ec73:	79 d3                	jns    c000ec48 <Computer::handleNMI()+0x28>
c000ec75:	c7 44 24 10 b8 8a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028ab8
c000ec7d:	5a                   	pop    edx
c000ec7e:	5b                   	pop    ebx
c000ec7f:	5e                   	pop    esi
c000ec80:	e9 e6 ab 00 00       	jmp    c001986b <Krnl::panic(char const*)>
c000ec85:	90                   	nop

c000ec86 <Computer::setDiskActivityLight(int, bool)>:
c000ec86:	56                   	push   esi
c000ec87:	53                   	push   ebx
c000ec88:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ec8c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ec91:	77 1b                	ja     c000ecae <Computer::setDiskActivityLight(int, bool)+0x28>
c000ec93:	e4 92                	in     al,0x92
c000ec95:	bb 40 00 00 00       	mov    ebx,0x40
c000ec9a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ec9e:	89 da                	mov    edx,ebx
c000eca0:	d3 e2                	shl    edx,cl
c000eca2:	89 f1                	mov    ecx,esi
c000eca4:	f7 d2                	not    edx
c000eca6:	d3 e3                	shl    ebx,cl
c000eca8:	21 d0                	and    eax,edx
c000ecaa:	09 d8                	or     eax,ebx
c000ecac:	e6 92                	out    0x92,al
c000ecae:	5b                   	pop    ebx
c000ecaf:	5e                   	pop    esi
c000ecb0:	c3                   	ret    
c000ecb1:	90                   	nop

c000ecb2 <GDTEntry::setBase(unsigned int)>:
c000ecb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecb6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ecba:	89 c1                	mov    ecx,eax
c000ecbc:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ecc0:	c1 e9 10             	shr    ecx,0x10
c000ecc3:	c1 e8 18             	shr    eax,0x18
c000ecc6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000ecc9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000eccc:	c3                   	ret    
c000eccd:	90                   	nop

c000ecce <GDTEntry::setLimit(unsigned int)>:
c000ecce:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ecd2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecd6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000ecd9:	66 89 01             	mov    WORD PTR [ecx],ax
c000ecdc:	83 e2 f0             	and    edx,0xfffffff0
c000ecdf:	c1 e8 10             	shr    eax,0x10
c000ece2:	83 e0 0f             	and    eax,0xf
c000ece5:	09 d0                	or     eax,edx
c000ece7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000ecea:	c3                   	ret    
c000eceb:	90                   	nop

c000ecec <GDT::GDT()>:
c000ecec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ecf0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ecf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ecfa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ed00:	90                   	nop
c000ed01:	c3                   	ret    

c000ed02 <GDT::addEntry(GDTEntry)>:
c000ed02:	53                   	push   ebx
c000ed03:	83 ec 0c             	sub    esp,0xc
c000ed06:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ed0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ed0c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ed13:	52                   	push   edx
c000ed14:	50                   	push   eax
c000ed15:	68 f4 8a 02 c0       	push   0xc0028af4
c000ed1a:	e8 32 3a 00 00       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c000ed1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ed21:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ed25:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ed29:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000ed2d:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000ed31:	8d 50 01             	lea    edx,[eax+0x1]
c000ed34:	c1 e0 03             	shl    eax,0x3
c000ed37:	89 13                	mov    DWORD PTR [ebx],edx
c000ed39:	83 c4 18             	add    esp,0x18
c000ed3c:	5b                   	pop    ebx
c000ed3d:	c3                   	ret    

c000ed3e <GDT::getNumberOfEntries()>:
c000ed3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed42:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed44:	c3                   	ret    
c000ed45:	90                   	nop

c000ed46 <GDT::flush()>:
c000ed46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed4a:	8b 10                	mov    edx,DWORD PTR [eax]
c000ed4c:	83 c0 04             	add    eax,0x4
c000ed4f:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ed56:	a3 32 c9 02 c0       	mov    ds:0xc002c932,eax
c000ed5b:	66 89 15 30 c9 02 c0 	mov    WORD PTR ds:0xc002c930,dx
c000ed62:	e9 96 16 ff ff       	jmp    c00003fd <loadGDT>
c000ed67:	90                   	nop

c000ed68 <GDT::setup()>:
c000ed68:	55                   	push   ebp
c000ed69:	57                   	push   edi
c000ed6a:	56                   	push   esi
c000ed6b:	53                   	push   ebx
c000ed6c:	83 ec 3c             	sub    esp,0x3c
c000ed6f:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ed73:	6a 00                	push   0x0
c000ed75:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ed79:	53                   	push   ebx
c000ed7a:	e8 33 ff ff ff       	call   c000ecb2 <GDTEntry::setBase(unsigned int)>
c000ed7f:	6a 00                	push   0x0
c000ed81:	53                   	push   ebx
c000ed82:	e8 47 ff ff ff       	call   c000ecce <GDTEntry::setLimit(unsigned int)>
c000ed87:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ed8f:	6a 00                	push   0x0
c000ed91:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ed95:	53                   	push   ebx
c000ed96:	e8 17 ff ff ff       	call   c000ecb2 <GDTEntry::setBase(unsigned int)>
c000ed9b:	68 ff ff ff 00       	push   0xffffff
c000eda0:	53                   	push   ebx
c000eda1:	e8 28 ff ff ff       	call   c000ecce <GDTEntry::setLimit(unsigned int)>
c000eda6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000edaa:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000edaf:	0d 00 9a c0 00       	or     eax,0xc09a00
c000edb4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000edb8:	83 c4 20             	add    esp,0x20
c000edbb:	6a 00                	push   0x0
c000edbd:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000edc1:	53                   	push   ebx
c000edc2:	e8 eb fe ff ff       	call   c000ecb2 <GDTEntry::setBase(unsigned int)>
c000edc7:	68 ff ff ff 00       	push   0xffffff
c000edcc:	53                   	push   ebx
c000edcd:	e8 fc fe ff ff       	call   c000ecce <GDTEntry::setLimit(unsigned int)>
c000edd2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000edd6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000edda:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000edde:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ede2:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ede6:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000edeb:	0d 00 92 c0 00       	or     eax,0xc09200
c000edf0:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000edf4:	89 d8                	mov    eax,ebx
c000edf6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000edfa:	80 cc 60             	or     ah,0x60
c000edfd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ee01:	83 c4 0c             	add    esp,0xc
c000ee04:	89 f8                	mov    eax,edi
c000ee06:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ee0a:	80 cc 60             	or     ah,0x60
c000ee0d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ee11:	89 c7                	mov    edi,eax
c000ee13:	55                   	push   ebp
c000ee14:	e8 e9 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee19:	83 c4 0c             	add    esp,0xc
c000ee1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee20:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee24:	55                   	push   ebp
c000ee25:	e8 d8 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee2a:	83 c4 0c             	add    esp,0xc
c000ee2d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee31:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee35:	55                   	push   ebp
c000ee36:	e8 c7 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee3b:	83 c4 0c             	add    esp,0xc
c000ee3e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ee42:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ee46:	53                   	push   ebx
c000ee47:	51                   	push   ecx
c000ee48:	55                   	push   ebp
c000ee49:	e8 b4 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee4e:	83 c4 0c             	add    esp,0xc
c000ee51:	57                   	push   edi
c000ee52:	56                   	push   esi
c000ee53:	55                   	push   ebp
c000ee54:	e8 a9 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee59:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ee5c:	e8 e5 fe ff ff       	call   c000ed46 <GDT::flush()>
c000ee61:	83 c4 4c             	add    esp,0x4c
c000ee64:	5b                   	pop    ebx
c000ee65:	5e                   	pop    esi
c000ee66:	5f                   	pop    edi
c000ee67:	5d                   	pop    ebp
c000ee68:	c3                   	ret    

c000ee69 <idleFunction(void*)>:
c000ee69:	53                   	push   ebx
c000ee6a:	83 ec 08             	sub    esp,0x8
c000ee6d:	e8 8a de 00 00       	call   c001ccfc <unlockScheduler()>
c000ee72:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c000ee77:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ee7d:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000ee84:	74 3c                	je     c000eec2 <idleFunction(void*)+0x59>
c000ee86:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee8d:	74 33                	je     c000eec2 <idleFunction(void*)+0x59>
c000ee8f:	31 db                	xor    ebx,ebx
c000ee91:	52                   	push   edx
c000ee92:	52                   	push   edx
c000ee93:	68 e1 00 00 00       	push   0xe1
c000ee98:	50                   	push   eax
c000ee99:	e8 de fb ff ff       	call   c000ea7c <Computer::rdmsr(unsigned int)>
c000ee9e:	53                   	push   ebx
c000ee9f:	83 e0 02             	and    eax,0x2
c000eea2:	50                   	push   eax
c000eea3:	68 e1 00 00 00       	push   0xe1
c000eea8:	ff 35 28 c9 02 c0    	push   DWORD PTR ds:0xc002c928
c000eeae:	e8 f5 fb ff ff       	call   c000eaa8 <Computer::wrmsr(unsigned int, unsigned long long)>
c000eeb3:	83 c4 20             	add    esp,0x20
c000eeb6:	e8 79 13 ff ff       	call   c0000234 <doTPAUSE>
c000eebb:	e8 c0 81 01 00       	call   c0027080 <idleCommon()>
c000eec0:	eb f4                	jmp    c000eeb6 <idleFunction(void*)+0x4d>
c000eec2:	fb                   	sti    
c000eec3:	f4                   	hlt    
c000eec4:	e8 b7 81 01 00       	call   c0027080 <idleCommon()>
c000eec9:	eb f7                	jmp    c000eec2 <idleFunction(void*)+0x59>
c000eecb:	90                   	nop

c000eecc <IDTEntry::IDTEntry(bool)>:
c000eecc:	83 ec 04             	sub    esp,0x4
c000eecf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eed3:	88 04 24             	mov    BYTE PTR [esp],al
c000eed6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eeda:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000eee0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eee4:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000eee8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eeec:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eeef:	83 e2 f0             	and    edx,0xfffffff0
c000eef2:	83 ca 0e             	or     edx,0xe
c000eef5:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eef8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eefc:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eeff:	83 e2 ef             	and    edx,0xffffffef
c000ef02:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef05:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000ef09:	74 04                	je     c000ef0f <IDTEntry::IDTEntry(bool)+0x43>
c000ef0b:	b2 03                	mov    dl,0x3
c000ef0d:	eb 02                	jmp    c000ef11 <IDTEntry::IDTEntry(bool)+0x45>
c000ef0f:	b2 00                	mov    dl,0x0
c000ef11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef15:	83 e2 03             	and    edx,0x3
c000ef18:	88 d1                	mov    cl,dl
c000ef1a:	c1 e1 05             	shl    ecx,0x5
c000ef1d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef20:	83 e2 9f             	and    edx,0xffffff9f
c000ef23:	09 ca                	or     edx,ecx
c000ef25:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef2c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef2f:	83 ca 80             	or     edx,0xffffff80
c000ef32:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef35:	90                   	nop
c000ef36:	83 c4 04             	add    esp,0x4
c000ef39:	c3                   	ret    

c000ef3a <IDTEntry::setOffset(unsigned int)>:
c000ef3a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ef3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef42:	66 89 02             	mov    WORD PTR [edx],ax
c000ef45:	c1 e8 10             	shr    eax,0x10
c000ef48:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ef4c:	c3                   	ret    
c000ef4d:	90                   	nop

c000ef4e <IDT::IDT()>:
c000ef4e:	90                   	nop
c000ef4f:	c3                   	ret    

c000ef50 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ef50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef54:	83 c0 30             	add    eax,0x30
c000ef57:	c3                   	ret    

c000ef58 <IDT::addEntry(IDTEntry, int)>:
c000ef58:	53                   	push   ebx
c000ef59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef5d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ef61:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef65:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef69:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ef6c:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ef70:	5b                   	pop    ebx
c000ef71:	c3                   	ret    

c000ef72 <IDT::addEntry(int, void (*)(), bool)>:
c000ef72:	53                   	push   ebx
c000ef73:	83 ec 10             	sub    esp,0x10
c000ef76:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ef7b:	50                   	push   eax
c000ef7c:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ef80:	53                   	push   ebx
c000ef81:	e8 46 ff ff ff       	call   c000eecc <IDTEntry::IDTEntry(bool)>
c000ef86:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef8a:	53                   	push   ebx
c000ef8b:	e8 aa ff ff ff       	call   c000ef3a <IDTEntry::setOffset(unsigned int)>
c000ef90:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef94:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef98:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef9c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000efa0:	e8 b3 ff ff ff       	call   c000ef58 <IDT::addEntry(IDTEntry, int)>
c000efa5:	83 c4 30             	add    esp,0x30
c000efa8:	5b                   	pop    ebx
c000efa9:	c3                   	ret    

c000efaa <IDT::flush()>:
c000efaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efae:	66 c7 05 38 c9 02 c0 ff 07 	mov    WORD PTR ds:0xc002c938,0x7ff
c000efb7:	a3 3a c9 02 c0       	mov    ds:0xc002c93a,eax
c000efbc:	0f 01 1d 38 c9 02 c0 	lidtd  ds:0xc002c938
c000efc3:	c3                   	ret    

c000efc4 <IDT::setup()>:
c000efc4:	57                   	push   edi
c000efc5:	56                   	push   esi
c000efc6:	53                   	push   ebx
c000efc7:	83 ec 10             	sub    esp,0x10
c000efca:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000efce:	6a 00                	push   0x0
c000efd0:	68 1d 04 00 c0       	push   0xc000041d
c000efd5:	6a 00                	push   0x0
c000efd7:	53                   	push   ebx
c000efd8:	e8 95 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000efdd:	6a 00                	push   0x0
c000efdf:	68 2d 04 00 c0       	push   0xc000042d
c000efe4:	6a 01                	push   0x1
c000efe6:	53                   	push   ebx
c000efe7:	e8 86 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000efec:	83 c4 20             	add    esp,0x20
c000efef:	6a 00                	push   0x0
c000eff1:	68 37 04 00 c0       	push   0xc0000437
c000eff6:	6a 02                	push   0x2
c000eff8:	53                   	push   ebx
c000eff9:	e8 74 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000effe:	6a 00                	push   0x0
c000f000:	68 41 04 00 c0       	push   0xc0000441
c000f005:	6a 03                	push   0x3
c000f007:	53                   	push   ebx
c000f008:	e8 65 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f00d:	83 c4 20             	add    esp,0x20
c000f010:	6a 00                	push   0x0
c000f012:	68 4b 04 00 c0       	push   0xc000044b
c000f017:	6a 04                	push   0x4
c000f019:	53                   	push   ebx
c000f01a:	e8 53 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f01f:	6a 00                	push   0x0
c000f021:	68 55 04 00 c0       	push   0xc0000455
c000f026:	6a 05                	push   0x5
c000f028:	53                   	push   ebx
c000f029:	e8 44 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f02e:	83 c4 20             	add    esp,0x20
c000f031:	6a 00                	push   0x0
c000f033:	68 5f 04 00 c0       	push   0xc000045f
c000f038:	6a 06                	push   0x6
c000f03a:	53                   	push   ebx
c000f03b:	e8 32 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f040:	6a 00                	push   0x0
c000f042:	68 69 04 00 c0       	push   0xc0000469
c000f047:	6a 07                	push   0x7
c000f049:	53                   	push   ebx
c000f04a:	e8 23 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f04f:	83 c4 20             	add    esp,0x20
c000f052:	6a 00                	push   0x0
c000f054:	68 73 04 00 c0       	push   0xc0000473
c000f059:	6a 08                	push   0x8
c000f05b:	53                   	push   ebx
c000f05c:	e8 11 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f061:	6a 00                	push   0x0
c000f063:	68 7b 04 00 c0       	push   0xc000047b
c000f068:	6a 09                	push   0x9
c000f06a:	53                   	push   ebx
c000f06b:	e8 02 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f070:	83 c4 20             	add    esp,0x20
c000f073:	6a 00                	push   0x0
c000f075:	68 85 04 00 c0       	push   0xc0000485
c000f07a:	6a 0a                	push   0xa
c000f07c:	53                   	push   ebx
c000f07d:	e8 f0 fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f082:	6a 00                	push   0x0
c000f084:	68 8d 04 00 c0       	push   0xc000048d
c000f089:	6a 0b                	push   0xb
c000f08b:	53                   	push   ebx
c000f08c:	e8 e1 fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f091:	83 c4 20             	add    esp,0x20
c000f094:	6a 00                	push   0x0
c000f096:	68 95 04 00 c0       	push   0xc0000495
c000f09b:	6a 0c                	push   0xc
c000f09d:	53                   	push   ebx
c000f09e:	e8 cf fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0a3:	6a 00                	push   0x0
c000f0a5:	68 9d 04 00 c0       	push   0xc000049d
c000f0aa:	6a 0d                	push   0xd
c000f0ac:	53                   	push   ebx
c000f0ad:	e8 c0 fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0b2:	83 c4 20             	add    esp,0x20
c000f0b5:	6a 00                	push   0x0
c000f0b7:	68 a5 04 00 c0       	push   0xc00004a5
c000f0bc:	6a 0e                	push   0xe
c000f0be:	53                   	push   ebx
c000f0bf:	e8 ae fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0c4:	6a 00                	push   0x0
c000f0c6:	68 ad 04 00 c0       	push   0xc00004ad
c000f0cb:	6a 0f                	push   0xf
c000f0cd:	53                   	push   ebx
c000f0ce:	e8 9f fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0d3:	83 c4 20             	add    esp,0x20
c000f0d6:	6a 00                	push   0x0
c000f0d8:	68 b7 04 00 c0       	push   0xc00004b7
c000f0dd:	6a 10                	push   0x10
c000f0df:	53                   	push   ebx
c000f0e0:	e8 8d fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0e5:	6a 00                	push   0x0
c000f0e7:	68 c1 04 00 c0       	push   0xc00004c1
c000f0ec:	6a 11                	push   0x11
c000f0ee:	53                   	push   ebx
c000f0ef:	e8 7e fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0f4:	83 c4 20             	add    esp,0x20
c000f0f7:	6a 00                	push   0x0
c000f0f9:	68 cb 04 00 c0       	push   0xc00004cb
c000f0fe:	6a 12                	push   0x12
c000f100:	53                   	push   ebx
c000f101:	e8 6c fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f106:	6a 01                	push   0x1
c000f108:	68 65 05 00 c0       	push   0xc0000565
c000f10d:	6a 60                	push   0x60
c000f10f:	53                   	push   ebx
c000f110:	e8 5d fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f115:	83 c4 20             	add    esp,0x20
c000f118:	6a 00                	push   0x0
c000f11a:	68 6c 05 00 c0       	push   0xc000056c
c000f11f:	6a 20                	push   0x20
c000f121:	53                   	push   ebx
c000f122:	e8 4b fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f127:	6a 00                	push   0x0
c000f129:	68 57 05 00 c0       	push   0xc0000557
c000f12e:	6a 21                	push   0x21
c000f130:	53                   	push   ebx
c000f131:	e8 3c fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f136:	83 c4 20             	add    esp,0x20
c000f139:	6a 00                	push   0x0
c000f13b:	68 5e 05 00 c0       	push   0xc000055e
c000f140:	6a 22                	push   0x22
c000f142:	53                   	push   ebx
c000f143:	e8 2a fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f148:	6a 00                	push   0x0
c000f14a:	68 d5 04 00 c0       	push   0xc00004d5
c000f14f:	6a 23                	push   0x23
c000f151:	53                   	push   ebx
c000f152:	e8 1b fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f157:	83 c4 20             	add    esp,0x20
c000f15a:	6a 00                	push   0x0
c000f15c:	68 df 04 00 c0       	push   0xc00004df
c000f161:	6a 24                	push   0x24
c000f163:	53                   	push   ebx
c000f164:	e8 09 fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f169:	6a 00                	push   0x0
c000f16b:	68 e9 04 00 c0       	push   0xc00004e9
c000f170:	6a 25                	push   0x25
c000f172:	53                   	push   ebx
c000f173:	e8 fa fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f178:	83 c4 20             	add    esp,0x20
c000f17b:	6a 00                	push   0x0
c000f17d:	68 f3 04 00 c0       	push   0xc00004f3
c000f182:	6a 26                	push   0x26
c000f184:	53                   	push   ebx
c000f185:	e8 e8 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f18a:	6a 00                	push   0x0
c000f18c:	68 fd 04 00 c0       	push   0xc00004fd
c000f191:	6a 27                	push   0x27
c000f193:	53                   	push   ebx
c000f194:	e8 d9 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f199:	83 c4 20             	add    esp,0x20
c000f19c:	6a 00                	push   0x0
c000f19e:	68 07 05 00 c0       	push   0xc0000507
c000f1a3:	6a 28                	push   0x28
c000f1a5:	53                   	push   ebx
c000f1a6:	e8 c7 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1ab:	6a 00                	push   0x0
c000f1ad:	68 11 05 00 c0       	push   0xc0000511
c000f1b2:	6a 29                	push   0x29
c000f1b4:	53                   	push   ebx
c000f1b5:	e8 b8 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1ba:	83 c4 20             	add    esp,0x20
c000f1bd:	6a 00                	push   0x0
c000f1bf:	68 1b 05 00 c0       	push   0xc000051b
c000f1c4:	6a 2a                	push   0x2a
c000f1c6:	53                   	push   ebx
c000f1c7:	e8 a6 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1cc:	6a 00                	push   0x0
c000f1ce:	68 25 05 00 c0       	push   0xc0000525
c000f1d3:	6a 2b                	push   0x2b
c000f1d5:	53                   	push   ebx
c000f1d6:	e8 97 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1db:	83 c4 20             	add    esp,0x20
c000f1de:	6a 00                	push   0x0
c000f1e0:	68 2f 05 00 c0       	push   0xc000052f
c000f1e5:	6a 2c                	push   0x2c
c000f1e7:	53                   	push   ebx
c000f1e8:	e8 85 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1ed:	6a 00                	push   0x0
c000f1ef:	68 39 05 00 c0       	push   0xc0000539
c000f1f4:	6a 2d                	push   0x2d
c000f1f6:	53                   	push   ebx
c000f1f7:	e8 76 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1fc:	83 c4 20             	add    esp,0x20
c000f1ff:	6a 00                	push   0x0
c000f201:	68 43 05 00 c0       	push   0xc0000543
c000f206:	6a 2e                	push   0x2e
c000f208:	53                   	push   ebx
c000f209:	e8 64 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f20e:	6a 00                	push   0x0
c000f210:	68 4d 05 00 c0       	push   0xc000054d
c000f215:	6a 2f                	push   0x2f
c000f217:	53                   	push   ebx
c000f218:	e8 55 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f21d:	83 c4 20             	add    esp,0x20
c000f220:	6a 00                	push   0x0
c000f222:	68 a2 05 00 c0       	push   0xc00005a2
c000f227:	6a 30                	push   0x30
c000f229:	53                   	push   ebx
c000f22a:	e8 43 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f22f:	6a 00                	push   0x0
c000f231:	68 ac 05 00 c0       	push   0xc00005ac
c000f236:	6a 31                	push   0x31
c000f238:	53                   	push   ebx
c000f239:	e8 34 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f23e:	83 c4 20             	add    esp,0x20
c000f241:	6a 00                	push   0x0
c000f243:	68 b6 05 00 c0       	push   0xc00005b6
c000f248:	6a 32                	push   0x32
c000f24a:	53                   	push   ebx
c000f24b:	e8 22 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f250:	6a 00                	push   0x0
c000f252:	68 c0 05 00 c0       	push   0xc00005c0
c000f257:	6a 33                	push   0x33
c000f259:	53                   	push   ebx
c000f25a:	e8 13 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f25f:	83 c4 20             	add    esp,0x20
c000f262:	6a 00                	push   0x0
c000f264:	68 ca 05 00 c0       	push   0xc00005ca
c000f269:	6a 34                	push   0x34
c000f26b:	53                   	push   ebx
c000f26c:	e8 01 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f271:	6a 00                	push   0x0
c000f273:	68 d4 05 00 c0       	push   0xc00005d4
c000f278:	6a 35                	push   0x35
c000f27a:	53                   	push   ebx
c000f27b:	e8 f2 fc ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f280:	83 c4 20             	add    esp,0x20
c000f283:	6a 00                	push   0x0
c000f285:	68 de 05 00 c0       	push   0xc00005de
c000f28a:	6a 36                	push   0x36
c000f28c:	53                   	push   ebx
c000f28d:	e8 e0 fc ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f292:	6a 00                	push   0x0
c000f294:	68 e8 05 00 c0       	push   0xc00005e8
c000f299:	6a 37                	push   0x37
c000f29b:	53                   	push   ebx
c000f29c:	e8 d1 fc ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f2a1:	83 c4 20             	add    esp,0x20
c000f2a4:	e8 48 26 00 00       	call   c00118f1 <Virt::getAKernelVAS()>
c000f2a9:	52                   	push   edx
c000f2aa:	6a 03                	push   0x3
c000f2ac:	6a 02                	push   0x2
c000f2ae:	50                   	push   eax
c000f2af:	e8 78 2c 00 00       	call   c0011f2c <VAS::allocatePages(int, int)>
c000f2b4:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f2bb:	89 c6                	mov    esi,eax
c000f2bd:	e8 12 02 00 00       	call   c000f4d4 <malloc>
c000f2c2:	81 c6 00 20 00 00    	add    esi,0x2000
c000f2c8:	89 04 24             	mov    DWORD PTR [esp],eax
c000f2cb:	89 c7                	mov    edi,eax
c000f2cd:	e8 c0 1d 00 00       	call   c0011092 <TSS::TSS()>
c000f2d2:	83 c4 0c             	add    esp,0xc
c000f2d5:	68 73 04 00 c0       	push   0xc0000473
c000f2da:	56                   	push   esi
c000f2db:	57                   	push   edi
c000f2dc:	e8 f1 1d 00 00       	call   c00110d2 <TSS::setup(unsigned long, unsigned long)>
c000f2e1:	59                   	pop    ecx
c000f2e2:	89 c6                	mov    esi,eax
c000f2e4:	5f                   	pop    edi
c000f2e5:	6a 00                	push   0x0
c000f2e7:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f2eb:	50                   	push   eax
c000f2ec:	e8 db fb ff ff       	call   c000eecc <IDTEntry::IDTEntry(bool)>
c000f2f1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f2f5:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f2fa:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f301:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f307:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f30b:	80 ce 05             	or     dh,0x5
c000f30e:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f311:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f315:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f319:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f31c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f31f:	e8 86 fc ff ff       	call   c000efaa <IDT::flush()>
c000f324:	83 c4 20             	add    esp,0x20
c000f327:	5b                   	pop    ebx
c000f328:	5e                   	pop    esi
c000f329:	5f                   	pop    edi
c000f32a:	c3                   	ret    

c000f32b <sbrk>:
c000f32b:	55                   	push   ebp
c000f32c:	57                   	push   edi
c000f32d:	56                   	push   esi
c000f32e:	53                   	push   ebx
c000f32f:	83 ec 1c             	sub    esp,0x1c
c000f332:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f336:	85 c0                	test   eax,eax
c000f338:	74 3e                	je     c000f378 <sbrk+0x4d>
c000f33a:	78 43                	js     c000f37f <sbrk+0x54>
c000f33c:	8b 15 28 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c928
c000f342:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f348:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f34e:	83 e2 01             	and    edx,0x1
c000f351:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f355:	8b 0d 4c b8 02 c0    	mov    ecx,DWORD PTR ds:0xc002b84c
c000f35b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f35f:	05 ff 0f 00 00       	add    eax,0xfff
c000f364:	89 c2                	mov    edx,eax
c000f366:	78 2f                	js     c000f397 <sbrk+0x6c>
c000f368:	c1 fa 0c             	sar    edx,0xc
c000f36b:	89 d7                	mov    edi,edx
c000f36d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f371:	be 00 00 00 00       	mov    esi,0x0
c000f376:	eb 36                	jmp    c000f3ae <sbrk+0x83>
c000f378:	a1 4c b8 02 c0       	mov    eax,ds:0xc002b84c
c000f37d:	eb 74                	jmp    c000f3f3 <sbrk+0xc8>
c000f37f:	83 ec 08             	sub    esp,0x8
c000f382:	50                   	push   eax
c000f383:	68 10 8b 02 c0       	push   0xc0028b10
c000f388:	e8 c4 33 00 00       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c000f38d:	83 c4 10             	add    esp,0x10
c000f390:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f395:	eb 5c                	jmp    c000f3f3 <sbrk+0xc8>
c000f397:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f39d:	eb c9                	jmp    c000f368 <sbrk+0x3d>
c000f39f:	81 05 4c b8 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002b84c,0x1000
c000f3a9:	46                   	inc    esi
c000f3aa:	39 f7                	cmp    edi,esi
c000f3ac:	74 34                	je     c000f3e2 <sbrk+0xb7>
c000f3ae:	e8 3e 25 00 00       	call   c00118f1 <Virt::getAKernelVAS()>
c000f3b3:	89 c3                	mov    ebx,eax
c000f3b5:	8b 2d 4c b8 02 c0    	mov    ebp,DWORD PTR ds:0xc002b84c
c000f3bb:	e8 be 06 00 00       	call   c000fa7e <Phys::allocatePage()>
c000f3c0:	68 01 04 00 00       	push   0x401
c000f3c5:	55                   	push   ebp
c000f3c6:	50                   	push   eax
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 5f 2a 00 00       	call   c0011e2c <VAS::mapPage(unsigned long, unsigned long, int)>
c000f3cd:	83 c4 10             	add    esp,0x10
c000f3d0:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f3d5:	74 c8                	je     c000f39f <sbrk+0x74>
c000f3d7:	8b 1d 4c b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b84c
c000f3dd:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f3e0:	eb bd                	jmp    c000f39f <sbrk+0x74>
c000f3e2:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f3e7:	75 12                	jne    c000f3fb <sbrk+0xd0>
c000f3e9:	0f 20 d8             	mov    eax,cr3
c000f3ec:	0f 22 d8             	mov    cr3,eax
c000f3ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f3f3:	83 c4 1c             	add    esp,0x1c
c000f3f6:	5b                   	pop    ebx
c000f3f7:	5e                   	pop    esi
c000f3f8:	5f                   	pop    edi
c000f3f9:	5d                   	pop    ebp
c000f3fa:	c3                   	ret    
c000f3fb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f3ff:	89 cb                	mov    ebx,ecx
c000f401:	c1 eb 0a             	shr    ebx,0xa
c000f404:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f40a:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f410:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f414:	c1 e0 0c             	shl    eax,0xc
c000f417:	01 c8                	add    eax,ecx
c000f419:	c1 e8 0a             	shr    eax,0xa
c000f41c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f421:	2d 00 00 40 00       	sub    eax,0x400000
c000f426:	39 c3                	cmp    ebx,eax
c000f428:	77 c5                	ja     c000f3ef <sbrk+0xc4>
c000f42a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f42d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f433:	39 d8                	cmp    eax,ebx
c000f435:	73 f3                	jae    c000f42a <sbrk+0xff>
c000f437:	eb b6                	jmp    c000f3ef <sbrk+0xc4>

c000f439 <mmap>:
c000f439:	83 ec 18             	sub    esp,0x18
c000f43c:	68 40 8b 02 c0       	push   0xc0028b40
c000f441:	e8 25 a4 00 00       	call   c001986b <Krnl::panic(char const*)>
c000f446:	b8 00 00 00 00       	mov    eax,0x0
c000f44b:	83 c4 1c             	add    esp,0x1c
c000f44e:	c3                   	ret    

c000f44f <munmap>:
c000f44f:	83 ec 18             	sub    esp,0x18
c000f452:	68 45 8b 02 c0       	push   0xc0028b45
c000f457:	e8 0f a4 00 00       	call   c001986b <Krnl::panic(char const*)>
c000f45c:	b8 00 00 00 00       	mov    eax,0x0
c000f461:	83 c4 1c             	add    esp,0x1c
c000f464:	c3                   	ret    

c000f465 <liballoc_lock()>:
c000f465:	83 ec 0c             	sub    esp,0xc
c000f468:	e8 8d d8 00 00       	call   c001ccfa <lockScheduler()>
c000f46d:	b8 00 00 00 00       	mov    eax,0x0
c000f472:	83 c4 0c             	add    esp,0xc
c000f475:	c3                   	ret    

c000f476 <liballoc_unlock()>:
c000f476:	83 ec 0c             	sub    esp,0xc
c000f479:	e8 7e d8 00 00       	call   c001ccfc <unlockScheduler()>
c000f47e:	b8 00 00 00 00       	mov    eax,0x0
c000f483:	83 c4 0c             	add    esp,0xc
c000f486:	c3                   	ret    

c000f487 <liballoc_alloc(int)>:
c000f487:	83 ec 0c             	sub    esp,0xc
c000f48a:	e8 62 24 00 00       	call   c00118f1 <Virt::getAKernelVAS()>
c000f48f:	83 ec 04             	sub    esp,0x4
c000f492:	6a 01                	push   0x1
c000f494:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f498:	50                   	push   eax
c000f499:	e8 8e 2a 00 00       	call   c0011f2c <VAS::allocatePages(int, int)>
c000f49e:	83 c4 1c             	add    esp,0x1c
c000f4a1:	c3                   	ret    

c000f4a2 <liballoc_free(void*, int)>:
c000f4a2:	83 ec 0c             	sub    esp,0xc
c000f4a5:	e8 47 24 00 00       	call   c00118f1 <Virt::getAKernelVAS()>
c000f4aa:	83 ec 08             	sub    esp,0x8
c000f4ad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f4b1:	50                   	push   eax
c000f4b2:	e8 31 27 00 00       	call   c0011be8 <VAS::freeAllocatedPages(unsigned long)>
c000f4b7:	b8 00 00 00 00       	mov    eax,0x0
c000f4bc:	83 c4 1c             	add    esp,0x1c
c000f4bf:	c3                   	ret    

c000f4c0 <realloc>:
c000f4c0:	83 ec 14             	sub    esp,0x14
c000f4c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4cb:	e8 34 1f ff ff       	call   c0001404 <dlrealloc>
c000f4d0:	83 c4 1c             	add    esp,0x1c
c000f4d3:	c3                   	ret    

c000f4d4 <malloc>:
c000f4d4:	83 ec 18             	sub    esp,0x18
c000f4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4db:	e8 e7 19 ff ff       	call   c0000ec7 <dlmalloc>
c000f4e0:	83 c4 1c             	add    esp,0x1c
c000f4e3:	c3                   	ret    

c000f4e4 <free>:
c000f4e4:	83 ec 18             	sub    esp,0x18
c000f4e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4eb:	e8 7c 16 ff ff       	call   c0000b6c <dlfree>
c000f4f0:	83 c4 1c             	add    esp,0x1c
c000f4f3:	c3                   	ret    

c000f4f4 <rfree>:
c000f4f4:	83 ec 18             	sub    esp,0x18
c000f4f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4fb:	e8 6c 16 ff ff       	call   c0000b6c <dlfree>
c000f500:	83 c4 1c             	add    esp,0x1c
c000f503:	c3                   	ret    

c000f504 <calloc>:
c000f504:	56                   	push   esi
c000f505:	53                   	push   ebx
c000f506:	83 ec 10             	sub    esp,0x10
c000f509:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f50d:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f512:	53                   	push   ebx
c000f513:	e8 bc ff ff ff       	call   c000f4d4 <malloc>
c000f518:	89 c6                	mov    esi,eax
c000f51a:	83 c4 0c             	add    esp,0xc
c000f51d:	53                   	push   ebx
c000f51e:	6a 00                	push   0x0
c000f520:	50                   	push   eax
c000f521:	e8 65 11 ff ff       	call   c000068b <memset>
c000f526:	89 f0                	mov    eax,esi
c000f528:	83 c4 14             	add    esp,0x14
c000f52b:	5b                   	pop    ebx
c000f52c:	5e                   	pop    esi
c000f52d:	c3                   	ret    

c000f52e <hwTextMode_loadInData(VgaText*)>:
c000f52e:	57                   	push   edi
c000f52f:	56                   	push   esi
c000f530:	53                   	push   ebx
c000f531:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000f535:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000f53b:	85 c0                	test   eax,eax
c000f53d:	7e 30                	jle    c000f56f <hwTextMode_loadInData(VgaText*)+0x41>
c000f53f:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000f542:	31 f6                	xor    esi,esi
c000f544:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000f547:	31 c0                	xor    eax,eax
c000f549:	c1 e1 05             	shl    ecx,0x5
c000f54c:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000f552:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000f556:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000f55a:	40                   	inc    eax
c000f55b:	83 f8 50             	cmp    eax,0x50
c000f55e:	75 f2                	jne    c000f552 <hwTextMode_loadInData(VgaText*)+0x24>
c000f560:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000f566:	46                   	inc    esi
c000f567:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f56d:	7f d5                	jg     c000f544 <hwTextMode_loadInData(VgaText*)+0x16>
c000f56f:	5b                   	pop    ebx
c000f570:	5e                   	pop    esi
c000f571:	5f                   	pop    edi
c000f572:	c3                   	ret    

c000f573 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f573:	56                   	push   esi
c000f574:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000f579:	53                   	push   ebx
c000f57a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f57e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f582:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000f588:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000f58e:	c1 e0 04             	shl    eax,0x4
c000f591:	83 e6 0f             	and    esi,0xf
c000f594:	0f b6 c0             	movzx  eax,al
c000f597:	41                   	inc    ecx
c000f598:	09 f0                	or     eax,esi
c000f59a:	83 c2 02             	add    edx,0x2
c000f59d:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000f5a1:	c1 e0 08             	shl    eax,0x8
c000f5a4:	09 f0                	or     eax,esi
c000f5a6:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f5aa:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000f5b0:	75 d0                	jne    c000f582 <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000f5b2:	5b                   	pop    ebx
c000f5b3:	5e                   	pop    esi
c000f5b4:	c3                   	ret    

c000f5b5 <hwTextMode_showCursor(VgaText*, bool)>:
c000f5b5:	56                   	push   esi
c000f5b6:	53                   	push   ebx
c000f5b7:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000f5bc:	74 38                	je     c000f5f6 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000f5be:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f5c3:	b0 0a                	mov    al,0xa
c000f5c5:	89 da                	mov    edx,ebx
c000f5c7:	ee                   	out    dx,al
c000f5c8:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f5cd:	89 ca                	mov    edx,ecx
c000f5cf:	ec                   	in     al,dx
c000f5d0:	b2 0f                	mov    dl,0xf
c000f5d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f5d6:	83 e0 c0             	and    eax,0xffffffc0
c000f5d9:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f5df:	09 d0                	or     eax,edx
c000f5e1:	89 ca                	mov    edx,ecx
c000f5e3:	ee                   	out    dx,al
c000f5e4:	b0 0b                	mov    al,0xb
c000f5e6:	89 da                	mov    edx,ebx
c000f5e8:	ee                   	out    dx,al
c000f5e9:	89 ca                	mov    edx,ecx
c000f5eb:	ec                   	in     al,dx
c000f5ec:	83 e0 e0             	and    eax,0xffffffe0
c000f5ef:	83 c8 0f             	or     eax,0xf
c000f5f2:	ee                   	out    dx,al
c000f5f3:	5b                   	pop    ebx
c000f5f4:	5e                   	pop    esi
c000f5f5:	c3                   	ret    
c000f5f6:	b0 0a                	mov    al,0xa
c000f5f8:	ba d4 03 00 00       	mov    edx,0x3d4
c000f5fd:	ee                   	out    dx,al
c000f5fe:	b0 20                	mov    al,0x20
c000f600:	ba d5 03 00 00       	mov    edx,0x3d5
c000f605:	ee                   	out    dx,al
c000f606:	5b                   	pop    ebx
c000f607:	5e                   	pop    esi
c000f608:	c3                   	ret    

c000f609 <hwTextMode_update(VgaText*)>:
c000f609:	c3                   	ret    

c000f60a <hwTextMode_updateCursor(VgaText*)>:
c000f60a:	56                   	push   esi
c000f60b:	b9 19 00 00 00       	mov    ecx,0x19
c000f610:	53                   	push   ebx
c000f611:	be d4 03 00 00       	mov    esi,0x3d4
c000f616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f61a:	89 f2                	mov    edx,esi
c000f61c:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f622:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f628:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f62b:	c1 e1 04             	shl    ecx,0x4
c000f62e:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f634:	b0 0f                	mov    al,0xf
c000f636:	ee                   	out    dx,al
c000f637:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f63c:	88 c8                	mov    al,cl
c000f63e:	89 da                	mov    edx,ebx
c000f640:	ee                   	out    dx,al
c000f641:	b0 0e                	mov    al,0xe
c000f643:	89 f2                	mov    edx,esi
c000f645:	ee                   	out    dx,al
c000f646:	89 c8                	mov    eax,ecx
c000f648:	89 da                	mov    edx,ebx
c000f64a:	66 c1 e8 08          	shr    ax,0x8
c000f64e:	ee                   	out    dx,al
c000f64f:	5b                   	pop    ebx
c000f650:	5e                   	pop    esi
c000f651:	c3                   	ret    

c000f652 <hwTextMode_disableBlink(VgaText*, bool)>:
c000f652:	ba da 03 00 00       	mov    edx,0x3da
c000f657:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000f65c:	75 18                	jne    c000f676 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000f65e:	ec                   	in     al,dx
c000f65f:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f664:	b0 30                	mov    al,0x30
c000f666:	89 ca                	mov    edx,ecx
c000f668:	ee                   	out    dx,al
c000f669:	ba c1 03 00 00       	mov    edx,0x3c1
c000f66e:	ec                   	in     al,dx
c000f66f:	83 c8 08             	or     eax,0x8
c000f672:	89 ca                	mov    edx,ecx
c000f674:	ee                   	out    dx,al
c000f675:	c3                   	ret    
c000f676:	ec                   	in     al,dx
c000f677:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f67c:	b0 30                	mov    al,0x30
c000f67e:	89 ca                	mov    edx,ecx
c000f680:	ee                   	out    dx,al
c000f681:	ba c1 03 00 00       	mov    edx,0x3c1
c000f686:	ec                   	in     al,dx
c000f687:	83 e0 f7             	and    eax,0xfffffff7
c000f68a:	89 ca                	mov    edx,ecx
c000f68c:	ee                   	out    dx,al
c000f68d:	c3                   	ret    

c000f68e <hwTextMode_scrollScreen(VgaText*)>:
c000f68e:	55                   	push   ebp
c000f68f:	bd 02 00 00 00       	mov    ebp,0x2
c000f694:	57                   	push   edi
c000f695:	56                   	push   esi
c000f696:	53                   	push   ebx
c000f697:	83 ec 1c             	sub    esp,0x1c
c000f69a:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000f6a2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f6a6:	31 c0                	xor    eax,eax
c000f6a8:	eb 0b                	jmp    c000f6b5 <hwTextMode_scrollScreen(VgaText*)+0x27>
c000f6aa:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f6b0:	74 57                	je     c000f709 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000f6b2:	43                   	inc    ebx
c000f6b3:	89 f0                	mov    eax,esi
c000f6b5:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000f6bb:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000f6c1:	88 13                	mov    BYTE PTR [ebx],dl
c000f6c3:	8d 70 01             	lea    esi,[eax+0x1]
c000f6c6:	83 fd 18             	cmp    ebp,0x18
c000f6c9:	75 df                	jne    c000f6aa <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000f6cb:	a8 01                	test   al,0x1
c000f6cd:	75 13                	jne    c000f6e2 <hwTextMode_scrollScreen(VgaText*)+0x54>
c000f6cf:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000f6d2:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f6d8:	75 d8                	jne    c000f6b2 <hwTextMode_scrollScreen(VgaText*)+0x24>
c000f6da:	83 c4 1c             	add    esp,0x1c
c000f6dd:	5b                   	pop    ebx
c000f6de:	5e                   	pop    esi
c000f6df:	5f                   	pop    edi
c000f6e0:	5d                   	pop    ebp
c000f6e1:	c3                   	ret    
c000f6e2:	83 ec 08             	sub    esp,0x8
c000f6e5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f6e9:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000f6f0:	50                   	push   eax
c000f6f1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f6f5:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000f6fc:	50                   	push   eax
c000f6fd:	e8 fc 0b 00 00       	call   c00102fe <VgaText::combineColours(unsigned char, unsigned char)>
c000f702:	83 c4 10             	add    esp,0x10
c000f705:	88 07                	mov    BYTE PTR [edi],al
c000f707:	eb c9                	jmp    c000f6d2 <hwTextMode_scrollScreen(VgaText*)+0x44>
c000f709:	45                   	inc    ebp
c000f70a:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000f712:	eb 8e                	jmp    c000f6a2 <hwTextMode_scrollScreen(VgaText*)+0x14>

c000f714 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000f714:	56                   	push   esi
c000f715:	53                   	push   ebx
c000f716:	83 ec 0c             	sub    esp,0xc
c000f719:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000f71d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000f721:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f726:	50                   	push   eax
c000f727:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f72c:	50                   	push   eax
c000f72d:	e8 cc 0b 00 00       	call   c00102fe <VgaText::combineColours(unsigned char, unsigned char)>
c000f732:	5a                   	pop    edx
c000f733:	0f b6 c0             	movzx  eax,al
c000f736:	59                   	pop    ecx
c000f737:	50                   	push   eax
c000f738:	89 f0                	mov    eax,esi
c000f73a:	0f be f0             	movsx  esi,al
c000f73d:	56                   	push   esi
c000f73e:	e8 61 0c 00 00       	call   c00103a4 <VgaText::combineCharAndColour(char, unsigned char)>
c000f743:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000f747:	ba 19 00 00 00       	mov    edx,0x19
c000f74c:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000f752:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000f755:	8d 14 92             	lea    edx,[edx+edx*4]
c000f758:	c1 e1 04             	shl    ecx,0x4
c000f75b:	c1 e2 04             	shl    edx,0x4
c000f75e:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000f762:	01 ca                	add    edx,ecx
c000f764:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f76c:	83 c4 14             	add    esp,0x14
c000f76f:	5b                   	pop    ebx
c000f770:	5e                   	pop    esi
c000f771:	c3                   	ret    

c000f772 <setupTextMode()>:
c000f772:	c7 05 d8 c9 02 c0 52 f6 00 c0 	mov    DWORD PTR ds:0xc002c9d8,0xc000f652
c000f77c:	c7 05 c4 c9 02 c0 2e f5 00 c0 	mov    DWORD PTR ds:0xc002c9c4,0xc000f52e
c000f786:	c7 05 c0 c9 02 c0 73 f5 00 c0 	mov    DWORD PTR ds:0xc002c9c0,0xc000f573
c000f790:	c7 05 cc c9 02 c0 8e f6 00 c0 	mov    DWORD PTR ds:0xc002c9cc,0xc000f68e
c000f79a:	c7 05 d4 c9 02 c0 b5 f5 00 c0 	mov    DWORD PTR ds:0xc002c9d4,0xc000f5b5
c000f7a4:	c7 05 c8 c9 02 c0 09 f6 00 c0 	mov    DWORD PTR ds:0xc002c9c8,0xc000f609
c000f7ae:	c7 05 d0 c9 02 c0 0a f6 00 c0 	mov    DWORD PTR ds:0xc002c9d0,0xc000f60a
c000f7b8:	c7 05 dc c9 02 c0 14 f7 00 c0 	mov    DWORD PTR ds:0xc002c9dc,0xc000f714
c000f7c2:	c3                   	ret    

c000f7c3 <kernel_main>:
c000f7c3:	57                   	push   edi
c000f7c4:	bf f9 03 00 00       	mov    edi,0x3f9
c000f7c9:	56                   	push   esi
c000f7ca:	31 f6                	xor    esi,esi
c000f7cc:	53                   	push   ebx
c000f7cd:	83 ec 10             	sub    esp,0x10
c000f7d0:	e8 47 09 00 00       	call   c001011c <installVgaTextImplementation()>
c000f7d5:	e8 98 ff ff ff       	call   c000f772 <setupTextMode()>
c000f7da:	89 f0                	mov    eax,esi
c000f7dc:	89 fa                	mov    edx,edi
c000f7de:	ee                   	out    dx,al
c000f7df:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f7e4:	b0 80                	mov    al,0x80
c000f7e6:	89 da                	mov    edx,ebx
c000f7e8:	ee                   	out    dx,al
c000f7e9:	b1 03                	mov    cl,0x3
c000f7eb:	ba f8 03 00 00       	mov    edx,0x3f8
c000f7f0:	88 c8                	mov    al,cl
c000f7f2:	ee                   	out    dx,al
c000f7f3:	89 f0                	mov    eax,esi
c000f7f5:	89 fa                	mov    edx,edi
c000f7f7:	ee                   	out    dx,al
c000f7f8:	88 c8                	mov    al,cl
c000f7fa:	89 da                	mov    edx,ebx
c000f7fc:	ee                   	out    dx,al
c000f7fd:	b0 c7                	mov    al,0xc7
c000f7ff:	ba fa 03 00 00       	mov    edx,0x3fa
c000f804:	ee                   	out    dx,al
c000f805:	b0 0b                	mov    al,0xb
c000f807:	ba fc 03 00 00       	mov    edx,0x3fc
c000f80c:	ee                   	out    dx,al
c000f80d:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f812:	83 ec 0c             	sub    esp,0xc
c000f815:	05 ff 0f 00 00       	add    eax,0xfff
c000f81a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f81f:	50                   	push   eax
c000f820:	e8 b3 03 00 00       	call   c000fbd8 <Phys::physicalMemorySetup(unsigned int)>
c000f825:	e8 48 20 00 00       	call   c0011872 <Virt::virtualMemorySetup()>
c000f82a:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000f830:	83 c4 10             	add    esp,0x10
c000f833:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000f839:	75 0e                	jne    c000f849 <kernel_main+0x86>
c000f83b:	89 d8                	mov    eax,ebx
c000f83d:	25 48 03 00 00       	and    eax,0x348
c000f842:	3d 00 03 00 00       	cmp    eax,0x300
c000f847:	74 10                	je     c000f859 <kernel_main+0x96>
c000f849:	83 ec 0c             	sub    esp,0xc
c000f84c:	68 3c a2 02 c0       	push   0xc002a23c
c000f851:	e8 15 a0 00 00       	call   c001986b <Krnl::panic(char const*)>
c000f856:	83 c4 10             	add    esp,0x10
c000f859:	83 ec 0c             	sub    esp,0xc
c000f85c:	89 1d 40 c9 02 c0    	mov    DWORD PTR ds:0xc002c940,ebx
c000f862:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f866:	53                   	push   ebx
c000f867:	e8 ba 21 00 00       	call   c0011a26 <VAS::VAS()>
c000f86c:	89 1d 84 ca 02 c0    	mov    DWORD PTR ds:0xc002ca84,ebx
c000f872:	e8 a9 07 ff ff       	call   c0000020 <callGlobalConstructors>
c000f877:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f87e:	e8 51 fc ff ff       	call   c000f4d4 <malloc>
c000f883:	89 04 24             	mov    DWORD PTR [esp],eax
c000f886:	89 c6                	mov    esi,eax
c000f888:	e8 5d ea ff ff       	call   c000e2ea <Computer::Computer()>
c000f88d:	6a 00                	push   0x0
c000f88f:	89 35 28 c9 02 c0    	mov    DWORD PTR ds:0xc002c928,esi
c000f895:	6a 00                	push   0x0
c000f897:	6a 00                	push   0x0
c000f899:	56                   	push   esi
c000f89a:	e8 7f f2 ff ff       	call   c000eb1e <Computer::open(int, int, void*)>
c000f89f:	83 c4 14             	add    esp,0x14
c000f8a2:	53                   	push   ebx
c000f8a3:	e8 18 24 00 00       	call   c0011cc0 <VAS::~VAS()>
c000f8a8:	c7 04 24 4c 8b 02 c0 	mov    DWORD PTR [esp],0xc0028b4c
c000f8af:	e8 b7 9f 00 00       	call   c001986b <Krnl::panic(char const*)>
c000f8b4:	83 c4 20             	add    esp,0x20
c000f8b7:	5b                   	pop    ebx
c000f8b8:	5e                   	pop    esi
c000f8b9:	5f                   	pop    edi
c000f8ba:	c3                   	ret    

c000f8bb <Phys::allocateDMA(unsigned long)>:
c000f8bb:	55                   	push   ebp
c000f8bc:	31 d2                	xor    edx,edx
c000f8be:	57                   	push   edi
c000f8bf:	31 ed                	xor    ebp,ebp
c000f8c1:	56                   	push   esi
c000f8c2:	31 c9                	xor    ecx,ecx
c000f8c4:	53                   	push   ebx
c000f8c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f8c9:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f8cf:	31 c0                	xor    eax,eax
c000f8d1:	c1 ee 0c             	shr    esi,0xc
c000f8d4:	eb 17                	jmp    c000f8ed <Phys::allocateDMA(unsigned long)+0x32>
c000f8d6:	85 c9                	test   ecx,ecx
c000f8d8:	75 04                	jne    c000f8de <Phys::allocateDMA(unsigned long)+0x23>
c000f8da:	89 d5                	mov    ebp,edx
c000f8dc:	89 d0                	mov    eax,edx
c000f8de:	8d 59 01             	lea    ebx,[ecx+0x1]
c000f8e1:	39 de                	cmp    esi,ebx
c000f8e3:	74 20                	je     c000f905 <Phys::allocateDMA(unsigned long)+0x4a>
c000f8e5:	42                   	inc    edx
c000f8e6:	89 d9                	mov    ecx,ebx
c000f8e8:	83 fa 2f             	cmp    edx,0x2f
c000f8eb:	7f 11                	jg     c000f8fe <Phys::allocateDMA(unsigned long)+0x43>
c000f8ed:	80 ba 80 c9 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd3680],0x0
c000f8f4:	74 e0                	je     c000f8d6 <Phys::allocateDMA(unsigned long)+0x1b>
c000f8f6:	31 c9                	xor    ecx,ecx
c000f8f8:	42                   	inc    edx
c000f8f9:	83 fa 2f             	cmp    edx,0x2f
c000f8fc:	7e ef                	jle    c000f8ed <Phys::allocateDMA(unsigned long)+0x32>
c000f8fe:	5b                   	pop    ebx
c000f8ff:	31 c0                	xor    eax,eax
c000f901:	5e                   	pop    esi
c000f902:	5f                   	pop    edi
c000f903:	5d                   	pop    ebp
c000f904:	c3                   	ret    
c000f905:	8d 14 30             	lea    edx,[eax+esi*1]
c000f908:	89 d7                	mov    edi,edx
c000f90a:	4f                   	dec    edi
c000f90b:	79 03                	jns    c000f910 <Phys::allocateDMA(unsigned long)+0x55>
c000f90d:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f910:	c1 ff 04             	sar    edi,0x4
c000f913:	89 c2                	mov    edx,eax
c000f915:	c1 fa 04             	sar    edx,0x4
c000f918:	39 fa                	cmp    edx,edi
c000f91a:	75 2f                	jne    c000f94b <Phys::allocateDMA(unsigned long)+0x90>
c000f91c:	85 db                	test   ebx,ebx
c000f91e:	74 1a                	je     c000f93a <Phys::allocateDMA(unsigned long)+0x7f>
c000f920:	be 80 c9 02 c0       	mov    esi,0xc002c980
c000f925:	8d 90 80 c9 02 c0    	lea    edx,[eax-0x3ffd3680]
c000f92b:	f7 d6                	not    esi
c000f92d:	29 c6                	sub    esi,eax
c000f92f:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f932:	42                   	inc    edx
c000f933:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000f936:	39 d9                	cmp    ecx,ebx
c000f938:	7f f5                	jg     c000f92f <Phys::allocateDMA(unsigned long)+0x74>
c000f93a:	85 ff                	test   edi,edi
c000f93c:	74 13                	je     c000f951 <Phys::allocateDMA(unsigned long)+0x96>
c000f93e:	5b                   	pop    ebx
c000f93f:	05 50 20 0c 00       	add    eax,0xc2050
c000f944:	5e                   	pop    esi
c000f945:	c1 e0 0c             	shl    eax,0xc
c000f948:	5f                   	pop    edi
c000f949:	5d                   	pop    ebp
c000f94a:	c3                   	ret    
c000f94b:	89 ea                	mov    edx,ebp
c000f94d:	31 c9                	xor    ecx,ecx
c000f94f:	eb a7                	jmp    c000f8f8 <Phys::allocateDMA(unsigned long)+0x3d>
c000f951:	5b                   	pop    ebx
c000f952:	c1 e0 0c             	shl    eax,0xc
c000f955:	5e                   	pop    esi
c000f956:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000f95b:	5f                   	pop    edi
c000f95c:	5d                   	pop    ebp
c000f95d:	c3                   	ret    

c000f95e <Phys::freeDMA(unsigned long, unsigned long)>:
c000f95e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f962:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f966:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000f96c:	c1 e9 0c             	shr    ecx,0xc
c000f96f:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000f974:	76 25                	jbe    c000f99b <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000f976:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000f97b:	c1 e8 0c             	shr    eax,0xc
c000f97e:	8d 50 10             	lea    edx,[eax+0x10]
c000f981:	85 c9                	test   ecx,ecx
c000f983:	74 15                	je     c000f99a <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000f985:	8d 82 80 c9 02 c0    	lea    eax,[edx-0x3ffd3680]
c000f98b:	8d 94 11 80 c9 02 c0 	lea    edx,[ecx+edx*1-0x3ffd3680]
c000f992:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f995:	40                   	inc    eax
c000f996:	39 d0                	cmp    eax,edx
c000f998:	75 f8                	jne    c000f992 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000f99a:	c3                   	ret    
c000f99b:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f9a1:	c1 ea 0c             	shr    edx,0xc
c000f9a4:	eb db                	jmp    c000f981 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000f9a6 <Phys::setPageState(unsigned long, bool)>:
c000f9a6:	56                   	push   esi
c000f9a7:	ba 01 00 00 00       	mov    edx,0x1
c000f9ac:	53                   	push   ebx
c000f9ad:	8b 35 50 b8 02 c0    	mov    esi,DWORD PTR ds:0xc002b850
c000f9b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f9b7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f9bb:	89 c8                	mov    eax,ecx
c000f9bd:	83 e1 07             	and    ecx,0x7
c000f9c0:	c1 e8 03             	shr    eax,0x3
c000f9c3:	d3 e3                	shl    ebx,cl
c000f9c5:	01 c6                	add    esi,eax
c000f9c7:	d3 e2                	shl    edx,cl
c000f9c9:	f7 d2                	not    edx
c000f9cb:	20 16                	and    BYTE PTR [esi],dl
c000f9cd:	03 05 50 b8 02 c0    	add    eax,DWORD PTR ds:0xc002b850
c000f9d3:	08 18                	or     BYTE PTR [eax],bl
c000f9d5:	5b                   	pop    ebx
c000f9d6:	5e                   	pop    esi
c000f9d7:	c3                   	ret    

c000f9d8 <Phys::getPageState(unsigned long)>:
c000f9d8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f9dc:	8b 15 50 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b850
c000f9e2:	89 c8                	mov    eax,ecx
c000f9e4:	83 e1 07             	and    ecx,0x7
c000f9e7:	c1 e8 03             	shr    eax,0x3
c000f9ea:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f9ee:	d3 f8                	sar    eax,cl
c000f9f0:	83 e0 01             	and    eax,0x1
c000f9f3:	c3                   	ret    

c000f9f4 <Phys::freePage(unsigned long)>:
c000f9f4:	53                   	push   ebx
c000f9f5:	83 ec 08             	sub    esp,0x8
c000f9f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f9fc:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fa02:	76 57                	jbe    c000fa5b <Phys::freePage(unsigned long)+0x67>
c000fa04:	c1 eb 0c             	shr    ebx,0xc
c000fa07:	53                   	push   ebx
c000fa08:	e8 cb ff ff ff       	call   c000f9d8 <Phys::getPageState(unsigned long)>
c000fa0d:	5a                   	pop    edx
c000fa0e:	84 c0                	test   al,al
c000fa10:	74 5b                	je     c000fa6d <Phys::freePage(unsigned long)+0x79>
c000fa12:	a1 6c c9 02 c0       	mov    eax,ds:0xc002c96c
c000fa17:	48                   	dec    eax
c000fa18:	a3 6c c9 02 c0       	mov    ds:0xc002c96c,eax
c000fa1d:	8d 04 80             	lea    eax,[eax+eax*4]
c000fa20:	8d 04 80             	lea    eax,[eax+eax*4]
c000fa23:	c1 e0 02             	shl    eax,0x2
c000fa26:	99                   	cdq    
c000fa27:	f7 3d 70 c9 02 c0    	idiv   DWORD PTR ds:0xc002c970
c000fa2d:	39 05 68 c9 02 c0    	cmp    DWORD PTR ds:0xc002c968,eax
c000fa33:	75 13                	jne    c000fa48 <Phys::freePage(unsigned long)+0x54>
c000fa35:	83 ec 08             	sub    esp,0x8
c000fa38:	6a 00                	push   0x0
c000fa3a:	53                   	push   ebx
c000fa3b:	e8 66 ff ff ff       	call   c000f9a6 <Phys::setPageState(unsigned long, bool)>
c000fa40:	83 c4 10             	add    esp,0x10
c000fa43:	83 c4 08             	add    esp,0x8
c000fa46:	5b                   	pop    ebx
c000fa47:	c3                   	ret    
c000fa48:	83 ec 0c             	sub    esp,0xc
c000fa4b:	a3 68 c9 02 c0       	mov    ds:0xc002c968,eax
c000fa50:	50                   	push   eax
c000fa51:	e8 96 0a 00 00       	call   c00104ec <VgaText::updateRAMUsageDisplay(int)>
c000fa56:	83 c4 10             	add    esp,0x10
c000fa59:	eb da                	jmp    c000fa35 <Phys::freePage(unsigned long)+0x41>
c000fa5b:	68 00 10 00 00       	push   0x1000
c000fa60:	53                   	push   ebx
c000fa61:	e8 f8 fe ff ff       	call   c000f95e <Phys::freeDMA(unsigned long, unsigned long)>
c000fa66:	59                   	pop    ecx
c000fa67:	5b                   	pop    ebx
c000fa68:	83 c4 08             	add    esp,0x8
c000fa6b:	5b                   	pop    ebx
c000fa6c:	c3                   	ret    
c000fa6d:	c7 44 24 10 67 8b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028b67
c000fa75:	83 c4 08             	add    esp,0x8
c000fa78:	5b                   	pop    ebx
c000fa79:	e9 ed 9d 00 00       	jmp    c001986b <Krnl::panic(char const*)>

c000fa7e <Phys::allocatePage()>:
c000fa7e:	56                   	push   esi
c000fa7f:	53                   	push   ebx
c000fa80:	51                   	push   ecx
c000fa81:	8b 35 60 c9 02 c0    	mov    esi,DWORD PTR ds:0xc002c960
c000fa87:	89 f3                	mov    ebx,esi
c000fa89:	eb 0a                	jmp    c000fa95 <Phys::allocatePage()+0x17>
c000fa8b:	89 1d 60 c9 02 c0    	mov    DWORD PTR ds:0xc002c960,ebx
c000fa91:	39 de                	cmp    esi,ebx
c000fa93:	74 24                	je     c000fab9 <Phys::allocatePage()+0x3b>
c000fa95:	53                   	push   ebx
c000fa96:	e8 3d ff ff ff       	call   c000f9d8 <Phys::getPageState(unsigned long)>
c000fa9b:	5a                   	pop    edx
c000fa9c:	84 c0                	test   al,al
c000fa9e:	74 5a                	je     c000fafa <Phys::allocatePage()+0x7c>
c000faa0:	43                   	inc    ebx
c000faa1:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000faa7:	75 e2                	jne    c000fa8b <Phys::allocatePage()+0xd>
c000faa9:	31 db                	xor    ebx,ebx
c000faab:	c7 05 60 c9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c960,0x0
c000fab5:	39 de                	cmp    esi,ebx
c000fab7:	75 dc                	jne    c000fa95 <Phys::allocatePage()+0x17>
c000fab9:	83 ec 0c             	sub    esp,0xc
c000fabc:	68 7d 8b 02 c0       	push   0xc0028b7d
c000fac1:	e8 8b 2c 00 00       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c000fac6:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000facd:	e8 e9 fd ff ff       	call   c000f8bb <Phys::allocateDMA(unsigned long)>
c000fad2:	83 c4 10             	add    esp,0x10
c000fad5:	85 c0                	test   eax,eax
c000fad7:	75 56                	jne    c000fb2f <Phys::allocatePage()+0xb1>
c000fad9:	83 ec 0c             	sub    esp,0xc
c000fadc:	68 8e 8b 02 c0       	push   0xc0028b8e
c000fae1:	e8 85 9d 00 00       	call   c001986b <Krnl::panic(char const*)>
c000fae6:	83 c4 10             	add    esp,0x10
c000fae9:	8b 1d 60 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c960
c000faef:	53                   	push   ebx
c000faf0:	e8 e3 fe ff ff       	call   c000f9d8 <Phys::getPageState(unsigned long)>
c000faf5:	5a                   	pop    edx
c000faf6:	84 c0                	test   al,al
c000faf8:	75 a6                	jne    c000faa0 <Phys::allocatePage()+0x22>
c000fafa:	6a 01                	push   0x1
c000fafc:	53                   	push   ebx
c000fafd:	e8 a4 fe ff ff       	call   c000f9a6 <Phys::setPageState(unsigned long, bool)>
c000fb02:	a1 6c c9 02 c0       	mov    eax,ds:0xc002c96c
c000fb07:	59                   	pop    ecx
c000fb08:	40                   	inc    eax
c000fb09:	5b                   	pop    ebx
c000fb0a:	a3 6c c9 02 c0       	mov    ds:0xc002c96c,eax
c000fb0f:	8d 04 80             	lea    eax,[eax+eax*4]
c000fb12:	8d 04 80             	lea    eax,[eax+eax*4]
c000fb15:	c1 e0 02             	shl    eax,0x2
c000fb18:	99                   	cdq    
c000fb19:	f7 3d 70 c9 02 c0    	idiv   DWORD PTR ds:0xc002c970
c000fb1f:	39 05 68 c9 02 c0    	cmp    DWORD PTR ds:0xc002c968,eax
c000fb25:	75 0c                	jne    c000fb33 <Phys::allocatePage()+0xb5>
c000fb27:	a1 60 c9 02 c0       	mov    eax,ds:0xc002c960
c000fb2c:	c1 e0 0c             	shl    eax,0xc
c000fb2f:	5a                   	pop    edx
c000fb30:	5b                   	pop    ebx
c000fb31:	5e                   	pop    esi
c000fb32:	c3                   	ret    
c000fb33:	83 ec 0c             	sub    esp,0xc
c000fb36:	a3 68 c9 02 c0       	mov    ds:0xc002c968,eax
c000fb3b:	50                   	push   eax
c000fb3c:	e8 ab 09 00 00       	call   c00104ec <VgaText::updateRAMUsageDisplay(int)>
c000fb41:	83 c4 10             	add    esp,0x10
c000fb44:	eb e1                	jmp    c000fb27 <Phys::allocatePage()+0xa9>

c000fb46 <Phys::allocateContiguousPages(int)>:
c000fb46:	57                   	push   edi
c000fb47:	56                   	push   esi
c000fb48:	53                   	push   ebx
c000fb49:	31 db                	xor    ebx,ebx
c000fb4b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000fb4f:	e8 a6 d1 00 00       	call   c001ccfa <lockScheduler()>
c000fb54:	85 db                	test   ebx,ebx
c000fb56:	75 11                	jne    c000fb69 <Phys::allocateContiguousPages(int)+0x23>
c000fb58:	e8 21 ff ff ff       	call   c000fa7e <Phys::allocatePage()>
c000fb5d:	83 ff 01             	cmp    edi,0x1
c000fb60:	89 c6                	mov    esi,eax
c000fb62:	74 21                	je     c000fb85 <Phys::allocateContiguousPages(int)+0x3f>
c000fb64:	bb 01 00 00 00       	mov    ebx,0x1
c000fb69:	e8 10 ff ff ff       	call   c000fa7e <Phys::allocatePage()>
c000fb6e:	89 da                	mov    edx,ebx
c000fb70:	c1 e2 0c             	shl    edx,0xc
c000fb73:	01 f2                	add    edx,esi
c000fb75:	39 c2                	cmp    edx,eax
c000fb77:	74 17                	je     c000fb90 <Phys::allocateContiguousPages(int)+0x4a>
c000fb79:	bb 01 00 00 00       	mov    ebx,0x1
c000fb7e:	89 c6                	mov    esi,eax
c000fb80:	83 ff 01             	cmp    edi,0x1
c000fb83:	75 e4                	jne    c000fb69 <Phys::allocateContiguousPages(int)+0x23>
c000fb85:	e8 72 d1 00 00       	call   c001ccfc <unlockScheduler()>
c000fb8a:	89 f0                	mov    eax,esi
c000fb8c:	5b                   	pop    ebx
c000fb8d:	5e                   	pop    esi
c000fb8e:	5f                   	pop    edi
c000fb8f:	c3                   	ret    
c000fb90:	43                   	inc    ebx
c000fb91:	39 fb                	cmp    ebx,edi
c000fb93:	75 bf                	jne    c000fb54 <Phys::allocateContiguousPages(int)+0xe>
c000fb95:	e8 62 d1 00 00       	call   c001ccfc <unlockScheduler()>
c000fb9a:	89 f0                	mov    eax,esi
c000fb9c:	5b                   	pop    ebx
c000fb9d:	5e                   	pop    esi
c000fb9e:	5f                   	pop    edi
c000fb9f:	c3                   	ret    

c000fba0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fba0:	56                   	push   esi
c000fba1:	53                   	push   ebx
c000fba2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fba6:	39 1d 64 c9 02 c0    	cmp    DWORD PTR ds:0xc002c964,ebx
c000fbac:	73 06                	jae    c000fbb4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fbae:	89 1d 64 c9 02 c0    	mov    DWORD PTR ds:0xc002c964,ebx
c000fbb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fbb8:	c1 eb 0c             	shr    ebx,0xc
c000fbbb:	c1 e8 0c             	shr    eax,0xc
c000fbbe:	39 d8                	cmp    eax,ebx
c000fbc0:	73 13                	jae    c000fbd5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fbc2:	6a 00                	push   0x0
c000fbc4:	8d 70 01             	lea    esi,[eax+0x1]
c000fbc7:	50                   	push   eax
c000fbc8:	e8 d9 fd ff ff       	call   c000f9a6 <Phys::setPageState(unsigned long, bool)>
c000fbcd:	5a                   	pop    edx
c000fbce:	89 f0                	mov    eax,esi
c000fbd0:	59                   	pop    ecx
c000fbd1:	39 f3                	cmp    ebx,esi
c000fbd3:	75 ed                	jne    c000fbc2 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fbd5:	5b                   	pop    ebx
c000fbd6:	5e                   	pop    esi
c000fbd7:	c3                   	ret    

c000fbd8 <Phys::physicalMemorySetup(unsigned int)>:
c000fbd8:	55                   	push   ebp
c000fbd9:	57                   	push   edi
c000fbda:	56                   	push   esi
c000fbdb:	53                   	push   ebx
c000fbdc:	31 db                	xor    ebx,ebx
c000fbde:	83 ec 40             	sub    esp,0x40
c000fbe1:	6a 30                	push   0x30
c000fbe3:	6a 00                	push   0x0
c000fbe5:	68 80 c9 02 c0       	push   0xc002c980
c000fbea:	e8 9c 0a ff ff       	call   c000068b <memset>
c000fbef:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fbf3:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fbf8:	05 00 10 00 00       	add    eax,0x1000
c000fbfd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fc01:	83 c4 10             	add    esp,0x10
c000fc04:	83 ec 08             	sub    esp,0x8
c000fc07:	6a 01                	push   0x1
c000fc09:	53                   	push   ebx
c000fc0a:	43                   	inc    ebx
c000fc0b:	e8 96 fd ff ff       	call   c000f9a6 <Phys::setPageState(unsigned long, bool)>
c000fc10:	83 c4 10             	add    esp,0x10
c000fc13:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fc19:	75 e9                	jne    c000fc04 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000fc1b:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fc22:	66 85 c0             	test   ax,ax
c000fc25:	0f 84 8e 01 00 00    	je     c000fdb9 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000fc2b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fc2f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fc37:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc3b:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fc40:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fc44:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fc4c:	eb 15                	jmp    c000fc63 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000fc4e:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fc52:	83 c3 18             	add    ebx,0x18
c000fc55:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc59:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fc5d:	0f 84 66 01 00 00    	je     c000fdc9 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fc63:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fc66:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fc69:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fc6c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fc70:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fc74:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fc76:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fc79:	01 f0                	add    eax,esi
c000fc7b:	55                   	push   ebp
c000fc7c:	11 fa                	adc    edx,edi
c000fc7e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fc82:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fc86:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fc8a:	56                   	push   esi
c000fc8b:	68 c8 8b 02 c0       	push   0xc0028bc8
c000fc90:	e8 bc 2a 00 00       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c000fc95:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fc99:	83 c4 10             	add    esp,0x10
c000fc9c:	09 f8                	or     eax,edi
c000fc9e:	0f 85 25 01 00 00    	jne    c000fdc9 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fca4:	4d                   	dec    ebp
c000fca5:	75 a7                	jne    c000fc4e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fca7:	ba 00 00 08 00       	mov    edx,0x80000
c000fcac:	89 c1                	mov    ecx,eax
c000fcae:	39 f2                	cmp    edx,esi
c000fcb0:	19 f9                	sbb    ecx,edi
c000fcb2:	0f 82 a7 00 00 00    	jb     c000fd5f <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fcb8:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fcbc:	89 c1                	mov    ecx,eax
c000fcbe:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fcc2:	0f 83 97 00 00 00    	jae    c000fd5f <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fcc8:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fccd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fcd1:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fcd5:	39 fa                	cmp    edx,edi
c000fcd7:	19 e8                	sbb    eax,ebp
c000fcd9:	0f 82 14 01 00 00    	jb     c000fdf3 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000fcdf:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fce3:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fce7:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fced:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fcf2:	83 d5 ff             	adc    ebp,0xffffffff
c000fcf5:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fcf9:	31 c0                	xor    eax,eax
c000fcfb:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fcff:	39 fa                	cmp    edx,edi
c000fd01:	89 c1                	mov    ecx,eax
c000fd03:	19 e9                	sbb    ecx,ebp
c000fd05:	0f 83 43 ff ff ff    	jae    c000fc4e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fd0b:	be 00 00 08 00       	mov    esi,0x80000
c000fd10:	50                   	push   eax
c000fd11:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fd15:	57                   	push   edi
c000fd16:	56                   	push   esi
c000fd17:	68 ec 8b 02 c0       	push   0xc0028bec
c000fd1c:	e8 30 2a 00 00       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c000fd21:	5a                   	pop    edx
c000fd22:	59                   	pop    ecx
c000fd23:	57                   	push   edi
c000fd24:	56                   	push   esi
c000fd25:	e8 76 fe ff ff       	call   c000fba0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fd2a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fd2e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fd32:	83 c4 0c             	add    esp,0xc
c000fd35:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fd39:	03 05 70 c9 02 c0    	add    eax,DWORD PTR ds:0xc002c970
c000fd3f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fd46:	a3 70 c9 02 c0       	mov    ds:0xc002c970,eax
c000fd4b:	52                   	push   edx
c000fd4c:	50                   	push   eax
c000fd4d:	68 aa 8b 02 c0       	push   0xc0028baa
c000fd52:	e8 fa 29 00 00       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c000fd57:	83 c4 10             	add    esp,0x10
c000fd5a:	e9 ef fe ff ff       	jmp    c000fc4e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fd5f:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fd63:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fd67:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fd6b:	39 ea                	cmp    edx,ebp
c000fd6d:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fd71:	0f 82 d7 fe ff ff    	jb     c000fc4e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fd77:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fd7c:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000fd80:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000fd84:	0f 83 c4 fe ff ff    	jae    c000fc4e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fd8a:	39 ee                	cmp    esi,ebp
c000fd8c:	89 f8                	mov    eax,edi
c000fd8e:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000fd92:	0f 83 78 ff ff ff    	jae    c000fd10 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fd98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fda0:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fda4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000fda8:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fdac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fdb0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fdb4:	e9 57 ff ff ff       	jmp    c000fd10 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fdb9:	83 ec 0c             	sub    esp,0xc
c000fdbc:	68 9c 8b 02 c0       	push   0xc0028b9c
c000fdc1:	e8 a5 9a 00 00       	call   c001986b <Krnl::panic(char const*)>
c000fdc6:	83 c4 10             	add    esp,0x10
c000fdc9:	bb 40 01 00 00       	mov    ebx,0x140
c000fdce:	83 ec 08             	sub    esp,0x8
c000fdd1:	6a 00                	push   0x0
c000fdd3:	53                   	push   ebx
c000fdd4:	43                   	inc    ebx
c000fdd5:	e8 cc fb ff ff       	call   c000f9a6 <Phys::setPageState(unsigned long, bool)>
c000fdda:	ff 05 70 c9 02 c0    	inc    DWORD PTR ds:0xc002c970
c000fde0:	83 c4 10             	add    esp,0x10
c000fde3:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fde9:	75 e3                	jne    c000fdce <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000fdeb:	83 c4 3c             	add    esp,0x3c
c000fdee:	5b                   	pop    ebx
c000fdef:	5e                   	pop    esi
c000fdf0:	5f                   	pop    edi
c000fdf1:	5d                   	pop    ebp
c000fdf2:	c3                   	ret    
c000fdf3:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000fdfb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fe03:	e9 d7 fe ff ff       	jmp    c000fcdf <Phys::physicalMemorySetup(unsigned int)+0x107>

c000fe08 <Pipe::isAtty()>:
c000fe08:	31 c0                	xor    eax,eax
c000fe0a:	c3                   	ret    
c000fe0b:	90                   	nop

c000fe0c <Pipe::~Pipe()>:
c000fe0c:	83 ec 0c             	sub    esp,0xc
c000fe0f:	ba 58 8c 02 c0       	mov    edx,0xc0028c58
c000fe14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe18:	89 10                	mov    DWORD PTR [eax],edx
c000fe1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe1e:	83 ec 0c             	sub    esp,0xc
c000fe21:	50                   	push   eax
c000fe22:	e8 d9 16 00 00       	call   c0011500 <UnixFile::~UnixFile()>
c000fe27:	83 c4 10             	add    esp,0x10
c000fe2a:	90                   	nop
c000fe2b:	83 c4 0c             	add    esp,0xc
c000fe2e:	c3                   	ret    
c000fe2f:	90                   	nop

c000fe30 <Pipe::~Pipe()>:
c000fe30:	83 ec 0c             	sub    esp,0xc
c000fe33:	83 ec 0c             	sub    esp,0xc
c000fe36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe3a:	e8 cd ff ff ff       	call   c000fe0c <Pipe::~Pipe()>
c000fe3f:	83 c4 10             	add    esp,0x10
c000fe42:	83 ec 08             	sub    esp,0x8
c000fe45:	6a 20                	push   0x20
c000fe47:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe4b:	e8 21 28 00 00       	call   c0012671 <operator delete(void*, unsigned long)>
c000fe50:	83 c4 10             	add    esp,0x10
c000fe53:	83 c4 0c             	add    esp,0xc
c000fe56:	c3                   	ret    
c000fe57:	90                   	nop

c000fe58 <Pipe::read(unsigned long long, void*, int*)>:
c000fe58:	55                   	push   ebp
c000fe59:	57                   	push   edi
c000fe5a:	56                   	push   esi
c000fe5b:	53                   	push   ebx
c000fe5c:	83 ec 1c             	sub    esp,0x1c
c000fe5f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fe63:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fe67:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fe6b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fe6e:	89 c8                	mov    eax,ecx
c000fe70:	99                   	cdq    
c000fe71:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fe75:	74 19                	je     c000fe90 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fe77:	39 f9                	cmp    ecx,edi
c000fe79:	89 d1                	mov    ecx,edx
c000fe7b:	19 f1                	sbb    ecx,esi
c000fe7d:	73 11                	jae    c000fe90 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fe7f:	e8 76 ce 00 00       	call   c001ccfa <lockScheduler()>
c000fe84:	e8 ad d1 00 00       	call   c001d036 <schedule()>
c000fe89:	e8 6e ce 00 00       	call   c001ccfc <unlockScheduler()>
c000fe8e:	eb db                	jmp    c000fe6b <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fe90:	39 f8                	cmp    eax,edi
c000fe92:	89 d1                	mov    ecx,edx
c000fe94:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000fe98:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000fe9c:	19 f1                	sbb    ecx,esi
c000fe9e:	73 08                	jae    c000fea8 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000fea0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fea4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fea8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000feab:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000feae:	29 c6                	sub    esi,eax
c000feb0:	89 f1                	mov    ecx,esi
c000feb2:	c1 f9 1f             	sar    ecx,0x1f
c000feb5:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000feb9:	89 ca                	mov    edx,ecx
c000febb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000febf:	19 d1                	sbb    ecx,edx
c000fec1:	73 04                	jae    c000fec7 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000fec3:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000fec7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fecb:	89 fd                	mov    ebp,edi
c000fecd:	29 f5                	sub    ebp,esi
c000fecf:	85 f6                	test   esi,esi
c000fed1:	74 12                	je     c000fee5 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000fed3:	52                   	push   edx
c000fed4:	56                   	push   esi
c000fed5:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000fed8:	50                   	push   eax
c000fed9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000fedd:	e8 73 07 ff ff       	call   c0000655 <memcpy>
c000fee2:	83 c4 10             	add    esp,0x10
c000fee5:	85 ed                	test   ebp,ebp
c000fee7:	74 12                	je     c000fefb <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000fee9:	50                   	push   eax
c000feea:	55                   	push   ebp
c000feeb:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000feee:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000fef2:	56                   	push   esi
c000fef3:	e8 5d 07 ff ff       	call   c0000655 <memcpy>
c000fef8:	83 c4 10             	add    esp,0x10
c000fefb:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000fefe:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ff01:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000ff04:	99                   	cdq    
c000ff05:	89 f7                	mov    edi,esi
c000ff07:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ff0b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000ff0f:	c1 ff 1f             	sar    edi,0x1f
c000ff12:	57                   	push   edi
c000ff13:	56                   	push   esi
c000ff14:	52                   	push   edx
c000ff15:	50                   	push   eax
c000ff16:	e8 61 55 01 00       	call   c002547c <__umoddi3>
c000ff1b:	83 c4 10             	add    esp,0x10
c000ff1e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ff21:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ff26:	75 10                	jne    c000ff38 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000ff28:	83 ec 0c             	sub    esp,0xc
c000ff2b:	68 15 8c 02 c0       	push   0xc0028c15
c000ff30:	e8 36 99 00 00       	call   c001986b <Krnl::panic(char const*)>
c000ff35:	83 c4 10             	add    esp,0x10
c000ff38:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ff3c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ff40:	89 10                	mov    DWORD PTR [eax],edx
c000ff42:	83 c4 1c             	add    esp,0x1c
c000ff45:	31 c0                	xor    eax,eax
c000ff47:	5b                   	pop    ebx
c000ff48:	5e                   	pop    esi
c000ff49:	5f                   	pop    edi
c000ff4a:	5d                   	pop    ebp
c000ff4b:	c3                   	ret    

c000ff4c <Pipe::write(unsigned long long, void*, int*)>:
c000ff4c:	55                   	push   ebp
c000ff4d:	57                   	push   edi
c000ff4e:	56                   	push   esi
c000ff4f:	53                   	push   ebx
c000ff50:	83 ec 1c             	sub    esp,0x1c
c000ff53:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ff57:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ff5b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ff5f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ff62:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000ff65:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000ff68:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ff6c:	89 de                	mov    esi,ebx
c000ff6e:	89 df                	mov    edi,ebx
c000ff70:	c1 ff 1f             	sar    edi,0x1f
c000ff73:	01 c6                	add    esi,eax
c000ff75:	89 c8                	mov    eax,ecx
c000ff77:	11 d7                	adc    edi,edx
c000ff79:	99                   	cdq    
c000ff7a:	39 f1                	cmp    ecx,esi
c000ff7c:	89 d0                	mov    eax,edx
c000ff7e:	19 f8                	sbb    eax,edi
c000ff80:	b8 01 00 00 00       	mov    eax,0x1
c000ff85:	0f 82 80 00 00 00    	jb     c001000b <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000ff8b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000ff8e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ff91:	01 d8                	add    eax,ebx
c000ff93:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000ff97:	99                   	cdq    
c000ff98:	f7 f9                	idiv   ecx
c000ff9a:	29 d1                	sub    ecx,edx
c000ff9c:	89 d7                	mov    edi,edx
c000ff9e:	89 c8                	mov    eax,ecx
c000ffa0:	99                   	cdq    
c000ffa1:	39 ce                	cmp    esi,ecx
c000ffa3:	19 d3                	sbb    ebx,edx
c000ffa5:	bb 00 00 00 00       	mov    ebx,0x0
c000ffaa:	72 04                	jb     c000ffb0 <Pipe::write(unsigned long long, void*, int*)+0x64>
c000ffac:	89 f3                	mov    ebx,esi
c000ffae:	29 cb                	sub    ebx,ecx
c000ffb0:	89 f1                	mov    ecx,esi
c000ffb2:	29 d9                	sub    ecx,ebx
c000ffb4:	74 1a                	je     c000ffd0 <Pipe::write(unsigned long long, void*, int*)+0x84>
c000ffb6:	52                   	push   edx
c000ffb7:	51                   	push   ecx
c000ffb8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ffbc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ffc0:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000ffc3:	57                   	push   edi
c000ffc4:	e8 8c 06 ff ff       	call   c0000655 <memcpy>
c000ffc9:	83 c4 10             	add    esp,0x10
c000ffcc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ffd0:	85 db                	test   ebx,ebx
c000ffd2:	74 12                	je     c000ffe6 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000ffd4:	50                   	push   eax
c000ffd5:	53                   	push   ebx
c000ffd6:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000ffda:	51                   	push   ecx
c000ffdb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000ffde:	e8 72 06 ff ff       	call   c0000655 <memcpy>
c000ffe3:	83 c4 10             	add    esp,0x10
c000ffe6:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000ffe9:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ffee:	75 10                	jne    c0010000 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000fff0:	83 ec 0c             	sub    esp,0xc
c000fff3:	68 31 8c 02 c0       	push   0xc0028c31
c000fff8:	e8 6e 98 00 00       	call   c001986b <Krnl::panic(char const*)>
c000fffd:	83 c4 10             	add    esp,0x10
c0010000:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010004:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0010007:	89 38                	mov    DWORD PTR [eax],edi
c0010009:	31 c0                	xor    eax,eax
c001000b:	83 c4 1c             	add    esp,0x1c
c001000e:	5b                   	pop    ebx
c001000f:	5e                   	pop    esi
c0010010:	5f                   	pop    edi
c0010011:	5d                   	pop    ebp
c0010012:	c3                   	ret    
c0010013:	90                   	nop

c0010014 <Pipe::Pipe(int)>:
c0010014:	83 ec 0c             	sub    esp,0xc
c0010017:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001001b:	83 ec 08             	sub    esp,0x8
c001001e:	6a 00                	push   0x0
c0010020:	50                   	push   eax
c0010021:	e8 f8 12 00 00       	call   c001131e <UnixFile::UnixFile(int)>
c0010026:	83 c4 10             	add    esp,0x10
c0010029:	ba 58 8c 02 c0       	mov    edx,0xc0028c58
c001002e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010032:	89 10                	mov    DWORD PTR [eax],edx
c0010034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010038:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001003c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001003f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010043:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c001004a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001004e:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010055:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010059:	83 ec 0c             	sub    esp,0xc
c001005c:	50                   	push   eax
c001005d:	e8 72 f4 ff ff       	call   c000f4d4 <malloc>
c0010062:	83 c4 10             	add    esp,0x10
c0010065:	89 c2                	mov    edx,eax
c0010067:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001006b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001006e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010072:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010076:	90                   	nop
c0010077:	83 c4 0c             	add    esp,0xc
c001007a:	c3                   	ret    
c001007b:	90                   	nop

c001007c <VgaText::isAtty()>:
c001007c:	b0 01                	mov    al,0x1
c001007e:	c3                   	ret    
c001007f:	90                   	nop

c0010080 <VgaText::~VgaText()>:
c0010080:	83 ec 0c             	sub    esp,0xc
c0010083:	ba 14 8d 02 c0       	mov    edx,0xc0028d14
c0010088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001008c:	89 10                	mov    DWORD PTR [eax],edx
c001008e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010092:	83 ec 0c             	sub    esp,0xc
c0010095:	50                   	push   eax
c0010096:	e8 65 14 00 00       	call   c0011500 <UnixFile::~UnixFile()>
c001009b:	83 c4 10             	add    esp,0x10
c001009e:	90                   	nop
c001009f:	83 c4 0c             	add    esp,0xc
c00100a2:	c3                   	ret    
c00100a3:	90                   	nop

c00100a4 <VgaText::~VgaText()>:
c00100a4:	83 ec 0c             	sub    esp,0xc
c00100a7:	83 ec 0c             	sub    esp,0xc
c00100aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100ae:	e8 cd ff ff ff       	call   c0010080 <VgaText::~VgaText()>
c00100b3:	83 c4 10             	add    esp,0x10
c00100b6:	83 ec 08             	sub    esp,0x8
c00100b9:	68 60 12 00 00       	push   0x1260
c00100be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100c2:	e8 aa 25 00 00       	call   c0012671 <operator delete(void*, unsigned long)>
c00100c7:	83 c4 10             	add    esp,0x10
c00100ca:	83 c4 0c             	add    esp,0xc
c00100cd:	c3                   	ret    

c00100ce <VgaText::read(unsigned long long, void*, int*)>:
c00100ce:	83 ec 10             	sub    esp,0x10
c00100d1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00100d5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00100d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100dd:	e8 a3 58 00 00       	call   c0015985 <readKeyboard(VgaText*, char*, unsigned long)>
c00100e2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00100e6:	89 02                	mov    DWORD PTR [edx],eax
c00100e8:	31 c0                	xor    eax,eax
c00100ea:	83 c4 1c             	add    esp,0x1c
c00100ed:	c3                   	ret    

c00100ee <setTerminalScrollLock(bool)>:
c00100ee:	c3                   	ret    

c00100ef <addToTerminalCycle(VgaText*)>:
c00100ef:	8b 15 e0 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c9e0
c00100f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100f9:	85 d2                	test   edx,edx
c00100fb:	75 0c                	jne    c0010109 <addToTerminalCycle(VgaText*)+0x1a>
c00100fd:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c0010103:	a3 e0 c9 02 c0       	mov    ds:0xc002c9e0,eax
c0010108:	c3                   	ret    
c0010109:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c001010f:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c0010115:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c001011b:	c3                   	ret    

c001011c <installVgaTextImplementation()>:
c001011c:	83 ec 10             	sub    esp,0x10
c001011f:	6a 20                	push   0x20
c0010121:	6a 00                	push   0x0
c0010123:	68 c0 c9 02 c0       	push   0xc002c9c0
c0010128:	e8 5e 05 ff ff       	call   c000068b <memset>
c001012d:	83 c4 1c             	add    esp,0x1c
c0010130:	c3                   	ret    

c0010131 <scrollTerminalScrollLock(int)>:
c0010131:	c3                   	ret    

c0010132 <VgaText::load()>:
c0010132:	53                   	push   ebx
c0010133:	31 c0                	xor    eax,eax
c0010135:	83 ec 58             	sub    esp,0x58
c0010138:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001013c:	89 e2                	mov    edx,esp
c001013e:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010142:	40                   	inc    eax
c0010143:	83 f8 50             	cmp    eax,0x50
c0010146:	75 f6                	jne    c001013e <VgaText::load()+0xc>
c0010148:	31 c0                	xor    eax,eax
c001014a:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c0010151:	84 c9                	test   cl,cl
c0010153:	74 06                	je     c001015b <VgaText::load()+0x29>
c0010155:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010158:	40                   	inc    eax
c0010159:	eb ef                	jmp    c001014a <VgaText::load()+0x18>
c001015b:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c0010161:	85 c0                	test   eax,eax
c0010163:	74 09                	je     c001016e <VgaText::load()+0x3c>
c0010165:	51                   	push   ecx
c0010166:	51                   	push   ecx
c0010167:	52                   	push   edx
c0010168:	53                   	push   ebx
c0010169:	ff d0                	call   eax
c001016b:	83 c4 10             	add    esp,0x10
c001016e:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c0010174:	85 c0                	test   eax,eax
c0010176:	74 09                	je     c0010181 <VgaText::load()+0x4f>
c0010178:	83 ec 0c             	sub    esp,0xc
c001017b:	53                   	push   ebx
c001017c:	ff d0                	call   eax
c001017e:	83 c4 10             	add    esp,0x10
c0010181:	83 c4 58             	add    esp,0x58
c0010184:	5b                   	pop    ebx
c0010185:	c3                   	ret    

c0010186 <VgaText::updateCursor()>:
c0010186:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001018a:	39 05 e4 c9 02 c0    	cmp    DWORD PTR ds:0xc002c9e4,eax
c0010190:	75 0c                	jne    c001019e <VgaText::updateCursor()+0x18>
c0010192:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c0010198:	85 c0                	test   eax,eax
c001019a:	74 02                	je     c001019e <VgaText::updateCursor()+0x18>
c001019c:	ff e0                	jmp    eax
c001019e:	c3                   	ret    
c001019f:	90                   	nop

c00101a0 <VgaText::showCursor(bool)>:
c00101a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101a8:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c00101ae:	c3                   	ret    
c00101af:	90                   	nop

c00101b0 <VgaText::disableBlink(bool)>:
c00101b0:	56                   	push   esi
c00101b1:	53                   	push   ebx
c00101b2:	51                   	push   ecx
c00101b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00101b7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00101bb:	39 1d e4 c9 02 c0    	cmp    DWORD PTR ds:0xc002c9e4,ebx
c00101c1:	75 18                	jne    c00101db <VgaText::disableBlink(bool)+0x2b>
c00101c3:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c00101c9:	85 c0                	test   eax,eax
c00101cb:	74 0e                	je     c00101db <VgaText::disableBlink(bool)+0x2b>
c00101cd:	89 f1                	mov    ecx,esi
c00101cf:	52                   	push   edx
c00101d0:	52                   	push   edx
c00101d1:	0f b6 d1             	movzx  edx,cl
c00101d4:	52                   	push   edx
c00101d5:	53                   	push   ebx
c00101d6:	ff d0                	call   eax
c00101d8:	83 c4 10             	add    esp,0x10
c00101db:	89 f0                	mov    eax,esi
c00101dd:	83 f0 01             	xor    eax,0x1
c00101e0:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c00101e6:	58                   	pop    eax
c00101e7:	5b                   	pop    ebx
c00101e8:	5e                   	pop    esi
c00101e9:	c3                   	ret    

c00101ea <VgaText::doANSI_SGR(int)>:
c00101ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101f2:	85 d2                	test   edx,edx
c00101f4:	75 14                	jne    c001020a <VgaText::doANSI_SGR(int)+0x20>
c00101f6:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c00101fc:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010202:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c0010208:	eb 65                	jmp    c001026f <VgaText::doANSI_SGR(int)+0x85>
c001020a:	83 fa 07             	cmp    edx,0x7
c001020d:	75 14                	jne    c0010223 <VgaText::doANSI_SGR(int)+0x39>
c001020f:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c0010215:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c001021b:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c0010221:	eb 4c                	jmp    c001026f <VgaText::doANSI_SGR(int)+0x85>
c0010223:	83 fa 1b             	cmp    edx,0x1b
c0010226:	74 ce                	je     c00101f6 <VgaText::doANSI_SGR(int)+0xc>
c0010228:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001022b:	83 f9 07             	cmp    ecx,0x7
c001022e:	77 09                	ja     c0010239 <VgaText::doANSI_SGR(int)+0x4f>
c0010230:	8b 14 8d 80 b8 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd4780]
c0010237:	eb 20                	jmp    c0010259 <VgaText::doANSI_SGR(int)+0x6f>
c0010239:	8d 4a d8             	lea    ecx,[edx-0x28]
c001023c:	83 f9 07             	cmp    ecx,0x7
c001023f:	77 09                	ja     c001024a <VgaText::doANSI_SGR(int)+0x60>
c0010241:	8b 14 8d 80 b8 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd4780]
c0010248:	eb 25                	jmp    c001026f <VgaText::doANSI_SGR(int)+0x85>
c001024a:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001024d:	83 f9 07             	cmp    ecx,0x7
c0010250:	77 0e                	ja     c0010260 <VgaText::doANSI_SGR(int)+0x76>
c0010252:	8b 14 95 38 b7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd48c8]
c0010259:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001025f:	c3                   	ret    
c0010260:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010263:	83 f9 07             	cmp    ecx,0x7
c0010266:	77 0d                	ja     c0010275 <VgaText::doANSI_SGR(int)+0x8b>
c0010268:	8b 14 95 10 b7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd48f0]
c001026f:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010275:	c3                   	ret    

c0010276 <VgaText::setDefaultBgColour(VgaColour)>:
c0010276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001027a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001027e:	80 b8 dc 0f 00 00 00 	cmp    BYTE PTR [eax+0xfdc],0x0
c0010285:	74 15                	je     c001029c <VgaText::setDefaultBgColour(VgaColour)+0x26>
c0010287:	c7 80 c4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfc4],0x1
c0010291:	c7 80 cc 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfcc],0x1
c001029b:	c3                   	ret    
c001029c:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c00102a2:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00102a8:	c3                   	ret    
c00102a9:	90                   	nop

c00102aa <VgaText::setDefaultFgColour(VgaColour)>:
c00102aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102b2:	80 b8 dc 0f 00 00 00 	cmp    BYTE PTR [eax+0xfdc],0x0
c00102b9:	74 15                	je     c00102d0 <VgaText::setDefaultFgColour(VgaColour)+0x26>
c00102bb:	c7 80 c8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xfc8],0x0
c00102c5:	c7 80 d0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xfd0],0x0
c00102cf:	c3                   	ret    
c00102d0:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c00102d6:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00102dc:	c3                   	ret    
c00102dd:	90                   	nop

c00102de <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00102de:	53                   	push   ebx
c00102df:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00102e3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00102e7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00102eb:	51                   	push   ecx
c00102ec:	e8 85 ff ff ff       	call   c0010276 <VgaText::setDefaultBgColour(VgaColour)>
c00102f1:	58                   	pop    eax
c00102f2:	5a                   	pop    edx
c00102f3:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00102f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00102fb:	5b                   	pop    ebx
c00102fc:	eb ac                	jmp    c00102aa <VgaText::setDefaultFgColour(VgaColour)>

c00102fe <VgaText::combineColours(unsigned char, unsigned char)>:
c00102fe:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010302:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010307:	83 e0 0f             	and    eax,0xf
c001030a:	c1 e2 04             	shl    edx,0x4
c001030d:	09 d0                	or     eax,edx
c001030f:	c3                   	ret    

c0010310 <VgaText::scrollScreen()>:
c0010310:	57                   	push   edi
c0010311:	56                   	push   esi
c0010312:	be 01 00 00 00       	mov    esi,0x1
c0010317:	53                   	push   ebx
c0010318:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001031c:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0010322:	31 ff                	xor    edi,edi
c0010324:	01 d9                	add    ecx,ebx
c0010326:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c0010329:	83 fe 17             	cmp    esi,0x17
c001032c:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c0010332:	75 28                	jne    c001035c <VgaText::scrollScreen()+0x4c>
c0010334:	f7 c7 01 00 00 00    	test   edi,0x1
c001033a:	74 1c                	je     c0010358 <VgaText::scrollScreen()+0x48>
c001033c:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c0010343:	50                   	push   eax
c0010344:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c001034b:	50                   	push   eax
c001034c:	e8 ad ff ff ff       	call   c00102fe <VgaText::combineColours(unsigned char, unsigned char)>
c0010351:	5a                   	pop    edx
c0010352:	5a                   	pop    edx
c0010353:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c0010356:	eb 04                	jmp    c001035c <VgaText::scrollScreen()+0x4c>
c0010358:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c001035c:	47                   	inc    edi
c001035d:	41                   	inc    ecx
c001035e:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010364:	75 c0                	jne    c0010326 <VgaText::scrollScreen()+0x16>
c0010366:	46                   	inc    esi
c0010367:	83 fe 18             	cmp    esi,0x18
c001036a:	75 b0                	jne    c001031c <VgaText::scrollScreen()+0xc>
c001036c:	39 1d e4 c9 02 c0    	cmp    DWORD PTR ds:0xc002c9e4,ebx
c0010372:	75 24                	jne    c0010398 <VgaText::scrollScreen()+0x88>
c0010374:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c001037b:	74 08                	je     c0010385 <VgaText::scrollScreen()+0x75>
c001037d:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c0010383:	eb 13                	jmp    c0010398 <VgaText::scrollScreen()+0x88>
c0010385:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c001038b:	85 c0                	test   eax,eax
c001038d:	74 09                	je     c0010398 <VgaText::scrollScreen()+0x88>
c001038f:	83 ec 0c             	sub    esp,0xc
c0010392:	53                   	push   ebx
c0010393:	ff d0                	call   eax
c0010395:	83 c4 10             	add    esp,0x10
c0010398:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001039c:	5b                   	pop    ebx
c001039d:	5e                   	pop    esi
c001039e:	5f                   	pop    edi
c001039f:	e9 e2 fd ff ff       	jmp    c0010186 <VgaText::updateCursor()>

c00103a4 <VgaText::combineCharAndColour(char, unsigned char)>:
c00103a4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00103a9:	c1 e0 08             	shl    eax,0x8
c00103ac:	89 c2                	mov    edx,eax
c00103ae:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00103b3:	09 d0                	or     eax,edx
c00103b5:	c3                   	ret    

c00103b6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00103b6:	53                   	push   ebx
c00103b7:	83 ec 08             	sub    esp,0x8
c00103ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00103be:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00103c3:	50                   	push   eax
c00103c4:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00103c9:	50                   	push   eax
c00103ca:	e8 2f ff ff ff       	call   c00102fe <VgaText::combineColours(unsigned char, unsigned char)>
c00103cf:	5a                   	pop    edx
c00103d0:	0f b6 c0             	movzx  eax,al
c00103d3:	5b                   	pop    ebx
c00103d4:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00103d9:	50                   	push   eax
c00103da:	53                   	push   ebx
c00103db:	e8 c4 ff ff ff       	call   c00103a4 <VgaText::combineCharAndColour(char, unsigned char)>
c00103e0:	5a                   	pop    edx
c00103e1:	5a                   	pop    edx
c00103e2:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00103e8:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00103ec:	0f b7 d2             	movzx  edx,dx
c00103ef:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c00103f4:	39 0d e4 c9 02 c0    	cmp    DWORD PTR ds:0xc002c9e4,ecx
c00103fa:	75 14                	jne    c0010410 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00103fc:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c0010402:	85 c0                	test   eax,eax
c0010404:	74 0a                	je     c0010410 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010406:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001040a:	83 c4 08             	add    esp,0x8
c001040d:	5b                   	pop    ebx
c001040e:	ff e0                	jmp    eax
c0010410:	83 c4 08             	add    esp,0x8
c0010413:	5b                   	pop    ebx
c0010414:	c3                   	ret    
c0010415:	90                   	nop

c0010416 <VgaText::getCursorX()>:
c0010416:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001041a:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c0010420:	c3                   	ret    
c0010421:	90                   	nop

c0010422 <VgaText::getCursorY()>:
c0010422:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010426:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c001042c:	c3                   	ret    
c001042d:	90                   	nop

c001042e <VgaText::setCursor(int, int)>:
c001042e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010432:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010436:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c001043c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010440:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c0010446:	e9 3b fd ff ff       	jmp    c0010186 <VgaText::updateCursor()>
c001044b:	90                   	nop

c001044c <VgaText::setCursorX(int)>:
c001044c:	83 ec 10             	sub    esp,0x10
c001044f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010453:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c0010459:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001045d:	50                   	push   eax
c001045e:	e8 cb ff ff ff       	call   c001042e <VgaText::setCursor(int, int)>
c0010463:	83 c4 1c             	add    esp,0x1c
c0010466:	c3                   	ret    
c0010467:	90                   	nop

c0010468 <VgaText::setCursorY(int)>:
c0010468:	83 ec 10             	sub    esp,0x10
c001046b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001046f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010473:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c0010479:	50                   	push   eax
c001047a:	e8 af ff ff ff       	call   c001042e <VgaText::setCursor(int, int)>
c001047f:	83 c4 1c             	add    esp,0x1c
c0010482:	c3                   	ret    
c0010483:	90                   	nop

c0010484 <VgaText::incrementCursor(bool)>:
c0010484:	56                   	push   esi
c0010485:	53                   	push   ebx
c0010486:	51                   	push   ecx
c0010487:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001048b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001048f:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c0010495:	40                   	inc    eax
c0010496:	83 f8 50             	cmp    eax,0x50
c0010499:	74 08                	je     c00104a3 <VgaText::incrementCursor(bool)+0x1f>
c001049b:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c00104a1:	eb 33                	jmp    c00104d6 <VgaText::incrementCursor(bool)+0x52>
c00104a3:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00104a9:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00104b3:	8d 50 01             	lea    edx,[eax+0x1]
c00104b6:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00104bc:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00104c2:	75 12                	jne    c00104d6 <VgaText::incrementCursor(bool)+0x52>
c00104c4:	83 ec 0c             	sub    esp,0xc
c00104c7:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00104cd:	53                   	push   ebx
c00104ce:	e8 3d fe ff ff       	call   c0010310 <VgaText::scrollScreen()>
c00104d3:	83 c4 10             	add    esp,0x10
c00104d6:	89 f0                	mov    eax,esi
c00104d8:	84 c0                	test   al,al
c00104da:	74 0c                	je     c00104e8 <VgaText::incrementCursor(bool)+0x64>
c00104dc:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00104e0:	5a                   	pop    edx
c00104e1:	5b                   	pop    ebx
c00104e2:	5e                   	pop    esi
c00104e3:	e9 9e fc ff ff       	jmp    c0010186 <VgaText::updateCursor()>
c00104e8:	58                   	pop    eax
c00104e9:	5b                   	pop    ebx
c00104ea:	5e                   	pop    esi
c00104eb:	c3                   	ret    

c00104ec <VgaText::updateRAMUsageDisplay(int)>:
c00104ec:	56                   	push   esi
c00104ed:	8b 35 60 b8 02 c0    	mov    esi,DWORD PTR ds:0xc002b860
c00104f3:	53                   	push   ebx
c00104f4:	bb 0a 00 00 00       	mov    ebx,0xa
c00104f9:	6a 0f                	push   0xf
c00104fb:	6a 00                	push   0x0
c00104fd:	e8 fc fd ff ff       	call   c00102fe <VgaText::combineColours(unsigned char, unsigned char)>
c0010502:	5a                   	pop    edx
c0010503:	59                   	pop    ecx
c0010504:	0f b6 c8             	movzx  ecx,al
c0010507:	51                   	push   ecx
c0010508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001050c:	99                   	cdq    
c001050d:	f7 fb                	idiv   ebx
c001050f:	89 d3                	mov    ebx,edx
c0010511:	83 c0 30             	add    eax,0x30
c0010514:	83 c3 30             	add    ebx,0x30
c0010517:	0f be c0             	movsx  eax,al
c001051a:	0f b6 db             	movzx  ebx,bl
c001051d:	50                   	push   eax
c001051e:	e8 81 fe ff ff       	call   c00103a4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010523:	5a                   	pop    edx
c0010524:	5a                   	pop    edx
c0010525:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c001052c:	51                   	push   ecx
c001052d:	53                   	push   ebx
c001052e:	e8 71 fe ff ff       	call   c00103a4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010533:	5b                   	pop    ebx
c0010534:	5a                   	pop    edx
c0010535:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c001053c:	51                   	push   ecx
c001053d:	6a 25                	push   0x25
c001053f:	e8 60 fe ff ff       	call   c00103a4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010544:	59                   	pop    ecx
c0010545:	5b                   	pop    ebx
c0010546:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c001054d:	5b                   	pop    ebx
c001054e:	5e                   	pop    esi
c001054f:	c3                   	ret    

c0010550 <VgaText::updateDiskUsage()>:
c0010550:	55                   	push   ebp
c0010551:	bd 10 27 00 00       	mov    ebp,0x2710
c0010556:	57                   	push   edi
c0010557:	8b 3d 60 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b860
c001055d:	56                   	push   esi
c001055e:	53                   	push   ebx
c001055f:	6a 0f                	push   0xf
c0010561:	6a 00                	push   0x0
c0010563:	e8 96 fd ff ff       	call   c00102fe <VgaText::combineColours(unsigned char, unsigned char)>
c0010568:	5a                   	pop    edx
c0010569:	0f b6 d8             	movzx  ebx,al
c001056c:	59                   	pop    ecx
c001056d:	8b 35 48 ec 02 c0    	mov    esi,DWORD PTR ds:0xc002ec48
c0010573:	53                   	push   ebx
c0010574:	b9 0a 00 00 00       	mov    ecx,0xa
c0010579:	89 f0                	mov    eax,esi
c001057b:	99                   	cdq    
c001057c:	f7 fd                	idiv   ebp
c001057e:	99                   	cdq    
c001057f:	f7 f9                	idiv   ecx
c0010581:	8d 42 30             	lea    eax,[edx+0x30]
c0010584:	0f b6 c0             	movzx  eax,al
c0010587:	50                   	push   eax
c0010588:	e8 17 fe ff ff       	call   c00103a4 <VgaText::combineCharAndColour(char, unsigned char)>
c001058d:	5d                   	pop    ebp
c001058e:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010593:	5a                   	pop    edx
c0010594:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010598:	53                   	push   ebx
c0010599:	89 f0                	mov    eax,esi
c001059b:	99                   	cdq    
c001059c:	f7 fd                	idiv   ebp
c001059e:	99                   	cdq    
c001059f:	f7 f9                	idiv   ecx
c00105a1:	8d 42 30             	lea    eax,[edx+0x30]
c00105a4:	0f b6 c0             	movzx  eax,al
c00105a7:	50                   	push   eax
c00105a8:	e8 f7 fd ff ff       	call   c00103a4 <VgaText::combineCharAndColour(char, unsigned char)>
c00105ad:	5d                   	pop    ebp
c00105ae:	bd 64 00 00 00       	mov    ebp,0x64
c00105b3:	5a                   	pop    edx
c00105b4:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c00105bb:	53                   	push   ebx
c00105bc:	89 f0                	mov    eax,esi
c00105be:	99                   	cdq    
c00105bf:	f7 fd                	idiv   ebp
c00105c1:	99                   	cdq    
c00105c2:	f7 f9                	idiv   ecx
c00105c4:	8d 42 30             	lea    eax,[edx+0x30]
c00105c7:	0f b6 c0             	movzx  eax,al
c00105ca:	50                   	push   eax
c00105cb:	e8 d4 fd ff ff       	call   c00103a4 <VgaText::combineCharAndColour(char, unsigned char)>
c00105d0:	5d                   	pop    ebp
c00105d1:	5a                   	pop    edx
c00105d2:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c00105d9:	53                   	push   ebx
c00105da:	89 f0                	mov    eax,esi
c00105dc:	99                   	cdq    
c00105dd:	f7 f9                	idiv   ecx
c00105df:	89 d6                	mov    esi,edx
c00105e1:	99                   	cdq    
c00105e2:	f7 f9                	idiv   ecx
c00105e4:	8d 42 30             	lea    eax,[edx+0x30]
c00105e7:	0f b6 c0             	movzx  eax,al
c00105ea:	50                   	push   eax
c00105eb:	e8 b4 fd ff ff       	call   c00103a4 <VgaText::combineCharAndColour(char, unsigned char)>
c00105f0:	5d                   	pop    ebp
c00105f1:	5a                   	pop    edx
c00105f2:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c00105f9:	53                   	push   ebx
c00105fa:	8d 46 30             	lea    eax,[esi+0x30]
c00105fd:	0f b6 f0             	movzx  esi,al
c0010600:	56                   	push   esi
c0010601:	e8 9e fd ff ff       	call   c00103a4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010606:	5e                   	pop    esi
c0010607:	8b 35 44 ec 02 c0    	mov    esi,DWORD PTR ds:0xc002ec44
c001060d:	5d                   	pop    ebp
c001060e:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010615:	bd 10 27 00 00       	mov    ebp,0x2710
c001061a:	53                   	push   ebx
c001061b:	89 f0                	mov    eax,esi
c001061d:	99                   	cdq    
c001061e:	f7 fd                	idiv   ebp
c0010620:	99                   	cdq    
c0010621:	f7 f9                	idiv   ecx
c0010623:	8d 42 30             	lea    eax,[edx+0x30]
c0010626:	0f b6 c0             	movzx  eax,al
c0010629:	50                   	push   eax
c001062a:	e8 75 fd ff ff       	call   c00103a4 <VgaText::combineCharAndColour(char, unsigned char)>
c001062f:	5a                   	pop    edx
c0010630:	5d                   	pop    ebp
c0010631:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010638:	bd e8 03 00 00       	mov    ebp,0x3e8
c001063d:	53                   	push   ebx
c001063e:	89 f0                	mov    eax,esi
c0010640:	99                   	cdq    
c0010641:	f7 fd                	idiv   ebp
c0010643:	99                   	cdq    
c0010644:	f7 f9                	idiv   ecx
c0010646:	8d 42 30             	lea    eax,[edx+0x30]
c0010649:	0f b6 c0             	movzx  eax,al
c001064c:	50                   	push   eax
c001064d:	e8 52 fd ff ff       	call   c00103a4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010652:	5a                   	pop    edx
c0010653:	5d                   	pop    ebp
c0010654:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c001065b:	bd 64 00 00 00       	mov    ebp,0x64
c0010660:	53                   	push   ebx
c0010661:	89 f0                	mov    eax,esi
c0010663:	99                   	cdq    
c0010664:	f7 fd                	idiv   ebp
c0010666:	99                   	cdq    
c0010667:	f7 f9                	idiv   ecx
c0010669:	83 c2 30             	add    edx,0x30
c001066c:	0f b6 d2             	movzx  edx,dl
c001066f:	52                   	push   edx
c0010670:	e8 2f fd ff ff       	call   c00103a4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010675:	5a                   	pop    edx
c0010676:	5d                   	pop    ebp
c0010677:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c001067e:	53                   	push   ebx
c001067f:	89 f0                	mov    eax,esi
c0010681:	99                   	cdq    
c0010682:	f7 f9                	idiv   ecx
c0010684:	89 d6                	mov    esi,edx
c0010686:	99                   	cdq    
c0010687:	f7 f9                	idiv   ecx
c0010689:	8d 42 30             	lea    eax,[edx+0x30]
c001068c:	0f b6 c0             	movzx  eax,al
c001068f:	50                   	push   eax
c0010690:	e8 0f fd ff ff       	call   c00103a4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010695:	5a                   	pop    edx
c0010696:	59                   	pop    ecx
c0010697:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c001069e:	53                   	push   ebx
c001069f:	8d 46 30             	lea    eax,[esi+0x30]
c00106a2:	0f b6 f0             	movzx  esi,al
c00106a5:	56                   	push   esi
c00106a6:	e8 f9 fc ff ff       	call   c00103a4 <VgaText::combineCharAndColour(char, unsigned char)>
c00106ab:	5b                   	pop    ebx
c00106ac:	5e                   	pop    esi
c00106ad:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c00106b4:	5b                   	pop    ebx
c00106b5:	5e                   	pop    esi
c00106b6:	5f                   	pop    edi
c00106b7:	5d                   	pop    ebp
c00106b8:	c3                   	ret    
c00106b9:	90                   	nop

c00106ba <VgaText::updateTitle()>:
c00106ba:	53                   	push   ebx
c00106bb:	31 c0                	xor    eax,eax
c00106bd:	83 ec 58             	sub    esp,0x58
c00106c0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00106c4:	89 e1                	mov    ecx,esp
c00106c6:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c00106ca:	40                   	inc    eax
c00106cb:	83 f8 50             	cmp    eax,0x50
c00106ce:	75 f6                	jne    c00106c6 <VgaText::updateTitle()+0xc>
c00106d0:	31 c0                	xor    eax,eax
c00106d2:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c00106d9:	84 db                	test   bl,bl
c00106db:	74 06                	je     c00106e3 <VgaText::updateTitle()+0x29>
c00106dd:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c00106e0:	40                   	inc    eax
c00106e1:	eb ef                	jmp    c00106d2 <VgaText::updateTitle()+0x18>
c00106e3:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c00106e9:	85 c0                	test   eax,eax
c00106eb:	74 09                	je     c00106f6 <VgaText::updateTitle()+0x3c>
c00106ed:	53                   	push   ebx
c00106ee:	53                   	push   ebx
c00106ef:	51                   	push   ecx
c00106f0:	52                   	push   edx
c00106f1:	ff d0                	call   eax
c00106f3:	83 c4 10             	add    esp,0x10
c00106f6:	e8 55 fe ff ff       	call   c0010550 <VgaText::updateDiskUsage()>
c00106fb:	83 c4 58             	add    esp,0x58
c00106fe:	5b                   	pop    ebx
c00106ff:	c3                   	ret    

c0010700 <VgaText::setTitleTextColour(VgaColour)>:
c0010700:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010704:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010708:	80 b8 dc 0f 00 00 00 	cmp    BYTE PTR [eax+0xfdc],0x0
c001070f:	74 0c                	je     c001071d <VgaText::setTitleTextColour(VgaColour)+0x1d>
c0010711:	c7 80 d8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xfd8],0x0
c001071b:	eb 06                	jmp    c0010723 <VgaText::setTitleTextColour(VgaColour)+0x23>
c001071d:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010723:	eb 95                	jmp    c00106ba <VgaText::updateTitle()>
c0010725:	90                   	nop

c0010726 <VgaText::setTitleColour(VgaColour)>:
c0010726:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001072a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001072e:	80 b8 dc 0f 00 00 00 	cmp    BYTE PTR [eax+0xfdc],0x0
c0010735:	74 0c                	je     c0010743 <VgaText::setTitleColour(VgaColour)+0x1d>
c0010737:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0010741:	eb 06                	jmp    c0010749 <VgaText::setTitleColour(VgaColour)+0x23>
c0010743:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010749:	e9 6c ff ff ff       	jmp    c00106ba <VgaText::updateTitle()>

c001074e <VgaText::setTitle(char*)>:
c001074e:	53                   	push   ebx
c001074f:	83 ec 10             	sub    esp,0x10
c0010752:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010756:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001075a:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010760:	50                   	push   eax
c0010761:	e8 c4 ff fe ff       	call   c000072a <strcpy>
c0010766:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001076a:	83 c4 18             	add    esp,0x18
c001076d:	5b                   	pop    ebx
c001076e:	e9 47 ff ff ff       	jmp    c00106ba <VgaText::updateTitle()>
c0010773:	90                   	nop

c0010774 <VgaText::decrementCursor(bool)>:
c0010774:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010778:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001077c:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010782:	85 c0                	test   eax,eax
c0010784:	74 07                	je     c001078d <VgaText::decrementCursor(bool)+0x19>
c0010786:	48                   	dec    eax
c0010787:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c001078d:	84 c9                	test   cl,cl
c001078f:	74 09                	je     c001079a <VgaText::decrementCursor(bool)+0x26>
c0010791:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010795:	e9 ec f9 ff ff       	jmp    c0010186 <VgaText::updateCursor()>
c001079a:	c3                   	ret    
c001079b:	90                   	nop

c001079c <VgaText::putchar(char, VgaColour, VgaColour)>:
c001079c:	53                   	push   ebx
c001079d:	83 ec 08             	sub    esp,0x8
c00107a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00107a4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107a8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00107ac:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00107b0:	3c 07                	cmp    al,0x7
c00107b2:	75 2a                	jne    c00107de <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c00107b4:	a1 8c ca 02 c0       	mov    eax,ds:0xc002ca8c
c00107b9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00107c1:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c00107c9:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c00107d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00107d5:	83 c4 08             	add    esp,0x8
c00107d8:	5b                   	pop    ebx
c00107d9:	e9 72 2d 00 00       	jmp    c0013550 <Buzzer::beep(int, int, bool)>
c00107de:	3c 0d                	cmp    al,0xd
c00107e0:	75 0c                	jne    c00107ee <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c00107e2:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00107ec:	eb 3b                	jmp    c0010829 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c00107ee:	3c 0a                	cmp    al,0xa
c00107f0:	75 40                	jne    c0010832 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c00107f2:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00107f8:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010802:	8d 50 01             	lea    edx,[eax+0x1]
c0010805:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c001080b:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010811:	75 12                	jne    c0010825 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010813:	83 ec 0c             	sub    esp,0xc
c0010816:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c001081c:	53                   	push   ebx
c001081d:	e8 ee fa ff ff       	call   c0010310 <VgaText::scrollScreen()>
c0010822:	83 c4 10             	add    esp,0x10
c0010825:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010829:	83 c4 08             	add    esp,0x8
c001082c:	5b                   	pop    ebx
c001082d:	e9 54 f9 ff ff       	jmp    c0010186 <VgaText::updateCursor()>
c0010832:	3c 08                	cmp    al,0x8
c0010834:	75 31                	jne    c0010867 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010836:	50                   	push   eax
c0010837:	50                   	push   eax
c0010838:	6a 01                	push   0x1
c001083a:	53                   	push   ebx
c001083b:	e8 34 ff ff ff       	call   c0010774 <VgaText::decrementCursor(bool)>
c0010840:	5a                   	pop    edx
c0010841:	59                   	pop    ecx
c0010842:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010848:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c001084e:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010854:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c001085a:	6a 20                	push   0x20
c001085c:	53                   	push   ebx
c001085d:	e8 54 fb ff ff       	call   c00103b6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010862:	83 c4 28             	add    esp,0x28
c0010865:	5b                   	pop    ebx
c0010866:	c3                   	ret    
c0010867:	83 ec 08             	sub    esp,0x8
c001086a:	0f be c0             	movsx  eax,al
c001086d:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010873:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010879:	51                   	push   ecx
c001087a:	52                   	push   edx
c001087b:	50                   	push   eax
c001087c:	53                   	push   ebx
c001087d:	e8 34 fb ff ff       	call   c00103b6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010882:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010886:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c001088e:	83 c4 28             	add    esp,0x28
c0010891:	5b                   	pop    ebx
c0010892:	e9 ed fb ff ff       	jmp    c0010484 <VgaText::incrementCursor(bool)>
c0010897:	90                   	nop

c0010898 <VgaText::isShowingCursor()>:
c0010898:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001089c:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c00108a2:	c3                   	ret    
c00108a3:	90                   	nop

c00108a4 <VgaText::isBlinkDisabled()>:
c00108a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108a8:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c00108ae:	83 f0 01             	xor    eax,0x1
c00108b1:	c3                   	ret    

c00108b2 <VgaText::setCursorHeight(int)>:
c00108b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00108ba:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c00108c0:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c00108c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00108cb:	e9 d0 f8 ff ff       	jmp    c00101a0 <VgaText::showCursor(bool)>

c00108d0 <VgaText::getCursorHeight()>:
c00108d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108d4:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c00108da:	c3                   	ret    

c00108db <setActiveTerminal(VgaText*)>:
c00108db:	53                   	push   ebx
c00108dc:	83 ec 08             	sub    esp,0x8
c00108df:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108e3:	85 db                	test   ebx,ebx
c00108e5:	75 11                	jne    c00108f8 <setActiveTerminal(VgaText*)+0x1d>
c00108e7:	c7 44 24 10 6c 8c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028c6c
c00108ef:	83 c4 08             	add    esp,0x8
c00108f2:	5b                   	pop    ebx
c00108f3:	e9 73 8f 00 00       	jmp    c001986b <Krnl::panic(char const*)>
c00108f8:	50                   	push   eax
c00108f9:	50                   	push   eax
c00108fa:	53                   	push   ebx
c00108fb:	68 7a 8c 02 c0       	push   0xc0028c7a
c0010900:	e8 4c 1e 00 00       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0010905:	a1 e4 c9 02 c0       	mov    eax,ds:0xc002c9e4
c001090a:	83 c4 10             	add    esp,0x10
c001090d:	85 c0                	test   eax,eax
c001090f:	74 0c                	je     c001091d <setActiveTerminal(VgaText*)+0x42>
c0010911:	83 ec 0c             	sub    esp,0xc
c0010914:	50                   	push   eax
c0010915:	e8 6c f8 ff ff       	call   c0010186 <VgaText::updateCursor()>
c001091a:	83 c4 10             	add    esp,0x10
c001091d:	89 1d e4 c9 02 c0    	mov    DWORD PTR ds:0xc002c9e4,ebx
c0010923:	51                   	push   ecx
c0010924:	51                   	push   ecx
c0010925:	53                   	push   ebx
c0010926:	68 92 8c 02 c0       	push   0xc0028c92
c001092b:	e8 21 1e 00 00       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0010930:	83 c4 0c             	add    esp,0xc
c0010933:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010939:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c001093f:	53                   	push   ebx
c0010940:	e8 e9 fa ff ff       	call   c001042e <VgaText::setCursor(int, int)>
c0010945:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010948:	e8 57 ff ff ff       	call   c00108a4 <VgaText::isBlinkDisabled()>
c001094d:	5a                   	pop    edx
c001094e:	0f b6 c0             	movzx  eax,al
c0010951:	59                   	pop    ecx
c0010952:	50                   	push   eax
c0010953:	53                   	push   ebx
c0010954:	e8 57 f8 ff ff       	call   c00101b0 <VgaText::disableBlink(bool)>
c0010959:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001095c:	e8 6f ff ff ff       	call   c00108d0 <VgaText::getCursorHeight()>
c0010961:	5a                   	pop    edx
c0010962:	59                   	pop    ecx
c0010963:	50                   	push   eax
c0010964:	53                   	push   ebx
c0010965:	e8 48 ff ff ff       	call   c00108b2 <VgaText::setCursorHeight(int)>
c001096a:	83 c4 10             	add    esp,0x10
c001096d:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010974:	75 0a                	jne    c0010980 <setActiveTerminal(VgaText*)+0xa5>
c0010976:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010980:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010984:	83 c4 08             	add    esp,0x8
c0010987:	5b                   	pop    ebx
c0010988:	e9 a5 f7 ff ff       	jmp    c0010132 <VgaText::load()>

c001098d <doTerminalCycle()>:
c001098d:	83 ec 18             	sub    esp,0x18
c0010990:	a1 e0 c9 02 c0       	mov    eax,ds:0xc002c9e0
c0010995:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c001099b:	50                   	push   eax
c001099c:	a3 e0 c9 02 c0       	mov    ds:0xc002c9e0,eax
c00109a1:	e8 35 ff ff ff       	call   c00108db <setActiveTerminal(VgaText*)>
c00109a6:	83 c4 1c             	add    esp,0x1c
c00109a9:	c3                   	ret    

c00109aa <VgaText::doUpdate()>:
c00109aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00109ae:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c00109b4:	85 c0                	test   eax,eax
c00109b6:	74 02                	je     c00109ba <VgaText::doUpdate()+0x10>
c00109b8:	ff e0                	jmp    eax
c00109ba:	c3                   	ret    
c00109bb:	90                   	nop

c00109bc <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00109bc:	55                   	push   ebp
c00109bd:	57                   	push   edi
c00109be:	56                   	push   esi
c00109bf:	53                   	push   ebx
c00109c0:	83 ec 1c             	sub    esp,0x1c
c00109c3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00109c7:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00109cc:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c00109d3:	8d 7d 0c             	lea    edi,[ebp+0xc]
c00109d6:	50                   	push   eax
c00109d7:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00109dc:	50                   	push   eax
c00109dd:	e8 1c f9 ff ff       	call   c00102fe <VgaText::combineColours(unsigned char, unsigned char)>
c00109e2:	59                   	pop    ecx
c00109e3:	0f b6 c0             	movzx  eax,al
c00109e6:	5b                   	pop    ebx
c00109e7:	31 c9                	xor    ecx,ecx
c00109e9:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c00109f1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00109f5:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c00109fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00109ff:	0f b7 db             	movzx  ebx,bx
c0010a02:	01 db                	add    ebx,ebx
c0010a04:	01 fb                	add    ebx,edi
c0010a06:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010a09:	84 c0                	test   al,al
c0010a0b:	0f 84 38 01 00 00    	je     c0010b49 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010a11:	3c 0d                	cmp    al,0xd
c0010a13:	75 0f                	jne    c0010a24 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010a15:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010a1f:	e9 1f 01 00 00       	jmp    c0010b43 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010a24:	3c 0a                	cmp    al,0xa
c0010a26:	75 5b                	jne    c0010a83 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010a28:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010a2e:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010a38:	8d 48 01             	lea    ecx,[eax+0x1]
c0010a3b:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010a41:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010a47:	75 12                	jne    c0010a5b <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010a49:	83 ec 0c             	sub    esp,0xc
c0010a4c:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010a52:	55                   	push   ebp
c0010a53:	e8 b8 f8 ff ff       	call   c0010310 <VgaText::scrollScreen()>
c0010a58:	83 c4 10             	add    esp,0x10
c0010a5b:	83 ec 0c             	sub    esp,0xc
c0010a5e:	55                   	push   ebp
c0010a5f:	e8 22 f7 ff ff       	call   c0010186 <VgaText::updateCursor()>
c0010a64:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010a6c:	83 c4 10             	add    esp,0x10
c0010a6f:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010a75:	31 c9                	xor    ecx,ecx
c0010a77:	0f b7 db             	movzx  ebx,bx
c0010a7a:	01 db                	add    ebx,ebx
c0010a7c:	01 fb                	add    ebx,edi
c0010a7e:	e9 c0 00 00 00       	jmp    c0010b43 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010a83:	3c 08                	cmp    al,0x8
c0010a85:	75 4e                	jne    c0010ad5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010a87:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010a8b:	53                   	push   ebx
c0010a8c:	53                   	push   ebx
c0010a8d:	6a 01                	push   0x1
c0010a8f:	55                   	push   ebp
c0010a90:	e8 df fc ff ff       	call   c0010774 <VgaText::decrementCursor(bool)>
c0010a95:	58                   	pop    eax
c0010a96:	5a                   	pop    edx
c0010a97:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010a9d:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010aa3:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010aa9:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010aaf:	6a 20                	push   0x20
c0010ab1:	55                   	push   ebp
c0010ab2:	e8 ff f8 ff ff       	call   c00103b6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010ab7:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010abf:	83 c4 20             	add    esp,0x20
c0010ac2:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010ac8:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010acc:	0f b7 db             	movzx  ebx,bx
c0010acf:	01 db                	add    ebx,ebx
c0010ad1:	01 fb                	add    ebx,edi
c0010ad3:	eb 6e                	jmp    c0010b43 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ad5:	51                   	push   ecx
c0010ad6:	51                   	push   ecx
c0010ad7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010adb:	50                   	push   eax
c0010adc:	e8 c3 f8 ff ff       	call   c00103a4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ae1:	83 c4 10             	add    esp,0x10
c0010ae4:	66 89 03             	mov    WORD PTR [ebx],ax
c0010ae7:	39 2d e4 c9 02 c0    	cmp    DWORD PTR ds:0xc002c9e4,ebp
c0010aed:	75 2a                	jne    c0010b19 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010aef:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010af5:	85 c0                	test   eax,eax
c0010af7:	74 20                	je     c0010b19 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010af9:	52                   	push   edx
c0010afa:	52                   	push   edx
c0010afb:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010b01:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010b07:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010b0b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010b0f:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010b12:	51                   	push   ecx
c0010b13:	55                   	push   ebp
c0010b14:	ff d0                	call   eax
c0010b16:	83 c4 20             	add    esp,0x20
c0010b19:	83 c3 02             	add    ebx,0x2
c0010b1c:	50                   	push   eax
c0010b1d:	50                   	push   eax
c0010b1e:	6a 00                	push   0x0
c0010b20:	55                   	push   ebp
c0010b21:	e8 5e f9 ff ff       	call   c0010484 <VgaText::incrementCursor(bool)>
c0010b26:	83 c4 10             	add    esp,0x10
c0010b29:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010b30:	75 0f                	jne    c0010b41 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010b32:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010b3a:	0f b7 db             	movzx  ebx,bx
c0010b3d:	01 db                	add    ebx,ebx
c0010b3f:	01 fb                	add    ebx,edi
c0010b41:	b1 01                	mov    cl,0x1
c0010b43:	46                   	inc    esi
c0010b44:	e9 bd fe ff ff       	jmp    c0010a06 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010b49:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010b4d:	83 ec 0c             	sub    esp,0xc
c0010b50:	55                   	push   ebp
c0010b51:	e8 30 f6 ff ff       	call   c0010186 <VgaText::updateCursor()>
c0010b56:	83 c4 10             	add    esp,0x10
c0010b59:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010b5d:	84 c9                	test   cl,cl
c0010b5f:	74 0c                	je     c0010b6d <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010b61:	83 ec 0c             	sub    esp,0xc
c0010b64:	55                   	push   ebp
c0010b65:	e8 40 fe ff ff       	call   c00109aa <VgaText::doUpdate()>
c0010b6a:	83 c4 10             	add    esp,0x10
c0010b6d:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010b74:	83 c4 1c             	add    esp,0x1c
c0010b77:	5b                   	pop    ebx
c0010b78:	5e                   	pop    esi
c0010b79:	5f                   	pop    edi
c0010b7a:	5d                   	pop    ebp
c0010b7b:	c3                   	ret    

c0010b7c <VgaText::clearScreen()>:
c0010b7c:	57                   	push   edi
c0010b7d:	56                   	push   esi
c0010b7e:	31 f6                	xor    esi,esi
c0010b80:	53                   	push   ebx
c0010b81:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b85:	52                   	push   edx
c0010b86:	6a 00                	push   0x0
c0010b88:	6a 00                	push   0x0
c0010b8a:	53                   	push   ebx
c0010b8b:	e8 9e f8 ff ff       	call   c001042e <VgaText::setCursor(int, int)>
c0010b90:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010b97:	83 c4 10             	add    esp,0x10
c0010b9a:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010ba0:	7e 26                	jle    c0010bc8 <VgaText::clearScreen()+0x4c>
c0010ba2:	31 ff                	xor    edi,edi
c0010ba4:	50                   	push   eax
c0010ba5:	50                   	push   eax
c0010ba6:	56                   	push   esi
c0010ba7:	57                   	push   edi
c0010ba8:	47                   	inc    edi
c0010ba9:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010baf:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010bb5:	6a 20                	push   0x20
c0010bb7:	53                   	push   ebx
c0010bb8:	e8 f9 f7 ff ff       	call   c00103b6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010bbd:	83 c4 20             	add    esp,0x20
c0010bc0:	83 ff 50             	cmp    edi,0x50
c0010bc3:	75 df                	jne    c0010ba4 <VgaText::clearScreen()+0x28>
c0010bc5:	46                   	inc    esi
c0010bc6:	eb d2                	jmp    c0010b9a <VgaText::clearScreen()+0x1e>
c0010bc8:	83 ec 0c             	sub    esp,0xc
c0010bcb:	53                   	push   ebx
c0010bcc:	e8 d9 fd ff ff       	call   c00109aa <VgaText::doUpdate()>
c0010bd1:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010bd8:	83 c4 10             	add    esp,0x10
c0010bdb:	5b                   	pop    ebx
c0010bdc:	5e                   	pop    esi
c0010bdd:	5f                   	pop    edi
c0010bde:	c3                   	ret    
c0010bdf:	90                   	nop

c0010be0 <VgaText::putchar(char)>:
c0010be0:	56                   	push   esi
c0010be1:	53                   	push   ebx
c0010be2:	83 ec 14             	sub    esp,0x14
c0010be5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010be9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010bed:	3c 5b                	cmp    al,0x5b
c0010bef:	75 21                	jne    c0010c12 <VgaText::putchar(char)+0x32>
c0010bf1:	80 bb dd 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdd],0x0
c0010bf8:	74 28                	je     c0010c22 <VgaText::putchar(char)+0x42>
c0010bfa:	66 c7 83 dd 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdd],0x100
c0010c03:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0010c0d:	e9 e2 00 00 00       	jmp    c0010cf4 <VgaText::putchar(char)+0x114>
c0010c12:	3c 1b                	cmp    al,0x1b
c0010c14:	75 0c                	jne    c0010c22 <VgaText::putchar(char)+0x42>
c0010c16:	c6 83 dd 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdd],0x1
c0010c1d:	e9 d2 00 00 00       	jmp    c0010cf4 <VgaText::putchar(char)+0x114>
c0010c22:	8a 8b de 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfde]
c0010c28:	84 c9                	test   cl,cl
c0010c2a:	0f 84 ab 00 00 00    	je     c0010cdb <VgaText::putchar(char)+0xfb>
c0010c30:	8d 50 c0             	lea    edx,[eax-0x40]
c0010c33:	80 fa 3e             	cmp    dl,0x3e
c0010c36:	0f 87 82 00 00 00    	ja     c0010cbe <VgaText::putchar(char)+0xde>
c0010c3c:	3c 6d                	cmp    al,0x6d
c0010c3e:	75 4d                	jne    c0010c8d <VgaText::putchar(char)+0xad>
c0010c40:	31 f6                	xor    esi,esi
c0010c42:	31 d2                	xor    edx,edx
c0010c44:	31 c0                	xor    eax,eax
c0010c46:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0010c4c:	7e 30                	jle    c0010c7e <VgaText::putchar(char)+0x9e>
c0010c4e:	0f be 94 33 df 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfdf]
c0010c56:	80 fa 3b             	cmp    dl,0x3b
c0010c59:	75 17                	jne    c0010c72 <VgaText::putchar(char)+0x92>
c0010c5b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010c5f:	50                   	push   eax
c0010c60:	53                   	push   ebx
c0010c61:	e8 84 f5 ff ff       	call   c00101ea <VgaText::doANSI_SGR(int)>
c0010c66:	59                   	pop    ecx
c0010c67:	31 d2                	xor    edx,edx
c0010c69:	58                   	pop    eax
c0010c6a:	31 c0                	xor    eax,eax
c0010c6c:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010c70:	eb 09                	jmp    c0010c7b <VgaText::putchar(char)+0x9b>
c0010c72:	6b c0 0a             	imul   eax,eax,0xa
c0010c75:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010c79:	88 ca                	mov    dl,cl
c0010c7b:	46                   	inc    esi
c0010c7c:	eb c8                	jmp    c0010c46 <VgaText::putchar(char)+0x66>
c0010c7e:	84 d2                	test   dl,dl
c0010c80:	74 31                	je     c0010cb3 <VgaText::putchar(char)+0xd3>
c0010c82:	50                   	push   eax
c0010c83:	53                   	push   ebx
c0010c84:	e8 61 f5 ff ff       	call   c00101ea <VgaText::doANSI_SGR(int)>
c0010c89:	58                   	pop    eax
c0010c8a:	5a                   	pop    edx
c0010c8b:	eb 26                	jmp    c0010cb3 <VgaText::putchar(char)+0xd3>
c0010c8d:	3c 4a                	cmp    al,0x4a
c0010c8f:	75 22                	jne    c0010cb3 <VgaText::putchar(char)+0xd3>
c0010c91:	80 bb df 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfdf],0x32
c0010c98:	75 19                	jne    c0010cb3 <VgaText::putchar(char)+0xd3>
c0010c9a:	83 ec 0c             	sub    esp,0xc
c0010c9d:	53                   	push   ebx
c0010c9e:	e8 d9 fe ff ff       	call   c0010b7c <VgaText::clearScreen()>
c0010ca3:	83 c4 0c             	add    esp,0xc
c0010ca6:	6a 00                	push   0x0
c0010ca8:	6a 00                	push   0x0
c0010caa:	53                   	push   ebx
c0010cab:	e8 7e f7 ff ff       	call   c001042e <VgaText::setCursor(int, int)>
c0010cb0:	83 c4 10             	add    esp,0x10
c0010cb3:	66 c7 83 dd 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdd],0x0
c0010cbc:	eb 36                	jmp    c0010cf4 <VgaText::putchar(char)+0x114>
c0010cbe:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0010cc4:	83 fa 0e             	cmp    edx,0xe
c0010cc7:	7f 2b                	jg     c0010cf4 <VgaText::putchar(char)+0x114>
c0010cc9:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010ccc:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0010cd2:	88 84 13 df 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfdf],al
c0010cd9:	eb 19                	jmp    c0010cf4 <VgaText::putchar(char)+0x114>
c0010cdb:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010ce1:	0f be c0             	movsx  eax,al
c0010ce4:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010cea:	50                   	push   eax
c0010ceb:	53                   	push   ebx
c0010cec:	e8 ab fa ff ff       	call   c001079c <VgaText::putchar(char, VgaColour, VgaColour)>
c0010cf1:	83 c4 10             	add    esp,0x10
c0010cf4:	83 c4 14             	add    esp,0x14
c0010cf7:	5b                   	pop    ebx
c0010cf8:	5e                   	pop    esi
c0010cf9:	c3                   	ret    

c0010cfa <VgaText::puts(char const*)>:
c0010cfa:	53                   	push   ebx
c0010cfb:	83 ec 08             	sub    esp,0x8
c0010cfe:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010d02:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010d05:	84 c0                	test   al,al
c0010d07:	74 12                	je     c0010d1b <VgaText::puts(char const*)+0x21>
c0010d09:	43                   	inc    ebx
c0010d0a:	51                   	push   ecx
c0010d0b:	51                   	push   ecx
c0010d0c:	50                   	push   eax
c0010d0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d11:	e8 ca fe ff ff       	call   c0010be0 <VgaText::putchar(char)>
c0010d16:	83 c4 10             	add    esp,0x10
c0010d19:	eb e7                	jmp    c0010d02 <VgaText::puts(char const*)+0x8>
c0010d1b:	83 c4 08             	add    esp,0x8
c0010d1e:	5b                   	pop    ebx
c0010d1f:	c3                   	ret    

c0010d20 <VgaText::putx(unsigned int)>:
c0010d20:	57                   	push   edi
c0010d21:	b9 11 00 00 00       	mov    ecx,0x11
c0010d26:	56                   	push   esi
c0010d27:	be ae 8c 02 c0       	mov    esi,0xc0028cae
c0010d2c:	53                   	push   ebx
c0010d2d:	83 ec 20             	sub    esp,0x20
c0010d30:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010d34:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010d38:	fc                   	cld    
c0010d39:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d3b:	be 08 00 00 00       	mov    esi,0x8
c0010d40:	50                   	push   eax
c0010d41:	50                   	push   eax
c0010d42:	89 d8                	mov    eax,ebx
c0010d44:	c1 e3 04             	shl    ebx,0x4
c0010d47:	c1 e8 1c             	shr    eax,0x1c
c0010d4a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010d4f:	50                   	push   eax
c0010d50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010d54:	e8 87 fe ff ff       	call   c0010be0 <VgaText::putchar(char)>
c0010d59:	83 c4 10             	add    esp,0x10
c0010d5c:	4e                   	dec    esi
c0010d5d:	75 e1                	jne    c0010d40 <VgaText::putx(unsigned int)+0x20>
c0010d5f:	83 c4 20             	add    esp,0x20
c0010d62:	5b                   	pop    ebx
c0010d63:	5e                   	pop    esi
c0010d64:	5f                   	pop    edi
c0010d65:	c3                   	ret    

c0010d66 <VgaText::VgaText(char const*)>:
c0010d66:	57                   	push   edi
c0010d67:	56                   	push   esi
c0010d68:	53                   	push   ebx
c0010d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d6d:	83 ec 08             	sub    esp,0x8
c0010d70:	6a 00                	push   0x0
c0010d72:	50                   	push   eax
c0010d73:	e8 a6 05 00 00       	call   c001131e <UnixFile::UnixFile(int)>
c0010d78:	83 c4 10             	add    esp,0x10
c0010d7b:	ba 14 8d 02 c0       	mov    edx,0xc0028d14
c0010d80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d84:	89 10                	mov    DWORD PTR [eax],edx
c0010d86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d8a:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0010d94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d98:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0010da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010da6:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0010dad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010db1:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010db8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dbc:	c6 80 de 0f 00 00 00 	mov    BYTE PTR [eax+0xfde],0x0
c0010dc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dc7:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0010dd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dd5:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0010ddf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010de3:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0010dea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dee:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0010df5:	b8 10 04 00 00       	mov    eax,0x410
c0010dfa:	66 8b 00             	mov    ax,WORD PTR [eax]
c0010dfd:	0f b7 c0             	movzx  eax,ax
c0010e00:	83 e0 30             	and    eax,0x30
c0010e03:	83 f8 30             	cmp    eax,0x30
c0010e06:	74 1a                	je     c0010e22 <VgaText::VgaText(char const*)+0xbc>
c0010e08:	a1 60 b8 02 c0       	mov    eax,ds:0xc002b860
c0010e0d:	2d 00 80 00 00       	sub    eax,0x8000
c0010e12:	a3 60 b8 02 c0       	mov    ds:0xc002b860,eax
c0010e17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e1b:	c6 80 dc 0f 00 00 01 	mov    BYTE PTR [eax+0xfdc],0x1
c0010e22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e26:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0010e2c:	bb c0 c9 02 c0       	mov    ebx,0xc002c9c0
c0010e31:	b8 08 00 00 00       	mov    eax,0x8
c0010e36:	fc                   	cld    
c0010e37:	89 d7                	mov    edi,edx
c0010e39:	89 de                	mov    esi,ebx
c0010e3b:	89 c1                	mov    ecx,eax
c0010e3d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010e3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e43:	05 1e 10 00 00       	add    eax,0x101e
c0010e48:	83 ec 08             	sub    esp,0x8
c0010e4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e4f:	50                   	push   eax
c0010e50:	e8 d5 f8 fe ff       	call   c000072a <strcpy>
c0010e55:	83 c4 10             	add    esp,0x10
c0010e58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e5c:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0010e66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e6a:	83 c0 0c             	add    eax,0xc
c0010e6d:	83 ec 04             	sub    esp,0x4
c0010e70:	68 00 0f 00 00       	push   0xf00
c0010e75:	6a 00                	push   0x0
c0010e77:	50                   	push   eax
c0010e78:	e8 0e f8 fe ff       	call   c000068b <memset>
c0010e7d:	83 c4 10             	add    esp,0x10
c0010e80:	83 ec 04             	sub    esp,0x4
c0010e83:	6a 00                	push   0x0
c0010e85:	6a 07                	push   0x7
c0010e87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e8b:	e8 4e f4 ff ff       	call   c00102de <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010e90:	83 c4 10             	add    esp,0x10
c0010e93:	83 ec 08             	sub    esp,0x8
c0010e96:	6a 02                	push   0x2
c0010e98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e9c:	e8 11 fa ff ff       	call   c00108b2 <VgaText::setCursorHeight(int)>
c0010ea1:	83 c4 10             	add    esp,0x10
c0010ea4:	83 ec 04             	sub    esp,0x4
c0010ea7:	6a 00                	push   0x0
c0010ea9:	6a 00                	push   0x0
c0010eab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010eaf:	e8 7a f5 ff ff       	call   c001042e <VgaText::setCursor(int, int)>
c0010eb4:	83 c4 10             	add    esp,0x10
c0010eb7:	83 ec 08             	sub    esp,0x8
c0010eba:	6a 01                	push   0x1
c0010ebc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ec0:	e8 db f2 ff ff       	call   c00101a0 <VgaText::showCursor(bool)>
c0010ec5:	83 c4 10             	add    esp,0x10
c0010ec8:	83 ec 08             	sub    esp,0x8
c0010ecb:	6a 01                	push   0x1
c0010ecd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ed1:	e8 da f2 ff ff       	call   c00101b0 <VgaText::disableBlink(bool)>
c0010ed6:	83 c4 10             	add    esp,0x10
c0010ed9:	83 ec 0c             	sub    esp,0xc
c0010edc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ee0:	e8 97 fc ff ff       	call   c0010b7c <VgaText::clearScreen()>
c0010ee5:	83 c4 10             	add    esp,0x10
c0010ee8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010eec:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0010ef3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ef7:	05 9e 10 00 00       	add    eax,0x109e
c0010efc:	83 ec 04             	sub    esp,0x4
c0010eff:	68 96 00 00 00       	push   0x96
c0010f04:	6a 00                	push   0x0
c0010f06:	50                   	push   eax
c0010f07:	e8 7f f7 fe ff       	call   c000068b <memset>
c0010f0c:	83 c4 10             	add    esp,0x10
c0010f0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f13:	05 34 11 00 00       	add    eax,0x1134
c0010f18:	83 ec 04             	sub    esp,0x4
c0010f1b:	68 2c 01 00 00       	push   0x12c
c0010f20:	6a 00                	push   0x0
c0010f22:	50                   	push   eax
c0010f23:	e8 63 f7 fe ff       	call   c000068b <memset>
c0010f28:	83 c4 10             	add    esp,0x10
c0010f2b:	90                   	nop
c0010f2c:	5b                   	pop    ebx
c0010f2d:	5e                   	pop    esi
c0010f2e:	5f                   	pop    edi
c0010f2f:	c3                   	ret    

c0010f30 <VgaText::receiveKey(unsigned char)>:
c0010f30:	55                   	push   ebp
c0010f31:	57                   	push   edi
c0010f32:	56                   	push   esi
c0010f33:	53                   	push   ebx
c0010f34:	83 ec 1c             	sub    esp,0x1c
c0010f37:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010f3b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010f3f:	84 db                	test   bl,bl
c0010f41:	0f 84 c9 00 00 00    	je     c0011010 <VgaText::receiveKey(unsigned char)+0xe0>
c0010f47:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0010f4d:	80 fb 08             	cmp    bl,0x8
c0010f50:	75 2c                	jne    c0010f7e <VgaText::receiveKey(unsigned char)+0x4e>
c0010f52:	83 ec 0c             	sub    esp,0xc
c0010f55:	57                   	push   edi
c0010f56:	e8 4d f7 fe ff       	call   c00006a8 <strlen>
c0010f5b:	83 c4 10             	add    esp,0x10
c0010f5e:	85 c0                	test   eax,eax
c0010f60:	74 41                	je     c0010fa3 <VgaText::receiveKey(unsigned char)+0x73>
c0010f62:	50                   	push   eax
c0010f63:	50                   	push   eax
c0010f64:	6a 08                	push   0x8
c0010f66:	56                   	push   esi
c0010f67:	e8 74 fc ff ff       	call   c0010be0 <VgaText::putchar(char)>
c0010f6c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010f6f:	e8 34 f7 fe ff       	call   c00006a8 <strlen>
c0010f74:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0010f7c:	eb 22                	jmp    c0010fa0 <VgaText::receiveKey(unsigned char)+0x70>
c0010f7e:	0f be c3             	movsx  eax,bl
c0010f81:	52                   	push   edx
c0010f82:	52                   	push   edx
c0010f83:	50                   	push   eax
c0010f84:	56                   	push   esi
c0010f85:	e8 56 fc ff ff       	call   c0010be0 <VgaText::putchar(char)>
c0010f8a:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010f8e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010f93:	59                   	pop    ecx
c0010f94:	5d                   	pop    ebp
c0010f95:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010f99:	50                   	push   eax
c0010f9a:	57                   	push   edi
c0010f9b:	e8 41 f8 fe ff       	call   c00007e1 <strcat>
c0010fa0:	83 c4 10             	add    esp,0x10
c0010fa3:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0010faa:	75 05                	jne    c0010fb1 <VgaText::receiveKey(unsigned char)+0x81>
c0010fac:	80 fb 0a             	cmp    bl,0xa
c0010faf:	75 53                	jne    c0011004 <VgaText::receiveKey(unsigned char)+0xd4>
c0010fb1:	83 ec 0c             	sub    esp,0xc
c0010fb4:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0010fba:	53                   	push   ebx
c0010fbb:	e8 e8 f6 fe ff       	call   c00006a8 <strlen>
c0010fc0:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010fc3:	89 c5                	mov    ebp,eax
c0010fc5:	e8 de f6 fe ff       	call   c00006a8 <strlen>
c0010fca:	83 c4 10             	add    esp,0x10
c0010fcd:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010fd1:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010fd6:	76 10                	jbe    c0010fe8 <VgaText::receiveKey(unsigned char)+0xb8>
c0010fd8:	83 ec 0c             	sub    esp,0xc
c0010fdb:	68 bf 8c 02 c0       	push   0xc0028cbf
c0010fe0:	e8 86 88 00 00       	call   c001986b <Krnl::panic(char const*)>
c0010fe5:	83 c4 10             	add    esp,0x10
c0010fe8:	50                   	push   eax
c0010fe9:	50                   	push   eax
c0010fea:	57                   	push   edi
c0010feb:	53                   	push   ebx
c0010fec:	e8 f0 f7 fe ff       	call   c00007e1 <strcat>
c0010ff1:	83 c4 0c             	add    esp,0xc
c0010ff4:	68 96 00 00 00       	push   0x96
c0010ff9:	6a 00                	push   0x0
c0010ffb:	57                   	push   edi
c0010ffc:	e8 8a f6 fe ff       	call   c000068b <memset>
c0011001:	83 c4 10             	add    esp,0x10
c0011004:	83 ec 0c             	sub    esp,0xc
c0011007:	56                   	push   esi
c0011008:	e8 9d f9 ff ff       	call   c00109aa <VgaText::doUpdate()>
c001100d:	83 c4 10             	add    esp,0x10
c0011010:	83 c4 1c             	add    esp,0x1c
c0011013:	5b                   	pop    ebx
c0011014:	5e                   	pop    esi
c0011015:	5f                   	pop    edi
c0011016:	5d                   	pop    ebp
c0011017:	c3                   	ret    

c0011018 <VgaText::write(unsigned long long, void*, int*)>:
c0011018:	55                   	push   ebp
c0011019:	57                   	push   edi
c001101a:	56                   	push   esi
c001101b:	53                   	push   ebx
c001101c:	83 ec 0c             	sub    esp,0xc
c001101f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011023:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011027:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001102b:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0011032:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0011035:	39 eb                	cmp    ebx,ebp
c0011037:	74 13                	je     c001104c <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011039:	43                   	inc    ebx
c001103a:	50                   	push   eax
c001103b:	50                   	push   eax
c001103c:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0011040:	50                   	push   eax
c0011041:	56                   	push   esi
c0011042:	e8 99 fb ff ff       	call   c0010be0 <VgaText::putchar(char)>
c0011047:	83 c4 10             	add    esp,0x10
c001104a:	eb e9                	jmp    c0011035 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c001104c:	83 ec 0c             	sub    esp,0xc
c001104f:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0011056:	56                   	push   esi
c0011057:	e8 4e f9 ff ff       	call   c00109aa <VgaText::doUpdate()>
c001105c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011060:	89 38                	mov    DWORD PTR [eax],edi
c0011062:	83 c4 1c             	add    esp,0x1c
c0011065:	31 c0                	xor    eax,eax
c0011067:	5b                   	pop    ebx
c0011068:	5e                   	pop    esi
c0011069:	5f                   	pop    edi
c001106a:	5d                   	pop    ebp
c001106b:	c3                   	ret    

c001106c <newTerminal(char*)>:
c001106c:	83 ec 28             	sub    esp,0x28
c001106f:	68 60 12 00 00       	push   0x1260
c0011074:	e8 5b e4 ff ff       	call   c000f4d4 <malloc>
c0011079:	5a                   	pop    edx
c001107a:	59                   	pop    ecx
c001107b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001107f:	50                   	push   eax
c0011080:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011084:	e8 dd fc ff ff       	call   c0010d66 <VgaText::VgaText(char const*)>
c0011089:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001108d:	83 c4 2c             	add    esp,0x2c
c0011090:	c3                   	ret    
c0011091:	90                   	nop

c0011092 <TSS::TSS()>:
c0011092:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011096:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001109d:	90                   	nop
c001109e:	c3                   	ret    
c001109f:	90                   	nop

c00110a0 <TSS::setESP(unsigned long)>:
c00110a0:	55                   	push   ebp
c00110a1:	89 e5                	mov    ebp,esp
c00110a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110a9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00110ac:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00110af:	90                   	nop
c00110b0:	5d                   	pop    ebp
c00110b1:	c3                   	ret    

c00110b2 <TSS::flush()>:
c00110b2:	55                   	push   ebp
c00110b3:	89 e5                	mov    ebp,esp
c00110b5:	83 ec 10             	sub    esp,0x10
c00110b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00110bd:	83 c8 03             	or     eax,0x3
c00110c0:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00110c4:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00110c8:	66 89 d0             	mov    ax,dx
c00110cb:	0f 00 d8             	ltr    ax
c00110ce:	90                   	nop
c00110cf:	c9                   	leave  
c00110d0:	c3                   	ret    
c00110d1:	90                   	nop

c00110d2 <TSS::setup(unsigned long, unsigned long)>:
c00110d2:	55                   	push   ebp
c00110d3:	89 e5                	mov    ebp,esp
c00110d5:	83 ec 18             	sub    esp,0x18
c00110d8:	83 ec 0c             	sub    esp,0xc
c00110db:	6a 68                	push   0x68
c00110dd:	e8 f2 e3 ff ff       	call   c000f4d4 <malloc>
c00110e2:	83 c4 10             	add    esp,0x10
c00110e5:	89 c2                	mov    edx,eax
c00110e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110ea:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00110ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110f3:	83 ec 04             	sub    esp,0x4
c00110f6:	6a 68                	push   0x68
c00110f8:	6a 00                	push   0x0
c00110fa:	50                   	push   eax
c00110fb:	e8 8b f5 fe ff       	call   c000068b <memset>
c0011100:	83 c4 10             	add    esp,0x10
c0011103:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011106:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011109:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c001110f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011112:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011115:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c001111b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001111e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011121:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011124:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011127:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001112a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001112d:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011133:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011136:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011139:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c001113f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011142:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011145:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c001114b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001114e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011151:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011157:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001115a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001115d:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011163:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011166:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011169:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c001116f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011172:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011175:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011178:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001117b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001117e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011181:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011184:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011187:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001118a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001118d:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011194:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011197:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001119a:	0f 20 da             	mov    edx,cr3
c001119d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00111a0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00111a3:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00111a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111a9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111ac:	83 ec 08             	sub    esp,0x8
c00111af:	50                   	push   eax
c00111b0:	8d 45 ec             	lea    eax,[ebp-0x14]
c00111b3:	50                   	push   eax
c00111b4:	e8 f9 da ff ff       	call   c000ecb2 <GDTEntry::setBase(unsigned int)>
c00111b9:	83 c4 10             	add    esp,0x10
c00111bc:	83 ec 08             	sub    esp,0x8
c00111bf:	6a 68                	push   0x68
c00111c1:	8d 45 ec             	lea    eax,[ebp-0x14]
c00111c4:	50                   	push   eax
c00111c5:	e8 04 db ff ff       	call   c000ecce <GDTEntry::setLimit(unsigned int)>
c00111ca:	83 c4 10             	add    esp,0x10
c00111cd:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00111d1:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00111d4:	83 e0 0f             	and    eax,0xf
c00111d7:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00111da:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00111dd:	83 c8 40             	or     eax,0x40
c00111e0:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00111e3:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c00111e8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00111ee:	05 78 01 00 00       	add    eax,0x178
c00111f3:	83 ec 04             	sub    esp,0x4
c00111f6:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00111f9:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00111fc:	50                   	push   eax
c00111fd:	e8 00 db ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c0011202:	83 c4 10             	add    esp,0x10
c0011205:	89 c2                	mov    edx,eax
c0011207:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001120a:	89 10                	mov    DWORD PTR [eax],edx
c001120c:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c0011211:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011217:	05 78 01 00 00       	add    eax,0x178
c001121c:	83 ec 0c             	sub    esp,0xc
c001121f:	50                   	push   eax
c0011220:	e8 21 db ff ff       	call   c000ed46 <GDT::flush()>
c0011225:	83 c4 10             	add    esp,0x10
c0011228:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001122b:	8b 00                	mov    eax,DWORD PTR [eax]
c001122d:	83 ec 08             	sub    esp,0x8
c0011230:	50                   	push   eax
c0011231:	68 28 8d 02 c0       	push   0xc0028d28
c0011236:	e8 16 15 00 00       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001123b:	83 c4 10             	add    esp,0x10
c001123e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011241:	8b 00                	mov    eax,DWORD PTR [eax]
c0011243:	c9                   	leave  
c0011244:	c3                   	ret    
c0011245:	90                   	nop

c0011246 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011246:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001124a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001124e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011251:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011256:	75 08                	jne    c0011260 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011258:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001125e:	eb 38                	jmp    c0011298 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011260:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011265:	75 17                	jne    c001127e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011267:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001126c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001126f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011275:	8b 10                	mov    edx,DWORD PTR [eax]
c0011277:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001127b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c001127e:	89 c1                	mov    ecx,eax
c0011280:	83 e1 fd             	and    ecx,0xfffffffd
c0011283:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011289:	74 cd                	je     c0011258 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001128b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011290:	83 e0 ef             	and    eax,0xffffffef
c0011293:	83 f8 08             	cmp    eax,0x8
c0011296:	76 c0                	jbe    c0011258 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011298:	31 c0                	xor    eax,eax
c001129a:	c3                   	ret    
c001129b:	90                   	nop

c001129c <ReservedFilename::isAtty()>:
c001129c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112a0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00112a3:	31 c0                	xor    eax,eax
c00112a5:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00112ab:	74 09                	je     c00112b6 <ReservedFilename::isAtty()+0x1a>
c00112ad:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00112b3:	0f 94 c0             	sete   al
c00112b6:	c3                   	ret    
c00112b7:	90                   	nop

c00112b8 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00112b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112bc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00112c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00112c7:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00112cc:	75 08                	jne    c00112d6 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00112ce:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00112d4:	eb 3d                	jmp    c0011313 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00112d6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00112db:	75 17                	jne    c00112f4 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00112dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00112e2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00112e5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00112eb:	8b 10                	mov    edx,DWORD PTR [eax]
c00112ed:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00112f1:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00112f4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00112f9:	75 04                	jne    c00112ff <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00112fb:	89 0a                	mov    DWORD PTR [edx],ecx
c00112fd:	eb 14                	jmp    c0011313 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00112ff:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011304:	74 c8                	je     c00112ce <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011306:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001130b:	83 e0 ef             	and    eax,0xffffffef
c001130e:	83 f8 08             	cmp    eax,0x8
c0011311:	76 bb                	jbe    c00112ce <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011313:	31 c0                	xor    eax,eax
c0011315:	c3                   	ret    

c0011316 <UnixFile::getFileDescriptor()>:
c0011316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001131a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001131d:	c3                   	ret    

c001131e <UnixFile::UnixFile(int)>:
c001131e:	53                   	push   ebx
c001131f:	83 ec 28             	sub    esp,0x28
c0011322:	ba 14 8e 02 c0       	mov    edx,0xc0028e14
c0011327:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001132b:	89 10                	mov    DWORD PTR [eax],edx
c001132d:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011335:	0f 8f 8c 01 00 00    	jg     c00114c7 <UnixFile::UnixFile(int)+0x1a9>
c001133b:	a1 c0 b8 02 c0       	mov    eax,ds:0xc002b8c0
c0011340:	8d 50 01             	lea    edx,[eax+0x1]
c0011343:	89 15 c0 b8 02 c0    	mov    DWORD PTR ds:0xc002b8c0,edx
c0011349:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001134d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011350:	83 ec 08             	sub    esp,0x8
c0011353:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011357:	68 78 ca 02 c0       	push   0xc002ca78
c001135c:	e8 8f 5d 01 00       	call   c00270f0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011361:	83 c4 10             	add    esp,0x10
c0011364:	a0 74 ca 02 c0       	mov    al,ds:0xc002ca74
c0011369:	83 f0 01             	xor    eax,0x1
c001136c:	84 c0                	test   al,al
c001136e:	0f 84 54 01 00 00    	je     c00114c8 <UnixFile::UnixFile(int)+0x1aa>
c0011374:	c6 05 74 ca 02 c0 01 	mov    BYTE PTR ds:0xc002ca74,0x1
c001137b:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011383:	83 ec 0c             	sub    esp,0xc
c0011386:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001138a:	e8 45 e1 ff ff       	call   c000f4d4 <malloc>
c001138f:	83 c4 10             	add    esp,0x10
c0011392:	89 c3                	mov    ebx,eax
c0011394:	83 ec 08             	sub    esp,0x8
c0011397:	68 03 ff ff 0f       	push   0xfffff03
c001139c:	53                   	push   ebx
c001139d:	e8 2c 01 00 00       	call   c00114ce <ReservedFilename::ReservedFilename(int)>
c00113a2:	83 c4 10             	add    esp,0x10
c00113a5:	89 1d 6c ca 02 c0    	mov    DWORD PTR ds:0xc002ca6c,ebx
c00113ab:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00113b3:	83 ec 0c             	sub    esp,0xc
c00113b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113ba:	e8 15 e1 ff ff       	call   c000f4d4 <malloc>
c00113bf:	83 c4 10             	add    esp,0x10
c00113c2:	89 c3                	mov    ebx,eax
c00113c4:	83 ec 08             	sub    esp,0x8
c00113c7:	68 01 ff ff 0f       	push   0xfffff01
c00113cc:	53                   	push   ebx
c00113cd:	e8 fc 00 00 00       	call   c00114ce <ReservedFilename::ReservedFilename(int)>
c00113d2:	83 c4 10             	add    esp,0x10
c00113d5:	89 1d 70 ca 02 c0    	mov    DWORD PTR ds:0xc002ca70,ebx
c00113db:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00113e3:	83 ec 0c             	sub    esp,0xc
c00113e6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00113ea:	e8 e5 e0 ff ff       	call   c000f4d4 <malloc>
c00113ef:	83 c4 10             	add    esp,0x10
c00113f2:	89 c3                	mov    ebx,eax
c00113f4:	83 ec 08             	sub    esp,0x8
c00113f7:	68 00 ff ff 0f       	push   0xfffff00
c00113fc:	53                   	push   ebx
c00113fd:	e8 cc 00 00 00       	call   c00114ce <ReservedFilename::ReservedFilename(int)>
c0011402:	83 c4 10             	add    esp,0x10
c0011405:	89 1d 64 ca 02 c0    	mov    DWORD PTR ds:0xc002ca64,ebx
c001140b:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011413:	83 ec 0c             	sub    esp,0xc
c0011416:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001141a:	e8 b5 e0 ff ff       	call   c000f4d4 <malloc>
c001141f:	83 c4 10             	add    esp,0x10
c0011422:	89 c3                	mov    ebx,eax
c0011424:	83 ec 08             	sub    esp,0x8
c0011427:	68 02 ff ff 0f       	push   0xfffff02
c001142c:	53                   	push   ebx
c001142d:	e8 9c 00 00 00       	call   c00114ce <ReservedFilename::ReservedFilename(int)>
c0011432:	83 c4 10             	add    esp,0x10
c0011435:	89 1d 68 ca 02 c0    	mov    DWORD PTR ds:0xc002ca68,ebx
c001143b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011443:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011448:	7f 7e                	jg     c00114c8 <UnixFile::UnixFile(int)+0x1aa>
c001144a:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011452:	83 ec 0c             	sub    esp,0xc
c0011455:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011459:	e8 76 e0 ff ff       	call   c000f4d4 <malloc>
c001145e:	83 c4 10             	add    esp,0x10
c0011461:	89 c3                	mov    ebx,eax
c0011463:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011467:	05 10 ff ff 0f       	add    eax,0xfffff10
c001146c:	83 ec 08             	sub    esp,0x8
c001146f:	50                   	push   eax
c0011470:	53                   	push   ebx
c0011471:	e8 58 00 00 00       	call   c00114ce <ReservedFilename::ReservedFilename(int)>
c0011476:	83 c4 10             	add    esp,0x10
c0011479:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001147d:	89 1c 85 40 ca 02 c0 	mov    DWORD PTR [eax*4-0x3ffd35c0],ebx
c0011484:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c001148c:	83 ec 0c             	sub    esp,0xc
c001148f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011493:	e8 3c e0 ff ff       	call   c000f4d4 <malloc>
c0011498:	83 c4 10             	add    esp,0x10
c001149b:	89 c3                	mov    ebx,eax
c001149d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114a1:	05 20 ff ff 0f       	add    eax,0xfffff20
c00114a6:	83 ec 08             	sub    esp,0x8
c00114a9:	50                   	push   eax
c00114aa:	53                   	push   ebx
c00114ab:	e8 1e 00 00 00       	call   c00114ce <ReservedFilename::ReservedFilename(int)>
c00114b0:	83 c4 10             	add    esp,0x10
c00114b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114b7:	89 1c 85 00 ca 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3600],ebx
c00114be:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00114c2:	e9 7c ff ff ff       	jmp    c0011443 <UnixFile::UnixFile(int)+0x125>
c00114c7:	90                   	nop
c00114c8:	83 c4 28             	add    esp,0x28
c00114cb:	5b                   	pop    ebx
c00114cc:	c3                   	ret    
c00114cd:	90                   	nop

c00114ce <ReservedFilename::ReservedFilename(int)>:
c00114ce:	83 ec 0c             	sub    esp,0xc
c00114d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114d5:	83 ec 08             	sub    esp,0x8
c00114d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114dc:	50                   	push   eax
c00114dd:	e8 3c fe ff ff       	call   c001131e <UnixFile::UnixFile(int)>
c00114e2:	83 c4 10             	add    esp,0x10
c00114e5:	ba 30 8e 02 c0       	mov    edx,0xc0028e30
c00114ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114ee:	89 10                	mov    DWORD PTR [eax],edx
c00114f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114f4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00114f8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114fb:	90                   	nop
c00114fc:	83 c4 0c             	add    esp,0xc
c00114ff:	c3                   	ret    

c0011500 <UnixFile::~UnixFile()>:
c0011500:	83 ec 1c             	sub    esp,0x1c
c0011503:	ba 14 8e 02 c0       	mov    edx,0xc0028e14
c0011508:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001150c:	89 10                	mov    DWORD PTR [eax],edx
c001150e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011512:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011515:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c001151a:	7f 73                	jg     c001158f <UnixFile::~UnixFile()+0x8f>
c001151c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011524:	83 ec 0c             	sub    esp,0xc
c0011527:	68 78 ca 02 c0       	push   0xc002ca78
c001152c:	e8 93 5c 01 00       	call   c00271c4 <LinkedList<UnixFile>::getFirstElement()>
c0011531:	83 c4 10             	add    esp,0x10
c0011534:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011538:	83 ec 0c             	sub    esp,0xc
c001153b:	68 78 ca 02 c0       	push   0xc002ca78
c0011540:	e8 87 5c 01 00       	call   c00271cc <LinkedList<UnixFile>::removeFirst()>
c0011545:	83 c4 10             	add    esp,0x10
c0011548:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001154c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011550:	74 40                	je     c0011592 <UnixFile::~UnixFile()+0x92>
c0011552:	83 ec 08             	sub    esp,0x8
c0011555:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011559:	68 78 ca 02 c0       	push   0xc002ca78
c001155e:	e8 8d 5b 01 00       	call   c00270f0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011563:	83 c4 10             	add    esp,0x10
c0011566:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001156a:	8d 50 01             	lea    edx,[eax+0x1]
c001156d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011571:	3d 88 13 00 00       	cmp    eax,0x1388
c0011576:	0f 94 c0             	sete   al
c0011579:	84 c0                	test   al,al
c001157b:	74 a7                	je     c0011524 <UnixFile::~UnixFile()+0x24>
c001157d:	83 ec 0c             	sub    esp,0xc
c0011580:	68 ec 8d 02 c0       	push   0xc0028dec
c0011585:	e8 e1 82 00 00       	call   c001986b <Krnl::panic(char const*)>
c001158a:	83 c4 10             	add    esp,0x10
c001158d:	eb 95                	jmp    c0011524 <UnixFile::~UnixFile()+0x24>
c001158f:	90                   	nop
c0011590:	eb 01                	jmp    c0011593 <UnixFile::~UnixFile()+0x93>
c0011592:	90                   	nop
c0011593:	90                   	nop
c0011594:	83 c4 1c             	add    esp,0x1c
c0011597:	c3                   	ret    

c0011598 <UnixFile::~UnixFile()>:
c0011598:	83 ec 0c             	sub    esp,0xc
c001159b:	83 ec 0c             	sub    esp,0xc
c001159e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115a2:	e8 59 ff ff ff       	call   c0011500 <UnixFile::~UnixFile()>
c00115a7:	83 c4 10             	add    esp,0x10
c00115aa:	83 ec 08             	sub    esp,0x8
c00115ad:	6a 0c                	push   0xc
c00115af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115b3:	e8 b9 10 00 00       	call   c0012671 <operator delete(void*, unsigned long)>
c00115b8:	83 c4 10             	add    esp,0x10
c00115bb:	83 c4 0c             	add    esp,0xc
c00115be:	c3                   	ret    
c00115bf:	90                   	nop

c00115c0 <ReservedFilename::~ReservedFilename()>:
c00115c0:	83 ec 0c             	sub    esp,0xc
c00115c3:	ba 30 8e 02 c0       	mov    edx,0xc0028e30
c00115c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115cc:	89 10                	mov    DWORD PTR [eax],edx
c00115ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115d2:	83 ec 0c             	sub    esp,0xc
c00115d5:	50                   	push   eax
c00115d6:	e8 25 ff ff ff       	call   c0011500 <UnixFile::~UnixFile()>
c00115db:	83 c4 10             	add    esp,0x10
c00115de:	90                   	nop
c00115df:	83 c4 0c             	add    esp,0xc
c00115e2:	c3                   	ret    
c00115e3:	90                   	nop

c00115e4 <ReservedFilename::~ReservedFilename()>:
c00115e4:	83 ec 0c             	sub    esp,0xc
c00115e7:	83 ec 0c             	sub    esp,0xc
c00115ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115ee:	e8 cd ff ff ff       	call   c00115c0 <ReservedFilename::~ReservedFilename()>
c00115f3:	83 c4 10             	add    esp,0x10
c00115f6:	83 ec 08             	sub    esp,0x8
c00115f9:	6a 0c                	push   0xc
c00115fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115ff:	e8 6d 10 00 00       	call   c0012671 <operator delete(void*, unsigned long)>
c0011604:	83 c4 10             	add    esp,0x10
c0011607:	83 c4 0c             	add    esp,0xc
c001160a:	c3                   	ret    

c001160b <getFromFileDescriptor(int)>:
c001160b:	53                   	push   ebx
c001160c:	83 ec 08             	sub    esp,0x8
c001160f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011613:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011619:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c001161f:	7f 2c                	jg     c001164d <getFromFileDescriptor(int)+0x42>
c0011621:	83 ec 0c             	sub    esp,0xc
c0011624:	68 78 ca 02 c0       	push   0xc002ca78
c0011629:	e8 96 5b 01 00       	call   c00271c4 <LinkedList<UnixFile>::getFirstElement()>
c001162e:	83 c4 10             	add    esp,0x10
c0011631:	85 c0                	test   eax,eax
c0011633:	75 04                	jne    c0011639 <getFromFileDescriptor(int)+0x2e>
c0011635:	31 c0                	xor    eax,eax
c0011637:	eb 6e                	jmp    c00116a7 <getFromFileDescriptor(int)+0x9c>
c0011639:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c001163c:	74 69                	je     c00116a7 <getFromFileDescriptor(int)+0x9c>
c001163e:	52                   	push   edx
c001163f:	52                   	push   edx
c0011640:	50                   	push   eax
c0011641:	68 78 ca 02 c0       	push   0xc002ca78
c0011646:	e8 23 5c 01 00       	call   c002726e <LinkedList<UnixFile>::getNext(UnixFile*)>
c001164b:	eb e1                	jmp    c001162e <getFromFileDescriptor(int)+0x23>
c001164d:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0011652:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011658:	74 4d                	je     c00116a7 <getFromFileDescriptor(int)+0x9c>
c001165a:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c001165f:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011665:	74 40                	je     c00116a7 <getFromFileDescriptor(int)+0x9c>
c0011667:	a1 68 ca 02 c0       	mov    eax,ds:0xc002ca68
c001166c:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011672:	74 33                	je     c00116a7 <getFromFileDescriptor(int)+0x9c>
c0011674:	a1 64 ca 02 c0       	mov    eax,ds:0xc002ca64
c0011679:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001167f:	74 26                	je     c00116a7 <getFromFileDescriptor(int)+0x9c>
c0011681:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011687:	83 f8 08             	cmp    eax,0x8
c001168a:	77 09                	ja     c0011695 <getFromFileDescriptor(int)+0x8a>
c001168c:	8b 04 85 40 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd35c0]
c0011693:	eb 12                	jmp    c00116a7 <getFromFileDescriptor(int)+0x9c>
c0011695:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c001169b:	83 fb 08             	cmp    ebx,0x8
c001169e:	77 95                	ja     c0011635 <getFromFileDescriptor(int)+0x2a>
c00116a0:	8b 04 9d 00 ca 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd3600]
c00116a7:	83 c4 08             	add    esp,0x8
c00116aa:	5b                   	pop    ebx
c00116ab:	c3                   	ret    

c00116ac <__static_initialization_and_destruction_0(int, int)>:
c00116ac:	83 ec 0c             	sub    esp,0xc
c00116af:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00116b4:	75 34                	jne    c00116ea <__static_initialization_and_destruction_0(int, int)+0x3e>
c00116b6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00116be:	75 2a                	jne    c00116ea <__static_initialization_and_destruction_0(int, int)+0x3e>
c00116c0:	83 ec 0c             	sub    esp,0xc
c00116c3:	68 78 ca 02 c0       	push   0xc002ca78
c00116c8:	e8 cb 59 01 00       	call   c0027098 <LinkedList<UnixFile>::LinkedList()>
c00116cd:	83 c4 10             	add    esp,0x10
c00116d0:	83 ec 04             	sub    esp,0x4
c00116d3:	68 48 b8 02 c0       	push   0xc002b848
c00116d8:	68 78 ca 02 c0       	push   0xc002ca78
c00116dd:	68 96 70 02 c0       	push   0xc0027096
c00116e2:	e8 04 0f 00 00       	call   c00125eb <__cxa_atexit>
c00116e7:	83 c4 10             	add    esp,0x10
c00116ea:	90                   	nop
c00116eb:	83 c4 0c             	add    esp,0xc
c00116ee:	c3                   	ret    

c00116ef <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00116ef:	83 ec 0c             	sub    esp,0xc
c00116f2:	83 ec 08             	sub    esp,0x8
c00116f5:	68 ff ff 00 00       	push   0xffff
c00116fa:	6a 01                	push   0x1
c00116fc:	e8 ab ff ff ff       	call   c00116ac <__static_initialization_and_destruction_0(int, int)>
c0011701:	83 c4 10             	add    esp,0x10
c0011704:	83 c4 0c             	add    esp,0xc
c0011707:	c3                   	ret    

c0011708 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011708:	53                   	push   ebx
c0011709:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001170d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011711:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011717:	89 c8                	mov    eax,ecx
c0011719:	d1 e8                	shr    eax,1
c001171b:	03 05 c8 b8 02 c0    	add    eax,DWORD PTR ds:0xc002b8c8
c0011721:	83 e1 01             	and    ecx,0x1
c0011724:	8a 10                	mov    dl,BYTE PTR [eax]
c0011726:	75 09                	jne    c0011731 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011728:	83 e2 f0             	and    edx,0xfffffff0
c001172b:	09 da                	or     edx,ebx
c001172d:	88 10                	mov    BYTE PTR [eax],dl
c001172f:	5b                   	pop    ebx
c0011730:	c3                   	ret    
c0011731:	c1 e3 04             	shl    ebx,0x4
c0011734:	83 e2 0f             	and    edx,0xf
c0011737:	09 da                	or     edx,ebx
c0011739:	88 10                	mov    BYTE PTR [eax],dl
c001173b:	5b                   	pop    ebx
c001173c:	c3                   	ret    

c001173d <Virt::getPageState(unsigned long)>:
c001173d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011741:	8b 0d c8 b8 02 c0    	mov    ecx,DWORD PTR ds:0xc002b8c8
c0011747:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c001174d:	89 d0                	mov    eax,edx
c001174f:	d1 e8                	shr    eax,1
c0011751:	83 e2 01             	and    edx,0x1
c0011754:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011757:	75 04                	jne    c001175d <Virt::getPageState(unsigned long)+0x20>
c0011759:	83 e0 0f             	and    eax,0xf
c001175c:	c3                   	ret    
c001175d:	c0 e8 04             	shr    al,0x4
c0011760:	c3                   	ret    

c0011761 <Virt::allocateKernelVirtualPages(int)>:
c0011761:	55                   	push   ebp
c0011762:	31 ed                	xor    ebp,ebp
c0011764:	57                   	push   edi
c0011765:	56                   	push   esi
c0011766:	53                   	push   ebx
c0011767:	31 db                	xor    ebx,ebx
c0011769:	83 ec 1c             	sub    esp,0x1c
c001176c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011770:	8b 3d c4 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b8c4
c0011776:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001177b:	57                   	push   edi
c001177c:	e8 bc ff ff ff       	call   c001173d <Virt::getPageState(unsigned long)>
c0011781:	5a                   	pop    edx
c0011782:	84 c0                	test   al,al
c0011784:	75 3a                	jne    c00117c0 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011786:	85 db                	test   ebx,ebx
c0011788:	75 02                	jne    c001178c <Virt::allocateKernelVirtualPages(int)+0x2b>
c001178a:	89 fd                	mov    ebp,edi
c001178c:	43                   	inc    ebx
c001178d:	39 f3                	cmp    ebx,esi
c001178f:	74 5a                	je     c00117eb <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011791:	47                   	inc    edi
c0011792:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011798:	76 31                	jbe    c00117cb <Virt::allocateKernelVirtualPages(int)+0x6a>
c001179a:	c7 05 c4 b8 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002b8c4,0xc8000
c00117a4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00117a9:	75 28                	jne    c00117d3 <Virt::allocateKernelVirtualPages(int)+0x72>
c00117ab:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00117b0:	bf 00 80 0c 00       	mov    edi,0xc8000
c00117b5:	57                   	push   edi
c00117b6:	e8 82 ff ff ff       	call   c001173d <Virt::getPageState(unsigned long)>
c00117bb:	5a                   	pop    edx
c00117bc:	84 c0                	test   al,al
c00117be:	74 c6                	je     c0011786 <Virt::allocateKernelVirtualPages(int)+0x25>
c00117c0:	31 db                	xor    ebx,ebx
c00117c2:	47                   	inc    edi
c00117c3:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00117c9:	77 cf                	ja     c001179a <Virt::allocateKernelVirtualPages(int)+0x39>
c00117cb:	89 3d c4 b8 02 c0    	mov    DWORD PTR ds:0xc002b8c4,edi
c00117d1:	eb a8                	jmp    c001177b <Virt::allocateKernelVirtualPages(int)+0x1a>
c00117d3:	83 ec 0c             	sub    esp,0xc
c00117d6:	68 44 8e 02 c0       	push   0xc0028e44
c00117db:	e8 8b 80 00 00       	call   c001986b <Krnl::panic(char const*)>
c00117e0:	8b 3d c4 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b8c4
c00117e6:	83 c4 10             	add    esp,0x10
c00117e9:	eb 90                	jmp    c001177b <Virt::allocateKernelVirtualPages(int)+0x1a>
c00117eb:	89 2d c4 b8 02 c0    	mov    DWORD PTR ds:0xc002b8c4,ebp
c00117f1:	4b                   	dec    ebx
c00117f2:	74 5f                	je     c0011853 <Virt::allocateKernelVirtualPages(int)+0xf2>
c00117f4:	85 f6                	test   esi,esi
c00117f6:	74 3d                	je     c0011835 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00117f8:	89 e8                	mov    eax,ebp
c00117fa:	31 db                	xor    ebx,ebx
c00117fc:	8d 7e ff             	lea    edi,[esi-0x1]
c00117ff:	eb 14                	jmp    c0011815 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011801:	6a 01                	push   0x1
c0011803:	43                   	inc    ebx
c0011804:	50                   	push   eax
c0011805:	e8 fe fe ff ff       	call   c0011708 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001180a:	58                   	pop    eax
c001180b:	39 f3                	cmp    ebx,esi
c001180d:	5a                   	pop    edx
c001180e:	74 25                	je     c0011835 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011810:	a1 c4 b8 02 c0       	mov    eax,ds:0xc002b8c4
c0011815:	8d 50 01             	lea    edx,[eax+0x1]
c0011818:	85 db                	test   ebx,ebx
c001181a:	89 15 c4 b8 02 c0    	mov    DWORD PTR ds:0xc002b8c4,edx
c0011820:	74 20                	je     c0011842 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011822:	39 df                	cmp    edi,ebx
c0011824:	75 db                	jne    c0011801 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011826:	6a 03                	push   0x3
c0011828:	43                   	inc    ebx
c0011829:	50                   	push   eax
c001182a:	e8 d9 fe ff ff       	call   c0011708 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001182f:	59                   	pop    ecx
c0011830:	39 f3                	cmp    ebx,esi
c0011832:	58                   	pop    eax
c0011833:	75 db                	jne    c0011810 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011835:	83 c4 1c             	add    esp,0x1c
c0011838:	89 e8                	mov    eax,ebp
c001183a:	5b                   	pop    ebx
c001183b:	c1 e0 0c             	shl    eax,0xc
c001183e:	5e                   	pop    esi
c001183f:	5f                   	pop    edi
c0011840:	5d                   	pop    ebp
c0011841:	c3                   	ret    
c0011842:	6a 02                	push   0x2
c0011844:	bb 01 00 00 00       	mov    ebx,0x1
c0011849:	50                   	push   eax
c001184a:	e8 b9 fe ff ff       	call   c0011708 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001184f:	58                   	pop    eax
c0011850:	5a                   	pop    edx
c0011851:	eb bd                	jmp    c0011810 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011853:	6a 04                	push   0x4
c0011855:	8d 45 01             	lea    eax,[ebp+0x1]
c0011858:	55                   	push   ebp
c0011859:	a3 c4 b8 02 c0       	mov    ds:0xc002b8c4,eax
c001185e:	e8 a5 fe ff ff       	call   c0011708 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011863:	59                   	pop    ecx
c0011864:	89 e8                	mov    eax,ebp
c0011866:	5b                   	pop    ebx
c0011867:	c1 e0 0c             	shl    eax,0xc
c001186a:	83 c4 1c             	add    esp,0x1c
c001186d:	5b                   	pop    ebx
c001186e:	5e                   	pop    esi
c001186f:	5f                   	pop    edi
c0011870:	5d                   	pop    ebp
c0011871:	c3                   	ret    

c0011872 <Virt::virtualMemorySetup()>:
c0011872:	53                   	push   ebx
c0011873:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011878:	83 ec 08             	sub    esp,0x8
c001187b:	6a 0f                	push   0xf
c001187d:	53                   	push   ebx
c001187e:	43                   	inc    ebx
c001187f:	e8 84 fe ff ff       	call   c0011708 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011884:	59                   	pop    ecx
c0011885:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001188b:	58                   	pop    eax
c001188c:	75 ed                	jne    c001187b <Virt::virtualMemorySetup()+0x9>
c001188e:	83 ec 08             	sub    esp,0x8
c0011891:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011896:	68 00 00 00 c8       	push   0xc8000000
c001189b:	68 cb 8f 02 c0       	push   0xc0028fcb
c00118a0:	e8 ac 0e 00 00       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c00118a5:	58                   	pop    eax
c00118a6:	5a                   	pop    edx
c00118a7:	68 00 f0 ff ef       	push   0xeffff000
c00118ac:	68 df 8f 02 c0       	push   0xc0028fdf
c00118b1:	e8 9b 0e 00 00       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c00118b6:	83 c4 10             	add    esp,0x10
c00118b9:	83 ec 08             	sub    esp,0x8
c00118bc:	6a 00                	push   0x0
c00118be:	53                   	push   ebx
c00118bf:	43                   	inc    ebx
c00118c0:	e8 43 fe ff ff       	call   c0011708 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00118c5:	83 c4 10             	add    esp,0x10
c00118c8:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00118ce:	75 e9                	jne    c00118b9 <Virt::virtualMemorySetup()+0x47>
c00118d0:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00118d5:	83 ec 08             	sub    esp,0x8
c00118d8:	6a 0f                	push   0xf
c00118da:	53                   	push   ebx
c00118db:	43                   	inc    ebx
c00118dc:	e8 27 fe ff ff       	call   c0011708 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00118e1:	83 c4 10             	add    esp,0x10
c00118e4:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00118ea:	75 e9                	jne    c00118d5 <Virt::virtualMemorySetup()+0x63>
c00118ec:	83 c4 08             	add    esp,0x8
c00118ef:	5b                   	pop    ebx
c00118f0:	c3                   	ret    

c00118f1 <Virt::getAKernelVAS()>:
c00118f1:	a1 84 ca 02 c0       	mov    eax,ds:0xc002ca84
c00118f6:	c3                   	ret    

c00118f7 <Virt::setupPageSwapping(int)>:
c00118f7:	57                   	push   edi
c00118f8:	56                   	push   esi
c00118f9:	53                   	push   ebx
c00118fa:	83 ec 1c             	sub    esp,0x1c
c00118fd:	68 14 01 00 00       	push   0x114
c0011902:	e8 cd db ff ff       	call   c000f4d4 <malloc>
c0011907:	83 c4 0c             	add    esp,0xc
c001190a:	89 c6                	mov    esi,eax
c001190c:	ff 35 54 de 02 c0    	push   DWORD PTR ds:0xc002de54
c0011912:	68 f3 8f 02 c0       	push   0xc0028ff3
c0011917:	50                   	push   eax
c0011918:	e8 63 13 00 00       	call   c0012c80 <File::File(char const*, Process*)>
c001191d:	89 34 24             	mov    DWORD PTR [esp],esi
c0011920:	e8 37 15 00 00       	call   c0012e5c <File::unlink()>
c0011925:	58                   	pop    eax
c0011926:	5a                   	pop    edx
c0011927:	6a 12                	push   0x12
c0011929:	56                   	push   esi
c001192a:	e8 b5 13 00 00       	call   c0012ce4 <File::open(FileOpenMode)>
c001192f:	83 c4 10             	add    esp,0x10
c0011932:	85 c0                	test   eax,eax
c0011934:	0f 85 ca 00 00 00    	jne    c0011a04 <Virt::setupPageSwapping(int)+0x10d>
c001193a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001193e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011946:	c1 e3 08             	shl    ebx,0x8
c0011949:	83 ec 0c             	sub    esp,0xc
c001194c:	68 00 00 01 00       	push   0x10000
c0011951:	e8 7e db ff ff       	call   c000f4d4 <malloc>
c0011956:	83 c4 0c             	add    esp,0xc
c0011959:	89 c7                	mov    edi,eax
c001195b:	68 00 00 01 00       	push   0x10000
c0011960:	6a 00                	push   0x0
c0011962:	50                   	push   eax
c0011963:	e8 23 ed fe ff       	call   c000068b <memset>
c0011968:	83 c4 10             	add    esp,0x10
c001196b:	85 db                	test   ebx,ebx
c001196d:	79 03                	jns    c0011972 <Virt::setupPageSwapping(int)+0x7b>
c001196f:	83 c3 0f             	add    ebx,0xf
c0011972:	c1 fb 04             	sar    ebx,0x4
c0011975:	4b                   	dec    ebx
c0011976:	83 fb ff             	cmp    ebx,0xffffffff
c0011979:	74 4b                	je     c00119c6 <Virt::setupPageSwapping(int)+0xcf>
c001197b:	83 ec 0c             	sub    esp,0xc
c001197e:	8b 06                	mov    eax,DWORD PTR [esi]
c0011980:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011984:	52                   	push   edx
c0011985:	57                   	push   edi
c0011986:	6a 00                	push   0x0
c0011988:	68 00 00 01 00       	push   0x10000
c001198d:	56                   	push   esi
c001198e:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011991:	83 c4 20             	add    esp,0x20
c0011994:	85 c0                	test   eax,eax
c0011996:	75 59                	jne    c00119f1 <Virt::setupPageSwapping(int)+0xfa>
c0011998:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001199c:	3d 00 00 01 00       	cmp    eax,0x10000
c00119a1:	74 d2                	je     c0011975 <Virt::setupPageSwapping(int)+0x7e>
c00119a3:	83 ec 08             	sub    esp,0x8
c00119a6:	4b                   	dec    ebx
c00119a7:	50                   	push   eax
c00119a8:	68 46 90 02 c0       	push   0xc0029046
c00119ad:	e8 9f 0d 00 00       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c00119b2:	c7 04 24 4f 90 02 c0 	mov    DWORD PTR [esp],0xc002904f
c00119b9:	e8 ad 7e 00 00       	call   c001986b <Krnl::panic(char const*)>
c00119be:	83 c4 10             	add    esp,0x10
c00119c1:	83 fb ff             	cmp    ebx,0xffffffff
c00119c4:	75 b5                	jne    c001197b <Virt::setupPageSwapping(int)+0x84>
c00119c6:	83 ec 0c             	sub    esp,0xc
c00119c9:	56                   	push   esi
c00119ca:	e8 73 13 00 00       	call   c0012d42 <File::close()>
c00119cf:	89 3c 24             	mov    DWORD PTR [esp],edi
c00119d2:	e8 1d db ff ff       	call   c000f4f4 <rfree>
c00119d7:	83 c4 10             	add    esp,0x10
c00119da:	85 f6                	test   esi,esi
c00119dc:	74 0c                	je     c00119ea <Virt::setupPageSwapping(int)+0xf3>
c00119de:	83 ec 0c             	sub    esp,0xc
c00119e1:	8b 06                	mov    eax,DWORD PTR [esi]
c00119e3:	56                   	push   esi
c00119e4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00119e7:	83 c4 10             	add    esp,0x10
c00119ea:	83 c4 10             	add    esp,0x10
c00119ed:	5b                   	pop    ebx
c00119ee:	5e                   	pop    esi
c00119ef:	5f                   	pop    edi
c00119f0:	c3                   	ret    
c00119f1:	83 ec 08             	sub    esp,0x8
c00119f4:	50                   	push   eax
c00119f5:	68 2e 90 02 c0       	push   0xc002902e
c00119fa:	e8 52 0d 00 00       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c00119ff:	83 c4 10             	add    esp,0x10
c0011a02:	eb 94                	jmp    c0011998 <Virt::setupPageSwapping(int)+0xa1>
c0011a04:	83 ec 08             	sub    esp,0x8
c0011a07:	50                   	push   eax
c0011a08:	68 0a 90 02 c0       	push   0xc002900a
c0011a0d:	e8 3f 0d 00 00       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0011a12:	c7 04 24 13 90 02 c0 	mov    DWORD PTR [esp],0xc0029013
c0011a19:	e8 4d 7e 00 00       	call   c001986b <Krnl::panic(char const*)>
c0011a1e:	83 c4 10             	add    esp,0x10
c0011a21:	e9 14 ff ff ff       	jmp    c001193a <Virt::setupPageSwapping(int)+0x43>

c0011a26 <VAS::VAS()>:
c0011a26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a2a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011a31:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a35:	a3 84 ca 02 c0       	mov    ds:0xc002ca84,eax
c0011a3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a3e:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011a42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a46:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011a49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a4d:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011a54:	90                   	nop
c0011a55:	c3                   	ret    

c0011a56 <VAS::VAS(VAS*)>:
c0011a56:	83 ec 0c             	sub    esp,0xc
c0011a59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a5d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011a64:	83 ec 0c             	sub    esp,0xc
c0011a67:	68 64 8e 02 c0       	push   0xc0028e64
c0011a6c:	e8 fa 7d 00 00       	call   c001986b <Krnl::panic(char const*)>
c0011a71:	83 c4 10             	add    esp,0x10
c0011a74:	90                   	nop
c0011a75:	83 c4 0c             	add    esp,0xc
c0011a78:	c3                   	ret    
c0011a79:	90                   	nop

c0011a7a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011a7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a7e:	89 c2                	mov    edx,eax
c0011a80:	c1 e8 0a             	shr    eax,0xa
c0011a83:	c1 ea 16             	shr    edx,0x16
c0011a86:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011a8b:	19 c9                	sbb    ecx,ecx
c0011a8d:	c1 e2 0c             	shl    edx,0xc
c0011a90:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011a96:	25 fc 0f 00 00       	and    eax,0xffc
c0011a9b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011aa2:	01 d0                	add    eax,edx
c0011aa4:	c3                   	ret    
c0011aa5:	90                   	nop

c0011aa6 <VAS::getPageTableEntry(unsigned long)>:
c0011aa6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011aaa:	89 ca                	mov    edx,ecx
c0011aac:	c1 e9 0a             	shr    ecx,0xa
c0011aaf:	c1 ea 16             	shr    edx,0x16
c0011ab2:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011ab8:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011abe:	c1 e0 0c             	shl    eax,0xc
c0011ac1:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011ac4:	c3                   	ret    

c0011ac5 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011ac5:	57                   	push   edi
c0011ac6:	56                   	push   esi
c0011ac7:	be 01 00 00 00       	mov    esi,0x1
c0011acc:	53                   	push   ebx
c0011acd:	83 ec 10             	sub    esp,0x10
c0011ad0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ad4:	c1 eb 0c             	shr    ebx,0xc
c0011ad7:	eb 3f                	jmp    c0011b18 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011ad9:	e8 13 fe ff ff       	call   c00118f1 <Virt::getAKernelVAS()>
c0011ade:	83 ec 08             	sub    esp,0x8
c0011ae1:	57                   	push   edi
c0011ae2:	50                   	push   eax
c0011ae3:	e8 be ff ff ff       	call   c0011aa6 <VAS::getPageTableEntry(unsigned long)>
c0011ae8:	83 c4 10             	add    esp,0x10
c0011aeb:	8b 00                	mov    eax,DWORD PTR [eax]
c0011aed:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011af1:	f6 c4 04             	test   ah,0x4
c0011af4:	75 5f                	jne    c0011b55 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011af6:	80 fa 04             	cmp    dl,0x4
c0011af9:	74 78                	je     c0011b73 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011afb:	80 fa 02             	cmp    dl,0x2
c0011afe:	0f 84 88 00 00 00    	je     c0011b8c <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011b04:	80 fa 03             	cmp    dl,0x3
c0011b07:	0f 84 ad 00 00 00    	je     c0011bba <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011b0d:	fe ca                	dec    dl
c0011b0f:	0f 84 92 00 00 00    	je     c0011ba7 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011b15:	43                   	inc    ebx
c0011b16:	31 f6                	xor    esi,esi
c0011b18:	53                   	push   ebx
c0011b19:	e8 1f fc ff ff       	call   c001173d <Virt::getPageState(unsigned long)>
c0011b1e:	5f                   	pop    edi
c0011b1f:	89 df                	mov    edi,ebx
c0011b21:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011b25:	c1 e7 0c             	shl    edi,0xc
c0011b28:	84 c0                	test   al,al
c0011b2a:	75 ad                	jne    c0011ad9 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011b2c:	83 ec 0c             	sub    esp,0xc
c0011b2f:	68 55 90 02 c0       	push   0xc0029055
c0011b34:	e8 32 7d 00 00       	call   c001986b <Krnl::panic(char const*)>
c0011b39:	e8 b3 fd ff ff       	call   c00118f1 <Virt::getAKernelVAS()>
c0011b3e:	5a                   	pop    edx
c0011b3f:	59                   	pop    ecx
c0011b40:	57                   	push   edi
c0011b41:	50                   	push   eax
c0011b42:	e8 5f ff ff ff       	call   c0011aa6 <VAS::getPageTableEntry(unsigned long)>
c0011b47:	83 c4 10             	add    esp,0x10
c0011b4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b4c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011b50:	f6 c4 04             	test   ah,0x4
c0011b53:	74 c0                	je     c0011b15 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011b55:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011b59:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011b5e:	83 ec 0c             	sub    esp,0xc
c0011b61:	50                   	push   eax
c0011b62:	e8 8d de ff ff       	call   c000f9f4 <Phys::freePage(unsigned long)>
c0011b67:	83 c4 10             	add    esp,0x10
c0011b6a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011b6e:	80 fa 04             	cmp    dl,0x4
c0011b71:	75 88                	jne    c0011afb <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011b73:	89 f0                	mov    eax,esi
c0011b75:	84 c0                	test   al,al
c0011b77:	75 47                	jne    c0011bc0 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011b79:	c7 44 24 20 88 8e 02 c0 	mov    DWORD PTR [esp+0x20],0xc0028e88
c0011b81:	83 c4 10             	add    esp,0x10
c0011b84:	5b                   	pop    ebx
c0011b85:	5e                   	pop    esi
c0011b86:	5f                   	pop    edi
c0011b87:	e9 df 7c 00 00       	jmp    c001986b <Krnl::panic(char const*)>
c0011b8c:	89 f0                	mov    eax,esi
c0011b8e:	84 c0                	test   al,al
c0011b90:	75 15                	jne    c0011ba7 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011b92:	83 ec 0c             	sub    esp,0xc
c0011b95:	68 71 90 02 c0       	push   0xc0029071
c0011b9a:	e8 cc 7c 00 00       	call   c001986b <Krnl::panic(char const*)>
c0011b9f:	83 c4 10             	add    esp,0x10
c0011ba2:	e9 6e ff ff ff       	jmp    c0011b15 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011ba7:	83 ec 08             	sub    esp,0x8
c0011baa:	6a 00                	push   0x0
c0011bac:	53                   	push   ebx
c0011bad:	e8 56 fb ff ff       	call   c0011708 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011bb2:	83 c4 10             	add    esp,0x10
c0011bb5:	e9 5b ff ff ff       	jmp    c0011b15 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011bba:	89 f0                	mov    eax,esi
c0011bbc:	84 c0                	test   al,al
c0011bbe:	75 15                	jne    c0011bd5 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011bc0:	83 ec 08             	sub    esp,0x8
c0011bc3:	6a 00                	push   0x0
c0011bc5:	53                   	push   ebx
c0011bc6:	e8 3d fb ff ff       	call   c0011708 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011bcb:	83 c4 10             	add    esp,0x10
c0011bce:	83 c4 10             	add    esp,0x10
c0011bd1:	5b                   	pop    ebx
c0011bd2:	5e                   	pop    esi
c0011bd3:	5f                   	pop    edi
c0011bd4:	c3                   	ret    
c0011bd5:	c7 44 24 20 8d 90 02 c0 	mov    DWORD PTR [esp+0x20],0xc002908d
c0011bdd:	83 c4 10             	add    esp,0x10
c0011be0:	5b                   	pop    ebx
c0011be1:	5e                   	pop    esi
c0011be2:	5f                   	pop    edi
c0011be3:	e9 83 7c 00 00       	jmp    c001986b <Krnl::panic(char const*)>

c0011be8 <VAS::freeAllocatedPages(unsigned long)>:
c0011be8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011bf0:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011bf4:	74 09                	je     c0011bff <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011bf6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011bfa:	e9 c6 fe ff ff       	jmp    c0011ac5 <Virt::freeKernelVirtualPages(unsigned long)>
c0011bff:	c7 44 24 04 ac 8e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0028eac
c0011c07:	e9 45 0b 00 00       	jmp    c0012751 <Dbg::kprintf(char const*, ...)>

c0011c0c <VAS::virtualToPhysical(unsigned long)>:
c0011c0c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011c10:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011c14:	e8 8d fe ff ff       	call   c0011aa6 <VAS::getPageTableEntry(unsigned long)>
c0011c19:	5a                   	pop    edx
c0011c1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c1c:	59                   	pop    ecx
c0011c1d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c22:	c3                   	ret    
c0011c23:	90                   	nop

c0011c24 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011c24:	55                   	push   ebp
c0011c25:	57                   	push   edi
c0011c26:	56                   	push   esi
c0011c27:	53                   	push   ebx
c0011c28:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011c2c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011c30:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011c34:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011c38:	85 db                	test   ebx,ebx
c0011c3a:	7e 22                	jle    c0011c5e <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011c3c:	c1 e3 0c             	shl    ebx,0xc
c0011c3f:	01 f3                	add    ebx,esi
c0011c41:	56                   	push   esi
c0011c42:	81 c6 00 10 00 00    	add    esi,0x1000
c0011c48:	55                   	push   ebp
c0011c49:	e8 58 fe ff ff       	call   c0011aa6 <VAS::getPageTableEntry(unsigned long)>
c0011c4e:	5a                   	pop    edx
c0011c4f:	59                   	pop    ecx
c0011c50:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011c52:	21 f9                	and    ecx,edi
c0011c54:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011c58:	39 f3                	cmp    ebx,esi
c0011c5a:	89 08                	mov    DWORD PTR [eax],ecx
c0011c5c:	75 e3                	jne    c0011c41 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011c5e:	5b                   	pop    ebx
c0011c5f:	5e                   	pop    esi
c0011c60:	5f                   	pop    edi
c0011c61:	5d                   	pop    ebp
c0011c62:	c3                   	ret    
c0011c63:	90                   	nop

c0011c64 <VAS::setToWriteCombining(unsigned long, int)>:
c0011c64:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c0011c69:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011c6f:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011c76:	75 01                	jne    c0011c79 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011c78:	c3                   	ret    
c0011c79:	68 80 00 00 00       	push   0x80
c0011c7e:	6a ff                	push   0xffffffff
c0011c80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011c84:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011c88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011c8c:	e8 93 ff ff ff       	call   c0011c24 <VAS::reflagRange(unsigned long, int, int, int)>
c0011c91:	83 c4 14             	add    esp,0x14
c0011c94:	c3                   	ret    
c0011c95:	90                   	nop

c0011c96 <VAS::mapOtherVASIn(bool, VAS*)>:
c0011c96:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011c9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c9f:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011ca2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ca6:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0011ca9:	19 c0                	sbb    eax,eax
c0011cab:	83 ca 03             	or     edx,0x3
c0011cae:	83 e0 fc             	and    eax,0xfffffffc
c0011cb1:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011cb8:	0f 20 d8             	mov    eax,cr3
c0011cbb:	0f 22 d8             	mov    cr3,eax
c0011cbe:	c3                   	ret    
c0011cbf:	90                   	nop

c0011cc0 <VAS::~VAS()>:
c0011cc0:	83 ec 2c             	sub    esp,0x2c
c0011cc3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011ccb:	e8 2a b0 00 00       	call   c001ccfa <lockScheduler()>
c0011cd0:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011cd5:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cd7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011cda:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011ce0:	83 ec 04             	sub    esp,0x4
c0011ce3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011ce7:	6a 01                	push   0x1
c0011ce9:	50                   	push   eax
c0011cea:	e8 a7 ff ff ff       	call   c0011c96 <VAS::mapOtherVASIn(bool, VAS*)>
c0011cef:	83 c4 10             	add    esp,0x10
c0011cf2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011cfa:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011d02:	0f 8f d7 00 00 00    	jg     c0011ddf <VAS::~VAS()+0x11f>
c0011d08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d0c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011d0f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011d13:	c1 e2 02             	shl    edx,0x2
c0011d16:	01 d0                	add    eax,edx
c0011d18:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d22:	83 e0 01             	and    eax,0x1
c0011d25:	0f 84 ab 00 00 00    	je     c0011dd6 <VAS::~VAS()+0x116>
c0011d2b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011d33:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011d3b:	7f 75                	jg     c0011db2 <VAS::~VAS()+0xf2>
c0011d3d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011d41:	c1 e0 0a             	shl    eax,0xa
c0011d44:	89 c2                	mov    edx,eax
c0011d46:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011d4a:	01 d0                	add    eax,edx
c0011d4c:	c1 e0 0c             	shl    eax,0xc
c0011d4f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011d53:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011d58:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d5a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011d5d:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011d63:	83 ec 04             	sub    esp,0x4
c0011d66:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011d6a:	6a 01                	push   0x1
c0011d6c:	50                   	push   eax
c0011d6d:	e8 08 fd ff ff       	call   c0011a7a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011d72:	83 c4 10             	add    esp,0x10
c0011d75:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011d79:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011d7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d7f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011d83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d87:	25 01 04 00 00       	and    eax,0x401
c0011d8c:	3d 01 04 00 00       	cmp    eax,0x401
c0011d91:	75 19                	jne    c0011dac <VAS::~VAS()+0xec>
c0011d93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d97:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011d9c:	83 ec 0c             	sub    esp,0xc
c0011d9f:	50                   	push   eax
c0011da0:	e8 4f dc ff ff       	call   c000f9f4 <Phys::freePage(unsigned long)>
c0011da5:	83 c4 10             	add    esp,0x10
c0011da8:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011dac:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011db0:	eb 81                	jmp    c0011d33 <VAS::~VAS()+0x73>
c0011db2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011db6:	25 00 04 00 00       	and    eax,0x400
c0011dbb:	74 19                	je     c0011dd6 <VAS::~VAS()+0x116>
c0011dbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011dc1:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011dc6:	83 ec 0c             	sub    esp,0xc
c0011dc9:	50                   	push   eax
c0011dca:	e8 25 dc ff ff       	call   c000f9f4 <Phys::freePage(unsigned long)>
c0011dcf:	83 c4 10             	add    esp,0x10
c0011dd2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011dd6:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011dda:	e9 1b ff ff ff       	jmp    c0011cfa <VAS::~VAS()+0x3a>
c0011ddf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011de3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011de6:	83 ec 0c             	sub    esp,0xc
c0011de9:	50                   	push   eax
c0011dea:	e8 d6 fc ff ff       	call   c0011ac5 <Virt::freeKernelVirtualPages(unsigned long)>
c0011def:	83 c4 10             	add    esp,0x10
c0011df2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011df6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011df9:	83 ec 0c             	sub    esp,0xc
c0011dfc:	50                   	push   eax
c0011dfd:	e8 f2 db ff ff       	call   c000f9f4 <Phys::freePage(unsigned long)>
c0011e02:	83 c4 10             	add    esp,0x10
c0011e05:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011e09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011e0d:	c1 e0 02             	shl    eax,0x2
c0011e10:	83 ec 08             	sub    esp,0x8
c0011e13:	50                   	push   eax
c0011e14:	68 d0 8e 02 c0       	push   0xc0028ed0
c0011e19:	e8 33 09 00 00       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0011e1e:	83 c4 10             	add    esp,0x10
c0011e21:	e8 d6 ae 00 00       	call   c001ccfc <unlockScheduler()>
c0011e26:	90                   	nop
c0011e27:	83 c4 2c             	add    esp,0x2c
c0011e2a:	c3                   	ret    
c0011e2b:	90                   	nop

c0011e2c <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011e2c:	55                   	push   ebp
c0011e2d:	57                   	push   edi
c0011e2e:	56                   	push   esi
c0011e2f:	53                   	push   ebx
c0011e30:	83 ec 1c             	sub    esp,0x1c
c0011e33:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011e37:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011e3b:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011e41:	77 08                	ja     c0011e4b <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011e43:	0f 20 d8             	mov    eax,cr3
c0011e46:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0011e49:	75 47                	jne    c0011e92 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011e4b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e4f:	09 d8                	or     eax,ebx
c0011e51:	a9 ff 0f 00 00       	test   eax,0xfff
c0011e56:	75 57                	jne    c0011eaf <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011e58:	89 de                	mov    esi,ebx
c0011e5a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011e5d:	c1 ee 16             	shr    esi,0x16
c0011e60:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011e67:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011e6b:	74 54                	je     c0011ec1 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011e6d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011e71:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011e77:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011e7b:	c1 e6 0c             	shl    esi,0xc
c0011e7e:	c1 eb 0a             	shr    ebx,0xa
c0011e81:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011e87:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011e8a:	83 c4 1c             	add    esp,0x1c
c0011e8d:	5b                   	pop    ebx
c0011e8e:	5e                   	pop    esi
c0011e8f:	5f                   	pop    edi
c0011e90:	5d                   	pop    ebp
c0011e91:	c3                   	ret    
c0011e92:	83 ec 0c             	sub    esp,0xc
c0011e95:	68 f0 8e 02 c0       	push   0xc0028ef0
c0011e9a:	e8 b2 08 00 00       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0011e9f:	83 c4 10             	add    esp,0x10
c0011ea2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ea6:	09 d8                	or     eax,ebx
c0011ea8:	a9 ff 0f 00 00       	test   eax,0xfff
c0011ead:	74 a9                	je     c0011e58 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011eaf:	83 ec 0c             	sub    esp,0xc
c0011eb2:	68 58 8f 02 c0       	push   0xc0028f58
c0011eb7:	e8 af 79 00 00       	call   c001986b <Krnl::panic(char const*)>
c0011ebc:	83 c4 10             	add    esp,0x10
c0011ebf:	eb 97                	jmp    c0011e58 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011ec1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011ec5:	e8 b4 db ff ff       	call   c000fa7e <Phys::allocatePage()>
c0011eca:	89 c5                	mov    ebp,eax
c0011ecc:	e8 20 fa ff ff       	call   c00118f1 <Virt::getAKernelVAS()>
c0011ed1:	83 ec 0c             	sub    esp,0xc
c0011ed4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011ed8:	6a 01                	push   0x1
c0011eda:	e8 82 f8 ff ff       	call   c0011761 <Virt::allocateKernelVirtualPages(int)>
c0011edf:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011ee6:	6a 01                	push   0x1
c0011ee8:	50                   	push   eax
c0011ee9:	55                   	push   ebp
c0011eea:	81 cd 07 04 00 00    	or     ebp,0x407
c0011ef0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011ef4:	51                   	push   ecx
c0011ef5:	e8 26 02 00 00       	call   c0012120 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011efa:	83 c4 1c             	add    esp,0x1c
c0011efd:	68 00 10 00 00       	push   0x1000
c0011f02:	6a 00                	push   0x0
c0011f04:	50                   	push   eax
c0011f05:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011f09:	e8 7d e7 fe ff       	call   c000068b <memset>
c0011f0e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011f12:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011f15:	e8 ab fb ff ff       	call   c0011ac5 <Virt::freeKernelVirtualPages(unsigned long)>
c0011f1a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011f1e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011f21:	83 c4 10             	add    esp,0x10
c0011f24:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011f27:	e9 41 ff ff ff       	jmp    c0011e6d <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0011f2c <VAS::allocatePages(int, int)>:
c0011f2c:	55                   	push   ebp
c0011f2d:	57                   	push   edi
c0011f2e:	56                   	push   esi
c0011f2f:	53                   	push   ebx
c0011f30:	83 ec 1c             	sub    esp,0x1c
c0011f33:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011f37:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c0011f3c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f42:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011f48:	83 e0 01             	and    eax,0x1
c0011f4b:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011f4f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011f53:	0f 85 cc 00 00 00    	jne    c0012025 <VAS::allocatePages(int, int)+0xf9>
c0011f59:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011f5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011f60:	85 c0                	test   eax,eax
c0011f62:	0f 84 a1 00 00 00    	je     c0012009 <VAS::allocatePages(int, int)+0xdd>
c0011f68:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011f6c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f70:	c1 e6 0c             	shl    esi,0xc
c0011f73:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011f77:	85 c0                	test   eax,eax
c0011f79:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011f7c:	7e 33                	jle    c0011fb1 <VAS::allocatePages(int, int)+0x85>
c0011f7e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011f82:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011f86:	81 cd 00 04 00 00    	or     ebp,0x400
c0011f8c:	e8 ed da ff ff       	call   c000fa7e <Phys::allocatePage()>
c0011f91:	55                   	push   ebp
c0011f92:	53                   	push   ebx
c0011f93:	50                   	push   eax
c0011f94:	57                   	push   edi
c0011f95:	e8 92 fe ff ff       	call   c0011e2c <VAS::mapPage(unsigned long, unsigned long, int)>
c0011f9a:	83 c4 10             	add    esp,0x10
c0011f9d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011fa2:	74 03                	je     c0011fa7 <VAS::allocatePages(int, int)+0x7b>
c0011fa4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011fa7:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011fad:	39 de                	cmp    esi,ebx
c0011faf:	75 db                	jne    c0011f8c <VAS::allocatePages(int, int)+0x60>
c0011fb1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011fb6:	75 12                	jne    c0011fca <VAS::allocatePages(int, int)+0x9e>
c0011fb8:	0f 20 d8             	mov    eax,cr3
c0011fbb:	0f 22 d8             	mov    cr3,eax
c0011fbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fc2:	83 c4 1c             	add    esp,0x1c
c0011fc5:	5b                   	pop    ebx
c0011fc6:	5e                   	pop    esi
c0011fc7:	5f                   	pop    edi
c0011fc8:	5d                   	pop    ebp
c0011fc9:	c3                   	ret    
c0011fca:	c1 ee 0a             	shr    esi,0xa
c0011fcd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011fd1:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011fd7:	c1 eb 0a             	shr    ebx,0xa
c0011fda:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011fe0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011fe6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011fec:	39 c3                	cmp    ebx,eax
c0011fee:	77 ce                	ja     c0011fbe <VAS::allocatePages(int, int)+0x92>
c0011ff0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011ff3:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ff9:	39 d8                	cmp    eax,ebx
c0011ffb:	73 f3                	jae    c0011ff0 <VAS::allocatePages(int, int)+0xc4>
c0011ffd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012001:	83 c4 1c             	add    esp,0x1c
c0012004:	5b                   	pop    ebx
c0012005:	5e                   	pop    esi
c0012006:	5f                   	pop    edi
c0012007:	5d                   	pop    ebp
c0012008:	c3                   	ret    
c0012009:	83 ec 0c             	sub    esp,0xc
c001200c:	68 7c 8f 02 c0       	push   0xc0028f7c
c0012011:	e8 55 78 00 00       	call   c001986b <Krnl::panic(char const*)>
c0012016:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012019:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001201d:	83 c4 10             	add    esp,0x10
c0012020:	e9 43 ff ff ff       	jmp    c0011f68 <VAS::allocatePages(int, int)+0x3c>
c0012025:	83 ec 0c             	sub    esp,0xc
c0012028:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001202c:	e8 30 f7 ff ff       	call   c0011761 <Virt::allocateKernelVirtualPages(int)>
c0012031:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012035:	83 c4 10             	add    esp,0x10
c0012038:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c001203d:	0f 87 9b 00 00 00    	ja     c00120de <VAS::allocatePages(int, int)+0x1b2>
c0012043:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012047:	85 d2                	test   edx,edx
c0012049:	7e 3c                	jle    c0012087 <VAS::allocatePages(int, int)+0x15b>
c001204b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001204f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012053:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012057:	c1 e5 0c             	shl    ebp,0xc
c001205a:	81 ce 00 04 00 00    	or     esi,0x400
c0012060:	01 dd                	add    ebp,ebx
c0012062:	e8 17 da ff ff       	call   c000fa7e <Phys::allocatePage()>
c0012067:	56                   	push   esi
c0012068:	53                   	push   ebx
c0012069:	50                   	push   eax
c001206a:	57                   	push   edi
c001206b:	e8 bc fd ff ff       	call   c0011e2c <VAS::mapPage(unsigned long, unsigned long, int)>
c0012070:	83 c4 10             	add    esp,0x10
c0012073:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012078:	74 03                	je     c001207d <VAS::allocatePages(int, int)+0x151>
c001207a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001207d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012083:	39 dd                	cmp    ebp,ebx
c0012085:	75 db                	jne    c0012062 <VAS::allocatePages(int, int)+0x136>
c0012087:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001208c:	0f 84 26 ff ff ff    	je     c0011fb8 <VAS::allocatePages(int, int)+0x8c>
c0012092:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012096:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001209a:	89 d3                	mov    ebx,edx
c001209c:	c1 e0 0c             	shl    eax,0xc
c001209f:	c1 eb 0a             	shr    ebx,0xa
c00120a2:	01 d0                	add    eax,edx
c00120a4:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00120aa:	c1 e8 0a             	shr    eax,0xa
c00120ad:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00120b3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120b8:	2d 00 00 40 00       	sub    eax,0x400000
c00120bd:	39 c3                	cmp    ebx,eax
c00120bf:	0f 87 f9 fe ff ff    	ja     c0011fbe <VAS::allocatePages(int, int)+0x92>
c00120c5:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00120c8:	81 c3 00 10 00 00    	add    ebx,0x1000
c00120ce:	39 d8                	cmp    eax,ebx
c00120d0:	73 f3                	jae    c00120c5 <VAS::allocatePages(int, int)+0x199>
c00120d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00120d6:	83 c4 1c             	add    esp,0x1c
c00120d9:	5b                   	pop    ebx
c00120da:	5e                   	pop    esi
c00120db:	5f                   	pop    edi
c00120dc:	5d                   	pop    ebp
c00120dd:	c3                   	ret    
c00120de:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c00120e3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120e9:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c00120f0:	0f 84 4d ff ff ff    	je     c0012043 <VAS::allocatePages(int, int)+0x117>
c00120f6:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c00120fe:	e9 40 ff ff ff       	jmp    c0012043 <VAS::allocatePages(int, int)+0x117>
c0012103:	90                   	nop

c0012104 <VAS::setCPUSpecific(unsigned long)>:
c0012104:	83 ec 0c             	sub    esp,0xc
c0012107:	6a 05                	push   0x5
c0012109:	68 00 00 40 c2       	push   0xc2400000
c001210e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012112:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012116:	e8 11 fd ff ff       	call   c0011e2c <VAS::mapPage(unsigned long, unsigned long, int)>
c001211b:	83 c4 1c             	add    esp,0x1c
c001211e:	c3                   	ret    
c001211f:	90                   	nop

c0012120 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012120:	55                   	push   ebp
c0012121:	57                   	push   edi
c0012122:	56                   	push   esi
c0012123:	53                   	push   ebx
c0012124:	83 ec 1c             	sub    esp,0x1c
c0012127:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c001212c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012130:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012136:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001213a:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012140:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012144:	83 e0 01             	and    eax,0x1
c0012147:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001214b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001214f:	85 c0                	test   eax,eax
c0012151:	7e 39                	jle    c001218c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012153:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012157:	89 f3                	mov    ebx,esi
c0012159:	c1 e0 0c             	shl    eax,0xc
c001215c:	01 f0                	add    eax,esi
c001215e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012162:	55                   	push   ebp
c0012163:	53                   	push   ebx
c0012164:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012168:	29 f0                	sub    eax,esi
c001216a:	01 d8                	add    eax,ebx
c001216c:	50                   	push   eax
c001216d:	57                   	push   edi
c001216e:	e8 b9 fc ff ff       	call   c0011e2c <VAS::mapPage(unsigned long, unsigned long, int)>
c0012173:	83 c4 10             	add    esp,0x10
c0012176:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001217b:	74 03                	je     c0012180 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c001217d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012180:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012186:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001218a:	75 d6                	jne    c0012162 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c001218c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012191:	75 10                	jne    c00121a3 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012193:	0f 20 d8             	mov    eax,cr3
c0012196:	0f 22 d8             	mov    cr3,eax
c0012199:	83 c4 1c             	add    esp,0x1c
c001219c:	89 f0                	mov    eax,esi
c001219e:	5b                   	pop    ebx
c001219f:	5e                   	pop    esi
c00121a0:	5f                   	pop    edi
c00121a1:	5d                   	pop    ebp
c00121a2:	c3                   	ret    
c00121a3:	89 f3                	mov    ebx,esi
c00121a5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00121a9:	c1 eb 0a             	shr    ebx,0xa
c00121ac:	c1 e0 0c             	shl    eax,0xc
c00121af:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00121b5:	01 f0                	add    eax,esi
c00121b7:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00121bd:	c1 e8 0a             	shr    eax,0xa
c00121c0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00121c5:	2d 00 00 40 00       	sub    eax,0x400000
c00121ca:	39 c3                	cmp    ebx,eax
c00121cc:	77 cb                	ja     c0012199 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c00121ce:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00121d1:	81 c3 00 10 00 00    	add    ebx,0x1000
c00121d7:	39 d8                	cmp    eax,ebx
c00121d9:	73 f3                	jae    c00121ce <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c00121db:	83 c4 1c             	add    esp,0x1c
c00121de:	89 f0                	mov    eax,esi
c00121e0:	5b                   	pop    ebx
c00121e1:	5e                   	pop    esi
c00121e2:	5f                   	pop    edi
c00121e3:	5d                   	pop    ebp
c00121e4:	c3                   	ret    
c00121e5:	90                   	nop

c00121e6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00121e6:	55                   	push   ebp
c00121e7:	57                   	push   edi
c00121e8:	56                   	push   esi
c00121e9:	53                   	push   ebx
c00121ea:	83 ec 1c             	sub    esp,0x1c
c00121ed:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00121f1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00121f5:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00121f9:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00121fd:	a9 ff 0f 00 00       	test   eax,0xfff
c0012202:	75 4a                	jne    c001224e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012204:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012208:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001220b:	c1 eb 16             	shr    ebx,0x16
c001220e:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012215:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012219:	74 4d                	je     c0012268 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c001221b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001221f:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012223:	c1 e8 0a             	shr    eax,0xa
c0012226:	80 fa 01             	cmp    dl,0x1
c0012229:	19 d2                	sbb    edx,edx
c001222b:	c1 e3 0c             	shl    ebx,0xc
c001222e:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012232:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012238:	25 fc 0f 00 00       	and    eax,0xffc
c001223d:	01 d8                	add    eax,ebx
c001223f:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012246:	83 c4 1c             	add    esp,0x1c
c0012249:	5b                   	pop    ebx
c001224a:	5e                   	pop    esi
c001224b:	5f                   	pop    edi
c001224c:	5d                   	pop    ebp
c001224d:	c3                   	ret    
c001224e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012252:	83 ec 0c             	sub    esp,0xc
c0012255:	68 a8 8f 02 c0       	push   0xc0028fa8
c001225a:	e8 0c 76 00 00       	call   c001986b <Krnl::panic(char const*)>
c001225f:	83 c4 10             	add    esp,0x10
c0012262:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012266:	eb 9c                	jmp    c0012204 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0012268:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001226c:	e8 0d d8 ff ff       	call   c000fa7e <Phys::allocatePage()>
c0012271:	89 c5                	mov    ebp,eax
c0012273:	e8 79 f6 ff ff       	call   c00118f1 <Virt::getAKernelVAS()>
c0012278:	83 ec 0c             	sub    esp,0xc
c001227b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001227f:	6a 01                	push   0x1
c0012281:	e8 db f4 ff ff       	call   c0011761 <Virt::allocateKernelVirtualPages(int)>
c0012286:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001228d:	6a 01                	push   0x1
c001228f:	50                   	push   eax
c0012290:	55                   	push   ebp
c0012291:	81 cd 07 04 00 00    	or     ebp,0x407
c0012297:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001229b:	51                   	push   ecx
c001229c:	e8 7f fe ff ff       	call   c0012120 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00122a1:	83 c4 1c             	add    esp,0x1c
c00122a4:	68 00 10 00 00       	push   0x1000
c00122a9:	6a 00                	push   0x0
c00122ab:	50                   	push   eax
c00122ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00122b0:	e8 d6 e3 fe ff       	call   c000068b <memset>
c00122b5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00122b9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00122bc:	e8 04 f8 ff ff       	call   c0011ac5 <Virt::freeKernelVirtualPages(unsigned long)>
c00122c1:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00122c4:	83 c4 10             	add    esp,0x10
c00122c7:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c00122ca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00122ce:	e9 48 ff ff ff       	jmp    c001221b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c00122d3:	90                   	nop

c00122d4 <VAS::VAS(bool)>:
c00122d4:	53                   	push   ebx
c00122d5:	83 ec 28             	sub    esp,0x28
c00122d8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00122dc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00122e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122e4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00122eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122ef:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00122f3:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00122f6:	e8 83 d7 ff ff       	call   c000fa7e <Phys::allocatePage()>
c00122fb:	89 c2                	mov    edx,eax
c00122fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012301:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012304:	e8 e8 f5 ff ff       	call   c00118f1 <Virt::getAKernelVAS()>
c0012309:	89 c3                	mov    ebx,eax
c001230b:	83 ec 0c             	sub    esp,0xc
c001230e:	6a 01                	push   0x1
c0012310:	e8 4c f4 ff ff       	call   c0011761 <Virt::allocateKernelVirtualPages(int)>
c0012315:	83 c4 10             	add    esp,0x10
c0012318:	89 c2                	mov    edx,eax
c001231a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001231e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012321:	83 ec 0c             	sub    esp,0xc
c0012324:	6a 03                	push   0x3
c0012326:	6a 01                	push   0x1
c0012328:	52                   	push   edx
c0012329:	50                   	push   eax
c001232a:	53                   	push   ebx
c001232b:	e8 f0 fd ff ff       	call   c0012120 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012330:	83 c4 20             	add    esp,0x20
c0012333:	89 c2                	mov    edx,eax
c0012335:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012339:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001233c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012344:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c001234c:	7f 1c                	jg     c001236a <VAS::VAS(bool)+0x96>
c001234e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012352:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012355:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012359:	c1 e2 02             	shl    edx,0x2
c001235c:	01 d0                	add    eax,edx
c001235e:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012364:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012368:	eb da                	jmp    c0012344 <VAS::VAS(bool)+0x70>
c001236a:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012372:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c001237a:	7f 7a                	jg     c00123f6 <VAS::VAS(bool)+0x122>
c001237c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012380:	2d 00 02 00 00       	sub    eax,0x200
c0012385:	c1 e0 0c             	shl    eax,0xc
c0012388:	83 c8 03             	or     eax,0x3
c001238b:	89 c2                	mov    edx,eax
c001238d:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c0012392:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012398:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001239e:	83 e0 10             	and    eax,0x10
c00123a1:	84 c0                	test   al,al
c00123a3:	74 07                	je     c00123ac <VAS::VAS(bool)+0xd8>
c00123a5:	b8 00 01 00 00       	mov    eax,0x100
c00123aa:	eb 05                	jmp    c00123b1 <VAS::VAS(bool)+0xdd>
c00123ac:	b8 00 00 00 00       	mov    eax,0x0
c00123b1:	09 d0                	or     eax,edx
c00123b3:	89 c1                	mov    ecx,eax
c00123b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123b9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00123bc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00123c0:	c1 e2 02             	shl    edx,0x2
c00123c3:	01 d0                	add    eax,edx
c00123c5:	89 ca                	mov    edx,ecx
c00123c7:	89 10                	mov    DWORD PTR [eax],edx
c00123c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00123cd:	2d 40 03 00 00       	sub    eax,0x340
c00123d2:	83 f8 7f             	cmp    eax,0x7f
c00123d5:	77 16                	ja     c00123ed <VAS::VAS(bool)+0x119>
c00123d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123db:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00123de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00123e2:	c1 e2 02             	shl    edx,0x2
c00123e5:	01 d0                	add    eax,edx
c00123e7:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00123ed:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00123f1:	e9 7c ff ff ff       	jmp    c0012372 <VAS::VAS(bool)+0x9e>
c00123f6:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c00123fb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012401:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012407:	83 e0 10             	and    eax,0x10
c001240a:	84 c0                	test   al,al
c001240c:	74 07                	je     c0012415 <VAS::VAS(bool)+0x141>
c001240e:	b8 03 41 00 00       	mov    eax,0x4103
c0012413:	eb 05                	jmp    c001241a <VAS::VAS(bool)+0x146>
c0012415:	b8 03 40 00 00       	mov    eax,0x4003
c001241a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001241e:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012421:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012427:	89 02                	mov    DWORD PTR [edx],eax
c0012429:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c001242e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012434:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001243a:	83 ec 08             	sub    esp,0x8
c001243d:	50                   	push   eax
c001243e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012442:	e8 bd fc ff ff       	call   c0012104 <VAS::setCPUSpecific(unsigned long)>
c0012447:	83 c4 10             	add    esp,0x10
c001244a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001244e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012451:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c0012456:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001245c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012462:	83 e0 10             	and    eax,0x10
c0012465:	84 c0                	test   al,al
c0012467:	74 07                	je     c0012470 <VAS::VAS(bool)+0x19c>
c0012469:	b8 00 01 00 00       	mov    eax,0x100
c001246e:	eb 05                	jmp    c0012475 <VAS::VAS(bool)+0x1a1>
c0012470:	b8 00 00 00 00       	mov    eax,0x0
c0012475:	09 c2                	or     edx,eax
c0012477:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001247b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001247e:	05 fc 0f 00 00       	add    eax,0xffc
c0012483:	83 ca 03             	or     edx,0x3
c0012486:	89 10                	mov    DWORD PTR [eax],edx
c0012488:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c001248d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012493:	83 ec 0c             	sub    esp,0xc
c0012496:	50                   	push   eax
c0012497:	e8 90 19 00 00       	call   c0013e2c <Device::getName()>
c001249c:	83 c4 10             	add    esp,0x10
c001249f:	83 ec 08             	sub    esp,0x8
c00124a2:	68 a7 90 02 c0       	push   0xc00290a7
c00124a7:	50                   	push   eax
c00124a8:	e8 ce e2 fe ff       	call   c000077b <strcmp>
c00124ad:	83 c4 10             	add    esp,0x10
c00124b0:	85 c0                	test   eax,eax
c00124b2:	0f 94 c0             	sete   al
c00124b5:	84 c0                	test   al,al
c00124b7:	74 70                	je     c0012529 <VAS::VAS(bool)+0x255>
c00124b9:	e8 1f a8 00 00       	call   c001ccdd <disableIRQs()>
c00124be:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c00124c3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124c9:	05 7c 09 00 00       	add    eax,0x97c
c00124ce:	83 ec 0c             	sub    esp,0xc
c00124d1:	50                   	push   eax
c00124d2:	e8 79 ca ff ff       	call   c000ef50 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00124d7:	83 c4 10             	add    esp,0x10
c00124da:	25 00 f0 ff ff       	and    eax,0xfffff000
c00124df:	89 c3                	mov    ebx,eax
c00124e1:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c00124e6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124ec:	05 7c 09 00 00       	add    eax,0x97c
c00124f1:	83 ec 0c             	sub    esp,0xc
c00124f4:	50                   	push   eax
c00124f5:	e8 56 ca ff ff       	call   c000ef50 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00124fa:	83 c4 10             	add    esp,0x10
c00124fd:	83 ec 08             	sub    esp,0x8
c0012500:	50                   	push   eax
c0012501:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012505:	e8 9c f5 ff ff       	call   c0011aa6 <VAS::getPageTableEntry(unsigned long)>
c001250a:	83 c4 10             	add    esp,0x10
c001250d:	8b 00                	mov    eax,DWORD PTR [eax]
c001250f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012514:	6a 11                	push   0x11
c0012516:	53                   	push   ebx
c0012517:	50                   	push   eax
c0012518:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001251c:	e8 0b f9 ff ff       	call   c0011e2c <VAS::mapPage(unsigned long, unsigned long, int)>
c0012521:	83 c4 10             	add    esp,0x10
c0012524:	e8 c2 a7 00 00       	call   c001cceb <enableIRQs()>
c0012529:	90                   	nop
c001252a:	83 c4 28             	add    esp,0x28
c001252d:	5b                   	pop    ebx
c001252e:	c3                   	ret    

c001252f <mapVASFirstTime>:
c001252f:	55                   	push   ebp
c0012530:	57                   	push   edi
c0012531:	56                   	push   esi
c0012532:	53                   	push   ebx
c0012533:	83 ec 0c             	sub    esp,0xc
c0012536:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001253b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001253e:	4a                   	dec    edx
c001253f:	0f 84 8e 00 00 00    	je     c00125d3 <mapVASFirstTime+0xa4>
c0012545:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012548:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c001254b:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012550:	c1 e5 15             	shl    ebp,0x15
c0012553:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c0012558:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c001255e:	29 eb                	sub    ebx,ebp
c0012560:	29 ee                	sub    esi,ebp
c0012562:	e8 17 d5 ff ff       	call   c000fa7e <Phys::allocatePage()>
c0012567:	83 ec 0c             	sub    esp,0xc
c001256a:	68 03 04 00 00       	push   0x403
c001256f:	6a 01                	push   0x1
c0012571:	53                   	push   ebx
c0012572:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012578:	50                   	push   eax
c0012579:	57                   	push   edi
c001257a:	e8 a1 fb ff ff       	call   c0012120 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001257f:	83 c4 20             	add    esp,0x20
c0012582:	39 f3                	cmp    ebx,esi
c0012584:	75 dc                	jne    c0012562 <mapVASFirstTime+0x33>
c0012586:	be 00 f0 ff 01       	mov    esi,0x1fff000
c001258b:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012590:	29 ee                	sub    esi,ebp
c0012592:	29 e8                	sub    eax,ebp
c0012594:	89 c5                	mov    ebp,eax
c0012596:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c001259a:	19 db                	sbb    ebx,ebx
c001259c:	e8 dd d4 ff ff       	call   c000fa7e <Phys::allocatePage()>
c00125a1:	83 e3 04             	and    ebx,0x4
c00125a4:	83 ec 0c             	sub    esp,0xc
c00125a7:	81 c3 03 04 00 00    	add    ebx,0x403
c00125ad:	53                   	push   ebx
c00125ae:	6a 01                	push   0x1
c00125b0:	56                   	push   esi
c00125b1:	81 ee 00 10 00 00    	sub    esi,0x1000
c00125b7:	50                   	push   eax
c00125b8:	57                   	push   edi
c00125b9:	e8 62 fb ff ff       	call   c0012120 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00125be:	83 c4 20             	add    esp,0x20
c00125c1:	39 f5                	cmp    ebp,esi
c00125c3:	75 d1                	jne    c0012596 <mapVASFirstTime+0x67>
c00125c5:	0f 20 d8             	mov    eax,cr3
c00125c8:	0f 22 d8             	mov    cr3,eax
c00125cb:	83 c4 0c             	add    esp,0xc
c00125ce:	5b                   	pop    ebx
c00125cf:	5e                   	pop    esi
c00125d0:	5f                   	pop    edi
c00125d1:	5d                   	pop    ebp
c00125d2:	c3                   	ret    
c00125d3:	83 ec 0c             	sub    esp,0xc
c00125d6:	68 b5 90 02 c0       	push   0xc00290b5
c00125db:	e8 71 01 00 00       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c00125e0:	83 c4 10             	add    esp,0x10
c00125e3:	83 c4 0c             	add    esp,0xc
c00125e6:	5b                   	pop    ebx
c00125e7:	5e                   	pop    esi
c00125e8:	5f                   	pop    edi
c00125e9:	5d                   	pop    ebp
c00125ea:	c3                   	ret    

c00125eb <__cxa_atexit>:
c00125eb:	31 c0                	xor    eax,eax
c00125ed:	c3                   	ret    

c00125ee <__cxa_finalize>:
c00125ee:	c3                   	ret    

c00125ef <__stack_chk_fail>:
c00125ef:	55                   	push   ebp
c00125f0:	89 e5                	mov    ebp,esp
c00125f2:	83 ec 14             	sub    esp,0x14
c00125f5:	68 ce 90 02 c0       	push   0xc00290ce
c00125fa:	e8 52 01 00 00       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c00125ff:	58                   	pop    eax
c0012600:	5a                   	pop    edx
c0012601:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012604:	68 1e 91 02 c0       	push   0xc002911e
c0012609:	e8 43 01 00 00       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001260e:	59                   	pop    ecx
c001260f:	58                   	pop    eax
c0012610:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012613:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012616:	68 1e 91 02 c0       	push   0xc002911e
c001261b:	e8 31 01 00 00       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0012620:	5a                   	pop    edx
c0012621:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012624:	59                   	pop    ecx
c0012625:	8b 00                	mov    eax,DWORD PTR [eax]
c0012627:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001262a:	68 1e 91 02 c0       	push   0xc002911e
c001262f:	e8 1d 01 00 00       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0012634:	5a                   	pop    edx
c0012635:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012638:	59                   	pop    ecx
c0012639:	8b 00                	mov    eax,DWORD PTR [eax]
c001263b:	8b 00                	mov    eax,DWORD PTR [eax]
c001263d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012640:	68 1e 91 02 c0       	push   0xc002911e
c0012645:	e8 07 01 00 00       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001264a:	c7 04 24 26 91 02 c0 	mov    DWORD PTR [esp],0xc0029126
c0012651:	e8 15 72 00 00       	call   c001986b <Krnl::panic(char const*)>
c0012656:	83 c4 10             	add    esp,0x10
c0012659:	c9                   	leave  
c001265a:	c3                   	ret    

c001265b <__cxa_pure_virtual>:
c001265b:	83 ec 18             	sub    esp,0x18
c001265e:	68 3e 91 02 c0       	push   0xc002913e
c0012663:	e8 03 72 00 00       	call   c001986b <Krnl::panic(char const*)>
c0012668:	83 c4 1c             	add    esp,0x1c
c001266b:	c3                   	ret    

c001266c <operator new[](unsigned long)>:
c001266c:	e9 63 ce ff ff       	jmp    c000f4d4 <malloc>

c0012671 <operator delete(void*, unsigned long)>:
c0012671:	e9 7e ce ff ff       	jmp    c000f4f4 <rfree>

c0012676 <operator delete[](void*)>:
c0012676:	e9 79 ce ff ff       	jmp    c000f4f4 <rfree>

c001267b <operator delete[](void*, unsigned long)>:
c001267b:	e9 74 ce ff ff       	jmp    c000f4f4 <rfree>

c0012680 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012680:	57                   	push   edi
c0012681:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012686:	56                   	push   esi
c0012687:	be 54 91 02 c0       	mov    esi,0xc0029154
c001268c:	53                   	push   ebx
c001268d:	83 ec 40             	sub    esp,0x40
c0012690:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012694:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012698:	fc                   	cld    
c0012699:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001269b:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c001269f:	83 f9 3e             	cmp    ecx,0x3e
c00126a2:	7e 05                	jle    c00126a9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c00126a4:	b9 3e 00 00 00       	mov    ecx,0x3e
c00126a9:	89 df                	mov    edi,ebx
c00126ab:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00126af:	eb 02                	jmp    c00126b3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c00126b1:	89 c7                	mov    edi,eax
c00126b3:	31 d2                	xor    edx,edx
c00126b5:	46                   	inc    esi
c00126b6:	89 f8                	mov    eax,edi
c00126b8:	f7 f1                	div    ecx
c00126ba:	39 cf                	cmp    edi,ecx
c00126bc:	73 f3                	jae    c00126b1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c00126be:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00126c1:	eb 02                	jmp    c00126c5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c00126c3:	89 c3                	mov    ebx,eax
c00126c5:	31 d2                	xor    edx,edx
c00126c7:	4e                   	dec    esi
c00126c8:	89 d8                	mov    eax,ebx
c00126ca:	f7 f1                	div    ecx
c00126cc:	39 cb                	cmp    ebx,ecx
c00126ce:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c00126d2:	88 16                	mov    BYTE PTR [esi],dl
c00126d4:	73 ed                	jae    c00126c3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c00126d6:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00126da:	83 c4 40             	add    esp,0x40
c00126dd:	5b                   	pop    ebx
c00126de:	5e                   	pop    esi
c00126df:	5f                   	pop    edi
c00126e0:	c3                   	ret    

c00126e1 <Dbg::logc(char)>:
c00126e1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00126e5:	ba fd 03 00 00       	mov    edx,0x3fd
c00126ea:	ec                   	in     al,dx
c00126eb:	a8 20                	test   al,0x20
c00126ed:	74 fb                	je     c00126ea <Dbg::logc(char)+0x9>
c00126ef:	ba f8 03 00 00       	mov    edx,0x3f8
c00126f4:	88 c8                	mov    al,cl
c00126f6:	ee                   	out    dx,al
c00126f7:	c3                   	ret    

c00126f8 <Dbg::logs(char*)>:
c00126f8:	53                   	push   ebx
c00126f9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00126fd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012700:	84 c0                	test   al,al
c0012702:	74 0f                	je     c0012713 <Dbg::logs(char*)+0x1b>
c0012704:	50                   	push   eax
c0012705:	43                   	inc    ebx
c0012706:	e8 d6 ff ff ff       	call   c00126e1 <Dbg::logc(char)>
c001270b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001270e:	5a                   	pop    edx
c001270f:	84 c0                	test   al,al
c0012711:	75 f1                	jne    c0012704 <Dbg::logs(char*)+0xc>
c0012713:	5b                   	pop    ebx
c0012714:	c3                   	ret    

c0012715 <Dbg::logWriteInt(unsigned int)>:
c0012715:	83 ec 10             	sub    esp,0x10
c0012718:	6a 0a                	push   0xa
c001271a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001271e:	50                   	push   eax
c001271f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012723:	e8 58 ff ff ff       	call   c0012680 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012728:	50                   	push   eax
c0012729:	e8 ca ff ff ff       	call   c00126f8 <Dbg::logs(char*)>
c001272e:	83 c4 20             	add    esp,0x20
c0012731:	c3                   	ret    

c0012732 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012732:	83 ec 10             	sub    esp,0x10
c0012735:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012739:	8d 44 24 08          	lea    eax,[esp+0x8]
c001273d:	50                   	push   eax
c001273e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012742:	e8 39 ff ff ff       	call   c0012680 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012747:	50                   	push   eax
c0012748:	e8 ab ff ff ff       	call   c00126f8 <Dbg::logs(char*)>
c001274d:	83 c4 20             	add    esp,0x20
c0012750:	c3                   	ret    

c0012751 <Dbg::kprintf(char const*, ...)>:
c0012751:	55                   	push   ebp
c0012752:	57                   	push   edi
c0012753:	56                   	push   esi
c0012754:	53                   	push   ebx
c0012755:	83 ec 0c             	sub    esp,0xc
c0012758:	8d 44 24 24          	lea    eax,[esp+0x24]
c001275c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012760:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012764:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012767:	84 c0                	test   al,al
c0012769:	74 4a                	je     c00127b5 <Dbg::kprintf(char const*, ...)+0x64>
c001276b:	31 db                	xor    ebx,ebx
c001276d:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012770:	3c 25                	cmp    al,0x25
c0012772:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012775:	0f 85 e4 00 00 00    	jne    c001285f <Dbg::kprintf(char const*, ...)+0x10e>
c001277b:	83 c3 02             	add    ebx,0x2
c001277e:	8a 07                	mov    al,BYTE PTR [edi]
c0012780:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012783:	83 e8 25             	sub    eax,0x25
c0012786:	3c 53                	cmp    al,0x53
c0012788:	0f 87 ba 00 00 00    	ja     c0012848 <Dbg::kprintf(char const*, ...)+0xf7>
c001278e:	0f b6 c0             	movzx  eax,al
c0012791:	ff 24 85 94 91 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6e6c]
c0012798:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001279c:	89 c8                	mov    eax,ecx
c001279e:	83 c1 04             	add    ecx,0x4
c00127a1:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00127a5:	ff 30                	push   DWORD PTR [eax]
c00127a7:	e8 4c ff ff ff       	call   c00126f8 <Dbg::logs(char*)>
c00127ac:	58                   	pop    eax
c00127ad:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00127b1:	84 c0                	test   al,al
c00127b3:	75 b8                	jne    c001276d <Dbg::kprintf(char const*, ...)+0x1c>
c00127b5:	83 c4 0c             	add    esp,0xc
c00127b8:	5b                   	pop    ebx
c00127b9:	5e                   	pop    esi
c00127ba:	5f                   	pop    edi
c00127bb:	5d                   	pop    ebp
c00127bc:	c3                   	ret    
c00127bd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00127c1:	89 d0                	mov    eax,edx
c00127c3:	83 c2 04             	add    edx,0x4
c00127c6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00127ca:	ff 30                	push   DWORD PTR [eax]
c00127cc:	e8 44 ff ff ff       	call   c0012715 <Dbg::logWriteInt(unsigned int)>
c00127d1:	58                   	pop    eax
c00127d2:	eb d9                	jmp    c00127ad <Dbg::kprintf(char const*, ...)+0x5c>
c00127d4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00127d8:	89 d0                	mov    eax,edx
c00127da:	83 c2 04             	add    edx,0x4
c00127dd:	0f be 00             	movsx  eax,BYTE PTR [eax]
c00127e0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00127e4:	50                   	push   eax
c00127e5:	e8 f7 fe ff ff       	call   c00126e1 <Dbg::logc(char)>
c00127ea:	58                   	pop    eax
c00127eb:	eb c0                	jmp    c00127ad <Dbg::kprintf(char const*, ...)+0x5c>
c00127ed:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00127f1:	89 c8                	mov    eax,ecx
c00127f3:	83 c1 04             	add    ecx,0x4
c00127f6:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00127fa:	ff 30                	push   DWORD PTR [eax]
c00127fc:	e8 14 ff ff ff       	call   c0012715 <Dbg::logWriteInt(unsigned int)>
c0012801:	5f                   	pop    edi
c0012802:	eb a9                	jmp    c00127ad <Dbg::kprintf(char const*, ...)+0x5c>
c0012804:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012808:	89 c8                	mov    eax,ecx
c001280a:	83 c1 04             	add    ecx,0x4
c001280d:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012811:	6a 10                	push   0x10
c0012813:	ff 30                	push   DWORD PTR [eax]
c0012815:	e8 18 ff ff ff       	call   c0012732 <Dbg::logWriteIntBase(unsigned int, int)>
c001281a:	59                   	pop    ecx
c001281b:	5f                   	pop    edi
c001281c:	eb 8f                	jmp    c00127ad <Dbg::kprintf(char const*, ...)+0x5c>
c001281e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012822:	89 d0                	mov    eax,edx
c0012824:	83 c2 08             	add    edx,0x8
c0012827:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001282b:	6a 10                	push   0x10
c001282d:	ff 30                	push   DWORD PTR [eax]
c001282f:	e8 fe fe ff ff       	call   c0012732 <Dbg::logWriteIntBase(unsigned int, int)>
c0012834:	58                   	pop    eax
c0012835:	5a                   	pop    edx
c0012836:	e9 72 ff ff ff       	jmp    c00127ad <Dbg::kprintf(char const*, ...)+0x5c>
c001283b:	6a 25                	push   0x25
c001283d:	e8 9f fe ff ff       	call   c00126e1 <Dbg::logc(char)>
c0012842:	58                   	pop    eax
c0012843:	e9 65 ff ff ff       	jmp    c00127ad <Dbg::kprintf(char const*, ...)+0x5c>
c0012848:	6a 25                	push   0x25
c001284a:	e8 92 fe ff ff       	call   c00126e1 <Dbg::logc(char)>
c001284f:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012852:	50                   	push   eax
c0012853:	e8 89 fe ff ff       	call   c00126e1 <Dbg::logc(char)>
c0012858:	5a                   	pop    edx
c0012859:	59                   	pop    ecx
c001285a:	e9 4e ff ff ff       	jmp    c00127ad <Dbg::kprintf(char const*, ...)+0x5c>
c001285f:	50                   	push   eax
c0012860:	89 eb                	mov    ebx,ebp
c0012862:	e8 7a fe ff ff       	call   c00126e1 <Dbg::logc(char)>
c0012867:	89 fd                	mov    ebp,edi
c0012869:	58                   	pop    eax
c001286a:	e9 3e ff ff ff       	jmp    c00127ad <Dbg::kprintf(char const*, ...)+0x5c>
c001286f:	90                   	nop

c0012870 <File::read(unsigned long long, void*, int*)>:
c0012870:	53                   	push   ebx
c0012871:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012875:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012879:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012880:	3c 19                	cmp    al,0x19
c0012882:	77 35                	ja     c00128b9 <File::read(unsigned long long, void*, int*)+0x49>
c0012884:	8b 04 85 20 cf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd30e0]
c001288b:	85 c0                	test   eax,eax
c001288d:	74 2a                	je     c00128b9 <File::read(unsigned long long, void*, int*)+0x49>
c001288f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012895:	85 c0                	test   eax,eax
c0012897:	74 20                	je     c00128b9 <File::read(unsigned long long, void*, int*)+0x49>
c0012899:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001289d:	74 21                	je     c00128c0 <File::read(unsigned long long, void*, int*)+0x50>
c001289f:	8b 08                	mov    ecx,DWORD PTR [eax]
c00128a1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00128a5:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00128ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00128af:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00128b3:	5b                   	pop    ebx
c00128b4:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00128b7:	ff e0                	jmp    eax
c00128b9:	b8 0b 00 00 00       	mov    eax,0xb
c00128be:	eb 05                	jmp    c00128c5 <File::read(unsigned long long, void*, int*)+0x55>
c00128c0:	b8 05 00 00 00       	mov    eax,0x5
c00128c5:	5b                   	pop    ebx
c00128c6:	c3                   	ret    
c00128c7:	90                   	nop

c00128c8 <File::write(unsigned long long, void*, int*)>:
c00128c8:	53                   	push   ebx
c00128c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00128cd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00128d1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00128d8:	3c 19                	cmp    al,0x19
c00128da:	77 35                	ja     c0012911 <File::write(unsigned long long, void*, int*)+0x49>
c00128dc:	8b 04 85 20 cf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd30e0]
c00128e3:	85 c0                	test   eax,eax
c00128e5:	74 2a                	je     c0012911 <File::write(unsigned long long, void*, int*)+0x49>
c00128e7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00128ed:	85 c0                	test   eax,eax
c00128ef:	74 20                	je     c0012911 <File::write(unsigned long long, void*, int*)+0x49>
c00128f1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00128f5:	74 21                	je     c0012918 <File::write(unsigned long long, void*, int*)+0x50>
c00128f7:	8b 08                	mov    ecx,DWORD PTR [eax]
c00128f9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00128fd:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012903:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012907:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001290b:	5b                   	pop    ebx
c001290c:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001290f:	ff e0                	jmp    eax
c0012911:	b8 0b 00 00 00       	mov    eax,0xb
c0012916:	eb 05                	jmp    c001291d <File::write(unsigned long long, void*, int*)+0x55>
c0012918:	b8 05 00 00 00       	mov    eax,0x5
c001291d:	5b                   	pop    ebx
c001291e:	c3                   	ret    
c001291f:	90                   	nop

c0012920 <Directory::read(unsigned long long, void*, int*)>:
c0012920:	53                   	push   ebx
c0012921:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012925:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012929:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012930:	3c 19                	cmp    al,0x19
c0012932:	77 35                	ja     c0012969 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012934:	8b 04 85 20 cf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd30e0]
c001293b:	85 c0                	test   eax,eax
c001293d:	74 2a                	je     c0012969 <Directory::read(unsigned long long, void*, int*)+0x49>
c001293f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012945:	85 c0                	test   eax,eax
c0012947:	74 20                	je     c0012969 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012949:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001294d:	74 21                	je     c0012970 <Directory::read(unsigned long long, void*, int*)+0x50>
c001294f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012951:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012955:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001295b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001295f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012963:	5b                   	pop    ebx
c0012964:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012967:	ff e0                	jmp    eax
c0012969:	b8 0b 00 00 00       	mov    eax,0xb
c001296e:	eb 05                	jmp    c0012975 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012970:	b8 05 00 00 00       	mov    eax,0x5
c0012975:	5b                   	pop    ebx
c0012976:	c3                   	ret    
c0012977:	90                   	nop

c0012978 <Directory::write(unsigned long long, void*, int*)>:
c0012978:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001297c:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012983:	b8 0b 00 00 00       	mov    eax,0xb
c0012988:	80 fa 19             	cmp    dl,0x19
c001298b:	77 18                	ja     c00129a5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001298d:	8b 14 95 20 cf 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd30e0]
c0012994:	85 d2                	test   edx,edx
c0012996:	74 0d                	je     c00129a5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012998:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c001299f:	19 c0                	sbb    eax,eax
c00129a1:	83 e0 0a             	and    eax,0xa
c00129a4:	40                   	inc    eax
c00129a5:	c3                   	ret    

c00129a6 <File::isAtty()>:
c00129a6:	31 c0                	xor    eax,eax
c00129a8:	c3                   	ret    
c00129a9:	90                   	nop

c00129aa <Directory::isAtty()>:
c00129aa:	31 c0                	xor    eax,eax
c00129ac:	c3                   	ret    
c00129ad:	90                   	nop

c00129ae <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00129ae:	b8 0a 00 00 00       	mov    eax,0xa
c00129b3:	c3                   	ret    

c00129b4 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00129b4:	b8 0a 00 00 00       	mov    eax,0xa
c00129b9:	c3                   	ret    

c00129ba <File::~File()>:
c00129ba:	83 ec 0c             	sub    esp,0xc
c00129bd:	ba 50 93 02 c0       	mov    edx,0xc0029350
c00129c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129c6:	89 10                	mov    DWORD PTR [eax],edx
c00129c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129cc:	83 ec 0c             	sub    esp,0xc
c00129cf:	50                   	push   eax
c00129d0:	e8 2b eb ff ff       	call   c0011500 <UnixFile::~UnixFile()>
c00129d5:	83 c4 10             	add    esp,0x10
c00129d8:	90                   	nop
c00129d9:	83 c4 0c             	add    esp,0xc
c00129dc:	c3                   	ret    
c00129dd:	90                   	nop

c00129de <File::~File()>:
c00129de:	83 ec 0c             	sub    esp,0xc
c00129e1:	83 ec 0c             	sub    esp,0xc
c00129e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129e8:	e8 cd ff ff ff       	call   c00129ba <File::~File()>
c00129ed:	83 c4 10             	add    esp,0x10
c00129f0:	83 ec 08             	sub    esp,0x8
c00129f3:	68 14 01 00 00       	push   0x114
c00129f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129fc:	e8 70 fc ff ff       	call   c0012671 <operator delete(void*, unsigned long)>
c0012a01:	83 c4 10             	add    esp,0x10
c0012a04:	83 c4 0c             	add    esp,0xc
c0012a07:	c3                   	ret    

c0012a08 <Directory::~Directory()>:
c0012a08:	83 ec 0c             	sub    esp,0xc
c0012a0b:	ba 6c 93 02 c0       	mov    edx,0xc002936c
c0012a10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a14:	89 10                	mov    DWORD PTR [eax],edx
c0012a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a1a:	83 ec 0c             	sub    esp,0xc
c0012a1d:	50                   	push   eax
c0012a1e:	e8 dd ea ff ff       	call   c0011500 <UnixFile::~UnixFile()>
c0012a23:	83 c4 10             	add    esp,0x10
c0012a26:	90                   	nop
c0012a27:	83 c4 0c             	add    esp,0xc
c0012a2a:	c3                   	ret    
c0012a2b:	90                   	nop

c0012a2c <Directory::~Directory()>:
c0012a2c:	83 ec 0c             	sub    esp,0xc
c0012a2f:	83 ec 0c             	sub    esp,0xc
c0012a32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a36:	e8 cd ff ff ff       	call   c0012a08 <Directory::~Directory()>
c0012a3b:	83 c4 10             	add    esp,0x10
c0012a3e:	83 ec 08             	sub    esp,0x8
c0012a41:	68 14 01 00 00       	push   0x114
c0012a46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a4a:	e8 22 fc ff ff       	call   c0012671 <operator delete(void*, unsigned long)>
c0012a4f:	83 c4 10             	add    esp,0x10
c0012a52:	83 c4 0c             	add    esp,0xc
c0012a55:	c3                   	ret    

c0012a56 <Filesystem::Filesystem()>:
c0012a56:	ba ec 92 02 c0       	mov    edx,0xc00292ec
c0012a5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a5f:	89 10                	mov    DWORD PTR [eax],edx
c0012a61:	8b 15 88 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca88
c0012a67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a6b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012a6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a72:	a3 88 ca 02 c0       	mov    ds:0xc002ca88,eax
c0012a77:	90                   	nop
c0012a78:	c3                   	ret    
c0012a79:	90                   	nop

c0012a7a <Filesystem::~Filesystem()>:
c0012a7a:	ba ec 92 02 c0       	mov    edx,0xc00292ec
c0012a7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a83:	89 10                	mov    DWORD PTR [eax],edx
c0012a85:	90                   	nop
c0012a86:	c3                   	ret    
c0012a87:	90                   	nop

c0012a88 <Filesystem::~Filesystem()>:
c0012a88:	83 ec 0c             	sub    esp,0xc
c0012a8b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012a8f:	e8 e6 ff ff ff       	call   c0012a7a <Filesystem::~Filesystem()>
c0012a94:	83 c4 04             	add    esp,0x4
c0012a97:	83 ec 08             	sub    esp,0x8
c0012a9a:	6a 08                	push   0x8
c0012a9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012aa0:	e8 cc fb ff ff       	call   c0012671 <operator delete(void*, unsigned long)>
c0012aa5:	83 c4 10             	add    esp,0x10
c0012aa8:	83 c4 0c             	add    esp,0xc
c0012aab:	c3                   	ret    

c0012aac <initVFS()>:
c0012aac:	83 ec 18             	sub    esp,0x18
c0012aaf:	6a 08                	push   0x8
c0012ab1:	e8 1e ca ff ff       	call   c000f4d4 <malloc>
c0012ab6:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ab9:	e8 b0 d3 00 00       	call   c001fe6e <FAT::FAT()>
c0012abe:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012ac5:	e8 0a ca ff ff       	call   c000f4d4 <malloc>
c0012aca:	89 04 24             	mov    DWORD PTR [esp],eax
c0012acd:	e8 12 e6 00 00       	call   c00210e4 <ISO9660::ISO9660()>
c0012ad2:	83 c4 1c             	add    esp,0x1c
c0012ad5:	c3                   	ret    

c0012ad6 <standardiseFiles(char*, char const*, char const*)>:
c0012ad6:	55                   	push   ebp
c0012ad7:	57                   	push   edi
c0012ad8:	56                   	push   esi
c0012ad9:	53                   	push   ebx
c0012ada:	81 ec 10 04 00 00    	sub    esp,0x410
c0012ae0:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012ae7:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012aee:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012af5:	68 00 04 00 00       	push   0x400
c0012afa:	6a 00                	push   0x0
c0012afc:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012b00:	56                   	push   esi
c0012b01:	e8 85 db fe ff       	call   c000068b <memset>
c0012b06:	83 c4 10             	add    esp,0x10
c0012b09:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012b0d:	75 0b                	jne    c0012b1a <standardiseFiles(char*, char const*, char const*)+0x44>
c0012b0f:	50                   	push   eax
c0012b10:	50                   	push   eax
c0012b11:	57                   	push   edi
c0012b12:	56                   	push   esi
c0012b13:	e8 12 dc fe ff       	call   c000072a <strcpy>
c0012b18:	eb 41                	jmp    c0012b5b <standardiseFiles(char*, char const*, char const*)+0x85>
c0012b1a:	8a 07                	mov    al,BYTE PTR [edi]
c0012b1c:	3c 5c                	cmp    al,0x5c
c0012b1e:	74 04                	je     c0012b24 <standardiseFiles(char*, char const*, char const*)+0x4e>
c0012b20:	3c 2f                	cmp    al,0x2f
c0012b22:	75 18                	jne    c0012b3c <standardiseFiles(char*, char const*, char const*)+0x66>
c0012b24:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012b27:	3c 60                	cmp    al,0x60
c0012b29:	7e 03                	jle    c0012b2e <standardiseFiles(char*, char const*, char const*)+0x58>
c0012b2b:	83 e8 20             	sub    eax,0x20
c0012b2e:	88 04 24             	mov    BYTE PTR [esp],al
c0012b31:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012b38:	50                   	push   eax
c0012b39:	50                   	push   eax
c0012b3a:	eb 18                	jmp    c0012b54 <standardiseFiles(char*, char const*, char const*)+0x7e>
c0012b3c:	50                   	push   eax
c0012b3d:	50                   	push   eax
c0012b3e:	55                   	push   ebp
c0012b3f:	56                   	push   esi
c0012b40:	e8 e5 db fe ff       	call   c000072a <strcpy>
c0012b45:	5a                   	pop    edx
c0012b46:	59                   	pop    ecx
c0012b47:	68 66 a7 02 c0       	push   0xc002a766
c0012b4c:	56                   	push   esi
c0012b4d:	e8 8f dc fe ff       	call   c00007e1 <strcat>
c0012b52:	5d                   	pop    ebp
c0012b53:	58                   	pop    eax
c0012b54:	57                   	push   edi
c0012b55:	56                   	push   esi
c0012b56:	e8 86 dc fe ff       	call   c00007e1 <strcat>
c0012b5b:	83 c4 10             	add    esp,0x10
c0012b5e:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012b61:	3c 60                	cmp    al,0x60
c0012b63:	7e 03                	jle    c0012b68 <standardiseFiles(char*, char const*, char const*)+0x92>
c0012b65:	83 e8 20             	sub    eax,0x20
c0012b68:	88 04 24             	mov    BYTE PTR [esp],al
c0012b6b:	88 03                	mov    BYTE PTR [ebx],al
c0012b6d:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012b74:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012b7a:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012b7e:	bf 03 00 00 00       	mov    edi,0x3
c0012b83:	b8 03 00 00 00       	mov    eax,0x3
c0012b88:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012b8b:	84 d2                	test   dl,dl
c0012b8d:	0f 84 91 00 00 00    	je     c0012c24 <standardiseFiles(char*, char const*, char const*)+0x14e>
c0012b93:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012b96:	80 fa 5c             	cmp    dl,0x5c
c0012b99:	74 05                	je     c0012ba0 <standardiseFiles(char*, char const*, char const*)+0xca>
c0012b9b:	80 fa 2f             	cmp    dl,0x2f
c0012b9e:	75 12                	jne    c0012bb2 <standardiseFiles(char*, char const*, char const*)+0xdc>
c0012ba0:	89 c5                	mov    ebp,eax
c0012ba2:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012ba7:	74 09                	je     c0012bb2 <standardiseFiles(char*, char const*, char const*)+0xdc>
c0012ba9:	40                   	inc    eax
c0012baa:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012bae:	89 cf                	mov    edi,ecx
c0012bb0:	eb d6                	jmp    c0012b88 <standardiseFiles(char*, char const*, char const*)+0xb2>
c0012bb2:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012bb7:	75 5b                	jne    c0012c14 <standardiseFiles(char*, char const*, char const*)+0x13e>
c0012bb9:	80 fa 2e             	cmp    dl,0x2e
c0012bbc:	75 56                	jne    c0012c14 <standardiseFiles(char*, char const*, char const*)+0x13e>
c0012bbe:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012bc2:	74 19                	je     c0012bdd <standardiseFiles(char*, char const*, char const*)+0x107>
c0012bc4:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012bc9:	74 53                	je     c0012c1e <standardiseFiles(char*, char const*, char const*)+0x148>
c0012bcb:	89 f9                	mov    ecx,edi
c0012bcd:	41                   	inc    ecx
c0012bce:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012bd1:	80 fa 2f             	cmp    dl,0x2f
c0012bd4:	74 f7                	je     c0012bcd <standardiseFiles(char*, char const*, char const*)+0xf7>
c0012bd6:	80 fa 5c             	cmp    dl,0x5c
c0012bd9:	74 f2                	je     c0012bcd <standardiseFiles(char*, char const*, char const*)+0xf7>
c0012bdb:	eb d1                	jmp    c0012bae <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012bdd:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012be2:	74 3a                	je     c0012c1e <standardiseFiles(char*, char const*, char const*)+0x148>
c0012be4:	83 f8 03             	cmp    eax,0x3
c0012be7:	74 c5                	je     c0012bae <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012be9:	41                   	inc    ecx
c0012bea:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012bed:	80 fa 2f             	cmp    dl,0x2f
c0012bf0:	74 f7                	je     c0012be9 <standardiseFiles(char*, char const*, char const*)+0x113>
c0012bf2:	80 fa 5c             	cmp    dl,0x5c
c0012bf5:	74 f2                	je     c0012be9 <standardiseFiles(char*, char const*, char const*)+0x113>
c0012bf7:	48                   	dec    eax
c0012bf8:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012bfc:	75 06                	jne    c0012c04 <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012bfe:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012c02:	eb f3                	jmp    c0012bf7 <standardiseFiles(char*, char const*, char const*)+0x121>
c0012c04:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012c08:	74 07                	je     c0012c11 <standardiseFiles(char*, char const*, char const*)+0x13b>
c0012c0a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012c0e:	48                   	dec    eax
c0012c0f:	eb f3                	jmp    c0012c04 <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012c11:	40                   	inc    eax
c0012c12:	eb 9a                	jmp    c0012bae <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c14:	80 fa 2f             	cmp    dl,0x2f
c0012c17:	74 95                	je     c0012bae <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c19:	80 fa 5c             	cmp    dl,0x5c
c0012c1c:	74 90                	je     c0012bae <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c1e:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012c21:	40                   	inc    eax
c0012c22:	eb 8a                	jmp    c0012bae <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c24:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012c28:	83 ec 0c             	sub    esp,0xc
c0012c2b:	53                   	push   ebx
c0012c2c:	e8 77 da fe ff       	call   c00006a8 <strlen>
c0012c31:	83 c4 10             	add    esp,0x10
c0012c34:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012c39:	75 26                	jne    c0012c61 <standardiseFiles(char*, char const*, char const*)+0x18b>
c0012c3b:	83 ec 0c             	sub    esp,0xc
c0012c3e:	53                   	push   ebx
c0012c3f:	e8 64 da fe ff       	call   c00006a8 <strlen>
c0012c44:	83 c4 10             	add    esp,0x10
c0012c47:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012c4c:	74 26                	je     c0012c74 <standardiseFiles(char*, char const*, char const*)+0x19e>
c0012c4e:	83 ec 0c             	sub    esp,0xc
c0012c51:	53                   	push   ebx
c0012c52:	e8 51 da fe ff       	call   c00006a8 <strlen>
c0012c57:	83 c4 10             	add    esp,0x10
c0012c5a:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012c5f:	eb c7                	jmp    c0012c28 <standardiseFiles(char*, char const*, char const*)+0x152>
c0012c61:	83 ec 0c             	sub    esp,0xc
c0012c64:	53                   	push   ebx
c0012c65:	e8 3e da fe ff       	call   c00006a8 <strlen>
c0012c6a:	83 c4 10             	add    esp,0x10
c0012c6d:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012c72:	74 c7                	je     c0012c3b <standardiseFiles(char*, char const*, char const*)+0x165>
c0012c74:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012c7a:	5b                   	pop    ebx
c0012c7b:	5e                   	pop    esi
c0012c7c:	5f                   	pop    edi
c0012c7d:	5d                   	pop    ebp
c0012c7e:	c3                   	ret    
c0012c7f:	90                   	nop

c0012c80 <File::File(char const*, Process*)>:
c0012c80:	83 ec 0c             	sub    esp,0xc
c0012c83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c87:	83 ec 08             	sub    esp,0x8
c0012c8a:	6a 00                	push   0x0
c0012c8c:	50                   	push   eax
c0012c8d:	e8 8c e6 ff ff       	call   c001131e <UnixFile::UnixFile(int)>
c0012c92:	83 c4 10             	add    esp,0x10
c0012c95:	ba 50 93 02 c0       	mov    edx,0xc0029350
c0012c9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c9e:	89 10                	mov    DWORD PTR [eax],edx
c0012ca0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012ca4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012caa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cae:	83 c0 0d             	add    eax,0xd
c0012cb1:	83 ec 04             	sub    esp,0x4
c0012cb4:	52                   	push   edx
c0012cb5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cb9:	50                   	push   eax
c0012cba:	e8 17 fe ff ff       	call   c0012ad6 <standardiseFiles(char*, char const*, char const*)>
c0012cbf:	83 c4 10             	add    esp,0x10
c0012cc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cc6:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012cc9:	8d 50 bf             	lea    edx,[eax-0x41]
c0012ccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cd0:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012cd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cda:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012cde:	90                   	nop
c0012cdf:	83 c4 0c             	add    esp,0xc
c0012ce2:	c3                   	ret    
c0012ce3:	90                   	nop

c0012ce4 <File::open(FileOpenMode)>:
c0012ce4:	53                   	push   ebx
c0012ce5:	b8 0b 00 00 00       	mov    eax,0xb
c0012cea:	83 ec 08             	sub    esp,0x8
c0012ced:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012cf1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012cf8:	80 fa 19             	cmp    dl,0x19
c0012cfb:	77 40                	ja     c0012d3d <File::open(FileOpenMode)+0x59>
c0012cfd:	8b 14 95 20 cf 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd30e0]
c0012d04:	85 d2                	test   edx,edx
c0012d06:	74 35                	je     c0012d3d <File::open(FileOpenMode)+0x59>
c0012d08:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012d0e:	85 d2                	test   edx,edx
c0012d10:	74 2b                	je     c0012d3d <File::open(FileOpenMode)+0x59>
c0012d12:	b8 06 00 00 00       	mov    eax,0x6
c0012d17:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012d1b:	75 20                	jne    c0012d3d <File::open(FileOpenMode)+0x59>
c0012d1d:	8b 02                	mov    eax,DWORD PTR [edx]
c0012d1f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012d25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012d29:	51                   	push   ecx
c0012d2a:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012d2d:	51                   	push   ecx
c0012d2e:	52                   	push   edx
c0012d2f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012d32:	83 c4 10             	add    esp,0x10
c0012d35:	85 c0                	test   eax,eax
c0012d37:	75 04                	jne    c0012d3d <File::open(FileOpenMode)+0x59>
c0012d39:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012d3d:	83 c4 08             	add    esp,0x8
c0012d40:	5b                   	pop    ebx
c0012d41:	c3                   	ret    

c0012d42 <File::close()>:
c0012d42:	53                   	push   ebx
c0012d43:	b8 0b 00 00 00       	mov    eax,0xb
c0012d48:	83 ec 08             	sub    esp,0x8
c0012d4b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012d4f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012d56:	80 fa 19             	cmp    dl,0x19
c0012d59:	77 41                	ja     c0012d9c <File::close()+0x5a>
c0012d5b:	8b 1c 95 20 cf 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd30e0]
c0012d62:	85 db                	test   ebx,ebx
c0012d64:	74 36                	je     c0012d9c <File::close()+0x5a>
c0012d66:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012d6d:	74 2d                	je     c0012d9c <File::close()+0x5a>
c0012d6f:	b8 05 00 00 00       	mov    eax,0x5
c0012d74:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012d78:	74 22                	je     c0012d9c <File::close()+0x5a>
c0012d7a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012d7e:	8b 04 95 20 cf 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd30e0]
c0012d85:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012d8b:	53                   	push   ebx
c0012d8c:	53                   	push   ebx
c0012d8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d8f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012d95:	50                   	push   eax
c0012d96:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012d99:	83 c4 10             	add    esp,0x10
c0012d9c:	83 c4 08             	add    esp,0x8
c0012d9f:	5b                   	pop    ebx
c0012da0:	c3                   	ret    
c0012da1:	90                   	nop

c0012da2 <File::seek(unsigned long long)>:
c0012da2:	56                   	push   esi
c0012da3:	53                   	push   ebx
c0012da4:	b8 0b 00 00 00       	mov    eax,0xb
c0012da9:	51                   	push   ecx
c0012daa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012dae:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012db2:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012db9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012dbd:	80 fa 19             	cmp    dl,0x19
c0012dc0:	77 31                	ja     c0012df3 <File::seek(unsigned long long)+0x51>
c0012dc2:	8b 14 95 20 cf 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd30e0]
c0012dc9:	85 d2                	test   edx,edx
c0012dcb:	74 26                	je     c0012df3 <File::seek(unsigned long long)+0x51>
c0012dcd:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012dd3:	85 d2                	test   edx,edx
c0012dd5:	74 1c                	je     c0012df3 <File::seek(unsigned long long)+0x51>
c0012dd7:	b8 05 00 00 00       	mov    eax,0x5
c0012ddc:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012de0:	74 11                	je     c0012df3 <File::seek(unsigned long long)+0x51>
c0012de2:	8b 02                	mov    eax,DWORD PTR [edx]
c0012de4:	53                   	push   ebx
c0012de5:	51                   	push   ecx
c0012de6:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012dec:	52                   	push   edx
c0012ded:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012df0:	83 c4 10             	add    esp,0x10
c0012df3:	5a                   	pop    edx
c0012df4:	5b                   	pop    ebx
c0012df5:	5e                   	pop    esi
c0012df6:	c3                   	ret    
c0012df7:	90                   	nop

c0012df8 <File::tell(unsigned long long*)>:
c0012df8:	83 ec 0c             	sub    esp,0xc
c0012dfb:	b8 0b 00 00 00       	mov    eax,0xb
c0012e00:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012e04:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012e0b:	80 fa 19             	cmp    dl,0x19
c0012e0e:	77 34                	ja     c0012e44 <File::tell(unsigned long long*)+0x4c>
c0012e10:	8b 14 95 20 cf 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd30e0]
c0012e17:	85 d2                	test   edx,edx
c0012e19:	74 29                	je     c0012e44 <File::tell(unsigned long long*)+0x4c>
c0012e1b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012e21:	85 d2                	test   edx,edx
c0012e23:	74 1f                	je     c0012e44 <File::tell(unsigned long long*)+0x4c>
c0012e25:	b8 05 00 00 00       	mov    eax,0x5
c0012e2a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012e2e:	74 14                	je     c0012e44 <File::tell(unsigned long long*)+0x4c>
c0012e30:	50                   	push   eax
c0012e31:	8b 02                	mov    eax,DWORD PTR [edx]
c0012e33:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e37:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012e3d:	52                   	push   edx
c0012e3e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012e41:	83 c4 10             	add    esp,0x10
c0012e44:	83 c4 0c             	add    esp,0xc
c0012e47:	c3                   	ret    

c0012e48 <File::rewind()>:
c0012e48:	83 ec 10             	sub    esp,0x10
c0012e4b:	6a 00                	push   0x0
c0012e4d:	6a 00                	push   0x0
c0012e4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e53:	e8 4a ff ff ff       	call   c0012da2 <File::seek(unsigned long long)>
c0012e58:	83 c4 1c             	add    esp,0x1c
c0012e5b:	c3                   	ret    

c0012e5c <File::unlink()>:
c0012e5c:	83 ec 0c             	sub    esp,0xc
c0012e5f:	b8 0b 00 00 00       	mov    eax,0xb
c0012e64:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e68:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e6f:	80 f9 19             	cmp    cl,0x19
c0012e72:	77 2f                	ja     c0012ea3 <File::unlink()+0x47>
c0012e74:	8b 0c 8d 20 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd30e0]
c0012e7b:	85 c9                	test   ecx,ecx
c0012e7d:	74 24                	je     c0012ea3 <File::unlink()+0x47>
c0012e7f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e85:	85 c9                	test   ecx,ecx
c0012e87:	74 1a                	je     c0012ea3 <File::unlink()+0x47>
c0012e89:	b8 06 00 00 00       	mov    eax,0x6
c0012e8e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e92:	75 0f                	jne    c0012ea3 <File::unlink()+0x47>
c0012e94:	83 c2 0d             	add    edx,0xd
c0012e97:	50                   	push   eax
c0012e98:	50                   	push   eax
c0012e99:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e9b:	52                   	push   edx
c0012e9c:	51                   	push   ecx
c0012e9d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012ea0:	83 c4 10             	add    esp,0x10
c0012ea3:	83 c4 0c             	add    esp,0xc
c0012ea6:	c3                   	ret    
c0012ea7:	90                   	nop

c0012ea8 <File::rename(char const*)>:
c0012ea8:	83 ec 0c             	sub    esp,0xc
c0012eab:	b8 0b 00 00 00       	mov    eax,0xb
c0012eb0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012eb4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012ebb:	80 f9 19             	cmp    cl,0x19
c0012ebe:	77 32                	ja     c0012ef2 <File::rename(char const*)+0x4a>
c0012ec0:	8b 0c 8d 20 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd30e0]
c0012ec7:	85 c9                	test   ecx,ecx
c0012ec9:	74 27                	je     c0012ef2 <File::rename(char const*)+0x4a>
c0012ecb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ed1:	85 c9                	test   ecx,ecx
c0012ed3:	74 1d                	je     c0012ef2 <File::rename(char const*)+0x4a>
c0012ed5:	b8 06 00 00 00       	mov    eax,0x6
c0012eda:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ede:	75 12                	jne    c0012ef2 <File::rename(char const*)+0x4a>
c0012ee0:	83 c2 0d             	add    edx,0xd
c0012ee3:	50                   	push   eax
c0012ee4:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ee6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012eea:	52                   	push   edx
c0012eeb:	51                   	push   ecx
c0012eec:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012eef:	83 c4 10             	add    esp,0x10
c0012ef2:	83 c4 0c             	add    esp,0xc
c0012ef5:	c3                   	ret    

c0012ef6 <File::chfatattr(unsigned char, unsigned char)>:
c0012ef6:	57                   	push   edi
c0012ef7:	b8 0b 00 00 00       	mov    eax,0xb
c0012efc:	56                   	push   esi
c0012efd:	53                   	push   ebx
c0012efe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f02:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012f06:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f0d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012f11:	80 f9 19             	cmp    cl,0x19
c0012f14:	77 37                	ja     c0012f4d <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f16:	8b 0c 8d 20 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd30e0]
c0012f1d:	85 c9                	test   ecx,ecx
c0012f1f:	74 2c                	je     c0012f4d <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f21:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f27:	85 c9                	test   ecx,ecx
c0012f29:	74 22                	je     c0012f4d <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f2b:	b8 06 00 00 00       	mov    eax,0x6
c0012f30:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f34:	75 17                	jne    c0012f4d <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f36:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012f38:	89 f0                	mov    eax,esi
c0012f3a:	83 c2 0d             	add    edx,0xd
c0012f3d:	0f b6 f0             	movzx  esi,al
c0012f40:	0f b6 db             	movzx  ebx,bl
c0012f43:	56                   	push   esi
c0012f44:	53                   	push   ebx
c0012f45:	52                   	push   edx
c0012f46:	51                   	push   ecx
c0012f47:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012f4a:	83 c4 10             	add    esp,0x10
c0012f4d:	5b                   	pop    ebx
c0012f4e:	5e                   	pop    esi
c0012f4f:	5f                   	pop    edi
c0012f50:	c3                   	ret    
c0012f51:	90                   	nop

c0012f52 <File::exists()>:
c0012f52:	83 ec 0c             	sub    esp,0xc
c0012f55:	31 c0                	xor    eax,eax
c0012f57:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f5b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f62:	80 f9 19             	cmp    cl,0x19
c0012f65:	77 24                	ja     c0012f8b <File::exists()+0x39>
c0012f67:	8b 0c 8d 20 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd30e0]
c0012f6e:	85 c9                	test   ecx,ecx
c0012f70:	74 19                	je     c0012f8b <File::exists()+0x39>
c0012f72:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f78:	85 c9                	test   ecx,ecx
c0012f7a:	74 0f                	je     c0012f8b <File::exists()+0x39>
c0012f7c:	83 c2 0d             	add    edx,0xd
c0012f7f:	50                   	push   eax
c0012f80:	50                   	push   eax
c0012f81:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f83:	52                   	push   edx
c0012f84:	51                   	push   ecx
c0012f85:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012f88:	83 c4 10             	add    esp,0x10
c0012f8b:	83 c4 0c             	add    esp,0xc
c0012f8e:	c3                   	ret    
c0012f8f:	90                   	nop

c0012f90 <File::stat(unsigned long long*, bool*)>:
c0012f90:	56                   	push   esi
c0012f91:	53                   	push   ebx
c0012f92:	50                   	push   eax
c0012f93:	b8 0b 00 00 00       	mov    eax,0xb
c0012f98:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f9c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012fa0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012fa7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012fab:	80 f9 19             	cmp    cl,0x19
c0012fae:	77 3d                	ja     c0012fed <File::stat(unsigned long long*, bool*)+0x5d>
c0012fb0:	8b 0c 8d 20 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd30e0]
c0012fb7:	85 c9                	test   ecx,ecx
c0012fb9:	74 32                	je     c0012fed <File::stat(unsigned long long*, bool*)+0x5d>
c0012fbb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012fc1:	85 c9                	test   ecx,ecx
c0012fc3:	74 28                	je     c0012fed <File::stat(unsigned long long*, bool*)+0x5d>
c0012fc5:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012fc7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012fcb:	74 13                	je     c0012fe0 <File::stat(unsigned long long*, bool*)+0x50>
c0012fcd:	83 ec 04             	sub    esp,0x4
c0012fd0:	56                   	push   esi
c0012fd1:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012fd7:	51                   	push   ecx
c0012fd8:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012fdb:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012fde:	eb 0a                	jmp    c0012fea <File::stat(unsigned long long*, bool*)+0x5a>
c0012fe0:	53                   	push   ebx
c0012fe1:	83 c2 0d             	add    edx,0xd
c0012fe4:	56                   	push   esi
c0012fe5:	52                   	push   edx
c0012fe6:	51                   	push   ecx
c0012fe7:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012fea:	83 c4 10             	add    esp,0x10
c0012fed:	5a                   	pop    edx
c0012fee:	5b                   	pop    ebx
c0012fef:	5e                   	pop    esi
c0012ff0:	c3                   	ret    

c0012ff1 <getcwd(Process*, char*, int)>:
c0012ff1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ff5:	31 c0                	xor    eax,eax
c0012ff7:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012ffa:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012ffe:	7d 15                	jge    c0013015 <getcwd(Process*, char*, int)+0x24>
c0013000:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013004:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c001300b:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001300e:	84 c9                	test   cl,cl
c0013010:	74 06                	je     c0013018 <getcwd(Process*, char*, int)+0x27>
c0013012:	40                   	inc    eax
c0013013:	eb e2                	jmp    c0012ff7 <getcwd(Process*, char*, int)+0x6>
c0013015:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0013018:	31 c0                	xor    eax,eax
c001301a:	c3                   	ret    

c001301b <setcwd(Process*, char*)>:
c001301b:	55                   	push   ebp
c001301c:	57                   	push   edi
c001301d:	56                   	push   esi
c001301e:	53                   	push   ebx
c001301f:	81 ec 20 02 00 00    	sub    esp,0x220
c0013025:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c001302c:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0013032:	57                   	push   edi
c0013033:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001303a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001303e:	56                   	push   esi
c001303f:	e8 92 fa ff ff       	call   c0012ad6 <standardiseFiles(char*, char const*, char const*)>
c0013044:	89 34 24             	mov    DWORD PTR [esp],esi
c0013047:	e8 5c d6 fe ff       	call   c00006a8 <strlen>
c001304c:	83 c4 10             	add    esp,0x10
c001304f:	83 f8 02             	cmp    eax,0x2
c0013052:	77 17                	ja     c001306b <setcwd(Process*, char*)+0x50>
c0013054:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013059:	83 e8 41             	sub    eax,0x41
c001305c:	83 f8 19             	cmp    eax,0x19
c001305f:	76 24                	jbe    c0013085 <setcwd(Process*, char*)+0x6a>
c0013061:	b8 03 00 00 00       	mov    eax,0x3
c0013066:	e9 e0 00 00 00       	jmp    c001314b <setcwd(Process*, char*)+0x130>
c001306b:	83 ec 0c             	sub    esp,0xc
c001306e:	56                   	push   esi
c001306f:	e8 34 d6 fe ff       	call   c00006a8 <strlen>
c0013074:	83 c4 10             	add    esp,0x10
c0013077:	83 f8 03             	cmp    eax,0x3
c001307a:	75 34                	jne    c00130b0 <setcwd(Process*, char*)+0x95>
c001307c:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013081:	75 2d                	jne    c00130b0 <setcwd(Process*, char*)+0x95>
c0013083:	eb cf                	jmp    c0013054 <setcwd(Process*, char*)+0x39>
c0013085:	8b 14 85 20 cf 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd30e0]
c001308c:	b8 05 00 00 00       	mov    eax,0x5
c0013091:	85 d2                	test   edx,edx
c0013093:	0f 84 b2 00 00 00    	je     c001314b <setcwd(Process*, char*)+0x130>
c0013099:	b8 06 00 00 00       	mov    eax,0x6
c001309e:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00130a5:	0f 85 92 00 00 00    	jne    c001313d <setcwd(Process*, char*)+0x122>
c00130ab:	e9 9b 00 00 00       	jmp    c001314b <setcwd(Process*, char*)+0x130>
c00130b0:	83 ec 0c             	sub    esp,0xc
c00130b3:	68 14 01 00 00       	push   0x114
c00130b8:	e8 17 c4 ff ff       	call   c000f4d4 <malloc>
c00130bd:	83 c4 0c             	add    esp,0xc
c00130c0:	89 c3                	mov    ebx,eax
c00130c2:	55                   	push   ebp
c00130c3:	56                   	push   esi
c00130c4:	50                   	push   eax
c00130c5:	e8 b6 fb ff ff       	call   c0012c80 <File::File(char const*, Process*)>
c00130ca:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00130cf:	83 c4 0c             	add    esp,0xc
c00130d2:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00130d6:	50                   	push   eax
c00130d7:	8d 44 24 10          	lea    eax,[esp+0x10]
c00130db:	50                   	push   eax
c00130dc:	53                   	push   ebx
c00130dd:	e8 ae fe ff ff       	call   c0012f90 <File::stat(unsigned long long*, bool*)>
c00130e2:	83 c4 10             	add    esp,0x10
c00130e5:	83 f8 02             	cmp    eax,0x2
c00130e8:	74 04                	je     c00130ee <setcwd(Process*, char*)+0xd3>
c00130ea:	85 c0                	test   eax,eax
c00130ec:	74 1c                	je     c001310a <setcwd(Process*, char*)+0xef>
c00130ee:	b8 01 00 00 00       	mov    eax,0x1
c00130f3:	85 db                	test   ebx,ebx
c00130f5:	74 54                	je     c001314b <setcwd(Process*, char*)+0x130>
c00130f7:	83 ec 0c             	sub    esp,0xc
c00130fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00130fc:	53                   	push   ebx
c00130fd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013100:	83 c4 10             	add    esp,0x10
c0013103:	b8 01 00 00 00       	mov    eax,0x1
c0013108:	eb 41                	jmp    c001314b <setcwd(Process*, char*)+0x130>
c001310a:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001310f:	75 1c                	jne    c001312d <setcwd(Process*, char*)+0x112>
c0013111:	b8 02 00 00 00       	mov    eax,0x2
c0013116:	85 db                	test   ebx,ebx
c0013118:	74 31                	je     c001314b <setcwd(Process*, char*)+0x130>
c001311a:	83 ec 0c             	sub    esp,0xc
c001311d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001311f:	53                   	push   ebx
c0013120:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013123:	83 c4 10             	add    esp,0x10
c0013126:	b8 02 00 00 00       	mov    eax,0x2
c001312b:	eb 1e                	jmp    c001314b <setcwd(Process*, char*)+0x130>
c001312d:	85 db                	test   ebx,ebx
c001312f:	74 0c                	je     c001313d <setcwd(Process*, char*)+0x122>
c0013131:	83 ec 0c             	sub    esp,0xc
c0013134:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013136:	53                   	push   ebx
c0013137:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001313a:	83 c4 10             	add    esp,0x10
c001313d:	50                   	push   eax
c001313e:	50                   	push   eax
c001313f:	56                   	push   esi
c0013140:	57                   	push   edi
c0013141:	e8 e4 d5 fe ff       	call   c000072a <strcpy>
c0013146:	83 c4 10             	add    esp,0x10
c0013149:	31 c0                	xor    eax,eax
c001314b:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013151:	5b                   	pop    ebx
c0013152:	5e                   	pop    esi
c0013153:	5f                   	pop    edi
c0013154:	5d                   	pop    ebp
c0013155:	c3                   	ret    

c0013156 <Directory::Directory(char const*, Process*)>:
c0013156:	83 ec 0c             	sub    esp,0xc
c0013159:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001315d:	83 ec 08             	sub    esp,0x8
c0013160:	6a 00                	push   0x0
c0013162:	50                   	push   eax
c0013163:	e8 b6 e1 ff ff       	call   c001131e <UnixFile::UnixFile(int)>
c0013168:	83 c4 10             	add    esp,0x10
c001316b:	ba 6c 93 02 c0       	mov    edx,0xc002936c
c0013170:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013174:	89 10                	mov    DWORD PTR [eax],edx
c0013176:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001317a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013184:	83 c0 0d             	add    eax,0xd
c0013187:	83 ec 04             	sub    esp,0x4
c001318a:	52                   	push   edx
c001318b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001318f:	50                   	push   eax
c0013190:	e8 41 f9 ff ff       	call   c0012ad6 <standardiseFiles(char*, char const*, char const*)>
c0013195:	83 c4 10             	add    esp,0x10
c0013198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001319c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001319f:	8d 50 bf             	lea    edx,[eax-0x41]
c00131a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131a6:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00131ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131b0:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00131b4:	90                   	nop
c00131b5:	83 c4 0c             	add    esp,0xc
c00131b8:	c3                   	ret    
c00131b9:	90                   	nop

c00131ba <Directory::open()>:
c00131ba:	53                   	push   ebx
c00131bb:	b8 0b 00 00 00       	mov    eax,0xb
c00131c0:	83 ec 08             	sub    esp,0x8
c00131c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00131c7:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00131ce:	80 fa 19             	cmp    dl,0x19
c00131d1:	77 3d                	ja     c0013210 <Directory::open()+0x56>
c00131d3:	8b 14 95 20 cf 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd30e0]
c00131da:	85 d2                	test   edx,edx
c00131dc:	74 32                	je     c0013210 <Directory::open()+0x56>
c00131de:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00131e4:	85 d2                	test   edx,edx
c00131e6:	74 28                	je     c0013210 <Directory::open()+0x56>
c00131e8:	b8 06 00 00 00       	mov    eax,0x6
c00131ed:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00131f1:	75 1d                	jne    c0013210 <Directory::open()+0x56>
c00131f3:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00131f9:	50                   	push   eax
c00131fa:	8b 02                	mov    eax,DWORD PTR [edx]
c00131fc:	51                   	push   ecx
c00131fd:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013200:	51                   	push   ecx
c0013201:	52                   	push   edx
c0013202:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013205:	83 c4 10             	add    esp,0x10
c0013208:	85 c0                	test   eax,eax
c001320a:	75 04                	jne    c0013210 <Directory::open()+0x56>
c001320c:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013210:	83 c4 08             	add    esp,0x8
c0013213:	5b                   	pop    ebx
c0013214:	c3                   	ret    
c0013215:	90                   	nop

c0013216 <Directory::close()>:
c0013216:	53                   	push   ebx
c0013217:	b8 0b 00 00 00       	mov    eax,0xb
c001321c:	83 ec 08             	sub    esp,0x8
c001321f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013223:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001322a:	80 fa 19             	cmp    dl,0x19
c001322d:	77 41                	ja     c0013270 <Directory::close()+0x5a>
c001322f:	8b 1c 95 20 cf 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd30e0]
c0013236:	85 db                	test   ebx,ebx
c0013238:	74 36                	je     c0013270 <Directory::close()+0x5a>
c001323a:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013241:	74 2d                	je     c0013270 <Directory::close()+0x5a>
c0013243:	b8 05 00 00 00       	mov    eax,0x5
c0013248:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001324c:	74 22                	je     c0013270 <Directory::close()+0x5a>
c001324e:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013252:	8b 04 95 20 cf 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd30e0]
c0013259:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001325f:	53                   	push   ebx
c0013260:	53                   	push   ebx
c0013261:	8b 10                	mov    edx,DWORD PTR [eax]
c0013263:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013269:	50                   	push   eax
c001326a:	ff 52 20             	call   DWORD PTR [edx+0x20]
c001326d:	83 c4 10             	add    esp,0x10
c0013270:	83 c4 08             	add    esp,0x8
c0013273:	5b                   	pop    ebx
c0013274:	c3                   	ret    
c0013275:	90                   	nop

c0013276 <Directory::unlink()>:
c0013276:	83 ec 0c             	sub    esp,0xc
c0013279:	b8 0b 00 00 00       	mov    eax,0xb
c001327e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013282:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013289:	80 f9 19             	cmp    cl,0x19
c001328c:	77 2f                	ja     c00132bd <Directory::unlink()+0x47>
c001328e:	8b 0c 8d 20 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd30e0]
c0013295:	85 c9                	test   ecx,ecx
c0013297:	74 24                	je     c00132bd <Directory::unlink()+0x47>
c0013299:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001329f:	85 c9                	test   ecx,ecx
c00132a1:	74 1a                	je     c00132bd <Directory::unlink()+0x47>
c00132a3:	b8 06 00 00 00       	mov    eax,0x6
c00132a8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00132ac:	75 0f                	jne    c00132bd <Directory::unlink()+0x47>
c00132ae:	83 c2 0d             	add    edx,0xd
c00132b1:	50                   	push   eax
c00132b2:	50                   	push   eax
c00132b3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132b5:	52                   	push   edx
c00132b6:	51                   	push   ecx
c00132b7:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00132ba:	83 c4 10             	add    esp,0x10
c00132bd:	83 c4 0c             	add    esp,0xc
c00132c0:	c3                   	ret    
c00132c1:	90                   	nop

c00132c2 <Directory::rename(char const*)>:
c00132c2:	83 ec 0c             	sub    esp,0xc
c00132c5:	b8 0b 00 00 00       	mov    eax,0xb
c00132ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00132ce:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00132d5:	80 f9 19             	cmp    cl,0x19
c00132d8:	77 32                	ja     c001330c <Directory::rename(char const*)+0x4a>
c00132da:	8b 0c 8d 20 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd30e0]
c00132e1:	85 c9                	test   ecx,ecx
c00132e3:	74 27                	je     c001330c <Directory::rename(char const*)+0x4a>
c00132e5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00132eb:	85 c9                	test   ecx,ecx
c00132ed:	74 1d                	je     c001330c <Directory::rename(char const*)+0x4a>
c00132ef:	b8 06 00 00 00       	mov    eax,0x6
c00132f4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00132f8:	75 12                	jne    c001330c <Directory::rename(char const*)+0x4a>
c00132fa:	83 c2 0d             	add    edx,0xd
c00132fd:	50                   	push   eax
c00132fe:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013300:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013304:	52                   	push   edx
c0013305:	51                   	push   ecx
c0013306:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013309:	83 c4 10             	add    esp,0x10
c001330c:	83 c4 0c             	add    esp,0xc
c001330f:	c3                   	ret    

c0013310 <Directory::exists()>:
c0013310:	83 ec 0c             	sub    esp,0xc
c0013313:	31 c0                	xor    eax,eax
c0013315:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013319:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013320:	80 f9 19             	cmp    cl,0x19
c0013323:	77 24                	ja     c0013349 <Directory::exists()+0x39>
c0013325:	8b 0c 8d 20 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd30e0]
c001332c:	85 c9                	test   ecx,ecx
c001332e:	74 19                	je     c0013349 <Directory::exists()+0x39>
c0013330:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013336:	85 c9                	test   ecx,ecx
c0013338:	74 0f                	je     c0013349 <Directory::exists()+0x39>
c001333a:	83 c2 0d             	add    edx,0xd
c001333d:	50                   	push   eax
c001333e:	50                   	push   eax
c001333f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013341:	52                   	push   edx
c0013342:	51                   	push   ecx
c0013343:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013346:	83 c4 10             	add    esp,0x10
c0013349:	83 c4 0c             	add    esp,0xc
c001334c:	c3                   	ret    
c001334d:	90                   	nop

c001334e <Directory::read(dirent*)>:
c001334e:	83 ec 1c             	sub    esp,0x1c
c0013351:	b8 0b 00 00 00       	mov    eax,0xb
c0013356:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001335a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013361:	80 fa 19             	cmp    dl,0x19
c0013364:	77 30                	ja     c0013396 <Directory::read(dirent*)+0x48>
c0013366:	8b 14 95 20 cf 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd30e0]
c001336d:	85 d2                	test   edx,edx
c001336f:	74 25                	je     c0013396 <Directory::read(dirent*)+0x48>
c0013371:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013378:	74 1c                	je     c0013396 <Directory::read(dirent*)+0x48>
c001337a:	83 ec 0c             	sub    esp,0xc
c001337d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001337f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013383:	52                   	push   edx
c0013384:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013388:	6a 00                	push   0x0
c001338a:	68 10 01 00 00       	push   0x110
c001338f:	51                   	push   ecx
c0013390:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013393:	83 c4 20             	add    esp,0x20
c0013396:	83 c4 1c             	add    esp,0x1c
c0013399:	c3                   	ret    

c001339a <Directory::create()>:
c001339a:	83 ec 0c             	sub    esp,0xc
c001339d:	b8 0b 00 00 00       	mov    eax,0xb
c00133a2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00133a6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00133ad:	80 f9 19             	cmp    cl,0x19
c00133b0:	77 2f                	ja     c00133e1 <Directory::create()+0x47>
c00133b2:	8b 0c 8d 20 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd30e0]
c00133b9:	85 c9                	test   ecx,ecx
c00133bb:	74 24                	je     c00133e1 <Directory::create()+0x47>
c00133bd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00133c3:	85 c9                	test   ecx,ecx
c00133c5:	74 1a                	je     c00133e1 <Directory::create()+0x47>
c00133c7:	b8 06 00 00 00       	mov    eax,0x6
c00133cc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00133d0:	75 0f                	jne    c00133e1 <Directory::create()+0x47>
c00133d2:	83 c2 0d             	add    edx,0xd
c00133d5:	50                   	push   eax
c00133d6:	50                   	push   eax
c00133d7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00133d9:	52                   	push   edx
c00133da:	51                   	push   ecx
c00133db:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00133de:	83 c4 10             	add    esp,0x10
c00133e1:	83 c4 0c             	add    esp,0xc
c00133e4:	c3                   	ret    
c00133e5:	90                   	nop

c00133e6 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c00133e6:	b8 0a 00 00 00       	mov    eax,0xa
c00133eb:	c3                   	ret    

c00133ec <Bus::Bus(char const*)>:
c00133ec:	83 ec 0c             	sub    esp,0xc
c00133ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133f3:	83 ec 08             	sub    esp,0x8
c00133f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133fa:	50                   	push   eax
c00133fb:	e8 30 09 00 00       	call   c0013d30 <Device::Device(char const*)>
c0013400:	83 c4 10             	add    esp,0x10
c0013403:	ba 88 93 02 c0       	mov    edx,0xc0029388
c0013408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001340c:	89 10                	mov    DWORD PTR [eax],edx
c001340e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013412:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c001341c:	90                   	nop
c001341d:	83 c4 0c             	add    esp,0xc
c0013420:	c3                   	ret    
c0013421:	90                   	nop

c0013422 <Bus::~Bus()>:
c0013422:	83 ec 0c             	sub    esp,0xc
c0013425:	ba 88 93 02 c0       	mov    edx,0xc0029388
c001342a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001342e:	89 10                	mov    DWORD PTR [eax],edx
c0013430:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013434:	83 ec 0c             	sub    esp,0xc
c0013437:	50                   	push   eax
c0013438:	e8 d5 05 00 00       	call   c0013a12 <Device::~Device()>
c001343d:	83 c4 10             	add    esp,0x10
c0013440:	90                   	nop
c0013441:	83 c4 0c             	add    esp,0xc
c0013444:	c3                   	ret    
c0013445:	90                   	nop

c0013446 <Bus::~Bus()>:
c0013446:	83 ec 0c             	sub    esp,0xc
c0013449:	83 ec 0c             	sub    esp,0xc
c001344c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013450:	e8 cd ff ff ff       	call   c0013422 <Bus::~Bus()>
c0013455:	83 c4 10             	add    esp,0x10
c0013458:	83 ec 08             	sub    esp,0x8
c001345b:	68 58 01 00 00       	push   0x158
c0013460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013464:	e8 08 f2 ff ff       	call   c0012671 <operator delete(void*, unsigned long)>
c0013469:	83 c4 10             	add    esp,0x10
c001346c:	83 c4 0c             	add    esp,0xc
c001346f:	c3                   	ret    

c0013470 <Buzzer::Buzzer(char const*)>:
c0013470:	83 ec 0c             	sub    esp,0xc
c0013473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013477:	83 ec 08             	sub    esp,0x8
c001347a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001347e:	50                   	push   eax
c001347f:	e8 ac 08 00 00       	call   c0013d30 <Device::Device(char const*)>
c0013484:	83 c4 10             	add    esp,0x10
c0013487:	ba b4 93 02 c0       	mov    edx,0xc00293b4
c001348c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013490:	89 10                	mov    DWORD PTR [eax],edx
c0013492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013496:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00134a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134a4:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c00134ae:	90                   	nop
c00134af:	83 c4 0c             	add    esp,0xc
c00134b2:	c3                   	ret    
c00134b3:	90                   	nop

c00134b4 <Buzzer::~Buzzer()>:
c00134b4:	83 ec 0c             	sub    esp,0xc
c00134b7:	ba b4 93 02 c0       	mov    edx,0xc00293b4
c00134bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134c0:	89 10                	mov    DWORD PTR [eax],edx
c00134c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134c6:	83 ec 0c             	sub    esp,0xc
c00134c9:	50                   	push   eax
c00134ca:	e8 43 05 00 00       	call   c0013a12 <Device::~Device()>
c00134cf:	83 c4 10             	add    esp,0x10
c00134d2:	90                   	nop
c00134d3:	83 c4 0c             	add    esp,0xc
c00134d6:	c3                   	ret    
c00134d7:	90                   	nop

c00134d8 <Buzzer::~Buzzer()>:
c00134d8:	83 ec 0c             	sub    esp,0xc
c00134db:	83 ec 0c             	sub    esp,0xc
c00134de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134e2:	e8 cd ff ff ff       	call   c00134b4 <Buzzer::~Buzzer()>
c00134e7:	83 c4 10             	add    esp,0x10
c00134ea:	83 ec 08             	sub    esp,0x8
c00134ed:	68 5c 01 00 00       	push   0x15c
c00134f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134f6:	e8 76 f1 ff ff       	call   c0012671 <operator delete(void*, unsigned long)>
c00134fb:	83 c4 10             	add    esp,0x10
c00134fe:	83 c4 0c             	add    esp,0xc
c0013501:	c3                   	ret    

c0013502 <Buzzer::stop()>:
c0013502:	83 ec 14             	sub    esp,0x14
c0013505:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013509:	8b 10                	mov    edx,DWORD PTR [eax]
c001350b:	6a 00                	push   0x0
c001350d:	50                   	push   eax
c001350e:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013511:	83 c4 1c             	add    esp,0x1c
c0013514:	c3                   	ret    

c0013515 <beepThread(void*)>:
c0013515:	53                   	push   ebx
c0013516:	83 ec 08             	sub    esp,0x8
c0013519:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001351d:	e8 da 97 00 00       	call   c001ccfc <unlockScheduler()>
c0013522:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013527:	52                   	push   edx
c0013528:	52                   	push   edx
c0013529:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c001352f:	52                   	push   edx
c0013530:	50                   	push   eax
c0013531:	e8 14 9d 00 00       	call   c001d24a <nanoSleep(unsigned long long)>
c0013536:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013539:	e8 c4 ff ff ff       	call   c0013502 <Buzzer::stop()>
c001353e:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013546:	83 c4 18             	add    esp,0x18
c0013549:	5b                   	pop    ebx
c001354a:	e9 41 9c 00 00       	jmp    c001d190 <blockTask(TaskState)>
c001354f:	90                   	nop

c0013550 <Buzzer::beep(int, int, bool)>:
c0013550:	57                   	push   edi
c0013551:	56                   	push   esi
c0013552:	53                   	push   ebx
c0013553:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013557:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001355b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001355f:	52                   	push   edx
c0013560:	52                   	push   edx
c0013561:	8b 06                	mov    eax,DWORD PTR [esi]
c0013563:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013567:	56                   	push   esi
c0013568:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001356b:	83 c4 10             	add    esp,0x10
c001356e:	89 f8                	mov    eax,edi
c0013570:	84 c0                	test   al,al
c0013572:	74 1f                	je     c0013593 <Buzzer::beep(int, int, bool)+0x43>
c0013574:	50                   	push   eax
c0013575:	50                   	push   eax
c0013576:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c001357c:	99                   	cdq    
c001357d:	52                   	push   edx
c001357e:	50                   	push   eax
c001357f:	e8 c6 9c 00 00       	call   c001d24a <nanoSleep(unsigned long long)>
c0013584:	83 c4 10             	add    esp,0x10
c0013587:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001358b:	5b                   	pop    ebx
c001358c:	5e                   	pop    esi
c001358d:	5f                   	pop    edi
c001358e:	e9 6f ff ff ff       	jmp    c0013502 <Buzzer::stop()>
c0013593:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013599:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c001359e:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c00135a6:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00135aa:	c7 44 24 14 15 35 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013515
c00135b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00135b6:	5b                   	pop    ebx
c00135b7:	5e                   	pop    esi
c00135b8:	5f                   	pop    edi
c00135b9:	e9 6e 98 00 00       	jmp    c001ce2c <Process::createThread(void (*)(void*), void*, int)>

c00135be <loadClockSettings()>:
c00135be:	c7 05 94 ca 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002ca94,0xa
c00135c8:	c6 05 91 ca 02 c0 00 	mov    BYTE PTR ds:0xc002ca91,0x0
c00135cf:	c6 05 90 ca 02 c0 01 	mov    BYTE PTR ds:0xc002ca90,0x1
c00135d6:	c3                   	ret    
c00135d7:	90                   	nop

c00135d8 <Clock::Clock(char const*)>:
c00135d8:	83 ec 0c             	sub    esp,0xc
c00135db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135df:	83 ec 08             	sub    esp,0x8
c00135e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135e6:	50                   	push   eax
c00135e7:	e8 44 07 00 00       	call   c0013d30 <Device::Device(char const*)>
c00135ec:	83 c4 10             	add    esp,0x10
c00135ef:	ba e4 93 02 c0       	mov    edx,0xc00293e4
c00135f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135f8:	89 10                	mov    DWORD PTR [eax],edx
c00135fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135fe:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013608:	90                   	nop
c0013609:	83 c4 0c             	add    esp,0xc
c001360c:	c3                   	ret    
c001360d:	90                   	nop

c001360e <Clock::~Clock()>:
c001360e:	83 ec 0c             	sub    esp,0xc
c0013611:	ba e4 93 02 c0       	mov    edx,0xc00293e4
c0013616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001361a:	89 10                	mov    DWORD PTR [eax],edx
c001361c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013620:	83 ec 0c             	sub    esp,0xc
c0013623:	50                   	push   eax
c0013624:	e8 e9 03 00 00       	call   c0013a12 <Device::~Device()>
c0013629:	83 c4 10             	add    esp,0x10
c001362c:	90                   	nop
c001362d:	83 c4 0c             	add    esp,0xc
c0013630:	c3                   	ret    
c0013631:	90                   	nop

c0013632 <Clock::~Clock()>:
c0013632:	83 ec 0c             	sub    esp,0xc
c0013635:	83 ec 0c             	sub    esp,0xc
c0013638:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001363c:	e8 cd ff ff ff       	call   c001360e <Clock::~Clock()>
c0013641:	83 c4 10             	add    esp,0x10
c0013644:	83 ec 08             	sub    esp,0x8
c0013647:	68 58 01 00 00       	push   0x158
c001364c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013650:	e8 1c f0 ff ff       	call   c0012671 <operator delete(void*, unsigned long)>
c0013655:	83 c4 10             	add    esp,0x10
c0013658:	83 c4 0c             	add    esp,0xc
c001365b:	c3                   	ret    

c001365c <Clock::timeInSecondsLocal()>:
c001365c:	53                   	push   ebx
c001365d:	83 ec 14             	sub    esp,0x14
c0013660:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013664:	8b 10                	mov    edx,DWORD PTR [eax]
c0013666:	50                   	push   eax
c0013667:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001366a:	0f b6 0d 90 ca 02 c0 	movzx  ecx,BYTE PTR ds:0xc002ca90
c0013671:	03 0d 94 ca 02 c0    	add    ecx,DWORD PTR ds:0xc002ca94
c0013677:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001367d:	89 cb                	mov    ebx,ecx
c001367f:	c1 fb 1f             	sar    ebx,0x1f
c0013682:	01 c8                	add    eax,ecx
c0013684:	11 da                	adc    edx,ebx
c0013686:	83 c4 10             	add    esp,0x10
c0013689:	31 c9                	xor    ecx,ecx
c001368b:	80 3d 91 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002ca91,0x0
c0013692:	74 05                	je     c0013699 <Clock::timeInSecondsLocal()+0x3d>
c0013694:	b9 08 07 00 00       	mov    ecx,0x708
c0013699:	31 db                	xor    ebx,ebx
c001369b:	01 c8                	add    eax,ecx
c001369d:	11 da                	adc    edx,ebx
c001369f:	83 c4 08             	add    esp,0x8
c00136a2:	5b                   	pop    ebx
c00136a3:	c3                   	ret    

c00136a4 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00136a4:	57                   	push   edi
c00136a5:	56                   	push   esi
c00136a6:	53                   	push   ebx
c00136a7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00136ab:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00136af:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136b1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00136b5:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c00136b8:	0f b6 05 90 ca 02 c0 	movzx  eax,BYTE PTR ds:0xc002ca90
c00136bf:	03 05 94 ca 02 c0    	add    eax,DWORD PTR ds:0xc002ca94
c00136c5:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00136cb:	99                   	cdq    
c00136cc:	29 c6                	sub    esi,eax
c00136ce:	19 d7                	sbb    edi,edx
c00136d0:	89 f0                	mov    eax,esi
c00136d2:	89 fa                	mov    edx,edi
c00136d4:	31 f6                	xor    esi,esi
c00136d6:	80 3d 91 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002ca91,0x0
c00136dd:	74 05                	je     c00136e4 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00136df:	be 08 07 00 00       	mov    esi,0x708
c00136e4:	31 ff                	xor    edi,edi
c00136e6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00136ea:	29 f0                	sub    eax,esi
c00136ec:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00136f0:	19 fa                	sbb    edx,edi
c00136f2:	89 d8                	mov    eax,ebx
c00136f4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00136f8:	5b                   	pop    ebx
c00136f9:	5e                   	pop    esi
c00136fa:	5f                   	pop    edi
c00136fb:	ff e0                	jmp    eax

c00136fd <datetimeToSeconds(datetime_t)>:
c00136fd:	55                   	push   ebp
c00136fe:	57                   	push   edi
c00136ff:	56                   	push   esi
c0013700:	53                   	push   ebx
c0013701:	83 ec 14             	sub    esp,0x14
c0013704:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013708:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001370c:	89 d3                	mov    ebx,edx
c001370e:	0f b6 c6             	movzx  eax,dh
c0013711:	c1 eb 10             	shr    ebx,0x10
c0013714:	48                   	dec    eax
c0013715:	66 81 eb 6c 07       	sub    bx,0x76c
c001371a:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001371e:	0f b6 f5             	movzx  esi,ch
c0013721:	89 cf                	mov    edi,ecx
c0013723:	6b f6 3c             	imul   esi,esi,0x3c
c0013726:	c1 ef 10             	shr    edi,0x10
c0013729:	0f b6 c9             	movzx  ecx,cl
c001372c:	89 f8                	mov    eax,edi
c001372e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013734:	0f b6 f8             	movzx  edi,al
c0013737:	0f b6 d2             	movzx  edx,dl
c001373a:	01 fe                	add    esi,edi
c001373c:	01 f1                	add    ecx,esi
c001373e:	0f b7 f3             	movzx  esi,bx
c0013741:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013745:	c1 f9 1f             	sar    ecx,0x1f
c0013748:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c001374d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013751:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013756:	8b 0c 8d 20 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6be0]
c001375d:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013761:	76 29                	jbe    c001378c <datetimeToSeconds(datetime_t)+0x8f>
c0013763:	f6 c3 03             	test   bl,0x3
c0013766:	75 24                	jne    c001378c <datetimeToSeconds(datetime_t)+0x8f>
c0013768:	31 d2                	xor    edx,edx
c001376a:	bf 64 00 00 00       	mov    edi,0x64
c001376f:	89 d8                	mov    eax,ebx
c0013771:	66 f7 f7             	div    di
c0013774:	66 85 d2             	test   dx,dx
c0013777:	75 12                	jne    c001378b <datetimeToSeconds(datetime_t)+0x8e>
c0013779:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001377f:	bf 90 01 00 00       	mov    edi,0x190
c0013784:	99                   	cdq    
c0013785:	f7 ff                	idiv   edi
c0013787:	85 d2                	test   edx,edx
c0013789:	75 01                	jne    c001378c <datetimeToSeconds(datetime_t)+0x8f>
c001378b:	41                   	inc    ecx
c001378c:	66 83 fb 46          	cmp    bx,0x46
c0013790:	76 45                	jbe    c00137d7 <datetimeToSeconds(datetime_t)+0xda>
c0013792:	bb 46 00 00 00       	mov    ebx,0x46
c0013797:	bf 64 00 00 00       	mov    edi,0x64
c001379c:	bd 90 01 00 00       	mov    ebp,0x190
c00137a1:	b8 6d 01 00 00       	mov    eax,0x16d
c00137a6:	f6 c3 03             	test   bl,0x3
c00137a9:	75 23                	jne    c00137ce <datetimeToSeconds(datetime_t)+0xd1>
c00137ab:	89 d8                	mov    eax,ebx
c00137ad:	99                   	cdq    
c00137ae:	f7 ff                	idiv   edi
c00137b0:	b8 6e 01 00 00       	mov    eax,0x16e
c00137b5:	85 d2                	test   edx,edx
c00137b7:	75 15                	jne    c00137ce <datetimeToSeconds(datetime_t)+0xd1>
c00137b9:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00137bf:	99                   	cdq    
c00137c0:	f7 fd                	idiv   ebp
c00137c2:	83 fa 01             	cmp    edx,0x1
c00137c5:	19 c0                	sbb    eax,eax
c00137c7:	f7 d0                	not    eax
c00137c9:	05 6e 01 00 00       	add    eax,0x16e
c00137ce:	01 c1                	add    ecx,eax
c00137d0:	43                   	inc    ebx
c00137d1:	39 f3                	cmp    ebx,esi
c00137d3:	7c cc                	jl     c00137a1 <datetimeToSeconds(datetime_t)+0xa4>
c00137d5:	eb 35                	jmp    c001380c <datetimeToSeconds(datetime_t)+0x10f>
c00137d7:	74 33                	je     c001380c <datetimeToSeconds(datetime_t)+0x10f>
c00137d9:	b8 45 00 00 00       	mov    eax,0x45
c00137de:	89 c2                	mov    edx,eax
c00137e0:	83 e2 03             	and    edx,0x3
c00137e3:	39 f0                	cmp    eax,esi
c00137e5:	7e 0f                	jle    c00137f6 <datetimeToSeconds(datetime_t)+0xf9>
c00137e7:	83 fa 01             	cmp    edx,0x1
c00137ea:	19 d2                	sbb    edx,edx
c00137ec:	48                   	dec    eax
c00137ed:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00137f4:	eb e8                	jmp    c00137de <datetimeToSeconds(datetime_t)+0xe1>
c00137f6:	b8 6d 01 00 00       	mov    eax,0x16d
c00137fb:	85 d2                	test   edx,edx
c00137fd:	75 0b                	jne    c001380a <datetimeToSeconds(datetime_t)+0x10d>
c00137ff:	66 83 fb 01          	cmp    bx,0x1
c0013803:	19 c0                	sbb    eax,eax
c0013805:	05 6e 01 00 00       	add    eax,0x16e
c001380a:	29 c1                	sub    ecx,eax
c001380c:	b8 80 51 01 00       	mov    eax,0x15180
c0013811:	f7 e9                	imul   ecx
c0013813:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013817:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001381b:	83 c4 14             	add    esp,0x14
c001381e:	5b                   	pop    ebx
c001381f:	5e                   	pop    esi
c0013820:	5f                   	pop    edi
c0013821:	5d                   	pop    ebp
c0013822:	c3                   	ret    
c0013823:	90                   	nop

c0013824 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013824:	57                   	push   edi
c0013825:	56                   	push   esi
c0013826:	53                   	push   ebx
c0013827:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001382b:	8b 06                	mov    eax,DWORD PTR [esi]
c001382d:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013830:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013834:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013838:	e8 c0 fe ff ff       	call   c00136fd <datetimeToSeconds(datetime_t)>
c001383d:	59                   	pop    ecx
c001383e:	0f b6 0d 90 ca 02 c0 	movzx  ecx,BYTE PTR ds:0xc002ca90
c0013845:	5b                   	pop    ebx
c0013846:	03 0d 94 ca 02 c0    	add    ecx,DWORD PTR ds:0xc002ca94
c001384c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013852:	89 cb                	mov    ebx,ecx
c0013854:	c1 fb 1f             	sar    ebx,0x1f
c0013857:	29 c8                	sub    eax,ecx
c0013859:	19 da                	sbb    edx,ebx
c001385b:	31 c9                	xor    ecx,ecx
c001385d:	80 3d 91 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002ca91,0x0
c0013864:	74 05                	je     c001386b <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013866:	b9 08 07 00 00       	mov    ecx,0x708
c001386b:	31 db                	xor    ebx,ebx
c001386d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013871:	29 c8                	sub    eax,ecx
c0013873:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013877:	19 da                	sbb    edx,ebx
c0013879:	89 f8                	mov    eax,edi
c001387b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001387f:	5b                   	pop    ebx
c0013880:	5e                   	pop    esi
c0013881:	5f                   	pop    edi
c0013882:	ff e0                	jmp    eax

c0013884 <secondsToDatetime(unsigned long long)>:
c0013884:	55                   	push   ebp
c0013885:	57                   	push   edi
c0013886:	56                   	push   esi
c0013887:	53                   	push   ebx
c0013888:	83 ec 1c             	sub    esp,0x1c
c001388b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001388f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013893:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013897:	6a 00                	push   0x0
c0013899:	68 80 51 01 00       	push   0x15180
c001389e:	55                   	push   ebp
c001389f:	57                   	push   edi
c00138a0:	e8 d7 1a 01 00       	call   c002537c <__udivdi3>
c00138a5:	83 c4 10             	add    esp,0x10
c00138a8:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00138ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00138b2:	6a 00                	push   0x0
c00138b4:	68 80 51 01 00       	push   0x15180
c00138b9:	55                   	push   ebp
c00138ba:	57                   	push   edi
c00138bb:	bf 10 0e 00 00       	mov    edi,0xe10
c00138c0:	e8 b7 1b 01 00       	call   c002547c <__umoddi3>
c00138c5:	83 c4 10             	add    esp,0x10
c00138c8:	99                   	cdq    
c00138c9:	f7 ff                	idiv   edi
c00138cb:	bf 3c 00 00 00       	mov    edi,0x3c
c00138d0:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00138d3:	89 d0                	mov    eax,edx
c00138d5:	99                   	cdq    
c00138d6:	f7 ff                	idiv   edi
c00138d8:	85 db                	test   ebx,ebx
c00138da:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00138dd:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00138e0:	79 11                	jns    c00138f3 <secondsToDatetime(unsigned long long)+0x6f>
c00138e2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00138e6:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00138ec:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00138f1:	eb 07                	jmp    c00138fa <secondsToDatetime(unsigned long long)+0x76>
c00138f3:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00138f8:	89 d8                	mov    eax,ebx
c00138fa:	bf b4 05 00 00       	mov    edi,0x5b4
c00138ff:	99                   	cdq    
c0013900:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013905:	f7 f9                	idiv   ecx
c0013907:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c001390c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013910:	31 d2                	xor    edx,edx
c0013912:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001391a:	01 c3                	add    ebx,eax
c001391c:	89 d8                	mov    eax,ebx
c001391e:	f7 f1                	div    ecx
c0013920:	31 d2                	xor    edx,edx
c0013922:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013925:	89 d8                	mov    eax,ebx
c0013927:	f7 f7                	div    edi
c0013929:	31 d2                	xor    edx,edx
c001392b:	29 c1                	sub    ecx,eax
c001392d:	89 d8                	mov    eax,ebx
c001392f:	f7 f5                	div    ebp
c0013931:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013936:	29 c1                	sub    ecx,eax
c0013938:	31 d2                	xor    edx,edx
c001393a:	89 c8                	mov    eax,ecx
c001393c:	f7 f5                	div    ebp
c001393e:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013943:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013947:	31 d2                	xor    edx,edx
c0013949:	89 c8                	mov    eax,ecx
c001394b:	f7 f5                	div    ebp
c001394d:	31 d2                	xor    edx,edx
c001394f:	01 c3                	add    ebx,eax
c0013951:	89 c8                	mov    eax,ecx
c0013953:	f7 f7                	div    edi
c0013955:	bf 99 00 00 00       	mov    edi,0x99
c001395a:	29 c3                	sub    ebx,eax
c001395c:	31 d2                	xor    edx,edx
c001395e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013966:	29 c3                	sub    ebx,eax
c0013968:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001396b:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001396e:	bb 05 00 00 00       	mov    ebx,0x5
c0013973:	83 c1 02             	add    ecx,0x2
c0013976:	89 c8                	mov    eax,ecx
c0013978:	f7 f7                	div    edi
c001397a:	31 d2                	xor    edx,edx
c001397c:	89 c7                	mov    edi,eax
c001397e:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013984:	83 c0 02             	add    eax,0x2
c0013987:	f7 f3                	div    ebx
c0013989:	89 eb                	mov    ebx,ebp
c001398b:	29 c3                	sub    ebx,eax
c001398d:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013993:	88 1e                	mov    BYTE PTR [esi],bl
c0013995:	19 c0                	sbb    eax,eax
c0013997:	31 d2                	xor    edx,edx
c0013999:	83 e0 0c             	and    eax,0xc
c001399c:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00139a0:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00139a8:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00139ac:	83 f9 01             	cmp    ecx,0x1
c00139af:	0f 96 c2             	setbe  dl
c00139b2:	41                   	inc    ecx
c00139b3:	01 d0                	add    eax,edx
c00139b5:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00139b8:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00139bc:	83 c4 1c             	add    esp,0x1c
c00139bf:	89 f0                	mov    eax,esi
c00139c1:	5b                   	pop    ebx
c00139c2:	5e                   	pop    esi
c00139c3:	5f                   	pop    edi
c00139c4:	5d                   	pop    ebp
c00139c5:	c2 04 00             	ret    0x4

c00139c8 <Clock::timeInDatetimeLocal()>:
c00139c8:	53                   	push   ebx
c00139c9:	83 ec 14             	sub    esp,0x14
c00139cc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00139d0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00139d4:	e8 83 fc ff ff       	call   c001365c <Clock::timeInSecondsLocal()>
c00139d9:	83 c4 0c             	add    esp,0xc
c00139dc:	52                   	push   edx
c00139dd:	50                   	push   eax
c00139de:	53                   	push   ebx
c00139df:	e8 a0 fe ff ff       	call   c0013884 <secondsToDatetime(unsigned long long)>
c00139e4:	89 d8                	mov    eax,ebx
c00139e6:	83 c4 14             	add    esp,0x14
c00139e9:	5b                   	pop    ebx
c00139ea:	c2 04 00             	ret    0x4
c00139ed:	90                   	nop

c00139ee <Device::hibernate()>:
c00139ee:	c3                   	ret    
c00139ef:	90                   	nop

c00139f0 <Device::wake()>:
c00139f0:	c3                   	ret    
c00139f1:	90                   	nop

c00139f2 <Device::detect()>:
c00139f2:	c3                   	ret    
c00139f3:	90                   	nop

c00139f4 <Device::disableLegacy()>:
c00139f4:	c3                   	ret    
c00139f5:	90                   	nop

c00139f6 <Device::powerSaving(PowerSavingLevel)>:
c00139f6:	c3                   	ret    
c00139f7:	90                   	nop

c00139f8 <DriverlessDevice::close(int, int, void*)>:
c00139f8:	31 c0                	xor    eax,eax
c00139fa:	c3                   	ret    
c00139fb:	90                   	nop

c00139fc <DriverlessDevice::detect()>:
c00139fc:	c3                   	ret    
c00139fd:	90                   	nop

c00139fe <DriverlessDevice::open(int, int, void*)>:
c00139fe:	83 ec 18             	sub    esp,0x18
c0013a01:	68 50 94 02 c0       	push   0xc0029450
c0013a06:	e8 60 5e 00 00       	call   c001986b <Krnl::panic(char const*)>
c0013a0b:	83 c8 ff             	or     eax,0xffffffff
c0013a0e:	83 c4 1c             	add    esp,0x1c
c0013a11:	c3                   	ret    

c0013a12 <Device::~Device()>:
c0013a12:	ba 78 94 02 c0       	mov    edx,0xc0029478
c0013a17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a1b:	89 10                	mov    DWORD PTR [eax],edx
c0013a1d:	90                   	nop
c0013a1e:	c3                   	ret    
c0013a1f:	90                   	nop

c0013a20 <Device::~Device()>:
c0013a20:	83 ec 0c             	sub    esp,0xc
c0013a23:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013a27:	e8 e6 ff ff ff       	call   c0013a12 <Device::~Device()>
c0013a2c:	83 c4 04             	add    esp,0x4
c0013a2f:	83 ec 08             	sub    esp,0x8
c0013a32:	68 58 01 00 00       	push   0x158
c0013a37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a3b:	e8 31 ec ff ff       	call   c0012671 <operator delete(void*, unsigned long)>
c0013a40:	83 c4 10             	add    esp,0x10
c0013a43:	83 c4 0c             	add    esp,0xc
c0013a46:	c3                   	ret    
c0013a47:	90                   	nop

c0013a48 <Device::findAndLoadDriver()>:
c0013a48:	c3                   	ret    
c0013a49:	90                   	nop

c0013a4a <Device::preOpenPCI(PCIDeviceInfo)>:
c0013a4a:	57                   	push   edi
c0013a4b:	b9 09 00 00 00       	mov    ecx,0x9
c0013a50:	56                   	push   esi
c0013a51:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013a55:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013a59:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013a63:	81 c7 18 01 00 00    	add    edi,0x118
c0013a69:	fc                   	cld    
c0013a6a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013a6c:	5e                   	pop    esi
c0013a6d:	5f                   	pop    edi
c0013a6e:	c3                   	ret    
c0013a6f:	90                   	nop

c0013a70 <Device::preOpenACPI(void*, char*, char*)>:
c0013a70:	56                   	push   esi
c0013a71:	53                   	push   ebx
c0013a72:	83 ec 08             	sub    esp,0x8
c0013a75:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013a79:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013a7d:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0013a87:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013a8b:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0013a91:	6a 1e                	push   0x1e
c0013a93:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0013a99:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013a9d:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0013aa3:	50                   	push   eax
c0013aa4:	e8 ac cb fe ff       	call   c0000655 <memcpy>
c0013aa9:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0013aad:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0013ab1:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0013ab9:	83 c4 14             	add    esp,0x14
c0013abc:	5b                   	pop    ebx
c0013abd:	5e                   	pop    esi
c0013abe:	e9 92 cb fe ff       	jmp    c0000655 <memcpy>
c0013ac3:	90                   	nop

c0013ac4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013ac4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ac8:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013acd:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013ad4:	75 0b                	jne    c0013ae1 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013ad6:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ad8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013adc:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013adf:	eb 1e                	jmp    c0013aff <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013ae1:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c0013ae6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013aec:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013af2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013af4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013af8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013afc:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013aff:	ff e0                	jmp    eax
c0013b01:	90                   	nop

c0013b02 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013b02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b06:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013b0b:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013b12:	75 0b                	jne    c0013b1f <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013b14:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b16:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013b1a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013b1d:	eb 1e                	jmp    c0013b3d <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013b1f:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c0013b24:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013b2a:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013b30:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013b32:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013b36:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013b3a:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013b3d:	ff e0                	jmp    eax
c0013b3f:	90                   	nop

c0013b40 <Device::addChild(Device*)>:
c0013b40:	53                   	push   ebx
c0013b41:	83 ec 08             	sub    esp,0x8
c0013b44:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b48:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b4c:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013b52:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013b58:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013b5a:	85 d2                	test   edx,edx
c0013b5c:	74 04                	je     c0013b62 <Device::addChild(Device*)+0x22>
c0013b5e:	89 d3                	mov    ebx,edx
c0013b60:	eb f6                	jmp    c0013b58 <Device::addChild(Device*)+0x18>
c0013b62:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013b65:	83 ec 0c             	sub    esp,0xc
c0013b68:	6a 08                	push   0x8
c0013b6a:	e8 65 b9 ff ff       	call   c000f4d4 <malloc>
c0013b6f:	89 03                	mov    DWORD PTR [ebx],eax
c0013b71:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013b77:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013b7e:	83 c4 18             	add    esp,0x18
c0013b81:	5b                   	pop    ebx
c0013b82:	c3                   	ret    
c0013b83:	90                   	nop

c0013b84 <Device::removeAllChildren()>:
c0013b84:	56                   	push   esi
c0013b85:	53                   	push   ebx
c0013b86:	52                   	push   edx
c0013b87:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013b8b:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013b91:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b94:	74 17                	je     c0013bad <Device::removeAllChildren()+0x29>
c0013b96:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013b99:	85 c0                	test   eax,eax
c0013b9b:	74 0c                	je     c0013ba9 <Device::removeAllChildren()+0x25>
c0013b9d:	83 ec 0c             	sub    esp,0xc
c0013ba0:	8b 10                	mov    edx,DWORD PTR [eax]
c0013ba2:	50                   	push   eax
c0013ba3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013ba6:	83 c4 10             	add    esp,0x10
c0013ba9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013bab:	eb e4                	jmp    c0013b91 <Device::removeAllChildren()+0xd>
c0013bad:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013bb9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013bbf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013bc6:	58                   	pop    eax
c0013bc7:	5b                   	pop    ebx
c0013bc8:	5e                   	pop    esi
c0013bc9:	c3                   	ret    

c0013bca <Device::hibernateAll()>:
c0013bca:	53                   	push   ebx
c0013bcb:	83 ec 14             	sub    esp,0x14
c0013bce:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013bd2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bd4:	53                   	push   ebx
c0013bd5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013bd8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013bde:	83 c4 10             	add    esp,0x10
c0013be1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013be4:	74 0f                	je     c0013bf5 <Device::hibernateAll()+0x2b>
c0013be6:	83 ec 0c             	sub    esp,0xc
c0013be9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013bec:	e8 d9 ff ff ff       	call   c0013bca <Device::hibernateAll()>
c0013bf1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013bf3:	eb e9                	jmp    c0013bde <Device::hibernateAll()+0x14>
c0013bf5:	83 c4 08             	add    esp,0x8
c0013bf8:	5b                   	pop    ebx
c0013bf9:	c3                   	ret    

c0013bfa <Device::wakeAll()>:
c0013bfa:	53                   	push   ebx
c0013bfb:	83 ec 14             	sub    esp,0x14
c0013bfe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c04:	53                   	push   ebx
c0013c05:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013c08:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c0e:	83 c4 10             	add    esp,0x10
c0013c11:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c14:	74 0f                	je     c0013c25 <Device::wakeAll()+0x2b>
c0013c16:	83 ec 0c             	sub    esp,0xc
c0013c19:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c1c:	e8 d9 ff ff ff       	call   c0013bfa <Device::wakeAll()>
c0013c21:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c23:	eb e9                	jmp    c0013c0e <Device::wakeAll()+0x14>
c0013c25:	83 c4 08             	add    esp,0x8
c0013c28:	5b                   	pop    ebx
c0013c29:	c3                   	ret    

c0013c2a <Device::detectAll()>:
c0013c2a:	53                   	push   ebx
c0013c2b:	83 ec 14             	sub    esp,0x14
c0013c2e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c32:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c34:	53                   	push   ebx
c0013c35:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013c38:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c3e:	83 c4 10             	add    esp,0x10
c0013c41:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c44:	74 0f                	je     c0013c55 <Device::detectAll()+0x2b>
c0013c46:	83 ec 0c             	sub    esp,0xc
c0013c49:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c4c:	e8 d9 ff ff ff       	call   c0013c2a <Device::detectAll()>
c0013c51:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c53:	eb e9                	jmp    c0013c3e <Device::detectAll()+0x14>
c0013c55:	83 c4 08             	add    esp,0x8
c0013c58:	5b                   	pop    ebx
c0013c59:	c3                   	ret    

c0013c5a <Device::disableLegacyAll()>:
c0013c5a:	53                   	push   ebx
c0013c5b:	83 ec 14             	sub    esp,0x14
c0013c5e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c62:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c64:	53                   	push   ebx
c0013c65:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013c68:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c6e:	83 c4 10             	add    esp,0x10
c0013c71:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c74:	74 0f                	je     c0013c85 <Device::disableLegacyAll()+0x2b>
c0013c76:	83 ec 0c             	sub    esp,0xc
c0013c79:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c7c:	e8 d9 ff ff ff       	call   c0013c5a <Device::disableLegacyAll()>
c0013c81:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c83:	eb e9                	jmp    c0013c6e <Device::disableLegacyAll()+0x14>
c0013c85:	83 c4 08             	add    esp,0x8
c0013c88:	5b                   	pop    ebx
c0013c89:	c3                   	ret    

c0013c8a <Device::loadDriversForAll()>:
c0013c8a:	53                   	push   ebx
c0013c8b:	83 ec 08             	sub    esp,0x8
c0013c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c92:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013c98:	8b 18                	mov    ebx,DWORD PTR [eax]
c0013c9a:	85 db                	test   ebx,ebx
c0013c9c:	74 12                	je     c0013cb0 <Device::loadDriversForAll()+0x26>
c0013c9e:	83 ec 0c             	sub    esp,0xc
c0013ca1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0013ca4:	e8 e1 ff ff ff       	call   c0013c8a <Device::loadDriversForAll()>
c0013ca9:	83 c4 10             	add    esp,0x10
c0013cac:	89 d8                	mov    eax,ebx
c0013cae:	eb e8                	jmp    c0013c98 <Device::loadDriversForAll()+0xe>
c0013cb0:	83 c4 08             	add    esp,0x8
c0013cb3:	5b                   	pop    ebx
c0013cb4:	c3                   	ret    
c0013cb5:	90                   	nop

c0013cb6 <Device::closeAll()>:
c0013cb6:	53                   	push   ebx
c0013cb7:	83 ec 08             	sub    esp,0x8
c0013cba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013cbe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cc0:	6a 00                	push   0x0
c0013cc2:	6a 00                	push   0x0
c0013cc4:	6a 00                	push   0x0
c0013cc6:	53                   	push   ebx
c0013cc7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013cca:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013cd0:	83 c4 10             	add    esp,0x10
c0013cd3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013cd6:	74 0f                	je     c0013ce7 <Device::closeAll()+0x31>
c0013cd8:	83 ec 0c             	sub    esp,0xc
c0013cdb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013cde:	e8 d3 ff ff ff       	call   c0013cb6 <Device::closeAll()>
c0013ce3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ce5:	eb e9                	jmp    c0013cd0 <Device::closeAll()+0x1a>
c0013ce7:	83 c4 08             	add    esp,0x8
c0013cea:	5b                   	pop    ebx
c0013ceb:	c3                   	ret    

c0013cec <Device::powerSavingAll(PowerSavingLevel)>:
c0013cec:	56                   	push   esi
c0013ced:	53                   	push   ebx
c0013cee:	83 ec 0c             	sub    esp,0xc
c0013cf1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013cf5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013cf9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cfb:	56                   	push   esi
c0013cfc:	53                   	push   ebx
c0013cfd:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013d00:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d06:	83 c4 10             	add    esp,0x10
c0013d09:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d0c:	74 0f                	je     c0013d1d <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013d0e:	52                   	push   edx
c0013d0f:	52                   	push   edx
c0013d10:	56                   	push   esi
c0013d11:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d14:	e8 d3 ff ff ff       	call   c0013cec <Device::powerSavingAll(PowerSavingLevel)>
c0013d19:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d1b:	eb e9                	jmp    c0013d06 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013d1d:	58                   	pop    eax
c0013d1e:	5b                   	pop    ebx
c0013d1f:	5e                   	pop    esi
c0013d20:	c3                   	ret    
c0013d21:	90                   	nop

c0013d22 <Device::setName(char const*)>:
c0013d22:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013d2a:	e9 fb c9 fe ff       	jmp    c000072a <strcpy>
c0013d2f:	90                   	nop

c0013d30 <Device::Device(char const*)>:
c0013d30:	83 ec 1c             	sub    esp,0x1c
c0013d33:	ba 78 94 02 c0       	mov    edx,0xc0029478
c0013d38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d3c:	89 10                	mov    DWORD PTR [eax],edx
c0013d3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d42:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013d4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d50:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013d5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d5e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013d68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d6c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013d76:	83 ec 08             	sub    esp,0x8
c0013d79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013d7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013d81:	e8 9c ff ff ff       	call   c0013d22 <Device::setName(char const*)>
c0013d86:	83 c4 10             	add    esp,0x10
c0013d89:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013d91:	83 ec 0c             	sub    esp,0xc
c0013d94:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013d98:	e8 37 b7 ff ff       	call   c000f4d4 <malloc>
c0013d9d:	83 c4 10             	add    esp,0x10
c0013da0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013da6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013dad:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013db1:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013db7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dbb:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013dc1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013dc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dcb:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013dd1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013dd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ddc:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013de3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013de7:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013dee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013df2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013dfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e00:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013e0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e0e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013e18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e1c:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013e26:	90                   	nop
c0013e27:	83 c4 1c             	add    esp,0x1c
c0013e2a:	c3                   	ret    
c0013e2b:	90                   	nop

c0013e2c <Device::getName()>:
c0013e2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013e30:	05 d0 00 00 00       	add    eax,0xd0
c0013e35:	c3                   	ret    

c0013e36 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013e36:	83 ec 0c             	sub    esp,0xc
c0013e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e3d:	83 ec 08             	sub    esp,0x8
c0013e40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e44:	50                   	push   eax
c0013e45:	e8 e6 fe ff ff       	call   c0013d30 <Device::Device(char const*)>
c0013e4a:	83 c4 10             	add    esp,0x10
c0013e4d:	ba a4 94 02 c0       	mov    edx,0xc00294a4
c0013e52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e56:	89 10                	mov    DWORD PTR [eax],edx
c0013e58:	90                   	nop
c0013e59:	83 c4 0c             	add    esp,0xc
c0013e5c:	c3                   	ret    
c0013e5d:	90                   	nop

c0013e5e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013e5e:	57                   	push   edi
c0013e5f:	56                   	push   esi
c0013e60:	53                   	push   ebx
c0013e61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e65:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e69:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013e6d:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013e73:	75 0c                	jne    c0013e81 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013e75:	52                   	push   edx
c0013e76:	52                   	push   edx
c0013e77:	53                   	push   ebx
c0013e78:	56                   	push   esi
c0013e79:	e8 3c 34 01 00       	call   c00272ba <LinkedList<Device>::addElement(Device*)>
c0013e7e:	83 c4 10             	add    esp,0x10
c0013e81:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e87:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e8a:	74 12                	je     c0013e9e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013e8c:	50                   	push   eax
c0013e8d:	57                   	push   edi
c0013e8e:	56                   	push   esi
c0013e8f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e92:	e8 c7 ff ff ff       	call   c0013e5e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013e97:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e99:	83 c4 10             	add    esp,0x10
c0013e9c:	eb e9                	jmp    c0013e87 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013e9e:	5b                   	pop    ebx
c0013e9f:	5e                   	pop    esi
c0013ea0:	5f                   	pop    edi
c0013ea1:	c3                   	ret    

c0013ea2 <getDevicesOfType(DeviceType)>:
c0013ea2:	53                   	push   ebx
c0013ea3:	83 ec 14             	sub    esp,0x14
c0013ea6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013eaa:	53                   	push   ebx
c0013eab:	e8 e6 34 01 00       	call   c0027396 <LinkedList<Device>::LinkedList()>
c0013eb0:	83 c4 0c             	add    esp,0xc
c0013eb3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013eb7:	53                   	push   ebx
c0013eb8:	ff 35 28 c9 02 c0    	push   DWORD PTR ds:0xc002c928
c0013ebe:	e8 9b ff ff ff       	call   c0013e5e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013ec3:	89 d8                	mov    eax,ebx
c0013ec5:	83 c4 18             	add    esp,0x18
c0013ec8:	5b                   	pop    ebx
c0013ec9:	c2 04 00             	ret    0x4

c0013ecc <HardDiskController::HardDiskController(char const*)>:
c0013ecc:	83 ec 0c             	sub    esp,0xc
c0013ecf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ed3:	83 ec 08             	sub    esp,0x8
c0013ed6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013eda:	50                   	push   eax
c0013edb:	e8 50 fe ff ff       	call   c0013d30 <Device::Device(char const*)>
c0013ee0:	83 c4 10             	add    esp,0x10
c0013ee3:	ba d0 94 02 c0       	mov    edx,0xc00294d0
c0013ee8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013eec:	89 10                	mov    DWORD PTR [eax],edx
c0013eee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ef2:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013efc:	90                   	nop
c0013efd:	83 c4 0c             	add    esp,0xc
c0013f00:	c3                   	ret    
c0013f01:	90                   	nop

c0013f02 <HardDiskController::~HardDiskController()>:
c0013f02:	83 ec 0c             	sub    esp,0xc
c0013f05:	ba d0 94 02 c0       	mov    edx,0xc00294d0
c0013f0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f0e:	89 10                	mov    DWORD PTR [eax],edx
c0013f10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f14:	83 ec 0c             	sub    esp,0xc
c0013f17:	50                   	push   eax
c0013f18:	e8 f5 fa ff ff       	call   c0013a12 <Device::~Device()>
c0013f1d:	83 c4 10             	add    esp,0x10
c0013f20:	90                   	nop
c0013f21:	83 c4 0c             	add    esp,0xc
c0013f24:	c3                   	ret    
c0013f25:	90                   	nop

c0013f26 <HardDiskController::~HardDiskController()>:
c0013f26:	83 ec 0c             	sub    esp,0xc
c0013f29:	83 ec 0c             	sub    esp,0xc
c0013f2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f30:	e8 cd ff ff ff       	call   c0013f02 <HardDiskController::~HardDiskController()>
c0013f35:	83 c4 10             	add    esp,0x10
c0013f38:	83 ec 08             	sub    esp,0x8
c0013f3b:	68 58 01 00 00       	push   0x158
c0013f40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f44:	e8 28 e7 ff ff       	call   c0012671 <operator delete(void*, unsigned long)>
c0013f49:	83 c4 10             	add    esp,0x10
c0013f4c:	83 c4 0c             	add    esp,0xc
c0013f4f:	c3                   	ret    

c0013f50 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013f50:	83 ec 0c             	sub    esp,0xc
c0013f53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f57:	83 ec 08             	sub    esp,0x8
c0013f5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f5e:	50                   	push   eax
c0013f5f:	e8 cc fd ff ff       	call   c0013d30 <Device::Device(char const*)>
c0013f64:	83 c4 10             	add    esp,0x10
c0013f67:	ba fc 94 02 c0       	mov    edx,0xc00294fc
c0013f6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f70:	89 10                	mov    DWORD PTR [eax],edx
c0013f72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f76:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013f7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f81:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013f88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f8c:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013f96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f9a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013f9e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013fa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fa8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013fb2:	90                   	nop
c0013fb3:	83 c4 0c             	add    esp,0xc
c0013fb6:	c3                   	ret    
c0013fb7:	90                   	nop

c0013fb8 <PhysicalDisk::startCache()>:
c0013fb8:	56                   	push   esi
c0013fb9:	53                   	push   ebx
c0013fba:	83 ec 10             	sub    esp,0x10
c0013fbd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013fc1:	6a 30                	push   0x30
c0013fc3:	e8 0c b5 ff ff       	call   c000f4d4 <malloc>
c0013fc8:	89 c6                	mov    esi,eax
c0013fca:	58                   	pop    eax
c0013fcb:	5a                   	pop    edx
c0013fcc:	53                   	push   ebx
c0013fcd:	56                   	push   esi
c0013fce:	e8 dd 25 00 00       	call   c00165b0 <VCache::VCache(PhysicalDisk*)>
c0013fd3:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013fd9:	83 c4 14             	add    esp,0x14
c0013fdc:	5b                   	pop    ebx
c0013fdd:	5e                   	pop    esi
c0013fde:	c3                   	ret    
c0013fdf:	90                   	nop

c0013fe0 <PhysicalDisk::~PhysicalDisk()>:
c0013fe0:	83 ec 0c             	sub    esp,0xc
c0013fe3:	ba fc 94 02 c0       	mov    edx,0xc00294fc
c0013fe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fec:	89 10                	mov    DWORD PTR [eax],edx
c0013fee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ff2:	83 ec 0c             	sub    esp,0xc
c0013ff5:	50                   	push   eax
c0013ff6:	e8 17 fa ff ff       	call   c0013a12 <Device::~Device()>
c0013ffb:	83 c4 10             	add    esp,0x10
c0013ffe:	90                   	nop
c0013fff:	83 c4 0c             	add    esp,0xc
c0014002:	c3                   	ret    
c0014003:	90                   	nop

c0014004 <PhysicalDisk::~PhysicalDisk()>:
c0014004:	83 ec 0c             	sub    esp,0xc
c0014007:	83 ec 0c             	sub    esp,0xc
c001400a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001400e:	e8 cd ff ff ff       	call   c0013fe0 <PhysicalDisk::~PhysicalDisk()>
c0014013:	83 c4 10             	add    esp,0x10
c0014016:	83 ec 08             	sub    esp,0x8
c0014019:	68 6c 01 00 00       	push   0x16c
c001401e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014022:	e8 4a e6 ff ff       	call   c0012671 <operator delete(void*, unsigned long)>
c0014027:	83 c4 10             	add    esp,0x10
c001402a:	83 c4 0c             	add    esp,0xc
c001402d:	c3                   	ret    

c001402e <FPU::FPU(char const*)>:
c001402e:	83 ec 0c             	sub    esp,0xc
c0014031:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014035:	83 ec 08             	sub    esp,0x8
c0014038:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001403c:	50                   	push   eax
c001403d:	e8 ee fc ff ff       	call   c0013d30 <Device::Device(char const*)>
c0014042:	83 c4 10             	add    esp,0x10
c0014045:	ba 3c 95 02 c0       	mov    edx,0xc002953c
c001404a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001404e:	89 10                	mov    DWORD PTR [eax],edx
c0014050:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014054:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001405e:	90                   	nop
c001405f:	83 c4 0c             	add    esp,0xc
c0014062:	c3                   	ret    
c0014063:	90                   	nop

c0014064 <FPU::~FPU()>:
c0014064:	83 ec 0c             	sub    esp,0xc
c0014067:	ba 3c 95 02 c0       	mov    edx,0xc002953c
c001406c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014070:	89 10                	mov    DWORD PTR [eax],edx
c0014072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014076:	83 ec 0c             	sub    esp,0xc
c0014079:	50                   	push   eax
c001407a:	e8 93 f9 ff ff       	call   c0013a12 <Device::~Device()>
c001407f:	83 c4 10             	add    esp,0x10
c0014082:	90                   	nop
c0014083:	83 c4 0c             	add    esp,0xc
c0014086:	c3                   	ret    
c0014087:	90                   	nop

c0014088 <FPU::~FPU()>:
c0014088:	83 ec 0c             	sub    esp,0xc
c001408b:	83 ec 0c             	sub    esp,0xc
c001408e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014092:	e8 cd ff ff ff       	call   c0014064 <FPU::~FPU()>
c0014097:	83 c4 10             	add    esp,0x10
c001409a:	83 ec 08             	sub    esp,0x8
c001409d:	68 58 01 00 00       	push   0x158
c00140a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140a6:	e8 c6 e5 ff ff       	call   c0012671 <operator delete(void*, unsigned long)>
c00140ab:	83 c4 10             	add    esp,0x10
c00140ae:	83 c4 0c             	add    esp,0xc
c00140b1:	c3                   	ret    

c00140b2 <setupFPU()>:
c00140b2:	53                   	push   ebx
c00140b3:	83 ec 08             	sub    esp,0x8
c00140b6:	8b 15 28 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c928
c00140bc:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00140c3:	74 19                	je     c00140de <setupFPU()+0x2c>
c00140c5:	83 ec 0c             	sub    esp,0xc
c00140c8:	68 58 01 00 00       	push   0x158
c00140cd:	e8 02 b4 ff ff       	call   c000f4d4 <malloc>
c00140d2:	89 c3                	mov    ebx,eax
c00140d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00140d7:	e8 30 fe 00 00       	call   c0023f0c <AVX::AVX()>
c00140dc:	eb 5b                	jmp    c0014139 <setupFPU()+0x87>
c00140de:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00140e4:	84 c0                	test   al,al
c00140e6:	79 19                	jns    c0014101 <setupFPU()+0x4f>
c00140e8:	83 ec 0c             	sub    esp,0xc
c00140eb:	68 58 01 00 00       	push   0x158
c00140f0:	e8 df b3 ff ff       	call   c000f4d4 <malloc>
c00140f5:	89 c3                	mov    ebx,eax
c00140f7:	89 04 24             	mov    DWORD PTR [esp],eax
c00140fa:	e8 33 ff 00 00       	call   c0024032 <SSE::SSE()>
c00140ff:	eb 38                	jmp    c0014139 <setupFPU()+0x87>
c0014101:	a8 20                	test   al,0x20
c0014103:	74 19                	je     c001411e <setupFPU()+0x6c>
c0014105:	83 ec 0c             	sub    esp,0xc
c0014108:	68 58 01 00 00       	push   0x158
c001410d:	e8 c2 b3 ff ff       	call   c000f4d4 <malloc>
c0014112:	89 c3                	mov    ebx,eax
c0014114:	89 04 24             	mov    DWORD PTR [esp],eax
c0014117:	e8 80 fe 00 00       	call   c0023f9c <MMX::MMX()>
c001411c:	eb 1b                	jmp    c0014139 <setupFPU()+0x87>
c001411e:	a8 10                	test   al,0x10
c0014120:	74 1c                	je     c001413e <setupFPU()+0x8c>
c0014122:	83 ec 0c             	sub    esp,0xc
c0014125:	68 58 01 00 00       	push   0x158
c001412a:	e8 a5 b3 ff ff       	call   c000f4d4 <malloc>
c001412f:	89 c3                	mov    ebx,eax
c0014131:	89 04 24             	mov    DWORD PTR [esp],eax
c0014134:	e8 87 ff 00 00       	call   c00240c0 <x87::x87()>
c0014139:	83 c4 10             	add    esp,0x10
c001413c:	eb 24                	jmp    c0014162 <setupFPU()+0xb0>
c001413e:	83 e0 ef             	and    eax,0xffffffef
c0014141:	83 ec 0c             	sub    esp,0xc
c0014144:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001414a:	68 28 95 02 c0       	push   0xc0029528
c001414f:	e8 fd e5 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0014154:	0f 20 c0             	mov    eax,cr0
c0014157:	83 c8 04             	or     eax,0x4
c001415a:	0f 22 c0             	mov    cr0,eax
c001415d:	31 db                	xor    ebx,ebx
c001415f:	83 c4 10             	add    esp,0x10
c0014162:	89 d8                	mov    eax,ebx
c0014164:	83 c4 08             	add    esp,0x8
c0014167:	5b                   	pop    ebx
c0014168:	c3                   	ret    
c0014169:	90                   	nop

c001416a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c001416a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001416e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014172:	c1 e0 04             	shl    eax,0x4
c0014175:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014179:	8d 50 10             	lea    edx,[eax+0x10]
c001417c:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014182:	74 08                	je     c001418c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014184:	83 c0 04             	add    eax,0x4
c0014187:	39 d0                	cmp    eax,edx
c0014189:	75 f1                	jne    c001417c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c001418b:	c3                   	ret    
c001418c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014196:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00141a0:	eb e2                	jmp    c0014184 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00141a2 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00141a2:	57                   	push   edi
c00141a3:	31 c0                	xor    eax,eax
c00141a5:	56                   	push   esi
c00141a6:	53                   	push   ebx
c00141a7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00141ab:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00141af:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00141b3:	89 da                	mov    edx,ebx
c00141b5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00141b9:	c1 e2 04             	shl    edx,0x4
c00141bc:	01 ca                	add    edx,ecx
c00141be:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00141c6:	74 16                	je     c00141de <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00141c8:	40                   	inc    eax
c00141c9:	83 f8 04             	cmp    eax,0x4
c00141cc:	75 f0                	jne    c00141be <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00141ce:	c7 44 24 10 6c 95 02 c0 	mov    DWORD PTR [esp+0x10],0xc002956c
c00141d6:	5b                   	pop    ebx
c00141d7:	5e                   	pop    esi
c00141d8:	5f                   	pop    edi
c00141d9:	e9 8d 56 00 00       	jmp    c001986b <Krnl::panic(char const*)>
c00141de:	8d 04 98             	lea    eax,[eax+ebx*4]
c00141e1:	8d 04 81             	lea    eax,[ecx+eax*4]
c00141e4:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00141ea:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00141f0:	5b                   	pop    ebx
c00141f1:	5e                   	pop    esi
c00141f2:	5f                   	pop    edi
c00141f3:	c3                   	ret    

c00141f4 <doubleFault(regs*, void*)>:
c00141f4:	55                   	push   ebp
c00141f5:	89 e5                	mov    ebp,esp
c00141f7:	83 ec 08             	sub    esp,0x8
c00141fa:	83 ec 0c             	sub    esp,0xc
c00141fd:	68 a7 95 02 c0       	push   0xc00295a7
c0014202:	e8 64 56 00 00       	call   c001986b <Krnl::panic(char const*)>
c0014207:	83 c4 10             	add    esp,0x10
c001420a:	90                   	nop
c001420b:	c9                   	leave  
c001420c:	c3                   	ret    
c001420d:	90                   	nop

c001420e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001420e:	56                   	push   esi
c001420f:	53                   	push   ebx
c0014210:	50                   	push   eax
c0014211:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014215:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014219:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001421e:	75 35                	jne    c0014255 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014220:	8d 43 20             	lea    eax,[ebx+0x20]
c0014223:	31 d2                	xor    edx,edx
c0014225:	89 c1                	mov    ecx,eax
c0014227:	c1 e1 04             	shl    ecx,0x4
c001422a:	01 f1                	add    ecx,esi
c001422c:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014234:	74 3e                	je     c0014274 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014236:	42                   	inc    edx
c0014237:	83 fa 04             	cmp    edx,0x4
c001423a:	75 f0                	jne    c001422c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c001423c:	83 ec 0c             	sub    esp,0xc
c001423f:	68 ec 95 02 c0       	push   0xc00295ec
c0014244:	e8 22 56 00 00       	call   c001986b <Krnl::panic(char const*)>
c0014249:	83 c4 10             	add    esp,0x10
c001424c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014251:	5a                   	pop    edx
c0014252:	5b                   	pop    ebx
c0014253:	5e                   	pop    esi
c0014254:	c3                   	ret    
c0014255:	83 ec 0c             	sub    esp,0xc
c0014258:	56                   	push   esi
c0014259:	e8 ce fb ff ff       	call   c0013e2c <Device::getName()>
c001425e:	83 c4 10             	add    esp,0x10
c0014261:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014264:	75 ba                	jne    c0014220 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014266:	83 fb 0f             	cmp    ebx,0xf
c0014269:	7f 29                	jg     c0014294 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c001426b:	0f b6 9b 80 bb 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd4480]
c0014272:	eb ac                	jmp    c0014220 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014274:	8d 04 82             	lea    eax,[edx+eax*4]
c0014277:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001427b:	8d 04 86             	lea    eax,[esi+eax*4]
c001427e:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014284:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014288:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c001428e:	89 d8                	mov    eax,ebx
c0014290:	5a                   	pop    edx
c0014291:	5b                   	pop    ebx
c0014292:	5e                   	pop    esi
c0014293:	c3                   	ret    
c0014294:	83 ec 0c             	sub    esp,0xc
c0014297:	68 b4 95 02 c0       	push   0xc00295b4
c001429c:	e8 ca 55 00 00       	call   c001986b <Krnl::panic(char const*)>
c00142a1:	83 c4 10             	add    esp,0x10
c00142a4:	e9 77 ff ff ff       	jmp    c0014220 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00142a9:	90                   	nop

c00142aa <InterruptController::clearAllHandlers(int, bool)>:
c00142aa:	56                   	push   esi
c00142ab:	53                   	push   ebx
c00142ac:	52                   	push   edx
c00142ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00142b1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00142b5:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00142ba:	75 61                	jne    c001431d <InterruptController::clearAllHandlers(int, bool)+0x73>
c00142bc:	8d 46 20             	lea    eax,[esi+0x20]
c00142bf:	c1 e6 04             	shl    esi,0x4
c00142c2:	c1 e0 04             	shl    eax,0x4
c00142c5:	01 de                	add    esi,ebx
c00142c7:	01 d8                	add    eax,ebx
c00142c9:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00142d3:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00142dd:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00142e7:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00142f1:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c00142fb:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014305:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c001430f:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014319:	58                   	pop    eax
c001431a:	5b                   	pop    ebx
c001431b:	5e                   	pop    esi
c001431c:	c3                   	ret    
c001431d:	83 ec 0c             	sub    esp,0xc
c0014320:	53                   	push   ebx
c0014321:	e8 06 fb ff ff       	call   c0013e2c <Device::getName()>
c0014326:	83 c4 10             	add    esp,0x10
c0014329:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001432c:	75 8e                	jne    c00142bc <InterruptController::clearAllHandlers(int, bool)+0x12>
c001432e:	83 fe 0f             	cmp    esi,0xf
c0014331:	7f 09                	jg     c001433c <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014333:	0f b6 b6 80 bb 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd4480]
c001433a:	eb 80                	jmp    c00142bc <InterruptController::clearAllHandlers(int, bool)+0x12>
c001433c:	83 ec 0c             	sub    esp,0xc
c001433f:	68 28 96 02 c0       	push   0xc0029628
c0014344:	e8 22 55 00 00       	call   c001986b <Krnl::panic(char const*)>
c0014349:	83 c4 10             	add    esp,0x10
c001434c:	e9 6b ff ff ff       	jmp    c00142bc <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014351:	90                   	nop

c0014352 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014352:	56                   	push   esi
c0014353:	53                   	push   ebx
c0014354:	52                   	push   edx
c0014355:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014359:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001435d:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014362:	75 3a                	jne    c001439e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014364:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014368:	8d 50 20             	lea    edx,[eax+0x20]
c001436b:	c1 e2 04             	shl    edx,0x4
c001436e:	8d 04 16             	lea    eax,[esi+edx*1]
c0014371:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014375:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c001437b:	74 0b                	je     c0014388 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c001437d:	83 c0 04             	add    eax,0x4
c0014380:	39 d0                	cmp    eax,edx
c0014382:	75 f1                	jne    c0014375 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014384:	58                   	pop    eax
c0014385:	5b                   	pop    ebx
c0014386:	5e                   	pop    esi
c0014387:	c3                   	ret    
c0014388:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014392:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001439c:	eb df                	jmp    c001437d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c001439e:	83 ec 0c             	sub    esp,0xc
c00143a1:	56                   	push   esi
c00143a2:	e8 85 fa ff ff       	call   c0013e2c <Device::getName()>
c00143a7:	83 c4 10             	add    esp,0x10
c00143aa:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00143ad:	75 b5                	jne    c0014364 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00143af:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00143b4:	7f 11                	jg     c00143c7 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c00143b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00143ba:	0f b6 80 80 bb 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd4480]
c00143c1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00143c5:	eb 9d                	jmp    c0014364 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00143c7:	83 ec 0c             	sub    esp,0xc
c00143ca:	68 28 96 02 c0       	push   0xc0029628
c00143cf:	e8 97 54 00 00       	call   c001986b <Krnl::panic(char const*)>
c00143d4:	83 c4 10             	add    esp,0x10
c00143d7:	eb 8b                	jmp    c0014364 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c00143d9 <nmiHandler(regs*, void*)>:
c00143d9:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c00143de:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00143e2:	e9 39 a8 ff ff       	jmp    c000ec20 <Computer::handleNMI()>

c00143e7 <int_handler>:
c00143e7:	55                   	push   ebp
c00143e8:	57                   	push   edi
c00143e9:	56                   	push   esi
c00143ea:	53                   	push   ebx
c00143eb:	83 ec 0c             	sub    esp,0xc
c00143ee:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00143f2:	80 3d 40 d4 02 c0 00 	cmp    BYTE PTR ds:0xc002d440,0x0
c00143f9:	74 0b                	je     c0014406 <int_handler+0x1f>
c00143fb:	fa                   	cli    
c00143fc:	f4                   	hlt    
c00143fd:	80 3d 40 d4 02 c0 00 	cmp    BYTE PTR ds:0xc002d440,0x0
c0014404:	75 f5                	jne    c00143fb <int_handler+0x14>
c0014406:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c001440b:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c001440e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014414:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c001441a:	8d 43 e0             	lea    eax,[ebx-0x20]
c001441d:	83 f8 17             	cmp    eax,0x17
c0014420:	77 13                	ja     c0014435 <int_handler+0x4e>
c0014422:	83 ec 08             	sub    esp,0x8
c0014425:	8b 17                	mov    edx,DWORD PTR [edi]
c0014427:	8d 43 e0             	lea    eax,[ebx-0x20]
c001442a:	0f b6 c0             	movzx  eax,al
c001442d:	50                   	push   eax
c001442e:	57                   	push   edi
c001442f:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014432:	83 c4 10             	add    esp,0x10
c0014435:	83 c3 15             	add    ebx,0x15
c0014438:	c1 e3 04             	shl    ebx,0x4
c001443b:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c001443f:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014446:	31 db                	xor    ebx,ebx
c0014448:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001444c:	85 c0                	test   eax,eax
c001444e:	74 13                	je     c0014463 <int_handler+0x7c>
c0014450:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014453:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014457:	74 1c                	je     c0014475 <int_handler+0x8e>
c0014459:	83 ec 08             	sub    esp,0x8
c001445c:	52                   	push   edx
c001445d:	56                   	push   esi
c001445e:	ff d0                	call   eax
c0014460:	83 c4 10             	add    esp,0x10
c0014463:	43                   	inc    ebx
c0014464:	83 fb 04             	cmp    ebx,0x4
c0014467:	75 df                	jne    c0014448 <int_handler+0x61>
c0014469:	83 c4 0c             	add    esp,0xc
c001446c:	31 c0                	xor    eax,eax
c001446e:	5b                   	pop    ebx
c001446f:	31 d2                	xor    edx,edx
c0014471:	5e                   	pop    esi
c0014472:	5f                   	pop    edi
c0014473:	5d                   	pop    ebp
c0014474:	c3                   	ret    
c0014475:	83 ec 08             	sub    esp,0x8
c0014478:	52                   	push   edx
c0014479:	56                   	push   esi
c001447a:	ff d0                	call   eax
c001447c:	83 c4 10             	add    esp,0x10
c001447f:	83 c4 0c             	add    esp,0xc
c0014482:	5b                   	pop    ebx
c0014483:	5e                   	pop    esi
c0014484:	5f                   	pop    edi
c0014485:	5d                   	pop    ebp
c0014486:	c3                   	ret    
c0014487:	90                   	nop

c0014488 <InterruptController::InterruptController(char const*)>:
c0014488:	83 ec 1c             	sub    esp,0x1c
c001448b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001448f:	83 ec 08             	sub    esp,0x8
c0014492:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014496:	50                   	push   eax
c0014497:	e8 94 f8 ff ff       	call   c0013d30 <Device::Device(char const*)>
c001449c:	83 c4 10             	add    esp,0x10
c001449f:	ba 5c 98 02 c0       	mov    edx,0xc002985c
c00144a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144a8:	89 10                	mov    DWORD PTR [eax],edx
c00144aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144ae:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c00144b8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00144c0:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00144c8:	7f 5e                	jg     c0014528 <InterruptController::InterruptController(char const*)+0xa0>
c00144ca:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00144d2:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00144d7:	7f 49                	jg     c0014522 <InterruptController::InterruptController(char const*)+0x9a>
c00144d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144dd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00144e1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00144e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00144ec:	01 ca                	add    edx,ecx
c00144ee:	83 c2 54             	add    edx,0x54
c00144f1:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00144f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144fd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014501:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014508:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001450c:	01 ca                	add    edx,ecx
c001450e:	81 c2 54 04 00 00    	add    edx,0x454
c0014514:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001451c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014520:	eb b0                	jmp    c00144d2 <InterruptController::InterruptController(char const*)+0x4a>
c0014522:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014526:	eb 98                	jmp    c00144c0 <InterruptController::InterruptController(char const*)+0x38>
c0014528:	90                   	nop
c0014529:	83 c4 1c             	add    esp,0x1c
c001452c:	c3                   	ret    
c001452d:	90                   	nop

c001452e <InterruptController::~InterruptController()>:
c001452e:	83 ec 0c             	sub    esp,0xc
c0014531:	ba 5c 98 02 c0       	mov    edx,0xc002985c
c0014536:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001453a:	89 10                	mov    DWORD PTR [eax],edx
c001453c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014540:	83 ec 0c             	sub    esp,0xc
c0014543:	50                   	push   eax
c0014544:	e8 c9 f4 ff ff       	call   c0013a12 <Device::~Device()>
c0014549:	83 c4 10             	add    esp,0x10
c001454c:	90                   	nop
c001454d:	83 c4 0c             	add    esp,0xc
c0014550:	c3                   	ret    
c0014551:	90                   	nop

c0014552 <InterruptController::~InterruptController()>:
c0014552:	83 ec 0c             	sub    esp,0xc
c0014555:	83 ec 0c             	sub    esp,0xc
c0014558:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001455c:	e8 cd ff ff ff       	call   c001452e <InterruptController::~InterruptController()>
c0014561:	83 c4 10             	add    esp,0x10
c0014564:	83 ec 08             	sub    esp,0x8
c0014567:	68 58 21 00 00       	push   0x2158
c001456c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014570:	e8 fc e0 ff ff       	call   c0012671 <operator delete(void*, unsigned long)>
c0014575:	83 c4 10             	add    esp,0x10
c0014578:	83 c4 0c             	add    esp,0xc
c001457b:	c3                   	ret    

c001457c <displayDebugInfo(regs*)>:
c001457c:	55                   	push   ebp
c001457d:	57                   	push   edi
c001457e:	56                   	push   esi
c001457f:	53                   	push   ebx
c0014580:	83 ec 24             	sub    esp,0x24
c0014583:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014587:	0f 20 c2             	mov    edx,cr0
c001458a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001458e:	0f 20 d7             	mov    edi,cr2
c0014591:	0f 20 de             	mov    esi,cr3
c0014594:	0f 20 e5             	mov    ebp,cr4
c0014597:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001459a:	68 62 96 02 c0       	push   0xc0029662
c001459f:	e8 ad e1 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c00145a4:	58                   	pop    eax
c00145a5:	5a                   	pop    edx
c00145a6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00145a9:	68 6d 96 02 c0       	push   0xc002966d
c00145ae:	e8 9e e1 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c00145b3:	59                   	pop    ecx
c00145b4:	58                   	pop    eax
c00145b5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00145b8:	68 78 96 02 c0       	push   0xc0029678
c00145bd:	e8 8f e1 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c00145c2:	58                   	pop    eax
c00145c3:	5a                   	pop    edx
c00145c4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00145c7:	68 83 96 02 c0       	push   0xc0029683
c00145cc:	e8 80 e1 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c00145d1:	59                   	pop    ecx
c00145d2:	58                   	pop    eax
c00145d3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00145d6:	68 8e 96 02 c0       	push   0xc002968e
c00145db:	e8 71 e1 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c00145e0:	58                   	pop    eax
c00145e1:	5a                   	pop    edx
c00145e2:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00145e5:	68 99 96 02 c0       	push   0xc0029699
c00145ea:	e8 62 e1 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c00145ef:	59                   	pop    ecx
c00145f0:	58                   	pop    eax
c00145f1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00145f4:	68 a4 96 02 c0       	push   0xc00296a4
c00145f9:	e8 53 e1 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c00145fe:	58                   	pop    eax
c00145ff:	5a                   	pop    edx
c0014600:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014603:	68 af 96 02 c0       	push   0xc00296af
c0014608:	e8 44 e1 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001460d:	59                   	pop    ecx
c001460e:	58                   	pop    eax
c001460f:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014612:	68 ba 96 02 c0       	push   0xc00296ba
c0014617:	e8 35 e1 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001461c:	58                   	pop    eax
c001461d:	5a                   	pop    edx
c001461e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014621:	68 c9 96 02 c0       	push   0xc00296c9
c0014626:	e8 26 e1 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001462b:	59                   	pop    ecx
c001462c:	58                   	pop    eax
c001462d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014630:	68 d4 96 02 c0       	push   0xc00296d4
c0014635:	e8 17 e1 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001463a:	58                   	pop    eax
c001463b:	5a                   	pop    edx
c001463c:	57                   	push   edi
c001463d:	68 df 96 02 c0       	push   0xc00296df
c0014642:	e8 0a e1 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0014647:	59                   	pop    ecx
c0014648:	58                   	pop    eax
c0014649:	56                   	push   esi
c001464a:	68 ea 96 02 c0       	push   0xc00296ea
c001464f:	e8 fd e0 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0014654:	58                   	pop    eax
c0014655:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c001465a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014660:	e8 76 c2 ff ff       	call   c00108db <setActiveTerminal(VgaText*)>
c0014665:	58                   	pop    eax
c0014666:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014669:	5a                   	pop    edx
c001466a:	c1 e0 05             	shl    eax,0x5
c001466d:	05 e0 b8 02 c0       	add    eax,0xc002b8e0
c0014672:	50                   	push   eax
c0014673:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c0014678:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001467e:	e8 77 c6 ff ff       	call   c0010cfa <VgaText::puts(char const*)>
c0014683:	59                   	pop    ecx
c0014684:	58                   	pop    eax
c0014685:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c001468a:	68 f5 96 02 c0       	push   0xc00296f5
c001468f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014695:	e8 60 c6 ff ff       	call   c0010cfa <VgaText::puts(char const*)>
c001469a:	58                   	pop    eax
c001469b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00146a0:	5a                   	pop    edx
c00146a1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00146a4:	83 c0 0c             	add    eax,0xc
c00146a7:	50                   	push   eax
c00146a8:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c00146ad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146b3:	e8 42 c6 ff ff       	call   c0010cfa <VgaText::puts(char const*)>
c00146b8:	59                   	pop    ecx
c00146b9:	58                   	pop    eax
c00146ba:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c00146bf:	68 fe 96 02 c0       	push   0xc00296fe
c00146c4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146ca:	e8 2b c6 ff ff       	call   c0010cfa <VgaText::puts(char const*)>
c00146cf:	58                   	pop    eax
c00146d0:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c00146d5:	5a                   	pop    edx
c00146d6:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00146d9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146df:	e8 3c c6 ff ff       	call   c0010d20 <VgaText::putx(unsigned int)>
c00146e4:	59                   	pop    ecx
c00146e5:	58                   	pop    eax
c00146e6:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c00146eb:	68 06 97 02 c0       	push   0xc0029706
c00146f0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146f6:	e8 ff c5 ff ff       	call   c0010cfa <VgaText::puts(char const*)>
c00146fb:	58                   	pop    eax
c00146fc:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c0014701:	5a                   	pop    edx
c0014702:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014705:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001470b:	e8 10 c6 ff ff       	call   c0010d20 <VgaText::putx(unsigned int)>
c0014710:	59                   	pop    ecx
c0014711:	58                   	pop    eax
c0014712:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c0014717:	68 0e 97 02 c0       	push   0xc002970e
c001471c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014722:	e8 d3 c5 ff ff       	call   c0010cfa <VgaText::puts(char const*)>
c0014727:	58                   	pop    eax
c0014728:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c001472d:	5a                   	pop    edx
c001472e:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014731:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014737:	e8 e4 c5 ff ff       	call   c0010d20 <VgaText::putx(unsigned int)>
c001473c:	59                   	pop    ecx
c001473d:	58                   	pop    eax
c001473e:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c0014743:	68 16 97 02 c0       	push   0xc0029716
c0014748:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001474e:	e8 a7 c5 ff ff       	call   c0010cfa <VgaText::puts(char const*)>
c0014753:	58                   	pop    eax
c0014754:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c0014759:	5a                   	pop    edx
c001475a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c001475d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014763:	e8 b8 c5 ff ff       	call   c0010d20 <VgaText::putx(unsigned int)>
c0014768:	59                   	pop    ecx
c0014769:	58                   	pop    eax
c001476a:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c001476f:	68 1e 97 02 c0       	push   0xc002971e
c0014774:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001477a:	e8 7b c5 ff ff       	call   c0010cfa <VgaText::puts(char const*)>
c001477f:	58                   	pop    eax
c0014780:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c0014785:	5a                   	pop    edx
c0014786:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014789:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001478f:	e8 8c c5 ff ff       	call   c0010d20 <VgaText::putx(unsigned int)>
c0014794:	59                   	pop    ecx
c0014795:	58                   	pop    eax
c0014796:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c001479b:	68 26 97 02 c0       	push   0xc0029726
c00147a0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147a6:	e8 4f c5 ff ff       	call   c0010cfa <VgaText::puts(char const*)>
c00147ab:	58                   	pop    eax
c00147ac:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c00147b1:	5a                   	pop    edx
c00147b2:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00147b5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147bb:	e8 60 c5 ff ff       	call   c0010d20 <VgaText::putx(unsigned int)>
c00147c0:	59                   	pop    ecx
c00147c1:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c00147c6:	5b                   	pop    ebx
c00147c7:	68 2e 97 02 c0       	push   0xc002972e
c00147cc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147d2:	e8 23 c5 ff ff       	call   c0010cfa <VgaText::puts(char const*)>
c00147d7:	58                   	pop    eax
c00147d8:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c00147dd:	5a                   	pop    edx
c00147de:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00147e2:	52                   	push   edx
c00147e3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147e9:	e8 32 c5 ff ff       	call   c0010d20 <VgaText::putx(unsigned int)>
c00147ee:	59                   	pop    ecx
c00147ef:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c00147f4:	5b                   	pop    ebx
c00147f5:	68 37 97 02 c0       	push   0xc0029737
c00147fa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014800:	e8 f5 c4 ff ff       	call   c0010cfa <VgaText::puts(char const*)>
c0014805:	58                   	pop    eax
c0014806:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c001480b:	5a                   	pop    edx
c001480c:	57                   	push   edi
c001480d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014813:	e8 08 c5 ff ff       	call   c0010d20 <VgaText::putx(unsigned int)>
c0014818:	59                   	pop    ecx
c0014819:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c001481e:	5b                   	pop    ebx
c001481f:	68 3f 97 02 c0       	push   0xc002973f
c0014824:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001482a:	e8 cb c4 ff ff       	call   c0010cfa <VgaText::puts(char const*)>
c001482f:	5f                   	pop    edi
c0014830:	58                   	pop    eax
c0014831:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c0014836:	56                   	push   esi
c0014837:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001483d:	e8 de c4 ff ff       	call   c0010d20 <VgaText::putx(unsigned int)>
c0014842:	58                   	pop    eax
c0014843:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c0014848:	5a                   	pop    edx
c0014849:	68 47 97 02 c0       	push   0xc0029747
c001484e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014854:	e8 a1 c4 ff ff       	call   c0010cfa <VgaText::puts(char const*)>
c0014859:	59                   	pop    ecx
c001485a:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c001485f:	5b                   	pop    ebx
c0014860:	55                   	push   ebp
c0014861:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014867:	e8 b4 c4 ff ff       	call   c0010d20 <VgaText::putx(unsigned int)>
c001486c:	5e                   	pop    esi
c001486d:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c0014872:	5f                   	pop    edi
c0014873:	68 4f 97 02 c0       	push   0xc002974f
c0014878:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001487e:	e8 77 c4 ff ff       	call   c0010cfa <VgaText::puts(char const*)>
c0014883:	0f 21 c0             	mov    eax,db0
c0014886:	5d                   	pop    ebp
c0014887:	5a                   	pop    edx
c0014888:	50                   	push   eax
c0014889:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c001488e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014894:	e8 87 c4 ff ff       	call   c0010d20 <VgaText::putx(unsigned int)>
c0014899:	59                   	pop    ecx
c001489a:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c001489f:	5b                   	pop    ebx
c00148a0:	68 58 97 02 c0       	push   0xc0029758
c00148a5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148ab:	e8 4a c4 ff ff       	call   c0010cfa <VgaText::puts(char const*)>
c00148b0:	0f 21 c8             	mov    eax,db1
c00148b3:	5e                   	pop    esi
c00148b4:	5f                   	pop    edi
c00148b5:	50                   	push   eax
c00148b6:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c00148bb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148c1:	e8 5a c4 ff ff       	call   c0010d20 <VgaText::putx(unsigned int)>
c00148c6:	5d                   	pop    ebp
c00148c7:	58                   	pop    eax
c00148c8:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c00148cd:	68 60 97 02 c0       	push   0xc0029760
c00148d2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148d8:	e8 1d c4 ff ff       	call   c0010cfa <VgaText::puts(char const*)>
c00148dd:	0f 21 d0             	mov    eax,db2
c00148e0:	5a                   	pop    edx
c00148e1:	59                   	pop    ecx
c00148e2:	50                   	push   eax
c00148e3:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c00148e8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148ee:	e8 2d c4 ff ff       	call   c0010d20 <VgaText::putx(unsigned int)>
c00148f3:	5b                   	pop    ebx
c00148f4:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c00148f9:	5e                   	pop    esi
c00148fa:	68 68 97 02 c0       	push   0xc0029768
c00148ff:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014905:	e8 f0 c3 ff ff       	call   c0010cfa <VgaText::puts(char const*)>
c001490a:	0f 21 d8             	mov    eax,db3
c001490d:	5f                   	pop    edi
c001490e:	5d                   	pop    ebp
c001490f:	50                   	push   eax
c0014910:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c0014915:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001491b:	e8 00 c4 ff ff       	call   c0010d20 <VgaText::putx(unsigned int)>
c0014920:	58                   	pop    eax
c0014921:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c0014926:	5a                   	pop    edx
c0014927:	68 70 97 02 c0       	push   0xc0029770
c001492c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014932:	e8 c3 c3 ff ff       	call   c0010cfa <VgaText::puts(char const*)>
c0014937:	0f 21 f0             	mov    eax,db6
c001493a:	59                   	pop    ecx
c001493b:	5b                   	pop    ebx
c001493c:	50                   	push   eax
c001493d:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c0014942:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014948:	e8 d3 c3 ff ff       	call   c0010d20 <VgaText::putx(unsigned int)>
c001494d:	5e                   	pop    esi
c001494e:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c0014953:	5f                   	pop    edi
c0014954:	68 78 97 02 c0       	push   0xc0029778
c0014959:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001495f:	e8 96 c3 ff ff       	call   c0010cfa <VgaText::puts(char const*)>
c0014964:	0f 21 f8             	mov    eax,db7
c0014967:	5d                   	pop    ebp
c0014968:	5a                   	pop    edx
c0014969:	50                   	push   eax
c001496a:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c001496f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014975:	e8 a6 c3 ff ff       	call   c0010d20 <VgaText::putx(unsigned int)>
c001497a:	fa                   	cli    
c001497b:	f4                   	hlt    
c001497c:	83 c4 10             	add    esp,0x10
c001497f:	eb fe                	jmp    c001497f <displayDebugInfo(regs*)+0x403>

c0014981 <x87EmulHandler(regs*, void*)>:
c0014981:	53                   	push   ebx
c0014982:	83 ec 14             	sub    esp,0x14
c0014985:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014989:	53                   	push   ebx
c001498a:	e8 ff 9f 00 00       	call   c001e98e <Vm::x87Handler(regs*)>
c001498f:	83 c4 10             	add    esp,0x10
c0014992:	84 c0                	test   al,al
c0014994:	74 05                	je     c001499b <x87EmulHandler(regs*, void*)+0x1a>
c0014996:	83 c4 08             	add    esp,0x8
c0014999:	5b                   	pop    ebx
c001499a:	c3                   	ret    
c001499b:	83 ec 0c             	sub    esp,0xc
c001499e:	68 80 97 02 c0       	push   0xc0029780
c00149a3:	e8 a9 dd ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c00149a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00149ab:	e8 cc fb ff ff       	call   c001457c <displayDebugInfo(regs*)>

c00149b0 <gpFault(regs*, void*)>:
c00149b0:	53                   	push   ebx
c00149b1:	83 ec 14             	sub    esp,0x14
c00149b4:	c7 05 b0 ca 02 c0 0b dd 01 c0 	mov    DWORD PTR ds:0xc002cab0,0xc001dd0b
c00149be:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00149c2:	53                   	push   ebx
c00149c3:	e8 43 93 00 00       	call   c001dd0b <Vm::faultHandler(regs*)>
c00149c8:	83 c4 10             	add    esp,0x10
c00149cb:	84 c0                	test   al,al
c00149cd:	74 05                	je     c00149d4 <gpFault(regs*, void*)+0x24>
c00149cf:	83 c4 08             	add    esp,0x8
c00149d2:	5b                   	pop    ebx
c00149d3:	c3                   	ret    
c00149d4:	83 ec 0c             	sub    esp,0xc
c00149d7:	68 96 97 02 c0       	push   0xc0029796
c00149dc:	e8 70 dd ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c00149e1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00149e4:	e8 93 fb ff ff       	call   c001457c <displayDebugInfo(regs*)>

c00149e9 <pgFault(regs*, void*)>:
c00149e9:	83 ec 18             	sub    esp,0x18
c00149ec:	68 b1 97 02 c0       	push   0xc00297b1
c00149f1:	e8 5b dd ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c00149f6:	58                   	pop    eax
c00149f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00149fb:	e8 7c fb ff ff       	call   c001457c <displayDebugInfo(regs*)>

c0014a00 <otherISRHandler(regs*, void*)>:
c0014a00:	53                   	push   ebx
c0014a01:	83 ec 0c             	sub    esp,0xc
c0014a04:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014a08:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014a0b:	50                   	push   eax
c0014a0c:	50                   	push   eax
c0014a0d:	68 be 97 02 c0       	push   0xc00297be
c0014a12:	e8 3a dd ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0014a17:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a1a:	e8 5d fb ff ff       	call   c001457c <displayDebugInfo(regs*)>

c0014a1f <opcodeFault(regs*, void*)>:
c0014a1f:	55                   	push   ebp
c0014a20:	89 e5                	mov    ebp,esp
c0014a22:	56                   	push   esi
c0014a23:	53                   	push   ebx
c0014a24:	83 ec 40             	sub    esp,0x40
c0014a27:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c0014a2c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014a32:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014a38:	84 c0                	test   al,al
c0014a3a:	74 24                	je     c0014a60 <opcodeFault(regs*, void*)+0x41>
c0014a3c:	83 ec 0c             	sub    esp,0xc
c0014a3f:	68 dc 97 02 c0       	push   0xc00297dc
c0014a44:	e8 08 dd ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0014a49:	83 c4 10             	add    esp,0x10
c0014a4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a4f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a52:	8d 50 19             	lea    edx,[eax+0x19]
c0014a55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a58:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a5b:	e9 77 05 00 00       	jmp    c0014fd7 <opcodeFault(regs*, void*)+0x5b8>
c0014a60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a63:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a66:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014a69:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014a6d:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014a71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a74:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a77:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014a7a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a7d:	8a 00                	mov    al,BYTE PTR [eax]
c0014a7f:	3c f0                	cmp    al,0xf0
c0014a81:	75 17                	jne    c0014a9a <opcodeFault(regs*, void*)+0x7b>
c0014a83:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a89:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a8c:	8d 50 01             	lea    edx,[eax+0x1]
c0014a8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a92:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a95:	e9 da 00 00 00       	jmp    c0014b74 <opcodeFault(regs*, void*)+0x155>
c0014a9a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a9d:	8a 00                	mov    al,BYTE PTR [eax]
c0014a9f:	3c f2                	cmp    al,0xf2
c0014aa1:	74 09                	je     c0014aac <opcodeFault(regs*, void*)+0x8d>
c0014aa3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014aa6:	8a 00                	mov    al,BYTE PTR [eax]
c0014aa8:	3c f3                	cmp    al,0xf3
c0014aaa:	75 1b                	jne    c0014ac7 <opcodeFault(regs*, void*)+0xa8>
c0014aac:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014ab0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ab3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ab6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ab9:	8d 50 01             	lea    edx,[eax+0x1]
c0014abc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014abf:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ac2:	e9 ad 00 00 00       	jmp    c0014b74 <opcodeFault(regs*, void*)+0x155>
c0014ac7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014aca:	8a 00                	mov    al,BYTE PTR [eax]
c0014acc:	3c 66                	cmp    al,0x66
c0014ace:	75 1f                	jne    c0014aef <opcodeFault(regs*, void*)+0xd0>
c0014ad0:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014ad4:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014ad8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014adb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ade:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ae1:	8d 50 01             	lea    edx,[eax+0x1]
c0014ae4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ae7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014aea:	e9 85 00 00 00       	jmp    c0014b74 <opcodeFault(regs*, void*)+0x155>
c0014aef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014af2:	8a 00                	mov    al,BYTE PTR [eax]
c0014af4:	3c 67                	cmp    al,0x67
c0014af6:	75 18                	jne    c0014b10 <opcodeFault(regs*, void*)+0xf1>
c0014af8:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014afc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014aff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b02:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b05:	8d 50 01             	lea    edx,[eax+0x1]
c0014b08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b0b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b0e:	eb 64                	jmp    c0014b74 <opcodeFault(regs*, void*)+0x155>
c0014b10:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b13:	8a 00                	mov    al,BYTE PTR [eax]
c0014b15:	3c 2e                	cmp    al,0x2e
c0014b17:	74 09                	je     c0014b22 <opcodeFault(regs*, void*)+0x103>
c0014b19:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b1c:	8a 00                	mov    al,BYTE PTR [eax]
c0014b1e:	3c 3e                	cmp    al,0x3e
c0014b20:	75 18                	jne    c0014b3a <opcodeFault(regs*, void*)+0x11b>
c0014b22:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b26:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b2c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b2f:	8d 50 01             	lea    edx,[eax+0x1]
c0014b32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b35:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b38:	eb 3a                	jmp    c0014b74 <opcodeFault(regs*, void*)+0x155>
c0014b3a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b3d:	8a 00                	mov    al,BYTE PTR [eax]
c0014b3f:	3c 36                	cmp    al,0x36
c0014b41:	74 1b                	je     c0014b5e <opcodeFault(regs*, void*)+0x13f>
c0014b43:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b46:	8a 00                	mov    al,BYTE PTR [eax]
c0014b48:	3c 26                	cmp    al,0x26
c0014b4a:	74 12                	je     c0014b5e <opcodeFault(regs*, void*)+0x13f>
c0014b4c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b4f:	8a 00                	mov    al,BYTE PTR [eax]
c0014b51:	3c 64                	cmp    al,0x64
c0014b53:	74 09                	je     c0014b5e <opcodeFault(regs*, void*)+0x13f>
c0014b55:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b58:	8a 00                	mov    al,BYTE PTR [eax]
c0014b5a:	3c 65                	cmp    al,0x65
c0014b5c:	75 16                	jne    c0014b74 <opcodeFault(regs*, void*)+0x155>
c0014b5e:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b62:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b68:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b6b:	8d 50 01             	lea    edx,[eax+0x1]
c0014b6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b71:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b74:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b77:	8a 00                	mov    al,BYTE PTR [eax]
c0014b79:	3c 0f                	cmp    al,0xf
c0014b7b:	0f 85 ad 00 00 00    	jne    c0014c2e <opcodeFault(regs*, void*)+0x20f>
c0014b81:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b84:	40                   	inc    eax
c0014b85:	8a 00                	mov    al,BYTE PTR [eax]
c0014b87:	3c c2                	cmp    al,0xc2
c0014b89:	74 0e                	je     c0014b99 <opcodeFault(regs*, void*)+0x17a>
c0014b8b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b8e:	40                   	inc    eax
c0014b8f:	8a 00                	mov    al,BYTE PTR [eax]
c0014b91:	3c c3                	cmp    al,0xc3
c0014b93:	0f 85 95 00 00 00    	jne    c0014c2e <opcodeFault(regs*, void*)+0x20f>
c0014b99:	83 ec 0c             	sub    esp,0xc
c0014b9c:	68 ff 97 02 c0       	push   0xc00297ff
c0014ba1:	e8 ab db ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0014ba6:	83 c4 10             	add    esp,0x10
c0014ba9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bac:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014baf:	8d 50 01             	lea    edx,[eax+0x1]
c0014bb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bb5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014bb8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014bbb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bbe:	8a 00                	mov    al,BYTE PTR [eax]
c0014bc0:	8d 50 fe             	lea    edx,[eax-0x2]
c0014bc3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bc6:	88 10                	mov    BYTE PTR [eax],dl
c0014bc8:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014bcb:	50                   	push   eax
c0014bcc:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014bcf:	50                   	push   eax
c0014bd0:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014bd3:	50                   	push   eax
c0014bd4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014bd7:	e8 c0 44 00 00       	call   c001909c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014bdc:	83 c4 10             	add    esp,0x10
c0014bdf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014be2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014be5:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014be8:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014beb:	01 d0                	add    eax,edx
c0014bed:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014bf0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bf3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014bf6:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014bf9:	48                   	dec    eax
c0014bfa:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014bfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c00:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014c03:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c09:	83 ec 04             	sub    esp,0x4
c0014c0c:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014c0f:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014c12:	50                   	push   eax
c0014c13:	e8 51 b5 fe ff       	call   c0000169 <voodooXADD>
c0014c18:	83 c4 10             	add    esp,0x10
c0014c1b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014c1e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014c21:	01 c2                	add    edx,eax
c0014c23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c26:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c29:	e9 a9 03 00 00       	jmp    c0014fd7 <opcodeFault(regs*, void*)+0x5b8>
c0014c2e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c31:	8a 00                	mov    al,BYTE PTR [eax]
c0014c33:	3c 0f                	cmp    al,0xf
c0014c35:	0f 85 8b 01 00 00    	jne    c0014dc6 <opcodeFault(regs*, void*)+0x3a7>
c0014c3b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c3e:	40                   	inc    eax
c0014c3f:	8a 00                	mov    al,BYTE PTR [eax]
c0014c41:	3c c7                	cmp    al,0xc7
c0014c43:	0f 86 7d 01 00 00    	jbe    c0014dc6 <opcodeFault(regs*, void*)+0x3a7>
c0014c49:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c4c:	40                   	inc    eax
c0014c4d:	8a 00                	mov    al,BYTE PTR [eax]
c0014c4f:	3c cf                	cmp    al,0xcf
c0014c51:	0f 87 6f 01 00 00    	ja     c0014dc6 <opcodeFault(regs*, void*)+0x3a7>
c0014c57:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c5a:	40                   	inc    eax
c0014c5b:	8a 00                	mov    al,BYTE PTR [eax]
c0014c5d:	83 c0 38             	add    eax,0x38
c0014c60:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014c63:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014c67:	75 0b                	jne    c0014c74 <opcodeFault(regs*, void*)+0x255>
c0014c69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c6c:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014c6f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c72:	eb 75                	jmp    c0014ce9 <opcodeFault(regs*, void*)+0x2ca>
c0014c74:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014c78:	75 0b                	jne    c0014c85 <opcodeFault(regs*, void*)+0x266>
c0014c7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c7d:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014c80:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c83:	eb 64                	jmp    c0014ce9 <opcodeFault(regs*, void*)+0x2ca>
c0014c85:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014c89:	75 0b                	jne    c0014c96 <opcodeFault(regs*, void*)+0x277>
c0014c8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c8e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014c91:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c94:	eb 53                	jmp    c0014ce9 <opcodeFault(regs*, void*)+0x2ca>
c0014c96:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014c9a:	75 0b                	jne    c0014ca7 <opcodeFault(regs*, void*)+0x288>
c0014c9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c9f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014ca2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ca5:	eb 42                	jmp    c0014ce9 <opcodeFault(regs*, void*)+0x2ca>
c0014ca7:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014cab:	75 0b                	jne    c0014cb8 <opcodeFault(regs*, void*)+0x299>
c0014cad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cb0:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014cb3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014cb6:	eb 31                	jmp    c0014ce9 <opcodeFault(regs*, void*)+0x2ca>
c0014cb8:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014cbc:	75 0b                	jne    c0014cc9 <opcodeFault(regs*, void*)+0x2aa>
c0014cbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cc1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014cc4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014cc7:	eb 20                	jmp    c0014ce9 <opcodeFault(regs*, void*)+0x2ca>
c0014cc9:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014ccd:	75 0b                	jne    c0014cda <opcodeFault(regs*, void*)+0x2bb>
c0014ccf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cd2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014cd5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014cd8:	eb 0f                	jmp    c0014ce9 <opcodeFault(regs*, void*)+0x2ca>
c0014cda:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014cde:	75 09                	jne    c0014ce9 <opcodeFault(regs*, void*)+0x2ca>
c0014ce0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ce3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014ce6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ce9:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014ced:	74 10                	je     c0014cff <opcodeFault(regs*, void*)+0x2e0>
c0014cef:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014cf6:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014cfd:	eb 2d                	jmp    c0014d2c <opcodeFault(regs*, void*)+0x30d>
c0014cff:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014d02:	c1 e0 18             	shl    eax,0x18
c0014d05:	89 c2                	mov    edx,eax
c0014d07:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014d0a:	c1 e0 08             	shl    eax,0x8
c0014d0d:	25 00 00 ff 00       	and    eax,0xff0000
c0014d12:	09 c2                	or     edx,eax
c0014d14:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014d17:	c1 e8 08             	shr    eax,0x8
c0014d1a:	25 00 ff 00 00       	and    eax,0xff00
c0014d1f:	09 c2                	or     edx,eax
c0014d21:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014d24:	c1 e8 18             	shr    eax,0x18
c0014d27:	09 d0                	or     eax,edx
c0014d29:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d2c:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014d30:	75 0b                	jne    c0014d3d <opcodeFault(regs*, void*)+0x31e>
c0014d32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d35:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d38:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014d3b:	eb 75                	jmp    c0014db2 <opcodeFault(regs*, void*)+0x393>
c0014d3d:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014d41:	75 0b                	jne    c0014d4e <opcodeFault(regs*, void*)+0x32f>
c0014d43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d46:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d49:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014d4c:	eb 64                	jmp    c0014db2 <opcodeFault(regs*, void*)+0x393>
c0014d4e:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014d52:	75 0b                	jne    c0014d5f <opcodeFault(regs*, void*)+0x340>
c0014d54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d57:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d5a:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014d5d:	eb 53                	jmp    c0014db2 <opcodeFault(regs*, void*)+0x393>
c0014d5f:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014d63:	75 0b                	jne    c0014d70 <opcodeFault(regs*, void*)+0x351>
c0014d65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d68:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d6b:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014d6e:	eb 42                	jmp    c0014db2 <opcodeFault(regs*, void*)+0x393>
c0014d70:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014d74:	75 0b                	jne    c0014d81 <opcodeFault(regs*, void*)+0x362>
c0014d76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d79:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d7c:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014d7f:	eb 31                	jmp    c0014db2 <opcodeFault(regs*, void*)+0x393>
c0014d81:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014d85:	75 0b                	jne    c0014d92 <opcodeFault(regs*, void*)+0x373>
c0014d87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d8a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d8d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014d90:	eb 20                	jmp    c0014db2 <opcodeFault(regs*, void*)+0x393>
c0014d92:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014d96:	75 0b                	jne    c0014da3 <opcodeFault(regs*, void*)+0x384>
c0014d98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d9b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d9e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014da1:	eb 0f                	jmp    c0014db2 <opcodeFault(regs*, void*)+0x393>
c0014da3:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014da7:	75 09                	jne    c0014db2 <opcodeFault(regs*, void*)+0x393>
c0014da9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dac:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014daf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014db2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014db5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014db8:	8d 50 02             	lea    edx,[eax+0x2]
c0014dbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dbe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014dc1:	e9 11 02 00 00       	jmp    c0014fd7 <opcodeFault(regs*, void*)+0x5b8>
c0014dc6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dc9:	8a 00                	mov    al,BYTE PTR [eax]
c0014dcb:	3c 0f                	cmp    al,0xf
c0014dcd:	0f 85 76 01 00 00    	jne    c0014f49 <opcodeFault(regs*, void*)+0x52a>
c0014dd3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dd6:	40                   	inc    eax
c0014dd7:	8a 00                	mov    al,BYTE PTR [eax]
c0014dd9:	3c c7                	cmp    al,0xc7
c0014ddb:	0f 85 68 01 00 00    	jne    c0014f49 <opcodeFault(regs*, void*)+0x52a>
c0014de1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014de4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014de7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014dea:	8d 50 01             	lea    edx,[eax+0x1]
c0014ded:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014df0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014df3:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014df6:	50                   	push   eax
c0014df7:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014dfa:	50                   	push   eax
c0014dfb:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014dfe:	50                   	push   eax
c0014dff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014e02:	e8 95 42 00 00       	call   c001909c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014e07:	83 c4 10             	add    esp,0x10
c0014e0a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014e0d:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014e10:	83 f0 01             	xor    eax,0x1
c0014e13:	84 c0                	test   al,al
c0014e15:	0f 84 2e 01 00 00    	je     c0014f49 <opcodeFault(regs*, void*)+0x52a>
c0014e1b:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014e1e:	3c 01                	cmp    al,0x1
c0014e20:	0f 85 23 01 00 00    	jne    c0014f49 <opcodeFault(regs*, void*)+0x52a>
c0014e26:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014e29:	83 f0 01             	xor    eax,0x1
c0014e2c:	84 c0                	test   al,al
c0014e2e:	0f 84 15 01 00 00    	je     c0014f49 <opcodeFault(regs*, void*)+0x52a>
c0014e34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e37:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014e3a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014e3d:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014e44:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014e47:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014e4a:	89 c2                	mov    edx,eax
c0014e4c:	b8 00 00 00 00       	mov    eax,0x0
c0014e51:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014e54:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014e57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e5a:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014e5d:	ba 00 00 00 00       	mov    edx,0x0
c0014e62:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0014e65:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0014e68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e6b:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014e6e:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014e71:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0014e78:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014e7b:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014e7e:	89 c2                	mov    edx,eax
c0014e80:	b8 00 00 00 00       	mov    eax,0x0
c0014e85:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014e88:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0014e8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e8e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014e91:	ba 00 00 00 00       	mov    edx,0x0
c0014e96:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0014e99:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0014e9c:	e8 59 7e 00 00       	call   c001ccfa <lockScheduler()>
c0014ea1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014ea4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014ea7:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ea9:	89 c1                	mov    ecx,eax
c0014eab:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0014eae:	89 cb                	mov    ebx,ecx
c0014eb0:	89 d0                	mov    eax,edx
c0014eb2:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0014eb5:	89 c6                	mov    esi,eax
c0014eb7:	89 f0                	mov    eax,esi
c0014eb9:	09 d8                	or     eax,ebx
c0014ebb:	85 c0                	test   eax,eax
c0014ebd:	75 21                	jne    c0014ee0 <opcodeFault(regs*, void*)+0x4c1>
c0014ebf:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0014ec2:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014ec5:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014ec8:	89 01                	mov    DWORD PTR [ecx],eax
c0014eca:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0014ecd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ed0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014ed3:	83 c8 40             	or     eax,0x40
c0014ed6:	89 c2                	mov    edx,eax
c0014ed8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014edb:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014ede:	eb 3e                	jmp    c0014f1e <opcodeFault(regs*, void*)+0x4ff>
c0014ee0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014ee3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014ee6:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ee8:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014eeb:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014eee:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0014ef1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef4:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014ef7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014efa:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014efd:	89 d0                	mov    eax,edx
c0014eff:	31 d2                	xor    edx,edx
c0014f01:	89 c3                	mov    ebx,eax
c0014f03:	89 d6                	mov    esi,edx
c0014f05:	89 da                	mov    edx,ebx
c0014f07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f0a:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014f0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f10:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f13:	83 e0 bf             	and    eax,0xffffffbf
c0014f16:	89 c2                	mov    edx,eax
c0014f18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f1b:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014f1e:	e8 d9 7d 00 00       	call   c001ccfc <unlockScheduler()>
c0014f23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f26:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f29:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0014f2c:	01 c2                	add    edx,eax
c0014f2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f31:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f34:	83 ec 0c             	sub    esp,0xc
c0014f37:	68 0e 98 02 c0       	push   0xc002980e
c0014f3c:	e8 10 d8 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0014f41:	83 c4 10             	add    esp,0x10
c0014f44:	e9 8e 00 00 00       	jmp    c0014fd7 <opcodeFault(regs*, void*)+0x5b8>
c0014f49:	83 ec 0c             	sub    esp,0xc
c0014f4c:	68 21 98 02 c0       	push   0xc0029821
c0014f51:	e8 fb d7 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0014f56:	83 c4 10             	add    esp,0x10
c0014f59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f5c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014f5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f62:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014f65:	c1 e0 04             	shl    eax,0x4
c0014f68:	01 d0                	add    eax,edx
c0014f6a:	83 c0 03             	add    eax,0x3
c0014f6d:	8a 00                	mov    al,BYTE PTR [eax]
c0014f6f:	0f b6 d8             	movzx  ebx,al
c0014f72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f75:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014f78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f7b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014f7e:	c1 e0 04             	shl    eax,0x4
c0014f81:	01 d0                	add    eax,edx
c0014f83:	83 c0 02             	add    eax,0x2
c0014f86:	8a 00                	mov    al,BYTE PTR [eax]
c0014f88:	0f b6 c8             	movzx  ecx,al
c0014f8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f8e:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014f91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f94:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014f97:	c1 e0 04             	shl    eax,0x4
c0014f9a:	01 d0                	add    eax,edx
c0014f9c:	40                   	inc    eax
c0014f9d:	8a 00                	mov    al,BYTE PTR [eax]
c0014f9f:	0f b6 d0             	movzx  edx,al
c0014fa2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fa5:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0014fa8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fab:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014fae:	c1 e0 04             	shl    eax,0x4
c0014fb1:	01 f0                	add    eax,esi
c0014fb3:	8a 00                	mov    al,BYTE PTR [eax]
c0014fb5:	0f b6 c0             	movzx  eax,al
c0014fb8:	83 ec 0c             	sub    esp,0xc
c0014fbb:	53                   	push   ebx
c0014fbc:	51                   	push   ecx
c0014fbd:	52                   	push   edx
c0014fbe:	50                   	push   eax
c0014fbf:	68 34 98 02 c0       	push   0xc0029834
c0014fc4:	e8 88 d7 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0014fc9:	83 c4 20             	add    esp,0x20
c0014fcc:	83 ec 0c             	sub    esp,0xc
c0014fcf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014fd2:	e8 a5 f5 ff ff       	call   c001457c <displayDebugInfo(regs*)>
c0014fd7:	8d 65 f8             	lea    esp,[ebp-0x8]
c0014fda:	5b                   	pop    ebx
c0014fdb:	5e                   	pop    esi
c0014fdc:	5d                   	pop    ebp
c0014fdd:	c3                   	ret    

c0014fde <displayProgramFault(char const*)>:
c0014fde:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014fe3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014fe6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014fec:	85 c0                	test   eax,eax
c0014fee:	74 15                	je     c0015005 <displayProgramFault(char const*)+0x27>
c0014ff0:	83 ec 0c             	sub    esp,0xc
c0014ff3:	6a 04                	push   0x4
c0014ff5:	6a 0f                	push   0xf
c0014ff7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014ffb:	50                   	push   eax
c0014ffc:	e8 bb b9 ff ff       	call   c00109bc <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015001:	83 c4 1c             	add    esp,0x1c
c0015004:	c3                   	ret    
c0015005:	c3                   	ret    

c0015006 <setupInterruptController()>:
c0015006:	55                   	push   ebp
c0015007:	89 e5                	mov    ebp,esp
c0015009:	53                   	push   ebx
c001500a:	83 ec 24             	sub    esp,0x24
c001500d:	b8 00 00 00 00       	mov    eax,0x0
c0015012:	85 c0                	test   eax,eax
c0015014:	0f 95 c0             	setne  al
c0015017:	84 c0                	test   al,al
c0015019:	74 5b                	je     c0015076 <setupInterruptController()+0x70>
c001501b:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015022:	83 ec 0c             	sub    esp,0xc
c0015025:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015028:	e8 a7 a4 ff ff       	call   c000f4d4 <malloc>
c001502d:	83 c4 10             	add    esp,0x10
c0015030:	89 c3                	mov    ebx,eax
c0015032:	83 ec 0c             	sub    esp,0xc
c0015035:	53                   	push   ebx
c0015036:	e8 c3 f2 00 00       	call   c00242fe <APIC::APIC()>
c001503b:	83 c4 10             	add    esp,0x10
c001503e:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015041:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015044:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015047:	8b 00                	mov    eax,DWORD PTR [eax]
c0015049:	83 c0 08             	add    eax,0x8
c001504c:	8b 00                	mov    eax,DWORD PTR [eax]
c001504e:	6a 00                	push   0x0
c0015050:	6a 00                	push   0x0
c0015052:	6a 00                	push   0x0
c0015054:	52                   	push   edx
c0015055:	ff d0                	call   eax
c0015057:	83 c4 10             	add    esp,0x10
c001505a:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c001505f:	83 ec 08             	sub    esp,0x8
c0015062:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015065:	50                   	push   eax
c0015066:	e8 d5 ea ff ff       	call   c0013b40 <Device::addChild(Device*)>
c001506b:	83 c4 10             	add    esp,0x10
c001506e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015071:	e9 52 03 00 00       	jmp    c00153c8 <setupInterruptController()+0x3c2>
c0015076:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c001507b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015081:	83 e0 01             	and    eax,0x1
c0015084:	84 c0                	test   al,al
c0015086:	0f 95 c0             	setne  al
c0015089:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001508c:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015093:	83 ec 0c             	sub    esp,0xc
c0015096:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015099:	e8 36 a4 ff ff       	call   c000f4d4 <malloc>
c001509e:	83 c4 10             	add    esp,0x10
c00150a1:	89 c3                	mov    ebx,eax
c00150a3:	83 ec 0c             	sub    esp,0xc
c00150a6:	53                   	push   ebx
c00150a7:	e8 aa f7 00 00       	call   c0024856 <PIC::PIC()>
c00150ac:	83 c4 10             	add    esp,0x10
c00150af:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00150b2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00150b5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00150ba:	83 c0 08             	add    eax,0x8
c00150bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00150bf:	6a 00                	push   0x0
c00150c1:	6a 00                	push   0x0
c00150c3:	6a 00                	push   0x0
c00150c5:	52                   	push   edx
c00150c6:	ff d0                	call   eax
c00150c8:	83 c4 10             	add    esp,0x10
c00150cb:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c00150cf:	74 73                	je     c0015144 <setupInterruptController()+0x13e>
c00150d1:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00150d4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00150d9:	83 c0 0c             	add    eax,0xc
c00150dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00150de:	6a 00                	push   0x0
c00150e0:	6a 00                	push   0x0
c00150e2:	6a 00                	push   0x0
c00150e4:	52                   	push   edx
c00150e5:	ff d0                	call   eax
c00150e7:	83 c4 10             	add    esp,0x10
c00150ea:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00150ee:	74 15                	je     c0015105 <setupInterruptController()+0xff>
c00150f0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00150f5:	83 c0 04             	add    eax,0x4
c00150f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00150fa:	83 ec 0c             	sub    esp,0xc
c00150fd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015100:	ff d0                	call   eax
c0015102:	83 c4 10             	add    esp,0x10
c0015105:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c001510c:	83 ec 0c             	sub    esp,0xc
c001510f:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015112:	e8 bd a3 ff ff       	call   c000f4d4 <malloc>
c0015117:	83 c4 10             	add    esp,0x10
c001511a:	89 c3                	mov    ebx,eax
c001511c:	83 ec 0c             	sub    esp,0xc
c001511f:	53                   	push   ebx
c0015120:	e8 d9 f1 00 00       	call   c00242fe <APIC::APIC()>
c0015125:	83 c4 10             	add    esp,0x10
c0015128:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001512b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001512e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015131:	8b 00                	mov    eax,DWORD PTR [eax]
c0015133:	83 c0 08             	add    eax,0x8
c0015136:	8b 00                	mov    eax,DWORD PTR [eax]
c0015138:	6a 00                	push   0x0
c001513a:	6a 00                	push   0x0
c001513c:	6a 00                	push   0x0
c001513e:	52                   	push   edx
c001513f:	ff d0                	call   eax
c0015141:	83 c4 10             	add    esp,0x10
c0015144:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c0015149:	83 ec 08             	sub    esp,0x8
c001514c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001514f:	50                   	push   eax
c0015150:	e8 eb e9 ff ff       	call   c0013b40 <Device::addChild(Device*)>
c0015155:	83 c4 10             	add    esp,0x10
c0015158:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001515b:	8b 00                	mov    eax,DWORD PTR [eax]
c001515d:	83 c0 24             	add    eax,0x24
c0015160:	8b 00                	mov    eax,DWORD PTR [eax]
c0015162:	6a 00                	push   0x0
c0015164:	68 00 4a 01 c0       	push   0xc0014a00
c0015169:	6a 00                	push   0x0
c001516b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001516e:	ff d0                	call   eax
c0015170:	83 c4 10             	add    esp,0x10
c0015173:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015176:	8b 00                	mov    eax,DWORD PTR [eax]
c0015178:	83 c0 24             	add    eax,0x24
c001517b:	8b 00                	mov    eax,DWORD PTR [eax]
c001517d:	6a 00                	push   0x0
c001517f:	68 00 4a 01 c0       	push   0xc0014a00
c0015184:	6a 01                	push   0x1
c0015186:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015189:	ff d0                	call   eax
c001518b:	83 c4 10             	add    esp,0x10
c001518e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015191:	8b 00                	mov    eax,DWORD PTR [eax]
c0015193:	83 c0 24             	add    eax,0x24
c0015196:	8b 00                	mov    eax,DWORD PTR [eax]
c0015198:	6a 00                	push   0x0
c001519a:	68 d9 43 01 c0       	push   0xc00143d9
c001519f:	6a 02                	push   0x2
c00151a1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151a4:	ff d0                	call   eax
c00151a6:	83 c4 10             	add    esp,0x10
c00151a9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00151ae:	83 c0 24             	add    eax,0x24
c00151b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00151b3:	6a 00                	push   0x0
c00151b5:	68 00 4a 01 c0       	push   0xc0014a00
c00151ba:	6a 03                	push   0x3
c00151bc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151bf:	ff d0                	call   eax
c00151c1:	83 c4 10             	add    esp,0x10
c00151c4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00151c9:	83 c0 24             	add    eax,0x24
c00151cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00151ce:	6a 00                	push   0x0
c00151d0:	68 00 4a 01 c0       	push   0xc0014a00
c00151d5:	6a 04                	push   0x4
c00151d7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151da:	ff d0                	call   eax
c00151dc:	83 c4 10             	add    esp,0x10
c00151df:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00151e4:	83 c0 24             	add    eax,0x24
c00151e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00151e9:	6a 00                	push   0x0
c00151eb:	68 00 4a 01 c0       	push   0xc0014a00
c00151f0:	6a 05                	push   0x5
c00151f2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151f5:	ff d0                	call   eax
c00151f7:	83 c4 10             	add    esp,0x10
c00151fa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00151ff:	83 c0 24             	add    eax,0x24
c0015202:	8b 00                	mov    eax,DWORD PTR [eax]
c0015204:	6a 00                	push   0x0
c0015206:	68 1f 4a 01 c0       	push   0xc0014a1f
c001520b:	6a 06                	push   0x6
c001520d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015210:	ff d0                	call   eax
c0015212:	83 c4 10             	add    esp,0x10
c0015215:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015218:	8b 00                	mov    eax,DWORD PTR [eax]
c001521a:	83 c0 24             	add    eax,0x24
c001521d:	8b 00                	mov    eax,DWORD PTR [eax]
c001521f:	6a 00                	push   0x0
c0015221:	68 81 49 01 c0       	push   0xc0014981
c0015226:	6a 07                	push   0x7
c0015228:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001522b:	ff d0                	call   eax
c001522d:	83 c4 10             	add    esp,0x10
c0015230:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015233:	8b 00                	mov    eax,DWORD PTR [eax]
c0015235:	83 c0 24             	add    eax,0x24
c0015238:	8b 00                	mov    eax,DWORD PTR [eax]
c001523a:	6a 00                	push   0x0
c001523c:	68 f4 41 01 c0       	push   0xc00141f4
c0015241:	6a 08                	push   0x8
c0015243:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015246:	ff d0                	call   eax
c0015248:	83 c4 10             	add    esp,0x10
c001524b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001524e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015250:	83 c0 24             	add    eax,0x24
c0015253:	8b 00                	mov    eax,DWORD PTR [eax]
c0015255:	6a 00                	push   0x0
c0015257:	68 00 4a 01 c0       	push   0xc0014a00
c001525c:	6a 09                	push   0x9
c001525e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015261:	ff d0                	call   eax
c0015263:	83 c4 10             	add    esp,0x10
c0015266:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015269:	8b 00                	mov    eax,DWORD PTR [eax]
c001526b:	83 c0 24             	add    eax,0x24
c001526e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015270:	6a 00                	push   0x0
c0015272:	68 00 4a 01 c0       	push   0xc0014a00
c0015277:	6a 0a                	push   0xa
c0015279:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001527c:	ff d0                	call   eax
c001527e:	83 c4 10             	add    esp,0x10
c0015281:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015284:	8b 00                	mov    eax,DWORD PTR [eax]
c0015286:	83 c0 24             	add    eax,0x24
c0015289:	8b 00                	mov    eax,DWORD PTR [eax]
c001528b:	6a 00                	push   0x0
c001528d:	68 00 4a 01 c0       	push   0xc0014a00
c0015292:	6a 0b                	push   0xb
c0015294:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015297:	ff d0                	call   eax
c0015299:	83 c4 10             	add    esp,0x10
c001529c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001529f:	8b 00                	mov    eax,DWORD PTR [eax]
c00152a1:	83 c0 24             	add    eax,0x24
c00152a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00152a6:	6a 00                	push   0x0
c00152a8:	68 00 4a 01 c0       	push   0xc0014a00
c00152ad:	6a 0c                	push   0xc
c00152af:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152b2:	ff d0                	call   eax
c00152b4:	83 c4 10             	add    esp,0x10
c00152b7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00152bc:	83 c0 24             	add    eax,0x24
c00152bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00152c1:	6a 00                	push   0x0
c00152c3:	68 b0 49 01 c0       	push   0xc00149b0
c00152c8:	6a 0d                	push   0xd
c00152ca:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152cd:	ff d0                	call   eax
c00152cf:	83 c4 10             	add    esp,0x10
c00152d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00152d7:	83 c0 24             	add    eax,0x24
c00152da:	8b 00                	mov    eax,DWORD PTR [eax]
c00152dc:	6a 00                	push   0x0
c00152de:	68 e9 49 01 c0       	push   0xc00149e9
c00152e3:	6a 0e                	push   0xe
c00152e5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152e8:	ff d0                	call   eax
c00152ea:	83 c4 10             	add    esp,0x10
c00152ed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00152f2:	83 c0 24             	add    eax,0x24
c00152f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00152f7:	6a 00                	push   0x0
c00152f9:	68 00 4a 01 c0       	push   0xc0014a00
c00152fe:	6a 0f                	push   0xf
c0015300:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015303:	ff d0                	call   eax
c0015305:	83 c4 10             	add    esp,0x10
c0015308:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001530b:	8b 00                	mov    eax,DWORD PTR [eax]
c001530d:	83 c0 24             	add    eax,0x24
c0015310:	8b 00                	mov    eax,DWORD PTR [eax]
c0015312:	6a 00                	push   0x0
c0015314:	68 00 4a 01 c0       	push   0xc0014a00
c0015319:	6a 10                	push   0x10
c001531b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001531e:	ff d0                	call   eax
c0015320:	83 c4 10             	add    esp,0x10
c0015323:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015326:	8b 00                	mov    eax,DWORD PTR [eax]
c0015328:	83 c0 24             	add    eax,0x24
c001532b:	8b 00                	mov    eax,DWORD PTR [eax]
c001532d:	6a 00                	push   0x0
c001532f:	68 00 4a 01 c0       	push   0xc0014a00
c0015334:	6a 11                	push   0x11
c0015336:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015339:	ff d0                	call   eax
c001533b:	83 c4 10             	add    esp,0x10
c001533e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015341:	8b 00                	mov    eax,DWORD PTR [eax]
c0015343:	83 c0 24             	add    eax,0x24
c0015346:	8b 00                	mov    eax,DWORD PTR [eax]
c0015348:	6a 00                	push   0x0
c001534a:	68 00 4a 01 c0       	push   0xc0014a00
c001534f:	6a 12                	push   0x12
c0015351:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015354:	ff d0                	call   eax
c0015356:	83 c4 10             	add    esp,0x10
c0015359:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001535c:	8b 00                	mov    eax,DWORD PTR [eax]
c001535e:	83 c0 24             	add    eax,0x24
c0015361:	8b 00                	mov    eax,DWORD PTR [eax]
c0015363:	6a 00                	push   0x0
c0015365:	68 00 4a 01 c0       	push   0xc0014a00
c001536a:	6a 13                	push   0x13
c001536c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001536f:	ff d0                	call   eax
c0015371:	83 c4 10             	add    esp,0x10
c0015374:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015377:	8b 00                	mov    eax,DWORD PTR [eax]
c0015379:	83 c0 24             	add    eax,0x24
c001537c:	8b 00                	mov    eax,DWORD PTR [eax]
c001537e:	6a 00                	push   0x0
c0015380:	68 00 4a 01 c0       	push   0xc0014a00
c0015385:	6a 14                	push   0x14
c0015387:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001538a:	ff d0                	call   eax
c001538c:	83 c4 10             	add    esp,0x10
c001538f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015392:	8b 00                	mov    eax,DWORD PTR [eax]
c0015394:	83 c0 24             	add    eax,0x24
c0015397:	8b 00                	mov    eax,DWORD PTR [eax]
c0015399:	6a 00                	push   0x0
c001539b:	68 00 4a 01 c0       	push   0xc0014a00
c00153a0:	6a 1e                	push   0x1e
c00153a2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153a5:	ff d0                	call   eax
c00153a7:	83 c4 10             	add    esp,0x10
c00153aa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00153af:	83 c0 24             	add    eax,0x24
c00153b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00153b4:	6a 00                	push   0x0
c00153b6:	68 8f b6 01 c0       	push   0xc001b68f
c00153bb:	6a 60                	push   0x60
c00153bd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153c0:	ff d0                	call   eax
c00153c2:	83 c4 10             	add    esp,0x10
c00153c5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153c8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00153cb:	c9                   	leave  
c00153cc:	c3                   	ret    
c00153cd:	90                   	nop

c00153ce <InterruptController::convertLegacyIRQNumber(int)>:
c00153ce:	55                   	push   ebp
c00153cf:	89 e5                	mov    ebp,esp
c00153d1:	83 ec 08             	sub    esp,0x8
c00153d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153d7:	83 ec 0c             	sub    esp,0xc
c00153da:	50                   	push   eax
c00153db:	e8 4c ea ff ff       	call   c0013e2c <Device::getName()>
c00153e0:	83 c4 10             	add    esp,0x10
c00153e3:	8a 00                	mov    al,BYTE PTR [eax]
c00153e5:	3c 41                	cmp    al,0x41
c00153e7:	0f 94 c0             	sete   al
c00153ea:	84 c0                	test   al,al
c00153ec:	74 28                	je     c0015416 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00153ee:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00153f2:	7f 12                	jg     c0015406 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c00153f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00153f7:	05 80 bb 02 c0       	add    eax,0xc002bb80
c00153fc:	8a 00                	mov    al,BYTE PTR [eax]
c00153fe:	0f b6 c0             	movzx  eax,al
c0015401:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015404:	eb 10                	jmp    c0015416 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015406:	83 ec 0c             	sub    esp,0xc
c0015409:	68 b4 95 02 c0       	push   0xc00295b4
c001540e:	e8 58 44 00 00       	call   c001986b <Krnl::panic(char const*)>
c0015413:	83 c4 10             	add    esp,0x10
c0015416:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015419:	c9                   	leave  
c001541a:	c3                   	ret    
c001541b:	90                   	nop

c001541c <startGUI(void*)>:
c001541c:	55                   	push   ebp
c001541d:	89 e5                	mov    ebp,esp
c001541f:	53                   	push   ebx
c0015420:	83 ec 04             	sub    esp,0x4
c0015423:	e8 d4 78 00 00       	call   c001ccfc <unlockScheduler()>
c0015428:	8b 1d 28 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c928
c001542e:	83 ec 08             	sub    esp,0x8
c0015431:	6a 01                	push   0x1
c0015433:	68 9c 98 02 c0       	push   0xc002989c
c0015438:	e8 49 72 00 00       	call   c001c686 <Thr::loadDLL(char const*, bool)>
c001543d:	83 c4 10             	add    esp,0x10
c0015440:	83 ec 08             	sub    esp,0x8
c0015443:	53                   	push   ebx
c0015444:	50                   	push   eax
c0015445:	e8 4b 74 00 00       	call   c001c895 <Thr::executeDLL(unsigned long, void*)>
c001544a:	83 c4 10             	add    esp,0x10
c001544d:	8b 1d 28 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c928
c0015453:	83 ec 08             	sub    esp,0x8
c0015456:	6a 01                	push   0x1
c0015458:	68 b6 98 02 c0       	push   0xc00298b6
c001545d:	e8 24 72 00 00       	call   c001c686 <Thr::loadDLL(char const*, bool)>
c0015462:	83 c4 10             	add    esp,0x10
c0015465:	83 ec 08             	sub    esp,0x8
c0015468:	53                   	push   ebx
c0015469:	50                   	push   eax
c001546a:	e8 26 74 00 00       	call   c001c895 <Thr::executeDLL(unsigned long, void*)>
c001546f:	83 c4 10             	add    esp,0x10
c0015472:	90                   	nop
c0015473:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015476:	c9                   	leave  
c0015477:	c3                   	ret    

c0015478 <startGUIVESA(void*)>:
c0015478:	55                   	push   ebp
c0015479:	89 e5                	mov    ebp,esp
c001547b:	53                   	push   ebx
c001547c:	83 ec 04             	sub    esp,0x4
c001547f:	e8 78 78 00 00       	call   c001ccfc <unlockScheduler()>
c0015484:	8b 1d 28 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c928
c001548a:	83 ec 08             	sub    esp,0x8
c001548d:	6a 01                	push   0x1
c001548f:	68 d0 98 02 c0       	push   0xc00298d0
c0015494:	e8 ed 71 00 00       	call   c001c686 <Thr::loadDLL(char const*, bool)>
c0015499:	83 c4 10             	add    esp,0x10
c001549c:	83 ec 08             	sub    esp,0x8
c001549f:	53                   	push   ebx
c00154a0:	50                   	push   eax
c00154a1:	e8 ef 73 00 00       	call   c001c895 <Thr::executeDLL(unsigned long, void*)>
c00154a6:	83 c4 10             	add    esp,0x10
c00154a9:	8b 1d 28 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c928
c00154af:	83 ec 08             	sub    esp,0x8
c00154b2:	6a 01                	push   0x1
c00154b4:	68 b6 98 02 c0       	push   0xc00298b6
c00154b9:	e8 c8 71 00 00       	call   c001c686 <Thr::loadDLL(char const*, bool)>
c00154be:	83 c4 10             	add    esp,0x10
c00154c1:	83 ec 08             	sub    esp,0x8
c00154c4:	53                   	push   ebx
c00154c5:	50                   	push   eax
c00154c6:	e8 ca 73 00 00       	call   c001c895 <Thr::executeDLL(unsigned long, void*)>
c00154cb:	83 c4 10             	add    esp,0x10
c00154ce:	90                   	nop
c00154cf:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00154d2:	c9                   	leave  
c00154d3:	c3                   	ret    

c00154d4 <sendKeyToTerminal(unsigned char)>:
c00154d4:	55                   	push   ebp
c00154d5:	89 e5                	mov    ebp,esp
c00154d7:	83 ec 28             	sub    esp,0x28
c00154da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154dd:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00154e0:	a1 e4 c9 02 c0       	mov    eax,ds:0xc002c9e4
c00154e5:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c00154e9:	83 ec 08             	sub    esp,0x8
c00154ec:	52                   	push   edx
c00154ed:	50                   	push   eax
c00154ee:	e8 3d ba ff ff       	call   c0010f30 <VgaText::receiveKey(unsigned char)>
c00154f3:	83 c4 10             	add    esp,0x10
c00154f6:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c00154fa:	75 41                	jne    c001553d <sendKeyToTerminal(unsigned char)+0x69>
c00154fc:	e8 20 78 00 00       	call   c001cd21 <lockStuff()>
c0015501:	a1 c0 ca 02 c0       	mov    eax,ds:0xc002cac0
c0015506:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015509:	c7 05 c0 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cac0,0x0
c0015513:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015517:	74 1f                	je     c0015538 <sendKeyToTerminal(unsigned char)+0x64>
c0015519:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001551c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001551f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015522:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015525:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015528:	83 ec 0c             	sub    esp,0xc
c001552b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001552e:	e8 df 7d 00 00       	call   c001d312 <unblockTask(ThreadControlBlock*)>
c0015533:	83 c4 10             	add    esp,0x10
c0015536:	eb db                	jmp    c0015513 <sendKeyToTerminal(unsigned char)+0x3f>
c0015538:	e8 7e 7b 00 00       	call   c001d0bb <unlockStuff()>
c001553d:	90                   	nop
c001553e:	c9                   	leave  
c001553f:	c3                   	ret    

c0015540 <sendKeyboardToken(KeyboardToken)>:
c0015540:	55                   	push   ebp
c0015541:	89 e5                	mov    ebp,esp
c0015543:	83 ec 18             	sub    esp,0x18
c0015546:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015549:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001554c:	0f b7 c0             	movzx  eax,ax
c001554f:	83 f2 01             	xor    edx,0x1
c0015552:	88 90 e0 ca 02 c0    	mov    BYTE PTR [eax-0x3ffd3520],dl
c0015558:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001555b:	66 3d 03 02          	cmp    ax,0x203
c001555f:	75 07                	jne    c0015568 <sendKeyboardToken(KeyboardToken)+0x28>
c0015561:	a0 e0 cb 02 c0       	mov    al,ds:0xc002cbe0
c0015566:	84 c0                	test   al,al
c0015568:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001556c:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001556f:	a0 e8 ce 02 c0       	mov    al,ds:0xc002cee8
c0015574:	38 c2                	cmp    dl,al
c0015576:	74 1c                	je     c0015594 <sendKeyboardToken(KeyboardToken)+0x54>
c0015578:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001557b:	a2 e8 ce 02 c0       	mov    ds:0xc002cee8,al
c0015580:	a0 e8 ce 02 c0       	mov    al,ds:0xc002cee8
c0015585:	0f b6 c0             	movzx  eax,al
c0015588:	83 ec 0c             	sub    esp,0xc
c001558b:	50                   	push   eax
c001558c:	e8 5d ab ff ff       	call   c00100ee <setTerminalScrollLock(bool)>
c0015591:	83 c4 10             	add    esp,0x10
c0015594:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015597:	84 c0                	test   al,al
c0015599:	0f 84 ae 00 00 00    	je     c001564d <sendKeyboardToken(KeyboardToken)+0x10d>
c001559f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155a2:	66 3d 10 03          	cmp    ax,0x310
c00155a6:	75 06                	jne    c00155ae <sendKeyboardToken(KeyboardToken)+0x6e>
c00155a8:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00155ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155b1:	66 3d 11 03          	cmp    ax,0x311
c00155b5:	75 06                	jne    c00155bd <sendKeyboardToken(KeyboardToken)+0x7d>
c00155b7:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00155bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155c0:	66 3d 12 03          	cmp    ax,0x312
c00155c4:	75 06                	jne    c00155cc <sendKeyboardToken(KeyboardToken)+0x8c>
c00155c6:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00155cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155cf:	66 3d 13 03          	cmp    ax,0x313
c00155d3:	75 06                	jne    c00155db <sendKeyboardToken(KeyboardToken)+0x9b>
c00155d5:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00155db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155de:	66 3d 14 03          	cmp    ax,0x314
c00155e2:	75 06                	jne    c00155ea <sendKeyboardToken(KeyboardToken)+0xaa>
c00155e4:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00155ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ed:	66 3d 15 03          	cmp    ax,0x315
c00155f1:	75 06                	jne    c00155f9 <sendKeyboardToken(KeyboardToken)+0xb9>
c00155f3:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00155f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155fc:	66 3d 16 03          	cmp    ax,0x316
c0015600:	75 06                	jne    c0015608 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015602:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015608:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001560b:	66 3d 17 03          	cmp    ax,0x317
c001560f:	75 06                	jne    c0015617 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015611:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015617:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001561a:	66 3d 18 03          	cmp    ax,0x318
c001561e:	75 06                	jne    c0015626 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015620:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015626:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015629:	66 3d 19 03          	cmp    ax,0x319
c001562d:	75 06                	jne    c0015635 <sendKeyboardToken(KeyboardToken)+0xf5>
c001562f:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015635:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015638:	66 3d 1a 03          	cmp    ax,0x31a
c001563c:	0f 85 c9 00 00 00    	jne    c001570b <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015642:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015648:	e9 be 00 00 00       	jmp    c001570b <sendKeyboardToken(KeyboardToken)+0x1cb>
c001564d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015650:	66 3d 10 03          	cmp    ax,0x310
c0015654:	75 0a                	jne    c0015660 <sendKeyboardToken(KeyboardToken)+0x120>
c0015656:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001565c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015660:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015663:	66 3d 11 03          	cmp    ax,0x311
c0015667:	75 0a                	jne    c0015673 <sendKeyboardToken(KeyboardToken)+0x133>
c0015669:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001566f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015673:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015676:	66 3d 12 03          	cmp    ax,0x312
c001567a:	75 0a                	jne    c0015686 <sendKeyboardToken(KeyboardToken)+0x146>
c001567c:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015682:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015686:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015689:	66 3d 13 03          	cmp    ax,0x313
c001568d:	75 0a                	jne    c0015699 <sendKeyboardToken(KeyboardToken)+0x159>
c001568f:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015695:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015699:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001569c:	66 3d 14 03          	cmp    ax,0x314
c00156a0:	75 0a                	jne    c00156ac <sendKeyboardToken(KeyboardToken)+0x16c>
c00156a2:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00156a8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156af:	66 3d 15 03          	cmp    ax,0x315
c00156b3:	75 0a                	jne    c00156bf <sendKeyboardToken(KeyboardToken)+0x17f>
c00156b5:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00156bb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c2:	66 3d 16 03          	cmp    ax,0x316
c00156c6:	75 0a                	jne    c00156d2 <sendKeyboardToken(KeyboardToken)+0x192>
c00156c8:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00156ce:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156d5:	66 3d 17 03          	cmp    ax,0x317
c00156d9:	75 0a                	jne    c00156e5 <sendKeyboardToken(KeyboardToken)+0x1a5>
c00156db:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00156e1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156e8:	66 3d 18 03          	cmp    ax,0x318
c00156ec:	75 0a                	jne    c00156f8 <sendKeyboardToken(KeyboardToken)+0x1b8>
c00156ee:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00156f4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156fb:	66 3d 19 03          	cmp    ax,0x319
c00156ff:	75 0a                	jne    c001570b <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015701:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015707:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001570b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001570e:	66 3d 00 02          	cmp    ax,0x200
c0015712:	75 2c                	jne    c0015740 <sendKeyboardToken(KeyboardToken)+0x200>
c0015714:	a0 e0 ce 02 c0       	mov    al,ds:0xc002cee0
c0015719:	83 f0 01             	xor    eax,0x1
c001571c:	84 c0                	test   al,al
c001571e:	74 20                	je     c0015740 <sendKeyboardToken(KeyboardToken)+0x200>
c0015720:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c0015725:	6a 01                	push   0x1
c0015727:	6a 00                	push   0x0
c0015729:	68 1c 54 01 c0       	push   0xc001541c
c001572e:	50                   	push   eax
c001572f:	e8 f8 76 00 00       	call   c001ce2c <Process::createThread(void (*)(void*), void*, int)>
c0015734:	83 c4 10             	add    esp,0x10
c0015737:	c6 05 e0 ce 02 c0 01 	mov    BYTE PTR ds:0xc002cee0,0x1
c001573e:	eb 33                	jmp    c0015773 <sendKeyboardToken(KeyboardToken)+0x233>
c0015740:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015743:	66 3d 01 02          	cmp    ax,0x201
c0015747:	75 2a                	jne    c0015773 <sendKeyboardToken(KeyboardToken)+0x233>
c0015749:	a0 e0 ce 02 c0       	mov    al,ds:0xc002cee0
c001574e:	83 f0 01             	xor    eax,0x1
c0015751:	84 c0                	test   al,al
c0015753:	74 1e                	je     c0015773 <sendKeyboardToken(KeyboardToken)+0x233>
c0015755:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c001575a:	6a 01                	push   0x1
c001575c:	6a 00                	push   0x0
c001575e:	68 78 54 01 c0       	push   0xc0015478
c0015763:	50                   	push   eax
c0015764:	e8 c3 76 00 00       	call   c001ce2c <Process::createThread(void (*)(void*), void*, int)>
c0015769:	83 c4 10             	add    esp,0x10
c001576c:	c6 05 e0 ce 02 c0 01 	mov    BYTE PTR ds:0xc002cee0,0x1
c0015773:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015776:	66 3d 1d 03          	cmp    ax,0x31d
c001577a:	75 06                	jne    c0015782 <sendKeyboardToken(KeyboardToken)+0x242>
c001577c:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015782:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015785:	66 3d 1c 03          	cmp    ax,0x31c
c0015789:	75 06                	jne    c0015791 <sendKeyboardToken(KeyboardToken)+0x251>
c001578b:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015791:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015794:	66 3d 1b 03          	cmp    ax,0x31b
c0015798:	75 06                	jne    c00157a0 <sendKeyboardToken(KeyboardToken)+0x260>
c001579a:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00157a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157a3:	66 3d 1e 03          	cmp    ax,0x31e
c00157a7:	75 06                	jne    c00157af <sendKeyboardToken(KeyboardToken)+0x26f>
c00157a9:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00157af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157b2:	66 3d 1f 03          	cmp    ax,0x31f
c00157b6:	75 06                	jne    c00157be <sendKeyboardToken(KeyboardToken)+0x27e>
c00157b8:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00157be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c1:	66 3d 1a 03          	cmp    ax,0x31a
c00157c5:	75 06                	jne    c00157cd <sendKeyboardToken(KeyboardToken)+0x28d>
c00157c7:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00157cd:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00157d1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00157d4:	83 f0 01             	xor    eax,0x1
c00157d7:	84 c0                	test   al,al
c00157d9:	74 77                	je     c0015852 <sendKeyboardToken(KeyboardToken)+0x312>
c00157db:	a0 e1 cb 02 c0       	mov    al,ds:0xc002cbe1
c00157e0:	84 c0                	test   al,al
c00157e2:	74 41                	je     c0015825 <sendKeyboardToken(KeyboardToken)+0x2e5>
c00157e4:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00157e8:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00157ec:	74 2b                	je     c0015819 <sendKeyboardToken(KeyboardToken)+0x2d9>
c00157ee:	8b 15 e4 ce 02 c0    	mov    edx,DWORD PTR ds:0xc002cee4
c00157f4:	89 d0                	mov    eax,edx
c00157f6:	c1 e0 02             	shl    eax,0x2
c00157f9:	01 d0                	add    eax,edx
c00157fb:	01 c0                	add    eax,eax
c00157fd:	a3 e4 ce 02 c0       	mov    ds:0xc002cee4,eax
c0015802:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015805:	0f b7 c0             	movzx  eax,ax
c0015808:	8d 50 d0             	lea    edx,[eax-0x30]
c001580b:	a1 e4 ce 02 c0       	mov    eax,ds:0xc002cee4
c0015810:	01 d0                	add    eax,edx
c0015812:	a3 e4 ce 02 c0       	mov    ds:0xc002cee4,eax
c0015817:	eb 6d                	jmp    c0015886 <sendKeyboardToken(KeyboardToken)+0x346>
c0015819:	c7 05 e4 ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cee4,0x0
c0015823:	eb 61                	jmp    c0015886 <sendKeyboardToken(KeyboardToken)+0x346>
c0015825:	a1 e4 ce 02 c0       	mov    eax,ds:0xc002cee4
c001582a:	85 c0                	test   eax,eax
c001582c:	74 18                	je     c0015846 <sendKeyboardToken(KeyboardToken)+0x306>
c001582e:	a1 e4 ce 02 c0       	mov    eax,ds:0xc002cee4
c0015833:	0f b6 c0             	movzx  eax,al
c0015836:	83 ec 0c             	sub    esp,0xc
c0015839:	50                   	push   eax
c001583a:	e8 95 fc ff ff       	call   c00154d4 <sendKeyToTerminal(unsigned char)>
c001583f:	83 c4 10             	add    esp,0x10
c0015842:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015846:	c7 05 e4 ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cee4,0x0
c0015850:	eb 34                	jmp    c0015886 <sendKeyboardToken(KeyboardToken)+0x346>
c0015852:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015855:	66 3d 01 01          	cmp    ax,0x101
c0015859:	75 2b                	jne    c0015886 <sendKeyboardToken(KeyboardToken)+0x346>
c001585b:	a1 e4 ce 02 c0       	mov    eax,ds:0xc002cee4
c0015860:	85 c0                	test   eax,eax
c0015862:	74 18                	je     c001587c <sendKeyboardToken(KeyboardToken)+0x33c>
c0015864:	a1 e4 ce 02 c0       	mov    eax,ds:0xc002cee4
c0015869:	0f b6 c0             	movzx  eax,al
c001586c:	83 ec 0c             	sub    esp,0xc
c001586f:	50                   	push   eax
c0015870:	e8 5f fc ff ff       	call   c00154d4 <sendKeyToTerminal(unsigned char)>
c0015875:	83 c4 10             	add    esp,0x10
c0015878:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001587c:	c7 05 e4 ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cee4,0x0
c0015886:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015889:	83 f0 01             	xor    eax,0x1
c001588c:	84 c0                	test   al,al
c001588e:	74 4c                	je     c00158dc <sendKeyboardToken(KeyboardToken)+0x39c>
c0015890:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015893:	83 f0 01             	xor    eax,0x1
c0015896:	84 c0                	test   al,al
c0015898:	74 42                	je     c00158dc <sendKeyboardToken(KeyboardToken)+0x39c>
c001589a:	a0 e0 cb 02 c0       	mov    al,ds:0xc002cbe0
c001589f:	83 f0 01             	xor    eax,0x1
c00158a2:	84 c0                	test   al,al
c00158a4:	74 36                	je     c00158dc <sendKeyboardToken(KeyboardToken)+0x39c>
c00158a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158a9:	66 83 f8 1f          	cmp    ax,0x1f
c00158ad:	76 09                	jbe    c00158b8 <sendKeyboardToken(KeyboardToken)+0x378>
c00158af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158b2:	66 83 f8 7e          	cmp    ax,0x7e
c00158b6:	76 12                	jbe    c00158ca <sendKeyboardToken(KeyboardToken)+0x38a>
c00158b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158bb:	66 83 f8 0a          	cmp    ax,0xa
c00158bf:	74 09                	je     c00158ca <sendKeyboardToken(KeyboardToken)+0x38a>
c00158c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158c4:	66 83 f8 08          	cmp    ax,0x8
c00158c8:	75 12                	jne    c00158dc <sendKeyboardToken(KeyboardToken)+0x39c>
c00158ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158cd:	0f b6 c0             	movzx  eax,al
c00158d0:	83 ec 0c             	sub    esp,0xc
c00158d3:	50                   	push   eax
c00158d4:	e8 fb fb ff ff       	call   c00154d4 <sendKeyToTerminal(unsigned char)>
c00158d9:	83 c4 10             	add    esp,0x10
c00158dc:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00158df:	83 f0 01             	xor    eax,0x1
c00158e2:	84 c0                	test   al,al
c00158e4:	74 4f                	je     c0015935 <sendKeyboardToken(KeyboardToken)+0x3f5>
c00158e6:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00158e9:	83 f0 01             	xor    eax,0x1
c00158ec:	84 c0                	test   al,al
c00158ee:	74 45                	je     c0015935 <sendKeyboardToken(KeyboardToken)+0x3f5>
c00158f0:	a0 e0 cb 02 c0       	mov    al,ds:0xc002cbe0
c00158f5:	84 c0                	test   al,al
c00158f7:	74 3c                	je     c0015935 <sendKeyboardToken(KeyboardToken)+0x3f5>
c00158f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158fc:	66 83 f8 3f          	cmp    ax,0x3f
c0015900:	76 33                	jbe    c0015935 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015902:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015905:	66 83 f8 7f          	cmp    ax,0x7f
c0015909:	77 2a                	ja     c0015935 <sendKeyboardToken(KeyboardToken)+0x3f5>
c001590b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001590e:	88 c2                	mov    dl,al
c0015910:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015913:	66 83 f8 5f          	cmp    ax,0x5f
c0015917:	76 04                	jbe    c001591d <sendKeyboardToken(KeyboardToken)+0x3dd>
c0015919:	b0 20                	mov    al,0x20
c001591b:	eb 02                	jmp    c001591f <sendKeyboardToken(KeyboardToken)+0x3df>
c001591d:	b0 00                	mov    al,0x0
c001591f:	29 c2                	sub    edx,eax
c0015921:	88 d0                	mov    al,dl
c0015923:	83 e8 40             	sub    eax,0x40
c0015926:	0f b6 c0             	movzx  eax,al
c0015929:	83 ec 0c             	sub    esp,0xc
c001592c:	50                   	push   eax
c001592d:	e8 a2 fb ff ff       	call   c00154d4 <sendKeyToTerminal(unsigned char)>
c0015932:	83 c4 10             	add    esp,0x10
c0015935:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015938:	66 3d 00 03          	cmp    ax,0x300
c001593c:	75 0f                	jne    c001594d <sendKeyboardToken(KeyboardToken)+0x40d>
c001593e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015941:	83 f0 01             	xor    eax,0x1
c0015944:	84 c0                	test   al,al
c0015946:	74 05                	je     c001594d <sendKeyboardToken(KeyboardToken)+0x40d>
c0015948:	e8 40 b0 ff ff       	call   c001098d <doTerminalCycle()>
c001594d:	90                   	nop
c001594e:	c9                   	leave  
c001594f:	c3                   	ret    

c0015950 <clearInternalKeybuffer(VgaText*)>:
c0015950:	55                   	push   ebp
c0015951:	89 e5                	mov    ebp,esp
c0015953:	83 ec 08             	sub    esp,0x8
c0015956:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015959:	05 34 11 00 00       	add    eax,0x1134
c001595e:	83 ec 0c             	sub    esp,0xc
c0015961:	50                   	push   eax
c0015962:	e8 41 ad fe ff       	call   c00006a8 <strlen>
c0015967:	83 c4 10             	add    esp,0x10
c001596a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001596d:	81 c2 34 11 00 00    	add    edx,0x1134
c0015973:	83 ec 04             	sub    esp,0x4
c0015976:	50                   	push   eax
c0015977:	6a 00                	push   0x0
c0015979:	52                   	push   edx
c001597a:	e8 0c ad fe ff       	call   c000068b <memset>
c001597f:	83 c4 10             	add    esp,0x10
c0015982:	90                   	nop
c0015983:	c9                   	leave  
c0015984:	c3                   	ret    

c0015985 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015985:	55                   	push   ebp
c0015986:	89 e5                	mov    ebp,esp
c0015988:	83 ec 18             	sub    esp,0x18
c001598b:	fb                   	sti    
c001598c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015993:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015997:	0f 84 8a 00 00 00    	je     c0015a27 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c001599d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159a0:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00159a6:	84 c0                	test   al,al
c00159a8:	75 11                	jne    c00159bb <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c00159aa:	e8 4b 73 00 00       	call   c001ccfa <lockScheduler()>
c00159af:	e8 82 76 00 00       	call   c001d036 <schedule()>
c00159b4:	e8 43 73 00 00       	call   c001ccfc <unlockScheduler()>
c00159b9:	eb e2                	jmp    c001599d <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c00159bb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00159be:	8d 50 01             	lea    edx,[eax+0x1]
c00159c1:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00159c4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00159c7:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c00159cd:	88 10                	mov    BYTE PTR [eax],dl
c00159cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159d2:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00159d8:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c00159db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159de:	05 34 11 00 00       	add    eax,0x1134
c00159e3:	83 ec 0c             	sub    esp,0xc
c00159e6:	50                   	push   eax
c00159e7:	e8 bc ac fe ff       	call   c00006a8 <strlen>
c00159ec:	83 c4 10             	add    esp,0x10
c00159ef:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00159f2:	81 c2 34 11 00 00    	add    edx,0x1134
c00159f8:	8d 4a 01             	lea    ecx,[edx+0x1]
c00159fb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00159fe:	81 c2 34 11 00 00    	add    edx,0x1134
c0015a04:	83 ec 04             	sub    esp,0x4
c0015a07:	50                   	push   eax
c0015a08:	51                   	push   ecx
c0015a09:	52                   	push   edx
c0015a0a:	e8 0e ac fe ff       	call   c000061d <memmove>
c0015a0f:	83 c4 10             	add    esp,0x10
c0015a12:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015a15:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015a18:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015a1c:	0f 85 71 ff ff ff    	jne    c0015993 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0015a22:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a25:	eb 03                	jmp    c0015a2a <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0015a27:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a2a:	c9                   	leave  
c0015a2b:	c3                   	ret    

c0015a2c <Keyboard::Keyboard(char const*)>:
c0015a2c:	83 ec 0c             	sub    esp,0xc
c0015a2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a33:	83 ec 08             	sub    esp,0x8
c0015a36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015a3a:	50                   	push   eax
c0015a3b:	e8 f0 e2 ff ff       	call   c0013d30 <Device::Device(char const*)>
c0015a40:	83 c4 10             	add    esp,0x10
c0015a43:	ba f4 98 02 c0       	mov    edx,0xc00298f4
c0015a48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a4c:	89 10                	mov    DWORD PTR [eax],edx
c0015a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a52:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015a5c:	c6 05 c4 ca 02 c0 01 	mov    BYTE PTR ds:0xc002cac4,0x1
c0015a63:	90                   	nop
c0015a64:	83 c4 0c             	add    esp,0xc
c0015a67:	c3                   	ret    

c0015a68 <Keyboard::~Keyboard()>:
c0015a68:	83 ec 0c             	sub    esp,0xc
c0015a6b:	ba f4 98 02 c0       	mov    edx,0xc00298f4
c0015a70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a74:	89 10                	mov    DWORD PTR [eax],edx
c0015a76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a7a:	83 ec 0c             	sub    esp,0xc
c0015a7d:	50                   	push   eax
c0015a7e:	e8 8f df ff ff       	call   c0013a12 <Device::~Device()>
c0015a83:	83 c4 10             	add    esp,0x10
c0015a86:	90                   	nop
c0015a87:	83 c4 0c             	add    esp,0xc
c0015a8a:	c3                   	ret    
c0015a8b:	90                   	nop

c0015a8c <Keyboard::~Keyboard()>:
c0015a8c:	83 ec 0c             	sub    esp,0xc
c0015a8f:	83 ec 0c             	sub    esp,0xc
c0015a92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015a96:	e8 cd ff ff ff       	call   c0015a68 <Keyboard::~Keyboard()>
c0015a9b:	83 c4 10             	add    esp,0x10
c0015a9e:	83 ec 08             	sub    esp,0x8
c0015aa1:	68 5c 01 00 00       	push   0x15c
c0015aa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015aaa:	e8 c2 cb ff ff       	call   c0012671 <operator delete(void*, unsigned long)>
c0015aaf:	83 c4 10             	add    esp,0x10
c0015ab2:	83 c4 0c             	add    esp,0xc
c0015ab5:	c3                   	ret    

c0015ab6 <LogicalDisk::close(int, int, void*)>:
c0015ab6:	83 c8 ff             	or     eax,0xffffffff
c0015ab9:	c3                   	ret    

c0015aba <LogicalDisk::~LogicalDisk()>:
c0015aba:	83 ec 0c             	sub    esp,0xc
c0015abd:	ba a4 99 02 c0       	mov    edx,0xc00299a4
c0015ac2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ac6:	89 10                	mov    DWORD PTR [eax],edx
c0015ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015acc:	83 ec 0c             	sub    esp,0xc
c0015acf:	50                   	push   eax
c0015ad0:	e8 3d df ff ff       	call   c0013a12 <Device::~Device()>
c0015ad5:	83 c4 10             	add    esp,0x10
c0015ad8:	90                   	nop
c0015ad9:	83 c4 0c             	add    esp,0xc
c0015adc:	c3                   	ret    
c0015add:	90                   	nop

c0015ade <LogicalDisk::~LogicalDisk()>:
c0015ade:	83 ec 0c             	sub    esp,0xc
c0015ae1:	83 ec 0c             	sub    esp,0xc
c0015ae4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ae8:	e8 cd ff ff ff       	call   c0015aba <LogicalDisk::~LogicalDisk()>
c0015aed:	83 c4 10             	add    esp,0x10
c0015af0:	83 ec 08             	sub    esp,0x8
c0015af3:	68 74 01 00 00       	push   0x174
c0015af8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015afc:	e8 70 cb ff ff       	call   c0012671 <operator delete(void*, unsigned long)>
c0015b01:	83 c4 10             	add    esp,0x10
c0015b04:	83 c4 0c             	add    esp,0xc
c0015b07:	c3                   	ret    

c0015b08 <LogicalDisk::open(int, int, void*)>:
c0015b08:	83 ec 18             	sub    esp,0x18
c0015b0b:	68 20 99 02 c0       	push   0xc0029920
c0015b10:	e8 56 3d 00 00       	call   c001986b <Krnl::panic(char const*)>
c0015b15:	83 c8 ff             	or     eax,0xffffffff
c0015b18:	83 c4 1c             	add    esp,0x1c
c0015b1b:	c3                   	ret    

c0015b1c <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015b1c:	53                   	push   ebx
c0015b1d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015b21:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015b25:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015b29:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015b2f:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015b35:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015b3b:	77 10                	ja     c0015b4d <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015b3d:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015b43:	89 d3                	mov    ebx,edx
c0015b45:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015b4b:	72 05                	jb     c0015b52 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015b4d:	83 c8 ff             	or     eax,0xffffffff
c0015b50:	89 c2                	mov    edx,eax
c0015b52:	5b                   	pop    ebx
c0015b53:	c3                   	ret    

c0015b54 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015b54:	56                   	push   esi
c0015b55:	83 c8 ff             	or     eax,0xffffffff
c0015b58:	53                   	push   ebx
c0015b59:	89 c2                	mov    edx,eax
c0015b5b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015b5f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015b63:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015b67:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015b6d:	77 27                	ja     c0015b96 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015b6f:	89 d8                	mov    eax,ebx
c0015b71:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015b77:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015b7d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015b82:	89 c2                	mov    edx,eax
c0015b84:	73 10                	jae    c0015b96 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015b86:	89 c8                	mov    eax,ecx
c0015b88:	89 da                	mov    edx,ebx
c0015b8a:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015b90:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015b96:	5b                   	pop    ebx
c0015b97:	5e                   	pop    esi
c0015b98:	c3                   	ret    
c0015b99:	90                   	nop

c0015b9a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015b9a:	83 ec 1c             	sub    esp,0x1c
c0015b9d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015ba1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015ba5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ba9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015bad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015bb1:	89 04 24             	mov    DWORD PTR [esp],eax
c0015bb4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015bb8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015bbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bc0:	83 ec 08             	sub    esp,0x8
c0015bc3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015bc7:	50                   	push   eax
c0015bc8:	e8 63 e1 ff ff       	call   c0013d30 <Device::Device(char const*)>
c0015bcd:	83 c4 10             	add    esp,0x10
c0015bd0:	ba a4 99 02 c0       	mov    edx,0xc00299a4
c0015bd5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bd9:	89 10                	mov    DWORD PTR [eax],edx
c0015bdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bdf:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015be6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bea:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015bf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bf5:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015bff:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015c03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015c07:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015c0b:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015c11:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015c17:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015c1b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015c1e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015c22:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015c28:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015c2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c32:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015c36:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015c3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c40:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015c4a:	90                   	nop
c0015c4b:	83 c4 1c             	add    esp,0x1c
c0015c4e:	c3                   	ret    
c0015c4f:	90                   	nop

c0015c50 <LogicalDisk::assignDriveLetter()>:
c0015c50:	55                   	push   ebp
c0015c51:	57                   	push   edi
c0015c52:	56                   	push   esi
c0015c53:	53                   	push   ebx
c0015c54:	83 ec 14             	sub    esp,0x14
c0015c57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015c5b:	8b 3d 00 cf 02 c0    	mov    edi,DWORD PTR ds:0xc002cf00
c0015c61:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015c67:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015c6b:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015c71:	8b 3d 04 cf 02 c0    	mov    edi,DWORD PTR ds:0xc002cf04
c0015c77:	3c 01                	cmp    al,0x1
c0015c79:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015c7d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015c81:	19 c0                	sbb    eax,eax
c0015c83:	83 e0 02             	and    eax,0x2
c0015c86:	83 c0 41             	add    eax,0x41
c0015c89:	0f be e8             	movsx  ebp,al
c0015c8c:	3c 43                	cmp    al,0x43
c0015c8e:	75 10                	jne    c0015ca0 <LogicalDisk::assignDriveLetter()+0x50>
c0015c90:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015c97:	75 5d                	jne    c0015cf6 <LogicalDisk::assignDriveLetter()+0xa6>
c0015c99:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015c9e:	75 56                	jne    c0015cf6 <LogicalDisk::assignDriveLetter()+0xa6>
c0015ca0:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015ca3:	ba 01 00 00 00       	mov    edx,0x1
c0015ca8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015cac:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015cb0:	d3 e2                	shl    edx,cl
c0015cb2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015cb6:	89 d7                	mov    edi,edx
c0015cb8:	89 d6                	mov    esi,edx
c0015cba:	c1 ff 1f             	sar    edi,0x1f
c0015cbd:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015cc1:	21 f9                	and    ecx,edi
c0015cc3:	09 d1                	or     ecx,edx
c0015cc5:	75 2f                	jne    c0015cf6 <LogicalDisk::assignDriveLetter()+0xa6>
c0015cc7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015ccb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015ccf:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015cd5:	09 f2                	or     edx,esi
c0015cd7:	89 15 00 cf 02 c0    	mov    DWORD PTR ds:0xc002cf00,edx
c0015cdd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015ce1:	09 fa                	or     edx,edi
c0015ce3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015ce7:	89 15 04 cf 02 c0    	mov    DWORD PTR ds:0xc002cf04,edx
c0015ced:	89 1c bd 20 cf 02 c0 	mov    DWORD PTR [edi*4-0x3ffd30e0],ebx
c0015cf4:	eb 08                	jmp    c0015cfe <LogicalDisk::assignDriveLetter()+0xae>
c0015cf6:	45                   	inc    ebp
c0015cf7:	40                   	inc    eax
c0015cf8:	3c 5b                	cmp    al,0x5b
c0015cfa:	75 90                	jne    c0015c8c <LogicalDisk::assignDriveLetter()+0x3c>
c0015cfc:	31 c0                	xor    eax,eax
c0015cfe:	83 c4 14             	add    esp,0x14
c0015d01:	5b                   	pop    ebx
c0015d02:	5e                   	pop    esi
c0015d03:	5f                   	pop    edi
c0015d04:	5d                   	pop    ebp
c0015d05:	c3                   	ret    

c0015d06 <LogicalDisk::mount()>:
c0015d06:	56                   	push   esi
c0015d07:	53                   	push   ebx
c0015d08:	51                   	push   ecx
c0015d09:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015d0d:	8b 1d 88 ca 02 c0    	mov    ebx,DWORD PTR ds:0xc002ca88
c0015d13:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015d1d:	85 db                	test   ebx,ebx
c0015d1f:	74 50                	je     c0015d71 <LogicalDisk::mount()+0x6b>
c0015d21:	e8 bf 6f 00 00       	call   c001cce5 <getIRQNestingLevel()>
c0015d26:	52                   	push   edx
c0015d27:	52                   	push   edx
c0015d28:	50                   	push   eax
c0015d29:	68 44 99 02 c0       	push   0xc0029944
c0015d2e:	e8 1e ca ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0015d33:	83 c4 0c             	add    esp,0xc
c0015d36:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015d3d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015d3f:	83 e8 41             	sub    eax,0x41
c0015d42:	50                   	push   eax
c0015d43:	56                   	push   esi
c0015d44:	53                   	push   ebx
c0015d45:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015d48:	83 c4 10             	add    esp,0x10
c0015d4b:	84 c0                	test   al,al
c0015d4d:	74 08                	je     c0015d57 <LogicalDisk::mount()+0x51>
c0015d4f:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015d55:	eb 1c                	jmp    c0015d73 <LogicalDisk::mount()+0x6d>
c0015d57:	e8 89 6f 00 00       	call   c001cce5 <getIRQNestingLevel()>
c0015d5c:	51                   	push   ecx
c0015d5d:	51                   	push   ecx
c0015d5e:	50                   	push   eax
c0015d5f:	68 5f 99 02 c0       	push   0xc002995f
c0015d64:	e8 e8 c9 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0015d69:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015d6c:	83 c4 10             	add    esp,0x10
c0015d6f:	eb ac                	jmp    c0015d1d <LogicalDisk::mount()+0x17>
c0015d71:	31 c0                	xor    eax,eax
c0015d73:	5a                   	pop    edx
c0015d74:	5b                   	pop    ebx
c0015d75:	5e                   	pop    esi
c0015d76:	c3                   	ret    
c0015d77:	90                   	nop

c0015d78 <LogicalDisk::unmount()>:
c0015d78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d7c:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015d86:	c3                   	ret    
c0015d87:	90                   	nop

c0015d88 <LogicalDisk::unassignDriveLetter()>:
c0015d88:	57                   	push   edi
c0015d89:	56                   	push   esi
c0015d8a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015d8e:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015d95:	84 c9                	test   cl,cl
c0015d97:	75 0f                	jne    c0015da8 <LogicalDisk::unassignDriveLetter()+0x20>
c0015d99:	c7 44 24 0c 7a 99 02 c0 	mov    DWORD PTR [esp+0xc],0xc002997a
c0015da1:	5e                   	pop    esi
c0015da2:	5f                   	pop    edi
c0015da3:	e9 c3 3a 00 00       	jmp    c001986b <Krnl::panic(char const*)>
c0015da8:	83 e9 41             	sub    ecx,0x41
c0015dab:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015db2:	b8 01 00 00 00       	mov    eax,0x1
c0015db7:	c7 04 8d 20 cf 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd30e0],0x0
c0015dc2:	d3 e0                	shl    eax,cl
c0015dc4:	89 c7                	mov    edi,eax
c0015dc6:	f7 d0                	not    eax
c0015dc8:	c1 ff 1f             	sar    edi,0x1f
c0015dcb:	21 05 00 cf 02 c0    	and    DWORD PTR ds:0xc002cf00,eax
c0015dd1:	89 fe                	mov    esi,edi
c0015dd3:	f7 d6                	not    esi
c0015dd5:	21 35 04 cf 02 c0    	and    DWORD PTR ds:0xc002cf04,esi
c0015ddb:	5e                   	pop    esi
c0015ddc:	5f                   	pop    edi
c0015ddd:	c3                   	ret    

c0015dde <LogicalDisk::read(unsigned long long, int, void*)>:
c0015dde:	57                   	push   edi
c0015ddf:	56                   	push   esi
c0015de0:	53                   	push   ebx
c0015de1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015de5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015de9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015ded:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015df1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015df7:	77 41                	ja     c0015e3a <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0015df9:	99                   	cdq    
c0015dfa:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015e00:	01 c8                	add    eax,ecx
c0015e02:	11 da                	adc    edx,ebx
c0015e04:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015e0a:	19 d7                	sbb    edi,edx
c0015e0c:	72 33                	jb     c0015e41 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0015e0e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015e14:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015e1a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015e1e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015e22:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015e28:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015e2e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015e32:	5b                   	pop    ebx
c0015e33:	5e                   	pop    esi
c0015e34:	5f                   	pop    edi
c0015e35:	e9 f8 09 00 00       	jmp    c0016832 <VCache::read(unsigned long long, int, void*)>
c0015e3a:	b8 05 00 00 00       	mov    eax,0x5
c0015e3f:	eb 05                	jmp    c0015e46 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0015e41:	b8 07 00 00 00       	mov    eax,0x7
c0015e46:	5b                   	pop    ebx
c0015e47:	5e                   	pop    esi
c0015e48:	5f                   	pop    edi
c0015e49:	c3                   	ret    

c0015e4a <LogicalDisk::write(unsigned long long, int, void*)>:
c0015e4a:	57                   	push   edi
c0015e4b:	56                   	push   esi
c0015e4c:	53                   	push   ebx
c0015e4d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015e51:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015e55:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015e59:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015e5d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015e63:	77 41                	ja     c0015ea6 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0015e65:	99                   	cdq    
c0015e66:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015e6c:	01 c8                	add    eax,ecx
c0015e6e:	11 da                	adc    edx,ebx
c0015e70:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015e76:	19 d7                	sbb    edi,edx
c0015e78:	72 33                	jb     c0015ead <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0015e7a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015e80:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015e86:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015e8a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015e8e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015e94:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015e9a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015e9e:	5b                   	pop    ebx
c0015e9f:	5e                   	pop    esi
c0015ea0:	5f                   	pop    edi
c0015ea1:	e9 a8 08 00 00       	jmp    c001674e <VCache::write(unsigned long long, int, void*)>
c0015ea6:	b8 05 00 00 00       	mov    eax,0x5
c0015eab:	eb 05                	jmp    c0015eb2 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0015ead:	b8 07 00 00 00       	mov    eax,0x7
c0015eb2:	5b                   	pop    ebx
c0015eb3:	5e                   	pop    esi
c0015eb4:	5f                   	pop    edi
c0015eb5:	c3                   	ret    

c0015eb6 <Mouse::Mouse(char const*)>:
c0015eb6:	83 ec 0c             	sub    esp,0xc
c0015eb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ebd:	83 ec 08             	sub    esp,0x8
c0015ec0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ec4:	50                   	push   eax
c0015ec5:	e8 66 de ff ff       	call   c0013d30 <Device::Device(char const*)>
c0015eca:	83 c4 10             	add    esp,0x10
c0015ecd:	ba d0 99 02 c0       	mov    edx,0xc00299d0
c0015ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ed6:	89 10                	mov    DWORD PTR [eax],edx
c0015ed8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015edc:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0015ee6:	90                   	nop
c0015ee7:	83 c4 0c             	add    esp,0xc
c0015eea:	c3                   	ret    
c0015eeb:	90                   	nop

c0015eec <Mouse::~Mouse()>:
c0015eec:	83 ec 0c             	sub    esp,0xc
c0015eef:	ba d0 99 02 c0       	mov    edx,0xc00299d0
c0015ef4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ef8:	89 10                	mov    DWORD PTR [eax],edx
c0015efa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015efe:	83 ec 0c             	sub    esp,0xc
c0015f01:	50                   	push   eax
c0015f02:	e8 0b db ff ff       	call   c0013a12 <Device::~Device()>
c0015f07:	83 c4 10             	add    esp,0x10
c0015f0a:	90                   	nop
c0015f0b:	83 c4 0c             	add    esp,0xc
c0015f0e:	c3                   	ret    
c0015f0f:	90                   	nop

c0015f10 <Mouse::~Mouse()>:
c0015f10:	83 ec 0c             	sub    esp,0xc
c0015f13:	83 ec 0c             	sub    esp,0xc
c0015f16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f1a:	e8 cd ff ff ff       	call   c0015eec <Mouse::~Mouse()>
c0015f1f:	83 c4 10             	add    esp,0x10
c0015f22:	83 ec 08             	sub    esp,0x8
c0015f25:	68 58 01 00 00       	push   0x158
c0015f2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f2e:	e8 3e c7 ff ff       	call   c0012671 <operator delete(void*, unsigned long)>
c0015f33:	83 c4 10             	add    esp,0x10
c0015f36:	83 c4 0c             	add    esp,0xc
c0015f39:	c3                   	ret    

c0015f3a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015f3a:	55                   	push   ebp
c0015f3b:	57                   	push   edi
c0015f3c:	56                   	push   esi
c0015f3d:	53                   	push   ebx
c0015f3e:	81 ec 28 01 00 00    	sub    esp,0x128
c0015f44:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015f4b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0015f52:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0015f59:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0015f60:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015f64:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0015f68:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015f6f:	e8 b8 de ff ff       	call   c0013e2c <Device::getName()>
c0015f74:	5a                   	pop    edx
c0015f75:	59                   	pop    ecx
c0015f76:	50                   	push   eax
c0015f77:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0015f7b:	55                   	push   ebp
c0015f7c:	e8 a9 a7 fe ff       	call   c000072a <strcpy>
c0015f81:	5b                   	pop    ebx
c0015f82:	58                   	pop    eax
c0015f83:	68 f4 99 02 c0       	push   0xc00299f4
c0015f88:	55                   	push   ebp
c0015f89:	e8 53 a8 fe ff       	call   c00007e1 <strcat>
c0015f8e:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0015f95:	e8 3a 95 ff ff       	call   c000f4d4 <malloc>
c0015f9a:	83 c4 0c             	add    esp,0xc
c0015f9d:	89 c3                	mov    ebx,eax
c0015f9f:	57                   	push   edi
c0015fa0:	56                   	push   esi
c0015fa1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015fa5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015fa9:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0015fb0:	55                   	push   ebp
c0015fb1:	50                   	push   eax
c0015fb2:	e8 e3 fb ff ff       	call   c0015b9a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0015fb7:	83 c4 14             	add    esp,0x14
c0015fba:	53                   	push   ebx
c0015fbb:	e8 90 fc ff ff       	call   c0015c50 <LogicalDisk::assignDriveLetter()>
c0015fc0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015fc3:	e8 3e fd ff ff       	call   c0015d06 <LogicalDisk::mount()>
c0015fc8:	58                   	pop    eax
c0015fc9:	5a                   	pop    edx
c0015fca:	53                   	push   ebx
c0015fcb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015fd2:	e8 69 db ff ff       	call   c0013b40 <Device::addChild(Device*)>
c0015fd7:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015fdd:	5b                   	pop    ebx
c0015fde:	5e                   	pop    esi
c0015fdf:	5f                   	pop    edi
c0015fe0:	5d                   	pop    ebp
c0015fe1:	c3                   	ret    

c0015fe2 <createPartitionsForDisk(PhysicalDisk*)>:
c0015fe2:	55                   	push   ebp
c0015fe3:	57                   	push   edi
c0015fe4:	56                   	push   esi
c0015fe5:	53                   	push   ebx
c0015fe6:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0015fec:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0015ff3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015ff9:	3d 00 02 00 00       	cmp    eax,0x200
c0015ffe:	74 27                	je     c0016027 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016000:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016006:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001600c:	83 ec 10             	sub    esp,0x10
c001600f:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016013:	99                   	cdq    
c0016014:	c1 e6 0a             	shl    esi,0xa
c0016017:	52                   	push   edx
c0016018:	89 fd                	mov    ebp,edi
c001601a:	50                   	push   eax
c001601b:	55                   	push   ebp
c001601c:	56                   	push   esi
c001601d:	e8 5a f3 00 00       	call   c002537c <__udivdi3>
c0016022:	e9 b1 00 00 00       	jmp    c00160d8 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016027:	83 ec 0c             	sub    esp,0xc
c001602a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001602c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016030:	56                   	push   esi
c0016031:	6a 01                	push   0x1
c0016033:	6a 00                	push   0x0
c0016035:	6a 00                	push   0x0
c0016037:	53                   	push   ebx
c0016038:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001603b:	83 c4 20             	add    esp,0x20
c001603e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016046:	75 0a                	jne    c0016052 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016048:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016050:	74 2c                	je     c001607e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016052:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016058:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001605e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016064:	83 ec 10             	sub    esp,0x10
c0016067:	0f a4 c2 0a          	shld   edx,eax,0xa
c001606b:	89 f7                	mov    edi,esi
c001606d:	c1 e0 0a             	shl    eax,0xa
c0016070:	c1 ff 1f             	sar    edi,0x1f
c0016073:	57                   	push   edi
c0016074:	56                   	push   esi
c0016075:	52                   	push   edx
c0016076:	50                   	push   eax
c0016077:	e8 00 f3 00 00       	call   c002537c <__udivdi3>
c001607c:	eb 5a                	jmp    c00160d8 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001607e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016085:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c001608c:	83 e1 7f             	and    ecx,0x7f
c001608f:	83 e0 7f             	and    eax,0x7f
c0016092:	01 c1                	add    ecx,eax
c0016094:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001609b:	83 e0 7f             	and    eax,0x7f
c001609e:	01 c1                	add    ecx,eax
c00160a0:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00160a7:	83 e0 7f             	and    eax,0x7f
c00160aa:	00 c1                	add    cl,al
c00160ac:	74 41                	je     c00160ef <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00160ae:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00160b4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00160ba:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00160c0:	83 ec 10             	sub    esp,0x10
c00160c3:	0f a4 c2 0a          	shld   edx,eax,0xa
c00160c7:	89 f7                	mov    edi,esi
c00160c9:	c1 e0 0a             	shl    eax,0xa
c00160cc:	c1 ff 1f             	sar    edi,0x1f
c00160cf:	57                   	push   edi
c00160d0:	56                   	push   esi
c00160d1:	52                   	push   edx
c00160d2:	50                   	push   eax
c00160d3:	e8 a4 f2 00 00       	call   c002537c <__udivdi3>
c00160d8:	83 c4 14             	add    esp,0x14
c00160db:	52                   	push   edx
c00160dc:	50                   	push   eax
c00160dd:	6a 00                	push   0x0
c00160df:	6a 00                	push   0x0
c00160e1:	53                   	push   ebx
c00160e2:	e8 53 fe ff ff       	call   c0015f3a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00160e7:	83 c4 20             	add    esp,0x20
c00160ea:	e9 79 01 00 00       	jmp    c0016268 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c00160ef:	89 f0                	mov    eax,esi
c00160f1:	31 f6                	xor    esi,esi
c00160f3:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c00160fa:	75 02                	jne    c00160fe <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c00160fc:	89 f1                	mov    ecx,esi
c00160fe:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016105:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c001610c:	c1 e2 08             	shl    edx,0x8
c001610f:	c1 e7 10             	shl    edi,0x10
c0016112:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c001611a:	09 fa                	or     edx,edi
c001611c:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016124:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c001612b:	83 c0 10             	add    eax,0x10
c001612e:	09 fa                	or     edx,edi
c0016130:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016137:	c1 e7 18             	shl    edi,0x18
c001613a:	09 fa                	or     edx,edi
c001613c:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016143:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016147:	c1 e7 10             	shl    edi,0x10
c001614a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016151:	c1 e2 08             	shl    edx,0x8
c0016154:	09 fa                	or     edx,edi
c0016156:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c001615d:	09 fa                	or     edx,edi
c001615f:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016166:	c1 e7 18             	shl    edi,0x18
c0016169:	09 fa                	or     edx,edi
c001616b:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c001616f:	46                   	inc    esi
c0016170:	83 fe 04             	cmp    esi,0x4
c0016173:	0f 85 7a ff ff ff    	jne    c00160f3 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016179:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001617d:	83 f0 01             	xor    eax,0x1
c0016180:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016184:	75 57                	jne    c00161dd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016186:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001618a:	83 f0 01             	xor    eax,0x1
c001618d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016191:	75 4a                	jne    c00161dd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016193:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016197:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001619f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00161a7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00161ad:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00161b3:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00161b9:	0f a4 c2 0a          	shld   edx,eax,0xa
c00161bd:	89 f7                	mov    edi,esi
c00161bf:	c1 e0 0a             	shl    eax,0xa
c00161c2:	c1 ff 1f             	sar    edi,0x1f
c00161c5:	57                   	push   edi
c00161c6:	56                   	push   esi
c00161c7:	52                   	push   edx
c00161c8:	50                   	push   eax
c00161c9:	e8 ae f1 00 00       	call   c002537c <__udivdi3>
c00161ce:	83 c4 10             	add    esp,0x10
c00161d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00161d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00161d9:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00161dd:	84 c9                	test   cl,cl
c00161df:	74 53                	je     c0016234 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c00161e1:	0f b6 c9             	movzx  ecx,cl
c00161e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161e8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00161ec:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00161f0:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00161f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00161f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00161fc:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016200:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016204:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016208:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001620c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016210:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016214:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016218:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c001621c:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016220:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016224:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016228:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001622c:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016230:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016234:	31 ed                	xor    ebp,ebp
c0016236:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001623a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001623e:	89 f8                	mov    eax,edi
c0016240:	09 f0                	or     eax,esi
c0016242:	74 1e                	je     c0016262 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016244:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016248:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001624c:	89 d1                	mov    ecx,edx
c001624e:	09 c1                	or     ecx,eax
c0016250:	74 10                	je     c0016262 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016252:	83 ec 0c             	sub    esp,0xc
c0016255:	57                   	push   edi
c0016256:	56                   	push   esi
c0016257:	52                   	push   edx
c0016258:	50                   	push   eax
c0016259:	53                   	push   ebx
c001625a:	e8 db fc ff ff       	call   c0015f3a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001625f:	83 c4 20             	add    esp,0x20
c0016262:	45                   	inc    ebp
c0016263:	83 fd 04             	cmp    ebp,0x4
c0016266:	75 ce                	jne    c0016236 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016268:	81 c4 5c 02 00 00    	add    esp,0x25c
c001626e:	5b                   	pop    ebx
c001626f:	5e                   	pop    esi
c0016270:	5f                   	pop    edi
c0016271:	5d                   	pop    ebp
c0016272:	c3                   	ret    
c0016273:	90                   	nop

c0016274 <Serial::Serial(char const*)>:
c0016274:	83 ec 0c             	sub    esp,0xc
c0016277:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001627b:	83 ec 08             	sub    esp,0x8
c001627e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016282:	50                   	push   eax
c0016283:	e8 a8 da ff ff       	call   c0013d30 <Device::Device(char const*)>
c0016288:	83 c4 10             	add    esp,0x10
c001628b:	ba 08 9a 02 c0       	mov    edx,0xc0029a08
c0016290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016294:	89 10                	mov    DWORD PTR [eax],edx
c0016296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001629a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c00162a4:	90                   	nop
c00162a5:	83 c4 0c             	add    esp,0xc
c00162a8:	c3                   	ret    
c00162a9:	90                   	nop

c00162aa <Serial::~Serial()>:
c00162aa:	83 ec 0c             	sub    esp,0xc
c00162ad:	ba 08 9a 02 c0       	mov    edx,0xc0029a08
c00162b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162b6:	89 10                	mov    DWORD PTR [eax],edx
c00162b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162bc:	83 ec 0c             	sub    esp,0xc
c00162bf:	50                   	push   eax
c00162c0:	e8 4d d7 ff ff       	call   c0013a12 <Device::~Device()>
c00162c5:	83 c4 10             	add    esp,0x10
c00162c8:	90                   	nop
c00162c9:	83 c4 0c             	add    esp,0xc
c00162cc:	c3                   	ret    
c00162cd:	90                   	nop

c00162ce <Serial::~Serial()>:
c00162ce:	83 ec 0c             	sub    esp,0xc
c00162d1:	83 ec 0c             	sub    esp,0xc
c00162d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162d8:	e8 cd ff ff ff       	call   c00162aa <Serial::~Serial()>
c00162dd:	83 c4 10             	add    esp,0x10
c00162e0:	83 ec 08             	sub    esp,0x8
c00162e3:	68 58 01 00 00       	push   0x158
c00162e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162ec:	e8 80 c3 ff ff       	call   c0012671 <operator delete(void*, unsigned long)>
c00162f1:	83 c4 10             	add    esp,0x10
c00162f4:	83 c4 0c             	add    esp,0xc
c00162f7:	c3                   	ret    

c00162f8 <Timer::Timer(char const*)>:
c00162f8:	83 ec 0c             	sub    esp,0xc
c00162fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162ff:	83 ec 08             	sub    esp,0x8
c0016302:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016306:	50                   	push   eax
c0016307:	e8 24 da ff ff       	call   c0013d30 <Device::Device(char const*)>
c001630c:	83 c4 10             	add    esp,0x10
c001630f:	ba 4c 9a 02 c0       	mov    edx,0xc0029a4c
c0016314:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016318:	89 10                	mov    DWORD PTR [eax],edx
c001631a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001631e:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016328:	90                   	nop
c0016329:	83 c4 0c             	add    esp,0xc
c001632c:	c3                   	ret    
c001632d:	90                   	nop

c001632e <Timer::~Timer()>:
c001632e:	83 ec 0c             	sub    esp,0xc
c0016331:	ba 4c 9a 02 c0       	mov    edx,0xc0029a4c
c0016336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001633a:	89 10                	mov    DWORD PTR [eax],edx
c001633c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016340:	83 ec 0c             	sub    esp,0xc
c0016343:	50                   	push   eax
c0016344:	e8 c9 d6 ff ff       	call   c0013a12 <Device::~Device()>
c0016349:	83 c4 10             	add    esp,0x10
c001634c:	90                   	nop
c001634d:	83 c4 0c             	add    esp,0xc
c0016350:	c3                   	ret    
c0016351:	90                   	nop

c0016352 <Timer::~Timer()>:
c0016352:	83 ec 0c             	sub    esp,0xc
c0016355:	83 ec 0c             	sub    esp,0xc
c0016358:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001635c:	e8 cd ff ff ff       	call   c001632e <Timer::~Timer()>
c0016361:	83 c4 10             	add    esp,0x10
c0016364:	83 ec 08             	sub    esp,0x8
c0016367:	68 5c 01 00 00       	push   0x15c
c001636c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016370:	e8 fc c2 ff ff       	call   c0012671 <operator delete(void*, unsigned long)>
c0016375:	83 c4 10             	add    esp,0x10
c0016378:	83 c4 0c             	add    esp,0xc
c001637b:	c3                   	ret    

c001637c <Timer::read()>:
c001637c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016380:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016386:	c3                   	ret    

c0016387 <timerHandler(unsigned long long)>:
c0016387:	55                   	push   ebp
c0016388:	57                   	push   edi
c0016389:	56                   	push   esi
c001638a:	53                   	push   ebx
c001638b:	83 ec 0c             	sub    esp,0xc
c001638e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016392:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016396:	01 35 90 cf 02 c0    	add    DWORD PTR ds:0xc002cf90,esi
c001639c:	11 3d 94 cf 02 c0    	adc    DWORD PTR ds:0xc002cf94,edi
c00163a2:	80 3d 2d c9 02 c0 00 	cmp    BYTE PTR ds:0xc002c92d,0x0
c00163a9:	0f 84 07 01 00 00    	je     c00164b6 <timerHandler(unsigned long long)+0x12f>
c00163af:	e8 6d 69 00 00       	call   c001cd21 <lockStuff()>
c00163b4:	83 ec 0c             	sub    esp,0xc
c00163b7:	68 3c de 02 c0       	push   0xc002de3c
c00163bc:	e8 2d 10 01 00       	call   c00273ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00163c1:	c7 04 24 3c de 02 c0 	mov    DWORD PTR [esp],0xc002de3c
c00163c8:	89 c3                	mov    ebx,eax
c00163ca:	e8 27 10 01 00       	call   c00273f6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00163cf:	83 c4 10             	add    esp,0x10
c00163d2:	84 c0                	test   al,al
c00163d4:	74 60                	je     c0016436 <timerHandler(unsigned long long)+0xaf>
c00163d6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00163dc:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c00163df:	85 c0                	test   eax,eax
c00163e1:	0f 85 91 00 00 00    	jne    c0016478 <timerHandler(unsigned long long)+0xf1>
c00163e7:	e9 be 00 00 00       	jmp    c00164aa <timerHandler(unsigned long long)+0x123>
c00163ec:	83 ec 0c             	sub    esp,0xc
c00163ef:	55                   	push   ebp
c00163f0:	e8 1d 6f 00 00       	call   c001d312 <unblockTask(ThreadControlBlock*)>
c00163f5:	83 c4 10             	add    esp,0x10
c00163f8:	39 eb                	cmp    ebx,ebp
c00163fa:	75 12                	jne    c001640e <timerHandler(unsigned long long)+0x87>
c00163fc:	83 ec 0c             	sub    esp,0xc
c00163ff:	68 3c de 02 c0       	push   0xc002de3c
c0016404:	e8 e5 0f 01 00       	call   c00273ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016409:	89 c3                	mov    ebx,eax
c001640b:	83 c4 10             	add    esp,0x10
c001640e:	83 ec 0c             	sub    esp,0xc
c0016411:	68 3c de 02 c0       	push   0xc002de3c
c0016416:	e8 db 0f 01 00       	call   c00273f6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001641b:	83 c4 10             	add    esp,0x10
c001641e:	84 c0                	test   al,al
c0016420:	75 b4                	jne    c00163d6 <timerHandler(unsigned long long)+0x4f>
c0016422:	83 ec 0c             	sub    esp,0xc
c0016425:	68 3c de 02 c0       	push   0xc002de3c
c001642a:	e8 bf 0f 01 00       	call   c00273ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001642f:	83 c4 10             	add    esp,0x10
c0016432:	39 d8                	cmp    eax,ebx
c0016434:	74 a0                	je     c00163d6 <timerHandler(unsigned long long)+0x4f>
c0016436:	83 ec 0c             	sub    esp,0xc
c0016439:	68 3c de 02 c0       	push   0xc002de3c
c001643e:	e8 ab 0f 01 00       	call   c00273ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016443:	c7 04 24 3c de 02 c0 	mov    DWORD PTR [esp],0xc002de3c
c001644a:	89 c5                	mov    ebp,eax
c001644c:	e8 c1 0f 01 00       	call   c0027412 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016451:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016454:	83 c4 10             	add    esp,0x10
c0016457:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c001645a:	39 15 90 cf 02 c0    	cmp    DWORD PTR ds:0xc002cf90,edx
c0016460:	a1 94 cf 02 c0       	mov    eax,ds:0xc002cf94
c0016465:	19 c8                	sbb    eax,ecx
c0016467:	73 83                	jae    c00163ec <timerHandler(unsigned long long)+0x65>
c0016469:	50                   	push   eax
c001646a:	50                   	push   eax
c001646b:	55                   	push   ebp
c001646c:	68 3c de 02 c0       	push   0xc002de3c
c0016471:	e8 4a 10 01 00       	call   c00274c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016476:	eb 93                	jmp    c001640b <timerHandler(unsigned long long)+0x84>
c0016478:	80 3d 2c c9 02 c0 00 	cmp    BYTE PTR ds:0xc002c92c,0x0
c001647f:	74 29                	je     c00164aa <timerHandler(unsigned long long)+0x123>
c0016481:	39 c6                	cmp    esi,eax
c0016483:	bb 00 00 00 00       	mov    ebx,0x0
c0016488:	19 df                	sbb    edi,ebx
c001648a:	72 19                	jb     c00164a5 <timerHandler(unsigned long long)+0x11e>
c001648c:	e8 69 68 00 00       	call   c001ccfa <lockScheduler()>
c0016491:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016496:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016499:	e8 98 6b 00 00       	call   c001d036 <schedule()>
c001649e:	e8 59 68 00 00       	call   c001ccfc <unlockScheduler()>
c00164a3:	eb 05                	jmp    c00164aa <timerHandler(unsigned long long)+0x123>
c00164a5:	29 f0                	sub    eax,esi
c00164a7:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c00164aa:	83 c4 0c             	add    esp,0xc
c00164ad:	5b                   	pop    ebx
c00164ae:	5e                   	pop    esi
c00164af:	5f                   	pop    edi
c00164b0:	5d                   	pop    ebp
c00164b1:	e9 05 6c 00 00       	jmp    c001d0bb <unlockStuff()>
c00164b6:	83 c4 0c             	add    esp,0xc
c00164b9:	5b                   	pop    ebx
c00164ba:	5e                   	pop    esi
c00164bb:	5f                   	pop    edi
c00164bc:	5d                   	pop    ebp
c00164bd:	c3                   	ret    

c00164be <setupTimer(int)>:
c00164be:	57                   	push   edi
c00164bf:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c00164c4:	56                   	push   esi
c00164c5:	53                   	push   ebx
c00164c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00164ca:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00164d0:	83 ec 0c             	sub    esp,0xc
c00164d3:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00164d9:	e8 4e d9 ff ff       	call   c0013e2c <Device::getName()>
c00164de:	83 c4 10             	add    esp,0x10
c00164e1:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00164e4:	0f 85 8d 00 00 00    	jne    c0016577 <setupTimer(int)+0xb9>
c00164ea:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c00164ef:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00164f6:	74 7f                	je     c0016577 <setupTimer(int)+0xb9>
c00164f8:	83 ec 0c             	sub    esp,0xc
c00164fb:	68 5c 01 00 00       	push   0x15c
c0016500:	e8 cf 8f ff ff       	call   c000f4d4 <malloc>
c0016505:	89 04 24             	mov    DWORD PTR [esp],eax
c0016508:	89 c3                	mov    ebx,eax
c001650a:	e8 51 ea 00 00       	call   c0024f60 <PIT::PIT()>
c001650f:	59                   	pop    ecx
c0016510:	5f                   	pop    edi
c0016511:	53                   	push   ebx
c0016512:	ff 35 28 c9 02 c0    	push   DWORD PTR ds:0xc002c928
c0016518:	e8 23 d6 ff ff       	call   c0013b40 <Device::addChild(Device*)>
c001651d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001651f:	6a 00                	push   0x0
c0016521:	6a 00                	push   0x0
c0016523:	56                   	push   esi
c0016524:	53                   	push   ebx
c0016525:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016528:	83 c4 14             	add    esp,0x14
c001652b:	68 60 01 00 00       	push   0x160
c0016530:	e8 9f 8f ff ff       	call   c000f4d4 <malloc>
c0016535:	89 04 24             	mov    DWORD PTR [esp],eax
c0016538:	89 c7                	mov    edi,eax
c001653a:	e8 d1 e8 00 00       	call   c0024e10 <APICTimer::APICTimer()>
c001653f:	6a 00                	push   0x0
c0016541:	6a 00                	push   0x0
c0016543:	56                   	push   esi
c0016544:	57                   	push   edi
c0016545:	e8 c8 e7 00 00       	call   c0024d12 <APICTimer::open(int, int, void*)>
c001654a:	83 c4 20             	add    esp,0x20
c001654d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001654f:	6a 00                	push   0x0
c0016551:	6a 00                	push   0x0
c0016553:	6a 00                	push   0x0
c0016555:	53                   	push   ebx
c0016556:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016559:	58                   	pop    eax
c001655a:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c001655f:	5a                   	pop    edx
c0016560:	57                   	push   edi
c0016561:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016567:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001656d:	e8 ce d5 ff ff       	call   c0013b40 <Device::addChild(Device*)>
c0016572:	83 c4 10             	add    esp,0x10
c0016575:	eb 33                	jmp    c00165aa <setupTimer(int)+0xec>
c0016577:	83 ec 0c             	sub    esp,0xc
c001657a:	68 5c 01 00 00       	push   0x15c
c001657f:	e8 50 8f ff ff       	call   c000f4d4 <malloc>
c0016584:	89 04 24             	mov    DWORD PTR [esp],eax
c0016587:	89 c3                	mov    ebx,eax
c0016589:	e8 d2 e9 00 00       	call   c0024f60 <PIT::PIT()>
c001658e:	58                   	pop    eax
c001658f:	5a                   	pop    edx
c0016590:	53                   	push   ebx
c0016591:	ff 35 28 c9 02 c0    	push   DWORD PTR ds:0xc002c928
c0016597:	e8 a4 d5 ff ff       	call   c0013b40 <Device::addChild(Device*)>
c001659c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001659e:	6a 00                	push   0x0
c00165a0:	6a 00                	push   0x0
c00165a2:	56                   	push   esi
c00165a3:	53                   	push   ebx
c00165a4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00165a7:	83 c4 20             	add    esp,0x20
c00165aa:	89 d8                	mov    eax,ebx
c00165ac:	5b                   	pop    ebx
c00165ad:	5e                   	pop    esi
c00165ae:	5f                   	pop    edi
c00165af:	c3                   	ret    

c00165b0 <VCache::VCache(PhysicalDisk*)>:
c00165b0:	53                   	push   ebx
c00165b1:	83 ec 18             	sub    esp,0x18
c00165b4:	ba 7c 9a 02 c0       	mov    edx,0xc0029a7c
c00165b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165bd:	89 10                	mov    DWORD PTR [eax],edx
c00165bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165c3:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00165ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165ce:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c00165d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165d9:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00165e0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00165e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165eb:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00165f2:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00165f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165fd:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016604:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016608:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001660c:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016614:	83 ec 0c             	sub    esp,0xc
c0016617:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001661b:	e8 b4 8e ff ff       	call   c000f4d4 <malloc>
c0016620:	83 c4 10             	add    esp,0x10
c0016623:	89 c3                	mov    ebx,eax
c0016625:	83 ec 0c             	sub    esp,0xc
c0016628:	53                   	push   ebx
c0016629:	e8 ec 67 00 00       	call   c001ce1a <Mutex::Mutex()>
c001662e:	83 c4 10             	add    esp,0x10
c0016631:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016635:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016638:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001663c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016640:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016643:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016647:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001664e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016652:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016658:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001665c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001665f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016663:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016669:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001666f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016673:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016676:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016679:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001667d:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016681:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016685:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001668b:	c1 e0 06             	shl    eax,0x6
c001668e:	83 ec 0c             	sub    esp,0xc
c0016691:	50                   	push   eax
c0016692:	e8 3d 8e ff ff       	call   c000f4d4 <malloc>
c0016697:	83 c4 10             	add    esp,0x10
c001669a:	89 c2                	mov    edx,eax
c001669c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166a0:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00166a3:	90                   	nop
c00166a4:	83 c4 18             	add    esp,0x18
c00166a7:	5b                   	pop    ebx
c00166a8:	c3                   	ret    
c00166a9:	90                   	nop

c00166aa <VCache::writeWriteBuffer()>:
c00166aa:	53                   	push   ebx
c00166ab:	83 ec 14             	sub    esp,0x14
c00166ae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00166b2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00166b5:	8b 10                	mov    edx,DWORD PTR [eax]
c00166b7:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00166ba:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00166bd:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00166c0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00166c3:	50                   	push   eax
c00166c4:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00166c7:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00166ce:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00166d5:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00166d9:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00166e0:	83 c4 28             	add    esp,0x28
c00166e3:	5b                   	pop    ebx
c00166e4:	c3                   	ret    
c00166e5:	90                   	nop

c00166e6 <VCache::~VCache()>:
c00166e6:	83 ec 0c             	sub    esp,0xc
c00166e9:	ba 7c 9a 02 c0       	mov    edx,0xc0029a7c
c00166ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166f2:	89 10                	mov    DWORD PTR [eax],edx
c00166f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166f8:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00166fb:	84 c0                	test   al,al
c00166fd:	74 0f                	je     c001670e <VCache::~VCache()+0x28>
c00166ff:	83 ec 0c             	sub    esp,0xc
c0016702:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016706:	e8 9f ff ff ff       	call   c00166aa <VCache::writeWriteBuffer()>
c001670b:	83 c4 10             	add    esp,0x10
c001670e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016712:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016715:	83 ec 0c             	sub    esp,0xc
c0016718:	50                   	push   eax
c0016719:	e8 c6 8d ff ff       	call   c000f4e4 <free>
c001671e:	83 c4 10             	add    esp,0x10
c0016721:	90                   	nop
c0016722:	83 c4 0c             	add    esp,0xc
c0016725:	c3                   	ret    

c0016726 <VCache::~VCache()>:
c0016726:	83 ec 0c             	sub    esp,0xc
c0016729:	83 ec 0c             	sub    esp,0xc
c001672c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016730:	e8 b1 ff ff ff       	call   c00166e6 <VCache::~VCache()>
c0016735:	83 c4 10             	add    esp,0x10
c0016738:	83 ec 08             	sub    esp,0x8
c001673b:	6a 30                	push   0x30
c001673d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016741:	e8 2b bf ff ff       	call   c0012671 <operator delete(void*, unsigned long)>
c0016746:	83 c4 10             	add    esp,0x10
c0016749:	83 c4 0c             	add    esp,0xc
c001674c:	c3                   	ret    
c001674d:	90                   	nop

c001674e <VCache::write(unsigned long long, int, void*)>:
c001674e:	55                   	push   ebp
c001674f:	57                   	push   edi
c0016750:	56                   	push   esi
c0016751:	53                   	push   ebx
c0016752:	83 ec 28             	sub    esp,0x28
c0016755:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016759:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001675d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016761:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016765:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016768:	e8 0f 6b 00 00       	call   c001d27c <Semaphore::acquire()>
c001676d:	83 c4 10             	add    esp,0x10
c0016770:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016774:	74 66                	je     c00167dc <VCache::write(unsigned long long, int, void*)+0x8e>
c0016776:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016779:	99                   	cdq    
c001677a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001677e:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016781:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016784:	89 c1                	mov    ecx,eax
c0016786:	89 d0                	mov    eax,edx
c0016788:	31 f1                	xor    ecx,esi
c001678a:	31 f8                	xor    eax,edi
c001678c:	89 ca                	mov    edx,ecx
c001678e:	09 c2                	or     edx,eax
c0016790:	75 3e                	jne    c00167d0 <VCache::write(unsigned long long, int, void*)+0x82>
c0016792:	83 fd 01             	cmp    ebp,0x1
c0016795:	75 39                	jne    c00167d0 <VCache::write(unsigned long long, int, void*)+0x82>
c0016797:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001679a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00167a0:	51                   	push   ecx
c00167a1:	50                   	push   eax
c00167a2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00167a6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00167aa:	0f af c8             	imul   ecx,eax
c00167ad:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00167b0:	51                   	push   ecx
c00167b1:	e8 9f 9e fe ff       	call   c0000655 <memcpy>
c00167b6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00167b9:	83 c4 10             	add    esp,0x10
c00167bc:	40                   	inc    eax
c00167bd:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00167c0:	83 f8 40             	cmp    eax,0x40
c00167c3:	75 57                	jne    c001681c <VCache::write(unsigned long long, int, void*)+0xce>
c00167c5:	83 ec 0c             	sub    esp,0xc
c00167c8:	53                   	push   ebx
c00167c9:	e8 dc fe ff ff       	call   c00166aa <VCache::writeWriteBuffer()>
c00167ce:	eb 34                	jmp    c0016804 <VCache::write(unsigned long long, int, void*)+0xb6>
c00167d0:	83 ec 0c             	sub    esp,0xc
c00167d3:	53                   	push   ebx
c00167d4:	e8 d1 fe ff ff       	call   c00166aa <VCache::writeWriteBuffer()>
c00167d9:	83 c4 10             	add    esp,0x10
c00167dc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00167df:	83 fd 3f             	cmp    ebp,0x3f
c00167e2:	7f 25                	jg     c0016809 <VCache::write(unsigned long long, int, void*)+0xbb>
c00167e4:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00167e7:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00167ea:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c00167ed:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00167f1:	52                   	push   edx
c00167f2:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00167f8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00167fc:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00167ff:	e8 51 9e fe ff       	call   c0000655 <memcpy>
c0016804:	83 c4 10             	add    esp,0x10
c0016807:	eb 13                	jmp    c001681c <VCache::write(unsigned long long, int, void*)+0xce>
c0016809:	83 ec 0c             	sub    esp,0xc
c001680c:	8b 10                	mov    edx,DWORD PTR [eax]
c001680e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016812:	55                   	push   ebp
c0016813:	57                   	push   edi
c0016814:	56                   	push   esi
c0016815:	50                   	push   eax
c0016816:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016819:	83 c4 20             	add    esp,0x20
c001681c:	83 ec 0c             	sub    esp,0xc
c001681f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016822:	e8 03 70 00 00       	call   c001d82a <Semaphore::release()>
c0016827:	83 c4 2c             	add    esp,0x2c
c001682a:	31 c0                	xor    eax,eax
c001682c:	5b                   	pop    ebx
c001682d:	5e                   	pop    esi
c001682e:	5f                   	pop    edi
c001682f:	5d                   	pop    ebp
c0016830:	c3                   	ret    
c0016831:	90                   	nop

c0016832 <VCache::read(unsigned long long, int, void*)>:
c0016832:	57                   	push   edi
c0016833:	56                   	push   esi
c0016834:	53                   	push   ebx
c0016835:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016839:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001683d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0016841:	83 ec 0c             	sub    esp,0xc
c0016844:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016847:	e8 30 6a 00 00       	call   c001d27c <Semaphore::acquire()>
c001684c:	83 c4 10             	add    esp,0x10
c001684f:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016853:	74 0c                	je     c0016861 <VCache::read(unsigned long long, int, void*)+0x2f>
c0016855:	83 ec 0c             	sub    esp,0xc
c0016858:	53                   	push   ebx
c0016859:	e8 4c fe ff ff       	call   c00166aa <VCache::writeWriteBuffer()>
c001685e:	83 c4 10             	add    esp,0x10
c0016861:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016864:	83 ec 0c             	sub    esp,0xc
c0016867:	8b 10                	mov    edx,DWORD PTR [eax]
c0016869:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001686d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016871:	57                   	push   edi
c0016872:	56                   	push   esi
c0016873:	50                   	push   eax
c0016874:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016877:	83 c4 14             	add    esp,0x14
c001687a:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001687d:	e8 a8 6f 00 00       	call   c001d82a <Semaphore::release()>
c0016882:	83 c4 10             	add    esp,0x10
c0016885:	31 c0                	xor    eax,eax
c0016887:	5b                   	pop    ebx
c0016888:	5e                   	pop    esi
c0016889:	5f                   	pop    edi
c001688a:	c3                   	ret    
c001688b:	90                   	nop

c001688c <Video::putrect(int, int, int, int, unsigned int)>:
c001688c:	55                   	push   ebp
c001688d:	57                   	push   edi
c001688e:	56                   	push   esi
c001688f:	53                   	push   ebx
c0016890:	83 ec 1c             	sub    esp,0x1c
c0016893:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016897:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001689b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001689f:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00168a3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00168a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00168ab:	01 df                	add    edi,ebx
c00168ad:	39 fb                	cmp    ebx,edi
c00168af:	7d 1f                	jge    c00168d0 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c00168b1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00168b5:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00168b9:	7d 12                	jge    c00168cd <Video::putrect(int, int, int, int, unsigned int)+0x41>
c00168bb:	8b 16                	mov    edx,DWORD PTR [esi]
c00168bd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00168c1:	53                   	push   ebx
c00168c2:	55                   	push   ebp
c00168c3:	45                   	inc    ebp
c00168c4:	56                   	push   esi
c00168c5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00168c8:	83 c4 10             	add    esp,0x10
c00168cb:	eb e8                	jmp    c00168b5 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c00168cd:	43                   	inc    ebx
c00168ce:	eb dd                	jmp    c00168ad <Video::putrect(int, int, int, int, unsigned int)+0x21>
c00168d0:	83 c4 1c             	add    esp,0x1c
c00168d3:	5b                   	pop    ebx
c00168d4:	5e                   	pop    esi
c00168d5:	5f                   	pop    edi
c00168d6:	5d                   	pop    ebp
c00168d7:	c3                   	ret    

c00168d8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c00168d8:	55                   	push   ebp
c00168d9:	57                   	push   edi
c00168da:	31 ff                	xor    edi,edi
c00168dc:	56                   	push   esi
c00168dd:	53                   	push   ebx
c00168de:	83 ec 1c             	sub    esp,0x1c
c00168e1:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00168e5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00168e9:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c00168f0:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c00168f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00168f9:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00168fd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016901:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016904:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016908:	01 f9                	add    ecx,edi
c001690a:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c001690e:	7d 2f                	jge    c001693f <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016910:	31 f6                	xor    esi,esi
c0016912:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016916:	01 f2                	add    edx,esi
c0016918:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001691c:	7d 1a                	jge    c0016938 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c001691e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016921:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016924:	46                   	inc    esi
c0016925:	51                   	push   ecx
c0016926:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001692a:	52                   	push   edx
c001692b:	55                   	push   ebp
c001692c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001692f:	83 c4 10             	add    esp,0x10
c0016932:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016936:	eb da                	jmp    c0016912 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016938:	47                   	inc    edi
c0016939:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001693d:	eb c5                	jmp    c0016904 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c001693f:	83 c4 1c             	add    esp,0x1c
c0016942:	5b                   	pop    ebx
c0016943:	5e                   	pop    esi
c0016944:	5f                   	pop    edi
c0016945:	5d                   	pop    ebp
c0016946:	c3                   	ret    
c0016947:	90                   	nop

c0016948 <Video::blit(unsigned int*, int, int, int, int)>:
c0016948:	55                   	push   ebp
c0016949:	57                   	push   edi
c001694a:	56                   	push   esi
c001694b:	53                   	push   ebx
c001694c:	83 ec 1c             	sub    esp,0x1c
c001694f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016953:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016957:	85 c0                	test   eax,eax
c0016959:	79 02                	jns    c001695d <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001695b:	31 c0                	xor    eax,eax
c001695d:	c1 e0 02             	shl    eax,0x2
c0016960:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016964:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016968:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001696c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016970:	39 d8                	cmp    eax,ebx
c0016972:	7e 49                	jle    c00169bd <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016974:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001697a:	7c 41                	jl     c00169bd <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001697c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016980:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016984:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016988:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c001698c:	39 f9                	cmp    ecx,edi
c001698e:	7e 22                	jle    c00169b2 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016990:	83 c5 04             	add    ebp,0x4
c0016993:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016999:	7c 14                	jl     c00169af <Video::blit(unsigned int*, int, int, int, int)+0x67>
c001699b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001699d:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00169a0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00169a4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00169a8:	56                   	push   esi
c00169a9:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00169ac:	83 c4 10             	add    esp,0x10
c00169af:	47                   	inc    edi
c00169b0:	eb d2                	jmp    c0016984 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00169b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00169b6:	43                   	inc    ebx
c00169b7:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00169bb:	eb ab                	jmp    c0016968 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00169bd:	83 c4 1c             	add    esp,0x1c
c00169c0:	5b                   	pop    ebx
c00169c1:	5e                   	pop    esi
c00169c2:	5f                   	pop    edi
c00169c3:	5d                   	pop    ebp
c00169c4:	c3                   	ret    
c00169c5:	90                   	nop

c00169c6 <Video::clearScreen(unsigned int)>:
c00169c6:	57                   	push   edi
c00169c7:	56                   	push   esi
c00169c8:	53                   	push   ebx
c00169c9:	31 db                	xor    ebx,ebx
c00169cb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00169cf:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00169d5:	7e 1f                	jle    c00169f6 <Video::clearScreen(unsigned int)+0x30>
c00169d7:	31 ff                	xor    edi,edi
c00169d9:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00169df:	7e 12                	jle    c00169f3 <Video::clearScreen(unsigned int)+0x2d>
c00169e1:	8b 06                	mov    eax,DWORD PTR [esi]
c00169e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00169e7:	53                   	push   ebx
c00169e8:	57                   	push   edi
c00169e9:	47                   	inc    edi
c00169ea:	56                   	push   esi
c00169eb:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00169ee:	83 c4 10             	add    esp,0x10
c00169f1:	eb e6                	jmp    c00169d9 <Video::clearScreen(unsigned int)+0x13>
c00169f3:	43                   	inc    ebx
c00169f4:	eb d9                	jmp    c00169cf <Video::clearScreen(unsigned int)+0x9>
c00169f6:	5b                   	pop    ebx
c00169f7:	5e                   	pop    esi
c00169f8:	5f                   	pop    edi
c00169f9:	c3                   	ret    

c00169fa <Video::putpixel(int, int, unsigned int)>:
c00169fa:	c7 44 24 04 84 9a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0029a84
c0016a02:	e9 64 2e 00 00       	jmp    c001986b <Krnl::panic(char const*)>
c0016a07:	90                   	nop

c0016a08 <Video::Video(char const*)>:
c0016a08:	83 ec 0c             	sub    esp,0xc
c0016a0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a0f:	83 ec 08             	sub    esp,0x8
c0016a12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a16:	50                   	push   eax
c0016a17:	e8 14 d3 ff ff       	call   c0013d30 <Device::Device(char const*)>
c0016a1c:	83 c4 10             	add    esp,0x10
c0016a1f:	ba 08 9b 02 c0       	mov    edx,0xc0029b08
c0016a24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a28:	89 10                	mov    DWORD PTR [eax],edx
c0016a2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a2e:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016a38:	90                   	nop
c0016a39:	83 c4 0c             	add    esp,0xc
c0016a3c:	c3                   	ret    
c0016a3d:	90                   	nop

c0016a3e <Video::~Video()>:
c0016a3e:	83 ec 0c             	sub    esp,0xc
c0016a41:	ba 08 9b 02 c0       	mov    edx,0xc0029b08
c0016a46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a4a:	89 10                	mov    DWORD PTR [eax],edx
c0016a4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a50:	83 ec 0c             	sub    esp,0xc
c0016a53:	50                   	push   eax
c0016a54:	e8 b9 cf ff ff       	call   c0013a12 <Device::~Device()>
c0016a59:	83 c4 10             	add    esp,0x10
c0016a5c:	90                   	nop
c0016a5d:	83 c4 0c             	add    esp,0xc
c0016a60:	c3                   	ret    
c0016a61:	90                   	nop

c0016a62 <Video::~Video()>:
c0016a62:	83 ec 0c             	sub    esp,0xc
c0016a65:	83 ec 0c             	sub    esp,0xc
c0016a68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a6c:	e8 cd ff ff ff       	call   c0016a3e <Video::~Video()>
c0016a71:	83 c4 10             	add    esp,0x10
c0016a74:	83 ec 08             	sub    esp,0x8
c0016a77:	68 64 01 00 00       	push   0x164
c0016a7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a80:	e8 ec bb ff ff       	call   c0012671 <operator delete(void*, unsigned long)>
c0016a85:	83 c4 10             	add    esp,0x10
c0016a88:	83 c4 0c             	add    esp,0xc
c0016a8b:	c3                   	ret    

c0016a8c <Video::isMonochrome()>:
c0016a8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016a90:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016a96:	c3                   	ret    
c0016a97:	90                   	nop

c0016a98 <Video::getWidth()>:
c0016a98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016a9c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016aa2:	c3                   	ret    
c0016aa3:	90                   	nop

c0016aa4 <Video::getHeight()>:
c0016aa4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016aa8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016aae:	c3                   	ret    
c0016aaf:	90                   	nop

c0016ab0 <Video::drawCursor(int, int, unsigned char*, int)>:
c0016ab0:	55                   	push   ebp
c0016ab1:	57                   	push   edi
c0016ab2:	56                   	push   esi
c0016ab3:	53                   	push   ebx
c0016ab4:	83 ec 2c             	sub    esp,0x2c
c0016ab7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016abb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016abf:	83 f8 01             	cmp    eax,0x1
c0016ac2:	19 c9                	sbb    ecx,ecx
c0016ac4:	31 db                	xor    ebx,ebx
c0016ac6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016aca:	89 cd                	mov    ebp,ecx
c0016acc:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016ad4:	f7 d5                	not    ebp
c0016ad6:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016adc:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016ae0:	01 d8                	add    eax,ebx
c0016ae2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ae6:	56                   	push   esi
c0016ae7:	e8 b8 ff ff ff       	call   c0016aa4 <Video::getHeight()>
c0016aec:	59                   	pop    ecx
c0016aed:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016af1:	7e 70                	jle    c0016b63 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016af3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016af7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016afb:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016afe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016b02:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016b06:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016b0d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016b11:	89 f8                	mov    eax,edi
c0016b13:	83 c0 20             	add    eax,0x20
c0016b16:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016b1a:	56                   	push   esi
c0016b1b:	e8 78 ff ff ff       	call   c0016a98 <Video::getWidth()>
c0016b20:	5a                   	pop    edx
c0016b21:	39 c7                	cmp    edi,eax
c0016b23:	7d 34                	jge    c0016b59 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016b25:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016b2a:	74 05                	je     c0016b31 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016b2c:	8b 06                	mov    eax,DWORD PTR [esi]
c0016b2e:	55                   	push   ebp
c0016b2f:	eb 0d                	jmp    c0016b3e <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016b31:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016b36:	74 12                	je     c0016b4a <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016b38:	8b 06                	mov    eax,DWORD PTR [esi]
c0016b3a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016b3e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016b42:	57                   	push   edi
c0016b43:	56                   	push   esi
c0016b44:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016b47:	83 c4 10             	add    esp,0x10
c0016b4a:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016b4e:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016b52:	47                   	inc    edi
c0016b53:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016b57:	75 c1                	jne    c0016b1a <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016b59:	43                   	inc    ebx
c0016b5a:	83 fb 20             	cmp    ebx,0x20
c0016b5d:	0f 85 79 ff ff ff    	jne    c0016adc <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016b63:	83 c4 2c             	add    esp,0x2c
c0016b66:	5b                   	pop    ebx
c0016b67:	5e                   	pop    esi
c0016b68:	5f                   	pop    edi
c0016b69:	5d                   	pop    ebp
c0016b6a:	c3                   	ret    
c0016b6b:	90                   	nop

c0016b6c <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0016b6c:	55                   	push   ebp
c0016b6d:	57                   	push   edi
c0016b6e:	56                   	push   esi
c0016b6f:	53                   	push   ebx
c0016b70:	83 ec 28             	sub    esp,0x28
c0016b73:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016b77:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0016b7b:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0016b7f:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0016b83:	c1 e7 08             	shl    edi,0x8
c0016b86:	01 c7                	add    edi,eax
c0016b88:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0016b8c:	c1 e0 08             	shl    eax,0x8
c0016b8f:	01 d0                	add    eax,edx
c0016b91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016b99:	0f af c7             	imul   eax,edi
c0016b9c:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0016ba3:	50                   	push   eax
c0016ba4:	e8 2b 89 ff ff       	call   c000f4d4 <malloc>
c0016ba9:	83 c4 10             	add    esp,0x10
c0016bac:	89 c5                	mov    ebp,eax
c0016bae:	85 c0                	test   eax,eax
c0016bb0:	75 15                	jne    c0016bc7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0016bb2:	83 ec 0c             	sub    esp,0xc
c0016bb5:	68 a5 9a 02 c0       	push   0xc0029aa5
c0016bba:	e8 92 bb ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0016bbf:	83 c4 10             	add    esp,0x10
c0016bc2:	e9 1c 01 00 00       	jmp    c0016ce3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0016bc7:	be 12 00 00 00       	mov    esi,0x12
c0016bcc:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0016bd0:	74 11                	je     c0016be3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0016bd2:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0016bd6:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0016bda:	c1 fe 03             	sar    esi,0x3
c0016bdd:	0f af f0             	imul   esi,eax
c0016be0:	83 c6 12             	add    esi,0x12
c0016be3:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0016be7:	74 04                	je     c0016bed <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0016be9:	85 ff                	test   edi,edi
c0016beb:	75 12                	jne    c0016bff <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0016bed:	83 ec 0c             	sub    esp,0xc
c0016bf0:	68 bc 9a 02 c0       	push   0xc0029abc
c0016bf5:	e8 57 bb ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0016bfa:	e9 ce 00 00 00       	jmp    c0016ccd <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0016bff:	52                   	push   edx
c0016c00:	52                   	push   edx
c0016c01:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0016c05:	50                   	push   eax
c0016c06:	68 d1 9a 02 c0       	push   0xc0029ad1
c0016c0b:	e8 41 bb ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0016c10:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0016c14:	83 c4 10             	add    esp,0x10
c0016c17:	80 fa 02             	cmp    dl,0x2
c0016c1a:	0f 85 98 00 00 00    	jne    c0016cb8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0016c20:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0016c25:	75 10                	jne    c0016c37 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016c27:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0016c2b:	75 0a                	jne    c0016c37 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016c2d:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0016c30:	83 e8 18             	sub    eax,0x18
c0016c33:	a8 f7                	test   al,0xf7
c0016c35:	74 0a                	je     c0016c41 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0016c37:	83 ec 0c             	sub    esp,0xc
c0016c3a:	68 de 9a 02 c0       	push   0xc0029ade
c0016c3f:	eb 7f                	jmp    c0016cc0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0016c41:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016c49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016c51:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016c55:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016c5d:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0016c61:	75 0c                	jne    c0016c6f <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0016c63:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0016c68:	c1 e0 18             	shl    eax,0x18
c0016c6b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016c6f:	41                   	inc    ecx
c0016c70:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0016c75:	c1 e2 10             	shl    edx,0x10
c0016c78:	89 d0                	mov    eax,edx
c0016c7a:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0016c7f:	c1 e2 08             	shl    edx,0x8
c0016c82:	09 c2                	or     edx,eax
c0016c84:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0016c88:	09 c2                	or     edx,eax
c0016c8a:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0016c8e:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0016c92:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0016c96:	c1 f8 03             	sar    eax,0x3
c0016c99:	01 c6                	add    esi,eax
c0016c9b:	89 c8                	mov    eax,ecx
c0016c9d:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0016ca1:	39 c7                	cmp    edi,eax
c0016ca3:	7f b0                	jg     c0016c55 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0016ca5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016ca9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016cad:	39 14 24             	cmp    DWORD PTR [esp],edx
c0016cb0:	7e 22                	jle    c0016cd4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0016cb2:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0016cb6:	eb 99                	jmp    c0016c51 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0016cb8:	50                   	push   eax
c0016cb9:	50                   	push   eax
c0016cba:	52                   	push   edx
c0016cbb:	68 ec 9a 02 c0       	push   0xc0029aec
c0016cc0:	e8 8c ba ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0016cc5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016cc8:	e8 17 88 ff ff       	call   c000f4e4 <free>
c0016ccd:	83 c4 10             	add    esp,0x10
c0016cd0:	31 ed                	xor    ebp,ebp
c0016cd2:	eb 0f                	jmp    c0016ce3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0016cd4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016cd8:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016cdb:	89 38                	mov    DWORD PTR [eax],edi
c0016cdd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016ce1:	89 08                	mov    DWORD PTR [eax],ecx
c0016ce3:	83 c4 1c             	add    esp,0x1c
c0016ce6:	89 e8                	mov    eax,ebp
c0016ce8:	5b                   	pop    ebx
c0016ce9:	5e                   	pop    esi
c0016cea:	5f                   	pop    edi
c0016ceb:	5d                   	pop    ebp
c0016cec:	c3                   	ret    
c0016ced:	90                   	nop

c0016cee <Video::putTGA(int, int, unsigned char*, int)>:
c0016cee:	55                   	push   ebp
c0016cef:	57                   	push   edi
c0016cf0:	56                   	push   esi
c0016cf1:	53                   	push   ebx
c0016cf2:	83 ec 28             	sub    esp,0x28
c0016cf5:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016cf9:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016cfd:	50                   	push   eax
c0016cfe:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016d02:	50                   	push   eax
c0016d03:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016d07:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016d0b:	56                   	push   esi
c0016d0c:	e8 5b fe ff ff       	call   c0016b6c <Video::tgaParse(unsigned char*, int, int*, int*)>
c0016d11:	83 c4 20             	add    esp,0x20
c0016d14:	85 c0                	test   eax,eax
c0016d16:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016d1a:	74 35                	je     c0016d51 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016d1c:	89 c7                	mov    edi,eax
c0016d1e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016d22:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0016d26:	39 d8                	cmp    eax,ebx
c0016d28:	7e 27                	jle    c0016d51 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016d2a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016d2e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016d32:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0016d36:	39 e8                	cmp    eax,ebp
c0016d38:	7e 14                	jle    c0016d4e <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0016d3a:	8b 06                	mov    eax,DWORD PTR [esi]
c0016d3c:	83 c7 04             	add    edi,0x4
c0016d3f:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0016d42:	53                   	push   ebx
c0016d43:	55                   	push   ebp
c0016d44:	45                   	inc    ebp
c0016d45:	56                   	push   esi
c0016d46:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016d49:	83 c4 10             	add    esp,0x10
c0016d4c:	eb e0                	jmp    c0016d2e <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0016d4e:	43                   	inc    ebx
c0016d4f:	eb cd                	jmp    c0016d1e <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0016d51:	83 c4 1c             	add    esp,0x1c
c0016d54:	5b                   	pop    ebx
c0016d55:	5e                   	pop    esi
c0016d56:	5f                   	pop    edi
c0016d57:	5d                   	pop    ebp
c0016d58:	c3                   	ret    
c0016d59:	90                   	nop

c0016d5a <ACPI::close(int, int, void*)>:
c0016d5a:	83 ec 1c             	sub    esp,0x1c
c0016d5d:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0016d65:	74 0a                	je     c0016d71 <ACPI::close(int, int, void*)+0x17>
c0016d67:	b8 00 00 00 00       	mov    eax,0x0
c0016d6c:	e9 9a 00 00 00       	jmp    c0016e0b <ACPI::close(int, int, void*)+0xb1>
c0016d71:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016d76:	75 37                	jne    c0016daf <ACPI::close(int, int, void*)+0x55>
c0016d78:	83 ec 0c             	sub    esp,0xc
c0016d7b:	68 48 9b 02 c0       	push   0xc0029b48
c0016d80:	e8 cc b9 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0016d85:	83 c4 10             	add    esp,0x10
c0016d88:	a1 a8 cf 02 c0       	mov    eax,ds:0xc002cfa8
c0016d8d:	85 c0                	test   eax,eax
c0016d8f:	74 07                	je     c0016d98 <ACPI::close(int, int, void*)+0x3e>
c0016d91:	a1 a8 cf 02 c0       	mov    eax,ds:0xc002cfa8
c0016d96:	ff d0                	call   eax
c0016d98:	83 ec 0c             	sub    esp,0xc
c0016d9b:	68 1c 9c 02 c0       	push   0xc0029c1c
c0016da0:	e8 c6 2a 00 00       	call   c001986b <Krnl::panic(char const*)>
c0016da5:	83 c4 10             	add    esp,0x10
c0016da8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016dad:	eb 5c                	jmp    c0016e0b <ACPI::close(int, int, void*)+0xb1>
c0016daf:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0016db4:	75 50                	jne    c0016e06 <ACPI::close(int, int, void*)+0xac>
c0016db6:	a1 a4 cf 02 c0       	mov    eax,ds:0xc002cfa4
c0016dbb:	85 c0                	test   eax,eax
c0016dbd:	74 07                	je     c0016dc6 <ACPI::close(int, int, void*)+0x6c>
c0016dbf:	a1 a4 cf 02 c0       	mov    eax,ds:0xc002cfa4
c0016dc4:	ff d0                	call   eax
c0016dc6:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0016dcb:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016dd0:	83 e0 02             	and    eax,0x2
c0016dd3:	74 1c                	je     c0016df1 <ACPI::close(int, int, void*)+0x97>
c0016dd5:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0016ddc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016de0:	89 c2                	mov    edx,eax
c0016de2:	ec                   	in     al,dx
c0016de3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0016de7:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0016deb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016def:	eb da                	jmp    c0016dcb <ACPI::close(int, int, void*)+0x71>
c0016df1:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0016df8:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0016dfd:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0016e01:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016e05:	ee                   	out    dx,al
c0016e06:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016e0b:	83 c4 1c             	add    esp,0x1c
c0016e0e:	c3                   	ret    

c0016e0f <findRSDP()>:
c0016e0f:	83 ec 1c             	sub    esp,0x1c
c0016e12:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c0016e17:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016e1d:	83 e0 04             	and    eax,0x4
c0016e20:	84 c0                	test   al,al
c0016e22:	75 07                	jne    c0016e2b <findRSDP()+0x1c>
c0016e24:	b8 00 00 00 00       	mov    eax,0x0
c0016e29:	eb 6a                	jmp    c0016e95 <findRSDP()+0x86>
c0016e2b:	a1 70 c9 02 c0       	mov    eax,ds:0xc002c970
c0016e30:	3d ff 07 00 00       	cmp    eax,0x7ff
c0016e35:	7f 1b                	jg     c0016e52 <findRSDP()+0x43>
c0016e37:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c0016e3c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016e42:	83 e2 fb             	and    edx,0xfffffffb
c0016e45:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016e4b:	b8 00 00 00 00       	mov    eax,0x0
c0016e50:	eb 43                	jmp    c0016e95 <findRSDP()+0x86>
c0016e52:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0016e5a:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0016e62:	77 2c                	ja     c0016e90 <findRSDP()+0x81>
c0016e64:	83 ec 04             	sub    esp,0x4
c0016e67:	6a 08                	push   0x8
c0016e69:	68 55 9b 02 c0       	push   0xc0029b55
c0016e6e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016e72:	e8 7b 97 fe ff       	call   c00005f2 <memcmp>
c0016e77:	83 c4 10             	add    esp,0x10
c0016e7a:	85 c0                	test   eax,eax
c0016e7c:	0f 94 c0             	sete   al
c0016e7f:	84 c0                	test   al,al
c0016e81:	74 06                	je     c0016e89 <findRSDP()+0x7a>
c0016e83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e87:	eb 0c                	jmp    c0016e95 <findRSDP()+0x86>
c0016e89:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0016e8e:	eb ca                	jmp    c0016e5a <findRSDP()+0x4b>
c0016e90:	b8 00 00 00 00       	mov    eax,0x0
c0016e95:	83 c4 1c             	add    esp,0x1c
c0016e98:	c3                   	ret    

c0016e99 <loadACPITables(unsigned char*)>:
c0016e99:	56                   	push   esi
c0016e9a:	53                   	push   ebx
c0016e9b:	83 ec 44             	sub    esp,0x44
c0016e9e:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c0016ea3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016ea9:	83 e0 04             	and    eax,0x4
c0016eac:	84 c0                	test   al,al
c0016eae:	0f 84 05 02 00 00    	je     c00170b9 <loadACPITables(unsigned char*)+0x220>
c0016eb4:	a0 c0 d1 02 c0       	mov    al,ds:0xc002d1c0
c0016eb9:	84 c0                	test   al,al
c0016ebb:	74 75                	je     c0016f32 <loadACPITables(unsigned char*)+0x99>
c0016ebd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016ec1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016ec5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ec9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016ecc:	83 e8 24             	sub    eax,0x24
c0016ecf:	c1 e8 03             	shr    eax,0x3
c0016ed2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0016ed6:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0016ede:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016ee2:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0016ee6:	0f 8d b2 00 00 00    	jge    c0016f9e <loadACPITables(unsigned char*)+0x105>
c0016eec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016ef0:	83 c0 24             	add    eax,0x24
c0016ef3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016ef7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016efb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0016eff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016f03:	c1 e0 03             	shl    eax,0x3
c0016f06:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0016f0a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016f0e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0016f11:	8b 00                	mov    eax,DWORD PTR [eax]
c0016f13:	89 c1                	mov    ecx,eax
c0016f15:	a1 ac cf 02 c0       	mov    eax,ds:0xc002cfac
c0016f1a:	8d 50 01             	lea    edx,[eax+0x1]
c0016f1d:	89 15 ac cf 02 c0    	mov    DWORD PTR ds:0xc002cfac,edx
c0016f23:	89 ca                	mov    edx,ecx
c0016f25:	89 14 c5 c4 cf 02 c0 	mov    DWORD PTR [eax*8-0x3ffd303c],edx
c0016f2c:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0016f30:	eb ac                	jmp    c0016ede <loadACPITables(unsigned char*)+0x45>
c0016f32:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016f36:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016f3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016f41:	83 e8 24             	sub    eax,0x24
c0016f44:	c1 e8 02             	shr    eax,0x2
c0016f47:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016f4b:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0016f53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016f57:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0016f5b:	7d 41                	jge    c0016f9e <loadACPITables(unsigned char*)+0x105>
c0016f5d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016f61:	83 c0 24             	add    eax,0x24
c0016f64:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016f68:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016f6c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016f70:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016f74:	c1 e0 02             	shl    eax,0x2
c0016f77:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0016f7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016f7f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016f81:	a1 ac cf 02 c0       	mov    eax,ds:0xc002cfac
c0016f86:	8d 50 01             	lea    edx,[eax+0x1]
c0016f89:	89 15 ac cf 02 c0    	mov    DWORD PTR ds:0xc002cfac,edx
c0016f8f:	89 ca                	mov    edx,ecx
c0016f91:	89 14 c5 c4 cf 02 c0 	mov    DWORD PTR [eax*8-0x3ffd303c],edx
c0016f98:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0016f9c:	eb b5                	jmp    c0016f53 <loadACPITables(unsigned char*)+0xba>
c0016f9e:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0016fa6:	a1 ac cf 02 c0       	mov    eax,ds:0xc002cfac
c0016fab:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0016faf:	0f 8d 05 01 00 00    	jge    c00170ba <loadACPITables(unsigned char*)+0x221>
c0016fb5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016fb9:	8b 04 c5 c4 cf 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd303c]
c0016fc0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016fc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fc8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016fcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fd0:	25 ff 0f 00 00       	and    eax,0xfff
c0016fd5:	89 c6                	mov    esi,eax
c0016fd7:	e8 15 a9 ff ff       	call   c00118f1 <Virt::getAKernelVAS()>
c0016fdc:	89 c3                	mov    ebx,eax
c0016fde:	83 ec 0c             	sub    esp,0xc
c0016fe1:	6a 01                	push   0x1
c0016fe3:	e8 79 a7 ff ff       	call   c0011761 <Virt::allocateKernelVirtualPages(int)>
c0016fe8:	83 c4 10             	add    esp,0x10
c0016feb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016fef:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016ff5:	83 ec 0c             	sub    esp,0xc
c0016ff8:	6a 01                	push   0x1
c0016ffa:	6a 01                	push   0x1
c0016ffc:	50                   	push   eax
c0016ffd:	52                   	push   edx
c0016ffe:	53                   	push   ebx
c0016fff:	e8 1c b1 ff ff       	call   c0012120 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017004:	83 c4 20             	add    esp,0x20
c0017007:	09 f0                	or     eax,esi
c0017009:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001700d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017011:	c1 e0 03             	shl    eax,0x3
c0017014:	05 c0 cf 02 c0       	add    eax,0xc002cfc0
c0017019:	83 ec 04             	sub    esp,0x4
c001701c:	6a 04                	push   0x4
c001701e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017022:	50                   	push   eax
c0017023:	e8 2d 96 fe ff       	call   c0000655 <memcpy>
c0017028:	83 c4 10             	add    esp,0x10
c001702b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001702f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017032:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017036:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001703a:	05 00 10 00 00       	add    eax,0x1000
c001703f:	c1 e8 0c             	shr    eax,0xc
c0017042:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001704a:	89 04 24             	mov    DWORD PTR [esp],eax
c001704d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017051:	25 ff 0f 00 00       	and    eax,0xfff
c0017056:	89 c6                	mov    esi,eax
c0017058:	e8 94 a8 ff ff       	call   c00118f1 <Virt::getAKernelVAS()>
c001705d:	89 c3                	mov    ebx,eax
c001705f:	83 ec 0c             	sub    esp,0xc
c0017062:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017066:	e8 f6 a6 ff ff       	call   c0011761 <Virt::allocateKernelVirtualPages(int)>
c001706b:	83 c4 10             	add    esp,0x10
c001706e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017072:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017078:	83 ec 0c             	sub    esp,0xc
c001707b:	6a 01                	push   0x1
c001707d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017081:	50                   	push   eax
c0017082:	52                   	push   edx
c0017083:	53                   	push   ebx
c0017084:	e8 97 b0 ff ff       	call   c0012120 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017089:	83 c4 20             	add    esp,0x20
c001708c:	09 f0                	or     eax,esi
c001708e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017092:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017095:	83 ec 0c             	sub    esp,0xc
c0017098:	50                   	push   eax
c0017099:	e8 27 aa ff ff       	call   c0011ac5 <Virt::freeKernelVirtualPages(unsigned long)>
c001709e:	83 c4 10             	add    esp,0x10
c00170a1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00170a5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00170a9:	89 14 c5 c4 cf 02 c0 	mov    DWORD PTR [eax*8-0x3ffd303c],edx
c00170b0:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c00170b4:	e9 ed fe ff ff       	jmp    c0016fa6 <loadACPITables(unsigned char*)+0x10d>
c00170b9:	90                   	nop
c00170ba:	83 c4 44             	add    esp,0x44
c00170bd:	5b                   	pop    ebx
c00170be:	5e                   	pop    esi
c00170bf:	c3                   	ret    

c00170c0 <findRSDT(unsigned char*)>:
c00170c0:	56                   	push   esi
c00170c1:	53                   	push   ebx
c00170c2:	83 ec 44             	sub    esp,0x44
c00170c5:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c00170ca:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00170d0:	83 e0 04             	and    eax,0x4
c00170d3:	84 c0                	test   al,al
c00170d5:	75 0a                	jne    c00170e1 <findRSDT(unsigned char*)+0x21>
c00170d7:	b8 00 00 00 00       	mov    eax,0x0
c00170dc:	e9 f7 00 00 00       	jmp    c00171d8 <findRSDT(unsigned char*)+0x118>
c00170e1:	83 ec 04             	sub    esp,0x4
c00170e4:	6a 24                	push   0x24
c00170e6:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00170ea:	8d 44 24 18          	lea    eax,[esp+0x18]
c00170ee:	50                   	push   eax
c00170ef:	e8 61 95 fe ff       	call   c0000655 <memcpy>
c00170f4:	83 c4 10             	add    esp,0x10
c00170f7:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00170fb:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00170ff:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017107:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001710b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001710f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017113:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017117:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001711b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001711f:	25 ff 0f 00 00       	and    eax,0xfff
c0017124:	89 c6                	mov    esi,eax
c0017126:	e8 c6 a7 ff ff       	call   c00118f1 <Virt::getAKernelVAS()>
c001712b:	89 c3                	mov    ebx,eax
c001712d:	83 ec 0c             	sub    esp,0xc
c0017130:	6a 02                	push   0x2
c0017132:	e8 2a a6 ff ff       	call   c0011761 <Virt::allocateKernelVirtualPages(int)>
c0017137:	83 c4 10             	add    esp,0x10
c001713a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001713e:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017144:	83 ec 0c             	sub    esp,0xc
c0017147:	6a 01                	push   0x1
c0017149:	6a 02                	push   0x2
c001714b:	50                   	push   eax
c001714c:	52                   	push   edx
c001714d:	53                   	push   ebx
c001714e:	e8 cd af ff ff       	call   c0012120 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017153:	83 c4 20             	add    esp,0x20
c0017156:	09 f0                	or     eax,esi
c0017158:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001715c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017160:	25 ff 0f 00 00       	and    eax,0xfff
c0017165:	89 c6                	mov    esi,eax
c0017167:	e8 85 a7 ff ff       	call   c00118f1 <Virt::getAKernelVAS()>
c001716c:	89 c3                	mov    ebx,eax
c001716e:	83 ec 0c             	sub    esp,0xc
c0017171:	6a 02                	push   0x2
c0017173:	e8 e9 a5 ff ff       	call   c0011761 <Virt::allocateKernelVirtualPages(int)>
c0017178:	83 c4 10             	add    esp,0x10
c001717b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001717f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017185:	83 ec 0c             	sub    esp,0xc
c0017188:	6a 01                	push   0x1
c001718a:	6a 02                	push   0x2
c001718c:	50                   	push   eax
c001718d:	52                   	push   edx
c001718e:	53                   	push   ebx
c001718f:	e8 8c af ff ff       	call   c0012120 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017194:	83 c4 20             	add    esp,0x20
c0017197:	09 f0                	or     eax,esi
c0017199:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001719d:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c00171a2:	75 11                	jne    c00171b5 <findRSDT(unsigned char*)+0xf5>
c00171a4:	c6 05 c0 d1 02 c0 00 	mov    BYTE PTR ds:0xc002d1c0,0x0
c00171ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00171af:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00171b3:	eb 1f                	jmp    c00171d4 <findRSDT(unsigned char*)+0x114>
c00171b5:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c00171ba:	75 11                	jne    c00171cd <findRSDT(unsigned char*)+0x10d>
c00171bc:	c6 05 c0 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d1c0,0x1
c00171c3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00171c7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00171cb:	eb 07                	jmp    c00171d4 <findRSDT(unsigned char*)+0x114>
c00171cd:	b8 00 00 00 00       	mov    eax,0x0
c00171d2:	eb 04                	jmp    c00171d8 <findRSDT(unsigned char*)+0x118>
c00171d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00171d8:	83 c4 44             	add    esp,0x44
c00171db:	5b                   	pop    ebx
c00171dc:	5e                   	pop    esi
c00171dd:	c3                   	ret    

c00171de <findDataTable(unsigned char*, char*)>:
c00171de:	83 ec 1c             	sub    esp,0x1c
c00171e1:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c00171e6:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00171ec:	83 e0 04             	and    eax,0x4
c00171ef:	84 c0                	test   al,al
c00171f1:	75 07                	jne    c00171fa <findDataTable(unsigned char*, char*)+0x1c>
c00171f3:	b8 00 00 00 00       	mov    eax,0x0
c00171f8:	eb 7c                	jmp    c0017276 <findDataTable(unsigned char*, char*)+0x98>
c00171fa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017202:	a1 ac cf 02 c0       	mov    eax,ds:0xc002cfac
c0017207:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001720b:	7d 3a                	jge    c0017247 <findDataTable(unsigned char*, char*)+0x69>
c001720d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017211:	c1 e0 03             	shl    eax,0x3
c0017214:	05 c0 cf 02 c0       	add    eax,0xc002cfc0
c0017219:	83 ec 04             	sub    esp,0x4
c001721c:	6a 04                	push   0x4
c001721e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017222:	50                   	push   eax
c0017223:	e8 ca 93 fe ff       	call   c00005f2 <memcmp>
c0017228:	83 c4 10             	add    esp,0x10
c001722b:	85 c0                	test   eax,eax
c001722d:	0f 94 c0             	sete   al
c0017230:	84 c0                	test   al,al
c0017232:	74 0d                	je     c0017241 <findDataTable(unsigned char*, char*)+0x63>
c0017234:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017238:	8b 04 c5 c4 cf 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd303c]
c001723f:	eb 35                	jmp    c0017276 <findDataTable(unsigned char*, char*)+0x98>
c0017241:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017245:	eb bb                	jmp    c0017202 <findDataTable(unsigned char*, char*)+0x24>
c0017247:	a0 c0 d1 02 c0       	mov    al,ds:0xc002d1c0
c001724c:	84 c0                	test   al,al
c001724e:	74 07                	je     c0017257 <findDataTable(unsigned char*, char*)+0x79>
c0017250:	b8 58 00 00 00       	mov    eax,0x58
c0017255:	eb 05                	jmp    c001725c <findDataTable(unsigned char*, char*)+0x7e>
c0017257:	b8 52 00 00 00       	mov    eax,0x52
c001725c:	83 ec 04             	sub    esp,0x4
c001725f:	50                   	push   eax
c0017260:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017264:	68 40 9c 02 c0       	push   0xc0029c40
c0017269:	e8 e3 b4 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001726e:	83 c4 10             	add    esp,0x10
c0017271:	b8 00 00 00 00       	mov    eax,0x0
c0017276:	83 c4 1c             	add    esp,0x1c
c0017279:	c3                   	ret    

c001727a <scanMADT()>:
c001727a:	53                   	push   ebx
c001727b:	83 ec 38             	sub    esp,0x38
c001727e:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c0017283:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017289:	83 e0 04             	and    eax,0x4
c001728c:	84 c0                	test   al,al
c001728e:	0f 84 63 04 00 00    	je     c00176f7 <scanMADT()+0x47d>
c0017294:	e8 76 fb ff ff       	call   c0016e0f <findRSDP()>
c0017299:	a3 cc d1 02 c0       	mov    ds:0xc002d1cc,eax
c001729e:	a1 cc d1 02 c0       	mov    eax,ds:0xc002d1cc
c00172a3:	85 c0                	test   eax,eax
c00172a5:	75 19                	jne    c00172c0 <scanMADT()+0x46>
c00172a7:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c00172ac:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00172b2:	83 e2 fb             	and    edx,0xfffffffb
c00172b5:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00172bb:	e9 3b 04 00 00       	jmp    c00176fb <scanMADT()+0x481>
c00172c0:	a1 cc d1 02 c0       	mov    eax,ds:0xc002d1cc
c00172c5:	83 ec 0c             	sub    esp,0xc
c00172c8:	50                   	push   eax
c00172c9:	e8 f2 fd ff ff       	call   c00170c0 <findRSDT(unsigned char*)>
c00172ce:	83 c4 10             	add    esp,0x10
c00172d1:	a3 c8 d1 02 c0       	mov    ds:0xc002d1c8,eax
c00172d6:	a1 c8 d1 02 c0       	mov    eax,ds:0xc002d1c8
c00172db:	85 c0                	test   eax,eax
c00172dd:	75 19                	jne    c00172f8 <scanMADT()+0x7e>
c00172df:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c00172e4:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00172ea:	83 e2 fb             	and    edx,0xfffffffb
c00172ed:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00172f3:	e9 03 04 00 00       	jmp    c00176fb <scanMADT()+0x481>
c00172f8:	a1 c8 d1 02 c0       	mov    eax,ds:0xc002d1c8
c00172fd:	83 ec 0c             	sub    esp,0xc
c0017300:	50                   	push   eax
c0017301:	e8 93 fb ff ff       	call   c0016e99 <loadACPITables(unsigned char*)>
c0017306:	83 c4 10             	add    esp,0x10
c0017309:	a1 c8 d1 02 c0       	mov    eax,ds:0xc002d1c8
c001730e:	83 ec 08             	sub    esp,0x8
c0017311:	68 5e 9b 02 c0       	push   0xc0029b5e
c0017316:	50                   	push   eax
c0017317:	e8 c2 fe ff ff       	call   c00171de <findDataTable(unsigned char*, char*)>
c001731c:	83 c4 10             	add    esp,0x10
c001731f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017323:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017328:	75 19                	jne    c0017343 <scanMADT()+0xc9>
c001732a:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c001732f:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017335:	83 e2 fe             	and    edx,0xfffffffe
c0017338:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001733e:	e9 b8 03 00 00       	jmp    c00176fb <scanMADT()+0x481>
c0017343:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001734b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001734f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017352:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017356:	0f 87 9f 03 00 00    	ja     c00176fb <scanMADT()+0x481>
c001735c:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017364:	0f 87 91 03 00 00    	ja     c00176fb <scanMADT()+0x481>
c001736a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001736e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017372:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017376:	8d 50 01             	lea    edx,[eax+0x1]
c0017379:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001737d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017381:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017385:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017389:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001738d:	8d 50 01             	lea    edx,[eax+0x1]
c0017390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017394:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017398:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001739c:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00173a0:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c00173a5:	0f 86 4f 03 00 00    	jbe    c00176fa <scanMADT()+0x480>
c00173ab:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c00173b0:	75 57                	jne    c0017409 <scanMADT()+0x18f>
c00173b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00173b6:	8d 50 01             	lea    edx,[eax+0x1]
c00173b9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00173bd:	8a 15 c0 d3 02 c0    	mov    dl,BYTE PTR ds:0xc002d3c0
c00173c3:	0f b6 d2             	movzx  edx,dl
c00173c6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00173ca:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00173ce:	88 82 00 d4 02 c0    	mov    BYTE PTR [edx-0x3ffd2c00],al
c00173d4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00173d8:	8d 50 01             	lea    edx,[eax+0x1]
c00173db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00173df:	8a 15 c0 d3 02 c0    	mov    dl,BYTE PTR ds:0xc002d3c0
c00173e5:	8d 4a 01             	lea    ecx,[edx+0x1]
c00173e8:	88 0d c0 d3 02 c0    	mov    BYTE PTR ds:0xc002d3c0,cl
c00173ee:	0f b6 d2             	movzx  edx,dl
c00173f1:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00173f5:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00173f9:	88 82 e0 d3 02 c0    	mov    BYTE PTR [edx-0x3ffd2c20],al
c00173ff:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017404:	e9 da 02 00 00       	jmp    c00176e3 <scanMADT()+0x469>
c0017409:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c001740e:	0f 85 14 01 00 00    	jne    c0017528 <scanMADT()+0x2ae>
c0017414:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017418:	8d 50 01             	lea    edx,[eax+0x1]
c001741b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001741f:	8a 15 80 d2 02 c0    	mov    dl,BYTE PTR ds:0xc002d280
c0017425:	0f b6 d2             	movzx  edx,dl
c0017428:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001742c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017430:	88 82 a0 d2 02 c0    	mov    BYTE PTR [edx-0x3ffd2d60],al
c0017436:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c001743a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001743e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017442:	01 d0                	add    eax,edx
c0017444:	83 c0 2c             	add    eax,0x2c
c0017447:	8a 00                	mov    al,BYTE PTR [eax]
c0017449:	0f b6 d0             	movzx  edx,al
c001744c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017450:	8d 48 01             	lea    ecx,[eax+0x1]
c0017453:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017457:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001745b:	0f b6 c0             	movzx  eax,al
c001745e:	c1 e0 08             	shl    eax,0x8
c0017461:	89 d1                	mov    ecx,edx
c0017463:	09 c1                	or     ecx,eax
c0017465:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017469:	8d 50 02             	lea    edx,[eax+0x2]
c001746c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017470:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017474:	0f b6 c0             	movzx  eax,al
c0017477:	c1 e0 10             	shl    eax,0x10
c001747a:	09 c1                	or     ecx,eax
c001747c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017480:	8d 50 03             	lea    edx,[eax+0x3]
c0017483:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017487:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001748b:	0f b6 c0             	movzx  eax,al
c001748e:	c1 e0 18             	shl    eax,0x18
c0017491:	09 c1                	or     ecx,eax
c0017493:	89 ca                	mov    edx,ecx
c0017495:	a0 80 d2 02 c0       	mov    al,ds:0xc002d280
c001749a:	0f b6 c0             	movzx  eax,al
c001749d:	89 14 85 c0 d2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2d40],edx
c00174a4:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00174a9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00174ad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174b1:	01 d0                	add    eax,edx
c00174b3:	83 c0 2c             	add    eax,0x2c
c00174b6:	8a 00                	mov    al,BYTE PTR [eax]
c00174b8:	0f b6 d0             	movzx  edx,al
c00174bb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174bf:	8d 48 01             	lea    ecx,[eax+0x1]
c00174c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00174c6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00174ca:	0f b6 c0             	movzx  eax,al
c00174cd:	c1 e0 08             	shl    eax,0x8
c00174d0:	89 d1                	mov    ecx,edx
c00174d2:	09 c1                	or     ecx,eax
c00174d4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174d8:	8d 50 02             	lea    edx,[eax+0x2]
c00174db:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00174df:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00174e3:	0f b6 c0             	movzx  eax,al
c00174e6:	c1 e0 10             	shl    eax,0x10
c00174e9:	09 c1                	or     ecx,eax
c00174eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174ef:	8d 50 03             	lea    edx,[eax+0x3]
c00174f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00174f6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00174fa:	0f b6 c0             	movzx  eax,al
c00174fd:	c1 e0 18             	shl    eax,0x18
c0017500:	09 c1                	or     ecx,eax
c0017502:	89 ca                	mov    edx,ecx
c0017504:	a0 80 d2 02 c0       	mov    al,ds:0xc002d280
c0017509:	0f b6 c0             	movzx  eax,al
c001750c:	89 14 85 40 d3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2cc0],edx
c0017513:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017518:	a0 80 d2 02 c0       	mov    al,ds:0xc002d280
c001751d:	40                   	inc    eax
c001751e:	a2 80 d2 02 c0       	mov    ds:0xc002d280,al
c0017523:	e9 bb 01 00 00       	jmp    c00176e3 <scanMADT()+0x469>
c0017528:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c001752d:	0f 85 e9 00 00 00    	jne    c001761c <scanMADT()+0x3a2>
c0017533:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017537:	8d 50 01             	lea    edx,[eax+0x1]
c001753a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001753e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017542:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017546:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001754a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001754e:	8d 50 01             	lea    edx,[eax+0x1]
c0017551:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017555:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017559:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001755d:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017561:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017565:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017569:	01 d0                	add    eax,edx
c001756b:	83 c0 2c             	add    eax,0x2c
c001756e:	8a 00                	mov    al,BYTE PTR [eax]
c0017570:	0f b6 d0             	movzx  edx,al
c0017573:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017577:	8d 48 01             	lea    ecx,[eax+0x1]
c001757a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001757e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017582:	0f b6 c0             	movzx  eax,al
c0017585:	c1 e0 08             	shl    eax,0x8
c0017588:	89 d1                	mov    ecx,edx
c001758a:	09 c1                	or     ecx,eax
c001758c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017590:	8d 50 02             	lea    edx,[eax+0x2]
c0017593:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017597:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001759b:	0f b6 c0             	movzx  eax,al
c001759e:	c1 e0 10             	shl    eax,0x10
c00175a1:	09 c1                	or     ecx,eax
c00175a3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175a7:	8d 50 03             	lea    edx,[eax+0x3]
c00175aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00175ae:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00175b2:	0f b6 c0             	movzx  eax,al
c00175b5:	c1 e0 18             	shl    eax,0x18
c00175b8:	09 c8                	or     eax,ecx
c00175ba:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00175be:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00175c3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00175c7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175cb:	01 d0                	add    eax,edx
c00175cd:	83 c0 2c             	add    eax,0x2c
c00175d0:	8a 00                	mov    al,BYTE PTR [eax]
c00175d2:	0f b6 c0             	movzx  eax,al
c00175d5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00175d9:	8d 4a 01             	lea    ecx,[edx+0x1]
c00175dc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00175e0:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00175e4:	0f b6 d2             	movzx  edx,dl
c00175e7:	c1 e2 08             	shl    edx,0x8
c00175ea:	09 d0                	or     eax,edx
c00175ec:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00175f1:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00175f6:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00175fb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00175ff:	88 90 80 bb 02 c0    	mov    BYTE PTR [eax-0x3ffd4480],dl
c0017605:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c001760a:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001760f:	66 89 84 12 60 d2 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd2da0],ax
c0017617:	e9 c7 00 00 00       	jmp    c00176e3 <scanMADT()+0x469>
c001761c:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017621:	0f 85 b0 00 00 00    	jne    c00176d7 <scanMADT()+0x45d>
c0017627:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001762b:	8d 50 01             	lea    edx,[eax+0x1]
c001762e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017632:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017636:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001763a:	0f b6 c0             	movzx  eax,al
c001763d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017641:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017645:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017649:	01 d0                	add    eax,edx
c001764b:	83 c0 2c             	add    eax,0x2c
c001764e:	8a 00                	mov    al,BYTE PTR [eax]
c0017650:	0f b6 d0             	movzx  edx,al
c0017653:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017657:	8d 48 01             	lea    ecx,[eax+0x1]
c001765a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001765e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017662:	0f b6 c0             	movzx  eax,al
c0017665:	c1 e0 08             	shl    eax,0x8
c0017668:	09 d0                	or     eax,edx
c001766a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001766e:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017673:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017677:	8d 50 01             	lea    edx,[eax+0x1]
c001767a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001767e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017682:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017686:	0f b6 c0             	movzx  eax,al
c0017689:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001768d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017691:	c1 e0 08             	shl    eax,0x8
c0017694:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017698:	89 c1                	mov    ecx,eax
c001769a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001769e:	c1 e0 18             	shl    eax,0x18
c00176a1:	89 c3                	mov    ebx,eax
c00176a3:	a1 d0 d1 02 c0       	mov    eax,ds:0xc002d1d0
c00176a8:	8d 50 01             	lea    edx,[eax+0x1]
c00176ab:	89 15 d0 d1 02 c0    	mov    DWORD PTR ds:0xc002d1d0,edx
c00176b1:	09 d9                	or     ecx,ebx
c00176b3:	89 ca                	mov    edx,ecx
c00176b5:	89 14 85 e0 d1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2e20],edx
c00176bc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00176c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00176c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00176c8:	68 70 9c 02 c0       	push   0xc0029c70
c00176cd:	e8 7f b0 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c00176d2:	83 c4 10             	add    esp,0x10
c00176d5:	eb 0c                	jmp    c00176e3 <scanMADT()+0x469>
c00176d7:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c00176dc:	75 05                	jne    c00176e3 <scanMADT()+0x469>
c00176de:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c00176e3:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00176e8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00176ec:	01 d0                	add    eax,edx
c00176ee:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00176f2:	e9 54 fc ff ff       	jmp    c001734b <scanMADT()+0xd1>
c00176f7:	90                   	nop
c00176f8:	eb 01                	jmp    c00176fb <scanMADT()+0x481>
c00176fa:	90                   	nop
c00176fb:	83 c4 38             	add    esp,0x38
c00176fe:	5b                   	pop    ebx
c00176ff:	c3                   	ret    

c0017700 <ACPI::ACPI()>:
c0017700:	83 ec 0c             	sub    esp,0xc
c0017703:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017707:	83 ec 08             	sub    esp,0x8
c001770a:	68 63 9b 02 c0       	push   0xc0029b63
c001770f:	50                   	push   eax
c0017710:	e8 1b c6 ff ff       	call   c0013d30 <Device::Device(char const*)>
c0017715:	83 c4 10             	add    esp,0x10
c0017718:	ba 48 9d 02 c0       	mov    edx,0xc0029d48
c001771d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017721:	89 10                	mov    DWORD PTR [eax],edx
c0017723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017727:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001772e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017732:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c001773c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017740:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c001774a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001774e:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0017755:	e8 20 fb ff ff       	call   c001727a <scanMADT()>
c001775a:	90                   	nop
c001775b:	83 c4 0c             	add    esp,0xc
c001775e:	c3                   	ret    
c001775f:	90                   	nop

c0017760 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017760:	83 ec 2c             	sub    esp,0x2c
c0017763:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017767:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001776b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001776f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017773:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017778:	88 d0                	mov    al,dl
c001777a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001777e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017783:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001778b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001778f:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017795:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017799:	0f 8d 97 00 00 00    	jge    c0017836 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c001779f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00177a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00177a7:	83 c2 2a             	add    edx,0x2a
c00177aa:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00177ae:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00177b3:	75 78                	jne    c001782d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00177b5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00177b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00177bd:	83 c2 2a             	add    edx,0x2a
c00177c0:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00177c4:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00177c8:	75 63                	jne    c001782d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00177ca:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00177cf:	74 3a                	je     c001780b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c00177d1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00177d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00177d9:	83 c2 2a             	add    edx,0x2a
c00177dc:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00177e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00177e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00177e7:	39 c2                	cmp    edx,eax
c00177e9:	74 10                	je     c00177fb <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00177eb:	83 ec 0c             	sub    esp,0xc
c00177ee:	68 ac 9c 02 c0       	push   0xc0029cac
c00177f3:	e8 73 20 00 00       	call   c001986b <Krnl::panic(char const*)>
c00177f8:	83 c4 10             	add    esp,0x10
c00177fb:	83 ec 0c             	sub    esp,0xc
c00177fe:	68 68 9b 02 c0       	push   0xc0029b68
c0017803:	e8 63 20 00 00       	call   c001986b <Krnl::panic(char const*)>
c0017808:	83 c4 10             	add    esp,0x10
c001780b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001780f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017813:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017817:	83 c2 2a             	add    edx,0x2a
c001781a:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001781e:	8b 02                	mov    eax,DWORD PTR [edx]
c0017820:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017823:	89 01                	mov    DWORD PTR [ecx],eax
c0017825:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017828:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001782d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017831:	e9 55 ff ff ff       	jmp    c001778b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017836:	90                   	nop
c0017837:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001783b:	83 c4 2c             	add    esp,0x2c
c001783e:	c2 04 00             	ret    0x4
c0017841:	90                   	nop

c0017842 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017842:	56                   	push   esi
c0017843:	53                   	push   ebx
c0017844:	83 ec 14             	sub    esp,0x14
c0017847:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001784b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001784f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017853:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017858:	88 c8                	mov    al,cl
c001785a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001785e:	88 d0                	mov    al,dl
c0017860:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017864:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017868:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c001786e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017872:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0017878:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c001787d:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0017882:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0017887:	83 ec 04             	sub    esp,0x4
c001788a:	56                   	push   esi
c001788b:	53                   	push   ebx
c001788c:	51                   	push   ecx
c001788d:	52                   	push   edx
c001788e:	50                   	push   eax
c001788f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017893:	68 dc 9c 02 c0       	push   0xc0029cdc
c0017898:	e8 b4 ae ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001789d:	83 c4 20             	add    esp,0x20
c00178a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178a4:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00178aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178ae:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00178b1:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00178b5:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00178b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178bd:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00178c3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00178c7:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00178ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178ce:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00178d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178d7:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00178dd:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00178e1:	8d 48 01             	lea    ecx,[eax+0x1]
c00178e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178e8:	83 c2 2a             	add    edx,0x2a
c00178eb:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00178ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178f3:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00178f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178fd:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017900:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017904:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017908:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001790c:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017912:	8d 50 01             	lea    edx,[eax+0x1]
c0017915:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017919:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c001791f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017923:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017929:	3d 00 08 00 00       	cmp    eax,0x800
c001792e:	75 10                	jne    c0017940 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c0017930:	83 ec 0c             	sub    esp,0xc
c0017933:	68 77 9b 02 c0       	push   0xc0029b77
c0017938:	e8 2e 1f 00 00       	call   c001986b <Krnl::panic(char const*)>
c001793d:	83 c4 10             	add    esp,0x10
c0017940:	90                   	nop
c0017941:	83 c4 14             	add    esp,0x14
c0017944:	5b                   	pop    ebx
c0017945:	5e                   	pop    esi
c0017946:	c3                   	ret    
c0017947:	90                   	nop

c0017948 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017948:	b8 00 00 00 00       	mov    eax,0x0
c001794d:	c3                   	ret    

c001794e <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001794e:	83 ec 1c             	sub    esp,0x1c
c0017951:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017955:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017958:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001795c:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c0017961:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017966:	83 ec 08             	sub    esp,0x8
c0017969:	52                   	push   edx
c001796a:	50                   	push   eax
c001796b:	e8 7c 71 ff ff       	call   c000eaec <Computer::readCMOS(unsigned char)>
c0017970:	83 c4 10             	add    esp,0x10
c0017973:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017977:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c001797c:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017981:	83 ec 04             	sub    esp,0x4
c0017984:	6a 01                	push   0x1
c0017986:	52                   	push   edx
c0017987:	50                   	push   eax
c0017988:	e8 75 72 ff ff       	call   c000ec02 <Computer::writeCMOS(unsigned char, unsigned char)>
c001798d:	83 c4 10             	add    esp,0x10
c0017990:	90                   	nop
c0017991:	83 c4 1c             	add    esp,0x1c
c0017994:	c3                   	ret    
c0017995:	90                   	nop

c0017996 <ACPI::open(int, int, void*)>:
c0017996:	53                   	push   ebx
c0017997:	83 ec 28             	sub    esp,0x28
c001799a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001799e:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c00179a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00179a9:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c00179af:	84 c0                	test   al,al
c00179b1:	74 67                	je     c0017a1a <ACPI::open(int, int, void*)+0x84>
c00179b3:	c7 44 24 10 58 01 00 00 	mov    DWORD PTR [esp+0x10],0x158
c00179bb:	83 ec 0c             	sub    esp,0xc
c00179be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00179c2:	e8 0d 7b ff ff       	call   c000f4d4 <malloc>
c00179c7:	83 c4 10             	add    esp,0x10
c00179ca:	89 c3                	mov    ebx,eax
c00179cc:	83 ec 0c             	sub    esp,0xc
c00179cf:	53                   	push   ebx
c00179d0:	e8 47 9e 00 00       	call   c002181c <PCI::PCI()>
c00179d5:	83 c4 10             	add    esp,0x10
c00179d8:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00179dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00179e0:	83 ec 08             	sub    esp,0x8
c00179e3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00179e7:	50                   	push   eax
c00179e8:	e8 53 c1 ff ff       	call   c0013b40 <Device::addChild(Device*)>
c00179ed:	83 c4 10             	add    esp,0x10
c00179f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00179f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00179f6:	83 c0 08             	add    eax,0x8
c00179f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00179fb:	6a 00                	push   0x0
c00179fd:	6a 00                	push   0x0
c00179ff:	6a 00                	push   0x0
c0017a01:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017a05:	ff d0                	call   eax
c0017a07:	83 c4 10             	add    esp,0x10
c0017a0a:	83 ec 0c             	sub    esp,0xc
c0017a0d:	68 94 9b 02 c0       	push   0xc0029b94
c0017a12:	e8 3a ad ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0017a17:	83 c4 10             	add    esp,0x10
c0017a1a:	83 ec 0c             	sub    esp,0xc
c0017a1d:	68 9f 9b 02 c0       	push   0xc0029b9f
c0017a22:	e8 9f 41 00 00       	call   c001bbc6 <Thr::loadKernelSymbolTable(char const*)>
c0017a27:	83 c4 10             	add    esp,0x10
c0017a2a:	8b 1d 28 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c928
c0017a30:	83 ec 08             	sub    esp,0x8
c0017a33:	6a 01                	push   0x1
c0017a35:	68 bd 9b 02 c0       	push   0xc0029bbd
c0017a3a:	e8 47 4c 00 00       	call   c001c686 <Thr::loadDLL(char const*, bool)>
c0017a3f:	83 c4 10             	add    esp,0x10
c0017a42:	83 ec 08             	sub    esp,0x8
c0017a45:	53                   	push   ebx
c0017a46:	50                   	push   eax
c0017a47:	e8 49 4e 00 00       	call   c001c895 <Thr::executeDLL(unsigned long, void*)>
c0017a4c:	83 c4 10             	add    esp,0x10
c0017a4f:	8b 1d 28 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c928
c0017a55:	83 ec 08             	sub    esp,0x8
c0017a58:	6a 01                	push   0x1
c0017a5a:	68 da 9b 02 c0       	push   0xc0029bda
c0017a5f:	e8 22 4c 00 00       	call   c001c686 <Thr::loadDLL(char const*, bool)>
c0017a64:	83 c4 10             	add    esp,0x10
c0017a67:	83 ec 08             	sub    esp,0x8
c0017a6a:	53                   	push   ebx
c0017a6b:	50                   	push   eax
c0017a6c:	e8 24 4e 00 00       	call   c001c895 <Thr::executeDLL(unsigned long, void*)>
c0017a71:	83 c4 10             	add    esp,0x10
c0017a74:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c0017a79:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017a7f:	83 e0 04             	and    eax,0x4
c0017a82:	84 c0                	test   al,al
c0017a84:	0f 84 d6 00 00 00    	je     c0017b60 <ACPI::open(int, int, void*)+0x1ca>
c0017a8a:	c7 44 24 0c 14 01 00 00 	mov    DWORD PTR [esp+0xc],0x114
c0017a92:	83 ec 0c             	sub    esp,0xc
c0017a95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017a99:	e8 36 7a ff ff       	call   c000f4d4 <malloc>
c0017a9e:	83 c4 10             	add    esp,0x10
c0017aa1:	89 c3                	mov    ebx,eax
c0017aa3:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c0017aa8:	83 ec 04             	sub    esp,0x4
c0017aab:	50                   	push   eax
c0017aac:	68 f7 9b 02 c0       	push   0xc0029bf7
c0017ab1:	53                   	push   ebx
c0017ab2:	e8 c9 b1 ff ff       	call   c0012c80 <File::File(char const*, Process*)>
c0017ab7:	83 c4 10             	add    esp,0x10
c0017aba:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0017abe:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017ac3:	74 17                	je     c0017adc <ACPI::open(int, int, void*)+0x146>
c0017ac5:	83 ec 0c             	sub    esp,0xc
c0017ac8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017acc:	e8 81 b4 ff ff       	call   c0012f52 <File::exists()>
c0017ad1:	83 c4 10             	add    esp,0x10
c0017ad4:	84 c0                	test   al,al
c0017ad6:	74 04                	je     c0017adc <ACPI::open(int, int, void*)+0x146>
c0017ad8:	b0 01                	mov    al,0x1
c0017ada:	eb 02                	jmp    c0017ade <ACPI::open(int, int, void*)+0x148>
c0017adc:	b0 00                	mov    al,0x0
c0017ade:	84 c0                	test   al,al
c0017ae0:	74 25                	je     c0017b07 <ACPI::open(int, int, void*)+0x171>
c0017ae2:	8b 1d 28 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c928
c0017ae8:	83 ec 08             	sub    esp,0x8
c0017aeb:	6a 01                	push   0x1
c0017aed:	68 f7 9b 02 c0       	push   0xc0029bf7
c0017af2:	e8 8f 4b 00 00       	call   c001c686 <Thr::loadDLL(char const*, bool)>
c0017af7:	83 c4 10             	add    esp,0x10
c0017afa:	83 ec 08             	sub    esp,0x8
c0017afd:	53                   	push   ebx
c0017afe:	50                   	push   eax
c0017aff:	e8 91 4d 00 00       	call   c001c895 <Thr::executeDLL(unsigned long, void*)>
c0017b04:	83 c4 10             	add    esp,0x10
c0017b07:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017b0c:	74 1e                	je     c0017b2c <ACPI::open(int, int, void*)+0x196>
c0017b0e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017b13:	74 17                	je     c0017b2c <ACPI::open(int, int, void*)+0x196>
c0017b15:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017b19:	8b 00                	mov    eax,DWORD PTR [eax]
c0017b1b:	83 c0 08             	add    eax,0x8
c0017b1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0017b20:	83 ec 0c             	sub    esp,0xc
c0017b23:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017b27:	ff d0                	call   eax
c0017b29:	83 c4 10             	add    esp,0x10
c0017b2c:	a1 c8 d1 02 c0       	mov    eax,ds:0xc002d1c8
c0017b31:	83 ec 08             	sub    esp,0x8
c0017b34:	68 14 9c 02 c0       	push   0xc0029c14
c0017b39:	50                   	push   eax
c0017b3a:	e8 9f f6 ff ff       	call   c00171de <findDataTable(unsigned char*, char*)>
c0017b3f:	83 c4 10             	add    esp,0x10
c0017b42:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017b46:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017b4b:	74 13                	je     c0017b60 <ACPI::open(int, int, void*)+0x1ca>
c0017b4d:	83 ec 08             	sub    esp,0x8
c0017b50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017b54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017b58:	e8 f1 fd ff ff       	call   c001794e <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0017b5d:	83 c4 10             	add    esp,0x10
c0017b60:	b8 00 00 00 00       	mov    eax,0x0
c0017b65:	83 c4 28             	add    esp,0x28
c0017b68:	5b                   	pop    ebx
c0017b69:	c3                   	ret    

c0017b6a <ACPI::sleep()>:
c0017b6a:	83 ec 0c             	sub    esp,0xc
c0017b6d:	a1 a0 cf 02 c0       	mov    eax,ds:0xc002cfa0
c0017b72:	85 c0                	test   eax,eax
c0017b74:	74 07                	je     c0017b7d <ACPI::sleep()+0x13>
c0017b76:	a1 a0 cf 02 c0       	mov    eax,ds:0xc002cfa0
c0017b7b:	ff d0                	call   eax
c0017b7d:	90                   	nop
c0017b7e:	83 c4 0c             	add    esp,0xc
c0017b81:	c3                   	ret    

c0017b82 <CPU::close(int, int, void*)>:
c0017b82:	31 c0                	xor    eax,eax
c0017b84:	c3                   	ret    
c0017b85:	90                   	nop

c0017b86 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0017b86:	55                   	push   ebp
c0017b87:	57                   	push   edi
c0017b88:	56                   	push   esi
c0017b89:	53                   	push   ebx
c0017b8a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017b8e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017b92:	89 ce                	mov    esi,ecx
c0017b94:	89 d5                	mov    ebp,edx
c0017b96:	80 f9 04             	cmp    cl,0x4
c0017b99:	75 28                	jne    c0017bc3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0017b9b:	8d 42 f9             	lea    eax,[edx-0x7]
c0017b9e:	3c 03                	cmp    al,0x3
c0017ba0:	0f 86 63 01 00 00    	jbe    c0017d09 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017ba6:	80 fa 03             	cmp    dl,0x3
c0017ba9:	0f 84 5a 01 00 00    	je     c0017d09 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017baf:	8d 7a f2             	lea    edi,[edx-0xe]
c0017bb2:	b8 50 bd 02 c0       	mov    eax,0xc002bd50
c0017bb7:	89 fb                	mov    ebx,edi
c0017bb9:	80 fb 01             	cmp    bl,0x1
c0017bbc:	77 4e                	ja     c0017c0c <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0017bbe:	e9 52 01 00 00       	jmp    c0017d15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017bc3:	80 f9 05             	cmp    cl,0x5
c0017bc6:	75 4d                	jne    c0017c15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0017bc8:	b8 60 bd 02 c0       	mov    eax,0xc002bd60
c0017bcd:	80 fa 03             	cmp    dl,0x3
c0017bd0:	0f 86 3f 01 00 00    	jbe    c0017d15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017bd6:	8d 7a fa             	lea    edi,[edx-0x6]
c0017bd9:	b8 70 bd 02 c0       	mov    eax,0xc002bd70
c0017bde:	89 fb                	mov    ebx,edi
c0017be0:	80 fb 01             	cmp    bl,0x1
c0017be3:	0f 86 2c 01 00 00    	jbe    c0017d15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017be9:	b8 80 bd 02 c0       	mov    eax,0xc002bd80
c0017bee:	80 fa 08             	cmp    dl,0x8
c0017bf1:	0f 84 1e 01 00 00    	je     c0017d15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017bf7:	89 d7                	mov    edi,edx
c0017bf9:	b8 90 bd 02 c0       	mov    eax,0xc002bd90
c0017bfe:	83 e7 fb             	and    edi,0xfffffffb
c0017c01:	89 fb                	mov    ebx,edi
c0017c03:	80 fb 09             	cmp    bl,0x9
c0017c06:	0f 84 09 01 00 00    	je     c0017d15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c0c:	31 c0                	xor    eax,eax
c0017c0e:	89 eb                	mov    ebx,ebp
c0017c10:	0f b6 fb             	movzx  edi,bl
c0017c13:	eb 30                	jmp    c0017c45 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0017c15:	31 c0                	xor    eax,eax
c0017c17:	80 f9 06             	cmp    cl,0x6
c0017c1a:	75 f2                	jne    c0017c0e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017c1c:	80 fa 0a             	cmp    dl,0xa
c0017c1f:	77 ed                	ja     c0017c0e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017c21:	bf de 05 00 00       	mov    edi,0x5de
c0017c26:	0f a3 d7             	bt     edi,edx
c0017c29:	73 e3                	jae    c0017c0e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017c2b:	b8 a0 bd 02 c0       	mov    eax,0xc002bda0
c0017c30:	e9 e0 00 00 00       	jmp    c0017d15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c35:	39 c7                	cmp    edi,eax
c0017c37:	0f 84 d3 00 00 00    	je     c0017d10 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017c3d:	40                   	inc    eax
c0017c3e:	3d d0 00 00 00       	cmp    eax,0xd0
c0017c43:	74 09                	je     c0017c4e <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0017c45:	89 f3                	mov    ebx,esi
c0017c47:	80 fb 0f             	cmp    bl,0xf
c0017c4a:	75 f1                	jne    c0017c3d <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0017c4c:	eb e7                	jmp    c0017c35 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0017c4e:	80 f9 10             	cmp    cl,0x10
c0017c51:	75 14                	jne    c0017c67 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0017c53:	8d 42 fc             	lea    eax,[edx-0x4]
c0017c56:	83 e0 fb             	and    eax,0xfffffffb
c0017c59:	3c 02                	cmp    al,0x2
c0017c5b:	76 34                	jbe    c0017c91 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0017c5d:	b8 5e a0 02 c0       	mov    eax,0xc002a05e
c0017c62:	80 fa 02             	cmp    dl,0x2
c0017c65:	eb 24                	jmp    c0017c8b <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0017c67:	80 f9 11             	cmp    cl,0x11
c0017c6a:	75 13                	jne    c0017c7f <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0017c6c:	b8 5e a0 02 c0       	mov    eax,0xc002a05e
c0017c71:	80 fa 03             	cmp    dl,0x3
c0017c74:	0f 85 9b 00 00 00    	jne    c0017d15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c7a:	e9 91 00 00 00       	jmp    c0017d10 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017c7f:	80 f9 12             	cmp    cl,0x12
c0017c82:	75 14                	jne    c0017c98 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0017c84:	b8 5e a0 02 c0       	mov    eax,0xc002a05e
c0017c89:	fe ca                	dec    dl
c0017c8b:	0f 85 84 00 00 00    	jne    c0017d15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c91:	b8 c0 bd 02 c0       	mov    eax,0xc002bdc0
c0017c96:	eb 7d                	jmp    c0017d15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c98:	80 f9 14             	cmp    cl,0x14
c0017c9b:	75 12                	jne    c0017caf <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0017c9d:	4a                   	dec    edx
c0017c9e:	b8 5e a0 02 c0       	mov    eax,0xc002a05e
c0017ca3:	80 fa 01             	cmp    dl,0x1
c0017ca6:	77 6d                	ja     c0017d15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017ca8:	b8 d0 bd 02 c0       	mov    eax,0xc002bdd0
c0017cad:	eb 66                	jmp    c0017d15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017caf:	80 f9 15             	cmp    cl,0x15
c0017cb2:	75 31                	jne    c0017ce5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0017cb4:	b8 e0 bd 02 c0       	mov    eax,0xc002bde0
c0017cb9:	80 fa 01             	cmp    dl,0x1
c0017cbc:	74 57                	je     c0017d15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017cbe:	b8 5e a0 02 c0       	mov    eax,0xc002a05e
c0017cc3:	80 fa 13             	cmp    dl,0x13
c0017cc6:	76 0c                	jbe    c0017cd4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0017cc8:	80 fa 30             	cmp    dl,0x30
c0017ccb:	75 48                	jne    c0017d15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017ccd:	b8 00 be 02 c0       	mov    eax,0xc002be00
c0017cd2:	eb 41                	jmp    c0017d15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017cd4:	b9 04 00 09 00       	mov    ecx,0x90004
c0017cd9:	0f a3 d1             	bt     ecx,edx
c0017cdc:	73 37                	jae    c0017d15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017cde:	b8 f0 bd 02 c0       	mov    eax,0xc002bdf0
c0017ce3:	eb 30                	jmp    c0017d15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017ce5:	b8 5e a0 02 c0       	mov    eax,0xc002a05e
c0017cea:	80 f9 16             	cmp    cl,0x16
c0017ced:	75 26                	jne    c0017d15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017cef:	b8 10 be 02 c0       	mov    eax,0xc002be10
c0017cf4:	84 d2                	test   dl,dl
c0017cf6:	74 1d                	je     c0017d15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017cf8:	b8 5e a0 02 c0       	mov    eax,0xc002a05e
c0017cfd:	80 fa 30             	cmp    dl,0x30
c0017d00:	75 13                	jne    c0017d15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d02:	b8 20 be 02 c0       	mov    eax,0xc002be20
c0017d07:	eb 0c                	jmp    c0017d15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d09:	b8 40 bd 02 c0       	mov    eax,0xc002bd40
c0017d0e:	eb 05                	jmp    c0017d15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d10:	b8 b0 bd 02 c0       	mov    eax,0xc002bdb0
c0017d15:	5b                   	pop    ebx
c0017d16:	5e                   	pop    esi
c0017d17:	5f                   	pop    edi
c0017d18:	5d                   	pop    ebp
c0017d19:	c3                   	ret    

c0017d1a <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0017d1a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017d1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017d22:	80 f9 04             	cmp    cl,0x4
c0017d25:	75 6b                	jne    c0017d92 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0017d27:	b8 a0 bb 02 c0       	mov    eax,0xc002bba0
c0017d2c:	80 fa 01             	cmp    dl,0x1
c0017d2f:	0f 86 92 02 00 00    	jbe    c0017fc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d35:	b8 b0 bb 02 c0       	mov    eax,0xc002bbb0
c0017d3a:	80 fa 02             	cmp    dl,0x2
c0017d3d:	0f 84 84 02 00 00    	je     c0017fc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d43:	b8 c0 bb 02 c0       	mov    eax,0xc002bbc0
c0017d48:	80 fa 03             	cmp    dl,0x3
c0017d4b:	0f 84 76 02 00 00    	je     c0017fc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d51:	b8 d0 bb 02 c0       	mov    eax,0xc002bbd0
c0017d56:	80 fa 04             	cmp    dl,0x4
c0017d59:	0f 84 68 02 00 00    	je     c0017fc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d5f:	b8 e0 bb 02 c0       	mov    eax,0xc002bbe0
c0017d64:	80 fa 05             	cmp    dl,0x5
c0017d67:	0f 84 5a 02 00 00    	je     c0017fc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d6d:	b8 c0 bb 02 c0       	mov    eax,0xc002bbc0
c0017d72:	80 fa 07             	cmp    dl,0x7
c0017d75:	0f 84 4c 02 00 00    	je     c0017fc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d7b:	83 ea 08             	sub    edx,0x8
c0017d7e:	b8 5e a0 02 c0       	mov    eax,0xc002a05e
c0017d83:	80 fa 01             	cmp    dl,0x1
c0017d86:	0f 87 3b 02 00 00    	ja     c0017fc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d8c:	b8 f0 bb 02 c0       	mov    eax,0xc002bbf0
c0017d91:	c3                   	ret    
c0017d92:	80 f9 05             	cmp    cl,0x5
c0017d95:	75 45                	jne    c0017ddc <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0017d97:	8d 4a ff             	lea    ecx,[edx-0x1]
c0017d9a:	b8 00 bc 02 c0       	mov    eax,0xc002bc00
c0017d9f:	80 f9 02             	cmp    cl,0x2
c0017da2:	0f 86 1f 02 00 00    	jbe    c0017fc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017da8:	80 fa 04             	cmp    dl,0x4
c0017dab:	0f 84 f3 01 00 00    	je     c0017fa4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0017db1:	80 fa 07             	cmp    dl,0x7
c0017db4:	0f 84 0d 02 00 00    	je     c0017fc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017dba:	b8 10 bc 02 c0       	mov    eax,0xc002bc10
c0017dbf:	80 fa 08             	cmp    dl,0x8
c0017dc2:	0f 84 ff 01 00 00    	je     c0017fc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017dc8:	b8 5e a0 02 c0       	mov    eax,0xc002a05e
c0017dcd:	80 fa 09             	cmp    dl,0x9
c0017dd0:	0f 85 f1 01 00 00    	jne    c0017fc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017dd6:	b8 20 bc 02 c0       	mov    eax,0xc002bc20
c0017ddb:	c3                   	ret    
c0017ddc:	80 f9 06             	cmp    cl,0x6
c0017ddf:	0f 85 85 01 00 00    	jne    c0017f6a <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0017de5:	b8 30 bc 02 c0       	mov    eax,0xc002bc30
c0017dea:	80 fa 01             	cmp    dl,0x1
c0017ded:	0f 84 d4 01 00 00    	je     c0017fc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017df3:	8d 42 fb             	lea    eax,[edx-0x5]
c0017df6:	3c 01                	cmp    al,0x1
c0017df8:	0f 86 ac 01 00 00    	jbe    c0017faa <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0017dfe:	80 fa 03             	cmp    dl,0x3
c0017e01:	0f 84 a3 01 00 00    	je     c0017faa <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0017e07:	8d 4a f9             	lea    ecx,[edx-0x7]
c0017e0a:	b8 50 bc 02 c0       	mov    eax,0xc002bc50
c0017e0f:	80 f9 01             	cmp    cl,0x1
c0017e12:	0f 86 af 01 00 00    	jbe    c0017fc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e18:	80 fa 09             	cmp    dl,0x9
c0017e1b:	0f 84 8f 01 00 00    	je     c0017fb0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0017e21:	8d 4a f6             	lea    ecx,[edx-0xa]
c0017e24:	80 f9 01             	cmp    cl,0x1
c0017e27:	0f 86 9a 01 00 00    	jbe    c0017fc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e2d:	b8 60 bc 02 c0       	mov    eax,0xc002bc60
c0017e32:	80 fa 0d             	cmp    dl,0xd
c0017e35:	0f 84 8c 01 00 00    	je     c0017fc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e3b:	b8 70 bc 02 c0       	mov    eax,0xc002bc70
c0017e40:	80 fa 0e             	cmp    dl,0xe
c0017e43:	0f 84 7e 01 00 00    	je     c0017fc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e49:	b8 80 bc 02 c0       	mov    eax,0xc002bc80
c0017e4e:	80 fa 0f             	cmp    dl,0xf
c0017e51:	0f 84 70 01 00 00    	je     c0017fc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e57:	b8 60 bc 02 c0       	mov    eax,0xc002bc60
c0017e5c:	80 fa 15             	cmp    dl,0x15
c0017e5f:	0f 84 62 01 00 00    	je     c0017fc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e65:	8d 4a ea             	lea    ecx,[edx-0x16]
c0017e68:	b8 80 bc 02 c0       	mov    eax,0xc002bc80
c0017e6d:	80 f9 01             	cmp    cl,0x1
c0017e70:	0f 86 51 01 00 00    	jbe    c0017fc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e76:	80 fa 1a             	cmp    dl,0x1a
c0017e79:	0f 84 37 01 00 00    	je     c0017fb6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0017e7f:	80 fa 1c             	cmp    dl,0x1c
c0017e82:	0f 84 34 01 00 00    	je     c0017fbc <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0017e88:	80 fa 1d             	cmp    dl,0x1d
c0017e8b:	0f 84 36 01 00 00    	je     c0017fc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e91:	b8 b0 bc 02 c0       	mov    eax,0xc002bcb0
c0017e96:	80 fa 25             	cmp    dl,0x25
c0017e99:	0f 84 28 01 00 00    	je     c0017fc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e9f:	8d 4a da             	lea    ecx,[edx-0x26]
c0017ea2:	b8 a0 bc 02 c0       	mov    eax,0xc002bca0
c0017ea7:	80 f9 01             	cmp    cl,0x1
c0017eaa:	0f 86 17 01 00 00    	jbe    c0017fc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017eb0:	b8 c0 bc 02 c0       	mov    eax,0xc002bcc0
c0017eb5:	80 fa 2a             	cmp    dl,0x2a
c0017eb8:	0f 84 09 01 00 00    	je     c0017fc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ebe:	b8 b0 bc 02 c0       	mov    eax,0xc002bcb0
c0017ec3:	80 fa 2c             	cmp    dl,0x2c
c0017ec6:	0f 84 fb 00 00 00    	je     c0017fc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ecc:	b8 c0 bc 02 c0       	mov    eax,0xc002bcc0
c0017ed1:	80 fa 2d             	cmp    dl,0x2d
c0017ed4:	0f 84 ed 00 00 00    	je     c0017fc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017eda:	b8 90 bc 02 c0       	mov    eax,0xc002bc90
c0017edf:	80 fa 2e             	cmp    dl,0x2e
c0017ee2:	0f 84 df 00 00 00    	je     c0017fc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ee8:	b8 b0 bc 02 c0       	mov    eax,0xc002bcb0
c0017eed:	80 fa 2f             	cmp    dl,0x2f
c0017ef0:	0f 84 d1 00 00 00    	je     c0017fc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ef6:	8d 4a cb             	lea    ecx,[edx-0x35]
c0017ef9:	b8 a0 bc 02 c0       	mov    eax,0xc002bca0
c0017efe:	80 f9 01             	cmp    cl,0x1
c0017f01:	0f 86 c0 00 00 00    	jbe    c0017fc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f07:	b8 d0 bc 02 c0       	mov    eax,0xc002bcd0
c0017f0c:	80 fa 37             	cmp    dl,0x37
c0017f0f:	0f 84 b2 00 00 00    	je     c0017fc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f15:	b8 e0 bc 02 c0       	mov    eax,0xc002bce0
c0017f1a:	80 fa 3a             	cmp    dl,0x3a
c0017f1d:	0f 84 a4 00 00 00    	je     c0017fc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f23:	b8 f0 bc 02 c0       	mov    eax,0xc002bcf0
c0017f28:	80 fa 3c             	cmp    dl,0x3c
c0017f2b:	0f 84 96 00 00 00    	je     c0017fc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f31:	b8 00 bd 02 c0       	mov    eax,0xc002bd00
c0017f36:	80 fa 3d             	cmp    dl,0x3d
c0017f39:	0f 84 88 00 00 00    	je     c0017fc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f3f:	b8 e0 bc 02 c0       	mov    eax,0xc002bce0
c0017f44:	80 fa 3e             	cmp    dl,0x3e
c0017f47:	74 7e                	je     c0017fc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f49:	8d 42 bb             	lea    eax,[edx-0x45]
c0017f4c:	3c 01                	cmp    al,0x1
c0017f4e:	76 72                	jbe    c0017fc2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0017f50:	80 fa 3f             	cmp    dl,0x3f
c0017f53:	74 6d                	je     c0017fc2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0017f55:	80 fa 4a             	cmp    dl,0x4a
c0017f58:	74 0a                	je     c0017f64 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0017f5a:	b8 5e a0 02 c0       	mov    eax,0xc002a05e
c0017f5f:	80 fa 4d             	cmp    dl,0x4d
c0017f62:	75 63                	jne    c0017fc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f64:	b8 d0 bc 02 c0       	mov    eax,0xc002bcd0
c0017f69:	c3                   	ret    
c0017f6a:	b8 5e a0 02 c0       	mov    eax,0xc002a05e
c0017f6f:	80 f9 0b             	cmp    cl,0xb
c0017f72:	75 0a                	jne    c0017f7e <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0017f74:	fe ca                	dec    dl
c0017f76:	75 4f                	jne    c0017fc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f78:	b8 10 bd 02 c0       	mov    eax,0xc002bd10
c0017f7d:	c3                   	ret    
c0017f7e:	80 f9 0f             	cmp    cl,0xf
c0017f81:	75 44                	jne    c0017fc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f83:	b8 20 bd 02 c0       	mov    eax,0xc002bd20
c0017f88:	80 fa 02             	cmp    dl,0x2
c0017f8b:	76 3a                	jbe    c0017fc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f8d:	8d 42 fd             	lea    eax,[edx-0x3]
c0017f90:	3c 01                	cmp    al,0x1
c0017f92:	76 0a                	jbe    c0017f9e <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0017f94:	b8 5e a0 02 c0       	mov    eax,0xc002a05e
c0017f99:	80 fa 06             	cmp    dl,0x6
c0017f9c:	75 29                	jne    c0017fc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f9e:	b8 30 bd 02 c0       	mov    eax,0xc002bd30
c0017fa3:	c3                   	ret    
c0017fa4:	b8 10 bc 02 c0       	mov    eax,0xc002bc10
c0017fa9:	c3                   	ret    
c0017faa:	b8 40 bc 02 c0       	mov    eax,0xc002bc40
c0017faf:	c3                   	ret    
c0017fb0:	b8 60 bc 02 c0       	mov    eax,0xc002bc60
c0017fb5:	c3                   	ret    
c0017fb6:	b8 90 bc 02 c0       	mov    eax,0xc002bc90
c0017fbb:	c3                   	ret    
c0017fbc:	b8 a0 bc 02 c0       	mov    eax,0xc002bca0
c0017fc1:	c3                   	ret    
c0017fc2:	b8 f0 bc 02 c0       	mov    eax,0xc002bcf0
c0017fc7:	c3                   	ret    

c0017fc8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0017fc8:	60                   	pusha  
c0017fc9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017fcd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017fd1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017fd5:	9c                   	pushf  
c0017fd6:	fa                   	cli    
c0017fd7:	0f 09                	wbinvd 
c0017fd9:	0f 30                	wrmsr  
c0017fdb:	9d                   	popf   
c0017fdc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017fe0:	89 02                	mov    DWORD PTR [edx],eax
c0017fe2:	61                   	popa   
c0017fe3:	c3                   	ret    

c0017fe4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0017fe4:	60                   	pusha  
c0017fe5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017fe9:	9c                   	pushf  
c0017fea:	fa                   	cli    
c0017feb:	0f 09                	wbinvd 
c0017fed:	31 c0                	xor    eax,eax
c0017fef:	31 d2                	xor    edx,edx
c0017ff1:	0f 32                	rdmsr  
c0017ff3:	9d                   	popf   
c0017ff4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017ff8:	89 02                	mov    DWORD PTR [edx],eax
c0017ffa:	61                   	popa   
c0017ffb:	c3                   	ret    

c0017ffc <CPU::AMD_K6_writeback(int, int, int)>:
c0017ffc:	56                   	push   esi
c0017ffd:	53                   	push   ebx
c0017ffe:	83 ec 10             	sub    esp,0x10
c0018001:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018005:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001800a:	75 5d                	jne    c0018069 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001800c:	83 f8 08             	cmp    eax,0x8
c001800f:	75 09                	jne    c001801a <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018011:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018016:	7e 13                	jle    c001802b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018018:	eb 30                	jmp    c001804a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001801a:	83 f8 06             	cmp    eax,0x6
c001801d:	7c 4a                	jl     c0018069 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001801f:	83 f8 07             	cmp    eax,0x7
c0018022:	7e 07                	jle    c001802b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018024:	83 f8 09             	cmp    eax,0x9
c0018027:	74 21                	je     c001804a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018029:	eb 3e                	jmp    c0018069 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001802b:	89 e6                	mov    esi,esp
c001802d:	8b 1d 64 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c964
c0018033:	56                   	push   esi
c0018034:	c1 eb 15             	shr    ebx,0x15
c0018037:	68 82 00 00 c0       	push   0xc0000082
c001803c:	83 e3 7e             	and    ebx,0x7e
c001803f:	e8 a0 ff ff ff       	call   c0017fe4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018044:	56                   	push   esi
c0018045:	6a 00                	push   0x0
c0018047:	53                   	push   ebx
c0018048:	eb 12                	jmp    c001805c <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001804a:	89 e3                	mov    ebx,esp
c001804c:	53                   	push   ebx
c001804d:	68 82 00 00 c0       	push   0xc0000082
c0018052:	e8 8d ff ff ff       	call   c0017fe4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018057:	53                   	push   ebx
c0018058:	6a 00                	push   0x0
c001805a:	6a 00                	push   0x0
c001805c:	68 82 00 00 c0       	push   0xc0000082
c0018061:	e8 62 ff ff ff       	call   c0017fc8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018066:	83 c4 18             	add    esp,0x18
c0018069:	83 c4 10             	add    esp,0x10
c001806c:	5b                   	pop    ebx
c001806d:	5e                   	pop    esi
c001806e:	c3                   	ret    
c001806f:	90                   	nop

c0018070 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018070:	55                   	push   ebp
c0018071:	57                   	push   edi
c0018072:	56                   	push   esi
c0018073:	53                   	push   ebx
c0018074:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018078:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001807c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018080:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018084:	39 05 40 be 02 c0    	cmp    DWORD PTR ds:0xc002be40,eax
c001808a:	75 23                	jne    c00180af <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001808c:	a1 2c d4 02 c0       	mov    eax,ds:0xc002d42c
c0018091:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018095:	89 06                	mov    DWORD PTR [esi],eax
c0018097:	a1 28 d4 02 c0       	mov    eax,ds:0xc002d428
c001809c:	89 07                	mov    DWORD PTR [edi],eax
c001809e:	a1 24 d4 02 c0       	mov    eax,ds:0xc002d424
c00180a3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00180a6:	a1 20 d4 02 c0       	mov    eax,ds:0xc002d420
c00180ab:	89 02                	mov    DWORD PTR [edx],eax
c00180ad:	eb 3f                	jmp    c00180ee <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00180af:	31 c9                	xor    ecx,ecx
c00180b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00180b5:	0f a2                	cpuid  
c00180b7:	89 06                	mov    DWORD PTR [esi],eax
c00180b9:	89 1f                	mov    DWORD PTR [edi],ebx
c00180bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00180bf:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00180c2:	89 10                	mov    DWORD PTR [eax],edx
c00180c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00180c8:	a3 40 be 02 c0       	mov    ds:0xc002be40,eax
c00180cd:	8b 06                	mov    eax,DWORD PTR [esi]
c00180cf:	a3 2c d4 02 c0       	mov    ds:0xc002d42c,eax
c00180d4:	8b 07                	mov    eax,DWORD PTR [edi]
c00180d6:	a3 28 d4 02 c0       	mov    ds:0xc002d428,eax
c00180db:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00180de:	a3 24 d4 02 c0       	mov    ds:0xc002d424,eax
c00180e3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00180e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00180e9:	a3 20 d4 02 c0       	mov    ds:0xc002d420,eax
c00180ee:	5b                   	pop    ebx
c00180ef:	5e                   	pop    esi
c00180f0:	5f                   	pop    edi
c00180f1:	5d                   	pop    ebp
c00180f2:	c3                   	ret    
c00180f3:	90                   	nop

c00180f4 <CPU::cpuidCheckEDX(unsigned int)>:
c00180f4:	83 ec 10             	sub    esp,0x10
c00180f7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00180fb:	50                   	push   eax
c00180fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018100:	50                   	push   eax
c0018101:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018105:	50                   	push   eax
c0018106:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001810a:	50                   	push   eax
c001810b:	6a 01                	push   0x1
c001810d:	e8 5e ff ff ff       	call   c0018070 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018112:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018116:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001811a:	0f 95 c0             	setne  al
c001811d:	83 c4 24             	add    esp,0x24
c0018120:	c3                   	ret    
c0018121:	90                   	nop

c0018122 <CPU::cpuidCheckECX(unsigned int)>:
c0018122:	83 ec 10             	sub    esp,0x10
c0018125:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018129:	50                   	push   eax
c001812a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001812e:	50                   	push   eax
c001812f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018133:	50                   	push   eax
c0018134:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018138:	50                   	push   eax
c0018139:	6a 01                	push   0x1
c001813b:	e8 30 ff ff ff       	call   c0018070 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018140:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018144:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018148:	0f 95 c0             	setne  al
c001814b:	83 c4 24             	add    esp,0x24
c001814e:	c3                   	ret    
c001814f:	90                   	nop

c0018150 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018150:	83 ec 10             	sub    esp,0x10
c0018153:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018157:	50                   	push   eax
c0018158:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001815c:	50                   	push   eax
c001815d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018161:	50                   	push   eax
c0018162:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018166:	50                   	push   eax
c0018167:	6a 07                	push   0x7
c0018169:	e8 02 ff ff ff       	call   c0018070 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001816e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018172:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018176:	0f 95 c0             	setne  al
c0018179:	83 c4 24             	add    esp,0x24
c001817c:	c3                   	ret    
c001817d:	90                   	nop

c001817e <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001817e:	83 ec 10             	sub    esp,0x10
c0018181:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018185:	50                   	push   eax
c0018186:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001818a:	50                   	push   eax
c001818b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001818f:	50                   	push   eax
c0018190:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018194:	50                   	push   eax
c0018195:	6a 07                	push   0x7
c0018197:	e8 d4 fe ff ff       	call   c0018070 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001819c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181a0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00181a4:	0f 95 c0             	setne  al
c00181a7:	83 c4 24             	add    esp,0x24
c00181aa:	c3                   	ret    
c00181ab:	90                   	nop

c00181ac <CPU::CPU()>:
c00181ac:	83 ec 0c             	sub    esp,0xc
c00181af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181b3:	83 ec 08             	sub    esp,0x8
c00181b6:	68 5e a0 02 c0       	push   0xc002a05e
c00181bb:	50                   	push   eax
c00181bc:	e8 6f bb ff ff       	call   c0013d30 <Device::Device(char const*)>
c00181c1:	83 c4 10             	add    esp,0x10
c00181c4:	ba 38 a1 02 c0       	mov    edx,0xc002a138
c00181c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181cd:	89 10                	mov    DWORD PTR [eax],edx
c00181cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181d3:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00181dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181e1:	05 78 01 00 00       	add    eax,0x178
c00181e6:	83 ec 0c             	sub    esp,0xc
c00181e9:	50                   	push   eax
c00181ea:	e8 fd 6a ff ff       	call   c000ecec <GDT::GDT()>
c00181ef:	83 c4 10             	add    esp,0x10
c00181f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181f6:	05 7c 09 00 00       	add    eax,0x97c
c00181fb:	83 ec 0c             	sub    esp,0xc
c00181fe:	50                   	push   eax
c00181ff:	e8 4a 6d ff ff       	call   c000ef4e <IDT::IDT()>
c0018204:	83 c4 10             	add    esp,0x10
c0018207:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001820b:	05 7c 11 00 00       	add    eax,0x117c
c0018210:	83 ec 0c             	sub    esp,0xc
c0018213:	50                   	push   eax
c0018214:	e8 79 8e ff ff       	call   c0011092 <TSS::TSS()>
c0018219:	83 c4 10             	add    esp,0x10
c001821c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018220:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018227:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001822b:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018235:	90                   	nop
c0018236:	83 c4 0c             	add    esp,0xc
c0018239:	c3                   	ret    

c001823a <CPU::displayFeatures()>:
c001823a:	53                   	push   ebx
c001823b:	83 ec 10             	sub    esp,0x10
c001823e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018242:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018248:	68 6c 9d 02 c0       	push   0xc0029d6c
c001824d:	e8 ff a4 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0018252:	59                   	pop    ecx
c0018253:	58                   	pop    eax
c0018254:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c001825a:	50                   	push   eax
c001825b:	68 7d 9d 02 c0       	push   0xc0029d7d
c0018260:	e8 ec a4 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0018265:	58                   	pop    eax
c0018266:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001826c:	5a                   	pop    edx
c001826d:	c1 e8 0e             	shr    eax,0xe
c0018270:	0f b6 c0             	movzx  eax,al
c0018273:	50                   	push   eax
c0018274:	68 8e 9d 02 c0       	push   0xc0029d8e
c0018279:	e8 d3 a4 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001827e:	59                   	pop    ecx
c001827f:	58                   	pop    eax
c0018280:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018286:	66 c1 e8 06          	shr    ax,0x6
c001828a:	0f b6 c0             	movzx  eax,al
c001828d:	50                   	push   eax
c001828e:	68 9f 9d 02 c0       	push   0xc0029d9f
c0018293:	e8 b9 a4 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0018298:	c7 04 24 3b a2 02 c0 	mov    DWORD PTR [esp],0xc002a23b
c001829f:	e8 ad a4 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c00182a4:	83 c4 10             	add    esp,0x10
c00182a7:	b8 3c 89 02 c0       	mov    eax,0xc002893c
c00182ac:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00182b3:	74 05                	je     c00182ba <CPU::displayFeatures()+0x80>
c00182b5:	b8 38 89 02 c0       	mov    eax,0xc0028938
c00182ba:	52                   	push   edx
c00182bb:	52                   	push   edx
c00182bc:	50                   	push   eax
c00182bd:	68 b0 9d 02 c0       	push   0xc0029db0
c00182c2:	e8 8a a4 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c00182c7:	83 c4 10             	add    esp,0x10
c00182ca:	b8 38 89 02 c0       	mov    eax,0xc0028938
c00182cf:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c00182d6:	78 05                	js     c00182dd <CPU::displayFeatures()+0xa3>
c00182d8:	b8 3c 89 02 c0       	mov    eax,0xc002893c
c00182dd:	51                   	push   ecx
c00182de:	51                   	push   ecx
c00182df:	50                   	push   eax
c00182e0:	68 c7 9d 02 c0       	push   0xc0029dc7
c00182e5:	e8 67 a4 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c00182ea:	83 c4 10             	add    esp,0x10
c00182ed:	b8 38 89 02 c0       	mov    eax,0xc0028938
c00182f2:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00182f9:	75 05                	jne    c0018300 <CPU::displayFeatures()+0xc6>
c00182fb:	b8 3c 89 02 c0       	mov    eax,0xc002893c
c0018300:	52                   	push   edx
c0018301:	52                   	push   edx
c0018302:	50                   	push   eax
c0018303:	68 de 9d 02 c0       	push   0xc0029dde
c0018308:	e8 44 a4 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001830d:	83 c4 10             	add    esp,0x10
c0018310:	b8 38 89 02 c0       	mov    eax,0xc0028938
c0018315:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c001831c:	75 05                	jne    c0018323 <CPU::displayFeatures()+0xe9>
c001831e:	b8 3c 89 02 c0       	mov    eax,0xc002893c
c0018323:	51                   	push   ecx
c0018324:	51                   	push   ecx
c0018325:	50                   	push   eax
c0018326:	68 f5 9d 02 c0       	push   0xc0029df5
c001832b:	e8 21 a4 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0018330:	83 c4 10             	add    esp,0x10
c0018333:	b8 38 89 02 c0       	mov    eax,0xc0028938
c0018338:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c001833f:	75 05                	jne    c0018346 <CPU::displayFeatures()+0x10c>
c0018341:	b8 3c 89 02 c0       	mov    eax,0xc002893c
c0018346:	52                   	push   edx
c0018347:	52                   	push   edx
c0018348:	50                   	push   eax
c0018349:	68 0c 9e 02 c0       	push   0xc0029e0c
c001834e:	e8 fe a3 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0018353:	83 c4 10             	add    esp,0x10
c0018356:	b8 38 89 02 c0       	mov    eax,0xc0028938
c001835b:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018362:	75 05                	jne    c0018369 <CPU::displayFeatures()+0x12f>
c0018364:	b8 3c 89 02 c0       	mov    eax,0xc002893c
c0018369:	51                   	push   ecx
c001836a:	51                   	push   ecx
c001836b:	50                   	push   eax
c001836c:	68 23 9e 02 c0       	push   0xc0029e23
c0018371:	e8 db a3 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0018376:	83 c4 10             	add    esp,0x10
c0018379:	b8 38 89 02 c0       	mov    eax,0xc0028938
c001837e:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018385:	75 05                	jne    c001838c <CPU::displayFeatures()+0x152>
c0018387:	b8 3c 89 02 c0       	mov    eax,0xc002893c
c001838c:	52                   	push   edx
c001838d:	52                   	push   edx
c001838e:	50                   	push   eax
c001838f:	68 3a 9e 02 c0       	push   0xc0029e3a
c0018394:	e8 b8 a3 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0018399:	83 c4 10             	add    esp,0x10
c001839c:	b8 38 89 02 c0       	mov    eax,0xc0028938
c00183a1:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00183a8:	75 05                	jne    c00183af <CPU::displayFeatures()+0x175>
c00183aa:	b8 3c 89 02 c0       	mov    eax,0xc002893c
c00183af:	51                   	push   ecx
c00183b0:	51                   	push   ecx
c00183b1:	50                   	push   eax
c00183b2:	68 51 9e 02 c0       	push   0xc0029e51
c00183b7:	e8 95 a3 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c00183bc:	83 c4 10             	add    esp,0x10
c00183bf:	b8 38 89 02 c0       	mov    eax,0xc0028938
c00183c4:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00183cb:	75 05                	jne    c00183d2 <CPU::displayFeatures()+0x198>
c00183cd:	b8 3c 89 02 c0       	mov    eax,0xc002893c
c00183d2:	52                   	push   edx
c00183d3:	52                   	push   edx
c00183d4:	50                   	push   eax
c00183d5:	68 68 9e 02 c0       	push   0xc0029e68
c00183da:	e8 72 a3 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c00183df:	83 c4 10             	add    esp,0x10
c00183e2:	b8 38 89 02 c0       	mov    eax,0xc0028938
c00183e7:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c00183ee:	75 05                	jne    c00183f5 <CPU::displayFeatures()+0x1bb>
c00183f0:	b8 3c 89 02 c0       	mov    eax,0xc002893c
c00183f5:	51                   	push   ecx
c00183f6:	51                   	push   ecx
c00183f7:	50                   	push   eax
c00183f8:	68 7f 9e 02 c0       	push   0xc0029e7f
c00183fd:	e8 4f a3 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0018402:	83 c4 10             	add    esp,0x10
c0018405:	b8 38 89 02 c0       	mov    eax,0xc0028938
c001840a:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018411:	75 05                	jne    c0018418 <CPU::displayFeatures()+0x1de>
c0018413:	b8 3c 89 02 c0       	mov    eax,0xc002893c
c0018418:	52                   	push   edx
c0018419:	52                   	push   edx
c001841a:	50                   	push   eax
c001841b:	68 96 9e 02 c0       	push   0xc0029e96
c0018420:	e8 2c a3 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0018425:	83 c4 10             	add    esp,0x10
c0018428:	b8 38 89 02 c0       	mov    eax,0xc0028938
c001842d:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018434:	75 05                	jne    c001843b <CPU::displayFeatures()+0x201>
c0018436:	b8 3c 89 02 c0       	mov    eax,0xc002893c
c001843b:	51                   	push   ecx
c001843c:	51                   	push   ecx
c001843d:	50                   	push   eax
c001843e:	68 ad 9e 02 c0       	push   0xc0029ead
c0018443:	e8 09 a3 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0018448:	83 c4 10             	add    esp,0x10
c001844b:	b8 38 89 02 c0       	mov    eax,0xc0028938
c0018450:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0018457:	75 05                	jne    c001845e <CPU::displayFeatures()+0x224>
c0018459:	b8 3c 89 02 c0       	mov    eax,0xc002893c
c001845e:	52                   	push   edx
c001845f:	52                   	push   edx
c0018460:	50                   	push   eax
c0018461:	68 c4 9e 02 c0       	push   0xc0029ec4
c0018466:	e8 e6 a2 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001846b:	83 c4 10             	add    esp,0x10
c001846e:	b8 38 89 02 c0       	mov    eax,0xc0028938
c0018473:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c001847a:	78 05                	js     c0018481 <CPU::displayFeatures()+0x247>
c001847c:	b8 3c 89 02 c0       	mov    eax,0xc002893c
c0018481:	51                   	push   ecx
c0018482:	51                   	push   ecx
c0018483:	50                   	push   eax
c0018484:	68 db 9e 02 c0       	push   0xc0029edb
c0018489:	e8 c3 a2 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001848e:	83 c4 10             	add    esp,0x10
c0018491:	b8 38 89 02 c0       	mov    eax,0xc0028938
c0018496:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c001849d:	75 05                	jne    c00184a4 <CPU::displayFeatures()+0x26a>
c001849f:	b8 3c 89 02 c0       	mov    eax,0xc002893c
c00184a4:	52                   	push   edx
c00184a5:	52                   	push   edx
c00184a6:	50                   	push   eax
c00184a7:	68 f2 9e 02 c0       	push   0xc0029ef2
c00184ac:	e8 a0 a2 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c00184b1:	83 c4 18             	add    esp,0x18
c00184b4:	5b                   	pop    ebx
c00184b5:	c3                   	ret    

c00184b6 <CPU::detectFeatures()>:
c00184b6:	55                   	push   ebp
c00184b7:	57                   	push   edi
c00184b8:	56                   	push   esi
c00184b9:	53                   	push   ebx
c00184ba:	83 ec 50             	sub    esp,0x50
c00184bd:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00184c1:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c00184cb:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c00184d2:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c00184d8:	6a 0d                	push   0xd
c00184da:	6a 00                	push   0x0
c00184dc:	57                   	push   edi
c00184dd:	e8 a9 81 fe ff       	call   c000068b <memset>
c00184e2:	83 c4 10             	add    esp,0x10
c00184e5:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c00184ea:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00184f1:	0f 84 20 09 00 00    	je     c0018e17 <CPU::detectFeatures()+0x961>
c00184f7:	83 ec 0c             	sub    esp,0xc
c00184fa:	6a 10                	push   0x10
c00184fc:	e8 f3 fb ff ff       	call   c00180f4 <CPU::cpuidCheckEDX(unsigned int)>
c0018501:	83 e0 01             	and    eax,0x1
c0018504:	8d 14 00             	lea    edx,[eax+eax*1]
c0018507:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001850d:	83 e0 fd             	and    eax,0xfffffffd
c0018510:	09 d0                	or     eax,edx
c0018512:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018518:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001851f:	e8 d0 fb ff ff       	call   c00180f4 <CPU::cpuidCheckEDX(unsigned int)>
c0018524:	83 e0 01             	and    eax,0x1
c0018527:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001852e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018534:	83 e0 fb             	and    eax,0xfffffffb
c0018537:	09 d0                	or     eax,edx
c0018539:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001853f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018546:	e8 a9 fb ff ff       	call   c00180f4 <CPU::cpuidCheckEDX(unsigned int)>
c001854b:	83 e0 01             	and    eax,0x1
c001854e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018555:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001855b:	83 e0 f7             	and    eax,0xfffffff7
c001855e:	09 d0                	or     eax,edx
c0018560:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018566:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001856d:	e8 82 fb ff ff       	call   c00180f4 <CPU::cpuidCheckEDX(unsigned int)>
c0018572:	83 e0 01             	and    eax,0x1
c0018575:	c1 e0 04             	shl    eax,0x4
c0018578:	88 c2                	mov    dl,al
c001857a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018580:	83 e0 ef             	and    eax,0xffffffef
c0018583:	09 d0                	or     eax,edx
c0018585:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001858b:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018592:	e8 5d fb ff ff       	call   c00180f4 <CPU::cpuidCheckEDX(unsigned int)>
c0018597:	83 e0 01             	and    eax,0x1
c001859a:	c1 e0 05             	shl    eax,0x5
c001859d:	88 c2                	mov    dl,al
c001859f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00185a5:	83 e0 df             	and    eax,0xffffffdf
c00185a8:	09 d0                	or     eax,edx
c00185aa:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00185b0:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00185b7:	e8 38 fb ff ff       	call   c00180f4 <CPU::cpuidCheckEDX(unsigned int)>
c00185bc:	83 e0 01             	and    eax,0x1
c00185bf:	8d 14 00             	lea    edx,[eax+eax*1]
c00185c2:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00185c8:	83 e0 fd             	and    eax,0xfffffffd
c00185cb:	09 d0                	or     eax,edx
c00185cd:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00185d3:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00185da:	e8 15 fb ff ff       	call   c00180f4 <CPU::cpuidCheckEDX(unsigned int)>
c00185df:	83 e0 01             	and    eax,0x1
c00185e2:	c1 e0 06             	shl    eax,0x6
c00185e5:	88 c2                	mov    dl,al
c00185e7:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00185ed:	83 e0 bf             	and    eax,0xffffffbf
c00185f0:	09 d0                	or     eax,edx
c00185f2:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00185f8:	58                   	pop    eax
c00185f9:	8d 74 24 28          	lea    esi,[esp+0x28]
c00185fd:	56                   	push   esi
c00185fe:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018602:	55                   	push   ebp
c0018603:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018607:	50                   	push   eax
c0018608:	8d 54 24 28          	lea    edx,[esp+0x28]
c001860c:	52                   	push   edx
c001860d:	6a 00                	push   0x0
c001860f:	e8 5c fa ff ff       	call   c0018070 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018614:	83 c4 1c             	add    esp,0x1c
c0018617:	6a 04                	push   0x4
c0018619:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001861d:	50                   	push   eax
c001861e:	57                   	push   edi
c001861f:	e8 31 80 fe ff       	call   c0000655 <memcpy>
c0018624:	83 c4 0c             	add    esp,0xc
c0018627:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c001862d:	6a 04                	push   0x4
c001862f:	56                   	push   esi
c0018630:	50                   	push   eax
c0018631:	e8 1f 80 fe ff       	call   c0000655 <memcpy>
c0018636:	83 c4 0c             	add    esp,0xc
c0018639:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c001863f:	6a 04                	push   0x4
c0018641:	55                   	push   ebp
c0018642:	50                   	push   eax
c0018643:	e8 0d 80 fe ff       	call   c0000655 <memcpy>
c0018648:	58                   	pop    eax
c0018649:	5a                   	pop    edx
c001864a:	68 09 9f 02 c0       	push   0xc0029f09
c001864f:	57                   	push   edi
c0018650:	e8 26 81 fe ff       	call   c000077b <strcmp>
c0018655:	83 c4 10             	add    esp,0x10
c0018658:	85 c0                	test   eax,eax
c001865a:	75 0f                	jne    c001866b <CPU::detectFeatures()+0x1b5>
c001865c:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018666:	e9 22 02 00 00       	jmp    c001888d <CPU::detectFeatures()+0x3d7>
c001866b:	50                   	push   eax
c001866c:	50                   	push   eax
c001866d:	68 16 9f 02 c0       	push   0xc0029f16
c0018672:	57                   	push   edi
c0018673:	e8 03 81 fe ff       	call   c000077b <strcmp>
c0018678:	83 c4 10             	add    esp,0x10
c001867b:	85 c0                	test   eax,eax
c001867d:	74 dd                	je     c001865c <CPU::detectFeatures()+0x1a6>
c001867f:	51                   	push   ecx
c0018680:	51                   	push   ecx
c0018681:	68 23 9f 02 c0       	push   0xc0029f23
c0018686:	57                   	push   edi
c0018687:	e8 ef 80 fe ff       	call   c000077b <strcmp>
c001868c:	83 c4 10             	add    esp,0x10
c001868f:	85 c0                	test   eax,eax
c0018691:	74 2a                	je     c00186bd <CPU::detectFeatures()+0x207>
c0018693:	52                   	push   edx
c0018694:	52                   	push   edx
c0018695:	68 30 9f 02 c0       	push   0xc0029f30
c001869a:	57                   	push   edi
c001869b:	e8 db 80 fe ff       	call   c000077b <strcmp>
c00186a0:	83 c4 10             	add    esp,0x10
c00186a3:	85 c0                	test   eax,eax
c00186a5:	74 16                	je     c00186bd <CPU::detectFeatures()+0x207>
c00186a7:	50                   	push   eax
c00186a8:	50                   	push   eax
c00186a9:	68 3d 9f 02 c0       	push   0xc0029f3d
c00186ae:	57                   	push   edi
c00186af:	e8 c7 80 fe ff       	call   c000077b <strcmp>
c00186b4:	83 c4 10             	add    esp,0x10
c00186b7:	85 c0                	test   eax,eax
c00186b9:	74 48                	je     c0018703 <CPU::detectFeatures()+0x24d>
c00186bb:	eb 0f                	jmp    c00186cc <CPU::detectFeatures()+0x216>
c00186bd:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00186c7:	e9 c1 01 00 00       	jmp    c001888d <CPU::detectFeatures()+0x3d7>
c00186cc:	50                   	push   eax
c00186cd:	50                   	push   eax
c00186ce:	68 4a 9f 02 c0       	push   0xc0029f4a
c00186d3:	57                   	push   edi
c00186d4:	e8 a2 80 fe ff       	call   c000077b <strcmp>
c00186d9:	83 c4 10             	add    esp,0x10
c00186dc:	85 c0                	test   eax,eax
c00186de:	74 23                	je     c0018703 <CPU::detectFeatures()+0x24d>
c00186e0:	50                   	push   eax
c00186e1:	50                   	push   eax
c00186e2:	68 57 9f 02 c0       	push   0xc0029f57
c00186e7:	57                   	push   edi
c00186e8:	e8 8e 80 fe ff       	call   c000077b <strcmp>
c00186ed:	83 c4 10             	add    esp,0x10
c00186f0:	85 c0                	test   eax,eax
c00186f2:	75 1e                	jne    c0018712 <CPU::detectFeatures()+0x25c>
c00186f4:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00186fe:	e9 8a 01 00 00       	jmp    c001888d <CPU::detectFeatures()+0x3d7>
c0018703:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001870d:	e9 7b 01 00 00       	jmp    c001888d <CPU::detectFeatures()+0x3d7>
c0018712:	50                   	push   eax
c0018713:	50                   	push   eax
c0018714:	68 64 9f 02 c0       	push   0xc0029f64
c0018719:	57                   	push   edi
c001871a:	e8 5c 80 fe ff       	call   c000077b <strcmp>
c001871f:	83 c4 10             	add    esp,0x10
c0018722:	85 c0                	test   eax,eax
c0018724:	75 0f                	jne    c0018735 <CPU::detectFeatures()+0x27f>
c0018726:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018730:	e9 58 01 00 00       	jmp    c001888d <CPU::detectFeatures()+0x3d7>
c0018735:	50                   	push   eax
c0018736:	50                   	push   eax
c0018737:	68 23 9f 02 c0       	push   0xc0029f23
c001873c:	57                   	push   edi
c001873d:	e8 39 80 fe ff       	call   c000077b <strcmp>
c0018742:	83 c4 10             	add    esp,0x10
c0018745:	85 c0                	test   eax,eax
c0018747:	75 0f                	jne    c0018758 <CPU::detectFeatures()+0x2a2>
c0018749:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018753:	e9 35 01 00 00       	jmp    c001888d <CPU::detectFeatures()+0x3d7>
c0018758:	50                   	push   eax
c0018759:	50                   	push   eax
c001875a:	68 71 9f 02 c0       	push   0xc0029f71
c001875f:	57                   	push   edi
c0018760:	e8 16 80 fe ff       	call   c000077b <strcmp>
c0018765:	83 c4 10             	add    esp,0x10
c0018768:	85 c0                	test   eax,eax
c001876a:	75 0f                	jne    c001877b <CPU::detectFeatures()+0x2c5>
c001876c:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018776:	e9 12 01 00 00       	jmp    c001888d <CPU::detectFeatures()+0x3d7>
c001877b:	51                   	push   ecx
c001877c:	51                   	push   ecx
c001877d:	68 7e 9f 02 c0       	push   0xc0029f7e
c0018782:	57                   	push   edi
c0018783:	e8 f3 7f fe ff       	call   c000077b <strcmp>
c0018788:	83 c4 10             	add    esp,0x10
c001878b:	85 c0                	test   eax,eax
c001878d:	75 0f                	jne    c001879e <CPU::detectFeatures()+0x2e8>
c001878f:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018799:	e9 ef 00 00 00       	jmp    c001888d <CPU::detectFeatures()+0x3d7>
c001879e:	52                   	push   edx
c001879f:	52                   	push   edx
c00187a0:	68 8b 9f 02 c0       	push   0xc0029f8b
c00187a5:	57                   	push   edi
c00187a6:	e8 d0 7f fe ff       	call   c000077b <strcmp>
c00187ab:	83 c4 10             	add    esp,0x10
c00187ae:	85 c0                	test   eax,eax
c00187b0:	75 0f                	jne    c00187c1 <CPU::detectFeatures()+0x30b>
c00187b2:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00187bc:	e9 cc 00 00 00       	jmp    c001888d <CPU::detectFeatures()+0x3d7>
c00187c1:	50                   	push   eax
c00187c2:	50                   	push   eax
c00187c3:	68 98 9f 02 c0       	push   0xc0029f98
c00187c8:	57                   	push   edi
c00187c9:	e8 ad 7f fe ff       	call   c000077b <strcmp>
c00187ce:	83 c4 10             	add    esp,0x10
c00187d1:	85 c0                	test   eax,eax
c00187d3:	75 0f                	jne    c00187e4 <CPU::detectFeatures()+0x32e>
c00187d5:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00187df:	e9 a9 00 00 00       	jmp    c001888d <CPU::detectFeatures()+0x3d7>
c00187e4:	50                   	push   eax
c00187e5:	50                   	push   eax
c00187e6:	68 a5 9f 02 c0       	push   0xc0029fa5
c00187eb:	57                   	push   edi
c00187ec:	e8 8a 7f fe ff       	call   c000077b <strcmp>
c00187f1:	83 c4 10             	add    esp,0x10
c00187f4:	85 c0                	test   eax,eax
c00187f6:	75 0f                	jne    c0018807 <CPU::detectFeatures()+0x351>
c00187f8:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018802:	e9 86 00 00 00       	jmp    c001888d <CPU::detectFeatures()+0x3d7>
c0018807:	50                   	push   eax
c0018808:	50                   	push   eax
c0018809:	68 b2 9f 02 c0       	push   0xc0029fb2
c001880e:	57                   	push   edi
c001880f:	e8 67 7f fe ff       	call   c000077b <strcmp>
c0018814:	83 c4 10             	add    esp,0x10
c0018817:	85 c0                	test   eax,eax
c0018819:	75 0c                	jne    c0018827 <CPU::detectFeatures()+0x371>
c001881b:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018825:	eb 66                	jmp    c001888d <CPU::detectFeatures()+0x3d7>
c0018827:	50                   	push   eax
c0018828:	50                   	push   eax
c0018829:	68 bf 9f 02 c0       	push   0xc0029fbf
c001882e:	57                   	push   edi
c001882f:	e8 47 7f fe ff       	call   c000077b <strcmp>
c0018834:	83 c4 10             	add    esp,0x10
c0018837:	85 c0                	test   eax,eax
c0018839:	75 0c                	jne    c0018847 <CPU::detectFeatures()+0x391>
c001883b:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018845:	eb 46                	jmp    c001888d <CPU::detectFeatures()+0x3d7>
c0018847:	50                   	push   eax
c0018848:	50                   	push   eax
c0018849:	68 cc 9f 02 c0       	push   0xc0029fcc
c001884e:	57                   	push   edi
c001884f:	e8 27 7f fe ff       	call   c000077b <strcmp>
c0018854:	83 c4 10             	add    esp,0x10
c0018857:	85 c0                	test   eax,eax
c0018859:	74 e0                	je     c001883b <CPU::detectFeatures()+0x385>
c001885b:	50                   	push   eax
c001885c:	50                   	push   eax
c001885d:	68 d9 9f 02 c0       	push   0xc0029fd9
c0018862:	57                   	push   edi
c0018863:	e8 13 7f fe ff       	call   c000077b <strcmp>
c0018868:	83 c4 10             	add    esp,0x10
c001886b:	85 c0                	test   eax,eax
c001886d:	74 cc                	je     c001883b <CPU::detectFeatures()+0x385>
c001886f:	51                   	push   ecx
c0018870:	51                   	push   ecx
c0018871:	68 e6 9f 02 c0       	push   0xc0029fe6
c0018876:	57                   	push   edi
c0018877:	e8 ff 7e fe ff       	call   c000077b <strcmp>
c001887c:	83 c4 10             	add    esp,0x10
c001887f:	85 c0                	test   eax,eax
c0018881:	74 b8                	je     c001883b <CPU::detectFeatures()+0x385>
c0018883:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001888d:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0018892:	0f 86 be 00 00 00    	jbe    c0018956 <CPU::detectFeatures()+0x4a0>
c0018898:	83 ec 0c             	sub    esp,0xc
c001889b:	68 80 00 00 00       	push   0x80
c00188a0:	e8 ab f8 ff ff       	call   c0018150 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00188a5:	83 e0 01             	and    eax,0x1
c00188a8:	c1 e0 06             	shl    eax,0x6
c00188ab:	88 c2                	mov    dl,al
c00188ad:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00188b3:	83 e0 bf             	and    eax,0xffffffbf
c00188b6:	09 d0                	or     eax,edx
c00188b8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00188be:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00188c5:	e8 86 f8 ff ff       	call   c0018150 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00188ca:	83 e0 01             	and    eax,0x1
c00188cd:	c1 e0 04             	shl    eax,0x4
c00188d0:	88 c2                	mov    dl,al
c00188d2:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00188d8:	83 e0 ef             	and    eax,0xffffffef
c00188db:	09 d0                	or     eax,edx
c00188dd:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00188e3:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00188ea:	e8 61 f8 ff ff       	call   c0018150 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00188ef:	c1 e0 07             	shl    eax,0x7
c00188f2:	88 c2                	mov    dl,al
c00188f4:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00188fa:	83 e0 7f             	and    eax,0x7f
c00188fd:	09 d0                	or     eax,edx
c00188ff:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018905:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001890c:	e8 6d f8 ff ff       	call   c001817e <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018911:	83 e0 01             	and    eax,0x1
c0018914:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001891b:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018921:	83 e0 f7             	and    eax,0xfffffff7
c0018924:	09 d0                	or     eax,edx
c0018926:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001892c:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018933:	e8 46 f8 ff ff       	call   c001817e <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018938:	83 c4 10             	add    esp,0x10
c001893b:	83 e0 01             	and    eax,0x1
c001893e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018945:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001894b:	83 e0 fb             	and    eax,0xfffffffb
c001894e:	09 d0                	or     eax,edx
c0018950:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018956:	83 ec 0c             	sub    esp,0xc
c0018959:	56                   	push   esi
c001895a:	55                   	push   ebp
c001895b:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001895f:	57                   	push   edi
c0018960:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018964:	50                   	push   eax
c0018965:	6a 01                	push   0x1
c0018967:	e8 04 f7 ff ff       	call   c0018070 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001896c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018970:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018976:	88 ca                	mov    dl,cl
c0018978:	83 e0 f0             	and    eax,0xfffffff0
c001897b:	83 e2 0f             	and    edx,0xf
c001897e:	09 d0                	or     eax,edx
c0018980:	88 ca                	mov    dl,cl
c0018982:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018988:	c0 ea 04             	shr    dl,0x4
c001898b:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c001898f:	0f b6 c2             	movzx  eax,dl
c0018992:	83 c4 20             	add    esp,0x20
c0018995:	c1 e0 06             	shl    eax,0x6
c0018998:	89 c5                	mov    ebp,eax
c001899a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00189a0:	66 25 3f c0          	and    ax,0xc03f
c00189a4:	09 e8                	or     eax,ebp
c00189a6:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00189ad:	89 c8                	mov    eax,ecx
c00189af:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00189b5:	c1 e8 08             	shr    eax,0x8
c00189b8:	83 e2 3f             	and    edx,0x3f
c00189bb:	83 e0 0f             	and    eax,0xf
c00189be:	89 c5                	mov    ebp,eax
c00189c0:	c1 e5 06             	shl    ebp,0x6
c00189c3:	09 d5                	or     ebp,edx
c00189c5:	89 ea                	mov    edx,ebp
c00189c7:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00189cd:	88 c2                	mov    dl,al
c00189cf:	c0 ea 02             	shr    dl,0x2
c00189d2:	89 d5                	mov    ebp,edx
c00189d4:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00189da:	83 e2 c0             	and    edx,0xffffffc0
c00189dd:	09 d5                	or     ebp,edx
c00189df:	89 ea                	mov    edx,ebp
c00189e1:	89 cd                	mov    ebp,ecx
c00189e3:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00189e9:	c1 ed 0c             	shr    ebp,0xc
c00189ec:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00189f2:	83 e5 03             	and    ebp,0x3
c00189f5:	83 e2 cf             	and    edx,0xffffffcf
c00189f8:	c1 e5 04             	shl    ebp,0x4
c00189fb:	09 d5                	or     ebp,edx
c00189fd:	3c 06                	cmp    al,0x6
c00189ff:	89 ea                	mov    edx,ebp
c0018a01:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018a07:	74 04                	je     c0018a0d <CPU::detectFeatures()+0x557>
c0018a09:	3c 0f                	cmp    al,0xf
c0018a0b:	75 5c                	jne    c0018a69 <CPU::detectFeatures()+0x5b3>
c0018a0d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018a11:	89 cd                	mov    ebp,ecx
c0018a13:	c1 ed 10             	shr    ebp,0x10
c0018a16:	c1 e5 04             	shl    ebp,0x4
c0018a19:	09 ea                	or     edx,ebp
c0018a1b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0018a21:	0f b6 d2             	movzx  edx,dl
c0018a24:	66 81 e5 3f c0       	and    bp,0xc03f
c0018a29:	c1 e2 06             	shl    edx,0x6
c0018a2c:	09 ea                	or     edx,ebp
c0018a2e:	3c 0f                	cmp    al,0xf
c0018a30:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018a37:	75 30                	jne    c0018a69 <CPU::detectFeatures()+0x5b3>
c0018a39:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0018a3f:	c1 e9 14             	shr    ecx,0x14
c0018a42:	83 e0 3f             	and    eax,0x3f
c0018a45:	83 c1 0f             	add    ecx,0xf
c0018a48:	88 ca                	mov    dl,cl
c0018a4a:	c0 e9 02             	shr    cl,0x2
c0018a4d:	c1 e2 06             	shl    edx,0x6
c0018a50:	09 d0                	or     eax,edx
c0018a52:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018a58:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0018a5e:	83 e0 c0             	and    eax,0xffffffc0
c0018a61:	09 c1                	or     ecx,eax
c0018a63:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0018a69:	83 ec 0c             	sub    esp,0xc
c0018a6c:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018a73:	56                   	push   esi
c0018a74:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018a78:	50                   	push   eax
c0018a79:	57                   	push   edi
c0018a7a:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018a7e:	55                   	push   ebp
c0018a7f:	68 00 00 00 80       	push   0x80000000
c0018a84:	e8 e7 f5 ff ff       	call   c0018070 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018a89:	83 c4 20             	add    esp,0x20
c0018a8c:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018a94:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018a98:	76 1e                	jbe    c0018ab8 <CPU::detectFeatures()+0x602>
c0018a9a:	83 ec 0c             	sub    esp,0xc
c0018a9d:	56                   	push   esi
c0018a9e:	50                   	push   eax
c0018a9f:	57                   	push   edi
c0018aa0:	55                   	push   ebp
c0018aa1:	68 01 00 00 80       	push   0x80000001
c0018aa6:	e8 c5 f5 ff ff       	call   c0018070 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018aab:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0018ab5:	83 c4 20             	add    esp,0x20
c0018ab8:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018abe:	83 f8 01             	cmp    eax,0x1
c0018ac1:	75 6f                	jne    c0018b32 <CPU::detectFeatures()+0x67c>
c0018ac3:	51                   	push   ecx
c0018ac4:	51                   	push   ecx
c0018ac5:	68 f2 9f 02 c0       	push   0xc0029ff2
c0018aca:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018ace:	56                   	push   esi
c0018acf:	e8 56 7c fe ff       	call   c000072a <strcpy>
c0018ad4:	5f                   	pop    edi
c0018ad5:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018adb:	5d                   	pop    ebp
c0018adc:	66 c1 e8 06          	shr    ax,0x6
c0018ae0:	0f b6 c0             	movzx  eax,al
c0018ae3:	50                   	push   eax
c0018ae4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018aea:	c1 e8 0e             	shr    eax,0xe
c0018aed:	0f b6 c0             	movzx  eax,al
c0018af0:	50                   	push   eax
c0018af1:	e8 24 f2 ff ff       	call   c0017d1a <CPU::lookupIntelName(unsigned char, unsigned char)>
c0018af6:	5a                   	pop    edx
c0018af7:	59                   	pop    ecx
c0018af8:	50                   	push   eax
c0018af9:	56                   	push   esi
c0018afa:	e8 e2 7c fe ff       	call   c00007e1 <strcat>
c0018aff:	5f                   	pop    edi
c0018b00:	5d                   	pop    ebp
c0018b01:	56                   	push   esi
c0018b02:	53                   	push   ebx
c0018b03:	e8 1a b2 ff ff       	call   c0013d22 <Device::setName(char const*)>
c0018b08:	58                   	pop    eax
c0018b09:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018b0f:	5a                   	pop    edx
c0018b10:	68 f9 9f 02 c0       	push   0xc0029ff9
c0018b15:	50                   	push   eax
c0018b16:	e8 60 7c fe ff       	call   c000077b <strcmp>
c0018b1b:	83 c4 10             	add    esp,0x10
c0018b1e:	85 c0                	test   eax,eax
c0018b20:	0f 85 71 03 00 00    	jne    c0018e97 <CPU::detectFeatures()+0x9e1>
c0018b26:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0018b2d:	e9 65 03 00 00       	jmp    c0018e97 <CPU::detectFeatures()+0x9e1>
c0018b32:	83 f8 02             	cmp    eax,0x2
c0018b35:	0f 85 b5 00 00 00    	jne    c0018bf0 <CPU::detectFeatures()+0x73a>
c0018b3b:	57                   	push   edi
c0018b3c:	57                   	push   edi
c0018b3d:	68 0b a0 02 c0       	push   0xc002a00b
c0018b42:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018b46:	56                   	push   esi
c0018b47:	e8 de 7b fe ff       	call   c000072a <strcpy>
c0018b4c:	5d                   	pop    ebp
c0018b4d:	58                   	pop    eax
c0018b4e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018b54:	66 c1 e8 06          	shr    ax,0x6
c0018b58:	0f b6 c0             	movzx  eax,al
c0018b5b:	50                   	push   eax
c0018b5c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018b62:	c1 e8 0e             	shr    eax,0xe
c0018b65:	0f b6 c0             	movzx  eax,al
c0018b68:	50                   	push   eax
c0018b69:	e8 18 f0 ff ff       	call   c0017b86 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0018b6e:	5a                   	pop    edx
c0018b6f:	59                   	pop    ecx
c0018b70:	50                   	push   eax
c0018b71:	56                   	push   esi
c0018b72:	e8 6a 7c fe ff       	call   c00007e1 <strcat>
c0018b77:	5f                   	pop    edi
c0018b78:	5d                   	pop    ebp
c0018b79:	56                   	push   esi
c0018b7a:	53                   	push   ebx
c0018b7b:	e8 a2 b1 ff ff       	call   c0013d22 <Device::setName(char const*)>
c0018b80:	58                   	pop    eax
c0018b81:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018b87:	5a                   	pop    edx
c0018b88:	68 10 a0 02 c0       	push   0xc002a010
c0018b8d:	50                   	push   eax
c0018b8e:	e8 e8 7b fe ff       	call   c000077b <strcmp>
c0018b93:	83 c4 10             	add    esp,0x10
c0018b96:	85 c0                	test   eax,eax
c0018b98:	75 20                	jne    c0018bba <CPU::detectFeatures()+0x704>
c0018b9a:	8b 15 28 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c928
c0018ba0:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0018ba6:	a8 01                	test   al,0x1
c0018ba8:	74 10                	je     c0018bba <CPU::detectFeatures()+0x704>
c0018baa:	83 e0 fe             	and    eax,0xfffffffe
c0018bad:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0018bb3:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0018bba:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018bc0:	c1 e8 0e             	shr    eax,0xe
c0018bc3:	3c 05                	cmp    al,0x5
c0018bc5:	0f 85 cc 02 00 00    	jne    c0018e97 <CPU::detectFeatures()+0x9e1>
c0018bcb:	56                   	push   esi
c0018bcc:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018bd2:	83 e0 0f             	and    eax,0xf
c0018bd5:	50                   	push   eax
c0018bd6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018bdc:	66 c1 e8 06          	shr    ax,0x6
c0018be0:	0f b6 c0             	movzx  eax,al
c0018be3:	50                   	push   eax
c0018be4:	6a 05                	push   0x5
c0018be6:	e8 11 f4 ff ff       	call   c0017ffc <CPU::AMD_K6_writeback(int, int, int)>
c0018beb:	e9 1f 02 00 00       	jmp    c0018e0f <CPU::detectFeatures()+0x959>
c0018bf0:	8d 50 fd             	lea    edx,[eax-0x3]
c0018bf3:	83 fa 01             	cmp    edx,0x1
c0018bf6:	76 09                	jbe    c0018c01 <CPU::detectFeatures()+0x74b>
c0018bf8:	83 f8 06             	cmp    eax,0x6
c0018bfb:	0f 85 91 01 00 00    	jne    c0018d92 <CPU::detectFeatures()+0x8dc>
c0018c01:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018c07:	c1 ea 0e             	shr    edx,0xe
c0018c0a:	80 fa 05             	cmp    dl,0x5
c0018c0d:	75 7b                	jne    c0018c8a <CPU::detectFeatures()+0x7d4>
c0018c0f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018c15:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018c1a:	66 81 fa 00 01       	cmp    dx,0x100
c0018c1f:	75 0c                	jne    c0018c2d <CPU::detectFeatures()+0x777>
c0018c21:	51                   	push   ecx
c0018c22:	51                   	push   ecx
c0018c23:	68 17 a0 02 c0       	push   0xc002a017
c0018c28:	e9 dc 01 00 00       	jmp    c0018e09 <CPU::detectFeatures()+0x953>
c0018c2d:	66 81 fa 00 02       	cmp    dx,0x200
c0018c32:	75 0c                	jne    c0018c40 <CPU::detectFeatures()+0x78a>
c0018c34:	52                   	push   edx
c0018c35:	52                   	push   edx
c0018c36:	68 2a a0 02 c0       	push   0xc002a02a
c0018c3b:	e9 c9 01 00 00       	jmp    c0018e09 <CPU::detectFeatures()+0x953>
c0018c40:	66 81 fa 40 02       	cmp    dx,0x240
c0018c45:	75 0c                	jne    c0018c53 <CPU::detectFeatures()+0x79d>
c0018c47:	50                   	push   eax
c0018c48:	50                   	push   eax
c0018c49:	68 3c a0 02 c0       	push   0xc002a03c
c0018c4e:	e9 b6 01 00 00       	jmp    c0018e09 <CPU::detectFeatures()+0x953>
c0018c53:	83 f8 06             	cmp    eax,0x6
c0018c56:	75 0c                	jne    c0018c64 <CPU::detectFeatures()+0x7ae>
c0018c58:	50                   	push   eax
c0018c59:	50                   	push   eax
c0018c5a:	68 4e a0 02 c0       	push   0xc002a04e
c0018c5f:	e9 a5 01 00 00       	jmp    c0018e09 <CPU::detectFeatures()+0x953>
c0018c64:	83 f8 04             	cmp    eax,0x4
c0018c67:	75 0c                	jne    c0018c75 <CPU::detectFeatures()+0x7bf>
c0018c69:	50                   	push   eax
c0018c6a:	50                   	push   eax
c0018c6b:	68 5a a0 02 c0       	push   0xc002a05a
c0018c70:	e9 94 01 00 00       	jmp    c0018e09 <CPU::detectFeatures()+0x953>
c0018c75:	83 f8 03             	cmp    eax,0x3
c0018c78:	0f 85 19 02 00 00    	jne    c0018e97 <CPU::detectFeatures()+0x9e1>
c0018c7e:	50                   	push   eax
c0018c7f:	50                   	push   eax
c0018c80:	68 62 a0 02 c0       	push   0xc002a062
c0018c85:	e9 7f 01 00 00       	jmp    c0018e09 <CPU::detectFeatures()+0x953>
c0018c8a:	80 fa 06             	cmp    dl,0x6
c0018c8d:	0f 85 db 00 00 00    	jne    c0018d6e <CPU::detectFeatures()+0x8b8>
c0018c93:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018c99:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018c9e:	66 81 fa 80 01       	cmp    dx,0x180
c0018ca3:	75 0c                	jne    c0018cb1 <CPU::detectFeatures()+0x7fb>
c0018ca5:	50                   	push   eax
c0018ca6:	50                   	push   eax
c0018ca7:	68 6d a0 02 c0       	push   0xc002a06d
c0018cac:	e9 58 01 00 00       	jmp    c0018e09 <CPU::detectFeatures()+0x953>
c0018cb1:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0018cb7:	66 f7 c1 80 ff       	test   cx,0xff80
c0018cbc:	75 0c                	jne    c0018cca <CPU::detectFeatures()+0x814>
c0018cbe:	50                   	push   eax
c0018cbf:	50                   	push   eax
c0018cc0:	68 7d a0 02 c0       	push   0xc002a07d
c0018cc5:	e9 3f 01 00 00       	jmp    c0018e09 <CPU::detectFeatures()+0x953>
c0018cca:	66 81 fa 40 02       	cmp    dx,0x240
c0018ccf:	75 0c                	jne    c0018cdd <CPU::detectFeatures()+0x827>
c0018cd1:	55                   	push   ebp
c0018cd2:	55                   	push   ebp
c0018cd3:	68 84 a0 02 c0       	push   0xc002a084
c0018cd8:	e9 2c 01 00 00       	jmp    c0018e09 <CPU::detectFeatures()+0x953>
c0018cdd:	66 81 fa 80 02       	cmp    dx,0x280
c0018ce2:	75 0c                	jne    c0018cf0 <CPU::detectFeatures()+0x83a>
c0018ce4:	57                   	push   edi
c0018ce5:	57                   	push   edi
c0018ce6:	68 8d a0 02 c0       	push   0xc002a08d
c0018ceb:	e9 19 01 00 00       	jmp    c0018e09 <CPU::detectFeatures()+0x953>
c0018cf0:	66 81 fa 40 03       	cmp    dx,0x340
c0018cf5:	74 ed                	je     c0018ce4 <CPU::detectFeatures()+0x82e>
c0018cf7:	66 81 fa c0 03       	cmp    dx,0x3c0
c0018cfc:	75 0c                	jne    c0018d0a <CPU::detectFeatures()+0x854>
c0018cfe:	56                   	push   esi
c0018cff:	56                   	push   esi
c0018d00:	68 94 a0 02 c0       	push   0xc002a094
c0018d05:	e9 ff 00 00 00       	jmp    c0018e09 <CPU::detectFeatures()+0x953>
c0018d0a:	83 f8 06             	cmp    eax,0x6
c0018d0d:	0f 84 45 ff ff ff    	je     c0018c58 <CPU::detectFeatures()+0x7a2>
c0018d13:	83 f8 04             	cmp    eax,0x4
c0018d16:	0f 84 4d ff ff ff    	je     c0018c69 <CPU::detectFeatures()+0x7b3>
c0018d1c:	83 f8 03             	cmp    eax,0x3
c0018d1f:	0f 85 72 01 00 00    	jne    c0018e97 <CPU::detectFeatures()+0x9e1>
c0018d25:	51                   	push   ecx
c0018d26:	51                   	push   ecx
c0018d27:	68 9d a0 02 c0       	push   0xc002a09d
c0018d2c:	53                   	push   ebx
c0018d2d:	e8 f0 af ff ff       	call   c0013d22 <Device::setName(char const*)>
c0018d32:	b1 c1                	mov    cl,0xc1
c0018d34:	88 c8                	mov    al,cl
c0018d36:	e6 22                	out    0x22,al
c0018d38:	e4 23                	in     al,0x23
c0018d3a:	88 c2                	mov    dl,al
c0018d3c:	88 c8                	mov    al,cl
c0018d3e:	e6 22                	out    0x22,al
c0018d40:	88 d0                	mov    al,dl
c0018d42:	83 c8 10             	or     eax,0x10
c0018d45:	e6 23                	out    0x23,al
c0018d47:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0018d4e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0018d51:	89 d0                	mov    eax,edx
c0018d53:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0018d59:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0018d5d:	40                   	inc    eax
c0018d5e:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0018d64:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0018d69:	e9 a1 00 00 00       	jmp    c0018e0f <CPU::detectFeatures()+0x959>
c0018d6e:	83 f8 06             	cmp    eax,0x6
c0018d71:	0f 84 e1 fe ff ff    	je     c0018c58 <CPU::detectFeatures()+0x7a2>
c0018d77:	83 f8 04             	cmp    eax,0x4
c0018d7a:	0f 84 e9 fe ff ff    	je     c0018c69 <CPU::detectFeatures()+0x7b3>
c0018d80:	83 f8 03             	cmp    eax,0x3
c0018d83:	0f 85 0e 01 00 00    	jne    c0018e97 <CPU::detectFeatures()+0x9e1>
c0018d89:	52                   	push   edx
c0018d8a:	52                   	push   edx
c0018d8b:	68 a8 a0 02 c0       	push   0xc002a0a8
c0018d90:	eb 77                	jmp    c0018e09 <CPU::detectFeatures()+0x953>
c0018d92:	83 f8 07             	cmp    eax,0x7
c0018d95:	75 09                	jne    c0018da0 <CPU::detectFeatures()+0x8ea>
c0018d97:	50                   	push   eax
c0018d98:	50                   	push   eax
c0018d99:	68 b2 a0 02 c0       	push   0xc002a0b2
c0018d9e:	eb 69                	jmp    c0018e09 <CPU::detectFeatures()+0x953>
c0018da0:	83 f8 0a             	cmp    eax,0xa
c0018da3:	75 09                	jne    c0018dae <CPU::detectFeatures()+0x8f8>
c0018da5:	50                   	push   eax
c0018da6:	50                   	push   eax
c0018da7:	68 bd a0 02 c0       	push   0xc002a0bd
c0018dac:	eb 5b                	jmp    c0018e09 <CPU::detectFeatures()+0x953>
c0018dae:	83 f8 0b             	cmp    eax,0xb
c0018db1:	75 09                	jne    c0018dbc <CPU::detectFeatures()+0x906>
c0018db3:	50                   	push   eax
c0018db4:	50                   	push   eax
c0018db5:	68 c5 a0 02 c0       	push   0xc002a0c5
c0018dba:	eb 4d                	jmp    c0018e09 <CPU::detectFeatures()+0x953>
c0018dbc:	83 f8 08             	cmp    eax,0x8
c0018dbf:	75 09                	jne    c0018dca <CPU::detectFeatures()+0x914>
c0018dc1:	50                   	push   eax
c0018dc2:	50                   	push   eax
c0018dc3:	68 ce a0 02 c0       	push   0xc002a0ce
c0018dc8:	eb 3f                	jmp    c0018e09 <CPU::detectFeatures()+0x953>
c0018dca:	83 f8 09             	cmp    eax,0x9
c0018dcd:	75 09                	jne    c0018dd8 <CPU::detectFeatures()+0x922>
c0018dcf:	50                   	push   eax
c0018dd0:	50                   	push   eax
c0018dd1:	68 d6 a0 02 c0       	push   0xc002a0d6
c0018dd6:	eb 31                	jmp    c0018e09 <CPU::detectFeatures()+0x953>
c0018dd8:	83 f8 05             	cmp    eax,0x5
c0018ddb:	75 09                	jne    c0018de6 <CPU::detectFeatures()+0x930>
c0018ddd:	50                   	push   eax
c0018dde:	50                   	push   eax
c0018ddf:	68 de a0 02 c0       	push   0xc002a0de
c0018de4:	eb 23                	jmp    c0018e09 <CPU::detectFeatures()+0x953>
c0018de6:	83 f8 0c             	cmp    eax,0xc
c0018de9:	75 09                	jne    c0018df4 <CPU::detectFeatures()+0x93e>
c0018deb:	55                   	push   ebp
c0018dec:	55                   	push   ebp
c0018ded:	68 ec a0 02 c0       	push   0xc002a0ec
c0018df2:	eb 15                	jmp    c0018e09 <CPU::detectFeatures()+0x953>
c0018df4:	83 f8 0d             	cmp    eax,0xd
c0018df7:	75 09                	jne    c0018e02 <CPU::detectFeatures()+0x94c>
c0018df9:	57                   	push   edi
c0018dfa:	57                   	push   edi
c0018dfb:	68 f7 a0 02 c0       	push   0xc002a0f7
c0018e00:	eb 07                	jmp    c0018e09 <CPU::detectFeatures()+0x953>
c0018e02:	56                   	push   esi
c0018e03:	56                   	push   esi
c0018e04:	68 0b a1 02 c0       	push   0xc002a10b
c0018e09:	53                   	push   ebx
c0018e0a:	e8 13 af ff ff       	call   c0013d22 <Device::setName(char const*)>
c0018e0f:	83 c4 10             	add    esp,0x10
c0018e12:	e9 80 00 00 00       	jmp    c0018e97 <CPU::detectFeatures()+0x9e1>
c0018e17:	51                   	push   ecx
c0018e18:	51                   	push   ecx
c0018e19:	68 57 9f 02 c0       	push   0xc0029f57
c0018e1e:	57                   	push   edi
c0018e1f:	e8 06 79 fe ff       	call   c000072a <strcpy>
c0018e24:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018e2e:	e8 30 74 fe ff       	call   c0000263 <is486>
c0018e33:	83 c4 10             	add    esp,0x10
c0018e36:	85 c0                	test   eax,eax
c0018e38:	74 2b                	je     c0018e65 <CPU::detectFeatures()+0x9af>
c0018e3a:	52                   	push   edx
c0018e3b:	52                   	push   edx
c0018e3c:	68 17 a1 02 c0       	push   0xc002a117
c0018e41:	53                   	push   ebx
c0018e42:	e8 db ae ff ff       	call   c0013d22 <Device::setName(char const*)>
c0018e47:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018e4e:	0f 20 c0             	mov    eax,cr0
c0018e51:	83 e0 14             	and    eax,0x14
c0018e54:	83 c4 10             	add    esp,0x10
c0018e57:	83 f8 04             	cmp    eax,0x4
c0018e5a:	75 1f                	jne    c0018e7b <CPU::detectFeatures()+0x9c5>
c0018e5c:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0018e63:	eb 32                	jmp    c0018e97 <CPU::detectFeatures()+0x9e1>
c0018e65:	50                   	push   eax
c0018e66:	50                   	push   eax
c0018e67:	68 22 a1 02 c0       	push   0xc002a122
c0018e6c:	53                   	push   ebx
c0018e6d:	e8 b0 ae ff ff       	call   c0013d22 <Device::setName(char const*)>
c0018e72:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0018e79:	eb d3                	jmp    c0018e4e <CPU::detectFeatures()+0x998>
c0018e7b:	e8 be 73 fe ff       	call   c000023e <hasLegacyFPU>
c0018e80:	83 e0 01             	and    eax,0x1
c0018e83:	8d 14 00             	lea    edx,[eax+eax*1]
c0018e86:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018e8c:	83 e0 fd             	and    eax,0xfffffffd
c0018e8f:	09 d0                	or     eax,edx
c0018e91:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018e97:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0018e9e:	83 c4 4c             	add    esp,0x4c
c0018ea1:	5b                   	pop    ebx
c0018ea2:	5e                   	pop    esi
c0018ea3:	5f                   	pop    edi
c0018ea4:	5d                   	pop    ebp
c0018ea5:	c3                   	ret    

c0018ea6 <CPU::setupSMEP()>:
c0018ea6:	0f 20 e0             	mov    eax,cr4
c0018ea9:	0d 00 00 10 00       	or     eax,0x100000
c0018eae:	0f 22 e0             	mov    cr4,eax
c0018eb1:	c3                   	ret    

c0018eb2 <CPU::setupUMIP()>:
c0018eb2:	0f 20 e0             	mov    eax,cr4
c0018eb5:	80 cc 08             	or     ah,0x8
c0018eb8:	0f 22 e0             	mov    cr4,eax
c0018ebb:	c3                   	ret    

c0018ebc <CPU::setupTSC()>:
c0018ebc:	0f 20 e0             	mov    eax,cr4
c0018ebf:	83 c8 04             	or     eax,0x4
c0018ec2:	0f 22 e0             	mov    cr4,eax
c0018ec5:	c3                   	ret    

c0018ec6 <CPU::setupLargePages()>:
c0018ec6:	0f 20 e0             	mov    eax,cr4
c0018ec9:	83 c8 10             	or     eax,0x10
c0018ecc:	0f 22 e0             	mov    cr4,eax
c0018ecf:	c3                   	ret    

c0018ed0 <CPU::setupPAT()>:
c0018ed0:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c0018ed5:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0018edc:	74 2c                	je     c0018f0a <CPU::setupPAT()+0x3a>
c0018ede:	53                   	push   ebx
c0018edf:	83 ec 10             	sub    esp,0x10
c0018ee2:	68 77 02 00 00       	push   0x277
c0018ee7:	50                   	push   eax
c0018ee8:	e8 8f 5b ff ff       	call   c000ea7c <Computer::rdmsr(unsigned int)>
c0018eed:	83 e2 f8             	and    edx,0xfffffff8
c0018ef0:	83 ca 01             	or     edx,0x1
c0018ef3:	52                   	push   edx
c0018ef4:	50                   	push   eax
c0018ef5:	68 77 02 00 00       	push   0x277
c0018efa:	ff 35 28 c9 02 c0    	push   DWORD PTR ds:0xc002c928
c0018f00:	e8 a3 5b ff ff       	call   c000eaa8 <Computer::wrmsr(unsigned int, unsigned long long)>
c0018f05:	83 c4 28             	add    esp,0x28
c0018f08:	5b                   	pop    ebx
c0018f09:	c3                   	ret    
c0018f0a:	c3                   	ret    
c0018f0b:	90                   	nop

c0018f0c <CPU::setupMTRR()>:
c0018f0c:	c3                   	ret    
c0018f0d:	90                   	nop

c0018f0e <CPU::setupGlobalPages()>:
c0018f0e:	0f 20 e0             	mov    eax,cr4
c0018f11:	0c 80                	or     al,0x80
c0018f13:	0f 22 e0             	mov    cr4,eax
c0018f16:	c3                   	ret    
c0018f17:	90                   	nop

c0018f18 <CPU::allowUsermodeDataAccess()>:
c0018f18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018f1c:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018f23:	74 03                	je     c0018f28 <CPU::allowUsermodeDataAccess()+0x10>
c0018f25:	0f 01 cb             	stac   
c0018f28:	c3                   	ret    
c0018f29:	90                   	nop

c0018f2a <CPU::prohibitUsermodeDataAccess()>:
c0018f2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018f2e:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018f35:	74 03                	je     c0018f3a <CPU::prohibitUsermodeDataAccess()+0x10>
c0018f37:	0f 01 ca             	clac   
c0018f3a:	c3                   	ret    
c0018f3b:	90                   	nop

c0018f3c <CPU::setupSMAP()>:
c0018f3c:	0f 20 e0             	mov    eax,cr4
c0018f3f:	0d 00 00 20 00       	or     eax,0x200000
c0018f44:	0f 22 e0             	mov    cr4,eax
c0018f47:	eb e1                	jmp    c0018f2a <CPU::prohibitUsermodeDataAccess()>
c0018f49:	90                   	nop

c0018f4a <CPU::setupFeatures()>:
c0018f4a:	83 ec 0c             	sub    esp,0xc
c0018f4d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018f51:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0018f58:	74 07                	je     c0018f61 <CPU::setupFeatures()+0x17>
c0018f5a:	52                   	push   edx
c0018f5b:	e8 46 ff ff ff       	call   c0018ea6 <CPU::setupSMEP()>
c0018f60:	58                   	pop    eax
c0018f61:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0018f68:	74 07                	je     c0018f71 <CPU::setupFeatures()+0x27>
c0018f6a:	52                   	push   edx
c0018f6b:	e8 cc ff ff ff       	call   c0018f3c <CPU::setupSMAP()>
c0018f70:	58                   	pop    eax
c0018f71:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0018f78:	74 07                	je     c0018f81 <CPU::setupFeatures()+0x37>
c0018f7a:	52                   	push   edx
c0018f7b:	e8 32 ff ff ff       	call   c0018eb2 <CPU::setupUMIP()>
c0018f80:	58                   	pop    eax
c0018f81:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0018f88:	74 07                	je     c0018f91 <CPU::setupFeatures()+0x47>
c0018f8a:	52                   	push   edx
c0018f8b:	e8 2c ff ff ff       	call   c0018ebc <CPU::setupTSC()>
c0018f90:	58                   	pop    eax
c0018f91:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0018f98:	74 07                	je     c0018fa1 <CPU::setupFeatures()+0x57>
c0018f9a:	52                   	push   edx
c0018f9b:	e8 26 ff ff ff       	call   c0018ec6 <CPU::setupLargePages()>
c0018fa0:	59                   	pop    ecx
c0018fa1:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0018fa8:	74 07                	je     c0018fb1 <CPU::setupFeatures()+0x67>
c0018faa:	52                   	push   edx
c0018fab:	e8 5e ff ff ff       	call   c0018f0e <CPU::setupGlobalPages()>
c0018fb0:	58                   	pop    eax
c0018fb1:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0018fb8:	74 0c                	je     c0018fc6 <CPU::setupFeatures()+0x7c>
c0018fba:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0018fbe:	83 c4 0c             	add    esp,0xc
c0018fc1:	e9 0a ff ff ff       	jmp    c0018ed0 <CPU::setupPAT()>
c0018fc6:	83 c4 0c             	add    esp,0xc
c0018fc9:	c3                   	ret    

c0018fca <CPU::open(int, int, void*)>:
c0018fca:	57                   	push   edi
c0018fcb:	56                   	push   esi
c0018fcc:	53                   	push   ebx
c0018fcd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018fd1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018fd5:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0018fdb:	83 ec 0c             	sub    esp,0xc
c0018fde:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0018fe4:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0018fea:	50                   	push   eax
c0018feb:	e8 78 5d ff ff       	call   c000ed68 <GDT::setup()>
c0018ff0:	83 c4 0c             	add    esp,0xc
c0018ff3:	6a 00                	push   0x0
c0018ff5:	68 ef be ad de       	push   0xdeadbeef
c0018ffa:	57                   	push   edi
c0018ffb:	e8 d2 80 ff ff       	call   c00110d2 <TSS::setup(unsigned long, unsigned long)>
c0019000:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019003:	e8 aa 80 ff ff       	call   c00110b2 <TSS::flush()>
c0019008:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001900e:	89 04 24             	mov    DWORD PTR [esp],eax
c0019011:	e8 ae 5f ff ff       	call   c000efc4 <IDT::setup()>
c0019016:	b8 00 04 00 00       	mov    eax,0x400
c001901b:	0f 23 f8             	mov    db7,eax
c001901e:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019028:	e8 51 6a ff ff       	call   c000fa7e <Phys::allocatePage()>
c001902d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019033:	89 30                	mov    DWORD PTR [eax],esi
c0019035:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001903b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001903e:	58                   	pop    eax
c001903f:	5a                   	pop    edx
c0019040:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019046:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001904a:	e8 b5 90 ff ff       	call   c0012104 <VAS::setCPUSpecific(unsigned long)>
c001904f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019052:	e8 5f f4 ff ff       	call   c00184b6 <CPU::detectFeatures()>
c0019057:	e8 aa bf ff ff       	call   c0015006 <setupInterruptController()>
c001905c:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019062:	a1 40 c9 02 c0       	mov    eax,ds:0xc002c940
c0019067:	83 e0 10             	and    eax,0x10
c001906a:	83 f8 01             	cmp    eax,0x1
c001906d:	19 c0                	sbb    eax,eax
c001906f:	83 e0 46             	and    eax,0x46
c0019072:	83 c0 1e             	add    eax,0x1e
c0019075:	89 04 24             	mov    DWORD PTR [esp],eax
c0019078:	e8 41 d4 ff ff       	call   c00164be <setupTimer(int)>
c001907d:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019083:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019086:	e8 bf fe ff ff       	call   c0018f4a <CPU::setupFeatures()>
c001908b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001908e:	e8 a7 f1 ff ff       	call   c001823a <CPU::displayFeatures()>
c0019093:	83 c4 10             	add    esp,0x10
c0019096:	31 c0                	xor    eax,eax
c0019098:	5b                   	pop    ebx
c0019099:	5e                   	pop    esi
c001909a:	5f                   	pop    edi
c001909b:	c3                   	ret    

c001909c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c001909c:	57                   	push   edi
c001909d:	56                   	push   esi
c001909e:	53                   	push   ebx
c001909f:	51                   	push   ecx
c00190a0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00190a4:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c00190a7:	0f 02 c0             	lar    eax,ax
c00190aa:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c00190ad:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00190b1:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c00190b4:	88 ca                	mov    dl,cl
c00190b6:	c0 ea 06             	shr    dl,0x6
c00190b9:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c00190bd:	89 ca                	mov    edx,ecx
c00190bf:	66 c1 ea 03          	shr    dx,0x3
c00190c3:	83 e2 07             	and    edx,0x7
c00190c6:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c00190cb:	88 17                	mov    BYTE PTR [edi],dl
c00190cd:	0f 84 a6 01 00 00    	je     c0019279 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c00190d3:	83 e1 07             	and    ecx,0x7
c00190d6:	80 f9 04             	cmp    cl,0x4
c00190d9:	0f 84 98 00 00 00    	je     c0019177 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c00190df:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00190e4:	0f 95 c0             	setne  al
c00190e7:	80 f9 05             	cmp    cl,0x5
c00190ea:	0f 95 c2             	setne  dl
c00190ed:	08 c2                	or     dl,al
c00190ef:	74 79                	je     c001916a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c00190f1:	84 c9                	test   cl,cl
c00190f3:	75 05                	jne    c00190fa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c00190f5:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00190f8:	eb 3c                	jmp    c0019136 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00190fa:	80 f9 01             	cmp    cl,0x1
c00190fd:	75 05                	jne    c0019104 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c00190ff:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019102:	eb 32                	jmp    c0019136 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019104:	80 f9 02             	cmp    cl,0x2
c0019107:	75 05                	jne    c001910e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019109:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001910c:	eb 28                	jmp    c0019136 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001910e:	31 c0                	xor    eax,eax
c0019110:	80 f9 03             	cmp    cl,0x3
c0019113:	75 05                	jne    c001911a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019115:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019118:	eb 1c                	jmp    c0019136 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001911a:	80 f9 05             	cmp    cl,0x5
c001911d:	75 05                	jne    c0019124 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c001911f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019122:	eb 12                	jmp    c0019136 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019124:	80 f9 06             	cmp    cl,0x6
c0019127:	75 05                	jne    c001912e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019129:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001912c:	eb 08                	jmp    c0019136 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001912e:	80 f9 07             	cmp    cl,0x7
c0019131:	75 03                	jne    c0019136 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019133:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019136:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001913b:	75 10                	jne    c001914d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c001913d:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019141:	b9 03 00 00 00       	mov    ecx,0x3
c0019146:	01 d0                	add    eax,edx
c0019148:	e9 37 01 00 00       	jmp    c0019284 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001914d:	b9 02 00 00 00       	mov    ecx,0x2
c0019152:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019157:	0f 85 27 01 00 00    	jne    c0019284 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001915d:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019160:	b9 06 00 00 00       	mov    ecx,0x6
c0019165:	e9 1a 01 00 00       	jmp    c0019284 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001916a:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c001916d:	b9 06 00 00 00       	mov    ecx,0x6
c0019172:	e9 0f 01 00 00       	jmp    c0019286 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019177:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c001917a:	88 ca                	mov    dl,cl
c001917c:	c0 ea 06             	shr    dl,0x6
c001917f:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019183:	89 ca                	mov    edx,ecx
c0019185:	66 c1 ea 03          	shr    dx,0x3
c0019189:	83 e2 07             	and    edx,0x7
c001918c:	80 e1 07             	and    cl,0x7
c001918f:	75 05                	jne    c0019196 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019191:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019194:	eb 4c                	jmp    c00191e2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019196:	80 f9 01             	cmp    cl,0x1
c0019199:	75 05                	jne    c00191a0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c001919b:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001919e:	eb 42                	jmp    c00191e2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00191a0:	80 f9 02             	cmp    cl,0x2
c00191a3:	75 05                	jne    c00191aa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c00191a5:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00191a8:	eb 38                	jmp    c00191e2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00191aa:	80 f9 03             	cmp    cl,0x3
c00191ad:	75 05                	jne    c00191b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c00191af:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c00191b2:	eb 2e                	jmp    c00191e2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00191b4:	80 f9 04             	cmp    cl,0x4
c00191b7:	75 12                	jne    c00191cb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c00191b9:	f6 c4 60             	test   ah,0x60
c00191bc:	75 08                	jne    c00191c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c00191be:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00191c1:	8d 78 14             	lea    edi,[eax+0x14]
c00191c4:	eb 1c                	jmp    c00191e2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00191c6:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c00191c9:	eb 17                	jmp    c00191e2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00191cb:	80 f9 05             	cmp    cl,0x5
c00191ce:	75 05                	jne    c00191d5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c00191d0:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00191d3:	eb 0d                	jmp    c00191e2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00191d5:	80 f9 06             	cmp    cl,0x6
c00191d8:	75 05                	jne    c00191df <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c00191da:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00191dd:	eb 03                	jmp    c00191e2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00191df:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c00191e2:	84 d2                	test   dl,dl
c00191e4:	75 05                	jne    c00191eb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c00191e6:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00191e9:	eb 3c                	jmp    c0019227 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00191eb:	80 fa 01             	cmp    dl,0x1
c00191ee:	75 05                	jne    c00191f5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c00191f0:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00191f3:	eb 32                	jmp    c0019227 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00191f5:	80 fa 02             	cmp    dl,0x2
c00191f8:	75 05                	jne    c00191ff <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c00191fa:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00191fd:	eb 28                	jmp    c0019227 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00191ff:	80 fa 03             	cmp    dl,0x3
c0019202:	75 05                	jne    c0019209 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019204:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019207:	eb 1e                	jmp    c0019227 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019209:	31 c0                	xor    eax,eax
c001920b:	80 fa 04             	cmp    dl,0x4
c001920e:	74 17                	je     c0019227 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019210:	80 fa 05             	cmp    dl,0x5
c0019213:	75 05                	jne    c001921a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019215:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019218:	eb 0d                	jmp    c0019227 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001921a:	80 fa 06             	cmp    dl,0x6
c001921d:	75 05                	jne    c0019224 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001921f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019222:	eb 03                	jmp    c0019227 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019224:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019227:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001922c:	0f 94 c2             	sete   dl
c001922f:	80 f9 05             	cmp    cl,0x5
c0019232:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019236:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c001923b:	d3 e0                	shl    eax,cl
c001923d:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019241:	74 0a                	je     c001924d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019243:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019246:	b9 07 00 00 00       	mov    ecx,0x7
c001924b:	eb 37                	jmp    c0019284 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001924d:	01 f8                	add    eax,edi
c001924f:	b9 03 00 00 00       	mov    ecx,0x3
c0019254:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019259:	74 2b                	je     c0019286 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001925b:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019260:	75 0d                	jne    c001926f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019262:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019266:	01 c8                	add    eax,ecx
c0019268:	b9 04 00 00 00       	mov    ecx,0x4
c001926d:	eb 17                	jmp    c0019286 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001926f:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019272:	b9 07 00 00 00       	mov    ecx,0x7
c0019277:	eb 0d                	jmp    c0019286 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019279:	b9 02 00 00 00       	mov    ecx,0x2
c001927e:	b2 01                	mov    dl,0x1
c0019280:	31 c0                	xor    eax,eax
c0019282:	eb 02                	jmp    c0019286 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019284:	31 d2                	xor    edx,edx
c0019286:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001928a:	89 0b                	mov    DWORD PTR [ebx],ecx
c001928c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019290:	88 11                	mov    BYTE PTR [ecx],dl
c0019292:	5a                   	pop    edx
c0019293:	5b                   	pop    ebx
c0019294:	5e                   	pop    esi
c0019295:	5f                   	pop    edi
c0019296:	c3                   	ret    
c0019297:	90                   	nop

c0019298 <EnvVarContainer::getEnv(char const*)>:
c0019298:	57                   	push   edi
c0019299:	56                   	push   esi
c001929a:	53                   	push   ebx
c001929b:	31 db                	xor    ebx,ebx
c001929d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00192a1:	39 1e                	cmp    DWORD PTR [esi],ebx
c00192a3:	7e 2b                	jle    c00192d0 <EnvVarContainer::getEnv(char const*)+0x38>
c00192a5:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c00192ac:	50                   	push   eax
c00192ad:	50                   	push   eax
c00192ae:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00192b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00192b4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00192b8:	e8 be 74 fe ff       	call   c000077b <strcmp>
c00192bd:	83 c4 10             	add    esp,0x10
c00192c0:	85 c0                	test   eax,eax
c00192c2:	75 09                	jne    c00192cd <EnvVarContainer::getEnv(char const*)+0x35>
c00192c4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00192c7:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c00192cb:	eb 05                	jmp    c00192d2 <EnvVarContainer::getEnv(char const*)+0x3a>
c00192cd:	43                   	inc    ebx
c00192ce:	eb d1                	jmp    c00192a1 <EnvVarContainer::getEnv(char const*)+0x9>
c00192d0:	31 c0                	xor    eax,eax
c00192d2:	5b                   	pop    ebx
c00192d3:	5e                   	pop    esi
c00192d4:	5f                   	pop    edi
c00192d5:	c3                   	ret    

c00192d6 <EnvVarContainer::setEnv(char const*, char const*)>:
c00192d6:	57                   	push   edi
c00192d7:	56                   	push   esi
c00192d8:	53                   	push   ebx
c00192d9:	83 ec 1c             	sub    esp,0x1c
c00192dc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00192e0:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00192e4:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00192e8:	57                   	push   edi
c00192e9:	e8 ba 73 fe ff       	call   c00006a8 <strlen>
c00192ee:	40                   	inc    eax
c00192ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00192f2:	e8 dd 61 ff ff       	call   c000f4d4 <malloc>
c00192f7:	89 34 24             	mov    DWORD PTR [esp],esi
c00192fa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00192fe:	e8 a5 73 fe ff       	call   c00006a8 <strlen>
c0019303:	40                   	inc    eax
c0019304:	89 04 24             	mov    DWORD PTR [esp],eax
c0019307:	e8 c8 61 ff ff       	call   c000f4d4 <malloc>
c001930c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001930f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019313:	e8 90 73 fe ff       	call   c00006a8 <strlen>
c0019318:	83 c4 0c             	add    esp,0xc
c001931b:	40                   	inc    eax
c001931c:	50                   	push   eax
c001931d:	6a 00                	push   0x0
c001931f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019323:	e8 63 73 fe ff       	call   c000068b <memset>
c0019328:	89 3c 24             	mov    DWORD PTR [esp],edi
c001932b:	e8 78 73 fe ff       	call   c00006a8 <strlen>
c0019330:	83 c4 0c             	add    esp,0xc
c0019333:	40                   	inc    eax
c0019334:	50                   	push   eax
c0019335:	57                   	push   edi
c0019336:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001933a:	e8 16 73 fe ff       	call   c0000655 <memcpy>
c001933f:	89 34 24             	mov    DWORD PTR [esp],esi
c0019342:	e8 61 73 fe ff       	call   c00006a8 <strlen>
c0019347:	83 c4 0c             	add    esp,0xc
c001934a:	40                   	inc    eax
c001934b:	50                   	push   eax
c001934c:	6a 00                	push   0x0
c001934e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019352:	e8 34 73 fe ff       	call   c000068b <memset>
c0019357:	89 34 24             	mov    DWORD PTR [esp],esi
c001935a:	e8 49 73 fe ff       	call   c00006a8 <strlen>
c001935f:	83 c4 0c             	add    esp,0xc
c0019362:	40                   	inc    eax
c0019363:	50                   	push   eax
c0019364:	56                   	push   esi
c0019365:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019369:	e8 e7 72 fe ff       	call   c0000655 <memcpy>
c001936e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019370:	40                   	inc    eax
c0019371:	89 03                	mov    DWORD PTR [ebx],eax
c0019373:	c1 e0 03             	shl    eax,0x3
c0019376:	5a                   	pop    edx
c0019377:	59                   	pop    ecx
c0019378:	50                   	push   eax
c0019379:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001937c:	e8 3f 61 ff ff       	call   c000f4c0 <realloc>
c0019381:	83 c4 0c             	add    esp,0xc
c0019384:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019387:	6a 08                	push   0x8
c0019389:	8d 54 24 10          	lea    edx,[esp+0x10]
c001938d:	52                   	push   edx
c001938e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019390:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c0019394:	50                   	push   eax
c0019395:	e8 bb 72 fe ff       	call   c0000655 <memcpy>
c001939a:	83 c4 20             	add    esp,0x20
c001939d:	5b                   	pop    ebx
c001939e:	5e                   	pop    esi
c001939f:	5f                   	pop    edi
c00193a0:	c3                   	ret    
c00193a1:	90                   	nop

c00193a2 <EnvVarContainer::deleteEnv(char const*)>:
c00193a2:	c3                   	ret    
c00193a3:	90                   	nop

c00193a4 <EnvVarContainer::loadFrom(char const*, char const*)>:
c00193a4:	55                   	push   ebp
c00193a5:	57                   	push   edi
c00193a6:	56                   	push   esi
c00193a7:	53                   	push   ebx
c00193a8:	81 ec 38 01 00 00    	sub    esp,0x138
c00193ae:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c00193b5:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c00193bc:	68 14 01 00 00       	push   0x114
c00193c1:	e8 0e 61 ff ff       	call   c000f4d4 <malloc>
c00193c6:	83 c4 0c             	add    esp,0xc
c00193c9:	89 c7                	mov    edi,eax
c00193cb:	ff 76 08             	push   DWORD PTR [esi+0x8]
c00193ce:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00193d5:	50                   	push   eax
c00193d6:	e8 a5 98 ff ff       	call   c0012c80 <File::File(char const*, Process*)>
c00193db:	89 3c 24             	mov    DWORD PTR [esp],edi
c00193de:	e8 6f 9b ff ff       	call   c0012f52 <File::exists()>
c00193e3:	83 c4 10             	add    esp,0x10
c00193e6:	84 c0                	test   al,al
c00193e8:	75 31                	jne    c001941b <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c00193ea:	51                   	push   ecx
c00193eb:	51                   	push   ecx
c00193ec:	6a 12                	push   0x12
c00193ee:	57                   	push   edi
c00193ef:	e8 f0 98 ff ff       	call   c0012ce4 <File::open(FileOpenMode)>
c00193f4:	8b 07                	mov    eax,DWORD PTR [edi]
c00193f6:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00193f9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00193fc:	e8 a7 72 fe ff       	call   c00006a8 <strlen>
c0019401:	5a                   	pop    edx
c0019402:	31 d2                	xor    edx,edx
c0019404:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019408:	51                   	push   ecx
c0019409:	55                   	push   ebp
c001940a:	52                   	push   edx
c001940b:	50                   	push   eax
c001940c:	57                   	push   edi
c001940d:	ff d3                	call   ebx
c001940f:	83 c4 14             	add    esp,0x14
c0019412:	57                   	push   edi
c0019413:	e8 2a 99 ff ff       	call   c0012d42 <File::close()>
c0019418:	83 c4 10             	add    esp,0x10
c001941b:	31 db                	xor    ebx,ebx
c001941d:	50                   	push   eax
c001941e:	31 ed                	xor    ebp,ebp
c0019420:	68 00 01 00 00       	push   0x100
c0019425:	6a 00                	push   0x0
c0019427:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001942b:	50                   	push   eax
c001942c:	e8 5a 72 fe ff       	call   c000068b <memset>
c0019431:	58                   	pop    eax
c0019432:	5a                   	pop    edx
c0019433:	6a 01                	push   0x1
c0019435:	57                   	push   edi
c0019436:	e8 a9 98 ff ff       	call   c0012ce4 <File::open(FileOpenMode)>
c001943b:	83 c4 10             	add    esp,0x10
c001943e:	83 ec 0c             	sub    esp,0xc
c0019441:	8b 07                	mov    eax,DWORD PTR [edi]
c0019443:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019447:	51                   	push   ecx
c0019448:	8d 54 24 23          	lea    edx,[esp+0x23]
c001944c:	52                   	push   edx
c001944d:	6a 00                	push   0x0
c001944f:	6a 01                	push   0x1
c0019451:	57                   	push   edi
c0019452:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019455:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019459:	83 c4 20             	add    esp,0x20
c001945c:	3c 0d                	cmp    al,0xd
c001945e:	0f 84 12 01 00 00    	je     c0019576 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019464:	85 db                	test   ebx,ebx
c0019466:	0f 84 fd 00 00 00    	je     c0019569 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001946c:	3c 0a                	cmp    al,0xa
c001946e:	74 13                	je     c0019483 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c0019470:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019475:	74 0c                	je     c0019483 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c0019477:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001947d:	0f 8e e6 00 00 00    	jle    c0019569 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c0019483:	83 ec 0c             	sub    esp,0xc
c0019486:	8d 53 01             	lea    edx,[ebx+0x1]
c0019489:	29 dd                	sub    ebp,ebx
c001948b:	52                   	push   edx
c001948c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019490:	e8 3f 60 ff ff       	call   c000f4d4 <malloc>
c0019495:	8d 4d 04             	lea    ecx,[ebp+0x4]
c0019498:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001949c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001949f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00194a3:	e8 2c 60 ff ff       	call   c000f4d4 <malloc>
c00194a8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00194ac:	83 c4 0c             	add    esp,0xc
c00194af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00194b3:	52                   	push   edx
c00194b4:	6a 00                	push   0x0
c00194b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00194ba:	e8 cc 71 fe ff       	call   c000068b <memset>
c00194bf:	83 c4 0c             	add    esp,0xc
c00194c2:	53                   	push   ebx
c00194c3:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00194c7:	55                   	push   ebp
c00194c8:	01 eb                	add    ebx,ebp
c00194ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00194ce:	e8 82 71 fe ff       	call   c0000655 <memcpy>
c00194d3:	83 c4 0c             	add    esp,0xc
c00194d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00194da:	51                   	push   ecx
c00194db:	6a 00                	push   0x0
c00194dd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00194e1:	e8 a5 71 fe ff       	call   c000068b <memset>
c00194e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00194e9:	e8 ba 71 fe ff       	call   c00006a8 <strlen>
c00194ee:	83 c4 0c             	add    esp,0xc
c00194f1:	50                   	push   eax
c00194f2:	53                   	push   ebx
c00194f3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00194f7:	e8 59 71 fe ff       	call   c0000655 <memcpy>
c00194fc:	5b                   	pop    ebx
c00194fd:	58                   	pop    eax
c00194fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019502:	68 5c a1 02 c0       	push   0xc002a15c
c0019507:	e8 45 92 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001950c:	8b 06                	mov    eax,DWORD PTR [esi]
c001950e:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0019511:	40                   	inc    eax
c0019512:	83 c4 10             	add    esp,0x10
c0019515:	89 06                	mov    DWORD PTR [esi],eax
c0019517:	85 d2                	test   edx,edx
c0019519:	75 0c                	jne    c0019527 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001951b:	83 ec 0c             	sub    esp,0xc
c001951e:	6a 08                	push   0x8
c0019520:	e8 af 5f ff ff       	call   c000f4d4 <malloc>
c0019525:	eb 0c                	jmp    c0019533 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c0019527:	c1 e0 03             	shl    eax,0x3
c001952a:	51                   	push   ecx
c001952b:	51                   	push   ecx
c001952c:	50                   	push   eax
c001952d:	52                   	push   edx
c001952e:	e8 8d 5f ff ff       	call   c000f4c0 <realloc>
c0019533:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0019536:	83 c4 10             	add    esp,0x10
c0019539:	31 db                	xor    ebx,ebx
c001953b:	52                   	push   edx
c001953c:	6a 08                	push   0x8
c001953e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019542:	50                   	push   eax
c0019543:	8b 16                	mov    edx,DWORD PTR [esi]
c0019545:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019548:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001954c:	50                   	push   eax
c001954d:	e8 03 71 fe ff       	call   c0000655 <memcpy>
c0019552:	83 c4 0c             	add    esp,0xc
c0019555:	68 00 01 00 00       	push   0x100
c001955a:	6a 00                	push   0x0
c001955c:	55                   	push   ebp
c001955d:	31 ed                	xor    ebp,ebp
c001955f:	e8 27 71 fe ff       	call   c000068b <memset>
c0019564:	83 c4 10             	add    esp,0x10
c0019567:	eb 0d                	jmp    c0019576 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019569:	3c 3d                	cmp    al,0x3d
c001956b:	74 07                	je     c0019574 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001956d:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c0019571:	45                   	inc    ebp
c0019572:	eb 02                	jmp    c0019576 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019574:	89 eb                	mov    ebx,ebp
c0019576:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001957b:	0f 85 bd fe ff ff    	jne    c001943e <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c0019581:	50                   	push   eax
c0019582:	50                   	push   eax
c0019583:	ff 36                	push   DWORD PTR [esi]
c0019585:	68 6a a1 02 c0       	push   0xc002a16a
c001958a:	e8 c2 91 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001958f:	81 c4 3c 01 00 00    	add    esp,0x13c
c0019595:	5b                   	pop    ebx
c0019596:	5e                   	pop    esi
c0019597:	5f                   	pop    edi
c0019598:	5d                   	pop    ebp
c0019599:	c3                   	ret    

c001959a <EnvVarContainer::__loadSystem()>:
c001959a:	83 ec 10             	sub    esp,0x10
c001959d:	68 60 be 02 c0       	push   0xc002be60
c00195a2:	68 95 a1 02 c0       	push   0xc002a195
c00195a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00195ab:	e8 f4 fd ff ff       	call   c00193a4 <EnvVarContainer::loadFrom(char const*, char const*)>
c00195b0:	83 c4 1c             	add    esp,0x1c
c00195b3:	c3                   	ret    

c00195b4 <EnvVarContainer::__loadUser()>:
c00195b4:	c3                   	ret    
c00195b5:	90                   	nop

c00195b6 <EnvVarContainer::EnvVarContainer(Process*)>:
c00195b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00195ba:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00195c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00195c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00195c8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00195cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00195cf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00195d6:	90                   	nop
c00195d7:	c3                   	ret    

c00195d8 <EnvVarContainer::~EnvVarContainer()>:
c00195d8:	83 ec 0c             	sub    esp,0xc
c00195db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195df:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00195e2:	85 c0                	test   eax,eax
c00195e4:	74 1d                	je     c0019603 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00195e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00195ec:	85 c0                	test   eax,eax
c00195ee:	74 13                	je     c0019603 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00195f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00195f7:	83 ec 0c             	sub    esp,0xc
c00195fa:	50                   	push   eax
c00195fb:	e8 e4 5e ff ff       	call   c000f4e4 <free>
c0019600:	83 c4 10             	add    esp,0x10
c0019603:	90                   	nop
c0019604:	83 c4 0c             	add    esp,0xc
c0019607:	c3                   	ret    

c0019608 <Krnl::getEnv(Process*, char const*)>:
c0019608:	53                   	push   ebx
c0019609:	83 ec 08             	sub    esp,0x8
c001960c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019610:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019614:	39 05 54 de 02 c0    	cmp    DWORD PTR ds:0xc002de54,eax
c001961a:	74 04                	je     c0019620 <Krnl::getEnv(Process*, char const*)+0x18>
c001961c:	85 c0                	test   eax,eax
c001961e:	75 0b                	jne    c001962b <Krnl::getEnv(Process*, char const*)+0x23>
c0019620:	a1 30 d4 02 c0       	mov    eax,ds:0xc002d430
c0019625:	85 c0                	test   eax,eax
c0019627:	75 19                	jne    c0019642 <Krnl::getEnv(Process*, char const*)+0x3a>
c0019629:	eb 27                	jmp    c0019652 <Krnl::getEnv(Process*, char const*)+0x4a>
c001962b:	52                   	push   edx
c001962c:	52                   	push   edx
c001962d:	53                   	push   ebx
c001962e:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019634:	e8 5f fc ff ff       	call   c0019298 <EnvVarContainer::getEnv(char const*)>
c0019639:	83 c4 10             	add    esp,0x10
c001963c:	85 c0                	test   eax,eax
c001963e:	75 28                	jne    c0019668 <Krnl::getEnv(Process*, char const*)+0x60>
c0019640:	eb de                	jmp    c0019620 <Krnl::getEnv(Process*, char const*)+0x18>
c0019642:	52                   	push   edx
c0019643:	52                   	push   edx
c0019644:	53                   	push   ebx
c0019645:	50                   	push   eax
c0019646:	e8 4d fc ff ff       	call   c0019298 <EnvVarContainer::getEnv(char const*)>
c001964b:	83 c4 10             	add    esp,0x10
c001964e:	85 c0                	test   eax,eax
c0019650:	75 16                	jne    c0019668 <Krnl::getEnv(Process*, char const*)+0x60>
c0019652:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019656:	a1 34 d4 02 c0       	mov    eax,ds:0xc002d434
c001965b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001965f:	83 c4 08             	add    esp,0x8
c0019662:	5b                   	pop    ebx
c0019663:	e9 30 fc ff ff       	jmp    c0019298 <EnvVarContainer::getEnv(char const*)>
c0019668:	83 c4 08             	add    esp,0x8
c001966b:	5b                   	pop    ebx
c001966c:	c3                   	ret    

c001966d <Krnl::setEnvSystem(char const*, char const*)>:
c001966d:	83 ec 10             	sub    esp,0x10
c0019670:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019674:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019678:	ff 35 34 d4 02 c0    	push   DWORD PTR ds:0xc002d434
c001967e:	e8 53 fc ff ff       	call   c00192d6 <EnvVarContainer::setEnv(char const*, char const*)>
c0019683:	83 c4 1c             	add    esp,0x1c
c0019686:	c3                   	ret    

c0019687 <Krnl::setEnvUser(char const*, char const*)>:
c0019687:	a1 30 d4 02 c0       	mov    eax,ds:0xc002d430
c001968c:	85 c0                	test   eax,eax
c001968e:	74 15                	je     c00196a5 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0019690:	83 ec 10             	sub    esp,0x10
c0019693:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019697:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001969b:	50                   	push   eax
c001969c:	e8 35 fc ff ff       	call   c00192d6 <EnvVarContainer::setEnv(char const*, char const*)>
c00196a1:	83 c4 1c             	add    esp,0x1c
c00196a4:	c3                   	ret    
c00196a5:	c3                   	ret    

c00196a6 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c00196a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00196aa:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c00196b0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00196b4:	e9 1d fc ff ff       	jmp    c00192d6 <EnvVarContainer::setEnv(char const*, char const*)>

c00196b9 <Krnl::deleteEnvSystem(char const*)>:
c00196b9:	c3                   	ret    

c00196ba <Krnl::deleteEnvUser(char const*)>:
c00196ba:	c3                   	ret    

c00196bb <Krnl::deleteEnvProcess(Process*, char const*)>:
c00196bb:	c3                   	ret    

c00196bc <Krnl::newProcessEnv(Process*)>:
c00196bc:	83 ec 28             	sub    esp,0x28
c00196bf:	6a 0c                	push   0xc
c00196c1:	e8 0e 5e ff ff       	call   c000f4d4 <malloc>
c00196c6:	5a                   	pop    edx
c00196c7:	59                   	pop    ecx
c00196c8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00196cc:	50                   	push   eax
c00196cd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00196d1:	e8 e0 fe ff ff       	call   c00195b6 <EnvVarContainer::EnvVarContainer(Process*)>
c00196d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00196da:	83 c4 2c             	add    esp,0x2c
c00196dd:	c3                   	ret    

c00196de <Krnl::copyProcessEnv(Process*, Process*)>:
c00196de:	56                   	push   esi
c00196df:	53                   	push   ebx
c00196e0:	83 ec 10             	sub    esp,0x10
c00196e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00196e7:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c00196ed:	6a 0c                	push   0xc
c00196ef:	e8 e0 5d ff ff       	call   c000f4d4 <malloc>
c00196f4:	89 c3                	mov    ebx,eax
c00196f6:	58                   	pop    eax
c00196f7:	5a                   	pop    edx
c00196f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00196fc:	53                   	push   ebx
c00196fd:	e8 b4 fe ff ff       	call   c00195b6 <EnvVarContainer::EnvVarContainer(Process*)>
c0019702:	8b 06                	mov    eax,DWORD PTR [esi]
c0019704:	89 03                	mov    DWORD PTR [ebx],eax
c0019706:	c1 e0 03             	shl    eax,0x3
c0019709:	89 04 24             	mov    DWORD PTR [esp],eax
c001970c:	e8 c3 5d ff ff       	call   c000f4d4 <malloc>
c0019711:	83 c4 0c             	add    esp,0xc
c0019714:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019717:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0019719:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c0019720:	52                   	push   edx
c0019721:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019724:	50                   	push   eax
c0019725:	e8 2b 6f fe ff       	call   c0000655 <memcpy>
c001972a:	89 d8                	mov    eax,ebx
c001972c:	83 c4 14             	add    esp,0x14
c001972f:	5b                   	pop    ebx
c0019730:	5e                   	pop    esi
c0019731:	c3                   	ret    

c0019732 <Krnl::loadSystemEnv()>:
c0019732:	53                   	push   ebx
c0019733:	83 ec 14             	sub    esp,0x14
c0019736:	6a 0c                	push   0xc
c0019738:	e8 97 5d ff ff       	call   c000f4d4 <malloc>
c001973d:	89 c3                	mov    ebx,eax
c001973f:	58                   	pop    eax
c0019740:	5a                   	pop    edx
c0019741:	ff 35 54 de 02 c0    	push   DWORD PTR ds:0xc002de54
c0019747:	53                   	push   ebx
c0019748:	e8 69 fe ff ff       	call   c00195b6 <EnvVarContainer::EnvVarContainer(Process*)>
c001974d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019750:	89 1d 34 d4 02 c0    	mov    DWORD PTR ds:0xc002d434,ebx
c0019756:	e8 3f fe ff ff       	call   c001959a <EnvVarContainer::__loadSystem()>
c001975b:	83 c4 18             	add    esp,0x18
c001975e:	5b                   	pop    ebx
c001975f:	c3                   	ret    

c0019760 <Krnl::loadUserEnv()>:
c0019760:	53                   	push   ebx
c0019761:	83 ec 14             	sub    esp,0x14
c0019764:	6a 0c                	push   0xc
c0019766:	e8 69 5d ff ff       	call   c000f4d4 <malloc>
c001976b:	89 c3                	mov    ebx,eax
c001976d:	58                   	pop    eax
c001976e:	5a                   	pop    edx
c001976f:	ff 35 54 de 02 c0    	push   DWORD PTR ds:0xc002de54
c0019775:	53                   	push   ebx
c0019776:	e8 3b fe ff ff       	call   c00195b6 <EnvVarContainer::EnvVarContainer(Process*)>
c001977b:	89 1d 30 d4 02 c0    	mov    DWORD PTR ds:0xc002d430,ebx
c0019781:	83 c4 18             	add    esp,0x18
c0019784:	5b                   	pop    ebx
c0019785:	c3                   	ret    

c0019786 <Krnl::flushEnv()>:
c0019786:	c3                   	ret    

c0019787 <Krnl::getProcessTotalEnvCount(Process*)>:
c0019787:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001978b:	8b 15 30 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d430
c0019791:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019797:	a1 34 d4 02 c0       	mov    eax,ds:0xc002d434
c001979c:	8b 00                	mov    eax,DWORD PTR [eax]
c001979e:	03 01                	add    eax,DWORD PTR [ecx]
c00197a0:	85 d2                	test   edx,edx
c00197a2:	74 02                	je     c00197a6 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c00197a4:	03 02                	add    eax,DWORD PTR [edx]
c00197a6:	c3                   	ret    

c00197a7 <Krnl::getProcessEnvPair(Process*, int)>:
c00197a7:	57                   	push   edi
c00197a8:	8b 0d 30 d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d430
c00197ae:	56                   	push   esi
c00197af:	85 c9                	test   ecx,ecx
c00197b1:	53                   	push   ebx
c00197b2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00197b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00197ba:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c00197c0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00197c4:	8b 02                	mov    eax,DWORD PTR [edx]
c00197c6:	75 47                	jne    c001980f <Krnl::getProcessEnvPair(Process*, int)+0x68>
c00197c8:	39 c3                	cmp    ebx,eax
c00197ca:	7c 47                	jl     c0019813 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c00197cc:	8b 15 34 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d434
c00197d2:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00197d4:	01 c1                	add    ecx,eax
c00197d6:	39 d9                	cmp    ecx,ebx
c00197d8:	7e 6c                	jle    c0019846 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c00197da:	51                   	push   ecx
c00197db:	89 d9                	mov    ecx,ebx
c00197dd:	29 c1                	sub    ecx,eax
c00197df:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00197e2:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c00197e6:	53                   	push   ebx
c00197e7:	68 b7 a1 02 c0       	push   0xc002a1b7
c00197ec:	e8 60 8f ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c00197f1:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c00197f7:	2b 18                	sub    ebx,DWORD PTR [eax]
c00197f9:	a1 34 d4 02 c0       	mov    eax,ds:0xc002d434
c00197fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019801:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c0019805:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0019808:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001980b:	89 06                	mov    DWORD PTR [esi],eax
c001980d:	eb 51                	jmp    c0019860 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001980f:	39 c3                	cmp    ebx,eax
c0019811:	7d 05                	jge    c0019818 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c0019813:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019816:	eb 20                	jmp    c0019838 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c0019818:	8b 39                	mov    edi,DWORD PTR [ecx]
c001981a:	8d 14 07             	lea    edx,[edi+eax*1]
c001981d:	39 da                	cmp    edx,ebx
c001981f:	7e 04                	jle    c0019825 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c0019821:	29 c3                	sub    ebx,eax
c0019823:	eb 10                	jmp    c0019835 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c0019825:	8b 0d 34 d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d434
c001982b:	03 11                	add    edx,DWORD PTR [ecx]
c001982d:	39 da                	cmp    edx,ebx
c001982f:	7e 15                	jle    c0019846 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c0019831:	29 c3                	sub    ebx,eax
c0019833:	29 fb                	sub    ebx,edi
c0019835:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0019838:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001983c:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001983f:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0019842:	89 06                	mov    DWORD PTR [esi],eax
c0019844:	eb 1d                	jmp    c0019863 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c0019846:	83 ec 0c             	sub    esp,0xc
c0019849:	68 cb a1 02 c0       	push   0xc002a1cb
c001984e:	e8 18 00 00 00       	call   c001986b <Krnl::panic(char const*)>
c0019853:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0019859:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0019860:	83 c4 10             	add    esp,0x10
c0019863:	89 f0                	mov    eax,esi
c0019865:	5b                   	pop    ebx
c0019866:	5e                   	pop    esi
c0019867:	5f                   	pop    edi
c0019868:	c2 04 00             	ret    0x4

c001986b <Krnl::panic(char const*)>:
c001986b:	55                   	push   ebp
c001986c:	89 e5                	mov    ebp,esp
c001986e:	53                   	push   ebx
c001986f:	50                   	push   eax
c0019870:	a1 3c d4 02 c0       	mov    eax,ds:0xc002d43c
c0019875:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0019878:	85 c0                	test   eax,eax
c001987a:	74 02                	je     c001987e <Krnl::panic(char const*)+0x13>
c001987c:	ff d0                	call   eax
c001987e:	fa                   	cli    
c001987f:	c6 05 40 d4 02 c0 01 	mov    BYTE PTR ds:0xc002d440,0x1
c0019886:	83 ec 08             	sub    esp,0x8
c0019889:	c6 05 64 b8 02 c0 00 	mov    BYTE PTR ds:0xc002b864,0x0
c0019890:	53                   	push   ebx
c0019891:	68 e5 a1 02 c0       	push   0xc002a1e5
c0019896:	e8 b6 8e ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001989b:	58                   	pop    eax
c001989c:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c00198a1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00198a7:	e8 2f 70 ff ff       	call   c00108db <setActiveTerminal(VgaText*)>
c00198ac:	83 c4 0c             	add    esp,0xc
c00198af:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c00198b4:	6a 01                	push   0x1
c00198b6:	6a 0f                	push   0xf
c00198b8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00198be:	e8 1b 6a ff ff       	call   c00102de <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00198c3:	5a                   	pop    edx
c00198c4:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c00198c9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00198cf:	e8 a8 72 ff ff       	call   c0010b7c <VgaText::clearScreen()>
c00198d4:	59                   	pop    ecx
c00198d5:	58                   	pop    eax
c00198d6:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c00198db:	68 fe a1 02 c0       	push   0xc002a1fe
c00198e0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00198e6:	e8 0f 74 ff ff       	call   c0010cfa <VgaText::puts(char const*)>
c00198eb:	58                   	pop    eax
c00198ec:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c00198f1:	5a                   	pop    edx
c00198f2:	68 a4 a2 02 c0       	push   0xc002a2a4
c00198f7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00198fd:	e8 f8 73 ff ff       	call   c0010cfa <VgaText::puts(char const*)>
c0019902:	59                   	pop    ecx
c0019903:	58                   	pop    eax
c0019904:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c0019909:	68 1a a2 02 c0       	push   0xc002a21a
c001990e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019914:	e8 e1 73 ff ff       	call   c0010cfa <VgaText::puts(char const*)>
c0019919:	58                   	pop    eax
c001991a:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c001991f:	5a                   	pop    edx
c0019920:	53                   	push   ebx
c0019921:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019927:	e8 ce 73 ff ff       	call   c0010cfa <VgaText::puts(char const*)>
c001992c:	59                   	pop    ecx
c001992d:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c0019932:	5b                   	pop    ebx
c0019933:	68 3a a2 02 c0       	push   0xc002a23a
c0019938:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001993e:	e8 b7 73 ff ff       	call   c0010cfa <VgaText::puts(char const*)>
c0019943:	58                   	pop    eax
c0019944:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c0019949:	5a                   	pop    edx
c001994a:	68 e0 a2 02 c0       	push   0xc002a2e0
c001994f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019955:	e8 a0 73 ff ff       	call   c0010cfa <VgaText::puts(char const*)>
c001995a:	59                   	pop    ecx
c001995b:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c0019960:	5b                   	pop    ebx
c0019961:	68 1a a2 02 c0       	push   0xc002a21a
c0019966:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001996c:	e8 89 73 ff ff       	call   c0010cfa <VgaText::puts(char const*)>
c0019971:	58                   	pop    eax
c0019972:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019977:	5a                   	pop    edx
c0019978:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001997b:	83 c0 0c             	add    eax,0xc
c001997e:	50                   	push   eax
c001997f:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c0019984:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001998a:	e8 6b 73 ff ff       	call   c0010cfa <VgaText::puts(char const*)>
c001998f:	59                   	pop    ecx
c0019990:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c0019995:	5b                   	pop    ebx
c0019996:	68 39 a2 02 c0       	push   0xc002a239
c001999b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199a1:	e8 54 73 ff ff       	call   c0010cfa <VgaText::puts(char const*)>
c00199a6:	58                   	pop    eax
c00199a7:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c00199ac:	5a                   	pop    edx
c00199ad:	68 0c a3 02 c0       	push   0xc002a30c
c00199b2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199b8:	e8 3d 73 ff ff       	call   c0010cfa <VgaText::puts(char const*)>
c00199bd:	59                   	pop    ecx
c00199be:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c00199c3:	5b                   	pop    ebx
c00199c4:	68 4c a3 02 c0       	push   0xc002a34c
c00199c9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199cf:	e8 26 73 ff ff       	call   c0010cfa <VgaText::puts(char const*)>
c00199d4:	58                   	pop    eax
c00199d5:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c00199da:	5a                   	pop    edx
c00199db:	68 25 a2 02 c0       	push   0xc002a225
c00199e0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199e6:	e8 0f 73 ff ff       	call   c0010cfa <VgaText::puts(char const*)>
c00199eb:	59                   	pop    ecx
c00199ec:	5b                   	pop    ebx
c00199ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00199f0:	68 3d a2 02 c0       	push   0xc002a23d
c00199f5:	e8 57 8d ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c00199fa:	58                   	pop    eax
c00199fb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00199fe:	5a                   	pop    edx
c00199ff:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019a02:	68 46 a2 02 c0       	push   0xc002a246
c0019a07:	e8 45 8d ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0019a0c:	59                   	pop    ecx
c0019a0d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019a10:	5b                   	pop    ebx
c0019a11:	8b 00                	mov    eax,DWORD PTR [eax]
c0019a13:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019a16:	68 4f a2 02 c0       	push   0xc002a24f
c0019a1b:	e8 31 8d ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0019a20:	58                   	pop    eax
c0019a21:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c0019a26:	5a                   	pop    edx
c0019a27:	68 90 a3 02 c0       	push   0xc002a390
c0019a2c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a32:	e8 c3 72 ff ff       	call   c0010cfa <VgaText::puts(char const*)>
c0019a37:	59                   	pop    ecx
c0019a38:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c0019a3d:	5b                   	pop    ebx
c0019a3e:	68 58 a2 02 c0       	push   0xc002a258
c0019a43:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a49:	e8 ac 72 ff ff       	call   c0010cfa <VgaText::puts(char const*)>
c0019a4e:	0f 20 c0             	mov    eax,cr0
c0019a51:	5a                   	pop    edx
c0019a52:	59                   	pop    ecx
c0019a53:	50                   	push   eax
c0019a54:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c0019a59:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a5f:	e8 bc 72 ff ff       	call   c0010d20 <VgaText::putx(unsigned int)>
c0019a64:	5b                   	pop    ebx
c0019a65:	58                   	pop    eax
c0019a66:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c0019a6b:	68 62 a2 02 c0       	push   0xc002a262
c0019a70:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a76:	e8 7f 72 ff ff       	call   c0010cfa <VgaText::puts(char const*)>
c0019a7b:	0f 20 d0             	mov    eax,cr2
c0019a7e:	5a                   	pop    edx
c0019a7f:	59                   	pop    ecx
c0019a80:	50                   	push   eax
c0019a81:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c0019a86:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a8c:	e8 8f 72 ff ff       	call   c0010d20 <VgaText::putx(unsigned int)>
c0019a91:	5b                   	pop    ebx
c0019a92:	58                   	pop    eax
c0019a93:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c0019a98:	68 6c a2 02 c0       	push   0xc002a26c
c0019a9d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019aa3:	e8 52 72 ff ff       	call   c0010cfa <VgaText::puts(char const*)>
c0019aa8:	0f 20 d8             	mov    eax,cr3
c0019aab:	5a                   	pop    edx
c0019aac:	59                   	pop    ecx
c0019aad:	50                   	push   eax
c0019aae:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c0019ab3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ab9:	e8 62 72 ff ff       	call   c0010d20 <VgaText::putx(unsigned int)>
c0019abe:	5b                   	pop    ebx
c0019abf:	58                   	pop    eax
c0019ac0:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c0019ac5:	68 7f a2 02 c0       	push   0xc002a27f
c0019aca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ad0:	e8 25 72 ff ff       	call   c0010cfa <VgaText::puts(char const*)>
c0019ad5:	0f 20 e0             	mov    eax,cr4
c0019ad8:	5a                   	pop    edx
c0019ad9:	59                   	pop    ecx
c0019ada:	50                   	push   eax
c0019adb:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c0019ae0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ae6:	e8 35 72 ff ff       	call   c0010d20 <VgaText::putx(unsigned int)>
c0019aeb:	5b                   	pop    ebx
c0019aec:	58                   	pop    eax
c0019aed:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c0019af2:	68 89 a2 02 c0       	push   0xc002a289
c0019af7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019afd:	e8 f8 71 ff ff       	call   c0010cfa <VgaText::puts(char const*)>
c0019b02:	5a                   	pop    edx
c0019b03:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c0019b08:	59                   	pop    ecx
c0019b09:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019b0f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019b12:	50                   	push   eax
c0019b13:	e8 08 72 ff ff       	call   c0010d20 <VgaText::putx(unsigned int)>
c0019b18:	5b                   	pop    ebx
c0019b19:	58                   	pop    eax
c0019b1a:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c0019b1f:	68 a0 a2 02 c0       	push   0xc002a2a0
c0019b24:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b2a:	e8 cb 71 ff ff       	call   c0010cfa <VgaText::puts(char const*)>
c0019b2f:	5a                   	pop    edx
c0019b30:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c0019b35:	59                   	pop    ecx
c0019b36:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019b3c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019b3f:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019b42:	50                   	push   eax
c0019b43:	e8 d8 71 ff ff       	call   c0010d20 <VgaText::putx(unsigned int)>
c0019b48:	5b                   	pop    ebx
c0019b49:	58                   	pop    eax
c0019b4a:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c0019b4f:	68 a0 a2 02 c0       	push   0xc002a2a0
c0019b54:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b5a:	e8 9b 71 ff ff       	call   c0010cfa <VgaText::puts(char const*)>
c0019b5f:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c0019b64:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019b67:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019b6d:	8b 12                	mov    edx,DWORD PTR [edx]
c0019b6f:	59                   	pop    ecx
c0019b70:	5b                   	pop    ebx
c0019b71:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019b74:	50                   	push   eax
c0019b75:	e8 a6 71 ff ff       	call   c0010d20 <VgaText::putx(unsigned int)>
c0019b7a:	83 c4 10             	add    esp,0x10
c0019b7d:	b2 fe                	mov    dl,0xfe
c0019b7f:	e4 60                	in     al,0x60
c0019b81:	3c 1c                	cmp    al,0x1c
c0019b83:	74 04                	je     c0019b89 <Krnl::panic(char const*)+0x31e>
c0019b85:	3c 5a                	cmp    al,0x5a
c0019b87:	75 f6                	jne    c0019b7f <Krnl::panic(char const*)+0x314>
c0019b89:	e4 64                	in     al,0x64
c0019b8b:	a8 02                	test   al,0x2
c0019b8d:	75 fa                	jne    c0019b89 <Krnl::panic(char const*)+0x31e>
c0019b8f:	88 d0                	mov    al,dl
c0019b91:	e6 64                	out    0x64,al
c0019b93:	fa                   	cli    
c0019b94:	f4                   	hlt    
c0019b95:	eb e8                	jmp    c0019b7f <Krnl::panic(char const*)+0x314>

c0019b97 <Net::switchEndian16(unsigned short)>:
c0019b97:	83 ec 04             	sub    esp,0x4
c0019b9a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b9e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0019ba2:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0019ba6:	c1 f8 08             	sar    eax,0x8
c0019ba9:	89 c2                	mov    edx,eax
c0019bab:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0019baf:	c1 e0 08             	shl    eax,0x8
c0019bb2:	09 d0                	or     eax,edx
c0019bb4:	83 c4 04             	add    esp,0x4
c0019bb7:	c3                   	ret    

c0019bb8 <Net::switchEndian32(unsigned int)>:
c0019bb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bbc:	c1 e8 18             	shr    eax,0x18
c0019bbf:	89 c2                	mov    edx,eax
c0019bc1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bc5:	c1 e0 08             	shl    eax,0x8
c0019bc8:	25 00 00 ff 00       	and    eax,0xff0000
c0019bcd:	09 c2                	or     edx,eax
c0019bcf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bd3:	c1 e8 08             	shr    eax,0x8
c0019bd6:	25 00 ff 00 00       	and    eax,0xff00
c0019bdb:	09 c2                	or     edx,eax
c0019bdd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019be1:	c1 e0 18             	shl    eax,0x18
c0019be4:	09 d0                	or     eax,edx
c0019be6:	c3                   	ret    

c0019be7 <Net::crc32Calc(unsigned char*, int)>:
c0019be7:	83 ec 10             	sub    esp,0x10
c0019bea:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019bef:	75 07                	jne    c0019bf8 <Net::crc32Calc(unsigned char*, int)+0x11>
c0019bf1:	b8 00 00 00 00       	mov    eax,0x0
c0019bf6:	eb 7c                	jmp    c0019c74 <Net::crc32Calc(unsigned char*, int)+0x8d>
c0019bf8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0019bfd:	7f 07                	jg     c0019c06 <Net::crc32Calc(unsigned char*, int)+0x1f>
c0019bff:	b8 00 00 00 00       	mov    eax,0x0
c0019c04:	eb 6e                	jmp    c0019c74 <Net::crc32Calc(unsigned char*, int)+0x8d>
c0019c06:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0019c0e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019c16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c1a:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0019c1e:	7d 4e                	jge    c0019c6e <Net::crc32Calc(unsigned char*, int)+0x87>
c0019c20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019c24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019c28:	01 d0                	add    eax,edx
c0019c2a:	8a 00                	mov    al,BYTE PTR [eax]
c0019c2c:	0f b6 c0             	movzx  eax,al
c0019c2f:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0019c33:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019c3b:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0019c40:	7f 26                	jg     c0019c68 <Net::crc32Calc(unsigned char*, int)+0x81>
c0019c42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c46:	83 e0 01             	and    eax,0x1
c0019c49:	74 0d                	je     c0019c58 <Net::crc32Calc(unsigned char*, int)+0x71>
c0019c4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c4f:	d1 e8                	shr    eax,1
c0019c51:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0019c56:	eb 06                	jmp    c0019c5e <Net::crc32Calc(unsigned char*, int)+0x77>
c0019c58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c5c:	d1 e8                	shr    eax,1
c0019c5e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019c62:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0019c66:	eb d3                	jmp    c0019c3b <Net::crc32Calc(unsigned char*, int)+0x54>
c0019c68:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0019c6c:	eb a8                	jmp    c0019c16 <Net::crc32Calc(unsigned char*, int)+0x2f>
c0019c6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c72:	f7 d0                	not    eax
c0019c74:	83 c4 10             	add    esp,0x10
c0019c77:	c3                   	ret    

c0019c78 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c0019c78:	83 ec 1c             	sub    esp,0x1c
c0019c7b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019c7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019c83:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019c8b:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c0019c90:	7f 14                	jg     c0019ca6 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c0019c92:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019c96:	8d 50 01             	lea    edx,[eax+0x1]
c0019c99:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019c9d:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c0019ca0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0019ca4:	eb e5                	jmp    c0019c8b <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c0019ca6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019caa:	8d 50 01             	lea    edx,[eax+0x1]
c0019cad:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019cb1:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c0019cb4:	83 ec 04             	sub    esp,0x4
c0019cb7:	6a 06                	push   0x6
c0019cb9:	8d 44 24 36          	lea    eax,[esp+0x36]
c0019cbd:	50                   	push   eax
c0019cbe:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0019cc2:	e8 8e 69 fe ff       	call   c0000655 <memcpy>
c0019cc7:	83 c4 10             	add    esp,0x10
c0019cca:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c0019ccf:	83 ec 04             	sub    esp,0x4
c0019cd2:	6a 06                	push   0x6
c0019cd4:	8d 44 24 30          	lea    eax,[esp+0x30]
c0019cd8:	50                   	push   eax
c0019cd9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0019cdd:	e8 73 69 fe ff       	call   c0000655 <memcpy>
c0019ce2:	83 c4 10             	add    esp,0x10
c0019ce5:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c0019cea:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019cee:	0f b7 c0             	movzx  eax,ax
c0019cf1:	c1 f8 08             	sar    eax,0x8
c0019cf4:	89 c1                	mov    ecx,eax
c0019cf6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019cfa:	8d 50 01             	lea    edx,[eax+0x1]
c0019cfd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019d01:	88 ca                	mov    dl,cl
c0019d03:	88 10                	mov    BYTE PTR [eax],dl
c0019d05:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019d09:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d0d:	8d 48 01             	lea    ecx,[eax+0x1]
c0019d10:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0019d14:	88 10                	mov    BYTE PTR [eax],dl
c0019d16:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0019d1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019d1e:	83 ec 04             	sub    esp,0x4
c0019d21:	52                   	push   edx
c0019d22:	50                   	push   eax
c0019d23:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0019d27:	e8 29 69 fe ff       	call   c0000655 <memcpy>
c0019d2c:	83 c4 10             	add    esp,0x10
c0019d2f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019d33:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0019d37:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d3b:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0019d3f:	83 ec 08             	sub    esp,0x8
c0019d42:	50                   	push   eax
c0019d43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019d47:	e8 9b fe ff ff       	call   c0019be7 <Net::crc32Calc(unsigned char*, int)>
c0019d4c:	83 c4 10             	add    esp,0x10
c0019d4f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019d53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d57:	c1 e8 18             	shr    eax,0x18
c0019d5a:	89 c1                	mov    ecx,eax
c0019d5c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d60:	8d 50 01             	lea    edx,[eax+0x1]
c0019d63:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019d67:	88 ca                	mov    dl,cl
c0019d69:	88 10                	mov    BYTE PTR [eax],dl
c0019d6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d6f:	c1 e8 10             	shr    eax,0x10
c0019d72:	89 c1                	mov    ecx,eax
c0019d74:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d78:	8d 50 01             	lea    edx,[eax+0x1]
c0019d7b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019d7f:	88 ca                	mov    dl,cl
c0019d81:	88 10                	mov    BYTE PTR [eax],dl
c0019d83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d87:	c1 e8 08             	shr    eax,0x8
c0019d8a:	89 c1                	mov    ecx,eax
c0019d8c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d90:	8d 50 01             	lea    edx,[eax+0x1]
c0019d93:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019d97:	88 ca                	mov    dl,cl
c0019d99:	88 10                	mov    BYTE PTR [eax],dl
c0019d9b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d9f:	8d 50 01             	lea    edx,[eax+0x1]
c0019da2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019da6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019daa:	88 10                	mov    BYTE PTR [eax],dl
c0019dac:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019db0:	83 c4 1c             	add    esp,0x1c
c0019db3:	c3                   	ret    

c0019db4 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c0019db4:	83 ec 2c             	sub    esp,0x2c
c0019db7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019dbb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019dbf:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c0019dc4:	83 ec 04             	sub    esp,0x4
c0019dc7:	6a 06                	push   0x6
c0019dc9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019dcd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019dd1:	83 c0 0e             	add    eax,0xe
c0019dd4:	50                   	push   eax
c0019dd5:	e8 7b 68 fe ff       	call   c0000655 <memcpy>
c0019dda:	83 c4 10             	add    esp,0x10
c0019ddd:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c0019de2:	83 ec 04             	sub    esp,0x4
c0019de5:	6a 06                	push   0x6
c0019de7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019deb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019def:	83 c0 08             	add    eax,0x8
c0019df2:	50                   	push   eax
c0019df3:	e8 5d 68 fe ff       	call   c0000655 <memcpy>
c0019df8:	83 c4 10             	add    esp,0x10
c0019dfb:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c0019e00:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019e04:	8d 50 01             	lea    edx,[eax+0x1]
c0019e07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019e0b:	8a 00                	mov    al,BYTE PTR [eax]
c0019e0d:	0f b6 c0             	movzx  eax,al
c0019e10:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0019e15:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019e19:	8d 50 01             	lea    edx,[eax+0x1]
c0019e1c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019e20:	8a 00                	mov    al,BYTE PTR [eax]
c0019e22:	0f b6 c0             	movzx  eax,al
c0019e25:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0019e2a:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c0019e2f:	c1 e0 08             	shl    eax,0x8
c0019e32:	89 c2                	mov    edx,eax
c0019e34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019e38:	09 d0                	or     eax,edx
c0019e3a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019e3e:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c0019e42:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c0019e47:	75 3a                	jne    c0019e83 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c0019e49:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019e4d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019e50:	66 3d dc 05          	cmp    ax,0x5dc
c0019e54:	77 10                	ja     c0019e66 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c0019e56:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019e5a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019e5d:	0f b7 c0             	movzx  eax,ax
c0019e60:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0019e64:	eb 1d                	jmp    c0019e83 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c0019e66:	83 ec 0c             	sub    esp,0xc
c0019e69:	68 b8 a3 02 c0       	push   0xc002a3b8
c0019e6e:	e8 de 88 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0019e73:	83 c4 10             	add    esp,0x10
c0019e76:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019e7a:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c0019e7e:	e9 c0 00 00 00       	jmp    c0019f43 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c0019e83:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019e87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019e8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e8d:	83 ec 04             	sub    esp,0x4
c0019e90:	52                   	push   edx
c0019e91:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019e95:	50                   	push   eax
c0019e96:	e8 ba 67 fe ff       	call   c0000655 <memcpy>
c0019e9b:	83 c4 10             	add    esp,0x10
c0019e9e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019ea2:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0019ea6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019eaa:	8d 50 01             	lea    edx,[eax+0x1]
c0019ead:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019eb1:	8a 00                	mov    al,BYTE PTR [eax]
c0019eb3:	0f b6 c0             	movzx  eax,al
c0019eb6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019eba:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019ebe:	8d 50 01             	lea    edx,[eax+0x1]
c0019ec1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019ec5:	8a 00                	mov    al,BYTE PTR [eax]
c0019ec7:	0f b6 c0             	movzx  eax,al
c0019eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019ece:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019ed2:	8d 50 01             	lea    edx,[eax+0x1]
c0019ed5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019ed9:	8a 00                	mov    al,BYTE PTR [eax]
c0019edb:	0f b6 c0             	movzx  eax,al
c0019ede:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019ee2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019ee6:	8d 50 01             	lea    edx,[eax+0x1]
c0019ee9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019eed:	8a 00                	mov    al,BYTE PTR [eax]
c0019eef:	0f b6 c0             	movzx  eax,al
c0019ef2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019ef6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019efa:	c1 e0 18             	shl    eax,0x18
c0019efd:	89 c2                	mov    edx,eax
c0019eff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f03:	c1 e0 10             	shl    eax,0x10
c0019f06:	09 c2                	or     edx,eax
c0019f08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019f0c:	c1 e0 08             	shl    eax,0x8
c0019f0f:	09 d0                	or     eax,edx
c0019f11:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0019f15:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019f19:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019f1d:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0019f21:	83 e8 04             	sub    eax,0x4
c0019f24:	83 ec 08             	sub    esp,0x8
c0019f27:	50                   	push   eax
c0019f28:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019f2c:	e8 b6 fc ff ff       	call   c0019be7 <Net::crc32Calc(unsigned char*, int)>
c0019f31:	83 c4 10             	add    esp,0x10
c0019f34:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0019f38:	0f 94 c2             	sete   dl
c0019f3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019f3f:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c0019f42:	90                   	nop
c0019f43:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019f47:	83 c4 2c             	add    esp,0x2c
c0019f4a:	c2 04 00             	ret    0x4

c0019f4d <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0019f4d:	55                   	push   ebp
c0019f4e:	57                   	push   edi
c0019f4f:	56                   	push   esi
c0019f50:	53                   	push   ebx
c0019f51:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019f57:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0019f5e:	8a 1e                	mov    bl,BYTE PTR [esi]
c0019f60:	8d 6e 01             	lea    ebp,[esi+0x1]
c0019f63:	80 fb 40             	cmp    bl,0x40
c0019f66:	75 1b                	jne    c0019f83 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0019f68:	8a 16                	mov    dl,BYTE PTR [esi]
c0019f6a:	84 d2                	test   dl,dl
c0019f6c:	0f 84 f1 00 00 00    	je     c001a063 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019f72:	8d 46 01             	lea    eax,[esi+0x1]
c0019f75:	80 fa 3a             	cmp    dl,0x3a
c0019f78:	74 04                	je     c0019f7e <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0019f7a:	89 c6                	mov    esi,eax
c0019f7c:	eb ea                	jmp    c0019f68 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0019f7e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0019f81:	89 c6                	mov    esi,eax
c0019f83:	50                   	push   eax
c0019f84:	6a 40                	push   0x40
c0019f86:	6a 00                	push   0x0
c0019f88:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019f8c:	50                   	push   eax
c0019f8d:	e8 f9 66 fe ff       	call   c000068b <memset>
c0019f92:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0019f99:	31 c0                	xor    eax,eax
c0019f9b:	83 c4 10             	add    esp,0x10
c0019f9e:	8a 0f                	mov    cl,BYTE PTR [edi]
c0019fa0:	84 c9                	test   cl,cl
c0019fa2:	0f 84 bb 00 00 00    	je     c001a063 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019fa8:	3d c7 00 00 00       	cmp    eax,0xc7
c0019fad:	0f 8f b0 00 00 00    	jg     c001a063 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019fb3:	80 f9 0a             	cmp    cl,0xa
c0019fb6:	0f 85 98 00 00 00    	jne    c001a054 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0019fbc:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0019fc1:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0019fc5:	a8 df                	test   al,0xdf
c0019fc7:	0f 94 c1             	sete   cl
c0019fca:	3c 23                	cmp    al,0x23
c0019fcc:	0f 94 c2             	sete   dl
c0019fcf:	08 d1                	or     cl,dl
c0019fd1:	75 4a                	jne    c001a01d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0019fd3:	8d 50 f7             	lea    edx,[eax-0x9]
c0019fd6:	80 fa 01             	cmp    dl,0x1
c0019fd9:	76 42                	jbe    c001a01d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0019fdb:	3c 5b                	cmp    al,0x5b
c0019fdd:	75 42                	jne    c001a021 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0019fdf:	80 fb 40             	cmp    bl,0x40
c0019fe2:	75 39                	jne    c001a01d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0019fe4:	83 ec 0c             	sub    esp,0xc
c0019fe7:	8d 54 24 65          	lea    edx,[esp+0x65]
c0019feb:	52                   	push   edx
c0019fec:	e8 b7 66 fe ff       	call   c00006a8 <strlen>
c0019ff1:	83 c4 10             	add    esp,0x10
c0019ff4:	83 f8 3f             	cmp    eax,0x3f
c0019ff7:	77 6a                	ja     c001a063 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019ff9:	50                   	push   eax
c0019ffa:	50                   	push   eax
c0019ffb:	8d 54 24 61          	lea    edx,[esp+0x61]
c0019fff:	52                   	push   edx
c001a000:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a004:	52                   	push   edx
c001a005:	e8 20 67 fe ff       	call   c000072a <strcpy>
c001a00a:	58                   	pop    eax
c001a00b:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a00f:	52                   	push   edx
c001a010:	e8 93 66 fe ff       	call   c00006a8 <strlen>
c001a015:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a01a:	83 c4 10             	add    esp,0x10
c001a01d:	31 d2                	xor    edx,edx
c001a01f:	eb 3a                	jmp    c001a05b <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a021:	80 fb 40             	cmp    bl,0x40
c001a024:	74 06                	je     c001a02c <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a026:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a02a:	eb 20                	jmp    c001a04c <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a02c:	50                   	push   eax
c001a02d:	50                   	push   eax
c001a02e:	55                   	push   ebp
c001a02f:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a033:	50                   	push   eax
c001a034:	e8 42 67 fe ff       	call   c000077b <strcmp>
c001a039:	83 c4 10             	add    esp,0x10
c001a03c:	85 c0                	test   eax,eax
c001a03e:	75 dd                	jne    c001a01d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a040:	eb e4                	jmp    c001a026 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a042:	8d 50 01             	lea    edx,[eax+0x1]
c001a045:	80 f9 3d             	cmp    cl,0x3d
c001a048:	74 1d                	je     c001a067 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a04a:	89 d0                	mov    eax,edx
c001a04c:	8a 08                	mov    cl,BYTE PTR [eax]
c001a04e:	84 c9                	test   cl,cl
c001a050:	75 f0                	jne    c001a042 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a052:	eb 0f                	jmp    c001a063 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a054:	8d 50 01             	lea    edx,[eax+0x1]
c001a057:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a05b:	47                   	inc    edi
c001a05c:	89 d0                	mov    eax,edx
c001a05e:	e9 3b ff ff ff       	jmp    c0019f9e <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a063:	31 c0                	xor    eax,eax
c001a065:	eb 33                	jmp    c001a09a <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a067:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a06b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a06e:	50                   	push   eax
c001a06f:	50                   	push   eax
c001a070:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a074:	50                   	push   eax
c001a075:	56                   	push   esi
c001a076:	e8 00 67 fe ff       	call   c000077b <strcmp>
c001a07b:	83 c4 10             	add    esp,0x10
c001a07e:	85 c0                	test   eax,eax
c001a080:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a084:	75 97                	jne    c001a01d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a086:	51                   	push   ecx
c001a087:	51                   	push   ecx
c001a088:	52                   	push   edx
c001a089:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a090:	e8 95 66 fe ff       	call   c000072a <strcpy>
c001a095:	83 c4 10             	add    esp,0x10
c001a098:	b0 01                	mov    al,0x1
c001a09a:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a0a0:	5b                   	pop    ebx
c001a0a1:	5e                   	pop    esi
c001a0a2:	5f                   	pop    edi
c001a0a3:	5d                   	pop    ebp
c001a0a4:	c3                   	ret    

c001a0a5 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a0a5:	57                   	push   edi
c001a0a6:	56                   	push   esi
c001a0a7:	53                   	push   ebx
c001a0a8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a0ae:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001a0b5:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a0bc:	53                   	push   ebx
c001a0bd:	e8 e6 65 fe ff       	call   c00006a8 <strlen>
c001a0c2:	89 34 24             	mov    DWORD PTR [esp],esi
c001a0c5:	89 c7                	mov    edi,eax
c001a0c7:	e8 dc 65 fe ff       	call   c00006a8 <strlen>
c001a0cc:	83 c4 10             	add    esp,0x10
c001a0cf:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a0d3:	3d ff 00 00 00       	cmp    eax,0xff
c001a0d8:	0f 87 d3 00 00 00    	ja     c001a1b1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a0de:	57                   	push   edi
c001a0df:	57                   	push   edi
c001a0e0:	56                   	push   esi
c001a0e1:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a0e5:	56                   	push   esi
c001a0e6:	e8 3f 66 fe ff       	call   c000072a <strcpy>
c001a0eb:	58                   	pop    eax
c001a0ec:	5a                   	pop    edx
c001a0ed:	68 66 a7 02 c0       	push   0xc002a766
c001a0f2:	56                   	push   esi
c001a0f3:	e8 e9 66 fe ff       	call   c00007e1 <strcat>
c001a0f8:	59                   	pop    ecx
c001a0f9:	5f                   	pop    edi
c001a0fa:	53                   	push   ebx
c001a0fb:	56                   	push   esi
c001a0fc:	e8 e0 66 fe ff       	call   c00007e1 <strcat>
c001a101:	58                   	pop    eax
c001a102:	5a                   	pop    edx
c001a103:	68 04 a4 02 c0       	push   0xc002a404
c001a108:	56                   	push   esi
c001a109:	e8 d3 66 fe ff       	call   c00007e1 <strcat>
c001a10e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a115:	e8 ba 53 ff ff       	call   c000f4d4 <malloc>
c001a11a:	83 c4 0c             	add    esp,0xc
c001a11d:	89 c3                	mov    ebx,eax
c001a11f:	ff 35 54 de 02 c0    	push   DWORD PTR ds:0xc002de54
c001a125:	56                   	push   esi
c001a126:	50                   	push   eax
c001a127:	e8 54 8b ff ff       	call   c0012c80 <File::File(char const*, Process*)>
c001a12c:	83 c4 10             	add    esp,0x10
c001a12f:	85 db                	test   ebx,ebx
c001a131:	74 7e                	je     c001a1b1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a133:	51                   	push   ecx
c001a134:	51                   	push   ecx
c001a135:	6a 01                	push   0x1
c001a137:	53                   	push   ebx
c001a138:	e8 a7 8b ff ff       	call   c0012ce4 <File::open(FileOpenMode)>
c001a13d:	83 c4 10             	add    esp,0x10
c001a140:	85 c0                	test   eax,eax
c001a142:	74 08                	je     c001a14c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001a144:	83 ec 0c             	sub    esp,0xc
c001a147:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a149:	53                   	push   ebx
c001a14a:	eb 5f                	jmp    c001a1ab <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001a14c:	52                   	push   edx
c001a14d:	8d 44 24 17          	lea    eax,[esp+0x17]
c001a151:	50                   	push   eax
c001a152:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a156:	50                   	push   eax
c001a157:	53                   	push   ebx
c001a158:	e8 33 8e ff ff       	call   c0012f90 <File::stat(unsigned long long*, bool*)>
c001a15d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a161:	83 c4 10             	add    esp,0x10
c001a164:	89 c1                	mov    ecx,eax
c001a166:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001a16a:	74 31                	je     c001a19d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a16c:	83 ec 0c             	sub    esp,0xc
c001a16f:	50                   	push   eax
c001a170:	e8 5f 53 ff ff       	call   c000f4d4 <malloc>
c001a175:	89 c6                	mov    esi,eax
c001a177:	58                   	pop    eax
c001a178:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a17a:	8d 54 24 20          	lea    edx,[esp+0x20]
c001a17e:	52                   	push   edx
c001a17f:	56                   	push   esi
c001a180:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a184:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a188:	53                   	push   ebx
c001a189:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a18c:	83 c4 20             	add    esp,0x20
c001a18f:	85 c0                	test   eax,eax
c001a191:	75 0a                	jne    c001a19d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a193:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a197:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a19b:	74 18                	je     c001a1b5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001a19d:	83 ec 0c             	sub    esp,0xc
c001a1a0:	53                   	push   ebx
c001a1a1:	e8 9c 8b ff ff       	call   c0012d42 <File::close()>
c001a1a6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a1a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a1ab:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a1ae:	83 c4 10             	add    esp,0x10
c001a1b1:	31 c0                	xor    eax,eax
c001a1b3:	eb 3b                	jmp    c001a1f0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001a1b5:	83 ec 0c             	sub    esp,0xc
c001a1b8:	53                   	push   ebx
c001a1b9:	e8 84 8b ff ff       	call   c0012d42 <File::close()>
c001a1be:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a1c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a1c3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a1c6:	83 c4 0c             	add    esp,0xc
c001a1c9:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a1d0:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a1d7:	56                   	push   esi
c001a1d8:	e8 70 fd ff ff       	call   c0019f4d <Reg::findLineFromLoadedData(char*, char*, char*)>
c001a1dd:	89 34 24             	mov    DWORD PTR [esp],esi
c001a1e0:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a1e4:	e8 fb 52 ff ff       	call   c000f4e4 <free>
c001a1e9:	83 c4 10             	add    esp,0x10
c001a1ec:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a1f0:	81 c4 20 01 00 00    	add    esp,0x120
c001a1f6:	5b                   	pop    ebx
c001a1f7:	5e                   	pop    esi
c001a1f8:	5f                   	pop    edi
c001a1f9:	c3                   	ret    

c001a1fa <Reg::getLine(char*, char*, char*)>:
c001a1fa:	57                   	push   edi
c001a1fb:	56                   	push   esi
c001a1fc:	53                   	push   ebx
c001a1fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a201:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a205:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a209:	57                   	push   edi
c001a20a:	56                   	push   esi
c001a20b:	53                   	push   ebx
c001a20c:	68 09 a4 02 c0       	push   0xc002a409
c001a211:	e8 8f fe ff ff       	call   c001a0a5 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a216:	83 c4 10             	add    esp,0x10
c001a219:	84 c0                	test   al,al
c001a21b:	75 10                	jne    c001a22d <Reg::getLine(char*, char*, char*)+0x33>
c001a21d:	57                   	push   edi
c001a21e:	56                   	push   esi
c001a21f:	53                   	push   ebx
c001a220:	68 2e a4 02 c0       	push   0xc002a42e
c001a225:	e8 7b fe ff ff       	call   c001a0a5 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a22a:	83 c4 10             	add    esp,0x10
c001a22d:	5b                   	pop    ebx
c001a22e:	5e                   	pop    esi
c001a22f:	5f                   	pop    edi
c001a230:	c3                   	ret    

c001a231 <Reg::readInt(char*, char*, int*)>:
c001a231:	55                   	push   ebp
c001a232:	57                   	push   edi
c001a233:	56                   	push   esi
c001a234:	53                   	push   ebx
c001a235:	81 ec f0 00 00 00    	sub    esp,0xf0
c001a23b:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a23f:	57                   	push   edi
c001a240:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a247:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a24e:	e8 a7 ff ff ff       	call   c001a1fa <Reg::getLine(char*, char*, char*)>
c001a253:	83 c4 10             	add    esp,0x10
c001a256:	84 c0                	test   al,al
c001a258:	0f 84 b3 00 00 00    	je     c001a311 <Reg::readInt(char*, char*, int*)+0xe0>
c001a25e:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001a262:	80 fa 2b             	cmp    dl,0x2b
c001a265:	74 0c                	je     c001a273 <Reg::readInt(char*, char*, int*)+0x42>
c001a267:	80 fa 2d             	cmp    dl,0x2d
c001a26a:	75 0e                	jne    c001a27a <Reg::readInt(char*, char*, int*)+0x49>
c001a26c:	ba 01 00 00 00       	mov    edx,0x1
c001a271:	eb 0b                	jmp    c001a27e <Reg::readInt(char*, char*, int*)+0x4d>
c001a273:	ba 01 00 00 00       	mov    edx,0x1
c001a278:	eb 02                	jmp    c001a27c <Reg::readInt(char*, char*, int*)+0x4b>
c001a27a:	31 d2                	xor    edx,edx
c001a27c:	31 c0                	xor    eax,eax
c001a27e:	be 0a 00 00 00       	mov    esi,0xa
c001a283:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001a288:	75 20                	jne    c001a2aa <Reg::readInt(char*, char*, int*)+0x79>
c001a28a:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001a28e:	80 f9 78             	cmp    cl,0x78
c001a291:	75 0a                	jne    c001a29d <Reg::readInt(char*, char*, int*)+0x6c>
c001a293:	83 c2 02             	add    edx,0x2
c001a296:	be 10 00 00 00       	mov    esi,0x10
c001a29b:	eb 0d                	jmp    c001a2aa <Reg::readInt(char*, char*, int*)+0x79>
c001a29d:	80 f9 62             	cmp    cl,0x62
c001a2a0:	75 08                	jne    c001a2aa <Reg::readInt(char*, char*, int*)+0x79>
c001a2a2:	83 c2 02             	add    edx,0x2
c001a2a5:	be 02 00 00 00       	mov    esi,0x2
c001a2aa:	01 d7                	add    edi,edx
c001a2ac:	31 d2                	xor    edx,edx
c001a2ae:	8a 1f                	mov    bl,BYTE PTR [edi]
c001a2b0:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001a2b4:	80 fb 0d             	cmp    bl,0xd
c001a2b7:	0f 94 c3             	sete   bl
c001a2ba:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a2bf:	0f 94 c1             	sete   cl
c001a2c2:	08 cb                	or     bl,cl
c001a2c4:	75 3a                	jne    c001a300 <Reg::readInt(char*, char*, int*)+0xcf>
c001a2c6:	0f af d6             	imul   edx,esi
c001a2c9:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001a2ce:	83 fe 10             	cmp    esi,0x10
c001a2d1:	75 26                	jne    c001a2f9 <Reg::readInt(char*, char*, int*)+0xc8>
c001a2d3:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a2d7:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001a2da:	89 e9                	mov    ecx,ebp
c001a2dc:	80 f9 05             	cmp    cl,0x5
c001a2df:	77 06                	ja     c001a2e7 <Reg::readInt(char*, char*, int*)+0xb6>
c001a2e1:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001a2e5:	eb 16                	jmp    c001a2fd <Reg::readInt(char*, char*, int*)+0xcc>
c001a2e7:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a2eb:	83 e9 61             	sub    ecx,0x61
c001a2ee:	80 f9 05             	cmp    cl,0x5
c001a2f1:	77 06                	ja     c001a2f9 <Reg::readInt(char*, char*, int*)+0xc8>
c001a2f3:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001a2f7:	eb 04                	jmp    c001a2fd <Reg::readInt(char*, char*, int*)+0xcc>
c001a2f9:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001a2fd:	47                   	inc    edi
c001a2fe:	eb ae                	jmp    c001a2ae <Reg::readInt(char*, char*, int*)+0x7d>
c001a300:	84 c0                	test   al,al
c001a302:	74 02                	je     c001a306 <Reg::readInt(char*, char*, int*)+0xd5>
c001a304:	f7 da                	neg    edx
c001a306:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001a30d:	89 10                	mov    DWORD PTR [eax],edx
c001a30f:	88 d8                	mov    al,bl
c001a311:	81 c4 ec 00 00 00    	add    esp,0xec
c001a317:	5b                   	pop    ebx
c001a318:	5e                   	pop    esi
c001a319:	5f                   	pop    edi
c001a31a:	5d                   	pop    ebp
c001a31b:	c3                   	ret    

c001a31c <Reg::readString(char*, char*, char*, int)>:
c001a31c:	57                   	push   edi
c001a31d:	56                   	push   esi
c001a31e:	53                   	push   ebx
c001a31f:	81 ec d4 00 00 00    	sub    esp,0xd4
c001a325:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001a32c:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001a330:	57                   	push   edi
c001a331:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a338:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a33f:	e8 b6 fe ff ff       	call   c001a1fa <Reg::getLine(char*, char*, char*)>
c001a344:	83 c4 10             	add    esp,0x10
c001a347:	89 c6                	mov    esi,eax
c001a349:	84 c0                	test   al,al
c001a34b:	74 44                	je     c001a391 <Reg::readString(char*, char*, char*, int)+0x75>
c001a34d:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001a354:	31 c0                	xor    eax,eax
c001a356:	4a                   	dec    edx
c001a357:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001a35a:	84 c9                	test   cl,cl
c001a35c:	74 0f                	je     c001a36d <Reg::readString(char*, char*, char*, int)+0x51>
c001a35e:	39 c2                	cmp    edx,eax
c001a360:	7e 0b                	jle    c001a36d <Reg::readString(char*, char*, char*, int)+0x51>
c001a362:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001a365:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001a36a:	40                   	inc    eax
c001a36b:	eb ea                	jmp    c001a357 <Reg::readString(char*, char*, char*, int)+0x3b>
c001a36d:	83 ec 0c             	sub    esp,0xc
c001a370:	53                   	push   ebx
c001a371:	e8 32 63 fe ff       	call   c00006a8 <strlen>
c001a376:	83 c4 10             	add    esp,0x10
c001a379:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001a37e:	75 11                	jne    c001a391 <Reg::readString(char*, char*, char*, int)+0x75>
c001a380:	83 ec 0c             	sub    esp,0xc
c001a383:	53                   	push   ebx
c001a384:	e8 1f 63 fe ff       	call   c00006a8 <strlen>
c001a389:	83 c4 10             	add    esp,0x10
c001a38c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001a391:	81 c4 d0 00 00 00    	add    esp,0xd0
c001a397:	89 f0                	mov    eax,esi
c001a399:	5b                   	pop    ebx
c001a39a:	5e                   	pop    esi
c001a39b:	5f                   	pop    edi
c001a39c:	c3                   	ret    

c001a39d <Reg::readBool(char*, char*, bool*)>:
c001a39d:	83 ec 20             	sub    esp,0x20
c001a3a0:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a3a4:	50                   	push   eax
c001a3a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3ad:	e8 7f fe ff ff       	call   c001a231 <Reg::readInt(char*, char*, int*)>
c001a3b2:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a3b7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a3bb:	0f 95 02             	setne  BYTE PTR [edx]
c001a3be:	83 c4 2c             	add    esp,0x2c
c001a3c1:	c3                   	ret    

c001a3c2 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001a3c2:	53                   	push   ebx
c001a3c3:	83 ec 1c             	sub    esp,0x1c
c001a3c6:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001a3ca:	8d 44 24 13          	lea    eax,[esp+0x13]
c001a3ce:	50                   	push   eax
c001a3cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3d7:	e8 c1 ff ff ff       	call   c001a39d <Reg::readBool(char*, char*, bool*)>
c001a3dc:	83 c4 10             	add    esp,0x10
c001a3df:	84 c0                	test   al,al
c001a3e1:	74 04                	je     c001a3e7 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001a3e3:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001a3e7:	88 d8                	mov    al,bl
c001a3e9:	83 c4 18             	add    esp,0x18
c001a3ec:	5b                   	pop    ebx
c001a3ed:	c3                   	ret    

c001a3ee <Reg::readIntWithDefault(char*, char*, int)>:
c001a3ee:	53                   	push   ebx
c001a3ef:	83 ec 1c             	sub    esp,0x1c
c001a3f2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a3f6:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a3fa:	50                   	push   eax
c001a3fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a403:	e8 29 fe ff ff       	call   c001a231 <Reg::readInt(char*, char*, int*)>
c001a408:	83 c4 10             	add    esp,0x10
c001a40b:	84 c0                	test   al,al
c001a40d:	74 04                	je     c001a413 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001a40f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a413:	89 d8                	mov    eax,ebx
c001a415:	83 c4 18             	add    esp,0x18
c001a418:	5b                   	pop    ebx
c001a419:	c3                   	ret    

c001a41a <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001a41a:	57                   	push   edi
c001a41b:	56                   	push   esi
c001a41c:	53                   	push   ebx
c001a41d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a421:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001a425:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a429:	56                   	push   esi
c001a42a:	53                   	push   ebx
c001a42b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a42f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a433:	e8 e4 fe ff ff       	call   c001a31c <Reg::readString(char*, char*, char*, int)>
c001a438:	83 c4 10             	add    esp,0x10
c001a43b:	84 c0                	test   al,al
c001a43d:	75 1b                	jne    c001a45a <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001a43f:	50                   	push   eax
c001a440:	56                   	push   esi
c001a441:	4e                   	dec    esi
c001a442:	6a 00                	push   0x0
c001a444:	53                   	push   ebx
c001a445:	e8 41 62 fe ff       	call   c000068b <memset>
c001a44a:	83 c4 0c             	add    esp,0xc
c001a44d:	56                   	push   esi
c001a44e:	57                   	push   edi
c001a44f:	53                   	push   ebx
c001a450:	89 fb                	mov    ebx,edi
c001a452:	e8 fe 61 fe ff       	call   c0000655 <memcpy>
c001a457:	83 c4 10             	add    esp,0x10
c001a45a:	89 d8                	mov    eax,ebx
c001a45c:	5b                   	pop    ebx
c001a45d:	5e                   	pop    esi
c001a45e:	5f                   	pop    edi
c001a45f:	c3                   	ret    

c001a460 <Sys::exit(regs*)>:
c001a460:	83 ec 18             	sub    esp,0x18
c001a463:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a467:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a46a:	e8 ce 32 00 00       	call   c001d73d <terminateTask(int)>
c001a46f:	83 c8 ff             	or     eax,0xffffffff
c001a472:	83 c4 1c             	add    esp,0x1c
c001a475:	89 c2                	mov    edx,eax
c001a477:	c3                   	ret    

c001a478 <Sys::getCwd(regs*)>:
c001a478:	83 ec 10             	sub    esp,0x10
c001a47b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a47f:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001a482:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a485:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a48a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a48d:	e8 5f 8b ff ff       	call   c0012ff1 <getcwd(Process*, char*, int)>
c001a492:	83 c4 1c             	add    esp,0x1c
c001a495:	99                   	cdq    
c001a496:	c3                   	ret    

c001a497 <Sys::getPID(regs*)>:
c001a497:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a49c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a49f:	8b 00                	mov    eax,DWORD PTR [eax]
c001a4a1:	99                   	cdq    
c001a4a2:	c3                   	ret    

c001a4a3 <Sys::loadDLL(regs*)>:
c001a4a3:	56                   	push   esi
c001a4a4:	53                   	push   ebx
c001a4a5:	31 d2                	xor    edx,edx
c001a4a7:	51                   	push   ecx
c001a4a8:	b8 01 00 00 00       	mov    eax,0x1
c001a4ad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a4b1:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001a4b5:	0f 84 8c 00 00 00    	je     c001a547 <Sys::loadDLL(regs*)+0xa4>
c001a4bb:	83 ec 0c             	sub    esp,0xc
c001a4be:	68 14 01 00 00       	push   0x114
c001a4c3:	e8 0c 50 ff ff       	call   c000f4d4 <malloc>
c001a4c8:	83 c4 0c             	add    esp,0xc
c001a4cb:	89 c3                	mov    ebx,eax
c001a4cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a4d2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a4d5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001a4d8:	53                   	push   ebx
c001a4d9:	e8 a2 87 ff ff       	call   c0012c80 <File::File(char const*, Process*)>
c001a4de:	83 c4 10             	add    esp,0x10
c001a4e1:	31 d2                	xor    edx,edx
c001a4e3:	b8 02 00 00 00       	mov    eax,0x2
c001a4e8:	85 db                	test   ebx,ebx
c001a4ea:	74 5b                	je     c001a547 <Sys::loadDLL(regs*)+0xa4>
c001a4ec:	83 ec 0c             	sub    esp,0xc
c001a4ef:	53                   	push   ebx
c001a4f0:	e8 5d 8a ff ff       	call   c0012f52 <File::exists()>
c001a4f5:	83 c4 10             	add    esp,0x10
c001a4f8:	84 c0                	test   al,al
c001a4fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a4fc:	75 11                	jne    c001a50f <Sys::loadDLL(regs*)+0x6c>
c001a4fe:	83 ec 0c             	sub    esp,0xc
c001a501:	53                   	push   ebx
c001a502:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a505:	83 c4 10             	add    esp,0x10
c001a508:	b8 03 00 00 00       	mov    eax,0x3
c001a50d:	eb 36                	jmp    c001a545 <Sys::loadDLL(regs*)+0xa2>
c001a50f:	83 ec 0c             	sub    esp,0xc
c001a512:	53                   	push   ebx
c001a513:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a516:	58                   	pop    eax
c001a517:	5a                   	pop    edx
c001a518:	6a 00                	push   0x0
c001a51a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001a51d:	e8 64 21 00 00       	call   c001c686 <Thr::loadDLL(char const*, bool)>
c001a522:	83 c4 10             	add    esp,0x10
c001a525:	89 c1                	mov    ecx,eax
c001a527:	31 d2                	xor    edx,edx
c001a529:	b8 04 00 00 00       	mov    eax,0x4
c001a52e:	85 c9                	test   ecx,ecx
c001a530:	74 15                	je     c001a547 <Sys::loadDLL(regs*)+0xa4>
c001a532:	53                   	push   ebx
c001a533:	53                   	push   ebx
c001a534:	ff 35 28 c9 02 c0    	push   DWORD PTR ds:0xc002c928
c001a53a:	51                   	push   ecx
c001a53b:	e8 55 23 00 00       	call   c001c895 <Thr::executeDLL(unsigned long, void*)>
c001a540:	83 c4 10             	add    esp,0x10
c001a543:	31 c0                	xor    eax,eax
c001a545:	31 d2                	xor    edx,edx
c001a547:	59                   	pop    ecx
c001a548:	5b                   	pop    ebx
c001a549:	5e                   	pop    esi
c001a54a:	c3                   	ret    

c001a54b <Sys::read(regs*)>:
c001a54b:	57                   	push   edi
c001a54c:	56                   	push   esi
c001a54d:	53                   	push   ebx
c001a54e:	83 ec 10             	sub    esp,0x10
c001a551:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a555:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a558:	83 f8 02             	cmp    eax,0x2
c001a55b:	77 10                	ja     c001a56d <Sys::read(regs*)+0x22>
c001a55d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a562:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a565:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001a56b:	eb 0e                	jmp    c001a57b <Sys::read(regs*)+0x30>
c001a56d:	83 ec 0c             	sub    esp,0xc
c001a570:	50                   	push   eax
c001a571:	e8 95 70 ff ff       	call   c001160b <getFromFileDescriptor(int)>
c001a576:	83 c4 10             	add    esp,0x10
c001a579:	89 c1                	mov    ecx,eax
c001a57b:	83 c8 ff             	or     eax,0xffffffff
c001a57e:	85 c9                	test   ecx,ecx
c001a580:	89 c2                	mov    edx,eax
c001a582:	74 28                	je     c001a5ac <Sys::read(regs*)+0x61>
c001a584:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a58c:	31 ff                	xor    edi,edi
c001a58e:	83 ec 0c             	sub    esp,0xc
c001a591:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a593:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a597:	52                   	push   edx
c001a598:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a59b:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001a59e:	57                   	push   edi
c001a59f:	56                   	push   esi
c001a5a0:	51                   	push   ecx
c001a5a1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a5a4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a5a8:	83 c4 20             	add    esp,0x20
c001a5ab:	99                   	cdq    
c001a5ac:	83 c4 10             	add    esp,0x10
c001a5af:	5b                   	pop    ebx
c001a5b0:	5e                   	pop    esi
c001a5b1:	5f                   	pop    edi
c001a5b2:	c3                   	ret    

c001a5b3 <Sys::sbrk(regs*)>:
c001a5b3:	56                   	push   esi
c001a5b4:	53                   	push   ebx
c001a5b5:	50                   	push   eax
c001a5b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a5bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a5bf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a5c2:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001a5c5:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001a5cb:	85 db                	test   ebx,ebx
c001a5cd:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001a5d0:	74 02                	je     c001a5d4 <Sys::sbrk(regs*)+0x21>
c001a5d2:	79 06                	jns    c001a5da <Sys::sbrk(regs*)+0x27>
c001a5d4:	89 f0                	mov    eax,esi
c001a5d6:	31 d2                	xor    edx,edx
c001a5d8:	eb 2a                	jmp    c001a604 <Sys::sbrk(regs*)+0x51>
c001a5da:	83 c8 ff             	or     eax,0xffffffff
c001a5dd:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001a5e3:	89 c2                	mov    edx,eax
c001a5e5:	77 1d                	ja     c001a604 <Sys::sbrk(regs*)+0x51>
c001a5e7:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001a5ed:	50                   	push   eax
c001a5ee:	c1 ea 0c             	shr    edx,0xc
c001a5f1:	68 07 04 00 00       	push   0x407
c001a5f6:	52                   	push   edx
c001a5f7:	51                   	push   ecx
c001a5f8:	e8 2f 79 ff ff       	call   c0011f2c <VAS::allocatePages(int, int)>
c001a5fd:	89 f0                	mov    eax,esi
c001a5ff:	31 d2                	xor    edx,edx
c001a601:	83 c4 10             	add    esp,0x10
c001a604:	59                   	pop    ecx
c001a605:	5b                   	pop    ebx
c001a606:	5e                   	pop    esi
c001a607:	c3                   	ret    

c001a608 <Sys::setCwd(regs*)>:
c001a608:	83 ec 14             	sub    esp,0x14
c001a60b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a60f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a612:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a617:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a61a:	e8 fc 89 ff ff       	call   c001301b <setcwd(Process*, char*)>
c001a61f:	83 c4 1c             	add    esp,0x1c
c001a622:	99                   	cdq    
c001a623:	c3                   	ret    

c001a624 <Sys::write(regs*)>:
c001a624:	57                   	push   edi
c001a625:	56                   	push   esi
c001a626:	53                   	push   ebx
c001a627:	83 ec 10             	sub    esp,0x10
c001a62a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a62e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a631:	83 f8 02             	cmp    eax,0x2
c001a634:	77 10                	ja     c001a646 <Sys::write(regs*)+0x22>
c001a636:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a63b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a63e:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001a644:	eb 0e                	jmp    c001a654 <Sys::write(regs*)+0x30>
c001a646:	83 ec 0c             	sub    esp,0xc
c001a649:	50                   	push   eax
c001a64a:	e8 bc 6f ff ff       	call   c001160b <getFromFileDescriptor(int)>
c001a64f:	83 c4 10             	add    esp,0x10
c001a652:	89 c1                	mov    ecx,eax
c001a654:	83 c8 ff             	or     eax,0xffffffff
c001a657:	85 c9                	test   ecx,ecx
c001a659:	89 c2                	mov    edx,eax
c001a65b:	74 28                	je     c001a685 <Sys::write(regs*)+0x61>
c001a65d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a665:	31 ff                	xor    edi,edi
c001a667:	83 ec 0c             	sub    esp,0xc
c001a66a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a66c:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a670:	52                   	push   edx
c001a671:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a674:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001a677:	57                   	push   edi
c001a678:	56                   	push   esi
c001a679:	51                   	push   ecx
c001a67a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001a67d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a681:	83 c4 20             	add    esp,0x20
c001a684:	99                   	cdq    
c001a685:	83 c4 10             	add    esp,0x10
c001a688:	5b                   	pop    ebx
c001a689:	5e                   	pop    esi
c001a68a:	5f                   	pop    edi
c001a68b:	c3                   	ret    

c001a68c <Sys::yield(regs*)>:
c001a68c:	57                   	push   edi
c001a68d:	56                   	push   esi
c001a68e:	53                   	push   ebx
c001a68f:	e8 66 26 00 00       	call   c001ccfa <lockScheduler()>
c001a694:	e8 9d 29 00 00       	call   c001d036 <schedule()>
c001a699:	e8 5e 26 00 00       	call   c001ccfc <unlockScheduler()>
c001a69e:	8b 35 90 cf 02 c0    	mov    esi,DWORD PTR ds:0xc002cf90
c001a6a4:	8b 3d 94 cf 02 c0    	mov    edi,DWORD PTR ds:0xc002cf94
c001a6aa:	89 f0                	mov    eax,esi
c001a6ac:	89 fb                	mov    ebx,edi
c001a6ae:	89 f1                	mov    ecx,esi
c001a6b0:	c1 e0 07             	shl    eax,0x7
c001a6b3:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001a6b7:	25 80 30 0f 00       	and    eax,0xf3080
c001a6bc:	c1 eb 17             	shr    ebx,0x17
c001a6bf:	31 c8                	xor    eax,ecx
c001a6c1:	89 da                	mov    edx,ebx
c001a6c3:	5b                   	pop    ebx
c001a6c4:	5e                   	pop    esi
c001a6c5:	5f                   	pop    edi
c001a6c6:	c3                   	ret    

c001a6c7 <sysCallSeekDir(regs*)>:
c001a6c7:	31 c0                	xor    eax,eax
c001a6c9:	31 d2                	xor    edx,edx
c001a6cb:	c3                   	ret    

c001a6cc <sysCallTellDir(regs*)>:
c001a6cc:	31 c0                	xor    eax,eax
c001a6ce:	31 d2                	xor    edx,edx
c001a6d0:	c3                   	ret    

c001a6d1 <sysCallVerify(regs*)>:
c001a6d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6d5:	31 d2                	xor    edx,edx
c001a6d7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a6da:	c3                   	ret    

c001a6db <sysCallGetArgc(regs*)>:
c001a6db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a6e0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a6e3:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001a6e9:	99                   	cdq    
c001a6ea:	c3                   	ret    

c001a6eb <sysFormatDisk(regs*)>:
c001a6eb:	56                   	push   esi
c001a6ec:	53                   	push   ebx
c001a6ed:	53                   	push   ebx
c001a6ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a6f2:	8b 1d 88 ca 02 c0    	mov    ebx,DWORD PTR ds:0xc002ca88
c001a6f8:	eb 25                	jmp    c001a71f <sysFormatDisk(regs*)+0x34>
c001a6fa:	83 ec 0c             	sub    esp,0xc
c001a6fd:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a700:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a702:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001a705:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001a708:	50                   	push   eax
c001a709:	ff 34 85 20 cf 02 c0 	push   DWORD PTR [eax*4-0x3ffd30e0]
c001a710:	53                   	push   ebx
c001a711:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001a714:	83 c4 20             	add    esp,0x20
c001a717:	83 f8 08             	cmp    eax,0x8
c001a71a:	75 12                	jne    c001a72e <sysFormatDisk(regs*)+0x43>
c001a71c:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001a71f:	85 db                	test   ebx,ebx
c001a721:	75 d7                	jne    c001a6fa <sysFormatDisk(regs*)+0xf>
c001a723:	59                   	pop    ecx
c001a724:	b8 03 00 00 00       	mov    eax,0x3
c001a729:	31 d2                	xor    edx,edx
c001a72b:	5b                   	pop    ebx
c001a72c:	5e                   	pop    esi
c001a72d:	c3                   	ret    
c001a72e:	85 c0                	test   eax,eax
c001a730:	74 1b                	je     c001a74d <sysFormatDisk(regs*)+0x62>
c001a732:	83 f8 09             	cmp    eax,0x9
c001a735:	74 0b                	je     c001a742 <sysFormatDisk(regs*)+0x57>
c001a737:	59                   	pop    ecx
c001a738:	b8 02 00 00 00       	mov    eax,0x2
c001a73d:	31 d2                	xor    edx,edx
c001a73f:	5b                   	pop    ebx
c001a740:	5e                   	pop    esi
c001a741:	c3                   	ret    
c001a742:	59                   	pop    ecx
c001a743:	b8 01 00 00 00       	mov    eax,0x1
c001a748:	31 d2                	xor    edx,edx
c001a74a:	5b                   	pop    ebx
c001a74b:	5e                   	pop    esi
c001a74c:	c3                   	ret    
c001a74d:	59                   	pop    ecx
c001a74e:	31 c0                	xor    eax,eax
c001a750:	31 d2                	xor    edx,edx
c001a752:	5b                   	pop    ebx
c001a753:	5e                   	pop    esi
c001a754:	c3                   	ret    

c001a755 <sysSetDiskVolumeLabel(regs*)>:
c001a755:	56                   	push   esi
c001a756:	53                   	push   ebx
c001a757:	53                   	push   ebx
c001a758:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a75c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001a75f:	83 f8 19             	cmp    eax,0x19
c001a762:	77 29                	ja     c001a78d <sysSetDiskVolumeLabel(regs*)+0x38>
c001a764:	8b 0c 85 20 cf 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd30e0]
c001a76b:	85 c9                	test   ecx,ecx
c001a76d:	74 1e                	je     c001a78d <sysSetDiskVolumeLabel(regs*)+0x38>
c001a76f:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001a772:	85 d2                	test   edx,edx
c001a774:	74 17                	je     c001a78d <sysSetDiskVolumeLabel(regs*)+0x38>
c001a776:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001a77c:	8b 33                	mov    esi,DWORD PTR [ebx]
c001a77e:	52                   	push   edx
c001a77f:	50                   	push   eax
c001a780:	51                   	push   ecx
c001a781:	53                   	push   ebx
c001a782:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001a785:	83 c4 10             	add    esp,0x10
c001a788:	99                   	cdq    
c001a789:	59                   	pop    ecx
c001a78a:	5b                   	pop    ebx
c001a78b:	5e                   	pop    esi
c001a78c:	c3                   	ret    
c001a78d:	59                   	pop    ecx
c001a78e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001a793:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a798:	5b                   	pop    ebx
c001a799:	5e                   	pop    esi
c001a79a:	c3                   	ret    

c001a79b <sysGetDiskVolumeLabel(regs*)>:
c001a79b:	57                   	push   edi
c001a79c:	56                   	push   esi
c001a79d:	53                   	push   ebx
c001a79e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7a2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001a7a5:	83 fa 19             	cmp    edx,0x19
c001a7a8:	77 34                	ja     c001a7de <sysGetDiskVolumeLabel(regs*)+0x43>
c001a7aa:	8b 0c 95 20 cf 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd30e0]
c001a7b1:	85 c9                	test   ecx,ecx
c001a7b3:	74 29                	je     c001a7de <sysGetDiskVolumeLabel(regs*)+0x43>
c001a7b5:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001a7b8:	85 db                	test   ebx,ebx
c001a7ba:	74 22                	je     c001a7de <sysGetDiskVolumeLabel(regs*)+0x43>
c001a7bc:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001a7bf:	85 c0                	test   eax,eax
c001a7c1:	74 1b                	je     c001a7de <sysGetDiskVolumeLabel(regs*)+0x43>
c001a7c3:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001a7c9:	83 ec 0c             	sub    esp,0xc
c001a7cc:	8b 3e                	mov    edi,DWORD PTR [esi]
c001a7ce:	50                   	push   eax
c001a7cf:	53                   	push   ebx
c001a7d0:	52                   	push   edx
c001a7d1:	51                   	push   ecx
c001a7d2:	56                   	push   esi
c001a7d3:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001a7d6:	83 c4 20             	add    esp,0x20
c001a7d9:	99                   	cdq    
c001a7da:	5b                   	pop    ebx
c001a7db:	5e                   	pop    esi
c001a7dc:	5f                   	pop    edi
c001a7dd:	c3                   	ret    
c001a7de:	5b                   	pop    ebx
c001a7df:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001a7e4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a7e9:	5e                   	pop    esi
c001a7ea:	5f                   	pop    edi
c001a7eb:	c3                   	ret    

c001a7ec <sysShutdown(regs*)>:
c001a7ec:	83 ec 0c             	sub    esp,0xc
c001a7ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7f3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a7f6:	85 c0                	test   eax,eax
c001a7f8:	74 18                	je     c001a812 <sysShutdown(regs*)+0x26>
c001a7fa:	83 f8 01             	cmp    eax,0x1
c001a7fd:	74 38                	je     c001a837 <sysShutdown(regs*)+0x4b>
c001a7ff:	83 f8 02             	cmp    eax,0x2
c001a802:	74 24                	je     c001a828 <sysShutdown(regs*)+0x3c>
c001a804:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a809:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a80e:	83 c4 0c             	add    esp,0xc
c001a811:	c3                   	ret    
c001a812:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c001a817:	8b 10                	mov    edx,DWORD PTR [eax]
c001a819:	6a 00                	push   0x0
c001a81b:	6a 00                	push   0x0
c001a81d:	6a 00                	push   0x0
c001a81f:	50                   	push   eax
c001a820:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a823:	83 c4 10             	add    esp,0x10
c001a826:	eb dc                	jmp    c001a804 <sysShutdown(regs*)+0x18>
c001a828:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c001a82d:	8b 10                	mov    edx,DWORD PTR [eax]
c001a82f:	6a 00                	push   0x0
c001a831:	6a 00                	push   0x0
c001a833:	6a 01                	push   0x1
c001a835:	eb e8                	jmp    c001a81f <sysShutdown(regs*)+0x33>
c001a837:	a1 a0 cf 02 c0       	mov    eax,ds:0xc002cfa0
c001a83c:	85 c0                	test   eax,eax
c001a83e:	74 02                	je     c001a842 <sysShutdown(regs*)+0x56>
c001a840:	ff d0                	call   eax
c001a842:	31 c0                	xor    eax,eax
c001a844:	31 d2                	xor    edx,edx
c001a846:	83 c4 0c             	add    esp,0xc
c001a849:	c3                   	ret    

c001a84a <sysCallRealpath(regs*)>:
c001a84a:	83 ec 0c             	sub    esp,0xc
c001a84d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a851:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001a854:	85 d2                	test   edx,edx
c001a856:	74 07                	je     c001a85f <sysCallRealpath(regs*)+0x15>
c001a858:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001a85b:	85 c0                	test   eax,eax
c001a85d:	75 0b                	jne    c001a86a <sysCallRealpath(regs*)+0x20>
c001a85f:	b8 01 00 00 00       	mov    eax,0x1
c001a864:	31 d2                	xor    edx,edx
c001a866:	83 c4 0c             	add    esp,0xc
c001a869:	c3                   	ret    
c001a86a:	51                   	push   ecx
c001a86b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001a871:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001a874:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001a87a:	51                   	push   ecx
c001a87b:	52                   	push   edx
c001a87c:	50                   	push   eax
c001a87d:	e8 54 82 ff ff       	call   c0012ad6 <standardiseFiles(char*, char const*, char const*)>
c001a882:	83 c4 10             	add    esp,0x10
c001a885:	31 c0                	xor    eax,eax
c001a887:	31 d2                	xor    edx,edx
c001a889:	83 c4 0c             	add    esp,0xc
c001a88c:	c3                   	ret    

c001a88d <sysCallReadDir(regs*)>:
c001a88d:	53                   	push   ebx
c001a88e:	83 ec 18             	sub    esp,0x18
c001a891:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a895:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001a898:	83 f8 02             	cmp    eax,0x2
c001a89b:	76 53                	jbe    c001a8f0 <sysCallReadDir(regs*)+0x63>
c001a89d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001a8a0:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001a8a6:	77 4f                	ja     c001a8f7 <sysCallReadDir(regs*)+0x6a>
c001a8a8:	83 ec 0c             	sub    esp,0xc
c001a8ab:	50                   	push   eax
c001a8ac:	e8 5a 6d ff ff       	call   c001160b <getFromFileDescriptor(int)>
c001a8b1:	83 c4 10             	add    esp,0x10
c001a8b4:	85 c0                	test   eax,eax
c001a8b6:	74 50                	je     c001a908 <sysCallReadDir(regs*)+0x7b>
c001a8b8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a8c0:	83 ec 0c             	sub    esp,0xc
c001a8c3:	8b 10                	mov    edx,DWORD PTR [eax]
c001a8c5:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001a8c9:	51                   	push   ecx
c001a8ca:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a8cd:	6a 00                	push   0x0
c001a8cf:	68 10 01 00 00       	push   0x110
c001a8d4:	50                   	push   eax
c001a8d5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a8d8:	83 c4 20             	add    esp,0x20
c001a8db:	85 c0                	test   eax,eax
c001a8dd:	74 38                	je     c001a917 <sysCallReadDir(regs*)+0x8a>
c001a8df:	83 f8 07             	cmp    eax,0x7
c001a8e2:	74 0c                	je     c001a8f0 <sysCallReadDir(regs*)+0x63>
c001a8e4:	b8 02 00 00 00       	mov    eax,0x2
c001a8e9:	31 d2                	xor    edx,edx
c001a8eb:	83 c4 18             	add    esp,0x18
c001a8ee:	5b                   	pop    ebx
c001a8ef:	c3                   	ret    
c001a8f0:	b8 01 00 00 00       	mov    eax,0x1
c001a8f5:	eb f2                	jmp    c001a8e9 <sysCallReadDir(regs*)+0x5c>
c001a8f7:	83 ec 08             	sub    esp,0x8
c001a8fa:	52                   	push   edx
c001a8fb:	68 4c a4 02 c0       	push   0xc002a44c
c001a900:	e8 4c 7e ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001a905:	83 c4 10             	add    esp,0x10
c001a908:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a90d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a912:	83 c4 18             	add    esp,0x18
c001a915:	5b                   	pop    ebx
c001a916:	c3                   	ret    
c001a917:	31 c0                	xor    eax,eax
c001a919:	eb ce                	jmp    c001a8e9 <sysCallReadDir(regs*)+0x5c>

c001a91b <sysCallIsATTY(regs*)>:
c001a91b:	83 ec 0c             	sub    esp,0xc
c001a91e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a922:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a925:	83 f8 02             	cmp    eax,0x2
c001a928:	76 07                	jbe    c001a931 <sysCallIsATTY(regs*)+0x16>
c001a92a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001a92f:	75 26                	jne    c001a957 <sysCallIsATTY(regs*)+0x3c>
c001a931:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a936:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a939:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a93f:	85 c0                	test   eax,eax
c001a941:	74 24                	je     c001a967 <sysCallIsATTY(regs*)+0x4c>
c001a943:	83 ec 0c             	sub    esp,0xc
c001a946:	8b 10                	mov    edx,DWORD PTR [eax]
c001a948:	50                   	push   eax
c001a949:	ff 12                	call   DWORD PTR [edx]
c001a94b:	31 d2                	xor    edx,edx
c001a94d:	0f b6 c0             	movzx  eax,al
c001a950:	83 c4 10             	add    esp,0x10
c001a953:	83 c4 0c             	add    esp,0xc
c001a956:	c3                   	ret    
c001a957:	83 ec 0c             	sub    esp,0xc
c001a95a:	50                   	push   eax
c001a95b:	e8 ab 6c ff ff       	call   c001160b <getFromFileDescriptor(int)>
c001a960:	83 c4 10             	add    esp,0x10
c001a963:	85 c0                	test   eax,eax
c001a965:	75 dc                	jne    c001a943 <sysCallIsATTY(regs*)+0x28>
c001a967:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a96c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a971:	83 c4 0c             	add    esp,0xc
c001a974:	c3                   	ret    

c001a975 <sysCallSeek(regs*)>:
c001a975:	53                   	push   ebx
c001a976:	83 ec 08             	sub    esp,0x8
c001a979:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a97d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a980:	83 f8 02             	cmp    eax,0x2
c001a983:	76 4a                	jbe    c001a9cf <sysCallSeek(regs*)+0x5a>
c001a985:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001a98a:	77 32                	ja     c001a9be <sysCallSeek(regs*)+0x49>
c001a98c:	83 ec 0c             	sub    esp,0xc
c001a98f:	50                   	push   eax
c001a990:	e8 76 6c ff ff       	call   c001160b <getFromFileDescriptor(int)>
c001a995:	83 c4 0c             	add    esp,0xc
c001a998:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001a99b:	31 db                	xor    ebx,ebx
c001a99d:	53                   	push   ebx
c001a99e:	51                   	push   ecx
c001a99f:	50                   	push   eax
c001a9a0:	e8 fd 83 ff ff       	call   c0012da2 <File::seek(unsigned long long)>
c001a9a5:	83 c4 10             	add    esp,0x10
c001a9a8:	85 c0                	test   eax,eax
c001a9aa:	0f 95 c0             	setne  al
c001a9ad:	31 d2                	xor    edx,edx
c001a9af:	0f b6 c0             	movzx  eax,al
c001a9b2:	f7 d8                	neg    eax
c001a9b4:	83 d2 00             	adc    edx,0x0
c001a9b7:	83 c4 08             	add    esp,0x8
c001a9ba:	f7 da                	neg    edx
c001a9bc:	5b                   	pop    ebx
c001a9bd:	c3                   	ret    
c001a9be:	83 ec 08             	sub    esp,0x8
c001a9c1:	50                   	push   eax
c001a9c2:	68 bb a4 02 c0       	push   0xc002a4bb
c001a9c7:	e8 85 7d ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001a9cc:	83 c4 10             	add    esp,0x10
c001a9cf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a9d4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a9d9:	83 c4 08             	add    esp,0x8
c001a9dc:	5b                   	pop    ebx
c001a9dd:	c3                   	ret    

c001a9de <sysCallTell(regs*)>:
c001a9de:	53                   	push   ebx
c001a9df:	83 ec 08             	sub    esp,0x8
c001a9e2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a9e6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a9e9:	83 f8 02             	cmp    eax,0x2
c001a9ec:	76 5e                	jbe    c001aa4c <sysCallTell(regs*)+0x6e>
c001a9ee:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001a9f3:	77 2d                	ja     c001aa22 <sysCallTell(regs*)+0x44>
c001a9f5:	83 ec 0c             	sub    esp,0xc
c001a9f8:	50                   	push   eax
c001a9f9:	e8 0d 6c ff ff       	call   c001160b <getFromFileDescriptor(int)>
c001a9fe:	5a                   	pop    edx
c001a9ff:	59                   	pop    ecx
c001aa00:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001aa03:	50                   	push   eax
c001aa04:	e8 ef 83 ff ff       	call   c0012df8 <File::tell(unsigned long long*)>
c001aa09:	83 c4 10             	add    esp,0x10
c001aa0c:	85 c0                	test   eax,eax
c001aa0e:	0f 95 c0             	setne  al
c001aa11:	31 d2                	xor    edx,edx
c001aa13:	0f b6 c0             	movzx  eax,al
c001aa16:	f7 d8                	neg    eax
c001aa18:	83 d2 00             	adc    edx,0x0
c001aa1b:	83 c4 08             	add    esp,0x8
c001aa1e:	f7 da                	neg    edx
c001aa20:	5b                   	pop    ebx
c001aa21:	c3                   	ret    
c001aa22:	83 ec 08             	sub    esp,0x8
c001aa25:	50                   	push   eax
c001aa26:	68 d5 a4 02 c0       	push   0xc002a4d5
c001aa2b:	e8 21 7d ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001aa30:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001aa33:	83 c4 10             	add    esp,0x10
c001aa36:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001aa3c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001aa43:	31 d2                	xor    edx,edx
c001aa45:	31 c0                	xor    eax,eax
c001aa47:	83 c4 08             	add    esp,0x8
c001aa4a:	5b                   	pop    ebx
c001aa4b:	c3                   	ret    
c001aa4c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001aa51:	ba ff ff ff ff       	mov    edx,0xffffffff
c001aa56:	83 c4 08             	add    esp,0x8
c001aa59:	5b                   	pop    ebx
c001aa5a:	c3                   	ret    

c001aa5b <sysCallSize(regs*)>:
c001aa5b:	53                   	push   ebx
c001aa5c:	83 ec 18             	sub    esp,0x18
c001aa5f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001aa63:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001aa66:	83 f8 02             	cmp    eax,0x2
c001aa69:	76 64                	jbe    c001aacf <sysCallSize(regs*)+0x74>
c001aa6b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001aa70:	77 33                	ja     c001aaa5 <sysCallSize(regs*)+0x4a>
c001aa72:	83 ec 0c             	sub    esp,0xc
c001aa75:	50                   	push   eax
c001aa76:	e8 90 6b ff ff       	call   c001160b <getFromFileDescriptor(int)>
c001aa7b:	83 c4 0c             	add    esp,0xc
c001aa7e:	8d 54 24 13          	lea    edx,[esp+0x13]
c001aa82:	52                   	push   edx
c001aa83:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001aa86:	50                   	push   eax
c001aa87:	e8 04 85 ff ff       	call   c0012f90 <File::stat(unsigned long long*, bool*)>
c001aa8c:	83 c4 10             	add    esp,0x10
c001aa8f:	85 c0                	test   eax,eax
c001aa91:	0f 95 c0             	setne  al
c001aa94:	31 d2                	xor    edx,edx
c001aa96:	0f b6 c0             	movzx  eax,al
c001aa99:	f7 d8                	neg    eax
c001aa9b:	83 d2 00             	adc    edx,0x0
c001aa9e:	83 c4 18             	add    esp,0x18
c001aaa1:	f7 da                	neg    edx
c001aaa3:	5b                   	pop    ebx
c001aaa4:	c3                   	ret    
c001aaa5:	83 ec 08             	sub    esp,0x8
c001aaa8:	50                   	push   eax
c001aaa9:	68 ef a4 02 c0       	push   0xc002a4ef
c001aaae:	e8 9e 7c ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001aab3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001aab6:	83 c4 10             	add    esp,0x10
c001aab9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001aabf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001aac6:	31 d2                	xor    edx,edx
c001aac8:	31 c0                	xor    eax,eax
c001aaca:	83 c4 18             	add    esp,0x18
c001aacd:	5b                   	pop    ebx
c001aace:	c3                   	ret    
c001aacf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001aad4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001aad9:	83 c4 18             	add    esp,0x18
c001aadc:	5b                   	pop    ebx
c001aadd:	c3                   	ret    

c001aade <sysCallSizeFromFilename(regs*)>:
c001aade:	57                   	push   edi
c001aadf:	56                   	push   esi
c001aae0:	53                   	push   ebx
c001aae1:	83 ec 20             	sub    esp,0x20
c001aae4:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001aae8:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001aaeb:	83 fb 02             	cmp    ebx,0x2
c001aaee:	0f 86 99 00 00 00    	jbe    c001ab8d <sysCallSizeFromFilename(regs*)+0xaf>
c001aaf4:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001aafa:	77 65                	ja     c001ab61 <sysCallSizeFromFilename(regs*)+0x83>
c001aafc:	83 ec 0c             	sub    esp,0xc
c001aaff:	68 14 01 00 00       	push   0x114
c001ab04:	e8 cb 49 ff ff       	call   c000f4d4 <malloc>
c001ab09:	83 c4 0c             	add    esp,0xc
c001ab0c:	89 c6                	mov    esi,eax
c001ab0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ab13:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ab16:	53                   	push   ebx
c001ab17:	56                   	push   esi
c001ab18:	e8 63 81 ff ff       	call   c0012c80 <File::File(char const*, Process*)>
c001ab1d:	83 c4 0c             	add    esp,0xc
c001ab20:	8d 44 24 23          	lea    eax,[esp+0x23]
c001ab24:	50                   	push   eax
c001ab25:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001ab28:	56                   	push   esi
c001ab29:	e8 62 84 ff ff       	call   c0012f90 <File::stat(unsigned long long*, bool*)>
c001ab2e:	83 c4 10             	add    esp,0x10
c001ab31:	85 f6                	test   esi,esi
c001ab33:	74 14                	je     c001ab49 <sysCallSizeFromFilename(regs*)+0x6b>
c001ab35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ab39:	8b 16                	mov    edx,DWORD PTR [esi]
c001ab3b:	83 ec 0c             	sub    esp,0xc
c001ab3e:	56                   	push   esi
c001ab3f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ab42:	83 c4 10             	add    esp,0x10
c001ab45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ab49:	85 c0                	test   eax,eax
c001ab4b:	0f 95 c0             	setne  al
c001ab4e:	31 d2                	xor    edx,edx
c001ab50:	0f b6 c0             	movzx  eax,al
c001ab53:	f7 d8                	neg    eax
c001ab55:	83 d2 00             	adc    edx,0x0
c001ab58:	83 c4 20             	add    esp,0x20
c001ab5b:	f7 da                	neg    edx
c001ab5d:	5b                   	pop    ebx
c001ab5e:	5e                   	pop    esi
c001ab5f:	5f                   	pop    edi
c001ab60:	c3                   	ret    
c001ab61:	83 ec 08             	sub    esp,0x8
c001ab64:	53                   	push   ebx
c001ab65:	68 ef a4 02 c0       	push   0xc002a4ef
c001ab6a:	e8 e2 7b ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001ab6f:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001ab72:	83 c4 10             	add    esp,0x10
c001ab75:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ab7b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ab82:	31 d2                	xor    edx,edx
c001ab84:	83 c4 20             	add    esp,0x20
c001ab87:	31 c0                	xor    eax,eax
c001ab89:	5b                   	pop    ebx
c001ab8a:	5e                   	pop    esi
c001ab8b:	5f                   	pop    edi
c001ab8c:	c3                   	ret    
c001ab8d:	83 c4 20             	add    esp,0x20
c001ab90:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ab95:	5b                   	pop    ebx
c001ab96:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ab9b:	5e                   	pop    esi
c001ab9c:	5f                   	pop    edi
c001ab9d:	c3                   	ret    

c001ab9e <sysCallClose(regs*)>:
c001ab9e:	53                   	push   ebx
c001ab9f:	83 ec 08             	sub    esp,0x8
c001aba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aba6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001aba9:	83 f8 02             	cmp    eax,0x2
c001abac:	76 50                	jbe    c001abfe <sysCallClose(regs*)+0x60>
c001abae:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001abb3:	74 58                	je     c001ac0d <sysCallClose(regs*)+0x6f>
c001abb5:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001abba:	74 60                	je     c001ac1c <sysCallClose(regs*)+0x7e>
c001abbc:	77 2f                	ja     c001abed <sysCallClose(regs*)+0x4f>
c001abbe:	83 ec 0c             	sub    esp,0xc
c001abc1:	50                   	push   eax
c001abc2:	e8 44 6a ff ff       	call   c001160b <getFromFileDescriptor(int)>
c001abc7:	89 c3                	mov    ebx,eax
c001abc9:	89 04 24             	mov    DWORD PTR [esp],eax
c001abcc:	e8 71 81 ff ff       	call   c0012d42 <File::close()>
c001abd1:	83 c4 10             	add    esp,0x10
c001abd4:	85 db                	test   ebx,ebx
c001abd6:	74 0c                	je     c001abe4 <sysCallClose(regs*)+0x46>
c001abd8:	83 ec 0c             	sub    esp,0xc
c001abdb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001abdd:	53                   	push   ebx
c001abde:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001abe1:	83 c4 10             	add    esp,0x10
c001abe4:	31 c0                	xor    eax,eax
c001abe6:	31 d2                	xor    edx,edx
c001abe8:	83 c4 08             	add    esp,0x8
c001abeb:	5b                   	pop    ebx
c001abec:	c3                   	ret    
c001abed:	83 ec 08             	sub    esp,0x8
c001abf0:	50                   	push   eax
c001abf1:	68 70 a4 02 c0       	push   0xc002a470
c001abf6:	e8 56 7b ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001abfb:	83 c4 10             	add    esp,0x10
c001abfe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ac03:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ac08:	83 c4 08             	add    esp,0x8
c001ac0b:	5b                   	pop    ebx
c001ac0c:	c3                   	ret    
c001ac0d:	83 ec 0c             	sub    esp,0xc
c001ac10:	68 0a a5 02 c0       	push   0xc002a50a
c001ac15:	e8 37 7b ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001ac1a:	eb c5                	jmp    c001abe1 <sysCallClose(regs*)+0x43>
c001ac1c:	83 ec 0c             	sub    esp,0xc
c001ac1f:	68 18 a5 02 c0       	push   0xc002a518
c001ac24:	eb ef                	jmp    c001ac15 <sysCallClose(regs*)+0x77>

c001ac26 <sysCallOpenDir(regs*)>:
c001ac26:	56                   	push   esi
c001ac27:	53                   	push   ebx
c001ac28:	53                   	push   ebx
c001ac29:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ac2d:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001ac30:	85 f6                	test   esi,esi
c001ac32:	74 59                	je     c001ac8d <sysCallOpenDir(regs*)+0x67>
c001ac34:	83 ec 0c             	sub    esp,0xc
c001ac37:	68 14 01 00 00       	push   0x114
c001ac3c:	e8 93 48 ff ff       	call   c000f4d4 <malloc>
c001ac41:	83 c4 0c             	add    esp,0xc
c001ac44:	89 c6                	mov    esi,eax
c001ac46:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ac4b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ac4e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ac51:	56                   	push   esi
c001ac52:	e8 ff 84 ff ff       	call   c0013156 <Directory::Directory(char const*, Process*)>
c001ac57:	83 c4 10             	add    esp,0x10
c001ac5a:	85 f6                	test   esi,esi
c001ac5c:	74 2f                	je     c001ac8d <sysCallOpenDir(regs*)+0x67>
c001ac5e:	83 ec 0c             	sub    esp,0xc
c001ac61:	56                   	push   esi
c001ac62:	e8 53 85 ff ff       	call   c00131ba <Directory::open()>
c001ac67:	83 c4 10             	add    esp,0x10
c001ac6a:	85 c0                	test   eax,eax
c001ac6c:	75 1f                	jne    c001ac8d <sysCallOpenDir(regs*)+0x67>
c001ac6e:	83 ec 0c             	sub    esp,0xc
c001ac71:	56                   	push   esi
c001ac72:	e8 9f 66 ff ff       	call   c0011316 <UnixFile::getFileDescriptor()>
c001ac77:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001ac7a:	83 c4 10             	add    esp,0x10
c001ac7d:	89 02                	mov    DWORD PTR [edx],eax
c001ac7f:	c1 f8 1f             	sar    eax,0x1f
c001ac82:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ac85:	31 c0                	xor    eax,eax
c001ac87:	59                   	pop    ecx
c001ac88:	31 d2                	xor    edx,edx
c001ac8a:	5b                   	pop    ebx
c001ac8b:	5e                   	pop    esi
c001ac8c:	c3                   	ret    
c001ac8d:	59                   	pop    ecx
c001ac8e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ac93:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ac98:	5b                   	pop    ebx
c001ac99:	5e                   	pop    esi
c001ac9a:	c3                   	ret    

c001ac9b <sysCallCloseDir(regs*)>:
c001ac9b:	53                   	push   ebx
c001ac9c:	83 ec 08             	sub    esp,0x8
c001ac9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aca3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001aca6:	83 f8 02             	cmp    eax,0x2
c001aca9:	76 47                	jbe    c001acf2 <sysCallCloseDir(regs*)+0x57>
c001acab:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001acb0:	77 2f                	ja     c001ace1 <sysCallCloseDir(regs*)+0x46>
c001acb2:	83 ec 0c             	sub    esp,0xc
c001acb5:	50                   	push   eax
c001acb6:	e8 50 69 ff ff       	call   c001160b <getFromFileDescriptor(int)>
c001acbb:	89 c3                	mov    ebx,eax
c001acbd:	89 04 24             	mov    DWORD PTR [esp],eax
c001acc0:	e8 51 85 ff ff       	call   c0013216 <Directory::close()>
c001acc5:	83 c4 10             	add    esp,0x10
c001acc8:	85 db                	test   ebx,ebx
c001acca:	74 0c                	je     c001acd8 <sysCallCloseDir(regs*)+0x3d>
c001accc:	83 ec 0c             	sub    esp,0xc
c001accf:	8b 03                	mov    eax,DWORD PTR [ebx]
c001acd1:	53                   	push   ebx
c001acd2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001acd5:	83 c4 10             	add    esp,0x10
c001acd8:	31 c0                	xor    eax,eax
c001acda:	31 d2                	xor    edx,edx
c001acdc:	83 c4 08             	add    esp,0x8
c001acdf:	5b                   	pop    ebx
c001ace0:	c3                   	ret    
c001ace1:	83 ec 08             	sub    esp,0x8
c001ace4:	50                   	push   eax
c001ace5:	68 98 a4 02 c0       	push   0xc002a498
c001acea:	e8 62 7a ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001acef:	83 c4 10             	add    esp,0x10
c001acf2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001acf7:	ba ff ff ff ff       	mov    edx,0xffffffff
c001acfc:	83 c4 08             	add    esp,0x8
c001acff:	5b                   	pop    ebx
c001ad00:	c3                   	ret    

c001ad01 <sysCallMakeDir(regs*)>:
c001ad01:	56                   	push   esi
c001ad02:	53                   	push   ebx
c001ad03:	83 ec 10             	sub    esp,0x10
c001ad06:	68 14 01 00 00       	push   0x114
c001ad0b:	e8 c4 47 ff ff       	call   c000f4d4 <malloc>
c001ad10:	83 c4 0c             	add    esp,0xc
c001ad13:	89 c3                	mov    ebx,eax
c001ad15:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad1a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ad1d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ad21:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001ad24:	53                   	push   ebx
c001ad25:	e8 2c 84 ff ff       	call   c0013156 <Directory::Directory(char const*, Process*)>
c001ad2a:	83 c4 10             	add    esp,0x10
c001ad2d:	85 db                	test   ebx,ebx
c001ad2f:	74 32                	je     c001ad63 <sysCallMakeDir(regs*)+0x62>
c001ad31:	83 ec 0c             	sub    esp,0xc
c001ad34:	53                   	push   ebx
c001ad35:	e8 60 86 ff ff       	call   c001339a <Directory::create()>
c001ad3a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ad3d:	89 c6                	mov    esi,eax
c001ad3f:	e8 d2 84 ff ff       	call   c0013216 <Directory::close()>
c001ad44:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad46:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ad49:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ad4c:	83 c4 10             	add    esp,0x10
c001ad4f:	31 c0                	xor    eax,eax
c001ad51:	59                   	pop    ecx
c001ad52:	85 f6                	test   esi,esi
c001ad54:	5b                   	pop    ebx
c001ad55:	0f 95 c0             	setne  al
c001ad58:	5e                   	pop    esi
c001ad59:	31 d2                	xor    edx,edx
c001ad5b:	f7 d8                	neg    eax
c001ad5d:	83 d2 00             	adc    edx,0x0
c001ad60:	f7 da                	neg    edx
c001ad62:	c3                   	ret    
c001ad63:	59                   	pop    ecx
c001ad64:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ad69:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ad6e:	5b                   	pop    ebx
c001ad6f:	5e                   	pop    esi
c001ad70:	c3                   	ret    

c001ad71 <sysCallWait(regs*)>:
c001ad71:	83 ec 10             	sub    esp,0x10
c001ad74:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad78:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001ad7b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001ad7e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ad81:	e8 2b 24 00 00       	call   c001d1b1 <waitTask(int, int*, int)>
c001ad86:	83 c4 1c             	add    esp,0x1c
c001ad89:	99                   	cdq    
c001ad8a:	c3                   	ret    

c001ad8b <sysCallNotImpl(regs*)>:
c001ad8b:	83 ec 18             	sub    esp,0x18
c001ad8e:	68 26 a5 02 c0       	push   0xc002a526
c001ad93:	e8 d3 ea ff ff       	call   c001986b <Krnl::panic(char const*)>
c001ad98:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ad9d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ada2:	83 c4 1c             	add    esp,0x1c
c001ada5:	c3                   	ret    

c001ada6 <sysPanic(regs*)>:
c001ada6:	83 ec 18             	sub    esp,0x18
c001ada9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001adad:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001adb0:	e8 b6 ea ff ff       	call   c001986b <Krnl::panic(char const*)>
c001adb5:	c7 04 24 40 a5 02 c0 	mov    DWORD PTR [esp],0xc002a540
c001adbc:	e8 aa ea ff ff       	call   c001986b <Krnl::panic(char const*)>
c001adc1:	b8 01 00 00 00       	mov    eax,0x1
c001adc6:	31 d2                	xor    edx,edx
c001adc8:	83 c4 1c             	add    esp,0x1c
c001adcb:	c3                   	ret    

c001adcc <sysCallRmdir(regs*)>:
c001adcc:	56                   	push   esi
c001adcd:	53                   	push   ebx
c001adce:	83 ec 20             	sub    esp,0x20
c001add1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001add5:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001add8:	68 14 01 00 00       	push   0x114
c001addd:	e8 f2 46 ff ff       	call   c000f4d4 <malloc>
c001ade2:	83 c4 0c             	add    esp,0xc
c001ade5:	89 c3                	mov    ebx,eax
c001ade7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001adec:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001adef:	56                   	push   esi
c001adf0:	53                   	push   ebx
c001adf1:	e8 8a 7e ff ff       	call   c0012c80 <File::File(char const*, Process*)>
c001adf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001adf9:	e8 5e 80 ff ff       	call   c0012e5c <File::unlink()>
c001adfe:	83 c4 10             	add    esp,0x10
c001ae01:	85 db                	test   ebx,ebx
c001ae03:	74 14                	je     c001ae19 <sysCallRmdir(regs*)+0x4d>
c001ae05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ae09:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ae0b:	83 ec 0c             	sub    esp,0xc
c001ae0e:	53                   	push   ebx
c001ae0f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ae12:	83 c4 10             	add    esp,0x10
c001ae15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae19:	85 c0                	test   eax,eax
c001ae1b:	0f 95 c0             	setne  al
c001ae1e:	31 d2                	xor    edx,edx
c001ae20:	0f b6 c0             	movzx  eax,al
c001ae23:	f7 d8                	neg    eax
c001ae25:	83 d2 00             	adc    edx,0x0
c001ae28:	83 c4 14             	add    esp,0x14
c001ae2b:	f7 da                	neg    edx
c001ae2d:	5b                   	pop    ebx
c001ae2e:	5e                   	pop    esi
c001ae2f:	c3                   	ret    

c001ae30 <sysCallUnlink(regs*)>:
c001ae30:	56                   	push   esi
c001ae31:	53                   	push   ebx
c001ae32:	83 ec 20             	sub    esp,0x20
c001ae35:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ae39:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001ae3c:	68 14 01 00 00       	push   0x114
c001ae41:	e8 8e 46 ff ff       	call   c000f4d4 <malloc>
c001ae46:	83 c4 0c             	add    esp,0xc
c001ae49:	89 c3                	mov    ebx,eax
c001ae4b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae50:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ae53:	56                   	push   esi
c001ae54:	53                   	push   ebx
c001ae55:	e8 26 7e ff ff       	call   c0012c80 <File::File(char const*, Process*)>
c001ae5a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae5d:	e8 fa 7f ff ff       	call   c0012e5c <File::unlink()>
c001ae62:	83 c4 10             	add    esp,0x10
c001ae65:	85 db                	test   ebx,ebx
c001ae67:	74 14                	je     c001ae7d <sysCallUnlink(regs*)+0x4d>
c001ae69:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ae6d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ae6f:	83 ec 0c             	sub    esp,0xc
c001ae72:	53                   	push   ebx
c001ae73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ae76:	83 c4 10             	add    esp,0x10
c001ae79:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae7d:	85 c0                	test   eax,eax
c001ae7f:	0f 95 c0             	setne  al
c001ae82:	31 d2                	xor    edx,edx
c001ae84:	0f b6 c0             	movzx  eax,al
c001ae87:	f7 d8                	neg    eax
c001ae89:	83 d2 00             	adc    edx,0x0
c001ae8c:	83 c4 14             	add    esp,0x14
c001ae8f:	f7 da                	neg    edx
c001ae91:	5b                   	pop    ebx
c001ae92:	5e                   	pop    esi
c001ae93:	c3                   	ret    

c001ae94 <sysCallGetArgv(regs*)>:
c001ae94:	83 ec 0c             	sub    esp,0xc
c001ae97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ae9b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001ae9e:	85 c0                	test   eax,eax
c001aea0:	78 2b                	js     c001aecd <sysCallGetArgv(regs*)+0x39>
c001aea2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001aea8:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001aeab:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001aeb1:	7d 1a                	jge    c001aecd <sysCallGetArgv(regs*)+0x39>
c001aeb3:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001aeba:	85 c0                	test   eax,eax
c001aebc:	74 17                	je     c001aed5 <sysCallGetArgv(regs*)+0x41>
c001aebe:	83 ec 08             	sub    esp,0x8
c001aec1:	50                   	push   eax
c001aec2:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001aec5:	e8 60 58 fe ff       	call   c000072a <strcpy>
c001aeca:	83 c4 10             	add    esp,0x10
c001aecd:	31 c0                	xor    eax,eax
c001aecf:	31 d2                	xor    edx,edx
c001aed1:	83 c4 0c             	add    esp,0xc
c001aed4:	c3                   	ret    
c001aed5:	b8 01 00 00 00       	mov    eax,0x1
c001aeda:	31 d2                	xor    edx,edx
c001aedc:	83 c4 0c             	add    esp,0xc
c001aedf:	c3                   	ret    

c001aee0 <sysCallTTYName(regs*)>:
c001aee0:	56                   	push   esi
c001aee1:	53                   	push   ebx
c001aee2:	53                   	push   ebx
c001aee3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001aee7:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001aeea:	85 c0                	test   eax,eax
c001aeec:	74 5f                	je     c001af4d <sysCallTTYName(regs*)+0x6d>
c001aeee:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001aef1:	83 f8 02             	cmp    eax,0x2
c001aef4:	77 3e                	ja     c001af34 <sysCallTTYName(regs*)+0x54>
c001aef6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aefb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aefe:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001af04:	85 db                	test   ebx,ebx
c001af06:	74 45                	je     c001af4d <sysCallTTYName(regs*)+0x6d>
c001af08:	83 ec 0c             	sub    esp,0xc
c001af0b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af0d:	53                   	push   ebx
c001af0e:	ff 10                	call   DWORD PTR [eax]
c001af10:	83 c4 10             	add    esp,0x10
c001af13:	84 c0                	test   al,al
c001af15:	74 41                	je     c001af58 <sysCallTTYName(regs*)+0x78>
c001af17:	83 ec 08             	sub    esp,0x8
c001af1a:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001af20:	53                   	push   ebx
c001af21:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001af24:	e8 01 58 fe ff       	call   c000072a <strcpy>
c001af29:	83 c4 10             	add    esp,0x10
c001af2c:	31 c0                	xor    eax,eax
c001af2e:	59                   	pop    ecx
c001af2f:	31 d2                	xor    edx,edx
c001af31:	5b                   	pop    ebx
c001af32:	5e                   	pop    esi
c001af33:	c3                   	ret    
c001af34:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001af39:	74 bb                	je     c001aef6 <sysCallTTYName(regs*)+0x16>
c001af3b:	83 ec 0c             	sub    esp,0xc
c001af3e:	50                   	push   eax
c001af3f:	e8 c7 66 ff ff       	call   c001160b <getFromFileDescriptor(int)>
c001af44:	83 c4 10             	add    esp,0x10
c001af47:	89 c3                	mov    ebx,eax
c001af49:	85 db                	test   ebx,ebx
c001af4b:	75 bb                	jne    c001af08 <sysCallTTYName(regs*)+0x28>
c001af4d:	59                   	pop    ecx
c001af4e:	b8 01 00 00 00       	mov    eax,0x1
c001af53:	31 d2                	xor    edx,edx
c001af55:	5b                   	pop    ebx
c001af56:	5e                   	pop    esi
c001af57:	c3                   	ret    
c001af58:	59                   	pop    ecx
c001af59:	b8 02 00 00 00       	mov    eax,0x2
c001af5e:	31 d2                	xor    edx,edx
c001af60:	5b                   	pop    ebx
c001af61:	5e                   	pop    esi
c001af62:	c3                   	ret    

c001af63 <sysCallUSleep(regs*)>:
c001af63:	83 ec 14             	sub    esp,0x14
c001af66:	b8 e8 03 00 00       	mov    eax,0x3e8
c001af6b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001af6f:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001af76:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001af79:	01 ca                	add    edx,ecx
c001af7b:	52                   	push   edx
c001af7c:	50                   	push   eax
c001af7d:	e8 c8 22 00 00       	call   c001d24a <nanoSleep(unsigned long long)>
c001af82:	31 c0                	xor    eax,eax
c001af84:	31 d2                	xor    edx,edx
c001af86:	83 c4 1c             	add    esp,0x1c
c001af89:	c3                   	ret    

c001af8a <sysCallSpawn(regs*)>:
c001af8a:	56                   	push   esi
c001af8b:	53                   	push   ebx
c001af8c:	53                   	push   ebx
c001af8d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001af91:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001af94:	85 f6                	test   esi,esi
c001af96:	75 08                	jne    c001afa0 <sysCallSpawn(regs*)+0x16>
c001af98:	59                   	pop    ecx
c001af99:	31 c0                	xor    eax,eax
c001af9b:	31 d2                	xor    edx,edx
c001af9d:	5b                   	pop    ebx
c001af9e:	5e                   	pop    esi
c001af9f:	c3                   	ret    
c001afa0:	83 ec 0c             	sub    esp,0xc
c001afa3:	68 3f 07 00 00       	push   0x73f
c001afa8:	e8 27 45 ff ff       	call   c000f4d4 <malloc>
c001afad:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001afb0:	89 c6                	mov    esi,eax
c001afb2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001afb7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001afba:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001afbd:	56                   	push   esi
c001afbe:	e8 87 19 00 00       	call   c001c94a <Process::Process(char const*, Process*, char**)>
c001afc3:	83 c4 20             	add    esp,0x20
c001afc6:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001afcd:	75 c9                	jne    c001af98 <sysCallSpawn(regs*)+0xe>
c001afcf:	83 ec 0c             	sub    esp,0xc
c001afd2:	56                   	push   esi
c001afd3:	e8 38 1f 00 00       	call   c001cf10 <Process::createUserThread()>
c001afd8:	8b 06                	mov    eax,DWORD PTR [esi]
c001afda:	83 c4 10             	add    esp,0x10
c001afdd:	99                   	cdq    
c001afde:	59                   	pop    ecx
c001afdf:	5b                   	pop    ebx
c001afe0:	5e                   	pop    esi
c001afe1:	c3                   	ret    

c001afe2 <sysCallGetEnv(regs*)>:
c001afe2:	57                   	push   edi
c001afe3:	56                   	push   esi
c001afe4:	53                   	push   ebx
c001afe5:	83 ec 1c             	sub    esp,0x1c
c001afe8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001afec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aff1:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001aff4:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001aff7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001affa:	e8 88 e7 ff ff       	call   c0019787 <Krnl::getProcessTotalEnvCount(Process*)>
c001afff:	83 c4 10             	add    esp,0x10
c001b002:	39 c7                	cmp    edi,eax
c001b004:	7c 14                	jl     c001b01a <sysCallGetEnv(regs*)+0x38>
c001b006:	85 f6                	test   esi,esi
c001b008:	75 0b                	jne    c001b015 <sysCallGetEnv(regs*)+0x33>
c001b00a:	83 c4 10             	add    esp,0x10
c001b00d:	31 c0                	xor    eax,eax
c001b00f:	5b                   	pop    ebx
c001b010:	31 d2                	xor    edx,edx
c001b012:	5e                   	pop    esi
c001b013:	5f                   	pop    edi
c001b014:	c3                   	ret    
c001b015:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b018:	eb f0                	jmp    c001b00a <sysCallGetEnv(regs*)+0x28>
c001b01a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b01e:	52                   	push   edx
c001b01f:	57                   	push   edi
c001b020:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b026:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001b029:	50                   	push   eax
c001b02a:	e8 78 e7 ff ff       	call   c00197a7 <Krnl::getProcessEnvPair(Process*, int)>
c001b02f:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b032:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b036:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b03a:	83 c4 0c             	add    esp,0xc
c001b03d:	85 c9                	test   ecx,ecx
c001b03f:	75 23                	jne    c001b064 <sysCallGetEnv(regs*)+0x82>
c001b041:	83 ec 0c             	sub    esp,0xc
c001b044:	50                   	push   eax
c001b045:	e8 5e 56 fe ff       	call   c00006a8 <strlen>
c001b04a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b04d:	89 c3                	mov    ebx,eax
c001b04f:	e8 54 56 fe ff       	call   c00006a8 <strlen>
c001b054:	83 c4 10             	add    esp,0x10
c001b057:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001b05b:	83 c4 10             	add    esp,0x10
c001b05e:	31 d2                	xor    edx,edx
c001b060:	5b                   	pop    ebx
c001b061:	5e                   	pop    esi
c001b062:	5f                   	pop    edi
c001b063:	c3                   	ret    
c001b064:	83 ec 08             	sub    esp,0x8
c001b067:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b06a:	50                   	push   eax
c001b06b:	56                   	push   esi
c001b06c:	e8 b9 56 fe ff       	call   c000072a <strcpy>
c001b071:	58                   	pop    eax
c001b072:	5a                   	pop    edx
c001b073:	68 4f a5 02 c0       	push   0xc002a54f
c001b078:	56                   	push   esi
c001b079:	e8 63 57 fe ff       	call   c00007e1 <strcat>
c001b07e:	59                   	pop    ecx
c001b07f:	5b                   	pop    ebx
c001b080:	57                   	push   edi
c001b081:	56                   	push   esi
c001b082:	e8 5a 57 fe ff       	call   c00007e1 <strcat>
c001b087:	83 c4 10             	add    esp,0x10
c001b08a:	e9 7b ff ff ff       	jmp    c001b00a <sysCallGetEnv(regs*)+0x28>

c001b08f <sysAppSettings(regs*)>:
c001b08f:	53                   	push   ebx
c001b090:	83 ec 08             	sub    esp,0x8
c001b093:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b097:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b09a:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001b0a0:	25 e0 1f 00 00       	and    eax,0x1fe0
c001b0a5:	66 3d c0 09          	cmp    ax,0x9c0
c001b0a9:	75 2f                	jne    c001b0da <sysAppSettings(regs*)+0x4b>
c001b0ab:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001b0b1:	83 e0 1f             	and    eax,0x1f
c001b0b4:	3c 01                	cmp    al,0x1
c001b0b6:	74 2e                	je     c001b0e6 <sysAppSettings(regs*)+0x57>
c001b0b8:	3c 07                	cmp    al,0x7
c001b0ba:	0f 84 bd 00 00 00    	je     c001b17d <sysAppSettings(regs*)+0xee>
c001b0c0:	84 c0                	test   al,al
c001b0c2:	0f 84 dc 00 00 00    	je     c001b1a4 <sysAppSettings(regs*)+0x115>
c001b0c8:	3c 08                	cmp    al,0x8
c001b0ca:	74 6d                	je     c001b139 <sysAppSettings(regs*)+0xaa>
c001b0cc:	0f b6 c0             	movzx  eax,al
c001b0cf:	83 c4 08             	add    esp,0x8
c001b0d2:	05 e8 03 00 00       	add    eax,0x3e8
c001b0d7:	5b                   	pop    ebx
c001b0d8:	99                   	cdq    
c001b0d9:	c3                   	ret    
c001b0da:	b8 01 00 00 00       	mov    eax,0x1
c001b0df:	31 d2                	xor    edx,edx
c001b0e1:	83 c4 08             	add    esp,0x8
c001b0e4:	5b                   	pop    ebx
c001b0e5:	c3                   	ret    
c001b0e6:	51                   	push   ecx
c001b0e7:	68 00 01 00 00       	push   0x100
c001b0ec:	6a 00                	push   0x0
c001b0ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b0f3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b0f6:	83 c0 0c             	add    eax,0xc
c001b0f9:	50                   	push   eax
c001b0fa:	e8 8c 55 fe ff       	call   c000068b <memset>
c001b0ff:	83 c4 0c             	add    esp,0xc
c001b102:	68 ff 00 00 00       	push   0xff
c001b107:	53                   	push   ebx
c001b108:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b10d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b110:	83 c0 0c             	add    eax,0xc
c001b113:	50                   	push   eax
c001b114:	e8 3c 55 fe ff       	call   c0000655 <memcpy>
c001b119:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b11e:	5b                   	pop    ebx
c001b11f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b122:	5a                   	pop    edx
c001b123:	8d 50 0c             	lea    edx,[eax+0xc]
c001b126:	52                   	push   edx
c001b127:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b12d:	e8 1c 56 ff ff       	call   c001074e <VgaText::setTitle(char*)>
c001b132:	83 c4 10             	add    esp,0x10
c001b135:	31 c0                	xor    eax,eax
c001b137:	eb a6                	jmp    c001b0df <sysAppSettings(regs*)+0x50>
c001b139:	83 ec 08             	sub    esp,0x8
c001b13c:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001b142:	83 e0 0f             	and    eax,0xf
c001b145:	50                   	push   eax
c001b146:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b14b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b14e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b154:	e8 cd 55 ff ff       	call   c0010726 <VgaText::setTitleColour(VgaColour)>
c001b159:	58                   	pop    eax
c001b15a:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001b160:	5a                   	pop    edx
c001b161:	c1 e8 04             	shr    eax,0x4
c001b164:	83 e0 0f             	and    eax,0xf
c001b167:	50                   	push   eax
c001b168:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b16d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b170:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b176:	e8 85 55 ff ff       	call   c0010700 <VgaText::setTitleTextColour(VgaColour)>
c001b17b:	eb b5                	jmp    c001b132 <sysAppSettings(regs*)+0xa3>
c001b17d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b182:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b185:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001b18b:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001b191:	c0 e8 06             	shr    al,0x6
c001b194:	83 e0 01             	and    eax,0x1
c001b197:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001b19d:	31 c0                	xor    eax,eax
c001b19f:	e9 3b ff ff ff       	jmp    c001b0df <sysAppSettings(regs*)+0x50>
c001b1a4:	b8 02 00 00 00       	mov    eax,0x2
c001b1a9:	e9 31 ff ff ff       	jmp    c001b0df <sysAppSettings(regs*)+0x50>

c001b1ae <sysSetFatAttrib(regs*)>:
c001b1ae:	57                   	push   edi
c001b1af:	56                   	push   esi
c001b1b0:	53                   	push   ebx
c001b1b1:	83 ec 1c             	sub    esp,0x1c
c001b1b4:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b1b8:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001b1bb:	68 14 01 00 00       	push   0x114
c001b1c0:	e8 0f 43 ff ff       	call   c000f4d4 <malloc>
c001b1c5:	83 c4 0c             	add    esp,0xc
c001b1c8:	89 c3                	mov    ebx,eax
c001b1ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1cf:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b1d2:	57                   	push   edi
c001b1d3:	53                   	push   ebx
c001b1d4:	e8 a7 7a ff ff       	call   c0012c80 <File::File(char const*, Process*)>
c001b1d9:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b1dc:	83 c4 0c             	add    esp,0xc
c001b1df:	0f b6 d4             	movzx  edx,ah
c001b1e2:	0f b6 c0             	movzx  eax,al
c001b1e5:	52                   	push   edx
c001b1e6:	50                   	push   eax
c001b1e7:	53                   	push   ebx
c001b1e8:	e8 09 7d ff ff       	call   c0012ef6 <File::chfatattr(unsigned char, unsigned char)>
c001b1ed:	83 c4 10             	add    esp,0x10
c001b1f0:	85 db                	test   ebx,ebx
c001b1f2:	74 14                	je     c001b208 <sysSetFatAttrib(regs*)+0x5a>
c001b1f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b1f8:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b1fa:	83 ec 0c             	sub    esp,0xc
c001b1fd:	53                   	push   ebx
c001b1fe:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b201:	83 c4 10             	add    esp,0x10
c001b204:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b208:	85 c0                	test   eax,eax
c001b20a:	0f 95 c0             	setne  al
c001b20d:	31 d2                	xor    edx,edx
c001b20f:	0f b6 c0             	movzx  eax,al
c001b212:	f7 d8                	neg    eax
c001b214:	83 d2 00             	adc    edx,0x0
c001b217:	83 c4 10             	add    esp,0x10
c001b21a:	f7 da                	neg    edx
c001b21c:	5b                   	pop    ebx
c001b21d:	5e                   	pop    esi
c001b21e:	5f                   	pop    edi
c001b21f:	c3                   	ret    

c001b220 <sysPipe(regs*)>:
c001b220:	57                   	push   edi
c001b221:	56                   	push   esi
c001b222:	53                   	push   ebx
c001b223:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b227:	83 ec 0c             	sub    esp,0xc
c001b22a:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001b22d:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001b230:	6a 20                	push   0x20
c001b232:	e8 9d 42 ff ff       	call   c000f4d4 <malloc>
c001b237:	89 c3                	mov    ebx,eax
c001b239:	58                   	pop    eax
c001b23a:	5a                   	pop    edx
c001b23b:	68 00 50 00 00       	push   0x5000
c001b240:	53                   	push   ebx
c001b241:	e8 ce 4d ff ff       	call   c0010014 <Pipe::Pipe(int)>
c001b246:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b249:	e8 c8 60 ff ff       	call   c0011316 <UnixFile::getFileDescriptor()>
c001b24e:	89 07                	mov    DWORD PTR [edi],eax
c001b250:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b253:	e8 be 60 ff ff       	call   c0011316 <UnixFile::getFileDescriptor()>
c001b258:	83 c4 10             	add    esp,0x10
c001b25b:	89 06                	mov    DWORD PTR [esi],eax
c001b25d:	31 d2                	xor    edx,edx
c001b25f:	5b                   	pop    ebx
c001b260:	31 c0                	xor    eax,eax
c001b262:	5e                   	pop    esi
c001b263:	5f                   	pop    edi
c001b264:	c3                   	ret    

c001b265 <sysGetUnixTime(regs*)>:
c001b265:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c001b26a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b270:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b274:	e9 e3 83 ff ff       	jmp    c001365c <Clock::timeInSecondsLocal()>

c001b279 <string_ends_with(char const*, char const*)>:
c001b279:	57                   	push   edi
c001b27a:	56                   	push   esi
c001b27b:	53                   	push   ebx
c001b27c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b280:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b284:	83 ec 0c             	sub    esp,0xc
c001b287:	53                   	push   ebx
c001b288:	e8 1b 54 fe ff       	call   c00006a8 <strlen>
c001b28d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b290:	89 c6                	mov    esi,eax
c001b292:	e8 11 54 fe ff       	call   c00006a8 <strlen>
c001b297:	83 c4 10             	add    esp,0x10
c001b29a:	39 c6                	cmp    esi,eax
c001b29c:	7d 06                	jge    c001b2a4 <string_ends_with(char const*, char const*)+0x2b>
c001b29e:	5b                   	pop    ebx
c001b29f:	31 c0                	xor    eax,eax
c001b2a1:	5e                   	pop    esi
c001b2a2:	5f                   	pop    edi
c001b2a3:	c3                   	ret    
c001b2a4:	83 ec 08             	sub    esp,0x8
c001b2a7:	29 c6                	sub    esi,eax
c001b2a9:	57                   	push   edi
c001b2aa:	01 f3                	add    ebx,esi
c001b2ac:	53                   	push   ebx
c001b2ad:	e8 c9 54 fe ff       	call   c000077b <strcmp>
c001b2b2:	83 c4 10             	add    esp,0x10
c001b2b5:	85 c0                	test   eax,eax
c001b2b7:	5b                   	pop    ebx
c001b2b8:	0f 94 c0             	sete   al
c001b2bb:	5e                   	pop    esi
c001b2bc:	0f b6 c0             	movzx  eax,al
c001b2bf:	5f                   	pop    edi
c001b2c0:	c3                   	ret    

c001b2c1 <sysCallOpen(regs*)>:
c001b2c1:	56                   	push   esi
c001b2c2:	53                   	push   ebx
c001b2c3:	81 ec 04 01 00 00    	sub    esp,0x104
c001b2c9:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001b2d0:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001b2d3:	85 c9                	test   ecx,ecx
c001b2d5:	0f 84 b3 00 00 00    	je     c001b38e <sysCallOpen(regs*)+0xcd>
c001b2db:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001b2de:	85 c0                	test   eax,eax
c001b2e0:	0f 84 a8 00 00 00    	je     c001b38e <sysCallOpen(regs*)+0xcd>
c001b2e6:	52                   	push   edx
c001b2e7:	68 51 a5 02 c0       	push   0xc002a551
c001b2ec:	50                   	push   eax
c001b2ed:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001b2f1:	56                   	push   esi
c001b2f2:	e8 df 77 ff ff       	call   c0012ad6 <standardiseFiles(char*, char const*, char const*)>
c001b2f7:	89 34 24             	mov    DWORD PTR [esp],esi
c001b2fa:	e8 a9 53 fe ff       	call   c00006a8 <strlen>
c001b2ff:	83 c4 10             	add    esp,0x10
c001b302:	48                   	dec    eax
c001b303:	74 1d                	je     c001b322 <sysCallOpen(regs*)+0x61>
c001b305:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001b308:	eb 0f                	jmp    c001b319 <sysCallOpen(regs*)+0x58>
c001b30a:	80 fa 3a             	cmp    dl,0x3a
c001b30d:	74 0f                	je     c001b31e <sysCallOpen(regs*)+0x5d>
c001b30f:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001b313:	48                   	dec    eax
c001b314:	74 0c                	je     c001b322 <sysCallOpen(regs*)+0x61>
c001b316:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001b319:	80 fa 2e             	cmp    dl,0x2e
c001b31c:	75 ec                	jne    c001b30a <sysCallOpen(regs*)+0x49>
c001b31e:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001b322:	83 ec 08             	sub    esp,0x8
c001b325:	68 55 a5 02 c0       	push   0xc002a555
c001b32a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b32d:	e8 47 ff ff ff       	call   c001b279 <string_ends_with(char const*, char const*)>
c001b332:	83 c4 10             	add    esp,0x10
c001b335:	85 c0                	test   eax,eax
c001b337:	75 17                	jne    c001b350 <sysCallOpen(regs*)+0x8f>
c001b339:	83 ec 08             	sub    esp,0x8
c001b33c:	68 76 a5 02 c0       	push   0xc002a576
c001b341:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b344:	e8 30 ff ff ff       	call   c001b279 <string_ends_with(char const*, char const*)>
c001b349:	83 c4 10             	add    esp,0x10
c001b34c:	85 c0                	test   eax,eax
c001b34e:	74 51                	je     c001b3a1 <sysCallOpen(regs*)+0xe0>
c001b350:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b353:	83 ec 08             	sub    esp,0x8
c001b356:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001b35c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b363:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b366:	ff 30                	push   DWORD PTR [eax]
c001b368:	68 5a a5 02 c0       	push   0xc002a55a
c001b36d:	e8 df 73 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001b372:	c7 04 24 69 a5 02 c0 	mov    DWORD PTR [esp],0xc002a569
c001b379:	e8 d3 73 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001b37e:	83 c4 10             	add    esp,0x10
c001b381:	81 c4 04 01 00 00    	add    esp,0x104
c001b387:	31 c0                	xor    eax,eax
c001b389:	31 d2                	xor    edx,edx
c001b38b:	5b                   	pop    ebx
c001b38c:	5e                   	pop    esi
c001b38d:	c3                   	ret    
c001b38e:	81 c4 04 01 00 00    	add    esp,0x104
c001b394:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b399:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b39e:	5b                   	pop    ebx
c001b39f:	5e                   	pop    esi
c001b3a0:	c3                   	ret    
c001b3a1:	83 ec 08             	sub    esp,0x8
c001b3a4:	68 56 a5 02 c0       	push   0xc002a556
c001b3a9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b3ac:	e8 ca 53 fe ff       	call   c000077b <strcmp>
c001b3b1:	83 c4 10             	add    esp,0x10
c001b3b4:	85 c0                	test   eax,eax
c001b3b6:	74 98                	je     c001b350 <sysCallOpen(regs*)+0x8f>
c001b3b8:	83 ec 08             	sub    esp,0x8
c001b3bb:	68 55 a5 02 c0       	push   0xc002a555
c001b3c0:	56                   	push   esi
c001b3c1:	e8 b3 fe ff ff       	call   c001b279 <string_ends_with(char const*, char const*)>
c001b3c6:	83 c4 10             	add    esp,0x10
c001b3c9:	85 c0                	test   eax,eax
c001b3cb:	75 83                	jne    c001b350 <sysCallOpen(regs*)+0x8f>
c001b3cd:	83 ec 08             	sub    esp,0x8
c001b3d0:	68 7b a5 02 c0       	push   0xc002a57b
c001b3d5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b3d8:	e8 9c fe ff ff       	call   c001b279 <string_ends_with(char const*, char const*)>
c001b3dd:	83 c4 10             	add    esp,0x10
c001b3e0:	85 c0                	test   eax,eax
c001b3e2:	0f 85 d9 00 00 00    	jne    c001b4c1 <sysCallOpen(regs*)+0x200>
c001b3e8:	83 ec 08             	sub    esp,0x8
c001b3eb:	68 80 a5 02 c0       	push   0xc002a580
c001b3f0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b3f3:	e8 81 fe ff ff       	call   c001b279 <string_ends_with(char const*, char const*)>
c001b3f8:	83 c4 10             	add    esp,0x10
c001b3fb:	85 c0                	test   eax,eax
c001b3fd:	0f 85 be 00 00 00    	jne    c001b4c1 <sysCallOpen(regs*)+0x200>
c001b403:	83 ec 08             	sub    esp,0x8
c001b406:	68 7c a5 02 c0       	push   0xc002a57c
c001b40b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b40e:	e8 68 53 fe ff       	call   c000077b <strcmp>
c001b413:	83 c4 10             	add    esp,0x10
c001b416:	85 c0                	test   eax,eax
c001b418:	0f 84 a3 00 00 00    	je     c001b4c1 <sysCallOpen(regs*)+0x200>
c001b41e:	83 ec 08             	sub    esp,0x8
c001b421:	68 7b a5 02 c0       	push   0xc002a57b
c001b426:	56                   	push   esi
c001b427:	e8 4d fe ff ff       	call   c001b279 <string_ends_with(char const*, char const*)>
c001b42c:	83 c4 10             	add    esp,0x10
c001b42f:	85 c0                	test   eax,eax
c001b431:	0f 85 8a 00 00 00    	jne    c001b4c1 <sysCallOpen(regs*)+0x200>
c001b437:	83 ec 0c             	sub    esp,0xc
c001b43a:	68 14 01 00 00       	push   0x114
c001b43f:	e8 90 40 ff ff       	call   c000f4d4 <malloc>
c001b444:	83 c4 0c             	add    esp,0xc
c001b447:	89 c6                	mov    esi,eax
c001b449:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b44e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b451:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b454:	56                   	push   esi
c001b455:	e8 26 78 ff ff       	call   c0012c80 <File::File(char const*, Process*)>
c001b45a:	83 c4 10             	add    esp,0x10
c001b45d:	85 f6                	test   esi,esi
c001b45f:	0f 84 29 ff ff ff    	je     c001b38e <sysCallOpen(regs*)+0xcd>
c001b465:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001b468:	0f b6 c2             	movzx  eax,dl
c001b46b:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001b46e:	89 d0                	mov    eax,edx
c001b470:	83 e0 01             	and    eax,0x1
c001b473:	f6 c2 02             	test   dl,0x2
c001b476:	74 03                	je     c001b47b <sysCallOpen(regs*)+0x1ba>
c001b478:	83 c8 02             	or     eax,0x2
c001b47b:	f6 c2 04             	test   dl,0x4
c001b47e:	74 03                	je     c001b483 <sysCallOpen(regs*)+0x1c2>
c001b480:	83 c8 04             	or     eax,0x4
c001b483:	f6 c2 08             	test   dl,0x8
c001b486:	74 03                	je     c001b48b <sysCallOpen(regs*)+0x1ca>
c001b488:	83 c8 0a             	or     eax,0xa
c001b48b:	83 e2 10             	and    edx,0x10
c001b48e:	74 03                	je     c001b493 <sysCallOpen(regs*)+0x1d2>
c001b490:	83 c8 12             	or     eax,0x12
c001b493:	83 ec 08             	sub    esp,0x8
c001b496:	50                   	push   eax
c001b497:	56                   	push   esi
c001b498:	e8 47 78 ff ff       	call   c0012ce4 <File::open(FileOpenMode)>
c001b49d:	83 c4 10             	add    esp,0x10
c001b4a0:	85 c0                	test   eax,eax
c001b4a2:	0f 85 e6 fe ff ff    	jne    c001b38e <sysCallOpen(regs*)+0xcd>
c001b4a8:	83 ec 0c             	sub    esp,0xc
c001b4ab:	56                   	push   esi
c001b4ac:	e8 65 5e ff ff       	call   c0011316 <UnixFile::getFileDescriptor()>
c001b4b1:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b4b4:	89 02                	mov    DWORD PTR [edx],eax
c001b4b6:	c1 f8 1f             	sar    eax,0x1f
c001b4b9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b4bc:	e9 bd fe ff ff       	jmp    c001b37e <sysCallOpen(regs*)+0xbd>
c001b4c1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b4c4:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001b4ca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b4d1:	e9 ab fe ff ff       	jmp    c001b381 <sysCallOpen(regs*)+0xc0>

c001b4d6 <setupSystemCalls()>:
c001b4d6:	c7 05 60 d4 02 c0 8c a6 01 c0 	mov    DWORD PTR ds:0xc002d460,0xc001a68c
c001b4e0:	c7 05 64 d4 02 c0 60 a4 01 c0 	mov    DWORD PTR ds:0xc002d464,0xc001a460
c001b4ea:	c7 05 68 d4 02 c0 b3 a5 01 c0 	mov    DWORD PTR ds:0xc002d468,0xc001a5b3
c001b4f4:	c7 05 6c d4 02 c0 24 a6 01 c0 	mov    DWORD PTR ds:0xc002d46c,0xc001a624
c001b4fe:	c7 05 70 d4 02 c0 4b a5 01 c0 	mov    DWORD PTR ds:0xc002d470,0xc001a54b
c001b508:	c7 05 74 d4 02 c0 97 a4 01 c0 	mov    DWORD PTR ds:0xc002d474,0xc001a497
c001b512:	c7 05 78 d4 02 c0 78 a4 01 c0 	mov    DWORD PTR ds:0xc002d478,0xc001a478
c001b51c:	c7 05 7c d4 02 c0 08 a6 01 c0 	mov    DWORD PTR ds:0xc002d47c,0xc001a608
c001b526:	c7 05 84 d4 02 c0 9e ab 01 c0 	mov    DWORD PTR ds:0xc002d484,0xc001ab9e
c001b530:	c7 05 80 d4 02 c0 c1 b2 01 c0 	mov    DWORD PTR ds:0xc002d480,0xc001b2c1
c001b53a:	c7 05 88 d4 02 c0 26 ac 01 c0 	mov    DWORD PTR ds:0xc002d488,0xc001ac26
c001b544:	c7 05 8c d4 02 c0 8d a8 01 c0 	mov    DWORD PTR ds:0xc002d48c,0xc001a88d
c001b54e:	c7 05 90 d4 02 c0 c7 a6 01 c0 	mov    DWORD PTR ds:0xc002d490,0xc001a6c7
c001b558:	c7 05 94 d4 02 c0 cc a6 01 c0 	mov    DWORD PTR ds:0xc002d494,0xc001a6cc
c001b562:	c7 05 98 d4 02 c0 01 ad 01 c0 	mov    DWORD PTR ds:0xc002d498,0xc001ad01
c001b56c:	c7 05 9c d4 02 c0 9b ac 01 c0 	mov    DWORD PTR ds:0xc002d49c,0xc001ac9b
c001b576:	c7 05 a0 d4 02 c0 75 a9 01 c0 	mov    DWORD PTR ds:0xc002d4a0,0xc001a975
c001b580:	c7 05 a4 d4 02 c0 de a9 01 c0 	mov    DWORD PTR ds:0xc002d4a4,0xc001a9de
c001b58a:	c7 05 a8 d4 02 c0 5b aa 01 c0 	mov    DWORD PTR ds:0xc002d4a8,0xc001aa5b
c001b594:	c7 05 ac d4 02 c0 d1 a6 01 c0 	mov    DWORD PTR ds:0xc002d4ac,0xc001a6d1
c001b59e:	c7 05 b0 d4 02 c0 71 ad 01 c0 	mov    DWORD PTR ds:0xc002d4b0,0xc001ad71
c001b5a8:	c7 05 b4 d4 02 c0 8b ad 01 c0 	mov    DWORD PTR ds:0xc002d4b4,0xc001ad8b
c001b5b2:	c7 05 b8 d4 02 c0 8b ad 01 c0 	mov    DWORD PTR ds:0xc002d4b8,0xc001ad8b
c001b5bc:	c7 05 bc d4 02 c0 cc ad 01 c0 	mov    DWORD PTR ds:0xc002d4bc,0xc001adcc
c001b5c6:	c7 05 c0 d4 02 c0 30 ae 01 c0 	mov    DWORD PTR ds:0xc002d4c0,0xc001ae30
c001b5d0:	c7 05 c4 d4 02 c0 db a6 01 c0 	mov    DWORD PTR ds:0xc002d4c4,0xc001a6db
c001b5da:	c7 05 c8 d4 02 c0 94 ae 01 c0 	mov    DWORD PTR ds:0xc002d4c8,0xc001ae94
c001b5e4:	c7 05 cc d4 02 c0 4a a8 01 c0 	mov    DWORD PTR ds:0xc002d4cc,0xc001a84a
c001b5ee:	c7 05 d0 d4 02 c0 e0 ae 01 c0 	mov    DWORD PTR ds:0xc002d4d0,0xc001aee0
c001b5f8:	c7 05 d4 d4 02 c0 1b a9 01 c0 	mov    DWORD PTR ds:0xc002d4d4,0xc001a91b
c001b602:	c7 05 d8 d4 02 c0 63 af 01 c0 	mov    DWORD PTR ds:0xc002d4d8,0xc001af63
c001b60c:	c7 05 dc d4 02 c0 de aa 01 c0 	mov    DWORD PTR ds:0xc002d4dc,0xc001aade
c001b616:	c7 05 e0 d4 02 c0 8a af 01 c0 	mov    DWORD PTR ds:0xc002d4e0,0xc001af8a
c001b620:	c7 05 e4 d4 02 c0 e2 af 01 c0 	mov    DWORD PTR ds:0xc002d4e4,0xc001afe2
c001b62a:	c7 05 e8 d4 02 c0 8f b0 01 c0 	mov    DWORD PTR ds:0xc002d4e8,0xc001b08f
c001b634:	c7 05 ec d4 02 c0 eb a6 01 c0 	mov    DWORD PTR ds:0xc002d4ec,0xc001a6eb
c001b63e:	c7 05 f0 d4 02 c0 55 a7 01 c0 	mov    DWORD PTR ds:0xc002d4f0,0xc001a755
c001b648:	c7 05 f4 d4 02 c0 9b a7 01 c0 	mov    DWORD PTR ds:0xc002d4f4,0xc001a79b
c001b652:	c7 05 f8 d4 02 c0 ae b1 01 c0 	mov    DWORD PTR ds:0xc002d4f8,0xc001b1ae
c001b65c:	c7 05 fc d4 02 c0 a6 ad 01 c0 	mov    DWORD PTR ds:0xc002d4fc,0xc001ada6
c001b666:	c7 05 00 d5 02 c0 ec a7 01 c0 	mov    DWORD PTR ds:0xc002d500,0xc001a7ec
c001b670:	c7 05 04 d5 02 c0 20 b2 01 c0 	mov    DWORD PTR ds:0xc002d504,0xc001b220
c001b67a:	c7 05 08 d5 02 c0 65 b2 01 c0 	mov    DWORD PTR ds:0xc002d508,0xc001b265
c001b684:	c7 05 0c d5 02 c0 a3 a4 01 c0 	mov    DWORD PTR ds:0xc002d50c,0xc001a4a3
c001b68e:	c3                   	ret    

c001b68f <systemCall(regs*, void*)>:
c001b68f:	53                   	push   ebx
c001b690:	83 ec 08             	sub    esp,0x8
c001b693:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b697:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001b69a:	83 f8 7f             	cmp    eax,0x7f
c001b69d:	77 16                	ja     c001b6b5 <systemCall(regs*, void*)+0x26>
c001b69f:	8b 14 85 60 d4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2ba0]
c001b6a6:	85 d2                	test   edx,edx
c001b6a8:	74 0b                	je     c001b6b5 <systemCall(regs*, void*)+0x26>
c001b6aa:	83 ec 0c             	sub    esp,0xc
c001b6ad:	53                   	push   ebx
c001b6ae:	ff d2                	call   edx
c001b6b0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001b6b3:	eb 0d                	jmp    c001b6c2 <systemCall(regs*, void*)+0x33>
c001b6b5:	52                   	push   edx
c001b6b6:	52                   	push   edx
c001b6b7:	50                   	push   eax
c001b6b8:	68 85 a5 02 c0       	push   0xc002a585
c001b6bd:	e8 8f 70 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001b6c2:	83 c4 10             	add    esp,0x10
c001b6c5:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b6ca:	31 d2                	xor    edx,edx
c001b6cc:	83 c4 08             	add    esp,0x8
c001b6cf:	5b                   	pop    ebx
c001b6d0:	c3                   	ret    

c001b6d1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001b6d1:	55                   	push   ebp
c001b6d2:	89 e5                	mov    ebp,esp
c001b6d4:	57                   	push   edi
c001b6d5:	56                   	push   esi
c001b6d6:	53                   	push   ebx
c001b6d7:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001b6dd:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001b6e0:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001b6e3:	85 c0                	test   eax,eax
c001b6e5:	0f 95 c1             	setne  cl
c001b6e8:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001b6ec:	0f 94 c2             	sete   dl
c001b6ef:	84 d1                	test   cl,dl
c001b6f1:	74 26                	je     c001b719 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001b6f3:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001b6fa:	74 1d                	je     c001b719 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001b6fc:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001b6ff:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001b705:	89 d6                	mov    esi,edx
c001b707:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001b70d:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001b713:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001b716:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001b719:	83 ec 0c             	sub    esp,0xc
c001b71c:	05 ff 0f 00 00       	add    eax,0xfff
c001b721:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001b724:	6a 01                	push   0x1
c001b726:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001b72c:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001b732:	e8 2a 60 ff ff       	call   c0011761 <Virt::allocateKernelVirtualPages(int)>
c001b737:	83 c4 10             	add    esp,0x10
c001b73a:	89 c6                	mov    esi,eax
c001b73c:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001b742:	0f 86 21 01 00 00    	jbe    c001b869 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001b748:	c1 eb 0c             	shr    ebx,0xc
c001b74b:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001b755:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001b75b:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001b75e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b761:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001b767:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001b76a:	29 d8                	sub    eax,ebx
c001b76c:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001b772:	0f 83 f4 00 00 00    	jae    c001b86c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001b778:	83 ec 0c             	sub    esp,0xc
c001b77b:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001b781:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001b784:	3d 00 10 00 00       	cmp    eax,0x1000
c001b789:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001b78b:	52                   	push   edx
c001b78c:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001b792:	52                   	push   edx
c001b793:	76 05                	jbe    c001b79a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001b795:	b8 00 10 00 00       	mov    eax,0x1000
c001b79a:	31 d2                	xor    edx,edx
c001b79c:	52                   	push   edx
c001b79d:	50                   	push   eax
c001b79e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001b7a1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b7a4:	83 c4 20             	add    esp,0x20
c001b7a7:	85 c0                	test   eax,eax
c001b7a9:	74 1f                	je     c001b7ca <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001b7ab:	51                   	push   ecx
c001b7ac:	51                   	push   ecx
c001b7ad:	50                   	push   eax
c001b7ae:	68 99 a5 02 c0       	push   0xc002a599
c001b7b3:	e8 99 6f ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001b7b8:	89 34 24             	mov    DWORD PTR [esp],esi
c001b7bb:	e8 05 63 ff ff       	call   c0011ac5 <Virt::freeKernelVirtualPages(unsigned long)>
c001b7c0:	83 c4 10             	add    esp,0x10
c001b7c3:	31 c0                	xor    eax,eax
c001b7c5:	e9 7c 01 00 00       	jmp    c001b946 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001b7ca:	e8 2b 15 00 00       	call   c001ccfa <lockScheduler()>
c001b7cf:	e8 aa 42 ff ff       	call   c000fa7e <Phys::allocatePage()>
c001b7d4:	6a 07                	push   0x7
c001b7d6:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001b7dc:	56                   	push   esi
c001b7dd:	50                   	push   eax
c001b7de:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b7e4:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001b7e7:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001b7ed:	e8 3a 66 ff ff       	call   c0011e2c <VAS::mapPage(unsigned long, unsigned long, int)>
c001b7f2:	83 c4 0c             	add    esp,0xc
c001b7f5:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b7fb:	6a 00                	push   0x0
c001b7fd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b803:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001b806:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001b80c:	e8 85 64 ff ff       	call   c0011c96 <VAS::mapOtherVASIn(bool, VAS*)>
c001b811:	58                   	pop    eax
c001b812:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001b818:	5a                   	pop    edx
c001b819:	68 07 04 00 00       	push   0x407
c001b81e:	53                   	push   ebx
c001b81f:	81 c3 00 10 00 00    	add    ebx,0x1000
c001b825:	50                   	push   eax
c001b826:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b82c:	6a 00                	push   0x0
c001b82e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b833:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b836:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b83c:	e8 a5 69 ff ff       	call   c00121e6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001b841:	83 c4 1c             	add    esp,0x1c
c001b844:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001b84a:	68 00 10 00 00       	push   0x1000
c001b84f:	50                   	push   eax
c001b850:	56                   	push   esi
c001b851:	e8 ff 4d fe ff       	call   c0000655 <memcpy>
c001b856:	e8 a1 14 00 00       	call   c001ccfc <unlockScheduler()>
c001b85b:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001b861:	83 c4 10             	add    esp,0x10
c001b864:	e9 f5 fe ff ff       	jmp    c001b75e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001b869:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001b86c:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001b876:	0f 86 bc 00 00 00    	jbe    c001b938 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001b87c:	e8 79 14 00 00       	call   c001ccfa <lockScheduler()>
c001b881:	51                   	push   ecx
c001b882:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b888:	6a 00                	push   0x0
c001b88a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b88f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b892:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b898:	e8 f9 63 ff ff       	call   c0011c96 <VAS::mapOtherVASIn(bool, VAS*)>
c001b89d:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001b8a3:	83 c4 10             	add    esp,0x10
c001b8a6:	c1 e8 0c             	shr    eax,0xc
c001b8a9:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001b8b3:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001b8b9:	e8 c0 41 ff ff       	call   c000fa7e <Phys::allocatePage()>
c001b8be:	6a 07                	push   0x7
c001b8c0:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001b8c6:	56                   	push   esi
c001b8c7:	50                   	push   eax
c001b8c8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b8ce:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b8d1:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001b8d7:	e8 50 65 ff ff       	call   c0011e2c <VAS::mapPage(unsigned long, unsigned long, int)>
c001b8dc:	58                   	pop    eax
c001b8dd:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001b8e3:	5a                   	pop    edx
c001b8e4:	68 07 04 00 00       	push   0x407
c001b8e9:	53                   	push   ebx
c001b8ea:	81 c3 00 10 00 00    	add    ebx,0x1000
c001b8f0:	50                   	push   eax
c001b8f1:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b8f7:	6a 00                	push   0x0
c001b8f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8fe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b901:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b907:	e8 da 68 ff ff       	call   c00121e6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001b90c:	83 c4 1c             	add    esp,0x1c
c001b90f:	68 00 10 00 00       	push   0x1000
c001b914:	6a 00                	push   0x0
c001b916:	56                   	push   esi
c001b917:	e8 6f 4d fe ff       	call   c000068b <memset>
c001b91c:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001b922:	83 c4 10             	add    esp,0x10
c001b925:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001b92b:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001b931:	77 86                	ja     c001b8b9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001b933:	e8 c4 13 00 00       	call   c001ccfc <unlockScheduler()>
c001b938:	83 ec 0c             	sub    esp,0xc
c001b93b:	56                   	push   esi
c001b93c:	e8 84 61 ff ff       	call   c0011ac5 <Virt::freeKernelVirtualPages(unsigned long)>
c001b941:	83 c4 10             	add    esp,0x10
c001b944:	b0 01                	mov    al,0x1
c001b946:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b949:	5b                   	pop    ebx
c001b94a:	5e                   	pop    esi
c001b94b:	5f                   	pop    edi
c001b94c:	5d                   	pop    ebp
c001b94d:	c3                   	ret    

c001b94e <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001b94e:	55                   	push   ebp
c001b94f:	57                   	push   edi
c001b950:	56                   	push   esi
c001b951:	53                   	push   ebx
c001b952:	83 ec 48             	sub    esp,0x48
c001b955:	68 14 01 00 00       	push   0x114
c001b95a:	e8 75 3b ff ff       	call   c000f4d4 <malloc>
c001b95f:	83 c4 0c             	add    esp,0xc
c001b962:	89 c6                	mov    esi,eax
c001b964:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001b968:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001b96c:	50                   	push   eax
c001b96d:	e8 0e 73 ff ff       	call   c0012c80 <File::File(char const*, Process*)>
c001b972:	58                   	pop    eax
c001b973:	5a                   	pop    edx
c001b974:	6a 01                	push   0x1
c001b976:	56                   	push   esi
c001b977:	e8 68 73 ff ff       	call   c0012ce4 <File::open(FileOpenMode)>
c001b97c:	83 c4 10             	add    esp,0x10
c001b97f:	85 c0                	test   eax,eax
c001b981:	0f 85 47 01 00 00    	jne    c001bace <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b987:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001b98f:	83 ec 0c             	sub    esp,0xc
c001b992:	6a 34                	push   0x34
c001b994:	e8 3b 3b ff ff       	call   c000f4d4 <malloc>
c001b999:	89 c3                	mov    ebx,eax
c001b99b:	58                   	pop    eax
c001b99c:	8b 06                	mov    eax,DWORD PTR [esi]
c001b99e:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001b9a2:	57                   	push   edi
c001b9a3:	53                   	push   ebx
c001b9a4:	6a 00                	push   0x0
c001b9a6:	6a 34                	push   0x34
c001b9a8:	56                   	push   esi
c001b9a9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b9ac:	83 c4 20             	add    esp,0x20
c001b9af:	85 c0                	test   eax,eax
c001b9b1:	0f 85 17 01 00 00    	jne    c001bace <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b9b7:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001b9bd:	0f 85 0b 01 00 00    	jne    c001bace <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b9c3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b9c6:	85 c0                	test   eax,eax
c001b9c8:	0f 84 00 01 00 00    	je     c001bace <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b9ce:	31 d2                	xor    edx,edx
c001b9d0:	55                   	push   ebp
c001b9d1:	52                   	push   edx
c001b9d2:	50                   	push   eax
c001b9d3:	56                   	push   esi
c001b9d4:	e8 c9 73 ff ff       	call   c0012da2 <File::seek(unsigned long long)>
c001b9d9:	83 c4 10             	add    esp,0x10
c001b9dc:	85 c0                	test   eax,eax
c001b9de:	0f 85 ea 00 00 00    	jne    c001bace <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b9e4:	83 ec 0c             	sub    esp,0xc
c001b9e7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001b9ea:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001b9ee:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b9f2:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001b9f6:	0f af c2             	imul   eax,edx
c001b9f9:	50                   	push   eax
c001b9fa:	e8 d5 3a ff ff       	call   c000f4d4 <malloc>
c001b9ff:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001ba01:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ba05:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ba08:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ba0c:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ba10:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ba14:	0f af c2             	imul   eax,edx
c001ba17:	99                   	cdq    
c001ba18:	52                   	push   edx
c001ba19:	50                   	push   eax
c001ba1a:	56                   	push   esi
c001ba1b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ba1e:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001ba21:	83 c4 20             	add    esp,0x20
c001ba24:	85 c0                	test   eax,eax
c001ba26:	0f 84 a2 00 00 00    	je     c001bace <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ba2c:	31 d2                	xor    edx,edx
c001ba2e:	51                   	push   ecx
c001ba2f:	52                   	push   edx
c001ba30:	50                   	push   eax
c001ba31:	56                   	push   esi
c001ba32:	e8 6b 73 ff ff       	call   c0012da2 <File::seek(unsigned long long)>
c001ba37:	83 c4 10             	add    esp,0x10
c001ba3a:	85 c0                	test   eax,eax
c001ba3c:	0f 85 8c 00 00 00    	jne    c001bace <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ba42:	83 ec 0c             	sub    esp,0xc
c001ba45:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001ba49:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001ba4d:	31 ed                	xor    ebp,ebp
c001ba4f:	0f af c2             	imul   eax,edx
c001ba52:	50                   	push   eax
c001ba53:	e8 7c 3a ff ff       	call   c000f4d4 <malloc>
c001ba58:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001ba5a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ba5e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ba61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba65:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001ba69:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001ba6d:	0f af c2             	imul   eax,edx
c001ba70:	99                   	cdq    
c001ba71:	52                   	push   edx
c001ba72:	50                   	push   eax
c001ba73:	56                   	push   esi
c001ba74:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ba77:	83 c4 20             	add    esp,0x20
c001ba7a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ba82:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001ba86:	0f 86 80 00 00 00    	jbe    c001bb0c <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001ba8c:	0f b7 fd             	movzx  edi,bp
c001ba8f:	c1 e7 05             	shl    edi,0x5
c001ba92:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001ba96:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001ba99:	75 6b                	jne    c001bb06 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001ba9b:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001ba9e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001baa2:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001baa5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001baa9:	52                   	push   edx
c001baaa:	31 d2                	xor    edx,edx
c001baac:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001baaf:	52                   	push   edx
c001bab0:	50                   	push   eax
c001bab1:	56                   	push   esi
c001bab2:	e8 eb 72 ff ff       	call   c0012da2 <File::seek(unsigned long long)>
c001bab7:	83 c4 10             	add    esp,0x10
c001baba:	85 c0                	test   eax,eax
c001babc:	74 17                	je     c001bad5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001babe:	83 ec 0c             	sub    esp,0xc
c001bac1:	68 c4 a5 02 c0       	push   0xc002a5c4
c001bac6:	e8 86 6c ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001bacb:	83 c4 10             	add    esp,0x10
c001bace:	31 c0                	xor    eax,eax
c001bad0:	e9 87 00 00 00       	jmp    c001bb5c <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001bad5:	83 ec 0c             	sub    esp,0xc
c001bad8:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001badb:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001bade:	50                   	push   eax
c001badf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bae3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bae7:	56                   	push   esi
c001bae8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001baec:	e8 e0 fb ff ff       	call   c001b6d1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001baf1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001baf5:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001baf9:	83 c4 20             	add    esp,0x20
c001bafc:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001bb00:	73 04                	jae    c001bb06 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001bb02:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bb06:	45                   	inc    ebp
c001bb07:	e9 76 ff ff ff       	jmp    c001ba82 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001bb0c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001bb10:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bb14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bb18:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001bb1e:	83 ec 0c             	sub    esp,0xc
c001bb21:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001bb27:	25 00 f0 ff ff       	and    eax,0xfffff000
c001bb2c:	05 00 10 00 00       	add    eax,0x1000
c001bb31:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bb34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bb38:	e8 a7 39 ff ff       	call   c000f4e4 <free>
c001bb3d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bb40:	e8 9f 39 ff ff       	call   c000f4e4 <free>
c001bb45:	58                   	pop    eax
c001bb46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bb4a:	e8 95 39 ff ff       	call   c000f4e4 <free>
c001bb4f:	89 34 24             	mov    DWORD PTR [esp],esi
c001bb52:	e8 eb 71 ff ff       	call   c0012d42 <File::close()>
c001bb57:	83 c4 10             	add    esp,0x10
c001bb5a:	b0 01                	mov    al,0x1
c001bb5c:	83 c4 3c             	add    esp,0x3c
c001bb5f:	5b                   	pop    ebx
c001bb60:	5e                   	pop    esi
c001bb61:	5f                   	pop    edi
c001bb62:	5d                   	pop    ebp
c001bb63:	c3                   	ret    

c001bb64 <Thr::runtimeReferenceHelper()>:
c001bb64:	83 ec 18             	sub    esp,0x18
c001bb67:	68 cc a5 02 c0       	push   0xc002a5cc
c001bb6c:	e8 e0 6b ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001bb71:	fa                   	cli    
c001bb72:	83 c4 10             	add    esp,0x10
c001bb75:	eb fe                	jmp    c001bb75 <Thr::runtimeReferenceHelper()+0x11>

c001bb77 <Thr::getAddressOfKernelSymbol(char const*)>:
c001bb77:	57                   	push   edi
c001bb78:	56                   	push   esi
c001bb79:	53                   	push   ebx
c001bb7a:	31 db                	xor    ebx,ebx
c001bb7c:	39 1d 00 de 02 c0    	cmp    DWORD PTR ds:0xc002de00,ebx
c001bb82:	7e 3c                	jle    c001bbc0 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001bb84:	8b 34 9d 80 dd 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd2280]
c001bb8b:	31 ff                	xor    edi,edi
c001bb8d:	39 3c 9d 80 dc 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd2380],edi
c001bb94:	7e 27                	jle    c001bbbd <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001bb96:	50                   	push   eax
c001bb97:	50                   	push   eax
c001bb98:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bb9c:	8b 06                	mov    eax,DWORD PTR [esi]
c001bb9e:	03 04 9d 00 dd 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd2300]
c001bba5:	50                   	push   eax
c001bba6:	e8 d0 4b fe ff       	call   c000077b <strcmp>
c001bbab:	83 c4 10             	add    esp,0x10
c001bbae:	85 c0                	test   eax,eax
c001bbb0:	75 05                	jne    c001bbb7 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001bbb2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001bbb5:	eb 0b                	jmp    c001bbc2 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001bbb7:	83 c6 10             	add    esi,0x10
c001bbba:	47                   	inc    edi
c001bbbb:	eb d0                	jmp    c001bb8d <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001bbbd:	43                   	inc    ebx
c001bbbe:	eb bc                	jmp    c001bb7c <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001bbc0:	31 c0                	xor    eax,eax
c001bbc2:	5b                   	pop    ebx
c001bbc3:	5e                   	pop    esi
c001bbc4:	5f                   	pop    edi
c001bbc5:	c3                   	ret    

c001bbc6 <Thr::loadKernelSymbolTable(char const*)>:
c001bbc6:	55                   	push   ebp
c001bbc7:	57                   	push   edi
c001bbc8:	56                   	push   esi
c001bbc9:	53                   	push   ebx
c001bbca:	83 ec 68             	sub    esp,0x68
c001bbcd:	8b 35 54 de 02 c0    	mov    esi,DWORD PTR ds:0xc002de54
c001bbd3:	68 14 01 00 00       	push   0x114
c001bbd8:	e8 f7 38 ff ff       	call   c000f4d4 <malloc>
c001bbdd:	83 c4 0c             	add    esp,0xc
c001bbe0:	89 c3                	mov    ebx,eax
c001bbe2:	56                   	push   esi
c001bbe3:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001bbe7:	50                   	push   eax
c001bbe8:	e8 93 70 ff ff       	call   c0012c80 <File::File(char const*, Process*)>
c001bbed:	5e                   	pop    esi
c001bbee:	5f                   	pop    edi
c001bbef:	6a 01                	push   0x1
c001bbf1:	53                   	push   ebx
c001bbf2:	e8 ed 70 ff ff       	call   c0012ce4 <File::open(FileOpenMode)>
c001bbf7:	83 c4 10             	add    esp,0x10
c001bbfa:	31 d2                	xor    edx,edx
c001bbfc:	85 c0                	test   eax,eax
c001bbfe:	0f 85 74 02 00 00    	jne    c001be78 <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001bc04:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001bc0c:	83 ec 0c             	sub    esp,0xc
c001bc0f:	6a 34                	push   0x34
c001bc11:	e8 be 38 ff ff       	call   c000f4d4 <malloc>
c001bc16:	59                   	pop    ecx
c001bc17:	89 c7                	mov    edi,eax
c001bc19:	8d 74 24 34          	lea    esi,[esp+0x34]
c001bc1d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc1f:	56                   	push   esi
c001bc20:	57                   	push   edi
c001bc21:	6a 00                	push   0x0
c001bc23:	6a 34                	push   0x34
c001bc25:	53                   	push   ebx
c001bc26:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bc29:	83 c4 20             	add    esp,0x20
c001bc2c:	85 c0                	test   eax,eax
c001bc2e:	74 17                	je     c001bc47 <Thr::loadKernelSymbolTable(char const*)+0x81>
c001bc30:	83 ec 0c             	sub    esp,0xc
c001bc33:	68 ee a5 02 c0       	push   0xc002a5ee
c001bc38:	e8 2e dc ff ff       	call   c001986b <Krnl::panic(char const*)>
c001bc3d:	83 c4 10             	add    esp,0x10
c001bc40:	31 d2                	xor    edx,edx
c001bc42:	e9 31 02 00 00       	jmp    c001be78 <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001bc47:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001bc4d:	75 e1                	jne    c001bc30 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001bc4f:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001bc52:	85 c0                	test   eax,eax
c001bc54:	74 da                	je     c001bc30 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001bc56:	52                   	push   edx
c001bc57:	31 d2                	xor    edx,edx
c001bc59:	52                   	push   edx
c001bc5a:	50                   	push   eax
c001bc5b:	53                   	push   ebx
c001bc5c:	e8 41 71 ff ff       	call   c0012da2 <File::seek(unsigned long long)>
c001bc61:	83 c4 10             	add    esp,0x10
c001bc64:	85 c0                	test   eax,eax
c001bc66:	75 c8                	jne    c001bc30 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001bc68:	83 ec 0c             	sub    esp,0xc
c001bc6b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001bc6f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001bc73:	31 ed                	xor    ebp,ebp
c001bc75:	0f af c2             	imul   eax,edx
c001bc78:	50                   	push   eax
c001bc79:	e8 56 38 ff ff       	call   c000f4d4 <malloc>
c001bc7e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001bc80:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bc84:	89 34 24             	mov    DWORD PTR [esp],esi
c001bc87:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bc8b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001bc8f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001bc93:	0f af c2             	imul   eax,edx
c001bc96:	99                   	cdq    
c001bc97:	52                   	push   edx
c001bc98:	50                   	push   eax
c001bc99:	53                   	push   ebx
c001bc9a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bc9d:	83 c4 20             	add    esp,0x20
c001bca0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001bca8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001bcb0:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001bcb8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bcc0:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001bcc4:	0f 86 aa 00 00 00    	jbe    c001bd74 <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c001bcca:	0f b7 f5             	movzx  esi,bp
c001bccd:	6b f6 28             	imul   esi,esi,0x28
c001bcd0:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001bcd4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001bcd7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bcdb:	50                   	push   eax
c001bcdc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001bce0:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001bce4:	8b 16                	mov    edx,DWORD PTR [esi]
c001bce6:	6b c0 28             	imul   eax,eax,0x28
c001bce9:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001bced:	89 d0                	mov    eax,edx
c001bcef:	31 d2                	xor    edx,edx
c001bcf1:	52                   	push   edx
c001bcf2:	50                   	push   eax
c001bcf3:	53                   	push   ebx
c001bcf4:	e8 a9 70 ff ff       	call   c0012da2 <File::seek(unsigned long long)>
c001bcf9:	83 c4 0c             	add    esp,0xc
c001bcfc:	6a 20                	push   0x20
c001bcfe:	6a 00                	push   0x0
c001bd00:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001bd04:	52                   	push   edx
c001bd05:	e8 81 49 fe ff       	call   c000068b <memset>
c001bd0a:	58                   	pop    eax
c001bd0b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd0d:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001bd11:	51                   	push   ecx
c001bd12:	8d 54 24 40          	lea    edx,[esp+0x40]
c001bd16:	52                   	push   edx
c001bd17:	6a 00                	push   0x0
c001bd19:	6a 1f                	push   0x1f
c001bd1b:	53                   	push   ebx
c001bd1c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bd1f:	83 c4 18             	add    esp,0x18
c001bd22:	68 05 a6 02 c0       	push   0xc002a605
c001bd27:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001bd2b:	52                   	push   edx
c001bd2c:	e8 4a 4a fe ff       	call   c000077b <strcmp>
c001bd31:	83 c4 10             	add    esp,0x10
c001bd34:	85 c0                	test   eax,eax
c001bd36:	75 0f                	jne    c001bd47 <Thr::loadKernelSymbolTable(char const*)+0x181>
c001bd38:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001bd3b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bd3f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd47:	50                   	push   eax
c001bd48:	50                   	push   eax
c001bd49:	68 0d a6 02 c0       	push   0xc002a60d
c001bd4e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001bd52:	50                   	push   eax
c001bd53:	e8 23 4a fe ff       	call   c000077b <strcmp>
c001bd58:	83 c4 10             	add    esp,0x10
c001bd5b:	85 c0                	test   eax,eax
c001bd5d:	75 0f                	jne    c001bd6e <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c001bd5f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001bd62:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bd66:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd6a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bd6e:	45                   	inc    ebp
c001bd6f:	e9 4c ff ff ff       	jmp    c001bcc0 <Thr::loadKernelSymbolTable(char const*)+0xfa>
c001bd74:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001bd79:	75 10                	jne    c001bd8b <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c001bd7b:	83 ec 0c             	sub    esp,0xc
c001bd7e:	68 15 a6 02 c0       	push   0xc002a615
c001bd83:	e8 e3 da ff ff       	call   c001986b <Krnl::panic(char const*)>
c001bd88:	83 c4 10             	add    esp,0x10
c001bd8b:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001bd90:	75 10                	jne    c001bda2 <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c001bd92:	83 ec 0c             	sub    esp,0xc
c001bd95:	68 15 a6 02 c0       	push   0xc002a615
c001bd9a:	e8 cc da ff ff       	call   c001986b <Krnl::panic(char const*)>
c001bd9f:	83 c4 10             	add    esp,0x10
c001bda2:	31 d2                	xor    edx,edx
c001bda4:	50                   	push   eax
c001bda5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bda9:	52                   	push   edx
c001bdaa:	50                   	push   eax
c001bdab:	53                   	push   ebx
c001bdac:	e8 f1 6f ff ff       	call   c0012da2 <File::seek(unsigned long long)>
c001bdb1:	5a                   	pop    edx
c001bdb2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001bdb6:	e8 19 37 ff ff       	call   c000f4d4 <malloc>
c001bdbb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bdbf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bdc3:	31 c9                	xor    ecx,ecx
c001bdc5:	5e                   	pop    esi
c001bdc6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bdc8:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001bdcc:	55                   	push   ebp
c001bdcd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bdd1:	51                   	push   ecx
c001bdd2:	52                   	push   edx
c001bdd3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001bdd7:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001bddb:	53                   	push   ebx
c001bddc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bddf:	83 c4 14             	add    esp,0x14
c001bde2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bde6:	e8 e9 36 ff ff       	call   c000f4d4 <malloc>
c001bdeb:	89 c6                	mov    esi,eax
c001bded:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bdef:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001bdf2:	56                   	push   esi
c001bdf3:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001bdf7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001bdfb:	51                   	push   ecx
c001bdfc:	52                   	push   edx
c001bdfd:	53                   	push   ebx
c001bdfe:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001be01:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001be05:	8b 15 00 de 02 c0    	mov    edx,DWORD PTR ds:0xc002de00
c001be0b:	83 c4 1c             	add    esp,0x1c
c001be0e:	c1 e8 04             	shr    eax,0x4
c001be11:	89 04 95 80 dc 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2380],eax
c001be18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001be1c:	31 d2                	xor    edx,edx
c001be1e:	52                   	push   edx
c001be1f:	50                   	push   eax
c001be20:	53                   	push   ebx
c001be21:	e8 7c 6f ff ff       	call   c0012da2 <File::seek(unsigned long long)>
c001be26:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001be28:	31 d2                	xor    edx,edx
c001be2a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001be2d:	56                   	push   esi
c001be2e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001be32:	52                   	push   edx
c001be33:	50                   	push   eax
c001be34:	53                   	push   ebx
c001be35:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001be38:	83 c4 14             	add    esp,0x14
c001be3b:	53                   	push   ebx
c001be3c:	e8 01 6f ff ff       	call   c0012d42 <File::close()>
c001be41:	5d                   	pop    ebp
c001be42:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001be46:	e8 99 36 ff ff       	call   c000f4e4 <free>
c001be4b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001be4e:	e8 91 36 ff ff       	call   c000f4e4 <free>
c001be53:	a1 00 de 02 c0       	mov    eax,ds:0xc002de00
c001be58:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001be5c:	8d 50 01             	lea    edx,[eax+0x1]
c001be5f:	89 0c 85 80 dd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2280],ecx
c001be66:	89 15 00 de 02 c0    	mov    DWORD PTR ds:0xc002de00,edx
c001be6c:	89 34 85 00 dd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2300],esi
c001be73:	83 c4 10             	add    esp,0x10
c001be76:	b2 01                	mov    dl,0x1
c001be78:	83 c4 5c             	add    esp,0x5c
c001be7b:	88 d0                	mov    al,dl
c001be7d:	5b                   	pop    ebx
c001be7e:	5e                   	pop    esi
c001be7f:	5f                   	pop    edi
c001be80:	5d                   	pop    ebp
c001be81:	c3                   	ret    

c001be82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001be82:	55                   	push   ebp
c001be83:	57                   	push   edi
c001be84:	56                   	push   esi
c001be85:	53                   	push   ebx
c001be86:	81 ec 68 03 00 00    	sub    esp,0x368
c001be8c:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001be93:	8b 1d 54 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002de54
c001be99:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001be9d:	68 14 01 00 00       	push   0x114
c001bea2:	e8 2d 36 ff ff       	call   c000f4d4 <malloc>
c001bea7:	83 c4 0c             	add    esp,0xc
c001beaa:	89 c5                	mov    ebp,eax
c001beac:	53                   	push   ebx
c001bead:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001beb4:	50                   	push   eax
c001beb5:	e8 c6 6d ff ff       	call   c0012c80 <File::File(char const*, Process*)>
c001beba:	58                   	pop    eax
c001bebb:	5a                   	pop    edx
c001bebc:	6a 01                	push   0x1
c001bebe:	55                   	push   ebp
c001bebf:	e8 20 6e ff ff       	call   c0012ce4 <File::open(FileOpenMode)>
c001bec4:	83 c4 10             	add    esp,0x10
c001bec7:	85 c0                	test   eax,eax
c001bec9:	0f 85 f2 06 00 00    	jne    c001c5c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001becf:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001bed7:	83 ec 0c             	sub    esp,0xc
c001beda:	6a 34                	push   0x34
c001bedc:	e8 f3 35 ff ff       	call   c000f4d4 <malloc>
c001bee1:	89 c7                	mov    edi,eax
c001bee3:	58                   	pop    eax
c001bee4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bee7:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001beeb:	53                   	push   ebx
c001beec:	57                   	push   edi
c001beed:	6a 00                	push   0x0
c001beef:	6a 34                	push   0x34
c001bef1:	55                   	push   ebp
c001bef2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bef5:	83 c4 20             	add    esp,0x20
c001bef8:	85 c0                	test   eax,eax
c001befa:	0f 85 c1 06 00 00    	jne    c001c5c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bf00:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001bf06:	0f 85 b5 06 00 00    	jne    c001c5c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bf0c:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001bf0f:	85 c0                	test   eax,eax
c001bf11:	0f 84 aa 06 00 00    	je     c001c5c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bf17:	31 d2                	xor    edx,edx
c001bf19:	56                   	push   esi
c001bf1a:	52                   	push   edx
c001bf1b:	50                   	push   eax
c001bf1c:	55                   	push   ebp
c001bf1d:	e8 80 6e ff ff       	call   c0012da2 <File::seek(unsigned long long)>
c001bf22:	83 c4 10             	add    esp,0x10
c001bf25:	85 c0                	test   eax,eax
c001bf27:	0f 85 94 06 00 00    	jne    c001c5c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bf2d:	83 ec 0c             	sub    esp,0xc
c001bf30:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001bf33:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001bf37:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001bf3b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001bf3f:	0f af c2             	imul   eax,edx
c001bf42:	50                   	push   eax
c001bf43:	e8 8c 35 ff ff       	call   c000f4d4 <malloc>
c001bf48:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001bf4b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bf4f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bf52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf56:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001bf5a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001bf5e:	0f af c2             	imul   eax,edx
c001bf61:	99                   	cdq    
c001bf62:	52                   	push   edx
c001bf63:	50                   	push   eax
c001bf64:	55                   	push   ebp
c001bf65:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bf68:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001bf6b:	83 c4 20             	add    esp,0x20
c001bf6e:	85 c0                	test   eax,eax
c001bf70:	0f 84 4b 06 00 00    	je     c001c5c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bf76:	31 d2                	xor    edx,edx
c001bf78:	51                   	push   ecx
c001bf79:	52                   	push   edx
c001bf7a:	50                   	push   eax
c001bf7b:	55                   	push   ebp
c001bf7c:	e8 21 6e ff ff       	call   c0012da2 <File::seek(unsigned long long)>
c001bf81:	83 c4 10             	add    esp,0x10
c001bf84:	85 c0                	test   eax,eax
c001bf86:	0f 85 35 06 00 00    	jne    c001c5c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bf8c:	83 ec 0c             	sub    esp,0xc
c001bf8f:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001bf93:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001bf97:	31 f6                	xor    esi,esi
c001bf99:	0f af c2             	imul   eax,edx
c001bf9c:	50                   	push   eax
c001bf9d:	e8 32 35 ff ff       	call   c000f4d4 <malloc>
c001bfa2:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001bfa5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001bfa9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bfac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bfb0:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001bfb4:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001bfb8:	0f af c2             	imul   eax,edx
c001bfbb:	99                   	cdq    
c001bfbc:	52                   	push   edx
c001bfbd:	50                   	push   eax
c001bfbe:	55                   	push   ebp
c001bfbf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bfc2:	83 c4 20             	add    esp,0x20
c001bfc5:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001bfc9:	0f 86 8a 00 00 00    	jbe    c001c059 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001bfcf:	0f b7 de             	movzx  ebx,si
c001bfd2:	c1 e3 05             	shl    ebx,0x5
c001bfd5:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c001bfd9:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001bfdc:	75 75                	jne    c001c053 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001bfde:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001bfe1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bfe5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001bfe8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bfec:	52                   	push   edx
c001bfed:	31 d2                	xor    edx,edx
c001bfef:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001bff2:	52                   	push   edx
c001bff3:	50                   	push   eax
c001bff4:	55                   	push   ebp
c001bff5:	e8 a8 6d ff ff       	call   c0012da2 <File::seek(unsigned long long)>
c001bffa:	83 c4 10             	add    esp,0x10
c001bffd:	85 c0                	test   eax,eax
c001bfff:	0f 85 bc 05 00 00    	jne    c001c5c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001c005:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001c00c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c00f:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001c013:	31 d2                	xor    edx,edx
c001c015:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001c019:	83 ec 0c             	sub    esp,0xc
c001c01c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c020:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c027:	50                   	push   eax
c001c028:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c02c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c030:	52                   	push   edx
c001c031:	50                   	push   eax
c001c032:	55                   	push   ebp
c001c033:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c036:	83 c4 1c             	add    esp,0x1c
c001c039:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c03c:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001c03f:	50                   	push   eax
c001c040:	6a 00                	push   0x0
c001c042:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c046:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001c04a:	50                   	push   eax
c001c04b:	e8 3b 46 fe ff       	call   c000068b <memset>
c001c050:	83 c4 10             	add    esp,0x10
c001c053:	46                   	inc    esi
c001c054:	e9 6c ff ff ff       	jmp    c001bfc5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001c059:	31 db                	xor    ebx,ebx
c001c05b:	50                   	push   eax
c001c05c:	68 00 01 00 00       	push   0x100
c001c061:	6a 00                	push   0x0
c001c063:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001c067:	50                   	push   eax
c001c068:	e8 1e 46 fe ff       	call   c000068b <memset>
c001c06d:	83 c4 0c             	add    esp,0xc
c001c070:	68 00 01 00 00       	push   0x100
c001c075:	6a 00                	push   0x0
c001c077:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001c07e:	50                   	push   eax
c001c07f:	e8 07 46 fe ff       	call   c000068b <memset>
c001c084:	83 c4 10             	add    esp,0x10
c001c087:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c08f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c097:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c09f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c0a7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001c0af:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001c0b3:	0f 86 30 01 00 00    	jbe    c001c1e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001c0b9:	0f b7 f3             	movzx  esi,bx
c001c0bc:	6b f6 28             	imul   esi,esi,0x28
c001c0bf:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001c0c3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c0c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c0ca:	50                   	push   eax
c001c0cb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c0cf:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001c0d3:	8b 06                	mov    eax,DWORD PTR [esi]
c001c0d5:	6b d2 28             	imul   edx,edx,0x28
c001c0d8:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001c0dc:	31 d2                	xor    edx,edx
c001c0de:	52                   	push   edx
c001c0df:	50                   	push   eax
c001c0e0:	55                   	push   ebp
c001c0e1:	e8 bc 6c ff ff       	call   c0012da2 <File::seek(unsigned long long)>
c001c0e6:	83 c4 0c             	add    esp,0xc
c001c0e9:	6a 20                	push   0x20
c001c0eb:	6a 00                	push   0x0
c001c0ed:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c0f4:	51                   	push   ecx
c001c0f5:	e8 91 45 fe ff       	call   c000068b <memset>
c001c0fa:	58                   	pop    eax
c001c0fb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c0fe:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c102:	52                   	push   edx
c001c103:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001c10a:	51                   	push   ecx
c001c10b:	6a 00                	push   0x0
c001c10d:	6a 1f                	push   0x1f
c001c10f:	55                   	push   ebp
c001c110:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c113:	83 c4 1c             	add    esp,0x1c
c001c116:	6a 09                	push   0x9
c001c118:	68 2f a6 02 c0       	push   0xc002a62f
c001c11d:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c124:	51                   	push   ecx
c001c125:	e8 c8 44 fe ff       	call   c00005f2 <memcmp>
c001c12a:	83 c4 10             	add    esp,0x10
c001c12d:	85 c0                	test   eax,eax
c001c12f:	75 21                	jne    c001c152 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001c131:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c135:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001c139:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c13d:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c141:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c144:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001c14b:	89 c8                	mov    eax,ecx
c001c14d:	40                   	inc    eax
c001c14e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c152:	50                   	push   eax
c001c153:	6a 09                	push   0x9
c001c155:	68 39 a6 02 c0       	push   0xc002a639
c001c15a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c161:	50                   	push   eax
c001c162:	e8 8b 44 fe ff       	call   c00005f2 <memcmp>
c001c167:	83 c4 10             	add    esp,0x10
c001c16a:	85 c0                	test   eax,eax
c001c16c:	75 21                	jne    c001c18f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001c16e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c172:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001c176:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c17a:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c17e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c181:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001c188:	89 c8                	mov    eax,ecx
c001c18a:	40                   	inc    eax
c001c18b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c18f:	50                   	push   eax
c001c190:	50                   	push   eax
c001c191:	68 05 a6 02 c0       	push   0xc002a605
c001c196:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c19d:	50                   	push   eax
c001c19e:	e8 d8 45 fe ff       	call   c000077b <strcmp>
c001c1a3:	83 c4 10             	add    esp,0x10
c001c1a6:	85 c0                	test   eax,eax
c001c1a8:	75 0f                	jne    c001c1b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001c1aa:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c1ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c1b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c1b5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c1b9:	50                   	push   eax
c001c1ba:	50                   	push   eax
c001c1bb:	68 0d a6 02 c0       	push   0xc002a60d
c001c1c0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c1c7:	50                   	push   eax
c001c1c8:	e8 ae 45 fe ff       	call   c000077b <strcmp>
c001c1cd:	83 c4 10             	add    esp,0x10
c001c1d0:	85 c0                	test   eax,eax
c001c1d2:	75 0f                	jne    c001c1e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001c1d4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c1d7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c1db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c1df:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c1e3:	43                   	inc    ebx
c001c1e4:	e9 c6 fe ff ff       	jmp    c001c0af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001c1e9:	31 d2                	xor    edx,edx
c001c1eb:	50                   	push   eax
c001c1ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c1f0:	52                   	push   edx
c001c1f1:	50                   	push   eax
c001c1f2:	55                   	push   ebp
c001c1f3:	e8 aa 6b ff ff       	call   c0012da2 <File::seek(unsigned long long)>
c001c1f8:	5a                   	pop    edx
c001c1f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c1fd:	e8 d2 32 ff ff       	call   c000f4d4 <malloc>
c001c202:	31 d2                	xor    edx,edx
c001c204:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001c208:	59                   	pop    ecx
c001c209:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c20c:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c210:	53                   	push   ebx
c001c211:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001c215:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c219:	52                   	push   edx
c001c21a:	50                   	push   eax
c001c21b:	55                   	push   ebp
c001c21c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c21f:	83 c4 14             	add    esp,0x14
c001c222:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c226:	e8 a9 32 ff ff       	call   c000f4d4 <malloc>
c001c22b:	31 d2                	xor    edx,edx
c001c22d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c231:	83 c4 0c             	add    esp,0xc
c001c234:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c238:	52                   	push   edx
c001c239:	50                   	push   eax
c001c23a:	55                   	push   ebp
c001c23b:	e8 62 6b ff ff       	call   c0012da2 <File::seek(unsigned long long)>
c001c240:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c243:	31 d2                	xor    edx,edx
c001c245:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c248:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c24c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c250:	52                   	push   edx
c001c251:	50                   	push   eax
c001c252:	55                   	push   ebp
c001c253:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c256:	83 c4 20             	add    esp,0x20
c001c259:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c261:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c265:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c001c269:	0f 84 56 03 00 00    	je     c001c5c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x743>
c001c26f:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c001c276:	31 d2                	xor    edx,edx
c001c278:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c27c:	c1 e8 03             	shr    eax,0x3
c001c27f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001c283:	50                   	push   eax
c001c284:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c288:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001c28c:	52                   	push   edx
c001c28d:	50                   	push   eax
c001c28e:	55                   	push   ebp
c001c28f:	e8 0e 6b ff ff       	call   c0012da2 <File::seek(unsigned long long)>
c001c294:	58                   	pop    eax
c001c295:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c299:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001c2a0:	e8 2f 32 ff ff       	call   c000f4d4 <malloc>
c001c2a5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c2a8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c2ac:	31 d2                	xor    edx,edx
c001c2ae:	58                   	pop    eax
c001c2af:	8d 44 24 58          	lea    eax,[esp+0x58]
c001c2b3:	50                   	push   eax
c001c2b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c2b8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c2bc:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001c2c3:	52                   	push   edx
c001c2c4:	50                   	push   eax
c001c2c5:	55                   	push   ebp
c001c2c6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c2c9:	83 c4 20             	add    esp,0x20
c001c2cc:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c2d4:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001c2d8:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c001c2dc:	0f 8d c7 02 00 00    	jge    c001c5a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x727>
c001c2e2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c2e6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c2ea:	31 db                	xor    ebx,ebx
c001c2ec:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c001c2ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001c2f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c2f7:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c001c2fb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c2ff:	c1 e8 08             	shr    eax,0x8
c001c302:	89 c6                	mov    esi,eax
c001c304:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c308:	c1 e6 04             	shl    esi,0x4
c001c30b:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c001c30f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c312:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c316:	85 c0                	test   eax,eax
c001c318:	0f 85 17 01 00 00    	jne    c001c435 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001c31e:	83 ec 0c             	sub    esp,0xc
c001c321:	b3 01                	mov    bl,0x1
c001c323:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c327:	03 06                	add    eax,DWORD PTR [esi]
c001c329:	50                   	push   eax
c001c32a:	e8 48 f8 ff ff       	call   c001bb77 <Thr::getAddressOfKernelSymbol(char const*)>
c001c32f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c333:	83 c4 10             	add    esp,0x10
c001c336:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001c33b:	0f 85 f4 00 00 00    	jne    c001c435 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001c341:	50                   	push   eax
c001c342:	50                   	push   eax
c001c343:	68 43 a6 02 c0       	push   0xc002a643
c001c348:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c34c:	03 06                	add    eax,DWORD PTR [esi]
c001c34e:	50                   	push   eax
c001c34f:	e8 27 44 fe ff       	call   c000077b <strcmp>
c001c354:	83 c4 10             	add    esp,0x10
c001c357:	85 c0                	test   eax,eax
c001c359:	75 0a                	jne    c001c365 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x4e3>
c001c35b:	b8 7c 53 02 c0       	mov    eax,0xc002537c
c001c360:	e9 ca 00 00 00       	jmp    c001c42f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001c365:	50                   	push   eax
c001c366:	50                   	push   eax
c001c367:	68 4d a6 02 c0       	push   0xc002a64d
c001c36c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c370:	03 06                	add    eax,DWORD PTR [esi]
c001c372:	50                   	push   eax
c001c373:	e8 03 44 fe ff       	call   c000077b <strcmp>
c001c378:	83 c4 10             	add    esp,0x10
c001c37b:	85 c0                	test   eax,eax
c001c37d:	75 0a                	jne    c001c389 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x507>
c001c37f:	b8 b0 50 02 c0       	mov    eax,0xc00250b0
c001c384:	e9 a6 00 00 00       	jmp    c001c42f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001c389:	53                   	push   ebx
c001c38a:	53                   	push   ebx
c001c38b:	68 56 a6 02 c0       	push   0xc002a656
c001c390:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c394:	03 06                	add    eax,DWORD PTR [esi]
c001c396:	50                   	push   eax
c001c397:	e8 df 43 fe ff       	call   c000077b <strcmp>
c001c39c:	83 c4 10             	add    esp,0x10
c001c39f:	85 c0                	test   eax,eax
c001c3a1:	75 0a                	jne    c001c3ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x52b>
c001c3a3:	b8 7c 54 02 c0       	mov    eax,0xc002547c
c001c3a8:	e9 82 00 00 00       	jmp    c001c42f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001c3ad:	51                   	push   ecx
c001c3ae:	51                   	push   ecx
c001c3af:	68 60 a6 02 c0       	push   0xc002a660
c001c3b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c3b8:	03 06                	add    eax,DWORD PTR [esi]
c001c3ba:	50                   	push   eax
c001c3bb:	e8 bb 43 fe ff       	call   c000077b <strcmp>
c001c3c0:	83 c4 10             	add    esp,0x10
c001c3c3:	85 c0                	test   eax,eax
c001c3c5:	74 63                	je     c001c42a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a8>
c001c3c7:	50                   	push   eax
c001c3c8:	50                   	push   eax
c001c3c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c3cd:	03 06                	add    eax,DWORD PTR [esi]
c001c3cf:	50                   	push   eax
c001c3d0:	68 69 a6 02 c0       	push   0xc002a669
c001c3d5:	e8 77 63 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001c3da:	58                   	pop    eax
c001c3db:	5a                   	pop    edx
c001c3dc:	68 83 a6 02 c0       	push   0xc002a683
c001c3e1:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c001c3e8:	53                   	push   ebx
c001c3e9:	e8 3c 43 fe ff       	call   c000072a <strcpy>
c001c3ee:	59                   	pop    ecx
c001c3ef:	58                   	pop    eax
c001c3f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c3f4:	03 06                	add    eax,DWORD PTR [esi]
c001c3f6:	50                   	push   eax
c001c3f7:	53                   	push   ebx
c001c3f8:	e8 e4 43 fe ff       	call   c00007e1 <strcat>
c001c3fd:	58                   	pop    eax
c001c3fe:	5a                   	pop    edx
c001c3ff:	68 19 a7 02 c0       	push   0xc002a719
c001c404:	53                   	push   ebx
c001c405:	e8 d7 43 fe ff       	call   c00007e1 <strcat>
c001c40a:	83 c4 10             	add    esp,0x10
c001c40d:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c412:	0f 84 4b 01 00 00    	je     c001c563 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001c418:	83 ec 0c             	sub    esp,0xc
c001c41b:	53                   	push   ebx
c001c41c:	e8 4a d4 ff ff       	call   c001986b <Krnl::panic(char const*)>
c001c421:	83 c4 10             	add    esp,0x10
c001c424:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c001c428:	eb 0b                	jmp    c001c435 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001c42a:	b8 fc 51 02 c0       	mov    eax,0xc00251fc
c001c42f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c433:	b3 01                	mov    bl,0x1
c001c435:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c001c43a:	0f 85 80 00 00 00    	jne    c001c4c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63e>
c001c440:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001c447:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c44b:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001c44f:	01 ce                	add    esi,ecx
c001c451:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001c459:	8b 06                	mov    eax,DWORD PTR [esi]
c001c45b:	0f 94 c2             	sete   dl
c001c45e:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001c466:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c001c46b:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c001c46f:	84 db                	test   bl,bl
c001c471:	74 31                	je     c001c4a4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x622>
c001c473:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001c477:	01 c3                	add    ebx,eax
c001c479:	84 d2                	test   dl,dl
c001c47b:	75 0a                	jne    c001c487 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x605>
c001c47d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c481:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001c485:	76 32                	jbe    c001c4b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001c487:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c48c:	0f 84 d1 00 00 00    	je     c001c563 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001c492:	83 ec 0c             	sub    esp,0xc
c001c495:	68 9a a6 02 c0       	push   0xc002a69a
c001c49a:	e8 cc d3 ff ff       	call   c001986b <Krnl::panic(char const*)>
c001c49f:	83 c4 10             	add    esp,0x10
c001c4a2:	eb 15                	jmp    c001c4b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001c4a4:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c001c4a7:	84 d2                	test   dl,dl
c001c4a9:	75 0e                	jne    c001c4b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001c4ab:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c4af:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001c4b3:	77 04                	ja     c001c4b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001c4b5:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001c4b9:	89 1e                	mov    DWORD PTR [esi],ebx
c001c4bb:	e9 e0 00 00 00       	jmp    c001c5a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001c4c0:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c001c4c5:	75 6e                	jne    c001c535 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b3>
c001c4c7:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001c4ce:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c001c4d2:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c001c4d6:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001c4de:	74 17                	je     c001c4f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001c4e0:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001c4e8:	74 0d                	je     c001c4f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001c4ea:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c4ee:	83 e8 04             	sub    eax,0x4
c001c4f1:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001c4f5:	76 17                	jbe    c001c50e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x68c>
c001c4f7:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c4fc:	74 65                	je     c001c563 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001c4fe:	83 ec 0c             	sub    esp,0xc
c001c501:	68 b6 a6 02 c0       	push   0xc002a6b6
c001c506:	e8 60 d3 ff ff       	call   c001986b <Krnl::panic(char const*)>
c001c50b:	83 c4 10             	add    esp,0x10
c001c50e:	8b 16                	mov    edx,DWORD PTR [esi]
c001c510:	84 db                	test   bl,bl
c001c512:	74 13                	je     c001c527 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a5>
c001c514:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c518:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c001c51f:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001c523:	01 d0                	add    eax,edx
c001c525:	eb 06                	jmp    c001c52d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c001c527:	89 d0                	mov    eax,edx
c001c529:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001c52d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001c531:	89 06                	mov    DWORD PTR [esi],eax
c001c533:	eb 6b                	jmp    c001c5a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001c535:	50                   	push   eax
c001c536:	50                   	push   eax
c001c537:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001c53c:	50                   	push   eax
c001c53d:	68 d2 a6 02 c0       	push   0xc002a6d2
c001c542:	e8 0a 62 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001c547:	83 c4 10             	add    esp,0x10
c001c54a:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c54f:	74 12                	je     c001c563 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001c551:	83 ec 0c             	sub    esp,0xc
c001c554:	68 dd a6 02 c0       	push   0xc002a6dd
c001c559:	e8 0d d3 ff ff       	call   c001986b <Krnl::panic(char const*)>
c001c55e:	83 c4 10             	add    esp,0x10
c001c561:	eb 3d                	jmp    c001c5a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001c563:	83 ec 0c             	sub    esp,0xc
c001c566:	55                   	push   ebp
c001c567:	e8 d6 67 ff ff       	call   c0012d42 <File::close()>
c001c56c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c56f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c572:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c575:	59                   	pop    ecx
c001c576:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c57a:	e8 65 2f ff ff       	call   c000f4e4 <free>
c001c57f:	5b                   	pop    ebx
c001c580:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c584:	e8 5b 2f ff ff       	call   c000f4e4 <free>
c001c589:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c58c:	e8 53 2f ff ff       	call   c000f4e4 <free>
c001c591:	5e                   	pop    esi
c001c592:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c596:	e8 49 2f ff ff       	call   c000f4e4 <free>
c001c59b:	83 c4 10             	add    esp,0x10
c001c59e:	eb 21                	jmp    c001c5c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001c5a0:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c001c5a4:	e9 2b fd ff ff       	jmp    c001c2d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001c5a9:	83 ec 0c             	sub    esp,0xc
c001c5ac:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c5b0:	e8 2f 2f ff ff       	call   c000f4e4 <free>
c001c5b5:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c001c5b9:	83 c4 10             	add    esp,0x10
c001c5bc:	e9 a0 fc ff ff       	jmp    c001c261 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001c5c1:	31 c0                	xor    eax,eax
c001c5c3:	eb 33                	jmp    c001c5f8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x776>
c001c5c5:	83 ec 0c             	sub    esp,0xc
c001c5c8:	55                   	push   ebp
c001c5c9:	e8 74 67 ff ff       	call   c0012d42 <File::close()>
c001c5ce:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c5d1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c5d4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c5d7:	58                   	pop    eax
c001c5d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c5dc:	e8 03 2f ff ff       	call   c000f4e4 <free>
c001c5e1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c5e4:	e8 fb 2e ff ff       	call   c000f4e4 <free>
c001c5e9:	5a                   	pop    edx
c001c5ea:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c5ee:	e8 f1 2e ff ff       	call   c000f4e4 <free>
c001c5f3:	83 c4 10             	add    esp,0x10
c001c5f6:	b0 01                	mov    al,0x1
c001c5f8:	81 c4 5c 03 00 00    	add    esp,0x35c
c001c5fe:	5b                   	pop    ebx
c001c5ff:	5e                   	pop    esi
c001c600:	5f                   	pop    edi
c001c601:	5d                   	pop    ebp
c001c602:	c3                   	ret    

c001c603 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001c603:	56                   	push   esi
c001c604:	31 d2                	xor    edx,edx
c001c606:	53                   	push   ebx
c001c607:	8b 1d 60 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d660
c001c60d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c611:	39 d3                	cmp    ebx,edx
c001c613:	7e 1b                	jle    c001c630 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001c615:	8b 04 95 80 d8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2780]
c001c61c:	39 c8                	cmp    eax,ecx
c001c61e:	77 0d                	ja     c001c62d <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001c620:	8b 34 95 80 d6 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd2980]
c001c627:	01 c6                	add    esi,eax
c001c629:	39 ce                	cmp    esi,ecx
c001c62b:	77 05                	ja     c001c632 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001c62d:	42                   	inc    edx
c001c62e:	eb e1                	jmp    c001c611 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001c630:	31 c0                	xor    eax,eax
c001c632:	5b                   	pop    ebx
c001c633:	5e                   	pop    esi
c001c634:	c3                   	ret    

c001c635 <Thr::getDriverNameFromAddress(unsigned long)>:
c001c635:	53                   	push   ebx
c001c636:	31 c0                	xor    eax,eax
c001c638:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c63c:	8b 1d 60 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d660
c001c642:	39 c3                	cmp    ebx,eax
c001c644:	7e 22                	jle    c001c668 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001c646:	8b 14 85 80 d8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2780]
c001c64d:	39 ca                	cmp    edx,ecx
c001c64f:	77 14                	ja     c001c665 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001c651:	03 14 85 80 d6 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd2980]
c001c658:	39 ca                	cmp    edx,ecx
c001c65a:	76 09                	jbe    c001c665 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001c65c:	8b 04 85 80 da 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2580]
c001c663:	eb 05                	jmp    c001c66a <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001c665:	40                   	inc    eax
c001c666:	eb da                	jmp    c001c642 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001c668:	31 c0                	xor    eax,eax
c001c66a:	5b                   	pop    ebx
c001c66b:	c3                   	ret    

c001c66c <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001c66c:	53                   	push   ebx
c001c66d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001c671:	53                   	push   ebx
c001c672:	e8 8c ff ff ff       	call   c001c603 <Thr::getDriverBaseFromAddress(unsigned long)>
c001c677:	5a                   	pop    edx
c001c678:	31 d2                	xor    edx,edx
c001c67a:	85 c0                	test   eax,eax
c001c67c:	74 04                	je     c001c682 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001c67e:	89 da                	mov    edx,ebx
c001c680:	29 c2                	sub    edx,eax
c001c682:	89 d0                	mov    eax,edx
c001c684:	5b                   	pop    ebx
c001c685:	c3                   	ret    

c001c686 <Thr::loadDLL(char const*, bool)>:
c001c686:	55                   	push   ebp
c001c687:	57                   	push   edi
c001c688:	56                   	push   esi
c001c689:	53                   	push   ebx
c001c68a:	81 ec 34 01 00 00    	sub    esp,0x134
c001c690:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001c697:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001c69e:	56                   	push   esi
c001c69f:	68 f5 a6 02 c0       	push   0xc002a6f5
c001c6a4:	e8 a8 60 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001c6a9:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001c6b0:	e8 1f 2e ff ff       	call   c000f4d4 <malloc>
c001c6b5:	83 c4 0c             	add    esp,0xc
c001c6b8:	89 c3                	mov    ebx,eax
c001c6ba:	ff 35 54 de 02 c0    	push   DWORD PTR ds:0xc002de54
c001c6c0:	56                   	push   esi
c001c6c1:	50                   	push   eax
c001c6c2:	e8 b9 65 ff ff       	call   c0012c80 <File::File(char const*, Process*)>
c001c6c7:	83 c4 10             	add    esp,0x10
c001c6ca:	85 db                	test   ebx,ebx
c001c6cc:	75 3c                	jne    c001c70a <Thr::loadDLL(char const*, bool)+0x84>
c001c6ce:	89 e8                	mov    eax,ebp
c001c6d0:	84 c0                	test   al,al
c001c6d2:	0f 84 b0 01 00 00    	je     c001c888 <Thr::loadDLL(char const*, bool)+0x202>
c001c6d8:	50                   	push   eax
c001c6d9:	50                   	push   eax
c001c6da:	68 06 a7 02 c0       	push   0xc002a706
c001c6df:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001c6e3:	57                   	push   edi
c001c6e4:	e8 41 40 fe ff       	call   c000072a <strcpy>
c001c6e9:	58                   	pop    eax
c001c6ea:	5a                   	pop    edx
c001c6eb:	56                   	push   esi
c001c6ec:	57                   	push   edi
c001c6ed:	e8 ef 40 fe ff       	call   c00007e1 <strcat>
c001c6f2:	59                   	pop    ecx
c001c6f3:	58                   	pop    eax
c001c6f4:	68 19 a7 02 c0       	push   0xc002a719
c001c6f9:	57                   	push   edi
c001c6fa:	e8 e2 40 fe ff       	call   c00007e1 <strcat>
c001c6ff:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c702:	e8 64 d1 ff ff       	call   c001986b <Krnl::panic(char const*)>
c001c707:	83 c4 10             	add    esp,0x10
c001c70a:	50                   	push   eax
c001c70b:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001c70f:	50                   	push   eax
c001c710:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c714:	50                   	push   eax
c001c715:	53                   	push   ebx
c001c716:	e8 75 68 ff ff       	call   c0012f90 <File::stat(unsigned long long*, bool*)>
c001c71b:	83 c4 10             	add    esp,0x10
c001c71e:	85 db                	test   ebx,ebx
c001c720:	74 0c                	je     c001c72e <Thr::loadDLL(char const*, bool)+0xa8>
c001c722:	83 ec 0c             	sub    esp,0xc
c001c725:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c727:	53                   	push   ebx
c001c728:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c72b:	83 c4 10             	add    esp,0x10
c001c72e:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001c733:	75 0a                	jne    c001c73f <Thr::loadDLL(char const*, bool)+0xb9>
c001c735:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c739:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001c73d:	75 3c                	jne    c001c77b <Thr::loadDLL(char const*, bool)+0xf5>
c001c73f:	89 e8                	mov    eax,ebp
c001c741:	84 c0                	test   al,al
c001c743:	0f 84 3d 01 00 00    	je     c001c886 <Thr::loadDLL(char const*, bool)+0x200>
c001c749:	50                   	push   eax
c001c74a:	50                   	push   eax
c001c74b:	68 06 a7 02 c0       	push   0xc002a706
c001c750:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001c754:	53                   	push   ebx
c001c755:	e8 d0 3f fe ff       	call   c000072a <strcpy>
c001c75a:	58                   	pop    eax
c001c75b:	5a                   	pop    edx
c001c75c:	56                   	push   esi
c001c75d:	53                   	push   ebx
c001c75e:	e8 7e 40 fe ff       	call   c00007e1 <strcat>
c001c763:	59                   	pop    ecx
c001c764:	5f                   	pop    edi
c001c765:	68 19 a7 02 c0       	push   0xc002a719
c001c76a:	53                   	push   ebx
c001c76b:	e8 71 40 fe ff       	call   c00007e1 <strcat>
c001c770:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c773:	e8 f3 d0 ff ff       	call   c001986b <Krnl::panic(char const*)>
c001c778:	83 c4 10             	add    esp,0x10
c001c77b:	e8 71 51 ff ff       	call   c00118f1 <Virt::getAKernelVAS()>
c001c780:	51                   	push   ecx
c001c781:	6a 03                	push   0x3
c001c783:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c787:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c78b:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001c791:	83 d3 00             	adc    ebx,0x0
c001c794:	89 ca                	mov    edx,ecx
c001c796:	89 d1                	mov    ecx,edx
c001c798:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001c79c:	51                   	push   ecx
c001c79d:	50                   	push   eax
c001c79e:	e8 89 57 ff ff       	call   c0011f2c <VAS::allocatePages(int, int)>
c001c7a3:	89 34 24             	mov    DWORD PTR [esp],esi
c001c7a6:	89 c3                	mov    ebx,eax
c001c7a8:	e8 fb 3e fe ff       	call   c00006a8 <strlen>
c001c7ad:	8b 3d 60 d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d660
c001c7b3:	40                   	inc    eax
c001c7b4:	89 04 24             	mov    DWORD PTR [esp],eax
c001c7b7:	e8 18 2d ff ff       	call   c000f4d4 <malloc>
c001c7bc:	89 04 bd 80 da 02 c0 	mov    DWORD PTR [edi*4-0x3ffd2580],eax
c001c7c3:	5f                   	pop    edi
c001c7c4:	58                   	pop    eax
c001c7c5:	a1 60 d6 02 c0       	mov    eax,ds:0xc002d660
c001c7ca:	56                   	push   esi
c001c7cb:	ff 34 85 80 da 02 c0 	push   DWORD PTR [eax*4-0x3ffd2580]
c001c7d2:	e8 53 3f fe ff       	call   c000072a <strcpy>
c001c7d7:	a1 60 d6 02 c0       	mov    eax,ds:0xc002d660
c001c7dc:	8d 50 01             	lea    edx,[eax+0x1]
c001c7df:	89 1c 85 80 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2780],ebx
c001c7e6:	89 15 60 d6 02 c0    	mov    DWORD PTR ds:0xc002d660,edx
c001c7ec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c7f0:	83 c4 0c             	add    esp,0xc
c001c7f3:	89 14 85 80 d6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2980],edx
c001c7fa:	6a 01                	push   0x1
c001c7fc:	53                   	push   ebx
c001c7fd:	56                   	push   esi
c001c7fe:	e8 7f f6 ff ff       	call   c001be82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001c803:	83 c4 10             	add    esp,0x10
c001c806:	89 c7                	mov    edi,eax
c001c808:	fe c8                	dec    al
c001c80a:	74 16                	je     c001c822 <Thr::loadDLL(char const*, bool)+0x19c>
c001c80c:	89 e8                	mov    eax,ebp
c001c80e:	84 c0                	test   al,al
c001c810:	74 10                	je     c001c822 <Thr::loadDLL(char const*, bool)+0x19c>
c001c812:	83 ec 0c             	sub    esp,0xc
c001c815:	68 1b a7 02 c0       	push   0xc002a71b
c001c81a:	e8 4c d0 ff ff       	call   c001986b <Krnl::panic(char const*)>
c001c81f:	83 c4 10             	add    esp,0x10
c001c822:	31 f6                	xor    esi,esi
c001c824:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c828:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c82c:	05 ff 0f 00 00       	add    eax,0xfff
c001c831:	83 d2 00             	adc    edx,0x0
c001c834:	0f ac d0 0c          	shrd   eax,edx,0xc
c001c838:	c1 ea 0c             	shr    edx,0xc
c001c83b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c83f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c843:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001c847:	ba 00 00 00 00       	mov    edx,0x0
c001c84c:	89 d0                	mov    eax,edx
c001c84e:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001c852:	73 2c                	jae    c001c880 <Thr::loadDLL(char const*, bool)+0x1fa>
c001c854:	e8 98 50 ff ff       	call   c00118f1 <Virt::getAKernelVAS()>
c001c859:	89 f5                	mov    ebp,esi
c001c85b:	c1 e5 0c             	shl    ebp,0xc
c001c85e:	52                   	push   edx
c001c85f:	01 dd                	add    ebp,ebx
c001c861:	52                   	push   edx
c001c862:	55                   	push   ebp
c001c863:	50                   	push   eax
c001c864:	e8 3d 52 ff ff       	call   c0011aa6 <VAS::getPageTableEntry(unsigned long)>
c001c869:	83 c4 10             	add    esp,0x10
c001c86c:	f6 00 60             	test   BYTE PTR [eax],0x60
c001c86f:	75 0c                	jne    c001c87d <Thr::loadDLL(char const*, bool)+0x1f7>
c001c871:	83 ec 0c             	sub    esp,0xc
c001c874:	55                   	push   ebp
c001c875:	e8 7a 31 ff ff       	call   c000f9f4 <Phys::freePage(unsigned long)>
c001c87a:	83 c4 10             	add    esp,0x10
c001c87d:	46                   	inc    esi
c001c87e:	eb a4                	jmp    c001c824 <Thr::loadDLL(char const*, bool)+0x19e>
c001c880:	89 f8                	mov    eax,edi
c001c882:	84 c0                	test   al,al
c001c884:	75 02                	jne    c001c888 <Thr::loadDLL(char const*, bool)+0x202>
c001c886:	31 db                	xor    ebx,ebx
c001c888:	81 c4 2c 01 00 00    	add    esp,0x12c
c001c88e:	89 d8                	mov    eax,ebx
c001c890:	5b                   	pop    ebx
c001c891:	5e                   	pop    esi
c001c892:	5f                   	pop    edi
c001c893:	5d                   	pop    ebp
c001c894:	c3                   	ret    

c001c895 <Thr::executeDLL(unsigned long, void*)>:
c001c895:	56                   	push   esi
c001c896:	53                   	push   ebx
c001c897:	51                   	push   ecx
c001c898:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c89c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001c8a0:	85 db                	test   ebx,ebx
c001c8a2:	75 10                	jne    c001c8b4 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001c8a4:	83 ec 0c             	sub    esp,0xc
c001c8a7:	68 3a a7 02 c0       	push   0xc002a73a
c001c8ac:	e8 ba cf ff ff       	call   c001986b <Krnl::panic(char const*)>
c001c8b1:	83 c4 10             	add    esp,0x10
c001c8b4:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001c8b8:	89 d8                	mov    eax,ebx
c001c8ba:	5a                   	pop    edx
c001c8bb:	5b                   	pop    ebx
c001c8bc:	5e                   	pop    esi
c001c8bd:	ff e0                	jmp    eax
c001c8bf:	90                   	nop

c001c8c0 <changeTSS>:
c001c8c0:	83 ec 14             	sub    esp,0x14
c001c8c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c8c8:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001c8cb:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001c8d0:	c1 e2 15             	shl    edx,0x15
c001c8d3:	29 d0                	sub    eax,edx
c001c8d5:	50                   	push   eax
c001c8d6:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c001c8db:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c8e1:	05 7c 11 00 00       	add    eax,0x117c
c001c8e6:	50                   	push   eax
c001c8e7:	e8 b4 47 ff ff       	call   c00110a0 <TSS::setESP(unsigned long)>
c001c8ec:	83 c4 1c             	add    esp,0x1c
c001c8ef:	c3                   	ret    

c001c8f0 <Process::addArgs(char**)>:
c001c8f0:	57                   	push   edi
c001c8f1:	56                   	push   esi
c001c8f2:	53                   	push   ebx
c001c8f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c8f7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c8fb:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001c905:	85 ff                	test   edi,edi
c001c907:	74 3d                	je     c001c946 <Process::addArgs(char**)+0x56>
c001c909:	8b 07                	mov    eax,DWORD PTR [edi]
c001c90b:	85 c0                	test   eax,eax
c001c90d:	74 37                	je     c001c946 <Process::addArgs(char**)+0x56>
c001c90f:	31 db                	xor    ebx,ebx
c001c911:	83 ec 0c             	sub    esp,0xc
c001c914:	50                   	push   eax
c001c915:	e8 8e 3d fe ff       	call   c00006a8 <strlen>
c001c91a:	40                   	inc    eax
c001c91b:	89 04 24             	mov    DWORD PTR [esp],eax
c001c91e:	e8 b1 2b ff ff       	call   c000f4d4 <malloc>
c001c923:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001c92a:	5a                   	pop    edx
c001c92b:	59                   	pop    ecx
c001c92c:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001c92f:	43                   	inc    ebx
c001c930:	50                   	push   eax
c001c931:	e8 f4 3d fe ff       	call   c000072a <strcpy>
c001c936:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001c93c:	83 c4 10             	add    esp,0x10
c001c93f:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001c942:	85 c0                	test   eax,eax
c001c944:	75 cb                	jne    c001c911 <Process::addArgs(char**)+0x21>
c001c946:	5b                   	pop    ebx
c001c947:	5e                   	pop    esi
c001c948:	5f                   	pop    edi
c001c949:	c3                   	ret    

c001c94a <Process::Process(char const*, Process*, char**)>:
c001c94a:	56                   	push   esi
c001c94b:	53                   	push   ebx
c001c94c:	83 ec 14             	sub    esp,0x14
c001c94f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c953:	05 0c 02 00 00       	add    eax,0x20c
c001c958:	bb 07 00 00 00       	mov    ebx,0x7
c001c95d:	89 c6                	mov    esi,eax
c001c95f:	85 db                	test   ebx,ebx
c001c961:	78 12                	js     c001c975 <Process::Process(char const*, Process*, char**)+0x2b>
c001c963:	83 ec 0c             	sub    esp,0xc
c001c966:	56                   	push   esi
c001c967:	e8 c6 ac 00 00       	call   c0027632 <ThreadControlBlock::ThreadControlBlock()>
c001c96c:	83 c4 10             	add    esp,0x10
c001c96f:	83 c6 63             	add    esi,0x63
c001c972:	4b                   	dec    ebx
c001c973:	eb ea                	jmp    c001c95f <Process::Process(char const*, Process*, char**)+0x15>
c001c975:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c979:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001c980:	83 ec 0c             	sub    esp,0xc
c001c983:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c987:	e8 30 cd ff ff       	call   c00196bc <Krnl::newProcessEnv(Process*)>
c001c98c:	83 c4 10             	add    esp,0x10
c001c98f:	89 c2                	mov    edx,eax
c001c991:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c995:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001c99b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c99f:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001c9a8:	a1 b0 be 02 c0       	mov    eax,ds:0xc002beb0
c001c9ad:	8d 50 01             	lea    edx,[eax+0x1]
c001c9b0:	89 15 b0 be 02 c0    	mov    DWORD PTR ds:0xc002beb0,edx
c001c9b6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c9ba:	89 02                	mov    DWORD PTR [edx],eax
c001c9bc:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001c9c4:	83 ec 0c             	sub    esp,0xc
c001c9c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c9cb:	e8 04 2b ff ff       	call   c000f4d4 <malloc>
c001c9d0:	83 c4 10             	add    esp,0x10
c001c9d3:	89 c3                	mov    ebx,eax
c001c9d5:	83 ec 08             	sub    esp,0x8
c001c9d8:	6a 00                	push   0x0
c001c9da:	53                   	push   ebx
c001c9db:	e8 f4 58 ff ff       	call   c00122d4 <VAS::VAS(bool)>
c001c9e0:	83 c4 10             	add    esp,0x10
c001c9e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9e7:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001c9ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9f1:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001c9fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9ff:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ca03:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001ca09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca0d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ca13:	85 c0                	test   eax,eax
c001ca15:	74 42                	je     c001ca59 <Process::Process(char const*, Process*, char**)+0x10f>
c001ca17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca1b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ca21:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001ca27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca2b:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001ca31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca35:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ca3b:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001ca41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca45:	05 0c 01 00 00       	add    eax,0x10c
c001ca4a:	83 ec 08             	sub    esp,0x8
c001ca4d:	52                   	push   edx
c001ca4e:	50                   	push   eax
c001ca4f:	e8 d6 3c fe ff       	call   c000072a <strcpy>
c001ca54:	83 c4 10             	add    esp,0x10
c001ca57:	eb 63                	jmp    c001cabc <Process::Process(char const*, Process*, char**)+0x172>
c001ca59:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001ca61:	83 ec 0c             	sub    esp,0xc
c001ca64:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ca68:	e8 67 2a ff ff       	call   c000f4d4 <malloc>
c001ca6d:	83 c4 10             	add    esp,0x10
c001ca70:	89 c3                	mov    ebx,eax
c001ca72:	83 ec 08             	sub    esp,0x8
c001ca75:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ca79:	53                   	push   ebx
c001ca7a:	e8 e7 42 ff ff       	call   c0010d66 <VgaText::VgaText(char const*)>
c001ca7f:	83 c4 10             	add    esp,0x10
c001ca82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca86:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001ca8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca90:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ca96:	83 ec 0c             	sub    esp,0xc
c001ca99:	50                   	push   eax
c001ca9a:	e8 50 36 ff ff       	call   c00100ef <addToTerminalCycle(VgaText*)>
c001ca9f:	83 c4 10             	add    esp,0x10
c001caa2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001caa6:	05 0c 01 00 00       	add    eax,0x10c
c001caab:	83 ec 08             	sub    esp,0x8
c001caae:	68 64 a7 02 c0       	push   0xc002a764
c001cab3:	50                   	push   eax
c001cab4:	e8 71 3c fe ff       	call   c000072a <strcpy>
c001cab9:	83 c4 10             	add    esp,0x10
c001cabc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cac0:	83 c0 0c             	add    eax,0xc
c001cac3:	83 ec 08             	sub    esp,0x8
c001cac6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001caca:	50                   	push   eax
c001cacb:	e8 5a 3c fe ff       	call   c000072a <strcpy>
c001cad0:	83 c4 10             	add    esp,0x10
c001cad3:	83 ec 08             	sub    esp,0x8
c001cad6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001cada:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cade:	e8 0d fe ff ff       	call   c001c8f0 <Process::addArgs(char**)>
c001cae3:	83 c4 10             	add    esp,0x10
c001cae6:	83 ec 08             	sub    esp,0x8
c001cae9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001caed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001caf1:	e8 58 ee ff ff       	call   c001b94e <Thr::loadProgramIntoMemory(Process*, char const*)>
c001caf6:	83 c4 10             	add    esp,0x10
c001caf9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001cafd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001cb01:	83 f0 01             	xor    eax,0x1
c001cb04:	88 c2                	mov    dl,al
c001cb06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb0a:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001cb10:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001cb15:	83 ec 08             	sub    esp,0x8
c001cb18:	50                   	push   eax
c001cb19:	68 60 a8 02 c0       	push   0xc002a860
c001cb1e:	e8 2e 5c ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001cb23:	83 c4 10             	add    esp,0x10
c001cb26:	90                   	nop
c001cb27:	83 c4 14             	add    esp,0x14
c001cb2a:	5b                   	pop    ebx
c001cb2b:	5e                   	pop    esi
c001cb2c:	c3                   	ret    
c001cb2d:	90                   	nop

c001cb2e <Process::Process(bool, char const*, Process*, char**)>:
c001cb2e:	56                   	push   esi
c001cb2f:	53                   	push   ebx
c001cb30:	83 ec 24             	sub    esp,0x24
c001cb33:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cb37:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001cb3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cb3f:	05 0c 02 00 00       	add    eax,0x20c
c001cb44:	bb 07 00 00 00       	mov    ebx,0x7
c001cb49:	89 c6                	mov    esi,eax
c001cb4b:	85 db                	test   ebx,ebx
c001cb4d:	78 12                	js     c001cb61 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001cb4f:	83 ec 0c             	sub    esp,0xc
c001cb52:	56                   	push   esi
c001cb53:	e8 da aa 00 00       	call   c0027632 <ThreadControlBlock::ThreadControlBlock()>
c001cb58:	83 c4 10             	add    esp,0x10
c001cb5b:	83 c6 63             	add    esi,0x63
c001cb5e:	4b                   	dec    ebx
c001cb5f:	eb ea                	jmp    c001cb4b <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001cb61:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cb65:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001cb6c:	83 ec 0c             	sub    esp,0xc
c001cb6f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cb73:	e8 44 cb ff ff       	call   c00196bc <Krnl::newProcessEnv(Process*)>
c001cb78:	83 c4 10             	add    esp,0x10
c001cb7b:	89 c2                	mov    edx,eax
c001cb7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cb81:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001cb87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cb8b:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001cb94:	a1 b0 be 02 c0       	mov    eax,ds:0xc002beb0
c001cb99:	8d 50 01             	lea    edx,[eax+0x1]
c001cb9c:	89 15 b0 be 02 c0    	mov    DWORD PTR ds:0xc002beb0,edx
c001cba2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cba6:	89 02                	mov    DWORD PTR [edx],eax
c001cba8:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001cbb0:	83 ec 0c             	sub    esp,0xc
c001cbb3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cbb7:	e8 18 29 ff ff       	call   c000f4d4 <malloc>
c001cbbc:	83 c4 10             	add    esp,0x10
c001cbbf:	89 c3                	mov    ebx,eax
c001cbc1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001cbc6:	83 ec 08             	sub    esp,0x8
c001cbc9:	50                   	push   eax
c001cbca:	53                   	push   ebx
c001cbcb:	e8 04 57 ff ff       	call   c00122d4 <VAS::VAS(bool)>
c001cbd0:	83 c4 10             	add    esp,0x10
c001cbd3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cbd7:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001cbdd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cbe1:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001cbeb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cbef:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cbf3:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001cbf9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cbfd:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cc03:	85 c0                	test   eax,eax
c001cc05:	74 42                	je     c001cc49 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001cc07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc0b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cc11:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001cc17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc1b:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001cc21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc25:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cc2b:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001cc31:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc35:	05 0c 01 00 00       	add    eax,0x10c
c001cc3a:	83 ec 08             	sub    esp,0x8
c001cc3d:	52                   	push   edx
c001cc3e:	50                   	push   eax
c001cc3f:	e8 e6 3a fe ff       	call   c000072a <strcpy>
c001cc44:	83 c4 10             	add    esp,0x10
c001cc47:	eb 63                	jmp    c001ccac <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001cc49:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001cc51:	83 ec 0c             	sub    esp,0xc
c001cc54:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cc58:	e8 77 28 ff ff       	call   c000f4d4 <malloc>
c001cc5d:	83 c4 10             	add    esp,0x10
c001cc60:	89 c3                	mov    ebx,eax
c001cc62:	83 ec 08             	sub    esp,0x8
c001cc65:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001cc69:	53                   	push   ebx
c001cc6a:	e8 f7 40 ff ff       	call   c0010d66 <VgaText::VgaText(char const*)>
c001cc6f:	83 c4 10             	add    esp,0x10
c001cc72:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc76:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001cc7c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc80:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001cc86:	83 ec 0c             	sub    esp,0xc
c001cc89:	50                   	push   eax
c001cc8a:	e8 60 34 ff ff       	call   c00100ef <addToTerminalCycle(VgaText*)>
c001cc8f:	83 c4 10             	add    esp,0x10
c001cc92:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc96:	05 0c 01 00 00       	add    eax,0x10c
c001cc9b:	83 ec 08             	sub    esp,0x8
c001cc9e:	68 64 a7 02 c0       	push   0xc002a764
c001cca3:	50                   	push   eax
c001cca4:	e8 81 3a fe ff       	call   c000072a <strcpy>
c001cca9:	83 c4 10             	add    esp,0x10
c001ccac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ccb0:	83 c0 0c             	add    eax,0xc
c001ccb3:	83 ec 08             	sub    esp,0x8
c001ccb6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001ccba:	50                   	push   eax
c001ccbb:	e8 6a 3a fe ff       	call   c000072a <strcpy>
c001ccc0:	83 c4 10             	add    esp,0x10
c001ccc3:	83 ec 08             	sub    esp,0x8
c001ccc6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ccca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ccce:	e8 1d fc ff ff       	call   c001c8f0 <Process::addArgs(char**)>
c001ccd3:	83 c4 10             	add    esp,0x10
c001ccd6:	90                   	nop
c001ccd7:	83 c4 24             	add    esp,0x24
c001ccda:	5b                   	pop    ebx
c001ccdb:	5e                   	pop    esi
c001ccdc:	c3                   	ret    

c001ccdd <disableIRQs()>:
c001ccdd:	fa                   	cli    
c001ccde:	ff 05 2c de 02 c0    	inc    DWORD PTR ds:0xc002de2c
c001cce4:	c3                   	ret    

c001cce5 <getIRQNestingLevel()>:
c001cce5:	a1 2c de 02 c0       	mov    eax,ds:0xc002de2c
c001ccea:	c3                   	ret    

c001cceb <enableIRQs()>:
c001cceb:	a1 2c de 02 c0       	mov    eax,ds:0xc002de2c
c001ccf0:	48                   	dec    eax
c001ccf1:	a3 2c de 02 c0       	mov    ds:0xc002de2c,eax
c001ccf6:	75 01                	jne    c001ccf9 <enableIRQs()+0xe>
c001ccf8:	fb                   	sti    
c001ccf9:	c3                   	ret    

c001ccfa <lockScheduler()>:
c001ccfa:	eb e1                	jmp    c001ccdd <disableIRQs()>

c001ccfc <unlockScheduler()>:
c001ccfc:	eb ed                	jmp    c001cceb <enableIRQs()>

c001ccfe <userModeEntryPoint(void*)>:
c001ccfe:	83 ec 0c             	sub    esp,0xc
c001cd01:	e8 f6 ff ff ff       	call   c001ccfc <unlockScheduler()>
c001cd06:	fb                   	sti    
c001cd07:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd0c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cd0f:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001cd15:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cd19:	83 c4 0c             	add    esp,0xc
c001cd1c:	e9 be 35 fe ff       	jmp    c00002df <goToUsermode>

c001cd21 <lockStuff()>:
c001cd21:	e8 b7 ff ff ff       	call   c001ccdd <disableIRQs()>
c001cd26:	ff 05 28 de 02 c0    	inc    DWORD PTR ds:0xc002de28
c001cd2c:	c3                   	ret    

c001cd2d <taskStartupFunction>:
c001cd2d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd32:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001cd35:	c3                   	ret    

c001cd36 <updateTimeUsed()>:
c001cd36:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c001cd3b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001cd41:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001cd48:	74 50                	je     c001cd9a <updateTimeUsed()+0x64>
c001cd4a:	57                   	push   edi
c001cd4b:	56                   	push   esi
c001cd4c:	53                   	push   ebx
c001cd4d:	0f 31                	rdtsc  
c001cd4f:	89 c1                	mov    ecx,eax
c001cd51:	a3 68 de 02 c0       	mov    ds:0xc002de68,eax
c001cd56:	2b 0d 58 de 02 c0    	sub    ecx,DWORD PTR ds:0xc002de58
c001cd5c:	89 d3                	mov    ebx,edx
c001cd5e:	89 0d 60 de 02 c0    	mov    DWORD PTR ds:0xc002de60,ecx
c001cd64:	1b 1d 5c de 02 c0    	sbb    ebx,DWORD PTR ds:0xc002de5c
c001cd6a:	a3 58 de 02 c0       	mov    ds:0xc002de58,eax
c001cd6f:	89 1d 64 de 02 c0    	mov    DWORD PTR ds:0xc002de64,ebx
c001cd75:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd7a:	89 15 6c de 02 c0    	mov    DWORD PTR ds:0xc002de6c,edx
c001cd80:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001cd83:	89 15 5c de 02 c0    	mov    DWORD PTR ds:0xc002de5c,edx
c001cd89:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001cd8c:	01 f1                	add    ecx,esi
c001cd8e:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001cd91:	11 fb                	adc    ebx,edi
c001cd93:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001cd96:	5b                   	pop    ebx
c001cd97:	5e                   	pop    esi
c001cd98:	5f                   	pop    edi
c001cd99:	c3                   	ret    
c001cd9a:	c3                   	ret    

c001cd9b <switchToThread(ThreadControlBlock*)>:
c001cd9b:	53                   	push   ebx
c001cd9c:	83 ec 08             	sub    esp,0x8
c001cd9f:	a1 28 de 02 c0       	mov    eax,ds:0xc002de28
c001cda4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cda8:	85 c0                	test   eax,eax
c001cdaa:	75 30                	jne    c001cddc <switchToThread(ThreadControlBlock*)+0x41>
c001cdac:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001cdaf:	3c ff                	cmp    al,0xff
c001cdb1:	74 25                	je     c001cdd8 <switchToThread(ThreadControlBlock*)+0x3d>
c001cdb3:	0f b6 d0             	movzx  edx,al
c001cdb6:	b8 84 03 00 00       	mov    eax,0x384
c001cdbb:	29 d0                	sub    eax,edx
c001cdbd:	c1 e0 10             	shl    eax,0x10
c001cdc0:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001cdc3:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001cdc6:	e8 6b ff ff ff       	call   c001cd36 <updateTimeUsed()>
c001cdcb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001cdcf:	83 c4 08             	add    esp,0x8
c001cdd2:	5b                   	pop    ebx
c001cdd3:	e9 3f 35 fe ff       	jmp    c0000317 <switchToThreadASM>
c001cdd8:	31 c0                	xor    eax,eax
c001cdda:	eb e7                	jmp    c001cdc3 <switchToThread(ThreadControlBlock*)+0x28>
c001cddc:	c7 05 24 de 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002de24,0x1
c001cde6:	83 c4 08             	add    esp,0x8
c001cde9:	5b                   	pop    ebx
c001cdea:	c3                   	ret    
c001cdeb:	90                   	nop

c001cdec <Semaphore::Semaphore(int)>:
c001cdec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cdf0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cdf4:	89 10                	mov    DWORD PTR [eax],edx
c001cdf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cdfa:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ce01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce05:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ce0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce10:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ce17:	90                   	nop
c001ce18:	c3                   	ret    
c001ce19:	90                   	nop

c001ce1a <Mutex::Mutex()>:
c001ce1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce1e:	6a 01                	push   0x1
c001ce20:	50                   	push   eax
c001ce21:	e8 c6 ff ff ff       	call   c001cdec <Semaphore::Semaphore(int)>
c001ce26:	83 c4 08             	add    esp,0x8
c001ce29:	90                   	nop
c001ce2a:	c3                   	ret    
c001ce2b:	90                   	nop

c001ce2c <Process::createThread(void (*)(void*), void*, int)>:
c001ce2c:	55                   	push   ebp
c001ce2d:	31 c9                	xor    ecx,ecx
c001ce2f:	57                   	push   edi
c001ce30:	56                   	push   esi
c001ce31:	53                   	push   ebx
c001ce32:	83 ec 1c             	sub    esp,0x1c
c001ce35:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ce39:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001ce40:	89 f2                	mov    edx,esi
c001ce42:	0f b7 c2             	movzx  eax,dx
c001ce45:	83 e2 01             	and    edx,0x1
c001ce48:	74 14                	je     c001ce5e <Process::createThread(void (*)(void*), void*, int)+0x32>
c001ce4a:	d1 f8                	sar    eax,1
c001ce4c:	41                   	inc    ecx
c001ce4d:	89 c2                	mov    edx,eax
c001ce4f:	83 f9 10             	cmp    ecx,0x10
c001ce52:	75 ee                	jne    c001ce42 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001ce54:	83 c4 1c             	add    esp,0x1c
c001ce57:	31 c0                	xor    eax,eax
c001ce59:	5b                   	pop    ebx
c001ce5a:	5e                   	pop    esi
c001ce5b:	5f                   	pop    edi
c001ce5c:	5d                   	pop    ebp
c001ce5d:	c3                   	ret    
c001ce5e:	83 ec 08             	sub    esp,0x8
c001ce61:	b8 01 00 00 00       	mov    eax,0x1
c001ce66:	d3 e0                	shl    eax,cl
c001ce68:	09 c6                	or     esi,eax
c001ce6a:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001ce70:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001ce77:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001ce7a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001ce7d:	01 ce                	add    esi,ecx
c001ce7f:	89 f0                	mov    eax,esi
c001ce81:	c1 e0 05             	shl    eax,0x5
c001ce84:	01 c6                	add    esi,eax
c001ce86:	8d 04 33             	lea    eax,[ebx+esi*1]
c001ce89:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001ce8f:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001ce95:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001ce99:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001ce9f:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001cea5:	89 ca                	mov    edx,ecx
c001cea7:	f7 da                	neg    edx
c001cea9:	c1 e2 15             	shl    edx,0x15
c001ceac:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001ceb2:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001ceb8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001cebc:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001cec6:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001cecc:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001ced0:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001ced6:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001cee0:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001ceea:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001cef1:	50                   	push   eax
c001cef2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cef6:	68 48 de 02 c0       	push   0xc002de48
c001cefb:	e8 c0 a5 00 00       	call   c00274c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001cf00:	83 c4 10             	add    esp,0x10
c001cf03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cf07:	83 c4 1c             	add    esp,0x1c
c001cf0a:	5b                   	pop    ebx
c001cf0b:	5e                   	pop    esi
c001cf0c:	5f                   	pop    edi
c001cf0d:	5d                   	pop    ebp
c001cf0e:	c3                   	ret    
c001cf0f:	90                   	nop

c001cf10 <Process::createUserThread()>:
c001cf10:	83 ec 0c             	sub    esp,0xc
c001cf13:	68 80 00 00 00       	push   0x80
c001cf18:	6a 00                	push   0x0
c001cf1a:	68 fe cc 01 c0       	push   0xc001ccfe
c001cf1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf23:	e8 04 ff ff ff       	call   c001ce2c <Process::createThread(void (*)(void*), void*, int)>
c001cf28:	83 c4 1c             	add    esp,0x1c
c001cf2b:	c3                   	ret    

c001cf2c <setupMultitasking(void (*)())>:
c001cf2c:	56                   	push   esi
c001cf2d:	53                   	push   ebx
c001cf2e:	53                   	push   ebx
c001cf2f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cf33:	eb 10                	jmp    c001cf45 <setupMultitasking(void (*)())+0x19>
c001cf35:	83 ec 0c             	sub    esp,0xc
c001cf38:	68 48 de 02 c0       	push   0xc002de48
c001cf3d:	e8 d0 a4 00 00       	call   c0027412 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001cf42:	83 c4 10             	add    esp,0x10
c001cf45:	83 ec 0c             	sub    esp,0xc
c001cf48:	68 48 de 02 c0       	push   0xc002de48
c001cf4d:	e8 a4 a4 00 00       	call   c00273f6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001cf52:	83 c4 10             	add    esp,0x10
c001cf55:	84 c0                	test   al,al
c001cf57:	74 dc                	je     c001cf35 <setupMultitasking(void (*)())+0x9>
c001cf59:	83 ec 0c             	sub    esp,0xc
c001cf5c:	68 3f 07 00 00       	push   0x73f
c001cf61:	e8 6e 25 ff ff       	call   c000f4d4 <malloc>
c001cf66:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001cf6d:	89 c3                	mov    ebx,eax
c001cf6f:	6a 00                	push   0x0
c001cf71:	68 68 a7 02 c0       	push   0xc002a768
c001cf76:	6a 01                	push   0x1
c001cf78:	50                   	push   eax
c001cf79:	e8 b0 fb ff ff       	call   c001cb2e <Process::Process(bool, char const*, Process*, char**)>
c001cf7e:	83 c4 18             	add    esp,0x18
c001cf81:	89 1d 54 de 02 c0    	mov    DWORD PTR ds:0xc002de54,ebx
c001cf87:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001cf8d:	68 88 a8 02 c0       	push   0xc002a888
c001cf92:	e8 ba 57 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001cf97:	58                   	pop    eax
c001cf98:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001cf9e:	e8 38 39 ff ff       	call   c00108db <setActiveTerminal(VgaText*)>
c001cfa3:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001cfab:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001cfb1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001cfb4:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001cfbe:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001cfc4:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001cfca:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001cfd4:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001cfde:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001cfe8:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001cfee:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001cff4:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001cffe:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001d004:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001d00e:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001d014:	5a                   	pop    edx
c001d015:	59                   	pop    ecx
c001d016:	68 64 a7 02 c0       	push   0xc002a764
c001d01b:	50                   	push   eax
c001d01c:	e8 09 37 fe ff       	call   c000072a <strcpy>
c001d021:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001d028:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d02c:	83 c4 14             	add    esp,0x14
c001d02f:	5b                   	pop    ebx
c001d030:	5e                   	pop    esi
c001d031:	e9 d3 32 fe ff       	jmp    c0000309 <switchToThreadASMFirstTime>

c001d036 <schedule()>:
c001d036:	a1 28 de 02 c0       	mov    eax,ds:0xc002de28
c001d03b:	85 c0                	test   eax,eax
c001d03d:	74 0b                	je     c001d04a <schedule()+0x14>
c001d03f:	c7 05 24 de 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002de24,0x1
c001d049:	c3                   	ret    
c001d04a:	53                   	push   ebx
c001d04b:	83 ec 14             	sub    esp,0x14
c001d04e:	68 48 de 02 c0       	push   0xc002de48
c001d053:	e8 9e a3 00 00       	call   c00273f6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d058:	83 c4 10             	add    esp,0x10
c001d05b:	84 c0                	test   al,al
c001d05d:	75 38                	jne    c001d097 <schedule()+0x61>
c001d05f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d064:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d067:	4a                   	dec    edx
c001d068:	74 32                	je     c001d09c <schedule()+0x66>
c001d06a:	83 ec 0c             	sub    esp,0xc
c001d06d:	68 48 de 02 c0       	push   0xc002de48
c001d072:	e8 77 a3 00 00       	call   c00273ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d077:	c7 04 24 48 de 02 c0 	mov    DWORD PTR [esp],0xc002de48
c001d07e:	89 c3                	mov    ebx,eax
c001d080:	e8 8d a3 00 00       	call   c0027412 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d085:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001d08c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d08f:	e8 07 fd ff ff       	call   c001cd9b <switchToThread(ThreadControlBlock*)>
c001d094:	83 c4 10             	add    esp,0x10
c001d097:	83 c4 08             	add    esp,0x8
c001d09a:	5b                   	pop    ebx
c001d09b:	c3                   	ret    
c001d09c:	83 ec 08             	sub    esp,0x8
c001d09f:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001d0a6:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d0ac:	68 48 de 02 c0       	push   0xc002de48
c001d0b1:	e8 0a a4 00 00       	call   c00274c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d0b6:	83 c4 10             	add    esp,0x10
c001d0b9:	eb af                	jmp    c001d06a <schedule()+0x34>

c001d0bb <unlockStuff()>:
c001d0bb:	a1 28 de 02 c0       	mov    eax,ds:0xc002de28
c001d0c0:	48                   	dec    eax
c001d0c1:	a3 28 de 02 c0       	mov    ds:0xc002de28,eax
c001d0c6:	75 09                	jne    c001d0d1 <unlockStuff()+0x16>
c001d0c8:	a1 24 de 02 c0       	mov    eax,ds:0xc002de24
c001d0cd:	85 c0                	test   eax,eax
c001d0cf:	75 05                	jne    c001d0d6 <unlockStuff()+0x1b>
c001d0d1:	e9 15 fc ff ff       	jmp    c001cceb <enableIRQs()>
c001d0d6:	83 ec 0c             	sub    esp,0xc
c001d0d9:	c7 05 24 de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002de24,0x0
c001d0e3:	e8 4e ff ff ff       	call   c001d036 <schedule()>
c001d0e8:	83 c4 0c             	add    esp,0xc
c001d0eb:	e9 fb fb ff ff       	jmp    c001cceb <enableIRQs()>

c001d0f0 <Semaphore::tryAcquire()>:
c001d0f0:	83 ec 0c             	sub    esp,0xc
c001d0f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0f7:	e8 25 fc ff ff       	call   c001cd21 <lockStuff()>
c001d0fc:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d0ff:	3b 10                	cmp    edx,DWORD PTR [eax]
c001d101:	7c 0b                	jl     c001d10e <Semaphore::tryAcquire()+0x1e>
c001d103:	e8 b3 ff ff ff       	call   c001d0bb <unlockStuff()>
c001d108:	31 c0                	xor    eax,eax
c001d10a:	83 c4 0c             	add    esp,0xc
c001d10d:	c3                   	ret    
c001d10e:	42                   	inc    edx
c001d10f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d112:	e8 a4 ff ff ff       	call   c001d0bb <unlockStuff()>
c001d117:	b0 01                	mov    al,0x1
c001d119:	83 c4 0c             	add    esp,0xc
c001d11c:	c3                   	ret    
c001d11d:	90                   	nop

c001d11e <Semaphore::assertLocked(char const*)>:
c001d11e:	83 ec 0c             	sub    esp,0xc
c001d121:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d125:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d129:	e8 f3 fb ff ff       	call   c001cd21 <lockStuff()>
c001d12e:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d130:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001d133:	7c 05                	jl     c001d13a <Semaphore::assertLocked(char const*)+0x1c>
c001d135:	83 c4 0c             	add    esp,0xc
c001d138:	eb 81                	jmp    c001d0bb <unlockStuff()>
c001d13a:	83 ec 0c             	sub    esp,0xc
c001d13d:	52                   	push   edx
c001d13e:	e8 28 c7 ff ff       	call   c001986b <Krnl::panic(char const*)>
c001d143:	83 c4 10             	add    esp,0x10
c001d146:	83 c4 0c             	add    esp,0xc
c001d149:	e9 6d ff ff ff       	jmp    c001d0bb <unlockStuff()>

c001d14e <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001d14e:	83 ec 0c             	sub    esp,0xc
c001d151:	e8 8f fb ff ff       	call   c001cce5 <getIRQNestingLevel()>
c001d156:	83 ec 08             	sub    esp,0x8
c001d159:	50                   	push   eax
c001d15a:	68 bc a8 02 c0       	push   0xc002a8bc
c001d15f:	e8 ed 55 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001d164:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d168:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d16d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d170:	e8 c1 fe ff ff       	call   c001d036 <schedule()>
c001d175:	e8 82 fb ff ff       	call   c001ccfc <unlockScheduler()>
c001d17a:	e8 66 fb ff ff       	call   c001cce5 <getIRQNestingLevel()>
c001d17f:	5a                   	pop    edx
c001d180:	59                   	pop    ecx
c001d181:	50                   	push   eax
c001d182:	68 f0 a8 02 c0       	push   0xc002a8f0
c001d187:	e8 c5 55 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001d18c:	83 c4 1c             	add    esp,0x1c
c001d18f:	c3                   	ret    

c001d190 <blockTask(TaskState)>:
c001d190:	83 ec 0c             	sub    esp,0xc
c001d193:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d197:	e8 5e fb ff ff       	call   c001ccfa <lockScheduler()>
c001d19c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d1a1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d1a4:	e8 8d fe ff ff       	call   c001d036 <schedule()>
c001d1a9:	83 c4 0c             	add    esp,0xc
c001d1ac:	e9 4b fb ff ff       	jmp    c001ccfc <unlockScheduler()>

c001d1b1 <waitTask(int, int*, int)>:
c001d1b1:	83 ec 18             	sub    esp,0x18
c001d1b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d1b9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d1bd:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001d1c0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d1c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d1c9:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001d1cc:	6a 07                	push   0x7
c001d1ce:	e8 bd ff ff ff       	call   c001d190 <blockTask(TaskState)>
c001d1d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d1d8:	83 c4 10             	add    esp,0x10
c001d1db:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001d1de:	85 d2                	test   edx,edx
c001d1e0:	74 0a                	je     c001d1ec <waitTask(int, int*, int)+0x3b>
c001d1e2:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001d1e5:	89 02                	mov    DWORD PTR [edx],eax
c001d1e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d1ec:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001d1ef:	83 c4 0c             	add    esp,0xc
c001d1f2:	c3                   	ret    

c001d1f3 <nanoSleepUntil(unsigned long long)>:
c001d1f3:	83 ec 0c             	sub    esp,0xc
c001d1f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1fa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d1fe:	3b 05 90 cf 02 c0    	cmp    eax,DWORD PTR ds:0xc002cf90
c001d204:	89 d1                	mov    ecx,edx
c001d206:	1b 0d 94 cf 02 c0    	sbb    ecx,DWORD PTR ds:0xc002cf94
c001d20c:	73 04                	jae    c001d212 <nanoSleepUntil(unsigned long long)+0x1f>
c001d20e:	83 c4 0c             	add    esp,0xc
c001d211:	c3                   	ret    
c001d212:	e8 0a fb ff ff       	call   c001cd21 <lockStuff()>
c001d217:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d21d:	83 ec 08             	sub    esp,0x8
c001d220:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001d223:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001d226:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d22c:	68 3c de 02 c0       	push   0xc002de3c
c001d231:	e8 8a a2 00 00       	call   c00274c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d236:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001d23d:	e8 4e ff ff ff       	call   c001d190 <blockTask(TaskState)>
c001d242:	83 c4 1c             	add    esp,0x1c
c001d245:	e9 71 fe ff ff       	jmp    c001d0bb <unlockStuff()>

c001d24a <nanoSleep(unsigned long long)>:
c001d24a:	a1 90 cf 02 c0       	mov    eax,ds:0xc002cf90
c001d24f:	8b 15 94 cf 02 c0    	mov    edx,DWORD PTR ds:0xc002cf94
c001d255:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001d259:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001d25d:	eb 94                	jmp    c001d1f3 <nanoSleepUntil(unsigned long long)>

c001d25f <sleep(unsigned long long)>:
c001d25f:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001d267:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001d26c:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001d270:	01 ca                	add    edx,ecx
c001d272:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d276:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d27a:	eb ce                	jmp    c001d24a <nanoSleep(unsigned long long)>

c001d27c <Semaphore::acquire()>:
c001d27c:	83 ec 0c             	sub    esp,0xc
c001d27f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d283:	e8 99 fa ff ff       	call   c001cd21 <lockStuff()>
c001d288:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d28b:	3b 10                	cmp    edx,DWORD PTR [eax]
c001d28d:	7d 0c                	jge    c001d29b <Semaphore::acquire()+0x1f>
c001d28f:	42                   	inc    edx
c001d290:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d293:	83 c4 0c             	add    esp,0xc
c001d296:	e9 20 fe ff ff       	jmp    c001d0bb <unlockStuff()>
c001d29b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d2a1:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001d2a8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d2ab:	85 d2                	test   edx,edx
c001d2ad:	74 2a                	je     c001d2d9 <Semaphore::acquire()+0x5d>
c001d2af:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001d2b2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d2b8:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001d2bb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d2c1:	83 ec 0c             	sub    esp,0xc
c001d2c4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d2c7:	6a 05                	push   0x5
c001d2c9:	e8 c2 fe ff ff       	call   c001d190 <blockTask(TaskState)>
c001d2ce:	83 c4 10             	add    esp,0x10
c001d2d1:	83 c4 0c             	add    esp,0xc
c001d2d4:	e9 e2 fd ff ff       	jmp    c001d0bb <unlockStuff()>
c001d2d9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d2df:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d2e2:	eb d7                	jmp    c001d2bb <Semaphore::acquire()+0x3f>

c001d2e4 <taskReturned>:
c001d2e4:	83 ec 18             	sub    esp,0x18
c001d2e7:	68 24 a9 02 c0       	push   0xc002a924
c001d2ec:	e8 7a c5 ff ff       	call   c001986b <Krnl::panic(char const*)>
c001d2f1:	83 c4 10             	add    esp,0x10
c001d2f4:	83 ec 0c             	sub    esp,0xc
c001d2f7:	6a 02                	push   0x2
c001d2f9:	e8 92 fe ff ff       	call   c001d190 <blockTask(TaskState)>
c001d2fe:	e8 f7 f9 ff ff       	call   c001ccfa <lockScheduler()>
c001d303:	e8 2e fd ff ff       	call   c001d036 <schedule()>
c001d308:	e8 ef f9 ff ff       	call   c001ccfc <unlockScheduler()>
c001d30d:	83 c4 10             	add    esp,0x10
c001d310:	eb e2                	jmp    c001d2f4 <taskReturned+0x10>

c001d312 <unblockTask(ThreadControlBlock*)>:
c001d312:	53                   	push   ebx
c001d313:	83 ec 08             	sub    esp,0x8
c001d316:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d31a:	e8 db f9 ff ff       	call   c001ccfa <lockScheduler()>
c001d31f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001d322:	85 c0                	test   eax,eax
c001d324:	74 5c                	je     c001d382 <unblockTask(ThreadControlBlock*)+0x70>
c001d326:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001d329:	48                   	dec    eax
c001d32a:	74 31                	je     c001d35d <unblockTask(ThreadControlBlock*)+0x4b>
c001d32c:	83 ec 0c             	sub    esp,0xc
c001d32f:	68 48 de 02 c0       	push   0xc002de48
c001d334:	e8 b5 a0 00 00       	call   c00273ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d339:	83 c4 10             	add    esp,0x10
c001d33c:	85 c0                	test   eax,eax
c001d33e:	75 17                	jne    c001d357 <unblockTask(ThreadControlBlock*)+0x45>
c001d340:	eb 65                	jmp    c001d3a7 <unblockTask(ThreadControlBlock*)+0x95>
c001d342:	83 ec 08             	sub    esp,0x8
c001d345:	50                   	push   eax
c001d346:	68 48 de 02 c0       	push   0xc002de48
c001d34b:	e8 78 a3 00 00       	call   c00276c8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001d350:	83 c4 10             	add    esp,0x10
c001d353:	85 c0                	test   eax,eax
c001d355:	74 50                	je     c001d3a7 <unblockTask(ThreadControlBlock*)+0x95>
c001d357:	39 c3                	cmp    ebx,eax
c001d359:	75 e7                	jne    c001d342 <unblockTask(ThreadControlBlock*)+0x30>
c001d35b:	eb 1c                	jmp    c001d379 <unblockTask(ThreadControlBlock*)+0x67>
c001d35d:	83 ec 0c             	sub    esp,0xc
c001d360:	68 14 aa 02 c0       	push   0xc002aa14
c001d365:	e8 e7 53 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001d36a:	c7 04 24 a0 a9 02 c0 	mov    DWORD PTR [esp],0xc002a9a0
c001d371:	e8 db 53 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001d376:	83 c4 10             	add    esp,0x10
c001d379:	83 c4 08             	add    esp,0x8
c001d37c:	5b                   	pop    ebx
c001d37d:	e9 7a f9 ff ff       	jmp    c001ccfc <unlockScheduler()>
c001d382:	83 ec 0c             	sub    esp,0xc
c001d385:	68 58 a9 02 c0       	push   0xc002a958
c001d38a:	e8 c2 53 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001d38f:	c7 04 24 a0 a9 02 c0 	mov    DWORD PTR [esp],0xc002a9a0
c001d396:	e8 b6 53 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001d39b:	83 c4 10             	add    esp,0x10
c001d39e:	83 c4 08             	add    esp,0x8
c001d3a1:	5b                   	pop    ebx
c001d3a2:	e9 55 f9 ff ff       	jmp    c001ccfc <unlockScheduler()>
c001d3a7:	83 ec 08             	sub    esp,0x8
c001d3aa:	53                   	push   ebx
c001d3ab:	68 48 de 02 c0       	push   0xc002de48
c001d3b0:	e8 0b a1 00 00       	call   c00274c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d3b5:	83 c4 10             	add    esp,0x10
c001d3b8:	83 c4 08             	add    esp,0x8
c001d3bb:	5b                   	pop    ebx
c001d3bc:	e9 3b f9 ff ff       	jmp    c001ccfc <unlockScheduler()>

c001d3c1 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001d3c1:	55                   	push   ebp
c001d3c2:	57                   	push   edi
c001d3c3:	56                   	push   esi
c001d3c4:	53                   	push   ebx
c001d3c5:	83 ec 1c             	sub    esp,0x1c
c001d3c8:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d3cc:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d3cf:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001d3d5:	85 ff                	test   edi,edi
c001d3d7:	7e 20                	jle    c001d3f9 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001d3d9:	31 f6                	xor    esi,esi
c001d3db:	83 ec 0c             	sub    esp,0xc
c001d3de:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001d3e5:	46                   	inc    esi
c001d3e6:	e8 f9 20 ff ff       	call   c000f4e4 <free>
c001d3eb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d3ee:	83 c4 10             	add    esp,0x10
c001d3f1:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001d3f7:	7f e2                	jg     c001d3db <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001d3f9:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d403:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001d408:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001d40b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001d40e:	d3 c0                	rol    eax,cl
c001d410:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001d417:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d41a:	89 f7                	mov    edi,esi
c001d41c:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001d424:	0f 85 74 01 00 00    	jne    c001d59e <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001d42a:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001d430:	85 ed                	test   ebp,ebp
c001d432:	74 1b                	je     c001d44f <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001d434:	83 ec 0c             	sub    esp,0xc
c001d437:	55                   	push   ebp
c001d438:	e8 9b c1 ff ff       	call   c00195d8 <EnvVarContainer::~EnvVarContainer()>
c001d43d:	59                   	pop    ecx
c001d43e:	5e                   	pop    esi
c001d43f:	6a 0c                	push   0xc
c001d441:	55                   	push   ebp
c001d442:	e8 2a 52 ff ff       	call   c0012671 <operator delete(void*, unsigned long)>
c001d447:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d44a:	83 c4 10             	add    esp,0x10
c001d44d:	89 f7                	mov    edi,esi
c001d44f:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d455:	85 c0                	test   eax,eax
c001d457:	0f 84 aa 00 00 00    	je     c001d507 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001d45d:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001d460:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d464:	31 c9                	xor    ecx,ecx
c001d466:	eb 10                	jmp    c001d478 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001d468:	41                   	inc    ecx
c001d469:	83 f9 10             	cmp    ecx,0x10
c001d46c:	0f 84 95 00 00 00    	je     c001d507 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001d472:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d478:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001d47f:	d3 fa                	sar    edx,cl
c001d481:	83 e2 01             	and    edx,0x1
c001d484:	74 e2                	je     c001d468 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d486:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001d489:	01 ca                	add    edx,ecx
c001d48b:	89 d5                	mov    ebp,edx
c001d48d:	c1 e5 05             	shl    ebp,0x5
c001d490:	01 ea                	add    edx,ebp
c001d492:	01 d0                	add    eax,edx
c001d494:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001d49a:	83 fd 07             	cmp    ebp,0x7
c001d49d:	75 c9                	jne    c001d468 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d49f:	05 40 02 00 00       	add    eax,0x240
c001d4a4:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001d4a7:	83 fd ff             	cmp    ebp,0xffffffff
c001d4aa:	0f 8c 08 01 00 00    	jl     c001d5b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001d4b0:	0f 84 b9 01 00 00    	je     c001d66f <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001d4b6:	85 ed                	test   ebp,ebp
c001d4b8:	0f 84 a0 01 00 00    	je     c001d65e <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001d4be:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001d4c0:	75 a6                	jne    c001d468 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d4c2:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d4c8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d4cc:	01 d0                	add    eax,edx
c001d4ce:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001d4d2:	83 ec 0c             	sub    esp,0xc
c001d4d5:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001d4db:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d4de:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d4e4:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001d4eb:	50                   	push   eax
c001d4ec:	e8 21 fe ff ff       	call   c001d312 <unblockTask(ThreadControlBlock*)>
c001d4f1:	83 c4 10             	add    esp,0x10
c001d4f4:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d4f7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d4fb:	89 f7                	mov    edi,esi
c001d4fd:	41                   	inc    ecx
c001d4fe:	83 f9 10             	cmp    ecx,0x10
c001d501:	0f 85 6b ff ff ff    	jne    c001d472 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001d507:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001d50d:	85 c0                	test   eax,eax
c001d50f:	74 5d                	je     c001d56e <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001d511:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001d517:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001d51d:	74 4f                	je     c001d56e <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001d51f:	83 ec 0c             	sub    esp,0xc
c001d522:	68 48 de 02 c0       	push   0xc002de48
c001d527:	e8 c2 9e 00 00       	call   c00273ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d52c:	c7 04 24 48 de 02 c0 	mov    DWORD PTR [esp],0xc002de48
c001d533:	89 c7                	mov    edi,eax
c001d535:	e8 bc 9e 00 00       	call   c00273f6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d53a:	83 c4 10             	add    esp,0x10
c001d53d:	84 c0                	test   al,al
c001d53f:	0f 84 e4 00 00 00    	je     c001d629 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001d545:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d548:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d54e:	85 d2                	test   edx,edx
c001d550:	74 0f                	je     c001d561 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001d552:	83 ec 0c             	sub    esp,0xc
c001d555:	8b 02                	mov    eax,DWORD PTR [edx]
c001d557:	52                   	push   edx
c001d558:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d55b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d55e:	83 c4 10             	add    esp,0x10
c001d561:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001d56b:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001d56e:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001d574:	85 db                	test   ebx,ebx
c001d576:	74 16                	je     c001d58e <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001d578:	83 ec 0c             	sub    esp,0xc
c001d57b:	53                   	push   ebx
c001d57c:	e8 3f 47 ff ff       	call   c0011cc0 <VAS::~VAS()>
c001d581:	58                   	pop    eax
c001d582:	5a                   	pop    edx
c001d583:	6a 10                	push   0x10
c001d585:	53                   	push   ebx
c001d586:	e8 e6 50 ff ff       	call   c0012671 <operator delete(void*, unsigned long)>
c001d58b:	83 c4 10             	add    esp,0x10
c001d58e:	83 ec 0c             	sub    esp,0xc
c001d591:	68 6f a7 02 c0       	push   0xc002a76f
c001d596:	e8 b6 51 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001d59b:	83 c4 10             	add    esp,0x10
c001d59e:	83 ec 08             	sub    esp,0x8
c001d5a1:	68 3f 07 00 00       	push   0x73f
c001d5a6:	68 7d a7 02 c0       	push   0xc002a77d
c001d5ab:	e8 a1 51 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001d5b0:	83 c4 2c             	add    esp,0x2c
c001d5b3:	5b                   	pop    ebx
c001d5b4:	5e                   	pop    esi
c001d5b5:	5f                   	pop    edi
c001d5b6:	5d                   	pop    ebp
c001d5b7:	c3                   	ret    
c001d5b8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d5bc:	83 ec 0c             	sub    esp,0xc
c001d5bf:	68 58 aa 02 c0       	push   0xc002aa58
c001d5c4:	e8 a2 c2 ff ff       	call   c001986b <Krnl::panic(char const*)>
c001d5c9:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d5cc:	83 c4 10             	add    esp,0x10
c001d5cf:	89 f7                	mov    edi,esi
c001d5d1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d5d5:	e9 8e fe ff ff       	jmp    c001d468 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d5da:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d5e0:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001d5e6:	75 1c                	jne    c001d604 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001d5e8:	83 ec 0c             	sub    esp,0xc
c001d5eb:	68 c0 aa 02 c0       	push   0xc002aac0
c001d5f0:	e8 5c 51 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001d5f5:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001d5fc:	e8 8f fb ff ff       	call   c001d190 <blockTask(TaskState)>
c001d601:	83 c4 10             	add    esp,0x10
c001d604:	83 ec 08             	sub    esp,0x8
c001d607:	56                   	push   esi
c001d608:	68 48 de 02 c0       	push   0xc002de48
c001d60d:	e8 ae 9e 00 00       	call   c00274c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d612:	c7 04 24 48 de 02 c0 	mov    DWORD PTR [esp],0xc002de48
c001d619:	e8 d0 9d 00 00       	call   c00273ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d61e:	83 c4 10             	add    esp,0x10
c001d621:	39 f8                	cmp    eax,edi
c001d623:	0f 84 1c ff ff ff    	je     c001d545 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001d629:	83 ec 0c             	sub    esp,0xc
c001d62c:	68 48 de 02 c0       	push   0xc002de48
c001d631:	e8 b8 9d 00 00       	call   c00273ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d636:	c7 04 24 48 de 02 c0 	mov    DWORD PTR [esp],0xc002de48
c001d63d:	89 c6                	mov    esi,eax
c001d63f:	e8 ce 9d 00 00       	call   c0027412 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d644:	83 c4 10             	add    esp,0x10
c001d647:	39 f3                	cmp    ebx,esi
c001d649:	74 b9                	je     c001d604 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001d64b:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001d64e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d651:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001d657:	75 ab                	jne    c001d604 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001d659:	e9 7c ff ff ff       	jmp    c001d5da <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001d65e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d662:	83 ec 0c             	sub    esp,0xc
c001d665:	68 8c aa 02 c0       	push   0xc002aa8c
c001d66a:	e9 55 ff ff ff       	jmp    c001d5c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001d66f:	8b 36                	mov    esi,DWORD PTR [esi]
c001d671:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d675:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001d678:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d67b:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001d681:	01 d7                	add    edi,edx
c001d683:	89 f8                	mov    eax,edi
c001d685:	e9 44 fe ff ff       	jmp    c001d4ce <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001d68a <cleanerTaskFunction(void*)>:
c001d68a:	53                   	push   ebx
c001d68b:	83 ec 08             	sub    esp,0x8
c001d68e:	e8 69 f6 ff ff       	call   c001ccfc <unlockScheduler()>
c001d693:	e8 62 f6 ff ff       	call   c001ccfa <lockScheduler()>
c001d698:	80 3d 0c de 02 c0 00 	cmp    BYTE PTR ds:0xc002de0c,0x0
c001d69f:	0f 85 8e 00 00 00    	jne    c001d733 <cleanerTaskFunction(void*)+0xa9>
c001d6a5:	83 ec 0c             	sub    esp,0xc
c001d6a8:	6a 02                	push   0x2
c001d6aa:	e8 9f fa ff ff       	call   c001d14e <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001d6af:	83 c4 10             	add    esp,0x10
c001d6b2:	c6 05 0c de 02 c0 00 	mov    BYTE PTR ds:0xc002de0c,0x0
c001d6b9:	e8 63 f6 ff ff       	call   c001cd21 <lockStuff()>
c001d6be:	e8 37 f6 ff ff       	call   c001ccfa <lockScheduler()>
c001d6c3:	83 ec 0c             	sub    esp,0xc
c001d6c6:	68 30 de 02 c0       	push   0xc002de30
c001d6cb:	e8 26 9d 00 00       	call   c00273f6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d6d0:	83 c4 10             	add    esp,0x10
c001d6d3:	84 c0                	test   al,al
c001d6d5:	75 40                	jne    c001d717 <cleanerTaskFunction(void*)+0x8d>
c001d6d7:	83 ec 0c             	sub    esp,0xc
c001d6da:	68 30 de 02 c0       	push   0xc002de30
c001d6df:	e8 0a 9d 00 00       	call   c00273ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d6e4:	c7 04 24 30 de 02 c0 	mov    DWORD PTR [esp],0xc002de30
c001d6eb:	89 c3                	mov    ebx,eax
c001d6ed:	e8 20 9d 00 00       	call   c0027412 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d6f2:	c7 04 24 93 a7 02 c0 	mov    DWORD PTR [esp],0xc002a793
c001d6f9:	e8 53 50 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001d6fe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d701:	e8 bb fc ff ff       	call   c001d3c1 <cleanupTerminatedTask(ThreadControlBlock*)>
c001d706:	c7 04 24 ac a7 02 c0 	mov    DWORD PTR [esp],0xc002a7ac
c001d70d:	e8 3f 50 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001d712:	83 c4 10             	add    esp,0x10
c001d715:	eb ac                	jmp    c001d6c3 <cleanerTaskFunction(void*)+0x39>
c001d717:	e8 e0 f5 ff ff       	call   c001ccfc <unlockScheduler()>
c001d71c:	e8 9a f9 ff ff       	call   c001d0bb <unlockStuff()>
c001d721:	e8 d4 f5 ff ff       	call   c001ccfa <lockScheduler()>
c001d726:	80 3d 0c de 02 c0 00 	cmp    BYTE PTR ds:0xc002de0c,0x0
c001d72d:	0f 84 72 ff ff ff    	je     c001d6a5 <cleanerTaskFunction(void*)+0x1b>
c001d733:	e8 c4 f5 ff ff       	call   c001ccfc <unlockScheduler()>
c001d738:	e9 75 ff ff ff       	jmp    c001d6b2 <cleanerTaskFunction(void*)+0x28>

c001d73d <terminateTask(int)>:
c001d73d:	83 ec 14             	sub    esp,0x14
c001d740:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d745:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d748:	83 c0 0c             	add    eax,0xc
c001d74b:	50                   	push   eax
c001d74c:	68 e8 aa 02 c0       	push   0xc002aae8
c001d751:	e8 fb 4f ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001d756:	e8 c6 f5 ff ff       	call   c001cd21 <lockStuff()>
c001d75b:	e8 9a f5 ff ff       	call   c001ccfa <lockScheduler()>
c001d760:	c7 04 24 bf a7 02 c0 	mov    DWORD PTR [esp],0xc002a7bf
c001d767:	e8 e5 4f ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001d76c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d770:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d775:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001d778:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d77d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001d780:	5a                   	pop    edx
c001d781:	59                   	pop    ecx
c001d782:	50                   	push   eax
c001d783:	68 30 de 02 c0       	push   0xc002de30
c001d788:	e8 33 9d 00 00       	call   c00274c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d78d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d792:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001d799:	c7 04 24 d9 a7 02 c0 	mov    DWORD PTR [esp],0xc002a7d9
c001d7a0:	e8 ac 4f ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001d7a5:	83 c4 10             	add    esp,0x10
c001d7a8:	a1 08 de 02 c0       	mov    eax,ds:0xc002de08
c001d7ad:	85 c0                	test   eax,eax
c001d7af:	74 5a                	je     c001d80b <terminateTask(int)+0xce>
c001d7b1:	83 ec 0c             	sub    esp,0xc
c001d7b4:	68 f3 a7 02 c0       	push   0xc002a7f3
c001d7b9:	e8 93 4f ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001d7be:	58                   	pop    eax
c001d7bf:	c6 05 0c de 02 c0 01 	mov    BYTE PTR ds:0xc002de0c,0x1
c001d7c6:	ff 35 08 de 02 c0    	push   DWORD PTR ds:0xc002de08
c001d7cc:	e8 41 fb ff ff       	call   c001d312 <unblockTask(ThreadControlBlock*)>
c001d7d1:	c7 04 24 0d a8 02 c0 	mov    DWORD PTR [esp],0xc002a80d
c001d7d8:	e8 74 4f ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001d7dd:	83 c4 10             	add    esp,0x10
c001d7e0:	e8 17 f5 ff ff       	call   c001ccfc <unlockScheduler()>
c001d7e5:	e8 d1 f8 ff ff       	call   c001d0bb <unlockStuff()>
c001d7ea:	83 ec 0c             	sub    esp,0xc
c001d7ed:	68 45 a8 02 c0       	push   0xc002a845
c001d7f2:	e8 5a 4f ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001d7f7:	83 c4 10             	add    esp,0x10
c001d7fa:	e8 fb f4 ff ff       	call   c001ccfa <lockScheduler()>
c001d7ff:	e8 32 f8 ff ff       	call   c001d036 <schedule()>
c001d804:	e8 f3 f4 ff ff       	call   c001ccfc <unlockScheduler()>
c001d809:	eb ef                	jmp    c001d7fa <terminateTask(int)+0xbd>
c001d80b:	83 ec 0c             	sub    esp,0xc
c001d80e:	68 27 a8 02 c0       	push   0xc002a827
c001d813:	e8 39 4f ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001d818:	83 c4 10             	add    esp,0x10
c001d81b:	eb c3                	jmp    c001d7e0 <terminateTask(int)+0xa3>

c001d81d <Thr::terminateFromIRQ(int)>:
c001d81d:	83 ec 18             	sub    esp,0x18
c001d820:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d824:	e8 14 ff ff ff       	call   c001d73d <terminateTask(int)>
c001d829:	90                   	nop

c001d82a <Semaphore::release()>:
c001d82a:	83 ec 0c             	sub    esp,0xc
c001d82d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d831:	e8 eb f4 ff ff       	call   c001cd21 <lockStuff()>
c001d836:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d839:	85 d2                	test   edx,edx
c001d83b:	74 1a                	je     c001d857 <Semaphore::release()+0x2d>
c001d83d:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001d840:	83 ec 0c             	sub    esp,0xc
c001d843:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001d846:	52                   	push   edx
c001d847:	e8 c6 fa ff ff       	call   c001d312 <unblockTask(ThreadControlBlock*)>
c001d84c:	83 c4 10             	add    esp,0x10
c001d84f:	83 c4 0c             	add    esp,0xc
c001d852:	e9 64 f8 ff ff       	jmp    c001d0bb <unlockStuff()>
c001d857:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001d85a:	83 c4 0c             	add    esp,0xc
c001d85d:	e9 59 f8 ff ff       	jmp    c001d0bb <unlockStuff()>

c001d862 <__static_initialization_and_destruction_0(int, int)>:
c001d862:	83 ec 0c             	sub    esp,0xc
c001d865:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001d86a:	0f 85 88 00 00 00    	jne    c001d8f8 <__static_initialization_and_destruction_0(int, int)+0x96>
c001d870:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001d878:	75 7e                	jne    c001d8f8 <__static_initialization_and_destruction_0(int, int)+0x96>
c001d87a:	83 ec 0c             	sub    esp,0xc
c001d87d:	68 48 de 02 c0       	push   0xc002de48
c001d882:	e8 e9 9d 00 00       	call   c0027670 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001d887:	83 c4 10             	add    esp,0x10
c001d88a:	83 ec 04             	sub    esp,0x4
c001d88d:	68 48 b8 02 c0       	push   0xc002b848
c001d892:	68 48 de 02 c0       	push   0xc002de48
c001d897:	68 30 76 02 c0       	push   0xc0027630
c001d89c:	e8 4a 4d ff ff       	call   c00125eb <__cxa_atexit>
c001d8a1:	83 c4 10             	add    esp,0x10
c001d8a4:	83 ec 0c             	sub    esp,0xc
c001d8a7:	68 3c de 02 c0       	push   0xc002de3c
c001d8ac:	e8 bf 9d 00 00       	call   c0027670 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001d8b1:	83 c4 10             	add    esp,0x10
c001d8b4:	83 ec 04             	sub    esp,0x4
c001d8b7:	68 48 b8 02 c0       	push   0xc002b848
c001d8bc:	68 3c de 02 c0       	push   0xc002de3c
c001d8c1:	68 30 76 02 c0       	push   0xc0027630
c001d8c6:	e8 20 4d ff ff       	call   c00125eb <__cxa_atexit>
c001d8cb:	83 c4 10             	add    esp,0x10
c001d8ce:	83 ec 0c             	sub    esp,0xc
c001d8d1:	68 30 de 02 c0       	push   0xc002de30
c001d8d6:	e8 95 9d 00 00       	call   c0027670 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001d8db:	83 c4 10             	add    esp,0x10
c001d8de:	83 ec 04             	sub    esp,0x4
c001d8e1:	68 48 b8 02 c0       	push   0xc002b848
c001d8e6:	68 30 de 02 c0       	push   0xc002de30
c001d8eb:	68 30 76 02 c0       	push   0xc0027630
c001d8f0:	e8 f6 4c ff ff       	call   c00125eb <__cxa_atexit>
c001d8f5:	83 c4 10             	add    esp,0x10
c001d8f8:	90                   	nop
c001d8f9:	83 c4 0c             	add    esp,0xc
c001d8fc:	c3                   	ret    

c001d8fd <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001d8fd:	83 ec 0c             	sub    esp,0xc
c001d900:	83 ec 08             	sub    esp,0x8
c001d903:	68 ff ff 00 00       	push   0xffff
c001d908:	6a 01                	push   0x1
c001d90a:	e8 53 ff ff ff       	call   c001d862 <__static_initialization_and_destruction_0(int, int)>
c001d90f:	83 c4 10             	add    esp,0x10
c001d912:	83 c4 0c             	add    esp,0xc
c001d915:	c3                   	ret    

c001d916 <Vm::inbv(unsigned short)>:
c001d916:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d91a:	66 81 fa fe fe       	cmp    dx,0xfefe
c001d91f:	75 06                	jne    c001d927 <Vm::inbv(unsigned short)+0x11>
c001d921:	a0 8c de 02 c0       	mov    al,ds:0xc002de8c
c001d926:	c3                   	ret    
c001d927:	ec                   	in     al,dx
c001d928:	c3                   	ret    

c001d929 <Vm::outbv(unsigned short, unsigned char)>:
c001d929:	53                   	push   ebx
c001d92a:	83 ec 08             	sub    esp,0x8
c001d92d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d931:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d935:	66 81 fa fe fe       	cmp    dx,0xfefe
c001d93a:	75 38                	jne    c001d974 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001d93c:	0f b6 c3             	movzx  eax,bl
c001d93f:	51                   	push   ecx
c001d940:	51                   	push   ecx
c001d941:	50                   	push   eax
c001d942:	68 07 ab 02 c0       	push   0xc002ab07
c001d947:	e8 05 4e ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001d94c:	8b 15 8c de 02 c0    	mov    edx,DWORD PTR ds:0xc002de8c
c001d952:	83 c4 10             	add    esp,0x10
c001d955:	8d 42 01             	lea    eax,[edx+0x1]
c001d958:	88 9a a0 de 02 c0    	mov    BYTE PTR [edx-0x3ffd2160],bl
c001d95e:	a3 8c de 02 c0       	mov    ds:0xc002de8c,eax
c001d963:	83 f8 20             	cmp    eax,0x20
c001d966:	75 0f                	jne    c001d977 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001d968:	c7 05 8c de 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002de8c,0x1f
c001d972:	eb 03                	jmp    c001d977 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001d974:	88 d8                	mov    al,bl
c001d976:	ee                   	out    dx,al
c001d977:	83 c4 08             	add    esp,0x8
c001d97a:	5b                   	pop    ebx
c001d97b:	c3                   	ret    

c001d97c <Vm::realToLinear(unsigned short, unsigned short)>:
c001d97c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d981:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d986:	c1 e0 04             	shl    eax,0x4
c001d989:	01 d0                	add    eax,edx
c001d98b:	c3                   	ret    

c001d98c <Vm::getSegment(unsigned int)>:
c001d98c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d990:	c1 e8 10             	shr    eax,0x10
c001d993:	c3                   	ret    

c001d994 <Vm::getOffset(unsigned int)>:
c001d994:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d998:	c3                   	ret    

c001d999 <Vm::mainloop2()>:
c001d999:	83 ec 0c             	sub    esp,0xc
c001d99c:	e8 59 f3 ff ff       	call   c001ccfa <lockScheduler()>
c001d9a1:	83 ec 0c             	sub    esp,0xc
c001d9a4:	c6 05 85 de 02 c0 01 	mov    BYTE PTR ds:0xc002de85,0x1
c001d9ab:	6a 02                	push   0x2
c001d9ad:	e8 9c f7 ff ff       	call   c001d14e <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001d9b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d9b7:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001d9bb:	52                   	push   edx
c001d9bc:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001d9c0:	52                   	push   edx
c001d9c1:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001d9c5:	52                   	push   edx
c001d9c6:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001d9ca:	50                   	push   eax
c001d9cb:	e8 df 28 fe ff       	call   c00002af <goToVM86>
c001d9d0:	83 c4 2c             	add    esp,0x2c
c001d9d3:	c3                   	ret    

c001d9d4 <Vm::mainVm8086Loop(void*)>:
c001d9d4:	83 ec 0c             	sub    esp,0xc
c001d9d7:	e8 20 f3 ff ff       	call   c001ccfc <unlockScheduler()>
c001d9dc:	83 c4 0c             	add    esp,0xc
c001d9df:	eb b8                	jmp    c001d999 <Vm::mainloop2()>

c001d9e1 <Vm::mainloop3(unsigned long)>:
c001d9e1:	53                   	push   ebx
c001d9e2:	83 ec 08             	sub    esp,0x8
c001d9e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d9e9:	e8 0c f3 ff ff       	call   c001ccfa <lockScheduler()>
c001d9ee:	83 ec 0c             	sub    esp,0xc
c001d9f1:	89 1d 80 de 02 c0    	mov    DWORD PTR ds:0xc002de80,ebx
c001d9f7:	6a 02                	push   0x2
c001d9f9:	c6 05 84 de 02 c0 01 	mov    BYTE PTR ds:0xc002de84,0x1
c001da00:	e8 49 f7 ff ff       	call   c001d14e <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001da05:	83 c4 18             	add    esp,0x18
c001da08:	5b                   	pop    ebx
c001da09:	eb 8e                	jmp    c001d999 <Vm::mainloop2()>

c001da0b <Vm::initialise8086()>:
c001da0b:	83 ec 0c             	sub    esp,0xc
c001da0e:	68 80 00 00 00       	push   0x80
c001da13:	6a 00                	push   0x0
c001da15:	68 d4 d9 01 c0       	push   0xc001d9d4
c001da1a:	ff 35 54 de 02 c0    	push   DWORD PTR ds:0xc002de54
c001da20:	e8 07 f4 ff ff       	call   c001ce2c <Process::createThread(void (*)(void*), void*, int)>
c001da25:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001da2c:	a3 88 de 02 c0       	mov    ds:0xc002de88,eax
c001da31:	68 00 01 00 00       	push   0x100
c001da36:	a1 54 de 02 c0       	mov    eax,ds:0xc002de54
c001da3b:	6a 00                	push   0x0
c001da3d:	6a 00                	push   0x0
c001da3f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001da45:	e8 d6 46 ff ff       	call   c0012120 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001da4a:	83 c4 2c             	add    esp,0x2c
c001da4d:	c3                   	ret    

c001da4e <Vm::finish8086()>:
c001da4e:	53                   	push   ebx
c001da4f:	83 ec 08             	sub    esp,0x8
c001da52:	e8 a3 f2 ff ff       	call   c001ccfa <lockScheduler()>
c001da57:	80 3d 84 de 02 c0 00 	cmp    BYTE PTR ds:0xc002de84,0x0
c001da5e:	75 0c                	jne    c001da6c <Vm::finish8086()+0x1e>
c001da60:	e8 d1 f5 ff ff       	call   c001d036 <schedule()>
c001da65:	e8 92 f2 ff ff       	call   c001ccfc <unlockScheduler()>
c001da6a:	eb e6                	jmp    c001da52 <Vm::finish8086()+0x4>
c001da6c:	83 ec 0c             	sub    esp,0xc
c001da6f:	8b 1d 80 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002de80
c001da75:	ff 35 88 de 02 c0    	push   DWORD PTR ds:0xc002de88
c001da7b:	c6 05 84 de 02 c0 00 	mov    BYTE PTR ds:0xc002de84,0x0
c001da82:	e8 8b f8 ff ff       	call   c001d312 <unblockTask(ThreadControlBlock*)>
c001da87:	e8 70 f2 ff ff       	call   c001ccfc <unlockScheduler()>
c001da8c:	89 d8                	mov    eax,ebx
c001da8e:	83 c4 18             	add    esp,0x18
c001da91:	5b                   	pop    ebx
c001da92:	c3                   	ret    

c001da93 <Vm::getOutput8086(unsigned char*)>:
c001da93:	83 ec 10             	sub    esp,0x10
c001da96:	ff 35 8c de 02 c0    	push   DWORD PTR ds:0xc002de8c
c001da9c:	68 a0 de 02 c0       	push   0xc002dea0
c001daa1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001daa5:	e8 ab 2b fe ff       	call   c0000655 <memcpy>
c001daaa:	a1 8c de 02 c0       	mov    eax,ds:0xc002de8c
c001daaf:	c7 05 8c de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002de8c,0x0
c001dab9:	83 c4 1c             	add    esp,0x1c
c001dabc:	c3                   	ret    

c001dabd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001dabd:	55                   	push   ebp
c001dabe:	57                   	push   edi
c001dabf:	56                   	push   esi
c001dac0:	53                   	push   ebx
c001dac1:	83 ec 2c             	sub    esp,0x2c
c001dac4:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001dac8:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001dacc:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001dad0:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001dad4:	e8 21 f2 ff ff       	call   c001ccfa <lockScheduler()>
c001dad9:	a0 85 de 02 c0       	mov    al,ds:0xc002de85
c001dade:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dae2:	84 c0                	test   al,al
c001dae4:	75 0c                	jne    c001daf2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001dae6:	e8 4b f5 ff ff       	call   c001d036 <schedule()>
c001daeb:	e8 0c f2 ff ff       	call   c001ccfc <unlockScheduler()>
c001daf0:	eb e2                	jmp    c001dad4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001daf2:	a1 88 de 02 c0       	mov    eax,ds:0xc002de88
c001daf7:	c7 05 8c de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002de8c,0x0
c001db01:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001db05:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001db09:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001db0d:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001db11:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001db15:	50                   	push   eax
c001db16:	6a 20                	push   0x20
c001db18:	6a 00                	push   0x0
c001db1a:	68 a0 de 02 c0       	push   0xc002dea0
c001db1f:	e8 67 2b fe ff       	call   c000068b <memset>
c001db24:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001db2b:	e8 a4 19 ff ff       	call   c000f4d4 <malloc>
c001db30:	83 c4 0c             	add    esp,0xc
c001db33:	89 c7                	mov    edi,eax
c001db35:	ff 35 54 de 02 c0    	push   DWORD PTR ds:0xc002de54
c001db3b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001db3f:	50                   	push   eax
c001db40:	e8 3b 51 ff ff       	call   c0012c80 <File::File(char const*, Process*)>
c001db45:	83 c4 10             	add    esp,0x10
c001db48:	85 ff                	test   edi,edi
c001db4a:	75 0a                	jne    c001db56 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001db4c:	83 ec 0c             	sub    esp,0xc
c001db4f:	68 23 ab 02 c0       	push   0xc002ab23
c001db54:	eb 27                	jmp    c001db7d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001db56:	50                   	push   eax
c001db57:	8d 44 24 17          	lea    eax,[esp+0x17]
c001db5b:	50                   	push   eax
c001db5c:	8d 44 24 20          	lea    eax,[esp+0x20]
c001db60:	50                   	push   eax
c001db61:	57                   	push   edi
c001db62:	e8 29 54 ff ff       	call   c0012f90 <File::stat(unsigned long long*, bool*)>
c001db67:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001db6c:	83 c4 10             	add    esp,0x10
c001db6f:	89 e8                	mov    eax,ebp
c001db71:	84 c0                	test   al,al
c001db73:	74 19                	je     c001db8e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001db75:	83 ec 0c             	sub    esp,0xc
c001db78:	68 37 ab 02 c0       	push   0xc002ab37
c001db7d:	e8 e9 bc ff ff       	call   c001986b <Krnl::panic(char const*)>
c001db82:	31 ed                	xor    ebp,ebp
c001db84:	e8 73 f1 ff ff       	call   c001ccfc <unlockScheduler()>
c001db89:	83 c4 10             	add    esp,0x10
c001db8c:	eb 75                	jmp    c001dc03 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001db8e:	50                   	push   eax
c001db8f:	50                   	push   eax
c001db90:	6a 01                	push   0x1
c001db92:	57                   	push   edi
c001db93:	e8 4c 51 ff ff       	call   c0012ce4 <File::open(FileOpenMode)>
c001db98:	83 c4 10             	add    esp,0x10
c001db9b:	85 c0                	test   eax,eax
c001db9d:	74 17                	je     c001dbb6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001db9f:	83 ec 0c             	sub    esp,0xc
c001dba2:	68 50 ab 02 c0       	push   0xc002ab50
c001dba7:	e8 bf bc ff ff       	call   c001986b <Krnl::panic(char const*)>
c001dbac:	e8 4b f1 ff ff       	call   c001ccfc <unlockScheduler()>
c001dbb1:	83 c4 10             	add    esp,0x10
c001dbb4:	eb 4d                	jmp    c001dc03 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001dbb6:	0f b7 f6             	movzx  esi,si
c001dbb9:	50                   	push   eax
c001dbba:	0f b7 db             	movzx  ebx,bx
c001dbbd:	50                   	push   eax
c001dbbe:	56                   	push   esi
c001dbbf:	53                   	push   ebx
c001dbc0:	e8 b7 fd ff ff       	call   c001d97c <Vm::realToLinear(unsigned short, unsigned short)>
c001dbc5:	5a                   	pop    edx
c001dbc6:	8b 17                	mov    edx,DWORD PTR [edi]
c001dbc8:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001dbcc:	51                   	push   ecx
c001dbcd:	50                   	push   eax
c001dbce:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001dbd2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001dbd6:	57                   	push   edi
c001dbd7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001dbda:	83 c4 14             	add    esp,0x14
c001dbdd:	57                   	push   edi
c001dbde:	e8 5f 51 ff ff       	call   c0012d42 <File::close()>
c001dbe3:	c6 05 85 de 02 c0 00 	mov    BYTE PTR ds:0xc002de85,0x0
c001dbea:	e8 0d f1 ff ff       	call   c001ccfc <unlockScheduler()>
c001dbef:	59                   	pop    ecx
c001dbf0:	ff 35 88 de 02 c0    	push   DWORD PTR ds:0xc002de88
c001dbf6:	e8 17 f7 ff ff       	call   c001d312 <unblockTask(ThreadControlBlock*)>
c001dbfb:	83 c4 10             	add    esp,0x10
c001dbfe:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001dc03:	83 c4 2c             	add    esp,0x2c
c001dc06:	89 e8                	mov    eax,ebp
c001dc08:	5b                   	pop    ebx
c001dc09:	5e                   	pop    esi
c001dc0a:	5f                   	pop    edi
c001dc0b:	5d                   	pop    ebp
c001dc0c:	c3                   	ret    

c001dc0d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001dc0d:	57                   	push   edi
c001dc0e:	56                   	push   esi
c001dc0f:	53                   	push   ebx
c001dc10:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dc14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc18:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001dc1c:	83 e8 06             	sub    eax,0x6
c001dc1f:	0f b7 c0             	movzx  eax,ax
c001dc22:	50                   	push   eax
c001dc23:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001dc28:	50                   	push   eax
c001dc29:	e8 4e fd ff ff       	call   c001d97c <Vm::realToLinear(unsigned short, unsigned short)>
c001dc2e:	5a                   	pop    edx
c001dc2f:	5e                   	pop    esi
c001dc30:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001dc33:	8d 56 fa             	lea    edx,[esi-0x6]
c001dc36:	81 e2 ff ff 00 00    	and    edx,0xffff
c001dc3c:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001dc3f:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001dc42:	83 c2 02             	add    edx,0x2
c001dc45:	66 89 10             	mov    WORD PTR [eax],dx
c001dc48:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001dc4b:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001dc4f:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001dc52:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001dc56:	89 d6                	mov    esi,edx
c001dc58:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001dc5e:	66 81 e6 ff fd       	and    si,0xfdff
c001dc63:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001dc67:	74 07                	je     c001dc70 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001dc69:	89 d6                	mov    esi,edx
c001dc6b:	66 81 ce 00 02       	or     si,0x200
c001dc70:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001dc74:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc79:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001dc7d:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001dc85:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001dc88:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001dc90:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001dc93:	5b                   	pop    ebx
c001dc94:	5e                   	pop    esi
c001dc95:	5f                   	pop    edi
c001dc96:	c3                   	ret    

c001dc97 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001dc97:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dc9c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dca1:	c1 e0 04             	shl    eax,0x4
c001dca4:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001dca7:	c3                   	ret    

c001dca8 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001dca8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dcad:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dcb2:	c1 e0 04             	shl    eax,0x4
c001dcb5:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001dcb9:	c3                   	ret    

c001dcba <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001dcba:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dcbf:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dcc4:	c1 e0 04             	shl    eax,0x4
c001dcc7:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001dcca:	c3                   	ret    

c001dccb <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001dccb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dcd0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dcd5:	c1 e0 04             	shl    eax,0x4
c001dcd8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dcdc:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001dcdf:	c3                   	ret    

c001dce0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001dce0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dce5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dcea:	c1 e0 04             	shl    eax,0x4
c001dced:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dcf1:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001dcf5:	c3                   	ret    

c001dcf6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001dcf6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dcfb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dd00:	c1 e0 04             	shl    eax,0x4
c001dd03:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dd07:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001dd0a:	c3                   	ret    

c001dd0b <Vm::faultHandler(regs*)>:
c001dd0b:	55                   	push   ebp
c001dd0c:	57                   	push   edi
c001dd0d:	56                   	push   esi
c001dd0e:	53                   	push   ebx
c001dd0f:	83 ec 1c             	sub    esp,0x1c
c001dd12:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001dd16:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001dd19:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001dd1c:	0f b7 c1             	movzx  eax,cx
c001dd1f:	50                   	push   eax
c001dd20:	0f b7 c3             	movzx  eax,bx
c001dd23:	c1 e3 04             	shl    ebx,0x4
c001dd26:	50                   	push   eax
c001dd27:	e8 50 fc ff ff       	call   c001d97c <Vm::realToLinear(unsigned short, unsigned short)>
c001dd2c:	5a                   	pop    edx
c001dd2d:	89 c5                	mov    ebp,eax
c001dd2f:	5e                   	pop    esi
c001dd30:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001dd34:	50                   	push   eax
c001dd35:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001dd39:	50                   	push   eax
c001dd3a:	e8 3d fc ff ff       	call   c001d97c <Vm::realToLinear(unsigned short, unsigned short)>
c001dd3f:	01 cb                	add    ebx,ecx
c001dd41:	89 c6                	mov    esi,eax
c001dd43:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001dd47:	50                   	push   eax
c001dd48:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dd4c:	50                   	push   eax
c001dd4d:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001dd51:	50                   	push   eax
c001dd52:	55                   	push   ebp
c001dd53:	53                   	push   ebx
c001dd54:	b3 06                	mov    bl,0x6
c001dd56:	68 69 ab 02 c0       	push   0xc002ab69
c001dd5b:	e8 f1 49 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001dd60:	83 c4 20             	add    esp,0x20
c001dd63:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001dd68:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001dd6d:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001dd71:	3c 9d                	cmp    al,0x9d
c001dd73:	0f 84 d7 02 00 00    	je     c001e050 <Vm::faultHandler(regs*)+0x345>
c001dd79:	0f 87 a3 00 00 00    	ja     c001de22 <Vm::faultHandler(regs*)+0x117>
c001dd7f:	3c 66                	cmp    al,0x66
c001dd81:	0f 84 15 02 00 00    	je     c001df9c <Vm::faultHandler(regs*)+0x291>
c001dd87:	77 5f                	ja     c001dde8 <Vm::faultHandler(regs*)+0xdd>
c001dd89:	3c 36                	cmp    al,0x36
c001dd8b:	0f 84 f1 01 00 00    	je     c001df82 <Vm::faultHandler(regs*)+0x277>
c001dd91:	77 28                	ja     c001ddbb <Vm::faultHandler(regs*)+0xb0>
c001dd93:	3c 26                	cmp    al,0x26
c001dd95:	0f 84 99 01 00 00    	je     c001df34 <Vm::faultHandler(regs*)+0x229>
c001dd9b:	3c 2e                	cmp    al,0x2e
c001dd9d:	0f 85 3b 07 00 00    	jne    c001e4de <Vm::faultHandler(regs*)+0x7d3>
c001dda3:	83 ec 0c             	sub    esp,0xc
c001dda6:	31 db                	xor    ebx,ebx
c001dda8:	68 7e ab 02 c0       	push   0xc002ab7e
c001ddad:	e8 9f 49 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001ddb2:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ddb5:	83 c4 10             	add    esp,0x10
c001ddb8:	45                   	inc    ebp
c001ddb9:	eb b2                	jmp    c001dd6d <Vm::faultHandler(regs*)+0x62>
c001ddbb:	3c 64                	cmp    al,0x64
c001ddbd:	0f 84 8b 01 00 00    	je     c001df4e <Vm::faultHandler(regs*)+0x243>
c001ddc3:	0f 87 9f 01 00 00    	ja     c001df68 <Vm::faultHandler(regs*)+0x25d>
c001ddc9:	3c 3e                	cmp    al,0x3e
c001ddcb:	0f 85 0d 07 00 00    	jne    c001e4de <Vm::faultHandler(regs*)+0x7d3>
c001ddd1:	83 ec 0c             	sub    esp,0xc
c001ddd4:	b3 01                	mov    bl,0x1
c001ddd6:	68 82 ab 02 c0       	push   0xc002ab82
c001dddb:	e8 71 49 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001dde0:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001dde3:	83 c4 10             	add    esp,0x10
c001dde6:	eb d0                	jmp    c001ddb8 <Vm::faultHandler(regs*)+0xad>
c001dde8:	3c 6d                	cmp    al,0x6d
c001ddea:	0f 84 af 03 00 00    	je     c001e19f <Vm::faultHandler(regs*)+0x494>
c001ddf0:	77 15                	ja     c001de07 <Vm::faultHandler(regs*)+0xfc>
c001ddf2:	3c 67                	cmp    al,0x67
c001ddf4:	0f 84 bf 01 00 00    	je     c001dfb9 <Vm::faultHandler(regs*)+0x2ae>
c001ddfa:	3c 6c                	cmp    al,0x6c
c001ddfc:	0f 84 3f 03 00 00    	je     c001e141 <Vm::faultHandler(regs*)+0x436>
c001de02:	e9 d7 06 00 00       	jmp    c001e4de <Vm::faultHandler(regs*)+0x7d3>
c001de07:	3c 6f                	cmp    al,0x6f
c001de09:	0f 84 a4 04 00 00    	je     c001e2b3 <Vm::faultHandler(regs*)+0x5a8>
c001de0f:	0f 82 11 04 00 00    	jb     c001e226 <Vm::faultHandler(regs*)+0x51b>
c001de15:	3c 9c                	cmp    al,0x9c
c001de17:	0f 84 ba 01 00 00    	je     c001dfd7 <Vm::faultHandler(regs*)+0x2cc>
c001de1d:	e9 bc 06 00 00       	jmp    c001e4de <Vm::faultHandler(regs*)+0x7d3>
c001de22:	3c ec                	cmp    al,0xec
c001de24:	0f 84 24 06 00 00    	je     c001e44e <Vm::faultHandler(regs*)+0x743>
c001de2a:	0f 87 93 00 00 00    	ja     c001dec3 <Vm::faultHandler(regs*)+0x1b8>
c001de30:	3c e4                	cmp    al,0xe4
c001de32:	0f 84 5c 05 00 00    	je     c001e394 <Vm::faultHandler(regs*)+0x689>
c001de38:	77 6a                	ja     c001dea4 <Vm::faultHandler(regs*)+0x199>
c001de3a:	3c cd                	cmp    al,0xcd
c001de3c:	0f 84 7e 02 00 00    	je     c001e0c0 <Vm::faultHandler(regs*)+0x3b5>
c001de42:	3c cf                	cmp    al,0xcf
c001de44:	0f 85 94 06 00 00    	jne    c001e4de <Vm::faultHandler(regs*)+0x7d3>
c001de4a:	83 ec 0c             	sub    esp,0xc
c001de4d:	68 c6 ab 02 c0       	push   0xc002abc6
c001de52:	e8 fa 48 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001de57:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001de5a:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001de5d:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001de61:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001de64:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001de68:	0d 00 02 02 00       	or     eax,0x20200
c001de6d:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001de70:	56                   	push   esi
c001de71:	53                   	push   ebx
c001de72:	52                   	push   edx
c001de73:	68 cc ab 02 c0       	push   0xc002abcc
c001de78:	e8 d4 48 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001de7d:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001de81:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001de87:	66 c1 e8 09          	shr    ax,0x9
c001de8b:	83 e0 01             	and    eax,0x1
c001de8e:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001de91:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001de94:	83 c0 06             	add    eax,0x6
c001de97:	25 ff ff 00 00       	and    eax,0xffff
c001de9c:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001de9f:	e9 95 02 00 00       	jmp    c001e139 <Vm::faultHandler(regs*)+0x42e>
c001dea4:	3c e6                	cmp    al,0xe6
c001dea6:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001deaa:	0f 84 4e 05 00 00    	je     c001e3fe <Vm::faultHandler(regs*)+0x6f3>
c001deb0:	0f 82 0a 05 00 00    	jb     c001e3c0 <Vm::faultHandler(regs*)+0x6b5>
c001deb6:	3c e7                	cmp    al,0xe7
c001deb8:	0f 84 69 05 00 00    	je     c001e427 <Vm::faultHandler(regs*)+0x71c>
c001debe:	e9 1b 06 00 00       	jmp    c001e4de <Vm::faultHandler(regs*)+0x7d3>
c001dec3:	3c ef                	cmp    al,0xef
c001dec5:	0f 84 e6 05 00 00    	je     c001e4b1 <Vm::faultHandler(regs*)+0x7a6>
c001decb:	77 37                	ja     c001df04 <Vm::faultHandler(regs*)+0x1f9>
c001decd:	3c ed                	cmp    al,0xed
c001decf:	0f 84 a3 05 00 00    	je     c001e478 <Vm::faultHandler(regs*)+0x76d>
c001ded5:	3c ee                	cmp    al,0xee
c001ded7:	0f 85 01 06 00 00    	jne    c001e4de <Vm::faultHandler(regs*)+0x7d3>
c001dedd:	52                   	push   edx
c001dede:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001dee1:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001dee4:	68 67 ac 02 c0       	push   0xc002ac67
c001dee9:	e8 63 48 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001deee:	59                   	pop    ecx
c001deef:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001def3:	5b                   	pop    ebx
c001def4:	50                   	push   eax
c001def5:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001def9:	50                   	push   eax
c001defa:	e8 2a fa ff ff       	call   c001d929 <Vm::outbv(unsigned short, unsigned char)>
c001deff:	e9 a5 05 00 00       	jmp    c001e4a9 <Vm::faultHandler(regs*)+0x79e>
c001df04:	3c fa                	cmp    al,0xfa
c001df06:	0f 84 f7 01 00 00    	je     c001e103 <Vm::faultHandler(regs*)+0x3f8>
c001df0c:	3c fb                	cmp    al,0xfb
c001df0e:	0f 84 0a 02 00 00    	je     c001e11e <Vm::faultHandler(regs*)+0x413>
c001df14:	3c f3                	cmp    al,0xf3
c001df16:	0f 85 c2 05 00 00    	jne    c001e4de <Vm::faultHandler(regs*)+0x7d3>
c001df1c:	83 ec 0c             	sub    esp,0xc
c001df1f:	68 9f ab 02 c0       	push   0xc002ab9f
c001df24:	e8 28 48 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001df29:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001df2c:	83 c4 10             	add    esp,0x10
c001df2f:	e9 84 fe ff ff       	jmp    c001ddb8 <Vm::faultHandler(regs*)+0xad>
c001df34:	83 ec 0c             	sub    esp,0xc
c001df37:	b3 02                	mov    bl,0x2
c001df39:	68 7a ab 02 c0       	push   0xc002ab7a
c001df3e:	e8 0e 48 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001df43:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001df46:	83 c4 10             	add    esp,0x10
c001df49:	e9 6a fe ff ff       	jmp    c001ddb8 <Vm::faultHandler(regs*)+0xad>
c001df4e:	83 ec 0c             	sub    esp,0xc
c001df51:	b3 03                	mov    bl,0x3
c001df53:	68 86 ab 02 c0       	push   0xc002ab86
c001df58:	e8 f4 47 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001df5d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001df60:	83 c4 10             	add    esp,0x10
c001df63:	e9 50 fe ff ff       	jmp    c001ddb8 <Vm::faultHandler(regs*)+0xad>
c001df68:	83 ec 0c             	sub    esp,0xc
c001df6b:	b3 04                	mov    bl,0x4
c001df6d:	68 8a ab 02 c0       	push   0xc002ab8a
c001df72:	e8 da 47 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001df77:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001df7a:	83 c4 10             	add    esp,0x10
c001df7d:	e9 36 fe ff ff       	jmp    c001ddb8 <Vm::faultHandler(regs*)+0xad>
c001df82:	83 ec 0c             	sub    esp,0xc
c001df85:	b3 05                	mov    bl,0x5
c001df87:	68 8e ab 02 c0       	push   0xc002ab8e
c001df8c:	e8 c0 47 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001df91:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001df94:	83 c4 10             	add    esp,0x10
c001df97:	e9 1c fe ff ff       	jmp    c001ddb8 <Vm::faultHandler(regs*)+0xad>
c001df9c:	83 ec 0c             	sub    esp,0xc
c001df9f:	68 92 ab 02 c0       	push   0xc002ab92
c001dfa4:	e8 a8 47 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001dfa9:	83 c4 10             	add    esp,0x10
c001dfac:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001dfaf:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001dfb4:	e9 ff fd ff ff       	jmp    c001ddb8 <Vm::faultHandler(regs*)+0xad>
c001dfb9:	50                   	push   eax
c001dfba:	50                   	push   eax
c001dfbb:	6a 01                	push   0x1
c001dfbd:	68 97 ab 02 c0       	push   0xc002ab97
c001dfc2:	e8 8a 47 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001dfc7:	83 c4 10             	add    esp,0x10
c001dfca:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001dfcd:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001dfd2:	e9 e1 fd ff ff       	jmp    c001ddb8 <Vm::faultHandler(regs*)+0xad>
c001dfd7:	83 ec 0c             	sub    esp,0xc
c001dfda:	68 a5 ab 02 c0       	push   0xc002aba5
c001dfdf:	e8 6d 47 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001dfe4:	83 c4 10             	add    esp,0x10
c001dfe7:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001dfea:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001dfef:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001dff2:	74 2f                	je     c001e023 <Vm::faultHandler(regs*)+0x318>
c001dff4:	83 ea 04             	sub    edx,0x4
c001dff7:	25 ff 0d 00 00       	and    eax,0xdff
c001dffc:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e002:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001e005:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001e008:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e00e:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001e012:	0f 84 bf 04 00 00    	je     c001e4d7 <Vm::faultHandler(regs*)+0x7cc>
c001e018:	80 cc 02             	or     ah,0x2
c001e01b:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001e01e:	e9 b4 04 00 00       	jmp    c001e4d7 <Vm::faultHandler(regs*)+0x7cc>
c001e023:	83 ea 02             	sub    edx,0x2
c001e026:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e02c:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001e02f:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001e033:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e039:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001e03d:	74 05                	je     c001e044 <Vm::faultHandler(regs*)+0x339>
c001e03f:	80 cc 02             	or     ah,0x2
c001e042:	eb 03                	jmp    c001e047 <Vm::faultHandler(regs*)+0x33c>
c001e044:	80 e4 fd             	and    ah,0xfd
c001e047:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001e04b:	e9 87 04 00 00       	jmp    c001e4d7 <Vm::faultHandler(regs*)+0x7cc>
c001e050:	83 ec 0c             	sub    esp,0xc
c001e053:	68 ac ab 02 c0       	push   0xc002abac
c001e058:	e8 f4 46 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001e05d:	83 c4 10             	add    esp,0x10
c001e060:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e065:	74 28                	je     c001e08f <Vm::faultHandler(regs*)+0x384>
c001e067:	8b 06                	mov    eax,DWORD PTR [esi]
c001e069:	25 ff 0d 00 00       	and    eax,0xdff
c001e06e:	0d 00 02 02 00       	or     eax,0x20200
c001e073:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e076:	8b 06                	mov    eax,DWORD PTR [esi]
c001e078:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e07e:	c1 e8 09             	shr    eax,0x9
c001e081:	83 e0 01             	and    eax,0x1
c001e084:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e087:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e08a:	83 c0 04             	add    eax,0x4
c001e08d:	eb 24                	jmp    c001e0b3 <Vm::faultHandler(regs*)+0x3a8>
c001e08f:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001e092:	0d 00 02 02 00       	or     eax,0x20200
c001e097:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e09a:	66 8b 06             	mov    ax,WORD PTR [esi]
c001e09d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e0a3:	66 c1 e8 09          	shr    ax,0x9
c001e0a7:	83 e0 01             	and    eax,0x1
c001e0aa:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e0ad:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e0b0:	83 c0 02             	add    eax,0x2
c001e0b3:	25 ff ff 00 00       	and    eax,0xffff
c001e0b8:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001e0bb:	e9 17 04 00 00       	jmp    c001e4d7 <Vm::faultHandler(regs*)+0x7cc>
c001e0c0:	53                   	push   ebx
c001e0c1:	53                   	push   ebx
c001e0c2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e0c6:	50                   	push   eax
c001e0c7:	68 b2 ab 02 c0       	push   0xc002abb2
c001e0cc:	e8 80 46 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001e0d1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e0d5:	83 c4 10             	add    esp,0x10
c001e0d8:	3c ee                	cmp    al,0xee
c001e0da:	75 10                	jne    c001e0ec <Vm::faultHandler(regs*)+0x3e1>
c001e0dc:	83 ec 0c             	sub    esp,0xc
c001e0df:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e0e2:	e8 fa f8 ff ff       	call   c001d9e1 <Vm::mainloop3(unsigned long)>
c001e0e7:	e9 c0 03 00 00       	jmp    c001e4ac <Vm::faultHandler(regs*)+0x7a1>
c001e0ec:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001e0f0:	83 ec 0c             	sub    esp,0xc
c001e0f3:	53                   	push   ebx
c001e0f4:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001e0f8:	53                   	push   ebx
c001e0f9:	55                   	push   ebp
c001e0fa:	50                   	push   eax
c001e0fb:	57                   	push   edi
c001e0fc:	e8 0c fb ff ff       	call   c001dc0d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001e101:	eb 36                	jmp    c001e139 <Vm::faultHandler(regs*)+0x42e>
c001e103:	83 ec 0c             	sub    esp,0xc
c001e106:	68 bc ab 02 c0       	push   0xc002abbc
c001e10b:	e8 41 46 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001e110:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e115:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e119:	e9 8b 03 00 00       	jmp    c001e4a9 <Vm::faultHandler(regs*)+0x79e>
c001e11e:	83 ec 0c             	sub    esp,0xc
c001e121:	68 c1 ab 02 c0       	push   0xc002abc1
c001e126:	e8 26 46 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001e12b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e130:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001e134:	e9 70 03 00 00       	jmp    c001e4a9 <Vm::faultHandler(regs*)+0x79e>
c001e139:	83 c4 20             	add    esp,0x20
c001e13c:	e9 99 03 00 00       	jmp    c001e4da <Vm::faultHandler(regs*)+0x7cf>
c001e141:	83 ec 0c             	sub    esp,0xc
c001e144:	68 ff ab 02 c0       	push   0xc002abff
c001e149:	e8 03 46 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001e14e:	83 c4 10             	add    esp,0x10
c001e151:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001e154:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e159:	74 0d                	je     c001e168 <Vm::faultHandler(regs*)+0x45d>
c001e15b:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001e162:	0f 87 9e 01 00 00    	ja     c001e306 <Vm::faultHandler(regs*)+0x5fb>
c001e168:	83 ec 0c             	sub    esp,0xc
c001e16b:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e16f:	0f b7 db             	movzx  ebx,bx
c001e172:	50                   	push   eax
c001e173:	e8 9e f7 ff ff       	call   c001d916 <Vm::inbv(unsigned short)>
c001e178:	83 c4 0c             	add    esp,0xc
c001e17b:	0f b6 c0             	movzx  eax,al
c001e17e:	50                   	push   eax
c001e17f:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001e183:	50                   	push   eax
c001e184:	53                   	push   ebx
c001e185:	e8 41 fb ff ff       	call   c001dccb <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001e18a:	83 c4 10             	add    esp,0x10
c001e18d:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e190:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e194:	74 03                	je     c001e199 <Vm::faultHandler(regs*)+0x48e>
c001e196:	48                   	dec    eax
c001e197:	eb 01                	jmp    c001e19a <Vm::faultHandler(regs*)+0x48f>
c001e199:	40                   	inc    eax
c001e19a:	0f b7 c0             	movzx  eax,ax
c001e19d:	eb 7f                	jmp    c001e21e <Vm::faultHandler(regs*)+0x513>
c001e19f:	83 ec 0c             	sub    esp,0xc
c001e1a2:	68 31 ac 02 c0       	push   0xc002ac31
c001e1a7:	e8 a5 45 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001e1ac:	83 c4 10             	add    esp,0x10
c001e1af:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001e1b2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e1b7:	74 0d                	je     c001e1c6 <Vm::faultHandler(regs*)+0x4bb>
c001e1b9:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001e1c0:	0f 87 40 01 00 00    	ja     c001e306 <Vm::faultHandler(regs*)+0x5fb>
c001e1c6:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e1c9:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001e1cd:	0f b7 db             	movzx  ebx,bx
c001e1d0:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e1d5:	74 20                	je     c001e1f7 <Vm::faultHandler(regs*)+0x4ec>
c001e1d7:	ed                   	in     eax,dx
c001e1d8:	51                   	push   ecx
c001e1d9:	50                   	push   eax
c001e1da:	56                   	push   esi
c001e1db:	53                   	push   ebx
c001e1dc:	e8 15 fb ff ff       	call   c001dcf6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001e1e1:	83 c4 10             	add    esp,0x10
c001e1e4:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e1e7:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e1eb:	74 05                	je     c001e1f2 <Vm::faultHandler(regs*)+0x4e7>
c001e1ed:	83 e8 04             	sub    eax,0x4
c001e1f0:	eb 27                	jmp    c001e219 <Vm::faultHandler(regs*)+0x50e>
c001e1f2:	83 c0 04             	add    eax,0x4
c001e1f5:	eb 22                	jmp    c001e219 <Vm::faultHandler(regs*)+0x50e>
c001e1f7:	66 ed                	in     ax,dx
c001e1f9:	0f b7 c0             	movzx  eax,ax
c001e1fc:	52                   	push   edx
c001e1fd:	50                   	push   eax
c001e1fe:	56                   	push   esi
c001e1ff:	53                   	push   ebx
c001e200:	e8 db fa ff ff       	call   c001dce0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001e205:	83 c4 10             	add    esp,0x10
c001e208:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e20b:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e20f:	74 05                	je     c001e216 <Vm::faultHandler(regs*)+0x50b>
c001e211:	83 e8 02             	sub    eax,0x2
c001e214:	eb 03                	jmp    c001e219 <Vm::faultHandler(regs*)+0x50e>
c001e216:	83 c0 02             	add    eax,0x2
c001e219:	25 ff ff 00 00       	and    eax,0xffff
c001e21e:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001e221:	e9 b1 02 00 00       	jmp    c001e4d7 <Vm::faultHandler(regs*)+0x7cc>
c001e226:	83 ec 0c             	sub    esp,0xc
c001e229:	4b                   	dec    ebx
c001e22a:	68 37 ac 02 c0       	push   0xc002ac37
c001e22f:	e8 1d 45 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001e234:	83 c4 10             	add    esp,0x10
c001e237:	80 fb 05             	cmp    bl,0x5
c001e23a:	77 0a                	ja     c001e246 <Vm::faultHandler(regs*)+0x53b>
c001e23c:	0f b6 db             	movzx  ebx,bl
c001e23f:	ff 24 9d a8 ac 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd5358]
c001e246:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001e24a:	eb 1b                	jmp    c001e267 <Vm::faultHandler(regs*)+0x55c>
c001e24c:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001e250:	eb 15                	jmp    c001e267 <Vm::faultHandler(regs*)+0x55c>
c001e252:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001e256:	eb 0f                	jmp    c001e267 <Vm::faultHandler(regs*)+0x55c>
c001e258:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001e25c:	eb 09                	jmp    c001e267 <Vm::faultHandler(regs*)+0x55c>
c001e25e:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001e261:	eb 04                	jmp    c001e267 <Vm::faultHandler(regs*)+0x55c>
c001e263:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e267:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e26c:	74 0d                	je     c001e27b <Vm::faultHandler(regs*)+0x570>
c001e26e:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001e275:	0f 87 8b 00 00 00    	ja     c001e306 <Vm::faultHandler(regs*)+0x5fb>
c001e27b:	53                   	push   ebx
c001e27c:	53                   	push   ebx
c001e27d:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001e281:	52                   	push   edx
c001e282:	50                   	push   eax
c001e283:	e8 0f fa ff ff       	call   c001dc97 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001e288:	5e                   	pop    esi
c001e289:	0f b6 c0             	movzx  eax,al
c001e28c:	5d                   	pop    ebp
c001e28d:	50                   	push   eax
c001e28e:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e292:	50                   	push   eax
c001e293:	e8 91 f6 ff ff       	call   c001d929 <Vm::outbv(unsigned short, unsigned char)>
c001e298:	83 c4 10             	add    esp,0x10
c001e29b:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001e29e:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e2a2:	74 03                	je     c001e2a7 <Vm::faultHandler(regs*)+0x59c>
c001e2a4:	48                   	dec    eax
c001e2a5:	eb 01                	jmp    c001e2a8 <Vm::faultHandler(regs*)+0x59d>
c001e2a7:	40                   	inc    eax
c001e2a8:	0f b7 c0             	movzx  eax,ax
c001e2ab:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001e2ae:	e9 24 02 00 00       	jmp    c001e4d7 <Vm::faultHandler(regs*)+0x7cc>
c001e2b3:	83 ec 0c             	sub    esp,0xc
c001e2b6:	4b                   	dec    ebx
c001e2b7:	68 37 ac 02 c0       	push   0xc002ac37
c001e2bc:	e8 90 44 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001e2c1:	83 c4 10             	add    esp,0x10
c001e2c4:	80 fb 05             	cmp    bl,0x5
c001e2c7:	77 0a                	ja     c001e2d3 <Vm::faultHandler(regs*)+0x5c8>
c001e2c9:	0f b6 db             	movzx  ebx,bl
c001e2cc:	ff 24 9d c0 ac 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd5340]
c001e2d3:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001e2d7:	eb 1b                	jmp    c001e2f4 <Vm::faultHandler(regs*)+0x5e9>
c001e2d9:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001e2dd:	eb 15                	jmp    c001e2f4 <Vm::faultHandler(regs*)+0x5e9>
c001e2df:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001e2e3:	eb 0f                	jmp    c001e2f4 <Vm::faultHandler(regs*)+0x5e9>
c001e2e5:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001e2e9:	eb 09                	jmp    c001e2f4 <Vm::faultHandler(regs*)+0x5e9>
c001e2eb:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001e2ee:	eb 04                	jmp    c001e2f4 <Vm::faultHandler(regs*)+0x5e9>
c001e2f0:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e2f4:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001e2f7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e2fc:	74 39                	je     c001e337 <Vm::faultHandler(regs*)+0x62c>
c001e2fe:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001e304:	76 31                	jbe    c001e337 <Vm::faultHandler(regs*)+0x62c>
c001e306:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001e30a:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e30e:	51                   	push   ecx
c001e30f:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001e313:	51                   	push   ecx
c001e314:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001e318:	51                   	push   ecx
c001e319:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001e31d:	51                   	push   ecx
c001e31e:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e322:	52                   	push   edx
c001e323:	50                   	push   eax
c001e324:	50                   	push   eax
c001e325:	68 04 ac 02 c0       	push   0xc002ac04
c001e32a:	e8 22 44 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001e32f:	83 c4 20             	add    esp,0x20
c001e332:	e9 fb 01 00 00       	jmp    c001e532 <Vm::faultHandler(regs*)+0x827>
c001e337:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001e33a:	0f b7 d3             	movzx  edx,bx
c001e33d:	81 e6 00 04 00 00    	and    esi,0x400
c001e343:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001e346:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e34b:	74 1d                	je     c001e36a <Vm::faultHandler(regs*)+0x65f>
c001e34d:	51                   	push   ecx
c001e34e:	51                   	push   ecx
c001e34f:	52                   	push   edx
c001e350:	50                   	push   eax
c001e351:	e8 64 f9 ff ff       	call   c001dcba <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001e356:	83 c4 10             	add    esp,0x10
c001e359:	89 ea                	mov    edx,ebp
c001e35b:	ef                   	out    dx,eax
c001e35c:	85 f6                	test   esi,esi
c001e35e:	74 05                	je     c001e365 <Vm::faultHandler(regs*)+0x65a>
c001e360:	83 eb 04             	sub    ebx,0x4
c001e363:	eb 21                	jmp    c001e386 <Vm::faultHandler(regs*)+0x67b>
c001e365:	83 c3 04             	add    ebx,0x4
c001e368:	eb 1c                	jmp    c001e386 <Vm::faultHandler(regs*)+0x67b>
c001e36a:	51                   	push   ecx
c001e36b:	51                   	push   ecx
c001e36c:	52                   	push   edx
c001e36d:	50                   	push   eax
c001e36e:	e8 35 f9 ff ff       	call   c001dca8 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001e373:	83 c4 10             	add    esp,0x10
c001e376:	89 ea                	mov    edx,ebp
c001e378:	66 ef                	out    dx,ax
c001e37a:	85 f6                	test   esi,esi
c001e37c:	74 05                	je     c001e383 <Vm::faultHandler(regs*)+0x678>
c001e37e:	83 eb 02             	sub    ebx,0x2
c001e381:	eb 03                	jmp    c001e386 <Vm::faultHandler(regs*)+0x67b>
c001e383:	83 c3 02             	add    ebx,0x2
c001e386:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001e38c:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001e38f:	e9 43 01 00 00       	jmp    c001e4d7 <Vm::faultHandler(regs*)+0x7cc>
c001e394:	53                   	push   ebx
c001e395:	53                   	push   ebx
c001e396:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e39a:	50                   	push   eax
c001e39b:	68 3d ac 02 c0       	push   0xc002ac3d
c001e3a0:	e8 ac 43 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001e3a5:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001e3ac:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e3b0:	89 04 24             	mov    DWORD PTR [esp],eax
c001e3b3:	e8 5e f5 ff ff       	call   c001d916 <Vm::inbv(unsigned short)>
c001e3b8:	0f b6 c0             	movzx  eax,al
c001e3bb:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001e3be:	eb 5e                	jmp    c001e41e <Vm::faultHandler(regs*)+0x713>
c001e3c0:	51                   	push   ecx
c001e3c1:	51                   	push   ecx
c001e3c2:	53                   	push   ebx
c001e3c3:	68 43 ac 02 c0       	push   0xc002ac43
c001e3c8:	e8 84 43 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001e3cd:	83 c4 10             	add    esp,0x10
c001e3d0:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e3d5:	74 07                	je     c001e3de <Vm::faultHandler(regs*)+0x6d3>
c001e3d7:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e3db:	ed                   	in     eax,dx
c001e3dc:	eb 14                	jmp    c001e3f2 <Vm::faultHandler(regs*)+0x6e7>
c001e3de:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001e3e1:	66 31 db             	xor    bx,bx
c001e3e4:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001e3e7:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e3eb:	66 ed                	in     ax,dx
c001e3ed:	0f b7 c0             	movzx  eax,ax
c001e3f0:	09 d8                	or     eax,ebx
c001e3f2:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001e3f5:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001e3f9:	e9 dc 00 00 00       	jmp    c001e4da <Vm::faultHandler(regs*)+0x7cf>
c001e3fe:	50                   	push   eax
c001e3ff:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e402:	53                   	push   ebx
c001e403:	68 49 ac 02 c0       	push   0xc002ac49
c001e408:	e8 44 43 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001e40d:	58                   	pop    eax
c001e40e:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001e412:	5a                   	pop    edx
c001e413:	50                   	push   eax
c001e414:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e418:	50                   	push   eax
c001e419:	e8 0b f5 ff ff       	call   c001d929 <Vm::outbv(unsigned short, unsigned char)>
c001e41e:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001e422:	e9 85 00 00 00       	jmp    c001e4ac <Vm::faultHandler(regs*)+0x7a1>
c001e427:	50                   	push   eax
c001e428:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e42b:	53                   	push   ebx
c001e42c:	68 52 ac 02 c0       	push   0xc002ac52
c001e431:	e8 1b 43 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001e436:	83 c4 10             	add    esp,0x10
c001e439:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e43d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e442:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001e445:	74 03                	je     c001e44a <Vm::faultHandler(regs*)+0x73f>
c001e447:	ef                   	out    dx,eax
c001e448:	eb ab                	jmp    c001e3f5 <Vm::faultHandler(regs*)+0x6ea>
c001e44a:	66 ef                	out    dx,ax
c001e44c:	eb a7                	jmp    c001e3f5 <Vm::faultHandler(regs*)+0x6ea>
c001e44e:	55                   	push   ebp
c001e44f:	55                   	push   ebp
c001e450:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e453:	68 5b ac 02 c0       	push   0xc002ac5b
c001e458:	e8 f4 42 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001e45d:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001e464:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e468:	89 04 24             	mov    DWORD PTR [esp],eax
c001e46b:	e8 a6 f4 ff ff       	call   c001d916 <Vm::inbv(unsigned short)>
c001e470:	0f b6 c0             	movzx  eax,al
c001e473:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001e476:	eb 31                	jmp    c001e4a9 <Vm::faultHandler(regs*)+0x79e>
c001e478:	56                   	push   esi
c001e479:	56                   	push   esi
c001e47a:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e47d:	68 61 ac 02 c0       	push   0xc002ac61
c001e482:	e8 ca 42 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001e487:	83 c4 10             	add    esp,0x10
c001e48a:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e48d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e492:	74 03                	je     c001e497 <Vm::faultHandler(regs*)+0x78c>
c001e494:	ed                   	in     eax,dx
c001e495:	eb 0d                	jmp    c001e4a4 <Vm::faultHandler(regs*)+0x799>
c001e497:	66 ed                	in     ax,dx
c001e499:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001e49c:	0f b7 c0             	movzx  eax,ax
c001e49f:	66 31 d2             	xor    dx,dx
c001e4a2:	09 d0                	or     eax,edx
c001e4a4:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001e4a7:	eb 2e                	jmp    c001e4d7 <Vm::faultHandler(regs*)+0x7cc>
c001e4a9:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e4ac:	83 c4 10             	add    esp,0x10
c001e4af:	eb 29                	jmp    c001e4da <Vm::faultHandler(regs*)+0x7cf>
c001e4b1:	50                   	push   eax
c001e4b2:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e4b5:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e4b8:	68 70 ac 02 c0       	push   0xc002ac70
c001e4bd:	e8 8f 42 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001e4c2:	83 c4 10             	add    esp,0x10
c001e4c5:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e4c8:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e4cd:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001e4d0:	74 03                	je     c001e4d5 <Vm::faultHandler(regs*)+0x7ca>
c001e4d2:	ef                   	out    dx,eax
c001e4d3:	eb 02                	jmp    c001e4d7 <Vm::faultHandler(regs*)+0x7cc>
c001e4d5:	66 ef                	out    dx,ax
c001e4d7:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e4da:	b0 01                	mov    al,0x1
c001e4dc:	eb 56                	jmp    c001e534 <Vm::faultHandler(regs*)+0x829>
c001e4de:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001e4e2:	51                   	push   ecx
c001e4e3:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001e4e7:	51                   	push   ecx
c001e4e8:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001e4ec:	51                   	push   ecx
c001e4ed:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001e4f1:	51                   	push   ecx
c001e4f2:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e4f6:	52                   	push   edx
c001e4f7:	50                   	push   eax
c001e4f8:	50                   	push   eax
c001e4f9:	68 79 ac 02 c0       	push   0xc002ac79
c001e4fe:	e8 4e 42 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001e503:	83 c4 20             	add    esp,0x20
c001e506:	83 ec 0c             	sub    esp,0xc
c001e509:	6a 60                	push   0x60
c001e50b:	e8 06 f4 ff ff       	call   c001d916 <Vm::inbv(unsigned short)>
c001e510:	83 c4 10             	add    esp,0x10
c001e513:	3c 1c                	cmp    al,0x1c
c001e515:	74 04                	je     c001e51b <Vm::faultHandler(regs*)+0x810>
c001e517:	3c 5a                	cmp    al,0x5a
c001e519:	75 eb                	jne    c001e506 <Vm::faultHandler(regs*)+0x7fb>
c001e51b:	3c 1c                	cmp    al,0x1c
c001e51d:	74 04                	je     c001e523 <Vm::faultHandler(regs*)+0x818>
c001e51f:	3c 5a                	cmp    al,0x5a
c001e521:	75 0f                	jne    c001e532 <Vm::faultHandler(regs*)+0x827>
c001e523:	83 ec 0c             	sub    esp,0xc
c001e526:	6a 60                	push   0x60
c001e528:	e8 e9 f3 ff ff       	call   c001d916 <Vm::inbv(unsigned short)>
c001e52d:	83 c4 10             	add    esp,0x10
c001e530:	eb e9                	jmp    c001e51b <Vm::faultHandler(regs*)+0x810>
c001e532:	31 c0                	xor    eax,eax
c001e534:	83 c4 1c             	add    esp,0x1c
c001e537:	5b                   	pop    ebx
c001e538:	5e                   	pop    esi
c001e539:	5f                   	pop    edi
c001e53a:	5d                   	pop    ebp
c001e53b:	c3                   	ret    

c001e53c <Vm::fpuInternalTo32(unsigned long long)>:
c001e53c:	57                   	push   edi
c001e53d:	56                   	push   esi
c001e53e:	53                   	push   ebx
c001e53f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e543:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e547:	89 d6                	mov    esi,edx
c001e549:	89 d7                	mov    edi,edx
c001e54b:	89 c1                	mov    ecx,eax
c001e54d:	c1 ef 14             	shr    edi,0x14
c001e550:	89 d3                	mov    ebx,edx
c001e552:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001e558:	31 d2                	xor    edx,edx
c001e55a:	89 f8                	mov    eax,edi
c001e55c:	81 e6 00 00 00 80    	and    esi,0x80000000
c001e562:	bf ff 00 00 00       	mov    edi,0xff
c001e567:	05 80 fc ff ff       	add    eax,0xfffffc80
c001e56c:	83 d2 ff             	adc    edx,0xffffffff
c001e56f:	39 c7                	cmp    edi,eax
c001e571:	bf 00 00 00 00       	mov    edi,0x0
c001e576:	19 d7                	sbb    edi,edx
c001e578:	72 15                	jb     c001e58f <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001e57a:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001e57e:	c1 e0 17             	shl    eax,0x17
c001e581:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001e587:	09 f1                	or     ecx,esi
c001e589:	09 c1                	or     ecx,eax
c001e58b:	89 cf                	mov    edi,ecx
c001e58d:	eb 02                	jmp    c001e591 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001e58f:	31 ff                	xor    edi,edi
c001e591:	89 f8                	mov    eax,edi
c001e593:	5b                   	pop    ebx
c001e594:	5e                   	pop    esi
c001e595:	5f                   	pop    edi
c001e596:	c3                   	ret    

c001e597 <Vm::fpuInternalTo64(unsigned long long)>:
c001e597:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e59b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e59f:	c3                   	ret    

c001e5a0 <Vm::fpu32ToInternal(unsigned int)>:
c001e5a0:	57                   	push   edi
c001e5a1:	31 ff                	xor    edi,edi
c001e5a3:	56                   	push   esi
c001e5a4:	53                   	push   ebx
c001e5a5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e5a9:	89 cb                	mov    ebx,ecx
c001e5ab:	89 ce                	mov    esi,ecx
c001e5ad:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001e5b3:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001e5b9:	c1 e9 17             	shr    ecx,0x17
c001e5bc:	89 f0                	mov    eax,esi
c001e5be:	0f b6 d1             	movzx  edx,cl
c001e5c1:	81 c2 80 03 00 00    	add    edx,0x380
c001e5c7:	89 d1                	mov    ecx,edx
c001e5c9:	89 fa                	mov    edx,edi
c001e5cb:	c1 e1 14             	shl    ecx,0x14
c001e5ce:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001e5d2:	c1 e0 1d             	shl    eax,0x1d
c001e5d5:	89 d7                	mov    edi,edx
c001e5d7:	89 c6                	mov    esi,eax
c001e5d9:	89 ca                	mov    edx,ecx
c001e5db:	89 f0                	mov    eax,esi
c001e5dd:	09 fa                	or     edx,edi
c001e5df:	09 da                	or     edx,ebx
c001e5e1:	5b                   	pop    ebx
c001e5e2:	5e                   	pop    esi
c001e5e3:	5f                   	pop    edi
c001e5e4:	c3                   	ret    

c001e5e5 <Vm::fpu64ToInternal(unsigned long long)>:
c001e5e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e5e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e5ed:	c3                   	ret    

c001e5ee <Vm::fpuFloatToLong(unsigned long long)>:
c001e5ee:	57                   	push   edi
c001e5ef:	31 c0                	xor    eax,eax
c001e5f1:	56                   	push   esi
c001e5f2:	31 d2                	xor    edx,edx
c001e5f4:	53                   	push   ebx
c001e5f5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e5f9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e5fd:	89 d9                	mov    ecx,ebx
c001e5ff:	c1 e9 14             	shr    ecx,0x14
c001e602:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001e608:	89 cf                	mov    edi,ecx
c001e60a:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001e610:	78 33                	js     c001e645 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001e612:	89 d9                	mov    ecx,ebx
c001e614:	89 f0                	mov    eax,esi
c001e616:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001e61c:	81 c9 00 00 10 00    	or     ecx,0x100000
c001e622:	89 ca                	mov    edx,ecx
c001e624:	b9 34 00 00 00       	mov    ecx,0x34
c001e629:	29 f9                	sub    ecx,edi
c001e62b:	0f ad d0             	shrd   eax,edx,cl
c001e62e:	d3 fa                	sar    edx,cl
c001e630:	f6 c1 20             	test   cl,0x20
c001e633:	74 05                	je     c001e63a <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001e635:	89 d0                	mov    eax,edx
c001e637:	c1 fa 1f             	sar    edx,0x1f
c001e63a:	85 db                	test   ebx,ebx
c001e63c:	79 07                	jns    c001e645 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001e63e:	f7 d8                	neg    eax
c001e640:	83 d2 00             	adc    edx,0x0
c001e643:	f7 da                	neg    edx
c001e645:	5b                   	pop    ebx
c001e646:	5e                   	pop    esi
c001e647:	5f                   	pop    edi
c001e648:	c3                   	ret    

c001e649 <Vm::fpuULongToFloat(unsigned long long)>:
c001e649:	57                   	push   edi
c001e64a:	31 c9                	xor    ecx,ecx
c001e64c:	56                   	push   esi
c001e64d:	53                   	push   ebx
c001e64e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e652:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001e656:	0f ba e7 14          	bt     edi,0x14
c001e65a:	72 07                	jb     c001e663 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001e65c:	01 f6                	add    esi,esi
c001e65e:	11 ff                	adc    edi,edi
c001e660:	41                   	inc    ecx
c001e661:	eb f3                	jmp    c001e656 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001e663:	89 fa                	mov    edx,edi
c001e665:	89 f0                	mov    eax,esi
c001e667:	bb 33 04 00 00       	mov    ebx,0x433
c001e66c:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001e672:	29 cb                	sub    ebx,ecx
c001e674:	89 d9                	mov    ecx,ebx
c001e676:	5b                   	pop    ebx
c001e677:	c1 e1 14             	shl    ecx,0x14
c001e67a:	5e                   	pop    esi
c001e67b:	09 ca                	or     edx,ecx
c001e67d:	5f                   	pop    edi
c001e67e:	c3                   	ret    

c001e67f <Vm::fpuLongToFloat(long long)>:
c001e67f:	56                   	push   esi
c001e680:	31 c0                	xor    eax,eax
c001e682:	53                   	push   ebx
c001e683:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e687:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e68b:	39 c8                	cmp    eax,ecx
c001e68d:	19 d8                	sbb    eax,ebx
c001e68f:	7d 04                	jge    c001e695 <Vm::fpuLongToFloat(long long)+0x16>
c001e691:	31 f6                	xor    esi,esi
c001e693:	eb 0c                	jmp    c001e6a1 <Vm::fpuLongToFloat(long long)+0x22>
c001e695:	f7 d9                	neg    ecx
c001e697:	be 01 00 00 00       	mov    esi,0x1
c001e69c:	83 d3 00             	adc    ebx,0x0
c001e69f:	f7 db                	neg    ebx
c001e6a1:	31 c0                	xor    eax,eax
c001e6a3:	0f ba e3 14          	bt     ebx,0x14
c001e6a7:	72 07                	jb     c001e6b0 <Vm::fpuLongToFloat(long long)+0x31>
c001e6a9:	01 c9                	add    ecx,ecx
c001e6ab:	11 db                	adc    ebx,ebx
c001e6ad:	40                   	inc    eax
c001e6ae:	eb f3                	jmp    c001e6a3 <Vm::fpuLongToFloat(long long)+0x24>
c001e6b0:	ba 33 04 00 00       	mov    edx,0x433
c001e6b5:	29 c2                	sub    edx,eax
c001e6b7:	89 c8                	mov    eax,ecx
c001e6b9:	c1 e2 14             	shl    edx,0x14
c001e6bc:	89 d9                	mov    ecx,ebx
c001e6be:	89 f3                	mov    ebx,esi
c001e6c0:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001e6c6:	09 ca                	or     edx,ecx
c001e6c8:	84 db                	test   bl,bl
c001e6ca:	74 06                	je     c001e6d2 <Vm::fpuLongToFloat(long long)+0x53>
c001e6cc:	81 ca 00 00 00 80    	or     edx,0x80000000
c001e6d2:	5b                   	pop    ebx
c001e6d3:	5e                   	pop    esi
c001e6d4:	c3                   	ret    

c001e6d5 <Vm::fpuGet0()>:
c001e6d5:	31 c0                	xor    eax,eax
c001e6d7:	31 d2                	xor    edx,edx
c001e6d9:	c3                   	ret    

c001e6da <Vm::fpuGet1()>:
c001e6da:	b8 01 00 00 00       	mov    eax,0x1
c001e6df:	31 d2                	xor    edx,edx
c001e6e1:	c3                   	ret    

c001e6e2 <Vm::fpuGetPi()>:
c001e6e2:	b8 03 00 00 00       	mov    eax,0x3
c001e6e7:	31 d2                	xor    edx,edx
c001e6e9:	c3                   	ret    

c001e6ea <Vm::fpuGetLog2E()>:
c001e6ea:	83 ec 18             	sub    esp,0x18
c001e6ed:	68 d8 ac 02 c0       	push   0xc002acd8
c001e6f2:	e8 74 b1 ff ff       	call   c001986b <Krnl::panic(char const*)>
c001e6f7:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e6fc:	31 d2                	xor    edx,edx
c001e6fe:	83 c4 1c             	add    esp,0x1c
c001e701:	c3                   	ret    

c001e702 <Vm::fpuGetLogE2()>:
c001e702:	83 ec 18             	sub    esp,0x18
c001e705:	68 e4 ac 02 c0       	push   0xc002ace4
c001e70a:	e8 5c b1 ff ff       	call   c001986b <Krnl::panic(char const*)>
c001e70f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e714:	31 d2                	xor    edx,edx
c001e716:	83 c4 1c             	add    esp,0x1c
c001e719:	c3                   	ret    

c001e71a <Vm::fpuGetLog210()>:
c001e71a:	83 ec 18             	sub    esp,0x18
c001e71d:	68 f0 ac 02 c0       	push   0xc002acf0
c001e722:	e8 44 b1 ff ff       	call   c001986b <Krnl::panic(char const*)>
c001e727:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e72c:	31 d2                	xor    edx,edx
c001e72e:	83 c4 1c             	add    esp,0x1c
c001e731:	c3                   	ret    

c001e732 <Vm::fpuGetLog102()>:
c001e732:	83 ec 18             	sub    esp,0x18
c001e735:	68 fd ac 02 c0       	push   0xc002acfd
c001e73a:	e8 2c b1 ff ff       	call   c001986b <Krnl::panic(char const*)>
c001e73f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e744:	31 d2                	xor    edx,edx
c001e746:	83 c4 1c             	add    esp,0x1c
c001e749:	c3                   	ret    

c001e74a <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001e74a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e74e:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001e752:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e756:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001e75a:	0f 92 c0             	setb   al
c001e75d:	c3                   	ret    

c001e75e <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001e75e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e762:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e766:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001e76a:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001e76e:	09 c2                	or     edx,eax
c001e770:	0f 94 c0             	sete   al
c001e773:	c3                   	ret    

c001e774 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001e774:	57                   	push   edi
c001e775:	56                   	push   esi
c001e776:	53                   	push   ebx
c001e777:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e77b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e77f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001e783:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001e787:	57                   	push   edi
c001e788:	56                   	push   esi
c001e789:	53                   	push   ebx
c001e78a:	51                   	push   ecx
c001e78b:	e8 ce ff ff ff       	call   c001e75e <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001e790:	83 c4 10             	add    esp,0x10
c001e793:	88 c2                	mov    dl,al
c001e795:	31 c0                	xor    eax,eax
c001e797:	84 d2                	test   dl,dl
c001e799:	75 0c                	jne    c001e7a7 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001e79b:	57                   	push   edi
c001e79c:	56                   	push   esi
c001e79d:	53                   	push   ebx
c001e79e:	51                   	push   ecx
c001e79f:	e8 a6 ff ff ff       	call   c001e74a <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001e7a4:	83 c4 10             	add    esp,0x10
c001e7a7:	83 e0 01             	and    eax,0x1
c001e7aa:	5b                   	pop    ebx
c001e7ab:	88 c1                	mov    cl,al
c001e7ad:	83 e2 01             	and    edx,0x1
c001e7b0:	a0 c1 de 02 c0       	mov    al,ds:0xc002dec1
c001e7b5:	c1 e2 06             	shl    edx,0x6
c001e7b8:	83 e0 ba             	and    eax,0xffffffba
c001e7bb:	5e                   	pop    esi
c001e7bc:	09 c8                	or     eax,ecx
c001e7be:	5f                   	pop    edi
c001e7bf:	09 d0                	or     eax,edx
c001e7c1:	a2 c1 de 02 c0       	mov    ds:0xc002dec1,al
c001e7c6:	c3                   	ret    

c001e7c7 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001e7c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e7cb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e7cf:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001e7d3:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001e7d7:	c3                   	ret    

c001e7d8 <Vm::fpuAbs(unsigned long long)>:
c001e7d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e7dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e7e0:	c3                   	ret    

c001e7e1 <Vm::fpuChs(unsigned long long)>:
c001e7e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e7e5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e7e9:	f7 d8                	neg    eax
c001e7eb:	83 d2 00             	adc    edx,0x0
c001e7ee:	f7 da                	neg    edx
c001e7f0:	c3                   	ret    

c001e7f1 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001e7f1:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001e7f5:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001e7fa:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001e7fe:	eb c7                	jmp    c001e7c7 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001e800 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001e800:	53                   	push   ebx
c001e801:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e805:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e809:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e80d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e811:	0f af ca             	imul   ecx,edx
c001e814:	0f af d8             	imul   ebx,eax
c001e817:	f7 e2                	mul    edx
c001e819:	01 d9                	add    ecx,ebx
c001e81b:	5b                   	pop    ebx
c001e81c:	01 ca                	add    edx,ecx
c001e81e:	c3                   	ret    

c001e81f <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001e81f:	83 ec 0c             	sub    esp,0xc
c001e822:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e826:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e82a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e82e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e832:	e8 45 6b 00 00       	call   c002537c <__udivdi3>
c001e837:	83 c4 1c             	add    esp,0x1c
c001e83a:	c3                   	ret    

c001e83b <Vm::fpuSquare(unsigned long long)>:
c001e83b:	50                   	push   eax
c001e83c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e840:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e844:	52                   	push   edx
c001e845:	50                   	push   eax
c001e846:	52                   	push   edx
c001e847:	50                   	push   eax
c001e848:	e8 b3 ff ff ff       	call   c001e800 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001e84d:	83 c4 14             	add    esp,0x14
c001e850:	c3                   	ret    

c001e851 <Vm::fpuGetReg(int)>:
c001e851:	83 ec 0c             	sub    esp,0xc
c001e854:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001e859:	76 10                	jbe    c001e86b <Vm::fpuGetReg(int)+0x1a>
c001e85b:	83 ec 0c             	sub    esp,0xc
c001e85e:	68 0a ad 02 c0       	push   0xc002ad0a
c001e863:	e8 03 b0 ff ff       	call   c001986b <Krnl::panic(char const*)>
c001e868:	83 c4 10             	add    esp,0x10
c001e86b:	a0 c1 de 02 c0       	mov    al,ds:0xc002dec1
c001e870:	b9 08 00 00 00       	mov    ecx,0x8
c001e875:	c0 e8 03             	shr    al,0x3
c001e878:	83 e0 07             	and    eax,0x7
c001e87b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e87f:	99                   	cdq    
c001e880:	f7 f9                	idiv   ecx
c001e882:	8b 04 d5 c4 de 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd213c]
c001e889:	8b 14 d5 c8 de 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd2138]
c001e890:	83 c4 0c             	add    esp,0xc
c001e893:	c3                   	ret    

c001e894 <Vm::fpuSetReg(int, unsigned long long)>:
c001e894:	57                   	push   edi
c001e895:	56                   	push   esi
c001e896:	52                   	push   edx
c001e897:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001e89b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e89f:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001e8a4:	76 10                	jbe    c001e8b6 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001e8a6:	83 ec 0c             	sub    esp,0xc
c001e8a9:	68 1d ad 02 c0       	push   0xc002ad1d
c001e8ae:	e8 b8 af ff ff       	call   c001986b <Krnl::panic(char const*)>
c001e8b3:	83 c4 10             	add    esp,0x10
c001e8b6:	a0 c1 de 02 c0       	mov    al,ds:0xc002dec1
c001e8bb:	b9 08 00 00 00       	mov    ecx,0x8
c001e8c0:	c0 e8 03             	shr    al,0x3
c001e8c3:	83 e0 07             	and    eax,0x7
c001e8c6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e8ca:	99                   	cdq    
c001e8cb:	f7 f9                	idiv   ecx
c001e8cd:	89 34 d5 c4 de 02 c0 	mov    DWORD PTR [edx*8-0x3ffd213c],esi
c001e8d4:	89 3c d5 c8 de 02 c0 	mov    DWORD PTR [edx*8-0x3ffd2138],edi
c001e8db:	58                   	pop    eax
c001e8dc:	5e                   	pop    esi
c001e8dd:	5f                   	pop    edi
c001e8de:	c3                   	ret    

c001e8df <Vm::fpuPush(unsigned long long)>:
c001e8df:	a0 c1 de 02 c0       	mov    al,ds:0xc002dec1
c001e8e4:	c0 e8 03             	shr    al,0x3
c001e8e7:	83 e0 07             	and    eax,0x7
c001e8ea:	83 c0 07             	add    eax,0x7
c001e8ed:	88 c2                	mov    dl,al
c001e8ef:	83 e0 07             	and    eax,0x7
c001e8f2:	83 e2 07             	and    edx,0x7
c001e8f5:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001e8fc:	8a 15 c1 de 02 c0    	mov    dl,BYTE PTR ds:0xc002dec1
c001e902:	83 e2 c7             	and    edx,0xffffffc7
c001e905:	09 ca                	or     edx,ecx
c001e907:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e90b:	88 15 c1 de 02 c0    	mov    BYTE PTR ds:0xc002dec1,dl
c001e911:	89 0c c5 c8 de 02 c0 	mov    DWORD PTR [eax*8-0x3ffd2138],ecx
c001e918:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e91c:	89 14 c5 c4 de 02 c0 	mov    DWORD PTR [eax*8-0x3ffd213c],edx
c001e923:	a1 04 df 02 c0       	mov    eax,ds:0xc002df04
c001e928:	83 f8 08             	cmp    eax,0x8
c001e92b:	75 08                	jne    c001e935 <Vm::fpuPush(unsigned long long)+0x56>
c001e92d:	80 0d c0 de 02 c0 40 	or     BYTE PTR ds:0xc002dec0,0x40
c001e934:	c3                   	ret    
c001e935:	40                   	inc    eax
c001e936:	a3 04 df 02 c0       	mov    ds:0xc002df04,eax
c001e93b:	c3                   	ret    

c001e93c <Vm::fpuPop()>:
c001e93c:	8a 0d c1 de 02 c0    	mov    cl,BYTE PTR ds:0xc002dec1
c001e942:	53                   	push   ebx
c001e943:	c0 e9 03             	shr    cl,0x3
c001e946:	8a 1d c1 de 02 c0    	mov    bl,BYTE PTR ds:0xc002dec1
c001e94c:	83 e1 07             	and    ecx,0x7
c001e94f:	83 e3 c7             	and    ebx,0xffffffc7
c001e952:	8b 04 cd c4 de 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd213c]
c001e959:	8b 14 cd c8 de 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd2138]
c001e960:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001e967:	83 e1 38             	and    ecx,0x38
c001e96a:	09 d9                	or     ecx,ebx
c001e96c:	88 0d c1 de 02 c0    	mov    BYTE PTR ds:0xc002dec1,cl
c001e972:	8b 0d 04 df 02 c0    	mov    ecx,DWORD PTR ds:0xc002df04
c001e978:	85 c9                	test   ecx,ecx
c001e97a:	74 09                	je     c001e985 <Vm::fpuPop()+0x49>
c001e97c:	49                   	dec    ecx
c001e97d:	89 0d 04 df 02 c0    	mov    DWORD PTR ds:0xc002df04,ecx
c001e983:	eb 07                	jmp    c001e98c <Vm::fpuPop()+0x50>
c001e985:	80 0d c0 de 02 c0 40 	or     BYTE PTR ds:0xc002dec0,0x40
c001e98c:	5b                   	pop    ebx
c001e98d:	c3                   	ret    

c001e98e <Vm::x87Handler(regs*)>:
c001e98e:	55                   	push   ebp
c001e98f:	57                   	push   edi
c001e990:	56                   	push   esi
c001e991:	53                   	push   ebx
c001e992:	83 ec 1c             	sub    esp,0x1c
c001e995:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e999:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001e99e:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001e9a1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001e9a9:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001e9ad:	50                   	push   eax
c001e9ae:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001e9b2:	50                   	push   eax
c001e9b3:	8d 44 24 14          	lea    eax,[esp+0x14]
c001e9b7:	50                   	push   eax
c001e9b8:	53                   	push   ebx
c001e9b9:	e8 de a6 ff ff       	call   c001909c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001e9be:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001e9c1:	83 c4 10             	add    esp,0x10
c001e9c4:	89 c6                	mov    esi,eax
c001e9c6:	80 fa d9             	cmp    dl,0xd9
c001e9c9:	0f 85 52 01 00 00    	jne    c001eb21 <Vm::x87Handler(regs*)+0x193>
c001e9cf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e9d3:	8d 50 20             	lea    edx,[eax+0x20]
c001e9d6:	80 fa 0e             	cmp    dl,0xe
c001e9d9:	0f 87 86 00 00 00    	ja     c001ea65 <Vm::x87Handler(regs*)+0xd7>
c001e9df:	0f b6 d2             	movzx  edx,dl
c001e9e2:	ff 24 95 30 ad 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd52d0]
c001e9e9:	e8 e7 fc ff ff       	call   c001e6d5 <Vm::fpuGet0()>
c001e9ee:	eb 05                	jmp    c001e9f5 <Vm::x87Handler(regs*)+0x67>
c001e9f0:	e8 e5 fc ff ff       	call   c001e6da <Vm::fpuGet1()>
c001e9f5:	57                   	push   edi
c001e9f6:	57                   	push   edi
c001e9f7:	52                   	push   edx
c001e9f8:	50                   	push   eax
c001e9f9:	e8 e1 fe ff ff       	call   c001e8df <Vm::fpuPush(unsigned long long)>
c001e9fe:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ea02:	83 c4 10             	add    esp,0x10
c001ea05:	b0 01                	mov    al,0x1
c001ea07:	e9 e3 09 00 00       	jmp    c001f3ef <Vm::x87Handler(regs*)+0xa61>
c001ea0c:	83 ec 0c             	sub    esp,0xc
c001ea0f:	6a 00                	push   0x0
c001ea11:	e8 3b fe ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001ea16:	59                   	pop    ecx
c001ea17:	5e                   	pop    esi
c001ea18:	52                   	push   edx
c001ea19:	50                   	push   eax
c001ea1a:	e8 c2 fd ff ff       	call   c001e7e1 <Vm::fpuChs(unsigned long long)>
c001ea1f:	eb 13                	jmp    c001ea34 <Vm::x87Handler(regs*)+0xa6>
c001ea21:	83 ec 0c             	sub    esp,0xc
c001ea24:	6a 00                	push   0x0
c001ea26:	e8 26 fe ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001ea2b:	5f                   	pop    edi
c001ea2c:	5d                   	pop    ebp
c001ea2d:	52                   	push   edx
c001ea2e:	50                   	push   eax
c001ea2f:	e8 a4 fd ff ff       	call   c001e7d8 <Vm::fpuAbs(unsigned long long)>
c001ea34:	83 c4 0c             	add    esp,0xc
c001ea37:	52                   	push   edx
c001ea38:	50                   	push   eax
c001ea39:	6a 00                	push   0x0
c001ea3b:	e8 54 fe ff ff       	call   c001e894 <Vm::fpuSetReg(int, unsigned long long)>
c001ea40:	eb bc                	jmp    c001e9fe <Vm::x87Handler(regs*)+0x70>
c001ea42:	e8 d3 fc ff ff       	call   c001e71a <Vm::fpuGetLog210()>
c001ea47:	eb ac                	jmp    c001e9f5 <Vm::x87Handler(regs*)+0x67>
c001ea49:	e8 9c fc ff ff       	call   c001e6ea <Vm::fpuGetLog2E()>
c001ea4e:	eb a5                	jmp    c001e9f5 <Vm::x87Handler(regs*)+0x67>
c001ea50:	e8 8d fc ff ff       	call   c001e6e2 <Vm::fpuGetPi()>
c001ea55:	eb 9e                	jmp    c001e9f5 <Vm::x87Handler(regs*)+0x67>
c001ea57:	e8 d6 fc ff ff       	call   c001e732 <Vm::fpuGetLog102()>
c001ea5c:	eb 97                	jmp    c001e9f5 <Vm::x87Handler(regs*)+0x67>
c001ea5e:	e8 9f fc ff ff       	call   c001e702 <Vm::fpuGetLogE2()>
c001ea63:	eb 90                	jmp    c001e9f5 <Vm::x87Handler(regs*)+0x67>
c001ea65:	8d 50 40             	lea    edx,[eax+0x40]
c001ea68:	80 fa 07             	cmp    dl,0x7
c001ea6b:	77 15                	ja     c001ea82 <Vm::x87Handler(regs*)+0xf4>
c001ea6d:	83 ec 0c             	sub    esp,0xc
c001ea70:	2d c0 00 00 00       	sub    eax,0xc0
c001ea75:	50                   	push   eax
c001ea76:	e8 d6 fd ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001ea7b:	59                   	pop    ecx
c001ea7c:	5e                   	pop    esi
c001ea7d:	e9 75 ff ff ff       	jmp    c001e9f7 <Vm::x87Handler(regs*)+0x69>
c001ea82:	8d 50 38             	lea    edx,[eax+0x38]
c001ea85:	80 fa 07             	cmp    dl,0x7
c001ea88:	77 3c                	ja     c001eac6 <Vm::x87Handler(regs*)+0x138>
c001ea8a:	83 ec 0c             	sub    esp,0xc
c001ea8d:	2d c8 00 00 00       	sub    eax,0xc8
c001ea92:	50                   	push   eax
c001ea93:	e8 b9 fd ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001ea98:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ea9f:	89 c6                	mov    esi,eax
c001eaa1:	89 d7                	mov    edi,edx
c001eaa3:	e8 a9 fd ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001eaa8:	83 c4 0c             	add    esp,0xc
c001eaab:	52                   	push   edx
c001eaac:	50                   	push   eax
c001eaad:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eab1:	2d c8 00 00 00       	sub    eax,0xc8
c001eab6:	50                   	push   eax
c001eab7:	e8 d8 fd ff ff       	call   c001e894 <Vm::fpuSetReg(int, unsigned long long)>
c001eabc:	83 c4 0c             	add    esp,0xc
c001eabf:	57                   	push   edi
c001eac0:	56                   	push   esi
c001eac1:	e9 73 ff ff ff       	jmp    c001ea39 <Vm::x87Handler(regs*)+0xab>
c001eac6:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001eaca:	84 d2                	test   dl,dl
c001eacc:	75 0f                	jne    c001eadd <Vm::x87Handler(regs*)+0x14f>
c001eace:	83 ec 0c             	sub    esp,0xc
c001ead1:	ff 36                	push   DWORD PTR [esi]
c001ead3:	e8 c8 fa ff ff       	call   c001e5a0 <Vm::fpu32ToInternal(unsigned int)>
c001ead8:	e9 bf 00 00 00       	jmp    c001eb9c <Vm::x87Handler(regs*)+0x20e>
c001eadd:	80 fa 03             	cmp    dl,0x3
c001eae0:	75 13                	jne    c001eaf5 <Vm::x87Handler(regs*)+0x167>
c001eae2:	e8 55 fe ff ff       	call   c001e93c <Vm::fpuPop()>
c001eae7:	55                   	push   ebp
c001eae8:	55                   	push   ebp
c001eae9:	52                   	push   edx
c001eaea:	50                   	push   eax
c001eaeb:	e8 4c fa ff ff       	call   c001e53c <Vm::fpuInternalTo32(unsigned long long)>
c001eaf0:	e9 88 00 00 00       	jmp    c001eb7d <Vm::x87Handler(regs*)+0x1ef>
c001eaf5:	80 fa 05             	cmp    dl,0x5
c001eaf8:	75 0e                	jne    c001eb08 <Vm::x87Handler(regs*)+0x17a>
c001eafa:	66 8b 06             	mov    ax,WORD PTR [esi]
c001eafd:	66 a3 c2 de 02 c0    	mov    ds:0xc002dec2,ax
c001eb03:	e9 df 00 00 00       	jmp    c001ebe7 <Vm::x87Handler(regs*)+0x259>
c001eb08:	31 c0                	xor    eax,eax
c001eb0a:	80 fa 07             	cmp    dl,0x7
c001eb0d:	0f 85 dc 08 00 00    	jne    c001f3ef <Vm::x87Handler(regs*)+0xa61>
c001eb13:	66 a1 c2 de 02 c0    	mov    ax,ds:0xc002dec2
c001eb19:	66 89 06             	mov    WORD PTR [esi],ax
c001eb1c:	e9 c6 00 00 00       	jmp    c001ebe7 <Vm::x87Handler(regs*)+0x259>
c001eb21:	80 fa d8             	cmp    dl,0xd8
c001eb24:	0f 84 c9 00 00 00    	je     c001ebf3 <Vm::x87Handler(regs*)+0x265>
c001eb2a:	80 fa dc             	cmp    dl,0xdc
c001eb2d:	0f 84 0d 02 00 00    	je     c001ed40 <Vm::x87Handler(regs*)+0x3b2>
c001eb33:	80 fa de             	cmp    dl,0xde
c001eb36:	0f 84 cd 02 00 00    	je     c001ee09 <Vm::x87Handler(regs*)+0x47b>
c001eb3c:	80 fa dd             	cmp    dl,0xdd
c001eb3f:	0f 84 5f 04 00 00    	je     c001efa4 <Vm::x87Handler(regs*)+0x616>
c001eb45:	80 fa da             	cmp    dl,0xda
c001eb48:	0f 84 24 05 00 00    	je     c001f072 <Vm::x87Handler(regs*)+0x6e4>
c001eb4e:	80 fa df             	cmp    dl,0xdf
c001eb51:	0f 84 68 05 00 00    	je     c001f0bf <Vm::x87Handler(regs*)+0x731>
c001eb57:	31 c0                	xor    eax,eax
c001eb59:	80 fa db             	cmp    dl,0xdb
c001eb5c:	0f 85 8d 08 00 00    	jne    c001f3ef <Vm::x87Handler(regs*)+0xa61>
c001eb62:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001eb66:	80 fa 03             	cmp    dl,0x3
c001eb69:	0f 85 70 06 00 00    	jne    c001f1df <Vm::x87Handler(regs*)+0x851>
c001eb6f:	e8 c8 fd ff ff       	call   c001e93c <Vm::fpuPop()>
c001eb74:	55                   	push   ebp
c001eb75:	55                   	push   ebp
c001eb76:	52                   	push   edx
c001eb77:	50                   	push   eax
c001eb78:	e8 71 fa ff ff       	call   c001e5ee <Vm::fpuFloatToLong(unsigned long long)>
c001eb7d:	83 c4 10             	add    esp,0x10
c001eb80:	89 06                	mov    DWORD PTR [esi],eax
c001eb82:	eb 63                	jmp    c001ebe7 <Vm::x87Handler(regs*)+0x259>
c001eb84:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001eb88:	84 d2                	test   dl,dl
c001eb8a:	0f 85 e6 05 00 00    	jne    c001f176 <Vm::x87Handler(regs*)+0x7e8>
c001eb90:	57                   	push   edi
c001eb91:	57                   	push   edi
c001eb92:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001eb95:	ff 36                	push   DWORD PTR [esi]
c001eb97:	e8 49 fa ff ff       	call   c001e5e5 <Vm::fpu64ToInternal(unsigned long long)>
c001eb9c:	5e                   	pop    esi
c001eb9d:	5f                   	pop    edi
c001eb9e:	52                   	push   edx
c001eb9f:	50                   	push   eax
c001eba0:	e8 3a fd ff ff       	call   c001e8df <Vm::fpuPush(unsigned long long)>
c001eba5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eba9:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001ebac:	e9 51 fe ff ff       	jmp    c001ea02 <Vm::x87Handler(regs*)+0x74>
c001ebb1:	80 fa 03             	cmp    dl,0x3
c001ebb4:	0f 85 d7 06 00 00    	jne    c001f291 <Vm::x87Handler(regs*)+0x903>
c001ebba:	57                   	push   edi
c001ebbb:	57                   	push   edi
c001ebbc:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ebbf:	ff 36                	push   DWORD PTR [esi]
c001ebc1:	e8 1f fa ff ff       	call   c001e5e5 <Vm::fpu64ToInternal(unsigned long long)>
c001ebc6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ebcd:	89 c6                	mov    esi,eax
c001ebcf:	89 d7                	mov    edi,edx
c001ebd1:	e8 7b fc ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001ebd6:	57                   	push   edi
c001ebd7:	56                   	push   esi
c001ebd8:	52                   	push   edx
c001ebd9:	50                   	push   eax
c001ebda:	e8 95 fb ff ff       	call   c001e774 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ebdf:	83 c4 20             	add    esp,0x20
c001ebe2:	e8 55 fd ff ff       	call   c001e93c <Vm::fpuPop()>
c001ebe7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ebeb:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001ebee:	e9 12 fe ff ff       	jmp    c001ea05 <Vm::x87Handler(regs*)+0x77>
c001ebf3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ebf7:	8d 50 40             	lea    edx,[eax+0x40]
c001ebfa:	80 fa 07             	cmp    dl,0x7
c001ebfd:	77 29                	ja     c001ec28 <Vm::x87Handler(regs*)+0x29a>
c001ebff:	83 ec 0c             	sub    esp,0xc
c001ec02:	2d c0 00 00 00       	sub    eax,0xc0
c001ec07:	50                   	push   eax
c001ec08:	e8 44 fc ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001ec0d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ec14:	89 c6                	mov    esi,eax
c001ec16:	89 d7                	mov    edi,edx
c001ec18:	e8 34 fc ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001ec1d:	57                   	push   edi
c001ec1e:	56                   	push   esi
c001ec1f:	52                   	push   edx
c001ec20:	50                   	push   eax
c001ec21:	e8 a1 fb ff ff       	call   c001e7c7 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ec26:	eb 2f                	jmp    c001ec57 <Vm::x87Handler(regs*)+0x2c9>
c001ec28:	8d 50 38             	lea    edx,[eax+0x38]
c001ec2b:	80 fa 07             	cmp    dl,0x7
c001ec2e:	77 2f                	ja     c001ec5f <Vm::x87Handler(regs*)+0x2d1>
c001ec30:	83 ec 0c             	sub    esp,0xc
c001ec33:	2d c8 00 00 00       	sub    eax,0xc8
c001ec38:	50                   	push   eax
c001ec39:	e8 13 fc ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001ec3e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ec45:	89 c6                	mov    esi,eax
c001ec47:	89 d7                	mov    edi,edx
c001ec49:	e8 03 fc ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001ec4e:	57                   	push   edi
c001ec4f:	56                   	push   esi
c001ec50:	52                   	push   edx
c001ec51:	50                   	push   eax
c001ec52:	e8 a9 fb ff ff       	call   c001e800 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ec57:	83 c4 1c             	add    esp,0x1c
c001ec5a:	e9 d8 fd ff ff       	jmp    c001ea37 <Vm::x87Handler(regs*)+0xa9>
c001ec5f:	8d 50 30             	lea    edx,[eax+0x30]
c001ec62:	80 fa 07             	cmp    dl,0x7
c001ec65:	77 0d                	ja     c001ec74 <Vm::x87Handler(regs*)+0x2e6>
c001ec67:	83 ec 0c             	sub    esp,0xc
c001ec6a:	2d d0 00 00 00       	sub    eax,0xd0
c001ec6f:	e9 99 03 00 00       	jmp    c001f00d <Vm::x87Handler(regs*)+0x67f>
c001ec74:	8d 50 28             	lea    edx,[eax+0x28]
c001ec77:	80 fa 07             	cmp    dl,0x7
c001ec7a:	77 0d                	ja     c001ec89 <Vm::x87Handler(regs*)+0x2fb>
c001ec7c:	83 ec 0c             	sub    esp,0xc
c001ec7f:	2d d8 00 00 00       	sub    eax,0xd8
c001ec84:	e9 c0 03 00 00       	jmp    c001f049 <Vm::x87Handler(regs*)+0x6bb>
c001ec89:	8d 50 20             	lea    edx,[eax+0x20]
c001ec8c:	80 fa 07             	cmp    dl,0x7
c001ec8f:	77 1b                	ja     c001ecac <Vm::x87Handler(regs*)+0x31e>
c001ec91:	83 ec 0c             	sub    esp,0xc
c001ec94:	2d e0 00 00 00       	sub    eax,0xe0
c001ec99:	50                   	push   eax
c001ec9a:	e8 b2 fb ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001ec9f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001eca6:	89 c6                	mov    esi,eax
c001eca8:	89 d7                	mov    edi,edx
c001ecaa:	eb 22                	jmp    c001ecce <Vm::x87Handler(regs*)+0x340>
c001ecac:	8d 50 18             	lea    edx,[eax+0x18]
c001ecaf:	80 fa 07             	cmp    dl,0x7
c001ecb2:	77 2d                	ja     c001ece1 <Vm::x87Handler(regs*)+0x353>
c001ecb4:	83 ec 0c             	sub    esp,0xc
c001ecb7:	6a 00                	push   0x0
c001ecb9:	e8 93 fb ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001ecbe:	89 c6                	mov    esi,eax
c001ecc0:	89 d7                	mov    edi,edx
c001ecc2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ecc6:	2d e8 00 00 00       	sub    eax,0xe8
c001eccb:	89 04 24             	mov    DWORD PTR [esp],eax
c001ecce:	e8 7e fb ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001ecd3:	57                   	push   edi
c001ecd4:	56                   	push   esi
c001ecd5:	52                   	push   edx
c001ecd6:	50                   	push   eax
c001ecd7:	e8 15 fb ff ff       	call   c001e7f1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ecdc:	e9 76 ff ff ff       	jmp    c001ec57 <Vm::x87Handler(regs*)+0x2c9>
c001ece1:	8d 50 10             	lea    edx,[eax+0x10]
c001ece4:	80 fa 07             	cmp    dl,0x7
c001ece7:	77 1b                	ja     c001ed04 <Vm::x87Handler(regs*)+0x376>
c001ece9:	83 ec 0c             	sub    esp,0xc
c001ecec:	2d f0 00 00 00       	sub    eax,0xf0
c001ecf1:	50                   	push   eax
c001ecf2:	e8 5a fb ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001ecf7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ecfe:	89 c6                	mov    esi,eax
c001ed00:	89 d7                	mov    edi,edx
c001ed02:	eb 22                	jmp    c001ed26 <Vm::x87Handler(regs*)+0x398>
c001ed04:	3c f7                	cmp    al,0xf7
c001ed06:	0f 86 d1 03 00 00    	jbe    c001f0dd <Vm::x87Handler(regs*)+0x74f>
c001ed0c:	83 ec 0c             	sub    esp,0xc
c001ed0f:	6a 00                	push   0x0
c001ed11:	e8 3b fb ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001ed16:	89 c6                	mov    esi,eax
c001ed18:	89 d7                	mov    edi,edx
c001ed1a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ed1e:	2d f8 00 00 00       	sub    eax,0xf8
c001ed23:	89 04 24             	mov    DWORD PTR [esp],eax
c001ed26:	e8 26 fb ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001ed2b:	57                   	push   edi
c001ed2c:	56                   	push   esi
c001ed2d:	52                   	push   edx
c001ed2e:	50                   	push   eax
c001ed2f:	e8 eb fa ff ff       	call   c001e81f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ed34:	83 c4 1c             	add    esp,0x1c
c001ed37:	52                   	push   edx
c001ed38:	50                   	push   eax
c001ed39:	6a 00                	push   0x0
c001ed3b:	e9 51 02 00 00       	jmp    c001ef91 <Vm::x87Handler(regs*)+0x603>
c001ed40:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ed44:	8d 50 40             	lea    edx,[eax+0x40]
c001ed47:	80 fa 07             	cmp    dl,0x7
c001ed4a:	77 37                	ja     c001ed83 <Vm::x87Handler(regs*)+0x3f5>
c001ed4c:	83 ec 0c             	sub    esp,0xc
c001ed4f:	2d c0 00 00 00       	sub    eax,0xc0
c001ed54:	50                   	push   eax
c001ed55:	e8 f7 fa ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001ed5a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ed61:	89 c6                	mov    esi,eax
c001ed63:	89 d7                	mov    edi,edx
c001ed65:	e8 e7 fa ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001ed6a:	57                   	push   edi
c001ed6b:	56                   	push   esi
c001ed6c:	52                   	push   edx
c001ed6d:	50                   	push   eax
c001ed6e:	e8 54 fa ff ff       	call   c001e7c7 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ed73:	83 c4 1c             	add    esp,0x1c
c001ed76:	52                   	push   edx
c001ed77:	50                   	push   eax
c001ed78:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ed7c:	2d c0 00 00 00       	sub    eax,0xc0
c001ed81:	eb 3d                	jmp    c001edc0 <Vm::x87Handler(regs*)+0x432>
c001ed83:	8d 50 38             	lea    edx,[eax+0x38]
c001ed86:	80 fa 07             	cmp    dl,0x7
c001ed89:	77 3b                	ja     c001edc6 <Vm::x87Handler(regs*)+0x438>
c001ed8b:	83 ec 0c             	sub    esp,0xc
c001ed8e:	2d c8 00 00 00       	sub    eax,0xc8
c001ed93:	50                   	push   eax
c001ed94:	e8 b8 fa ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001ed99:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001eda0:	89 c6                	mov    esi,eax
c001eda2:	89 d7                	mov    edi,edx
c001eda4:	e8 a8 fa ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001eda9:	57                   	push   edi
c001edaa:	56                   	push   esi
c001edab:	52                   	push   edx
c001edac:	50                   	push   eax
c001edad:	e8 4e fa ff ff       	call   c001e800 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001edb2:	83 c4 1c             	add    esp,0x1c
c001edb5:	52                   	push   edx
c001edb6:	50                   	push   eax
c001edb7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001edbb:	2d c8 00 00 00       	sub    eax,0xc8
c001edc0:	50                   	push   eax
c001edc1:	e9 75 fc ff ff       	jmp    c001ea3b <Vm::x87Handler(regs*)+0xad>
c001edc6:	83 c0 18             	add    eax,0x18
c001edc9:	3c 07                	cmp    al,0x7
c001edcb:	0f 87 3b 04 00 00    	ja     c001f20c <Vm::x87Handler(regs*)+0x87e>
c001edd1:	83 ec 0c             	sub    esp,0xc
c001edd4:	6a 00                	push   0x0
c001edd6:	e8 76 fa ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001eddb:	89 c6                	mov    esi,eax
c001eddd:	89 d7                	mov    edi,edx
c001eddf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ede3:	2d e8 00 00 00       	sub    eax,0xe8
c001ede8:	89 04 24             	mov    DWORD PTR [esp],eax
c001edeb:	e8 61 fa ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001edf0:	57                   	push   edi
c001edf1:	56                   	push   esi
c001edf2:	52                   	push   edx
c001edf3:	50                   	push   eax
c001edf4:	e8 f8 f9 ff ff       	call   c001e7f1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001edf9:	83 c4 1c             	add    esp,0x1c
c001edfc:	52                   	push   edx
c001edfd:	50                   	push   eax
c001edfe:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee02:	2d e8 00 00 00       	sub    eax,0xe8
c001ee07:	eb b7                	jmp    c001edc0 <Vm::x87Handler(regs*)+0x432>
c001ee09:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee0d:	8d 50 40             	lea    edx,[eax+0x40]
c001ee10:	80 fa 07             	cmp    dl,0x7
c001ee13:	77 3a                	ja     c001ee4f <Vm::x87Handler(regs*)+0x4c1>
c001ee15:	83 ec 0c             	sub    esp,0xc
c001ee18:	2d c0 00 00 00       	sub    eax,0xc0
c001ee1d:	50                   	push   eax
c001ee1e:	e8 2e fa ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001ee23:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ee2a:	89 c6                	mov    esi,eax
c001ee2c:	89 d7                	mov    edi,edx
c001ee2e:	e8 1e fa ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001ee33:	57                   	push   edi
c001ee34:	56                   	push   esi
c001ee35:	52                   	push   edx
c001ee36:	50                   	push   eax
c001ee37:	e8 8b f9 ff ff       	call   c001e7c7 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ee3c:	83 c4 1c             	add    esp,0x1c
c001ee3f:	52                   	push   edx
c001ee40:	50                   	push   eax
c001ee41:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee45:	2d c0 00 00 00       	sub    eax,0xc0
c001ee4a:	e9 9e 01 00 00       	jmp    c001efed <Vm::x87Handler(regs*)+0x65f>
c001ee4f:	8d 50 20             	lea    edx,[eax+0x20]
c001ee52:	80 fa 07             	cmp    dl,0x7
c001ee55:	77 3a                	ja     c001ee91 <Vm::x87Handler(regs*)+0x503>
c001ee57:	83 ec 0c             	sub    esp,0xc
c001ee5a:	2d e0 00 00 00       	sub    eax,0xe0
c001ee5f:	50                   	push   eax
c001ee60:	e8 ec f9 ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001ee65:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ee6c:	89 c6                	mov    esi,eax
c001ee6e:	89 d7                	mov    edi,edx
c001ee70:	e8 dc f9 ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001ee75:	57                   	push   edi
c001ee76:	56                   	push   esi
c001ee77:	52                   	push   edx
c001ee78:	50                   	push   eax
c001ee79:	e8 73 f9 ff ff       	call   c001e7f1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ee7e:	83 c4 1c             	add    esp,0x1c
c001ee81:	52                   	push   edx
c001ee82:	50                   	push   eax
c001ee83:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee87:	2d e0 00 00 00       	sub    eax,0xe0
c001ee8c:	e9 5c 01 00 00       	jmp    c001efed <Vm::x87Handler(regs*)+0x65f>
c001ee91:	8d 50 18             	lea    edx,[eax+0x18]
c001ee94:	80 fa 07             	cmp    dl,0x7
c001ee97:	77 3b                	ja     c001eed4 <Vm::x87Handler(regs*)+0x546>
c001ee99:	83 ec 0c             	sub    esp,0xc
c001ee9c:	6a 00                	push   0x0
c001ee9e:	e8 ae f9 ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001eea3:	89 c6                	mov    esi,eax
c001eea5:	89 d7                	mov    edi,edx
c001eea7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eeab:	2d e8 00 00 00       	sub    eax,0xe8
c001eeb0:	89 04 24             	mov    DWORD PTR [esp],eax
c001eeb3:	e8 99 f9 ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001eeb8:	57                   	push   edi
c001eeb9:	56                   	push   esi
c001eeba:	52                   	push   edx
c001eebb:	50                   	push   eax
c001eebc:	e8 30 f9 ff ff       	call   c001e7f1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001eec1:	83 c4 1c             	add    esp,0x1c
c001eec4:	52                   	push   edx
c001eec5:	50                   	push   eax
c001eec6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eeca:	2d e8 00 00 00       	sub    eax,0xe8
c001eecf:	e9 19 01 00 00       	jmp    c001efed <Vm::x87Handler(regs*)+0x65f>
c001eed4:	8d 50 38             	lea    edx,[eax+0x38]
c001eed7:	80 fa 07             	cmp    dl,0x7
c001eeda:	77 37                	ja     c001ef13 <Vm::x87Handler(regs*)+0x585>
c001eedc:	83 ec 0c             	sub    esp,0xc
c001eedf:	2d c8 00 00 00       	sub    eax,0xc8
c001eee4:	50                   	push   eax
c001eee5:	e8 67 f9 ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001eeea:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001eef1:	89 c6                	mov    esi,eax
c001eef3:	89 d7                	mov    edi,edx
c001eef5:	e8 57 f9 ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001eefa:	57                   	push   edi
c001eefb:	56                   	push   esi
c001eefc:	52                   	push   edx
c001eefd:	50                   	push   eax
c001eefe:	e8 fd f8 ff ff       	call   c001e800 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ef03:	83 c4 1c             	add    esp,0x1c
c001ef06:	52                   	push   edx
c001ef07:	50                   	push   eax
c001ef08:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef0c:	2d c8 00 00 00       	sub    eax,0xc8
c001ef11:	eb 7d                	jmp    c001ef90 <Vm::x87Handler(regs*)+0x602>
c001ef13:	3c f7                	cmp    al,0xf7
c001ef15:	76 38                	jbe    c001ef4f <Vm::x87Handler(regs*)+0x5c1>
c001ef17:	83 ec 0c             	sub    esp,0xc
c001ef1a:	6a 00                	push   0x0
c001ef1c:	e8 30 f9 ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001ef21:	89 c6                	mov    esi,eax
c001ef23:	89 d7                	mov    edi,edx
c001ef25:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef29:	2d f8 00 00 00       	sub    eax,0xf8
c001ef2e:	89 04 24             	mov    DWORD PTR [esp],eax
c001ef31:	e8 1b f9 ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001ef36:	57                   	push   edi
c001ef37:	56                   	push   esi
c001ef38:	52                   	push   edx
c001ef39:	50                   	push   eax
c001ef3a:	e8 e0 f8 ff ff       	call   c001e81f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ef3f:	83 c4 1c             	add    esp,0x1c
c001ef42:	52                   	push   edx
c001ef43:	50                   	push   eax
c001ef44:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef48:	2d f8 00 00 00       	sub    eax,0xf8
c001ef4d:	eb 41                	jmp    c001ef90 <Vm::x87Handler(regs*)+0x602>
c001ef4f:	8d 50 10             	lea    edx,[eax+0x10]
c001ef52:	80 fa 07             	cmp    dl,0x7
c001ef55:	0f 87 5a 01 00 00    	ja     c001f0b5 <Vm::x87Handler(regs*)+0x727>
c001ef5b:	83 ec 0c             	sub    esp,0xc
c001ef5e:	2d f0 00 00 00       	sub    eax,0xf0
c001ef63:	50                   	push   eax
c001ef64:	e8 e8 f8 ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001ef69:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ef70:	89 c6                	mov    esi,eax
c001ef72:	89 d7                	mov    edi,edx
c001ef74:	e8 d8 f8 ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001ef79:	57                   	push   edi
c001ef7a:	56                   	push   esi
c001ef7b:	52                   	push   edx
c001ef7c:	50                   	push   eax
c001ef7d:	e8 9d f8 ff ff       	call   c001e81f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ef82:	83 c4 1c             	add    esp,0x1c
c001ef85:	52                   	push   edx
c001ef86:	50                   	push   eax
c001ef87:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef8b:	2d f0 00 00 00       	sub    eax,0xf0
c001ef90:	50                   	push   eax
c001ef91:	e8 fe f8 ff ff       	call   c001e894 <Vm::fpuSetReg(int, unsigned long long)>
c001ef96:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ef9a:	e8 9d f9 ff ff       	call   c001e93c <Vm::fpuPop()>
c001ef9f:	e9 5e fa ff ff       	jmp    c001ea02 <Vm::x87Handler(regs*)+0x74>
c001efa4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001efa8:	8d 50 30             	lea    edx,[eax+0x30]
c001efab:	80 fa 07             	cmp    dl,0x7
c001efae:	77 1d                	ja     c001efcd <Vm::x87Handler(regs*)+0x63f>
c001efb0:	83 ec 0c             	sub    esp,0xc
c001efb3:	6a 00                	push   0x0
c001efb5:	e8 97 f8 ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001efba:	83 c4 0c             	add    esp,0xc
c001efbd:	52                   	push   edx
c001efbe:	50                   	push   eax
c001efbf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001efc3:	2d d0 00 00 00       	sub    eax,0xd0
c001efc8:	e9 f3 fd ff ff       	jmp    c001edc0 <Vm::x87Handler(regs*)+0x432>
c001efcd:	8d 50 28             	lea    edx,[eax+0x28]
c001efd0:	80 fa 07             	cmp    dl,0x7
c001efd3:	77 28                	ja     c001effd <Vm::x87Handler(regs*)+0x66f>
c001efd5:	83 ec 0c             	sub    esp,0xc
c001efd8:	6a 00                	push   0x0
c001efda:	e8 72 f8 ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001efdf:	83 c4 0c             	add    esp,0xc
c001efe2:	52                   	push   edx
c001efe3:	50                   	push   eax
c001efe4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001efe8:	2d d8 00 00 00       	sub    eax,0xd8
c001efed:	50                   	push   eax
c001efee:	e8 a1 f8 ff ff       	call   c001e894 <Vm::fpuSetReg(int, unsigned long long)>
c001eff3:	e8 44 f9 ff ff       	call   c001e93c <Vm::fpuPop()>
c001eff8:	e9 01 fa ff ff       	jmp    c001e9fe <Vm::x87Handler(regs*)+0x70>
c001effd:	8d 50 20             	lea    edx,[eax+0x20]
c001f000:	80 fa 07             	cmp    dl,0x7
c001f003:	77 30                	ja     c001f035 <Vm::x87Handler(regs*)+0x6a7>
c001f005:	83 ec 0c             	sub    esp,0xc
c001f008:	2d e0 00 00 00       	sub    eax,0xe0
c001f00d:	50                   	push   eax
c001f00e:	e8 3e f8 ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001f013:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f01a:	89 c6                	mov    esi,eax
c001f01c:	89 d7                	mov    edi,edx
c001f01e:	e8 2e f8 ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001f023:	57                   	push   edi
c001f024:	56                   	push   esi
c001f025:	52                   	push   edx
c001f026:	50                   	push   eax
c001f027:	e8 48 f7 ff ff       	call   c001e774 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f02c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f030:	e9 54 02 00 00       	jmp    c001f289 <Vm::x87Handler(regs*)+0x8fb>
c001f035:	8d 50 18             	lea    edx,[eax+0x18]
c001f038:	80 fa 07             	cmp    dl,0x7
c001f03b:	0f 87 43 fb ff ff    	ja     c001eb84 <Vm::x87Handler(regs*)+0x1f6>
c001f041:	83 ec 0c             	sub    esp,0xc
c001f044:	2d e8 00 00 00       	sub    eax,0xe8
c001f049:	50                   	push   eax
c001f04a:	e8 02 f8 ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001f04f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f056:	89 c6                	mov    esi,eax
c001f058:	89 d7                	mov    edi,edx
c001f05a:	e8 f2 f7 ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001f05f:	57                   	push   edi
c001f060:	56                   	push   esi
c001f061:	52                   	push   edx
c001f062:	50                   	push   eax
c001f063:	e8 0c f7 ff ff       	call   c001e774 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f068:	83 c4 20             	add    esp,0x20
c001f06b:	e8 cc f8 ff ff       	call   c001e93c <Vm::fpuPop()>
c001f070:	eb 62                	jmp    c001f0d4 <Vm::x87Handler(regs*)+0x746>
c001f072:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001f076:	0f 85 0f 01 00 00    	jne    c001f18b <Vm::x87Handler(regs*)+0x7fd>
c001f07c:	83 ec 0c             	sub    esp,0xc
c001f07f:	6a 01                	push   0x1
c001f081:	e8 cb f7 ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001f086:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f08d:	89 c6                	mov    esi,eax
c001f08f:	89 d7                	mov    edi,edx
c001f091:	e8 bb f7 ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001f096:	57                   	push   edi
c001f097:	56                   	push   esi
c001f098:	52                   	push   edx
c001f099:	50                   	push   eax
c001f09a:	e8 d5 f6 ff ff       	call   c001e774 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f09f:	83 c4 20             	add    esp,0x20
c001f0a2:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f0a6:	e8 91 f8 ff ff       	call   c001e93c <Vm::fpuPop()>
c001f0ab:	e8 8c f8 ff ff       	call   c001e93c <Vm::fpuPop()>
c001f0b0:	e9 50 f9 ff ff       	jmp    c001ea05 <Vm::x87Handler(regs*)+0x77>
c001f0b5:	3c d9                	cmp    al,0xd9
c001f0b7:	0f 85 b5 02 00 00    	jne    c001f372 <Vm::x87Handler(regs*)+0x9e4>
c001f0bd:	eb bd                	jmp    c001f07c <Vm::x87Handler(regs*)+0x6ee>
c001f0bf:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001f0c3:	0f 85 ea 02 00 00    	jne    c001f3b3 <Vm::x87Handler(regs*)+0xa25>
c001f0c9:	0f b7 05 c0 de 02 c0 	movzx  eax,WORD PTR ds:0xc002dec0
c001f0d0:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001f0d4:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f0d8:	e9 28 f9 ff ff       	jmp    c001ea05 <Vm::x87Handler(regs*)+0x77>
c001f0dd:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f0e1:	84 d2                	test   dl,dl
c001f0e3:	75 0f                	jne    c001f0f4 <Vm::x87Handler(regs*)+0x766>
c001f0e5:	83 ec 0c             	sub    esp,0xc
c001f0e8:	ff 36                	push   DWORD PTR [esi]
c001f0ea:	e8 b1 f4 ff ff       	call   c001e5a0 <Vm::fpu32ToInternal(unsigned int)>
c001f0ef:	e9 2c 01 00 00       	jmp    c001f220 <Vm::x87Handler(regs*)+0x892>
c001f0f4:	80 fa 01             	cmp    dl,0x1
c001f0f7:	75 0f                	jne    c001f108 <Vm::x87Handler(regs*)+0x77a>
c001f0f9:	83 ec 0c             	sub    esp,0xc
c001f0fc:	ff 36                	push   DWORD PTR [esi]
c001f0fe:	e8 9d f4 ff ff       	call   c001e5a0 <Vm::fpu32ToInternal(unsigned int)>
c001f103:	e9 81 02 00 00       	jmp    c001f389 <Vm::x87Handler(regs*)+0x9fb>
c001f108:	80 fa 04             	cmp    dl,0x4
c001f10b:	75 0f                	jne    c001f11c <Vm::x87Handler(regs*)+0x78e>
c001f10d:	83 ec 0c             	sub    esp,0xc
c001f110:	ff 36                	push   DWORD PTR [esi]
c001f112:	e8 89 f4 ff ff       	call   c001e5a0 <Vm::fpu32ToInternal(unsigned int)>
c001f117:	e9 86 01 00 00       	jmp    c001f2a2 <Vm::x87Handler(regs*)+0x914>
c001f11c:	80 fa 05             	cmp    dl,0x5
c001f11f:	75 1b                	jne    c001f13c <Vm::x87Handler(regs*)+0x7ae>
c001f121:	83 ec 0c             	sub    esp,0xc
c001f124:	6a 00                	push   0x0
c001f126:	e8 26 f7 ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001f12b:	89 c7                	mov    edi,eax
c001f12d:	89 d5                	mov    ebp,edx
c001f12f:	58                   	pop    eax
c001f130:	ff 36                	push   DWORD PTR [esi]
c001f132:	e8 69 f4 ff ff       	call   c001e5a0 <Vm::fpu32ToInternal(unsigned int)>
c001f137:	e9 a3 01 00 00       	jmp    c001f2df <Vm::x87Handler(regs*)+0x951>
c001f13c:	80 fa 06             	cmp    dl,0x6
c001f13f:	75 0f                	jne    c001f150 <Vm::x87Handler(regs*)+0x7c2>
c001f141:	83 ec 0c             	sub    esp,0xc
c001f144:	ff 36                	push   DWORD PTR [esi]
c001f146:	e8 55 f4 ff ff       	call   c001e5a0 <Vm::fpu32ToInternal(unsigned int)>
c001f14b:	e9 ae 01 00 00       	jmp    c001f2fe <Vm::x87Handler(regs*)+0x970>
c001f150:	31 c0                	xor    eax,eax
c001f152:	80 fa 07             	cmp    dl,0x7
c001f155:	0f 85 94 02 00 00    	jne    c001f3ef <Vm::x87Handler(regs*)+0xa61>
c001f15b:	83 ec 0c             	sub    esp,0xc
c001f15e:	6a 00                	push   0x0
c001f160:	e8 ec f6 ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001f165:	89 c7                	mov    edi,eax
c001f167:	89 d5                	mov    ebp,edx
c001f169:	58                   	pop    eax
c001f16a:	ff 36                	push   DWORD PTR [esi]
c001f16c:	e8 2f f4 ff ff       	call   c001e5a0 <Vm::fpu32ToInternal(unsigned int)>
c001f171:	e9 cb 01 00 00       	jmp    c001f341 <Vm::x87Handler(regs*)+0x9b3>
c001f176:	80 fa 03             	cmp    dl,0x3
c001f179:	0f 85 d3 01 00 00    	jne    c001f352 <Vm::x87Handler(regs*)+0x9c4>
c001f17f:	e8 b8 f7 ff ff       	call   c001e93c <Vm::fpuPop()>
c001f184:	51                   	push   ecx
c001f185:	51                   	push   ecx
c001f186:	e9 de 01 00 00       	jmp    c001f369 <Vm::x87Handler(regs*)+0x9db>
c001f18b:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f18f:	80 fa 01             	cmp    dl,0x1
c001f192:	75 09                	jne    c001f19d <Vm::x87Handler(regs*)+0x80f>
c001f194:	57                   	push   edi
c001f195:	57                   	push   edi
c001f196:	8b 06                	mov    eax,DWORD PTR [esi]
c001f198:	e9 e3 01 00 00       	jmp    c001f380 <Vm::x87Handler(regs*)+0x9f2>
c001f19d:	80 fa 04             	cmp    dl,0x4
c001f1a0:	75 12                	jne    c001f1b4 <Vm::x87Handler(regs*)+0x826>
c001f1a2:	31 d2                	xor    edx,edx
c001f1a4:	51                   	push   ecx
c001f1a5:	51                   	push   ecx
c001f1a6:	8b 06                	mov    eax,DWORD PTR [esi]
c001f1a8:	52                   	push   edx
c001f1a9:	50                   	push   eax
c001f1aa:	e8 d0 f4 ff ff       	call   c001e67f <Vm::fpuLongToFloat(long long)>
c001f1af:	e9 ee 00 00 00       	jmp    c001f2a2 <Vm::x87Handler(regs*)+0x914>
c001f1b4:	31 c0                	xor    eax,eax
c001f1b6:	80 fa 07             	cmp    dl,0x7
c001f1b9:	0f 85 30 02 00 00    	jne    c001f3ef <Vm::x87Handler(regs*)+0xa61>
c001f1bf:	83 ec 0c             	sub    esp,0xc
c001f1c2:	6a 00                	push   0x0
c001f1c4:	e8 88 f6 ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001f1c9:	89 c7                	mov    edi,eax
c001f1cb:	89 d5                	mov    ebp,edx
c001f1cd:	58                   	pop    eax
c001f1ce:	8b 06                	mov    eax,DWORD PTR [esi]
c001f1d0:	5a                   	pop    edx
c001f1d1:	31 d2                	xor    edx,edx
c001f1d3:	52                   	push   edx
c001f1d4:	50                   	push   eax
c001f1d5:	e8 a5 f4 ff ff       	call   c001e67f <Vm::fpuLongToFloat(long long)>
c001f1da:	e9 62 01 00 00       	jmp    c001f341 <Vm::x87Handler(regs*)+0x9b3>
c001f1df:	84 d2                	test   dl,dl
c001f1e1:	75 0d                	jne    c001f1f0 <Vm::x87Handler(regs*)+0x862>
c001f1e3:	31 d2                	xor    edx,edx
c001f1e5:	55                   	push   ebp
c001f1e6:	55                   	push   ebp
c001f1e7:	8b 06                	mov    eax,DWORD PTR [esi]
c001f1e9:	52                   	push   edx
c001f1ea:	50                   	push   eax
c001f1eb:	e9 d3 01 00 00       	jmp    c001f3c3 <Vm::x87Handler(regs*)+0xa35>
c001f1f0:	31 c0                	xor    eax,eax
c001f1f2:	80 fa 02             	cmp    dl,0x2
c001f1f5:	0f 85 f4 01 00 00    	jne    c001f3ef <Vm::x87Handler(regs*)+0xa61>
c001f1fb:	83 ec 0c             	sub    esp,0xc
c001f1fe:	6a 00                	push   0x0
c001f200:	e8 4c f6 ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001f205:	59                   	pop    ecx
c001f206:	5f                   	pop    edi
c001f207:	e9 6a f9 ff ff       	jmp    c001eb76 <Vm::x87Handler(regs*)+0x1e8>
c001f20c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f210:	84 d2                	test   dl,dl
c001f212:	75 2a                	jne    c001f23e <Vm::x87Handler(regs*)+0x8b0>
c001f214:	50                   	push   eax
c001f215:	50                   	push   eax
c001f216:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f219:	ff 36                	push   DWORD PTR [esi]
c001f21b:	e8 c5 f3 ff ff       	call   c001e5e5 <Vm::fpu64ToInternal(unsigned long long)>
c001f220:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f227:	89 c6                	mov    esi,eax
c001f229:	89 d7                	mov    edi,edx
c001f22b:	e8 21 f6 ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001f230:	57                   	push   edi
c001f231:	56                   	push   esi
c001f232:	52                   	push   edx
c001f233:	50                   	push   eax
c001f234:	e8 8e f5 ff ff       	call   c001e7c7 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f239:	e9 64 01 00 00       	jmp    c001f3a2 <Vm::x87Handler(regs*)+0xa14>
c001f23e:	80 fa 01             	cmp    dl,0x1
c001f241:	75 11                	jne    c001f254 <Vm::x87Handler(regs*)+0x8c6>
c001f243:	50                   	push   eax
c001f244:	50                   	push   eax
c001f245:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f248:	ff 36                	push   DWORD PTR [esi]
c001f24a:	e8 96 f3 ff ff       	call   c001e5e5 <Vm::fpu64ToInternal(unsigned long long)>
c001f24f:	e9 35 01 00 00       	jmp    c001f389 <Vm::x87Handler(regs*)+0x9fb>
c001f254:	80 fa 02             	cmp    dl,0x2
c001f257:	0f 85 54 f9 ff ff    	jne    c001ebb1 <Vm::x87Handler(regs*)+0x223>
c001f25d:	55                   	push   ebp
c001f25e:	55                   	push   ebp
c001f25f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f262:	ff 36                	push   DWORD PTR [esi]
c001f264:	e8 7c f3 ff ff       	call   c001e5e5 <Vm::fpu64ToInternal(unsigned long long)>
c001f269:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f270:	89 c6                	mov    esi,eax
c001f272:	89 d7                	mov    edi,edx
c001f274:	e8 d8 f5 ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001f279:	57                   	push   edi
c001f27a:	56                   	push   esi
c001f27b:	52                   	push   edx
c001f27c:	50                   	push   eax
c001f27d:	e8 f2 f4 ff ff       	call   c001e774 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f282:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001f286:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f289:	83 c4 20             	add    esp,0x20
c001f28c:	e9 74 f7 ff ff       	jmp    c001ea05 <Vm::x87Handler(regs*)+0x77>
c001f291:	80 fa 04             	cmp    dl,0x4
c001f294:	75 2a                	jne    c001f2c0 <Vm::x87Handler(regs*)+0x932>
c001f296:	51                   	push   ecx
c001f297:	51                   	push   ecx
c001f298:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f29b:	ff 36                	push   DWORD PTR [esi]
c001f29d:	e8 43 f3 ff ff       	call   c001e5e5 <Vm::fpu64ToInternal(unsigned long long)>
c001f2a2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f2a9:	89 c6                	mov    esi,eax
c001f2ab:	89 d7                	mov    edi,edx
c001f2ad:	e8 9f f5 ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001f2b2:	57                   	push   edi
c001f2b3:	56                   	push   esi
c001f2b4:	52                   	push   edx
c001f2b5:	50                   	push   eax
c001f2b6:	e8 36 f5 ff ff       	call   c001e7f1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f2bb:	e9 e2 00 00 00       	jmp    c001f3a2 <Vm::x87Handler(regs*)+0xa14>
c001f2c0:	80 fa 05             	cmp    dl,0x5
c001f2c3:	75 28                	jne    c001f2ed <Vm::x87Handler(regs*)+0x95f>
c001f2c5:	83 ec 0c             	sub    esp,0xc
c001f2c8:	6a 00                	push   0x0
c001f2ca:	e8 82 f5 ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001f2cf:	89 c7                	mov    edi,eax
c001f2d1:	89 d5                	mov    ebp,edx
c001f2d3:	58                   	pop    eax
c001f2d4:	5a                   	pop    edx
c001f2d5:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f2d8:	ff 36                	push   DWORD PTR [esi]
c001f2da:	e8 06 f3 ff ff       	call   c001e5e5 <Vm::fpu64ToInternal(unsigned long long)>
c001f2df:	83 c4 10             	add    esp,0x10
c001f2e2:	55                   	push   ebp
c001f2e3:	57                   	push   edi
c001f2e4:	52                   	push   edx
c001f2e5:	50                   	push   eax
c001f2e6:	e8 06 f5 ff ff       	call   c001e7f1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f2eb:	eb 60                	jmp    c001f34d <Vm::x87Handler(regs*)+0x9bf>
c001f2ed:	80 fa 06             	cmp    dl,0x6
c001f2f0:	75 2a                	jne    c001f31c <Vm::x87Handler(regs*)+0x98e>
c001f2f2:	51                   	push   ecx
c001f2f3:	51                   	push   ecx
c001f2f4:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f2f7:	ff 36                	push   DWORD PTR [esi]
c001f2f9:	e8 e7 f2 ff ff       	call   c001e5e5 <Vm::fpu64ToInternal(unsigned long long)>
c001f2fe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f305:	89 c6                	mov    esi,eax
c001f307:	89 d7                	mov    edi,edx
c001f309:	e8 43 f5 ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001f30e:	57                   	push   edi
c001f30f:	56                   	push   esi
c001f310:	52                   	push   edx
c001f311:	50                   	push   eax
c001f312:	e8 08 f5 ff ff       	call   c001e81f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f317:	e9 86 00 00 00       	jmp    c001f3a2 <Vm::x87Handler(regs*)+0xa14>
c001f31c:	31 c0                	xor    eax,eax
c001f31e:	80 fa 07             	cmp    dl,0x7
c001f321:	0f 85 c8 00 00 00    	jne    c001f3ef <Vm::x87Handler(regs*)+0xa61>
c001f327:	83 ec 0c             	sub    esp,0xc
c001f32a:	6a 00                	push   0x0
c001f32c:	e8 20 f5 ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001f331:	89 c7                	mov    edi,eax
c001f333:	89 d5                	mov    ebp,edx
c001f335:	58                   	pop    eax
c001f336:	5a                   	pop    edx
c001f337:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f33a:	ff 36                	push   DWORD PTR [esi]
c001f33c:	e8 a4 f2 ff ff       	call   c001e5e5 <Vm::fpu64ToInternal(unsigned long long)>
c001f341:	83 c4 10             	add    esp,0x10
c001f344:	55                   	push   ebp
c001f345:	57                   	push   edi
c001f346:	52                   	push   edx
c001f347:	50                   	push   eax
c001f348:	e8 d2 f4 ff ff       	call   c001e81f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f34d:	83 c4 0c             	add    esp,0xc
c001f350:	eb 53                	jmp    c001f3a5 <Vm::x87Handler(regs*)+0xa17>
c001f352:	31 c0                	xor    eax,eax
c001f354:	80 fa 02             	cmp    dl,0x2
c001f357:	0f 85 92 00 00 00    	jne    c001f3ef <Vm::x87Handler(regs*)+0xa61>
c001f35d:	83 ec 0c             	sub    esp,0xc
c001f360:	6a 00                	push   0x0
c001f362:	e8 ea f4 ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001f367:	59                   	pop    ecx
c001f368:	5f                   	pop    edi
c001f369:	52                   	push   edx
c001f36a:	50                   	push   eax
c001f36b:	e8 27 f2 ff ff       	call   c001e597 <Vm::fpuInternalTo64(unsigned long long)>
c001f370:	eb 70                	jmp    c001f3e2 <Vm::x87Handler(regs*)+0xa54>
c001f372:	31 c0                	xor    eax,eax
c001f374:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001f379:	75 74                	jne    c001f3ef <Vm::x87Handler(regs*)+0xa61>
c001f37b:	50                   	push   eax
c001f37c:	50                   	push   eax
c001f37d:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f380:	31 d2                	xor    edx,edx
c001f382:	52                   	push   edx
c001f383:	50                   	push   eax
c001f384:	e8 f6 f2 ff ff       	call   c001e67f <Vm::fpuLongToFloat(long long)>
c001f389:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f390:	89 c6                	mov    esi,eax
c001f392:	89 d7                	mov    edi,edx
c001f394:	e8 b8 f4 ff ff       	call   c001e851 <Vm::fpuGetReg(int)>
c001f399:	57                   	push   edi
c001f39a:	56                   	push   esi
c001f39b:	52                   	push   edx
c001f39c:	50                   	push   eax
c001f39d:	e8 5e f4 ff ff       	call   c001e800 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f3a2:	83 c4 1c             	add    esp,0x1c
c001f3a5:	52                   	push   edx
c001f3a6:	50                   	push   eax
c001f3a7:	6a 00                	push   0x0
c001f3a9:	e8 e6 f4 ff ff       	call   c001e894 <Vm::fpuSetReg(int, unsigned long long)>
c001f3ae:	e9 f2 f7 ff ff       	jmp    c001eba5 <Vm::x87Handler(regs*)+0x217>
c001f3b3:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f3b7:	80 fa 05             	cmp    dl,0x5
c001f3ba:	75 11                	jne    c001f3cd <Vm::x87Handler(regs*)+0xa3f>
c001f3bc:	55                   	push   ebp
c001f3bd:	55                   	push   ebp
c001f3be:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f3c1:	ff 36                	push   DWORD PTR [esi]
c001f3c3:	e8 81 f2 ff ff       	call   c001e649 <Vm::fpuULongToFloat(unsigned long long)>
c001f3c8:	e9 cf f7 ff ff       	jmp    c001eb9c <Vm::x87Handler(regs*)+0x20e>
c001f3cd:	31 c0                	xor    eax,eax
c001f3cf:	80 fa 07             	cmp    dl,0x7
c001f3d2:	75 1b                	jne    c001f3ef <Vm::x87Handler(regs*)+0xa61>
c001f3d4:	e8 63 f5 ff ff       	call   c001e93c <Vm::fpuPop()>
c001f3d9:	51                   	push   ecx
c001f3da:	51                   	push   ecx
c001f3db:	52                   	push   edx
c001f3dc:	50                   	push   eax
c001f3dd:	e8 0c f2 ff ff       	call   c001e5ee <Vm::fpuFloatToLong(unsigned long long)>
c001f3e2:	83 c4 10             	add    esp,0x10
c001f3e5:	89 06                	mov    DWORD PTR [esi],eax
c001f3e7:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001f3ea:	e9 f8 f7 ff ff       	jmp    c001ebe7 <Vm::x87Handler(regs*)+0x259>
c001f3ef:	83 c4 1c             	add    esp,0x1c
c001f3f2:	5b                   	pop    ebx
c001f3f3:	5e                   	pop    esi
c001f3f4:	5f                   	pop    edi
c001f3f5:	5d                   	pop    ebp
c001f3f6:	c3                   	ret    

c001f3f7 <__static_initialization_and_destruction_0(int, int)>:
c001f3f7:	83 ec 0c             	sub    esp,0xc
c001f3fa:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001f3ff:	75 1a                	jne    c001f41b <__static_initialization_and_destruction_0(int, int)+0x24>
c001f401:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001f409:	75 10                	jne    c001f41b <__static_initialization_and_destruction_0(int, int)+0x24>
c001f40b:	83 ec 0c             	sub    esp,0xc
c001f40e:	68 c0 de 02 c0       	push   0xc002dec0
c001f413:	e8 b8 82 00 00       	call   c00276d0 <Vm::_FPUState::_FPUState()>
c001f418:	83 c4 10             	add    esp,0x10
c001f41b:	90                   	nop
c001f41c:	83 c4 0c             	add    esp,0xc
c001f41f:	c3                   	ret    

c001f420 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001f420:	83 ec 0c             	sub    esp,0xc
c001f423:	83 ec 08             	sub    esp,0x8
c001f426:	68 ff ff 00 00       	push   0xffff
c001f42b:	6a 01                	push   0x1
c001f42d:	e8 c5 ff ff ff       	call   c001f3f7 <__static_initialization_and_destruction_0(int, int)>
c001f432:	83 c4 10             	add    esp,0x10
c001f435:	83 c4 0c             	add    esp,0xc
c001f438:	c3                   	ret    
c001f439:	90                   	nop

c001f43a <FAT::getName()>:
c001f43a:	b8 6c ad 02 c0       	mov    eax,0xc002ad6c
c001f43f:	c3                   	ret    

c001f440 <FAT::tell(void*, unsigned long long*)>:
c001f440:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001f445:	75 06                	jne    c001f44d <FAT::tell(void*, unsigned long long*)+0xd>
c001f447:	b8 04 00 00 00       	mov    eax,0x4
c001f44c:	c3                   	ret    
c001f44d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f452:	75 06                	jne    c001f45a <FAT::tell(void*, unsigned long long*)+0x1a>
c001f454:	b8 04 00 00 00       	mov    eax,0x4
c001f459:	c3                   	ret    
c001f45a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f45e:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001f461:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001f464:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f468:	89 01                	mov    DWORD PTR [ecx],eax
c001f46a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f46d:	b8 00 00 00 00       	mov    eax,0x0
c001f472:	c3                   	ret    
c001f473:	90                   	nop

c001f474 <FAT::stat(void*, unsigned long long*)>:
c001f474:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001f479:	75 06                	jne    c001f481 <FAT::stat(void*, unsigned long long*)+0xd>
c001f47b:	b8 04 00 00 00       	mov    eax,0x4
c001f480:	c3                   	ret    
c001f481:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f486:	75 06                	jne    c001f48e <FAT::stat(void*, unsigned long long*)+0x1a>
c001f488:	b8 04 00 00 00       	mov    eax,0x4
c001f48d:	c3                   	ret    
c001f48e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f492:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001f495:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f498:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f49c:	89 01                	mov    DWORD PTR [ecx],eax
c001f49e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f4a1:	b8 00 00 00 00       	mov    eax,0x0
c001f4a6:	c3                   	ret    
c001f4a7:	90                   	nop

c001f4a8 <FAT::~FAT()>:
c001f4a8:	83 ec 0c             	sub    esp,0xc
c001f4ab:	ba f0 ad 02 c0       	mov    edx,0xc002adf0
c001f4b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4b4:	89 10                	mov    DWORD PTR [eax],edx
c001f4b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4ba:	83 ec 0c             	sub    esp,0xc
c001f4bd:	50                   	push   eax
c001f4be:	e8 b7 35 ff ff       	call   c0012a7a <Filesystem::~Filesystem()>
c001f4c3:	83 c4 10             	add    esp,0x10
c001f4c6:	90                   	nop
c001f4c7:	83 c4 0c             	add    esp,0xc
c001f4ca:	c3                   	ret    
c001f4cb:	90                   	nop

c001f4cc <FAT::~FAT()>:
c001f4cc:	83 ec 0c             	sub    esp,0xc
c001f4cf:	83 ec 0c             	sub    esp,0xc
c001f4d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4d6:	e8 cd ff ff ff       	call   c001f4a8 <FAT::~FAT()>
c001f4db:	83 c4 10             	add    esp,0x10
c001f4de:	83 ec 08             	sub    esp,0x8
c001f4e1:	6a 08                	push   0x8
c001f4e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4e7:	e8 85 31 ff ff       	call   c0012671 <operator delete(void*, unsigned long)>
c001f4ec:	83 c4 10             	add    esp,0x10
c001f4ef:	83 c4 0c             	add    esp,0xc
c001f4f2:	c3                   	ret    
c001f4f3:	90                   	nop

c001f4f4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001f4f4:	83 ec 1c             	sub    esp,0x1c
c001f4f7:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001f4fe:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001f503:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f507:	8b 04 85 40 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd20c0]
c001f50e:	83 f8 ff             	cmp    eax,0xffffffff
c001f511:	75 34                	jne    c001f547 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001f513:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f517:	88 c2                	mov    dl,al
c001f519:	a1 20 df 02 c0       	mov    eax,ds:0xc002df20
c001f51e:	01 d0                	add    eax,edx
c001f520:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f524:	8b 15 20 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df20
c001f52a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f52e:	89 14 85 40 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd20c0],edx
c001f535:	a1 20 df 02 c0       	mov    eax,ds:0xc002df20
c001f53a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001f53e:	89 14 85 c0 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2040],edx
c001f545:	eb 17                	jmp    c001f55e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001f547:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f54b:	88 c2                	mov    dl,al
c001f54d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f551:	8b 04 85 40 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd20c0]
c001f558:	01 d0                	add    eax,edx
c001f55a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f55e:	83 ec 04             	sub    esp,0x4
c001f561:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001f565:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001f569:	8d 44 24 15          	lea    eax,[esp+0x15]
c001f56d:	50                   	push   eax
c001f56e:	e8 75 75 fe ff       	call   c0006ae8 <f_getlabel>
c001f573:	83 c4 10             	add    esp,0x10
c001f576:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f57a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f57f:	75 07                	jne    c001f588 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001f581:	b8 00 00 00 00       	mov    eax,0x0
c001f586:	eb 05                	jmp    c001f58d <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001f588:	b8 01 00 00 00       	mov    eax,0x1
c001f58d:	83 c4 1c             	add    esp,0x1c
c001f590:	c3                   	ret    
c001f591:	90                   	nop

c001f592 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001f592:	57                   	push   edi
c001f593:	83 ec 58             	sub    esp,0x58
c001f596:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001f59e:	8d 54 24 10          	lea    edx,[esp+0x10]
c001f5a2:	b9 0f 00 00 00       	mov    ecx,0xf
c001f5a7:	b8 00 00 00 00       	mov    eax,0x0
c001f5ac:	fc                   	cld    
c001f5ad:	89 d7                	mov    edi,edx
c001f5af:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f5b1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f5b5:	8b 04 85 40 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd20c0]
c001f5bc:	83 f8 ff             	cmp    eax,0xffffffff
c001f5bf:	75 34                	jne    c001f5f5 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001f5c1:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001f5c5:	88 c2                	mov    dl,al
c001f5c7:	a1 20 df 02 c0       	mov    eax,ds:0xc002df20
c001f5cc:	01 d0                	add    eax,edx
c001f5ce:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f5d2:	8b 15 20 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df20
c001f5d8:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f5dc:	89 14 85 40 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd20c0],edx
c001f5e3:	a1 20 df 02 c0       	mov    eax,ds:0xc002df20
c001f5e8:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001f5ec:	89 14 85 c0 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2040],edx
c001f5f3:	eb 17                	jmp    c001f60c <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001f5f5:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001f5f9:	88 c2                	mov    dl,al
c001f5fb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f5ff:	8b 04 85 40 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd20c0]
c001f606:	01 d0                	add    eax,edx
c001f608:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f60c:	83 ec 08             	sub    esp,0x8
c001f60f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001f613:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f617:	50                   	push   eax
c001f618:	e8 c4 11 fe ff       	call   c00007e1 <strcat>
c001f61d:	83 c4 10             	add    esp,0x10
c001f620:	83 ec 0c             	sub    esp,0xc
c001f623:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f627:	50                   	push   eax
c001f628:	e8 a9 76 fe ff       	call   c0006cd6 <f_setlabel>
c001f62d:	83 c4 10             	add    esp,0x10
c001f630:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001f634:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001f639:	75 07                	jne    c001f642 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001f63b:	b8 00 00 00 00       	mov    eax,0x0
c001f640:	eb 05                	jmp    c001f647 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001f642:	b8 01 00 00 00       	mov    eax,0x1
c001f647:	83 c4 58             	add    esp,0x58
c001f64a:	5f                   	pop    edi
c001f64b:	c3                   	ret    

c001f64c <FAT::format(LogicalDisk*, int, char const*, int)>:
c001f64c:	83 ec 2c             	sub    esp,0x2c
c001f64f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001f657:	83 ec 08             	sub    esp,0x8
c001f65a:	68 90 ad 02 c0       	push   0xc002ad90
c001f65f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f663:	e8 13 11 fe ff       	call   c000077b <strcmp>
c001f668:	83 c4 10             	add    esp,0x10
c001f66b:	85 c0                	test   eax,eax
c001f66d:	0f 94 c0             	sete   al
c001f670:	84 c0                	test   al,al
c001f672:	74 0d                	je     c001f681 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001f674:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001f67c:	e9 a6 00 00 00       	jmp    c001f727 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f681:	83 ec 08             	sub    esp,0x8
c001f684:	68 82 ad 02 c0       	push   0xc002ad82
c001f689:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f68d:	e8 e9 10 fe ff       	call   c000077b <strcmp>
c001f692:	83 c4 10             	add    esp,0x10
c001f695:	85 c0                	test   eax,eax
c001f697:	0f 94 c0             	sete   al
c001f69a:	84 c0                	test   al,al
c001f69c:	74 0a                	je     c001f6a8 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001f69e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001f6a6:	eb 7f                	jmp    c001f727 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f6a8:	83 ec 08             	sub    esp,0x8
c001f6ab:	68 88 ad 02 c0       	push   0xc002ad88
c001f6b0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f6b4:	e8 c2 10 fe ff       	call   c000077b <strcmp>
c001f6b9:	83 c4 10             	add    esp,0x10
c001f6bc:	85 c0                	test   eax,eax
c001f6be:	0f 94 c0             	sete   al
c001f6c1:	84 c0                	test   al,al
c001f6c3:	74 0a                	je     c001f6cf <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001f6c5:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001f6cd:	eb 58                	jmp    c001f727 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f6cf:	83 ec 08             	sub    esp,0x8
c001f6d2:	68 ec 7d 02 c0       	push   0xc0027dec
c001f6d7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f6db:	e8 9b 10 fe ff       	call   c000077b <strcmp>
c001f6e0:	83 c4 10             	add    esp,0x10
c001f6e3:	85 c0                	test   eax,eax
c001f6e5:	0f 94 c0             	sete   al
c001f6e8:	84 c0                	test   al,al
c001f6ea:	74 0a                	je     c001f6f6 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001f6ec:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001f6f4:	eb 31                	jmp    c001f727 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f6f6:	83 ec 08             	sub    esp,0x8
c001f6f9:	68 8e ad 02 c0       	push   0xc002ad8e
c001f6fe:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f702:	e8 74 10 fe ff       	call   c000077b <strcmp>
c001f707:	83 c4 10             	add    esp,0x10
c001f70a:	85 c0                	test   eax,eax
c001f70c:	0f 94 c0             	sete   al
c001f70f:	84 c0                	test   al,al
c001f711:	74 0a                	je     c001f71d <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001f713:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001f71b:	eb 0a                	jmp    c001f727 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f71d:	b8 08 00 00 00       	mov    eax,0x8
c001f722:	e9 04 01 00 00       	jmp    c001f82b <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001f727:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001f72e:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001f733:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f737:	8b 04 85 40 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd20c0]
c001f73e:	83 f8 ff             	cmp    eax,0xffffffff
c001f741:	75 34                	jne    c001f777 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001f743:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001f747:	88 c2                	mov    dl,al
c001f749:	a1 20 df 02 c0       	mov    eax,ds:0xc002df20
c001f74e:	01 d0                	add    eax,edx
c001f750:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001f754:	8b 15 20 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df20
c001f75a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f75e:	89 14 85 40 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd20c0],edx
c001f765:	a1 20 df 02 c0       	mov    eax,ds:0xc002df20
c001f76a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001f76e:	89 14 85 c0 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2040],edx
c001f775:	eb 17                	jmp    c001f78e <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001f777:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001f77b:	88 c2                	mov    dl,al
c001f77d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f781:	8b 04 85 40 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd20c0]
c001f788:	01 d0                	add    eax,edx
c001f78a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001f78e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f792:	88 04 24             	mov    BYTE PTR [esp],al
c001f795:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001f799:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f79d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001f7a5:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001f7aa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f7b2:	83 ec 0c             	sub    esp,0xc
c001f7b5:	68 00 20 00 00       	push   0x2000
c001f7ba:	e8 15 fd fe ff       	call   c000f4d4 <malloc>
c001f7bf:	83 c4 10             	add    esp,0x10
c001f7c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f7c6:	68 00 20 00 00       	push   0x2000
c001f7cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7cf:	8d 44 24 08          	lea    eax,[esp+0x8]
c001f7d3:	50                   	push   eax
c001f7d4:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001f7d8:	50                   	push   eax
c001f7d9:	e8 43 79 fe ff       	call   c0007121 <f_mkfs>
c001f7de:	83 c4 10             	add    esp,0x10
c001f7e1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f7e5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f7ea:	75 07                	jne    c001f7f3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001f7ec:	b8 00 00 00 00       	mov    eax,0x0
c001f7f1:	eb 38                	jmp    c001f82b <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001f7f3:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001f7f8:	75 17                	jne    c001f811 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001f7fa:	83 ec 0c             	sub    esp,0xc
c001f7fd:	68 c0 ad 02 c0       	push   0xc002adc0
c001f802:	e8 4a 2f ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001f807:	83 c4 10             	add    esp,0x10
c001f80a:	b8 09 00 00 00       	mov    eax,0x9
c001f80f:	eb 1a                	jmp    c001f82b <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001f811:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f815:	83 ec 08             	sub    esp,0x8
c001f818:	50                   	push   eax
c001f819:	68 94 ad 02 c0       	push   0xc002ad94
c001f81e:	e8 2e 2f ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c001f823:	83 c4 10             	add    esp,0x10
c001f826:	b8 01 00 00 00       	mov    eax,0x1
c001f82b:	83 c4 2c             	add    esp,0x2c
c001f82e:	c3                   	ret    
c001f82f:	90                   	nop

c001f830 <FAT::tryMount(LogicalDisk*, int)>:
c001f830:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001f836:	a1 20 df 02 c0       	mov    eax,ds:0xc002df20
c001f83b:	83 f8 14             	cmp    eax,0x14
c001f83e:	75 17                	jne    c001f857 <FAT::tryMount(LogicalDisk*, int)+0x27>
c001f840:	83 ec 0c             	sub    esp,0xc
c001f843:	68 a6 ad 02 c0       	push   0xc002ada6
c001f848:	e8 1e a0 ff ff       	call   c001986b <Krnl::panic(char const*)>
c001f84d:	83 c4 10             	add    esp,0x10
c001f850:	b0 00                	mov    al,0x0
c001f852:	e9 d7 01 00 00       	jmp    c001fa2e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f857:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001f85e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001f864:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001f86a:	3d 00 02 00 00       	cmp    eax,0x200
c001f86f:	74 07                	je     c001f878 <FAT::tryMount(LogicalDisk*, int)+0x48>
c001f871:	b0 00                	mov    al,0x0
c001f873:	e9 b6 01 00 00       	jmp    c001fa2e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f878:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001f880:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001f887:	8b 04 85 40 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd20c0]
c001f88e:	83 f8 ff             	cmp    eax,0xffffffff
c001f891:	74 07                	je     c001f89a <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001f893:	b0 01                	mov    al,0x1
c001f895:	e9 94 01 00 00       	jmp    c001fa2e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f89a:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001f8a4:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001f8ac:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001f8b3:	88 c2                	mov    dl,al
c001f8b5:	a1 20 df 02 c0       	mov    eax,ds:0xc002df20
c001f8ba:	01 d0                	add    eax,edx
c001f8bc:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001f8c3:	8b 15 20 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df20
c001f8c9:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001f8d0:	89 14 85 40 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd20c0],edx
c001f8d7:	a1 20 df 02 c0       	mov    eax,ds:0xc002df20
c001f8dc:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001f8e3:	89 14 85 c0 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2040],edx
c001f8ea:	83 ec 0c             	sub    esp,0xc
c001f8ed:	68 54 02 00 00       	push   0x254
c001f8f2:	e8 dd fb fe ff       	call   c000f4d4 <malloc>
c001f8f7:	83 c4 10             	add    esp,0x10
c001f8fa:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001f901:	83 ec 04             	sub    esp,0x4
c001f904:	6a 00                	push   0x0
c001f906:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001f90d:	50                   	push   eax
c001f90e:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001f915:	e8 c5 53 fe ff       	call   c0004cdf <f_mount>
c001f91a:	83 c4 10             	add    esp,0x10
c001f91d:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001f924:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001f92c:	74 19                	je     c001f947 <FAT::tryMount(LogicalDisk*, int)+0x117>
c001f92e:	83 ec 0c             	sub    esp,0xc
c001f931:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001f938:	e8 b7 fb fe ff       	call   c000f4f4 <rfree>
c001f93d:	83 c4 10             	add    esp,0x10
c001f940:	b0 00                	mov    al,0x0
c001f942:	e9 e7 00 00 00       	jmp    c001fa2e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f947:	83 ec 04             	sub    esp,0x4
c001f94a:	68 00 01 00 00       	push   0x100
c001f94f:	6a 00                	push   0x0
c001f951:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001f958:	50                   	push   eax
c001f959:	e8 2d 0d fe ff       	call   c000068b <memset>
c001f95e:	83 c4 10             	add    esp,0x10
c001f961:	83 ec 08             	sub    esp,0x8
c001f964:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001f96b:	50                   	push   eax
c001f96c:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001f973:	50                   	push   eax
c001f974:	e8 68 0e fe ff       	call   c00007e1 <strcat>
c001f979:	83 c4 10             	add    esp,0x10
c001f97c:	83 ec 08             	sub    esp,0x8
c001f97f:	68 b4 ad 02 c0       	push   0xc002adb4
c001f984:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001f98b:	50                   	push   eax
c001f98c:	e8 50 0e fe ff       	call   c00007e1 <strcat>
c001f991:	83 c4 10             	add    esp,0x10
c001f994:	83 ec 04             	sub    esp,0x4
c001f997:	6a 01                	push   0x1
c001f999:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001f9a0:	50                   	push   eax
c001f9a1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f9a5:	50                   	push   eax
c001f9a6:	e8 96 53 fe ff       	call   c0004d41 <f_open>
c001f9ab:	83 c4 10             	add    esp,0x10
c001f9ae:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001f9b5:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001f9bc:	85 c0                	test   eax,eax
c001f9be:	74 0a                	je     c001f9ca <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001f9c0:	78 2d                	js     c001f9ef <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001f9c2:	83 e8 04             	sub    eax,0x4
c001f9c5:	83 f8 01             	cmp    eax,0x1
c001f9c8:	77 25                	ja     c001f9ef <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001f9ca:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001f9d2:	83 ec 0c             	sub    esp,0xc
c001f9d5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f9d9:	50                   	push   eax
c001f9da:	e8 b4 5e fe ff       	call   c0005893 <f_close>
c001f9df:	83 c4 10             	add    esp,0x10
c001f9e2:	90                   	nop
c001f9e3:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001f9eb:	74 3a                	je     c001fa27 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001f9ed:	eb 2d                	jmp    c001fa1c <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001f9ef:	83 ec 0c             	sub    esp,0xc
c001f9f2:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001f9f9:	e8 f6 fa fe ff       	call   c000f4f4 <rfree>
c001f9fe:	83 c4 10             	add    esp,0x10
c001fa01:	83 ec 04             	sub    esp,0x4
c001fa04:	6a 00                	push   0x0
c001fa06:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001fa0d:	50                   	push   eax
c001fa0e:	6a 00                	push   0x0
c001fa10:	e8 ca 52 fe ff       	call   c0004cdf <f_mount>
c001fa15:	83 c4 10             	add    esp,0x10
c001fa18:	b0 00                	mov    al,0x0
c001fa1a:	eb 12                	jmp    c001fa2e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001fa1c:	a1 20 df 02 c0       	mov    eax,ds:0xc002df20
c001fa21:	40                   	inc    eax
c001fa22:	a3 20 df 02 c0       	mov    ds:0xc002df20,eax
c001fa27:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001fa2e:	81 c4 6c 03 00 00    	add    esp,0x36c
c001fa34:	c3                   	ret    
c001fa35:	90                   	nop

c001fa36 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001fa36:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001fa3c:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001fa44:	74 0a                	je     c001fa50 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001fa46:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001fa4e:	75 0a                	jne    c001fa5a <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001fa50:	b8 04 00 00 00       	mov    eax,0x4
c001fa55:	e9 db 00 00 00       	jmp    c001fb35 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001fa5a:	83 ec 08             	sub    esp,0x8
c001fa5d:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001fa64:	50                   	push   eax
c001fa65:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001fa6c:	e8 2c 64 fe ff       	call   c0005e9d <f_readdir>
c001fa71:	83 c4 10             	add    esp,0x10
c001fa74:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001fa7b:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001fa81:	83 ec 0c             	sub    esp,0xc
c001fa84:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001fa8b:	83 c0 1a             	add    eax,0x1a
c001fa8e:	50                   	push   eax
c001fa8f:	e8 14 0c fe ff       	call   c00006a8 <strlen>
c001fa94:	83 c4 10             	add    esp,0x10
c001fa97:	ba 00 00 00 00       	mov    edx,0x0
c001fa9c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001faa0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001faa4:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001faab:	0f b6 c0             	movzx  eax,al
c001faae:	83 e0 10             	and    eax,0x10
c001fab1:	74 07                	je     c001faba <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c001fab3:	b8 02 00 00 00       	mov    eax,0x2
c001fab8:	eb 05                	jmp    c001fabf <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c001faba:	b8 01 00 00 00       	mov    eax,0x1
c001fabf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fac3:	83 ec 08             	sub    esp,0x8
c001fac6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001facd:	83 c0 1a             	add    eax,0x1a
c001fad0:	50                   	push   eax
c001fad1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001fad5:	83 c0 10             	add    eax,0x10
c001fad8:	50                   	push   eax
c001fad9:	e8 4c 0c fe ff       	call   c000072a <strcpy>
c001fade:	83 c4 10             	add    esp,0x10
c001fae1:	83 ec 04             	sub    esp,0x4
c001fae4:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001faeb:	8d 44 24 08          	lea    eax,[esp+0x8]
c001faef:	50                   	push   eax
c001faf0:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001faf7:	e8 59 0b fe ff       	call   c0000655 <memcpy>
c001fafc:	83 c4 10             	add    esp,0x10
c001faff:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001fb06:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001fb0c:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001fb13:	84 c0                	test   al,al
c001fb15:	75 07                	jne    c001fb1e <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c001fb17:	b8 07 00 00 00       	mov    eax,0x7
c001fb1c:	eb 17                	jmp    c001fb35 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001fb1e:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001fb25:	85 c0                	test   eax,eax
c001fb27:	75 07                	jne    c001fb30 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c001fb29:	b8 00 00 00 00       	mov    eax,0x0
c001fb2e:	eb 05                	jmp    c001fb35 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001fb30:	b8 01 00 00 00       	mov    eax,0x1
c001fb35:	81 c4 3c 02 00 00    	add    esp,0x23c
c001fb3b:	c3                   	ret    

c001fb3c <FAT::read(void*, unsigned long, void*, int*)>:
c001fb3c:	83 ec 1c             	sub    esp,0x1c
c001fb3f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fb44:	74 07                	je     c001fb4d <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001fb46:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001fb4b:	75 07                	jne    c001fb54 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001fb4d:	b8 04 00 00 00       	mov    eax,0x4
c001fb52:	eb 3d                	jmp    c001fb91 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001fb54:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fb58:	50                   	push   eax
c001fb59:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fb5d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fb61:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fb65:	e8 13 56 fe ff       	call   c000517d <f_read>
c001fb6a:	83 c4 10             	add    esp,0x10
c001fb6d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fb75:	89 c2                	mov    edx,eax
c001fb77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001fb7b:	89 10                	mov    DWORD PTR [eax],edx
c001fb7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb81:	85 c0                	test   eax,eax
c001fb83:	75 07                	jne    c001fb8c <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001fb85:	b8 00 00 00 00       	mov    eax,0x0
c001fb8a:	eb 05                	jmp    c001fb91 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001fb8c:	b8 01 00 00 00       	mov    eax,0x1
c001fb91:	83 c4 1c             	add    esp,0x1c
c001fb94:	c3                   	ret    
c001fb95:	90                   	nop

c001fb96 <FAT::write(void*, unsigned long, void*, int*)>:
c001fb96:	83 ec 1c             	sub    esp,0x1c
c001fb99:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fb9e:	74 07                	je     c001fba7 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001fba0:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001fba5:	75 07                	jne    c001fbae <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001fba7:	b8 04 00 00 00       	mov    eax,0x4
c001fbac:	eb 3d                	jmp    c001fbeb <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001fbae:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fbb2:	50                   	push   eax
c001fbb3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fbb7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fbbb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fbbf:	e8 39 58 fe ff       	call   c00053fd <f_write>
c001fbc4:	83 c4 10             	add    esp,0x10
c001fbc7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fbcb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fbcf:	89 c2                	mov    edx,eax
c001fbd1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001fbd5:	89 10                	mov    DWORD PTR [eax],edx
c001fbd7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fbdb:	85 c0                	test   eax,eax
c001fbdd:	75 07                	jne    c001fbe6 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001fbdf:	b8 00 00 00 00       	mov    eax,0x0
c001fbe4:	eb 05                	jmp    c001fbeb <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001fbe6:	b8 01 00 00 00       	mov    eax,0x1
c001fbeb:	83 c4 1c             	add    esp,0x1c
c001fbee:	c3                   	ret    
c001fbef:	90                   	nop

c001fbf0 <FAT::close(void*)>:
c001fbf0:	83 ec 1c             	sub    esp,0x1c
c001fbf3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fbf8:	75 07                	jne    c001fc01 <FAT::close(void*)+0x11>
c001fbfa:	b8 04 00 00 00       	mov    eax,0x4
c001fbff:	eb 36                	jmp    c001fc37 <FAT::close(void*)+0x47>
c001fc01:	83 ec 0c             	sub    esp,0xc
c001fc04:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fc08:	e8 86 5c fe ff       	call   c0005893 <f_close>
c001fc0d:	83 c4 10             	add    esp,0x10
c001fc10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fc14:	83 ec 0c             	sub    esp,0xc
c001fc17:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fc1b:	e8 c4 f8 fe ff       	call   c000f4e4 <free>
c001fc20:	83 c4 10             	add    esp,0x10
c001fc23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fc27:	85 c0                	test   eax,eax
c001fc29:	75 07                	jne    c001fc32 <FAT::close(void*)+0x42>
c001fc2b:	b8 00 00 00 00       	mov    eax,0x0
c001fc30:	eb 05                	jmp    c001fc37 <FAT::close(void*)+0x47>
c001fc32:	b8 01 00 00 00       	mov    eax,0x1
c001fc37:	83 c4 1c             	add    esp,0x1c
c001fc3a:	c3                   	ret    
c001fc3b:	90                   	nop

c001fc3c <FAT::closeDir(void*)>:
c001fc3c:	83 ec 1c             	sub    esp,0x1c
c001fc3f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fc44:	75 07                	jne    c001fc4d <FAT::closeDir(void*)+0x11>
c001fc46:	b8 04 00 00 00       	mov    eax,0x4
c001fc4b:	eb 36                	jmp    c001fc83 <FAT::closeDir(void*)+0x47>
c001fc4d:	83 ec 0c             	sub    esp,0xc
c001fc50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fc54:	e8 22 62 fe ff       	call   c0005e7b <f_closedir>
c001fc59:	83 c4 10             	add    esp,0x10
c001fc5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fc60:	83 ec 0c             	sub    esp,0xc
c001fc63:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fc67:	e8 78 f8 fe ff       	call   c000f4e4 <free>
c001fc6c:	83 c4 10             	add    esp,0x10
c001fc6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fc73:	85 c0                	test   eax,eax
c001fc75:	75 07                	jne    c001fc7e <FAT::closeDir(void*)+0x42>
c001fc77:	b8 00 00 00 00       	mov    eax,0x0
c001fc7c:	eb 05                	jmp    c001fc83 <FAT::closeDir(void*)+0x47>
c001fc7e:	b8 01 00 00 00       	mov    eax,0x1
c001fc83:	83 c4 1c             	add    esp,0x1c
c001fc86:	c3                   	ret    
c001fc87:	90                   	nop

c001fc88 <FAT::seek(void*, unsigned long long)>:
c001fc88:	83 ec 2c             	sub    esp,0x2c
c001fc8b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fc8f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fc93:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001fc97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fc9b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001fca0:	75 07                	jne    c001fca9 <FAT::seek(void*, unsigned long long)+0x21>
c001fca2:	b8 04 00 00 00       	mov    eax,0x4
c001fca7:	eb 2f                	jmp    c001fcd8 <FAT::seek(void*, unsigned long long)+0x50>
c001fca9:	83 ec 04             	sub    esp,0x4
c001fcac:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001fcb0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001fcb4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001fcb8:	e8 05 5c fe ff       	call   c00058c2 <f_lseek>
c001fcbd:	83 c4 10             	add    esp,0x10
c001fcc0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fcc4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fcc8:	85 c0                	test   eax,eax
c001fcca:	75 07                	jne    c001fcd3 <FAT::seek(void*, unsigned long long)+0x4b>
c001fccc:	b8 00 00 00 00       	mov    eax,0x0
c001fcd1:	eb 05                	jmp    c001fcd8 <FAT::seek(void*, unsigned long long)+0x50>
c001fcd3:	b8 01 00 00 00       	mov    eax,0x1
c001fcd8:	83 c4 2c             	add    esp,0x2c
c001fcdb:	c3                   	ret    

c001fcdc <fatWrapperReadDisk>:
c001fcdc:	83 ec 1c             	sub    esp,0x1c
c001fcdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fce3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fce7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fceb:	89 04 24             	mov    DWORD PTR [esp],eax
c001fcee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fcf2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fcf6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fcfb:	8b 04 85 20 cf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd30e0]
c001fd02:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001fd06:	83 ec 0c             	sub    esp,0xc
c001fd09:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fd0d:	52                   	push   edx
c001fd0e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fd12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fd16:	50                   	push   eax
c001fd17:	e8 c2 60 ff ff       	call   c0015dde <LogicalDisk::read(unsigned long long, int, void*)>
c001fd1c:	83 c4 20             	add    esp,0x20
c001fd1f:	83 c4 1c             	add    esp,0x1c
c001fd22:	c3                   	ret    

c001fd23 <fatWrapperWriteDisk>:
c001fd23:	83 ec 1c             	sub    esp,0x1c
c001fd26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd2a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fd2e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fd32:	89 04 24             	mov    DWORD PTR [esp],eax
c001fd35:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fd39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fd3d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fd42:	8b 04 85 20 cf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd30e0]
c001fd49:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001fd4d:	83 ec 0c             	sub    esp,0xc
c001fd50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fd54:	52                   	push   edx
c001fd55:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fd59:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fd5d:	50                   	push   eax
c001fd5e:	e8 e7 60 ff ff       	call   c0015e4a <LogicalDisk::write(unsigned long long, int, void*)>
c001fd63:	83 c4 20             	add    esp,0x20
c001fd66:	83 c4 1c             	add    esp,0x1c
c001fd69:	c3                   	ret    

c001fd6a <fatWrapperIoctl>:
c001fd6a:	53                   	push   ebx
c001fd6b:	83 ec 28             	sub    esp,0x28
c001fd6e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001fd72:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001fd76:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001fd7a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001fd7e:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001fd83:	75 31                	jne    c001fdb6 <fatWrapperIoctl+0x4c>
c001fd85:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fd89:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fd8d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fd92:	8b 04 85 20 cf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd30e0]
c001fd99:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001fd9f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001fda5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fda9:	66 89 02             	mov    WORD PTR [edx],ax
c001fdac:	b8 00 00 00 00       	mov    eax,0x0
c001fdb1:	e9 b2 00 00 00       	jmp    c001fe68 <fatWrapperIoctl+0xfe>
c001fdb6:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001fdbb:	75 6a                	jne    c001fe27 <fatWrapperIoctl+0xbd>
c001fdbd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fdc1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fdc5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fdca:	8b 04 85 20 cf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd30e0]
c001fdd1:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001fdd7:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001fddd:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001fde3:	89 c8                	mov    eax,ecx
c001fde5:	89 da                	mov    edx,ebx
c001fde7:	0f a4 c2 0a          	shld   edx,eax,0xa
c001fdeb:	c1 e0 0a             	shl    eax,0xa
c001fdee:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001fdf3:	8b 0c 8d 20 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd30e0]
c001fdfa:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001fe00:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001fe06:	89 cb                	mov    ebx,ecx
c001fe08:	c1 fb 1f             	sar    ebx,0x1f
c001fe0b:	53                   	push   ebx
c001fe0c:	51                   	push   ecx
c001fe0d:	52                   	push   edx
c001fe0e:	50                   	push   eax
c001fe0f:	e8 68 55 00 00       	call   c002537c <__udivdi3>
c001fe14:	83 c4 10             	add    esp,0x10
c001fe17:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001fe1b:	89 01                	mov    DWORD PTR [ecx],eax
c001fe1d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fe20:	b8 00 00 00 00       	mov    eax,0x0
c001fe25:	eb 41                	jmp    c001fe68 <fatWrapperIoctl+0xfe>
c001fe27:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001fe2c:	75 07                	jne    c001fe35 <fatWrapperIoctl+0xcb>
c001fe2e:	b8 00 00 00 00       	mov    eax,0x0
c001fe33:	eb 33                	jmp    c001fe68 <fatWrapperIoctl+0xfe>
c001fe35:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001fe3a:	75 19                	jne    c001fe55 <fatWrapperIoctl+0xeb>
c001fe3c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fe40:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001fe44:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fe48:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001fe4e:	b8 00 00 00 00       	mov    eax,0x0
c001fe53:	eb 13                	jmp    c001fe68 <fatWrapperIoctl+0xfe>
c001fe55:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001fe5a:	75 07                	jne    c001fe63 <fatWrapperIoctl+0xf9>
c001fe5c:	b8 00 00 00 00       	mov    eax,0x0
c001fe61:	eb 05                	jmp    c001fe68 <fatWrapperIoctl+0xfe>
c001fe63:	b8 04 00 00 00       	mov    eax,0x4
c001fe68:	83 c4 28             	add    esp,0x28
c001fe6b:	5b                   	pop    ebx
c001fe6c:	c3                   	ret    
c001fe6d:	90                   	nop

c001fe6e <FAT::FAT()>:
c001fe6e:	83 ec 1c             	sub    esp,0x1c
c001fe71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fe75:	83 ec 0c             	sub    esp,0xc
c001fe78:	50                   	push   eax
c001fe79:	e8 d8 2b ff ff       	call   c0012a56 <Filesystem::Filesystem()>
c001fe7e:	83 c4 10             	add    esp,0x10
c001fe81:	ba f0 ad 02 c0       	mov    edx,0xc002adf0
c001fe86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fe8a:	89 10                	mov    DWORD PTR [eax],edx
c001fe8c:	c7 05 20 df 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002df20,0x0
c001fe96:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001fe9e:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001fea3:	7f 15                	jg     c001feba <FAT::FAT()+0x4c>
c001fea5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fea9:	c7 04 85 40 df 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd20c0],0xffffffff
c001feb4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001feb8:	eb e4                	jmp    c001fe9e <FAT::FAT()+0x30>
c001feba:	90                   	nop
c001febb:	83 c4 1c             	add    esp,0x1c
c001febe:	c3                   	ret    
c001febf:	90                   	nop

c001fec0 <FAT::fixFilepath(char*)>:
c001fec0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fec4:	8a 00                	mov    al,BYTE PTR [eax]
c001fec6:	3c 40                	cmp    al,0x40
c001fec8:	7e 2c                	jle    c001fef6 <FAT::fixFilepath(char*)+0x36>
c001feca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fece:	8a 00                	mov    al,BYTE PTR [eax]
c001fed0:	83 e8 41             	sub    eax,0x41
c001fed3:	88 c2                	mov    dl,al
c001fed5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fed9:	88 10                	mov    BYTE PTR [eax],dl
c001fedb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fedf:	8a 00                	mov    al,BYTE PTR [eax]
c001fee1:	0f be c0             	movsx  eax,al
c001fee4:	8b 04 85 40 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd20c0]
c001feeb:	83 c0 30             	add    eax,0x30
c001feee:	88 c2                	mov    dl,al
c001fef0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fef4:	88 10                	mov    BYTE PTR [eax],dl
c001fef6:	90                   	nop
c001fef7:	c3                   	ret    

c001fef8 <FAT::open(char const*, void**, FileOpenMode)>:
c001fef8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001fefe:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ff06:	74 0a                	je     c001ff12 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001ff08:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001ff10:	75 0a                	jne    c001ff1c <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001ff12:	b8 04 00 00 00       	mov    eax,0x4
c001ff17:	e9 fd 00 00 00       	jmp    c0020019 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001ff1c:	83 ec 08             	sub    esp,0x8
c001ff1f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ff26:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ff2a:	50                   	push   eax
c001ff2b:	e8 fa 07 fe ff       	call   c000072a <strcpy>
c001ff30:	83 c4 10             	add    esp,0x10
c001ff33:	83 ec 08             	sub    esp,0x8
c001ff36:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ff3a:	50                   	push   eax
c001ff3b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ff42:	e8 79 ff ff ff       	call   c001fec0 <FAT::fixFilepath(char*)>
c001ff47:	83 c4 10             	add    esp,0x10
c001ff4a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001ff52:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ff59:	83 e0 01             	and    eax,0x1
c001ff5c:	74 08                	je     c001ff66 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001ff5e:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001ff66:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ff6d:	83 e0 04             	and    eax,0x4
c001ff70:	74 10                	je     c001ff82 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001ff72:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001ff7a:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001ff82:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ff89:	83 e0 02             	and    eax,0x2
c001ff8c:	74 08                	je     c001ff96 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001ff8e:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001ff96:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ff9d:	83 e0 08             	and    eax,0x8
c001ffa0:	74 08                	je     c001ffaa <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001ffa2:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001ffaa:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ffb1:	83 e0 10             	and    eax,0x10
c001ffb4:	74 08                	je     c001ffbe <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001ffb6:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001ffbe:	83 ec 0c             	sub    esp,0xc
c001ffc1:	68 50 02 00 00       	push   0x250
c001ffc6:	e8 09 f5 fe ff       	call   c000f4d4 <malloc>
c001ffcb:	83 c4 10             	add    esp,0x10
c001ffce:	89 c2                	mov    edx,eax
c001ffd0:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ffd7:	89 10                	mov    DWORD PTR [eax],edx
c001ffd9:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001ffe1:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ffe8:	8b 00                	mov    eax,DWORD PTR [eax]
c001ffea:	83 ec 04             	sub    esp,0x4
c001ffed:	52                   	push   edx
c001ffee:	8d 54 24 10          	lea    edx,[esp+0x10]
c001fff2:	52                   	push   edx
c001fff3:	50                   	push   eax
c001fff4:	e8 48 4d fe ff       	call   c0004d41 <f_open>
c001fff9:	83 c4 10             	add    esp,0x10
c001fffc:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0020003:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c002000b:	74 07                	je     c0020014 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c002000d:	b8 01 00 00 00       	mov    eax,0x1
c0020012:	eb 05                	jmp    c0020019 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020014:	b8 00 00 00 00       	mov    eax,0x0
c0020019:	81 c4 1c 01 00 00    	add    esp,0x11c
c002001f:	c3                   	ret    

c0020020 <FAT::openDir(char const*, void**)>:
c0020020:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020026:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002002e:	74 0a                	je     c002003a <FAT::openDir(char const*, void**)+0x1a>
c0020030:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020038:	75 07                	jne    c0020041 <FAT::openDir(char const*, void**)+0x21>
c002003a:	b8 04 00 00 00       	mov    eax,0x4
c002003f:	eb 7d                	jmp    c00200be <FAT::openDir(char const*, void**)+0x9e>
c0020041:	83 ec 08             	sub    esp,0x8
c0020044:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002004b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002004f:	50                   	push   eax
c0020050:	e8 d5 06 fe ff       	call   c000072a <strcpy>
c0020055:	83 c4 10             	add    esp,0x10
c0020058:	83 ec 08             	sub    esp,0x8
c002005b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002005f:	50                   	push   eax
c0020060:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020067:	e8 54 fe ff ff       	call   c001fec0 <FAT::fixFilepath(char*)>
c002006c:	83 c4 10             	add    esp,0x10
c002006f:	83 ec 0c             	sub    esp,0xc
c0020072:	6a 4c                	push   0x4c
c0020074:	e8 5b f4 fe ff       	call   c000f4d4 <malloc>
c0020079:	83 c4 10             	add    esp,0x10
c002007c:	89 c2                	mov    edx,eax
c002007e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020085:	89 10                	mov    DWORD PTR [eax],edx
c0020087:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002008e:	8b 00                	mov    eax,DWORD PTR [eax]
c0020090:	83 ec 08             	sub    esp,0x8
c0020093:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020097:	52                   	push   edx
c0020098:	50                   	push   eax
c0020099:	e8 db 5c fe ff       	call   c0005d79 <f_opendir>
c002009e:	83 c4 10             	add    esp,0x10
c00200a1:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00200a8:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00200b0:	74 07                	je     c00200b9 <FAT::openDir(char const*, void**)+0x99>
c00200b2:	b8 01 00 00 00       	mov    eax,0x1
c00200b7:	eb 05                	jmp    c00200be <FAT::openDir(char const*, void**)+0x9e>
c00200b9:	b8 00 00 00 00       	mov    eax,0x0
c00200be:	81 c4 1c 01 00 00    	add    esp,0x11c
c00200c4:	c3                   	ret    
c00200c5:	90                   	nop

c00200c6 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00200c6:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00200cc:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00200d4:	75 0a                	jne    c00200e0 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c00200d6:	b8 04 00 00 00       	mov    eax,0x4
c00200db:	e9 c9 00 00 00       	jmp    c00201a9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00200e0:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00200e8:	75 0a                	jne    c00200f4 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00200ea:	b8 04 00 00 00       	mov    eax,0x4
c00200ef:	e9 b5 00 00 00       	jmp    c00201a9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00200f4:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00200fc:	75 0a                	jne    c0020108 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c00200fe:	b8 04 00 00 00       	mov    eax,0x4
c0020103:	e9 a1 00 00 00       	jmp    c00201a9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020108:	83 ec 08             	sub    esp,0x8
c002010b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020112:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020119:	50                   	push   eax
c002011a:	e8 0b 06 fe ff       	call   c000072a <strcpy>
c002011f:	83 c4 10             	add    esp,0x10
c0020122:	83 ec 08             	sub    esp,0x8
c0020125:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c002012c:	50                   	push   eax
c002012d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020134:	e8 87 fd ff ff       	call   c001fec0 <FAT::fixFilepath(char*)>
c0020139:	83 c4 10             	add    esp,0x10
c002013c:	83 ec 08             	sub    esp,0x8
c002013f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020143:	50                   	push   eax
c0020144:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c002014b:	50                   	push   eax
c002014c:	e8 e7 5d fe ff       	call   c0005f38 <f_stat>
c0020151:	83 c4 10             	add    esp,0x10
c0020154:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002015b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020162:	85 c0                	test   eax,eax
c0020164:	74 07                	je     c002016d <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0020166:	83 f8 04             	cmp    eax,0x4
c0020169:	74 32                	je     c002019d <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c002016b:	eb 37                	jmp    c00201a4 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c002016d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020171:	0f b6 c0             	movzx  eax,al
c0020174:	83 e0 10             	and    eax,0x10
c0020177:	0f 95 c2             	setne  dl
c002017a:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0020181:	88 10                	mov    BYTE PTR [eax],dl
c0020183:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020186:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002018a:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0020191:	89 01                	mov    DWORD PTR [ecx],eax
c0020193:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020196:	b8 00 00 00 00       	mov    eax,0x0
c002019b:	eb 0c                	jmp    c00201a9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002019d:	b8 02 00 00 00       	mov    eax,0x2
c00201a2:	eb 05                	jmp    c00201a9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00201a4:	b8 01 00 00 00       	mov    eax,0x1
c00201a9:	81 c4 2c 02 00 00    	add    esp,0x22c
c00201af:	c3                   	ret    

c00201b0 <FAT::unlink(char const*)>:
c00201b0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00201b6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00201be:	75 07                	jne    c00201c7 <FAT::unlink(char const*)+0x17>
c00201c0:	b8 04 00 00 00       	mov    eax,0x4
c00201c5:	eb 5c                	jmp    c0020223 <FAT::unlink(char const*)+0x73>
c00201c7:	83 ec 08             	sub    esp,0x8
c00201ca:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00201d1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00201d5:	50                   	push   eax
c00201d6:	e8 4f 05 fe ff       	call   c000072a <strcpy>
c00201db:	83 c4 10             	add    esp,0x10
c00201de:	83 ec 08             	sub    esp,0x8
c00201e1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00201e5:	50                   	push   eax
c00201e6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00201ed:	e8 ce fc ff ff       	call   c001fec0 <FAT::fixFilepath(char*)>
c00201f2:	83 c4 10             	add    esp,0x10
c00201f5:	83 ec 0c             	sub    esp,0xc
c00201f8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00201fc:	50                   	push   eax
c00201fd:	e8 88 60 fe ff       	call   c000628a <f_unlink>
c0020202:	83 c4 10             	add    esp,0x10
c0020205:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002020c:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020213:	85 c0                	test   eax,eax
c0020215:	75 07                	jne    c002021e <FAT::unlink(char const*)+0x6e>
c0020217:	b8 00 00 00 00       	mov    eax,0x0
c002021c:	eb 05                	jmp    c0020223 <FAT::unlink(char const*)+0x73>
c002021e:	b8 01 00 00 00       	mov    eax,0x1
c0020223:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020229:	c3                   	ret    

c002022a <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c002022a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0020230:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0020237:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c002023e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020242:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020246:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c002024e:	75 0a                	jne    c002025a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0020250:	b8 04 00 00 00       	mov    eax,0x4
c0020255:	e9 1c 01 00 00       	jmp    c0020376 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c002025a:	83 ec 08             	sub    esp,0x8
c002025d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020264:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020268:	50                   	push   eax
c0020269:	e8 bc 04 fe ff       	call   c000072a <strcpy>
c002026e:	83 c4 10             	add    esp,0x10
c0020271:	83 ec 08             	sub    esp,0x8
c0020274:	8d 44 24 20          	lea    eax,[esp+0x20]
c0020278:	50                   	push   eax
c0020279:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020280:	e8 3b fc ff ff       	call   c001fec0 <FAT::fixFilepath(char*)>
c0020285:	83 c4 10             	add    esp,0x10
c0020288:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0020290:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0020298:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002029d:	83 e0 01             	and    eax,0x1
c00202a0:	74 08                	je     c00202aa <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c00202a2:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00202aa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00202af:	83 e0 02             	and    eax,0x2
c00202b2:	74 08                	je     c00202bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c00202b4:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00202bc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00202c1:	83 e0 04             	and    eax,0x4
c00202c4:	74 08                	je     c00202ce <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c00202c6:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00202ce:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00202d3:	83 e0 08             	and    eax,0x8
c00202d6:	74 08                	je     c00202e0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c00202d8:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00202e0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00202e5:	83 e0 01             	and    eax,0x1
c00202e8:	74 08                	je     c00202f2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c00202ea:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00202f2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00202f7:	83 e0 02             	and    eax,0x2
c00202fa:	74 08                	je     c0020304 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c00202fc:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0020304:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020309:	83 e0 04             	and    eax,0x4
c002030c:	74 08                	je     c0020316 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c002030e:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0020316:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002031b:	83 e0 08             	and    eax,0x8
c002031e:	74 08                	je     c0020328 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0020320:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0020328:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c002032f:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0020336:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c002033e:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0020346:	83 ec 04             	sub    esp,0x4
c0020349:	52                   	push   edx
c002034a:	50                   	push   eax
c002034b:	8d 44 24 24          	lea    eax,[esp+0x24]
c002034f:	50                   	push   eax
c0020350:	e8 d7 65 fe ff       	call   c000692c <f_chmod>
c0020355:	83 c4 10             	add    esp,0x10
c0020358:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c002035f:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0020366:	85 c0                	test   eax,eax
c0020368:	75 07                	jne    c0020371 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c002036a:	b8 00 00 00 00       	mov    eax,0x0
c002036f:	eb 05                	jmp    c0020376 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020371:	b8 01 00 00 00       	mov    eax,0x1
c0020376:	81 c4 2c 01 00 00    	add    esp,0x12c
c002037c:	c3                   	ret    
c002037d:	90                   	nop

c002037e <FAT::rename(char const*, char const*)>:
c002037e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020384:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c002038c:	74 0a                	je     c0020398 <FAT::rename(char const*, char const*)+0x1a>
c002038e:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0020396:	75 0a                	jne    c00203a2 <FAT::rename(char const*, char const*)+0x24>
c0020398:	b8 04 00 00 00       	mov    eax,0x4
c002039d:	e9 98 00 00 00       	jmp    c002043a <FAT::rename(char const*, char const*)+0xbc>
c00203a2:	83 ec 08             	sub    esp,0x8
c00203a5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00203ac:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00203b3:	50                   	push   eax
c00203b4:	e8 71 03 fe ff       	call   c000072a <strcpy>
c00203b9:	83 c4 10             	add    esp,0x10
c00203bc:	83 ec 08             	sub    esp,0x8
c00203bf:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00203c6:	50                   	push   eax
c00203c7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00203ce:	e8 ed fa ff ff       	call   c001fec0 <FAT::fixFilepath(char*)>
c00203d3:	83 c4 10             	add    esp,0x10
c00203d6:	83 ec 08             	sub    esp,0x8
c00203d9:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00203e0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00203e4:	50                   	push   eax
c00203e5:	e8 40 03 fe ff       	call   c000072a <strcpy>
c00203ea:	83 c4 10             	add    esp,0x10
c00203ed:	83 ec 08             	sub    esp,0x8
c00203f0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00203f4:	50                   	push   eax
c00203f5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00203fc:	e8 bf fa ff ff       	call   c001fec0 <FAT::fixFilepath(char*)>
c0020401:	83 c4 10             	add    esp,0x10
c0020404:	83 ec 08             	sub    esp,0x8
c0020407:	8d 44 24 14          	lea    eax,[esp+0x14]
c002040b:	50                   	push   eax
c002040c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020413:	50                   	push   eax
c0020414:	e8 20 62 fe ff       	call   c0006639 <f_rename>
c0020419:	83 c4 10             	add    esp,0x10
c002041c:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0020423:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c002042a:	85 c0                	test   eax,eax
c002042c:	75 07                	jne    c0020435 <FAT::rename(char const*, char const*)+0xb7>
c002042e:	b8 00 00 00 00       	mov    eax,0x0
c0020433:	eb 05                	jmp    c002043a <FAT::rename(char const*, char const*)+0xbc>
c0020435:	b8 01 00 00 00       	mov    eax,0x1
c002043a:	81 c4 1c 02 00 00    	add    esp,0x21c
c0020440:	c3                   	ret    
c0020441:	90                   	nop

c0020442 <FAT::mkdir(char const*)>:
c0020442:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020448:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020450:	75 07                	jne    c0020459 <FAT::mkdir(char const*)+0x17>
c0020452:	b8 04 00 00 00       	mov    eax,0x4
c0020457:	eb 5c                	jmp    c00204b5 <FAT::mkdir(char const*)+0x73>
c0020459:	83 ec 08             	sub    esp,0x8
c002045c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020463:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020467:	50                   	push   eax
c0020468:	e8 bd 02 fe ff       	call   c000072a <strcpy>
c002046d:	83 c4 10             	add    esp,0x10
c0020470:	83 ec 08             	sub    esp,0x8
c0020473:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020477:	50                   	push   eax
c0020478:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002047f:	e8 3c fa ff ff       	call   c001fec0 <FAT::fixFilepath(char*)>
c0020484:	83 c4 10             	add    esp,0x10
c0020487:	83 ec 0c             	sub    esp,0xc
c002048a:	8d 44 24 18          	lea    eax,[esp+0x18]
c002048e:	50                   	push   eax
c002048f:	e8 79 5f fe ff       	call   c000640d <f_mkdir>
c0020494:	83 c4 10             	add    esp,0x10
c0020497:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002049e:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00204a5:	85 c0                	test   eax,eax
c00204a7:	75 07                	jne    c00204b0 <FAT::mkdir(char const*)+0x6e>
c00204a9:	b8 00 00 00 00       	mov    eax,0x0
c00204ae:	eb 05                	jmp    c00204b5 <FAT::mkdir(char const*)+0x73>
c00204b0:	b8 01 00 00 00       	mov    eax,0x1
c00204b5:	81 c4 1c 01 00 00    	add    esp,0x11c
c00204bb:	c3                   	ret    

c00204bc <FAT::exists(char const*)>:
c00204bc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00204c2:	83 ec 08             	sub    esp,0x8
c00204c5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00204cc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00204d0:	50                   	push   eax
c00204d1:	e8 54 02 fe ff       	call   c000072a <strcpy>
c00204d6:	83 c4 10             	add    esp,0x10
c00204d9:	83 ec 08             	sub    esp,0x8
c00204dc:	8d 44 24 08          	lea    eax,[esp+0x8]
c00204e0:	50                   	push   eax
c00204e1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00204e8:	e8 d3 f9 ff ff       	call   c001fec0 <FAT::fixFilepath(char*)>
c00204ed:	83 c4 10             	add    esp,0x10
c00204f0:	83 ec 08             	sub    esp,0x8
c00204f3:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c00204fa:	50                   	push   eax
c00204fb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00204ff:	50                   	push   eax
c0020500:	e8 33 5a fe ff       	call   c0005f38 <f_stat>
c0020505:	83 c4 10             	add    esp,0x10
c0020508:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002050f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020516:	85 c0                	test   eax,eax
c0020518:	75 04                	jne    c002051e <FAT::exists(char const*)+0x62>
c002051a:	b0 01                	mov    al,0x1
c002051c:	eb 02                	jmp    c0020520 <FAT::exists(char const*)+0x64>
c002051e:	b0 00                	mov    al,0x0
c0020520:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020526:	c3                   	ret    
c0020527:	90                   	nop

c0020528 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0020528:	b8 08 00 00 00       	mov    eax,0x8
c002052d:	c3                   	ret    

c002052e <ISO9660::seek(void*, unsigned long long)>:
c002052e:	53                   	push   ebx
c002052f:	b8 04 00 00 00       	mov    eax,0x4
c0020534:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020538:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002053c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020540:	85 d2                	test   edx,edx
c0020542:	74 17                	je     c002055b <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020544:	89 c8                	mov    eax,ecx
c0020546:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0020549:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c002054c:	b8 01 00 00 00       	mov    eax,0x1
c0020551:	73 08                	jae    c002055b <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020553:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0020556:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0020559:	31 c0                	xor    eax,eax
c002055b:	5b                   	pop    ebx
c002055c:	c3                   	ret    
c002055d:	90                   	nop

c002055e <ISO9660::tell(void*, unsigned long long*)>:
c002055e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020562:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020566:	85 d2                	test   edx,edx
c0020568:	74 12                	je     c002057c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002056a:	85 c0                	test   eax,eax
c002056c:	74 0e                	je     c002057c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002056e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0020571:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0020574:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020577:	89 10                	mov    DWORD PTR [eax],edx
c0020579:	31 c0                	xor    eax,eax
c002057b:	c3                   	ret    
c002057c:	b8 04 00 00 00       	mov    eax,0x4
c0020581:	c3                   	ret    

c0020582 <ISO9660::getName()>:
c0020582:	b8 4c ae 02 c0       	mov    eax,0xc002ae4c
c0020587:	c3                   	ret    

c0020588 <ISO9660::stat(void*, unsigned long long*)>:
c0020588:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002058c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020590:	85 d2                	test   edx,edx
c0020592:	74 12                	je     c00205a6 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020594:	85 c0                	test   eax,eax
c0020596:	74 0e                	je     c00205a6 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020598:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c002059b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c002059e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00205a1:	89 10                	mov    DWORD PTR [eax],edx
c00205a3:	31 c0                	xor    eax,eax
c00205a5:	c3                   	ret    
c00205a6:	b8 04 00 00 00       	mov    eax,0x4
c00205ab:	c3                   	ret    

c00205ac <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00205ac:	b8 01 00 00 00       	mov    eax,0x1
c00205b1:	c3                   	ret    

c00205b2 <ISO9660::unlink(char const*)>:
c00205b2:	b8 01 00 00 00       	mov    eax,0x1
c00205b7:	c3                   	ret    

c00205b8 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00205b8:	b8 01 00 00 00       	mov    eax,0x1
c00205bd:	c3                   	ret    

c00205be <ISO9660::rename(char const*, char const*)>:
c00205be:	b8 01 00 00 00       	mov    eax,0x1
c00205c3:	c3                   	ret    

c00205c4 <ISO9660::mkdir(char const*)>:
c00205c4:	b8 01 00 00 00       	mov    eax,0x1
c00205c9:	c3                   	ret    

c00205ca <ISO9660::close(void*)>:
c00205ca:	83 ec 0c             	sub    esp,0xc
c00205cd:	b8 04 00 00 00       	mov    eax,0x4
c00205d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00205d6:	85 d2                	test   edx,edx
c00205d8:	74 0e                	je     c00205e8 <ISO9660::close(void*)+0x1e>
c00205da:	83 ec 0c             	sub    esp,0xc
c00205dd:	52                   	push   edx
c00205de:	e8 01 ef fe ff       	call   c000f4e4 <free>
c00205e3:	83 c4 10             	add    esp,0x10
c00205e6:	31 c0                	xor    eax,eax
c00205e8:	83 c4 0c             	add    esp,0xc
c00205eb:	c3                   	ret    

c00205ec <ISO9660::closeDir(void*)>:
c00205ec:	83 ec 0c             	sub    esp,0xc
c00205ef:	b8 04 00 00 00       	mov    eax,0x4
c00205f4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00205f8:	85 d2                	test   edx,edx
c00205fa:	74 0e                	je     c002060a <ISO9660::closeDir(void*)+0x1e>
c00205fc:	83 ec 0c             	sub    esp,0xc
c00205ff:	52                   	push   edx
c0020600:	e8 df ee fe ff       	call   c000f4e4 <free>
c0020605:	83 c4 10             	add    esp,0x10
c0020608:	31 c0                	xor    eax,eax
c002060a:	83 c4 0c             	add    esp,0xc
c002060d:	c3                   	ret    

c002060e <ISO9660::~ISO9660()>:
c002060e:	83 ec 0c             	sub    esp,0xc
c0020611:	ba a0 ae 02 c0       	mov    edx,0xc002aea0
c0020616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002061a:	89 10                	mov    DWORD PTR [eax],edx
c002061c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020620:	83 ec 0c             	sub    esp,0xc
c0020623:	50                   	push   eax
c0020624:	e8 51 24 ff ff       	call   c0012a7a <Filesystem::~Filesystem()>
c0020629:	83 c4 10             	add    esp,0x10
c002062c:	90                   	nop
c002062d:	83 c4 0c             	add    esp,0xc
c0020630:	c3                   	ret    
c0020631:	90                   	nop

c0020632 <ISO9660::~ISO9660()>:
c0020632:	83 ec 0c             	sub    esp,0xc
c0020635:	83 ec 0c             	sub    esp,0xc
c0020638:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002063c:	e8 cd ff ff ff       	call   c002060e <ISO9660::~ISO9660()>
c0020641:	83 c4 10             	add    esp,0x10
c0020644:	83 ec 08             	sub    esp,0x8
c0020647:	6a 08                	push   0x8
c0020649:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002064d:	e8 1f 20 ff ff       	call   c0012671 <operator delete(void*, unsigned long)>
c0020652:	83 c4 10             	add    esp,0x10
c0020655:	83 c4 0c             	add    esp,0xc
c0020658:	c3                   	ret    

c0020659 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0020659:	55                   	push   ebp
c002065a:	31 c9                	xor    ecx,ecx
c002065c:	57                   	push   edi
c002065d:	56                   	push   esi
c002065e:	53                   	push   ebx
c002065f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0020663:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0020667:	89 eb                	mov    ebx,ebp
c0020669:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c002066d:	39 ce                	cmp    esi,ecx
c002066f:	7e 17                	jle    c0020688 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0020671:	31 d2                	xor    edx,edx
c0020673:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0020677:	7d 13                	jge    c002068c <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0020679:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002067d:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0020680:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0020683:	75 0d                	jne    c0020692 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0020685:	42                   	inc    edx
c0020686:	eb eb                	jmp    c0020673 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0020688:	31 c0                	xor    eax,eax
c002068a:	eb 0a                	jmp    c0020696 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002068c:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0020690:	eb 04                	jmp    c0020696 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0020692:	41                   	inc    ecx
c0020693:	43                   	inc    ebx
c0020694:	eb d7                	jmp    c002066d <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0020696:	5b                   	pop    ebx
c0020697:	5e                   	pop    esi
c0020698:	5f                   	pop    edi
c0020699:	5d                   	pop    ebp
c002069a:	c3                   	ret    

c002069b <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c002069b:	56                   	push   esi
c002069c:	53                   	push   ebx
c002069d:	52                   	push   edx
c002069e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00206a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00206a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00206aa:	39 0d 20 e0 02 c0    	cmp    DWORD PTR ds:0xc002e020,ecx
c00206b0:	75 08                	jne    c00206ba <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c00206b2:	38 05 b4 be 02 c0    	cmp    BYTE PTR ds:0xc002beb4,al
c00206b8:	74 2b                	je     c00206e5 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c00206ba:	83 ec 0c             	sub    esp,0xc
c00206bd:	a2 b4 be 02 c0       	mov    ds:0xc002beb4,al
c00206c2:	68 40 e0 02 c0       	push   0xc002e040
c00206c7:	0f be c0             	movsx  eax,al
c00206ca:	6a 01                	push   0x1
c00206cc:	89 0d 20 e0 02 c0    	mov    DWORD PTR ds:0xc002e020,ecx
c00206d2:	31 db                	xor    ebx,ebx
c00206d4:	53                   	push   ebx
c00206d5:	51                   	push   ecx
c00206d6:	ff 34 85 1c ce 02 c0 	push   DWORD PTR [eax*4-0x3ffd31e4]
c00206dd:	e8 fc 56 ff ff       	call   c0015dde <LogicalDisk::read(unsigned long long, int, void*)>
c00206e2:	83 c4 20             	add    esp,0x20
c00206e5:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c00206ed:	c7 44 24 14 40 e0 02 c0 	mov    DWORD PTR [esp+0x14],0xc002e040
c00206f5:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00206f9:	58                   	pop    eax
c00206fa:	5b                   	pop    ebx
c00206fb:	5e                   	pop    esi
c00206fc:	e9 54 ff fd ff       	jmp    c0000655 <memcpy>
c0020701:	90                   	nop

c0020702 <ISO9660::tryMount(LogicalDisk*, int)>:
c0020702:	81 ec 10 08 00 00    	sub    esp,0x810
c0020708:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c002070f:	83 c0 41             	add    eax,0x41
c0020712:	0f be c0             	movsx  eax,al
c0020715:	50                   	push   eax
c0020716:	8d 44 24 08          	lea    eax,[esp+0x8]
c002071a:	50                   	push   eax
c002071b:	6a 10                	push   0x10
c002071d:	e8 79 ff ff ff       	call   c002069b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020722:	83 c4 10             	add    esp,0x10
c0020725:	31 c0                	xor    eax,eax
c0020727:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c002072c:	75 1d                	jne    c002074b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002072e:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0020733:	75 16                	jne    c002074b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020735:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c002073a:	75 0f                	jne    c002074b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002073c:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0020741:	75 08                	jne    c002074b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020743:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0020748:	0f 94 c0             	sete   al
c002074b:	81 c4 0c 08 00 00    	add    esp,0x80c
c0020751:	c3                   	ret    

c0020752 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0020752:	55                   	push   ebp
c0020753:	57                   	push   edi
c0020754:	56                   	push   esi
c0020755:	53                   	push   ebx
c0020756:	81 ec 34 08 00 00    	sub    esp,0x834
c002075c:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c0020763:	55                   	push   ebp
c0020764:	68 67 ae 02 c0       	push   0xc002ae67
c0020769:	e8 e3 1f ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c002076e:	83 c4 10             	add    esp,0x10
c0020771:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c0020779:	0f 84 06 02 00 00    	je     c0020985 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c002077f:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0020787:	0f 84 f8 01 00 00    	je     c0020985 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c002078d:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c0020794:	b8 01 00 00 00       	mov    eax,0x1
c0020799:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c002079d:	0f 85 e7 01 00 00    	jne    c002098a <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c00207a3:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c00207a6:	31 d2                	xor    edx,edx
c00207a8:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c00207ab:	89 e9                	mov    ecx,ebp
c00207ad:	89 d3                	mov    ebx,edx
c00207af:	01 f1                	add    ecx,esi
c00207b1:	11 fb                	adc    ebx,edi
c00207b3:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00207b7:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00207bb:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c00207c2:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00207c5:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c00207c8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00207cc:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00207d0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00207d4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00207d8:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c00207dc:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00207e0:	72 19                	jb     c00207fb <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c00207e2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00207e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00207ee:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00207f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00207f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00207f9:	eb 13                	jmp    c002080e <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c00207fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00207ff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020803:	29 f0                	sub    eax,esi
c0020805:	19 fa                	sbb    edx,edi
c0020807:	89 04 24             	mov    DWORD PTR [esp],eax
c002080a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002080e:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c0020815:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0020818:	8b 00                	mov    eax,DWORD PTR [eax]
c002081a:	53                   	push   ebx
c002081b:	0f a4 c2 0b          	shld   edx,eax,0xb
c002081f:	c1 e0 0b             	shl    eax,0xb
c0020822:	01 c6                	add    esi,eax
c0020824:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c002082b:	11 d7                	adc    edi,edx
c002082d:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c0020831:	89 fa                	mov    edx,edi
c0020833:	50                   	push   eax
c0020834:	8d 44 24 28          	lea    eax,[esp+0x28]
c0020838:	50                   	push   eax
c0020839:	89 f0                	mov    eax,esi
c002083b:	0f ac d0 0b          	shrd   eax,edx,0xb
c002083f:	50                   	push   eax
c0020840:	e8 56 fe ff ff       	call   c002069b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020845:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c002084c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020850:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020853:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0020857:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002085d:	83 c4 10             	add    esp,0x10
c0020860:	b8 00 08 00 00       	mov    eax,0x800
c0020865:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0020869:	29 d0                	sub    eax,edx
c002086b:	39 c1                	cmp    ecx,eax
c002086d:	83 db 00             	sbb    ebx,0x0
c0020870:	7d 19                	jge    c002088b <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c0020872:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0020877:	75 16                	jne    c002088f <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c0020879:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0020880:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020886:	e9 f6 00 00 00       	jmp    c0020981 <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c002088b:	89 c5                	mov    ebp,eax
c002088d:	eb 03                	jmp    c0020892 <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c002088f:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c0020892:	51                   	push   ecx
c0020893:	55                   	push   ebp
c0020894:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c0020898:	50                   	push   eax
c0020899:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c00208a0:	e8 b0 fd fd ff       	call   c0000655 <memcpy>
c00208a5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00208a9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00208ad:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c00208b4:	01 e8                	add    eax,ebp
c00208b6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00208ba:	89 e8                	mov    eax,ebp
c00208bc:	99                   	cdq    
c00208bd:	01 ee                	add    esi,ebp
c00208bf:	11 d7                	adc    edi,edx
c00208c1:	29 e9                	sub    ecx,ebp
c00208c3:	19 d3                	sbb    ebx,edx
c00208c5:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00208c9:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00208cd:	83 c4 10             	add    esp,0x10
c00208d0:	b8 ff 07 00 00       	mov    eax,0x7ff
c00208d5:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00208d8:	b8 00 00 00 00       	mov    eax,0x0
c00208dd:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00208e1:	7d 3f                	jge    c0020922 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c00208e3:	52                   	push   edx
c00208e4:	89 fa                	mov    edx,edi
c00208e6:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c00208ed:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c00208f1:	50                   	push   eax
c00208f2:	89 f0                	mov    eax,esi
c00208f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00208f8:	0f ac d0 0b          	shrd   eax,edx,0xb
c00208fc:	50                   	push   eax
c00208fd:	e8 99 fd ff ff       	call   c002069b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020902:	81 c6 00 08 00 00    	add    esi,0x800
c0020908:	83 d7 00             	adc    edi,0x0
c002090b:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0020913:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c002091b:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0020920:	eb ab                	jmp    c00208cd <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c0020922:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020926:	0b 04 24             	or     eax,DWORD PTR [esp]
c0020929:	74 34                	je     c002095f <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c002092b:	89 fa                	mov    edx,edi
c002092d:	50                   	push   eax
c002092e:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0020935:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c0020939:	50                   	push   eax
c002093a:	89 f0                	mov    eax,esi
c002093c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0020940:	0f ac d0 0b          	shrd   eax,edx,0xb
c0020944:	55                   	push   ebp
c0020945:	50                   	push   eax
c0020946:	e8 50 fd ff ff       	call   c002069b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002094b:	83 c4 0c             	add    esp,0xc
c002094e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0020952:	55                   	push   ebp
c0020953:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020957:	e8 f9 fc fd ff       	call   c0000655 <memcpy>
c002095c:	83 c4 10             	add    esp,0x10
c002095f:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0020966:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002096a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002096e:	89 38                	mov    DWORD PTR [eax],edi
c0020970:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c0020977:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002097b:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c002097e:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0020981:	31 c0                	xor    eax,eax
c0020983:	eb 05                	jmp    c002098a <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c0020985:	b8 04 00 00 00       	mov    eax,0x4
c002098a:	81 c4 2c 08 00 00    	add    esp,0x82c
c0020990:	5b                   	pop    ebx
c0020991:	5e                   	pop    esi
c0020992:	5f                   	pop    edi
c0020993:	5d                   	pop    ebp
c0020994:	c3                   	ret    
c0020995:	90                   	nop

c0020996 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0020996:	55                   	push   ebp
c0020997:	57                   	push   edi
c0020998:	56                   	push   esi
c0020999:	53                   	push   ebx
c002099a:	81 ec 5c 09 00 00    	sub    esp,0x95c
c00209a0:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c00209a7:	85 f6                	test   esi,esi
c00209a9:	0f 84 64 02 00 00    	je     c0020c13 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c00209af:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c00209b7:	0f 84 56 02 00 00    	je     c0020c13 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c00209bd:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00209c0:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c00209c3:	75 0a                	jne    c00209cf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c00209c5:	b8 07 00 00 00       	mov    eax,0x7
c00209ca:	e9 49 02 00 00       	jmp    c0020c18 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c00209cf:	50                   	push   eax
c00209d0:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c00209d4:	50                   	push   eax
c00209d5:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00209dc:	53                   	push   ebx
c00209dd:	8b 06                	mov    eax,DWORD PTR [esi]
c00209df:	c1 e0 0b             	shl    eax,0xb
c00209e2:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c00209e5:	c1 e8 0b             	shr    eax,0xb
c00209e8:	50                   	push   eax
c00209e9:	e8 ad fc ff ff       	call   c002069b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00209ee:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00209f1:	83 c4 10             	add    esp,0x10
c00209f4:	89 c1                	mov    ecx,eax
c00209f6:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c00209f9:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00209ff:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0020a02:	84 db                	test   bl,bl
c0020a04:	0f 85 90 00 00 00    	jne    c0020a9a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0020a0a:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0020a10:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0020a16:	29 c7                	sub    edi,eax
c0020a18:	89 fb                	mov    ebx,edi
c0020a1a:	c1 fb 1f             	sar    ebx,0x1f
c0020a1d:	01 f8                	add    eax,edi
c0020a1f:	11 da                	adc    edx,ebx
c0020a21:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020a25:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020a29:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0020a2c:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0020a2f:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0020a32:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0020a35:	89 04 24             	mov    DWORD PTR [esp],eax
c0020a38:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020a3c:	89 d8                	mov    eax,ebx
c0020a3e:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0020a41:	ba 00 00 00 00       	mov    edx,0x0
c0020a46:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0020a4a:	b8 00 00 00 00       	mov    eax,0x0
c0020a4f:	73 0b                	jae    c0020a5c <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0020a51:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020a54:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020a58:	29 f8                	sub    eax,edi
c0020a5a:	19 da                	sbb    edx,ebx
c0020a5c:	89 d3                	mov    ebx,edx
c0020a5e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0020a61:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0020a64:	09 c3                	or     ebx,eax
c0020a66:	0f 84 59 ff ff ff    	je     c00209c5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0020a6c:	55                   	push   ebp
c0020a6d:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0020a71:	50                   	push   eax
c0020a72:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0020a79:	53                   	push   ebx
c0020a7a:	8b 06                	mov    eax,DWORD PTR [esi]
c0020a7c:	c1 e0 0b             	shl    eax,0xb
c0020a7f:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0020a83:	c1 e8 0b             	shr    eax,0xb
c0020a86:	50                   	push   eax
c0020a87:	e8 0f fc ff ff       	call   c002069b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020a8c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020a8f:	83 c4 10             	add    esp,0x10
c0020a92:	25 ff 07 00 00       	and    eax,0x7ff
c0020a97:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0020a9a:	57                   	push   edi
c0020a9b:	6a 28                	push   0x28
c0020a9d:	6a 00                	push   0x0
c0020a9f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020aa3:	50                   	push   eax
c0020aa4:	e8 e2 fb fd ff       	call   c000068b <memset>
c0020aa9:	31 d2                	xor    edx,edx
c0020aab:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0020aae:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0020ab4:	89 f8                	mov    eax,edi
c0020ab6:	83 c0 21             	add    eax,0x21
c0020ab9:	83 d2 00             	adc    edx,0x0
c0020abc:	89 c7                	mov    edi,eax
c0020abe:	89 d5                	mov    ebp,edx
c0020ac0:	83 c4 10             	add    esp,0x10
c0020ac3:	31 c9                	xor    ecx,ecx
c0020ac5:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0020acc:	83 f9 28             	cmp    ecx,0x28
c0020acf:	88 04 24             	mov    BYTE PTR [esp],al
c0020ad2:	0f 94 c2             	sete   dl
c0020ad5:	88 d0                	mov    al,dl
c0020ad7:	ba ff 07 00 00       	mov    edx,0x7ff
c0020adc:	39 fa                	cmp    edx,edi
c0020ade:	ba 00 00 00 00       	mov    edx,0x0
c0020ae3:	19 ea                	sbb    edx,ebp
c0020ae5:	0f 92 c2             	setb   dl
c0020ae8:	09 c2                	or     edx,eax
c0020aea:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0020aee:	0f 94 c0             	sete   al
c0020af1:	08 d0                	or     al,dl
c0020af3:	75 16                	jne    c0020b0b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0020af5:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0020af9:	74 10                	je     c0020b0b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0020afb:	8a 04 24             	mov    al,BYTE PTR [esp]
c0020afe:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0020b02:	41                   	inc    ecx
c0020b03:	83 c7 01             	add    edi,0x1
c0020b06:	83 d5 00             	adc    ebp,0x0
c0020b09:	eb ba                	jmp    c0020ac5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0020b0b:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0020b12:	83 ec 0c             	sub    esp,0xc
c0020b15:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0020b19:	57                   	push   edi
c0020b1a:	e8 89 fb fd ff       	call   c00006a8 <strlen>
c0020b1f:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0020b27:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0020b2b:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0020b32:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020b35:	5a                   	pop    edx
c0020b36:	25 ff 07 00 00       	and    eax,0x7ff
c0020b3b:	01 c8                	add    eax,ecx
c0020b3d:	59                   	pop    ecx
c0020b3e:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0020b44:	83 e0 02             	and    eax,0x2
c0020b47:	3c 01                	cmp    al,0x1
c0020b49:	19 c0                	sbb    eax,eax
c0020b4b:	83 c0 02             	add    eax,0x2
c0020b4e:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0020b52:	57                   	push   edi
c0020b53:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0020b57:	50                   	push   eax
c0020b58:	e8 cd fb fd ff       	call   c000072a <strcpy>
c0020b5d:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0020b61:	83 c4 10             	add    esp,0x10
c0020b64:	84 c0                	test   al,al
c0020b66:	75 21                	jne    c0020b89 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0020b68:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0020b70:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0020b78:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0020b80:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0020b87:	eb 28                	jmp    c0020bb1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0020b89:	fe c8                	dec    al
c0020b8b:	75 24                	jne    c0020bb1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0020b8d:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0020b95:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0020b9d:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0020ba5:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0020bac:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0020bb1:	0f b6 fb             	movzx  edi,bl
c0020bb4:	31 db                	xor    ebx,ebx
c0020bb6:	50                   	push   eax
c0020bb7:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0020bbe:	8d 44 24 48          	lea    eax,[esp+0x48]
c0020bc2:	50                   	push   eax
c0020bc3:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0020bca:	e8 86 fa fd ff       	call   c0000655 <memcpy>
c0020bcf:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0020bd6:	89 f9                	mov    ecx,edi
c0020bd8:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020bde:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0020be1:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0020be4:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0020be7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0020bea:	83 c4 10             	add    esp,0x10
c0020bed:	39 c7                	cmp    edi,eax
c0020bef:	89 df                	mov    edi,ebx
c0020bf1:	19 d7                	sbb    edi,edx
c0020bf3:	72 10                	jb     c0020c05 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0020bf5:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0020bfc:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0020c03:	eb 0a                	jmp    c0020c0f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0020c05:	29 c8                	sub    eax,ecx
c0020c07:	19 da                	sbb    edx,ebx
c0020c09:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0020c0c:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0020c0f:	31 c0                	xor    eax,eax
c0020c11:	eb 05                	jmp    c0020c18 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0020c13:	b8 04 00 00 00       	mov    eax,0x4
c0020c18:	81 c4 5c 09 00 00    	add    esp,0x95c
c0020c1e:	5b                   	pop    ebx
c0020c1f:	5e                   	pop    esi
c0020c20:	5f                   	pop    edi
c0020c21:	5d                   	pop    ebp
c0020c22:	c3                   	ret    

c0020c23 <readRoot(unsigned int*, unsigned int*, char)>:
c0020c23:	81 ec 40 08 00 00    	sub    esp,0x840
c0020c29:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0020c31:	50                   	push   eax
c0020c32:	8d 44 24 38          	lea    eax,[esp+0x38]
c0020c36:	50                   	push   eax
c0020c37:	6a 10                	push   0x10
c0020c39:	e8 5d fa ff ff       	call   c002069b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020c3e:	83 c4 0c             	add    esp,0xc
c0020c41:	6a 22                	push   0x22
c0020c43:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0020c4a:	50                   	push   eax
c0020c4b:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0020c4f:	50                   	push   eax
c0020c50:	e8 00 fa fd ff       	call   c0000655 <memcpy>
c0020c55:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0020c5c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0020c60:	89 10                	mov    DWORD PTR [eax],edx
c0020c62:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0020c69:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020c6d:	89 10                	mov    DWORD PTR [eax],edx
c0020c6f:	b0 01                	mov    al,0x1
c0020c71:	81 c4 4c 08 00 00    	add    esp,0x84c
c0020c77:	c3                   	ret    

c0020c78 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0020c78:	55                   	push   ebp
c0020c79:	57                   	push   edi
c0020c7a:	56                   	push   esi
c0020c7b:	53                   	push   ebx
c0020c7c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020c82:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0020c89:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0020c90:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020c94:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0020c98:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0020c9c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020ca0:	75 03                	jne    c0020ca5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0020ca2:	83 c3 02             	add    ebx,0x2
c0020ca5:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0020ca8:	75 03                	jne    c0020cad <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0020caa:	43                   	inc    ebx
c0020cab:	eb f8                	jmp    c0020ca5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0020cad:	51                   	push   ecx
c0020cae:	68 00 01 00 00       	push   0x100
c0020cb3:	6a 00                	push   0x0
c0020cb5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020cb9:	50                   	push   eax
c0020cba:	e8 cc f9 fd ff       	call   c000068b <memset>
c0020cbf:	83 c4 10             	add    esp,0x10
c0020cc2:	31 d2                	xor    edx,edx
c0020cc4:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0020cc7:	84 c0                	test   al,al
c0020cc9:	74 21                	je     c0020cec <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0020ccb:	3c 2f                	cmp    al,0x2f
c0020ccd:	75 0b                	jne    c0020cda <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0020ccf:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0020cd3:	bd 01 00 00 00       	mov    ebp,0x1
c0020cd8:	eb 14                	jmp    c0020cee <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0020cda:	8d 48 9f             	lea    ecx,[eax-0x61]
c0020cdd:	80 f9 19             	cmp    cl,0x19
c0020ce0:	77 03                	ja     c0020ce5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0020ce2:	83 e8 20             	sub    eax,0x20
c0020ce5:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0020ce9:	42                   	inc    edx
c0020cea:	eb d8                	jmp    c0020cc4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0020cec:	31 ed                	xor    ebp,ebp
c0020cee:	83 ec 0c             	sub    esp,0xc
c0020cf1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0020cf8:	e8 d7 e7 fe ff       	call   c000f4d4 <malloc>
c0020cfd:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0020d04:	89 c6                	mov    esi,eax
c0020d06:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0020d0c:	c1 ef 0b             	shr    edi,0xb
c0020d0f:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0020d16:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0020d1a:	83 c4 10             	add    esp,0x10
c0020d1d:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0020d22:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020d26:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0020d2d:	74 28                	je     c0020d57 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0020d2f:	52                   	push   edx
c0020d30:	57                   	push   edi
c0020d31:	50                   	push   eax
c0020d32:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020d36:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0020d3d:	e8 59 f9 ff ff       	call   c002069b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020d42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020d46:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0020d4d:	05 00 08 00 00       	add    eax,0x800
c0020d52:	83 c4 10             	add    esp,0x10
c0020d55:	eb cb                	jmp    c0020d22 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0020d57:	83 ec 0c             	sub    esp,0xc
c0020d5a:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0020d5e:	57                   	push   edi
c0020d5f:	e8 44 f9 fd ff       	call   c00006a8 <strlen>
c0020d64:	50                   	push   eax
c0020d65:	57                   	push   edi
c0020d66:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0020d6d:	56                   	push   esi
c0020d6e:	e8 e6 f8 ff ff       	call   c0020659 <__memmem(unsigned char*, int, unsigned char*, int)>
c0020d73:	83 c4 20             	add    esp,0x20
c0020d76:	85 c0                	test   eax,eax
c0020d78:	75 13                	jne    c0020d8d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0020d7a:	83 ec 0c             	sub    esp,0xc
c0020d7d:	56                   	push   esi
c0020d7e:	e8 61 e7 fe ff       	call   c000f4e4 <free>
c0020d83:	83 c4 10             	add    esp,0x10
c0020d86:	31 c0                	xor    eax,eax
c0020d88:	e9 b3 00 00 00       	jmp    c0020e40 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0020d8d:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0020d91:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0020d95:	c1 e7 08             	shl    edi,0x8
c0020d98:	c1 e2 10             	shl    edx,0x10
c0020d9b:	09 d7                	or     edi,edx
c0020d9d:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0020da1:	09 d7                	or     edi,edx
c0020da3:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0020da7:	c1 e2 18             	shl    edx,0x18
c0020daa:	09 d7                	or     edi,edx
c0020dac:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0020db0:	89 d1                	mov    ecx,edx
c0020db2:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0020db6:	c1 e1 08             	shl    ecx,0x8
c0020db9:	c1 e2 10             	shl    edx,0x10
c0020dbc:	09 ca                	or     edx,ecx
c0020dbe:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0020dc2:	09 ca                	or     edx,ecx
c0020dc4:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0020dc8:	c1 e1 18             	shl    ecx,0x18
c0020dcb:	09 ca                	or     edx,ecx
c0020dcd:	89 e9                	mov    ecx,ebp
c0020dcf:	84 c9                	test   cl,cl
c0020dd1:	74 3c                	je     c0020e0f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0020dd3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020dd7:	83 ec 0c             	sub    esp,0xc
c0020dda:	56                   	push   esi
c0020ddb:	e8 04 e7 fe ff       	call   c000f4e4 <free>
c0020de0:	83 c4 0c             	add    esp,0xc
c0020de3:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0020dea:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0020def:	50                   	push   eax
c0020df0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0020df7:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0020dfe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020e02:	52                   	push   edx
c0020e03:	57                   	push   edi
c0020e04:	53                   	push   ebx
c0020e05:	e8 6e fe ff ff       	call   c0020c78 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0020e0a:	83 c4 20             	add    esp,0x20
c0020e0d:	eb 31                	jmp    c0020e40 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0020e0f:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0020e12:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0020e19:	d0 e8                	shr    al,1
c0020e1b:	89 3b                	mov    DWORD PTR [ebx],edi
c0020e1d:	83 e0 01             	and    eax,0x1
c0020e20:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0020e27:	83 ec 0c             	sub    esp,0xc
c0020e2a:	89 13                	mov    DWORD PTR [ebx],edx
c0020e2c:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0020e33:	89 03                	mov    DWORD PTR [ebx],eax
c0020e35:	56                   	push   esi
c0020e36:	e8 a9 e6 fe ff       	call   c000f4e4 <free>
c0020e3b:	83 c4 10             	add    esp,0x10
c0020e3e:	b0 01                	mov    al,0x1
c0020e40:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020e46:	5b                   	pop    ebx
c0020e47:	5e                   	pop    esi
c0020e48:	5f                   	pop    edi
c0020e49:	5d                   	pop    ebp
c0020e4a:	c3                   	ret    

c0020e4b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0020e4b:	55                   	push   ebp
c0020e4c:	57                   	push   edi
c0020e4d:	56                   	push   esi
c0020e4e:	53                   	push   ebx
c0020e4f:	83 ec 20             	sub    esp,0x20
c0020e52:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0020e56:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0020e5a:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0020e5e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020e66:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0020e6e:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0020e73:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0020e79:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0020e7f:	57                   	push   edi
c0020e80:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020e84:	50                   	push   eax
c0020e85:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020e89:	50                   	push   eax
c0020e8a:	e8 94 fd ff ff       	call   c0020c23 <readRoot(unsigned int*, unsigned int*, char)>
c0020e8f:	5a                   	pop    edx
c0020e90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020e94:	e8 0f f8 fd ff       	call   c00006a8 <strlen>
c0020e99:	83 c4 10             	add    esp,0x10
c0020e9c:	83 f8 03             	cmp    eax,0x3
c0020e9f:	77 17                	ja     c0020eb8 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0020ea1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ea5:	89 03                	mov    DWORD PTR [ebx],eax
c0020ea7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020eab:	89 06                	mov    DWORD PTR [esi],eax
c0020ead:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0020eb4:	b0 01                	mov    al,0x1
c0020eb6:	eb 19                	jmp    c0020ed1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0020eb8:	50                   	push   eax
c0020eb9:	55                   	push   ebp
c0020eba:	57                   	push   edi
c0020ebb:	56                   	push   esi
c0020ebc:	53                   	push   ebx
c0020ebd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0020ec1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0020ec5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0020ec9:	e8 aa fd ff ff       	call   c0020c78 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0020ece:	83 c4 20             	add    esp,0x20
c0020ed1:	83 c4 1c             	add    esp,0x1c
c0020ed4:	5b                   	pop    ebx
c0020ed5:	5e                   	pop    esi
c0020ed6:	5f                   	pop    edi
c0020ed7:	5d                   	pop    ebp
c0020ed8:	c3                   	ret    
c0020ed9:	90                   	nop

c0020eda <ISO9660::open(char const*, void**, FileOpenMode)>:
c0020eda:	57                   	push   edi
c0020edb:	56                   	push   esi
c0020edc:	53                   	push   ebx
c0020edd:	83 ec 10             	sub    esp,0x10
c0020ee0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0020ee4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0020ee8:	85 ff                	test   edi,edi
c0020eea:	74 7b                	je     c0020f67 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c0020eec:	85 f6                	test   esi,esi
c0020eee:	74 77                	je     c0020f67 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c0020ef0:	83 ec 0c             	sub    esp,0xc
c0020ef3:	6a 1c                	push   0x1c
c0020ef5:	e8 da e5 fe ff       	call   c000f4d4 <malloc>
c0020efa:	89 07                	mov    DWORD PTR [edi],eax
c0020efc:	89 c3                	mov    ebx,eax
c0020efe:	58                   	pop    eax
c0020eff:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020f03:	50                   	push   eax
c0020f04:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0020f07:	50                   	push   eax
c0020f08:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020f0c:	50                   	push   eax
c0020f0d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020f11:	50                   	push   eax
c0020f12:	56                   	push   esi
c0020f13:	e8 33 ff ff ff       	call   c0020e4b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0020f18:	83 c4 20             	add    esp,0x20
c0020f1b:	84 c0                	test   al,al
c0020f1d:	74 07                	je     c0020f26 <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c0020f1f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020f24:	74 0b                	je     c0020f31 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0020f26:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0020f2a:	b8 01 00 00 00       	mov    eax,0x1
c0020f2f:	eb 3b                	jmp    c0020f6c <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c0020f31:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020f35:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0020f39:	89 03                	mov    DWORD PTR [ebx],eax
c0020f3b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0020f42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f46:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0020f4d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0020f54:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0020f57:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0020f5e:	8a 06                	mov    al,BYTE PTR [esi]
c0020f60:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0020f63:	31 c0                	xor    eax,eax
c0020f65:	eb 05                	jmp    c0020f6c <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c0020f67:	b8 04 00 00 00       	mov    eax,0x4
c0020f6c:	83 c4 10             	add    esp,0x10
c0020f6f:	5b                   	pop    ebx
c0020f70:	5e                   	pop    esi
c0020f71:	5f                   	pop    edi
c0020f72:	c3                   	ret    
c0020f73:	90                   	nop

c0020f74 <ISO9660::exists(char const*)>:
c0020f74:	83 ec 28             	sub    esp,0x28
c0020f77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020f7b:	8d 54 24 18          	lea    edx,[esp+0x18]
c0020f7f:	52                   	push   edx
c0020f80:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0020f83:	52                   	push   edx
c0020f84:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020f88:	52                   	push   edx
c0020f89:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020f8d:	52                   	push   edx
c0020f8e:	50                   	push   eax
c0020f8f:	e8 b7 fe ff ff       	call   c0020e4b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0020f94:	83 c4 3c             	add    esp,0x3c
c0020f97:	c3                   	ret    

c0020f98 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0020f98:	56                   	push   esi
c0020f99:	53                   	push   ebx
c0020f9a:	83 ec 14             	sub    esp,0x14
c0020f9d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0020fa1:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0020fa5:	85 db                	test   ebx,ebx
c0020fa7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0020fab:	0f 94 c2             	sete   dl
c0020fae:	85 f6                	test   esi,esi
c0020fb0:	0f 94 c0             	sete   al
c0020fb3:	08 c2                	or     dl,al
c0020fb5:	75 68                	jne    c002101f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0020fb7:	85 c9                	test   ecx,ecx
c0020fb9:	74 64                	je     c002101f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0020fbb:	83 ec 0c             	sub    esp,0xc
c0020fbe:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0020fc1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020fc5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0020fcb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0020fd2:	50                   	push   eax
c0020fd3:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0020fd6:	50                   	push   eax
c0020fd7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020fdb:	50                   	push   eax
c0020fdc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020fe0:	50                   	push   eax
c0020fe1:	51                   	push   ecx
c0020fe2:	e8 64 fe ff ff       	call   c0020e4b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0020fe7:	83 c4 20             	add    esp,0x20
c0020fea:	ba 01 00 00 00       	mov    edx,0x1
c0020fef:	84 c0                	test   al,al
c0020ff1:	74 31                	je     c0021024 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0020ff3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ff7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0020ffe:	89 03                	mov    DWORD PTR [ebx],eax
c0021000:	ba 00 00 00 00       	mov    edx,0x0
c0021005:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021009:	85 c0                	test   eax,eax
c002100b:	0f 95 06             	setne  BYTE PTR [esi]
c002100e:	74 14                	je     c0021024 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021010:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021016:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002101d:	eb 05                	jmp    c0021024 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002101f:	ba 04 00 00 00       	mov    edx,0x4
c0021024:	83 c4 14             	add    esp,0x14
c0021027:	89 d0                	mov    eax,edx
c0021029:	5b                   	pop    ebx
c002102a:	5e                   	pop    esi
c002102b:	c3                   	ret    

c002102c <ISO9660::openDir(char const*, void**)>:
c002102c:	57                   	push   edi
c002102d:	56                   	push   esi
c002102e:	53                   	push   ebx
c002102f:	83 ec 10             	sub    esp,0x10
c0021032:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021036:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002103a:	85 ff                	test   edi,edi
c002103c:	0f 84 95 00 00 00    	je     c00210d7 <ISO9660::openDir(char const*, void**)+0xab>
c0021042:	85 f6                	test   esi,esi
c0021044:	0f 84 8d 00 00 00    	je     c00210d7 <ISO9660::openDir(char const*, void**)+0xab>
c002104a:	83 ec 0c             	sub    esp,0xc
c002104d:	6a 1c                	push   0x1c
c002104f:	e8 80 e4 fe ff       	call   c000f4d4 <malloc>
c0021054:	89 07                	mov    DWORD PTR [edi],eax
c0021056:	89 c3                	mov    ebx,eax
c0021058:	59                   	pop    ecx
c0021059:	8d 44 24 18          	lea    eax,[esp+0x18]
c002105d:	50                   	push   eax
c002105e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021061:	50                   	push   eax
c0021062:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021066:	50                   	push   eax
c0021067:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002106b:	50                   	push   eax
c002106c:	56                   	push   esi
c002106d:	e8 d9 fd ff ff       	call   c0020e4b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021072:	83 c4 20             	add    esp,0x20
c0021075:	84 c0                	test   al,al
c0021077:	74 07                	je     c0021080 <ISO9660::openDir(char const*, void**)+0x54>
c0021079:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002107e:	75 21                	jne    c00210a1 <ISO9660::openDir(char const*, void**)+0x75>
c0021080:	0f b6 c0             	movzx  eax,al
c0021083:	52                   	push   edx
c0021084:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021088:	50                   	push   eax
c0021089:	68 7a ae 02 c0       	push   0xc002ae7a
c002108e:	e8 be 16 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0021093:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021097:	83 c4 10             	add    esp,0x10
c002109a:	b8 01 00 00 00       	mov    eax,0x1
c002109f:	eb 3b                	jmp    c00210dc <ISO9660::openDir(char const*, void**)+0xb0>
c00210a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00210a5:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00210a9:	89 03                	mov    DWORD PTR [ebx],eax
c00210ab:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00210b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00210b6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00210bd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00210c4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00210c7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00210ce:	8a 06                	mov    al,BYTE PTR [esi]
c00210d0:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00210d3:	31 c0                	xor    eax,eax
c00210d5:	eb 05                	jmp    c00210dc <ISO9660::openDir(char const*, void**)+0xb0>
c00210d7:	b8 04 00 00 00       	mov    eax,0x4
c00210dc:	83 c4 10             	add    esp,0x10
c00210df:	5b                   	pop    ebx
c00210e0:	5e                   	pop    esi
c00210e1:	5f                   	pop    edi
c00210e2:	c3                   	ret    
c00210e3:	90                   	nop

c00210e4 <ISO9660::ISO9660()>:
c00210e4:	83 ec 0c             	sub    esp,0xc
c00210e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210eb:	83 ec 0c             	sub    esp,0xc
c00210ee:	50                   	push   eax
c00210ef:	e8 62 19 ff ff       	call   c0012a56 <Filesystem::Filesystem()>
c00210f4:	83 c4 10             	add    esp,0x10
c00210f7:	ba a0 ae 02 c0       	mov    edx,0xc002aea0
c00210fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021100:	89 10                	mov    DWORD PTR [eax],edx
c0021102:	90                   	nop
c0021103:	83 c4 0c             	add    esp,0xc
c0021106:	c3                   	ret    
c0021107:	90                   	nop

c0021108 <SoundChannel::~SoundChannel()>:
c0021108:	83 ec 0c             	sub    esp,0xc
c002110b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002110f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0021112:	83 ec 0c             	sub    esp,0xc
c0021115:	50                   	push   eax
c0021116:	e8 c9 e3 fe ff       	call   c000f4e4 <free>
c002111b:	83 c4 10             	add    esp,0x10
c002111e:	90                   	nop
c002111f:	83 c4 0c             	add    esp,0xc
c0021122:	c3                   	ret    
c0021123:	90                   	nop

c0021124 <SoundChannel::setSpeed(float)>:
c0021124:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021128:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002112c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002112f:	c3                   	ret    

c0021130 <SoundChannel::getSpeed()>:
c0021130:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021134:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0021137:	c3                   	ret    

c0021138 <SoundChannel::setVolume(int)>:
c0021138:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002113c:	83 f8 64             	cmp    eax,0x64
c002113f:	7e 05                	jle    c0021146 <SoundChannel::setVolume(int)+0xe>
c0021141:	b8 64 00 00 00       	mov    eax,0x64
c0021146:	85 c0                	test   eax,eax
c0021148:	79 02                	jns    c002114c <SoundChannel::setVolume(int)+0x14>
c002114a:	31 c0                	xor    eax,eax
c002114c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021150:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0021153:	c3                   	ret    

c0021154 <SoundChannel::getVolume()>:
c0021154:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021158:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c002115b:	c3                   	ret    

c002115c <SoundChannel::pause()>:
c002115c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021160:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0021164:	c3                   	ret    
c0021165:	90                   	nop

c0021166 <SoundChannel::SoundChannel(int, int, int, int)>:
c0021166:	83 ec 1c             	sub    esp,0x1c
c0021169:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002116d:	e8 ea ff ff ff       	call   c002115c <SoundChannel::pause()>
c0021172:	83 c4 04             	add    esp,0x4
c0021175:	6a 50                	push   0x50
c0021177:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002117b:	e8 b8 ff ff ff       	call   c0021138 <SoundChannel::setVolume(int)>
c0021180:	83 c4 08             	add    esp,0x8
c0021183:	a1 18 af 02 c0       	mov    eax,ds:0xc002af18
c0021188:	50                   	push   eax
c0021189:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002118d:	e8 92 ff ff ff       	call   c0021124 <SoundChannel::setSpeed(float)>
c0021192:	83 c4 08             	add    esp,0x8
c0021195:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021199:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002119d:	89 10                	mov    DWORD PTR [eax],edx
c002119f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00211a3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00211a7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00211aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00211ae:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00211b2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00211b5:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c00211ba:	75 23                	jne    c00211df <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c00211bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00211c0:	8b 10                	mov    edx,DWORD PTR [eax]
c00211c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00211c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00211c9:	0f af c2             	imul   eax,edx
c00211cc:	85 c0                	test   eax,eax
c00211ce:	79 03                	jns    c00211d3 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c00211d0:	83 c0 03             	add    eax,0x3
c00211d3:	c1 f8 02             	sar    eax,0x2
c00211d6:	05 a0 0f 00 00       	add    eax,0xfa0
c00211db:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00211df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00211e3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00211e7:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00211ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00211ee:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00211f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00211f9:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0021200:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021204:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021207:	c1 e0 02             	shl    eax,0x2
c002120a:	83 ec 0c             	sub    esp,0xc
c002120d:	50                   	push   eax
c002120e:	e8 c1 e2 fe ff       	call   c000f4d4 <malloc>
c0021213:	83 c4 10             	add    esp,0x10
c0021216:	89 c2                	mov    edx,eax
c0021218:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002121c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002121f:	83 ec 04             	sub    esp,0x4
c0021222:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021226:	50                   	push   eax
c0021227:	6a 01                	push   0x1
c0021229:	6a 04                	push   0x4
c002122b:	e8 1f 77 fe ff       	call   c000894f <src_new>
c0021230:	83 c4 10             	add    esp,0x10
c0021233:	89 c2                	mov    edx,eax
c0021235:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021239:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002123c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021240:	85 c0                	test   eax,eax
c0021242:	74 10                	je     c0021254 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0021244:	83 ec 0c             	sub    esp,0xc
c0021247:	68 fc ae 02 c0       	push   0xc002aefc
c002124c:	e8 1a 86 ff ff       	call   c001986b <Krnl::panic(char const*)>
c0021251:	83 c4 10             	add    esp,0x10
c0021254:	a0 40 ec 02 c0       	mov    al,ds:0xc002ec40
c0021259:	83 f0 01             	xor    eax,0x1
c002125c:	84 c0                	test   al,al
c002125e:	74 57                	je     c00212b7 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0021260:	a1 1c af 02 c0       	mov    eax,ds:0xc002af1c
c0021265:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021269:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021271:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0021279:	7f 35                	jg     c00212b0 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c002127b:	83 ec 0c             	sub    esp,0xc
c002127e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021282:	e8 20 4a 00 00       	call   c0025ca7 <__floatsisf>
c0021287:	83 c4 10             	add    esp,0x10
c002128a:	8b 15 1c af 02 c0    	mov    edx,DWORD PTR ds:0xc002af1c
c0021290:	83 ec 08             	sub    esp,0x8
c0021293:	52                   	push   edx
c0021294:	50                   	push   eax
c0021295:	e8 1f 46 00 00       	call   c00258b9 <__mulsf3>
c002129a:	83 c4 10             	add    esp,0x10
c002129d:	89 c2                	mov    edx,eax
c002129f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00212a3:	89 14 85 40 e8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd17c0],edx
c00212aa:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00212ae:	eb c1                	jmp    c0021271 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c00212b0:	c6 05 40 ec 02 c0 01 	mov    BYTE PTR ds:0xc002ec40,0x1
c00212b7:	90                   	nop
c00212b8:	83 c4 1c             	add    esp,0x1c
c00212bb:	c3                   	ret    

c00212bc <SoundChannel::play()>:
c00212bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00212c0:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c00212c4:	c3                   	ret    
c00212c5:	90                   	nop

c00212c6 <SoundChannel::paused()>:
c00212c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00212ca:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c00212cd:	c3                   	ret    

c00212ce <SoundChannel::getSampleRate()>:
c00212ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00212d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00212d4:	c3                   	ret    
c00212d5:	90                   	nop

c00212d6 <SoundChannel::getBits()>:
c00212d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00212da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00212dd:	c3                   	ret    

c00212de <SoundChannel::getBufferUsed()>:
c00212de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00212e2:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00212e5:	c3                   	ret    

c00212e6 <SoundChannel::getBufferSize()>:
c00212e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00212ea:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00212ed:	c3                   	ret    

c00212ee <SoundChannel::unbuffer(float*, int, int)>:
c00212ee:	56                   	push   esi
c00212ef:	53                   	push   ebx
c00212f0:	83 ec 40             	sub    esp,0x40
c00212f3:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00212f7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00212fa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00212fe:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0021301:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021305:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021309:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002130d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021311:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021315:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0021319:	e8 89 49 00 00       	call   c0025ca7 <__floatsisf>
c002131e:	5a                   	pop    edx
c002131f:	89 c6                	mov    esi,eax
c0021321:	ff 33                	push   DWORD PTR [ebx]
c0021323:	e8 7f 49 00 00       	call   c0025ca7 <__floatsisf>
c0021328:	59                   	pop    ecx
c0021329:	5a                   	pop    edx
c002132a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c002132d:	50                   	push   eax
c002132e:	e8 86 45 00 00       	call   c00258b9 <__mulsf3>
c0021333:	59                   	pop    ecx
c0021334:	5a                   	pop    edx
c0021335:	50                   	push   eax
c0021336:	56                   	push   esi
c0021337:	e8 40 47 00 00       	call   c0025a7c <__divsf3>
c002133c:	89 04 24             	mov    DWORD PTR [esp],eax
c002133f:	e8 33 5c 00 00       	call   c0026f77 <__extendsfdf2>
c0021344:	59                   	pop    ecx
c0021345:	5e                   	pop    esi
c0021346:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002134a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c002134e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0021356:	8d 44 24 14          	lea    eax,[esp+0x14]
c002135a:	50                   	push   eax
c002135b:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c002135e:	e8 e1 71 fe ff       	call   c0008544 <src_process>
c0021363:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021367:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c002136a:	83 c4 0c             	add    esp,0xc
c002136d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0021370:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0021373:	29 d0                	sub    eax,edx
c0021375:	c1 e0 02             	shl    eax,0x2
c0021378:	50                   	push   eax
c0021379:	8d 04 91             	lea    eax,[ecx+edx*4]
c002137c:	50                   	push   eax
c002137d:	51                   	push   ecx
c002137e:	e8 9a f2 fd ff       	call   c000061d <memmove>
c0021383:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021387:	83 c4 44             	add    esp,0x44
c002138a:	5b                   	pop    ebx
c002138b:	5e                   	pop    esi
c002138c:	c3                   	ret    
c002138d:	90                   	nop

c002138e <SoundChannel::buffer8(unsigned char*, int)>:
c002138e:	55                   	push   ebp
c002138f:	57                   	push   edi
c0021390:	56                   	push   esi
c0021391:	53                   	push   ebx
c0021392:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021396:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c002139a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c002139d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00213a1:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00213a4:	74 7a                	je     c0021420 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00213a6:	85 ff                	test   edi,edi
c00213a8:	7e 76                	jle    c0021420 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00213aa:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c00213ae:	8d 70 01             	lea    esi,[eax+0x1]
c00213b1:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00213b4:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00213b7:	8b 1c 9d 40 e8 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd17c0]
c00213be:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00213c1:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00213c4:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00213c7:	74 5e                	je     c0021427 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c00213c9:	83 ff 01             	cmp    edi,0x1
c00213cc:	74 4b                	je     c0021419 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c00213ce:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00213d2:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00213d5:	8d 70 01             	lea    esi,[eax+0x1]
c00213d8:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00213db:	8b 1c 9d 40 e8 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd17c0]
c00213e2:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00213e5:	b8 02 00 00 00       	mov    eax,0x2
c00213ea:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00213ed:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00213f0:	75 23                	jne    c0021415 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c00213f2:	eb 27                	jmp    c002141b <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00213f4:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c00213f9:	8d 71 01             	lea    esi,[ecx+0x1]
c00213fc:	40                   	inc    eax
c00213fd:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021400:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0021403:	8b 1c 9d 40 e8 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd17c0]
c002140a:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c002140d:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021410:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021413:	74 06                	je     c002141b <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021415:	39 c7                	cmp    edi,eax
c0021417:	75 db                	jne    c00213f4 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0021419:	89 f8                	mov    eax,edi
c002141b:	5b                   	pop    ebx
c002141c:	5e                   	pop    esi
c002141d:	5f                   	pop    edi
c002141e:	5d                   	pop    ebp
c002141f:	c3                   	ret    
c0021420:	5b                   	pop    ebx
c0021421:	31 c0                	xor    eax,eax
c0021423:	5e                   	pop    esi
c0021424:	5f                   	pop    edi
c0021425:	5d                   	pop    ebp
c0021426:	c3                   	ret    
c0021427:	b8 01 00 00 00       	mov    eax,0x1
c002142c:	eb ed                	jmp    c002141b <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c002142e <SoundDevice::SoundDevice(char const*)>:
c002142e:	83 ec 1c             	sub    esp,0x1c
c0021431:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021435:	83 ec 08             	sub    esp,0x8
c0021438:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002143c:	50                   	push   eax
c002143d:	e8 ee 28 ff ff       	call   c0013d30 <Device::Device(char const*)>
c0021442:	83 c4 10             	add    esp,0x10
c0021445:	ba 28 af 02 c0       	mov    edx,0xc002af28
c002144a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002144e:	89 10                	mov    DWORD PTR [eax],edx
c0021450:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021454:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c002145e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021462:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c002146c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021474:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021479:	7f 19                	jg     c0021494 <SoundDevice::SoundDevice(char const*)+0x66>
c002147b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002147f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021483:	83 c2 54             	add    edx,0x54
c0021486:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c002148e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021492:	eb e0                	jmp    c0021474 <SoundDevice::SoundDevice(char const*)+0x46>
c0021494:	90                   	nop
c0021495:	83 c4 1c             	add    esp,0x1c
c0021498:	c3                   	ret    
c0021499:	90                   	nop

c002149a <SoundDevice::~SoundDevice()>:
c002149a:	53                   	push   ebx
c002149b:	83 ec 18             	sub    esp,0x18
c002149e:	ba 28 af 02 c0       	mov    edx,0xc002af28
c00214a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00214a7:	89 10                	mov    DWORD PTR [eax],edx
c00214a9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00214b1:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00214b6:	7f 46                	jg     c00214fe <SoundDevice::~SoundDevice()+0x64>
c00214b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00214bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00214c0:	83 c2 54             	add    edx,0x54
c00214c3:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c00214c7:	85 c0                	test   eax,eax
c00214c9:	74 2d                	je     c00214f8 <SoundDevice::~SoundDevice()+0x5e>
c00214cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00214cf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00214d3:	83 c2 54             	add    edx,0x54
c00214d6:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c00214da:	85 db                	test   ebx,ebx
c00214dc:	74 1a                	je     c00214f8 <SoundDevice::~SoundDevice()+0x5e>
c00214de:	83 ec 0c             	sub    esp,0xc
c00214e1:	53                   	push   ebx
c00214e2:	e8 21 fc ff ff       	call   c0021108 <SoundChannel::~SoundChannel()>
c00214e7:	83 c4 10             	add    esp,0x10
c00214ea:	83 ec 08             	sub    esp,0x8
c00214ed:	6a 2c                	push   0x2c
c00214ef:	53                   	push   ebx
c00214f0:	e8 7c 11 ff ff       	call   c0012671 <operator delete(void*, unsigned long)>
c00214f5:	83 c4 10             	add    esp,0x10
c00214f8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00214fc:	eb b3                	jmp    c00214b1 <SoundDevice::~SoundDevice()+0x17>
c00214fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021502:	83 ec 0c             	sub    esp,0xc
c0021505:	50                   	push   eax
c0021506:	e8 07 25 ff ff       	call   c0013a12 <Device::~Device()>
c002150b:	83 c4 10             	add    esp,0x10
c002150e:	90                   	nop
c002150f:	83 c4 18             	add    esp,0x18
c0021512:	5b                   	pop    ebx
c0021513:	c3                   	ret    

c0021514 <SoundDevice::~SoundDevice()>:
c0021514:	83 ec 0c             	sub    esp,0xc
c0021517:	83 ec 0c             	sub    esp,0xc
c002151a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002151e:	e8 77 ff ff ff       	call   c002149a <SoundDevice::~SoundDevice()>
c0021523:	83 c4 10             	add    esp,0x10
c0021526:	83 ec 08             	sub    esp,0x8
c0021529:	68 e4 01 00 00       	push   0x1e4
c002152e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021532:	e8 3a 11 ff ff       	call   c0012671 <operator delete(void*, unsigned long)>
c0021537:	83 c4 10             	add    esp,0x10
c002153a:	83 c4 0c             	add    esp,0xc
c002153d:	c3                   	ret    

c002153e <SoundDevice::getFreeChannelNum()>:
c002153e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021542:	31 c0                	xor    eax,eax
c0021544:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c002154c:	74 09                	je     c0021557 <SoundDevice::getFreeChannelNum()+0x19>
c002154e:	40                   	inc    eax
c002154f:	83 f8 20             	cmp    eax,0x20
c0021552:	75 f0                	jne    c0021544 <SoundDevice::getFreeChannelNum()+0x6>
c0021554:	83 c8 ff             	or     eax,0xffffffff
c0021557:	c3                   	ret    

c0021558 <SoundDevice::addChannel(SoundChannel*)>:
c0021558:	56                   	push   esi
c0021559:	53                   	push   ebx
c002155a:	51                   	push   ecx
c002155b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002155f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021563:	53                   	push   ebx
c0021564:	e8 d5 ff ff ff       	call   c002153e <SoundDevice::getFreeChannelNum()>
c0021569:	5a                   	pop    edx
c002156a:	83 f8 ff             	cmp    eax,0xffffffff
c002156d:	74 51                	je     c00215c0 <SoundDevice::addChannel(SoundChannel*)+0x68>
c002156f:	85 f6                	test   esi,esi
c0021571:	74 4d                	je     c00215c0 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0021573:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c002157a:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0021581:	75 30                	jne    c00215b3 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0021583:	83 ec 0c             	sub    esp,0xc
c0021586:	56                   	push   esi
c0021587:	e8 42 fd ff ff       	call   c00212ce <SoundChannel::getSampleRate()>
c002158c:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0021592:	89 34 24             	mov    DWORD PTR [esp],esi
c0021595:	e8 3c fd ff ff       	call   c00212d6 <SoundChannel::getBits()>
c002159a:	83 c4 0c             	add    esp,0xc
c002159d:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00215a3:	8b 13                	mov    edx,DWORD PTR [ebx]
c00215a5:	50                   	push   eax
c00215a6:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00215ac:	53                   	push   ebx
c00215ad:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00215b0:	83 c4 10             	add    esp,0x10
c00215b3:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c00215b9:	b8 01 00 00 00       	mov    eax,0x1
c00215be:	eb 03                	jmp    c00215c3 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c00215c0:	83 c8 ff             	or     eax,0xffffffff
c00215c3:	5a                   	pop    edx
c00215c4:	5b                   	pop    ebx
c00215c5:	5e                   	pop    esi
c00215c6:	c3                   	ret    
c00215c7:	90                   	nop

c00215c8 <SoundDevice::removeChannel(int)>:
c00215c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00215cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00215d0:	83 fa 1f             	cmp    edx,0x1f
c00215d3:	77 23                	ja     c00215f8 <SoundDevice::removeChannel(int)+0x30>
c00215d5:	8d 14 90             	lea    edx,[eax+edx*4]
c00215d8:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c00215df:	74 17                	je     c00215f8 <SoundDevice::removeChannel(int)+0x30>
c00215e1:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c00215eb:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c00215f1:	75 05                	jne    c00215f8 <SoundDevice::removeChannel(int)+0x30>
c00215f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00215f5:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c00215f8:	c3                   	ret    
c00215f9:	90                   	nop

c00215fa <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c00215fa:	57                   	push   edi
c00215fb:	56                   	push   esi
c00215fc:	53                   	push   ebx
c00215fd:	31 db                	xor    ebx,ebx
c00215ff:	83 ec 10             	sub    esp,0x10
c0021602:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0021606:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c002160a:	0f 8d cb 00 00 00    	jge    c00216db <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0021610:	83 ec 0c             	sub    esp,0xc
c0021613:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021617:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c002161a:	e8 58 59 00 00       	call   c0026f77 <__extendsfdf2>
c002161f:	83 c4 10             	add    esp,0x10
c0021622:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002162a:	68 00 00 f0 3f       	push   0x3ff00000
c002162f:	6a 00                	push   0x0
c0021631:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021635:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021639:	e8 c5 48 00 00       	call   c0025f03 <__adddf3>
c002163e:	83 c4 10             	add    esp,0x10
c0021641:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021645:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021649:	68 00 00 e0 3f       	push   0x3fe00000
c002164e:	6a 00                	push   0x0
c0021650:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021654:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021658:	e8 23 4f 00 00       	call   c0026580 <__muldf3>
c002165d:	83 c4 10             	add    esp,0x10
c0021660:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021664:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021668:	68 00 00 60 40       	push   0x40600000
c002166d:	6a 00                	push   0x0
c002166f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021673:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021677:	e8 04 4f 00 00       	call   c0026580 <__muldf3>
c002167c:	59                   	pop    ecx
c002167d:	5f                   	pop    edi
c002167e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0021682:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0021686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002168a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002168e:	e8 c0 57 00 00       	call   c0026e53 <__truncdfsf2>
c0021693:	5a                   	pop    edx
c0021694:	89 c7                	mov    edi,eax
c0021696:	59                   	pop    ecx
c0021697:	68 00 00 fe 42       	push   0x42fe0000
c002169c:	50                   	push   eax
c002169d:	e8 5b 48 00 00       	call   c0025efd <__gesf2>
c00216a2:	83 c4 10             	add    esp,0x10
c00216a5:	85 c0                	test   eax,eax
c00216a7:	78 06                	js     c00216af <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c00216a9:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c00216ad:	eb 26                	jmp    c00216d5 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00216af:	50                   	push   eax
c00216b0:	50                   	push   eax
c00216b1:	6a 00                	push   0x0
c00216b3:	57                   	push   edi
c00216b4:	e8 48 48 00 00       	call   c0025f01 <__lesf2>
c00216b9:	83 c4 10             	add    esp,0x10
c00216bc:	85 c0                	test   eax,eax
c00216be:	7f 06                	jg     c00216c6 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c00216c0:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c00216c4:	eb 0f                	jmp    c00216d5 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00216c6:	83 ec 0c             	sub    esp,0xc
c00216c9:	57                   	push   edi
c00216ca:	e8 3d 59 00 00       	call   c002700c <lrintf>
c00216cf:	83 c4 10             	add    esp,0x10
c00216d2:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00216d5:	43                   	inc    ebx
c00216d6:	e9 2b ff ff ff       	jmp    c0021606 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c00216db:	83 c4 10             	add    esp,0x10
c00216de:	5b                   	pop    ebx
c00216df:	5e                   	pop    esi
c00216e0:	5f                   	pop    edi
c00216e1:	c3                   	ret    

c00216e2 <SoundDevice::getAudio(int, float*, float*)>:
c00216e2:	55                   	push   ebp
c00216e3:	57                   	push   edi
c00216e4:	56                   	push   esi
c00216e5:	53                   	push   ebx
c00216e6:	31 db                	xor    ebx,ebx
c00216e8:	83 ec 20             	sub    esp,0x20
c00216eb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00216ef:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00216f3:	c1 e0 02             	shl    eax,0x2
c00216f6:	50                   	push   eax
c00216f7:	6a 00                	push   0x0
c00216f9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00216fd:	e8 89 ef fd ff       	call   c000068b <memset>
c0021702:	83 c4 10             	add    esp,0x10
c0021705:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0021709:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0021710:	85 c0                	test   eax,eax
c0021712:	0f 84 d7 00 00 00    	je     c00217ef <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021718:	83 ec 0c             	sub    esp,0xc
c002171b:	50                   	push   eax
c002171c:	e8 a5 fb ff ff       	call   c00212c6 <SoundChannel::paused()>
c0021721:	83 c4 10             	add    esp,0x10
c0021724:	84 c0                	test   al,al
c0021726:	0f 85 c3 00 00 00    	jne    c00217ef <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002172c:	83 ec 0c             	sub    esp,0xc
c002172f:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0021736:	e8 19 fa ff ff       	call   c0021154 <SoundChannel::getVolume()>
c002173b:	83 c4 10             	add    esp,0x10
c002173e:	85 c0                	test   eax,eax
c0021740:	0f 84 a9 00 00 00    	je     c00217ef <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021746:	83 ec 0c             	sub    esp,0xc
c0021749:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0021750:	e8 ff f9 ff ff       	call   c0021154 <SoundChannel::getVolume()>
c0021755:	83 ec 0c             	sub    esp,0xc
c0021758:	50                   	push   eax
c0021759:	e8 49 45 00 00       	call   c0025ca7 <__floatsisf>
c002175e:	59                   	pop    ecx
c002175f:	5d                   	pop    ebp
c0021760:	31 ed                	xor    ebp,ebp
c0021762:	68 00 00 c8 42       	push   0x42c80000
c0021767:	50                   	push   eax
c0021768:	e8 0f 43 00 00       	call   c0025a7c <__divsf3>
c002176d:	83 c4 10             	add    esp,0x10
c0021770:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021774:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0021778:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c002177e:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0021782:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0021789:	e8 60 fb ff ff       	call   c00212ee <SoundChannel::unbuffer(float*, int, int)>
c002178e:	83 c4 20             	add    esp,0x20
c0021791:	89 c1                	mov    ecx,eax
c0021793:	39 cd                	cmp    ebp,ecx
c0021795:	7d 52                	jge    c00217e9 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0021797:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002179b:	50                   	push   eax
c002179c:	50                   	push   eax
c002179d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00217a1:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00217a4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00217a8:	e8 0c 41 00 00       	call   c00258b9 <__mulsf3>
c00217ad:	5a                   	pop    edx
c00217ae:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00217b2:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c00217b8:	e8 ea 44 00 00       	call   c0025ca7 <__floatsisf>
c00217bd:	59                   	pop    ecx
c00217be:	5a                   	pop    edx
c00217bf:	50                   	push   eax
c00217c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00217c4:	e8 b3 42 00 00       	call   c0025a7c <__divsf3>
c00217c9:	59                   	pop    ecx
c00217ca:	5a                   	pop    edx
c00217cb:	50                   	push   eax
c00217cc:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00217d0:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00217d3:	e8 be 3d 00 00       	call   c0025596 <__addsf3>
c00217d8:	83 c4 10             	add    esp,0x10
c00217db:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00217df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00217e3:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c00217e6:	45                   	inc    ebp
c00217e7:	eb aa                	jmp    c0021793 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c00217e9:	39 cf                	cmp    edi,ecx
c00217eb:	7e 02                	jle    c00217ef <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00217ed:	89 cf                	mov    edi,ecx
c00217ef:	43                   	inc    ebx
c00217f0:	83 fb 20             	cmp    ebx,0x20
c00217f3:	0f 85 10 ff ff ff    	jne    c0021709 <SoundDevice::getAudio(int, float*, float*)+0x27>
c00217f9:	83 c4 1c             	add    esp,0x1c
c00217fc:	89 f8                	mov    eax,edi
c00217fe:	5b                   	pop    ebx
c00217ff:	5e                   	pop    esi
c0021800:	5f                   	pop    edi
c0021801:	5d                   	pop    ebp
c0021802:	c3                   	ret    
c0021803:	90                   	nop

c0021804 <PCI::open(int, int, void*)>:
c0021804:	83 ec 18             	sub    esp,0x18
c0021807:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002180b:	8b 10                	mov    edx,DWORD PTR [eax]
c002180d:	50                   	push   eax
c002180e:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0021811:	31 c0                	xor    eax,eax
c0021813:	83 c4 1c             	add    esp,0x1c
c0021816:	c3                   	ret    
c0021817:	90                   	nop

c0021818 <PCI::close(int, int, void*)>:
c0021818:	31 c0                	xor    eax,eax
c002181a:	c3                   	ret    
c002181b:	90                   	nop

c002181c <PCI::PCI()>:
c002181c:	83 ec 0c             	sub    esp,0xc
c002181f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021823:	83 ec 08             	sub    esp,0x8
c0021826:	68 58 af 02 c0       	push   0xc002af58
c002182b:	50                   	push   eax
c002182c:	e8 bb 1b ff ff       	call   c00133ec <Bus::Bus(char const*)>
c0021831:	83 c4 10             	add    esp,0x10
c0021834:	ba c4 af 02 c0       	mov    edx,0xc002afc4
c0021839:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002183d:	89 10                	mov    DWORD PTR [eax],edx
c002183f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021843:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021849:	0f b6 d0             	movzx  edx,al
c002184c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021850:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0021857:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002185b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021861:	0f b6 d0             	movzx  edx,al
c0021864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021868:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002186d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021871:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021877:	8d 50 01             	lea    edx,[eax+0x1]
c002187a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002187e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0021884:	0f b6 d0             	movzx  edx,al
c0021887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002188b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002188f:	83 c9 c0             	or     ecx,0xffffffc0
c0021892:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021896:	90                   	nop
c0021897:	83 c4 0c             	add    esp,0xc
c002189a:	c3                   	ret    
c002189b:	90                   	nop

c002189c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002189c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00218a0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00218a5:	89 ca                	mov    edx,ecx
c00218a7:	c1 e0 10             	shl    eax,0x10
c00218aa:	81 e2 fc 00 00 00    	and    edx,0xfc
c00218b0:	09 d0                	or     eax,edx
c00218b2:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00218b7:	c1 e2 08             	shl    edx,0x8
c00218ba:	09 d0                	or     eax,edx
c00218bc:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c00218c1:	c1 e2 0b             	shl    edx,0xb
c00218c4:	09 d0                	or     eax,edx
c00218c6:	ba f8 0c 00 00       	mov    edx,0xcf8
c00218cb:	0d 00 00 00 80       	or     eax,0x80000000
c00218d0:	ef                   	out    dx,eax
c00218d1:	ba fc 0c 00 00       	mov    edx,0xcfc
c00218d6:	ed                   	in     eax,dx
c00218d7:	83 e1 02             	and    ecx,0x2
c00218da:	0f b6 c9             	movzx  ecx,cl
c00218dd:	c1 e1 03             	shl    ecx,0x3
c00218e0:	d3 e8                	shr    eax,cl
c00218e2:	c3                   	ret    
c00218e3:	90                   	nop

c00218e4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00218e4:	6a 00                	push   0x0
c00218e6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00218eb:	50                   	push   eax
c00218ec:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00218f1:	50                   	push   eax
c00218f2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00218f7:	50                   	push   eax
c00218f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00218fc:	e8 9b ff ff ff       	call   c002189c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021901:	83 c4 14             	add    esp,0x14
c0021904:	c3                   	ret    
c0021905:	90                   	nop

c0021906 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0021906:	6a 0e                	push   0xe
c0021908:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002190d:	50                   	push   eax
c002190e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021913:	50                   	push   eax
c0021914:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021919:	50                   	push   eax
c002191a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002191e:	e8 79 ff ff ff       	call   c002189c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021923:	83 c4 14             	add    esp,0x14
c0021926:	0f b6 c0             	movzx  eax,al
c0021929:	c3                   	ret    

c002192a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c002192a:	55                   	push   ebp
c002192b:	57                   	push   edi
c002192c:	56                   	push   esi
c002192d:	53                   	push   ebx
c002192e:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0021933:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0021938:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c002193d:	6a 0a                	push   0xa
c002193f:	56                   	push   esi
c0021940:	55                   	push   ebp
c0021941:	57                   	push   edi
c0021942:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0021946:	e8 51 ff ff ff       	call   c002189c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002194b:	6a 0a                	push   0xa
c002194d:	89 c3                	mov    ebx,eax
c002194f:	56                   	push   esi
c0021950:	0f b6 db             	movzx  ebx,bl
c0021953:	55                   	push   ebp
c0021954:	57                   	push   edi
c0021955:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0021959:	e8 3e ff ff ff       	call   c002189c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002195e:	83 c4 28             	add    esp,0x28
c0021961:	25 00 ff 00 00       	and    eax,0xff00
c0021966:	09 d8                	or     eax,ebx
c0021968:	5b                   	pop    ebx
c0021969:	5e                   	pop    esi
c002196a:	5f                   	pop    edi
c002196b:	5d                   	pop    ebp
c002196c:	c3                   	ret    
c002196d:	90                   	nop

c002196e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c002196e:	6a 08                	push   0x8
c0021970:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021975:	50                   	push   eax
c0021976:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002197b:	50                   	push   eax
c002197c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021981:	50                   	push   eax
c0021982:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021986:	e8 11 ff ff ff       	call   c002189c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002198b:	83 c4 14             	add    esp,0x14
c002198e:	0f b6 c4             	movzx  eax,ah
c0021991:	c3                   	ret    

c0021992 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0021992:	6a 08                	push   0x8
c0021994:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021999:	50                   	push   eax
c002199a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002199f:	50                   	push   eax
c00219a0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219a5:	50                   	push   eax
c00219a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00219aa:	e8 ed fe ff ff       	call   c002189c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00219af:	83 c4 14             	add    esp,0x14
c00219b2:	c3                   	ret    
c00219b3:	90                   	nop

c00219b4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00219b4:	6a 3c                	push   0x3c
c00219b6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219bb:	50                   	push   eax
c00219bc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219c1:	50                   	push   eax
c00219c2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219c7:	50                   	push   eax
c00219c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00219cc:	e8 cb fe ff ff       	call   c002189c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00219d1:	83 c4 14             	add    esp,0x14
c00219d4:	c3                   	ret    
c00219d5:	90                   	nop

c00219d6 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00219d6:	6a 18                	push   0x18
c00219d8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219dd:	50                   	push   eax
c00219de:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219e3:	50                   	push   eax
c00219e4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219e9:	50                   	push   eax
c00219ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00219ee:	e8 a9 fe ff ff       	call   c002189c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00219f3:	83 c4 14             	add    esp,0x14
c00219f6:	0f b6 c4             	movzx  eax,ah
c00219f9:	c3                   	ret    

c00219fa <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00219fa:	55                   	push   ebp
c00219fb:	57                   	push   edi
c00219fc:	56                   	push   esi
c00219fd:	53                   	push   ebx
c00219fe:	50                   	push   eax
c00219ff:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0021a03:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0021a08:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0021a0d:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0021a12:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0021a19:	8d 43 12             	lea    eax,[ebx+0x12]
c0021a1c:	83 c3 10             	add    ebx,0x10
c0021a1f:	0f b6 c0             	movzx  eax,al
c0021a22:	0f b6 db             	movzx  ebx,bl
c0021a25:	50                   	push   eax
c0021a26:	51                   	push   ecx
c0021a27:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021a2b:	57                   	push   edi
c0021a2c:	55                   	push   ebp
c0021a2d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0021a31:	e8 66 fe ff ff       	call   c002189c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021a36:	53                   	push   ebx
c0021a37:	89 c6                	mov    esi,eax
c0021a39:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021a3d:	c1 e6 10             	shl    esi,0x10
c0021a40:	51                   	push   ecx
c0021a41:	57                   	push   edi
c0021a42:	55                   	push   ebp
c0021a43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021a47:	e8 50 fe ff ff       	call   c002189c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021a4c:	83 c4 2c             	add    esp,0x2c
c0021a4f:	0f b7 c0             	movzx  eax,ax
c0021a52:	5b                   	pop    ebx
c0021a53:	09 f0                	or     eax,esi
c0021a55:	5e                   	pop    esi
c0021a56:	5f                   	pop    edi
c0021a57:	5d                   	pop    ebp
c0021a58:	c3                   	ret    
c0021a59:	90                   	nop

c0021a5a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0021a5a:	53                   	push   ebx
c0021a5b:	ba f8 0c 00 00       	mov    edx,0xcf8
c0021a60:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0021a65:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021a69:	c1 e1 10             	shl    ecx,0x10
c0021a6c:	25 fc 00 00 00       	and    eax,0xfc
c0021a71:	09 c1                	or     ecx,eax
c0021a73:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021a78:	c1 e0 08             	shl    eax,0x8
c0021a7b:	09 c1                	or     ecx,eax
c0021a7d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0021a82:	c1 e0 0b             	shl    eax,0xb
c0021a85:	09 c1                	or     ecx,eax
c0021a87:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0021a8d:	89 c8                	mov    eax,ecx
c0021a8f:	ef                   	out    dx,eax
c0021a90:	ba fc 0c 00 00       	mov    edx,0xcfc
c0021a95:	ed                   	in     eax,dx
c0021a96:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0021a9b:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0021aa0:	74 0a                	je     c0021aac <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0021aa2:	0f b7 d8             	movzx  ebx,ax
c0021aa5:	89 d0                	mov    eax,edx
c0021aa7:	c1 e0 10             	shl    eax,0x10
c0021aaa:	eb 05                	jmp    c0021ab1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0021aac:	66 31 c0             	xor    ax,ax
c0021aaf:	89 d3                	mov    ebx,edx
c0021ab1:	09 c3                	or     ebx,eax
c0021ab3:	ba f8 0c 00 00       	mov    edx,0xcf8
c0021ab8:	89 c8                	mov    eax,ecx
c0021aba:	ef                   	out    dx,eax
c0021abb:	ba fc 0c 00 00       	mov    edx,0xcfc
c0021ac0:	89 d8                	mov    eax,ebx
c0021ac2:	ef                   	out    dx,eax
c0021ac3:	5b                   	pop    ebx
c0021ac4:	c3                   	ret    
c0021ac5:	90                   	nop

c0021ac6 <PCI::checkBus(unsigned char)>:
c0021ac6:	56                   	push   esi
c0021ac7:	53                   	push   ebx
c0021ac8:	31 db                	xor    ebx,ebx
c0021aca:	51                   	push   ecx
c0021acb:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0021ad0:	52                   	push   edx
c0021ad1:	53                   	push   ebx
c0021ad2:	43                   	inc    ebx
c0021ad3:	56                   	push   esi
c0021ad4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ad8:	e8 2b 03 00 00       	call   c0021e08 <PCI::checkDevice(unsigned char, unsigned char)>
c0021add:	83 c4 10             	add    esp,0x10
c0021ae0:	83 fb 20             	cmp    ebx,0x20
c0021ae3:	75 eb                	jne    c0021ad0 <PCI::checkBus(unsigned char)+0xa>
c0021ae5:	58                   	pop    eax
c0021ae6:	5b                   	pop    ebx
c0021ae7:	5e                   	pop    esi
c0021ae8:	c3                   	ret    
c0021ae9:	90                   	nop

c0021aea <PCI::foundDevice(PCIDeviceInfo)>:
c0021aea:	55                   	push   ebp
c0021aeb:	57                   	push   edi
c0021aec:	56                   	push   esi
c0021aed:	53                   	push   ebx
c0021aee:	83 ec 1c             	sub    esp,0x1c
c0021af1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0021af5:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0021afb:	0f 84 52 01 00 00    	je     c0021c53 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0021b01:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0021b05:	66 81 f9 06 04       	cmp    cx,0x406
c0021b0a:	75 2c                	jne    c0021b38 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0021b0c:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0021b11:	50                   	push   eax
c0021b12:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0021b17:	50                   	push   eax
c0021b18:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0021b1d:	50                   	push   eax
c0021b1e:	56                   	push   esi
c0021b1f:	e8 b2 fe ff ff       	call   c00219d6 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0021b24:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0021b28:	0f b6 c0             	movzx  eax,al
c0021b2b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0021b2f:	83 c4 2c             	add    esp,0x2c
c0021b32:	5b                   	pop    ebx
c0021b33:	5e                   	pop    esi
c0021b34:	5f                   	pop    edi
c0021b35:	5d                   	pop    ebp
c0021b36:	eb 8e                	jmp    c0021ac6 <PCI::checkBus(unsigned char)>
c0021b38:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021b3c:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0021b42:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021b46:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0021b4a:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0021b4e:	88 d3                	mov    bl,dl
c0021b50:	85 c0                	test   eax,eax
c0021b52:	74 33                	je     c0021b87 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0021b54:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0021b57:	85 d2                	test   edx,edx
c0021b59:	74 28                	je     c0021b83 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021b5b:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0021b61:	31 ef                	xor    edi,ebp
c0021b63:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0021b69:	75 18                	jne    c0021b83 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021b6b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021b6f:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0021b75:	75 0c                	jne    c0021b83 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021b77:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0021b7d:	0f 84 d0 00 00 00    	je     c0021c53 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0021b83:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b85:	eb c9                	jmp    c0021b50 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0021b87:	66 81 f9 01 06       	cmp    cx,0x601
c0021b8c:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0021b90:	75 19                	jne    c0021bab <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0021b92:	83 ec 0c             	sub    esp,0xc
c0021b95:	68 64 01 00 00       	push   0x164
c0021b9a:	e8 35 d9 fe ff       	call   c000f4d4 <malloc>
c0021b9f:	89 c5                	mov    ebp,eax
c0021ba1:	89 04 24             	mov    DWORD PTR [esp],eax
c0021ba4:	e8 95 0f 00 00       	call   c0022b3e <SATABus::SATABus()>
c0021ba9:	eb 1e                	jmp    c0021bc9 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0021bab:	66 81 f9 01 01       	cmp    cx,0x101
c0021bb0:	75 60                	jne    c0021c12 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0021bb2:	83 ec 0c             	sub    esp,0xc
c0021bb5:	68 70 02 00 00       	push   0x270
c0021bba:	e8 15 d9 fe ff       	call   c000f4d4 <malloc>
c0021bbf:	89 c5                	mov    ebp,eax
c0021bc1:	89 04 24             	mov    DWORD PTR [esp],eax
c0021bc4:	e8 03 03 00 00       	call   c0021ecc <IDE::IDE()>
c0021bc9:	58                   	pop    eax
c0021bca:	5a                   	pop    edx
c0021bcb:	55                   	push   ebp
c0021bcc:	56                   	push   esi
c0021bcd:	e8 6e 1f ff ff       	call   c0013b40 <Device::addChild(Device*)>
c0021bd2:	83 ec 1c             	sub    esp,0x1c
c0021bd5:	b9 09 00 00 00       	mov    ecx,0x9
c0021bda:	fc                   	cld    
c0021bdb:	89 e7                	mov    edi,esp
c0021bdd:	89 de                	mov    esi,ebx
c0021bdf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021be1:	55                   	push   ebp
c0021be2:	e8 63 1e ff ff       	call   c0013a4a <Device::preOpenPCI(PCIDeviceInfo)>
c0021be7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021bea:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0021bee:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0021bf6:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0021bfe:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0021c06:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021c09:	83 c4 4c             	add    esp,0x4c
c0021c0c:	5b                   	pop    ebx
c0021c0d:	5e                   	pop    esi
c0021c0e:	5f                   	pop    edi
c0021c0f:	5d                   	pop    ebp
c0021c10:	ff e0                	jmp    eax
c0021c12:	83 ec 0c             	sub    esp,0xc
c0021c15:	68 58 01 00 00       	push   0x158
c0021c1a:	e8 b5 d8 fe ff       	call   c000f4d4 <malloc>
c0021c1f:	89 c5                	mov    ebp,eax
c0021c21:	58                   	pop    eax
c0021c22:	5a                   	pop    edx
c0021c23:	68 60 af 02 c0       	push   0xc002af60
c0021c28:	55                   	push   ebp
c0021c29:	e8 08 22 ff ff       	call   c0013e36 <DriverlessDevice::DriverlessDevice(char const*)>
c0021c2e:	59                   	pop    ecx
c0021c2f:	5f                   	pop    edi
c0021c30:	55                   	push   ebp
c0021c31:	56                   	push   esi
c0021c32:	e8 09 1f ff ff       	call   c0013b40 <Device::addChild(Device*)>
c0021c37:	b9 09 00 00 00       	mov    ecx,0x9
c0021c3c:	fc                   	cld    
c0021c3d:	89 df                	mov    edi,ebx
c0021c3f:	89 de                	mov    esi,ebx
c0021c41:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021c43:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0021c47:	83 c4 2c             	add    esp,0x2c
c0021c4a:	5b                   	pop    ebx
c0021c4b:	5e                   	pop    esi
c0021c4c:	5f                   	pop    edi
c0021c4d:	5d                   	pop    ebp
c0021c4e:	e9 f7 1d ff ff       	jmp    c0013a4a <Device::preOpenPCI(PCIDeviceInfo)>
c0021c53:	83 c4 1c             	add    esp,0x1c
c0021c56:	5b                   	pop    ebx
c0021c57:	5e                   	pop    esi
c0021c58:	5f                   	pop    edi
c0021c59:	5d                   	pop    ebp
c0021c5a:	c3                   	ret    
c0021c5b:	90                   	nop

c0021c5c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0021c5c:	55                   	push   ebp
c0021c5d:	57                   	push   edi
c0021c5e:	56                   	push   esi
c0021c5f:	53                   	push   ebx
c0021c60:	83 ec 5c             	sub    esp,0x5c
c0021c63:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0021c67:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0021c6b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0021c6f:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0021c74:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021c78:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0021c7c:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0021c81:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021c85:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0021c8a:	6a 0c                	push   0xc
c0021c8c:	55                   	push   ebp
c0021c8d:	53                   	push   ebx
c0021c8e:	57                   	push   edi
c0021c8f:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0021c96:	e8 01 fc ff ff       	call   c002189c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021c9b:	55                   	push   ebp
c0021c9c:	53                   	push   ebx
c0021c9d:	57                   	push   edi
c0021c9e:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0021ca5:	e8 80 fc ff ff       	call   c002192a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0021caa:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0021caf:	83 c4 24             	add    esp,0x24
c0021cb2:	55                   	push   ebp
c0021cb3:	53                   	push   ebx
c0021cb4:	57                   	push   edi
c0021cb5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0021cb9:	e8 f6 fc ff ff       	call   c00219b4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0021cbe:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0021cc2:	6a 3c                	push   0x3c
c0021cc4:	55                   	push   ebp
c0021cc5:	53                   	push   ebx
c0021cc6:	57                   	push   edi
c0021cc7:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0021cce:	e8 c9 fb ff ff       	call   c002189c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021cd3:	0f b6 c4             	movzx  eax,ah
c0021cd6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021cda:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0021cde:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0021ce2:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c0021ce7:	83 c4 24             	add    esp,0x24
c0021cea:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0021cf0:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c0021cf7:	74 6c                	je     c0021d65 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0021cf9:	31 f6                	xor    esi,esi
c0021cfb:	8b 15 28 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c928
c0021d01:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0021d07:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c0021d0d:	7e 56                	jle    c0021d65 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0021d0f:	8d 14 f2             	lea    edx,[edx+esi*8]
c0021d12:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0021d19:	39 cb                	cmp    ebx,ecx
c0021d1b:	75 45                	jne    c0021d62 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0021d1d:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0021d24:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0021d28:	75 38                	jne    c0021d62 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0021d2a:	83 ec 0c             	sub    esp,0xc
c0021d2d:	68 7a af 02 c0       	push   0xc002af7a
c0021d32:	e8 1a 0a ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0021d37:	8b 15 28 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c928
c0021d3d:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0021d43:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0021d4b:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0021d4f:	52                   	push   edx
c0021d50:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021d54:	53                   	push   ebx
c0021d55:	68 9f af 02 c0       	push   0xc002af9f
c0021d5a:	e8 f2 09 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0021d5f:	83 c4 20             	add    esp,0x20
c0021d62:	46                   	inc    esi
c0021d63:	eb 96                	jmp    c0021cfb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0021d65:	31 d2                	xor    edx,edx
c0021d67:	83 ec 0c             	sub    esp,0xc
c0021d6a:	55                   	push   ebp
c0021d6b:	53                   	push   ebx
c0021d6c:	57                   	push   edi
c0021d6d:	52                   	push   edx
c0021d6e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0021d72:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0021d79:	e8 7c fc ff ff       	call   c00219fa <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021d7e:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0021d82:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021d86:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0021d8a:	42                   	inc    edx
c0021d8b:	83 c4 20             	add    esp,0x20
c0021d8e:	83 fa 06             	cmp    edx,0x6
c0021d91:	75 d4                	jne    c0021d67 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0021d93:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0021d97:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0021d9b:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0021d9f:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0021da3:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0021da7:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0021dab:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0021db0:	86 e0                	xchg   al,ah
c0021db2:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0021db7:	55                   	push   ebp
c0021db8:	53                   	push   ebx
c0021db9:	57                   	push   edi
c0021dba:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0021dbe:	e8 ab fb ff ff       	call   c002196e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0021dc3:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0021dc7:	55                   	push   ebp
c0021dc8:	53                   	push   ebx
c0021dc9:	57                   	push   edi
c0021dca:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0021dd1:	e8 0e fb ff ff       	call   c00218e4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021dd6:	83 ec 0c             	sub    esp,0xc
c0021dd9:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0021dde:	b9 09 00 00 00       	mov    ecx,0x9
c0021de3:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0021de7:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0021deb:	fc                   	cld    
c0021dec:	89 e7                	mov    edi,esp
c0021dee:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021df0:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0021df7:	e8 ee fc ff ff       	call   c0021aea <PCI::foundDevice(PCIDeviceInfo)>
c0021dfc:	81 c4 8c 00 00 00    	add    esp,0x8c
c0021e02:	5b                   	pop    ebx
c0021e03:	5e                   	pop    esi
c0021e04:	5f                   	pop    edi
c0021e05:	5d                   	pop    ebp
c0021e06:	c3                   	ret    
c0021e07:	90                   	nop

c0021e08 <PCI::checkDevice(unsigned char, unsigned char)>:
c0021e08:	55                   	push   ebp
c0021e09:	57                   	push   edi
c0021e0a:	56                   	push   esi
c0021e0b:	53                   	push   ebx
c0021e0c:	83 ec 0c             	sub    esp,0xc
c0021e0f:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0021e13:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0021e18:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0021e1d:	6a 00                	push   0x0
c0021e1f:	56                   	push   esi
c0021e20:	57                   	push   edi
c0021e21:	55                   	push   ebp
c0021e22:	e8 bd fa ff ff       	call   c00218e4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021e27:	6a 00                	push   0x0
c0021e29:	56                   	push   esi
c0021e2a:	57                   	push   edi
c0021e2b:	55                   	push   ebp
c0021e2c:	e8 2b fe ff ff       	call   c0021c5c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0021e31:	83 c4 20             	add    esp,0x20
c0021e34:	6a 00                	push   0x0
c0021e36:	56                   	push   esi
c0021e37:	57                   	push   edi
c0021e38:	55                   	push   ebp
c0021e39:	e8 c8 fa ff ff       	call   c0021906 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0021e3e:	83 c4 10             	add    esp,0x10
c0021e41:	84 c0                	test   al,al
c0021e43:	79 27                	jns    c0021e6c <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0021e45:	bb 01 00 00 00       	mov    ebx,0x1
c0021e4a:	53                   	push   ebx
c0021e4b:	56                   	push   esi
c0021e4c:	57                   	push   edi
c0021e4d:	55                   	push   ebp
c0021e4e:	e8 91 fa ff ff       	call   c00218e4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021e53:	83 c4 10             	add    esp,0x10
c0021e56:	66 40                	inc    ax
c0021e58:	74 0c                	je     c0021e66 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0021e5a:	53                   	push   ebx
c0021e5b:	56                   	push   esi
c0021e5c:	57                   	push   edi
c0021e5d:	55                   	push   ebp
c0021e5e:	e8 f9 fd ff ff       	call   c0021c5c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0021e63:	83 c4 10             	add    esp,0x10
c0021e66:	43                   	inc    ebx
c0021e67:	83 fb 08             	cmp    ebx,0x8
c0021e6a:	75 de                	jne    c0021e4a <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0021e6c:	83 c4 0c             	add    esp,0xc
c0021e6f:	5b                   	pop    ebx
c0021e70:	5e                   	pop    esi
c0021e71:	5f                   	pop    edi
c0021e72:	5d                   	pop    ebp
c0021e73:	c3                   	ret    

c0021e74 <PCI::detect()>:
c0021e74:	56                   	push   esi
c0021e75:	53                   	push   ebx
c0021e76:	53                   	push   ebx
c0021e77:	31 db                	xor    ebx,ebx
c0021e79:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0021e7d:	6a 00                	push   0x0
c0021e7f:	6a 00                	push   0x0
c0021e81:	6a 00                	push   0x0
c0021e83:	56                   	push   esi
c0021e84:	e8 7d fa ff ff       	call   c0021906 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0021e89:	83 c4 10             	add    esp,0x10
c0021e8c:	a8 80                	test   al,0x80
c0021e8e:	75 21                	jne    c0021eb1 <PCI::detect()+0x3d>
c0021e90:	51                   	push   ecx
c0021e91:	51                   	push   ecx
c0021e92:	6a 00                	push   0x0
c0021e94:	56                   	push   esi
c0021e95:	e8 2c fc ff ff       	call   c0021ac6 <PCI::checkBus(unsigned char)>
c0021e9a:	83 c4 10             	add    esp,0x10
c0021e9d:	eb 24                	jmp    c0021ec3 <PCI::detect()+0x4f>
c0021e9f:	52                   	push   edx
c0021ea0:	52                   	push   edx
c0021ea1:	53                   	push   ebx
c0021ea2:	43                   	inc    ebx
c0021ea3:	56                   	push   esi
c0021ea4:	e8 1d fc ff ff       	call   c0021ac6 <PCI::checkBus(unsigned char)>
c0021ea9:	83 c4 10             	add    esp,0x10
c0021eac:	83 fb 08             	cmp    ebx,0x8
c0021eaf:	74 12                	je     c0021ec3 <PCI::detect()+0x4f>
c0021eb1:	53                   	push   ebx
c0021eb2:	6a 00                	push   0x0
c0021eb4:	6a 00                	push   0x0
c0021eb6:	56                   	push   esi
c0021eb7:	e8 28 fa ff ff       	call   c00218e4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021ebc:	83 c4 10             	add    esp,0x10
c0021ebf:	66 40                	inc    ax
c0021ec1:	74 dc                	je     c0021e9f <PCI::detect()+0x2b>
c0021ec3:	58                   	pop    eax
c0021ec4:	5b                   	pop    ebx
c0021ec5:	5e                   	pop    esi
c0021ec6:	c3                   	ret    
c0021ec7:	90                   	nop

c0021ec8 <IDE::close(int, int, void*)>:
c0021ec8:	83 c8 ff             	or     eax,0xffffffff
c0021ecb:	c3                   	ret    

c0021ecc <IDE::IDE()>:
c0021ecc:	83 ec 0c             	sub    esp,0xc
c0021ecf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ed3:	83 ec 08             	sub    esp,0x8
c0021ed6:	68 e8 af 02 c0       	push   0xc002afe8
c0021edb:	50                   	push   eax
c0021edc:	e8 eb 1f ff ff       	call   c0013ecc <HardDiskController::HardDiskController(char const*)>
c0021ee1:	83 c4 10             	add    esp,0x10
c0021ee4:	ba 28 b2 02 c0       	mov    edx,0xc002b228
c0021ee9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021eed:	89 10                	mov    DWORD PTR [eax],edx
c0021eef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ef3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0021efa:	90                   	nop
c0021efb:	83 c4 0c             	add    esp,0xc
c0021efe:	c3                   	ret    
c0021eff:	90                   	nop

c0021f00 <IDE::prepareInterrupt(unsigned char)>:
c0021f00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021f05:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021f09:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0021f11:	c3                   	ret    

c0021f12 <selectDrive(unsigned char, unsigned char)>:
c0021f12:	c3                   	ret    
c0021f13:	90                   	nop

c0021f14 <IDE::getBase(unsigned char)>:
c0021f14:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0021f19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f1d:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0021f25:	c3                   	ret    

c0021f26 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0021f26:	55                   	push   ebp
c0021f27:	57                   	push   edi
c0021f28:	56                   	push   esi
c0021f29:	53                   	push   ebx
c0021f2a:	83 ec 1c             	sub    esp,0x1c
c0021f2d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021f31:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0021f35:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0021f38:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0021f3c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0021f40:	80 f9 03             	cmp    cl,0x3
c0021f43:	77 51                	ja     c0021f96 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0021f45:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021f49:	0f b6 f2             	movzx  esi,dl
c0021f4c:	0f b6 db             	movzx  ebx,bl
c0021f4f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0021f52:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0021f56:	83 ca 80             	or     edx,0xffffff80
c0021f59:	0f b6 d2             	movzx  edx,dl
c0021f5c:	52                   	push   edx
c0021f5d:	6a 0c                	push   0xc
c0021f5f:	56                   	push   esi
c0021f60:	57                   	push   edi
c0021f61:	e8 c0 ff ff ff       	call   c0021f26 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021f66:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0021f6b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021f6f:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0021f73:	ee                   	out    dx,al
c0021f74:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0021f79:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0021f7d:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0021f81:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0021f85:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0021f8d:	83 c4 2c             	add    esp,0x2c
c0021f90:	5b                   	pop    ebx
c0021f91:	5e                   	pop    esi
c0021f92:	5f                   	pop    edi
c0021f93:	5d                   	pop    ebp
c0021f94:	eb 90                	jmp    c0021f26 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021f96:	80 fb 07             	cmp    bl,0x7
c0021f99:	77 12                	ja     c0021fad <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0021f9b:	0f b6 d2             	movzx  edx,dl
c0021f9e:	0f b6 db             	movzx  ebx,bl
c0021fa1:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0021fa9:	89 da                	mov    edx,ebx
c0021fab:	eb 2f                	jmp    c0021fdc <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0021fad:	80 fb 0d             	cmp    bl,0xd
c0021fb0:	77 13                	ja     c0021fc5 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0021fb2:	0f b6 d2             	movzx  edx,dl
c0021fb5:	0f b6 db             	movzx  ebx,bl
c0021fb8:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0021fbf:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0021fc3:	eb 17                	jmp    c0021fdc <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0021fc5:	80 fb 15             	cmp    bl,0x15
c0021fc8:	77 13                	ja     c0021fdd <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0021fca:	0f b6 d2             	movzx  edx,dl
c0021fcd:	0f b6 db             	movzx  ebx,bl
c0021fd0:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0021fd8:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0021fdc:	ee                   	out    dx,al
c0021fdd:	83 c4 1c             	add    esp,0x1c
c0021fe0:	5b                   	pop    ebx
c0021fe1:	5e                   	pop    esi
c0021fe2:	5f                   	pop    edi
c0021fe3:	5d                   	pop    ebp
c0021fe4:	c3                   	ret    
c0021fe5:	90                   	nop

c0021fe6 <IDE::read(unsigned char, unsigned char)>:
c0021fe6:	55                   	push   ebp
c0021fe7:	57                   	push   edi
c0021fe8:	56                   	push   esi
c0021fe9:	53                   	push   ebx
c0021fea:	83 ec 1c             	sub    esp,0x1c
c0021fed:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021ff1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0021ff5:	8d 43 f8             	lea    eax,[ebx-0x8]
c0021ff8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0021ffc:	3c 03                	cmp    al,0x3
c0021ffe:	77 43                	ja     c0022043 <IDE::read(unsigned char, unsigned char)+0x5d>
c0022000:	0f b6 f2             	movzx  esi,dl
c0022003:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022006:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c002200a:	83 c8 80             	or     eax,0xffffff80
c002200d:	0f b6 c0             	movzx  eax,al
c0022010:	50                   	push   eax
c0022011:	6a 0c                	push   0xc
c0022013:	56                   	push   esi
c0022014:	57                   	push   edi
c0022015:	e8 0c ff ff ff       	call   c0021f26 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002201a:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c002201f:	0f b6 c3             	movzx  eax,bl
c0022022:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0022026:	ec                   	in     al,dx
c0022027:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002202b:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0022030:	52                   	push   edx
c0022031:	6a 0c                	push   0xc
c0022033:	56                   	push   esi
c0022034:	57                   	push   edi
c0022035:	e8 ec fe ff ff       	call   c0021f26 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002203a:	83 c4 20             	add    esp,0x20
c002203d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022041:	eb 49                	jmp    c002208c <IDE::read(unsigned char, unsigned char)+0xa6>
c0022043:	80 fb 07             	cmp    bl,0x7
c0022046:	77 12                	ja     c002205a <IDE::read(unsigned char, unsigned char)+0x74>
c0022048:	0f b6 d2             	movzx  edx,dl
c002204b:	0f b6 c3             	movzx  eax,bl
c002204e:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0022056:	89 c2                	mov    edx,eax
c0022058:	eb 31                	jmp    c002208b <IDE::read(unsigned char, unsigned char)+0xa5>
c002205a:	80 fb 0d             	cmp    bl,0xd
c002205d:	77 13                	ja     c0022072 <IDE::read(unsigned char, unsigned char)+0x8c>
c002205f:	0f b6 d2             	movzx  edx,dl
c0022062:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0022069:	0f b6 d3             	movzx  edx,bl
c002206c:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0022070:	eb 19                	jmp    c002208b <IDE::read(unsigned char, unsigned char)+0xa5>
c0022072:	31 c0                	xor    eax,eax
c0022074:	80 fb 15             	cmp    bl,0x15
c0022077:	77 13                	ja     c002208c <IDE::read(unsigned char, unsigned char)+0xa6>
c0022079:	0f b6 d2             	movzx  edx,dl
c002207c:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0022084:	0f b6 d3             	movzx  edx,bl
c0022087:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002208b:	ec                   	in     al,dx
c002208c:	83 c4 1c             	add    esp,0x1c
c002208f:	5b                   	pop    ebx
c0022090:	5e                   	pop    esi
c0022091:	5f                   	pop    edi
c0022092:	5d                   	pop    ebp
c0022093:	c3                   	ret    

c0022094 <IDE::waitInterrupt(unsigned char)>:
c0022094:	55                   	push   ebp
c0022095:	57                   	push   edi
c0022096:	56                   	push   esi
c0022097:	53                   	push   ebx
c0022098:	31 db                	xor    ebx,ebx
c002209a:	83 ec 0c             	sub    esp,0xc
c002209d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00220a1:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c00220a6:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c00220ae:	89 e8                	mov    eax,ebp
c00220b0:	84 c0                	test   al,al
c00220b2:	75 34                	jne    c00220e8 <IDE::waitInterrupt(unsigned char)+0x54>
c00220b4:	52                   	push   edx
c00220b5:	6a 0c                	push   0xc
c00220b7:	56                   	push   esi
c00220b8:	57                   	push   edi
c00220b9:	e8 28 ff ff ff       	call   c0021fe6 <IDE::read(unsigned char, unsigned char)>
c00220be:	83 c4 10             	add    esp,0x10
c00220c1:	a8 01                	test   al,0x1
c00220c3:	75 2b                	jne    c00220f0 <IDE::waitInterrupt(unsigned char)+0x5c>
c00220c5:	f6 c3 04             	test   bl,0x4
c00220c8:	75 16                	jne    c00220e0 <IDE::waitInterrupt(unsigned char)+0x4c>
c00220ca:	83 fb 32             	cmp    ebx,0x32
c00220cd:	7e 11                	jle    c00220e0 <IDE::waitInterrupt(unsigned char)+0x4c>
c00220cf:	50                   	push   eax
c00220d0:	50                   	push   eax
c00220d1:	6a 00                	push   0x0
c00220d3:	68 80 96 98 00       	push   0x989680
c00220d8:	e8 6d b1 ff ff       	call   c001d24a <nanoSleep(unsigned long long)>
c00220dd:	83 c4 10             	add    esp,0x10
c00220e0:	83 fb 3c             	cmp    ebx,0x3c
c00220e3:	74 0b                	je     c00220f0 <IDE::waitInterrupt(unsigned char)+0x5c>
c00220e5:	43                   	inc    ebx
c00220e6:	eb be                	jmp    c00220a6 <IDE::waitInterrupt(unsigned char)+0x12>
c00220e8:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00220f0:	83 c4 0c             	add    esp,0xc
c00220f3:	89 e8                	mov    eax,ebp
c00220f5:	5b                   	pop    ebx
c00220f6:	5e                   	pop    esi
c00220f7:	5f                   	pop    edi
c00220f8:	5d                   	pop    ebp
c00220f9:	c3                   	ret    

c00220fa <ideChannel0IRQHandler(regs*, void*)>:
c00220fa:	83 ec 10             	sub    esp,0x10
c00220fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022101:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0022108:	6a 07                	push   0x7
c002210a:	6a 00                	push   0x0
c002210c:	50                   	push   eax
c002210d:	e8 d4 fe ff ff       	call   c0021fe6 <IDE::read(unsigned char, unsigned char)>
c0022112:	83 c4 1c             	add    esp,0x1c
c0022115:	c3                   	ret    

c0022116 <ideChannel1IRQHandler(regs*, void*)>:
c0022116:	83 ec 10             	sub    esp,0x10
c0022119:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002211d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0022124:	6a 07                	push   0x7
c0022126:	6a 01                	push   0x1
c0022128:	50                   	push   eax
c0022129:	e8 b8 fe ff ff       	call   c0021fe6 <IDE::read(unsigned char, unsigned char)>
c002212e:	83 c4 1c             	add    esp,0x1c
c0022131:	c3                   	ret    

c0022132 <IDE::enableIRQs(unsigned char, bool)>:
c0022132:	57                   	push   edi
c0022133:	56                   	push   esi
c0022134:	be 04 00 00 00       	mov    esi,0x4
c0022139:	53                   	push   ebx
c002213a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c002213f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022143:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0022148:	0f 94 c0             	sete   al
c002214b:	d1 e0                	shl    eax,1
c002214d:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0022154:	0f b6 c0             	movzx  eax,al
c0022157:	50                   	push   eax
c0022158:	6a 0c                	push   0xc
c002215a:	57                   	push   edi
c002215b:	53                   	push   ebx
c002215c:	e8 c5 fd ff ff       	call   c0021f26 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022161:	83 c4 10             	add    esp,0x10
c0022164:	50                   	push   eax
c0022165:	6a 0c                	push   0xc
c0022167:	57                   	push   edi
c0022168:	53                   	push   ebx
c0022169:	e8 78 fe ff ff       	call   c0021fe6 <IDE::read(unsigned char, unsigned char)>
c002216e:	83 c4 10             	add    esp,0x10
c0022171:	4e                   	dec    esi
c0022172:	75 f0                	jne    c0022164 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0022174:	5b                   	pop    ebx
c0022175:	5e                   	pop    esi
c0022176:	5f                   	pop    edi
c0022177:	c3                   	ret    

c0022178 <IDE::open(int, int, void*)>:
c0022178:	55                   	push   ebp
c0022179:	57                   	push   edi
c002217a:	56                   	push   esi
c002217b:	53                   	push   ebx
c002217c:	83 ec 1c             	sub    esp,0x1c
c002217f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0022183:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002218c:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0022195:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002219c:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00221a3:	0f 85 b0 02 00 00    	jne    c0022459 <IDE::open(int, int, void*)+0x2e1>
c00221a9:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00221af:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00221b3:	83 e0 7f             	and    eax,0x7f
c00221b6:	3c 05                	cmp    al,0x5
c00221b8:	74 04                	je     c00221be <IDE::open(int, int, void*)+0x46>
c00221ba:	3c 0f                	cmp    al,0xf
c00221bc:	75 32                	jne    c00221f0 <IDE::open(int, int, void*)+0x78>
c00221be:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00221c4:	83 e0 fc             	and    eax,0xfffffffc
c00221c7:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00221ce:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00221d4:	83 e0 fc             	and    eax,0xfffffffc
c00221d7:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00221de:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00221e4:	83 e0 fc             	and    eax,0xfffffffc
c00221e7:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00221ee:	eb 14                	jmp    c0022204 <IDE::open(int, int, void*)+0x8c>
c00221f0:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00221fa:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0022204:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c002220b:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0022212:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022216:	89 c6                	mov    esi,eax
c0022218:	bf f8 0c 00 00       	mov    edi,0xcf8
c002221d:	c1 e6 10             	shl    esi,0x10
c0022220:	89 e8                	mov    eax,ebp
c0022222:	89 fa                	mov    edx,edi
c0022224:	c1 e0 0b             	shl    eax,0xb
c0022227:	09 f0                	or     eax,esi
c0022229:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0022230:	c1 e6 08             	shl    esi,0x8
c0022233:	09 c6                	or     esi,eax
c0022235:	89 f0                	mov    eax,esi
c0022237:	0d 08 00 00 80       	or     eax,0x80000008
c002223c:	ef                   	out    dx,eax
c002223d:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0022242:	89 ca                	mov    edx,ecx
c0022244:	ed                   	in     eax,dx
c0022245:	c1 e8 10             	shr    eax,0x10
c0022248:	3d ff ff 00 00       	cmp    eax,0xffff
c002224d:	0f 84 f5 00 00 00    	je     c0022348 <IDE::open(int, int, void*)+0x1d0>
c0022253:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0022259:	89 fa                	mov    edx,edi
c002225b:	89 f0                	mov    eax,esi
c002225d:	ef                   	out    dx,eax
c002225e:	b0 fe                	mov    al,0xfe
c0022260:	89 ca                	mov    edx,ecx
c0022262:	ee                   	out    dx,al
c0022263:	89 f0                	mov    eax,esi
c0022265:	89 fa                	mov    edx,edi
c0022267:	ef                   	out    dx,eax
c0022268:	89 ca                	mov    edx,ecx
c002226a:	ed                   	in     eax,dx
c002226b:	3c fe                	cmp    al,0xfe
c002226d:	0f 85 a9 00 00 00    	jne    c002231c <IDE::open(int, int, void*)+0x1a4>
c0022273:	8b 15 28 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c928
c0022279:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0022280:	74 33                	je     c00222b5 <IDE::open(int, int, void*)+0x13d>
c0022282:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0022288:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002228c:	40                   	inc    eax
c002228d:	83 ec 0c             	sub    esp,0xc
c0022290:	0f b6 c0             	movzx  eax,al
c0022293:	50                   	push   eax
c0022294:	55                   	push   ebp
c0022295:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022299:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c002229f:	51                   	push   ecx
c00222a0:	e8 bb 54 ff ff       	call   c0017760 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00222a5:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00222aa:	83 c4 1c             	add    esp,0x1c
c00222ad:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00222b3:	eb 0a                	jmp    c00222bf <IDE::open(int, int, void*)+0x147>
c00222b5:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00222bf:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00222c6:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00222cd:	c1 e1 10             	shl    ecx,0x10
c00222d0:	c1 e0 08             	shl    eax,0x8
c00222d3:	bf f8 0c 00 00       	mov    edi,0xcf8
c00222d8:	09 c1                	or     ecx,eax
c00222da:	89 fa                	mov    edx,edi
c00222dc:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00222e3:	c1 e0 0b             	shl    eax,0xb
c00222e6:	09 c1                	or     ecx,eax
c00222e8:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00222ee:	89 c8                	mov    eax,ecx
c00222f0:	ef                   	out    dx,eax
c00222f1:	be fc 0c 00 00       	mov    esi,0xcfc
c00222f6:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00222fc:	89 f2                	mov    edx,esi
c00222fe:	ee                   	out    dx,al
c00222ff:	89 c8                	mov    eax,ecx
c0022301:	89 fa                	mov    edx,edi
c0022303:	ef                   	out    dx,eax
c0022304:	89 f2                	mov    edx,esi
c0022306:	ed                   	in     eax,dx
c0022307:	0f b6 c0             	movzx  eax,al
c002230a:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0022310:	74 46                	je     c0022358 <IDE::open(int, int, void*)+0x1e0>
c0022312:	83 ec 0c             	sub    esp,0xc
c0022315:	68 00 b0 02 c0       	push   0xc002b000
c002231a:	eb 34                	jmp    c0022350 <IDE::open(int, int, void*)+0x1d8>
c002231c:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0022325:	75 17                	jne    c002233e <IDE::open(int, int, void*)+0x1c6>
c0022327:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c002232c:	74 07                	je     c0022335 <IDE::open(int, int, void*)+0x1bd>
c002232e:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0022333:	75 09                	jne    c002233e <IDE::open(int, int, void*)+0x1c6>
c0022335:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002233c:	eb 1a                	jmp    c0022358 <IDE::open(int, int, void*)+0x1e0>
c002233e:	83 ec 0c             	sub    esp,0xc
c0022341:	68 08 b0 02 c0       	push   0xc002b008
c0022346:	eb 08                	jmp    c0022350 <IDE::open(int, int, void*)+0x1d8>
c0022348:	83 ec 0c             	sub    esp,0xc
c002234b:	68 39 b0 02 c0       	push   0xc002b039
c0022350:	e8 16 75 ff ff       	call   c001986b <Krnl::panic(char const*)>
c0022355:	83 c4 10             	add    esp,0x10
c0022358:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c002235f:	79 1a                	jns    c002237b <IDE::open(int, int, void*)+0x203>
c0022361:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0022367:	83 e0 fc             	and    eax,0xfffffffc
c002236a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0022371:	83 c0 08             	add    eax,0x8
c0022374:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c002237b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0022381:	89 c2                	mov    edx,eax
c0022383:	83 e2 0f             	and    edx,0xf
c0022386:	66 83 fa 08          	cmp    dx,0x8
c002238a:	75 0a                	jne    c0022396 <IDE::open(int, int, void*)+0x21e>
c002238c:	83 e8 02             	sub    eax,0x2
c002238f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0022396:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002239c:	89 c2                	mov    edx,eax
c002239e:	83 e2 0f             	and    edx,0xf
c00223a1:	66 83 fa 08          	cmp    dx,0x8
c00223a5:	75 0a                	jne    c00223b1 <IDE::open(int, int, void*)+0x239>
c00223a7:	83 e8 02             	sub    eax,0x2
c00223aa:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00223b1:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00223b8:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00223bf:	89 d0                	mov    eax,edx
c00223c1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00223c4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00223c8:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00223cc:	8d 4a 01             	lea    ecx,[edx+0x1]
c00223cf:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00223d4:	0f b6 c9             	movzx  ecx,cl
c00223d7:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00223de:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00223e1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00223e5:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00223e9:	8d 50 02             	lea    edx,[eax+0x2]
c00223ec:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00223f1:	0f b6 d2             	movzx  edx,dl
c00223f4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00223fa:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00223fd:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022401:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0022405:	8d 48 03             	lea    ecx,[eax+0x3]
c0022408:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002240d:	0f b6 c9             	movzx  ecx,cl
c0022410:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0022416:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0022419:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002241d:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0022421:	8d 50 04             	lea    edx,[eax+0x4]
c0022424:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c002242a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002242f:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0022436:	66 85 f6             	test   si,si
c0022439:	74 3e                	je     c0022479 <IDE::open(int, int, void*)+0x301>
c002243b:	0f b6 d2             	movzx  edx,dl
c002243e:	83 c0 05             	add    eax,0x5
c0022441:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022444:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022448:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002244c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0022452:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022457:	eb 20                	jmp    c0022479 <IDE::open(int, int, void*)+0x301>
c0022459:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0022463:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002246d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0022474:	e9 02 ff ff ff       	jmp    c002237b <IDE::open(int, int, void*)+0x203>
c0022479:	52                   	push   edx
c002247a:	52                   	push   edx
c002247b:	6a 00                	push   0x0
c002247d:	53                   	push   ebx
c002247e:	e8 7d fa ff ff       	call   c0021f00 <IDE::prepareInterrupt(unsigned char)>
c0022483:	59                   	pop    ecx
c0022484:	5e                   	pop    esi
c0022485:	6a 01                	push   0x1
c0022487:	53                   	push   ebx
c0022488:	e8 73 fa ff ff       	call   c0021f00 <IDE::prepareInterrupt(unsigned char)>
c002248d:	83 c4 0c             	add    esp,0xc
c0022490:	6a 00                	push   0x0
c0022492:	6a 00                	push   0x0
c0022494:	53                   	push   ebx
c0022495:	e8 98 fc ff ff       	call   c0022132 <IDE::enableIRQs(unsigned char, bool)>
c002249a:	83 c4 0c             	add    esp,0xc
c002249d:	6a 00                	push   0x0
c002249f:	6a 01                	push   0x1
c00224a1:	53                   	push   ebx
c00224a2:	e8 8b fc ff ff       	call   c0022132 <IDE::enableIRQs(unsigned char, bool)>
c00224a7:	83 c4 10             	add    esp,0x10
c00224aa:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00224b1:	74 40                	je     c00224f3 <IDE::open(int, int, void*)+0x37b>
c00224b3:	83 ec 0c             	sub    esp,0xc
c00224b6:	68 63 b0 02 c0       	push   0xc002b063
c00224bb:	e8 91 02 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c00224c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00224c3:	6a 01                	push   0x1
c00224c5:	68 fa 20 02 c0       	push   0xc00220fa
c00224ca:	6a 0e                	push   0xe
c00224cc:	53                   	push   ebx
c00224cd:	e8 f2 15 ff ff       	call   c0013ac4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00224d2:	83 c4 14             	add    esp,0x14
c00224d5:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00224db:	53                   	push   ebx
c00224dc:	6a 01                	push   0x1
c00224de:	68 16 21 02 c0       	push   0xc0022116
c00224e3:	6a 0f                	push   0xf
c00224e5:	53                   	push   ebx
c00224e6:	e8 d9 15 ff ff       	call   c0013ac4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00224eb:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00224f1:	eb 4a                	jmp    c002253d <IDE::open(int, int, void*)+0x3c5>
c00224f3:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00224fd:	50                   	push   eax
c00224fe:	6a 0f                	push   0xf
c0022500:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0022506:	68 7f b0 02 c0       	push   0xc002b07f
c002250b:	e8 41 02 ff ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0022510:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022513:	6a 00                	push   0x0
c0022515:	68 fa 20 02 c0       	push   0xc00220fa
c002251a:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0022520:	53                   	push   ebx
c0022521:	e8 9e 15 ff ff       	call   c0013ac4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022526:	83 c4 14             	add    esp,0x14
c0022529:	53                   	push   ebx
c002252a:	6a 00                	push   0x0
c002252c:	68 16 21 02 c0       	push   0xc0022116
c0022531:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0022537:	53                   	push   ebx
c0022538:	e8 87 15 ff ff       	call   c0013ac4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002253d:	8b 03                	mov    eax,DWORD PTR [ebx]
c002253f:	83 c4 20             	add    esp,0x20
c0022542:	83 ec 0c             	sub    esp,0xc
c0022545:	53                   	push   ebx
c0022546:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0022549:	83 c4 0c             	add    esp,0xc
c002254c:	6a 07                	push   0x7
c002254e:	6a 00                	push   0x0
c0022550:	53                   	push   ebx
c0022551:	e8 90 fa ff ff       	call   c0021fe6 <IDE::read(unsigned char, unsigned char)>
c0022556:	83 c4 0c             	add    esp,0xc
c0022559:	6a 07                	push   0x7
c002255b:	6a 01                	push   0x1
c002255d:	53                   	push   ebx
c002255e:	e8 83 fa ff ff       	call   c0021fe6 <IDE::read(unsigned char, unsigned char)>
c0022563:	83 c4 0c             	add    esp,0xc
c0022566:	6a 01                	push   0x1
c0022568:	6a 00                	push   0x0
c002256a:	53                   	push   ebx
c002256b:	e8 c2 fb ff ff       	call   c0022132 <IDE::enableIRQs(unsigned char, bool)>
c0022570:	83 c4 0c             	add    esp,0xc
c0022573:	6a 01                	push   0x1
c0022575:	6a 01                	push   0x1
c0022577:	53                   	push   ebx
c0022578:	e8 b5 fb ff ff       	call   c0022132 <IDE::enableIRQs(unsigned char, bool)>
c002257d:	83 c4 2c             	add    esp,0x2c
c0022580:	31 c0                	xor    eax,eax
c0022582:	5b                   	pop    ebx
c0022583:	5e                   	pop    esi
c0022584:	5f                   	pop    edi
c0022585:	5d                   	pop    ebp
c0022586:	c3                   	ret    
c0022587:	90                   	nop

c0022588 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0022588:	55                   	push   ebp
c0022589:	57                   	push   edi
c002258a:	56                   	push   esi
c002258b:	53                   	push   ebx
c002258c:	83 ec 1c             	sub    esp,0x1c
c002258f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022593:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022597:	8d 50 f8             	lea    edx,[eax-0x8]
c002259a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002259e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00225a2:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00225a6:	80 fa 03             	cmp    dl,0x3
c00225a9:	77 5d                	ja     c0022608 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00225ab:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00225af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00225b3:	0f b6 db             	movzx  ebx,bl
c00225b6:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00225b9:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00225bd:	83 ca 80             	or     edx,0xffffff80
c00225c0:	0f b6 d2             	movzx  edx,dl
c00225c3:	52                   	push   edx
c00225c4:	6a 0c                	push   0xc
c00225c6:	53                   	push   ebx
c00225c7:	56                   	push   esi
c00225c8:	e8 59 f9 ff ff       	call   c0021f26 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00225cd:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00225d2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00225d6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00225da:	0f b6 c0             	movzx  eax,al
c00225dd:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00225e1:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00225e3:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00225e8:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00225ec:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00225f0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00225f4:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00225fc:	83 c4 2c             	add    esp,0x2c
c00225ff:	5b                   	pop    ebx
c0022600:	5e                   	pop    esi
c0022601:	5f                   	pop    edi
c0022602:	5d                   	pop    ebp
c0022603:	e9 1e f9 ff ff       	jmp    c0021f26 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022608:	3c 07                	cmp    al,0x7
c002260a:	77 10                	ja     c002261c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c002260c:	0f b6 db             	movzx  ebx,bl
c002260f:	0f b6 d0             	movzx  edx,al
c0022612:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c002261a:	eb 2d                	jmp    c0022649 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002261c:	3c 0d                	cmp    al,0xd
c002261e:	77 13                	ja     c0022633 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0022620:	0f b6 db             	movzx  ebx,bl
c0022623:	0f b6 c0             	movzx  eax,al
c0022626:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c002262d:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0022631:	eb 16                	jmp    c0022649 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0022633:	3c 15                	cmp    al,0x15
c0022635:	77 14                	ja     c002264b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0022637:	0f b6 db             	movzx  ebx,bl
c002263a:	0f b6 c0             	movzx  eax,al
c002263d:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0022645:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0022649:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002264b:	83 c4 1c             	add    esp,0x1c
c002264e:	5b                   	pop    ebx
c002264f:	5e                   	pop    esi
c0022650:	5f                   	pop    edi
c0022651:	5d                   	pop    ebp
c0022652:	c3                   	ret    
c0022653:	90                   	nop

c0022654 <IDE::detect()>:
c0022654:	55                   	push   ebp
c0022655:	57                   	push   edi
c0022656:	56                   	push   esi
c0022657:	53                   	push   ebx
c0022658:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002265e:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0022665:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002266c:	0f 85 be 02 00 00    	jne    c0022930 <IDE::detect()+0x2dc>
c0022672:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0022679:	31 f6                	xor    esi,esi
c002267b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0022683:	31 ed                	xor    ebp,ebp
c0022685:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022689:	c1 e0 06             	shl    eax,0x6
c002268c:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0022694:	89 e8                	mov    eax,ebp
c0022696:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002269a:	c1 e0 04             	shl    eax,0x4
c002269d:	83 c8 a0             	or     eax,0xffffffa0
c00226a0:	0f b6 c0             	movzx  eax,al
c00226a3:	50                   	push   eax
c00226a4:	6a 06                	push   0x6
c00226a6:	56                   	push   esi
c00226a7:	53                   	push   ebx
c00226a8:	e8 79 f8 ff ff       	call   c0021f26 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00226ad:	83 c4 0c             	add    esp,0xc
c00226b0:	6a 0c                	push   0xc
c00226b2:	56                   	push   esi
c00226b3:	53                   	push   ebx
c00226b4:	e8 2d f9 ff ff       	call   c0021fe6 <IDE::read(unsigned char, unsigned char)>
c00226b9:	83 c4 0c             	add    esp,0xc
c00226bc:	6a 0c                	push   0xc
c00226be:	56                   	push   esi
c00226bf:	53                   	push   ebx
c00226c0:	e8 21 f9 ff ff       	call   c0021fe6 <IDE::read(unsigned char, unsigned char)>
c00226c5:	83 c4 0c             	add    esp,0xc
c00226c8:	6a 0c                	push   0xc
c00226ca:	56                   	push   esi
c00226cb:	53                   	push   ebx
c00226cc:	e8 15 f9 ff ff       	call   c0021fe6 <IDE::read(unsigned char, unsigned char)>
c00226d1:	83 c4 0c             	add    esp,0xc
c00226d4:	6a 0c                	push   0xc
c00226d6:	56                   	push   esi
c00226d7:	53                   	push   ebx
c00226d8:	e8 09 f9 ff ff       	call   c0021fe6 <IDE::read(unsigned char, unsigned char)>
c00226dd:	68 ec 00 00 00       	push   0xec
c00226e2:	6a 07                	push   0x7
c00226e4:	56                   	push   esi
c00226e5:	53                   	push   ebx
c00226e6:	e8 3b f8 ff ff       	call   c0021f26 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00226eb:	83 c4 1c             	add    esp,0x1c
c00226ee:	6a 0c                	push   0xc
c00226f0:	56                   	push   esi
c00226f1:	53                   	push   ebx
c00226f2:	e8 ef f8 ff ff       	call   c0021fe6 <IDE::read(unsigned char, unsigned char)>
c00226f7:	83 c4 0c             	add    esp,0xc
c00226fa:	6a 0c                	push   0xc
c00226fc:	56                   	push   esi
c00226fd:	53                   	push   ebx
c00226fe:	e8 e3 f8 ff ff       	call   c0021fe6 <IDE::read(unsigned char, unsigned char)>
c0022703:	83 c4 0c             	add    esp,0xc
c0022706:	6a 0c                	push   0xc
c0022708:	56                   	push   esi
c0022709:	53                   	push   ebx
c002270a:	e8 d7 f8 ff ff       	call   c0021fe6 <IDE::read(unsigned char, unsigned char)>
c002270f:	83 c4 0c             	add    esp,0xc
c0022712:	6a 0c                	push   0xc
c0022714:	56                   	push   esi
c0022715:	53                   	push   ebx
c0022716:	e8 cb f8 ff ff       	call   c0021fe6 <IDE::read(unsigned char, unsigned char)>
c002271b:	83 c4 0c             	add    esp,0xc
c002271e:	6a 0c                	push   0xc
c0022720:	56                   	push   esi
c0022721:	53                   	push   ebx
c0022722:	e8 bf f8 ff ff       	call   c0021fe6 <IDE::read(unsigned char, unsigned char)>
c0022727:	83 c4 10             	add    esp,0x10
c002272a:	84 c0                	test   al,al
c002272c:	0f 84 8b 01 00 00    	je     c00228bd <IDE::detect()+0x269>
c0022732:	31 ff                	xor    edi,edi
c0022734:	50                   	push   eax
c0022735:	6a 0c                	push   0xc
c0022737:	56                   	push   esi
c0022738:	53                   	push   ebx
c0022739:	e8 a8 f8 ff ff       	call   c0021fe6 <IDE::read(unsigned char, unsigned char)>
c002273e:	83 c4 10             	add    esp,0x10
c0022741:	a8 01                	test   al,0x1
c0022743:	0f 85 8e 01 00 00    	jne    c00228d7 <IDE::detect()+0x283>
c0022749:	84 c0                	test   al,al
c002274b:	78 04                	js     c0022751 <IDE::detect()+0xfd>
c002274d:	a8 08                	test   al,0x8
c002274f:	75 27                	jne    c0022778 <IDE::detect()+0x124>
c0022751:	47                   	inc    edi
c0022752:	81 ff 17 01 00 00    	cmp    edi,0x117
c0022758:	7e da                	jle    c0022734 <IDE::detect()+0xe0>
c002275a:	50                   	push   eax
c002275b:	50                   	push   eax
c002275c:	6a 00                	push   0x0
c002275e:	68 40 4b 4c 00       	push   0x4c4b40
c0022763:	e8 e2 aa ff ff       	call   c001d24a <nanoSleep(unsigned long long)>
c0022768:	83 c4 10             	add    esp,0x10
c002276b:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0022771:	75 c1                	jne    c0022734 <IDE::detect()+0xe0>
c0022773:	e9 5f 01 00 00       	jmp    c00228d7 <IDE::detect()+0x283>
c0022778:	31 c9                	xor    ecx,ecx
c002277a:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002277e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0022782:	83 ec 0c             	sub    esp,0xc
c0022785:	68 80 00 00 00       	push   0x80
c002278a:	57                   	push   edi
c002278b:	6a 00                	push   0x0
c002278d:	56                   	push   esi
c002278e:	53                   	push   ebx
c002278f:	e8 f4 fd ff ff       	call   c0022588 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0022794:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0022799:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002279d:	89 d1                	mov    ecx,edx
c002279f:	c1 e0 06             	shl    eax,0x6
c00227a2:	01 d8                	add    eax,ebx
c00227a4:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00227ab:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00227b2:	89 f2                	mov    edx,esi
c00227b4:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00227ba:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00227be:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00227c4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00227c8:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00227cf:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00227d7:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00227de:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00227e6:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00227ec:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00227f3:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00227f9:	8d 54 24 58          	lea    edx,[esp+0x58]
c00227fd:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022801:	83 c4 20             	add    esp,0x20
c0022804:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0022807:	83 c0 02             	add    eax,0x2
c002280a:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0022810:	83 c7 02             	add    edi,0x2
c0022813:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0022816:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002281c:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0022820:	75 e2                	jne    c0022804 <IDE::detect()+0x1b0>
c0022822:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022826:	c1 e0 06             	shl    eax,0x6
c0022829:	01 d8                	add    eax,ebx
c002282b:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0022831:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0022838:	66 c1 ea 09          	shr    dx,0x9
c002283c:	83 e2 01             	and    edx,0x1
c002283f:	84 c9                	test   cl,cl
c0022841:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0022847:	75 2f                	jne    c0022878 <IDE::detect()+0x224>
c0022849:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c002284f:	85 c0                	test   eax,eax
c0022851:	74 66                	je     c00228b9 <IDE::detect()+0x265>
c0022853:	50                   	push   eax
c0022854:	55                   	push   ebp
c0022855:	56                   	push   esi
c0022856:	68 9b b0 02 c0       	push   0xc002b09b
c002285b:	e8 f1 fe fe ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0022860:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0022867:	e8 68 cc fe ff       	call   c000f4d4 <malloc>
c002286c:	89 c7                	mov    edi,eax
c002286e:	89 04 24             	mov    DWORD PTR [esp],eax
c0022871:	e8 62 06 00 00       	call   c0022ed8 <ATA::ATA()>
c0022876:	eb 28                	jmp    c00228a0 <IDE::detect()+0x24c>
c0022878:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c002287e:	55                   	push   ebp
c002287f:	56                   	push   esi
c0022880:	68 ca b0 02 c0       	push   0xc002b0ca
c0022885:	e8 c7 fe fe ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c002288a:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0022891:	e8 3e cc fe ff       	call   c000f4d4 <malloc>
c0022896:	89 c7                	mov    edi,eax
c0022898:	89 04 24             	mov    DWORD PTR [esp],eax
c002289b:	e8 68 0c 00 00       	call   c0023508 <ATAPI::ATAPI()>
c00228a0:	5a                   	pop    edx
c00228a1:	59                   	pop    ecx
c00228a2:	57                   	push   edi
c00228a3:	53                   	push   ebx
c00228a4:	e8 97 12 ff ff       	call   c0013b40 <Device::addChild(Device*)>
c00228a9:	8b 07                	mov    eax,DWORD PTR [edi]
c00228ab:	53                   	push   ebx
c00228ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00228b0:	6a 00                	push   0x0
c00228b2:	57                   	push   edi
c00228b3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00228b6:	83 c4 20             	add    esp,0x20
c00228b9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00228bd:	4d                   	dec    ebp
c00228be:	74 0a                	je     c00228ca <IDE::detect()+0x276>
c00228c0:	bd 01 00 00 00       	mov    ebp,0x1
c00228c5:	e9 bb fd ff ff       	jmp    c0022685 <IDE::detect()+0x31>
c00228ca:	4e                   	dec    esi
c00228cb:	74 63                	je     c0022930 <IDE::detect()+0x2dc>
c00228cd:	be 01 00 00 00       	mov    esi,0x1
c00228d2:	e9 ac fd ff ff       	jmp    c0022683 <IDE::detect()+0x2f>
c00228d7:	50                   	push   eax
c00228d8:	6a 04                	push   0x4
c00228da:	56                   	push   esi
c00228db:	53                   	push   ebx
c00228dc:	e8 05 f7 ff ff       	call   c0021fe6 <IDE::read(unsigned char, unsigned char)>
c00228e1:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00228e5:	83 c4 0c             	add    esp,0xc
c00228e8:	6a 05                	push   0x5
c00228ea:	56                   	push   esi
c00228eb:	53                   	push   ebx
c00228ec:	e8 f5 f6 ff ff       	call   c0021fe6 <IDE::read(unsigned char, unsigned char)>
c00228f1:	83 c4 10             	add    esp,0x10
c00228f4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00228f8:	80 fa 14             	cmp    dl,0x14
c00228fb:	75 04                	jne    c0022901 <IDE::detect()+0x2ad>
c00228fd:	3c eb                	cmp    al,0xeb
c00228ff:	eb 07                	jmp    c0022908 <IDE::detect()+0x2b4>
c0022901:	3c 96                	cmp    al,0x96
c0022903:	75 b8                	jne    c00228bd <IDE::detect()+0x269>
c0022905:	80 fa 69             	cmp    dl,0x69
c0022908:	75 b3                	jne    c00228bd <IDE::detect()+0x269>
c002290a:	68 a1 00 00 00       	push   0xa1
c002290f:	6a 07                	push   0x7
c0022911:	56                   	push   esi
c0022912:	53                   	push   ebx
c0022913:	e8 0e f6 ff ff       	call   c0021f26 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022918:	5f                   	pop    edi
c0022919:	58                   	pop    eax
c002291a:	6a 00                	push   0x0
c002291c:	68 40 42 0f 00       	push   0xf4240
c0022921:	e8 24 a9 ff ff       	call   c001d24a <nanoSleep(unsigned long long)>
c0022926:	83 c4 10             	add    esp,0x10
c0022929:	b1 01                	mov    cl,0x1
c002292b:	e9 4a fe ff ff       	jmp    c002277a <IDE::detect()+0x126>
c0022930:	81 c4 1c 02 00 00    	add    esp,0x21c
c0022936:	5b                   	pop    ebx
c0022937:	5e                   	pop    esi
c0022938:	5f                   	pop    edi
c0022939:	5d                   	pop    ebp
c002293a:	c3                   	ret    
c002293b:	90                   	nop

c002293c <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c002293c:	55                   	push   ebp
c002293d:	57                   	push   edi
c002293e:	56                   	push   esi
c002293f:	53                   	push   ebx
c0022940:	83 ec 1c             	sub    esp,0x1c
c0022943:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022947:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002294b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002294f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0022953:	88 c3                	mov    bl,al
c0022955:	84 c0                	test   al,al
c0022957:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002295b:	0f 84 67 01 00 00    	je     c0022ac8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0022961:	83 ec 0c             	sub    esp,0xc
c0022964:	68 fb b0 02 c0       	push   0xc002b0fb
c0022969:	e8 e3 fd fe ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c002296e:	83 c4 10             	add    esp,0x10
c0022971:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022975:	3c 01                	cmp    al,0x1
c0022977:	75 17                	jne    c0022990 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0022979:	83 ec 0c             	sub    esp,0xc
c002297c:	b3 13                	mov    bl,0x13
c002297e:	68 07 b1 02 c0       	push   0xc002b107
c0022983:	e8 c9 fd fe ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0022988:	83 c4 10             	add    esp,0x10
c002298b:	e9 25 01 00 00       	jmp    c0022ab5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022990:	3c 02                	cmp    al,0x2
c0022992:	0f 85 ef 00 00 00    	jne    c0022a87 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0022998:	d1 e6                	shl    esi,1
c002299a:	09 ee                	or     esi,ebp
c002299c:	52                   	push   edx
c002299d:	89 f0                	mov    eax,esi
c002299f:	6a 01                	push   0x1
c00229a1:	0f b6 f0             	movzx  esi,al
c00229a4:	c1 e6 06             	shl    esi,0x6
c00229a7:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c00229af:	50                   	push   eax
c00229b0:	57                   	push   edi
c00229b1:	e8 30 f6 ff ff       	call   c0021fe6 <IDE::read(unsigned char, unsigned char)>
c00229b6:	83 c4 10             	add    esp,0x10
c00229b9:	89 c6                	mov    esi,eax
c00229bb:	a8 01                	test   al,0x1
c00229bd:	74 12                	je     c00229d1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c00229bf:	83 ec 0c             	sub    esp,0xc
c00229c2:	b3 07                	mov    bl,0x7
c00229c4:	68 1c b1 02 c0       	push   0xc002b11c
c00229c9:	e8 83 fd fe ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c00229ce:	83 c4 10             	add    esp,0x10
c00229d1:	f7 c6 02 00 00 00    	test   esi,0x2
c00229d7:	74 12                	je     c00229eb <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c00229d9:	83 ec 0c             	sub    esp,0xc
c00229dc:	b3 03                	mov    bl,0x3
c00229de:	68 3a b1 02 c0       	push   0xc002b13a
c00229e3:	e8 69 fd fe ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c00229e8:	83 c4 10             	add    esp,0x10
c00229eb:	f7 c6 04 00 00 00    	test   esi,0x4
c00229f1:	74 12                	je     c0022a05 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c00229f3:	83 ec 0c             	sub    esp,0xc
c00229f6:	b3 14                	mov    bl,0x14
c00229f8:	68 5a b1 02 c0       	push   0xc002b15a
c00229fd:	e8 4f fd fe ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0022a02:	83 c4 10             	add    esp,0x10
c0022a05:	f7 c6 08 00 00 00    	test   esi,0x8
c0022a0b:	74 12                	je     c0022a1f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0022a0d:	83 ec 0c             	sub    esp,0xc
c0022a10:	b3 03                	mov    bl,0x3
c0022a12:	68 3a b1 02 c0       	push   0xc002b13a
c0022a17:	e8 35 fd fe ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0022a1c:	83 c4 10             	add    esp,0x10
c0022a1f:	f7 c6 10 00 00 00    	test   esi,0x10
c0022a25:	74 12                	je     c0022a39 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0022a27:	83 ec 0c             	sub    esp,0xc
c0022a2a:	b3 15                	mov    bl,0x15
c0022a2c:	68 72 b1 02 c0       	push   0xc002b172
c0022a31:	e8 1b fd fe ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0022a36:	83 c4 10             	add    esp,0x10
c0022a39:	f7 c6 20 00 00 00    	test   esi,0x20
c0022a3f:	74 12                	je     c0022a53 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0022a41:	83 ec 0c             	sub    esp,0xc
c0022a44:	b3 03                	mov    bl,0x3
c0022a46:	68 3a b1 02 c0       	push   0xc002b13a
c0022a4b:	e8 01 fd fe ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0022a50:	83 c4 10             	add    esp,0x10
c0022a53:	f7 c6 40 00 00 00    	test   esi,0x40
c0022a59:	74 12                	je     c0022a6d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0022a5b:	83 ec 0c             	sub    esp,0xc
c0022a5e:	b3 16                	mov    bl,0x16
c0022a60:	68 8c b1 02 c0       	push   0xc002b18c
c0022a65:	e8 e7 fc fe ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0022a6a:	83 c4 10             	add    esp,0x10
c0022a6d:	89 f0                	mov    eax,esi
c0022a6f:	84 c0                	test   al,al
c0022a71:	79 42                	jns    c0022ab5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022a73:	83 ec 0c             	sub    esp,0xc
c0022a76:	b3 0d                	mov    bl,0xd
c0022a78:	68 ad b1 02 c0       	push   0xc002b1ad
c0022a7d:	e8 cf fc fe ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0022a82:	83 c4 10             	add    esp,0x10
c0022a85:	eb 2e                	jmp    c0022ab5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022a87:	3c 03                	cmp    al,0x3
c0022a89:	75 14                	jne    c0022a9f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0022a8b:	83 ec 0c             	sub    esp,0xc
c0022a8e:	b3 17                	mov    bl,0x17
c0022a90:	68 c1 b1 02 c0       	push   0xc002b1c1
c0022a95:	e8 b7 fc fe ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0022a9a:	83 c4 10             	add    esp,0x10
c0022a9d:	eb 16                	jmp    c0022ab5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022a9f:	3c 04                	cmp    al,0x4
c0022aa1:	75 12                	jne    c0022ab5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022aa3:	83 ec 0c             	sub    esp,0xc
c0022aa6:	b3 08                	mov    bl,0x8
c0022aa8:	68 d7 b1 02 c0       	push   0xc002b1d7
c0022aad:	e8 9f fc fe ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0022ab2:	83 c4 10             	add    esp,0x10
c0022ab5:	50                   	push   eax
c0022ab6:	50                   	push   eax
c0022ab7:	0f b6 c3             	movzx  eax,bl
c0022aba:	50                   	push   eax
c0022abb:	68 ef b1 02 c0       	push   0xc002b1ef
c0022ac0:	e8 8c fc fe ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0022ac5:	83 c4 10             	add    esp,0x10
c0022ac8:	83 c4 1c             	add    esp,0x1c
c0022acb:	88 d8                	mov    al,bl
c0022acd:	5b                   	pop    ebx
c0022ace:	5e                   	pop    esi
c0022acf:	5f                   	pop    edi
c0022ad0:	5d                   	pop    ebp
c0022ad1:	c3                   	ret    

c0022ad2 <IDE::polling(unsigned char, unsigned int)>:
c0022ad2:	57                   	push   edi
c0022ad3:	56                   	push   esi
c0022ad4:	53                   	push   ebx
c0022ad5:	bb 04 00 00 00       	mov    ebx,0x4
c0022ada:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0022ade:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022ae3:	52                   	push   edx
c0022ae4:	6a 0c                	push   0xc
c0022ae6:	56                   	push   esi
c0022ae7:	57                   	push   edi
c0022ae8:	e8 f9 f4 ff ff       	call   c0021fe6 <IDE::read(unsigned char, unsigned char)>
c0022aed:	83 c4 10             	add    esp,0x10
c0022af0:	4b                   	dec    ebx
c0022af1:	75 f0                	jne    c0022ae3 <IDE::polling(unsigned char, unsigned int)+0x11>
c0022af3:	bb a0 86 01 00       	mov    ebx,0x186a0
c0022af8:	50                   	push   eax
c0022af9:	6a 0c                	push   0xc
c0022afb:	56                   	push   esi
c0022afc:	57                   	push   edi
c0022afd:	e8 e4 f4 ff ff       	call   c0021fe6 <IDE::read(unsigned char, unsigned char)>
c0022b02:	83 c4 10             	add    esp,0x10
c0022b05:	a8 01                	test   al,0x1
c0022b07:	74 12                	je     c0022b1b <IDE::polling(unsigned char, unsigned int)+0x49>
c0022b09:	83 ec 0c             	sub    esp,0xc
c0022b0c:	68 09 b2 02 c0       	push   0xc002b209
c0022b11:	e8 3b fc fe ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0022b16:	83 c4 10             	add    esp,0x10
c0022b19:	eb 17                	jmp    c0022b32 <IDE::polling(unsigned char, unsigned int)+0x60>
c0022b1b:	a8 20                	test   al,0x20
c0022b1d:	75 0f                	jne    c0022b2e <IDE::polling(unsigned char, unsigned int)+0x5c>
c0022b1f:	4b                   	dec    ebx
c0022b20:	74 10                	je     c0022b32 <IDE::polling(unsigned char, unsigned int)+0x60>
c0022b22:	84 c0                	test   al,al
c0022b24:	78 d2                	js     c0022af8 <IDE::polling(unsigned char, unsigned int)+0x26>
c0022b26:	a8 08                	test   al,0x8
c0022b28:	74 ce                	je     c0022af8 <IDE::polling(unsigned char, unsigned int)+0x26>
c0022b2a:	31 c0                	xor    eax,eax
c0022b2c:	eb 06                	jmp    c0022b34 <IDE::polling(unsigned char, unsigned int)+0x62>
c0022b2e:	b0 01                	mov    al,0x1
c0022b30:	eb 02                	jmp    c0022b34 <IDE::polling(unsigned char, unsigned int)+0x62>
c0022b32:	b0 02                	mov    al,0x2
c0022b34:	5b                   	pop    ebx
c0022b35:	5e                   	pop    esi
c0022b36:	5f                   	pop    edi
c0022b37:	c3                   	ret    

c0022b38 <SATABus::close(int, int, void*)>:
c0022b38:	31 c0                	xor    eax,eax
c0022b3a:	c3                   	ret    
c0022b3b:	90                   	nop

c0022b3c <SATABus::detect()>:
c0022b3c:	c3                   	ret    
c0022b3d:	90                   	nop

c0022b3e <SATABus::SATABus()>:
c0022b3e:	83 ec 0c             	sub    esp,0xc
c0022b41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b45:	83 ec 08             	sub    esp,0x8
c0022b48:	68 4c b2 02 c0       	push   0xc002b24c
c0022b4d:	50                   	push   eax
c0022b4e:	e8 79 13 ff ff       	call   c0013ecc <HardDiskController::HardDiskController(char const*)>
c0022b53:	83 c4 10             	add    esp,0x10
c0022b56:	ba 08 b3 02 c0       	mov    edx,0xc002b308
c0022b5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b5f:	89 10                	mov    DWORD PTR [eax],edx
c0022b61:	83 ec 0c             	sub    esp,0xc
c0022b64:	6a 50                	push   0x50
c0022b66:	e8 db cf fe ff       	call   c000fb46 <Phys::allocateContiguousPages(int)>
c0022b6b:	83 c4 10             	add    esp,0x10
c0022b6e:	89 c2                	mov    edx,eax
c0022b70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b74:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0022b7a:	83 ec 0c             	sub    esp,0xc
c0022b7d:	6a 50                	push   0x50
c0022b7f:	e8 dd eb fe ff       	call   c0011761 <Virt::allocateKernelVirtualPages(int)>
c0022b84:	83 c4 10             	add    esp,0x10
c0022b87:	89 c2                	mov    edx,eax
c0022b89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b8d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022b93:	e8 59 ed fe ff       	call   c00118f1 <Virt::getAKernelVAS()>
c0022b98:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022b9c:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0022ba2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022ba6:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0022bac:	83 ec 0c             	sub    esp,0xc
c0022baf:	6a 03                	push   0x3
c0022bb1:	6a 50                	push   0x50
c0022bb3:	51                   	push   ecx
c0022bb4:	52                   	push   edx
c0022bb5:	50                   	push   eax
c0022bb6:	e8 65 f5 fe ff       	call   c0012120 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0022bbb:	83 c4 20             	add    esp,0x20
c0022bbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bc2:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0022bc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bcc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022bd2:	83 ec 04             	sub    esp,0x4
c0022bd5:	52                   	push   edx
c0022bd6:	50                   	push   eax
c0022bd7:	68 70 b2 02 c0       	push   0xc002b270
c0022bdc:	e8 70 fb fe ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0022be1:	83 c4 10             	add    esp,0x10
c0022be4:	90                   	nop
c0022be5:	83 c4 0c             	add    esp,0xc
c0022be8:	c3                   	ret    
c0022be9:	90                   	nop

c0022bea <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0022bea:	83 ec 0c             	sub    esp,0xc
c0022bed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022bf1:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0022bf4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0022bf7:	09 c2                	or     edx,eax
c0022bf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bfd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0022c03:	8b 08                	mov    ecx,DWORD PTR [eax]
c0022c05:	31 c0                	xor    eax,eax
c0022c07:	c1 e9 08             	shr    ecx,0x8
c0022c0a:	83 e1 0f             	and    ecx,0xf
c0022c0d:	39 c8                	cmp    eax,ecx
c0022c0f:	74 0a                	je     c0022c1b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0022c11:	f6 c2 01             	test   dl,0x1
c0022c14:	74 18                	je     c0022c2e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0022c16:	d1 ea                	shr    edx,1
c0022c18:	40                   	inc    eax
c0022c19:	eb f2                	jmp    c0022c0d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0022c1b:	83 ec 0c             	sub    esp,0xc
c0022c1e:	68 94 b2 02 c0       	push   0xc002b294
c0022c23:	e8 43 6c ff ff       	call   c001986b <Krnl::panic(char const*)>
c0022c28:	83 c4 10             	add    esp,0x10
c0022c2b:	83 c8 ff             	or     eax,0xffffffff
c0022c2e:	83 c4 0c             	add    esp,0xc
c0022c31:	c3                   	ret    

c0022c32 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0022c32:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022c36:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0022c39:	89 c2                	mov    edx,eax
c0022c3b:	c1 ea 08             	shr    edx,0x8
c0022c3e:	83 e2 0f             	and    edx,0xf
c0022c41:	fe ca                	dec    dl
c0022c43:	75 31                	jne    c0022c76 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0022c45:	83 e0 0f             	and    eax,0xf
c0022c48:	3c 03                	cmp    al,0x3
c0022c4a:	75 2a                	jne    c0022c76 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0022c4c:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0022c4f:	b8 02 00 00 00       	mov    eax,0x2
c0022c54:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0022c5a:	74 1c                	je     c0022c78 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0022c5c:	b8 04 00 00 00       	mov    eax,0x4
c0022c61:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0022c67:	74 0f                	je     c0022c78 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0022c69:	31 c0                	xor    eax,eax
c0022c6b:	83 fa 03             	cmp    edx,0x3
c0022c6e:	0f 94 c0             	sete   al
c0022c71:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0022c75:	c3                   	ret    
c0022c76:	31 c0                	xor    eax,eax
c0022c78:	c3                   	ret    
c0022c79:	90                   	nop

c0022c7a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0022c7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022c7e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022c81:	0f ba e2 0f          	bt     edx,0xf
c0022c85:	72 f7                	jb     c0022c7e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0022c87:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022c8a:	83 ca 10             	or     edx,0x10
c0022c8d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022c90:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022c93:	83 ca 01             	or     edx,0x1
c0022c96:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022c99:	c3                   	ret    

c0022c9a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0022c9a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022c9e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022ca1:	83 e2 fe             	and    edx,0xfffffffe
c0022ca4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022ca7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022caa:	83 e2 ef             	and    edx,0xffffffef
c0022cad:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022cb0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022cb3:	0f ba e2 0e          	bt     edx,0xe
c0022cb7:	72 f7                	jb     c0022cb0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0022cb9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022cbc:	0f ba e2 0f          	bt     edx,0xf
c0022cc0:	72 ee                	jb     c0022cb0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0022cc2:	c3                   	ret    
c0022cc3:	90                   	nop

c0022cc4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0022cc4:	55                   	push   ebp
c0022cc5:	57                   	push   edi
c0022cc6:	56                   	push   esi
c0022cc7:	53                   	push   ebx
c0022cc8:	83 ec 1c             	sub    esp,0x1c
c0022ccb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022ccf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022cd3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022cd7:	53                   	push   ebx
c0022cd8:	89 fd                	mov    ebp,edi
c0022cda:	56                   	push   esi
c0022cdb:	c1 e5 0a             	shl    ebp,0xa
c0022cde:	e8 b7 ff ff ff       	call   c0022c9a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0022ce3:	83 ec 0c             	sub    esp,0xc
c0022ce6:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0022cec:	01 e8                	add    eax,ebp
c0022cee:	89 03                	mov    DWORD PTR [ebx],eax
c0022cf0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022cf2:	68 00 04 00 00       	push   0x400
c0022cf7:	6a 00                	push   0x0
c0022cf9:	50                   	push   eax
c0022cfa:	e8 8c d9 fd ff       	call   c000068b <memset>
c0022cff:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0022d05:	89 fa                	mov    edx,edi
c0022d07:	01 e8                	add    eax,ebp
c0022d09:	c1 e7 0d             	shl    edi,0xd
c0022d0c:	89 03                	mov    DWORD PTR [ebx],eax
c0022d0e:	c1 e2 08             	shl    edx,0x8
c0022d11:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022d18:	81 c2 00 80 00 00    	add    edx,0x8000
c0022d1e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0022d22:	89 d0                	mov    eax,edx
c0022d24:	83 c4 1c             	add    esp,0x1c
c0022d27:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0022d2d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022d30:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0022d33:	68 00 01 00 00       	push   0x100
c0022d38:	6a 00                	push   0x0
c0022d3a:	50                   	push   eax
c0022d3b:	e8 4b d9 fd ff       	call   c000068b <memset>
c0022d40:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022d44:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0022d4a:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0022d50:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022d54:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0022d57:	83 c4 10             	add    esp,0x10
c0022d5a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022d61:	31 ff                	xor    edi,edi
c0022d63:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0022d69:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0022d6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022d73:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0022d79:	83 c5 20             	add    ebp,0x20
c0022d7c:	01 f8                	add    eax,edi
c0022d7e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0022d81:	52                   	push   edx
c0022d82:	68 00 01 00 00       	push   0x100
c0022d87:	6a 00                	push   0x0
c0022d89:	50                   	push   eax
c0022d8a:	e8 fc d8 fd ff       	call   c000068b <memset>
c0022d8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022d93:	83 c4 10             	add    esp,0x10
c0022d96:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0022d9c:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0022da3:	01 f8                	add    eax,edi
c0022da5:	81 c7 00 01 00 00    	add    edi,0x100
c0022dab:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0022dae:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0022db4:	75 b3                	jne    c0022d69 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0022db6:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0022dba:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0022dbe:	83 c4 1c             	add    esp,0x1c
c0022dc1:	5b                   	pop    ebx
c0022dc2:	5e                   	pop    esi
c0022dc3:	5f                   	pop    edi
c0022dc4:	5d                   	pop    ebp
c0022dc5:	e9 b0 fe ff ff       	jmp    c0022c7a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0022dca <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0022dca:	55                   	push   ebp
c0022dcb:	57                   	push   edi
c0022dcc:	56                   	push   esi
c0022dcd:	53                   	push   ebx
c0022dce:	31 db                	xor    ebx,ebx
c0022dd0:	83 ec 0c             	sub    esp,0xc
c0022dd3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022dd7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0022ddb:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0022dde:	f7 c7 01 00 00 00    	test   edi,0x1
c0022de4:	0f 84 94 00 00 00    	je     c0022e7e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb4>
c0022dea:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022dee:	89 d8                	mov    eax,ebx
c0022df0:	c1 e0 07             	shl    eax,0x7
c0022df3:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0022dfa:	55                   	push   ebp
c0022dfb:	56                   	push   esi
c0022dfc:	e8 31 fe ff ff       	call   c0022c32 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0022e01:	59                   	pop    ecx
c0022e02:	83 f8 01             	cmp    eax,0x1
c0022e05:	5a                   	pop    edx
c0022e06:	75 47                	jne    c0022e4f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x85>
c0022e08:	51                   	push   ecx
c0022e09:	51                   	push   ecx
c0022e0a:	53                   	push   ebx
c0022e0b:	68 b9 b2 02 c0       	push   0xc002b2b9
c0022e10:	e8 3c f9 fe ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0022e15:	83 c4 0c             	add    esp,0xc
c0022e18:	53                   	push   ebx
c0022e19:	55                   	push   ebp
c0022e1a:	56                   	push   esi
c0022e1b:	e8 a4 fe ff ff       	call   c0022cc4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0022e20:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0022e27:	e8 a8 c6 fe ff       	call   c000f4d4 <malloc>
c0022e2c:	89 04 24             	mov    DWORD PTR [esp],eax
c0022e2f:	89 c5                	mov    ebp,eax
c0022e31:	e8 de 0c 00 00       	call   c0023b14 <SATA::SATA()>
c0022e36:	58                   	pop    eax
c0022e37:	5a                   	pop    edx
c0022e38:	55                   	push   ebp
c0022e39:	56                   	push   esi
c0022e3a:	e8 01 0d ff ff       	call   c0013b40 <Device::addChild(Device*)>
c0022e3f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022e42:	56                   	push   esi
c0022e43:	6a 00                	push   0x0
c0022e45:	53                   	push   ebx
c0022e46:	55                   	push   ebp
c0022e47:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022e4a:	83 c4 20             	add    esp,0x20
c0022e4d:	eb 2f                	jmp    c0022e7e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb4>
c0022e4f:	83 f8 04             	cmp    eax,0x4
c0022e52:	75 1a                	jne    c0022e6e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa4>
c0022e54:	52                   	push   edx
c0022e55:	52                   	push   edx
c0022e56:	53                   	push   ebx
c0022e57:	68 d0 b2 02 c0       	push   0xc002b2d0
c0022e5c:	e8 f0 f8 fe ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0022e61:	83 c4 0c             	add    esp,0xc
c0022e64:	53                   	push   ebx
c0022e65:	55                   	push   ebp
c0022e66:	56                   	push   esi
c0022e67:	e8 58 fe ff ff       	call   c0022cc4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0022e6c:	eb 0d                	jmp    c0022e7b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb1>
c0022e6e:	50                   	push   eax
c0022e6f:	50                   	push   eax
c0022e70:	53                   	push   ebx
c0022e71:	68 e9 b2 02 c0       	push   0xc002b2e9
c0022e76:	e8 d6 f8 fe ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0022e7b:	83 c4 10             	add    esp,0x10
c0022e7e:	d1 ef                	shr    edi,1
c0022e80:	43                   	inc    ebx
c0022e81:	83 fb 20             	cmp    ebx,0x20
c0022e84:	0f 85 54 ff ff ff    	jne    c0022dde <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0022e8a:	83 c4 0c             	add    esp,0xc
c0022e8d:	5b                   	pop    ebx
c0022e8e:	5e                   	pop    esi
c0022e8f:	5f                   	pop    edi
c0022e90:	5d                   	pop    ebp
c0022e91:	c3                   	ret    

c0022e92 <SATABus::open(int, int, void*)>:
c0022e92:	83 ec 14             	sub    esp,0x14
c0022e95:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022e99:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0022e9f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0022ea5:	52                   	push   edx
c0022ea6:	50                   	push   eax
c0022ea7:	e8 1e ff ff ff       	call   c0022dca <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0022eac:	31 c0                	xor    eax,eax
c0022eae:	83 c4 1c             	add    esp,0x1c
c0022eb1:	c3                   	ret    

c0022eb2 <ATA::close(int, int, void*)>:
c0022eb2:	83 ec 0c             	sub    esp,0xc
c0022eb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022eb9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0022ebf:	85 c0                	test   eax,eax
c0022ec1:	74 0c                	je     c0022ecf <ATA::close(int, int, void*)+0x1d>
c0022ec3:	83 ec 0c             	sub    esp,0xc
c0022ec6:	8b 10                	mov    edx,DWORD PTR [eax]
c0022ec8:	50                   	push   eax
c0022ec9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0022ecc:	83 c4 10             	add    esp,0x10
c0022ecf:	31 c0                	xor    eax,eax
c0022ed1:	83 c4 0c             	add    esp,0xc
c0022ed4:	c3                   	ret    
c0022ed5:	90                   	nop

c0022ed6 <ATA::powerSaving(PowerSavingLevel)>:
c0022ed6:	c3                   	ret    
c0022ed7:	90                   	nop

c0022ed8 <ATA::ATA()>:
c0022ed8:	83 ec 0c             	sub    esp,0xc
c0022edb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022edf:	83 ec 04             	sub    esp,0x4
c0022ee2:	68 00 02 00 00       	push   0x200
c0022ee7:	68 fc b3 02 c0       	push   0xc002b3fc
c0022eec:	50                   	push   eax
c0022eed:	e8 5e 10 ff ff       	call   c0013f50 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0022ef2:	83 c4 10             	add    esp,0x10
c0022ef5:	ba 48 b3 02 c0       	mov    edx,0xc002b348
c0022efa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022efe:	89 10                	mov    DWORD PTR [eax],edx
c0022f00:	90                   	nop
c0022f01:	83 c4 0c             	add    esp,0xc
c0022f04:	c3                   	ret    
c0022f05:	90                   	nop

c0022f06 <ATA::flush(bool)>:
c0022f06:	53                   	push   ebx
c0022f07:	83 ec 08             	sub    esp,0x8
c0022f0a:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0022f0f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022f13:	19 c0                	sbb    eax,eax
c0022f15:	83 e0 fd             	and    eax,0xfffffffd
c0022f18:	05 ea 00 00 00       	add    eax,0xea
c0022f1d:	50                   	push   eax
c0022f1e:	6a 07                	push   0x7
c0022f20:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022f27:	50                   	push   eax
c0022f28:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022f2e:	e8 f3 ef ff ff       	call   c0021f26 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f33:	83 c4 0c             	add    esp,0xc
c0022f36:	6a 00                	push   0x0
c0022f38:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022f3f:	50                   	push   eax
c0022f40:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022f46:	e8 87 fb ff ff       	call   c0022ad2 <IDE::polling(unsigned char, unsigned int)>
c0022f4b:	83 c4 18             	add    esp,0x18
c0022f4e:	5b                   	pop    ebx
c0022f4f:	c3                   	ret    

c0022f50 <ATA::readyForCommand()>:
c0022f50:	56                   	push   esi
c0022f51:	53                   	push   ebx
c0022f52:	31 db                	xor    ebx,ebx
c0022f54:	50                   	push   eax
c0022f55:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022f59:	50                   	push   eax
c0022f5a:	6a 0c                	push   0xc
c0022f5c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0022f63:	50                   	push   eax
c0022f64:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0022f6a:	e8 77 f0 ff ff       	call   c0021fe6 <IDE::read(unsigned char, unsigned char)>
c0022f6f:	83 c4 10             	add    esp,0x10
c0022f72:	a8 88                	test   al,0x88
c0022f74:	74 23                	je     c0022f99 <ATA::readyForCommand()+0x49>
c0022f76:	43                   	inc    ebx
c0022f77:	83 fb 63             	cmp    ebx,0x63
c0022f7a:	7e dd                	jle    c0022f59 <ATA::readyForCommand()+0x9>
c0022f7c:	51                   	push   ecx
c0022f7d:	51                   	push   ecx
c0022f7e:	6a 00                	push   0x0
c0022f80:	68 40 42 0f 00       	push   0xf4240
c0022f85:	e8 c0 a2 ff ff       	call   c001d24a <nanoSleep(unsigned long long)>
c0022f8a:	83 c4 10             	add    esp,0x10
c0022f8d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0022f93:	75 c4                	jne    c0022f59 <ATA::readyForCommand()+0x9>
c0022f95:	31 c0                	xor    eax,eax
c0022f97:	eb 02                	jmp    c0022f9b <ATA::readyForCommand()+0x4b>
c0022f99:	b0 01                	mov    al,0x1
c0022f9b:	5a                   	pop    edx
c0022f9c:	5b                   	pop    ebx
c0022f9d:	5e                   	pop    esi
c0022f9e:	c3                   	ret    
c0022f9f:	90                   	nop

c0022fa0 <ATA::access(unsigned long long, int, void*, bool)>:
c0022fa0:	55                   	push   ebp
c0022fa1:	57                   	push   edi
c0022fa2:	56                   	push   esi
c0022fa3:	53                   	push   ebx
c0022fa4:	83 ec 2c             	sub    esp,0x2c
c0022fa7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0022fab:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0022faf:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0022fb3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022fb7:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0022fbb:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0022fbf:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0022fc3:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0022fc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022fcd:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0022fd3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022fd7:	c1 e0 06             	shl    eax,0x6
c0022fda:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0022fe2:	74 5d                	je     c0023041 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0022fe4:	89 fa                	mov    edx,edi
c0022fe6:	89 f0                	mov    eax,esi
c0022fe8:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0022fec:	c1 ea 1c             	shr    edx,0x1c
c0022fef:	89 d1                	mov    ecx,edx
c0022ff1:	09 c1                	or     ecx,eax
c0022ff3:	74 25                	je     c002301a <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0022ff5:	31 ed                	xor    ebp,ebp
c0022ff7:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0022ffe:	89 fa                	mov    edx,edi
c0023000:	89 f0                	mov    eax,esi
c0023002:	0f ad d0             	shrd   eax,edx,cl
c0023005:	d3 ea                	shr    edx,cl
c0023007:	f6 c1 20             	test   cl,0x20
c002300a:	74 02                	je     c002300e <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c002300c:	89 d0                	mov    eax,edx
c002300e:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0023012:	45                   	inc    ebp
c0023013:	83 fd 06             	cmp    ebp,0x6
c0023016:	75 df                	jne    c0022ff7 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0023018:	eb 76                	jmp    c0023090 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c002301a:	89 f0                	mov    eax,esi
c002301c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0023021:	89 fa                	mov    edx,edi
c0023023:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002302a:	0f ac d0 10          	shrd   eax,edx,0x10
c002302e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023033:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0023037:	c1 ee 18             	shr    esi,0x18
c002303a:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c002303f:	eb 56                	jmp    c0023097 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023041:	6a 00                	push   0x0
c0023043:	6a 3f                	push   0x3f
c0023045:	57                   	push   edi
c0023046:	56                   	push   esi
c0023047:	e8 30 24 00 00       	call   c002547c <__umoddi3>
c002304c:	83 c4 10             	add    esp,0x10
c002304f:	40                   	inc    eax
c0023050:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0023054:	6a 00                	push   0x0
c0023056:	68 f0 03 00 00       	push   0x3f0
c002305b:	57                   	push   edi
c002305c:	56                   	push   esi
c002305d:	e8 1a 23 00 00       	call   c002537c <__udivdi3>
c0023062:	83 c4 10             	add    esp,0x10
c0023065:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c002306a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023071:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023076:	6a 00                	push   0x0
c0023078:	6a 3f                	push   0x3f
c002307a:	57                   	push   edi
c002307b:	56                   	push   esi
c002307c:	e8 fb 22 00 00       	call   c002537c <__udivdi3>
c0023081:	83 c4 10             	add    esp,0x10
c0023084:	89 c6                	mov    esi,eax
c0023086:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c002308b:	83 e6 0f             	and    esi,0xf
c002308e:	eb 07                	jmp    c0023097 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023090:	31 f6                	xor    esi,esi
c0023092:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0023097:	bf 01 00 00 00       	mov    edi,0x1
c002309c:	50                   	push   eax
c002309d:	6a 00                	push   0x0
c002309f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00230a6:	50                   	push   eax
c00230a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00230ab:	e8 82 f0 ff ff       	call   c0022132 <IDE::enableIRQs(unsigned char, bool)>
c00230b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00230b3:	e8 98 fe ff ff       	call   c0022f50 <ATA::readyForCommand()>
c00230b8:	83 c4 10             	add    esp,0x10
c00230bb:	84 c0                	test   al,al
c00230bd:	0f 84 50 02 00 00    	je     c0023313 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c00230c3:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00230c9:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00230cf:	c1 e0 04             	shl    eax,0x4
c00230d2:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00230d9:	09 c6                	or     esi,eax
c00230db:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00230e0:	75 05                	jne    c00230e7 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c00230e2:	83 ce a0             	or     esi,0xffffffa0
c00230e5:	eb 03                	jmp    c00230ea <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c00230e7:	83 ce e0             	or     esi,0xffffffe0
c00230ea:	89 f0                	mov    eax,esi
c00230ec:	0f b6 f0             	movzx  esi,al
c00230ef:	56                   	push   esi
c00230f0:	6a 06                	push   0x6
c00230f2:	51                   	push   ecx
c00230f3:	52                   	push   edx
c00230f4:	e8 2d ee ff ff       	call   c0021f26 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230f9:	83 c4 10             	add    esp,0x10
c00230fc:	6a 00                	push   0x0
c00230fe:	6a 01                	push   0x1
c0023100:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023107:	50                   	push   eax
c0023108:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002310e:	e8 13 ee ff ff       	call   c0021f26 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023113:	83 c4 10             	add    esp,0x10
c0023116:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002311b:	75 6e                	jne    c002318b <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c002311d:	6a 00                	push   0x0
c002311f:	6a 08                	push   0x8
c0023121:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023128:	50                   	push   eax
c0023129:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002312f:	e8 f2 ed ff ff       	call   c0021f26 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023134:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0023139:	50                   	push   eax
c002313a:	6a 09                	push   0x9
c002313c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023143:	50                   	push   eax
c0023144:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002314a:	e8 d7 ed ff ff       	call   c0021f26 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002314f:	83 c4 20             	add    esp,0x20
c0023152:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0023157:	50                   	push   eax
c0023158:	6a 0a                	push   0xa
c002315a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023161:	50                   	push   eax
c0023162:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023168:	e8 b9 ed ff ff       	call   c0021f26 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002316d:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0023172:	50                   	push   eax
c0023173:	6a 0b                	push   0xb
c0023175:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002317c:	50                   	push   eax
c002317d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023183:	e8 9e ed ff ff       	call   c0021f26 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023188:	83 c4 20             	add    esp,0x20
c002318b:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0023190:	50                   	push   eax
c0023191:	6a 02                	push   0x2
c0023193:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002319a:	50                   	push   eax
c002319b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00231a1:	e8 80 ed ff ff       	call   c0021f26 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231a6:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00231ab:	50                   	push   eax
c00231ac:	6a 03                	push   0x3
c00231ae:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00231b5:	50                   	push   eax
c00231b6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00231bc:	e8 65 ed ff ff       	call   c0021f26 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231c1:	83 c4 20             	add    esp,0x20
c00231c4:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00231c9:	50                   	push   eax
c00231ca:	6a 04                	push   0x4
c00231cc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00231d3:	50                   	push   eax
c00231d4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00231da:	e8 47 ed ff ff       	call   c0021f26 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231df:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00231e4:	50                   	push   eax
c00231e5:	6a 05                	push   0x5
c00231e7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00231ee:	50                   	push   eax
c00231ef:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00231f5:	e8 2c ed ff ff       	call   c0021f26 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231fa:	83 c4 20             	add    esp,0x20
c00231fd:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023202:	0f 94 c0             	sete   al
c0023205:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002320a:	74 09                	je     c0023215 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c002320c:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0023213:	eb 07                	jmp    c002321c <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0023215:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c002321c:	0f b6 c0             	movzx  eax,al
c002321f:	50                   	push   eax
c0023220:	6a 07                	push   0x7
c0023222:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023229:	50                   	push   eax
c002322a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023230:	e8 f1 ec ff ff       	call   c0021f26 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023235:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0023239:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002323d:	83 c4 10             	add    esp,0x10
c0023240:	85 f6                	test   esi,esi
c0023242:	0f 84 ac 00 00 00    	je     c00232f4 <ATA::access(unsigned long long, int, void*, bool)+0x354>
c0023248:	50                   	push   eax
c0023249:	6a 01                	push   0x1
c002324b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023252:	50                   	push   eax
c0023253:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023259:	e8 74 f8 ff ff       	call   c0022ad2 <IDE::polling(unsigned char, unsigned int)>
c002325e:	83 c4 10             	add    esp,0x10
c0023261:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0023267:	84 c0                	test   al,al
c0023269:	74 20                	je     c002328b <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c002326b:	0f b6 f8             	movzx  edi,al
c002326e:	0f b6 d2             	movzx  edx,dl
c0023271:	57                   	push   edi
c0023272:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0023279:	50                   	push   eax
c002327a:	52                   	push   edx
c002327b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023281:	e8 b6 f6 ff ff       	call   c002293c <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0023286:	e9 85 00 00 00       	jmp    c0023310 <ATA::access(unsigned long long, int, void*, bool)+0x370>
c002328b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0023290:	74 41                	je     c00232d3 <ATA::access(unsigned long long, int, void*, bool)+0x333>
c0023292:	31 c9                	xor    ecx,ecx
c0023294:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c0023298:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002329c:	50                   	push   eax
c002329d:	50                   	push   eax
c002329e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00232a5:	50                   	push   eax
c00232a6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00232ac:	e8 63 ec ff ff       	call   c0021f14 <IDE::getBase(unsigned char)>
c00232b1:	89 c2                	mov    edx,eax
c00232b3:	89 e8                	mov    eax,ebp
c00232b5:	66 ef                	out    dx,ax
c00232b7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00232bb:	83 c4 10             	add    esp,0x10
c00232be:	41                   	inc    ecx
c00232bf:	81 f9 00 01 00 00    	cmp    ecx,0x100
c00232c5:	75 cd                	jne    c0023294 <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c00232c7:	4e                   	dec    esi
c00232c8:	81 c7 00 02 00 00    	add    edi,0x200
c00232ce:	e9 6d ff ff ff       	jmp    c0023240 <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c00232d3:	0f b6 d2             	movzx  edx,dl
c00232d6:	51                   	push   ecx
c00232d7:	51                   	push   ecx
c00232d8:	52                   	push   edx
c00232d9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00232df:	e8 30 ec ff ff       	call   c0021f14 <IDE::getBase(unsigned char)>
c00232e4:	b9 00 01 00 00       	mov    ecx,0x100
c00232e9:	89 c2                	mov    edx,eax
c00232eb:	fc                   	cld    
c00232ec:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00232ef:	83 c4 10             	add    esp,0x10
c00232f2:	eb d3                	jmp    c00232c7 <ATA::access(unsigned long long, int, void*, bool)+0x327>
c00232f4:	31 ff                	xor    edi,edi
c00232f6:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00232fb:	74 16                	je     c0023313 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c00232fd:	50                   	push   eax
c00232fe:	50                   	push   eax
c00232ff:	31 c0                	xor    eax,eax
c0023301:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0023306:	0f 94 c0             	sete   al
c0023309:	50                   	push   eax
c002330a:	53                   	push   ebx
c002330b:	e8 f6 fb ff ff       	call   c0022f06 <ATA::flush(bool)>
c0023310:	83 c4 10             	add    esp,0x10
c0023313:	83 c4 2c             	add    esp,0x2c
c0023316:	89 f8                	mov    eax,edi
c0023318:	5b                   	pop    ebx
c0023319:	5e                   	pop    esi
c002331a:	5f                   	pop    edi
c002331b:	5d                   	pop    ebp
c002331c:	c3                   	ret    
c002331d:	90                   	nop

c002331e <ATA::read(unsigned long long, int, void*)>:
c002331e:	57                   	push   edi
c002331f:	b8 04 00 00 00       	mov    eax,0x4
c0023324:	56                   	push   esi
c0023325:	53                   	push   ebx
c0023326:	83 ec 10             	sub    esp,0x10
c0023329:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002332d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023331:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023334:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023338:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002333c:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023342:	77 3b                	ja     c002337f <ATA::read(unsigned long long, int, void*)+0x61>
c0023344:	b8 06 00 00 00       	mov    eax,0x6
c0023349:	85 d2                	test   edx,edx
c002334b:	74 32                	je     c002337f <ATA::read(unsigned long long, int, void*)+0x61>
c002334d:	50                   	push   eax
c002334e:	50                   	push   eax
c002334f:	6a 00                	push   0x0
c0023351:	52                   	push   edx
c0023352:	53                   	push   ebx
c0023353:	57                   	push   edi
c0023354:	56                   	push   esi
c0023355:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023359:	e8 42 fc ff ff       	call   c0022fa0 <ATA::access(unsigned long long, int, void*, bool)>
c002335e:	83 c4 20             	add    esp,0x20
c0023361:	85 c0                	test   eax,eax
c0023363:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023367:	75 11                	jne    c002337a <ATA::read(unsigned long long, int, void*)+0x5c>
c0023369:	01 1d 48 ec 02 c0    	add    DWORD PTR ds:0xc002ec48,ebx
c002336f:	e8 dc d1 fe ff       	call   c0010550 <VgaText::updateDiskUsage()>
c0023374:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023378:	eb 05                	jmp    c002337f <ATA::read(unsigned long long, int, void*)+0x61>
c002337a:	b8 01 00 00 00       	mov    eax,0x1
c002337f:	83 c4 10             	add    esp,0x10
c0023382:	5b                   	pop    ebx
c0023383:	5e                   	pop    esi
c0023384:	5f                   	pop    edi
c0023385:	c3                   	ret    

c0023386 <ATA::write(unsigned long long, int, void*)>:
c0023386:	57                   	push   edi
c0023387:	b8 04 00 00 00       	mov    eax,0x4
c002338c:	56                   	push   esi
c002338d:	53                   	push   ebx
c002338e:	83 ec 10             	sub    esp,0x10
c0023391:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023395:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023399:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002339c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00233a0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00233a4:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00233aa:	77 3b                	ja     c00233e7 <ATA::write(unsigned long long, int, void*)+0x61>
c00233ac:	b8 06 00 00 00       	mov    eax,0x6
c00233b1:	85 d2                	test   edx,edx
c00233b3:	74 32                	je     c00233e7 <ATA::write(unsigned long long, int, void*)+0x61>
c00233b5:	50                   	push   eax
c00233b6:	50                   	push   eax
c00233b7:	6a 01                	push   0x1
c00233b9:	52                   	push   edx
c00233ba:	53                   	push   ebx
c00233bb:	57                   	push   edi
c00233bc:	56                   	push   esi
c00233bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00233c1:	e8 da fb ff ff       	call   c0022fa0 <ATA::access(unsigned long long, int, void*, bool)>
c00233c6:	83 c4 20             	add    esp,0x20
c00233c9:	85 c0                	test   eax,eax
c00233cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00233cf:	75 11                	jne    c00233e2 <ATA::write(unsigned long long, int, void*)+0x5c>
c00233d1:	01 1d 44 ec 02 c0    	add    DWORD PTR ds:0xc002ec44,ebx
c00233d7:	e8 74 d1 fe ff       	call   c0010550 <VgaText::updateDiskUsage()>
c00233dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00233e0:	eb 05                	jmp    c00233e7 <ATA::write(unsigned long long, int, void*)+0x61>
c00233e2:	b8 01 00 00 00       	mov    eax,0x1
c00233e7:	83 c4 10             	add    esp,0x10
c00233ea:	5b                   	pop    ebx
c00233eb:	5e                   	pop    esi
c00233ec:	5f                   	pop    edi
c00233ed:	c3                   	ret    

c00233ee <ATA::detectCHS()>:
c00233ee:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00233f2:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00233f8:	c1 e0 06             	shl    eax,0x6
c00233fb:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0023401:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002340b:	c7 44 24 04 2c b3 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b32c
c0023413:	e9 53 64 ff ff       	jmp    c001986b <Krnl::panic(char const*)>

c0023418 <ATA::open(int, int, void*)>:
c0023418:	53                   	push   ebx
c0023419:	83 ec 08             	sub    esp,0x8
c002341c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023420:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023424:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023428:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002342e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0023434:	c1 e0 06             	shl    eax,0x6
c0023437:	01 d0                	add    eax,edx
c0023439:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0023440:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0023446:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002344d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0023457:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002345d:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0023464:	75 0c                	jne    c0023472 <ATA::open(int, int, void*)+0x5a>
c0023466:	83 ec 0c             	sub    esp,0xc
c0023469:	53                   	push   ebx
c002346a:	e8 7f ff ff ff       	call   c00233ee <ATA::detectCHS()>
c002346f:	83 c4 10             	add    esp,0x10
c0023472:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023478:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002347e:	c1 e0 06             	shl    eax,0x6
c0023481:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0023488:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0023492:	d1 e8                	shr    eax,1
c0023494:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002349a:	6a 04                	push   0x4
c002349c:	6a 0c                	push   0xc
c002349e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00234a5:	50                   	push   eax
c00234a6:	52                   	push   edx
c00234a7:	e8 7a ea ff ff       	call   c0021f26 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00234ac:	90                   	nop
c00234ad:	90                   	nop
c00234ae:	6a 00                	push   0x0
c00234b0:	6a 0c                	push   0xc
c00234b2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00234b9:	50                   	push   eax
c00234ba:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00234c0:	e8 61 ea ff ff       	call   c0021f26 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00234c5:	83 c4 14             	add    esp,0x14
c00234c8:	53                   	push   ebx
c00234c9:	e8 ea 0a ff ff       	call   c0013fb8 <PhysicalDisk::startCache()>
c00234ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00234d1:	e8 0c 2b ff ff       	call   c0015fe2 <createPartitionsForDisk(PhysicalDisk*)>
c00234d6:	31 c0                	xor    eax,eax
c00234d8:	83 c4 18             	add    esp,0x18
c00234db:	5b                   	pop    ebx
c00234dc:	c3                   	ret    
c00234dd:	90                   	nop

c00234de <ATAPI::write(unsigned long long, int, void*)>:
c00234de:	b8 03 00 00 00       	mov    eax,0x3
c00234e3:	c3                   	ret    

c00234e4 <ATAPI::close(int, int, void*)>:
c00234e4:	83 ec 0c             	sub    esp,0xc
c00234e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234eb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00234f1:	85 c0                	test   eax,eax
c00234f3:	74 0c                	je     c0023501 <ATAPI::close(int, int, void*)+0x1d>
c00234f5:	83 ec 0c             	sub    esp,0xc
c00234f8:	8b 10                	mov    edx,DWORD PTR [eax]
c00234fa:	50                   	push   eax
c00234fb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00234fe:	83 c4 10             	add    esp,0x10
c0023501:	31 c0                	xor    eax,eax
c0023503:	83 c4 0c             	add    esp,0xc
c0023506:	c3                   	ret    
c0023507:	90                   	nop

c0023508 <ATAPI::ATAPI()>:
c0023508:	83 ec 0c             	sub    esp,0xc
c002350b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002350f:	83 ec 04             	sub    esp,0x4
c0023512:	68 00 08 00 00       	push   0x800
c0023517:	68 74 b3 02 c0       	push   0xc002b374
c002351c:	50                   	push   eax
c002351d:	e8 2e 0a ff ff       	call   c0013f50 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023522:	83 c4 10             	add    esp,0x10
c0023525:	ba b4 b3 02 c0       	mov    edx,0xc002b3b4
c002352a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002352e:	89 10                	mov    DWORD PTR [eax],edx
c0023530:	90                   	nop
c0023531:	83 c4 0c             	add    esp,0xc
c0023534:	c3                   	ret    
c0023535:	90                   	nop

c0023536 <ATAPI::readyForCommand()>:
c0023536:	56                   	push   esi
c0023537:	53                   	push   ebx
c0023538:	31 db                	xor    ebx,ebx
c002353a:	50                   	push   eax
c002353b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002353f:	50                   	push   eax
c0023540:	6a 0c                	push   0xc
c0023542:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023549:	50                   	push   eax
c002354a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023550:	e8 91 ea ff ff       	call   c0021fe6 <IDE::read(unsigned char, unsigned char)>
c0023555:	83 c4 10             	add    esp,0x10
c0023558:	a8 88                	test   al,0x88
c002355a:	74 23                	je     c002357f <ATAPI::readyForCommand()+0x49>
c002355c:	43                   	inc    ebx
c002355d:	83 fb 63             	cmp    ebx,0x63
c0023560:	7e dd                	jle    c002353f <ATAPI::readyForCommand()+0x9>
c0023562:	51                   	push   ecx
c0023563:	51                   	push   ecx
c0023564:	6a 00                	push   0x0
c0023566:	68 40 42 0f 00       	push   0xf4240
c002356b:	e8 da 9c ff ff       	call   c001d24a <nanoSleep(unsigned long long)>
c0023570:	83 c4 10             	add    esp,0x10
c0023573:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023579:	75 c4                	jne    c002353f <ATAPI::readyForCommand()+0x9>
c002357b:	31 c0                	xor    eax,eax
c002357d:	eb 02                	jmp    c0023581 <ATAPI::readyForCommand()+0x4b>
c002357f:	b0 01                	mov    al,0x1
c0023581:	5a                   	pop    edx
c0023582:	5b                   	pop    ebx
c0023583:	5e                   	pop    esi
c0023584:	c3                   	ret    
c0023585:	90                   	nop

c0023586 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0023586:	55                   	push   ebp
c0023587:	57                   	push   edi
c0023588:	56                   	push   esi
c0023589:	53                   	push   ebx
c002358a:	83 ec 20             	sub    esp,0x20
c002358d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0023591:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0023595:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0023599:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002359d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00235a1:	6a 01                	push   0x1
c00235a3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00235aa:	50                   	push   eax
c00235ab:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00235b1:	e8 7c eb ff ff       	call   c0022132 <IDE::enableIRQs(unsigned char, bool)>
c00235b6:	5e                   	pop    esi
c00235b7:	58                   	pop    eax
c00235b8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00235bf:	50                   	push   eax
c00235c0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00235c6:	e8 35 e9 ff ff       	call   c0021f00 <IDE::prepareInterrupt(unsigned char)>
c00235cb:	89 3c 24             	mov    DWORD PTR [esp],edi
c00235ce:	e8 63 ff ff ff       	call   c0023536 <ATAPI::readyForCommand()>
c00235d3:	83 c4 10             	add    esp,0x10
c00235d6:	84 c0                	test   al,al
c00235d8:	75 0a                	jne    c00235e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c00235da:	bb 01 00 00 00       	mov    ebx,0x1
c00235df:	e9 57 02 00 00       	jmp    c002383b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00235e4:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c00235ea:	c1 e0 04             	shl    eax,0x4
c00235ed:	0f b6 c0             	movzx  eax,al
c00235f0:	50                   	push   eax
c00235f1:	6a 06                	push   0x6
c00235f3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00235fa:	50                   	push   eax
c00235fb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023601:	e8 20 e9 ff ff       	call   c0021f26 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023606:	6a 00                	push   0x0
c0023608:	6a 01                	push   0x1
c002360a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023611:	50                   	push   eax
c0023612:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023618:	e8 09 e9 ff ff       	call   c0021f26 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002361d:	83 c4 20             	add    esp,0x20
c0023620:	0f b6 c3             	movzx  eax,bl
c0023623:	0f b6 df             	movzx  ebx,bh
c0023626:	50                   	push   eax
c0023627:	6a 04                	push   0x4
c0023629:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023630:	50                   	push   eax
c0023631:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023637:	e8 ea e8 ff ff       	call   c0021f26 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002363c:	53                   	push   ebx
c002363d:	6a 05                	push   0x5
c002363f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023646:	50                   	push   eax
c0023647:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002364d:	e8 d4 e8 ff ff       	call   c0021f26 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023652:	83 c4 20             	add    esp,0x20
c0023655:	68 a0 00 00 00       	push   0xa0
c002365a:	6a 07                	push   0x7
c002365c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023663:	50                   	push   eax
c0023664:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002366a:	e8 b7 e8 ff ff       	call   c0021f26 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002366f:	83 c4 0c             	add    esp,0xc
c0023672:	6a 01                	push   0x1
c0023674:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002367b:	50                   	push   eax
c002367c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023682:	e8 4b f4 ff ff       	call   c0022ad2 <IDE::polling(unsigned char, unsigned int)>
c0023687:	83 c4 10             	add    esp,0x10
c002368a:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0023690:	84 c0                	test   al,al
c0023692:	74 23                	je     c00236b7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0023694:	0f b6 d8             	movzx  ebx,al
c0023697:	0f b6 d2             	movzx  edx,dl
c002369a:	53                   	push   ebx
c002369b:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00236a2:	50                   	push   eax
c00236a3:	52                   	push   edx
c00236a4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00236aa:	e8 8d f2 ff ff       	call   c002293c <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00236af:	83 c4 10             	add    esp,0x10
c00236b2:	e9 84 01 00 00       	jmp    c002383b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00236b7:	0f b6 d2             	movzx  edx,dl
c00236ba:	53                   	push   ebx
c00236bb:	53                   	push   ebx
c00236bc:	52                   	push   edx
c00236bd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00236c3:	e8 4c e8 ff ff       	call   c0021f14 <IDE::getBase(unsigned char)>
c00236c8:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00236cc:	b9 06 00 00 00       	mov    ecx,0x6
c00236d1:	89 c2                	mov    edx,eax
c00236d3:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00236d6:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00236da:	83 c4 10             	add    esp,0x10
c00236dd:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00236e3:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00236ea:	85 db                	test   ebx,ebx
c00236ec:	0f 84 ec 00 00 00    	je     c00237de <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c00236f2:	51                   	push   ecx
c00236f3:	51                   	push   ecx
c00236f4:	52                   	push   edx
c00236f5:	50                   	push   eax
c00236f6:	e8 99 e9 ff ff       	call   c0022094 <IDE::waitInterrupt(unsigned char)>
c00236fb:	83 c4 10             	add    esp,0x10
c00236fe:	84 c0                	test   al,al
c0023700:	0f 84 d4 fe ff ff    	je     c00235da <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0023706:	56                   	push   esi
c0023707:	56                   	push   esi
c0023708:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002370f:	50                   	push   eax
c0023710:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023716:	e8 e5 e7 ff ff       	call   c0021f00 <IDE::prepareInterrupt(unsigned char)>
c002371b:	83 c4 0c             	add    esp,0xc
c002371e:	6a 04                	push   0x4
c0023720:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023727:	50                   	push   eax
c0023728:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002372e:	e8 b3 e8 ff ff       	call   c0021fe6 <IDE::read(unsigned char, unsigned char)>
c0023733:	83 c4 0c             	add    esp,0xc
c0023736:	89 c6                	mov    esi,eax
c0023738:	6a 05                	push   0x5
c002373a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023741:	50                   	push   eax
c0023742:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023748:	e8 99 e8 ff ff       	call   c0021fe6 <IDE::read(unsigned char, unsigned char)>
c002374d:	89 f1                	mov    ecx,esi
c002374f:	0f b6 c0             	movzx  eax,al
c0023752:	0f b6 f1             	movzx  esi,cl
c0023755:	c1 e0 08             	shl    eax,0x8
c0023758:	09 c6                	or     esi,eax
c002375a:	d1 fe                	sar    esi,1
c002375c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0023760:	83 c4 10             	add    esp,0x10
c0023763:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0023768:	74 41                	je     c00237ab <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c002376a:	31 c9                	xor    ecx,ecx
c002376c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023772:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0023779:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c002377d:	75 0a                	jne    c0023789 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c002377f:	01 c9                	add    ecx,ecx
c0023781:	01 cd                	add    ebp,ecx
c0023783:	4b                   	dec    ebx
c0023784:	e9 54 ff ff ff       	jmp    c00236dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0023789:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c002378e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023792:	51                   	push   ecx
c0023793:	51                   	push   ecx
c0023794:	52                   	push   edx
c0023795:	50                   	push   eax
c0023796:	e8 79 e7 ff ff       	call   c0021f14 <IDE::getBase(unsigned char)>
c002379b:	89 c2                	mov    edx,eax
c002379d:	89 f0                	mov    eax,esi
c002379f:	66 ef                	out    dx,ax
c00237a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00237a5:	83 c4 10             	add    esp,0x10
c00237a8:	41                   	inc    ecx
c00237a9:	eb c1                	jmp    c002376c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00237ab:	31 f6                	xor    esi,esi
c00237ad:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00237b3:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00237ba:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00237be:	75 06                	jne    c00237c6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00237c0:	01 f6                	add    esi,esi
c00237c2:	01 f5                	add    ebp,esi
c00237c4:	eb bd                	jmp    c0023783 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00237c6:	51                   	push   ecx
c00237c7:	51                   	push   ecx
c00237c8:	52                   	push   edx
c00237c9:	50                   	push   eax
c00237ca:	e8 45 e7 ff ff       	call   c0021f14 <IDE::getBase(unsigned char)>
c00237cf:	89 c2                	mov    edx,eax
c00237d1:	66 ed                	in     ax,dx
c00237d3:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00237d8:	83 c4 10             	add    esp,0x10
c00237db:	46                   	inc    esi
c00237dc:	eb cf                	jmp    c00237ad <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00237de:	51                   	push   ecx
c00237df:	51                   	push   ecx
c00237e0:	52                   	push   edx
c00237e1:	50                   	push   eax
c00237e2:	e8 ad e8 ff ff       	call   c0022094 <IDE::waitInterrupt(unsigned char)>
c00237e7:	83 c4 10             	add    esp,0x10
c00237ea:	84 c0                	test   al,al
c00237ec:	0f 84 e8 fd ff ff    	je     c00235da <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00237f2:	bb a0 86 01 00       	mov    ebx,0x186a0
c00237f7:	52                   	push   edx
c00237f8:	52                   	push   edx
c00237f9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023800:	50                   	push   eax
c0023801:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023807:	e8 f4 e6 ff ff       	call   c0021f00 <IDE::prepareInterrupt(unsigned char)>
c002380c:	83 c4 10             	add    esp,0x10
c002380f:	50                   	push   eax
c0023810:	50                   	push   eax
c0023811:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023818:	50                   	push   eax
c0023819:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002381f:	e8 f0 e6 ff ff       	call   c0021f14 <IDE::getBase(unsigned char)>
c0023824:	8d 50 07             	lea    edx,[eax+0x7]
c0023827:	ec                   	in     al,dx
c0023828:	83 c4 10             	add    esp,0x10
c002382b:	a8 88                	test   al,0x88
c002382d:	74 0a                	je     c0023839 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c002382f:	4b                   	dec    ebx
c0023830:	75 dd                	jne    c002380f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0023832:	bb 02 00 00 00       	mov    ebx,0x2
c0023837:	eb 02                	jmp    c002383b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023839:	31 db                	xor    ebx,ebx
c002383b:	83 c4 1c             	add    esp,0x1c
c002383e:	89 d8                	mov    eax,ebx
c0023840:	5b                   	pop    ebx
c0023841:	5e                   	pop    esi
c0023842:	5f                   	pop    edi
c0023843:	5d                   	pop    ebp
c0023844:	c3                   	ret    
c0023845:	90                   	nop

c0023846 <ATAPI::diskRemoved()>:
c0023846:	83 ec 18             	sub    esp,0x18
c0023849:	68 7f b3 02 c0       	push   0xc002b37f
c002384e:	e8 fe ee fe ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0023853:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023857:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c002385e:	83 c4 1c             	add    esp,0x1c
c0023861:	c3                   	ret    

c0023862 <ATAPI::eject()>:
c0023862:	57                   	push   edi
c0023863:	b9 03 00 00 00       	mov    ecx,0x3
c0023868:	53                   	push   ebx
c0023869:	83 ec 14             	sub    esp,0x14
c002386c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0023870:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023874:	fc                   	cld    
c0023875:	31 c0                	xor    eax,eax
c0023877:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0023879:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002387e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0023883:	50                   	push   eax
c0023884:	50                   	push   eax
c0023885:	6a 00                	push   0x0
c0023887:	6a 00                	push   0x0
c0023889:	6a 00                	push   0x0
c002388b:	6a 02                	push   0x2
c002388d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0023891:	50                   	push   eax
c0023892:	53                   	push   ebx
c0023893:	e8 ee fc ff ff       	call   c0023586 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023898:	83 c4 14             	add    esp,0x14
c002389b:	53                   	push   ebx
c002389c:	e8 a5 ff ff ff       	call   c0023846 <ATAPI::diskRemoved()>
c00238a1:	83 c4 24             	add    esp,0x24
c00238a4:	5b                   	pop    ebx
c00238a5:	5f                   	pop    edi
c00238a6:	c3                   	ret    
c00238a7:	90                   	nop

c00238a8 <ATAPI::diskInserted()>:
c00238a8:	53                   	push   ebx
c00238a9:	83 ec 14             	sub    esp,0x14
c00238ac:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00238b0:	68 95 b3 02 c0       	push   0xc002b395
c00238b5:	e8 97 ee fe ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c00238ba:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c00238c1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00238c4:	e8 ef 06 ff ff       	call   c0013fb8 <PhysicalDisk::startCache()>
c00238c9:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00238cd:	83 c4 18             	add    esp,0x18
c00238d0:	5b                   	pop    ebx
c00238d1:	e9 0c 27 ff ff       	jmp    c0015fe2 <createPartitionsForDisk(PhysicalDisk*)>

c00238d6 <ATAPI::detectMedia()>:
c00238d6:	56                   	push   esi
c00238d7:	53                   	push   ebx
c00238d8:	83 ec 28             	sub    esp,0x28
c00238db:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00238df:	6a 0c                	push   0xc
c00238e1:	6a 00                	push   0x0
c00238e3:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00238e7:	56                   	push   esi
c00238e8:	e8 9e cd fd ff       	call   c000068b <memset>
c00238ed:	58                   	pop    eax
c00238ee:	5a                   	pop    edx
c00238ef:	6a 00                	push   0x0
c00238f1:	6a 00                	push   0x0
c00238f3:	6a 00                	push   0x0
c00238f5:	6a 00                	push   0x0
c00238f7:	56                   	push   esi
c00238f8:	53                   	push   ebx
c00238f9:	e8 88 fc ff ff       	call   c0023586 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00238fe:	83 c4 1c             	add    esp,0x1c
c0023901:	6a 0c                	push   0xc
c0023903:	6a 00                	push   0x0
c0023905:	56                   	push   esi
c0023906:	e8 80 cd fd ff       	call   c000068b <memset>
c002390b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0023910:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0023915:	59                   	pop    ecx
c0023916:	58                   	pop    eax
c0023917:	6a 01                	push   0x1
c0023919:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002391d:	50                   	push   eax
c002391e:	6a 00                	push   0x0
c0023920:	6a 12                	push   0x12
c0023922:	56                   	push   esi
c0023923:	53                   	push   ebx
c0023924:	e8 5d fc ff ff       	call   c0023586 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023929:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002392d:	83 c4 20             	add    esp,0x20
c0023930:	83 e0 7f             	and    eax,0x7f
c0023933:	3c 70                	cmp    al,0x70
c0023935:	74 15                	je     c002394c <ATAPI::detectMedia()+0x76>
c0023937:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002393e:	75 0c                	jne    c002394c <ATAPI::detectMedia()+0x76>
c0023940:	83 ec 0c             	sub    esp,0xc
c0023943:	53                   	push   ebx
c0023944:	e8 5f ff ff ff       	call   c00238a8 <ATAPI::diskInserted()>
c0023949:	83 c4 10             	add    esp,0x10
c002394c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0023950:	83 e0 0f             	and    eax,0xf
c0023953:	3c 02                	cmp    al,0x2
c0023955:	75 1b                	jne    c0023972 <ATAPI::detectMedia()+0x9c>
c0023957:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002395c:	75 2d                	jne    c002398b <ATAPI::detectMedia()+0xb5>
c002395e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0023965:	74 24                	je     c002398b <ATAPI::detectMedia()+0xb5>
c0023967:	83 ec 0c             	sub    esp,0xc
c002396a:	53                   	push   ebx
c002396b:	e8 d6 fe ff ff       	call   c0023846 <ATAPI::diskRemoved()>
c0023970:	eb 16                	jmp    c0023988 <ATAPI::detectMedia()+0xb2>
c0023972:	84 c0                	test   al,al
c0023974:	75 15                	jne    c002398b <ATAPI::detectMedia()+0xb5>
c0023976:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002397d:	75 0c                	jne    c002398b <ATAPI::detectMedia()+0xb5>
c002397f:	83 ec 0c             	sub    esp,0xc
c0023982:	53                   	push   ebx
c0023983:	e8 20 ff ff ff       	call   c00238a8 <ATAPI::diskInserted()>
c0023988:	83 c4 10             	add    esp,0x10
c002398b:	83 c4 24             	add    esp,0x24
c002398e:	5b                   	pop    ebx
c002398f:	5e                   	pop    esi
c0023990:	c3                   	ret    
c0023991:	90                   	nop

c0023992 <ATAPI::open(int, int, void*)>:
c0023992:	53                   	push   ebx
c0023993:	83 ec 08             	sub    esp,0x8
c0023996:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002399a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002399e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00239a2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00239a8:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00239ae:	c1 e0 06             	shl    eax,0x6
c00239b1:	01 d0                	add    eax,edx
c00239b3:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00239ba:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00239c0:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c00239c7:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00239d1:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00239d7:	6a 04                	push   0x4
c00239d9:	6a 0c                	push   0xc
c00239db:	51                   	push   ecx
c00239dc:	52                   	push   edx
c00239dd:	e8 44 e5 ff ff       	call   c0021f26 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00239e2:	90                   	nop
c00239e3:	90                   	nop
c00239e4:	6a 00                	push   0x0
c00239e6:	6a 0c                	push   0xc
c00239e8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00239ef:	50                   	push   eax
c00239f0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00239f6:	e8 2b e5 ff ff       	call   c0021f26 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00239fb:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0023a02:	83 c4 14             	add    esp,0x14
c0023a05:	53                   	push   ebx
c0023a06:	e8 cb fe ff ff       	call   c00238d6 <ATAPI::detectMedia()>
c0023a0b:	31 c0                	xor    eax,eax
c0023a0d:	83 c4 18             	add    esp,0x18
c0023a10:	5b                   	pop    ebx
c0023a11:	c3                   	ret    

c0023a12 <ATAPI::read(unsigned long long, int, void*)>:
c0023a12:	55                   	push   ebp
c0023a13:	57                   	push   edi
c0023a14:	56                   	push   esi
c0023a15:	53                   	push   ebx
c0023a16:	83 ec 1c             	sub    esp,0x1c
c0023a19:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023a1d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023a21:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0023a25:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0023a2c:	74 41                	je     c0023a6f <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0023a2e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023a32:	b9 03 00 00 00       	mov    ecx,0x3
c0023a37:	fc                   	cld    
c0023a38:	31 c0                	xor    eax,eax
c0023a3a:	86 fb                	xchg   bl,bh
c0023a3c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0023a3e:	c1 c3 10             	rol    ebx,0x10
c0023a41:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0023a46:	89 e8                	mov    eax,ebp
c0023a48:	86 fb                	xchg   bl,bh
c0023a4a:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0023a4e:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0023a52:	50                   	push   eax
c0023a53:	50                   	push   eax
c0023a54:	55                   	push   ebp
c0023a55:	c1 e5 0b             	shl    ebp,0xb
c0023a58:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0023a5c:	6a 00                	push   0x0
c0023a5e:	55                   	push   ebp
c0023a5f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0023a63:	50                   	push   eax
c0023a64:	56                   	push   esi
c0023a65:	e8 1c fb ff ff       	call   c0023586 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023a6a:	83 c4 20             	add    esp,0x20
c0023a6d:	eb 1a                	jmp    c0023a89 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0023a6f:	83 ec 0c             	sub    esp,0xc
c0023a72:	56                   	push   esi
c0023a73:	e8 5e fe ff ff       	call   c00238d6 <ATAPI::detectMedia()>
c0023a78:	83 c4 10             	add    esp,0x10
c0023a7b:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0023a82:	75 aa                	jne    c0023a2e <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0023a84:	b8 02 00 00 00       	mov    eax,0x2
c0023a89:	83 c4 1c             	add    esp,0x1c
c0023a8c:	5b                   	pop    ebx
c0023a8d:	5e                   	pop    esi
c0023a8e:	5f                   	pop    edi
c0023a8f:	5d                   	pop    ebp
c0023a90:	c3                   	ret    
c0023a91:	90                   	nop

c0023a92 <SATA::close(int, int, void*)>:
c0023a92:	83 ec 0c             	sub    esp,0xc
c0023a95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a99:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023a9f:	85 c0                	test   eax,eax
c0023aa1:	74 0c                	je     c0023aaf <SATA::close(int, int, void*)+0x1d>
c0023aa3:	83 ec 0c             	sub    esp,0xc
c0023aa6:	8b 10                	mov    edx,DWORD PTR [eax]
c0023aa8:	50                   	push   eax
c0023aa9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023aac:	83 c4 10             	add    esp,0x10
c0023aaf:	31 c0                	xor    eax,eax
c0023ab1:	83 c4 0c             	add    esp,0xc
c0023ab4:	c3                   	ret    
c0023ab5:	90                   	nop

c0023ab6 <SATA::powerSaving(PowerSavingLevel)>:
c0023ab6:	c3                   	ret    
c0023ab7:	90                   	nop

c0023ab8 <SATA::open(int, int, void*)>:
c0023ab8:	53                   	push   ebx
c0023ab9:	83 ec 14             	sub    esp,0x14
c0023abc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023ac0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0023ac4:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0023ace:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0023ad4:	c7 83 60 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x160],0x0
c0023ade:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023ae2:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0023aec:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0023af2:	68 e0 b3 02 c0       	push   0xc002b3e0
c0023af7:	e8 55 ec fe ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0023afc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023aff:	e8 b4 04 ff ff       	call   c0013fb8 <PhysicalDisk::startCache()>
c0023b04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023b07:	e8 d6 24 ff ff       	call   c0015fe2 <createPartitionsForDisk(PhysicalDisk*)>
c0023b0c:	31 c0                	xor    eax,eax
c0023b0e:	83 c4 18             	add    esp,0x18
c0023b11:	5b                   	pop    ebx
c0023b12:	c3                   	ret    
c0023b13:	90                   	nop

c0023b14 <SATA::SATA()>:
c0023b14:	83 ec 0c             	sub    esp,0xc
c0023b17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b1b:	83 ec 04             	sub    esp,0x4
c0023b1e:	68 00 02 00 00       	push   0x200
c0023b23:	68 fb b3 02 c0       	push   0xc002b3fb
c0023b28:	50                   	push   eax
c0023b29:	e8 22 04 ff ff       	call   c0013f50 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023b2e:	83 c4 10             	add    esp,0x10
c0023b31:	ba d8 b4 02 c0       	mov    edx,0xc002b4d8
c0023b36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b3a:	89 10                	mov    DWORD PTR [eax],edx
c0023b3c:	90                   	nop
c0023b3d:	83 c4 0c             	add    esp,0xc
c0023b40:	c3                   	ret    
c0023b41:	90                   	nop

c0023b42 <SATA::access(unsigned long long, int, void*, bool)>:
c0023b42:	55                   	push   ebp
c0023b43:	57                   	push   edi
c0023b44:	56                   	push   esi
c0023b45:	53                   	push   ebx
c0023b46:	81 ec 2c 04 00 00    	sub    esp,0x42c
c0023b4c:	8b 84 24 48 04 00 00 	mov    eax,DWORD PTR [esp+0x448]
c0023b53:	8b bc 24 4c 04 00 00 	mov    edi,DWORD PTR [esp+0x44c]
c0023b5a:	8b 9c 24 40 04 00 00 	mov    ebx,DWORD PTR [esp+0x440]
c0023b61:	8b b4 24 44 04 00 00 	mov    esi,DWORD PTR [esp+0x444]
c0023b68:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023b6c:	83 ff 08             	cmp    edi,0x8
c0023b6f:	7e 10                	jle    c0023b81 <SATA::access(unsigned long long, int, void*, bool)+0x3f>
c0023b71:	83 ec 0c             	sub    esp,0xc
c0023b74:	68 0b b4 02 c0       	push   0xc002b40b
c0023b79:	e8 ed 5c ff ff       	call   c001986b <Krnl::panic(char const*)>
c0023b7e:	83 c4 10             	add    esp,0x10
c0023b81:	51                   	push   ecx
c0023b82:	68 00 02 00 00       	push   0x200
c0023b87:	68 ee 00 00 00       	push   0xee
c0023b8c:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0023b90:	55                   	push   ebp
c0023b91:	e8 f5 ca fd ff       	call   c000068b <memset>
c0023b96:	83 c4 0c             	add    esp,0xc
c0023b99:	68 00 02 00 00       	push   0x200
c0023b9e:	68 ee 00 00 00       	push   0xee
c0023ba3:	8d 84 24 2c 02 00 00 	lea    eax,[esp+0x22c]
c0023baa:	50                   	push   eax
c0023bab:	e8 db ca fd ff       	call   c000068b <memset>
c0023bb0:	55                   	push   ebp
c0023bb1:	57                   	push   edi
c0023bb2:	56                   	push   esi
c0023bb3:	68 3d b4 02 c0       	push   0xc002b43d
c0023bb8:	e8 94 eb fe ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0023bbd:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0023bc3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023bc9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0023bcd:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023bd3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0023bd7:	c1 e0 07             	shl    eax,0x7
c0023bda:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
c0023bde:	83 c4 18             	add    esp,0x18
c0023be1:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0023beb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023bef:	8d 50 02             	lea    edx,[eax+0x2]
c0023bf2:	c1 e2 07             	shl    edx,0x7
c0023bf5:	03 54 24 14          	add    edx,DWORD PTR [esp+0x14]
c0023bf9:	52                   	push   edx
c0023bfa:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023bfe:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0023c04:	e8 e1 ef ff ff       	call   c0022bea <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0023c09:	89 c1                	mov    ecx,eax
c0023c0b:	58                   	pop    eax
c0023c0c:	5a                   	pop    edx
c0023c0d:	51                   	push   ecx
c0023c0e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0023c12:	68 72 b4 02 c0       	push   0xc002b472
c0023c17:	e8 35 eb fe ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0023c1c:	83 c4 10             	add    esp,0x10
c0023c1f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0023c23:	83 f9 ff             	cmp    ecx,0xffffffff
c0023c26:	0f 84 9a 01 00 00    	je     c0023dc6 <SATA::access(unsigned long long, int, void*, bool)+0x284>
c0023c2c:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0023c32:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023c36:	8b 12                	mov    edx,DWORD PTR [edx]
c0023c38:	2b 90 5c 01 00 00    	sub    edx,DWORD PTR [eax+0x15c]
c0023c3e:	03 90 58 01 00 00    	add    edx,DWORD PTR [eax+0x158]
c0023c44:	89 c8                	mov    eax,ecx
c0023c46:	c1 e0 05             	shl    eax,0x5
c0023c49:	01 c2                	add    edx,eax
c0023c4b:	8a 02                	mov    al,BYTE PTR [edx]
c0023c4d:	83 e0 a0             	and    eax,0xffffffa0
c0023c50:	83 c8 05             	or     eax,0x5
c0023c53:	88 02                	mov    BYTE PTR [edx],al
c0023c55:	8d 47 ff             	lea    eax,[edi-0x1]
c0023c58:	c1 f8 04             	sar    eax,0x4
c0023c5b:	40                   	inc    eax
c0023c5c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0023c60:	0f b7 c0             	movzx  eax,ax
c0023c63:	8b 9b 70 01 00 00    	mov    ebx,DWORD PTR [ebx+0x170]
c0023c69:	83 c0 08             	add    eax,0x8
c0023c6c:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c0023c72:	c1 e0 04             	shl    eax,0x4
c0023c75:	2b 8b 5c 01 00 00    	sub    ecx,DWORD PTR [ebx+0x15c]
c0023c7b:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
c0023c7e:	01 cb                	add    ebx,ecx
c0023c80:	52                   	push   edx
c0023c81:	50                   	push   eax
c0023c82:	6a 00                	push   0x0
c0023c84:	53                   	push   ebx
c0023c85:	e8 01 ca fd ff       	call   c000068b <memset>
c0023c8a:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0023c90:	83 c4 10             	add    esp,0x10
c0023c93:	89 ab 80 00 00 00    	mov    DWORD PTR [ebx+0x80],ebp
c0023c99:	25 00 00 c0 7f       	and    eax,0x7fc00000
c0023c9e:	8d ac 24 20 02 00 00 	lea    ebp,[esp+0x220]
c0023ca5:	0d ff 01 00 80       	or     eax,0x800001ff
c0023caa:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0023cae:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0023cb4:	b8 01 00 00 00       	mov    eax,0x1
c0023cb9:	89 c2                	mov    edx,eax
c0023cbb:	c1 e2 04             	shl    edx,0x4
c0023cbe:	89 ac 13 80 00 00 00 	mov    DWORD PTR [ebx+edx*1+0x80],ebp
c0023cc5:	8d 50 08             	lea    edx,[eax+0x8]
c0023cc8:	40                   	inc    eax
c0023cc9:	c1 e2 04             	shl    edx,0x4
c0023ccc:	81 64 13 0c 00 00 c0 7f 	and    DWORD PTR [ebx+edx*1+0xc],0x7fc00000
c0023cd4:	83 f8 10             	cmp    eax,0x10
c0023cd7:	75 e0                	jne    c0023cb9 <SATA::access(unsigned long long, int, void*, bool)+0x177>
c0023cd9:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0023cdc:	c6 43 02 25          	mov    BYTE PTR [ebx+0x2],0x25
c0023ce0:	66 25 00 7f          	and    ax,0x7f00
c0023ce4:	66 89 73 04          	mov    WORD PTR [ebx+0x4],si
c0023ce8:	66 0d 27 80          	or     ax,0x8027
c0023cec:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0023cf0:	66 89 03             	mov    WORD PTR [ebx],ax
c0023cf3:	66 89 7b 0c          	mov    WORD PTR [ebx+0xc],di
c0023cf7:	89 f0                	mov    eax,esi
c0023cf9:	31 d2                	xor    edx,edx
c0023cfb:	c1 e8 10             	shr    eax,0x10
c0023cfe:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0023d01:	89 f0                	mov    eax,esi
c0023d03:	c1 e8 18             	shr    eax,0x18
c0023d06:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0023d09:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0023d0d:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0023d10:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023d14:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0023d17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d1b:	c1 e0 07             	shl    eax,0x7
c0023d1e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0023d22:	8b 98 20 01 00 00    	mov    ebx,DWORD PTR [eax+0x120]
c0023d28:	80 e3 88             	and    bl,0x88
c0023d2b:	74 0b                	je     c0023d38 <SATA::access(unsigned long long, int, void*, bool)+0x1f6>
c0023d2d:	81 fa 40 42 0f 00    	cmp    edx,0xf4240
c0023d33:	74 0b                	je     c0023d40 <SATA::access(unsigned long long, int, void*, bool)+0x1fe>
c0023d35:	42                   	inc    edx
c0023d36:	eb ea                	jmp    c0023d22 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c0023d38:	81 fa 40 42 0f 00    	cmp    edx,0xf4240
c0023d3e:	75 0a                	jne    c0023d4a <SATA::access(unsigned long long, int, void*, bool)+0x208>
c0023d40:	83 ec 0c             	sub    esp,0xc
c0023d43:	68 7b b4 02 c0       	push   0xc002b47b
c0023d48:	eb 60                	jmp    c0023daa <SATA::access(unsigned long long, int, void*, bool)+0x268>
c0023d4a:	be 01 00 00 00       	mov    esi,0x1
c0023d4f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023d53:	d3 e6                	shl    esi,cl
c0023d55:	c1 e3 07             	shl    ebx,0x7
c0023d58:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c0023d5e:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0023d62:	83 ec 0c             	sub    esp,0xc
c0023d65:	68 89 b4 02 c0       	push   0xc002b489
c0023d6a:	e8 e2 e9 fe ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c0023d6f:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c0023d75:	83 c4 10             	add    esp,0x10
c0023d78:	85 c6                	test   esi,eax
c0023d7a:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c0023d80:	74 1a                	je     c0023d9c <SATA::access(unsigned long long, int, void*, bool)+0x25a>
c0023d82:	0f ba e0 1e          	bt     eax,0x1e
c0023d86:	73 da                	jae    c0023d62 <SATA::access(unsigned long long, int, void*, bool)+0x220>
c0023d88:	83 ec 0c             	sub    esp,0xc
c0023d8b:	68 96 b4 02 c0       	push   0xc002b496
c0023d90:	e8 d6 5a ff ff       	call   c001986b <Krnl::panic(char const*)>
c0023d95:	83 c4 10             	add    esp,0x10
c0023d98:	31 c0                	xor    eax,eax
c0023d9a:	eb 2f                	jmp    c0023dcb <SATA::access(unsigned long long, int, void*, bool)+0x289>
c0023d9c:	0f ba e0 1e          	bt     eax,0x1e
c0023da0:	73 12                	jae    c0023db4 <SATA::access(unsigned long long, int, void*, bool)+0x272>
c0023da2:	83 ec 0c             	sub    esp,0xc
c0023da5:	68 96 b4 02 c0       	push   0xc002b496
c0023daa:	e8 bc 5a ff ff       	call   c001986b <Krnl::panic(char const*)>
c0023daf:	83 c4 10             	add    esp,0x10
c0023db2:	eb 12                	jmp    c0023dc6 <SATA::access(unsigned long long, int, void*, bool)+0x284>
c0023db4:	83 ec 0c             	sub    esp,0xc
c0023db7:	68 a7 b4 02 c0       	push   0xc002b4a7
c0023dbc:	e8 aa 5a ff ff       	call   c001986b <Krnl::panic(char const*)>
c0023dc1:	83 c4 10             	add    esp,0x10
c0023dc4:	eb fe                	jmp    c0023dc4 <SATA::access(unsigned long long, int, void*, bool)+0x282>
c0023dc6:	b8 01 00 00 00       	mov    eax,0x1
c0023dcb:	81 c4 2c 04 00 00    	add    esp,0x42c
c0023dd1:	5b                   	pop    ebx
c0023dd2:	5e                   	pop    esi
c0023dd3:	5f                   	pop    edi
c0023dd4:	5d                   	pop    ebp
c0023dd5:	c3                   	ret    

c0023dd6 <SATA::read(unsigned long long, int, void*)>:
c0023dd6:	57                   	push   edi
c0023dd7:	b8 04 00 00 00       	mov    eax,0x4
c0023ddc:	56                   	push   esi
c0023ddd:	53                   	push   ebx
c0023dde:	83 ec 10             	sub    esp,0x10
c0023de1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023de5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023de9:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023dec:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023df0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023df4:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023dfa:	77 3b                	ja     c0023e37 <SATA::read(unsigned long long, int, void*)+0x61>
c0023dfc:	b8 06 00 00 00       	mov    eax,0x6
c0023e01:	85 d2                	test   edx,edx
c0023e03:	74 32                	je     c0023e37 <SATA::read(unsigned long long, int, void*)+0x61>
c0023e05:	50                   	push   eax
c0023e06:	50                   	push   eax
c0023e07:	6a 00                	push   0x0
c0023e09:	52                   	push   edx
c0023e0a:	53                   	push   ebx
c0023e0b:	57                   	push   edi
c0023e0c:	56                   	push   esi
c0023e0d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023e11:	e8 2c fd ff ff       	call   c0023b42 <SATA::access(unsigned long long, int, void*, bool)>
c0023e16:	83 c4 20             	add    esp,0x20
c0023e19:	85 c0                	test   eax,eax
c0023e1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023e1f:	75 11                	jne    c0023e32 <SATA::read(unsigned long long, int, void*)+0x5c>
c0023e21:	01 1d 48 ec 02 c0    	add    DWORD PTR ds:0xc002ec48,ebx
c0023e27:	e8 24 c7 fe ff       	call   c0010550 <VgaText::updateDiskUsage()>
c0023e2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023e30:	eb 05                	jmp    c0023e37 <SATA::read(unsigned long long, int, void*)+0x61>
c0023e32:	b8 01 00 00 00       	mov    eax,0x1
c0023e37:	83 c4 10             	add    esp,0x10
c0023e3a:	5b                   	pop    ebx
c0023e3b:	5e                   	pop    esi
c0023e3c:	5f                   	pop    edi
c0023e3d:	c3                   	ret    

c0023e3e <SATA::write(unsigned long long, int, void*)>:
c0023e3e:	57                   	push   edi
c0023e3f:	b8 04 00 00 00       	mov    eax,0x4
c0023e44:	56                   	push   esi
c0023e45:	53                   	push   ebx
c0023e46:	83 ec 10             	sub    esp,0x10
c0023e49:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023e4d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023e51:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023e54:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023e58:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023e5c:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023e62:	77 3b                	ja     c0023e9f <SATA::write(unsigned long long, int, void*)+0x61>
c0023e64:	b8 06 00 00 00       	mov    eax,0x6
c0023e69:	85 d2                	test   edx,edx
c0023e6b:	74 32                	je     c0023e9f <SATA::write(unsigned long long, int, void*)+0x61>
c0023e6d:	50                   	push   eax
c0023e6e:	50                   	push   eax
c0023e6f:	6a 01                	push   0x1
c0023e71:	52                   	push   edx
c0023e72:	53                   	push   ebx
c0023e73:	57                   	push   edi
c0023e74:	56                   	push   esi
c0023e75:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023e79:	e8 c4 fc ff ff       	call   c0023b42 <SATA::access(unsigned long long, int, void*, bool)>
c0023e7e:	83 c4 20             	add    esp,0x20
c0023e81:	85 c0                	test   eax,eax
c0023e83:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023e87:	75 11                	jne    c0023e9a <SATA::write(unsigned long long, int, void*)+0x5c>
c0023e89:	01 1d 44 ec 02 c0    	add    DWORD PTR ds:0xc002ec44,ebx
c0023e8f:	e8 bc c6 fe ff       	call   c0010550 <VgaText::updateDiskUsage()>
c0023e94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023e98:	eb 05                	jmp    c0023e9f <SATA::write(unsigned long long, int, void*)+0x61>
c0023e9a:	b8 01 00 00 00       	mov    eax,0x1
c0023e9f:	83 c4 10             	add    esp,0x10
c0023ea2:	5b                   	pop    ebx
c0023ea3:	5e                   	pop    esi
c0023ea4:	5f                   	pop    edi
c0023ea5:	c3                   	ret    

c0023ea6 <AVX::open(int, int, void*)>:
c0023ea6:	83 ec 0c             	sub    esp,0xc
c0023ea9:	e8 3a 11 00 00       	call   c0024fe8 <avxInit>
c0023eae:	b8 00 00 00 00       	mov    eax,0x0
c0023eb3:	83 c4 0c             	add    esp,0xc
c0023eb6:	c3                   	ret    
c0023eb7:	90                   	nop

c0023eb8 <AVX::close(int, int, void*)>:
c0023eb8:	83 ec 0c             	sub    esp,0xc
c0023ebb:	e8 29 11 00 00       	call   c0024fe9 <avxClose>
c0023ec0:	b8 00 00 00 00       	mov    eax,0x0
c0023ec5:	83 c4 0c             	add    esp,0xc
c0023ec8:	c3                   	ret    
c0023ec9:	90                   	nop

c0023eca <AVX::available()>:
c0023eca:	83 ec 0c             	sub    esp,0xc
c0023ecd:	e8 0e 11 00 00       	call   c0024fe0 <avxDetect>
c0023ed2:	85 c0                	test   eax,eax
c0023ed4:	0f 95 c0             	setne  al
c0023ed7:	83 c4 0c             	add    esp,0xc
c0023eda:	c3                   	ret    
c0023edb:	90                   	nop

c0023edc <AVX::save(void*)>:
c0023edc:	83 ec 0c             	sub    esp,0xc
c0023edf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023ee3:	83 ec 0c             	sub    esp,0xc
c0023ee6:	50                   	push   eax
c0023ee7:	e8 fa 10 00 00       	call   c0024fe6 <avxSave>
c0023eec:	83 c4 10             	add    esp,0x10
c0023eef:	90                   	nop
c0023ef0:	83 c4 0c             	add    esp,0xc
c0023ef3:	c3                   	ret    

c0023ef4 <AVX::load(void*)>:
c0023ef4:	83 ec 0c             	sub    esp,0xc
c0023ef7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023efb:	83 ec 0c             	sub    esp,0xc
c0023efe:	50                   	push   eax
c0023eff:	e8 e3 10 00 00       	call   c0024fe7 <avxLoad>
c0023f04:	83 c4 10             	add    esp,0x10
c0023f07:	90                   	nop
c0023f08:	83 c4 0c             	add    esp,0xc
c0023f0b:	c3                   	ret    

c0023f0c <AVX::AVX()>:
c0023f0c:	83 ec 0c             	sub    esp,0xc
c0023f0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f13:	83 ec 08             	sub    esp,0x8
c0023f16:	68 04 b5 02 c0       	push   0xc002b504
c0023f1b:	50                   	push   eax
c0023f1c:	e8 0d 01 ff ff       	call   c001402e <FPU::FPU(char const*)>
c0023f21:	83 c4 10             	add    esp,0x10
c0023f24:	ba 14 b5 02 c0       	mov    edx,0xc002b514
c0023f29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f2d:	89 10                	mov    DWORD PTR [eax],edx
c0023f2f:	90                   	nop
c0023f30:	83 c4 0c             	add    esp,0xc
c0023f33:	c3                   	ret    

c0023f34 <MMX::available()>:
c0023f34:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c0023f39:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0023f3f:	83 e0 20             	and    eax,0x20
c0023f42:	84 c0                	test   al,al
c0023f44:	0f 95 c0             	setne  al
c0023f47:	c3                   	ret    

c0023f48 <MMX::open(int, int, void*)>:
c0023f48:	83 ec 0c             	sub    esp,0xc
c0023f4b:	e8 1c 11 00 00       	call   c002506c <x87Init>
c0023f50:	b8 00 00 00 00       	mov    eax,0x0
c0023f55:	83 c4 0c             	add    esp,0xc
c0023f58:	c3                   	ret    
c0023f59:	90                   	nop

c0023f5a <MMX::close(int, int, void*)>:
c0023f5a:	83 ec 0c             	sub    esp,0xc
c0023f5d:	e8 24 11 00 00       	call   c0025086 <x87Close>
c0023f62:	b8 00 00 00 00       	mov    eax,0x0
c0023f67:	83 c4 0c             	add    esp,0xc
c0023f6a:	c3                   	ret    
c0023f6b:	90                   	nop

c0023f6c <MMX::save(void*)>:
c0023f6c:	83 ec 0c             	sub    esp,0xc
c0023f6f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023f73:	83 ec 0c             	sub    esp,0xc
c0023f76:	50                   	push   eax
c0023f77:	e8 e5 10 00 00       	call   c0025061 <x87Save>
c0023f7c:	83 c4 10             	add    esp,0x10
c0023f7f:	90                   	nop
c0023f80:	83 c4 0c             	add    esp,0xc
c0023f83:	c3                   	ret    

c0023f84 <MMX::load(void*)>:
c0023f84:	83 ec 0c             	sub    esp,0xc
c0023f87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023f8b:	83 ec 0c             	sub    esp,0xc
c0023f8e:	50                   	push   eax
c0023f8f:	e8 d3 10 00 00       	call   c0025067 <x87Load>
c0023f94:	83 c4 10             	add    esp,0x10
c0023f97:	90                   	nop
c0023f98:	83 c4 0c             	add    esp,0xc
c0023f9b:	c3                   	ret    

c0023f9c <MMX::MMX()>:
c0023f9c:	83 ec 0c             	sub    esp,0xc
c0023f9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fa3:	83 ec 08             	sub    esp,0x8
c0023fa6:	68 44 b5 02 c0       	push   0xc002b544
c0023fab:	50                   	push   eax
c0023fac:	e8 7d 00 ff ff       	call   c001402e <FPU::FPU(char const*)>
c0023fb1:	83 c4 10             	add    esp,0x10
c0023fb4:	ba 54 b5 02 c0       	mov    edx,0xc002b554
c0023fb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fbd:	89 10                	mov    DWORD PTR [eax],edx
c0023fbf:	90                   	nop
c0023fc0:	83 c4 0c             	add    esp,0xc
c0023fc3:	c3                   	ret    

c0023fc4 <SSE::open(int, int, void*)>:
c0023fc4:	83 ec 0c             	sub    esp,0xc
c0023fc7:	e8 58 10 00 00       	call   c0025024 <sseInit>
c0023fcc:	b8 00 00 00 00       	mov    eax,0x0
c0023fd1:	83 c4 0c             	add    esp,0xc
c0023fd4:	c3                   	ret    
c0023fd5:	90                   	nop

c0023fd6 <SSE::close(int, int, void*)>:
c0023fd6:	83 ec 0c             	sub    esp,0xc
c0023fd9:	e8 56 10 00 00       	call   c0025034 <sseClose>
c0023fde:	b8 00 00 00 00       	mov    eax,0x0
c0023fe3:	83 c4 0c             	add    esp,0xc
c0023fe6:	c3                   	ret    
c0023fe7:	90                   	nop

c0023fe8 <SSE::available()>:
c0023fe8:	83 ec 1c             	sub    esp,0x1c
c0023feb:	e8 10 10 00 00       	call   c0025000 <absolutelyNoChanceInHell>
c0023ff0:	85 c0                	test   eax,eax
c0023ff2:	0f 95 c0             	setne  al
c0023ff5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023ff9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023ffd:	83 c4 1c             	add    esp,0x1c
c0024000:	c3                   	ret    
c0024001:	90                   	nop

c0024002 <SSE::save(void*)>:
c0024002:	83 ec 0c             	sub    esp,0xc
c0024005:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024009:	83 ec 0c             	sub    esp,0xc
c002400c:	50                   	push   eax
c002400d:	e8 06 10 00 00       	call   c0025018 <sseSave>
c0024012:	83 c4 10             	add    esp,0x10
c0024015:	90                   	nop
c0024016:	83 c4 0c             	add    esp,0xc
c0024019:	c3                   	ret    

c002401a <SSE::load(void*)>:
c002401a:	83 ec 0c             	sub    esp,0xc
c002401d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024021:	83 ec 0c             	sub    esp,0xc
c0024024:	50                   	push   eax
c0024025:	e8 f4 0f 00 00       	call   c002501e <sseLoad>
c002402a:	83 c4 10             	add    esp,0x10
c002402d:	90                   	nop
c002402e:	83 c4 0c             	add    esp,0xc
c0024031:	c3                   	ret    

c0024032 <SSE::SSE()>:
c0024032:	83 ec 0c             	sub    esp,0xc
c0024035:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024039:	83 ec 08             	sub    esp,0x8
c002403c:	68 84 b5 02 c0       	push   0xc002b584
c0024041:	50                   	push   eax
c0024042:	e8 e7 ff fe ff       	call   c001402e <FPU::FPU(char const*)>
c0024047:	83 c4 10             	add    esp,0x10
c002404a:	ba 94 b5 02 c0       	mov    edx,0xc002b594
c002404f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024053:	89 10                	mov    DWORD PTR [eax],edx
c0024055:	90                   	nop
c0024056:	83 c4 0c             	add    esp,0xc
c0024059:	c3                   	ret    

c002405a <x87::open(int, int, void*)>:
c002405a:	83 ec 0c             	sub    esp,0xc
c002405d:	e8 0a 10 00 00       	call   c002506c <x87Init>
c0024062:	b8 00 00 00 00       	mov    eax,0x0
c0024067:	83 c4 0c             	add    esp,0xc
c002406a:	c3                   	ret    
c002406b:	90                   	nop

c002406c <x87::close(int, int, void*)>:
c002406c:	83 ec 0c             	sub    esp,0xc
c002406f:	e8 12 10 00 00       	call   c0025086 <x87Close>
c0024074:	b8 00 00 00 00       	mov    eax,0x0
c0024079:	83 c4 0c             	add    esp,0xc
c002407c:	c3                   	ret    
c002407d:	90                   	nop

c002407e <x87::available()>:
c002407e:	83 ec 0c             	sub    esp,0xc
c0024081:	e8 c0 0f 00 00       	call   c0025046 <x87Detect>
c0024086:	85 c0                	test   eax,eax
c0024088:	0f 95 c0             	setne  al
c002408b:	83 c4 0c             	add    esp,0xc
c002408e:	c3                   	ret    
c002408f:	90                   	nop

c0024090 <x87::save(void*)>:
c0024090:	83 ec 0c             	sub    esp,0xc
c0024093:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024097:	83 ec 0c             	sub    esp,0xc
c002409a:	50                   	push   eax
c002409b:	e8 c1 0f 00 00       	call   c0025061 <x87Save>
c00240a0:	83 c4 10             	add    esp,0x10
c00240a3:	90                   	nop
c00240a4:	83 c4 0c             	add    esp,0xc
c00240a7:	c3                   	ret    

c00240a8 <x87::load(void*)>:
c00240a8:	83 ec 0c             	sub    esp,0xc
c00240ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00240af:	83 ec 0c             	sub    esp,0xc
c00240b2:	50                   	push   eax
c00240b3:	e8 af 0f 00 00       	call   c0025067 <x87Load>
c00240b8:	83 c4 10             	add    esp,0x10
c00240bb:	90                   	nop
c00240bc:	83 c4 0c             	add    esp,0xc
c00240bf:	c3                   	ret    

c00240c0 <x87::x87()>:
c00240c0:	83 ec 0c             	sub    esp,0xc
c00240c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00240c7:	83 ec 08             	sub    esp,0x8
c00240ca:	68 c4 b5 02 c0       	push   0xc002b5c4
c00240cf:	50                   	push   eax
c00240d0:	e8 59 ff fe ff       	call   c001402e <FPU::FPU(char const*)>
c00240d5:	83 c4 10             	add    esp,0x10
c00240d8:	ba d4 b5 02 c0       	mov    edx,0xc002b5d4
c00240dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00240e1:	89 10                	mov    DWORD PTR [eax],edx
c00240e3:	90                   	nop
c00240e4:	83 c4 0c             	add    esp,0xc
c00240e7:	c3                   	ret    

c00240e8 <APIC::disable()>:
c00240e8:	90                   	nop
c00240e9:	c3                   	ret    

c00240ea <APIC::close(int, int, void*)>:
c00240ea:	55                   	push   ebp
c00240eb:	89 e5                	mov    ebp,esp
c00240ed:	83 ec 08             	sub    esp,0x8
c00240f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00240f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00240f5:	83 c0 3c             	add    eax,0x3c
c00240f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00240fa:	83 ec 0c             	sub    esp,0xc
c00240fd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024100:	ff d0                	call   eax
c0024102:	83 c4 10             	add    esp,0x10
c0024105:	b8 00 00 00 00       	mov    eax,0x0
c002410a:	c9                   	leave  
c002410b:	c3                   	ret    

c002410c <IOAPIC::close(int, int, void*)>:
c002410c:	b8 00 00 00 00       	mov    eax,0x0
c0024111:	c3                   	ret    

c0024112 <APIC::io_wait()>:
c0024112:	eb 00                	jmp    c0024114 <APIC::io_wait()+0x2>
c0024114:	eb 00                	jmp    c0024116 <APIC::io_wait()+0x4>
c0024116:	90                   	nop
c0024117:	c3                   	ret    

c0024118 <APIC::getBase()>:
c0024118:	55                   	push   ebp
c0024119:	89 e5                	mov    ebp,esp
c002411b:	83 ec 18             	sub    esp,0x18
c002411e:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c0024123:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0024129:	83 e0 08             	and    eax,0x8
c002412c:	84 c0                	test   al,al
c002412e:	75 07                	jne    c0024137 <APIC::getBase()+0x1f>
c0024130:	b8 00 00 00 00       	mov    eax,0x0
c0024135:	eb 21                	jmp    c0024158 <APIC::getBase()+0x40>
c0024137:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c002413c:	83 ec 08             	sub    esp,0x8
c002413f:	6a 1b                	push   0x1b
c0024141:	50                   	push   eax
c0024142:	e8 35 a9 fe ff       	call   c000ea7c <Computer::rdmsr(unsigned int)>
c0024147:	83 c4 10             	add    esp,0x10
c002414a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002414d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0024150:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024153:	25 00 f0 ff ff       	and    eax,0xfffff000
c0024158:	c9                   	leave  
c0024159:	c3                   	ret    

c002415a <APIC::eoi(unsigned char)>:
c002415a:	55                   	push   ebp
c002415b:	89 e5                	mov    ebp,esp
c002415d:	83 ec 28             	sub    esp,0x28
c0024160:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024163:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0024166:	83 ec 0c             	sub    esp,0xc
c0024169:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002416c:	e8 a7 ff ff ff       	call   c0024118 <APIC::getBase()>
c0024171:	83 c4 10             	add    esp,0x10
c0024174:	05 b0 00 00 00       	add    eax,0xb0
c0024179:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002417c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002417f:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0024185:	90                   	nop
c0024186:	c9                   	leave  
c0024187:	c3                   	ret    

c0024188 <APIC::open(int, int, void*)>:
c0024188:	55                   	push   ebp
c0024189:	89 e5                	mov    ebp,esp
c002418b:	57                   	push   edi
c002418c:	56                   	push   esi
c002418d:	53                   	push   ebx
c002418e:	83 ec 2c             	sub    esp,0x2c
c0024191:	83 ec 0c             	sub    esp,0xc
c0024194:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024197:	e8 7c ff ff ff       	call   c0024118 <APIC::getBase()>
c002419c:	83 c4 10             	add    esp,0x10
c002419f:	89 c2                	mov    edx,eax
c00241a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00241a4:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00241aa:	0f b6 f8             	movzx  edi,al
c00241ad:	89 d0                	mov    eax,edx
c00241af:	ba 00 00 00 00       	mov    edx,0x0
c00241b4:	89 c1                	mov    ecx,eax
c00241b6:	80 e5 ff             	and    ch,0xff
c00241b9:	89 cb                	mov    ebx,ecx
c00241bb:	0f b6 f2             	movzx  esi,dl
c00241be:	89 d8                	mov    eax,ebx
c00241c0:	89 f2                	mov    edx,esi
c00241c2:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00241c5:	8d 5f 08             	lea    ebx,[edi+0x8]
c00241c8:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00241cc:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00241d0:	83 e0 00             	and    eax,0x0
c00241d3:	09 d0                	or     eax,edx
c00241d5:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00241d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00241dc:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00241e2:	8d 50 01             	lea    edx,[eax+0x1]
c00241e5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00241e8:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00241ee:	0f b6 d0             	movzx  edx,al
c00241f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00241f4:	83 c2 08             	add    edx,0x8
c00241f7:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00241fb:	0f b6 c9             	movzx  ecx,cl
c00241fe:	81 c9 00 00 01 00    	or     ecx,0x10000
c0024204:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0024208:	83 ec 0c             	sub    esp,0xc
c002420b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002420e:	e8 05 ff ff ff       	call   c0024118 <APIC::getBase()>
c0024213:	83 c4 10             	add    esp,0x10
c0024216:	05 f0 00 00 00       	add    eax,0xf0
c002421b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002421e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024221:	8b 00                	mov    eax,DWORD PTR [eax]
c0024223:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024226:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c002422d:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0024234:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024237:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002423a:	89 10                	mov    DWORD PTR [eax],edx
c002423c:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0024243:	a1 d0 d1 02 c0       	mov    eax,ds:0xc002d1d0
c0024248:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c002424b:	7d 7c                	jge    c00242c9 <APIC::open(int, int, void*)+0x141>
c002424d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024250:	8b 04 85 e0 d1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2e20]
c0024257:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c002425a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002425d:	8b 04 85 e0 d1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2e20]
c0024264:	c1 e8 08             	shr    eax,0x8
c0024267:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c002426b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002426e:	8b 04 85 e0 d1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2e20]
c0024275:	c1 e8 18             	shr    eax,0x18
c0024278:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c002427b:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c002427f:	75 40                	jne    c00242c1 <APIC::open(int, int, void*)+0x139>
c0024281:	83 ec 0c             	sub    esp,0xc
c0024284:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024287:	e8 8c fe ff ff       	call   c0024118 <APIC::getBase()>
c002428c:	83 c4 10             	add    esp,0x10
c002428f:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0024293:	75 07                	jne    c002429c <APIC::open(int, int, void*)+0x114>
c0024295:	ba 60 03 00 00       	mov    edx,0x360
c002429a:	eb 05                	jmp    c00242a1 <APIC::open(int, int, void*)+0x119>
c002429c:	ba 50 03 00 00       	mov    edx,0x350
c00242a1:	01 d0                	add    eax,edx
c00242a3:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00242a6:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00242a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00242ab:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00242ae:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00242b5:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00242b9:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00242bc:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00242bf:	89 10                	mov    DWORD PTR [eax],edx
c00242c1:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00242c4:	e9 7a ff ff ff       	jmp    c0024243 <APIC::open(int, int, void*)+0xbb>
c00242c9:	b8 00 00 00 00       	mov    eax,0x0
c00242ce:	8d 65 f4             	lea    esp,[ebp-0xc]
c00242d1:	5b                   	pop    ebx
c00242d2:	5e                   	pop    esi
c00242d3:	5f                   	pop    edi
c00242d4:	5d                   	pop    ebp
c00242d5:	c3                   	ret    

c00242d6 <IOAPIC::IOAPIC()>:
c00242d6:	83 ec 0c             	sub    esp,0xc
c00242d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00242dd:	83 ec 08             	sub    esp,0x8
c00242e0:	68 04 b6 02 c0       	push   0xc002b604
c00242e5:	50                   	push   eax
c00242e6:	e8 45 fa fe ff       	call   c0013d30 <Device::Device(char const*)>
c00242eb:	83 c4 10             	add    esp,0x10
c00242ee:	ba 2c b7 02 c0       	mov    edx,0xc002b72c
c00242f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00242f7:	89 10                	mov    DWORD PTR [eax],edx
c00242f9:	90                   	nop
c00242fa:	83 c4 0c             	add    esp,0xc
c00242fd:	c3                   	ret    

c00242fe <APIC::APIC()>:
c00242fe:	53                   	push   ebx
c00242ff:	83 ec 18             	sub    esp,0x18
c0024302:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024306:	83 ec 08             	sub    esp,0x8
c0024309:	68 0c b6 02 c0       	push   0xc002b60c
c002430e:	50                   	push   eax
c002430f:	e8 74 01 ff ff       	call   c0014488 <InterruptController::InterruptController(char const*)>
c0024314:	83 c4 10             	add    esp,0x10
c0024317:	ba e4 b6 02 c0       	mov    edx,0xc002b6e4
c002431c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024320:	89 10                	mov    DWORD PTR [eax],edx
c0024322:	a0 a0 ec 02 c0       	mov    al,ds:0xc002eca0
c0024327:	83 f0 01             	xor    eax,0x1
c002432a:	84 c0                	test   al,al
c002432c:	0f 84 a1 00 00 00    	je     c00243d3 <APIC::APIC()+0xd5>
c0024332:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0024337:	a0 80 d2 02 c0       	mov    al,ds:0xc002d280
c002433c:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0024340:	0f 83 86 00 00 00    	jae    c00243cc <APIC::APIC()+0xce>
c0024346:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c002434e:	83 ec 0c             	sub    esp,0xc
c0024351:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0024355:	e8 7a b1 fe ff       	call   c000f4d4 <malloc>
c002435a:	83 c4 10             	add    esp,0x10
c002435d:	89 c3                	mov    ebx,eax
c002435f:	83 ec 0c             	sub    esp,0xc
c0024362:	53                   	push   ebx
c0024363:	e8 6e ff ff ff       	call   c00242d6 <IOAPIC::IOAPIC()>
c0024368:	83 c4 10             	add    esp,0x10
c002436b:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c002436f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0024374:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0024378:	89 14 85 80 ec 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1380],edx
c002437f:	a1 60 ec 02 c0       	mov    eax,ds:0xc002ec60
c0024384:	40                   	inc    eax
c0024385:	a3 60 ec 02 c0       	mov    ds:0xc002ec60,eax
c002438a:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c002438f:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0024395:	83 ec 08             	sub    esp,0x8
c0024398:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002439c:	50                   	push   eax
c002439d:	e8 9e f7 fe ff       	call   c0013b40 <Device::addChild(Device*)>
c00243a2:	83 c4 10             	add    esp,0x10
c00243a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00243a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00243ab:	83 c0 08             	add    eax,0x8
c00243ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00243b0:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00243b5:	6a 00                	push   0x0
c00243b7:	6a 00                	push   0x0
c00243b9:	52                   	push   edx
c00243ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00243be:	ff d0                	call   eax
c00243c0:	83 c4 10             	add    esp,0x10
c00243c3:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00243c7:	e9 6b ff ff ff       	jmp    c0024337 <APIC::APIC()+0x39>
c00243cc:	c6 05 a0 ec 02 c0 01 	mov    BYTE PTR ds:0xc002eca0,0x1
c00243d3:	90                   	nop
c00243d4:	83 c4 18             	add    esp,0x18
c00243d7:	5b                   	pop    ebx
c00243d8:	c3                   	ret    
c00243d9:	90                   	nop

c00243da <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00243da:	55                   	push   ebp
c00243db:	89 e5                	mov    ebp,esp
c00243dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00243e0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00243e6:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00243e9:	72 1d                	jb     c0024408 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00243eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00243ee:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00243f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00243f7:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00243fd:	01 d0                	add    eax,edx
c00243ff:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0024402:	73 04                	jae    c0024408 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0024404:	b0 01                	mov    al,0x1
c0024406:	eb 02                	jmp    c002440a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0024408:	b0 00                	mov    al,0x0
c002440a:	5d                   	pop    ebp
c002440b:	c3                   	ret    

c002440c <IOAPIC::read(int)>:
c002440c:	55                   	push   ebp
c002440d:	89 e5                	mov    ebp,esp
c002440f:	83 ec 10             	sub    esp,0x10
c0024412:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024415:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002441b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002441e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024421:	0f b6 d0             	movzx  edx,al
c0024424:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024427:	89 10                	mov    DWORD PTR [eax],edx
c0024429:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002442c:	83 c0 10             	add    eax,0x10
c002442f:	8b 00                	mov    eax,DWORD PTR [eax]
c0024431:	c9                   	leave  
c0024432:	c3                   	ret    
c0024433:	90                   	nop

c0024434 <IOAPIC::open(int, int, void*)>:
c0024434:	55                   	push   ebp
c0024435:	89 e5                	mov    ebp,esp
c0024437:	57                   	push   edi
c0024438:	56                   	push   esi
c0024439:	53                   	push   ebx
c002443a:	83 ec 0c             	sub    esp,0xc
c002443d:	83 ec 0c             	sub    esp,0xc
c0024440:	68 37 b6 02 c0       	push   0xc002b637
c0024445:	e8 07 e3 fe ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c002444a:	83 c4 10             	add    esp,0x10
c002444d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024450:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024453:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024459:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002445c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024462:	8b 14 85 c0 d2 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2d40]
c0024469:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002446c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0024472:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024475:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002447b:	8b 14 85 40 d3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2cc0]
c0024482:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024485:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002448b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002448e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0024494:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024497:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002449d:	0f b6 f8             	movzx  edi,al
c00244a0:	89 d0                	mov    eax,edx
c00244a2:	ba 00 00 00 00       	mov    edx,0x0
c00244a7:	89 c1                	mov    ecx,eax
c00244a9:	80 e5 ff             	and    ch,0xff
c00244ac:	89 cb                	mov    ebx,ecx
c00244ae:	0f b6 f2             	movzx  esi,dl
c00244b1:	89 d8                	mov    eax,ebx
c00244b3:	89 f2                	mov    edx,esi
c00244b5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00244b8:	8d 5f 08             	lea    ebx,[edi+0x8]
c00244bb:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00244bf:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00244c3:	83 e0 00             	and    eax,0x0
c00244c6:	09 d0                	or     eax,edx
c00244c8:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00244cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00244cf:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00244d5:	8d 50 01             	lea    edx,[eax+0x1]
c00244d8:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00244db:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00244e1:	0f b6 d0             	movzx  edx,al
c00244e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00244e7:	83 c2 08             	add    edx,0x8
c00244ea:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00244ee:	0f b6 c9             	movzx  ecx,cl
c00244f1:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00244f7:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00244fb:	83 ec 08             	sub    esp,0x8
c00244fe:	6a 01                	push   0x1
c0024500:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024503:	e8 04 ff ff ff       	call   c002440c <IOAPIC::read(int)>
c0024508:	83 c4 10             	add    esp,0x10
c002450b:	c1 f8 10             	sar    eax,0x10
c002450e:	0f b6 c0             	movzx  eax,al
c0024511:	8d 50 01             	lea    edx,[eax+0x1]
c0024514:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024517:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002451d:	b8 00 00 00 00       	mov    eax,0x0
c0024522:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024525:	5b                   	pop    ebx
c0024526:	5e                   	pop    esi
c0024527:	5f                   	pop    edi
c0024528:	5d                   	pop    ebp
c0024529:	c3                   	ret    

c002452a <IOAPIC::write(int, int)>:
c002452a:	55                   	push   ebp
c002452b:	89 e5                	mov    ebp,esp
c002452d:	83 ec 10             	sub    esp,0x10
c0024530:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024533:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0024539:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002453c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002453f:	0f b6 d0             	movzx  edx,al
c0024542:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024545:	89 10                	mov    DWORD PTR [eax],edx
c0024547:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002454a:	8d 50 10             	lea    edx,[eax+0x10]
c002454d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0024550:	89 02                	mov    DWORD PTR [edx],eax
c0024552:	90                   	nop
c0024553:	c9                   	leave  
c0024554:	c3                   	ret    
c0024555:	90                   	nop

c0024556 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0024556:	55                   	push   ebp
c0024557:	89 e5                	mov    ebp,esp
c0024559:	53                   	push   ebx
c002455a:	83 ec 2c             	sub    esp,0x2c
c002455d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024560:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0024563:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0024566:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0024569:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002456c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002456f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0024572:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0024575:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024578:	88 d8                	mov    al,bl
c002457a:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c002457d:	88 c8                	mov    al,cl
c002457f:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0024582:	88 d0                	mov    al,dl
c0024584:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0024587:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002458b:	83 c0 08             	add    eax,0x8
c002458e:	01 c0                	add    eax,eax
c0024590:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0024593:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0024597:	83 c0 08             	add    eax,0x8
c002459a:	01 c0                	add    eax,eax
c002459c:	40                   	inc    eax
c002459d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00245a0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00245a3:	50                   	push   eax
c00245a4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00245a7:	e8 60 fe ff ff       	call   c002440c <IOAPIC::read(int)>
c00245ac:	83 c4 08             	add    esp,0x8
c00245af:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00245b2:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c00245b9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00245bc:	c1 e0 18             	shl    eax,0x18
c00245bf:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c00245c2:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00245c5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00245c8:	52                   	push   edx
c00245c9:	50                   	push   eax
c00245ca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00245cd:	e8 58 ff ff ff       	call   c002452a <IOAPIC::write(int, int)>
c00245d2:	83 c4 0c             	add    esp,0xc
c00245d5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00245d8:	50                   	push   eax
c00245d9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00245dc:	e8 2b fe ff ff       	call   c002440c <IOAPIC::read(int)>
c00245e1:	83 c4 08             	add    esp,0x8
c00245e4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00245e7:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c00245ee:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c00245f5:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00245fc:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0024600:	74 09                	je     c002460b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0024602:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0024609:	eb 07                	jmp    c0024612 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c002460b:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0024612:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0024616:	74 09                	je     c0024621 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0024618:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002461f:	eb 07                	jmp    c0024628 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0024621:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0024628:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c002462f:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0024633:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0024636:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0024639:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002463c:	52                   	push   edx
c002463d:	50                   	push   eax
c002463e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024641:	e8 e4 fe ff ff       	call   c002452a <IOAPIC::write(int, int)>
c0024646:	83 c4 0c             	add    esp,0xc
c0024649:	90                   	nop
c002464a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002464d:	c9                   	leave  
c002464e:	c3                   	ret    
c002464f:	90                   	nop

c0024650 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0024650:	55                   	push   ebp
c0024651:	89 e5                	mov    ebp,esp
c0024653:	57                   	push   edi
c0024654:	56                   	push   esi
c0024655:	53                   	push   ebx
c0024656:	83 ec 2c             	sub    esp,0x2c
c0024659:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002465c:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002465f:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0024663:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0024667:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c002466b:	74 5a                	je     c00246c7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002466d:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0024671:	7f 44                	jg     c00246b7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0024673:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024676:	05 80 bb 02 c0       	add    eax,0xc002bb80
c002467b:	8a 00                	mov    al,BYTE PTR [eax]
c002467d:	0f b6 c0             	movzx  eax,al
c0024680:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0024683:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024686:	66 8b 84 00 60 d2 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd2da0]
c002468e:	0f b7 c0             	movzx  eax,ax
c0024691:	83 e0 02             	and    eax,0x2
c0024694:	85 c0                	test   eax,eax
c0024696:	74 04                	je     c002469c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0024698:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c002469c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002469f:	66 8b 84 00 60 d2 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd2da0]
c00246a7:	0f b7 c0             	movzx  eax,ax
c00246aa:	83 e0 08             	and    eax,0x8
c00246ad:	85 c0                	test   eax,eax
c00246af:	74 16                	je     c00246c7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00246b1:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00246b5:	eb 10                	jmp    c00246c7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00246b7:	83 ec 0c             	sub    esp,0xc
c00246ba:	68 48 b6 02 c0       	push   0xc002b648
c00246bf:	e8 a7 51 ff ff       	call   c001986b <Krnl::panic(char const*)>
c00246c4:	83 c4 10             	add    esp,0x10
c00246c7:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c00246cb:	a1 60 ec 02 c0       	mov    eax,ds:0xc002ec60
c00246d0:	83 ec 08             	sub    esp,0x8
c00246d3:	50                   	push   eax
c00246d4:	68 80 b6 02 c0       	push   0xc002b680
c00246d9:	e8 73 e0 fe ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c00246de:	83 c4 10             	add    esp,0x10
c00246e1:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c00246e8:	a1 60 ec 02 c0       	mov    eax,ds:0xc002ec60
c00246ed:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c00246f0:	7d 67                	jge    c0024759 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00246f2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00246f5:	8b 04 85 80 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1380]
c00246fc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00246ff:	83 ec 08             	sub    esp,0x8
c0024702:	52                   	push   edx
c0024703:	50                   	push   eax
c0024704:	e8 d1 fc ff ff       	call   c00243da <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0024709:	83 c4 10             	add    esp,0x10
c002470c:	84 c0                	test   al,al
c002470e:	74 44                	je     c0024754 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0024710:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024713:	8b 1c 85 80 ec 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd1380]
c002471a:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c002471e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0024721:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0024725:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024728:	83 c0 20             	add    eax,0x20
c002472b:	0f b6 f0             	movzx  esi,al
c002472e:	b8 00 00 00 00       	mov    eax,0x0
c0024733:	99                   	cdq    
c0024734:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024737:	0f b6 c9             	movzx  ecx,cl
c002473a:	83 ec 04             	sub    esp,0x4
c002473d:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0024740:	57                   	push   edi
c0024741:	56                   	push   esi
c0024742:	52                   	push   edx
c0024743:	50                   	push   eax
c0024744:	51                   	push   ecx
c0024745:	53                   	push   ebx
c0024746:	e8 0b fe ff ff       	call   c0024556 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c002474b:	83 c4 20             	add    esp,0x20
c002474e:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0024752:	eb 05                	jmp    c0024759 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0024754:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0024757:	eb 8f                	jmp    c00246e8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0024759:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c002475c:	83 f0 01             	xor    eax,0x1
c002475f:	84 c0                	test   al,al
c0024761:	74 10                	je     c0024773 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0024763:	83 ec 0c             	sub    esp,0xc
c0024766:	68 97 b6 02 c0       	push   0xc002b697
c002476b:	e8 fb 50 ff ff       	call   c001986b <Krnl::panic(char const*)>
c0024770:	83 c4 10             	add    esp,0x10
c0024773:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0024777:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c002477e:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0024782:	7f 65                	jg     c00247e9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0024784:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024787:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002478a:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0024791:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024794:	01 ca                	add    edx,ecx
c0024796:	83 c2 54             	add    edx,0x54
c0024799:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c002479d:	85 c0                	test   eax,eax
c002479f:	75 43                	jne    c00247e4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c00247a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00247a4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00247a7:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00247ae:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00247b1:	01 ca                	add    edx,ecx
c00247b3:	8d 4a 54             	lea    ecx,[edx+0x54]
c00247b6:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00247b9:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00247bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00247c0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00247c3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00247ca:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00247cd:	01 ca                	add    edx,ecx
c00247cf:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00247d5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00247d8:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00247dc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00247df:	83 e8 20             	sub    eax,0x20
c00247e2:	eb 1a                	jmp    c00247fe <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c00247e4:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c00247e7:	eb 95                	jmp    c002477e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c00247e9:	83 ec 0c             	sub    esp,0xc
c00247ec:	68 a4 b6 02 c0       	push   0xc002b6a4
c00247f1:	e8 75 50 ff ff       	call   c001986b <Krnl::panic(char const*)>
c00247f6:	83 c4 10             	add    esp,0x10
c00247f9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00247fe:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024801:	5b                   	pop    ebx
c0024802:	5e                   	pop    esi
c0024803:	5f                   	pop    edi
c0024804:	5d                   	pop    ebp
c0024805:	c3                   	ret    

c0024806 <PIC::disable()>:
c0024806:	55                   	push   ebp
c0024807:	89 e5                	mov    ebp,esp
c0024809:	83 ec 10             	sub    esp,0x10
c002480c:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0024812:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0024816:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0024819:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c002481d:	ee                   	out    dx,al
c002481e:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0024824:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0024828:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c002482b:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c002482f:	ee                   	out    dx,al
c0024830:	90                   	nop
c0024831:	c9                   	leave  
c0024832:	c3                   	ret    
c0024833:	90                   	nop

c0024834 <PIC::close(int, int, void*)>:
c0024834:	55                   	push   ebp
c0024835:	89 e5                	mov    ebp,esp
c0024837:	83 ec 08             	sub    esp,0x8
c002483a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002483d:	8b 00                	mov    eax,DWORD PTR [eax]
c002483f:	83 c0 3c             	add    eax,0x3c
c0024842:	8b 00                	mov    eax,DWORD PTR [eax]
c0024844:	83 ec 0c             	sub    esp,0xc
c0024847:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002484a:	ff d0                	call   eax
c002484c:	83 c4 10             	add    esp,0x10
c002484f:	b8 00 00 00 00       	mov    eax,0x0
c0024854:	c9                   	leave  
c0024855:	c3                   	ret    

c0024856 <PIC::PIC()>:
c0024856:	83 ec 0c             	sub    esp,0xc
c0024859:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002485d:	83 ec 08             	sub    esp,0x8
c0024860:	68 50 b7 02 c0       	push   0xc002b750
c0024865:	50                   	push   eax
c0024866:	e8 1d fc fe ff       	call   c0014488 <InterruptController::InterruptController(char const*)>
c002486b:	83 c4 10             	add    esp,0x10
c002486e:	ba 7c b7 02 c0       	mov    edx,0xc002b77c
c0024873:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024877:	89 10                	mov    DWORD PTR [eax],edx
c0024879:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002487d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024883:	0f b6 d0             	movzx  edx,al
c0024886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002488a:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0024891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024895:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002489b:	0f b6 d0             	movzx  edx,al
c002489e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248a2:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00248a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248ab:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00248b1:	8d 50 01             	lea    edx,[eax+0x1]
c00248b4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00248b8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00248be:	0f b6 d0             	movzx  edx,al
c00248c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248c5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00248c9:	83 e1 3f             	and    ecx,0x3f
c00248cc:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00248d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248d4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00248da:	0f b6 d0             	movzx  edx,al
c00248dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248e1:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c00248e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248ec:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00248f2:	0f b6 d0             	movzx  edx,al
c00248f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248f9:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00248fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024902:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024908:	8d 50 01             	lea    edx,[eax+0x1]
c002490b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002490f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0024915:	0f b6 d0             	movzx  edx,al
c0024918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002491c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0024920:	83 e1 3f             	and    ecx,0x3f
c0024923:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0024927:	90                   	nop
c0024928:	83 c4 0c             	add    esp,0xc
c002492b:	c3                   	ret    

c002492c <PIC::ioWait()>:
c002492c:	eb 00                	jmp    c002492e <PIC::ioWait()+0x2>
c002492e:	eb 00                	jmp    c0024930 <PIC::ioWait()+0x4>
c0024930:	90                   	nop
c0024931:	c3                   	ret    

c0024932 <PIC::getIRQReg(int)>:
c0024932:	55                   	push   ebp
c0024933:	89 e5                	mov    ebp,esp
c0024935:	83 ec 10             	sub    esp,0x10
c0024938:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002493b:	0f b6 c0             	movzx  eax,al
c002493e:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0024944:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0024947:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002494a:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002494e:	ee                   	out    dx,al
c002494f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024952:	0f b6 c0             	movzx  eax,al
c0024955:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002495b:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c002495e:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0024961:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0024965:	ee                   	out    dx,al
c0024966:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c002496c:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0024970:	89 c2                	mov    edx,eax
c0024972:	ec                   	in     al,dx
c0024973:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0024976:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0024979:	0f b6 c0             	movzx  eax,al
c002497c:	c1 e0 08             	shl    eax,0x8
c002497f:	89 c1                	mov    ecx,eax
c0024981:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0024987:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c002498b:	89 c2                	mov    edx,eax
c002498d:	ec                   	in     al,dx
c002498e:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0024991:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0024994:	0f b6 c0             	movzx  eax,al
c0024997:	09 c8                	or     eax,ecx
c0024999:	c9                   	leave  
c002499a:	c3                   	ret    
c002499b:	90                   	nop

c002499c <PIC::eoi(unsigned char)>:
c002499c:	55                   	push   ebp
c002499d:	89 e5                	mov    ebp,esp
c002499f:	83 ec 14             	sub    esp,0x14
c00249a2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00249a5:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00249a8:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00249ac:	75 1e                	jne    c00249cc <PIC::eoi(unsigned char)+0x30>
c00249ae:	6a 0b                	push   0xb
c00249b0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00249b3:	e8 7a ff ff ff       	call   c0024932 <PIC::getIRQReg(int)>
c00249b8:	83 c4 08             	add    esp,0x8
c00249bb:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00249bf:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00249c3:	25 80 00 00 00       	and    eax,0x80
c00249c8:	85 c0                	test   eax,eax
c00249ca:	74 5f                	je     c0024a2b <PIC::eoi(unsigned char)+0x8f>
c00249cc:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c00249d0:	75 2d                	jne    c00249ff <PIC::eoi(unsigned char)+0x63>
c00249d2:	6a 0b                	push   0xb
c00249d4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00249d7:	e8 56 ff ff ff       	call   c0024932 <PIC::getIRQReg(int)>
c00249dc:	83 c4 08             	add    esp,0x8
c00249df:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00249e3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00249e6:	66 85 c0             	test   ax,ax
c00249e9:	78 14                	js     c00249ff <PIC::eoi(unsigned char)+0x63>
c00249eb:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c00249f1:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c00249f5:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00249f8:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00249fc:	ee                   	out    dx,al
c00249fd:	eb 2d                	jmp    c0024a2c <PIC::eoi(unsigned char)+0x90>
c00249ff:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0024a03:	76 12                	jbe    c0024a17 <PIC::eoi(unsigned char)+0x7b>
c0024a05:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0024a0b:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0024a0f:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0024a12:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0024a16:	ee                   	out    dx,al
c0024a17:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0024a1d:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0024a21:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0024a24:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0024a28:	ee                   	out    dx,al
c0024a29:	eb 01                	jmp    c0024a2c <PIC::eoi(unsigned char)+0x90>
c0024a2b:	90                   	nop
c0024a2c:	c9                   	leave  
c0024a2d:	c3                   	ret    

c0024a2e <PIC::remap()>:
c0024a2e:	55                   	push   ebp
c0024a2f:	89 e5                	mov    ebp,esp
c0024a31:	83 ec 48             	sub    esp,0x48
c0024a34:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0024a3b:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0024a42:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0024a48:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0024a4b:	89 c2                	mov    edx,eax
c0024a4d:	ec                   	in     al,dx
c0024a4e:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0024a51:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0024a54:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0024a57:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0024a5d:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0024a60:	89 c2                	mov    edx,eax
c0024a62:	ec                   	in     al,dx
c0024a63:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0024a66:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0024a69:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0024a6c:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0024a72:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0024a76:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0024a79:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0024a7c:	ee                   	out    dx,al
c0024a7d:	83 ec 0c             	sub    esp,0xc
c0024a80:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024a83:	e8 a4 fe ff ff       	call   c002492c <PIC::ioWait()>
c0024a88:	83 c4 10             	add    esp,0x10
c0024a8b:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0024a91:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0024a95:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0024a98:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0024a9b:	ee                   	out    dx,al
c0024a9c:	83 ec 0c             	sub    esp,0xc
c0024a9f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024aa2:	e8 85 fe ff ff       	call   c002492c <PIC::ioWait()>
c0024aa7:	83 c4 10             	add    esp,0x10
c0024aaa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0024aad:	0f b6 c0             	movzx  eax,al
c0024ab0:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0024ab6:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0024ab9:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0024abc:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0024abf:	ee                   	out    dx,al
c0024ac0:	83 ec 0c             	sub    esp,0xc
c0024ac3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024ac6:	e8 61 fe ff ff       	call   c002492c <PIC::ioWait()>
c0024acb:	83 c4 10             	add    esp,0x10
c0024ace:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024ad1:	0f b6 c0             	movzx  eax,al
c0024ad4:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0024ada:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0024add:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0024ae0:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0024ae3:	ee                   	out    dx,al
c0024ae4:	83 ec 0c             	sub    esp,0xc
c0024ae7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024aea:	e8 3d fe ff ff       	call   c002492c <PIC::ioWait()>
c0024aef:	83 c4 10             	add    esp,0x10
c0024af2:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0024af8:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0024afc:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0024aff:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0024b02:	ee                   	out    dx,al
c0024b03:	83 ec 0c             	sub    esp,0xc
c0024b06:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024b09:	e8 1e fe ff ff       	call   c002492c <PIC::ioWait()>
c0024b0e:	83 c4 10             	add    esp,0x10
c0024b11:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0024b17:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0024b1b:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0024b1e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024b21:	ee                   	out    dx,al
c0024b22:	83 ec 0c             	sub    esp,0xc
c0024b25:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024b28:	e8 ff fd ff ff       	call   c002492c <PIC::ioWait()>
c0024b2d:	83 c4 10             	add    esp,0x10
c0024b30:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0024b36:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0024b3a:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0024b3d:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0024b40:	ee                   	out    dx,al
c0024b41:	83 ec 0c             	sub    esp,0xc
c0024b44:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024b47:	e8 e0 fd ff ff       	call   c002492c <PIC::ioWait()>
c0024b4c:	83 c4 10             	add    esp,0x10
c0024b4f:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0024b55:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0024b59:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0024b5c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0024b5f:	ee                   	out    dx,al
c0024b60:	83 ec 0c             	sub    esp,0xc
c0024b63:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024b66:	e8 c1 fd ff ff       	call   c002492c <PIC::ioWait()>
c0024b6b:	83 c4 10             	add    esp,0x10
c0024b6e:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0024b72:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0024b78:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0024b7b:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0024b7e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0024b81:	ee                   	out    dx,al
c0024b82:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0024b86:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0024b8c:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0024b8f:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0024b92:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0024b95:	ee                   	out    dx,al
c0024b96:	90                   	nop
c0024b97:	c9                   	leave  
c0024b98:	c3                   	ret    
c0024b99:	90                   	nop

c0024b9a <PIC::open(int, int, void*)>:
c0024b9a:	55                   	push   ebp
c0024b9b:	89 e5                	mov    ebp,esp
c0024b9d:	83 ec 18             	sub    esp,0x18
c0024ba0:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0024ba6:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0024baa:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0024bad:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0024bb1:	ee                   	out    dx,al
c0024bb2:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0024bb8:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0024bbc:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0024bbf:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0024bc3:	ee                   	out    dx,al
c0024bc4:	83 ec 0c             	sub    esp,0xc
c0024bc7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024bca:	e8 5f fe ff ff       	call   c0024a2e <PIC::remap()>
c0024bcf:	83 c4 10             	add    esp,0x10
c0024bd2:	b8 00 00 00 00       	mov    eax,0x0
c0024bd7:	c9                   	leave  
c0024bd8:	c3                   	ret    
c0024bd9:	90                   	nop

c0024bda <APICTimer::close(int, int, void*)>:
c0024bda:	b8 00 00 00 00       	mov    eax,0x0
c0024bdf:	c3                   	ret    

c0024be0 <apicTimerHandler(regs*, void*)>:
c0024be0:	83 ec 0c             	sub    esp,0xc
c0024be3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024be7:	8b 00                	mov    eax,DWORD PTR [eax]
c0024be9:	99                   	cdq    
c0024bea:	52                   	push   edx
c0024beb:	50                   	push   eax
c0024bec:	6a 00                	push   0x0
c0024bee:	68 00 ca 9a 3b       	push   0x3b9aca00
c0024bf3:	e8 84 07 00 00       	call   c002537c <__udivdi3>
c0024bf8:	83 c4 10             	add    esp,0x10
c0024bfb:	83 ec 08             	sub    esp,0x8
c0024bfe:	52                   	push   edx
c0024bff:	50                   	push   eax
c0024c00:	e8 82 17 ff ff       	call   c0016387 <timerHandler(unsigned long long)>
c0024c05:	83 c4 10             	add    esp,0x10
c0024c08:	90                   	nop
c0024c09:	83 c4 0c             	add    esp,0xc
c0024c0c:	c3                   	ret    
c0024c0d:	90                   	nop

c0024c0e <APICTimer::write(int)>:
c0024c0e:	53                   	push   ebx
c0024c0f:	83 ec 28             	sub    esp,0x28
c0024c12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024c16:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0024c1a:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024c20:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c0024c25:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024c2b:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0024c31:	83 ec 0c             	sub    esp,0xc
c0024c34:	50                   	push   eax
c0024c35:	e8 de f4 ff ff       	call   c0024118 <APIC::getBase()>
c0024c3a:	83 c4 10             	add    esp,0x10
c0024c3d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024c41:	a1 90 cf 02 c0       	mov    eax,ds:0xc002cf90
c0024c46:	8b 15 94 cf 02 c0    	mov    edx,DWORD PTR ds:0xc002cf94
c0024c4c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024c50:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0024c54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024c58:	05 e0 03 00 00       	add    eax,0x3e0
c0024c5d:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0024c63:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024c67:	05 80 03 00 00       	add    eax,0x380
c0024c6c:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0024c72:	fb                   	sti    
c0024c73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c77:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0024c7b:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0024c80:	83 d2 00             	adc    edx,0x0
c0024c83:	89 c1                	mov    ecx,eax
c0024c85:	89 d3                	mov    ebx,edx
c0024c87:	a1 90 cf 02 c0       	mov    eax,ds:0xc002cf90
c0024c8c:	8b 15 94 cf 02 c0    	mov    edx,DWORD PTR ds:0xc002cf94
c0024c92:	39 c8                	cmp    eax,ecx
c0024c94:	89 d0                	mov    eax,edx
c0024c96:	19 d8                	sbb    eax,ebx
c0024c98:	73 02                	jae    c0024c9c <APICTimer::write(int)+0x8e>
c0024c9a:	eb d7                	jmp    c0024c73 <APICTimer::write(int)+0x65>
c0024c9c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024ca0:	05 20 03 00 00       	add    eax,0x320
c0024ca5:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0024cab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024caf:	05 90 03 00 00       	add    eax,0x390
c0024cb4:	8b 00                	mov    eax,DWORD PTR [eax]
c0024cb6:	f7 d0                	not    eax
c0024cb8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024cbc:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024cc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024cc4:	ba 00 00 00 00       	mov    edx,0x0
c0024cc9:	f7 f3                	div    ebx
c0024ccb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024ccf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024cd3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0024cd9:	0d 00 00 02 00       	or     eax,0x20000
c0024cde:	89 c2                	mov    edx,eax
c0024ce0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024ce4:	05 20 03 00 00       	add    eax,0x320
c0024ce9:	89 10                	mov    DWORD PTR [eax],edx
c0024ceb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024cef:	05 e0 03 00 00       	add    eax,0x3e0
c0024cf4:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0024cfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024cfe:	05 80 03 00 00       	add    eax,0x380
c0024d03:	89 c2                	mov    edx,eax
c0024d05:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024d09:	89 02                	mov    DWORD PTR [edx],eax
c0024d0b:	90                   	nop
c0024d0c:	83 c4 28             	add    esp,0x28
c0024d0f:	5b                   	pop    ebx
c0024d10:	c3                   	ret    
c0024d11:	90                   	nop

c0024d12 <APICTimer::open(int, int, void*)>:
c0024d12:	57                   	push   edi
c0024d13:	56                   	push   esi
c0024d14:	53                   	push   ebx
c0024d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d19:	8b 00                	mov    eax,DWORD PTR [eax]
c0024d1b:	83 c0 24             	add    eax,0x24
c0024d1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0024d20:	83 ec 08             	sub    esp,0x8
c0024d23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024d27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024d2b:	ff d0                	call   eax
c0024d2d:	83 c4 10             	add    esp,0x10
c0024d30:	a1 28 c9 02 c0       	mov    eax,ds:0xc002c928
c0024d35:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024d3b:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0024d41:	83 ec 0c             	sub    esp,0xc
c0024d44:	50                   	push   eax
c0024d45:	e8 ce f3 ff ff       	call   c0024118 <APIC::getBase()>
c0024d4a:	83 c4 10             	add    esp,0x10
c0024d4d:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0024d53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d57:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024d5d:	0f b6 f8             	movzx  edi,al
c0024d60:	89 d0                	mov    eax,edx
c0024d62:	ba 00 00 00 00       	mov    edx,0x0
c0024d67:	89 c1                	mov    ecx,eax
c0024d69:	80 e5 ff             	and    ch,0xff
c0024d6c:	89 cb                	mov    ebx,ecx
c0024d6e:	0f b6 f2             	movzx  esi,dl
c0024d71:	89 d8                	mov    eax,ebx
c0024d73:	89 f2                	mov    edx,esi
c0024d75:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024d79:	8d 5f 08             	lea    ebx,[edi+0x8]
c0024d7c:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0024d80:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0024d84:	83 e0 00             	and    eax,0x0
c0024d87:	09 d0                	or     eax,edx
c0024d89:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0024d8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d91:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024d97:	8d 50 01             	lea    edx,[eax+0x1]
c0024d9a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024d9e:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0024da4:	0f b6 d0             	movzx  edx,al
c0024da7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024dab:	83 c2 08             	add    edx,0x8
c0024dae:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0024db2:	0f b6 c9             	movzx  ecx,cl
c0024db5:	81 c9 00 00 01 00    	or     ecx,0x10000
c0024dbb:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0024dbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024dc3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0024dc7:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0024dcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024dd1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024dd5:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0024ddb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024ddf:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0024de5:	83 ec 0c             	sub    esp,0xc
c0024de8:	51                   	push   ecx
c0024de9:	6a 01                	push   0x1
c0024deb:	68 e0 4b 02 c0       	push   0xc0024be0
c0024df0:	52                   	push   edx
c0024df1:	50                   	push   eax
c0024df2:	e8 cd ec fe ff       	call   c0013ac4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0024df7:	83 c4 20             	add    esp,0x20
c0024dfa:	89 c2                	mov    edx,eax
c0024dfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e00:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0024e06:	b8 00 00 00 00       	mov    eax,0x0
c0024e0b:	5b                   	pop    ebx
c0024e0c:	5e                   	pop    esi
c0024e0d:	5f                   	pop    edi
c0024e0e:	c3                   	ret    
c0024e0f:	90                   	nop

c0024e10 <APICTimer::APICTimer()>:
c0024e10:	83 ec 0c             	sub    esp,0xc
c0024e13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e17:	83 ec 08             	sub    esp,0x8
c0024e1a:	68 bc b7 02 c0       	push   0xc002b7bc
c0024e1f:	50                   	push   eax
c0024e20:	e8 d3 14 ff ff       	call   c00162f8 <Timer::Timer(char const*)>
c0024e25:	83 c4 10             	add    esp,0x10
c0024e28:	ba d0 b7 02 c0       	mov    edx,0xc002b7d0
c0024e2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e31:	89 10                	mov    DWORD PTR [eax],edx
c0024e33:	90                   	nop
c0024e34:	83 c4 0c             	add    esp,0xc
c0024e37:	c3                   	ret    

c0024e38 <PIT::write(int)>:
c0024e38:	83 ec 10             	sub    esp,0x10
c0024e3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024e3f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0024e43:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024e49:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024e4d:	a3 a4 ec 02 c0       	mov    ds:0xc002eca4,eax
c0024e52:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0024e57:	99                   	cdq    
c0024e58:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0024e5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024e60:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0024e67:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0024e6c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0024e70:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0024e75:	ee                   	out    dx,al
c0024e76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024e7a:	0f b6 c0             	movzx  eax,al
c0024e7d:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0024e84:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0024e88:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0024e8c:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0024e91:	ee                   	out    dx,al
c0024e92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024e96:	c1 f8 08             	sar    eax,0x8
c0024e99:	0f b6 c0             	movzx  eax,al
c0024e9c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0024ea3:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0024ea7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0024eab:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0024eb0:	ee                   	out    dx,al
c0024eb1:	90                   	nop
c0024eb2:	83 c4 10             	add    esp,0x10
c0024eb5:	c3                   	ret    

c0024eb6 <pitHandler(regs*, void*)>:
c0024eb6:	83 ec 0c             	sub    esp,0xc
c0024eb9:	a1 a4 ec 02 c0       	mov    eax,ds:0xc002eca4
c0024ebe:	99                   	cdq    
c0024ebf:	52                   	push   edx
c0024ec0:	50                   	push   eax
c0024ec1:	6a 00                	push   0x0
c0024ec3:	68 00 ca 9a 3b       	push   0x3b9aca00
c0024ec8:	e8 af 04 00 00       	call   c002537c <__udivdi3>
c0024ecd:	83 c4 10             	add    esp,0x10
c0024ed0:	83 ec 08             	sub    esp,0x8
c0024ed3:	52                   	push   edx
c0024ed4:	50                   	push   eax
c0024ed5:	e8 ad 14 ff ff       	call   c0016387 <timerHandler(unsigned long long)>
c0024eda:	83 c4 10             	add    esp,0x10
c0024edd:	90                   	nop
c0024ede:	83 c4 0c             	add    esp,0xc
c0024ee1:	c3                   	ret    

c0024ee2 <PIT::open(int, int, void*)>:
c0024ee2:	83 ec 0c             	sub    esp,0xc
c0024ee5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ee9:	8b 00                	mov    eax,DWORD PTR [eax]
c0024eeb:	83 c0 24             	add    eax,0x24
c0024eee:	8b 00                	mov    eax,DWORD PTR [eax]
c0024ef0:	83 ec 08             	sub    esp,0x8
c0024ef3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024ef7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024efb:	ff d0                	call   eax
c0024efd:	83 c4 10             	add    esp,0x10
c0024f00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f04:	83 ec 0c             	sub    esp,0xc
c0024f07:	6a 00                	push   0x0
c0024f09:	6a 01                	push   0x1
c0024f0b:	68 b6 4e 02 c0       	push   0xc0024eb6
c0024f10:	6a 00                	push   0x0
c0024f12:	50                   	push   eax
c0024f13:	e8 ac eb fe ff       	call   c0013ac4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0024f18:	83 c4 20             	add    esp,0x20
c0024f1b:	89 c2                	mov    edx,eax
c0024f1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f21:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0024f27:	b8 00 00 00 00       	mov    eax,0x0
c0024f2c:	83 c4 0c             	add    esp,0xc
c0024f2f:	c3                   	ret    

c0024f30 <PIT::close(int, int, void*)>:
c0024f30:	83 ec 0c             	sub    esp,0xc
c0024f33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f37:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0024f41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f45:	6a 01                	push   0x1
c0024f47:	68 b6 4e 02 c0       	push   0xc0024eb6
c0024f4c:	6a 00                	push   0x0
c0024f4e:	50                   	push   eax
c0024f4f:	e8 ae eb fe ff       	call   c0013b02 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0024f54:	83 c4 10             	add    esp,0x10
c0024f57:	b8 00 00 00 00       	mov    eax,0x0
c0024f5c:	83 c4 0c             	add    esp,0xc
c0024f5f:	c3                   	ret    

c0024f60 <PIT::PIT()>:
c0024f60:	83 ec 0c             	sub    esp,0xc
c0024f63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f67:	83 ec 08             	sub    esp,0x8
c0024f6a:	68 f8 b7 02 c0       	push   0xc002b7f8
c0024f6f:	50                   	push   eax
c0024f70:	e8 83 13 ff ff       	call   c00162f8 <Timer::Timer(char const*)>
c0024f75:	83 c4 10             	add    esp,0x10
c0024f78:	ba 20 b8 02 c0       	mov    edx,0xc002b820
c0024f7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f81:	89 10                	mov    DWORD PTR [eax],edx
c0024f83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f87:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024f8d:	0f b6 d0             	movzx  edx,al
c0024f90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f94:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0024f9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f9f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024fa5:	0f b6 d0             	movzx  edx,al
c0024fa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fac:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0024fb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fb5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024fbb:	8d 50 01             	lea    edx,[eax+0x1]
c0024fbe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024fc2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0024fc8:	0f b6 d0             	movzx  edx,al
c0024fcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fcf:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0024fd3:	83 e1 3f             	and    ecx,0x3f
c0024fd6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0024fda:	90                   	nop
c0024fdb:	83 c4 0c             	add    esp,0xc
c0024fde:	c3                   	ret    
c0024fdf:	90                   	nop

c0024fe0 <avxDetect>:
c0024fe0:	b8 00 00 00 00       	mov    eax,0x0
c0024fe5:	c3                   	ret    

c0024fe6 <avxSave>:
c0024fe6:	c3                   	ret    

c0024fe7 <avxLoad>:
c0024fe7:	c3                   	ret    

c0024fe8 <avxInit>:
c0024fe8:	c3                   	ret    

c0024fe9 <avxClose>:
c0024fe9:	c3                   	ret    

c0024fea <wouldSheSayYes>:
c0024fea:	c3                   	ret    
c0024feb:	49                   	dec    ecx
c0024fec:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0024ff0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0024ff4:	75 20                	jne    c0025016 <sseDetect.noSSE+0x1>
c0024ff6:	4e                   	dec    esi
c0024ff7:	79 61                	jns    c002505a <x87Detect+0x14>
c0024ff9:	68 2e 2e 2e 00       	push   0x2e2e2e
c0024ffe:	66 90                	xchg   ax,ax

c0025000 <absolutelyNoChanceInHell>:
c0025000:	b8 01 00 00 00       	mov    eax,0x1
c0025005:	0f a2                	cpuid  
c0025007:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002500d:	74 06                	je     c0025015 <sseDetect.noSSE>
c002500f:	b8 01 00 00 00       	mov    eax,0x1
c0025014:	c3                   	ret    

c0025015 <sseDetect.noSSE>:
c0025015:	31 c0                	xor    eax,eax
c0025017:	c3                   	ret    

c0025018 <sseSave>:
c0025018:	0f ae 44 24 08       	fxsave [esp+0x8]
c002501d:	c3                   	ret    

c002501e <sseLoad>:
c002501e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0025023:	c3                   	ret    

c0025024 <sseInit>:
c0025024:	e8 43 00 00 00       	call   c002506c <x87Init>
c0025029:	0f 20 e0             	mov    eax,cr4
c002502c:	66 0d 00 06          	or     ax,0x600
c0025030:	0f 22 e0             	mov    cr4,eax
c0025033:	c3                   	ret    

c0025034 <sseClose>:
c0025034:	c3                   	ret    
c0025035:	66 90                	xchg   ax,ax
c0025037:	66 90                	xchg   ax,ax
c0025039:	66 90                	xchg   ax,ax
c002503b:	66 90                	xchg   ax,ax
c002503d:	66 90                	xchg   ax,ax
c002503f:	90                   	nop

c0025040 <value_37F>:
c0025040:	7f 03                	jg     c0025045 <value_37A+0x1>

c0025042 <value_37E>:
c0025042:	7e 03                	jle    c0025047 <x87Detect+0x1>

c0025044 <value_37A>:
c0025044:	7a 03                	jp     c0025049 <x87Detect+0x3>

c0025046 <x87Detect>:
c0025046:	b8 01 00 00 00       	mov    eax,0x1
c002504b:	0f a2                	cpuid  
c002504d:	f7 c2 01 00 00 00    	test   edx,0x1
c0025053:	74 06                	je     c002505b <x87Detect.nox87>
c0025055:	b8 01 00 00 00       	mov    eax,0x1
c002505a:	c3                   	ret    

c002505b <x87Detect.nox87>:
c002505b:	b8 00 00 00 00       	mov    eax,0x0
c0025060:	c3                   	ret    

c0025061 <x87Save>:
c0025061:	9b dd 74 24 08       	fsave  [esp+0x8]
c0025066:	c3                   	ret    

c0025067 <x87Load>:
c0025067:	dd 64 24 08          	frstor [esp+0x8]
c002506b:	c3                   	ret    

c002506c <x87Init>:
c002506c:	9b db e3             	finit  
c002506f:	0f 20 c0             	mov    eax,cr0
c0025072:	66 25 fb ff          	and    ax,0xfffb
c0025076:	66 0d 22 00          	or     ax,0x22
c002507a:	0f 22 c0             	mov    cr0,eax
c002507d:	0f 06                	clts   
c002507f:	d9 2d 44 50 02 c0    	fldcw  WORD PTR ds:0xc0025044
c0025085:	c3                   	ret    

c0025086 <x87Close>:
c0025086:	c3                   	ret    
c0025087:	90                   	nop

c0025088 <__do_global_ctors_aux>:
c0025088:	a1 7c 7b 02 c0       	mov    eax,ds:0xc0027b7c
c002508d:	83 f8 ff             	cmp    eax,0xffffffff
c0025090:	74 1a                	je     c00250ac <__do_global_ctors_aux+0x24>
c0025092:	55                   	push   ebp
c0025093:	89 e5                	mov    ebp,esp
c0025095:	53                   	push   ebx
c0025096:	52                   	push   edx
c0025097:	bb 7c 7b 02 c0       	mov    ebx,0xc0027b7c
c002509c:	ff d0                	call   eax
c002509e:	83 eb 04             	sub    ebx,0x4
c00250a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00250a3:	83 f8 ff             	cmp    eax,0xffffffff
c00250a6:	75 f4                	jne    c002509c <__do_global_ctors_aux+0x14>
c00250a8:	58                   	pop    eax
c00250a9:	5b                   	pop    ebx
c00250aa:	5d                   	pop    ebp
c00250ab:	c3                   	ret    
c00250ac:	c3                   	ret    
c00250ad:	66 90                	xchg   ax,ax
c00250af:	90                   	nop

c00250b0 <__divdi3>:
c00250b0:	55                   	push   ebp
c00250b1:	57                   	push   edi
c00250b2:	56                   	push   esi
c00250b3:	53                   	push   ebx
c00250b4:	83 ec 1c             	sub    esp,0x1c
c00250b7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00250bb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00250bf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00250c2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00250c6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00250ca:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00250ce:	85 db                	test   ebx,ebx
c00250d0:	0f 88 8e 00 00 00    	js     c0025164 <__divdi3+0xb4>
c00250d6:	89 dd                	mov    ebp,ebx
c00250d8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00250e0:	89 d3                	mov    ebx,edx
c00250e2:	85 d2                	test   edx,edx
c00250e4:	79 0d                	jns    c00250f3 <__divdi3+0x43>
c00250e6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00250ea:	f7 d8                	neg    eax
c00250ec:	83 d2 00             	adc    edx,0x0
c00250ef:	f7 da                	neg    edx
c00250f1:	89 d3                	mov    ebx,edx
c00250f3:	89 c7                	mov    edi,eax
c00250f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00250f8:	85 db                	test   ebx,ebx
c00250fa:	75 48                	jne    c0025144 <__divdi3+0x94>
c00250fc:	39 ef                	cmp    edi,ebp
c00250fe:	76 24                	jbe    c0025124 <__divdi3+0x74>
c0025100:	89 ea                	mov    edx,ebp
c0025102:	f7 f7                	div    edi
c0025104:	89 c1                	mov    ecx,eax
c0025106:	31 f6                	xor    esi,esi
c0025108:	89 c8                	mov    eax,ecx
c002510a:	89 f2                	mov    edx,esi
c002510c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0025110:	85 c9                	test   ecx,ecx
c0025112:	74 07                	je     c002511b <__divdi3+0x6b>
c0025114:	f7 d8                	neg    eax
c0025116:	83 d2 00             	adc    edx,0x0
c0025119:	f7 da                	neg    edx
c002511b:	83 c4 1c             	add    esp,0x1c
c002511e:	5b                   	pop    ebx
c002511f:	5e                   	pop    esi
c0025120:	5f                   	pop    edi
c0025121:	5d                   	pop    ebp
c0025122:	c3                   	ret    
c0025123:	90                   	nop
c0025124:	85 ff                	test   edi,edi
c0025126:	75 0b                	jne    c0025133 <__divdi3+0x83>
c0025128:	b8 01 00 00 00       	mov    eax,0x1
c002512d:	31 d2                	xor    edx,edx
c002512f:	f7 f3                	div    ebx
c0025131:	89 c7                	mov    edi,eax
c0025133:	31 d2                	xor    edx,edx
c0025135:	89 e8                	mov    eax,ebp
c0025137:	f7 f7                	div    edi
c0025139:	89 c6                	mov    esi,eax
c002513b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002513e:	f7 f7                	div    edi
c0025140:	89 c1                	mov    ecx,eax
c0025142:	eb c4                	jmp    c0025108 <__divdi3+0x58>
c0025144:	39 eb                	cmp    ebx,ebp
c0025146:	77 3c                	ja     c0025184 <__divdi3+0xd4>
c0025148:	0f bd f3             	bsr    esi,ebx
c002514b:	83 f6 1f             	xor    esi,0x1f
c002514e:	75 40                	jne    c0025190 <__divdi3+0xe0>
c0025150:	39 eb                	cmp    ebx,ebp
c0025152:	72 09                	jb     c002515d <__divdi3+0xad>
c0025154:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0025157:	0f 87 97 00 00 00    	ja     c00251f4 <__divdi3+0x144>
c002515d:	b9 01 00 00 00       	mov    ecx,0x1
c0025162:	eb a4                	jmp    c0025108 <__divdi3+0x58>
c0025164:	f7 d9                	neg    ecx
c0025166:	83 d3 00             	adc    ebx,0x0
c0025169:	f7 db                	neg    ebx
c002516b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002516e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0025172:	89 dd                	mov    ebp,ebx
c0025174:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002517c:	e9 5f ff ff ff       	jmp    c00250e0 <__divdi3+0x30>
c0025181:	8d 76 00             	lea    esi,[esi+0x0]
c0025184:	31 f6                	xor    esi,esi
c0025186:	31 c9                	xor    ecx,ecx
c0025188:	e9 7b ff ff ff       	jmp    c0025108 <__divdi3+0x58>
c002518d:	8d 76 00             	lea    esi,[esi+0x0]
c0025190:	b8 20 00 00 00       	mov    eax,0x20
c0025195:	29 f0                	sub    eax,esi
c0025197:	89 f1                	mov    ecx,esi
c0025199:	d3 e3                	shl    ebx,cl
c002519b:	89 fa                	mov    edx,edi
c002519d:	88 c1                	mov    cl,al
c002519f:	d3 ea                	shr    edx,cl
c00251a1:	09 da                	or     edx,ebx
c00251a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00251a7:	89 f1                	mov    ecx,esi
c00251a9:	d3 e7                	shl    edi,cl
c00251ab:	89 eb                	mov    ebx,ebp
c00251ad:	88 c1                	mov    cl,al
c00251af:	d3 eb                	shr    ebx,cl
c00251b1:	89 f1                	mov    ecx,esi
c00251b3:	d3 e5                	shl    ebp,cl
c00251b5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00251b8:	88 c1                	mov    cl,al
c00251ba:	d3 ea                	shr    edx,cl
c00251bc:	09 d5                	or     ebp,edx
c00251be:	89 e8                	mov    eax,ebp
c00251c0:	89 da                	mov    edx,ebx
c00251c2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00251c6:	89 d3                	mov    ebx,edx
c00251c8:	89 c5                	mov    ebp,eax
c00251ca:	f7 e7                	mul    edi
c00251cc:	39 d3                	cmp    ebx,edx
c00251ce:	72 18                	jb     c00251e8 <__divdi3+0x138>
c00251d0:	74 0a                	je     c00251dc <__divdi3+0x12c>
c00251d2:	89 e9                	mov    ecx,ebp
c00251d4:	31 f6                	xor    esi,esi
c00251d6:	e9 2d ff ff ff       	jmp    c0025108 <__divdi3+0x58>
c00251db:	90                   	nop
c00251dc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00251df:	89 f1                	mov    ecx,esi
c00251e1:	d3 e7                	shl    edi,cl
c00251e3:	39 c7                	cmp    edi,eax
c00251e5:	73 eb                	jae    c00251d2 <__divdi3+0x122>
c00251e7:	90                   	nop
c00251e8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00251eb:	31 f6                	xor    esi,esi
c00251ed:	e9 16 ff ff ff       	jmp    c0025108 <__divdi3+0x58>
c00251f2:	66 90                	xchg   ax,ax
c00251f4:	31 c9                	xor    ecx,ecx
c00251f6:	e9 0d ff ff ff       	jmp    c0025108 <__divdi3+0x58>
c00251fb:	90                   	nop

c00251fc <__moddi3>:
c00251fc:	55                   	push   ebp
c00251fd:	57                   	push   edi
c00251fe:	56                   	push   esi
c00251ff:	53                   	push   ebx
c0025200:	83 ec 2c             	sub    esp,0x2c
c0025203:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0025207:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002520b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002520f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0025213:	85 db                	test   ebx,ebx
c0025215:	0f 88 85 00 00 00    	js     c00252a0 <__moddi3+0xa4>
c002521b:	89 de                	mov    esi,ebx
c002521d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0025225:	89 d7                	mov    edi,edx
c0025227:	85 d2                	test   edx,edx
c0025229:	79 09                	jns    c0025234 <__moddi3+0x38>
c002522b:	f7 d8                	neg    eax
c002522d:	83 d2 00             	adc    edx,0x0
c0025230:	f7 da                	neg    edx
c0025232:	89 d7                	mov    edi,edx
c0025234:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025238:	89 cd                	mov    ebp,ecx
c002523a:	85 ff                	test   edi,edi
c002523c:	75 52                	jne    c0025290 <__moddi3+0x94>
c002523e:	89 c3                	mov    ebx,eax
c0025240:	39 f0                	cmp    eax,esi
c0025242:	76 24                	jbe    c0025268 <__moddi3+0x6c>
c0025244:	89 c8                	mov    eax,ecx
c0025246:	89 f2                	mov    edx,esi
c0025248:	f7 f3                	div    ebx
c002524a:	89 d6                	mov    esi,edx
c002524c:	89 f0                	mov    eax,esi
c002524e:	31 d2                	xor    edx,edx
c0025250:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025254:	85 c9                	test   ecx,ecx
c0025256:	74 07                	je     c002525f <__moddi3+0x63>
c0025258:	f7 d8                	neg    eax
c002525a:	83 d2 00             	adc    edx,0x0
c002525d:	f7 da                	neg    edx
c002525f:	83 c4 2c             	add    esp,0x2c
c0025262:	5b                   	pop    ebx
c0025263:	5e                   	pop    esi
c0025264:	5f                   	pop    edi
c0025265:	5d                   	pop    ebp
c0025266:	c3                   	ret    
c0025267:	90                   	nop
c0025268:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002526c:	85 db                	test   ebx,ebx
c002526e:	75 0d                	jne    c002527d <__moddi3+0x81>
c0025270:	b8 01 00 00 00       	mov    eax,0x1
c0025275:	31 d2                	xor    edx,edx
c0025277:	f7 f7                	div    edi
c0025279:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002527d:	89 f0                	mov    eax,esi
c002527f:	31 d2                	xor    edx,edx
c0025281:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0025285:	f7 f7                	div    edi
c0025287:	89 e8                	mov    eax,ebp
c0025289:	f7 f7                	div    edi
c002528b:	89 d6                	mov    esi,edx
c002528d:	eb bd                	jmp    c002524c <__moddi3+0x50>
c002528f:	90                   	nop
c0025290:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0025294:	39 f7                	cmp    edi,esi
c0025296:	76 20                	jbe    c00252b8 <__moddi3+0xbc>
c0025298:	89 c8                	mov    eax,ecx
c002529a:	89 f2                	mov    edx,esi
c002529c:	eb b2                	jmp    c0025250 <__moddi3+0x54>
c002529e:	66 90                	xchg   ax,ax
c00252a0:	f7 d9                	neg    ecx
c00252a2:	83 d3 00             	adc    ebx,0x0
c00252a5:	f7 db                	neg    ebx
c00252a7:	89 de                	mov    esi,ebx
c00252a9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00252b1:	e9 6f ff ff ff       	jmp    c0025225 <__moddi3+0x29>
c00252b6:	66 90                	xchg   ax,ax
c00252b8:	0f bd c7             	bsr    eax,edi
c00252bb:	83 f0 1f             	xor    eax,0x1f
c00252be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00252c2:	75 24                	jne    c00252e8 <__moddi3+0xec>
c00252c4:	39 f7                	cmp    edi,esi
c00252c6:	72 06                	jb     c00252ce <__moddi3+0xd2>
c00252c8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00252cc:	77 0c                	ja     c00252da <__moddi3+0xde>
c00252ce:	89 e9                	mov    ecx,ebp
c00252d0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00252d4:	19 fe                	sbb    esi,edi
c00252d6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00252da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00252de:	89 f2                	mov    edx,esi
c00252e0:	e9 6b ff ff ff       	jmp    c0025250 <__moddi3+0x54>
c00252e5:	8d 76 00             	lea    esi,[esi+0x0]
c00252e8:	b8 20 00 00 00       	mov    eax,0x20
c00252ed:	89 c2                	mov    edx,eax
c00252ef:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00252f3:	29 da                	sub    edx,ebx
c00252f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00252f9:	88 d9                	mov    cl,bl
c00252fb:	d3 e7                	shl    edi,cl
c00252fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025301:	88 d1                	mov    cl,dl
c0025303:	d3 e8                	shr    eax,cl
c0025305:	09 c7                	or     edi,eax
c0025307:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002530b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002530f:	89 d8                	mov    eax,ebx
c0025311:	88 d9                	mov    cl,bl
c0025313:	d3 e7                	shl    edi,cl
c0025315:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0025319:	89 f3                	mov    ebx,esi
c002531b:	88 d1                	mov    cl,dl
c002531d:	d3 eb                	shr    ebx,cl
c002531f:	89 c7                	mov    edi,eax
c0025321:	88 c1                	mov    cl,al
c0025323:	d3 e6                	shl    esi,cl
c0025325:	89 e8                	mov    eax,ebp
c0025327:	88 d1                	mov    cl,dl
c0025329:	d3 e8                	shr    eax,cl
c002532b:	09 f0                	or     eax,esi
c002532d:	89 f9                	mov    ecx,edi
c002532f:	d3 e5                	shl    ebp,cl
c0025331:	89 da                	mov    edx,ebx
c0025333:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0025337:	89 d3                	mov    ebx,edx
c0025339:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002533d:	89 c6                	mov    esi,eax
c002533f:	89 d1                	mov    ecx,edx
c0025341:	39 d3                	cmp    ebx,edx
c0025343:	72 27                	jb     c002536c <__moddi3+0x170>
c0025345:	74 21                	je     c0025368 <__moddi3+0x16c>
c0025347:	29 f5                	sub    ebp,esi
c0025349:	19 cb                	sbb    ebx,ecx
c002534b:	89 de                	mov    esi,ebx
c002534d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0025351:	d3 e6                	shl    esi,cl
c0025353:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0025357:	89 f9                	mov    ecx,edi
c0025359:	d3 ed                	shr    ebp,cl
c002535b:	09 ee                	or     esi,ebp
c002535d:	89 f0                	mov    eax,esi
c002535f:	d3 eb                	shr    ebx,cl
c0025361:	89 da                	mov    edx,ebx
c0025363:	e9 e8 fe ff ff       	jmp    c0025250 <__moddi3+0x54>
c0025368:	39 c5                	cmp    ebp,eax
c002536a:	73 db                	jae    c0025347 <__moddi3+0x14b>
c002536c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0025370:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0025374:	89 d1                	mov    ecx,edx
c0025376:	89 c6                	mov    esi,eax
c0025378:	eb cd                	jmp    c0025347 <__moddi3+0x14b>
c002537a:	66 90                	xchg   ax,ax

c002537c <__udivdi3>:
c002537c:	55                   	push   ebp
c002537d:	57                   	push   edi
c002537e:	56                   	push   esi
c002537f:	53                   	push   ebx
c0025380:	83 ec 1c             	sub    esp,0x1c
c0025383:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025387:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002538b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002538f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0025393:	85 d2                	test   edx,edx
c0025395:	75 41                	jne    c00253d8 <__udivdi3+0x5c>
c0025397:	39 f7                	cmp    edi,esi
c0025399:	76 15                	jbe    c00253b0 <__udivdi3+0x34>
c002539b:	89 e8                	mov    eax,ebp
c002539d:	89 f2                	mov    edx,esi
c002539f:	f7 f7                	div    edi
c00253a1:	31 db                	xor    ebx,ebx
c00253a3:	89 da                	mov    edx,ebx
c00253a5:	83 c4 1c             	add    esp,0x1c
c00253a8:	5b                   	pop    ebx
c00253a9:	5e                   	pop    esi
c00253aa:	5f                   	pop    edi
c00253ab:	5d                   	pop    ebp
c00253ac:	c3                   	ret    
c00253ad:	8d 76 00             	lea    esi,[esi+0x0]
c00253b0:	89 f9                	mov    ecx,edi
c00253b2:	85 ff                	test   edi,edi
c00253b4:	75 0b                	jne    c00253c1 <__udivdi3+0x45>
c00253b6:	b8 01 00 00 00       	mov    eax,0x1
c00253bb:	31 d2                	xor    edx,edx
c00253bd:	f7 f7                	div    edi
c00253bf:	89 c1                	mov    ecx,eax
c00253c1:	31 d2                	xor    edx,edx
c00253c3:	89 f0                	mov    eax,esi
c00253c5:	f7 f1                	div    ecx
c00253c7:	89 c3                	mov    ebx,eax
c00253c9:	89 e8                	mov    eax,ebp
c00253cb:	f7 f1                	div    ecx
c00253cd:	89 da                	mov    edx,ebx
c00253cf:	83 c4 1c             	add    esp,0x1c
c00253d2:	5b                   	pop    ebx
c00253d3:	5e                   	pop    esi
c00253d4:	5f                   	pop    edi
c00253d5:	5d                   	pop    ebp
c00253d6:	c3                   	ret    
c00253d7:	90                   	nop
c00253d8:	39 f2                	cmp    edx,esi
c00253da:	77 1c                	ja     c00253f8 <__udivdi3+0x7c>
c00253dc:	0f bd da             	bsr    ebx,edx
c00253df:	83 f3 1f             	xor    ebx,0x1f
c00253e2:	75 24                	jne    c0025408 <__udivdi3+0x8c>
c00253e4:	39 f2                	cmp    edx,esi
c00253e6:	72 08                	jb     c00253f0 <__udivdi3+0x74>
c00253e8:	39 ef                	cmp    edi,ebp
c00253ea:	0f 87 84 00 00 00    	ja     c0025474 <__udivdi3+0xf8>
c00253f0:	b8 01 00 00 00       	mov    eax,0x1
c00253f5:	eb ac                	jmp    c00253a3 <__udivdi3+0x27>
c00253f7:	90                   	nop
c00253f8:	31 db                	xor    ebx,ebx
c00253fa:	31 c0                	xor    eax,eax
c00253fc:	89 da                	mov    edx,ebx
c00253fe:	83 c4 1c             	add    esp,0x1c
c0025401:	5b                   	pop    ebx
c0025402:	5e                   	pop    esi
c0025403:	5f                   	pop    edi
c0025404:	5d                   	pop    ebp
c0025405:	c3                   	ret    
c0025406:	66 90                	xchg   ax,ax
c0025408:	b8 20 00 00 00       	mov    eax,0x20
c002540d:	29 d8                	sub    eax,ebx
c002540f:	88 d9                	mov    cl,bl
c0025411:	d3 e2                	shl    edx,cl
c0025413:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0025417:	89 fa                	mov    edx,edi
c0025419:	88 c1                	mov    cl,al
c002541b:	d3 ea                	shr    edx,cl
c002541d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0025421:	09 d1                	or     ecx,edx
c0025423:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0025427:	88 d9                	mov    cl,bl
c0025429:	d3 e7                	shl    edi,cl
c002542b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002542f:	89 f7                	mov    edi,esi
c0025431:	88 c1                	mov    cl,al
c0025433:	d3 ef                	shr    edi,cl
c0025435:	88 d9                	mov    cl,bl
c0025437:	d3 e6                	shl    esi,cl
c0025439:	89 ea                	mov    edx,ebp
c002543b:	88 c1                	mov    cl,al
c002543d:	d3 ea                	shr    edx,cl
c002543f:	09 d6                	or     esi,edx
c0025441:	89 f0                	mov    eax,esi
c0025443:	89 fa                	mov    edx,edi
c0025445:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0025449:	89 d7                	mov    edi,edx
c002544b:	89 c6                	mov    esi,eax
c002544d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0025451:	39 d7                	cmp    edi,edx
c0025453:	72 13                	jb     c0025468 <__udivdi3+0xec>
c0025455:	74 09                	je     c0025460 <__udivdi3+0xe4>
c0025457:	89 f0                	mov    eax,esi
c0025459:	31 db                	xor    ebx,ebx
c002545b:	e9 43 ff ff ff       	jmp    c00253a3 <__udivdi3+0x27>
c0025460:	88 d9                	mov    cl,bl
c0025462:	d3 e5                	shl    ebp,cl
c0025464:	39 c5                	cmp    ebp,eax
c0025466:	73 ef                	jae    c0025457 <__udivdi3+0xdb>
c0025468:	8d 46 ff             	lea    eax,[esi-0x1]
c002546b:	31 db                	xor    ebx,ebx
c002546d:	e9 31 ff ff ff       	jmp    c00253a3 <__udivdi3+0x27>
c0025472:	66 90                	xchg   ax,ax
c0025474:	31 c0                	xor    eax,eax
c0025476:	e9 28 ff ff ff       	jmp    c00253a3 <__udivdi3+0x27>
c002547b:	90                   	nop

c002547c <__umoddi3>:
c002547c:	55                   	push   ebp
c002547d:	57                   	push   edi
c002547e:	56                   	push   esi
c002547f:	53                   	push   ebx
c0025480:	83 ec 1c             	sub    esp,0x1c
c0025483:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0025487:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002548b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002548f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0025493:	89 da                	mov    edx,ebx
c0025495:	85 c0                	test   eax,eax
c0025497:	75 37                	jne    c00254d0 <__umoddi3+0x54>
c0025499:	39 df                	cmp    edi,ebx
c002549b:	76 13                	jbe    c00254b0 <__umoddi3+0x34>
c002549d:	89 f0                	mov    eax,esi
c002549f:	f7 f7                	div    edi
c00254a1:	89 d0                	mov    eax,edx
c00254a3:	31 d2                	xor    edx,edx
c00254a5:	83 c4 1c             	add    esp,0x1c
c00254a8:	5b                   	pop    ebx
c00254a9:	5e                   	pop    esi
c00254aa:	5f                   	pop    edi
c00254ab:	5d                   	pop    ebp
c00254ac:	c3                   	ret    
c00254ad:	8d 76 00             	lea    esi,[esi+0x0]
c00254b0:	89 fd                	mov    ebp,edi
c00254b2:	85 ff                	test   edi,edi
c00254b4:	75 0b                	jne    c00254c1 <__umoddi3+0x45>
c00254b6:	b8 01 00 00 00       	mov    eax,0x1
c00254bb:	31 d2                	xor    edx,edx
c00254bd:	f7 f7                	div    edi
c00254bf:	89 c5                	mov    ebp,eax
c00254c1:	89 d8                	mov    eax,ebx
c00254c3:	31 d2                	xor    edx,edx
c00254c5:	f7 f5                	div    ebp
c00254c7:	89 f0                	mov    eax,esi
c00254c9:	f7 f5                	div    ebp
c00254cb:	89 d0                	mov    eax,edx
c00254cd:	eb d4                	jmp    c00254a3 <__umoddi3+0x27>
c00254cf:	90                   	nop
c00254d0:	89 f1                	mov    ecx,esi
c00254d2:	39 d8                	cmp    eax,ebx
c00254d4:	76 0a                	jbe    c00254e0 <__umoddi3+0x64>
c00254d6:	89 f0                	mov    eax,esi
c00254d8:	83 c4 1c             	add    esp,0x1c
c00254db:	5b                   	pop    ebx
c00254dc:	5e                   	pop    esi
c00254dd:	5f                   	pop    edi
c00254de:	5d                   	pop    ebp
c00254df:	c3                   	ret    
c00254e0:	0f bd e8             	bsr    ebp,eax
c00254e3:	83 f5 1f             	xor    ebp,0x1f
c00254e6:	75 1c                	jne    c0025504 <__umoddi3+0x88>
c00254e8:	39 d8                	cmp    eax,ebx
c00254ea:	72 04                	jb     c00254f0 <__umoddi3+0x74>
c00254ec:	39 f7                	cmp    edi,esi
c00254ee:	77 08                	ja     c00254f8 <__umoddi3+0x7c>
c00254f0:	89 da                	mov    edx,ebx
c00254f2:	29 fe                	sub    esi,edi
c00254f4:	19 c2                	sbb    edx,eax
c00254f6:	89 f1                	mov    ecx,esi
c00254f8:	89 c8                	mov    eax,ecx
c00254fa:	83 c4 1c             	add    esp,0x1c
c00254fd:	5b                   	pop    ebx
c00254fe:	5e                   	pop    esi
c00254ff:	5f                   	pop    edi
c0025500:	5d                   	pop    ebp
c0025501:	c3                   	ret    
c0025502:	66 90                	xchg   ax,ax
c0025504:	ba 20 00 00 00       	mov    edx,0x20
c0025509:	29 ea                	sub    edx,ebp
c002550b:	89 e9                	mov    ecx,ebp
c002550d:	d3 e0                	shl    eax,cl
c002550f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025513:	89 f8                	mov    eax,edi
c0025515:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0025519:	88 d1                	mov    cl,dl
c002551b:	d3 e8                	shr    eax,cl
c002551d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0025521:	09 c1                	or     ecx,eax
c0025523:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0025527:	89 e9                	mov    ecx,ebp
c0025529:	d3 e7                	shl    edi,cl
c002552b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002552f:	89 d8                	mov    eax,ebx
c0025531:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025535:	88 d1                	mov    cl,dl
c0025537:	d3 e8                	shr    eax,cl
c0025539:	89 c7                	mov    edi,eax
c002553b:	89 e9                	mov    ecx,ebp
c002553d:	d3 e3                	shl    ebx,cl
c002553f:	89 f0                	mov    eax,esi
c0025541:	88 d1                	mov    cl,dl
c0025543:	d3 e8                	shr    eax,cl
c0025545:	09 d8                	or     eax,ebx
c0025547:	89 e9                	mov    ecx,ebp
c0025549:	d3 e6                	shl    esi,cl
c002554b:	89 f3                	mov    ebx,esi
c002554d:	89 fa                	mov    edx,edi
c002554f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0025553:	89 d1                	mov    ecx,edx
c0025555:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0025559:	89 c6                	mov    esi,eax
c002555b:	89 d7                	mov    edi,edx
c002555d:	39 d1                	cmp    ecx,edx
c002555f:	72 27                	jb     c0025588 <__umoddi3+0x10c>
c0025561:	74 21                	je     c0025584 <__umoddi3+0x108>
c0025563:	89 ca                	mov    edx,ecx
c0025565:	29 f3                	sub    ebx,esi
c0025567:	19 fa                	sbb    edx,edi
c0025569:	89 d0                	mov    eax,edx
c002556b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002556f:	d3 e0                	shl    eax,cl
c0025571:	89 e9                	mov    ecx,ebp
c0025573:	d3 eb                	shr    ebx,cl
c0025575:	09 d8                	or     eax,ebx
c0025577:	d3 ea                	shr    edx,cl
c0025579:	83 c4 1c             	add    esp,0x1c
c002557c:	5b                   	pop    ebx
c002557d:	5e                   	pop    esi
c002557e:	5f                   	pop    edi
c002557f:	5d                   	pop    ebp
c0025580:	c3                   	ret    
c0025581:	8d 76 00             	lea    esi,[esi+0x0]
c0025584:	39 c3                	cmp    ebx,eax
c0025586:	73 db                	jae    c0025563 <__umoddi3+0xe7>
c0025588:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002558c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0025590:	89 d7                	mov    edi,edx
c0025592:	89 c6                	mov    esi,eax
c0025594:	eb cd                	jmp    c0025563 <__umoddi3+0xe7>

c0025596 <__addsf3>:
c0025596:	55                   	push   ebp
c0025597:	89 e5                	mov    ebp,esp
c0025599:	57                   	push   edi
c002559a:	56                   	push   esi
c002559b:	53                   	push   ebx
c002559c:	83 ec 08             	sub    esp,0x8
c002559f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00255a2:	89 fa                	mov    edx,edi
c00255a4:	89 f8                	mov    eax,edi
c00255a6:	c1 f8 17             	sar    eax,0x17
c00255a9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00255ac:	c1 e2 08             	shl    edx,0x8
c00255af:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00255b5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00255b8:	89 de                	mov    esi,ebx
c00255ba:	c1 fe 17             	sar    esi,0x17
c00255bd:	c1 e3 08             	shl    ebx,0x8
c00255c0:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00255c6:	31 f0                	xor    eax,esi
c00255c8:	0f 88 3b 01 00 00    	js     c0025709 <__addsf3+0x173>
c00255ce:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00255d1:	29 f1                	sub    ecx,esi
c00255d3:	85 c9                	test   ecx,ecx
c00255d5:	7e 54                	jle    c002562b <__addsf3+0x95>
c00255d7:	89 f0                	mov    eax,esi
c00255d9:	84 c0                	test   al,al
c00255db:	75 10                	jne    c00255ed <__addsf3+0x57>
c00255dd:	85 db                	test   ebx,ebx
c00255df:	0f 84 aa 02 00 00    	je     c002588f <__addsf3+0x2f9>
c00255e5:	49                   	dec    ecx
c00255e6:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00255e9:	74 38                	je     c0025623 <__addsf3+0x8d>
c00255eb:	eb 13                	jmp    c0025600 <__addsf3+0x6a>
c00255ed:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00255f0:	f7 d0                	not    eax
c00255f2:	84 c0                	test   al,al
c00255f4:	0f 84 95 02 00 00    	je     c002588f <__addsf3+0x2f9>
c00255fa:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0025600:	83 f9 1f             	cmp    ecx,0x1f
c0025603:	0f 8f 86 02 00 00    	jg     c002588f <__addsf3+0x2f9>
c0025609:	89 de                	mov    esi,ebx
c002560b:	d3 ee                	shr    esi,cl
c002560d:	b8 20 00 00 00       	mov    eax,0x20
c0025612:	29 c8                	sub    eax,ecx
c0025614:	89 c1                	mov    ecx,eax
c0025616:	d3 e3                	shl    ebx,cl
c0025618:	31 c0                	xor    eax,eax
c002561a:	85 db                	test   ebx,ebx
c002561c:	0f 95 c0             	setne  al
c002561f:	09 f0                	or     eax,esi
c0025621:	01 d0                	add    eax,edx
c0025623:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025626:	e9 b6 00 00 00       	jmp    c00256e1 <__addsf3+0x14b>
c002562b:	74 5c                	je     c0025689 <__addsf3+0xf3>
c002562d:	89 f1                	mov    ecx,esi
c002562f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0025632:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0025635:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0025639:	75 14                	jne    c002564f <__addsf3+0xb9>
c002563b:	85 d2                	test   edx,edx
c002563d:	0f 84 4c 02 00 00    	je     c002588f <__addsf3+0x2f9>
c0025643:	49                   	dec    ecx
c0025644:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0025647:	0f 84 94 00 00 00    	je     c00256e1 <__addsf3+0x14b>
c002564d:	eb 12                	jmp    c0025661 <__addsf3+0xcb>
c002564f:	89 f0                	mov    eax,esi
c0025651:	f7 d0                	not    eax
c0025653:	84 c0                	test   al,al
c0025655:	0f 84 34 02 00 00    	je     c002588f <__addsf3+0x2f9>
c002565b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025661:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0025664:	83 f9 1f             	cmp    ecx,0x1f
c0025667:	0f 8f 22 02 00 00    	jg     c002588f <__addsf3+0x2f9>
c002566d:	89 d7                	mov    edi,edx
c002566f:	d3 ef                	shr    edi,cl
c0025671:	b8 20 00 00 00       	mov    eax,0x20
c0025676:	29 c8                	sub    eax,ecx
c0025678:	89 c1                	mov    ecx,eax
c002567a:	d3 e2                	shl    edx,cl
c002567c:	31 c0                	xor    eax,eax
c002567e:	85 d2                	test   edx,edx
c0025680:	0f 95 c0             	setne  al
c0025683:	09 f8                	or     eax,edi
c0025685:	01 d8                	add    eax,ebx
c0025687:	eb 58                	jmp    c00256e1 <__addsf3+0x14b>
c0025689:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002568c:	8d 70 01             	lea    esi,[eax+0x1]
c002568f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0025695:	75 32                	jne    c00256c9 <__addsf3+0x133>
c0025697:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c002569b:	75 1f                	jne    c00256bc <__addsf3+0x126>
c002569d:	85 d2                	test   edx,edx
c002569f:	0f 84 e0 01 00 00    	je     c0025885 <__addsf3+0x2ef>
c00256a5:	85 db                	test   ebx,ebx
c00256a7:	0f 84 e2 01 00 00    	je     c002588f <__addsf3+0x2f9>
c00256ad:	89 d0                	mov    eax,edx
c00256af:	01 d8                	add    eax,ebx
c00256b1:	0f 89 a9 01 00 00    	jns    c0025860 <__addsf3+0x2ca>
c00256b7:	e9 9d 01 00 00       	jmp    c0025859 <__addsf3+0x2c3>
c00256bc:	85 d2                	test   edx,edx
c00256be:	0f 85 cb 01 00 00    	jne    c002588f <__addsf3+0x2f9>
c00256c4:	e9 bc 01 00 00       	jmp    c0025885 <__addsf3+0x2ef>
c00256c9:	31 c0                	xor    eax,eax
c00256cb:	89 f1                	mov    ecx,esi
c00256cd:	f7 d1                	not    ecx
c00256cf:	84 c9                	test   cl,cl
c00256d1:	0f 84 90 01 00 00    	je     c0025867 <__addsf3+0x2d1>
c00256d7:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00256da:	d1 e8                	shr    eax,1
c00256dc:	e9 86 01 00 00       	jmp    c0025867 <__addsf3+0x2d1>
c00256e1:	85 c0                	test   eax,eax
c00256e3:	0f 89 7e 01 00 00    	jns    c0025867 <__addsf3+0x2d1>
c00256e9:	46                   	inc    esi
c00256ea:	89 f2                	mov    edx,esi
c00256ec:	f7 d2                	not    edx
c00256ee:	84 d2                	test   dl,dl
c00256f0:	0f 84 6f 01 00 00    	je     c0025865 <__addsf3+0x2cf>
c00256f6:	89 c2                	mov    edx,eax
c00256f8:	83 e2 01             	and    edx,0x1
c00256fb:	d1 e8                	shr    eax,1
c00256fd:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0025702:	09 d0                	or     eax,edx
c0025704:	e9 5e 01 00 00       	jmp    c0025867 <__addsf3+0x2d1>
c0025709:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c002570d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025710:	89 f0                	mov    eax,esi
c0025712:	0f b6 c0             	movzx  eax,al
c0025715:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0025718:	29 c1                	sub    ecx,eax
c002571a:	85 c9                	test   ecx,ecx
c002571c:	7e 55                	jle    c0025773 <__addsf3+0x1dd>
c002571e:	85 c0                	test   eax,eax
c0025720:	75 11                	jne    c0025733 <__addsf3+0x19d>
c0025722:	85 db                	test   ebx,ebx
c0025724:	0f 84 65 01 00 00    	je     c002588f <__addsf3+0x2f9>
c002572a:	49                   	dec    ecx
c002572b:	75 19                	jne    c0025746 <__addsf3+0x1b0>
c002572d:	89 d0                	mov    eax,edx
c002572f:	29 d8                	sub    eax,ebx
c0025731:	eb 38                	jmp    c002576b <__addsf3+0x1d5>
c0025733:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025736:	f7 d0                	not    eax
c0025738:	84 c0                	test   al,al
c002573a:	0f 84 4f 01 00 00    	je     c002588f <__addsf3+0x2f9>
c0025740:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0025746:	83 f9 1f             	cmp    ecx,0x1f
c0025749:	0f 8f 40 01 00 00    	jg     c002588f <__addsf3+0x2f9>
c002574f:	89 de                	mov    esi,ebx
c0025751:	d3 ee                	shr    esi,cl
c0025753:	b8 20 00 00 00       	mov    eax,0x20
c0025758:	29 c8                	sub    eax,ecx
c002575a:	89 c1                	mov    ecx,eax
c002575c:	d3 e3                	shl    ebx,cl
c002575e:	31 c0                	xor    eax,eax
c0025760:	85 db                	test   ebx,ebx
c0025762:	0f 95 c0             	setne  al
c0025765:	09 f0                	or     eax,esi
c0025767:	29 c2                	sub    edx,eax
c0025769:	89 d0                	mov    eax,edx
c002576b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002576e:	e9 af 00 00 00       	jmp    c0025822 <__addsf3+0x28c>
c0025773:	74 5c                	je     c00257d1 <__addsf3+0x23b>
c0025775:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0025778:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002577b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c002577f:	75 14                	jne    c0025795 <__addsf3+0x1ff>
c0025781:	85 d2                	test   edx,edx
c0025783:	0f 84 06 01 00 00    	je     c002588f <__addsf3+0x2f9>
c0025789:	48                   	dec    eax
c002578a:	75 1b                	jne    c00257a7 <__addsf3+0x211>
c002578c:	89 d8                	mov    eax,ebx
c002578e:	29 d0                	sub    eax,edx
c0025790:	e9 8d 00 00 00       	jmp    c0025822 <__addsf3+0x28c>
c0025795:	89 f1                	mov    ecx,esi
c0025797:	f7 d1                	not    ecx
c0025799:	84 c9                	test   cl,cl
c002579b:	0f 84 ee 00 00 00    	je     c002588f <__addsf3+0x2f9>
c00257a1:	81 ca 00 00 00 80    	or     edx,0x80000000
c00257a7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00257aa:	83 f8 1f             	cmp    eax,0x1f
c00257ad:	0f 8f dc 00 00 00    	jg     c002588f <__addsf3+0x2f9>
c00257b3:	89 d7                	mov    edi,edx
c00257b5:	88 c1                	mov    cl,al
c00257b7:	d3 ef                	shr    edi,cl
c00257b9:	b9 20 00 00 00       	mov    ecx,0x20
c00257be:	29 c1                	sub    ecx,eax
c00257c0:	d3 e2                	shl    edx,cl
c00257c2:	31 c0                	xor    eax,eax
c00257c4:	85 d2                	test   edx,edx
c00257c6:	0f 95 c0             	setne  al
c00257c9:	09 f8                	or     eax,edi
c00257cb:	29 c3                	sub    ebx,eax
c00257cd:	89 d8                	mov    eax,ebx
c00257cf:	eb 51                	jmp    c0025822 <__addsf3+0x28c>
c00257d1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00257d4:	40                   	inc    eax
c00257d5:	a8 fe                	test   al,0xfe
c00257d7:	75 3d                	jne    c0025816 <__addsf3+0x280>
c00257d9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00257dd:	0f 85 a7 00 00 00    	jne    c002588a <__addsf3+0x2f4>
c00257e3:	85 d2                	test   edx,edx
c00257e5:	75 12                	jne    c00257f9 <__addsf3+0x263>
c00257e7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00257ea:	85 db                	test   ebx,ebx
c00257ec:	0f 85 9d 00 00 00    	jne    c002588f <__addsf3+0x2f9>
c00257f2:	31 ff                	xor    edi,edi
c00257f4:	e9 96 00 00 00       	jmp    c002588f <__addsf3+0x2f9>
c00257f9:	85 db                	test   ebx,ebx
c00257fb:	0f 84 8e 00 00 00    	je     c002588f <__addsf3+0x2f9>
c0025801:	89 d0                	mov    eax,edx
c0025803:	29 d8                	sub    eax,ebx
c0025805:	79 06                	jns    c002580d <__addsf3+0x277>
c0025807:	89 d8                	mov    eax,ebx
c0025809:	29 d0                	sub    eax,edx
c002580b:	eb 5a                	jmp    c0025867 <__addsf3+0x2d1>
c002580d:	bf 00 00 00 00       	mov    edi,0x0
c0025812:	74 7b                	je     c002588f <__addsf3+0x2f9>
c0025814:	eb 4a                	jmp    c0025860 <__addsf3+0x2ca>
c0025816:	89 d0                	mov    eax,edx
c0025818:	29 d8                	sub    eax,ebx
c002581a:	79 12                	jns    c002582e <__addsf3+0x298>
c002581c:	89 d8                	mov    eax,ebx
c002581e:	29 d0                	sub    eax,edx
c0025820:	eb 09                	jmp    c002582b <__addsf3+0x295>
c0025822:	85 c0                	test   eax,eax
c0025824:	79 41                	jns    c0025867 <__addsf3+0x2d1>
c0025826:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002582b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c002582e:	31 f6                	xor    esi,esi
c0025830:	85 c0                	test   eax,eax
c0025832:	74 33                	je     c0025867 <__addsf3+0x2d1>
c0025834:	0f bd c8             	bsr    ecx,eax
c0025837:	83 f1 1f             	xor    ecx,0x1f
c002583a:	d3 e0                	shl    eax,cl
c002583c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0025840:	39 ca                	cmp    edx,ecx
c0025842:	7f 10                	jg     c0025854 <__addsf3+0x2be>
c0025844:	29 d1                	sub    ecx,edx
c0025846:	41                   	inc    ecx
c0025847:	d3 e8                	shr    eax,cl
c0025849:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002584c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0025852:	eb 13                	jmp    c0025867 <__addsf3+0x2d1>
c0025854:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025857:	29 ce                	sub    esi,ecx
c0025859:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002585e:	eb 07                	jmp    c0025867 <__addsf3+0x2d1>
c0025860:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025863:	eb 02                	jmp    c0025867 <__addsf3+0x2d1>
c0025865:	31 c0                	xor    eax,eax
c0025867:	89 c2                	mov    edx,eax
c0025869:	c1 ea 08             	shr    edx,0x8
c002586c:	a8 7f                	test   al,0x7f
c002586e:	0f 95 c1             	setne  cl
c0025871:	09 d1                	or     ecx,edx
c0025873:	83 e1 01             	and    ecx,0x1
c0025876:	c1 e8 07             	shr    eax,0x7
c0025879:	21 c8                	and    eax,ecx
c002587b:	c1 e6 17             	shl    esi,0x17
c002587e:	09 d6                	or     esi,edx
c0025880:	8d 3c 30             	lea    edi,[eax+esi*1]
c0025883:	eb 0a                	jmp    c002588f <__addsf3+0x2f9>
c0025885:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0025888:	eb 05                	jmp    c002588f <__addsf3+0x2f9>
c002588a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c002588f:	89 f8                	mov    eax,edi
c0025891:	5a                   	pop    edx
c0025892:	59                   	pop    ecx
c0025893:	5b                   	pop    ebx
c0025894:	5e                   	pop    esi
c0025895:	5f                   	pop    edi
c0025896:	5d                   	pop    ebp
c0025897:	c3                   	ret    

c0025898 <__subsf3>:
c0025898:	55                   	push   ebp
c0025899:	89 e5                	mov    ebp,esp
c002589b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002589e:	05 00 00 00 80       	add    eax,0x80000000
c00258a3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00258a6:	5d                   	pop    ebp
c00258a7:	e9 ea fc ff ff       	jmp    c0025596 <__addsf3>

c00258ac <__negsf2>:
c00258ac:	55                   	push   ebp
c00258ad:	89 e5                	mov    ebp,esp
c00258af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258b2:	05 00 00 00 80       	add    eax,0x80000000
c00258b7:	5d                   	pop    ebp
c00258b8:	c3                   	ret    

c00258b9 <__mulsf3>:
c00258b9:	55                   	push   ebp
c00258ba:	89 e5                	mov    ebp,esp
c00258bc:	57                   	push   edi
c00258bd:	56                   	push   esi
c00258be:	53                   	push   ebx
c00258bf:	83 ec 1c             	sub    esp,0x1c
c00258c2:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00258c5:	89 f0                	mov    eax,esi
c00258c7:	89 f1                	mov    ecx,esi
c00258c9:	c1 f9 17             	sar    ecx,0x17
c00258cc:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00258cf:	c1 e0 08             	shl    eax,0x8
c00258d2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00258d7:	89 c1                	mov    ecx,eax
c00258d9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00258dc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00258df:	89 c7                	mov    edi,eax
c00258e1:	c1 ff 17             	sar    edi,0x17
c00258e4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00258e8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00258eb:	89 f8                	mov    eax,edi
c00258ed:	0f b6 c0             	movzx  eax,al
c00258f0:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00258f3:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c00258f7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00258fa:	42                   	inc    edx
c00258fb:	80 e2 fe             	and    dl,0xfe
c00258fe:	75 7b                	jne    c002597b <__mulsf3+0xc2>
c0025900:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0025904:	74 54                	je     c002595a <__mulsf3+0xa1>
c0025906:	85 c9                	test   ecx,ecx
c0025908:	0f 85 64 01 00 00    	jne    c0025a72 <__mulsf3+0x1b9>
c002590e:	8d 57 01             	lea    edx,[edi+0x1]
c0025911:	80 e2 fe             	and    dl,0xfe
c0025914:	75 1f                	jne    c0025935 <__mulsf3+0x7c>
c0025916:	85 c0                	test   eax,eax
c0025918:	b8 00 00 00 00       	mov    eax,0x0
c002591d:	74 29                	je     c0025948 <__mulsf3+0x8f>
c002591f:	53                   	push   ebx
c0025920:	53                   	push   ebx
c0025921:	50                   	push   eax
c0025922:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025925:	e8 96 05 00 00       	call   c0025ec0 <__nesf2>
c002592a:	83 c4 10             	add    esp,0x10
c002592d:	85 c0                	test   eax,eax
c002592f:	0f 85 3a 01 00 00    	jne    c0025a6f <__mulsf3+0x1b6>
c0025935:	85 ff                	test   edi,edi
c0025937:	0f 89 35 01 00 00    	jns    c0025a72 <__mulsf3+0x1b9>
c002593d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0025943:	e9 2a 01 00 00       	jmp    c0025a72 <__mulsf3+0x1b9>
c0025948:	51                   	push   ecx
c0025949:	51                   	push   ecx
c002594a:	50                   	push   eax
c002594b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002594e:	e8 6d 05 00 00       	call   c0025ec0 <__nesf2>
c0025953:	83 c4 10             	add    esp,0x10
c0025956:	85 c0                	test   eax,eax
c0025958:	eb 15                	jmp    c002596f <__mulsf3+0xb6>
c002595a:	85 c9                	test   ecx,ecx
c002595c:	74 0b                	je     c0025969 <__mulsf3+0xb0>
c002595e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0025961:	01 c9                	add    ecx,ecx
c0025963:	78 16                	js     c002597b <__mulsf3+0xc2>
c0025965:	89 d3                	mov    ebx,edx
c0025967:	eb f5                	jmp    c002595e <__mulsf3+0xa5>
c0025969:	89 f8                	mov    eax,edi
c002596b:	f7 d0                	not    eax
c002596d:	84 c0                	test   al,al
c002596f:	75 c4                	jne    c0025935 <__mulsf3+0x7c>
c0025971:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0025976:	e9 f7 00 00 00       	jmp    c0025a72 <__mulsf3+0x1b9>
c002597b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002597e:	c1 e6 08             	shl    esi,0x8
c0025981:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0025987:	8d 57 01             	lea    edx,[edi+0x1]
c002598a:	80 e2 fe             	and    dl,0xfe
c002598d:	75 63                	jne    c00259f2 <__mulsf3+0x139>
c002598f:	85 c0                	test   eax,eax
c0025991:	74 2f                	je     c00259c2 <__mulsf3+0x109>
c0025993:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0025997:	0f 89 d2 00 00 00    	jns    c0025a6f <__mulsf3+0x1b6>
c002599d:	52                   	push   edx
c002599e:	52                   	push   edx
c002599f:	6a 00                	push   0x0
c00259a1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00259a4:	e8 dc 04 00 00       	call   c0025e85 <__eqsf2>
c00259a9:	83 c4 10             	add    esp,0x10
c00259ac:	85 c0                	test   eax,eax
c00259ae:	0f 85 bb 00 00 00    	jne    c0025a6f <__mulsf3+0x1b6>
c00259b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00259b7:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c00259bd:	e9 b0 00 00 00       	jmp    c0025a72 <__mulsf3+0x1b9>
c00259c2:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00259c5:	50                   	push   eax
c00259c6:	50                   	push   eax
c00259c7:	6a 00                	push   0x0
c00259c9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00259cc:	e8 b4 04 00 00       	call   c0025e85 <__eqsf2>
c00259d1:	83 c4 10             	add    esp,0x10
c00259d4:	85 c0                	test   eax,eax
c00259d6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00259d9:	75 0c                	jne    c00259e7 <__mulsf3+0x12e>
c00259db:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00259df:	0f 89 8a 00 00 00    	jns    c0025a6f <__mulsf3+0x1b6>
c00259e5:	eb cd                	jmp    c00259b4 <__mulsf3+0xfb>
c00259e7:	8d 43 ff             	lea    eax,[ebx-0x1]
c00259ea:	01 f6                	add    esi,esi
c00259ec:	78 04                	js     c00259f2 <__mulsf3+0x139>
c00259ee:	89 c3                	mov    ebx,eax
c00259f0:	eb f5                	jmp    c00259e7 <__mulsf3+0x12e>
c00259f2:	89 c8                	mov    eax,ecx
c00259f4:	0d 00 00 00 80       	or     eax,0x80000000
c00259f9:	81 ce 00 00 00 80    	or     esi,0x80000000
c00259ff:	f7 e6                	mul    esi
c0025a01:	85 c0                	test   eax,eax
c0025a03:	0f 95 c0             	setne  al
c0025a06:	0f b6 c0             	movzx  eax,al
c0025a09:	09 c2                	or     edx,eax
c0025a0b:	78 03                	js     c0025a10 <__mulsf3+0x157>
c0025a0d:	01 d2                	add    edx,edx
c0025a0f:	4b                   	dec    ebx
c0025a10:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0025a16:	7f 22                	jg     c0025a3a <__mulsf3+0x181>
c0025a18:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0025a1e:	85 db                	test   ebx,ebx
c0025a20:	7f 23                	jg     c0025a45 <__mulsf3+0x18c>
c0025a22:	83 fb e9             	cmp    ebx,0xffffffe9
c0025a25:	7c 1a                	jl     c0025a41 <__mulsf3+0x188>
c0025a27:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025a2d:	b9 01 00 00 00       	mov    ecx,0x1
c0025a32:	29 d9                	sub    ecx,ebx
c0025a34:	d3 ea                	shr    edx,cl
c0025a36:	31 db                	xor    ebx,ebx
c0025a38:	eb 0b                	jmp    c0025a45 <__mulsf3+0x18c>
c0025a3a:	bb ff 00 00 00       	mov    ebx,0xff
c0025a3f:	eb 02                	jmp    c0025a43 <__mulsf3+0x18a>
c0025a41:	31 db                	xor    ebx,ebx
c0025a43:	31 d2                	xor    edx,edx
c0025a45:	89 d0                	mov    eax,edx
c0025a47:	c1 e8 08             	shr    eax,0x8
c0025a4a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0025a4d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0025a53:	09 fb                	or     ebx,edi
c0025a55:	c1 e3 17             	shl    ebx,0x17
c0025a58:	09 c3                	or     ebx,eax
c0025a5a:	f6 c2 7f             	test   dl,0x7f
c0025a5d:	0f 95 c1             	setne  cl
c0025a60:	09 c8                	or     eax,ecx
c0025a62:	83 e0 01             	and    eax,0x1
c0025a65:	c1 ea 07             	shr    edx,0x7
c0025a68:	21 c2                	and    edx,eax
c0025a6a:	8d 34 13             	lea    esi,[ebx+edx*1]
c0025a6d:	eb 03                	jmp    c0025a72 <__mulsf3+0x1b9>
c0025a6f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0025a72:	89 f0                	mov    eax,esi
c0025a74:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025a77:	5b                   	pop    ebx
c0025a78:	5e                   	pop    esi
c0025a79:	5f                   	pop    edi
c0025a7a:	5d                   	pop    ebp
c0025a7b:	c3                   	ret    

c0025a7c <__divsf3>:
c0025a7c:	55                   	push   ebp
c0025a7d:	89 e5                	mov    ebp,esp
c0025a7f:	57                   	push   edi
c0025a80:	56                   	push   esi
c0025a81:	53                   	push   ebx
c0025a82:	83 ec 1c             	sub    esp,0x1c
c0025a85:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0025a88:	89 d8                	mov    eax,ebx
c0025a8a:	89 d9                	mov    ecx,ebx
c0025a8c:	c1 f9 17             	sar    ecx,0x17
c0025a8f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0025a92:	c1 e0 08             	shl    eax,0x8
c0025a95:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025a9a:	89 c1                	mov    ecx,eax
c0025a9c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a9f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025aa2:	89 c7                	mov    edi,eax
c0025aa4:	c1 ff 17             	sar    edi,0x17
c0025aa7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025aab:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025aae:	89 f8                	mov    eax,edi
c0025ab0:	0f b6 c0             	movzx  eax,al
c0025ab3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0025ab6:	29 c6                	sub    esi,eax
c0025ab8:	83 c6 7f             	add    esi,0x7f
c0025abb:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025abe:	42                   	inc    edx
c0025abf:	80 e2 fe             	and    dl,0xfe
c0025ac2:	0f 85 9c 00 00 00    	jne    c0025b64 <__divsf3+0xe8>
c0025ac8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0025acc:	74 33                	je     c0025b01 <__divsf3+0x85>
c0025ace:	85 c9                	test   ecx,ecx
c0025ad0:	0f 85 c7 01 00 00    	jne    c0025c9d <__divsf3+0x221>
c0025ad6:	8d 57 01             	lea    edx,[edi+0x1]
c0025ad9:	80 e2 fe             	and    dl,0xfe
c0025adc:	75 2f                	jne    c0025b0d <__divsf3+0x91>
c0025ade:	85 c0                	test   eax,eax
c0025ae0:	74 2b                	je     c0025b0d <__divsf3+0x91>
c0025ae2:	51                   	push   ecx
c0025ae3:	51                   	push   ecx
c0025ae4:	6a 00                	push   0x0
c0025ae6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025ae9:	e8 d2 03 00 00       	call   c0025ec0 <__nesf2>
c0025aee:	83 c4 10             	add    esp,0x10
c0025af1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0025af4:	85 c0                	test   eax,eax
c0025af6:	0f 85 a1 01 00 00    	jne    c0025c9d <__divsf3+0x221>
c0025afc:	e9 92 01 00 00       	jmp    c0025c93 <__divsf3+0x217>
c0025b01:	85 c9                	test   ecx,ecx
c0025b03:	75 1b                	jne    c0025b20 <__divsf3+0xa4>
c0025b05:	8d 57 01             	lea    edx,[edi+0x1]
c0025b08:	80 e2 fe             	and    dl,0xfe
c0025b0b:	74 1e                	je     c0025b2b <__divsf3+0xaf>
c0025b0d:	85 ff                	test   edi,edi
c0025b0f:	0f 89 88 01 00 00    	jns    c0025c9d <__divsf3+0x221>
c0025b15:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0025b1b:	e9 7d 01 00 00       	jmp    c0025c9d <__divsf3+0x221>
c0025b20:	8d 56 ff             	lea    edx,[esi-0x1]
c0025b23:	01 c9                	add    ecx,ecx
c0025b25:	78 3d                	js     c0025b64 <__divsf3+0xe8>
c0025b27:	89 d6                	mov    esi,edx
c0025b29:	eb f5                	jmp    c0025b20 <__divsf3+0xa4>
c0025b2b:	85 c0                	test   eax,eax
c0025b2d:	b8 00 00 00 00       	mov    eax,0x0
c0025b32:	74 18                	je     c0025b4c <__divsf3+0xd0>
c0025b34:	52                   	push   edx
c0025b35:	52                   	push   edx
c0025b36:	50                   	push   eax
c0025b37:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025b3a:	e8 81 03 00 00       	call   c0025ec0 <__nesf2>
c0025b3f:	83 c4 10             	add    esp,0x10
c0025b42:	85 c0                	test   eax,eax
c0025b44:	0f 85 50 01 00 00    	jne    c0025c9a <__divsf3+0x21e>
c0025b4a:	eb c1                	jmp    c0025b0d <__divsf3+0x91>
c0025b4c:	56                   	push   esi
c0025b4d:	56                   	push   esi
c0025b4e:	50                   	push   eax
c0025b4f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025b52:	e8 69 03 00 00       	call   c0025ec0 <__nesf2>
c0025b57:	83 c4 10             	add    esp,0x10
c0025b5a:	85 c0                	test   eax,eax
c0025b5c:	0f 84 31 01 00 00    	je     c0025c93 <__divsf3+0x217>
c0025b62:	eb a9                	jmp    c0025b0d <__divsf3+0x91>
c0025b64:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0025b67:	c1 e3 08             	shl    ebx,0x8
c0025b6a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0025b70:	8d 57 01             	lea    edx,[edi+0x1]
c0025b73:	80 e2 fe             	and    dl,0xfe
c0025b76:	75 71                	jne    c0025be9 <__divsf3+0x16d>
c0025b78:	85 c0                	test   eax,eax
c0025b7a:	ba 00 00 00 00       	mov    edx,0x0
c0025b7f:	74 2f                	je     c0025bb0 <__divsf3+0x134>
c0025b81:	51                   	push   ecx
c0025b82:	51                   	push   ecx
c0025b83:	52                   	push   edx
c0025b84:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025b87:	e8 f9 02 00 00       	call   c0025e85 <__eqsf2>
c0025b8c:	83 c4 10             	add    esp,0x10
c0025b8f:	85 c0                	test   eax,eax
c0025b91:	0f 85 03 01 00 00    	jne    c0025c9a <__divsf3+0x21e>
c0025b97:	31 d2                	xor    edx,edx
c0025b99:	89 d3                	mov    ebx,edx
c0025b9b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025b9e:	31 f8                	xor    eax,edi
c0025ba0:	0f 89 f7 00 00 00    	jns    c0025c9d <__divsf3+0x221>
c0025ba6:	bb 00 00 00 80       	mov    ebx,0x80000000
c0025bab:	e9 ed 00 00 00       	jmp    c0025c9d <__divsf3+0x221>
c0025bb0:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0025bb3:	50                   	push   eax
c0025bb4:	50                   	push   eax
c0025bb5:	52                   	push   edx
c0025bb6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025bb9:	e8 c7 02 00 00       	call   c0025e85 <__eqsf2>
c0025bbe:	83 c4 10             	add    esp,0x10
c0025bc1:	85 c0                	test   eax,eax
c0025bc3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0025bc6:	75 16                	jne    c0025bde <__divsf3+0x162>
c0025bc8:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0025bcb:	31 fb                	xor    ebx,edi
c0025bcd:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0025bd3:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0025bd9:	e9 bf 00 00 00       	jmp    c0025c9d <__divsf3+0x221>
c0025bde:	8d 46 01             	lea    eax,[esi+0x1]
c0025be1:	01 db                	add    ebx,ebx
c0025be3:	78 04                	js     c0025be9 <__divsf3+0x16d>
c0025be5:	89 c6                	mov    esi,eax
c0025be7:	eb f5                	jmp    c0025bde <__divsf3+0x162>
c0025be9:	89 c8                	mov    eax,ecx
c0025beb:	0d 00 00 00 80       	or     eax,0x80000000
c0025bf0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0025bf6:	31 d2                	xor    edx,edx
c0025bf8:	39 d8                	cmp    eax,ebx
c0025bfa:	72 07                	jb     c0025c03 <__divsf3+0x187>
c0025bfc:	29 d8                	sub    eax,ebx
c0025bfe:	ba 01 00 00 00       	mov    edx,0x1
c0025c03:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0025c0a:	01 d2                	add    edx,edx
c0025c0c:	89 c1                	mov    ecx,eax
c0025c0e:	01 c0                	add    eax,eax
c0025c10:	85 c9                	test   ecx,ecx
c0025c12:	78 04                	js     c0025c18 <__divsf3+0x19c>
c0025c14:	39 c3                	cmp    ebx,eax
c0025c16:	77 05                	ja     c0025c1d <__divsf3+0x1a1>
c0025c18:	29 d8                	sub    eax,ebx
c0025c1a:	83 ca 01             	or     edx,0x1
c0025c1d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0025c20:	75 e8                	jne    c0025c0a <__divsf3+0x18e>
c0025c22:	85 c0                	test   eax,eax
c0025c24:	0f 95 c0             	setne  al
c0025c27:	0f b6 c0             	movzx  eax,al
c0025c2a:	c1 e2 06             	shl    edx,0x6
c0025c2d:	09 c2                	or     edx,eax
c0025c2f:	78 03                	js     c0025c34 <__divsf3+0x1b8>
c0025c31:	01 d2                	add    edx,edx
c0025c33:	4e                   	dec    esi
c0025c34:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0025c3a:	7f 22                	jg     c0025c5e <__divsf3+0x1e2>
c0025c3c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0025c42:	85 f6                	test   esi,esi
c0025c44:	7f 23                	jg     c0025c69 <__divsf3+0x1ed>
c0025c46:	83 fe e9             	cmp    esi,0xffffffe9
c0025c49:	7c 1a                	jl     c0025c65 <__divsf3+0x1e9>
c0025c4b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025c51:	b9 01 00 00 00       	mov    ecx,0x1
c0025c56:	29 f1                	sub    ecx,esi
c0025c58:	d3 ea                	shr    edx,cl
c0025c5a:	31 f6                	xor    esi,esi
c0025c5c:	eb 0b                	jmp    c0025c69 <__divsf3+0x1ed>
c0025c5e:	be ff 00 00 00       	mov    esi,0xff
c0025c63:	eb 02                	jmp    c0025c67 <__divsf3+0x1eb>
c0025c65:	31 f6                	xor    esi,esi
c0025c67:	31 d2                	xor    edx,edx
c0025c69:	89 d0                	mov    eax,edx
c0025c6b:	c1 e8 08             	shr    eax,0x8
c0025c6e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0025c71:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0025c77:	09 fe                	or     esi,edi
c0025c79:	c1 e6 17             	shl    esi,0x17
c0025c7c:	09 c6                	or     esi,eax
c0025c7e:	f6 c2 7f             	test   dl,0x7f
c0025c81:	0f 95 c1             	setne  cl
c0025c84:	09 c8                	or     eax,ecx
c0025c86:	83 e0 01             	and    eax,0x1
c0025c89:	c1 ea 07             	shr    edx,0x7
c0025c8c:	21 c2                	and    edx,eax
c0025c8e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0025c91:	eb 0a                	jmp    c0025c9d <__divsf3+0x221>
c0025c93:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0025c98:	eb 03                	jmp    c0025c9d <__divsf3+0x221>
c0025c9a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0025c9d:	89 d8                	mov    eax,ebx
c0025c9f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025ca2:	5b                   	pop    ebx
c0025ca3:	5e                   	pop    esi
c0025ca4:	5f                   	pop    edi
c0025ca5:	5d                   	pop    ebp
c0025ca6:	c3                   	ret    

c0025ca7 <__floatsisf>:
c0025ca7:	55                   	push   ebp
c0025ca8:	89 e5                	mov    ebp,esp
c0025caa:	53                   	push   ebx
c0025cab:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025cae:	85 d2                	test   edx,edx
c0025cb0:	7e 2b                	jle    c0025cdd <__floatsisf+0x36>
c0025cb2:	0f bd ca             	bsr    ecx,edx
c0025cb5:	83 f1 1f             	xor    ecx,0x1f
c0025cb8:	d3 e2                	shl    edx,cl
c0025cba:	89 d0                	mov    eax,edx
c0025cbc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025cc1:	89 c3                	mov    ebx,eax
c0025cc3:	c1 eb 08             	shr    ebx,0x8
c0025cc6:	80 e2 7f             	and    dl,0x7f
c0025cc9:	0f 95 c2             	setne  dl
c0025ccc:	09 da                	or     edx,ebx
c0025cce:	83 e2 01             	and    edx,0x1
c0025cd1:	c1 e8 07             	shr    eax,0x7
c0025cd4:	21 c2                	and    edx,eax
c0025cd6:	b8 9e 00 00 00       	mov    eax,0x9e
c0025cdb:	eb 32                	jmp    c0025d0f <__floatsisf+0x68>
c0025cdd:	b8 00 00 00 00       	mov    eax,0x0
c0025ce2:	74 34                	je     c0025d18 <__floatsisf+0x71>
c0025ce4:	f7 da                	neg    edx
c0025ce6:	0f bd ca             	bsr    ecx,edx
c0025ce9:	83 f1 1f             	xor    ecx,0x1f
c0025cec:	d3 e2                	shl    edx,cl
c0025cee:	89 d0                	mov    eax,edx
c0025cf0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025cf5:	89 c3                	mov    ebx,eax
c0025cf7:	c1 eb 08             	shr    ebx,0x8
c0025cfa:	80 e2 7f             	and    dl,0x7f
c0025cfd:	0f 95 c2             	setne  dl
c0025d00:	09 da                	or     edx,ebx
c0025d02:	83 e2 01             	and    edx,0x1
c0025d05:	c1 e8 07             	shr    eax,0x7
c0025d08:	21 c2                	and    edx,eax
c0025d0a:	b8 9e 01 00 00       	mov    eax,0x19e
c0025d0f:	29 c8                	sub    eax,ecx
c0025d11:	c1 e0 17             	shl    eax,0x17
c0025d14:	09 d8                	or     eax,ebx
c0025d16:	01 d0                	add    eax,edx
c0025d18:	5b                   	pop    ebx
c0025d19:	5d                   	pop    ebp
c0025d1a:	c3                   	ret    

c0025d1b <__floatunsisf>:
c0025d1b:	55                   	push   ebp
c0025d1c:	89 e5                	mov    ebp,esp
c0025d1e:	53                   	push   ebx
c0025d1f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025d22:	31 c0                	xor    eax,eax
c0025d24:	85 d2                	test   edx,edx
c0025d26:	74 32                	je     c0025d5a <__floatunsisf+0x3f>
c0025d28:	0f bd ca             	bsr    ecx,edx
c0025d2b:	83 f1 1f             	xor    ecx,0x1f
c0025d2e:	d3 e2                	shl    edx,cl
c0025d30:	89 d0                	mov    eax,edx
c0025d32:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025d37:	89 c3                	mov    ebx,eax
c0025d39:	c1 eb 08             	shr    ebx,0x8
c0025d3c:	80 e2 7f             	and    dl,0x7f
c0025d3f:	0f 95 c2             	setne  dl
c0025d42:	09 da                	or     edx,ebx
c0025d44:	83 e2 01             	and    edx,0x1
c0025d47:	c1 e8 07             	shr    eax,0x7
c0025d4a:	21 c2                	and    edx,eax
c0025d4c:	b8 9e 00 00 00       	mov    eax,0x9e
c0025d51:	29 c8                	sub    eax,ecx
c0025d53:	c1 e0 17             	shl    eax,0x17
c0025d56:	09 d8                	or     eax,ebx
c0025d58:	01 d0                	add    eax,edx
c0025d5a:	5b                   	pop    ebx
c0025d5b:	5d                   	pop    ebp
c0025d5c:	c3                   	ret    

c0025d5d <__fixsfsi>:
c0025d5d:	55                   	push   ebp
c0025d5e:	89 e5                	mov    ebp,esp
c0025d60:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025d63:	89 d1                	mov    ecx,edx
c0025d65:	c1 e1 08             	shl    ecx,0x8
c0025d68:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0025d6e:	c1 fa 17             	sar    edx,0x17
c0025d71:	78 1c                	js     c0025d8f <__fixsfsi+0x32>
c0025d73:	83 ea 7f             	sub    edx,0x7f
c0025d76:	31 c0                	xor    eax,eax
c0025d78:	83 fa 1e             	cmp    edx,0x1e
c0025d7b:	77 40                	ja     c0025dbd <__fixsfsi+0x60>
c0025d7d:	89 c8                	mov    eax,ecx
c0025d7f:	0d 00 00 00 80       	or     eax,0x80000000
c0025d84:	b9 1f 00 00 00       	mov    ecx,0x1f
c0025d89:	29 d1                	sub    ecx,edx
c0025d8b:	d3 e8                	shr    eax,cl
c0025d8d:	eb 2e                	jmp    c0025dbd <__fixsfsi+0x60>
c0025d8f:	31 c0                	xor    eax,eax
c0025d91:	81 c2 81 00 00 00    	add    edx,0x81
c0025d97:	78 24                	js     c0025dbd <__fixsfsi+0x60>
c0025d99:	83 fa 1e             	cmp    edx,0x1e
c0025d9c:	7e 09                	jle    c0025da7 <__fixsfsi+0x4a>
c0025d9e:	83 fa 1f             	cmp    edx,0x1f
c0025da1:	75 18                	jne    c0025dbb <__fixsfsi+0x5e>
c0025da3:	85 c9                	test   ecx,ecx
c0025da5:	75 14                	jne    c0025dbb <__fixsfsi+0x5e>
c0025da7:	89 c8                	mov    eax,ecx
c0025da9:	0d 00 00 00 80       	or     eax,0x80000000
c0025dae:	b9 1f 00 00 00       	mov    ecx,0x1f
c0025db3:	29 d1                	sub    ecx,edx
c0025db5:	d3 e8                	shr    eax,cl
c0025db7:	f7 d8                	neg    eax
c0025db9:	eb 02                	jmp    c0025dbd <__fixsfsi+0x60>
c0025dbb:	31 c0                	xor    eax,eax
c0025dbd:	5d                   	pop    ebp
c0025dbe:	c3                   	ret    

c0025dbf <__fixunssfsi>:
c0025dbf:	55                   	push   ebp
c0025dc0:	89 e5                	mov    ebp,esp
c0025dc2:	53                   	push   ebx
c0025dc3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025dc6:	89 d3                	mov    ebx,edx
c0025dc8:	c1 fb 17             	sar    ebx,0x17
c0025dcb:	83 eb 7f             	sub    ebx,0x7f
c0025dce:	31 c0                	xor    eax,eax
c0025dd0:	83 fb 1f             	cmp    ebx,0x1f
c0025dd3:	77 18                	ja     c0025ded <__fixunssfsi+0x2e>
c0025dd5:	89 d0                	mov    eax,edx
c0025dd7:	c1 e0 08             	shl    eax,0x8
c0025dda:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025ddf:	0d 00 00 00 80       	or     eax,0x80000000
c0025de4:	b9 1f 00 00 00       	mov    ecx,0x1f
c0025de9:	29 d9                	sub    ecx,ebx
c0025deb:	d3 e8                	shr    eax,cl
c0025ded:	5b                   	pop    ebx
c0025dee:	5d                   	pop    ebp
c0025def:	c3                   	ret    

c0025df0 <__cmpsf2>:
c0025df0:	55                   	push   ebp
c0025df1:	89 e5                	mov    ebp,esp
c0025df3:	57                   	push   edi
c0025df4:	56                   	push   esi
c0025df5:	53                   	push   ebx
c0025df6:	83 ec 24             	sub    esp,0x24
c0025df9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025dfc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025dff:	e8 4f 10 00 00       	call   c0026e53 <__truncdfsf2>
c0025e04:	5a                   	pop    edx
c0025e05:	59                   	pop    ecx
c0025e06:	89 c3                	mov    ebx,eax
c0025e08:	c1 e8 17             	shr    eax,0x17
c0025e0b:	0f b6 f0             	movzx  esi,al
c0025e0e:	89 d8                	mov    eax,ebx
c0025e10:	c1 e8 1f             	shr    eax,0x1f
c0025e13:	31 c6                	xor    esi,eax
c0025e15:	c1 e3 08             	shl    ebx,0x8
c0025e18:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0025e1b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0025e1e:	e8 30 10 00 00       	call   c0026e53 <__truncdfsf2>
c0025e23:	83 c4 10             	add    esp,0x10
c0025e26:	89 c1                	mov    ecx,eax
c0025e28:	c1 e9 17             	shr    ecx,0x17
c0025e2b:	0f b6 c9             	movzx  ecx,cl
c0025e2e:	89 c7                	mov    edi,eax
c0025e30:	c1 ef 1f             	shr    edi,0x1f
c0025e33:	89 ca                	mov    edx,ecx
c0025e35:	31 fa                	xor    edx,edi
c0025e37:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0025e3a:	c1 e0 08             	shl    eax,0x8
c0025e3d:	89 c2                	mov    edx,eax
c0025e3f:	89 d8                	mov    eax,ebx
c0025e41:	09 d0                	or     eax,edx
c0025e43:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025e48:	09 f0                	or     eax,esi
c0025e4a:	75 08                	jne    c0025e54 <__cmpsf2+0x64>
c0025e4c:	31 c0                	xor    eax,eax
c0025e4e:	39 f9                	cmp    ecx,edi
c0025e50:	75 0c                	jne    c0025e5e <__cmpsf2+0x6e>
c0025e52:	eb 29                	jmp    c0025e7d <__cmpsf2+0x8d>
c0025e54:	b8 01 00 00 00       	mov    eax,0x1
c0025e59:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0025e5c:	7f 1f                	jg     c0025e7d <__cmpsf2+0x8d>
c0025e5e:	83 c8 ff             	or     eax,0xffffffff
c0025e61:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0025e64:	7c 17                	jl     c0025e7d <__cmpsf2+0x8d>
c0025e66:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0025e6c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0025e72:	b8 01 00 00 00       	mov    eax,0x1
c0025e77:	39 d3                	cmp    ebx,edx
c0025e79:	77 02                	ja     c0025e7d <__cmpsf2+0x8d>
c0025e7b:	19 c0                	sbb    eax,eax
c0025e7d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025e80:	5b                   	pop    ebx
c0025e81:	5e                   	pop    esi
c0025e82:	5f                   	pop    edi
c0025e83:	5d                   	pop    ebp
c0025e84:	c3                   	ret    

c0025e85 <__eqsf2>:
c0025e85:	55                   	push   ebp
c0025e86:	89 e5                	mov    ebp,esp
c0025e88:	83 ec 24             	sub    esp,0x24
c0025e8b:	6a 01                	push   0x1
c0025e8d:	83 ec 0c             	sub    esp,0xc
c0025e90:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025e93:	e8 df 10 00 00       	call   c0026f77 <__extendsfdf2>
c0025e98:	83 c4 10             	add    esp,0x10
c0025e9b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025e9e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025ea1:	52                   	push   edx
c0025ea2:	50                   	push   eax
c0025ea3:	50                   	push   eax
c0025ea4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ea7:	e8 cb 10 00 00       	call   c0026f77 <__extendsfdf2>
c0025eac:	59                   	pop    ecx
c0025ead:	59                   	pop    ecx
c0025eae:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025eb1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025eb4:	52                   	push   edx
c0025eb5:	50                   	push   eax
c0025eb6:	e8 35 ff ff ff       	call   c0025df0 <__cmpsf2>
c0025ebb:	83 c4 20             	add    esp,0x20
c0025ebe:	c9                   	leave  
c0025ebf:	c3                   	ret    

c0025ec0 <__nesf2>:
c0025ec0:	eb c3                	jmp    c0025e85 <__eqsf2>

c0025ec2 <__gtsf2>:
c0025ec2:	55                   	push   ebp
c0025ec3:	89 e5                	mov    ebp,esp
c0025ec5:	83 ec 24             	sub    esp,0x24
c0025ec8:	6a ff                	push   0xffffffff
c0025eca:	83 ec 0c             	sub    esp,0xc
c0025ecd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025ed0:	e8 a2 10 00 00       	call   c0026f77 <__extendsfdf2>
c0025ed5:	83 c4 10             	add    esp,0x10
c0025ed8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025edb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025ede:	52                   	push   edx
c0025edf:	50                   	push   eax
c0025ee0:	50                   	push   eax
c0025ee1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ee4:	e8 8e 10 00 00       	call   c0026f77 <__extendsfdf2>
c0025ee9:	59                   	pop    ecx
c0025eea:	59                   	pop    ecx
c0025eeb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025eee:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025ef1:	52                   	push   edx
c0025ef2:	50                   	push   eax
c0025ef3:	e8 f8 fe ff ff       	call   c0025df0 <__cmpsf2>
c0025ef8:	83 c4 20             	add    esp,0x20
c0025efb:	c9                   	leave  
c0025efc:	c3                   	ret    

c0025efd <__gesf2>:
c0025efd:	eb c3                	jmp    c0025ec2 <__gtsf2>

c0025eff <__ltsf2>:
c0025eff:	eb 84                	jmp    c0025e85 <__eqsf2>

c0025f01 <__lesf2>:
c0025f01:	eb 82                	jmp    c0025e85 <__eqsf2>

c0025f03 <__adddf3>:
c0025f03:	55                   	push   ebp
c0025f04:	89 e5                	mov    ebp,esp
c0025f06:	57                   	push   edi
c0025f07:	56                   	push   esi
c0025f08:	53                   	push   ebx
c0025f09:	83 ec 24             	sub    esp,0x24
c0025f0c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0025f0f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025f12:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025f15:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025f18:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025f1b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025f1e:	89 c8                	mov    eax,ecx
c0025f20:	89 ce                	mov    esi,ecx
c0025f22:	c1 fe 14             	sar    esi,0x14
c0025f25:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0025f28:	89 fb                	mov    ebx,edi
c0025f2a:	89 fa                	mov    edx,edi
c0025f2c:	c1 e2 0b             	shl    edx,0xb
c0025f2f:	c1 e0 0b             	shl    eax,0xb
c0025f32:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0025f37:	c1 eb 15             	shr    ebx,0x15
c0025f3a:	09 d8                	or     eax,ebx
c0025f3c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0025f3f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0025f42:	c1 fe 14             	sar    esi,0x14
c0025f45:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0025f48:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0025f4b:	89 f3                	mov    ebx,esi
c0025f4d:	c1 e3 0b             	shl    ebx,0xb
c0025f50:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0025f53:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0025f56:	c1 e3 0b             	shl    ebx,0xb
c0025f59:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0025f5f:	c1 ee 15             	shr    esi,0x15
c0025f62:	09 f3                	or     ebx,esi
c0025f64:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0025f67:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0025f6a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0025f6d:	0f 88 5f 02 00 00    	js     c00261d2 <__adddf3+0x2cf>
c0025f73:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0025f76:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0025f79:	85 db                	test   ebx,ebx
c0025f7b:	0f 8e c7 00 00 00    	jle    c0026048 <__adddf3+0x145>
c0025f81:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0025f88:	75 1a                	jne    c0025fa4 <__adddf3+0xa1>
c0025f8a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0025f8d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0025f90:	0f 84 b2 05 00 00    	je     c0026548 <__adddf3+0x645>
c0025f96:	4b                   	dec    ebx
c0025f97:	75 23                	jne    c0025fbc <__adddf3+0xb9>
c0025f99:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0025f9c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0025f9f:	e9 99 00 00 00       	jmp    c002603d <__adddf3+0x13a>
c0025fa4:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0025fa7:	f7 d6                	not    esi
c0025fa9:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0025faf:	0f 84 93 05 00 00    	je     c0026548 <__adddf3+0x645>
c0025fb5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0025fbc:	83 fb 1f             	cmp    ebx,0x1f
c0025fbf:	7e 42                	jle    c0026003 <__adddf3+0x100>
c0025fc1:	83 fb 3f             	cmp    ebx,0x3f
c0025fc4:	0f 8f 7e 05 00 00    	jg     c0026548 <__adddf3+0x645>
c0025fca:	83 e3 1f             	and    ebx,0x1f
c0025fcd:	89 d9                	mov    ecx,ebx
c0025fcf:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0025fd2:	d3 ef                	shr    edi,cl
c0025fd4:	31 db                	xor    ebx,ebx
c0025fd6:	85 c9                	test   ecx,ecx
c0025fd8:	74 15                	je     c0025fef <__adddf3+0xec>
c0025fda:	be 20 00 00 00       	mov    esi,0x20
c0025fdf:	29 ce                	sub    esi,ecx
c0025fe1:	89 f1                	mov    ecx,esi
c0025fe3:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0025fe6:	d3 e6                	shl    esi,cl
c0025fe8:	31 db                	xor    ebx,ebx
c0025fea:	85 f6                	test   esi,esi
c0025fec:	0f 95 c3             	setne  bl
c0025fef:	31 c9                	xor    ecx,ecx
c0025ff1:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0025ff5:	0f 95 c1             	setne  cl
c0025ff8:	09 cf                	or     edi,ecx
c0025ffa:	09 fb                	or     ebx,edi
c0025ffc:	01 da                	add    edx,ebx
c0025ffe:	83 d0 00             	adc    eax,0x0
c0026001:	eb 3a                	jmp    c002603d <__adddf3+0x13a>
c0026003:	bf 20 00 00 00       	mov    edi,0x20
c0026008:	29 df                	sub    edi,ebx
c002600a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002600d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026010:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0026013:	d3 e6                	shl    esi,cl
c0026015:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026018:	88 d9                	mov    cl,bl
c002601a:	d3 ef                	shr    edi,cl
c002601c:	09 fe                	or     esi,edi
c002601e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026021:	88 d9                	mov    cl,bl
c0026023:	d3 ef                	shr    edi,cl
c0026025:	89 fb                	mov    ebx,edi
c0026027:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002602a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002602d:	d3 e7                	shl    edi,cl
c002602f:	85 ff                	test   edi,edi
c0026031:	0f 95 c1             	setne  cl
c0026034:	0f b6 c9             	movzx  ecx,cl
c0026037:	09 ce                	or     esi,ecx
c0026039:	01 f2                	add    edx,esi
c002603b:	11 d8                	adc    eax,ebx
c002603d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026040:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026043:	e9 52 01 00 00       	jmp    c002619a <__adddf3+0x297>
c0026048:	0f 84 d5 00 00 00    	je     c0026123 <__adddf3+0x220>
c002604e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026051:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0026054:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026057:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002605a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0026061:	75 20                	jne    c0026083 <__adddf3+0x180>
c0026063:	89 d6                	mov    esi,edx
c0026065:	09 c6                	or     esi,eax
c0026067:	0f 84 db 04 00 00    	je     c0026548 <__adddf3+0x645>
c002606d:	4b                   	dec    ebx
c002606e:	75 29                	jne    c0026099 <__adddf3+0x196>
c0026070:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026073:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026076:	01 d1                	add    ecx,edx
c0026078:	11 c6                	adc    esi,eax
c002607a:	89 f0                	mov    eax,esi
c002607c:	89 ca                	mov    edx,ecx
c002607e:	e9 17 01 00 00       	jmp    c002619a <__adddf3+0x297>
c0026083:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0026086:	f7 d6                	not    esi
c0026088:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002608e:	0f 84 b4 04 00 00    	je     c0026548 <__adddf3+0x645>
c0026094:	0d 00 00 00 80       	or     eax,0x80000000
c0026099:	83 fb 1f             	cmp    ebx,0x1f
c002609c:	7e 48                	jle    c00260e6 <__adddf3+0x1e3>
c002609e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00260a1:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00260a4:	83 fb 3f             	cmp    ebx,0x3f
c00260a7:	0f 8f 9b 04 00 00    	jg     c0026548 <__adddf3+0x645>
c00260ad:	83 e3 1f             	and    ebx,0x1f
c00260b0:	89 d9                	mov    ecx,ebx
c00260b2:	89 c7                	mov    edi,eax
c00260b4:	d3 ef                	shr    edi,cl
c00260b6:	31 db                	xor    ebx,ebx
c00260b8:	85 c9                	test   ecx,ecx
c00260ba:	74 12                	je     c00260ce <__adddf3+0x1cb>
c00260bc:	be 20 00 00 00       	mov    esi,0x20
c00260c1:	29 ce                	sub    esi,ecx
c00260c3:	89 f1                	mov    ecx,esi
c00260c5:	d3 e0                	shl    eax,cl
c00260c7:	31 db                	xor    ebx,ebx
c00260c9:	85 c0                	test   eax,eax
c00260cb:	0f 95 c3             	setne  bl
c00260ce:	31 c0                	xor    eax,eax
c00260d0:	85 d2                	test   edx,edx
c00260d2:	0f 95 c0             	setne  al
c00260d5:	09 c7                	or     edi,eax
c00260d7:	09 fb                	or     ebx,edi
c00260d9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00260dc:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00260df:	01 da                	add    edx,ebx
c00260e1:	83 d6 00             	adc    esi,0x0
c00260e4:	eb 39                	jmp    c002611f <__adddf3+0x21c>
c00260e6:	be 20 00 00 00       	mov    esi,0x20
c00260eb:	29 de                	sub    esi,ebx
c00260ed:	89 c7                	mov    edi,eax
c00260ef:	89 f1                	mov    ecx,esi
c00260f1:	d3 e7                	shl    edi,cl
c00260f3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00260f6:	89 d7                	mov    edi,edx
c00260f8:	88 d9                	mov    cl,bl
c00260fa:	d3 ef                	shr    edi,cl
c00260fc:	89 f9                	mov    ecx,edi
c00260fe:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026101:	09 cf                	or     edi,ecx
c0026103:	88 d9                	mov    cl,bl
c0026105:	d3 e8                	shr    eax,cl
c0026107:	89 f1                	mov    ecx,esi
c0026109:	d3 e2                	shl    edx,cl
c002610b:	85 d2                	test   edx,edx
c002610d:	0f 95 c2             	setne  dl
c0026110:	0f b6 d2             	movzx  edx,dl
c0026113:	09 d7                	or     edi,edx
c0026115:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026118:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002611b:	01 fa                	add    edx,edi
c002611d:	11 c6                	adc    esi,eax
c002611f:	89 f0                	mov    eax,esi
c0026121:	eb 77                	jmp    c002619a <__adddf3+0x297>
c0026123:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026126:	46                   	inc    esi
c0026127:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002612a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0026130:	75 41                	jne    c0026173 <__adddf3+0x270>
c0026132:	89 d3                	mov    ebx,edx
c0026134:	09 c3                	or     ebx,eax
c0026136:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002613d:	75 27                	jne    c0026166 <__adddf3+0x263>
c002613f:	85 db                	test   ebx,ebx
c0026141:	0f 84 fb 03 00 00    	je     c0026542 <__adddf3+0x63f>
c0026147:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002614a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002614d:	0f 84 f5 03 00 00    	je     c0026548 <__adddf3+0x645>
c0026153:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0026156:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0026159:	85 c0                	test   eax,eax
c002615b:	0f 89 91 03 00 00    	jns    c00264f2 <__adddf3+0x5ef>
c0026161:	e9 85 03 00 00       	jmp    c00264eb <__adddf3+0x5e8>
c0026166:	85 db                	test   ebx,ebx
c0026168:	0f 85 da 03 00 00    	jne    c0026548 <__adddf3+0x645>
c002616e:	e9 cf 03 00 00       	jmp    c0026542 <__adddf3+0x63f>
c0026173:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0026176:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0026179:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002617c:	f7 d1                	not    ecx
c002617e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0026184:	0f 84 70 03 00 00    	je     c00264fa <__adddf3+0x5f7>
c002618a:	d1 ea                	shr    edx,1
c002618c:	89 c1                	mov    ecx,eax
c002618e:	c1 e1 1f             	shl    ecx,0x1f
c0026191:	09 ca                	or     edx,ecx
c0026193:	d1 e8                	shr    eax,1
c0026195:	e9 6f 03 00 00       	jmp    c0026509 <__adddf3+0x606>
c002619a:	85 c0                	test   eax,eax
c002619c:	0f 89 67 03 00 00    	jns    c0026509 <__adddf3+0x606>
c00261a2:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00261a5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00261a8:	f7 d1                	not    ecx
c00261aa:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00261b0:	0f 84 44 03 00 00    	je     c00264fa <__adddf3+0x5f7>
c00261b6:	89 d1                	mov    ecx,edx
c00261b8:	d1 e9                	shr    ecx,1
c00261ba:	83 e2 01             	and    edx,0x1
c00261bd:	09 ca                	or     edx,ecx
c00261bf:	89 c1                	mov    ecx,eax
c00261c1:	c1 e1 1f             	shl    ecx,0x1f
c00261c4:	09 ca                	or     edx,ecx
c00261c6:	d1 e8                	shr    eax,1
c00261c8:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00261cd:	e9 37 03 00 00       	jmp    c0026509 <__adddf3+0x606>
c00261d2:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00261d5:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00261db:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00261de:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00261e1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00261e7:	29 de                	sub    esi,ebx
c00261e9:	85 f6                	test   esi,esi
c00261eb:	0f 8e bd 00 00 00    	jle    c00262ae <__adddf3+0x3ab>
c00261f1:	85 db                	test   ebx,ebx
c00261f3:	75 17                	jne    c002620c <__adddf3+0x309>
c00261f5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00261f8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00261fb:	0f 84 47 03 00 00    	je     c0026548 <__adddf3+0x645>
c0026201:	4e                   	dec    esi
c0026202:	75 20                	jne    c0026224 <__adddf3+0x321>
c0026204:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0026207:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002620a:	eb 5b                	jmp    c0026267 <__adddf3+0x364>
c002620c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002620f:	f7 d3                	not    ebx
c0026211:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026217:	0f 84 2b 03 00 00    	je     c0026548 <__adddf3+0x645>
c002621d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0026224:	83 fe 1f             	cmp    esi,0x1f
c0026227:	7e 49                	jle    c0026272 <__adddf3+0x36f>
c0026229:	83 fe 3f             	cmp    esi,0x3f
c002622c:	0f 8f 16 03 00 00    	jg     c0026548 <__adddf3+0x645>
c0026232:	83 e6 1f             	and    esi,0x1f
c0026235:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026238:	89 f1                	mov    ecx,esi
c002623a:	d3 ef                	shr    edi,cl
c002623c:	31 db                	xor    ebx,ebx
c002623e:	85 f6                	test   esi,esi
c0026240:	74 13                	je     c0026255 <__adddf3+0x352>
c0026242:	b9 20 00 00 00       	mov    ecx,0x20
c0026247:	29 f1                	sub    ecx,esi
c0026249:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002624c:	d3 e6                	shl    esi,cl
c002624e:	31 db                	xor    ebx,ebx
c0026250:	85 f6                	test   esi,esi
c0026252:	0f 95 c3             	setne  bl
c0026255:	31 c9                	xor    ecx,ecx
c0026257:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002625b:	0f 95 c1             	setne  cl
c002625e:	09 cf                	or     edi,ecx
c0026260:	09 fb                	or     ebx,edi
c0026262:	29 da                	sub    edx,ebx
c0026264:	83 d8 00             	sbb    eax,0x0
c0026267:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002626a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002626d:	e9 aa 01 00 00       	jmp    c002641c <__adddf3+0x519>
c0026272:	bf 20 00 00 00       	mov    edi,0x20
c0026277:	29 f7                	sub    edi,esi
c0026279:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002627c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002627f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0026282:	d3 e3                	shl    ebx,cl
c0026284:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026287:	89 f1                	mov    ecx,esi
c0026289:	d3 ef                	shr    edi,cl
c002628b:	09 fb                	or     ebx,edi
c002628d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026290:	89 f1                	mov    ecx,esi
c0026292:	d3 ef                	shr    edi,cl
c0026294:	89 fe                	mov    esi,edi
c0026296:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026299:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002629c:	d3 e7                	shl    edi,cl
c002629e:	85 ff                	test   edi,edi
c00262a0:	0f 95 c1             	setne  cl
c00262a3:	0f b6 c9             	movzx  ecx,cl
c00262a6:	09 cb                	or     ebx,ecx
c00262a8:	29 da                	sub    edx,ebx
c00262aa:	19 f0                	sbb    eax,esi
c00262ac:	eb b9                	jmp    c0026267 <__adddf3+0x364>
c00262ae:	0f 84 cd 00 00 00    	je     c0026381 <__adddf3+0x47e>
c00262b4:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00262b7:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00262ba:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00262bd:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00262c1:	75 1b                	jne    c00262de <__adddf3+0x3db>
c00262c3:	89 d6                	mov    esi,edx
c00262c5:	09 c6                	or     esi,eax
c00262c7:	0f 84 7b 02 00 00    	je     c0026548 <__adddf3+0x645>
c00262cd:	4b                   	dec    ebx
c00262ce:	75 24                	jne    c00262f4 <__adddf3+0x3f1>
c00262d0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00262d3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00262d6:	29 d1                	sub    ecx,edx
c00262d8:	19 c6                	sbb    esi,eax
c00262da:	89 ca                	mov    edx,ecx
c00262dc:	eb 61                	jmp    c002633f <__adddf3+0x43c>
c00262de:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00262e1:	f7 d6                	not    esi
c00262e3:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00262e9:	0f 84 59 02 00 00    	je     c0026548 <__adddf3+0x645>
c00262ef:	0d 00 00 00 80       	or     eax,0x80000000
c00262f4:	83 fb 1f             	cmp    ebx,0x1f
c00262f7:	7e 4d                	jle    c0026346 <__adddf3+0x443>
c00262f9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00262fc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00262ff:	83 fb 3f             	cmp    ebx,0x3f
c0026302:	0f 8f 40 02 00 00    	jg     c0026548 <__adddf3+0x645>
c0026308:	83 e3 1f             	and    ebx,0x1f
c002630b:	89 d9                	mov    ecx,ebx
c002630d:	89 c7                	mov    edi,eax
c002630f:	d3 ef                	shr    edi,cl
c0026311:	31 db                	xor    ebx,ebx
c0026313:	85 c9                	test   ecx,ecx
c0026315:	74 12                	je     c0026329 <__adddf3+0x426>
c0026317:	be 20 00 00 00       	mov    esi,0x20
c002631c:	29 ce                	sub    esi,ecx
c002631e:	89 f1                	mov    ecx,esi
c0026320:	d3 e0                	shl    eax,cl
c0026322:	31 db                	xor    ebx,ebx
c0026324:	85 c0                	test   eax,eax
c0026326:	0f 95 c3             	setne  bl
c0026329:	31 c0                	xor    eax,eax
c002632b:	85 d2                	test   edx,edx
c002632d:	0f 95 c0             	setne  al
c0026330:	09 c7                	or     edi,eax
c0026332:	09 fb                	or     ebx,edi
c0026334:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026337:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002633a:	29 da                	sub    edx,ebx
c002633c:	83 de 00             	sbb    esi,0x0
c002633f:	89 f0                	mov    eax,esi
c0026341:	e9 d6 00 00 00       	jmp    c002641c <__adddf3+0x519>
c0026346:	be 20 00 00 00       	mov    esi,0x20
c002634b:	29 de                	sub    esi,ebx
c002634d:	89 c7                	mov    edi,eax
c002634f:	89 f1                	mov    ecx,esi
c0026351:	d3 e7                	shl    edi,cl
c0026353:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0026356:	89 d7                	mov    edi,edx
c0026358:	88 d9                	mov    cl,bl
c002635a:	d3 ef                	shr    edi,cl
c002635c:	89 f9                	mov    ecx,edi
c002635e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026361:	09 cf                	or     edi,ecx
c0026363:	88 d9                	mov    cl,bl
c0026365:	d3 e8                	shr    eax,cl
c0026367:	89 f1                	mov    ecx,esi
c0026369:	d3 e2                	shl    edx,cl
c002636b:	85 d2                	test   edx,edx
c002636d:	0f 95 c2             	setne  dl
c0026370:	0f b6 d2             	movzx  edx,dl
c0026373:	09 d7                	or     edi,edx
c0026375:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026378:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002637b:	29 fa                	sub    edx,edi
c002637d:	19 c6                	sbb    esi,eax
c002637f:	eb be                	jmp    c002633f <__adddf3+0x43c>
c0026381:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026384:	8d 5e 01             	lea    ebx,[esi+0x1]
c0026387:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c002638d:	75 6a                	jne    c00263f9 <__adddf3+0x4f6>
c002638f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0026393:	75 58                	jne    c00263ed <__adddf3+0x4ea>
c0026395:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026398:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002639b:	89 d6                	mov    esi,edx
c002639d:	09 c6                	or     esi,eax
c002639f:	75 17                	jne    c00263b8 <__adddf3+0x4b5>
c00263a1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00263a4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00263a7:	85 db                	test   ebx,ebx
c00263a9:	0f 85 99 01 00 00    	jne    c0026548 <__adddf3+0x645>
c00263af:	31 ff                	xor    edi,edi
c00263b1:	31 c9                	xor    ecx,ecx
c00263b3:	e9 90 01 00 00       	jmp    c0026548 <__adddf3+0x645>
c00263b8:	85 db                	test   ebx,ebx
c00263ba:	0f 84 88 01 00 00    	je     c0026548 <__adddf3+0x645>
c00263c0:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00263c3:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00263c6:	85 c0                	test   eax,eax
c00263c8:	79 10                	jns    c00263da <__adddf3+0x4d7>
c00263ca:	31 c9                	xor    ecx,ecx
c00263cc:	f7 da                	neg    edx
c00263ce:	0f 95 c1             	setne  cl
c00263d1:	01 c8                	add    eax,ecx
c00263d3:	f7 d8                	neg    eax
c00263d5:	e9 2f 01 00 00       	jmp    c0026509 <__adddf3+0x606>
c00263da:	31 ff                	xor    edi,edi
c00263dc:	31 c9                	xor    ecx,ecx
c00263de:	89 c3                	mov    ebx,eax
c00263e0:	09 d3                	or     ebx,edx
c00263e2:	0f 84 60 01 00 00    	je     c0026548 <__adddf3+0x645>
c00263e8:	e9 05 01 00 00       	jmp    c00264f2 <__adddf3+0x5ef>
c00263ed:	31 ff                	xor    edi,edi
c00263ef:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00263f4:	e9 4f 01 00 00       	jmp    c0026548 <__adddf3+0x645>
c00263f9:	89 c1                	mov    ecx,eax
c00263fb:	89 d0                	mov    eax,edx
c00263fd:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0026400:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0026403:	89 ca                	mov    edx,ecx
c0026405:	85 c9                	test   ecx,ecx
c0026407:	79 2c                	jns    c0026435 <__adddf3+0x532>
c0026409:	31 c9                	xor    ecx,ecx
c002640b:	f7 d8                	neg    eax
c002640d:	0f 95 c1             	setne  cl
c0026410:	01 ca                	add    edx,ecx
c0026412:	f7 da                	neg    edx
c0026414:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0026417:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002641a:	eb 19                	jmp    c0026435 <__adddf3+0x532>
c002641c:	85 c0                	test   eax,eax
c002641e:	0f 89 e5 00 00 00    	jns    c0026509 <__adddf3+0x606>
c0026424:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026429:	89 c1                	mov    ecx,eax
c002642b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002642e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0026431:	89 d0                	mov    eax,edx
c0026433:	89 ca                	mov    edx,ecx
c0026435:	85 d2                	test   edx,edx
c0026437:	74 59                	je     c0026492 <__adddf3+0x58f>
c0026439:	0f bd da             	bsr    ebx,edx
c002643c:	83 f3 1f             	xor    ebx,0x1f
c002643f:	88 d9                	mov    cl,bl
c0026441:	d3 e2                	shl    edx,cl
c0026443:	bf 20 00 00 00       	mov    edi,0x20
c0026448:	89 f9                	mov    ecx,edi
c002644a:	29 d9                	sub    ecx,ebx
c002644c:	89 c6                	mov    esi,eax
c002644e:	d3 ee                	shr    esi,cl
c0026450:	09 d6                	or     esi,edx
c0026452:	88 d9                	mov    cl,bl
c0026454:	d3 e0                	shl    eax,cl
c0026456:	89 c2                	mov    edx,eax
c0026458:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002645b:	25 ff 07 00 00       	and    eax,0x7ff
c0026460:	39 d8                	cmp    eax,ebx
c0026462:	7f 22                	jg     c0026486 <__adddf3+0x583>
c0026464:	29 c3                	sub    ebx,eax
c0026466:	43                   	inc    ebx
c0026467:	88 d9                	mov    cl,bl
c0026469:	d3 ea                	shr    edx,cl
c002646b:	29 df                	sub    edi,ebx
c002646d:	89 f9                	mov    ecx,edi
c002646f:	89 f0                	mov    eax,esi
c0026471:	d3 e0                	shl    eax,cl
c0026473:	09 c2                	or     edx,eax
c0026475:	89 f0                	mov    eax,esi
c0026477:	88 d9                	mov    cl,bl
c0026479:	d3 e8                	shr    eax,cl
c002647b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002647e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0026484:	eb 6f                	jmp    c00264f5 <__adddf3+0x5f2>
c0026486:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026489:	29 d8                	sub    eax,ebx
c002648b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002648e:	89 f0                	mov    eax,esi
c0026490:	eb 59                	jmp    c00264eb <__adddf3+0x5e8>
c0026492:	85 c0                	test   eax,eax
c0026494:	74 6a                	je     c0026500 <__adddf3+0x5fd>
c0026496:	0f bd c8             	bsr    ecx,eax
c0026499:	83 f1 1f             	xor    ecx,0x1f
c002649c:	d3 e0                	shl    eax,cl
c002649e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00264a1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00264a7:	83 c1 20             	add    ecx,0x20
c00264aa:	39 cb                	cmp    ebx,ecx
c00264ac:	7f 35                	jg     c00264e3 <__adddf3+0x5e0>
c00264ae:	29 d9                	sub    ecx,ebx
c00264b0:	8d 71 01             	lea    esi,[ecx+0x1]
c00264b3:	83 fe 1f             	cmp    esi,0x1f
c00264b6:	7e 09                	jle    c00264c1 <__adddf3+0x5be>
c00264b8:	83 e9 1f             	sub    ecx,0x1f
c00264bb:	d3 e8                	shr    eax,cl
c00264bd:	89 c3                	mov    ebx,eax
c00264bf:	eb 11                	jmp    c00264d2 <__adddf3+0x5cf>
c00264c1:	b9 20 00 00 00       	mov    ecx,0x20
c00264c6:	29 f1                	sub    ecx,esi
c00264c8:	89 c3                	mov    ebx,eax
c00264ca:	d3 e3                	shl    ebx,cl
c00264cc:	89 f1                	mov    ecx,esi
c00264ce:	d3 e8                	shr    eax,cl
c00264d0:	89 c2                	mov    edx,eax
c00264d2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00264d5:	25 00 f8 ff ff       	and    eax,0xfffff800
c00264da:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00264dd:	89 d0                	mov    eax,edx
c00264df:	89 da                	mov    edx,ebx
c00264e1:	eb 26                	jmp    c0026509 <__adddf3+0x606>
c00264e3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00264e6:	29 cf                	sub    edi,ecx
c00264e8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00264eb:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00264f0:	eb 17                	jmp    c0026509 <__adddf3+0x606>
c00264f2:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00264f5:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00264f8:	eb 0f                	jmp    c0026509 <__adddf3+0x606>
c00264fa:	31 d2                	xor    edx,edx
c00264fc:	31 c0                	xor    eax,eax
c00264fe:	eb 09                	jmp    c0026509 <__adddf3+0x606>
c0026500:	89 c2                	mov    edx,eax
c0026502:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0026509:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002650c:	c1 e1 14             	shl    ecx,0x14
c002650f:	89 c3                	mov    ebx,eax
c0026511:	c1 eb 0b             	shr    ebx,0xb
c0026514:	09 d9                	or     ecx,ebx
c0026516:	89 d3                	mov    ebx,edx
c0026518:	c1 eb 0b             	shr    ebx,0xb
c002651b:	c1 e0 15             	shl    eax,0x15
c002651e:	09 d8                	or     eax,ebx
c0026520:	89 c7                	mov    edi,eax
c0026522:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0026528:	0f 95 c0             	setne  al
c002652b:	89 c6                	mov    esi,eax
c002652d:	09 f3                	or     ebx,esi
c002652f:	83 e3 01             	and    ebx,0x1
c0026532:	c1 ea 0a             	shr    edx,0xa
c0026535:	21 da                	and    edx,ebx
c0026537:	89 f8                	mov    eax,edi
c0026539:	01 d0                	add    eax,edx
c002653b:	83 d1 00             	adc    ecx,0x0
c002653e:	89 c7                	mov    edi,eax
c0026540:	eb 06                	jmp    c0026548 <__adddf3+0x645>
c0026542:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026545:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026548:	89 f8                	mov    eax,edi
c002654a:	89 ca                	mov    edx,ecx
c002654c:	83 c4 24             	add    esp,0x24
c002654f:	5b                   	pop    ebx
c0026550:	5e                   	pop    esi
c0026551:	5f                   	pop    edi
c0026552:	5d                   	pop    ebp
c0026553:	c3                   	ret    

c0026554 <__subdf3>:
c0026554:	55                   	push   ebp
c0026555:	89 e5                	mov    ebp,esp
c0026557:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002655a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002655d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0026563:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0026566:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0026569:	5d                   	pop    ebp
c002656a:	e9 94 f9 ff ff       	jmp    c0025f03 <__adddf3>

c002656f <__negdf2>:
c002656f:	55                   	push   ebp
c0026570:	89 e5                	mov    ebp,esp
c0026572:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026575:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026578:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002657e:	5d                   	pop    ebp
c002657f:	c3                   	ret    

c0026580 <__muldf3>:
c0026580:	55                   	push   ebp
c0026581:	89 e5                	mov    ebp,esp
c0026583:	57                   	push   edi
c0026584:	56                   	push   esi
c0026585:	53                   	push   ebx
c0026586:	83 ec 24             	sub    esp,0x24
c0026589:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002658c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002658f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026592:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026595:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0026598:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c002659b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002659e:	89 c8                	mov    eax,ecx
c00265a0:	c1 f8 14             	sar    eax,0x14
c00265a3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00265a6:	89 f8                	mov    eax,edi
c00265a8:	89 fb                	mov    ebx,edi
c00265aa:	c1 e3 0b             	shl    ebx,0xb
c00265ad:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c00265b0:	c1 e1 0b             	shl    ecx,0xb
c00265b3:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00265b9:	c1 e8 15             	shr    eax,0x15
c00265bc:	09 c1                	or     ecx,eax
c00265be:	89 d6                	mov    esi,edx
c00265c0:	89 d0                	mov    eax,edx
c00265c2:	c1 f8 14             	sar    eax,0x14
c00265c5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00265c8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00265cb:	89 c3                	mov    ebx,eax
c00265cd:	c1 e3 0b             	shl    ebx,0xb
c00265d0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00265d3:	c1 e6 0b             	shl    esi,0xb
c00265d6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00265dc:	c1 e8 15             	shr    eax,0x15
c00265df:	09 c6                	or     esi,eax
c00265e1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00265e4:	25 ff 07 00 00       	and    eax,0x7ff
c00265e9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00265ec:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00265ef:	25 ff 07 00 00       	and    eax,0x7ff
c00265f4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00265f7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00265fa:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00265fd:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0026604:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026607:	40                   	inc    eax
c0026608:	a9 fe 07 00 00       	test   eax,0x7fe
c002660d:	0f 85 8d 00 00 00    	jne    c00266a0 <__muldf3+0x120>
c0026613:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026616:	09 c8                	or     eax,ecx
c0026618:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c002661c:	74 44                	je     c0026662 <__muldf3+0xe2>
c002661e:	85 c0                	test   eax,eax
c0026620:	0f 85 31 02 00 00    	jne    c0026857 <__muldf3+0x2d7>
c0026626:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026629:	40                   	inc    eax
c002662a:	a9 fe 07 00 00       	test   eax,0x7fe
c002662f:	75 13                	jne    c0026644 <__muldf3+0xc4>
c0026631:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026634:	09 f1                	or     ecx,esi
c0026636:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002663a:	74 22                	je     c002665e <__muldf3+0xde>
c002663c:	85 c9                	test   ecx,ecx
c002663e:	0f 85 0d 02 00 00    	jne    c0026851 <__muldf3+0x2d1>
c0026644:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0026648:	0f 89 09 02 00 00    	jns    c0026857 <__muldf3+0x2d7>
c002664e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026651:	05 00 00 00 80       	add    eax,0x80000000
c0026656:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026659:	e9 f9 01 00 00       	jmp    c0026857 <__muldf3+0x2d7>
c002665e:	85 c9                	test   ecx,ecx
c0026660:	eb 2e                	jmp    c0026690 <__muldf3+0x110>
c0026662:	85 c0                	test   eax,eax
c0026664:	74 20                	je     c0026686 <__muldf3+0x106>
c0026666:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0026669:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002666c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002666f:	c1 ef 1f             	shr    edi,0x1f
c0026672:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0026675:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0026678:	8d 43 ff             	lea    eax,[ebx-0x1]
c002667b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002667e:	09 f9                	or     ecx,edi
c0026680:	78 1e                	js     c00266a0 <__muldf3+0x120>
c0026682:	89 c3                	mov    ebx,eax
c0026684:	eb e0                	jmp    c0026666 <__muldf3+0xe6>
c0026686:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026689:	f7 d0                	not    eax
c002668b:	a9 ff 07 00 00       	test   eax,0x7ff
c0026690:	75 b2                	jne    c0026644 <__muldf3+0xc4>
c0026692:	31 ff                	xor    edi,edi
c0026694:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c002669b:	e9 b7 01 00 00       	jmp    c0026857 <__muldf3+0x2d7>
c00266a0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00266a3:	40                   	inc    eax
c00266a4:	a9 fe 07 00 00       	test   eax,0x7fe
c00266a9:	75 57                	jne    c0026702 <__muldf3+0x182>
c00266ab:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00266ae:	09 f0                	or     eax,esi
c00266b0:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00266b4:	74 23                	je     c00266d9 <__muldf3+0x159>
c00266b6:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00266ba:	0f 89 91 01 00 00    	jns    c0026851 <__muldf3+0x2d1>
c00266c0:	85 c0                	test   eax,eax
c00266c2:	0f 85 89 01 00 00    	jne    c0026851 <__muldf3+0x2d1>
c00266c8:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00266cb:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c00266d1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00266d4:	e9 7e 01 00 00       	jmp    c0026857 <__muldf3+0x2d7>
c00266d9:	85 c0                	test   eax,eax
c00266db:	75 0c                	jne    c00266e9 <__muldf3+0x169>
c00266dd:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00266e1:	0f 89 6a 01 00 00    	jns    c0026851 <__muldf3+0x2d1>
c00266e7:	eb df                	jmp    c00266c8 <__muldf3+0x148>
c00266e9:	01 f6                	add    esi,esi
c00266eb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00266ee:	c1 ea 1f             	shr    edx,0x1f
c00266f1:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00266f4:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c00266f7:	8d 43 ff             	lea    eax,[ebx-0x1]
c00266fa:	09 d6                	or     esi,edx
c00266fc:	78 04                	js     c0026702 <__muldf3+0x182>
c00266fe:	89 c3                	mov    ebx,eax
c0026700:	eb e7                	jmp    c00266e9 <__muldf3+0x169>
c0026702:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0026708:	81 ce 00 00 00 80    	or     esi,0x80000000
c002670e:	89 c8                	mov    eax,ecx
c0026710:	f7 e6                	mul    esi
c0026712:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0026715:	89 c7                	mov    edi,eax
c0026717:	89 c8                	mov    eax,ecx
c0026719:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c002671c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c002671f:	89 c1                	mov    ecx,eax
c0026721:	89 f0                	mov    eax,esi
c0026723:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0026726:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0026729:	89 c6                	mov    esi,eax
c002672b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002672e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0026731:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0026734:	31 c0                	xor    eax,eax
c0026736:	01 f1                	add    ecx,esi
c0026738:	0f 92 c0             	setb   al
c002673b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c002673e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0026741:	83 d6 00             	adc    esi,0x0
c0026744:	01 c7                	add    edi,eax
c0026746:	83 d6 00             	adc    esi,0x0
c0026749:	01 ca                	add    edx,ecx
c002674b:	0f 92 c1             	setb   cl
c002674e:	0f b6 c9             	movzx  ecx,cl
c0026751:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0026754:	83 d6 00             	adc    esi,0x0
c0026757:	01 cf                	add    edi,ecx
c0026759:	83 d6 00             	adc    esi,0x0
c002675c:	31 c9                	xor    ecx,ecx
c002675e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0026761:	0f 95 c1             	setne  cl
c0026764:	09 cf                	or     edi,ecx
c0026766:	85 f6                	test   esi,esi
c0026768:	78 0c                	js     c0026776 <__muldf3+0x1f6>
c002676a:	01 f6                	add    esi,esi
c002676c:	89 f8                	mov    eax,edi
c002676e:	c1 e8 1f             	shr    eax,0x1f
c0026771:	09 c6                	or     esi,eax
c0026773:	01 ff                	add    edi,edi
c0026775:	4b                   	dec    ebx
c0026776:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c002677c:	0f 8f 85 00 00 00    	jg     c0026807 <__muldf3+0x287>
c0026782:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0026788:	85 db                	test   ebx,ebx
c002678a:	0f 8f 84 00 00 00    	jg     c0026814 <__muldf3+0x294>
c0026790:	83 fb cc             	cmp    ebx,0xffffffcc
c0026793:	7c 79                	jl     c002680e <__muldf3+0x28e>
c0026795:	ba 01 00 00 00       	mov    edx,0x1
c002679a:	29 da                	sub    edx,ebx
c002679c:	81 ce 00 00 00 80    	or     esi,0x80000000
c00267a2:	83 fa 1f             	cmp    edx,0x1f
c00267a5:	7e 30                	jle    c00267d7 <__muldf3+0x257>
c00267a7:	83 fa 20             	cmp    edx,0x20
c00267aa:	75 0b                	jne    c00267b7 <__muldf3+0x237>
c00267ac:	31 c0                	xor    eax,eax
c00267ae:	85 ff                	test   edi,edi
c00267b0:	0f 95 c0             	setne  al
c00267b3:	89 c7                	mov    edi,eax
c00267b5:	eb 1a                	jmp    c00267d1 <__muldf3+0x251>
c00267b7:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c00267ba:	89 f0                	mov    eax,esi
c00267bc:	d3 e0                	shl    eax,cl
c00267be:	09 f8                	or     eax,edi
c00267c0:	0f 95 c0             	setne  al
c00267c3:	0f b6 c0             	movzx  eax,al
c00267c6:	89 c7                	mov    edi,eax
c00267c8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00267cd:	29 d9                	sub    ecx,ebx
c00267cf:	d3 ee                	shr    esi,cl
c00267d1:	09 f7                	or     edi,esi
c00267d3:	31 db                	xor    ebx,ebx
c00267d5:	eb 3b                	jmp    c0026812 <__muldf3+0x292>
c00267d7:	83 c3 1f             	add    ebx,0x1f
c00267da:	89 f0                	mov    eax,esi
c00267dc:	88 d9                	mov    cl,bl
c00267de:	d3 e0                	shl    eax,cl
c00267e0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00267e3:	89 f8                	mov    eax,edi
c00267e5:	88 d1                	mov    cl,dl
c00267e7:	d3 e8                	shr    eax,cl
c00267e9:	89 c1                	mov    ecx,eax
c00267eb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00267ee:	09 c8                	or     eax,ecx
c00267f0:	88 d9                	mov    cl,bl
c00267f2:	d3 e7                	shl    edi,cl
c00267f4:	31 db                	xor    ebx,ebx
c00267f6:	85 ff                	test   edi,edi
c00267f8:	0f 95 c3             	setne  bl
c00267fb:	89 df                	mov    edi,ebx
c00267fd:	09 c7                	or     edi,eax
c00267ff:	88 d1                	mov    cl,dl
c0026801:	d3 ee                	shr    esi,cl
c0026803:	31 db                	xor    ebx,ebx
c0026805:	eb 0d                	jmp    c0026814 <__muldf3+0x294>
c0026807:	bb ff 07 00 00       	mov    ebx,0x7ff
c002680c:	eb 02                	jmp    c0026810 <__muldf3+0x290>
c002680e:	31 db                	xor    ebx,ebx
c0026810:	31 ff                	xor    edi,edi
c0026812:	31 f6                	xor    esi,esi
c0026814:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026817:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c002681a:	25 00 f8 ff ff       	and    eax,0xfffff800
c002681f:	09 c3                	or     ebx,eax
c0026821:	c1 e3 14             	shl    ebx,0x14
c0026824:	89 f0                	mov    eax,esi
c0026826:	c1 e8 0b             	shr    eax,0xb
c0026829:	09 c3                	or     ebx,eax
c002682b:	89 f8                	mov    eax,edi
c002682d:	c1 e8 0b             	shr    eax,0xb
c0026830:	c1 e6 15             	shl    esi,0x15
c0026833:	09 c6                	or     esi,eax
c0026835:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c002683b:	0f 95 c1             	setne  cl
c002683e:	09 c8                	or     eax,ecx
c0026840:	83 e0 01             	and    eax,0x1
c0026843:	c1 ef 0a             	shr    edi,0xa
c0026846:	21 c7                	and    edi,eax
c0026848:	01 f7                	add    edi,esi
c002684a:	83 d3 00             	adc    ebx,0x0
c002684d:	89 da                	mov    edx,ebx
c002684f:	eb 03                	jmp    c0026854 <__muldf3+0x2d4>
c0026851:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0026854:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0026857:	89 f8                	mov    eax,edi
c0026859:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002685c:	83 c4 24             	add    esp,0x24
c002685f:	5b                   	pop    ebx
c0026860:	5e                   	pop    esi
c0026861:	5f                   	pop    edi
c0026862:	5d                   	pop    ebp
c0026863:	c3                   	ret    

c0026864 <__divdf3>:
c0026864:	55                   	push   ebp
c0026865:	89 e5                	mov    ebp,esp
c0026867:	57                   	push   edi
c0026868:	56                   	push   esi
c0026869:	53                   	push   ebx
c002686a:	83 ec 2c             	sub    esp,0x2c
c002686d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026870:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026873:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026876:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0026879:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002687c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002687f:	89 ce                	mov    esi,ecx
c0026881:	89 c8                	mov    eax,ecx
c0026883:	c1 f8 14             	sar    eax,0x14
c0026886:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026889:	89 f8                	mov    eax,edi
c002688b:	89 fb                	mov    ebx,edi
c002688d:	c1 e3 0b             	shl    ebx,0xb
c0026890:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0026893:	c1 e6 0b             	shl    esi,0xb
c0026896:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c002689c:	c1 e8 15             	shr    eax,0x15
c002689f:	09 c6                	or     esi,eax
c00268a1:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c00268a4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00268a7:	89 c2                	mov    edx,eax
c00268a9:	c1 fa 14             	sar    edx,0x14
c00268ac:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00268af:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00268b2:	89 de                	mov    esi,ebx
c00268b4:	c1 e6 0b             	shl    esi,0xb
c00268b7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00268ba:	c1 e0 0b             	shl    eax,0xb
c00268bd:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00268c2:	c1 eb 15             	shr    ebx,0x15
c00268c5:	09 d8                	or     eax,ebx
c00268c7:	89 c2                	mov    edx,eax
c00268c9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00268cc:	25 ff 07 00 00       	and    eax,0x7ff
c00268d1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00268d4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00268d7:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00268dd:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c00268e0:	29 d8                	sub    eax,ebx
c00268e2:	05 ff 03 00 00       	add    eax,0x3ff
c00268e7:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00268ea:	46                   	inc    esi
c00268eb:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00268f1:	0f 85 a5 00 00 00    	jne    c002699c <__divdf3+0x138>
c00268f7:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00268fa:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c00268fd:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0026901:	74 2a                	je     c002692d <__divdf3+0xc9>
c0026903:	85 f6                	test   esi,esi
c0026905:	0f 85 cc 02 00 00    	jne    c0026bd7 <__divdf3+0x373>
c002690b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002690e:	40                   	inc    eax
c002690f:	a9 fe 07 00 00       	test   eax,0x7fe
c0026914:	75 26                	jne    c002693c <__divdf3+0xd8>
c0026916:	85 db                	test   ebx,ebx
c0026918:	74 22                	je     c002693c <__divdf3+0xd8>
c002691a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c002691d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0026920:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026923:	09 d0                	or     eax,edx
c0026925:	0f 85 ac 02 00 00    	jne    c0026bd7 <__divdf3+0x373>
c002692b:	eb 63                	jmp    c0026990 <__divdf3+0x12c>
c002692d:	85 f6                	test   esi,esi
c002692f:	75 22                	jne    c0026953 <__divdf3+0xef>
c0026931:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026934:	40                   	inc    eax
c0026935:	a9 fe 07 00 00       	test   eax,0x7fe
c002693a:	74 36                	je     c0026972 <__divdf3+0x10e>
c002693c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026940:	0f 89 91 02 00 00    	jns    c0026bd7 <__divdf3+0x373>
c0026946:	89 f8                	mov    eax,edi
c0026948:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002694e:	e9 80 02 00 00       	jmp    c0026bd3 <__divdf3+0x36f>
c0026953:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026956:	01 f6                	add    esi,esi
c0026958:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002695b:	c1 ef 1f             	shr    edi,0x1f
c002695e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026961:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0026964:	8d 48 ff             	lea    ecx,[eax-0x1]
c0026967:	09 f7                	or     edi,esi
c0026969:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c002696c:	78 2e                	js     c002699c <__divdf3+0x138>
c002696e:	89 c8                	mov    eax,ecx
c0026970:	eb e1                	jmp    c0026953 <__divdf3+0xef>
c0026972:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026975:	09 d0                	or     eax,edx
c0026977:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002697b:	74 0f                	je     c002698c <__divdf3+0x128>
c002697d:	85 c0                	test   eax,eax
c002697f:	74 bb                	je     c002693c <__divdf3+0xd8>
c0026981:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0026984:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0026987:	e9 4b 02 00 00       	jmp    c0026bd7 <__divdf3+0x373>
c002698c:	85 c0                	test   eax,eax
c002698e:	75 ac                	jne    c002693c <__divdf3+0xd8>
c0026990:	31 ff                	xor    edi,edi
c0026992:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0026997:	e9 3b 02 00 00       	jmp    c0026bd7 <__divdf3+0x373>
c002699c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002699f:	8d 4f 01             	lea    ecx,[edi+0x1]
c00269a2:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c00269a8:	75 6b                	jne    c0026a15 <__divdf3+0x1b1>
c00269aa:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00269ad:	09 d6                	or     esi,edx
c00269af:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00269b3:	74 28                	je     c00269dd <__divdf3+0x179>
c00269b5:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00269b8:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00269bb:	85 f6                	test   esi,esi
c00269bd:	0f 85 14 02 00 00    	jne    c0026bd7 <__divdf3+0x373>
c00269c3:	31 ff                	xor    edi,edi
c00269c5:	31 c9                	xor    ecx,ecx
c00269c7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00269ca:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00269cd:	0f 89 04 02 00 00    	jns    c0026bd7 <__divdf3+0x373>
c00269d3:	b9 00 00 00 80       	mov    ecx,0x80000000
c00269d8:	e9 fa 01 00 00       	jmp    c0026bd7 <__divdf3+0x373>
c00269dd:	85 f6                	test   esi,esi
c00269df:	75 1b                	jne    c00269fc <__divdf3+0x198>
c00269e1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00269e4:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00269e7:	25 00 00 00 80       	and    eax,0x80000000
c00269ec:	31 c9                	xor    ecx,ecx
c00269ee:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c00269f3:	89 cf                	mov    edi,ecx
c00269f5:	89 c1                	mov    ecx,eax
c00269f7:	e9 db 01 00 00       	jmp    c0026bd7 <__divdf3+0x373>
c00269fc:	01 d2                	add    edx,edx
c00269fe:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0026a01:	c1 eb 1f             	shr    ebx,0x1f
c0026a04:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026a07:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0026a0a:	8d 48 01             	lea    ecx,[eax+0x1]
c0026a0d:	09 da                	or     edx,ebx
c0026a0f:	78 04                	js     c0026a15 <__divdf3+0x1b1>
c0026a11:	89 c8                	mov    eax,ecx
c0026a13:	eb e7                	jmp    c00269fc <__divdf3+0x198>
c0026a15:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026a18:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026a1e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026a24:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0026a27:	39 d6                	cmp    esi,edx
c0026a29:	77 0d                	ja     c0026a38 <__divdf3+0x1d4>
c0026a2b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026a2e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0026a31:	72 1b                	jb     c0026a4e <__divdf3+0x1ea>
c0026a33:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0026a36:	75 16                	jne    c0026a4e <__divdf3+0x1ea>
c0026a38:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0026a3b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0026a3e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0026a41:	83 de 00             	sbb    esi,0x0
c0026a44:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0026a47:	ba 01 00 00 00       	mov    edx,0x1
c0026a4c:	eb 02                	jmp    c0026a50 <__divdf3+0x1ec>
c0026a4e:	31 d2                	xor    edx,edx
c0026a50:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0026a57:	31 ff                	xor    edi,edi
c0026a59:	01 ff                	add    edi,edi
c0026a5b:	89 d1                	mov    ecx,edx
c0026a5d:	c1 e9 1f             	shr    ecx,0x1f
c0026a60:	09 cf                	or     edi,ecx
c0026a62:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0026a65:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0026a68:	89 da                	mov    edx,ebx
c0026a6a:	89 f3                	mov    ebx,esi
c0026a6c:	8d 34 36             	lea    esi,[esi+esi*1]
c0026a6f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026a72:	c1 e9 1f             	shr    ecx,0x1f
c0026a75:	09 ce                	or     esi,ecx
c0026a77:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026a7a:	01 c9                	add    ecx,ecx
c0026a7c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0026a7f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0026a82:	85 db                	test   ebx,ebx
c0026a84:	78 29                	js     c0026aaf <__divdf3+0x24b>
c0026a86:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0026a89:	72 07                	jb     c0026a92 <__divdf3+0x22e>
c0026a8b:	75 3c                	jne    c0026ac9 <__divdf3+0x265>
c0026a8d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0026a90:	77 37                	ja     c0026ac9 <__divdf3+0x265>
c0026a92:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0026a95:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0026a98:	31 d2                	xor    edx,edx
c0026a9a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0026a9d:	0f 97 c2             	seta   dl
c0026aa0:	29 d6                	sub    esi,edx
c0026aa2:	89 d9                	mov    ecx,ebx
c0026aa4:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0026aa7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0026aaa:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026aad:	eb 17                	jmp    c0026ac6 <__divdf3+0x262>
c0026aaf:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0026ab2:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026ab5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0026ab8:	0f 97 c1             	seta   cl
c0026abb:	0f b6 c9             	movzx  ecx,cl
c0026abe:	29 ce                	sub    esi,ecx
c0026ac0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0026ac3:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0026ac6:	83 ca 01             	or     edx,0x1
c0026ac9:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0026acc:	75 8b                	jne    c0026a59 <__divdf3+0x1f5>
c0026ace:	c1 e7 09             	shl    edi,0x9
c0026ad1:	89 d1                	mov    ecx,edx
c0026ad3:	c1 e9 17             	shr    ecx,0x17
c0026ad6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026ad9:	09 f3                	or     ebx,esi
c0026adb:	0f 95 c3             	setne  bl
c0026ade:	0f b6 db             	movzx  ebx,bl
c0026ae1:	c1 e2 09             	shl    edx,0x9
c0026ae4:	09 d3                	or     ebx,edx
c0026ae6:	89 ca                	mov    edx,ecx
c0026ae8:	09 fa                	or     edx,edi
c0026aea:	78 0c                	js     c0026af8 <__divdf3+0x294>
c0026aec:	01 d2                	add    edx,edx
c0026aee:	89 d9                	mov    ecx,ebx
c0026af0:	c1 e9 1f             	shr    ecx,0x1f
c0026af3:	09 ca                	or     edx,ecx
c0026af5:	01 db                	add    ebx,ebx
c0026af7:	48                   	dec    eax
c0026af8:	3d fe 07 00 00       	cmp    eax,0x7fe
c0026afd:	0f 8f 83 00 00 00    	jg     c0026b86 <__divdf3+0x322>
c0026b03:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026b09:	85 c0                	test   eax,eax
c0026b0b:	0f 8f 82 00 00 00    	jg     c0026b93 <__divdf3+0x32f>
c0026b11:	83 f8 cc             	cmp    eax,0xffffffcc
c0026b14:	7c 77                	jl     c0026b8d <__divdf3+0x329>
c0026b16:	be 01 00 00 00       	mov    esi,0x1
c0026b1b:	29 c6                	sub    esi,eax
c0026b1d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026b23:	83 fe 1f             	cmp    esi,0x1f
c0026b26:	7e 2f                	jle    c0026b57 <__divdf3+0x2f3>
c0026b28:	83 fe 20             	cmp    esi,0x20
c0026b2b:	75 0a                	jne    c0026b37 <__divdf3+0x2d3>
c0026b2d:	85 db                	test   ebx,ebx
c0026b2f:	0f 95 c3             	setne  bl
c0026b32:	0f b6 db             	movzx  ebx,bl
c0026b35:	eb 1a                	jmp    c0026b51 <__divdf3+0x2ed>
c0026b37:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0026b3a:	89 d7                	mov    edi,edx
c0026b3c:	d3 e7                	shl    edi,cl
c0026b3e:	89 f9                	mov    ecx,edi
c0026b40:	09 d9                	or     ecx,ebx
c0026b42:	0f 95 c3             	setne  bl
c0026b45:	0f b6 db             	movzx  ebx,bl
c0026b48:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0026b4d:	29 c1                	sub    ecx,eax
c0026b4f:	d3 ea                	shr    edx,cl
c0026b51:	09 d3                	or     ebx,edx
c0026b53:	31 c0                	xor    eax,eax
c0026b55:	eb 3a                	jmp    c0026b91 <__divdf3+0x32d>
c0026b57:	83 c0 1f             	add    eax,0x1f
c0026b5a:	89 d7                	mov    edi,edx
c0026b5c:	88 c1                	mov    cl,al
c0026b5e:	d3 e7                	shl    edi,cl
c0026b60:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026b63:	89 df                	mov    edi,ebx
c0026b65:	89 f1                	mov    ecx,esi
c0026b67:	d3 ef                	shr    edi,cl
c0026b69:	89 f9                	mov    ecx,edi
c0026b6b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0026b6e:	09 cf                	or     edi,ecx
c0026b70:	88 c1                	mov    cl,al
c0026b72:	d3 e3                	shl    ebx,cl
c0026b74:	85 db                	test   ebx,ebx
c0026b76:	0f 95 c3             	setne  bl
c0026b79:	0f b6 db             	movzx  ebx,bl
c0026b7c:	09 fb                	or     ebx,edi
c0026b7e:	89 f1                	mov    ecx,esi
c0026b80:	d3 ea                	shr    edx,cl
c0026b82:	31 c0                	xor    eax,eax
c0026b84:	eb 0d                	jmp    c0026b93 <__divdf3+0x32f>
c0026b86:	b8 ff 07 00 00       	mov    eax,0x7ff
c0026b8b:	eb 02                	jmp    c0026b8f <__divdf3+0x32b>
c0026b8d:	31 c0                	xor    eax,eax
c0026b8f:	31 db                	xor    ebx,ebx
c0026b91:	31 d2                	xor    edx,edx
c0026b93:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0026b96:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0026b99:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0026b9f:	09 c8                	or     eax,ecx
c0026ba1:	c1 e0 14             	shl    eax,0x14
c0026ba4:	89 d1                	mov    ecx,edx
c0026ba6:	c1 e9 0b             	shr    ecx,0xb
c0026ba9:	09 c8                	or     eax,ecx
c0026bab:	89 c6                	mov    esi,eax
c0026bad:	89 d9                	mov    ecx,ebx
c0026baf:	c1 e9 0b             	shr    ecx,0xb
c0026bb2:	c1 e2 15             	shl    edx,0x15
c0026bb5:	09 ca                	or     edx,ecx
c0026bb7:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0026bbd:	0f 95 c0             	setne  al
c0026bc0:	09 c1                	or     ecx,eax
c0026bc2:	83 e1 01             	and    ecx,0x1
c0026bc5:	c1 eb 0a             	shr    ebx,0xa
c0026bc8:	21 cb                	and    ebx,ecx
c0026bca:	01 d3                	add    ebx,edx
c0026bcc:	89 d8                	mov    eax,ebx
c0026bce:	83 d6 00             	adc    esi,0x0
c0026bd1:	89 f2                	mov    edx,esi
c0026bd3:	89 c7                	mov    edi,eax
c0026bd5:	89 d1                	mov    ecx,edx
c0026bd7:	89 f8                	mov    eax,edi
c0026bd9:	89 ca                	mov    edx,ecx
c0026bdb:	83 c4 2c             	add    esp,0x2c
c0026bde:	5b                   	pop    ebx
c0026bdf:	5e                   	pop    esi
c0026be0:	5f                   	pop    edi
c0026be1:	5d                   	pop    ebp
c0026be2:	c3                   	ret    

c0026be3 <__floatsidf>:
c0026be3:	55                   	push   ebp
c0026be4:	89 e5                	mov    ebp,esp
c0026be6:	56                   	push   esi
c0026be7:	53                   	push   ebx
c0026be8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026beb:	85 db                	test   ebx,ebx
c0026bed:	7e 15                	jle    c0026c04 <__floatsidf+0x21>
c0026bef:	0f bd cb             	bsr    ecx,ebx
c0026bf2:	83 f1 1f             	xor    ecx,0x1f
c0026bf5:	d3 e3                	shl    ebx,cl
c0026bf7:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0026bfd:	b8 1e 04 00 00       	mov    eax,0x41e
c0026c02:	eb 21                	jmp    c0026c25 <__floatsidf+0x42>
c0026c04:	b8 00 00 00 00       	mov    eax,0x0
c0026c09:	ba 00 00 00 00       	mov    edx,0x0
c0026c0e:	74 2a                	je     c0026c3a <__floatsidf+0x57>
c0026c10:	f7 db                	neg    ebx
c0026c12:	0f bd cb             	bsr    ecx,ebx
c0026c15:	83 f1 1f             	xor    ecx,0x1f
c0026c18:	d3 e3                	shl    ebx,cl
c0026c1a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0026c20:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0026c25:	29 c8                	sub    eax,ecx
c0026c27:	c1 e0 14             	shl    eax,0x14
c0026c2a:	89 c1                	mov    ecx,eax
c0026c2c:	89 de                	mov    esi,ebx
c0026c2e:	c1 ee 0b             	shr    esi,0xb
c0026c31:	09 f1                	or     ecx,esi
c0026c33:	89 ca                	mov    edx,ecx
c0026c35:	c1 e3 15             	shl    ebx,0x15
c0026c38:	89 d8                	mov    eax,ebx
c0026c3a:	5b                   	pop    ebx
c0026c3b:	5e                   	pop    esi
c0026c3c:	5d                   	pop    ebp
c0026c3d:	c3                   	ret    

c0026c3e <__floatunsidf>:
c0026c3e:	55                   	push   ebp
c0026c3f:	89 e5                	mov    ebp,esp
c0026c41:	56                   	push   esi
c0026c42:	53                   	push   ebx
c0026c43:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026c46:	85 db                	test   ebx,ebx
c0026c48:	74 2a                	je     c0026c74 <__floatunsidf+0x36>
c0026c4a:	0f bd cb             	bsr    ecx,ebx
c0026c4d:	83 f1 1f             	xor    ecx,0x1f
c0026c50:	d3 e3                	shl    ebx,cl
c0026c52:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0026c58:	b8 1e 04 00 00       	mov    eax,0x41e
c0026c5d:	29 c8                	sub    eax,ecx
c0026c5f:	c1 e0 14             	shl    eax,0x14
c0026c62:	89 c1                	mov    ecx,eax
c0026c64:	89 de                	mov    esi,ebx
c0026c66:	c1 ee 0b             	shr    esi,0xb
c0026c69:	09 f1                	or     ecx,esi
c0026c6b:	89 ca                	mov    edx,ecx
c0026c6d:	c1 e3 15             	shl    ebx,0x15
c0026c70:	89 d8                	mov    eax,ebx
c0026c72:	eb 04                	jmp    c0026c78 <__floatunsidf+0x3a>
c0026c74:	31 c0                	xor    eax,eax
c0026c76:	31 d2                	xor    edx,edx
c0026c78:	5b                   	pop    ebx
c0026c79:	5e                   	pop    esi
c0026c7a:	5d                   	pop    ebp
c0026c7b:	c3                   	ret    

c0026c7c <__fixdfsi>:
c0026c7c:	55                   	push   ebp
c0026c7d:	89 e5                	mov    ebp,esp
c0026c7f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026c82:	89 d1                	mov    ecx,edx
c0026c84:	c1 e1 0b             	shl    ecx,0xb
c0026c87:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026c8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026c90:	c1 e8 15             	shr    eax,0x15
c0026c93:	09 c1                	or     ecx,eax
c0026c95:	c1 fa 14             	sar    edx,0x14
c0026c98:	78 1f                	js     c0026cb9 <__fixdfsi+0x3d>
c0026c9a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0026ca0:	31 c0                	xor    eax,eax
c0026ca2:	83 fa 1e             	cmp    edx,0x1e
c0026ca5:	77 40                	ja     c0026ce7 <__fixdfsi+0x6b>
c0026ca7:	89 c8                	mov    eax,ecx
c0026ca9:	0d 00 00 00 80       	or     eax,0x80000000
c0026cae:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026cb3:	29 d1                	sub    ecx,edx
c0026cb5:	d3 e8                	shr    eax,cl
c0026cb7:	eb 2e                	jmp    c0026ce7 <__fixdfsi+0x6b>
c0026cb9:	31 c0                	xor    eax,eax
c0026cbb:	81 c2 01 04 00 00    	add    edx,0x401
c0026cc1:	78 24                	js     c0026ce7 <__fixdfsi+0x6b>
c0026cc3:	83 fa 1e             	cmp    edx,0x1e
c0026cc6:	7e 09                	jle    c0026cd1 <__fixdfsi+0x55>
c0026cc8:	83 fa 1f             	cmp    edx,0x1f
c0026ccb:	75 18                	jne    c0026ce5 <__fixdfsi+0x69>
c0026ccd:	85 c9                	test   ecx,ecx
c0026ccf:	75 14                	jne    c0026ce5 <__fixdfsi+0x69>
c0026cd1:	89 c8                	mov    eax,ecx
c0026cd3:	0d 00 00 00 80       	or     eax,0x80000000
c0026cd8:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026cdd:	29 d1                	sub    ecx,edx
c0026cdf:	d3 e8                	shr    eax,cl
c0026ce1:	f7 d8                	neg    eax
c0026ce3:	eb 02                	jmp    c0026ce7 <__fixdfsi+0x6b>
c0026ce5:	31 c0                	xor    eax,eax
c0026ce7:	5d                   	pop    ebp
c0026ce8:	c3                   	ret    

c0026ce9 <__fixunsdfsi>:
c0026ce9:	55                   	push   ebp
c0026cea:	89 e5                	mov    ebp,esp
c0026cec:	53                   	push   ebx
c0026ced:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026cf0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026cf3:	89 d3                	mov    ebx,edx
c0026cf5:	c1 fb 14             	sar    ebx,0x14
c0026cf8:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0026cfe:	31 c0                	xor    eax,eax
c0026d00:	83 fb 1f             	cmp    ebx,0x1f
c0026d03:	77 1d                	ja     c0026d22 <__fixunsdfsi+0x39>
c0026d05:	89 d0                	mov    eax,edx
c0026d07:	c1 e0 0b             	shl    eax,0xb
c0026d0a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026d0f:	c1 e9 15             	shr    ecx,0x15
c0026d12:	09 c8                	or     eax,ecx
c0026d14:	0d 00 00 00 80       	or     eax,0x80000000
c0026d19:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026d1e:	29 d9                	sub    ecx,ebx
c0026d20:	d3 e8                	shr    eax,cl
c0026d22:	5b                   	pop    ebx
c0026d23:	5d                   	pop    ebp
c0026d24:	c3                   	ret    

c0026d25 <__cmpdf2>:
c0026d25:	55                   	push   ebp
c0026d26:	89 e5                	mov    ebp,esp
c0026d28:	57                   	push   edi
c0026d29:	56                   	push   esi
c0026d2a:	53                   	push   ebx
c0026d2b:	83 ec 0c             	sub    esp,0xc
c0026d2e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0026d31:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026d34:	89 ca                	mov    edx,ecx
c0026d36:	c1 ea 14             	shr    edx,0x14
c0026d39:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0026d3f:	89 cb                	mov    ebx,ecx
c0026d41:	c1 fb 1f             	sar    ebx,0x1f
c0026d44:	31 da                	xor    edx,ebx
c0026d46:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026d49:	89 df                	mov    edi,ebx
c0026d4b:	c1 e7 0b             	shl    edi,0xb
c0026d4e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026d51:	c1 e1 0b             	shl    ecx,0xb
c0026d54:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026d5a:	c1 eb 15             	shr    ebx,0x15
c0026d5d:	09 d9                	or     ecx,ebx
c0026d5f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0026d62:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0026d65:	89 ce                	mov    esi,ecx
c0026d67:	c1 ee 14             	shr    esi,0x14
c0026d6a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026d70:	89 cb                	mov    ebx,ecx
c0026d72:	c1 fb 1f             	sar    ebx,0x1f
c0026d75:	31 de                	xor    esi,ebx
c0026d77:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0026d7a:	89 df                	mov    edi,ebx
c0026d7c:	c1 e7 0b             	shl    edi,0xb
c0026d7f:	c1 e1 0b             	shl    ecx,0xb
c0026d82:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026d88:	c1 eb 15             	shr    ebx,0x15
c0026d8b:	09 d9                	or     ecx,ebx
c0026d8d:	89 d3                	mov    ebx,edx
c0026d8f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0026d95:	43                   	inc    ebx
c0026d96:	83 fb 01             	cmp    ebx,0x1
c0026d99:	77 08                	ja     c0026da3 <__cmpdf2+0x7e>
c0026d9b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026d9e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0026da1:	75 68                	jne    c0026e0b <__cmpdf2+0xe6>
c0026da3:	89 f3                	mov    ebx,esi
c0026da5:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0026dab:	43                   	inc    ebx
c0026dac:	83 fb 01             	cmp    ebx,0x1
c0026daf:	77 06                	ja     c0026db7 <__cmpdf2+0x92>
c0026db1:	89 fb                	mov    ebx,edi
c0026db3:	09 cb                	or     ebx,ecx
c0026db5:	75 54                	jne    c0026e0b <__cmpdf2+0xe6>
c0026db7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026dba:	09 f8                	or     eax,edi
c0026dbc:	09 c8                	or     eax,ecx
c0026dbe:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0026dc1:	75 12                	jne    c0026dd5 <__cmpdf2+0xb0>
c0026dc3:	8d 42 01             	lea    eax,[edx+0x1]
c0026dc6:	83 f8 01             	cmp    eax,0x1
c0026dc9:	77 0a                	ja     c0026dd5 <__cmpdf2+0xb0>
c0026dcb:	8d 5e 01             	lea    ebx,[esi+0x1]
c0026dce:	31 c0                	xor    eax,eax
c0026dd0:	83 fb 01             	cmp    ebx,0x1
c0026dd3:	76 36                	jbe    c0026e0b <__cmpdf2+0xe6>
c0026dd5:	b8 01 00 00 00       	mov    eax,0x1
c0026dda:	39 f2                	cmp    edx,esi
c0026ddc:	7f 2d                	jg     c0026e0b <__cmpdf2+0xe6>
c0026dde:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0026de3:	7c 26                	jl     c0026e0b <__cmpdf2+0xe6>
c0026de5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0026de8:	77 07                	ja     c0026df1 <__cmpdf2+0xcc>
c0026dea:	72 16                	jb     c0026e02 <__cmpdf2+0xdd>
c0026dec:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0026def:	76 0a                	jbe    c0026dfb <__cmpdf2+0xd6>
c0026df1:	89 d0                	mov    eax,edx
c0026df3:	c1 f8 1f             	sar    eax,0x1f
c0026df6:	83 c8 01             	or     eax,0x1
c0026df9:	eb 10                	jmp    c0026e0b <__cmpdf2+0xe6>
c0026dfb:	b8 00 00 00 00       	mov    eax,0x0
c0026e00:	73 09                	jae    c0026e0b <__cmpdf2+0xe6>
c0026e02:	89 d0                	mov    eax,edx
c0026e04:	c1 f8 1f             	sar    eax,0x1f
c0026e07:	83 e0 02             	and    eax,0x2
c0026e0a:	48                   	dec    eax
c0026e0b:	83 c4 0c             	add    esp,0xc
c0026e0e:	5b                   	pop    ebx
c0026e0f:	5e                   	pop    esi
c0026e10:	5f                   	pop    edi
c0026e11:	5d                   	pop    ebp
c0026e12:	c3                   	ret    

c0026e13 <__eqdf2>:
c0026e13:	55                   	push   ebp
c0026e14:	89 e5                	mov    ebp,esp
c0026e16:	50                   	push   eax
c0026e17:	6a 01                	push   0x1
c0026e19:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0026e1c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0026e1f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e22:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026e25:	e8 fb fe ff ff       	call   c0026d25 <__cmpdf2>
c0026e2a:	83 c4 18             	add    esp,0x18
c0026e2d:	c9                   	leave  
c0026e2e:	c3                   	ret    

c0026e2f <__nedf2>:
c0026e2f:	eb e2                	jmp    c0026e13 <__eqdf2>

c0026e31 <__gtdf2>:
c0026e31:	55                   	push   ebp
c0026e32:	89 e5                	mov    ebp,esp
c0026e34:	50                   	push   eax
c0026e35:	6a ff                	push   0xffffffff
c0026e37:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0026e3a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0026e3d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e40:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026e43:	e8 dd fe ff ff       	call   c0026d25 <__cmpdf2>
c0026e48:	83 c4 18             	add    esp,0x18
c0026e4b:	c9                   	leave  
c0026e4c:	c3                   	ret    

c0026e4d <__gedf2>:
c0026e4d:	eb e2                	jmp    c0026e31 <__gtdf2>

c0026e4f <__ltdf2>:
c0026e4f:	eb c2                	jmp    c0026e13 <__eqdf2>

c0026e51 <__ledf2>:
c0026e51:	eb c0                	jmp    c0026e13 <__eqdf2>

c0026e53 <__truncdfsf2>:
c0026e53:	55                   	push   ebp
c0026e54:	89 e5                	mov    ebp,esp
c0026e56:	57                   	push   edi
c0026e57:	56                   	push   esi
c0026e58:	53                   	push   ebx
c0026e59:	83 ec 0c             	sub    esp,0xc
c0026e5c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026e5f:	89 d1                	mov    ecx,edx
c0026e61:	c1 f9 14             	sar    ecx,0x14
c0026e64:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026e67:	89 df                	mov    edi,ebx
c0026e69:	c1 e7 0b             	shl    edi,0xb
c0026e6c:	89 d0                	mov    eax,edx
c0026e6e:	c1 e0 0b             	shl    eax,0xb
c0026e71:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026e76:	c1 eb 15             	shr    ebx,0x15
c0026e79:	09 d8                	or     eax,ebx
c0026e7b:	89 cb                	mov    ebx,ecx
c0026e7d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026e83:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0026e89:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0026e8f:	0f 86 9e 00 00 00    	jbe    c0026f33 <__truncdfsf2+0xe0>
c0026e95:	85 db                	test   ebx,ebx
c0026e97:	75 0a                	jne    c0026ea3 <__truncdfsf2+0x50>
c0026e99:	c1 fa 17             	sar    edx,0x17
c0026e9c:	30 d2                	xor    dl,dl
c0026e9e:	e9 84 00 00 00       	jmp    c0026f27 <__truncdfsf2+0xd4>
c0026ea3:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0026ea9:	83 fe 83             	cmp    esi,0xffffff83
c0026eac:	7d 4b                	jge    c0026ef9 <__truncdfsf2+0xa6>
c0026eae:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0026eb3:	29 f1                	sub    ecx,esi
c0026eb5:	83 f9 1f             	cmp    ecx,0x1f
c0026eb8:	7f 6b                	jg     c0026f25 <__truncdfsf2+0xd2>
c0026eba:	0d 00 00 00 80       	or     eax,0x80000000
c0026ebf:	89 c3                	mov    ebx,eax
c0026ec1:	d3 eb                	shr    ebx,cl
c0026ec3:	be 01 00 00 00       	mov    esi,0x1
c0026ec8:	d3 e6                	shl    esi,cl
c0026eca:	4e                   	dec    esi
c0026ecb:	21 f0                	and    eax,esi
c0026ecd:	09 f8                	or     eax,edi
c0026ecf:	0f 95 c0             	setne  al
c0026ed2:	0f b6 c0             	movzx  eax,al
c0026ed5:	09 c3                	or     ebx,eax
c0026ed7:	89 d9                	mov    ecx,ebx
c0026ed9:	c1 e9 08             	shr    ecx,0x8
c0026edc:	f6 c3 7f             	test   bl,0x7f
c0026edf:	0f 95 c0             	setne  al
c0026ee2:	09 c8                	or     eax,ecx
c0026ee4:	83 e0 01             	and    eax,0x1
c0026ee7:	c1 eb 07             	shr    ebx,0x7
c0026eea:	21 c3                	and    ebx,eax
c0026eec:	81 e2 00 00 00 80    	and    edx,0x80000000
c0026ef2:	09 d1                	or     ecx,edx
c0026ef4:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0026ef7:	eb 76                	jmp    c0026f6f <__truncdfsf2+0x11c>
c0026ef9:	83 c6 80             	add    esi,0xffffff80
c0026efc:	7e 1d                	jle    c0026f1b <__truncdfsf2+0xc8>
c0026efe:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0026f04:	75 0b                	jne    c0026f11 <__truncdfsf2+0xbe>
c0026f06:	09 f8                	or     eax,edi
c0026f08:	74 09                	je     c0026f13 <__truncdfsf2+0xc0>
c0026f0a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0026f0f:	eb 02                	jmp    c0026f13 <__truncdfsf2+0xc0>
c0026f11:	31 c0                	xor    eax,eax
c0026f13:	c1 fa 17             	sar    edx,0x17
c0026f16:	80 ca ff             	or     dl,0xff
c0026f19:	eb 0e                	jmp    c0026f29 <__truncdfsf2+0xd6>
c0026f1b:	c1 fa 1f             	sar    edx,0x1f
c0026f1e:	c1 e2 08             	shl    edx,0x8
c0026f21:	09 ca                	or     edx,ecx
c0026f23:	eb 04                	jmp    c0026f29 <__truncdfsf2+0xd6>
c0026f25:	31 d2                	xor    edx,edx
c0026f27:	31 c0                	xor    eax,eax
c0026f29:	c1 e2 17             	shl    edx,0x17
c0026f2c:	c1 e8 08             	shr    eax,0x8
c0026f2f:	09 d0                	or     eax,edx
c0026f31:	eb 3c                	jmp    c0026f6f <__truncdfsf2+0x11c>
c0026f33:	81 e9 80 03 00 00    	sub    ecx,0x380
c0026f39:	89 ca                	mov    edx,ecx
c0026f3b:	c1 fa 0b             	sar    edx,0xb
c0026f3e:	c1 e2 08             	shl    edx,0x8
c0026f41:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0026f44:	31 db                	xor    ebx,ebx
c0026f46:	85 ff                	test   edi,edi
c0026f48:	0f 95 c3             	setne  bl
c0026f4b:	09 d8                	or     eax,ebx
c0026f4d:	89 c3                	mov    ebx,eax
c0026f4f:	c1 eb 08             	shr    ebx,0x8
c0026f52:	a8 7f                	test   al,0x7f
c0026f54:	0f 95 c2             	setne  dl
c0026f57:	89 d6                	mov    esi,edx
c0026f59:	09 de                	or     esi,ebx
c0026f5b:	83 e6 01             	and    esi,0x1
c0026f5e:	c1 e8 07             	shr    eax,0x7
c0026f61:	21 f0                	and    eax,esi
c0026f63:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026f66:	09 ca                	or     edx,ecx
c0026f68:	c1 e2 17             	shl    edx,0x17
c0026f6b:	09 da                	or     edx,ebx
c0026f6d:	01 d0                	add    eax,edx
c0026f6f:	83 c4 0c             	add    esp,0xc
c0026f72:	5b                   	pop    ebx
c0026f73:	5e                   	pop    esi
c0026f74:	5f                   	pop    edi
c0026f75:	5d                   	pop    ebp
c0026f76:	c3                   	ret    

c0026f77 <__extendsfdf2>:
c0026f77:	55                   	push   ebp
c0026f78:	89 e5                	mov    ebp,esp
c0026f7a:	57                   	push   edi
c0026f7b:	56                   	push   esi
c0026f7c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026f7f:	89 d1                	mov    ecx,edx
c0026f81:	c1 f9 17             	sar    ecx,0x17
c0026f84:	c1 e2 08             	shl    edx,0x8
c0026f87:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026f8d:	89 c8                	mov    eax,ecx
c0026f8f:	80 e4 f8             	and    ah,0xf8
c0026f92:	8d 71 01             	lea    esi,[ecx+0x1]
c0026f95:	81 e6 fe 00 00 00    	and    esi,0xfe
c0026f9b:	75 27                	jne    c0026fc4 <__extendsfdf2+0x4d>
c0026f9d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0026fa3:	75 18                	jne    c0026fbd <__extendsfdf2+0x46>
c0026fa5:	85 d2                	test   edx,edx
c0026fa7:	74 20                	je     c0026fc9 <__extendsfdf2+0x52>
c0026fa9:	41                   	inc    ecx
c0026faa:	01 d2                	add    edx,edx
c0026fac:	79 fb                	jns    c0026fa9 <__extendsfdf2+0x32>
c0026fae:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026fb4:	29 c8                	sub    eax,ecx
c0026fb6:	05 81 03 00 00       	add    eax,0x381
c0026fbb:	eb 0c                	jmp    c0026fc9 <__extendsfdf2+0x52>
c0026fbd:	05 00 07 00 00       	add    eax,0x700
c0026fc2:	eb 05                	jmp    c0026fc9 <__extendsfdf2+0x52>
c0026fc4:	05 80 03 00 00       	add    eax,0x380
c0026fc9:	c1 e0 14             	shl    eax,0x14
c0026fcc:	89 c1                	mov    ecx,eax
c0026fce:	89 d0                	mov    eax,edx
c0026fd0:	c1 e8 0b             	shr    eax,0xb
c0026fd3:	09 c1                	or     ecx,eax
c0026fd5:	c1 e2 15             	shl    edx,0x15
c0026fd8:	89 d0                	mov    eax,edx
c0026fda:	89 ca                	mov    edx,ecx
c0026fdc:	5e                   	pop    esi
c0026fdd:	5f                   	pop    edi
c0026fde:	5d                   	pop    ebp
c0026fdf:	c3                   	ret    

c0026fe0 <fabs>:
c0026fe0:	83 ec 0c             	sub    esp,0xc
c0026fe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026fe7:	89 04 24             	mov    DWORD PTR [esp],eax
c0026fea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026fee:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026ff3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0026ff7:	dd 04 24             	fld    QWORD PTR [esp]
c0026ffa:	83 c4 0c             	add    esp,0xc
c0026ffd:	c3                   	ret    
c0026ffe:	66 90                	xchg   ax,ax

c0027000 <lrint>:
c0027000:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0027004:	83 ec 04             	sub    esp,0x4
c0027007:	db 1c 24             	fistp  DWORD PTR [esp]
c002700a:	58                   	pop    eax
c002700b:	c3                   	ret    

c002700c <lrintf>:
c002700c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0027010:	83 ec 04             	sub    esp,0x4
c0027013:	db 1c 24             	fistp  DWORD PTR [esp]
c0027016:	58                   	pop    eax
c0027017:	c3                   	ret    

Disassembly of section .init:

c0027018 <_init>:
c0027018:	55                   	push   ebp
c0027019:	89 e5                	mov    ebp,esp
c002701b:	e8 f8 90 fd ff       	call   c0000118 <frame_dummy>
c0027020:	e8 63 e0 ff ff       	call   c0025088 <__do_global_ctors_aux>
c0027025:	5d                   	pop    ebp
c0027026:	c3                   	ret    

Disassembly of section .fini:

c0027027 <_fini>:
c0027027:	55                   	push   ebp
c0027028:	89 e5                	mov    ebp,esp
c002702a:	e8 79 90 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002702f:	5d                   	pop    ebp
c0027030:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0027032 <Computer::~Computer()>:
c0027032:	83 ec 0c             	sub    esp,0xc
c0027035:	ba d0 8a 02 c0       	mov    edx,0xc0028ad0
c002703a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002703e:	89 10                	mov    DWORD PTR [eax],edx
c0027040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027044:	83 ec 0c             	sub    esp,0xc
c0027047:	50                   	push   eax
c0027048:	e8 c5 c9 fe ff       	call   c0013a12 <Device::~Device()>
c002704d:	83 c4 10             	add    esp,0x10
c0027050:	90                   	nop
c0027051:	83 c4 0c             	add    esp,0xc
c0027054:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0027056 <Computer::~Computer()>:
c0027056:	83 ec 0c             	sub    esp,0xc
c0027059:	83 ec 0c             	sub    esp,0xc
c002705c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027060:	e8 cd ff ff ff       	call   c0027032 <Computer::~Computer()>
c0027065:	83 c4 10             	add    esp,0x10
c0027068:	83 ec 08             	sub    esp,0x8
c002706b:	68 ec 01 00 00       	push   0x1ec
c0027070:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027074:	e8 f8 b5 fe ff       	call   c0012671 <operator delete(void*, unsigned long)>
c0027079:	83 c4 10             	add    esp,0x10
c002707c:	83 c4 0c             	add    esp,0xc
c002707f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0027080 <idleCommon()>:
c0027080:	83 ec 0c             	sub    esp,0xc
c0027083:	e8 72 5c ff ff       	call   c001ccfa <lockScheduler()>
c0027088:	e8 a9 5f ff ff       	call   c001d036 <schedule()>
c002708d:	83 c4 0c             	add    esp,0xc
c0027090:	e9 67 5c ff ff       	jmp    c001ccfc <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0027096 <LinkedList<UnixFile>::~LinkedList()>:
c0027096:	90                   	nop
c0027097:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0027098 <LinkedList<UnixFile>::LinkedList()>:
c0027098:	83 ec 0c             	sub    esp,0xc
c002709b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002709f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00270a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270a9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00270b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270b4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00270bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270bf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00270c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270c9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00270d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270d4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00270db:	83 ec 0c             	sub    esp,0xc
c00270de:	68 46 8d 02 c0       	push   0xc0028d46
c00270e3:	e8 69 b6 fe ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c00270e8:	83 c4 10             	add    esp,0x10
c00270eb:	90                   	nop
c00270ec:	83 c4 0c             	add    esp,0xc
c00270ef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00270f0 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00270f0:	83 ec 0c             	sub    esp,0xc
c00270f3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00270f8:	75 10                	jne    c002710a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00270fa:	83 ec 0c             	sub    esp,0xc
c00270fd:	68 60 8d 02 c0       	push   0xc0028d60
c0027102:	e8 64 27 ff ff       	call   c001986b <Krnl::panic(char const*)>
c0027107:	83 c4 10             	add    esp,0x10
c002710a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002710e:	8b 00                	mov    eax,DWORD PTR [eax]
c0027110:	85 c0                	test   eax,eax
c0027112:	74 34                	je     c0027148 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0027114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027118:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002711b:	85 c0                	test   eax,eax
c002711d:	74 29                	je     c0027148 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002711f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027123:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027126:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002712a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002712d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027131:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027135:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002713c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002713f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027146:	eb 65                	jmp    c00271ad <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0027148:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002714c:	8b 00                	mov    eax,DWORD PTR [eax]
c002714e:	85 c0                	test   eax,eax
c0027150:	75 4b                	jne    c002719d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0027152:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027156:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027159:	85 c0                	test   eax,eax
c002715b:	75 40                	jne    c002719d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002715d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027161:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027165:	89 10                	mov    DWORD PTR [eax],edx
c0027167:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002716b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002716f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027172:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027176:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027179:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027184:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027187:	85 c0                	test   eax,eax
c0027189:	74 22                	je     c00271ad <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002718b:	83 ec 0c             	sub    esp,0xc
c002718e:	68 82 8d 02 c0       	push   0xc0028d82
c0027193:	e8 d3 26 ff ff       	call   c001986b <Krnl::panic(char const*)>
c0027198:	83 c4 10             	add    esp,0x10
c002719b:	eb 10                	jmp    c00271ad <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002719d:	83 ec 0c             	sub    esp,0xc
c00271a0:	68 8c 8d 02 c0       	push   0xc0028d8c
c00271a5:	e8 c1 26 ff ff       	call   c001986b <Krnl::panic(char const*)>
c00271aa:	83 c4 10             	add    esp,0x10
c00271ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271b1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00271b4:	8d 50 01             	lea    edx,[eax+0x1]
c00271b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271bb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00271be:	90                   	nop
c00271bf:	83 c4 0c             	add    esp,0xc
c00271c2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00271c4 <LinkedList<UnixFile>::getFirstElement()>:
c00271c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00271c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00271ca:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00271cc <LinkedList<UnixFile>::removeFirst()>:
c00271cc:	83 ec 0c             	sub    esp,0xc
c00271cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00271d5:	85 c0                	test   eax,eax
c00271d7:	75 12                	jne    c00271eb <LinkedList<UnixFile>::removeFirst()+0x1f>
c00271d9:	83 ec 0c             	sub    esp,0xc
c00271dc:	68 98 8d 02 c0       	push   0xc0028d98
c00271e1:	e8 85 26 ff ff       	call   c001986b <Krnl::panic(char const*)>
c00271e6:	83 c4 10             	add    esp,0x10
c00271e9:	eb 7e                	jmp    c0027269 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00271eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271ef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00271f2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00271f5:	85 c0                	test   eax,eax
c00271f7:	74 10                	je     c0027209 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00271f9:	83 ec 0c             	sub    esp,0xc
c00271fc:	68 e3 8d 02 c0       	push   0xc0028de3
c0027201:	e8 65 26 ff ff       	call   c001986b <Krnl::panic(char const*)>
c0027206:	83 c4 10             	add    esp,0x10
c0027209:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002720d:	8b 00                	mov    eax,DWORD PTR [eax]
c002720f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027212:	85 c0                	test   eax,eax
c0027214:	75 33                	jne    c0027249 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0027216:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002721a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027220:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027224:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002722b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002722f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027232:	83 f8 01             	cmp    eax,0x1
c0027235:	74 21                	je     c0027258 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0027237:	83 ec 0c             	sub    esp,0xc
c002723a:	68 bc 8d 02 c0       	push   0xc0028dbc
c002723f:	e8 27 26 ff ff       	call   c001986b <Krnl::panic(char const*)>
c0027244:	83 c4 10             	add    esp,0x10
c0027247:	eb 0f                	jmp    c0027258 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0027249:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002724d:	8b 00                	mov    eax,DWORD PTR [eax]
c002724f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0027252:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027256:	89 10                	mov    DWORD PTR [eax],edx
c0027258:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002725c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002725f:	8d 50 ff             	lea    edx,[eax-0x1]
c0027262:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027266:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0027269:	83 c4 0c             	add    esp,0xc
c002726c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002726e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002726e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027272:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027275:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0027276 <DriverlessDevice::~DriverlessDevice()>:
c0027276:	ba a4 94 02 c0       	mov    edx,0xc00294a4
c002727b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002727f:	89 10                	mov    DWORD PTR [eax],edx
c0027281:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027285:	50                   	push   eax
c0027286:	e8 87 c7 fe ff       	call   c0013a12 <Device::~Device()>
c002728b:	83 c4 04             	add    esp,0x4
c002728e:	90                   	nop
c002728f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0027290 <DriverlessDevice::~DriverlessDevice()>:
c0027290:	83 ec 0c             	sub    esp,0xc
c0027293:	83 ec 0c             	sub    esp,0xc
c0027296:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002729a:	e8 d7 ff ff ff       	call   c0027276 <DriverlessDevice::~DriverlessDevice()>
c002729f:	83 c4 10             	add    esp,0x10
c00272a2:	83 ec 08             	sub    esp,0x8
c00272a5:	68 58 01 00 00       	push   0x158
c00272aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00272ae:	e8 be b3 fe ff       	call   c0012671 <operator delete(void*, unsigned long)>
c00272b3:	83 c4 10             	add    esp,0x10
c00272b6:	83 c4 0c             	add    esp,0xc
c00272b9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00272ba <LinkedList<Device>::addElement(Device*)>:
c00272ba:	83 ec 0c             	sub    esp,0xc
c00272bd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00272c2:	75 10                	jne    c00272d4 <LinkedList<Device>::addElement(Device*)+0x1a>
c00272c4:	83 ec 0c             	sub    esp,0xc
c00272c7:	68 60 8d 02 c0       	push   0xc0028d60
c00272cc:	e8 9a 25 ff ff       	call   c001986b <Krnl::panic(char const*)>
c00272d1:	83 c4 10             	add    esp,0x10
c00272d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00272da:	85 c0                	test   eax,eax
c00272dc:	74 3a                	je     c0027318 <LinkedList<Device>::addElement(Device*)+0x5e>
c00272de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00272e5:	85 c0                	test   eax,eax
c00272e7:	74 2f                	je     c0027318 <LinkedList<Device>::addElement(Device*)+0x5e>
c00272e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272ed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00272f0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00272f4:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00272fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272fe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027302:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027305:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027309:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002730c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0027316:	eb 68                	jmp    c0027380 <LinkedList<Device>::addElement(Device*)+0xc6>
c0027318:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002731c:	8b 00                	mov    eax,DWORD PTR [eax]
c002731e:	85 c0                	test   eax,eax
c0027320:	75 4e                	jne    c0027370 <LinkedList<Device>::addElement(Device*)+0xb6>
c0027322:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027326:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027329:	85 c0                	test   eax,eax
c002732b:	75 43                	jne    c0027370 <LinkedList<Device>::addElement(Device*)+0xb6>
c002732d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027331:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027335:	89 10                	mov    DWORD PTR [eax],edx
c0027337:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002733b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002733f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027342:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027346:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027349:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0027353:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027357:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002735a:	85 c0                	test   eax,eax
c002735c:	74 22                	je     c0027380 <LinkedList<Device>::addElement(Device*)+0xc6>
c002735e:	83 ec 0c             	sub    esp,0xc
c0027361:	68 82 8d 02 c0       	push   0xc0028d82
c0027366:	e8 00 25 ff ff       	call   c001986b <Krnl::panic(char const*)>
c002736b:	83 c4 10             	add    esp,0x10
c002736e:	eb 10                	jmp    c0027380 <LinkedList<Device>::addElement(Device*)+0xc6>
c0027370:	83 ec 0c             	sub    esp,0xc
c0027373:	68 8c 8d 02 c0       	push   0xc0028d8c
c0027378:	e8 ee 24 ff ff       	call   c001986b <Krnl::panic(char const*)>
c002737d:	83 c4 10             	add    esp,0x10
c0027380:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027384:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027387:	8d 50 01             	lea    edx,[eax+0x1]
c002738a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002738e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0027391:	90                   	nop
c0027392:	83 c4 0c             	add    esp,0xc
c0027395:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0027396 <LinkedList<Device>::LinkedList()>:
c0027396:	83 ec 0c             	sub    esp,0xc
c0027399:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002739d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00273a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273a7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00273ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273b2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00273b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273bd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00273c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273c7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00273ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273d2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00273d9:	83 ec 0c             	sub    esp,0xc
c00273dc:	68 46 8d 02 c0       	push   0xc0028d46
c00273e1:	e8 6b b3 fe ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c00273e6:	83 c4 10             	add    esp,0x10
c00273e9:	90                   	nop
c00273ea:	83 c4 0c             	add    esp,0xc
c00273ed:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00273ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00273ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00273f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00273f4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00273f6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00273f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00273fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00273fc:	85 c0                	test   eax,eax
c00273fe:	75 0e                	jne    c002740e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0027400:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027404:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027407:	85 c0                	test   eax,eax
c0027409:	75 03                	jne    c002740e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002740b:	b0 01                	mov    al,0x1
c002740d:	c3                   	ret    
c002740e:	b0 00                	mov    al,0x0
c0027410:	90                   	nop
c0027411:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0027412 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0027412:	83 ec 0c             	sub    esp,0xc
c0027415:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027419:	8b 00                	mov    eax,DWORD PTR [eax]
c002741b:	85 c0                	test   eax,eax
c002741d:	75 15                	jne    c0027434 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002741f:	83 ec 0c             	sub    esp,0xc
c0027422:	68 98 8d 02 c0       	push   0xc0028d98
c0027427:	e8 3f 24 ff ff       	call   c001986b <Krnl::panic(char const*)>
c002742c:	83 c4 10             	add    esp,0x10
c002742f:	e9 88 00 00 00       	jmp    c00274bc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0027434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027438:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002743b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002743e:	85 c0                	test   eax,eax
c0027440:	0f 95 c0             	setne  al
c0027443:	84 c0                	test   al,al
c0027445:	74 10                	je     c0027457 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0027447:	83 ec 0c             	sub    esp,0xc
c002744a:	68 e3 8d 02 c0       	push   0xc0028de3
c002744f:	e8 17 24 ff ff       	call   c001986b <Krnl::panic(char const*)>
c0027454:	83 c4 10             	add    esp,0x10
c0027457:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002745b:	8b 00                	mov    eax,DWORD PTR [eax]
c002745d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0027460:	85 c0                	test   eax,eax
c0027462:	0f 94 c0             	sete   al
c0027465:	84 c0                	test   al,al
c0027467:	74 33                	je     c002749c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0027469:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002746d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027477:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002747e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027482:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027485:	83 f8 01             	cmp    eax,0x1
c0027488:	74 21                	je     c00274ab <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002748a:	83 ec 0c             	sub    esp,0xc
c002748d:	68 bc 8d 02 c0       	push   0xc0028dbc
c0027492:	e8 d4 23 ff ff       	call   c001986b <Krnl::panic(char const*)>
c0027497:	83 c4 10             	add    esp,0x10
c002749a:	eb 0f                	jmp    c00274ab <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002749c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00274a2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00274a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274a9:	89 10                	mov    DWORD PTR [eax],edx
c00274ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274af:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00274b2:	8d 50 ff             	lea    edx,[eax-0x1]
c00274b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274b9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00274bc:	83 c4 0c             	add    esp,0xc
c00274bf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00274c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00274c0:	83 ec 0c             	sub    esp,0xc
c00274c3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00274c8:	75 10                	jne    c00274da <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c00274ca:	83 ec 0c             	sub    esp,0xc
c00274cd:	68 60 8d 02 c0       	push   0xc0028d60
c00274d2:	e8 94 23 ff ff       	call   c001986b <Krnl::panic(char const*)>
c00274d7:	83 c4 10             	add    esp,0x10
c00274da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274de:	8b 00                	mov    eax,DWORD PTR [eax]
c00274e0:	85 c0                	test   eax,eax
c00274e2:	74 34                	je     c0027518 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00274e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00274eb:	85 c0                	test   eax,eax
c00274ed:	74 29                	je     c0027518 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00274ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00274f6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00274fa:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00274fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027501:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027505:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002750c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002750f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0027516:	eb 65                	jmp    c002757d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0027518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002751c:	8b 00                	mov    eax,DWORD PTR [eax]
c002751e:	85 c0                	test   eax,eax
c0027520:	75 4b                	jne    c002756d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0027522:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027526:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027529:	85 c0                	test   eax,eax
c002752b:	75 40                	jne    c002756d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002752d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027531:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027535:	89 10                	mov    DWORD PTR [eax],edx
c0027537:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002753b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002753f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027542:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027546:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027549:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0027550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027554:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027557:	85 c0                	test   eax,eax
c0027559:	74 22                	je     c002757d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002755b:	83 ec 0c             	sub    esp,0xc
c002755e:	68 82 8d 02 c0       	push   0xc0028d82
c0027563:	e8 03 23 ff ff       	call   c001986b <Krnl::panic(char const*)>
c0027568:	83 c4 10             	add    esp,0x10
c002756b:	eb 10                	jmp    c002757d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002756d:	83 ec 0c             	sub    esp,0xc
c0027570:	68 8c 8d 02 c0       	push   0xc0028d8c
c0027575:	e8 f1 22 ff ff       	call   c001986b <Krnl::panic(char const*)>
c002757a:	83 c4 10             	add    esp,0x10
c002757d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027581:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027584:	8d 50 01             	lea    edx,[eax+0x1]
c0027587:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002758b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002758e:	90                   	nop
c002758f:	83 c4 0c             	add    esp,0xc
c0027592:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0027594 <ACPI::~ACPI()>:
c0027594:	83 ec 0c             	sub    esp,0xc
c0027597:	ba 48 9d 02 c0       	mov    edx,0xc0029d48
c002759c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275a0:	89 10                	mov    DWORD PTR [eax],edx
c00275a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275a6:	83 ec 0c             	sub    esp,0xc
c00275a9:	50                   	push   eax
c00275aa:	e8 63 c4 fe ff       	call   c0013a12 <Device::~Device()>
c00275af:	83 c4 10             	add    esp,0x10
c00275b2:	90                   	nop
c00275b3:	83 c4 0c             	add    esp,0xc
c00275b6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c00275b8 <ACPI::~ACPI()>:
c00275b8:	83 ec 0c             	sub    esp,0xc
c00275bb:	83 ec 0c             	sub    esp,0xc
c00275be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00275c2:	e8 cd ff ff ff       	call   c0027594 <ACPI::~ACPI()>
c00275c7:	83 c4 10             	add    esp,0x10
c00275ca:	83 ec 08             	sub    esp,0x8
c00275cd:	68 68 22 00 00       	push   0x2268
c00275d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00275d6:	e8 96 b0 fe ff       	call   c0012671 <operator delete(void*, unsigned long)>
c00275db:	83 c4 10             	add    esp,0x10
c00275de:	83 c4 0c             	add    esp,0xc
c00275e1:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00275e2 <CPU::~CPU()>:
c00275e2:	83 ec 0c             	sub    esp,0xc
c00275e5:	ba 38 a1 02 c0       	mov    edx,0xc002a138
c00275ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275ee:	89 10                	mov    DWORD PTR [eax],edx
c00275f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275f4:	83 ec 0c             	sub    esp,0xc
c00275f7:	50                   	push   eax
c00275f8:	e8 15 c4 fe ff       	call   c0013a12 <Device::~Device()>
c00275fd:	83 c4 10             	add    esp,0x10
c0027600:	90                   	nop
c0027601:	83 c4 0c             	add    esp,0xc
c0027604:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0027606 <CPU::~CPU()>:
c0027606:	83 ec 0c             	sub    esp,0xc
c0027609:	83 ec 0c             	sub    esp,0xc
c002760c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027610:	e8 cd ff ff ff       	call   c00275e2 <CPU::~CPU()>
c0027615:	83 c4 10             	add    esp,0x10
c0027618:	83 ec 08             	sub    esp,0x8
c002761b:	68 98 11 00 00       	push   0x1198
c0027620:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027624:	e8 48 b0 fe ff       	call   c0012671 <operator delete(void*, unsigned long)>
c0027629:	83 c4 10             	add    esp,0x10
c002762c:	83 c4 0c             	add    esp,0xc
c002762f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0027630 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0027630:	90                   	nop
c0027631:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0027632 <ThreadControlBlock::ThreadControlBlock()>:
c0027632:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027636:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002763d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027641:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0027648:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002764c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0027653:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027657:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c002765e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027662:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0027666:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002766a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c002766e:	90                   	nop
c002766f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0027670 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0027670:	83 ec 0c             	sub    esp,0xc
c0027673:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027677:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002767d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027681:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027688:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002768c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027697:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002769d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276a1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00276a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276ac:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00276b3:	83 ec 0c             	sub    esp,0xc
c00276b6:	68 46 8d 02 c0       	push   0xc0028d46
c00276bb:	e8 91 b0 fe ff       	call   c0012751 <Dbg::kprintf(char const*, ...)>
c00276c0:	83 c4 10             	add    esp,0x10
c00276c3:	90                   	nop
c00276c4:	83 c4 0c             	add    esp,0xc
c00276c7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00276c8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00276c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00276cc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00276cf:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c00276d0 <Vm::_FPUState::_FPUState()>:
c00276d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00276d4:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c00276db:	90                   	nop
c00276dc:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00276de <PCI::~PCI()>:
c00276de:	83 ec 0c             	sub    esp,0xc
c00276e1:	ba c4 af 02 c0       	mov    edx,0xc002afc4
c00276e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276ea:	89 10                	mov    DWORD PTR [eax],edx
c00276ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276f0:	83 ec 0c             	sub    esp,0xc
c00276f3:	50                   	push   eax
c00276f4:	e8 29 bd fe ff       	call   c0013422 <Bus::~Bus()>
c00276f9:	83 c4 10             	add    esp,0x10
c00276fc:	90                   	nop
c00276fd:	83 c4 0c             	add    esp,0xc
c0027700:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0027702 <PCI::~PCI()>:
c0027702:	83 ec 0c             	sub    esp,0xc
c0027705:	83 ec 0c             	sub    esp,0xc
c0027708:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002770c:	e8 cd ff ff ff       	call   c00276de <PCI::~PCI()>
c0027711:	83 c4 10             	add    esp,0x10
c0027714:	83 ec 08             	sub    esp,0x8
c0027717:	68 58 01 00 00       	push   0x158
c002771c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027720:	e8 4c af fe ff       	call   c0012671 <operator delete(void*, unsigned long)>
c0027725:	83 c4 10             	add    esp,0x10
c0027728:	83 c4 0c             	add    esp,0xc
c002772b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002772c <IDE::~IDE()>:
c002772c:	83 ec 0c             	sub    esp,0xc
c002772f:	ba 28 b2 02 c0       	mov    edx,0xc002b228
c0027734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027738:	89 10                	mov    DWORD PTR [eax],edx
c002773a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002773e:	83 ec 0c             	sub    esp,0xc
c0027741:	50                   	push   eax
c0027742:	e8 bb c7 fe ff       	call   c0013f02 <HardDiskController::~HardDiskController()>
c0027747:	83 c4 10             	add    esp,0x10
c002774a:	90                   	nop
c002774b:	83 c4 0c             	add    esp,0xc
c002774e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0027750 <IDE::~IDE()>:
c0027750:	83 ec 0c             	sub    esp,0xc
c0027753:	83 ec 0c             	sub    esp,0xc
c0027756:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002775a:	e8 cd ff ff ff       	call   c002772c <IDE::~IDE()>
c002775f:	83 c4 10             	add    esp,0x10
c0027762:	83 ec 08             	sub    esp,0x8
c0027765:	68 70 02 00 00       	push   0x270
c002776a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002776e:	e8 fe ae fe ff       	call   c0012671 <operator delete(void*, unsigned long)>
c0027773:	83 c4 10             	add    esp,0x10
c0027776:	83 c4 0c             	add    esp,0xc
c0027779:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c002777a <SATABus::~SATABus()>:
c002777a:	83 ec 0c             	sub    esp,0xc
c002777d:	ba 08 b3 02 c0       	mov    edx,0xc002b308
c0027782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027786:	89 10                	mov    DWORD PTR [eax],edx
c0027788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002778c:	83 ec 0c             	sub    esp,0xc
c002778f:	50                   	push   eax
c0027790:	e8 6d c7 fe ff       	call   c0013f02 <HardDiskController::~HardDiskController()>
c0027795:	83 c4 10             	add    esp,0x10
c0027798:	90                   	nop
c0027799:	83 c4 0c             	add    esp,0xc
c002779c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002779e <SATABus::~SATABus()>:
c002779e:	83 ec 0c             	sub    esp,0xc
c00277a1:	83 ec 0c             	sub    esp,0xc
c00277a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00277a8:	e8 cd ff ff ff       	call   c002777a <SATABus::~SATABus()>
c00277ad:	83 c4 10             	add    esp,0x10
c00277b0:	83 ec 08             	sub    esp,0x8
c00277b3:	68 64 01 00 00       	push   0x164
c00277b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00277bc:	e8 b0 ae fe ff       	call   c0012671 <operator delete(void*, unsigned long)>
c00277c1:	83 c4 10             	add    esp,0x10
c00277c4:	83 c4 0c             	add    esp,0xc
c00277c7:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00277c8 <ATA::~ATA()>:
c00277c8:	83 ec 0c             	sub    esp,0xc
c00277cb:	ba 48 b3 02 c0       	mov    edx,0xc002b348
c00277d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277d4:	89 10                	mov    DWORD PTR [eax],edx
c00277d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277da:	83 ec 0c             	sub    esp,0xc
c00277dd:	50                   	push   eax
c00277de:	e8 fd c7 fe ff       	call   c0013fe0 <PhysicalDisk::~PhysicalDisk()>
c00277e3:	83 c4 10             	add    esp,0x10
c00277e6:	90                   	nop
c00277e7:	83 c4 0c             	add    esp,0xc
c00277ea:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00277ec <ATA::~ATA()>:
c00277ec:	83 ec 0c             	sub    esp,0xc
c00277ef:	83 ec 0c             	sub    esp,0xc
c00277f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00277f6:	e8 cd ff ff ff       	call   c00277c8 <ATA::~ATA()>
c00277fb:	83 c4 10             	add    esp,0x10
c00277fe:	83 ec 08             	sub    esp,0x8
c0027801:	68 7c 01 00 00       	push   0x17c
c0027806:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002780a:	e8 62 ae fe ff       	call   c0012671 <operator delete(void*, unsigned long)>
c002780f:	83 c4 10             	add    esp,0x10
c0027812:	83 c4 0c             	add    esp,0xc
c0027815:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0027816 <ATAPI::~ATAPI()>:
c0027816:	83 ec 0c             	sub    esp,0xc
c0027819:	ba b4 b3 02 c0       	mov    edx,0xc002b3b4
c002781e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027822:	89 10                	mov    DWORD PTR [eax],edx
c0027824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027828:	83 ec 0c             	sub    esp,0xc
c002782b:	50                   	push   eax
c002782c:	e8 af c7 fe ff       	call   c0013fe0 <PhysicalDisk::~PhysicalDisk()>
c0027831:	83 c4 10             	add    esp,0x10
c0027834:	90                   	nop
c0027835:	83 c4 0c             	add    esp,0xc
c0027838:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c002783a <ATAPI::~ATAPI()>:
c002783a:	83 ec 0c             	sub    esp,0xc
c002783d:	83 ec 0c             	sub    esp,0xc
c0027840:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027844:	e8 cd ff ff ff       	call   c0027816 <ATAPI::~ATAPI()>
c0027849:	83 c4 10             	add    esp,0x10
c002784c:	83 ec 08             	sub    esp,0x8
c002784f:	68 80 01 00 00       	push   0x180
c0027854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027858:	e8 14 ae fe ff       	call   c0012671 <operator delete(void*, unsigned long)>
c002785d:	83 c4 10             	add    esp,0x10
c0027860:	83 c4 0c             	add    esp,0xc
c0027863:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0027864 <SATA::~SATA()>:
c0027864:	83 ec 0c             	sub    esp,0xc
c0027867:	ba d8 b4 02 c0       	mov    edx,0xc002b4d8
c002786c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027870:	89 10                	mov    DWORD PTR [eax],edx
c0027872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027876:	83 ec 0c             	sub    esp,0xc
c0027879:	50                   	push   eax
c002787a:	e8 61 c7 fe ff       	call   c0013fe0 <PhysicalDisk::~PhysicalDisk()>
c002787f:	83 c4 10             	add    esp,0x10
c0027882:	90                   	nop
c0027883:	83 c4 0c             	add    esp,0xc
c0027886:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0027888 <SATA::~SATA()>:
c0027888:	83 ec 0c             	sub    esp,0xc
c002788b:	83 ec 0c             	sub    esp,0xc
c002788e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027892:	e8 cd ff ff ff       	call   c0027864 <SATA::~SATA()>
c0027897:	83 c4 10             	add    esp,0x10
c002789a:	83 ec 08             	sub    esp,0x8
c002789d:	68 74 01 00 00       	push   0x174
c00278a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00278a6:	e8 c6 ad fe ff       	call   c0012671 <operator delete(void*, unsigned long)>
c00278ab:	83 c4 10             	add    esp,0x10
c00278ae:	83 c4 0c             	add    esp,0xc
c00278b1:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c00278b2 <AVX::~AVX()>:
c00278b2:	83 ec 0c             	sub    esp,0xc
c00278b5:	ba 14 b5 02 c0       	mov    edx,0xc002b514
c00278ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278be:	89 10                	mov    DWORD PTR [eax],edx
c00278c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278c4:	83 ec 0c             	sub    esp,0xc
c00278c7:	50                   	push   eax
c00278c8:	e8 97 c7 fe ff       	call   c0014064 <FPU::~FPU()>
c00278cd:	83 c4 10             	add    esp,0x10
c00278d0:	90                   	nop
c00278d1:	83 c4 0c             	add    esp,0xc
c00278d4:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c00278d6 <AVX::~AVX()>:
c00278d6:	83 ec 0c             	sub    esp,0xc
c00278d9:	83 ec 0c             	sub    esp,0xc
c00278dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00278e0:	e8 cd ff ff ff       	call   c00278b2 <AVX::~AVX()>
c00278e5:	83 c4 10             	add    esp,0x10
c00278e8:	83 ec 08             	sub    esp,0x8
c00278eb:	68 58 01 00 00       	push   0x158
c00278f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00278f4:	e8 78 ad fe ff       	call   c0012671 <operator delete(void*, unsigned long)>
c00278f9:	83 c4 10             	add    esp,0x10
c00278fc:	83 c4 0c             	add    esp,0xc
c00278ff:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0027900 <MMX::~MMX()>:
c0027900:	83 ec 0c             	sub    esp,0xc
c0027903:	ba 54 b5 02 c0       	mov    edx,0xc002b554
c0027908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002790c:	89 10                	mov    DWORD PTR [eax],edx
c002790e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027912:	83 ec 0c             	sub    esp,0xc
c0027915:	50                   	push   eax
c0027916:	e8 49 c7 fe ff       	call   c0014064 <FPU::~FPU()>
c002791b:	83 c4 10             	add    esp,0x10
c002791e:	90                   	nop
c002791f:	83 c4 0c             	add    esp,0xc
c0027922:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0027924 <MMX::~MMX()>:
c0027924:	83 ec 0c             	sub    esp,0xc
c0027927:	83 ec 0c             	sub    esp,0xc
c002792a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002792e:	e8 cd ff ff ff       	call   c0027900 <MMX::~MMX()>
c0027933:	83 c4 10             	add    esp,0x10
c0027936:	83 ec 08             	sub    esp,0x8
c0027939:	68 58 01 00 00       	push   0x158
c002793e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027942:	e8 2a ad fe ff       	call   c0012671 <operator delete(void*, unsigned long)>
c0027947:	83 c4 10             	add    esp,0x10
c002794a:	83 c4 0c             	add    esp,0xc
c002794d:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c002794e <SSE::~SSE()>:
c002794e:	83 ec 0c             	sub    esp,0xc
c0027951:	ba 94 b5 02 c0       	mov    edx,0xc002b594
c0027956:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002795a:	89 10                	mov    DWORD PTR [eax],edx
c002795c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027960:	83 ec 0c             	sub    esp,0xc
c0027963:	50                   	push   eax
c0027964:	e8 fb c6 fe ff       	call   c0014064 <FPU::~FPU()>
c0027969:	83 c4 10             	add    esp,0x10
c002796c:	90                   	nop
c002796d:	83 c4 0c             	add    esp,0xc
c0027970:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0027972 <SSE::~SSE()>:
c0027972:	83 ec 0c             	sub    esp,0xc
c0027975:	83 ec 0c             	sub    esp,0xc
c0027978:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002797c:	e8 cd ff ff ff       	call   c002794e <SSE::~SSE()>
c0027981:	83 c4 10             	add    esp,0x10
c0027984:	83 ec 08             	sub    esp,0x8
c0027987:	68 58 01 00 00       	push   0x158
c002798c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027990:	e8 dc ac fe ff       	call   c0012671 <operator delete(void*, unsigned long)>
c0027995:	83 c4 10             	add    esp,0x10
c0027998:	83 c4 0c             	add    esp,0xc
c002799b:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c002799c <x87::~x87()>:
c002799c:	83 ec 0c             	sub    esp,0xc
c002799f:	ba d4 b5 02 c0       	mov    edx,0xc002b5d4
c00279a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279a8:	89 10                	mov    DWORD PTR [eax],edx
c00279aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279ae:	83 ec 0c             	sub    esp,0xc
c00279b1:	50                   	push   eax
c00279b2:	e8 ad c6 fe ff       	call   c0014064 <FPU::~FPU()>
c00279b7:	83 c4 10             	add    esp,0x10
c00279ba:	90                   	nop
c00279bb:	83 c4 0c             	add    esp,0xc
c00279be:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c00279c0 <x87::~x87()>:
c00279c0:	83 ec 0c             	sub    esp,0xc
c00279c3:	83 ec 0c             	sub    esp,0xc
c00279c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00279ca:	e8 cd ff ff ff       	call   c002799c <x87::~x87()>
c00279cf:	83 c4 10             	add    esp,0x10
c00279d2:	83 ec 08             	sub    esp,0x8
c00279d5:	68 58 01 00 00       	push   0x158
c00279da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00279de:	e8 8e ac fe ff       	call   c0012671 <operator delete(void*, unsigned long)>
c00279e3:	83 c4 10             	add    esp,0x10
c00279e6:	83 c4 0c             	add    esp,0xc
c00279e9:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00279ea <IOAPIC::~IOAPIC()>:
c00279ea:	83 ec 0c             	sub    esp,0xc
c00279ed:	ba 2c b7 02 c0       	mov    edx,0xc002b72c
c00279f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279f6:	89 10                	mov    DWORD PTR [eax],edx
c00279f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279fc:	83 ec 0c             	sub    esp,0xc
c00279ff:	50                   	push   eax
c0027a00:	e8 0d c0 fe ff       	call   c0013a12 <Device::~Device()>
c0027a05:	83 c4 10             	add    esp,0x10
c0027a08:	90                   	nop
c0027a09:	83 c4 0c             	add    esp,0xc
c0027a0c:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0027a0e <IOAPIC::~IOAPIC()>:
c0027a0e:	83 ec 0c             	sub    esp,0xc
c0027a11:	83 ec 0c             	sub    esp,0xc
c0027a14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a18:	e8 cd ff ff ff       	call   c00279ea <IOAPIC::~IOAPIC()>
c0027a1d:	83 c4 10             	add    esp,0x10
c0027a20:	83 ec 08             	sub    esp,0x8
c0027a23:	68 68 01 00 00       	push   0x168
c0027a28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a2c:	e8 40 ac fe ff       	call   c0012671 <operator delete(void*, unsigned long)>
c0027a31:	83 c4 10             	add    esp,0x10
c0027a34:	83 c4 0c             	add    esp,0xc
c0027a37:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0027a38 <APIC::~APIC()>:
c0027a38:	83 ec 0c             	sub    esp,0xc
c0027a3b:	ba e4 b6 02 c0       	mov    edx,0xc002b6e4
c0027a40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a44:	89 10                	mov    DWORD PTR [eax],edx
c0027a46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a4a:	83 ec 0c             	sub    esp,0xc
c0027a4d:	50                   	push   eax
c0027a4e:	e8 db ca fe ff       	call   c001452e <InterruptController::~InterruptController()>
c0027a53:	83 c4 10             	add    esp,0x10
c0027a56:	90                   	nop
c0027a57:	83 c4 0c             	add    esp,0xc
c0027a5a:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0027a5c <APIC::~APIC()>:
c0027a5c:	83 ec 0c             	sub    esp,0xc
c0027a5f:	83 ec 0c             	sub    esp,0xc
c0027a62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a66:	e8 cd ff ff ff       	call   c0027a38 <APIC::~APIC()>
c0027a6b:	83 c4 10             	add    esp,0x10
c0027a6e:	83 ec 08             	sub    esp,0x8
c0027a71:	68 58 21 00 00       	push   0x2158
c0027a76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a7a:	e8 f2 ab fe ff       	call   c0012671 <operator delete(void*, unsigned long)>
c0027a7f:	83 c4 10             	add    esp,0x10
c0027a82:	83 c4 0c             	add    esp,0xc
c0027a85:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0027a86 <PIC::~PIC()>:
c0027a86:	83 ec 0c             	sub    esp,0xc
c0027a89:	ba 7c b7 02 c0       	mov    edx,0xc002b77c
c0027a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a92:	89 10                	mov    DWORD PTR [eax],edx
c0027a94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a98:	83 ec 0c             	sub    esp,0xc
c0027a9b:	50                   	push   eax
c0027a9c:	e8 8d ca fe ff       	call   c001452e <InterruptController::~InterruptController()>
c0027aa1:	83 c4 10             	add    esp,0x10
c0027aa4:	90                   	nop
c0027aa5:	83 c4 0c             	add    esp,0xc
c0027aa8:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0027aaa <PIC::~PIC()>:
c0027aaa:	83 ec 0c             	sub    esp,0xc
c0027aad:	83 ec 0c             	sub    esp,0xc
c0027ab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027ab4:	e8 cd ff ff ff       	call   c0027a86 <PIC::~PIC()>
c0027ab9:	83 c4 10             	add    esp,0x10
c0027abc:	83 ec 08             	sub    esp,0x8
c0027abf:	68 58 21 00 00       	push   0x2158
c0027ac4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027ac8:	e8 a4 ab fe ff       	call   c0012671 <operator delete(void*, unsigned long)>
c0027acd:	83 c4 10             	add    esp,0x10
c0027ad0:	83 c4 0c             	add    esp,0xc
c0027ad3:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0027ad4 <APICTimer::~APICTimer()>:
c0027ad4:	83 ec 0c             	sub    esp,0xc
c0027ad7:	ba d0 b7 02 c0       	mov    edx,0xc002b7d0
c0027adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ae0:	89 10                	mov    DWORD PTR [eax],edx
c0027ae2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ae6:	83 ec 0c             	sub    esp,0xc
c0027ae9:	50                   	push   eax
c0027aea:	e8 3f e8 fe ff       	call   c001632e <Timer::~Timer()>
c0027aef:	83 c4 10             	add    esp,0x10
c0027af2:	90                   	nop
c0027af3:	83 c4 0c             	add    esp,0xc
c0027af6:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0027af8 <APICTimer::~APICTimer()>:
c0027af8:	83 ec 0c             	sub    esp,0xc
c0027afb:	83 ec 0c             	sub    esp,0xc
c0027afe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b02:	e8 cd ff ff ff       	call   c0027ad4 <APICTimer::~APICTimer()>
c0027b07:	83 c4 10             	add    esp,0x10
c0027b0a:	83 ec 08             	sub    esp,0x8
c0027b0d:	68 60 01 00 00       	push   0x160
c0027b12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b16:	e8 56 ab fe ff       	call   c0012671 <operator delete(void*, unsigned long)>
c0027b1b:	83 c4 10             	add    esp,0x10
c0027b1e:	83 c4 0c             	add    esp,0xc
c0027b21:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0027b22 <PIT::~PIT()>:
c0027b22:	83 ec 0c             	sub    esp,0xc
c0027b25:	ba 20 b8 02 c0       	mov    edx,0xc002b820
c0027b2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b2e:	89 10                	mov    DWORD PTR [eax],edx
c0027b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b34:	83 ec 0c             	sub    esp,0xc
c0027b37:	50                   	push   eax
c0027b38:	e8 f1 e7 fe ff       	call   c001632e <Timer::~Timer()>
c0027b3d:	83 c4 10             	add    esp,0x10
c0027b40:	90                   	nop
c0027b41:	83 c4 0c             	add    esp,0xc
c0027b44:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0027b46 <PIT::~PIT()>:
c0027b46:	83 ec 0c             	sub    esp,0xc
c0027b49:	83 ec 0c             	sub    esp,0xc
c0027b4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b50:	e8 cd ff ff ff       	call   c0027b22 <PIT::~PIT()>
c0027b55:	83 c4 10             	add    esp,0x10
c0027b58:	83 ec 08             	sub    esp,0x8
c0027b5b:	68 5c 01 00 00       	push   0x15c
c0027b60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b64:	e8 08 ab fe ff       	call   c0012671 <operator delete(void*, unsigned long)>
c0027b69:	83 c4 10             	add    esp,0x10
c0027b6c:	83 c4 0c             	add    esp,0xc
c0027b6f:	c3                   	ret    
