
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f0 7a 00 00       	call   c0007b10 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 24 37 02 c0       	mov    eax,0xc0023724
c0000025:	3d 24 37 02 c0       	cmp    eax,0xc0023724
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 24 37 02 c0       	push   0xc0023724
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 24 37 02 c0       	mov    eax,0xc0023724
c0000051:	2d 24 37 02 c0       	sub    eax,0xc0023724
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 24 37 02 c0       	push   0xc0023724
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 50 02 c0 00 	cmp    BYTE PTR ds:0xc00250c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 6c fe 01 c0       	mov    ebx,0xc001fe6c
c0000097:	81 eb 68 fe 01 c0    	sub    ebx,0xc001fe68
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 68 fe 01 c0       	mov    esi,0xc001fe68
c00000a6:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 50 02 c0       	mov    ds:0xc00250c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 24 37 02 c0       	push   0xc0023724
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 50 02 c0 01 	mov    BYTE PTR ds:0xc00250c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 50 02 c0       	push   0xc00250c8
c0000108:	68 24 37 02 c0       	push   0xc0023724
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 af 50 01 00       	call   c001535c <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 08 a4 00 00       	call   c000a6cd <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 8d 50 01 00       	call   c001535c <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 9a 55 01 00       	call   c0015888 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 59 5c 01 00       	call   c0015f50 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 5e 02 c0 	lgdtd  ds:0xc0025ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 d5 0e 01 00       	jmp    c0011254 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 50 02 c0       	mov    ds:0xc00250e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 50 02 c0    	mov    DWORD PTR ds:0xc00250e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 50 02 c0    	mov    ebx,DWORD PTR ds:0xc00250e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 80 fe 01 c0 02 	test   BYTE PTR [edx-0x3ffe0180],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 80 fe 01 c0 01 	test   BYTE PTR [edx-0x3ffe0180],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 80 fe 01 c0 08 	test   BYTE PTR [edx-0x3ffe0180],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 80 fe 01 c0 04 	test   BYTE PTR [ecx-0x3ffe0180],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 80 fe 01 c0 01 	test   BYTE PTR [edx-0x3ffe0180],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d5a:	85 db                	test   ebx,ebx
c0000d5c:	0f 84 e2 00 00 00    	je     c0000e44 <dlfree+0xf1>
c0000d62:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d65:	8b 0d 00 51 02 c0    	mov    ecx,DWORD PTR ds:0xc0025100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c1                	cmp    ecx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 c9 03             	or     ecx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 0c 85 04 51 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdaefc]
c0000d8d:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d8f:	89 14 85 04 51 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaefc],edx
c0000d96:	e9 a9 00 00 00       	jmp    c0000e44 <dlfree+0xf1>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 c9 01             	or     ecx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000db0:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000db3:	83 e1 fc             	and    ecx,0xfffffffc
c0000db6:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000dbf:	29 da                	sub    edx,ebx
c0000dc1:	01 d8                	add    eax,ebx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dc9:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dcc:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000dcf:	39 35 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000ddb:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000dde:	80 e3 01             	and    bl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000de9:	01 c8                	add    eax,ecx
c0000deb:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dee:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000df1:	8b 0d 3c 51 02 c0    	mov    ecx,DWORD PTR ds:0xc002513c
c0000df7:	c7 42 0c 34 51 02 c0 	mov    DWORD PTR [edx+0xc],0xc0025134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 c8                	add    eax,ecx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 16                	jbe    c0000e44 <dlfree+0xf1>
c0000e2e:	f6 05 00 51 02 c0 02 	test   BYTE PTR ds:0xc0025100,0x2
c0000e35:	74 0d                	je     c0000e44 <dlfree+0xf1>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	5b                   	pop    ebx
c0000e45:	5e                   	pop    esi
c0000e46:	5f                   	pop    edi
c0000e47:	c3                   	ret    

c0000e48 <sYSMALLOc>:
c0000e48:	55                   	push   ebp
c0000e49:	57                   	push   edi
c0000e4a:	56                   	push   esi
c0000e4b:	53                   	push   ebx
c0000e4c:	89 d3                	mov    ebx,edx
c0000e4e:	83 ec 2c             	sub    esp,0x2c
c0000e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e55:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e5b:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e5e:	8d 42 ff             	lea    eax,[edx-0x1]
c0000e61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000e65:	74 1f                	je     c0000e86 <sYSMALLOc+0x3e>
c0000e67:	89 d8                	mov    eax,ebx
c0000e69:	e8 fe fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e6e:	83 ec 0c             	sub    esp,0xc
c0000e71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000e75:	83 e8 07             	sub    eax,0x7
c0000e78:	50                   	push   eax
c0000e79:	e8 2d 02 00 00       	call   c00010ab <dlmalloc>
c0000e7e:	83 c4 10             	add    esp,0x10
c0000e81:	e9 1d 02 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000e86:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000e89:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e8f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e92:	83 e0 fc             	and    eax,0xfffffffc
c0000e95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e9d:	83 c0 10             	add    eax,0x10
c0000ea0:	01 c1                	add    ecx,eax
c0000ea2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000ea6:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ead:	74 04                	je     c0000eb3 <sYSMALLOc+0x6b>
c0000eaf:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000eb3:	f7 da                	neg    edx
c0000eb5:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
c0000eb9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0000ebd:	21 d1                	and    ecx,edx
c0000ebf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000ec3:	7f 07                	jg     c0000ecc <sYSMALLOc+0x84>
c0000ec5:	31 c0                	xor    eax,eax
c0000ec7:	e9 d7 01 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000ecc:	83 ec 0c             	sub    esp,0xc
c0000ecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000ed3:	e8 b0 6a 00 00       	call   c0007988 <sbrk>
c0000ed8:	83 c4 10             	add    esp,0x10
c0000edb:	89 c6                	mov    esi,eax
c0000edd:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee0:	74 e3                	je     c0000ec5 <sYSMALLOc+0x7d>
c0000ee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000ee6:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000ee9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eed:	03 83 68 03 00 00    	add    eax,DWORD PTR [ebx+0x368]
c0000ef3:	39 f1                	cmp    ecx,esi
c0000ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ef9:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000eff:	75 13                	jne    c0000f14 <sYSMALLOc+0xcc>
c0000f01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f09:	83 c8 01             	or     eax,0x1
c0000f0c:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f0f:	e9 37 01 00 00       	jmp    c000104b <sYSMALLOc+0x203>
c0000f14:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f1a:	89 d5                	mov    ebp,edx
c0000f1c:	83 e5 01             	and    ebp,0x1
c0000f1f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f24:	0f 95 c0             	setne  al
c0000f27:	21 e8                	and    eax,ebp
c0000f29:	39 f1                	cmp    ecx,esi
c0000f2b:	76 12                	jbe    c0000f3f <sYSMALLOc+0xf7>
c0000f2d:	85 c0                	test   eax,eax
c0000f2f:	74 0e                	je     c0000f3f <sYSMALLOc+0xf7>
c0000f31:	83 e2 fe             	and    edx,0xfffffffe
c0000f34:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f3a:	e9 82 00 00 00       	jmp    c0000fc1 <sYSMALLOc+0x179>
c0000f3f:	85 ed                	test   ebp,ebp
c0000f41:	74 7e                	je     c0000fc1 <sYSMALLOc+0x179>
c0000f43:	85 c0                	test   eax,eax
c0000f45:	74 0e                	je     c0000f55 <sYSMALLOc+0x10d>
c0000f47:	89 f0                	mov    eax,esi
c0000f49:	29 c8                	sub    eax,ecx
c0000f4b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0000f4f:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f55:	89 f2                	mov    edx,esi
c0000f57:	83 e2 07             	and    edx,0x7
c0000f5a:	74 0c                	je     c0000f68 <sYSMALLOc+0x120>
c0000f5c:	b8 08 00 00 00       	mov    eax,0x8
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000f66:	eb 04                	jmp    c0000f6c <sYSMALLOc+0x124>
c0000f68:	89 f5                	mov    ebp,esi
c0000f6a:	31 c0                	xor    eax,eax
c0000f6c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f70:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000f78:	01 c1                	add    ecx,eax
c0000f7a:	83 ec 0c             	sub    esp,0xc
c0000f7d:	01 f1                	add    ecx,esi
c0000f7f:	01 ca                	add    edx,ecx
c0000f81:	29 c8                	sub    eax,ecx
c0000f83:	23 54 24 24          	and    edx,DWORD PTR [esp+0x24]
c0000f87:	01 c2                	add    edx,eax
c0000f89:	52                   	push   edx
c0000f8a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f8e:	e8 f5 69 00 00       	call   c0007988 <sbrk>
c0000f93:	83 c4 10             	add    esp,0x10
c0000f96:	83 f8 ff             	cmp    eax,0xffffffff
c0000f99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f9d:	75 0f                	jne    c0000fae <sYSMALLOc+0x166>
c0000f9f:	83 ec 0c             	sub    esp,0xc
c0000fa2:	6a 00                	push   0x0
c0000fa4:	e8 df 69 00 00       	call   c0007988 <sbrk>
c0000fa9:	83 c4 10             	add    esp,0x10
c0000fac:	eb 30                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fae:	39 c6                	cmp    esi,eax
c0000fb0:	76 33                	jbe    c0000fe5 <sYSMALLOc+0x19d>
c0000fb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb6:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000fbd:	01 f0                	add    eax,esi
c0000fbf:	eb 1d                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fc1:	83 ec 0c             	sub    esp,0xc
c0000fc4:	89 f5                	mov    ebp,esi
c0000fc6:	6a 00                	push   0x0
c0000fc8:	e8 bb 69 00 00       	call   c0007988 <sbrk>
c0000fcd:	89 c2                	mov    edx,eax
c0000fcf:	29 f2                	sub    edx,esi
c0000fd1:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000fd5:	83 c4 10             	add    esp,0x10
c0000fd8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000fde:	31 d2                	xor    edx,edx
c0000fe0:	83 f8 ff             	cmp    eax,0xffffffff
c0000fe3:	74 66                	je     c000104b <sYSMALLOc+0x203>
c0000fe5:	29 e8                	sub    eax,ebp
c0000fe7:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000fea:	01 d0                	add    eax,edx
c0000fec:	83 c8 01             	or     eax,0x1
c0000fef:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000ff2:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000ff8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000ffd:	74 4c                	je     c000104b <sYSMALLOc+0x203>
c0000fff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001003:	83 e8 0c             	sub    eax,0xc
c0001006:	83 e0 f8             	and    eax,0xfffffff8
c0001009:	89 c2                	mov    edx,eax
c000100b:	83 ca 01             	or     edx,0x1
c000100e:	83 f8 0f             	cmp    eax,0xf
c0001011:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001014:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c000101c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001024:	76 25                	jbe    c000104b <sYSMALLOc+0x203>
c0001026:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000102c:	83 ec 0c             	sub    esp,0xc
c000102f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001039:	83 c7 08             	add    edi,0x8
c000103c:	57                   	push   edi
c000103d:	e8 11 fd ff ff       	call   c0000d53 <dlfree>
c0001042:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0001048:	83 c4 10             	add    esp,0x10
c000104b:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001051:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001057:	73 06                	jae    c000105f <sYSMALLOc+0x217>
c0001059:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c000105f:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0001065:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c000106b:	73 06                	jae    c0001073 <sYSMALLOc+0x22b>
c000106d:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001073:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001076:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001079:	83 e2 fc             	and    edx,0xfffffffc
c000107c:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
c0001080:	0f 82 3f fe ff ff    	jb     c0000ec5 <sYSMALLOc+0x7d>
c0001086:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000108a:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000108d:	29 fa                	sub    edx,edi
c000108f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001092:	83 ca 01             	or     edx,0x1
c0001095:	89 fb                	mov    ebx,edi
c0001097:	83 c0 08             	add    eax,0x8
c000109a:	83 cb 01             	or     ebx,0x1
c000109d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	83 c4 2c             	add    esp,0x2c
c00010a6:	5b                   	pop    ebx
c00010a7:	5e                   	pop    esi
c00010a8:	5f                   	pop    edi
c00010a9:	5d                   	pop    ebp
c00010aa:	c3                   	ret    

c00010ab <dlmalloc>:
c00010ab:	55                   	push   ebp
c00010ac:	57                   	push   edi
c00010ad:	56                   	push   esi
c00010ae:	53                   	push   ebx
c00010af:	83 ec 1c             	sub    esp,0x1c
c00010b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010b6:	83 f8 df             	cmp    eax,0xffffffdf
c00010b9:	0f 87 70 03 00 00    	ja     c000142f <dlmalloc+0x384>
c00010bf:	83 c0 0b             	add    eax,0xb
c00010c2:	be 10 00 00 00       	mov    esi,0x10
c00010c7:	83 f8 0f             	cmp    eax,0xf
c00010ca:	76 05                	jbe    c00010d1 <dlmalloc+0x26>
c00010cc:	83 e0 f8             	and    eax,0xfffffff8
c00010cf:	89 c6                	mov    esi,eax
c00010d1:	8b 3d 00 51 02 c0    	mov    edi,DWORD PTR ds:0xc0025100
c00010d7:	f7 c7 01 00 00 00    	test   edi,0x1
c00010dd:	75 17                	jne    c00010f6 <dlmalloc+0x4b>
c00010df:	85 ff                	test   edi,edi
c00010e1:	0f 85 05 03 00 00    	jne    c00013ec <dlmalloc+0x341>
c00010e7:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00010ec:	e8 7b fb ff ff       	call   c0000c6c <malloc_consolidate>
c00010f1:	e9 f6 02 00 00       	jmp    c00013ec <dlmalloc+0x341>
c00010f6:	39 f7                	cmp    edi,esi
c00010f8:	72 1f                	jb     c0001119 <dlmalloc+0x6e>
c00010fa:	89 f2                	mov    edx,esi
c00010fc:	c1 ea 03             	shr    edx,0x3
c00010ff:	83 ea 02             	sub    edx,0x2
c0001102:	8b 04 95 04 51 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdaefc]
c0001109:	85 c0                	test   eax,eax
c000110b:	74 0c                	je     c0001119 <dlmalloc+0x6e>
c000110d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001110:	89 0c 95 04 51 02 c0 	mov    DWORD PTR [edx*4-0x3ffdaefc],ecx
c0001117:	eb 30                	jmp    c0001149 <dlmalloc+0x9e>
c0001119:	89 f0                	mov    eax,esi
c000111b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001121:	77 2e                	ja     c0001151 <dlmalloc+0xa6>
c0001123:	c1 e8 03             	shr    eax,0x3
c0001126:	8d 14 c5 34 51 02 c0 	lea    edx,[eax*8-0x3ffdaecc]
c000112d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001131:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001134:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001137:	39 c3                	cmp    ebx,eax
c0001139:	74 2e                	je     c0001169 <dlmalloc+0xbe>
c000113b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000113e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001143:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001146:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001149:	83 c0 08             	add    eax,0x8
c000114c:	e9 e0 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001151:	e8 92 fa ff ff       	call   c0000be8 <largebin_index>
c0001156:	83 e7 02             	and    edi,0x2
c0001159:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000115d:	74 0a                	je     c0001169 <dlmalloc+0xbe>
c000115f:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001164:	e8 03 fb ff ff       	call   c0000c6c <malloc_consolidate>
c0001169:	8d 46 10             	lea    eax,[esi+0x10]
c000116c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001170:	8b 1d 40 51 02 c0    	mov    ebx,DWORD PTR ds:0xc0025140
c0001176:	81 fb 34 51 02 c0    	cmp    ebx,0xc0025134
c000117c:	0f 84 13 01 00 00    	je     c0001295 <dlmalloc+0x1ea>
c0001182:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001185:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001188:	83 e7 fc             	and    edi,0xfffffffc
c000118b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001191:	77 4c                	ja     c00011df <dlmalloc+0x134>
c0001193:	3d 34 51 02 c0       	cmp    eax,0xc0025134
c0001198:	75 45                	jne    c00011df <dlmalloc+0x134>
c000119a:	39 1d 30 51 02 c0    	cmp    DWORD PTR ds:0xc0025130,ebx
c00011a0:	75 3d                	jne    c00011df <dlmalloc+0x134>
c00011a2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011a6:	73 37                	jae    c00011df <dlmalloc+0x134>
c00011a8:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ab:	89 fa                	mov    edx,edi
c00011ad:	a3 3c 51 02 c0       	mov    ds:0xc002513c,eax
c00011b2:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c00011b7:	a3 30 51 02 c0       	mov    ds:0xc0025130,eax
c00011bc:	29 f2                	sub    edx,esi
c00011be:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c00011c5:	c7 40 0c 34 51 02 c0 	mov    DWORD PTR [eax+0xc],0xc0025134
c00011cc:	83 ce 01             	or     esi,0x1
c00011cf:	89 d1                	mov    ecx,edx
c00011d1:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00011d4:	83 c9 01             	or     ecx,0x1
c00011d7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00011da:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c00011dd:	eb 15                	jmp    c00011f4 <dlmalloc+0x149>
c00011df:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c00011e4:	39 fe                	cmp    esi,edi
c00011e6:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c00011ed:	75 0d                	jne    c00011fc <dlmalloc+0x151>
c00011ef:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00011f4:	8d 43 08             	lea    eax,[ebx+0x8]
c00011f7:	e9 35 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00011fc:	89 f8                	mov    eax,edi
c00011fe:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001204:	77 19                	ja     c000121f <dlmalloc+0x174>
c0001206:	c1 e8 03             	shr    eax,0x3
c0001209:	8d 14 00             	lea    edx,[eax+eax*1]
c000120c:	83 c2 0d             	add    edx,0xd
c000120f:	8d 2c 95 f8 50 02 c0 	lea    ebp,[edx*4-0x3ffdaf08]
c0001216:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c000121d:	eb 46                	jmp    c0001265 <dlmalloc+0x1ba>
c000121f:	e8 c4 f9 ff ff       	call   c0000be8 <largebin_index>
c0001224:	8d 14 00             	lea    edx,[eax+eax*1]
c0001227:	83 c2 0d             	add    edx,0xd
c000122a:	8d 0c 95 00 51 02 c0 	lea    ecx,[edx*4-0x3ffdaf00]
c0001231:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c0001238:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000123b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000123f:	89 d5                	mov    ebp,edx
c0001241:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001245:	74 1e                	je     c0001265 <dlmalloc+0x1ba>
c0001247:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000124a:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000124d:	77 12                	ja     c0001261 <dlmalloc+0x1b6>
c000124f:	83 cf 01             	or     edi,0x1
c0001252:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001255:	76 05                	jbe    c000125c <dlmalloc+0x1b1>
c0001257:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000125a:	eb f6                	jmp    c0001252 <dlmalloc+0x1a7>
c000125c:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000125f:	eb 04                	jmp    c0001265 <dlmalloc+0x1ba>
c0001261:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001265:	89 c7                	mov    edi,eax
c0001267:	88 c1                	mov    cl,al
c0001269:	c1 ff 05             	sar    edi,0x5
c000126c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001270:	bf 01 00 00 00       	mov    edi,0x1
c0001275:	d3 e7                	shl    edi,cl
c0001277:	89 f8                	mov    eax,edi
c0001279:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000127d:	09 04 bd 34 54 02 c0 	or     DWORD PTR [edi*4-0x3ffdabcc],eax
c0001284:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001287:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000128a:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000128d:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001290:	e9 db fe ff ff       	jmp    c0001170 <dlmalloc+0xc5>
c0001295:	81 fe ff 00 00 00    	cmp    esi,0xff
c000129b:	76 78                	jbe    c0001315 <dlmalloc+0x26a>
c000129d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012a1:	8d 04 c5 34 51 02 c0 	lea    eax,[eax*8-0x3ffdaecc]
c00012a8:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012ae:	39 ca                	cmp    edx,ecx
c00012b0:	74 63                	je     c0001315 <dlmalloc+0x26a>
c00012b2:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012b5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012b8:	83 e3 fc             	and    ebx,0xfffffffc
c00012bb:	39 de                	cmp    esi,ebx
c00012bd:	77 52                	ja     c0001311 <dlmalloc+0x266>
c00012bf:	89 df                	mov    edi,ebx
c00012c1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012c4:	29 f7                	sub    edi,esi
c00012c6:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00012c9:	01 d3                	add    ebx,edx
c00012cb:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00012ce:	83 ff 0f             	cmp    edi,0xf
c00012d1:	8d 42 08             	lea    eax,[edx+0x8]
c00012d4:	77 09                	ja     c00012df <dlmalloc+0x234>
c00012d6:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00012da:	e9 52 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00012df:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00012e2:	83 ce 01             	or     esi,0x1
c00012e5:	89 0d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,ecx
c00012eb:	89 0d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,ecx
c00012f1:	c7 41 08 34 51 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0025134
c00012f8:	c7 41 0c 34 51 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0025134
c00012ff:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001302:	89 fa                	mov    edx,edi
c0001304:	83 ca 01             	or     edx,0x1
c0001307:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000130a:	89 3b                	mov    DWORD PTR [ebx],edi
c000130c:	e9 20 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001311:	89 c2                	mov    edx,eax
c0001313:	eb 99                	jmp    c00012ae <dlmalloc+0x203>
c0001315:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001319:	b8 01 00 00 00       	mov    eax,0x1
c000131e:	41                   	inc    ecx
c000131f:	89 cb                	mov    ebx,ecx
c0001321:	8d 14 cd 2c 51 02 c0 	lea    edx,[ecx*8-0x3ffdaed4]
c0001328:	c1 eb 05             	shr    ebx,0x5
c000132b:	d3 e0                	shl    eax,cl
c000132d:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c0001334:	39 f8                	cmp    eax,edi
c0001336:	77 04                	ja     c000133c <dlmalloc+0x291>
c0001338:	85 c0                	test   eax,eax
c000133a:	75 26                	jne    c0001362 <dlmalloc+0x2b7>
c000133c:	43                   	inc    ebx
c000133d:	83 fb 02             	cmp    ebx,0x2
c0001340:	0f 87 a6 00 00 00    	ja     c00013ec <dlmalloc+0x341>
c0001346:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c000134d:	85 ff                	test   edi,edi
c000134f:	74 eb                	je     c000133c <dlmalloc+0x291>
c0001351:	89 d8                	mov    eax,ebx
c0001353:	c1 e0 06             	shl    eax,0x6
c0001356:	8d 14 85 2c 51 02 c0 	lea    edx,[eax*4-0x3ffdaed4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	85 f8                	test   eax,edi
c0001364:	75 07                	jne    c000136d <dlmalloc+0x2c2>
c0001366:	83 c2 08             	add    edx,0x8
c0001369:	01 c0                	add    eax,eax
c000136b:	eb f5                	jmp    c0001362 <dlmalloc+0x2b7>
c000136d:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001370:	39 ca                	cmp    edx,ecx
c0001372:	75 14                	jne    c0001388 <dlmalloc+0x2dd>
c0001374:	89 c1                	mov    ecx,eax
c0001376:	83 c2 08             	add    edx,0x8
c0001379:	f7 d1                	not    ecx
c000137b:	01 c0                	add    eax,eax
c000137d:	21 cf                	and    edi,ecx
c000137f:	89 3c 9d 34 54 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdabcc],edi
c0001386:	eb ac                	jmp    c0001334 <dlmalloc+0x289>
c0001388:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000138b:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000138e:	83 e0 fc             	and    eax,0xfffffffc
c0001391:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001394:	89 c3                	mov    ebx,eax
c0001396:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001399:	29 f3                	sub    ebx,esi
c000139b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000139e:	83 fb 0f             	cmp    ebx,0xf
c00013a1:	8d 41 08             	lea    eax,[ecx+0x8]
c00013a4:	77 09                	ja     c00013af <dlmalloc+0x304>
c00013a6:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013aa:	e9 82 00 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00013af:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013b2:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013b8:	89 3d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edi
c00013be:	89 3d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,edi
c00013c4:	c7 47 08 34 51 02 c0 	mov    DWORD PTR [edi+0x8],0xc0025134
c00013cb:	c7 47 0c 34 51 02 c0 	mov    DWORD PTR [edi+0xc],0xc0025134
c00013d2:	77 06                	ja     c00013da <dlmalloc+0x32f>
c00013d4:	89 3d 30 51 02 c0    	mov    DWORD PTR ds:0xc0025130,edi
c00013da:	83 ce 01             	or     esi,0x1
c00013dd:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00013e0:	89 d9                	mov    ecx,ebx
c00013e2:	83 c9 01             	or     ecx,0x1
c00013e5:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00013e8:	89 1a                	mov    DWORD PTR [edx],ebx
c00013ea:	eb 45                	jmp    c0001431 <dlmalloc+0x386>
c00013ec:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c00013f1:	8d 4e 10             	lea    ecx,[esi+0x10]
c00013f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00013f7:	83 e2 fc             	and    edx,0xfffffffc
c00013fa:	39 d1                	cmp    ecx,edx
c00013fc:	77 1e                	ja     c000141c <dlmalloc+0x371>
c00013fe:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001401:	89 f3                	mov    ebx,esi
c0001403:	89 0d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,ecx
c0001409:	83 cb 01             	or     ebx,0x1
c000140c:	29 f2                	sub    edx,esi
c000140e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001411:	83 ca 01             	or     edx,0x1
c0001414:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001417:	e9 2d fd ff ff       	jmp    c0001149 <dlmalloc+0x9e>
c000141c:	83 c4 1c             	add    esp,0x1c
c000141f:	89 f0                	mov    eax,esi
c0001421:	5b                   	pop    ebx
c0001422:	ba 00 51 02 c0       	mov    edx,0xc0025100
c0001427:	5e                   	pop    esi
c0001428:	5f                   	pop    edi
c0001429:	5d                   	pop    ebp
c000142a:	e9 19 fa ff ff       	jmp    c0000e48 <sYSMALLOc>
c000142f:	31 c0                	xor    eax,eax
c0001431:	83 c4 1c             	add    esp,0x1c
c0001434:	5b                   	pop    ebx
c0001435:	5e                   	pop    esi
c0001436:	5f                   	pop    edi
c0001437:	5d                   	pop    ebp
c0001438:	c3                   	ret    

c0001439 <iALLOc>:
c0001439:	55                   	push   ebp
c000143a:	89 c5                	mov    ebp,eax
c000143c:	57                   	push   edi
c000143d:	56                   	push   esi
c000143e:	53                   	push   ebx
c000143f:	83 ec 2c             	sub    esp,0x2c
c0001442:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001446:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000144a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000144e:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c0001455:	75 12                	jne    c0001469 <iALLOc+0x30>
c0001457:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000145b:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001460:	e8 07 f8 ff ff       	call   c0000c6c <malloc_consolidate>
c0001465:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001469:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000146e:	74 12                	je     c0001482 <iALLOc+0x49>
c0001470:	85 ed                	test   ebp,ebp
c0001472:	0f 84 64 01 00 00    	je     c00015dc <iALLOc+0x1a3>
c0001478:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001480:	eb 33                	jmp    c00014b5 <iALLOc+0x7c>
c0001482:	85 ed                	test   ebp,ebp
c0001484:	75 14                	jne    c000149a <iALLOc+0x61>
c0001486:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000148e:	83 c4 2c             	add    esp,0x2c
c0001491:	5b                   	pop    ebx
c0001492:	5e                   	pop    esi
c0001493:	5f                   	pop    edi
c0001494:	5d                   	pop    ebp
c0001495:	e9 11 fc ff ff       	jmp    c00010ab <dlmalloc>
c000149a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014a1:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014a9:	83 f8 0f             	cmp    eax,0xf
c00014ac:	76 07                	jbe    c00014b5 <iALLOc+0x7c>
c00014ae:	83 e0 f8             	and    eax,0xfffffff8
c00014b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014b5:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014ba:	75 09                	jne    c00014c5 <iALLOc+0x8c>
c00014bc:	89 d0                	mov    eax,edx
c00014be:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014c1:	31 f6                	xor    esi,esi
c00014c3:	eb 3b                	jmp    c0001500 <iALLOc+0xc7>
c00014c5:	8b 02                	mov    eax,DWORD PTR [edx]
c00014c7:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00014cf:	83 c0 0b             	add    eax,0xb
c00014d2:	83 f8 0f             	cmp    eax,0xf
c00014d5:	76 07                	jbe    c00014de <iALLOc+0xa5>
c00014d7:	83 e0 f8             	and    eax,0xfffffff8
c00014da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00014de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00014e2:	0f af f5             	imul   esi,ebp
c00014e5:	eb 25                	jmp    c000150c <iALLOc+0xd3>
c00014e7:	8b 18                	mov    ebx,DWORD PTR [eax]
c00014e9:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00014ec:	bb 10 00 00 00       	mov    ebx,0x10
c00014f1:	83 f9 0f             	cmp    ecx,0xf
c00014f4:	76 05                	jbe    c00014fb <iALLOc+0xc2>
c00014f6:	83 e1 f8             	and    ecx,0xfffffff8
c00014f9:	89 cb                	mov    ebx,ecx
c00014fb:	01 de                	add    esi,ebx
c00014fd:	83 c0 04             	add    eax,0x4
c0001500:	39 c7                	cmp    edi,eax
c0001502:	75 e3                	jne    c00014e7 <iALLOc+0xae>
c0001504:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000150c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001510:	8b 1d 54 54 02 c0    	mov    ebx,DWORD PTR ds:0xc0025454
c0001516:	83 ec 0c             	sub    esp,0xc
c0001519:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c0001523:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001527:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000152b:	50                   	push   eax
c000152c:	e8 7a fb ff ff       	call   c00010ab <dlmalloc>
c0001531:	83 c4 10             	add    esp,0x10
c0001534:	89 1d 54 54 02 c0    	mov    DWORD PTR ds:0xc0025454,ebx
c000153a:	85 c0                	test   eax,eax
c000153c:	0f 84 92 00 00 00    	je     c00015d4 <iALLOc+0x19b>
c0001542:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001545:	8d 78 f8             	lea    edi,[eax-0x8]
c0001548:	83 e3 fc             	and    ebx,0xfffffffc
c000154b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000154f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001554:	74 1e                	je     c0001574 <iALLOc+0x13b>
c0001556:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000155a:	89 d9                	mov    ecx,ebx
c000155c:	52                   	push   edx
c000155d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001561:	83 e9 04             	sub    ecx,0x4
c0001564:	51                   	push   ecx
c0001565:	6a 00                	push   0x0
c0001567:	50                   	push   eax
c0001568:	e8 83 ef ff ff       	call   c00004f0 <memset>
c000156d:	83 c4 10             	add    esp,0x10
c0001570:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001574:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001579:	75 14                	jne    c000158f <iALLOc+0x156>
c000157b:	8d 04 37             	lea    eax,[edi+esi*1]
c000157e:	29 f3                	sub    ebx,esi
c0001580:	8d 48 08             	lea    ecx,[eax+0x8]
c0001583:	83 cb 01             	or     ebx,0x1
c0001586:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000158a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000158d:	89 f3                	mov    ebx,esi
c000158f:	31 c0                	xor    eax,eax
c0001591:	4d                   	dec    ebp
c0001592:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001595:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001599:	39 c5                	cmp    ebp,eax
c000159b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000159e:	74 2c                	je     c00015cc <iALLOc+0x193>
c00015a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015a4:	85 c9                	test   ecx,ecx
c00015a6:	75 15                	jne    c00015bd <iALLOc+0x184>
c00015a8:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ab:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015ae:	b9 10 00 00 00       	mov    ecx,0x10
c00015b3:	83 fe 0f             	cmp    esi,0xf
c00015b6:	76 05                	jbe    c00015bd <iALLOc+0x184>
c00015b8:	83 e6 f8             	and    esi,0xfffffff8
c00015bb:	89 f1                	mov    ecx,esi
c00015bd:	89 ce                	mov    esi,ecx
c00015bf:	29 cb                	sub    ebx,ecx
c00015c1:	83 ce 01             	or     esi,0x1
c00015c4:	40                   	inc    eax
c00015c5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00015c8:	01 cf                	add    edi,ecx
c00015ca:	eb c6                	jmp    c0001592 <iALLOc+0x159>
c00015cc:	83 cb 01             	or     ebx,0x1
c00015cf:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00015d2:	eb 08                	jmp    c00015dc <iALLOc+0x1a3>
c00015d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00015dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015e0:	83 c4 2c             	add    esp,0x2c
c00015e3:	5b                   	pop    ebx
c00015e4:	5e                   	pop    esi
c00015e5:	5f                   	pop    edi
c00015e6:	5d                   	pop    ebp
c00015e7:	c3                   	ret    

c00015e8 <dlrealloc>:
c00015e8:	55                   	push   ebp
c00015e9:	57                   	push   edi
c00015ea:	56                   	push   esi
c00015eb:	53                   	push   ebx
c00015ec:	83 ec 1c             	sub    esp,0x1c
c00015ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00015f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00015f7:	85 db                	test   ebx,ebx
c00015f9:	75 10                	jne    c000160b <dlrealloc+0x23>
c00015fb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00015ff:	83 c4 1c             	add    esp,0x1c
c0001602:	5b                   	pop    ebx
c0001603:	5e                   	pop    esi
c0001604:	5f                   	pop    edi
c0001605:	5d                   	pop    ebp
c0001606:	e9 a0 fa ff ff       	jmp    c00010ab <dlmalloc>
c000160b:	83 f8 df             	cmp    eax,0xffffffdf
c000160e:	76 07                	jbe    c0001617 <dlrealloc+0x2f>
c0001610:	31 db                	xor    ebx,ebx
c0001612:	e9 6a 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001617:	83 c0 0b             	add    eax,0xb
c000161a:	bd 10 00 00 00       	mov    ebp,0x10
c000161f:	83 f8 0f             	cmp    eax,0xf
c0001622:	76 05                	jbe    c0001629 <dlrealloc+0x41>
c0001624:	83 e0 f8             	and    eax,0xfffffff8
c0001627:	89 c5                	mov    ebp,eax
c0001629:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000162c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000162f:	89 c6                	mov    esi,eax
c0001631:	83 e6 fc             	and    esi,0xfffffffc
c0001634:	a8 02                	test   al,0x2
c0001636:	75 d8                	jne    c0001610 <dlrealloc+0x28>
c0001638:	39 f5                	cmp    ebp,esi
c000163a:	0f 86 04 01 00 00    	jbe    c0001744 <dlrealloc+0x15c>
c0001640:	8d 14 37             	lea    edx,[edi+esi*1]
c0001643:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001646:	39 15 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,edx
c000164c:	75 33                	jne    c0001681 <dlrealloc+0x99>
c000164e:	83 e1 fc             	and    ecx,0xfffffffc
c0001651:	01 f1                	add    ecx,esi
c0001653:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001657:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000165a:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000165e:	77 49                	ja     c00016a9 <dlrealloc+0xc1>
c0001660:	01 ef                	add    edi,ebp
c0001662:	83 e0 01             	and    eax,0x1
c0001665:	09 e8                	or     eax,ebp
c0001667:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c000166a:	89 3d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edi
c0001670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001674:	29 e8                	sub    eax,ebp
c0001676:	83 c8 01             	or     eax,0x1
c0001679:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000167c:	e9 00 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001681:	89 c8                	mov    eax,ecx
c0001683:	83 e0 fe             	and    eax,0xfffffffe
c0001686:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000168b:	75 1c                	jne    c00016a9 <dlrealloc+0xc1>
c000168d:	83 e1 fc             	and    ecx,0xfffffffc
c0001690:	01 f1                	add    ecx,esi
c0001692:	39 cd                	cmp    ebp,ecx
c0001694:	77 13                	ja     c00016a9 <dlrealloc+0xc1>
c0001696:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001699:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000169c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000169f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016a2:	89 ce                	mov    esi,ecx
c00016a4:	e9 9b 00 00 00       	jmp    c0001744 <dlrealloc+0x15c>
c00016a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016ad:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016b0:	83 ec 0c             	sub    esp,0xc
c00016b3:	50                   	push   eax
c00016b4:	e8 f2 f9 ff ff       	call   c00010ab <dlmalloc>
c00016b9:	83 c4 10             	add    esp,0x10
c00016bc:	85 c0                	test   eax,eax
c00016be:	0f 84 4c ff ff ff    	je     c0001610 <dlrealloc+0x28>
c00016c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00016c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00016cb:	39 ca                	cmp    edx,ecx
c00016cd:	75 0a                	jne    c00016d9 <dlrealloc+0xf1>
c00016cf:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00016d2:	83 e0 fc             	and    eax,0xfffffffc
c00016d5:	01 c6                	add    esi,eax
c00016d7:	eb 6b                	jmp    c0001744 <dlrealloc+0x15c>
c00016d9:	8d 4e fc             	lea    ecx,[esi-0x4]
c00016dc:	83 f9 27             	cmp    ecx,0x27
c00016df:	76 08                	jbe    c00016e9 <dlrealloc+0x101>
c00016e1:	89 de                	mov    esi,ebx
c00016e3:	89 c7                	mov    edi,eax
c00016e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00016e7:	eb 43                	jmp    c000172c <dlrealloc+0x144>
c00016e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00016eb:	83 f9 13             	cmp    ecx,0x13
c00016ee:	89 10                	mov    DWORD PTR [eax],edx
c00016f0:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00016f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00016f6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00016f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00016fc:	76 2e                	jbe    c000172c <dlrealloc+0x144>
c00016fe:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001701:	83 f9 1b             	cmp    ecx,0x1b
c0001704:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001707:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000170a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000170d:	76 1d                	jbe    c000172c <dlrealloc+0x144>
c000170f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001712:	83 f9 23             	cmp    ecx,0x23
c0001715:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001718:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000171b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000171e:	76 0c                	jbe    c000172c <dlrealloc+0x144>
c0001720:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001723:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001726:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001729:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000172c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001730:	83 ec 0c             	sub    esp,0xc
c0001733:	53                   	push   ebx
c0001734:	e8 1a f6 ff ff       	call   c0000d53 <dlfree>
c0001739:	83 c4 10             	add    esp,0x10
c000173c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001740:	89 c3                	mov    ebx,eax
c0001742:	eb 3d                	jmp    c0001781 <dlrealloc+0x199>
c0001744:	89 f2                	mov    edx,esi
c0001746:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001749:	29 ea                	sub    edx,ebp
c000174b:	83 e1 01             	and    ecx,0x1
c000174e:	8d 04 37             	lea    eax,[edi+esi*1]
c0001751:	83 fa 0f             	cmp    edx,0xf
c0001754:	77 0b                	ja     c0001761 <dlrealloc+0x179>
c0001756:	09 ce                	or     esi,ecx
c0001758:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000175b:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000175f:	eb 20                	jmp    c0001781 <dlrealloc+0x199>
c0001761:	01 ef                	add    edi,ebp
c0001763:	83 ec 0c             	sub    esp,0xc
c0001766:	09 cd                	or     ebp,ecx
c0001768:	83 ca 01             	or     edx,0x1
c000176b:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000176e:	83 c7 08             	add    edi,0x8
c0001771:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001774:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001778:	57                   	push   edi
c0001779:	e8 d5 f5 ff ff       	call   c0000d53 <dlfree>
c000177e:	83 c4 10             	add    esp,0x10
c0001781:	83 c4 1c             	add    esp,0x1c
c0001784:	89 d8                	mov    eax,ebx
c0001786:	5b                   	pop    ebx
c0001787:	5e                   	pop    esi
c0001788:	5f                   	pop    edi
c0001789:	5d                   	pop    ebp
c000178a:	c3                   	ret    

c000178b <dlmemalign>:
c000178b:	55                   	push   ebp
c000178c:	57                   	push   edi
c000178d:	56                   	push   esi
c000178e:	53                   	push   ebx
c000178f:	83 ec 0c             	sub    esp,0xc
c0001792:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001796:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000179a:	83 fa 08             	cmp    edx,0x8
c000179d:	77 10                	ja     c00017af <dlmemalign+0x24>
c000179f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017a3:	83 c4 0c             	add    esp,0xc
c00017a6:	5b                   	pop    ebx
c00017a7:	5e                   	pop    esi
c00017a8:	5f                   	pop    edi
c00017a9:	5d                   	pop    ebp
c00017aa:	e9 fc f8 ff ff       	jmp    c00010ab <dlmalloc>
c00017af:	bf 10 00 00 00       	mov    edi,0x10
c00017b4:	83 fa 0f             	cmp    edx,0xf
c00017b7:	76 13                	jbe    c00017cc <dlmemalign+0x41>
c00017b9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017bc:	85 d1                	test   ecx,edx
c00017be:	75 04                	jne    c00017c4 <dlmemalign+0x39>
c00017c0:	89 d7                	mov    edi,edx
c00017c2:	eb 08                	jmp    c00017cc <dlmemalign+0x41>
c00017c4:	39 d7                	cmp    edi,edx
c00017c6:	73 04                	jae    c00017cc <dlmemalign+0x41>
c00017c8:	01 ff                	add    edi,edi
c00017ca:	eb f8                	jmp    c00017c4 <dlmemalign+0x39>
c00017cc:	83 f8 df             	cmp    eax,0xffffffdf
c00017cf:	76 07                	jbe    c00017d8 <dlmemalign+0x4d>
c00017d1:	31 c0                	xor    eax,eax
c00017d3:	e9 ce 00 00 00       	jmp    c00018a6 <dlmemalign+0x11b>
c00017d8:	83 c0 0b             	add    eax,0xb
c00017db:	bd 10 00 00 00       	mov    ebp,0x10
c00017e0:	83 f8 0f             	cmp    eax,0xf
c00017e3:	76 05                	jbe    c00017ea <dlmemalign+0x5f>
c00017e5:	83 e0 f8             	and    eax,0xfffffff8
c00017e8:	89 c5                	mov    ebp,eax
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00017f1:	50                   	push   eax
c00017f2:	e8 b4 f8 ff ff       	call   c00010ab <dlmalloc>
c00017f7:	83 c4 10             	add    esp,0x10
c00017fa:	89 c1                	mov    ecx,eax
c00017fc:	85 c0                	test   eax,eax
c00017fe:	74 d1                	je     c00017d1 <dlmemalign+0x46>
c0001800:	31 d2                	xor    edx,edx
c0001802:	8d 70 f8             	lea    esi,[eax-0x8]
c0001805:	f7 f7                	div    edi
c0001807:	85 d2                	test   edx,edx
c0001809:	74 62                	je     c000186d <dlmemalign+0xe2>
c000180b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000180f:	89 f8                	mov    eax,edi
c0001811:	f7 d8                	neg    eax
c0001813:	21 c3                	and    ebx,eax
c0001815:	83 eb 08             	sub    ebx,0x8
c0001818:	89 d8                	mov    eax,ebx
c000181a:	29 f0                	sub    eax,esi
c000181c:	83 f8 0f             	cmp    eax,0xf
c000181f:	77 02                	ja     c0001823 <dlmemalign+0x98>
c0001821:	01 fb                	add    ebx,edi
c0001823:	89 d8                	mov    eax,ebx
c0001825:	29 f0                	sub    eax,esi
c0001827:	89 c6                	mov    esi,eax
c0001829:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000182c:	89 c2                	mov    edx,eax
c000182e:	83 e2 fc             	and    edx,0xfffffffc
c0001831:	29 f2                	sub    edx,esi
c0001833:	a8 02                	test   al,0x2
c0001835:	74 10                	je     c0001847 <dlmemalign+0xbc>
c0001837:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000183a:	83 ca 02             	or     edx,0x2
c000183d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001840:	89 33                	mov    DWORD PTR [ebx],esi
c0001842:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001845:	eb 5f                	jmp    c00018a6 <dlmemalign+0x11b>
c0001847:	83 ec 0c             	sub    esp,0xc
c000184a:	89 d0                	mov    eax,edx
c000184c:	83 c8 01             	or     eax,0x1
c000184f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001852:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001857:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000185a:	83 e0 01             	and    eax,0x1
c000185d:	09 f0                	or     eax,esi
c000185f:	89 de                	mov    esi,ebx
c0001861:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001864:	51                   	push   ecx
c0001865:	e8 e9 f4 ff ff       	call   c0000d53 <dlfree>
c000186a:	83 c4 10             	add    esp,0x10
c000186d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001870:	a8 02                	test   al,0x2
c0001872:	75 2f                	jne    c00018a3 <dlmemalign+0x118>
c0001874:	83 e0 fc             	and    eax,0xfffffffc
c0001877:	8d 55 10             	lea    edx,[ebp+0x10]
c000187a:	39 c2                	cmp    edx,eax
c000187c:	73 25                	jae    c00018a3 <dlmemalign+0x118>
c000187e:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001881:	83 ec 0c             	sub    esp,0xc
c0001884:	29 e8                	sub    eax,ebp
c0001886:	83 c2 08             	add    edx,0x8
c0001889:	83 c8 01             	or     eax,0x1
c000188c:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000188f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001892:	83 e0 01             	and    eax,0x1
c0001895:	09 c5                	or     ebp,eax
c0001897:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000189a:	52                   	push   edx
c000189b:	e8 b3 f4 ff ff       	call   c0000d53 <dlfree>
c00018a0:	83 c4 10             	add    esp,0x10
c00018a3:	8d 46 08             	lea    eax,[esi+0x8]
c00018a6:	83 c4 0c             	add    esp,0xc
c00018a9:	5b                   	pop    ebx
c00018aa:	5e                   	pop    esi
c00018ab:	5f                   	pop    edi
c00018ac:	5d                   	pop    ebp
c00018ad:	c3                   	ret    

c00018ae <dlcalloc>:
c00018ae:	53                   	push   ebx
c00018af:	83 ec 14             	sub    esp,0x14
c00018b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018b6:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018bb:	50                   	push   eax
c00018bc:	e8 ea f7 ff ff       	call   c00010ab <dlmalloc>
c00018c1:	83 c4 10             	add    esp,0x10
c00018c4:	89 c3                	mov    ebx,eax
c00018c6:	85 c0                	test   eax,eax
c00018c8:	74 77                	je     c0001941 <dlcalloc+0x93>
c00018ca:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00018cd:	89 d0                	mov    eax,edx
c00018cf:	83 e0 fc             	and    eax,0xfffffffc
c00018d2:	80 e2 02             	and    dl,0x2
c00018d5:	75 5a                	jne    c0001931 <dlcalloc+0x83>
c00018d7:	83 e8 04             	sub    eax,0x4
c00018da:	83 f8 27             	cmp    eax,0x27
c00018dd:	76 03                	jbe    c00018e2 <dlcalloc+0x34>
c00018df:	51                   	push   ecx
c00018e0:	eb 53                	jmp    c0001935 <dlcalloc+0x87>
c00018e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00018e8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00018ef:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00018f6:	83 f8 13             	cmp    eax,0x13
c00018f9:	76 46                	jbe    c0001941 <dlcalloc+0x93>
c00018fb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001902:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001909:	83 f8 1b             	cmp    eax,0x1b
c000190c:	76 33                	jbe    c0001941 <dlcalloc+0x93>
c000190e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001915:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000191c:	83 f8 23             	cmp    eax,0x23
c000191f:	76 20                	jbe    c0001941 <dlcalloc+0x93>
c0001921:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001928:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000192f:	eb 10                	jmp    c0001941 <dlcalloc+0x93>
c0001931:	83 e8 08             	sub    eax,0x8
c0001934:	52                   	push   edx
c0001935:	50                   	push   eax
c0001936:	6a 00                	push   0x0
c0001938:	53                   	push   ebx
c0001939:	e8 b2 eb ff ff       	call   c00004f0 <memset>
c000193e:	83 c4 10             	add    esp,0x10
c0001941:	89 d8                	mov    eax,ebx
c0001943:	83 c4 08             	add    esp,0x8
c0001946:	5b                   	pop    ebx
c0001947:	c3                   	ret    

c0001948 <dlcfree>:
c0001948:	e9 06 f4 ff ff       	jmp    c0000d53 <dlfree>

c000194d <dlindependent_calloc>:
c000194d:	83 ec 28             	sub    esp,0x28
c0001950:	b9 03 00 00 00       	mov    ecx,0x3
c0001955:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001959:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000195d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001961:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001965:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001969:	e8 cb fa ff ff       	call   c0001439 <iALLOc>
c000196e:	83 c4 2c             	add    esp,0x2c
c0001971:	c3                   	ret    

c0001972 <dlindependent_comalloc>:
c0001972:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000197a:	31 c9                	xor    ecx,ecx
c000197c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001980:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001984:	e9 b0 fa ff ff       	jmp    c0001439 <iALLOc>

c0001989 <dlvalloc>:
c0001989:	83 ec 0c             	sub    esp,0xc
c000198c:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c0001993:	75 0a                	jne    c000199f <dlvalloc+0x16>
c0001995:	b8 00 51 02 c0       	mov    eax,0xc0025100
c000199a:	e8 cd f2 ff ff       	call   c0000c6c <malloc_consolidate>
c000199f:	50                   	push   eax
c00019a0:	50                   	push   eax
c00019a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019a5:	ff 35 5c 54 02 c0    	push   DWORD PTR ds:0xc002545c
c00019ab:	e8 db fd ff ff       	call   c000178b <dlmemalign>
c00019b0:	83 c4 1c             	add    esp,0x1c
c00019b3:	c3                   	ret    

c00019b4 <dlpvalloc>:
c00019b4:	83 ec 0c             	sub    esp,0xc
c00019b7:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c00019be:	75 0a                	jne    c00019ca <dlpvalloc+0x16>
c00019c0:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019c5:	e8 a2 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019ca:	a1 5c 54 02 c0       	mov    eax,ds:0xc002545c
c00019cf:	89 c1                	mov    ecx,eax
c00019d1:	52                   	push   edx
c00019d2:	f7 d9                	neg    ecx
c00019d4:	52                   	push   edx
c00019d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00019d9:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00019dd:	21 ca                	and    edx,ecx
c00019df:	52                   	push   edx
c00019e0:	50                   	push   eax
c00019e1:	e8 a5 fd ff ff       	call   c000178b <dlmemalign>
c00019e6:	83 c4 1c             	add    esp,0x1c
c00019e9:	c3                   	ret    

c00019ea <dlmalloc_trim>:
c00019ea:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019ef:	e8 78 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019f4:	31 c0                	xor    eax,eax
c00019f6:	c3                   	ret    

c00019f7 <dlmalloc_usable_size>:
c00019f7:	53                   	push   ebx
c00019f8:	31 c0                	xor    eax,eax
c00019fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00019fe:	85 c9                	test   ecx,ecx
c0001a00:	74 24                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a02:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a05:	f6 c2 02             	test   dl,0x2
c0001a08:	74 08                	je     c0001a12 <dlmalloc_usable_size+0x1b>
c0001a0a:	83 e2 fc             	and    edx,0xfffffffc
c0001a0d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a10:	eb 14                	jmp    c0001a26 <dlmalloc_usable_size+0x2f>
c0001a12:	89 d3                	mov    ebx,edx
c0001a14:	31 c0                	xor    eax,eax
c0001a16:	83 e3 fe             	and    ebx,0xfffffffe
c0001a19:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a1e:	74 06                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a20:	83 e2 fc             	and    edx,0xfffffffc
c0001a23:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a26:	5b                   	pop    ebx
c0001a27:	c3                   	ret    

c0001a28 <dlmallinfo>:
c0001a28:	55                   	push   ebp
c0001a29:	57                   	push   edi
c0001a2a:	56                   	push   esi
c0001a2b:	53                   	push   ebx
c0001a2c:	83 ec 08             	sub    esp,0x8
c0001a2f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a33:	83 3d 2c 51 02 c0 00 	cmp    DWORD PTR ds:0xc002512c,0x0
c0001a3a:	75 0a                	jne    c0001a46 <dlmallinfo+0x1e>
c0001a3c:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001a41:	e8 26 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c0001a46:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c0001a4b:	31 ed                	xor    ebp,ebp
c0001a4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a50:	31 c9                	xor    ecx,ecx
c0001a52:	83 e0 fc             	and    eax,0xfffffffc
c0001a55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a59:	31 c0                	xor    eax,eax
c0001a5b:	8b 14 85 04 51 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaefc]
c0001a62:	85 d2                	test   edx,edx
c0001a64:	74 0e                	je     c0001a74 <dlmallinfo+0x4c>
c0001a66:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001a69:	45                   	inc    ebp
c0001a6a:	83 e6 fc             	and    esi,0xfffffffc
c0001a6d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001a70:	01 f1                	add    ecx,esi
c0001a72:	eb ee                	jmp    c0001a62 <dlmallinfo+0x3a>
c0001a74:	40                   	inc    eax
c0001a75:	83 f8 0a             	cmp    eax,0xa
c0001a78:	75 e1                	jne    c0001a5b <dlmallinfo+0x33>
c0001a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a7e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a85:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a88:	b8 34 51 02 c0       	mov    eax,0xc0025134
c0001a8d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a90:	39 f0                	cmp    eax,esi
c0001a92:	74 10                	je     c0001aa4 <dlmallinfo+0x7c>
c0001a94:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a97:	ff 04 24             	inc    DWORD PTR [esp]
c0001a9a:	83 e7 fc             	and    edi,0xfffffffc
c0001a9d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001aa0:	01 fa                	add    edx,edi
c0001aa2:	eb ec                	jmp    c0001a90 <dlmallinfo+0x68>
c0001aa4:	83 c0 08             	add    eax,0x8
c0001aa7:	3d 2c 54 02 c0       	cmp    eax,0xc002542c
c0001aac:	75 df                	jne    c0001a8d <dlmallinfo+0x65>
c0001aae:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001ab1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001ab4:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001ab7:	a1 68 54 02 c0       	mov    eax,ds:0xc0025468
c0001abc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001abf:	89 03                	mov    DWORD PTR [ebx],eax
c0001ac1:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001ac4:	8b 35 50 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025450
c0001aca:	29 d0                	sub    eax,edx
c0001acc:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001acf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ad2:	8b 35 64 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025464
c0001ad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001adc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001adf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001ae2:	8b 35 74 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025474
c0001ae8:	89 d8                	mov    eax,ebx
c0001aea:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001aed:	83 c4 08             	add    esp,0x8
c0001af0:	5b                   	pop    ebx
c0001af1:	5e                   	pop    esi
c0001af2:	5f                   	pop    edi
c0001af3:	5d                   	pop    ebp
c0001af4:	c2 04 00             	ret    0x4

c0001af7 <dlmalloc_stats>:
c0001af7:	83 ec 30             	sub    esp,0x30
c0001afa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001afe:	50                   	push   eax
c0001aff:	e8 24 ff ff ff       	call   c0001a28 <dlmallinfo>
c0001b04:	83 c4 30             	add    esp,0x30
c0001b07:	c3                   	ret    

c0001b08 <dlmallopt>:
c0001b08:	56                   	push   esi
c0001b09:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001b0e:	53                   	push   ebx
c0001b0f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b17:	e8 50 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b1c:	8d 46 04             	lea    eax,[esi+0x4]
c0001b1f:	83 f8 05             	cmp    eax,0x5
c0001b22:	77 67                	ja     c0001b8b <dlmallopt+0x83>
c0001b24:	ff 24 85 84 ff 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe007c]
c0001b2b:	83 fb 50             	cmp    ebx,0x50
c0001b2e:	77 5b                	ja     c0001b8b <dlmallopt+0x83>
c0001b30:	ba 08 00 00 00       	mov    edx,0x8
c0001b35:	85 db                	test   ebx,ebx
c0001b37:	74 12                	je     c0001b4b <dlmallopt+0x43>
c0001b39:	83 c3 0b             	add    ebx,0xb
c0001b3c:	ba 10 00 00 00       	mov    edx,0x10
c0001b41:	83 fb 0f             	cmp    ebx,0xf
c0001b44:	76 05                	jbe    c0001b4b <dlmallopt+0x43>
c0001b46:	89 da                	mov    edx,ebx
c0001b48:	83 e2 f8             	and    edx,0xfffffff8
c0001b4b:	a1 00 51 02 c0       	mov    eax,ds:0xc0025100
c0001b50:	83 e0 03             	and    eax,0x3
c0001b53:	09 d0                	or     eax,edx
c0001b55:	a3 00 51 02 c0       	mov    ds:0xc0025100,eax
c0001b5a:	eb 31                	jmp    c0001b8d <dlmallopt+0x85>
c0001b5c:	89 1d 44 54 02 c0    	mov    DWORD PTR ds:0xc0025444,ebx
c0001b62:	eb 06                	jmp    c0001b6a <dlmallopt+0x62>
c0001b64:	89 1d 48 54 02 c0    	mov    DWORD PTR ds:0xc0025448,ebx
c0001b6a:	be 01 00 00 00       	mov    esi,0x1
c0001b6f:	eb 1c                	jmp    c0001b8d <dlmallopt+0x85>
c0001b71:	89 1d 4c 54 02 c0    	mov    DWORD PTR ds:0xc002544c,ebx
c0001b77:	eb f1                	jmp    c0001b6a <dlmallopt+0x62>
c0001b79:	31 f6                	xor    esi,esi
c0001b7b:	85 db                	test   ebx,ebx
c0001b7d:	75 0e                	jne    c0001b8d <dlmallopt+0x85>
c0001b7f:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c0001b89:	eb df                	jmp    c0001b6a <dlmallopt+0x62>
c0001b8b:	31 f6                	xor    esi,esi
c0001b8d:	89 f0                	mov    eax,esi
c0001b8f:	5b                   	pop    ebx
c0001b90:	5e                   	pop    esi
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax

c0001b94 <isblank>:
c0001b94:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b99:	74 09                	je     c0001ba4 <isblank+0x10>
c0001b9b:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ba0:	75 0a                	jne    c0001bac <isblank+0x18>
c0001ba2:	66 90                	xchg   ax,ax
c0001ba4:	b8 01 00 00 00       	mov    eax,0x1
c0001ba9:	c3                   	ret    
c0001baa:	66 90                	xchg   ax,ax
c0001bac:	b8 00 00 00 00       	mov    eax,0x0
c0001bb1:	c3                   	ret    
c0001bb2:	66 90                	xchg   ax,ax

c0001bb4 <iscntrl>:
c0001bb4:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bb9:	7e 09                	jle    c0001bc4 <iscntrl+0x10>
c0001bbb:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bc0:	75 0a                	jne    c0001bcc <iscntrl+0x18>
c0001bc2:	66 90                	xchg   ax,ax
c0001bc4:	b8 01 00 00 00       	mov    eax,0x1
c0001bc9:	c3                   	ret    
c0001bca:	66 90                	xchg   ax,ax
c0001bcc:	b8 00 00 00 00       	mov    eax,0x0
c0001bd1:	c3                   	ret    
c0001bd2:	66 90                	xchg   ax,ax

c0001bd4 <isdigit>:
c0001bd4:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001bd9:	7e 0d                	jle    c0001be8 <isdigit+0x14>
c0001bdb:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001be0:	7f 06                	jg     c0001be8 <isdigit+0x14>
c0001be2:	b8 01 00 00 00       	mov    eax,0x1
c0001be7:	c3                   	ret    
c0001be8:	b8 00 00 00 00       	mov    eax,0x0
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax

c0001bf0 <islower>:
c0001bf0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001bf5:	7e 0d                	jle    c0001c04 <islower+0x14>
c0001bf7:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001bfc:	7f 06                	jg     c0001c04 <islower+0x14>
c0001bfe:	b8 01 00 00 00       	mov    eax,0x1
c0001c03:	c3                   	ret    
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isspace>:
c0001c0c:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c11:	7c 19                	jl     c0001c2c <isspace+0x20>
c0001c13:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c18:	7e 0a                	jle    c0001c24 <isspace+0x18>
c0001c1a:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c1f:	75 0b                	jne    c0001c2c <isspace+0x20>
c0001c21:	8d 76 00             	lea    esi,[esi+0x0]
c0001c24:	b8 01 00 00 00       	mov    eax,0x1
c0001c29:	c3                   	ret    
c0001c2a:	66 90                	xchg   ax,ax
c0001c2c:	b8 00 00 00 00       	mov    eax,0x0
c0001c31:	c3                   	ret    
c0001c32:	66 90                	xchg   ax,ax

c0001c34 <isupper>:
c0001c34:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c39:	7e 0d                	jle    c0001c48 <isupper+0x14>
c0001c3b:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c40:	7f 06                	jg     c0001c48 <isupper+0x14>
c0001c42:	b8 01 00 00 00       	mov    eax,0x1
c0001c47:	c3                   	ret    
c0001c48:	b8 00 00 00 00       	mov    eax,0x0
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax

c0001c50 <isalpha>:
c0001c50:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c54:	e8 db ff ff ff       	call   c0001c34 <isupper>
c0001c59:	83 c4 04             	add    esp,0x4
c0001c5c:	85 c0                	test   eax,eax
c0001c5e:	75 10                	jne    c0001c70 <isalpha+0x20>
c0001c60:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c64:	e8 87 ff ff ff       	call   c0001bf0 <islower>
c0001c69:	83 c4 04             	add    esp,0x4
c0001c6c:	85 c0                	test   eax,eax
c0001c6e:	74 08                	je     c0001c78 <isalpha+0x28>
c0001c70:	b8 01 00 00 00       	mov    eax,0x1
c0001c75:	c3                   	ret    
c0001c76:	66 90                	xchg   ax,ax
c0001c78:	b8 00 00 00 00       	mov    eax,0x0
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax

c0001c80 <isalnum>:
c0001c80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c84:	e8 c7 ff ff ff       	call   c0001c50 <isalpha>
c0001c89:	83 c4 04             	add    esp,0x4
c0001c8c:	85 c0                	test   eax,eax
c0001c8e:	75 10                	jne    c0001ca0 <isalnum+0x20>
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 3b ff ff ff       	call   c0001bd4 <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	74 08                	je     c0001ca8 <isalnum+0x28>
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <ispunct>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 c7 ff ff ff       	call   c0001c80 <isalnum>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 28                	jne    c0001ce8 <ispunct+0x38>
c0001cc0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cc4:	e8 43 ff ff ff       	call   c0001c0c <isspace>
c0001cc9:	83 c4 04             	add    esp,0x4
c0001ccc:	85 c0                	test   eax,eax
c0001cce:	75 18                	jne    c0001ce8 <ispunct+0x38>
c0001cd0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cd4:	e8 db fe ff ff       	call   c0001bb4 <iscntrl>
c0001cd9:	83 c4 04             	add    esp,0x4
c0001cdc:	85 c0                	test   eax,eax
c0001cde:	75 08                	jne    c0001ce8 <ispunct+0x38>
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    
c0001cee:	66 90                	xchg   ax,ax

c0001cf0 <isgraph>:
c0001cf0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cf4:	e8 87 ff ff ff       	call   c0001c80 <isalnum>
c0001cf9:	83 c4 04             	add    esp,0x4
c0001cfc:	85 c0                	test   eax,eax
c0001cfe:	75 10                	jne    c0001d10 <isgraph+0x20>
c0001d00:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d04:	e8 a7 ff ff ff       	call   c0001cb0 <ispunct>
c0001d09:	83 c4 04             	add    esp,0x4
c0001d0c:	85 c0                	test   eax,eax
c0001d0e:	74 08                	je     c0001d18 <isgraph+0x28>
c0001d10:	b8 01 00 00 00       	mov    eax,0x1
c0001d15:	c3                   	ret    
c0001d16:	66 90                	xchg   ax,ax
c0001d18:	b8 00 00 00 00       	mov    eax,0x0
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax

c0001d20 <isprint>:
c0001d20:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d24:	e8 c7 ff ff ff       	call   c0001cf0 <isgraph>
c0001d29:	83 c4 04             	add    esp,0x4
c0001d2c:	85 c0                	test   eax,eax
c0001d2e:	75 08                	jne    c0001d38 <isprint+0x18>
c0001d30:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d35:	75 09                	jne    c0001d40 <isprint+0x20>
c0001d37:	90                   	nop
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <isxdigit>:
c0001d48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d4c:	e8 83 fe ff ff       	call   c0001bd4 <isdigit>
c0001d51:	83 c4 04             	add    esp,0x4
c0001d54:	85 c0                	test   eax,eax
c0001d56:	75 20                	jne    c0001d78 <isxdigit+0x30>
c0001d58:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d5d:	7e 09                	jle    c0001d68 <isxdigit+0x20>
c0001d5f:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d64:	7e 12                	jle    c0001d78 <isxdigit+0x30>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d6d:	7e 11                	jle    c0001d80 <isxdigit+0x38>
c0001d6f:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001d74:	7f 0a                	jg     c0001d80 <isxdigit+0x38>
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 01 00 00 00       	mov    eax,0x1
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax
c0001d80:	b8 00 00 00 00       	mov    eax,0x0
c0001d85:	c3                   	ret    

c0001d86 <disk_status>:
c0001d86:	31 c0                	xor    eax,eax
c0001d88:	c3                   	ret    

c0001d89 <disk_initialize>:
c0001d89:	31 c0                	xor    eax,eax
c0001d8b:	c3                   	ret    

c0001d8c <disk_read>:
c0001d8c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d91:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001d99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d9d:	e9 56 77 01 00       	jmp    c00194f8 <fatWrapperReadDisk>

c0001da2 <disk_write>:
c0001da2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001da7:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001daf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001db3:	e9 80 77 01 00       	jmp    c0019538 <fatWrapperWriteDisk>

c0001db8 <disk_ioctl>:
c0001db8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001dbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001dc1:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc6:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001dce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd2:	e9 a1 77 01 00       	jmp    c0019578 <fatWrapperIoctl>

c0001dd7 <ld_word>:
c0001dd7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ddb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001dde:	c1 e2 08             	shl    edx,0x8
c0001de1:	09 d0                	or     eax,edx
c0001de3:	c3                   	ret    

c0001de4 <ld_dword>:
c0001de4:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001de8:	89 d1                	mov    ecx,edx
c0001dea:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001dee:	c1 e1 08             	shl    ecx,0x8
c0001df1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001df4:	09 ca                	or     edx,ecx
c0001df6:	c1 e2 08             	shl    edx,0x8
c0001df9:	09 d0                	or     eax,edx
c0001dfb:	c3                   	ret    

c0001dfc <st_word>:
c0001dfc:	66 89 10             	mov    WORD PTR [eax],dx
c0001dff:	c3                   	ret    

c0001e00 <st_dword>:
c0001e00:	89 10                	mov    DWORD PTR [eax],edx
c0001e02:	c3                   	ret    

c0001e03 <mem_cpy>:
c0001e03:	85 c9                	test   ecx,ecx
c0001e05:	74 10                	je     c0001e17 <mem_cpy+0x14>
c0001e07:	57                   	push   edi
c0001e08:	01 c1                	add    ecx,eax
c0001e0a:	56                   	push   esi
c0001e0b:	89 c7                	mov    edi,eax
c0001e0d:	89 d6                	mov    esi,edx
c0001e0f:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e10:	39 f9                	cmp    ecx,edi
c0001e12:	75 fb                	jne    c0001e0f <mem_cpy+0xc>
c0001e14:	5e                   	pop    esi
c0001e15:	5f                   	pop    edi
c0001e16:	c3                   	ret    
c0001e17:	c3                   	ret    

c0001e18 <mem_set>:
c0001e18:	01 c1                	add    ecx,eax
c0001e1a:	40                   	inc    eax
c0001e1b:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001e1e:	39 c8                	cmp    eax,ecx
c0001e20:	75 f8                	jne    c0001e1a <mem_set+0x2>
c0001e22:	c3                   	ret    

c0001e23 <mem_cmp>:
c0001e23:	57                   	push   edi
c0001e24:	56                   	push   esi
c0001e25:	89 c6                	mov    esi,eax
c0001e27:	53                   	push   ebx
c0001e28:	46                   	inc    esi
c0001e29:	42                   	inc    edx
c0001e2a:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e2e:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e32:	29 fb                	sub    ebx,edi
c0001e34:	89 cf                	mov    edi,ecx
c0001e36:	29 f7                	sub    edi,esi
c0001e38:	01 c7                	add    edi,eax
c0001e3a:	74 04                	je     c0001e40 <mem_cmp+0x1d>
c0001e3c:	85 db                	test   ebx,ebx
c0001e3e:	74 e8                	je     c0001e28 <mem_cmp+0x5>
c0001e40:	89 d8                	mov    eax,ebx
c0001e42:	5b                   	pop    ebx
c0001e43:	5e                   	pop    esi
c0001e44:	5f                   	pop    edi
c0001e45:	c3                   	ret    

c0001e46 <chk_chr>:
c0001e46:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e49:	85 c9                	test   ecx,ecx
c0001e4b:	74 07                	je     c0001e54 <chk_chr+0xe>
c0001e4d:	39 d1                	cmp    ecx,edx
c0001e4f:	74 03                	je     c0001e54 <chk_chr+0xe>
c0001e51:	40                   	inc    eax
c0001e52:	eb f2                	jmp    c0001e46 <chk_chr>
c0001e54:	89 c8                	mov    eax,ecx
c0001e56:	c3                   	ret    

c0001e57 <dbc_1st>:
c0001e57:	31 c0                	xor    eax,eax
c0001e59:	c3                   	ret    

c0001e5a <dbc_2nd>:
c0001e5a:	31 c0                	xor    eax,eax
c0001e5c:	c3                   	ret    

c0001e5d <tchar2uni>:
c0001e5d:	57                   	push   edi
c0001e5e:	56                   	push   esi
c0001e5f:	53                   	push   ebx
c0001e60:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e62:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e64:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e67:	f6 c1 80             	test   cl,0x80
c0001e6a:	75 0a                	jne    c0001e76 <tchar2uni+0x19>
c0001e6c:	0f b6 d1             	movzx  edx,cl
c0001e6f:	89 f3                	mov    ebx,esi
c0001e71:	e9 b2 00 00 00       	jmp    c0001f28 <tchar2uni+0xcb>
c0001e76:	89 ca                	mov    edx,ecx
c0001e78:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001e7e:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001e84:	89 ca                	mov    edx,ecx
c0001e86:	75 0a                	jne    c0001e92 <tchar2uni+0x35>
c0001e88:	83 e2 1f             	and    edx,0x1f
c0001e8b:	b9 01 00 00 00       	mov    ecx,0x1
c0001e90:	eb 37                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001e92:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001e98:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001e9e:	75 0c                	jne    c0001eac <tchar2uni+0x4f>
c0001ea0:	89 ca                	mov    edx,ecx
c0001ea2:	b9 02 00 00 00       	mov    ecx,0x2
c0001ea7:	83 e2 0f             	and    edx,0xf
c0001eaa:	eb 1d                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001eac:	89 cf                	mov    edi,ecx
c0001eae:	83 ca ff             	or     edx,0xffffffff
c0001eb1:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eb7:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ebd:	75 70                	jne    c0001f2f <tchar2uni+0xd2>
c0001ebf:	89 ca                	mov    edx,ecx
c0001ec1:	b9 03 00 00 00       	mov    ecx,0x3
c0001ec6:	83 e2 07             	and    edx,0x7
c0001ec9:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ecd:	46                   	inc    esi
c0001ece:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ed1:	89 cf                	mov    edi,ecx
c0001ed3:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001ed9:	83 c7 80             	add    edi,0xffffff80
c0001edc:	75 4e                	jne    c0001f2c <tchar2uni+0xcf>
c0001ede:	c1 e2 06             	shl    edx,0x6
c0001ee1:	83 e1 3f             	and    ecx,0x3f
c0001ee4:	09 ca                	or     edx,ecx
c0001ee6:	39 de                	cmp    esi,ebx
c0001ee8:	75 e3                	jne    c0001ecd <tchar2uni+0x70>
c0001eea:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001eed:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ef3:	77 37                	ja     c0001f2c <tchar2uni+0xcf>
c0001ef5:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001efb:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f01:	76 29                	jbe    c0001f2c <tchar2uni+0xcf>
c0001f03:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f09:	76 1d                	jbe    c0001f28 <tchar2uni+0xcb>
c0001f0b:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f11:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f17:	c1 e1 06             	shl    ecx,0x6
c0001f1a:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f20:	09 ca                	or     edx,ecx
c0001f22:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f28:	89 18                	mov    DWORD PTR [eax],ebx
c0001f2a:	eb 03                	jmp    c0001f2f <tchar2uni+0xd2>
c0001f2c:	83 ca ff             	or     edx,0xffffffff
c0001f2f:	5b                   	pop    ebx
c0001f30:	89 d0                	mov    eax,edx
c0001f32:	5e                   	pop    esi
c0001f33:	5f                   	pop    edi
c0001f34:	c3                   	ret    

c0001f35 <put_utf>:
c0001f35:	53                   	push   ebx
c0001f36:	83 f8 7f             	cmp    eax,0x7f
c0001f39:	89 c3                	mov    ebx,eax
c0001f3b:	b0 00                	mov    al,0x0
c0001f3d:	77 11                	ja     c0001f50 <put_utf+0x1b>
c0001f3f:	85 c9                	test   ecx,ecx
c0001f41:	0f 84 e5 00 00 00    	je     c000202c <put_utf+0xf7>
c0001f47:	88 1a                	mov    BYTE PTR [edx],bl
c0001f49:	b0 01                	mov    al,0x1
c0001f4b:	e9 dc 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f50:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f56:	77 23                	ja     c0001f7b <put_utf+0x46>
c0001f58:	83 f9 01             	cmp    ecx,0x1
c0001f5b:	0f 86 cb 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f61:	89 d8                	mov    eax,ebx
c0001f63:	83 e3 3f             	and    ebx,0x3f
c0001f66:	c1 e8 06             	shr    eax,0x6
c0001f69:	83 cb 80             	or     ebx,0xffffff80
c0001f6c:	83 c8 c0             	or     eax,0xffffffc0
c0001f6f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001f72:	88 02                	mov    BYTE PTR [edx],al
c0001f74:	b0 02                	mov    al,0x2
c0001f76:	e9 b1 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f7b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001f81:	77 40                	ja     c0001fc3 <put_utf+0x8e>
c0001f83:	83 f9 02             	cmp    ecx,0x2
c0001f86:	0f 86 a0 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f8c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001f92:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f98:	0f 86 8e 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f9e:	89 d8                	mov    eax,ebx
c0001fa0:	c1 e8 0c             	shr    eax,0xc
c0001fa3:	83 c8 e0             	or     eax,0xffffffe0
c0001fa6:	88 02                	mov    BYTE PTR [edx],al
c0001fa8:	89 d8                	mov    eax,ebx
c0001faa:	83 e3 3f             	and    ebx,0x3f
c0001fad:	c1 e8 06             	shr    eax,0x6
c0001fb0:	83 cb 80             	or     ebx,0xffffff80
c0001fb3:	83 e0 3f             	and    eax,0x3f
c0001fb6:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fb9:	83 c8 80             	or     eax,0xffffff80
c0001fbc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001fbf:	b0 03                	mov    al,0x3
c0001fc1:	eb 69                	jmp    c000202c <put_utf+0xf7>
c0001fc3:	83 f9 03             	cmp    ecx,0x3
c0001fc6:	76 64                	jbe    c000202c <put_utf+0xf7>
c0001fc8:	89 d9                	mov    ecx,ebx
c0001fca:	0f b7 c3             	movzx  eax,bx
c0001fcd:	66 31 c9             	xor    cx,cx
c0001fd0:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001fd6:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001fdc:	c1 e9 06             	shr    ecx,0x6
c0001fdf:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001fe5:	77 43                	ja     c000202a <put_utf+0xf5>
c0001fe7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001fed:	77 3b                	ja     c000202a <put_utf+0xf5>
c0001fef:	09 cb                	or     ebx,ecx
c0001ff1:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ff7:	89 d8                	mov    eax,ebx
c0001ff9:	c1 e8 12             	shr    eax,0x12
c0001ffc:	83 c8 f0             	or     eax,0xfffffff0
c0001fff:	88 02                	mov    BYTE PTR [edx],al
c0002001:	89 d8                	mov    eax,ebx
c0002003:	c1 e8 0c             	shr    eax,0xc
c0002006:	83 e0 3f             	and    eax,0x3f
c0002009:	83 c8 80             	or     eax,0xffffff80
c000200c:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000200f:	89 d8                	mov    eax,ebx
c0002011:	83 e3 3f             	and    ebx,0x3f
c0002014:	c1 e8 06             	shr    eax,0x6
c0002017:	83 cb 80             	or     ebx,0xffffff80
c000201a:	83 e0 3f             	and    eax,0x3f
c000201d:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002020:	83 c8 80             	or     eax,0xffffff80
c0002023:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002026:	b0 04                	mov    al,0x4
c0002028:	eb 02                	jmp    c000202c <put_utf+0xf7>
c000202a:	31 c0                	xor    eax,eax
c000202c:	5b                   	pop    ebx
c000202d:	c3                   	ret    

c000202e <clst2sect>:
c000202e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002031:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002034:	83 ea 02             	sub    edx,0x2
c0002037:	39 ca                	cmp    edx,ecx
c0002039:	76 0d                	jbe    c0002048 <clst2sect+0x1a>
c000203b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000203f:	0f af d1             	imul   edx,ecx
c0002042:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002045:	89 d0                	mov    eax,edx
c0002047:	c3                   	ret    
c0002048:	31 c0                	xor    eax,eax
c000204a:	c3                   	ret    

c000204b <pick_lfn>:
c000204b:	55                   	push   ebp
c000204c:	57                   	push   edi
c000204d:	89 c7                	mov    edi,eax
c000204f:	56                   	push   esi
c0002050:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002053:	53                   	push   ebx
c0002054:	89 d3                	mov    ebx,edx
c0002056:	e8 7c fd ff ff       	call   c0001dd7 <ld_word>
c000205b:	66 85 c0             	test   ax,ax
c000205e:	74 04                	je     c0002064 <pick_lfn+0x19>
c0002060:	31 c0                	xor    eax,eax
c0002062:	eb 62                	jmp    c00020c6 <pick_lfn+0x7b>
c0002064:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002067:	bd 01 00 00 00       	mov    ebp,0x1
c000206c:	83 e1 bf             	and    ecx,0xffffffbf
c000206f:	31 f6                	xor    esi,esi
c0002071:	49                   	dec    ecx
c0002072:	6b c9 0d             	imul   ecx,ecx,0xd
c0002075:	0f b6 86 e0 00 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdff20]
c000207c:	01 d8                	add    eax,ebx
c000207e:	e8 54 fd ff ff       	call   c0001dd7 <ld_word>
c0002083:	66 85 ed             	test   bp,bp
c0002086:	74 11                	je     c0002099 <pick_lfn+0x4e>
c0002088:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000208e:	77 d0                	ja     c0002060 <pick_lfn+0x15>
c0002090:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c0002094:	89 c5                	mov    ebp,eax
c0002096:	41                   	inc    ecx
c0002097:	eb 0a                	jmp    c00020a3 <pick_lfn+0x58>
c0002099:	0f b7 c0             	movzx  eax,ax
c000209c:	3d ff ff 00 00       	cmp    eax,0xffff
c00020a1:	75 bd                	jne    c0002060 <pick_lfn+0x15>
c00020a3:	46                   	inc    esi
c00020a4:	83 fe 0d             	cmp    esi,0xd
c00020a7:	75 cc                	jne    c0002075 <pick_lfn+0x2a>
c00020a9:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020ac:	74 13                	je     c00020c1 <pick_lfn+0x76>
c00020ae:	66 85 ed             	test   bp,bp
c00020b1:	74 0e                	je     c00020c1 <pick_lfn+0x76>
c00020b3:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020b9:	77 a5                	ja     c0002060 <pick_lfn+0x15>
c00020bb:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020c1:	b8 01 00 00 00       	mov    eax,0x1
c00020c6:	5b                   	pop    ebx
c00020c7:	5e                   	pop    esi
c00020c8:	5f                   	pop    edi
c00020c9:	5d                   	pop    ebp
c00020ca:	c3                   	ret    

c00020cb <put_lfn>:
c00020cb:	55                   	push   ebp
c00020cc:	57                   	push   edi
c00020cd:	89 d7                	mov    edi,edx
c00020cf:	56                   	push   esi
c00020d0:	31 f6                	xor    esi,esi
c00020d2:	53                   	push   ebx
c00020d3:	83 ec 0c             	sub    esp,0xc
c00020d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020da:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00020de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00020e2:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00020e8:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00020eb:	8d 42 1a             	lea    eax,[edx+0x1a]
c00020ee:	31 d2                	xor    edx,edx
c00020f0:	e8 07 fd ff ff       	call   c0001dfc <st_word>
c00020f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00020fc:	0f b6 d9             	movzx  ebx,cl
c00020ff:	4b                   	dec    ebx
c0002100:	6b db 0d             	imul   ebx,ebx,0xd
c0002103:	0f b7 c6             	movzx  eax,si
c0002106:	3d ff ff 00 00       	cmp    eax,0xffff
c000210b:	74 09                	je     c0002116 <put_lfn+0x4b>
c000210d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002111:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002115:	43                   	inc    ebx
c0002116:	0f b7 ee             	movzx  ebp,si
c0002119:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000211c:	89 ea                	mov    edx,ebp
c000211e:	0f b6 80 e0 00 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdff20]
c0002125:	01 f8                	add    eax,edi
c0002127:	e8 d0 fc ff ff       	call   c0001dfc <st_word>
c000212c:	85 ed                	test   ebp,ebp
c000212e:	75 05                	jne    c0002135 <put_lfn+0x6a>
c0002130:	be ff ff 00 00       	mov    esi,0xffff
c0002135:	ff 04 24             	inc    DWORD PTR [esp]
c0002138:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c000213c:	75 c5                	jne    c0002103 <put_lfn+0x38>
c000213e:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002144:	74 0b                	je     c0002151 <put_lfn+0x86>
c0002146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000214a:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000214f:	75 07                	jne    c0002158 <put_lfn+0x8d>
c0002151:	83 c9 40             	or     ecx,0x40
c0002154:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002158:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000215c:	88 07                	mov    BYTE PTR [edi],al
c000215e:	83 c4 0c             	add    esp,0xc
c0002161:	5b                   	pop    ebx
c0002162:	5e                   	pop    esi
c0002163:	5f                   	pop    edi
c0002164:	5d                   	pop    ebp
c0002165:	c3                   	ret    

c0002166 <gen_numname>:
c0002166:	57                   	push   edi
c0002167:	89 cf                	mov    edi,ecx
c0002169:	56                   	push   esi
c000216a:	b9 0b 00 00 00       	mov    ecx,0xb
c000216f:	53                   	push   ebx
c0002170:	89 c6                	mov    esi,eax
c0002172:	83 ec 10             	sub    esp,0x10
c0002175:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002179:	e8 85 fc ff ff       	call   c0001e03 <mem_cpy>
c000217e:	83 fb 05             	cmp    ebx,0x5
c0002181:	76 30                	jbe    c00021b3 <gen_numname+0x4d>
c0002183:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002186:	66 85 c0             	test   ax,ax
c0002189:	74 28                	je     c00021b3 <gen_numname+0x4d>
c000218b:	83 c7 02             	add    edi,0x2
c000218e:	ba 10 00 00 00       	mov    edx,0x10
c0002193:	01 db                	add    ebx,ebx
c0002195:	89 c1                	mov    ecx,eax
c0002197:	c1 e0 10             	shl    eax,0x10
c000219a:	83 e1 01             	and    ecx,0x1
c000219d:	c1 e8 11             	shr    eax,0x11
c00021a0:	01 cb                	add    ebx,ecx
c00021a2:	0f ba e3 10          	bt     ebx,0x10
c00021a6:	73 06                	jae    c00021ae <gen_numname+0x48>
c00021a8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021ae:	4a                   	dec    edx
c00021af:	75 e2                	jne    c0002193 <gen_numname+0x2d>
c00021b1:	eb d0                	jmp    c0002183 <gen_numname+0x1d>
c00021b3:	b8 07 00 00 00       	mov    eax,0x7
c00021b8:	89 d9                	mov    ecx,ebx
c00021ba:	83 e1 0f             	and    ecx,0xf
c00021bd:	8d 79 30             	lea    edi,[ecx+0x30]
c00021c0:	89 fa                	mov    edx,edi
c00021c2:	83 ff 39             	cmp    edi,0x39
c00021c5:	76 03                	jbe    c00021ca <gen_numname+0x64>
c00021c7:	8d 51 37             	lea    edx,[ecx+0x37]
c00021ca:	8d 48 ff             	lea    ecx,[eax-0x1]
c00021cd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00021d1:	89 da                	mov    edx,ebx
c00021d3:	c1 ea 04             	shr    edx,0x4
c00021d6:	83 fb 0f             	cmp    ebx,0xf
c00021d9:	76 06                	jbe    c00021e1 <gen_numname+0x7b>
c00021db:	89 c8                	mov    eax,ecx
c00021dd:	89 d3                	mov    ebx,edx
c00021df:	eb d7                	jmp    c00021b8 <gen_numname+0x52>
c00021e1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00021e6:	31 d2                	xor    edx,edx
c00021e8:	8d 58 fe             	lea    ebx,[eax-0x2]
c00021eb:	8d 04 16             	lea    eax,[esi+edx*1]
c00021ee:	39 ca                	cmp    edx,ecx
c00021f0:	73 19                	jae    c000220b <gen_numname+0xa5>
c00021f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00021f5:	83 f8 20             	cmp    eax,0x20
c00021f8:	74 11                	je     c000220b <gen_numname+0xa5>
c00021fa:	e8 58 fc ff ff       	call   c0001e57 <dbc_1st>
c00021ff:	85 c0                	test   eax,eax
c0002201:	74 05                	je     c0002208 <gen_numname+0xa2>
c0002203:	39 d3                	cmp    ebx,edx
c0002205:	74 04                	je     c000220b <gen_numname+0xa5>
c0002207:	42                   	inc    edx
c0002208:	42                   	inc    edx
c0002209:	eb e0                	jmp    c00021eb <gen_numname+0x85>
c000220b:	b0 20                	mov    al,0x20
c000220d:	83 f9 07             	cmp    ecx,0x7
c0002210:	77 05                	ja     c0002217 <gen_numname+0xb1>
c0002212:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002216:	41                   	inc    ecx
c0002217:	42                   	inc    edx
c0002218:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000221c:	83 fa 07             	cmp    edx,0x7
c000221f:	76 ea                	jbe    c000220b <gen_numname+0xa5>
c0002221:	83 c4 10             	add    esp,0x10
c0002224:	5b                   	pop    ebx
c0002225:	5e                   	pop    esi
c0002226:	5f                   	pop    edi
c0002227:	c3                   	ret    

c0002228 <sum_sfn>:
c0002228:	53                   	push   ebx
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	31 db                	xor    ebx,ebx
c000222d:	0f b6 d1             	movzx  edx,cl
c0002230:	c1 e1 07             	shl    ecx,0x7
c0002233:	d1 ea                	shr    edx,1
c0002235:	09 ca                	or     edx,ecx
c0002237:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c000223a:	43                   	inc    ebx
c000223b:	01 ca                	add    edx,ecx
c000223d:	83 fb 0b             	cmp    ebx,0xb
c0002240:	88 d1                	mov    cl,dl
c0002242:	75 e9                	jne    c000222d <sum_sfn+0x5>
c0002244:	88 d0                	mov    al,dl
c0002246:	5b                   	pop    ebx
c0002247:	c3                   	ret    

c0002248 <get_ldnumber>:
c0002248:	8b 10                	mov    edx,DWORD PTR [eax]
c000224a:	85 d2                	test   edx,edx
c000224c:	74 14                	je     c0002262 <get_ldnumber+0x1a>
c000224e:	56                   	push   esi
c000224f:	53                   	push   ebx
c0002250:	89 d3                	mov    ebx,edx
c0002252:	43                   	inc    ebx
c0002253:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002256:	80 f9 1f             	cmp    cl,0x1f
c0002259:	76 0d                	jbe    c0002268 <get_ldnumber+0x20>
c000225b:	80 f9 3a             	cmp    cl,0x3a
c000225e:	75 f2                	jne    c0002252 <get_ldnumber+0xa>
c0002260:	eb 0a                	jmp    c000226c <get_ldnumber+0x24>
c0002262:	83 c9 ff             	or     ecx,0xffffffff
c0002265:	89 c8                	mov    eax,ecx
c0002267:	c3                   	ret    
c0002268:	31 c9                	xor    ecx,ecx
c000226a:	eb 24                	jmp    c0002290 <get_ldnumber+0x48>
c000226c:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226f:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002272:	80 f9 09             	cmp    cl,0x9
c0002275:	77 16                	ja     c000228d <get_ldnumber+0x45>
c0002277:	83 c2 02             	add    edx,0x2
c000227a:	83 c9 ff             	or     ecx,0xffffffff
c000227d:	39 d3                	cmp    ebx,edx
c000227f:	75 0f                	jne    c0002290 <get_ldnumber+0x48>
c0002281:	89 f2                	mov    edx,esi
c0002283:	89 18                	mov    DWORD PTR [eax],ebx
c0002285:	0f be ca             	movsx  ecx,dl
c0002288:	83 e9 30             	sub    ecx,0x30
c000228b:	eb 03                	jmp    c0002290 <get_ldnumber+0x48>
c000228d:	83 c9 ff             	or     ecx,0xffffffff
c0002290:	89 c8                	mov    eax,ecx
c0002292:	5b                   	pop    ebx
c0002293:	5e                   	pop    esi
c0002294:	c3                   	ret    

c0002295 <validate>:
c0002295:	56                   	push   esi
c0002296:	53                   	push   ebx
c0002297:	89 d6                	mov    esi,edx
c0002299:	51                   	push   ecx
c000229a:	85 c0                	test   eax,eax
c000229c:	75 09                	jne    c00022a7 <validate+0x12>
c000229e:	b8 09 00 00 00       	mov    eax,0x9
c00022a3:	31 c9                	xor    ecx,ecx
c00022a5:	eb 2e                	jmp    c00022d5 <validate+0x40>
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00022ab:	85 c0                	test   eax,eax
c00022ad:	74 ef                	je     c000229e <validate+0x9>
c00022af:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022b2:	74 ea                	je     c000229e <validate+0x9>
c00022b4:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022b7:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022bb:	75 e1                	jne    c000229e <validate+0x9>
c00022bd:	83 ec 0c             	sub    esp,0xc
c00022c0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c4:	50                   	push   eax
c00022c5:	e8 bc fa ff ff       	call   c0001d86 <disk_status>
c00022ca:	83 c4 10             	add    esp,0x10
c00022cd:	a8 01                	test   al,0x1
c00022cf:	75 cd                	jne    c000229e <validate+0x9>
c00022d1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00022d3:	31 c0                	xor    eax,eax
c00022d5:	89 0e                	mov    DWORD PTR [esi],ecx
c00022d7:	5a                   	pop    edx
c00022d8:	5b                   	pop    ebx
c00022d9:	5e                   	pop    esi
c00022da:	c3                   	ret    

c00022db <sync_window>:
c00022db:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022df:	74 58                	je     c0002339 <sync_window+0x5e>
c00022e1:	56                   	push   esi
c00022e2:	53                   	push   ebx
c00022e3:	8d 70 34             	lea    esi,[eax+0x34]
c00022e6:	51                   	push   ecx
c00022e7:	89 c3                	mov    ebx,eax
c00022e9:	6a 01                	push   0x1
c00022eb:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00022ee:	56                   	push   esi
c00022ef:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f3:	50                   	push   eax
c00022f4:	e8 a9 fa ff ff       	call   c0001da2 <disk_write>
c00022f9:	83 c4 10             	add    esp,0x10
c00022fc:	ba 01 00 00 00       	mov    edx,0x1
c0002301:	85 c0                	test   eax,eax
c0002303:	75 2e                	jne    c0002333 <sync_window+0x58>
c0002305:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002308:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000230b:	89 c1                	mov    ecx,eax
c000230d:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002311:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002314:	39 d1                	cmp    ecx,edx
c0002316:	73 19                	jae    c0002331 <sync_window+0x56>
c0002318:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000231c:	75 13                	jne    c0002331 <sync_window+0x56>
c000231e:	6a 01                	push   0x1
c0002320:	01 d0                	add    eax,edx
c0002322:	50                   	push   eax
c0002323:	56                   	push   esi
c0002324:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002328:	50                   	push   eax
c0002329:	e8 74 fa ff ff       	call   c0001da2 <disk_write>
c000232e:	83 c4 10             	add    esp,0x10
c0002331:	31 d2                	xor    edx,edx
c0002333:	89 d0                	mov    eax,edx
c0002335:	5a                   	pop    edx
c0002336:	5b                   	pop    ebx
c0002337:	5e                   	pop    esi
c0002338:	c3                   	ret    
c0002339:	31 d2                	xor    edx,edx
c000233b:	89 d0                	mov    eax,edx
c000233d:	c3                   	ret    

c000233e <move_window>:
c000233e:	57                   	push   edi
c000233f:	56                   	push   esi
c0002340:	31 f6                	xor    esi,esi
c0002342:	53                   	push   ebx
c0002343:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002346:	74 32                	je     c000237a <move_window+0x3c>
c0002348:	89 c3                	mov    ebx,eax
c000234a:	89 d7                	mov    edi,edx
c000234c:	e8 8a ff ff ff       	call   c00022db <sync_window>
c0002351:	89 c6                	mov    esi,eax
c0002353:	85 c0                	test   eax,eax
c0002355:	75 23                	jne    c000237a <move_window+0x3c>
c0002357:	6a 01                	push   0x1
c0002359:	8d 43 34             	lea    eax,[ebx+0x34]
c000235c:	57                   	push   edi
c000235d:	50                   	push   eax
c000235e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002362:	50                   	push   eax
c0002363:	e8 24 fa ff ff       	call   c0001d8c <disk_read>
c0002368:	83 c4 10             	add    esp,0x10
c000236b:	85 c0                	test   eax,eax
c000236d:	74 08                	je     c0002377 <move_window+0x39>
c000236f:	be 01 00 00 00       	mov    esi,0x1
c0002374:	83 cf ff             	or     edi,0xffffffff
c0002377:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000237a:	89 f0                	mov    eax,esi
c000237c:	5b                   	pop    ebx
c000237d:	5e                   	pop    esi
c000237e:	5f                   	pop    edi
c000237f:	c3                   	ret    

c0002380 <check_fs>:
c0002380:	53                   	push   ebx
c0002381:	89 c3                	mov    ebx,eax
c0002383:	83 ec 08             	sub    esp,0x8
c0002386:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000238a:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002391:	e8 a8 ff ff ff       	call   c000233e <move_window>
c0002396:	ba 04 00 00 00       	mov    edx,0x4
c000239b:	85 c0                	test   eax,eax
c000239d:	75 68                	jne    c0002407 <check_fs+0x87>
c000239f:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023a5:	e8 2d fa ff ff       	call   c0001dd7 <ld_word>
c00023aa:	ba 03 00 00 00       	mov    edx,0x3
c00023af:	66 3d 55 aa          	cmp    ax,0xaa55
c00023b3:	75 52                	jne    c0002407 <check_fs+0x87>
c00023b5:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023b8:	8d 50 18             	lea    edx,[eax+0x18]
c00023bb:	80 fa 01             	cmp    dl,0x1
c00023be:	76 09                	jbe    c00023c9 <check_fs+0x49>
c00023c0:	ba 02 00 00 00       	mov    edx,0x2
c00023c5:	3c eb                	cmp    al,0xeb
c00023c7:	75 3e                	jne    c0002407 <check_fs+0x87>
c00023c9:	ba 44 27 02 c0       	mov    edx,0xc0022744
c00023ce:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00023d1:	b9 03 00 00 00       	mov    ecx,0x3
c00023d6:	e8 48 fa ff ff       	call   c0001e23 <mem_cmp>
c00023db:	31 d2                	xor    edx,edx
c00023dd:	85 c0                	test   eax,eax
c00023df:	74 26                	je     c0002407 <check_fs+0x87>
c00023e1:	ba 9c ff 01 c0       	mov    edx,0xc001ff9c
c00023e6:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00023ec:	b9 05 00 00 00       	mov    ecx,0x5
c00023f1:	e8 2d fa ff ff       	call   c0001e23 <mem_cmp>
c00023f6:	31 d2                	xor    edx,edx
c00023f8:	85 c0                	test   eax,eax
c00023fa:	74 0b                	je     c0002407 <check_fs+0x87>
c00023fc:	31 d2                	xor    edx,edx
c00023fe:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002402:	0f 95 c2             	setne  dl
c0002405:	01 d2                	add    edx,edx
c0002407:	89 d0                	mov    eax,edx
c0002409:	83 c4 08             	add    esp,0x8
c000240c:	5b                   	pop    ebx
c000240d:	c3                   	ret    

c000240e <find_volume>:
c000240e:	55                   	push   ebp
c000240f:	57                   	push   edi
c0002410:	56                   	push   esi
c0002411:	89 c6                	mov    esi,eax
c0002413:	53                   	push   ebx
c0002414:	89 d3                	mov    ebx,edx
c0002416:	83 ec 2c             	sub    esp,0x2c
c0002419:	31 d2                	xor    edx,edx
c000241b:	e8 60 ff ff ff       	call   c0002380 <check_fs>
c0002420:	83 f8 02             	cmp    eax,0x2
c0002423:	74 06                	je     c000242b <find_volume+0x1d>
c0002425:	77 62                	ja     c0002489 <find_volume+0x7b>
c0002427:	85 db                	test   ebx,ebx
c0002429:	74 5e                	je     c0002489 <find_volume+0x7b>
c000242b:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c000242f:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002435:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c000243b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000243f:	89 cf                	mov    edi,ecx
c0002441:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002445:	89 e8                	mov    eax,ebp
c0002447:	83 c5 10             	add    ebp,0x10
c000244a:	e8 95 f9 ff ff       	call   c0001de4 <ld_dword>
c000244f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002453:	89 01                	mov    DWORD PTR [ecx],eax
c0002455:	83 c1 04             	add    ecx,0x4
c0002458:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000245c:	75 e3                	jne    c0002441 <find_volume+0x33>
c000245e:	31 ed                	xor    ebp,ebp
c0002460:	85 db                	test   ebx,ebx
c0002462:	74 03                	je     c0002467 <find_volume+0x59>
c0002464:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002467:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000246a:	b8 03 00 00 00       	mov    eax,0x3
c000246f:	85 d2                	test   edx,edx
c0002471:	74 0c                	je     c000247f <find_volume+0x71>
c0002473:	89 f0                	mov    eax,esi
c0002475:	e8 06 ff ff ff       	call   c0002380 <check_fs>
c000247a:	83 f8 01             	cmp    eax,0x1
c000247d:	76 0a                	jbe    c0002489 <find_volume+0x7b>
c000247f:	85 db                	test   ebx,ebx
c0002481:	75 06                	jne    c0002489 <find_volume+0x7b>
c0002483:	45                   	inc    ebp
c0002484:	83 fd 03             	cmp    ebp,0x3
c0002487:	76 de                	jbe    c0002467 <find_volume+0x59>
c0002489:	83 c4 2c             	add    esp,0x2c
c000248c:	5b                   	pop    ebx
c000248d:	5e                   	pop    esi
c000248e:	5f                   	pop    edi
c000248f:	5d                   	pop    ebp
c0002490:	c3                   	ret    

c0002491 <mount_volume>:
c0002491:	55                   	push   ebp
c0002492:	89 d5                	mov    ebp,edx
c0002494:	57                   	push   edi
c0002495:	89 cf                	mov    edi,ecx
c0002497:	56                   	push   esi
c0002498:	53                   	push   ebx
c0002499:	bb 0b 00 00 00       	mov    ebx,0xb
c000249e:	83 ec 1c             	sub    esp,0x1c
c00024a1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024a7:	e8 9c fd ff ff       	call   c0002248 <get_ldnumber>
c00024ac:	85 c0                	test   eax,eax
c00024ae:	0f 88 c4 02 00 00    	js     c0002778 <mount_volume+0x2e7>
c00024b4:	8b 34 85 a0 54 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdab60]
c00024bb:	89 c2                	mov    edx,eax
c00024bd:	bb 0c 00 00 00       	mov    ebx,0xc
c00024c2:	85 f6                	test   esi,esi
c00024c4:	0f 84 ae 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024ca:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00024cd:	83 e7 fe             	and    edi,0xfffffffe
c00024d0:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00024d3:	74 3a                	je     c000250f <mount_volume+0x7e>
c00024d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00024df:	50                   	push   eax
c00024e0:	e8 a1 f8 ff ff       	call   c0001d86 <disk_status>
c00024e5:	83 c4 10             	add    esp,0x10
c00024e8:	a8 01                	test   al,0x1
c00024ea:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00024ed:	75 20                	jne    c000250f <mount_volume+0x7e>
c00024ef:	31 db                	xor    ebx,ebx
c00024f1:	81 e7 fe 00 00 00    	and    edi,0xfe
c00024f7:	0f 84 7b 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024fd:	a8 04                	test   al,0x4
c00024ff:	0f 84 73 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002505:	bb 0a 00 00 00       	mov    ebx,0xa
c000250a:	e9 69 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c000250f:	83 ec 0c             	sub    esp,0xc
c0002512:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002515:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002518:	0f b6 c2             	movzx  eax,dl
c000251b:	bb 03 00 00 00       	mov    ebx,0x3
c0002520:	50                   	push   eax
c0002521:	e8 63 f8 ff ff       	call   c0001d89 <disk_initialize>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	a8 01                	test   al,0x1
c000252b:	0f 85 47 02 00 00    	jne    c0002778 <mount_volume+0x2e7>
c0002531:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002537:	74 04                	je     c000253d <mount_volume+0xac>
c0002539:	a8 04                	test   al,0x4
c000253b:	75 c8                	jne    c0002505 <mount_volume+0x74>
c000253d:	31 d2                	xor    edx,edx
c000253f:	89 f0                	mov    eax,esi
c0002541:	bb 01 00 00 00       	mov    ebx,0x1
c0002546:	e8 c3 fe ff ff       	call   c000240e <find_volume>
c000254b:	83 f8 04             	cmp    eax,0x4
c000254e:	0f 84 24 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002554:	83 f8 01             	cmp    eax,0x1
c0002557:	76 0a                	jbe    c0002563 <mount_volume+0xd2>
c0002559:	bb 0d 00 00 00       	mov    ebx,0xd
c000255e:	e9 15 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c0002563:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002566:	e8 6c f8 ff ff       	call   c0001dd7 <ld_word>
c000256b:	66 3d 00 02          	cmp    ax,0x200
c000256f:	75 e8                	jne    c0002559 <mount_volume+0xc8>
c0002571:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002574:	e8 5e f8 ff ff       	call   c0001dd7 <ld_word>
c0002579:	0f b7 c0             	movzx  eax,ax
c000257c:	89 04 24             	mov    DWORD PTR [esp],eax
c000257f:	85 c0                	test   eax,eax
c0002581:	75 0b                	jne    c000258e <mount_volume+0xfd>
c0002583:	8d 46 58             	lea    eax,[esi+0x58]
c0002586:	e8 59 f8 ff ff       	call   c0001de4 <ld_dword>
c000258b:	89 04 24             	mov    DWORD PTR [esp],eax
c000258e:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002591:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002595:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002598:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000259b:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c000259e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00025a2:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00025a9:	48                   	dec    eax
c00025aa:	3c 01                	cmp    al,0x1
c00025ac:	77 ab                	ja     c0002559 <mount_volume+0xc8>
c00025ae:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025b2:	89 c3                	mov    ebx,eax
c00025b4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025b8:	66 85 c0             	test   ax,ax
c00025bb:	74 9c                	je     c0002559 <mount_volume+0xc8>
c00025bd:	8d 40 ff             	lea    eax,[eax-0x1]
c00025c0:	85 d8                	test   eax,ebx
c00025c2:	75 95                	jne    c0002559 <mount_volume+0xc8>
c00025c4:	8d 46 45             	lea    eax,[esi+0x45]
c00025c7:	e8 0b f8 ff ff       	call   c0001dd7 <ld_word>
c00025cc:	89 c7                	mov    edi,eax
c00025ce:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00025d2:	a8 0f                	test   al,0xf
c00025d4:	75 83                	jne    c0002559 <mount_volume+0xc8>
c00025d6:	8d 46 47             	lea    eax,[esi+0x47]
c00025d9:	e8 f9 f7 ff ff       	call   c0001dd7 <ld_word>
c00025de:	0f b7 e8             	movzx  ebp,ax
c00025e1:	85 ed                	test   ebp,ebp
c00025e3:	75 0a                	jne    c00025ef <mount_volume+0x15e>
c00025e5:	8d 46 54             	lea    eax,[esi+0x54]
c00025e8:	e8 f7 f7 ff ff       	call   c0001de4 <ld_dword>
c00025ed:	89 c5                	mov    ebp,eax
c00025ef:	8d 46 42             	lea    eax,[esi+0x42]
c00025f2:	e8 e0 f7 ff ff       	call   c0001dd7 <ld_word>
c00025f7:	0f b7 c8             	movzx  ecx,ax
c00025fa:	85 c9                	test   ecx,ecx
c00025fc:	0f 84 57 ff ff ff    	je     c0002559 <mount_volume+0xc8>
c0002602:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002607:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c000260b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000260f:	0f b7 c7             	movzx  eax,di
c0002612:	c1 e8 04             	shr    eax,0x4
c0002615:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002619:	01 c8                	add    eax,ecx
c000261b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000261f:	39 c5                	cmp    ebp,eax
c0002621:	0f 82 32 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002627:	29 c5                	sub    ebp,eax
c0002629:	31 d2                	xor    edx,edx
c000262b:	89 e8                	mov    eax,ebp
c000262d:	f7 f3                	div    ebx
c000262f:	39 dd                	cmp    ebp,ebx
c0002631:	0f 82 22 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002637:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000263c:	0f 87 17 ff ff ff    	ja     c0002559 <mount_volume+0xc8>
c0002642:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002647:	0f 86 1c 01 00 00    	jbe    c0002769 <mount_volume+0x2d8>
c000264d:	bb 03 00 00 00       	mov    ebx,0x3
c0002652:	8d 68 02             	lea    ebp,[eax+0x2]
c0002655:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002659:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000265d:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c0002661:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002664:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002667:	01 c8                	add    eax,ecx
c0002669:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000266c:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000266f:	83 fb 03             	cmp    ebx,0x3
c0002672:	75 23                	jne    c0002697 <mount_volume+0x206>
c0002674:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002677:	e8 5b f7 ff ff       	call   c0001dd7 <ld_word>
c000267c:	09 c7                	or     edi,eax
c000267e:	66 85 ff             	test   di,di
c0002681:	0f 85 d2 fe ff ff    	jne    c0002559 <mount_volume+0xc8>
c0002687:	8d 46 60             	lea    eax,[esi+0x60]
c000268a:	c1 e5 02             	shl    ebp,0x2
c000268d:	e8 52 f7 ff ff       	call   c0001de4 <ld_dword>
c0002692:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002695:	eb 24                	jmp    c00026bb <mount_volume+0x22a>
c0002697:	66 85 ff             	test   di,di
c000269a:	0f 84 b9 fe ff ff    	je     c0002559 <mount_volume+0xc8>
c00026a0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00026a4:	83 fb 02             	cmp    ebx,0x2
c00026a7:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026aa:	75 04                	jne    c00026b0 <mount_volume+0x21f>
c00026ac:	01 ed                	add    ebp,ebp
c00026ae:	eb 0b                	jmp    c00026bb <mount_volume+0x22a>
c00026b0:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00026b4:	83 e5 01             	and    ebp,0x1
c00026b7:	d1 e8                	shr    eax,1
c00026b9:	01 c5                	add    ebp,eax
c00026bb:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00026c1:	c1 ed 09             	shr    ebp,0x9
c00026c4:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00026c7:	0f 87 8c fe ff ff    	ja     c0002559 <mount_volume+0xc8>
c00026cd:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00026d4:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00026db:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00026df:	83 fb 03             	cmp    ebx,0x3
c00026e2:	75 6e                	jne    c0002752 <mount_volume+0x2c1>
c00026e4:	8d 46 64             	lea    eax,[esi+0x64]
c00026e7:	e8 eb f6 ff ff       	call   c0001dd7 <ld_word>
c00026ec:	66 48                	dec    ax
c00026ee:	75 62                	jne    c0002752 <mount_volume+0x2c1>
c00026f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00026f4:	89 f0                	mov    eax,esi
c00026f6:	42                   	inc    edx
c00026f7:	e8 42 fc ff ff       	call   c000233e <move_window>
c00026fc:	85 c0                	test   eax,eax
c00026fe:	75 52                	jne    c0002752 <mount_volume+0x2c1>
c0002700:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002704:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000270a:	e8 c8 f6 ff ff       	call   c0001dd7 <ld_word>
c000270f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002713:	75 3d                	jne    c0002752 <mount_volume+0x2c1>
c0002715:	8d 46 34             	lea    eax,[esi+0x34]
c0002718:	e8 c7 f6 ff ff       	call   c0001de4 <ld_dword>
c000271d:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002722:	75 2e                	jne    c0002752 <mount_volume+0x2c1>
c0002724:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000272a:	e8 b5 f6 ff ff       	call   c0001de4 <ld_dword>
c000272f:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002734:	75 1c                	jne    c0002752 <mount_volume+0x2c1>
c0002736:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c000273c:	e8 a3 f6 ff ff       	call   c0001de4 <ld_dword>
c0002741:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002744:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000274a:	e8 95 f6 ff ff       	call   c0001de4 <ld_dword>
c000274f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002752:	66 a1 80 54 02 c0    	mov    ax,ds:0xc0025480
c0002758:	88 1e                	mov    BYTE PTR [esi],bl
c000275a:	40                   	inc    eax
c000275b:	31 db                	xor    ebx,ebx
c000275d:	66 a3 80 54 02 c0    	mov    ds:0xc0025480,ax
c0002763:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002767:	eb 0f                	jmp    c0002778 <mount_volume+0x2e7>
c0002769:	3d f6 0f 00 00       	cmp    eax,0xff6
c000276e:	19 db                	sbb    ebx,ebx
c0002770:	83 c3 02             	add    ebx,0x2
c0002773:	e9 da fe ff ff       	jmp    c0002652 <mount_volume+0x1c1>
c0002778:	83 c4 1c             	add    esp,0x1c
c000277b:	89 d8                	mov    eax,ebx
c000277d:	5b                   	pop    ebx
c000277e:	5e                   	pop    esi
c000277f:	5f                   	pop    edi
c0002780:	5d                   	pop    ebp
c0002781:	c3                   	ret    

c0002782 <put_fat>:
c0002782:	55                   	push   ebp
c0002783:	bd 02 00 00 00       	mov    ebp,0x2
c0002788:	57                   	push   edi
c0002789:	56                   	push   esi
c000278a:	53                   	push   ebx
c000278b:	83 ec 1c             	sub    esp,0x1c
c000278e:	83 fa 01             	cmp    edx,0x1
c0002791:	0f 86 38 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c0002797:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000279a:	0f 86 2f 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c00027a0:	89 c6                	mov    esi,eax
c00027a2:	89 cf                	mov    edi,ecx
c00027a4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027a7:	89 d3                	mov    ebx,edx
c00027a9:	83 f8 02             	cmp    eax,0x2
c00027ac:	0f 84 b1 00 00 00    	je     c0002863 <put_fat+0xe1>
c00027b2:	83 f8 03             	cmp    eax,0x3
c00027b5:	0f 84 d5 00 00 00    	je     c0002890 <put_fat+0x10e>
c00027bb:	48                   	dec    eax
c00027bc:	0f 85 0d 01 00 00    	jne    c00028cf <put_fat+0x14d>
c00027c2:	89 d1                	mov    ecx,edx
c00027c4:	89 f0                	mov    eax,esi
c00027c6:	d1 e9                	shr    ecx,1
c00027c8:	01 d1                	add    ecx,edx
c00027ca:	89 ca                	mov    edx,ecx
c00027cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00027d0:	c1 ea 09             	shr    edx,0x9
c00027d3:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027d6:	e8 63 fb ff ff       	call   c000233e <move_window>
c00027db:	89 c5                	mov    ebp,eax
c00027dd:	85 c0                	test   eax,eax
c00027df:	0f 85 ea 00 00 00    	jne    c00028cf <put_fat+0x14d>
c00027e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027e9:	8d 46 34             	lea    eax,[esi+0x34]
c00027ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027f0:	8d 41 01             	lea    eax,[ecx+0x1]
c00027f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00027f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027fd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002801:	89 f8                	mov    eax,edi
c0002803:	83 e3 01             	and    ebx,0x1
c0002806:	74 11                	je     c0002819 <put_fat+0x97>
c0002808:	8a 11                	mov    dl,BYTE PTR [ecx]
c000280a:	89 f8                	mov    eax,edi
c000280c:	83 e2 0f             	and    edx,0xf
c000280f:	c1 e0 04             	shl    eax,0x4
c0002812:	25 f0 0f 00 00       	and    eax,0xff0
c0002817:	09 d0                	or     eax,edx
c0002819:	88 01                	mov    BYTE PTR [ecx],al
c000281b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000281f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002823:	c1 ea 09             	shr    edx,0x9
c0002826:	89 f0                	mov    eax,esi
c0002828:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000282b:	e8 0e fb ff ff       	call   c000233e <move_window>
c0002830:	89 c5                	mov    ebp,eax
c0002832:	85 c0                	test   eax,eax
c0002834:	0f 85 95 00 00 00    	jne    c00028cf <put_fat+0x14d>
c000283a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000283e:	25 ff 01 00 00       	and    eax,0x1ff
c0002843:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002847:	85 db                	test   ebx,ebx
c0002849:	74 07                	je     c0002852 <put_fat+0xd0>
c000284b:	c1 ef 04             	shr    edi,0x4
c000284e:	89 f9                	mov    ecx,edi
c0002850:	eb 0d                	jmp    c000285f <put_fat+0xdd>
c0002852:	8a 08                	mov    cl,BYTE PTR [eax]
c0002854:	c1 ef 08             	shr    edi,0x8
c0002857:	83 e1 f0             	and    ecx,0xfffffff0
c000285a:	83 e7 0f             	and    edi,0xf
c000285d:	09 f9                	or     ecx,edi
c000285f:	88 08                	mov    BYTE PTR [eax],cl
c0002861:	eb 27                	jmp    c000288a <put_fat+0x108>
c0002863:	c1 ea 08             	shr    edx,0x8
c0002866:	89 f0                	mov    eax,esi
c0002868:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000286b:	e8 ce fa ff ff       	call   c000233e <move_window>
c0002870:	89 c5                	mov    ebp,eax
c0002872:	85 c0                	test   eax,eax
c0002874:	75 59                	jne    c00028cf <put_fat+0x14d>
c0002876:	01 db                	add    ebx,ebx
c0002878:	0f b7 d7             	movzx  edx,di
c000287b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002881:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002885:	e8 72 f5 ff ff       	call   c0001dfc <st_word>
c000288a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000288e:	eb 3f                	jmp    c00028cf <put_fat+0x14d>
c0002890:	c1 ea 07             	shr    edx,0x7
c0002893:	89 f0                	mov    eax,esi
c0002895:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002898:	e8 a1 fa ff ff       	call   c000233e <move_window>
c000289d:	89 c5                	mov    ebp,eax
c000289f:	85 c0                	test   eax,eax
c00028a1:	75 2c                	jne    c00028cf <put_fat+0x14d>
c00028a3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028a9:	c1 e3 02             	shl    ebx,0x2
c00028ac:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028b2:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00028b6:	89 d8                	mov    eax,ebx
c00028b8:	e8 27 f5 ff ff       	call   c0001de4 <ld_dword>
c00028bd:	25 00 00 00 f0       	and    eax,0xf0000000
c00028c2:	09 f8                	or     eax,edi
c00028c4:	89 c2                	mov    edx,eax
c00028c6:	89 d8                	mov    eax,ebx
c00028c8:	e8 33 f5 ff ff       	call   c0001e00 <st_dword>
c00028cd:	eb bb                	jmp    c000288a <put_fat+0x108>
c00028cf:	83 c4 1c             	add    esp,0x1c
c00028d2:	89 e8                	mov    eax,ebp
c00028d4:	5b                   	pop    ebx
c00028d5:	5e                   	pop    esi
c00028d6:	5f                   	pop    edi
c00028d7:	5d                   	pop    ebp
c00028d8:	c3                   	ret    

c00028d9 <dir_clear>:
c00028d9:	55                   	push   ebp
c00028da:	57                   	push   edi
c00028db:	56                   	push   esi
c00028dc:	89 c6                	mov    esi,eax
c00028de:	53                   	push   ebx
c00028df:	83 ec 1c             	sub    esp,0x1c
c00028e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00028e6:	e8 f0 f9 ff ff       	call   c00022db <sync_window>
c00028eb:	85 c0                	test   eax,eax
c00028ed:	0f 85 c0 00 00 00    	jne    c00029b3 <dir_clear+0xda>
c00028f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f7:	89 f0                	mov    eax,esi
c00028f9:	e8 30 f7 ff ff       	call   c000202e <clst2sect>
c00028fe:	31 d2                	xor    edx,edx
c0002900:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002903:	89 c5                	mov    ebp,eax
c0002905:	b9 00 02 00 00       	mov    ecx,0x200
c000290a:	8d 46 34             	lea    eax,[esi+0x34]
c000290d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002911:	e8 02 f5 ff ff       	call   c0001e18 <mem_set>
c0002916:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000291a:	c1 e3 09             	shl    ebx,0x9
c000291d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002923:	76 1b                	jbe    c0002940 <dir_clear+0x67>
c0002925:	bb 00 80 00 00       	mov    ebx,0x8000
c000292a:	eb 14                	jmp    c0002940 <dir_clear+0x67>
c000292c:	83 ec 0c             	sub    esp,0xc
c000292f:	53                   	push   ebx
c0002930:	e8 eb 32 00 00       	call   c0005c20 <ff_memalloc>
c0002935:	83 c4 10             	add    esp,0x10
c0002938:	89 c7                	mov    edi,eax
c000293a:	85 c0                	test   eax,eax
c000293c:	75 7c                	jne    c00029ba <dir_clear+0xe1>
c000293e:	d1 eb                	shr    ebx,1
c0002940:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002946:	77 e4                	ja     c000292c <dir_clear+0x53>
c0002948:	31 db                	xor    ebx,ebx
c000294a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000294e:	39 d8                	cmp    eax,ebx
c0002950:	76 53                	jbe    c00029a5 <dir_clear+0xcc>
c0002952:	6a 01                	push   0x1
c0002954:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002957:	50                   	push   eax
c0002958:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000295c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002960:	50                   	push   eax
c0002961:	e8 3c f4 ff ff       	call   c0001da2 <disk_write>
c0002966:	83 c4 10             	add    esp,0x10
c0002969:	85 c0                	test   eax,eax
c000296b:	75 38                	jne    c00029a5 <dir_clear+0xcc>
c000296d:	43                   	inc    ebx
c000296e:	eb da                	jmp    c000294a <dir_clear+0x71>
c0002970:	52                   	push   edx
c0002971:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002974:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002978:	50                   	push   eax
c0002979:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000297d:	57                   	push   edi
c000297e:	50                   	push   eax
c000297f:	e8 1e f4 ff ff       	call   c0001da2 <disk_write>
c0002984:	83 c4 10             	add    esp,0x10
c0002987:	85 c0                	test   eax,eax
c0002989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000298d:	75 0a                	jne    c0002999 <dir_clear+0xc0>
c000298f:	01 d3                	add    ebx,edx
c0002991:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002995:	39 d8                	cmp    eax,ebx
c0002997:	77 d7                	ja     c0002970 <dir_clear+0x97>
c0002999:	83 ec 0c             	sub    esp,0xc
c000299c:	57                   	push   edi
c000299d:	e8 96 32 00 00       	call   c0005c38 <ff_memfree>
c00029a2:	83 c4 10             	add    esp,0x10
c00029a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029a9:	39 d8                	cmp    eax,ebx
c00029ab:	0f 95 c0             	setne  al
c00029ae:	0f b6 c0             	movzx  eax,al
c00029b1:	eb 19                	jmp    c00029cc <dir_clear+0xf3>
c00029b3:	b8 01 00 00 00       	mov    eax,0x1
c00029b8:	eb 12                	jmp    c00029cc <dir_clear+0xf3>
c00029ba:	89 d9                	mov    ecx,ebx
c00029bc:	31 d2                	xor    edx,edx
c00029be:	e8 55 f4 ff ff       	call   c0001e18 <mem_set>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	31 db                	xor    ebx,ebx
c00029c7:	c1 ea 09             	shr    edx,0x9
c00029ca:	eb c5                	jmp    c0002991 <dir_clear+0xb8>
c00029cc:	83 c4 1c             	add    esp,0x1c
c00029cf:	5b                   	pop    ebx
c00029d0:	5e                   	pop    esi
c00029d1:	5f                   	pop    edi
c00029d2:	5d                   	pop    ebp
c00029d3:	c3                   	ret    

c00029d4 <create_name>:
c00029d4:	55                   	push   ebp
c00029d5:	57                   	push   edi
c00029d6:	89 d7                	mov    edi,edx
c00029d8:	56                   	push   esi
c00029d9:	31 f6                	xor    esi,esi
c00029db:	53                   	push   ebx
c00029dc:	83 ec 3c             	sub    esp,0x3c
c00029df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029e3:	8b 02                	mov    eax,DWORD PTR [edx]
c00029e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00029e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00029ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00029f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029f6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00029fa:	e8 5e f4 ff ff       	call   c0001e5d <tchar2uni>
c00029ff:	89 c3                	mov    ebx,eax
c0002a01:	83 f8 ff             	cmp    eax,0xffffffff
c0002a04:	75 0a                	jne    c0002a10 <create_name+0x3c>
c0002a06:	b8 06 00 00 00       	mov    eax,0x6
c0002a0b:	e9 93 02 00 00       	jmp    c0002ca3 <create_name+0x2cf>
c0002a10:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a15:	76 0c                	jbe    c0002a23 <create_name+0x4f>
c0002a17:	c1 e8 10             	shr    eax,0x10
c0002a1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a1e:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002a22:	46                   	inc    esi
c0002a23:	0f b7 d3             	movzx  edx,bx
c0002a26:	83 fa 1f             	cmp    edx,0x1f
c0002a29:	76 4a                	jbe    c0002a75 <create_name+0xa1>
c0002a2b:	83 fa 5c             	cmp    edx,0x5c
c0002a2e:	74 30                	je     c0002a60 <create_name+0x8c>
c0002a30:	83 fa 2f             	cmp    edx,0x2f
c0002a33:	74 2b                	je     c0002a60 <create_name+0x8c>
c0002a35:	83 fa 7f             	cmp    edx,0x7f
c0002a38:	77 0e                	ja     c0002a48 <create_name+0x74>
c0002a3a:	b8 a2 ff 01 c0       	mov    eax,0xc001ffa2
c0002a3f:	e8 02 f4 ff ff       	call   c0001e46 <chk_chr>
c0002a44:	85 c0                	test   eax,eax
c0002a46:	75 be                	jne    c0002a06 <create_name+0x32>
c0002a48:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a4e:	77 b6                	ja     c0002a06 <create_name+0x32>
c0002a50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a54:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002a58:	46                   	inc    esi
c0002a59:	eb 9b                	jmp    c00029f6 <create_name+0x22>
c0002a5b:	40                   	inc    eax
c0002a5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a64:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002a67:	83 fa 2f             	cmp    edx,0x2f
c0002a6a:	74 ef                	je     c0002a5b <create_name+0x87>
c0002a6c:	83 fa 5c             	cmp    edx,0x5c
c0002a6f:	74 ea                	je     c0002a5b <create_name+0x87>
c0002a71:	31 db                	xor    ebx,ebx
c0002a73:	eb 02                	jmp    c0002a77 <create_name+0xa3>
c0002a75:	b3 04                	mov    bl,0x4
c0002a77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a7b:	89 07                	mov    DWORD PTR [edi],eax
c0002a7d:	85 f6                	test   esi,esi
c0002a7f:	74 16                	je     c0002a97 <create_name+0xc3>
c0002a81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a85:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002a8a:	83 f8 20             	cmp    eax,0x20
c0002a8d:	74 05                	je     c0002a94 <create_name+0xc0>
c0002a8f:	83 f8 2e             	cmp    eax,0x2e
c0002a92:	75 03                	jne    c0002a97 <create_name+0xc3>
c0002a94:	4e                   	dec    esi
c0002a95:	eb e6                	jmp    c0002a7d <create_name+0xa9>
c0002a97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9b:	31 ff                	xor    edi,edi
c0002a9d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002aa3:	85 f6                	test   esi,esi
c0002aa5:	0f 84 5b ff ff ff    	je     c0002a06 <create_name+0x32>
c0002aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aaf:	8d 57 01             	lea    edx,[edi+0x1]
c0002ab2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ab6:	83 f8 20             	cmp    eax,0x20
c0002ab9:	75 04                	jne    c0002abf <create_name+0xeb>
c0002abb:	89 d7                	mov    edi,edx
c0002abd:	eb ec                	jmp    c0002aab <create_name+0xd7>
c0002abf:	85 ff                	test   edi,edi
c0002ac1:	75 05                	jne    c0002ac8 <create_name+0xf4>
c0002ac3:	83 f8 2e             	cmp    eax,0x2e
c0002ac6:	75 08                	jne    c0002ad0 <create_name+0xfc>
c0002ac8:	83 cb 03             	or     ebx,0x3
c0002acb:	eb 03                	jmp    c0002ad0 <create_name+0xfc>
c0002acd:	4e                   	dec    esi
c0002ace:	74 0c                	je     c0002adc <create_name+0x108>
c0002ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad4:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002ada:	75 f1                	jne    c0002acd <create_name+0xf9>
c0002adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002ae0:	b9 0b 00 00 00       	mov    ecx,0xb
c0002ae5:	83 c0 20             	add    eax,0x20
c0002ae8:	ba 20 00 00 00       	mov    edx,0x20
c0002aed:	31 ed                	xor    ebp,ebp
c0002aef:	e8 24 f3 ff ff       	call   c0001e18 <mem_set>
c0002af4:	b9 08 00 00 00       	mov    ecx,0x8
c0002af9:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002afe:	8d 47 01             	lea    eax,[edi+0x1]
c0002b01:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002b05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b09:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b0d:	89 c7                	mov    edi,eax
c0002b0f:	85 c0                	test   eax,eax
c0002b11:	0f 84 25 01 00 00    	je     c0002c3c <create_name+0x268>
c0002b17:	83 f8 20             	cmp    eax,0x20
c0002b1a:	74 0f                	je     c0002b2b <create_name+0x157>
c0002b1c:	83 f8 2e             	cmp    eax,0x2e
c0002b1f:	75 13                	jne    c0002b34 <create_name+0x160>
c0002b21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b25:	0f 84 6a 01 00 00    	je     c0002c95 <create_name+0x2c1>
c0002b2b:	83 cb 03             	or     ebx,0x3
c0002b2e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002b32:	eb ca                	jmp    c0002afe <create_name+0x12a>
c0002b34:	39 cd                	cmp    ebp,ecx
c0002b36:	73 0b                	jae    c0002b43 <create_name+0x16f>
c0002b38:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b3c:	75 3f                	jne    c0002b7d <create_name+0x1a9>
c0002b3e:	e9 52 01 00 00       	jmp    c0002c95 <create_name+0x2c1>
c0002b43:	83 f9 0b             	cmp    ecx,0xb
c0002b46:	75 0d                	jne    c0002b55 <create_name+0x181>
c0002b48:	83 cb 03             	or     ebx,0x3
c0002b4b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b50:	e9 e7 00 00 00       	jmp    c0002c3c <create_name+0x268>
c0002b55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b59:	74 0d                	je     c0002b68 <create_name+0x194>
c0002b5b:	83 cb 03             	or     ebx,0x3
c0002b5e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b62:	0f 87 d4 00 00 00    	ja     c0002c3c <create_name+0x268>
c0002b68:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002b6d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002b71:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b76:	bd 08 00 00 00       	mov    ebp,0x8
c0002b7b:	eb b1                	jmp    c0002b2e <create_name+0x15a>
c0002b7d:	83 f8 7f             	cmp    eax,0x7f
c0002b80:	76 66                	jbe    c0002be8 <create_name+0x214>
c0002b82:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002b86:	89 d9                	mov    ecx,ebx
c0002b88:	83 c9 02             	or     ecx,0x2
c0002b8b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b8f:	52                   	push   edx
c0002b90:	52                   	push   edx
c0002b91:	68 b5 01 00 00       	push   0x1b5
c0002b96:	50                   	push   eax
c0002b97:	e8 b4 30 00 00       	call   c0005c50 <ff_uni2oem>
c0002b9c:	83 c4 10             	add    esp,0x10
c0002b9f:	89 c7                	mov    edi,eax
c0002ba1:	a8 80                	test   al,0x80
c0002ba3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002ba7:	74 0c                	je     c0002bb5 <create_name+0x1e1>
c0002ba9:	83 e7 7f             	and    edi,0x7f
c0002bac:	0f b6 bf 60 00 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdffa0]
c0002bb3:	eb 2a                	jmp    c0002bdf <create_name+0x20b>
c0002bb5:	0f b7 c0             	movzx  eax,ax
c0002bb8:	3d ff 00 00 00       	cmp    eax,0xff
c0002bbd:	76 20                	jbe    c0002bdf <create_name+0x20b>
c0002bbf:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002bc2:	39 ea                	cmp    edx,ebp
c0002bc4:	77 0a                	ja     c0002bd0 <create_name+0x1fc>
c0002bc6:	83 cb 03             	or     ebx,0x3
c0002bc9:	89 cd                	mov    ebp,ecx
c0002bcb:	e9 5e ff ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002bd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002bd4:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002bd8:	45                   	inc    ebp
c0002bd9:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002bdd:	eb 4d                	jmp    c0002c2c <create_name+0x258>
c0002bdf:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002be3:	66 85 ff             	test   di,di
c0002be6:	74 19                	je     c0002c01 <create_name+0x22d>
c0002be8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bec:	0f b7 d7             	movzx  edx,di
c0002bef:	b8 ab ff 01 c0       	mov    eax,0xc001ffab
c0002bf4:	e8 4d f2 ff ff       	call   c0001e46 <chk_chr>
c0002bf9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002bfd:	85 c0                	test   eax,eax
c0002bff:	74 0a                	je     c0002c0b <create_name+0x237>
c0002c01:	83 cb 03             	or     ebx,0x3
c0002c04:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c09:	eb 21                	jmp    c0002c2c <create_name+0x258>
c0002c0b:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c0e:	66 83 f8 19          	cmp    ax,0x19
c0002c12:	77 07                	ja     c0002c1b <create_name+0x247>
c0002c14:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c19:	eb 11                	jmp    c0002c2c <create_name+0x258>
c0002c1b:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c1e:	66 83 f8 19          	cmp    ax,0x19
c0002c22:	77 08                	ja     c0002c2c <create_name+0x258>
c0002c24:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c29:	83 ef 20             	sub    edi,0x20
c0002c2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002c30:	89 f8                	mov    eax,edi
c0002c32:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002c36:	45                   	inc    ebp
c0002c37:	e9 f2 fe ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c40:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002c44:	75 04                	jne    c0002c4a <create_name+0x276>
c0002c46:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002c4a:	83 f9 08             	cmp    ecx,0x8
c0002c4d:	75 05                	jne    c0002c54 <create_name+0x280>
c0002c4f:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c58:	83 e0 0c             	and    eax,0xc
c0002c5b:	83 f8 0c             	cmp    eax,0xc
c0002c5e:	74 0c                	je     c0002c6c <create_name+0x298>
c0002c60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c64:	83 e0 03             	and    eax,0x3
c0002c67:	83 f8 03             	cmp    eax,0x3
c0002c6a:	75 05                	jne    c0002c71 <create_name+0x29d>
c0002c6c:	83 cb 02             	or     ebx,0x2
c0002c6f:	eb 19                	jmp    c0002c8a <create_name+0x2b6>
c0002c71:	f6 c3 02             	test   bl,0x2
c0002c74:	75 14                	jne    c0002c8a <create_name+0x2b6>
c0002c76:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002c7b:	74 03                	je     c0002c80 <create_name+0x2ac>
c0002c7d:	83 cb 10             	or     ebx,0x10
c0002c80:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002c85:	74 03                	je     c0002c8a <create_name+0x2b6>
c0002c87:	83 cb 08             	or     ebx,0x8
c0002c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c8e:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002c91:	31 c0                	xor    eax,eax
c0002c93:	eb 0e                	jmp    c0002ca3 <create_name+0x2cf>
c0002c95:	83 f9 0b             	cmp    ecx,0xb
c0002c98:	0f 85 ca fe ff ff    	jne    c0002b68 <create_name+0x194>
c0002c9e:	e9 a5 fe ff ff       	jmp    c0002b48 <create_name+0x174>
c0002ca3:	83 c4 3c             	add    esp,0x3c
c0002ca6:	5b                   	pop    ebx
c0002ca7:	5e                   	pop    esi
c0002ca8:	5f                   	pop    edi
c0002ca9:	5d                   	pop    ebp
c0002caa:	c3                   	ret    

c0002cab <cmp_lfn>:
c0002cab:	55                   	push   ebp
c0002cac:	57                   	push   edi
c0002cad:	89 d7                	mov    edi,edx
c0002caf:	56                   	push   esi
c0002cb0:	53                   	push   ebx
c0002cb1:	83 ec 1c             	sub    esp,0x1c
c0002cb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cbb:	e8 17 f1 ff ff       	call   c0001dd7 <ld_word>
c0002cc0:	66 85 c0             	test   ax,ax
c0002cc3:	74 07                	je     c0002ccc <cmp_lfn+0x21>
c0002cc5:	31 c0                	xor    eax,eax
c0002cc7:	e9 a1 00 00 00       	jmp    c0002d6d <cmp_lfn+0xc2>
c0002ccc:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cce:	bd 01 00 00 00       	mov    ebp,0x1
c0002cd3:	83 e3 3f             	and    ebx,0x3f
c0002cd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002cde:	4b                   	dec    ebx
c0002cdf:	6b db 0d             	imul   ebx,ebx,0xd
c0002ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce6:	0f b6 80 e0 00 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdff20]
c0002ced:	01 f8                	add    eax,edi
c0002cef:	e8 e3 f0 ff ff       	call   c0001dd7 <ld_word>
c0002cf4:	66 85 ed             	test   bp,bp
c0002cf7:	89 c6                	mov    esi,eax
c0002cf9:	74 3c                	je     c0002d37 <cmp_lfn+0x8c>
c0002cfb:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d01:	77 c2                	ja     c0002cc5 <cmp_lfn+0x1a>
c0002d03:	83 ec 0c             	sub    esp,0xc
c0002d06:	0f b7 c0             	movzx  eax,ax
c0002d09:	50                   	push   eax
c0002d0a:	e8 59 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d0f:	89 c5                	mov    ebp,eax
c0002d11:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002d18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002d1c:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d23:	e8 40 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d28:	83 c4 10             	add    esp,0x10
c0002d2b:	39 c5                	cmp    ebp,eax
c0002d2d:	75 96                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d2f:	89 f5                	mov    ebp,esi
c0002d31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002d35:	eb 0b                	jmp    c0002d42 <cmp_lfn+0x97>
c0002d37:	0f b7 c8             	movzx  ecx,ax
c0002d3a:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002d40:	75 83                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d42:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002d46:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002d4b:	75 95                	jne    c0002ce2 <cmp_lfn+0x37>
c0002d4d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d50:	74 16                	je     c0002d68 <cmp_lfn+0xbd>
c0002d52:	66 85 ed             	test   bp,bp
c0002d55:	74 11                	je     c0002d68 <cmp_lfn+0xbd>
c0002d57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d5b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d60:	0f 94 c0             	sete   al
c0002d63:	0f b6 c0             	movzx  eax,al
c0002d66:	eb 05                	jmp    c0002d6d <cmp_lfn+0xc2>
c0002d68:	b8 01 00 00 00       	mov    eax,0x1
c0002d6d:	83 c4 1c             	add    esp,0x1c
c0002d70:	5b                   	pop    ebx
c0002d71:	5e                   	pop    esi
c0002d72:	5f                   	pop    edi
c0002d73:	5d                   	pop    ebp
c0002d74:	c3                   	ret    

c0002d75 <sync_fs>:
c0002d75:	56                   	push   esi
c0002d76:	53                   	push   ebx
c0002d77:	53                   	push   ebx
c0002d78:	89 c3                	mov    ebx,eax
c0002d7a:	e8 5c f5 ff ff       	call   c00022db <sync_window>
c0002d7f:	85 c0                	test   eax,eax
c0002d81:	0f 85 9a 00 00 00    	jne    c0002e21 <sync_fs+0xac>
c0002d87:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002d8a:	75 7b                	jne    c0002e07 <sync_fs+0x92>
c0002d8c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002d90:	75 75                	jne    c0002e07 <sync_fs+0x92>
c0002d92:	b9 00 02 00 00       	mov    ecx,0x200
c0002d97:	8d 73 34             	lea    esi,[ebx+0x34]
c0002d9a:	31 d2                	xor    edx,edx
c0002d9c:	89 f0                	mov    eax,esi
c0002d9e:	e8 75 f0 ff ff       	call   c0001e18 <mem_set>
c0002da3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002da9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dae:	e8 49 f0 ff ff       	call   c0001dfc <st_word>
c0002db3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002db8:	89 f0                	mov    eax,esi
c0002dba:	e8 41 f0 ff ff       	call   c0001e00 <st_dword>
c0002dbf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002dc5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dca:	e8 31 f0 ff ff       	call   c0001e00 <st_dword>
c0002dcf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002dd2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002dd8:	e8 23 f0 ff ff       	call   c0001e00 <st_dword>
c0002ddd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002de0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002de6:	e8 15 f0 ff ff       	call   c0001e00 <st_dword>
c0002deb:	6a 01                	push   0x1
c0002ded:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002df0:	40                   	inc    eax
c0002df1:	50                   	push   eax
c0002df2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002df5:	56                   	push   esi
c0002df6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002dfa:	50                   	push   eax
c0002dfb:	e8 a2 ef ff ff       	call   c0001da2 <disk_write>
c0002e00:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e04:	83 c4 10             	add    esp,0x10
c0002e07:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e0b:	51                   	push   ecx
c0002e0c:	6a 00                	push   0x0
c0002e0e:	6a 00                	push   0x0
c0002e10:	50                   	push   eax
c0002e11:	e8 a2 ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e16:	83 c4 10             	add    esp,0x10
c0002e19:	85 c0                	test   eax,eax
c0002e1b:	0f 95 c0             	setne  al
c0002e1e:	0f b6 c0             	movzx  eax,al
c0002e21:	5a                   	pop    edx
c0002e22:	5b                   	pop    ebx
c0002e23:	5e                   	pop    esi
c0002e24:	c3                   	ret    

c0002e25 <create_partition>:
c0002e25:	55                   	push   ebp
c0002e26:	0f b6 c0             	movzx  eax,al
c0002e29:	57                   	push   edi
c0002e2a:	56                   	push   esi
c0002e2b:	53                   	push   ebx
c0002e2c:	83 ec 40             	sub    esp,0x40
c0002e2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e3b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e3f:	50                   	push   eax
c0002e40:	6a 01                	push   0x1
c0002e42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e46:	e8 6d ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e4b:	83 c4 10             	add    esp,0x10
c0002e4e:	85 c0                	test   eax,eax
c0002e50:	0f 85 6a 01 00 00    	jne    c0002fc0 <create_partition+0x19b>
c0002e56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002e5a:	b9 05 00 00 00       	mov    ecx,0x5
c0002e5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002e63:	be 08 00 00 00       	mov    esi,0x8
c0002e68:	89 f0                	mov    eax,esi
c0002e6a:	31 d2                	xor    edx,edx
c0002e6c:	0f b6 d8             	movzx  ebx,al
c0002e6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e73:	f7 f3                	div    ebx
c0002e75:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002e7a:	76 0a                	jbe    c0002e86 <create_partition+0x61>
c0002e7c:	d1 e6                	shl    esi,1
c0002e7e:	49                   	dec    ecx
c0002e7f:	75 e7                	jne    c0002e68 <create_partition+0x43>
c0002e81:	be ff ff ff ff       	mov    esi,0xffffffff
c0002e86:	b9 00 02 00 00       	mov    ecx,0x200
c0002e8b:	31 d2                	xor    edx,edx
c0002e8d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002e91:	e8 82 ef ff ff       	call   c0001e18 <mem_set>
c0002e96:	b9 64 00 00 00       	mov    ecx,0x64
c0002e9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ea9:	f7 f1                	div    ecx
c0002eab:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002eb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002ebe:	89 f0                	mov    eax,esi
c0002ec0:	0f b6 c0             	movzx  eax,al
c0002ec3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ec7:	85 c9                	test   ecx,ecx
c0002ec9:	75 34                	jne    c0002eff <create_partition+0xda>
c0002ecb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ecf:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ed4:	05 fe 01 00 00       	add    eax,0x1fe
c0002ed9:	e8 1e ef ff ff       	call   c0001dfc <st_word>
c0002ede:	6a 01                	push   0x1
c0002ee0:	6a 00                	push   0x0
c0002ee2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002ee6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002eea:	e8 b3 ee ff ff       	call   c0001da2 <disk_write>
c0002eef:	83 c4 10             	add    esp,0x10
c0002ef2:	85 c0                	test   eax,eax
c0002ef4:	0f 95 c0             	setne  al
c0002ef7:	0f b6 c0             	movzx  eax,al
c0002efa:	e9 c6 00 00 00       	jmp    c0002fc5 <create_partition+0x1a0>
c0002eff:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002f03:	76 c6                	jbe    c0002ecb <create_partition+0xa6>
c0002f05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f09:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f0d:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f10:	83 fe 64             	cmp    esi,0x64
c0002f13:	77 0d                	ja     c0002f22 <create_partition+0xfd>
c0002f15:	74 07                	je     c0002f1e <create_partition+0xf9>
c0002f17:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f1c:	eb 04                	jmp    c0002f22 <create_partition+0xfd>
c0002f1e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f22:	31 c0                	xor    eax,eax
c0002f24:	89 f2                	mov    edx,esi
c0002f26:	01 ca                	add    edx,ecx
c0002f28:	0f 92 c0             	setb   al
c0002f2b:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002f2f:	77 04                	ja     c0002f35 <create_partition+0x110>
c0002f31:	85 c0                	test   eax,eax
c0002f33:	74 08                	je     c0002f3d <create_partition+0x118>
c0002f35:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f39:	29 ce                	sub    esi,ecx
c0002f3b:	eb 04                	jmp    c0002f41 <create_partition+0x11c>
c0002f3d:	85 f6                	test   esi,esi
c0002f3f:	74 8a                	je     c0002ecb <create_partition+0xa6>
c0002f41:	89 ca                	mov    edx,ecx
c0002f43:	89 d8                	mov    eax,ebx
c0002f45:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f4a:	e8 b1 ee ff ff       	call   c0001e00 <st_dword>
c0002f4f:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f52:	89 f2                	mov    edx,esi
c0002f54:	83 c3 10             	add    ebx,0x10
c0002f57:	e8 a4 ee ff ff       	call   c0001e00 <st_dword>
c0002f5c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f60:	31 d2                	xor    edx,edx
c0002f62:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f65:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f69:	89 c8                	mov    eax,ecx
c0002f6b:	01 f1                	add    ecx,esi
c0002f6d:	f7 f7                	div    edi
c0002f6f:	89 d5                	mov    ebp,edx
c0002f71:	31 d2                	xor    edx,edx
c0002f73:	45                   	inc    ebp
c0002f74:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f78:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f7b:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f7e:	89 c2                	mov    edx,eax
c0002f80:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f83:	c1 ea 02             	shr    edx,0x2
c0002f86:	83 e2 c0             	and    edx,0xffffffc0
c0002f89:	09 ea                	or     edx,ebp
c0002f8b:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f8e:	31 d2                	xor    edx,edx
c0002f90:	f7 f7                	div    edi
c0002f92:	89 d6                	mov    esi,edx
c0002f94:	31 d2                	xor    edx,edx
c0002f96:	46                   	inc    esi
c0002f97:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f9b:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002f9e:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002fa1:	89 c7                	mov    edi,eax
c0002fa3:	c1 ef 02             	shr    edi,0x2
c0002fa6:	83 e7 c0             	and    edi,0xffffffc0
c0002fa9:	09 fe                	or     esi,edi
c0002fab:	89 f2                	mov    edx,esi
c0002fad:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fb0:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0002fb5:	0f 85 0c ff ff ff    	jne    c0002ec7 <create_partition+0xa2>
c0002fbb:	e9 0b ff ff ff       	jmp    c0002ecb <create_partition+0xa6>
c0002fc0:	b8 01 00 00 00       	mov    eax,0x1
c0002fc5:	83 c4 3c             	add    esp,0x3c
c0002fc8:	5b                   	pop    ebx
c0002fc9:	5e                   	pop    esi
c0002fca:	5f                   	pop    edi
c0002fcb:	5d                   	pop    ebp
c0002fcc:	c3                   	ret    

c0002fcd <get_fileinfo>:
c0002fcd:	55                   	push   ebp
c0002fce:	57                   	push   edi
c0002fcf:	56                   	push   esi
c0002fd0:	53                   	push   ebx
c0002fd1:	83 ec 1c             	sub    esp,0x1c
c0002fd4:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fd6:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002fda:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002fde:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002fe2:	0f 84 d3 01 00 00    	je     c00031bb <get_fileinfo+0x1ee>
c0002fe8:	89 d3                	mov    ebx,edx
c0002fea:	89 c6                	mov    esi,eax
c0002fec:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002ff0:	74 72                	je     c0003064 <get_fileinfo+0x97>
c0002ff2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ffa:	31 ed                	xor    ebp,ebp
c0002ffc:	31 ff                	xor    edi,edi
c0002ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003002:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0003006:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003009:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c000300d:	89 c2                	mov    edx,eax
c000300f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003013:	85 c0                	test   eax,eax
c0003015:	74 41                	je     c0003058 <get_fileinfo+0x8b>
c0003017:	0f b7 c5             	movzx  eax,bp
c000301a:	85 c0                	test   eax,eax
c000301c:	75 0d                	jne    c000302b <get_fileinfo+0x5e>
c000301e:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003024:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003029:	76 22                	jbe    c000304d <get_fileinfo+0x80>
c000302b:	c1 e0 10             	shl    eax,0x10
c000302e:	b9 ff 00 00 00       	mov    ecx,0xff
c0003033:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003037:	29 f9                	sub    ecx,edi
c0003039:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c000303d:	e8 f3 ee ff ff       	call   c0001f35 <put_utf>
c0003042:	0f b6 c0             	movzx  eax,al
c0003045:	85 c0                	test   eax,eax
c0003047:	74 0d                	je     c0003056 <get_fileinfo+0x89>
c0003049:	01 c7                	add    edi,eax
c000304b:	31 d2                	xor    edx,edx
c000304d:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c0003052:	89 d5                	mov    ebp,edx
c0003054:	eb a8                	jmp    c0002ffe <get_fileinfo+0x31>
c0003056:	31 ff                	xor    edi,edi
c0003058:	66 85 ed             	test   bp,bp
c000305b:	74 02                	je     c000305f <get_fileinfo+0x92>
c000305d:	31 ff                	xor    edi,edi
c000305f:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003064:	31 ff                	xor    edi,edi
c0003066:	31 c9                	xor    ecx,ecx
c0003068:	83 f9 0a             	cmp    ecx,0xa
c000306b:	0f 87 ac 00 00 00    	ja     c000311d <get_fileinfo+0x150>
c0003071:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003074:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003077:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000307b:	89 c2                	mov    edx,eax
c000307d:	83 f8 20             	cmp    eax,0x20
c0003080:	0f 84 90 00 00 00    	je     c0003116 <get_fileinfo+0x149>
c0003086:	83 f8 05             	cmp    eax,0x5
c0003089:	75 05                	jne    c0003090 <get_fileinfo+0xc3>
c000308b:	ba e5 00 00 00       	mov    edx,0xe5
c0003090:	83 ff 0b             	cmp    edi,0xb
c0003093:	77 0b                	ja     c00030a0 <get_fileinfo+0xd3>
c0003095:	83 fd 09             	cmp    ebp,0x9
c0003098:	75 06                	jne    c00030a0 <get_fileinfo+0xd3>
c000309a:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c000309f:	47                   	inc    edi
c00030a0:	0f b7 c2             	movzx  eax,dx
c00030a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030a7:	e8 ab ed ff ff       	call   c0001e57 <dbc_1st>
c00030ac:	85 c0                	test   eax,eax
c00030ae:	74 2f                	je     c00030df <get_fileinfo+0x112>
c00030b0:	83 fd 08             	cmp    ebp,0x8
c00030b3:	74 2a                	je     c00030df <get_fileinfo+0x112>
c00030b5:	83 fd 0b             	cmp    ebp,0xb
c00030b8:	74 25                	je     c00030df <get_fileinfo+0x112>
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030c1:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00030c5:	e8 90 ed ff ff       	call   c0001e5a <dbc_2nd>
c00030ca:	85 c0                	test   eax,eax
c00030cc:	74 11                	je     c00030df <get_fileinfo+0x112>
c00030ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00030d2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00030d7:	c1 e0 08             	shl    eax,0x8
c00030da:	8d 69 02             	lea    ebp,[ecx+0x2]
c00030dd:	09 c2                	or     edx,eax
c00030df:	0f b7 d2             	movzx  edx,dx
c00030e2:	50                   	push   eax
c00030e3:	50                   	push   eax
c00030e4:	68 b5 01 00 00       	push   0x1b5
c00030e9:	52                   	push   edx
c00030ea:	e8 01 2c 00 00       	call   c0005cf0 <ff_oem2uni>
c00030ef:	83 c4 10             	add    esp,0x10
c00030f2:	0f b7 c0             	movzx  eax,ax
c00030f5:	85 c0                	test   eax,eax
c00030f7:	75 04                	jne    c00030fd <get_fileinfo+0x130>
c00030f9:	31 ff                	xor    edi,edi
c00030fb:	eb 20                	jmp    c000311d <get_fileinfo+0x150>
c00030fd:	b9 0c 00 00 00       	mov    ecx,0xc
c0003102:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003106:	29 f9                	sub    ecx,edi
c0003108:	e8 28 ee ff ff       	call   c0001f35 <put_utf>
c000310d:	0f b6 c0             	movzx  eax,al
c0003110:	85 c0                	test   eax,eax
c0003112:	74 e5                	je     c00030f9 <get_fileinfo+0x12c>
c0003114:	01 c7                	add    edi,eax
c0003116:	89 e9                	mov    ecx,ebp
c0003118:	e9 4b ff ff ff       	jmp    c0003068 <get_fileinfo+0x9b>
c000311d:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003122:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003126:	75 5f                	jne    c0003187 <get_fileinfo+0x1ba>
c0003128:	85 ff                	test   edi,edi
c000312a:	75 0b                	jne    c0003137 <get_fileinfo+0x16a>
c000312c:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003130:	ba 01 00 00 00       	mov    edx,0x1
c0003135:	eb 3e                	jmp    c0003175 <get_fileinfo+0x1a8>
c0003137:	bf 08 00 00 00       	mov    edi,0x8
c000313c:	31 d2                	xor    edx,edx
c000313e:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003144:	84 c0                	test   al,al
c0003146:	74 2d                	je     c0003175 <get_fileinfo+0x1a8>
c0003148:	66 83 f8 2e          	cmp    ax,0x2e
c000314c:	74 1b                	je     c0003169 <get_fileinfo+0x19c>
c000314e:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003151:	66 83 f9 19          	cmp    cx,0x19
c0003155:	77 17                	ja     c000316e <get_fileinfo+0x1a1>
c0003157:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000315a:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000315d:	21 f9                	and    ecx,edi
c000315f:	80 e1 18             	and    cl,0x18
c0003162:	74 0a                	je     c000316e <get_fileinfo+0x1a1>
c0003164:	83 c0 20             	add    eax,0x20
c0003167:	eb 05                	jmp    c000316e <get_fileinfo+0x1a1>
c0003169:	bf 10 00 00 00       	mov    edi,0x10
c000316e:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003172:	42                   	inc    edx
c0003173:	eb c9                	jmp    c000313e <get_fileinfo+0x171>
c0003175:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000317a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000317d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003181:	75 04                	jne    c0003187 <get_fileinfo+0x1ba>
c0003183:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003187:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000318a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000318d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003190:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003193:	83 c0 1c             	add    eax,0x1c
c0003196:	e8 49 ec ff ff       	call   c0001de4 <ld_dword>
c000319b:	89 03                	mov    DWORD PTR [ebx],eax
c000319d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031a0:	83 c0 16             	add    eax,0x16
c00031a3:	e8 2f ec ff ff       	call   c0001dd7 <ld_word>
c00031a8:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031ac:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031af:	83 c0 18             	add    eax,0x18
c00031b2:	e8 20 ec ff ff       	call   c0001dd7 <ld_word>
c00031b7:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	5b                   	pop    ebx
c00031bf:	5e                   	pop    esi
c00031c0:	5f                   	pop    edi
c00031c1:	5d                   	pop    ebp
c00031c2:	c3                   	ret    

c00031c3 <ld_clust.isra.0>:
c00031c3:	56                   	push   esi
c00031c4:	89 c6                	mov    esi,eax
c00031c6:	53                   	push   ebx
c00031c7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00031ca:	89 d3                	mov    ebx,edx
c00031cc:	e8 06 ec ff ff       	call   c0001dd7 <ld_word>
c00031d1:	0f b7 c8             	movzx  ecx,ax
c00031d4:	89 f0                	mov    eax,esi
c00031d6:	3c 03                	cmp    al,0x3
c00031d8:	75 0d                	jne    c00031e7 <ld_clust.isra.0+0x24>
c00031da:	8d 43 14             	lea    eax,[ebx+0x14]
c00031dd:	e8 f5 eb ff ff       	call   c0001dd7 <ld_word>
c00031e2:	c1 e0 10             	shl    eax,0x10
c00031e5:	09 c1                	or     ecx,eax
c00031e7:	89 c8                	mov    eax,ecx
c00031e9:	5b                   	pop    ebx
c00031ea:	5e                   	pop    esi
c00031eb:	c3                   	ret    

c00031ec <st_clust.isra.1>:
c00031ec:	56                   	push   esi
c00031ed:	89 c6                	mov    esi,eax
c00031ef:	53                   	push   ebx
c00031f0:	89 d3                	mov    ebx,edx
c00031f2:	0f b7 d1             	movzx  edx,cx
c00031f5:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00031f8:	e8 ff eb ff ff       	call   c0001dfc <st_word>
c00031fd:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0003200:	75 0f                	jne    c0003211 <st_clust.isra.1+0x25>
c0003202:	c1 e9 10             	shr    ecx,0x10
c0003205:	8d 43 14             	lea    eax,[ebx+0x14]
c0003208:	89 ca                	mov    edx,ecx
c000320a:	5b                   	pop    ebx
c000320b:	5e                   	pop    esi
c000320c:	e9 eb eb ff ff       	jmp    c0001dfc <st_word>
c0003211:	5b                   	pop    ebx
c0003212:	5e                   	pop    esi
c0003213:	c3                   	ret    

c0003214 <get_fat.isra.2>:
c0003214:	b9 01 00 00 00       	mov    ecx,0x1
c0003219:	83 fa 01             	cmp    edx,0x1
c000321c:	0f 86 f3 00 00 00    	jbe    c0003315 <get_fat.isra.2+0x101>
c0003222:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003225:	0f 83 ea 00 00 00    	jae    c0003315 <get_fat.isra.2+0x101>
c000322b:	55                   	push   ebp
c000322c:	57                   	push   edi
c000322d:	89 c7                	mov    edi,eax
c000322f:	56                   	push   esi
c0003230:	89 d6                	mov    esi,edx
c0003232:	53                   	push   ebx
c0003233:	83 ec 0c             	sub    esp,0xc
c0003236:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003239:	83 f8 02             	cmp    eax,0x2
c000323c:	74 78                	je     c00032b6 <get_fat.isra.2+0xa2>
c000323e:	83 f8 03             	cmp    eax,0x3
c0003241:	0f 84 96 00 00 00    	je     c00032dd <get_fat.isra.2+0xc9>
c0003247:	48                   	dec    eax
c0003248:	0f 85 bd 00 00 00    	jne    c000330b <get_fat.isra.2+0xf7>
c000324e:	89 d3                	mov    ebx,edx
c0003250:	89 f8                	mov    eax,edi
c0003252:	d1 eb                	shr    ebx,1
c0003254:	01 d3                	add    ebx,edx
c0003256:	89 da                	mov    edx,ebx
c0003258:	c1 ea 09             	shr    edx,0x9
c000325b:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000325e:	e8 db f0 ff ff       	call   c000233e <move_window>
c0003263:	85 c0                	test   eax,eax
c0003265:	74 08                	je     c000326f <get_fat.isra.2+0x5b>
c0003267:	83 c9 ff             	or     ecx,0xffffffff
c000326a:	e9 9c 00 00 00       	jmp    c000330b <get_fat.isra.2+0xf7>
c000326f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003272:	89 f8                	mov    eax,edi
c0003274:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000327a:	89 ea                	mov    edx,ebp
c000327c:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003280:	c1 ea 09             	shr    edx,0x9
c0003283:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003286:	e8 b3 f0 ff ff       	call   c000233e <move_window>
c000328b:	85 c0                	test   eax,eax
c000328d:	75 d8                	jne    c0003267 <get_fat.isra.2+0x53>
c000328f:	0f b6 c3             	movzx  eax,bl
c0003292:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003298:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c000329d:	c1 e3 08             	shl    ebx,0x8
c00032a0:	09 c3                	or     ebx,eax
c00032a2:	89 d9                	mov    ecx,ebx
c00032a4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032aa:	83 e6 01             	and    esi,0x1
c00032ad:	74 5c                	je     c000330b <get_fat.isra.2+0xf7>
c00032af:	89 d9                	mov    ecx,ebx
c00032b1:	c1 e9 04             	shr    ecx,0x4
c00032b4:	eb 55                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032b6:	c1 ea 08             	shr    edx,0x8
c00032b9:	89 f8                	mov    eax,edi
c00032bb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032be:	e8 7b f0 ff ff       	call   c000233e <move_window>
c00032c3:	85 c0                	test   eax,eax
c00032c5:	75 a0                	jne    c0003267 <get_fat.isra.2+0x53>
c00032c7:	01 f6                	add    esi,esi
c00032c9:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00032cf:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032d3:	e8 ff ea ff ff       	call   c0001dd7 <ld_word>
c00032d8:	0f b7 c8             	movzx  ecx,ax
c00032db:	eb 2e                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032dd:	c1 ea 07             	shr    edx,0x7
c00032e0:	89 f8                	mov    eax,edi
c00032e2:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032e5:	e8 54 f0 ff ff       	call   c000233e <move_window>
c00032ea:	85 c0                	test   eax,eax
c00032ec:	0f 85 75 ff ff ff    	jne    c0003267 <get_fat.isra.2+0x53>
c00032f2:	c1 e6 02             	shl    esi,0x2
c00032f5:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00032fb:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032ff:	e8 e0 ea ff ff       	call   c0001de4 <ld_dword>
c0003304:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003309:	89 c1                	mov    ecx,eax
c000330b:	83 c4 0c             	add    esp,0xc
c000330e:	89 c8                	mov    eax,ecx
c0003310:	5b                   	pop    ebx
c0003311:	5e                   	pop    esi
c0003312:	5f                   	pop    edi
c0003313:	5d                   	pop    ebp
c0003314:	c3                   	ret    
c0003315:	89 c8                	mov    eax,ecx
c0003317:	c3                   	ret    

c0003318 <dir_sdi>:
c0003318:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000331e:	0f 87 b6 00 00 00    	ja     c00033da <dir_sdi+0xc2>
c0003324:	55                   	push   ebp
c0003325:	57                   	push   edi
c0003326:	56                   	push   esi
c0003327:	53                   	push   ebx
c0003328:	89 d3                	mov    ebx,edx
c000332a:	83 ec 1c             	sub    esp,0x1c
c000332d:	f6 c2 1f             	test   dl,0x1f
c0003330:	74 0a                	je     c000333c <dir_sdi+0x24>
c0003332:	b8 02 00 00 00       	mov    eax,0x2
c0003337:	e9 96 00 00 00       	jmp    c00033d2 <dir_sdi+0xba>
c000333c:	89 c6                	mov    esi,eax
c000333e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003340:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003343:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003346:	85 c9                	test   ecx,ecx
c0003348:	75 23                	jne    c000336d <dir_sdi+0x55>
c000334a:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000334d:	76 07                	jbe    c0003356 <dir_sdi+0x3e>
c000334f:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003352:	85 c0                	test   eax,eax
c0003354:	75 15                	jne    c000336b <dir_sdi+0x53>
c0003356:	89 da                	mov    edx,ebx
c0003358:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000335c:	c1 ea 05             	shr    edx,0x5
c000335f:	39 c2                	cmp    edx,eax
c0003361:	73 cf                	jae    c0003332 <dir_sdi+0x1a>
c0003363:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003366:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003369:	eb 3d                	jmp    c00033a8 <dir_sdi+0x90>
c000336b:	89 c1                	mov    ecx,eax
c000336d:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003371:	c1 e5 09             	shl    ebp,0x9
c0003374:	89 ca                	mov    edx,ecx
c0003376:	39 eb                	cmp    ebx,ebp
c0003378:	72 1c                	jb     c0003396 <dir_sdi+0x7e>
c000337a:	8b 06                	mov    eax,DWORD PTR [esi]
c000337c:	e8 93 fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003381:	89 c1                	mov    ecx,eax
c0003383:	83 f8 ff             	cmp    eax,0xffffffff
c0003386:	74 45                	je     c00033cd <dir_sdi+0xb5>
c0003388:	83 f8 01             	cmp    eax,0x1
c000338b:	76 a5                	jbe    c0003332 <dir_sdi+0x1a>
c000338d:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003390:	76 a0                	jbe    c0003332 <dir_sdi+0x1a>
c0003392:	29 eb                	sub    ebx,ebp
c0003394:	eb de                	jmp    c0003374 <dir_sdi+0x5c>
c0003396:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000339a:	89 f8                	mov    eax,edi
c000339c:	e8 8d ec ff ff       	call   c000202e <clst2sect>
c00033a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033a5:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033a8:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ab:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00033ae:	85 d2                	test   edx,edx
c00033b0:	74 80                	je     c0003332 <dir_sdi+0x1a>
c00033b2:	89 d8                	mov    eax,ebx
c00033b4:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033ba:	c1 e8 09             	shr    eax,0x9
c00033bd:	01 d0                	add    eax,edx
c00033bf:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033c2:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00033c6:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00033c9:	31 c0                	xor    eax,eax
c00033cb:	eb 05                	jmp    c00033d2 <dir_sdi+0xba>
c00033cd:	b8 01 00 00 00       	mov    eax,0x1
c00033d2:	83 c4 1c             	add    esp,0x1c
c00033d5:	5b                   	pop    ebx
c00033d6:	5e                   	pop    esi
c00033d7:	5f                   	pop    edi
c00033d8:	5d                   	pop    ebp
c00033d9:	c3                   	ret    
c00033da:	b8 02 00 00 00       	mov    eax,0x2
c00033df:	c3                   	ret    

c00033e0 <create_chain>:
c00033e0:	55                   	push   ebp
c00033e1:	89 c5                	mov    ebp,eax
c00033e3:	57                   	push   edi
c00033e4:	89 d7                	mov    edi,edx
c00033e6:	56                   	push   esi
c00033e7:	53                   	push   ebx
c00033e8:	83 ec 1c             	sub    esp,0x1c
c00033eb:	85 d2                	test   edx,edx
c00033ed:	8b 30                	mov    esi,DWORD PTR [eax]
c00033ef:	75 0e                	jne    c00033ff <create_chain+0x1f>
c00033f1:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00033f4:	85 c9                	test   ecx,ecx
c00033f6:	74 34                	je     c000342c <create_chain+0x4c>
c00033f8:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00033fb:	77 34                	ja     c0003431 <create_chain+0x51>
c00033fd:	eb 2d                	jmp    c000342c <create_chain+0x4c>
c00033ff:	89 f0                	mov    eax,esi
c0003401:	e8 0e fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003406:	89 c3                	mov    ebx,eax
c0003408:	83 f8 01             	cmp    eax,0x1
c000340b:	77 0a                	ja     c0003417 <create_chain+0x37>
c000340d:	bb 01 00 00 00       	mov    ebx,0x1
c0003412:	e9 fe 00 00 00       	jmp    c0003515 <create_chain+0x135>
c0003417:	83 f8 ff             	cmp    eax,0xffffffff
c000341a:	0f 84 f2 00 00 00    	je     c0003512 <create_chain+0x132>
c0003420:	89 f9                	mov    ecx,edi
c0003422:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003425:	76 0a                	jbe    c0003431 <create_chain+0x51>
c0003427:	e9 e9 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000342c:	b9 01 00 00 00       	mov    ecx,0x1
c0003431:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003435:	75 07                	jne    c000343e <create_chain+0x5e>
c0003437:	31 db                	xor    ebx,ebx
c0003439:	e9 d7 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000343e:	39 f9                	cmp    ecx,edi
c0003440:	75 46                	jne    c0003488 <create_chain+0xa8>
c0003442:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003445:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003448:	77 05                	ja     c000344f <create_chain+0x6f>
c000344a:	bb 02 00 00 00       	mov    ebx,0x2
c000344f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003453:	89 da                	mov    edx,ebx
c0003455:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003458:	e8 b7 fd ff ff       	call   c0003214 <get_fat.isra.2>
c000345d:	83 f8 01             	cmp    eax,0x1
c0003460:	74 ab                	je     c000340d <create_chain+0x2d>
c0003462:	83 f8 ff             	cmp    eax,0xffffffff
c0003465:	0f 84 a7 00 00 00    	je     c0003512 <create_chain+0x132>
c000346b:	85 c0                	test   eax,eax
c000346d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003471:	74 11                	je     c0003484 <create_chain+0xa4>
c0003473:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003476:	83 f8 01             	cmp    eax,0x1
c0003479:	76 0d                	jbe    c0003488 <create_chain+0xa8>
c000347b:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c000347e:	73 08                	jae    c0003488 <create_chain+0xa8>
c0003480:	89 c1                	mov    ecx,eax
c0003482:	eb 04                	jmp    c0003488 <create_chain+0xa8>
c0003484:	85 db                	test   ebx,ebx
c0003486:	75 3d                	jne    c00034c5 <create_chain+0xe5>
c0003488:	89 cb                	mov    ebx,ecx
c000348a:	43                   	inc    ebx
c000348b:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c000348e:	77 0a                	ja     c000349a <create_chain+0xba>
c0003490:	83 f9 01             	cmp    ecx,0x1
c0003493:	76 a2                	jbe    c0003437 <create_chain+0x57>
c0003495:	bb 02 00 00 00       	mov    ebx,0x2
c000349a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000349e:	89 da                	mov    edx,ebx
c00034a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034a3:	e8 6c fd ff ff       	call   c0003214 <get_fat.isra.2>
c00034a8:	85 c0                	test   eax,eax
c00034aa:	74 19                	je     c00034c5 <create_chain+0xe5>
c00034ac:	83 f8 01             	cmp    eax,0x1
c00034af:	0f 84 58 ff ff ff    	je     c000340d <create_chain+0x2d>
c00034b5:	40                   	inc    eax
c00034b6:	74 5a                	je     c0003512 <create_chain+0x132>
c00034b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034bc:	39 cb                	cmp    ebx,ecx
c00034be:	75 ca                	jne    c000348a <create_chain+0xaa>
c00034c0:	e9 72 ff ff ff       	jmp    c0003437 <create_chain+0x57>
c00034c5:	83 c9 ff             	or     ecx,0xffffffff
c00034c8:	89 da                	mov    edx,ebx
c00034ca:	89 f0                	mov    eax,esi
c00034cc:	e8 b1 f2 ff ff       	call   c0002782 <put_fat>
c00034d1:	85 c0                	test   eax,eax
c00034d3:	75 36                	jne    c000350b <create_chain+0x12b>
c00034d5:	85 ff                	test   edi,edi
c00034d7:	75 16                	jne    c00034ef <create_chain+0x10f>
c00034d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00034dc:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00034df:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00034e2:	8d 57 fe             	lea    edx,[edi-0x2]
c00034e5:	39 d0                	cmp    eax,edx
c00034e7:	77 17                	ja     c0003500 <create_chain+0x120>
c00034e9:	48                   	dec    eax
c00034ea:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00034ed:	eb 11                	jmp    c0003500 <create_chain+0x120>
c00034ef:	89 d9                	mov    ecx,ebx
c00034f1:	89 fa                	mov    edx,edi
c00034f3:	89 f0                	mov    eax,esi
c00034f5:	e8 88 f2 ff ff       	call   c0002782 <put_fat>
c00034fa:	85 c0                	test   eax,eax
c00034fc:	74 db                	je     c00034d9 <create_chain+0xf9>
c00034fe:	eb 0b                	jmp    c000350b <create_chain+0x12b>
c0003500:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c0003503:	83 c8 01             	or     eax,0x1
c0003506:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0003509:	eb 0a                	jmp    c0003515 <create_chain+0x135>
c000350b:	48                   	dec    eax
c000350c:	0f 85 fb fe ff ff    	jne    c000340d <create_chain+0x2d>
c0003512:	83 cb ff             	or     ebx,0xffffffff
c0003515:	83 c4 1c             	add    esp,0x1c
c0003518:	89 d8                	mov    eax,ebx
c000351a:	5b                   	pop    ebx
c000351b:	5e                   	pop    esi
c000351c:	5f                   	pop    edi
c000351d:	5d                   	pop    ebp
c000351e:	c3                   	ret    

c000351f <remove_chain>:
c000351f:	55                   	push   ebp
c0003520:	57                   	push   edi
c0003521:	56                   	push   esi
c0003522:	89 d6                	mov    esi,edx
c0003524:	53                   	push   ebx
c0003525:	83 ec 0c             	sub    esp,0xc
c0003528:	83 fa 01             	cmp    edx,0x1
c000352b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000352d:	76 6a                	jbe    c0003599 <remove_chain+0x7a>
c000352f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003532:	76 65                	jbe    c0003599 <remove_chain+0x7a>
c0003534:	89 c5                	mov    ebp,eax
c0003536:	89 ca                	mov    edx,ecx
c0003538:	85 c9                	test   ecx,ecx
c000353a:	74 0e                	je     c000354a <remove_chain+0x2b>
c000353c:	83 c9 ff             	or     ecx,0xffffffff
c000353f:	89 d8                	mov    eax,ebx
c0003541:	e8 3c f2 ff ff       	call   c0002782 <put_fat>
c0003546:	85 c0                	test   eax,eax
c0003548:	75 5b                	jne    c00035a5 <remove_chain+0x86>
c000354a:	89 f2                	mov    edx,esi
c000354c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000354f:	e8 c0 fc ff ff       	call   c0003214 <get_fat.isra.2>
c0003554:	89 c7                	mov    edi,eax
c0003556:	85 c0                	test   eax,eax
c0003558:	75 04                	jne    c000355e <remove_chain+0x3f>
c000355a:	31 c0                	xor    eax,eax
c000355c:	eb 47                	jmp    c00035a5 <remove_chain+0x86>
c000355e:	83 f8 01             	cmp    eax,0x1
c0003561:	74 36                	je     c0003599 <remove_chain+0x7a>
c0003563:	83 f8 ff             	cmp    eax,0xffffffff
c0003566:	74 38                	je     c00035a0 <remove_chain+0x81>
c0003568:	31 c9                	xor    ecx,ecx
c000356a:	89 f2                	mov    edx,esi
c000356c:	89 d8                	mov    eax,ebx
c000356e:	e8 0f f2 ff ff       	call   c0002782 <put_fat>
c0003573:	85 c0                	test   eax,eax
c0003575:	75 2e                	jne    c00035a5 <remove_chain+0x86>
c0003577:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000357a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000357d:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003580:	39 c8                	cmp    eax,ecx
c0003582:	73 0d                	jae    c0003591 <remove_chain+0x72>
c0003584:	40                   	inc    eax
c0003585:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003588:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000358b:	83 c8 01             	or     eax,0x1
c000358e:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003591:	89 fe                	mov    esi,edi
c0003593:	39 fa                	cmp    edx,edi
c0003595:	77 b3                	ja     c000354a <remove_chain+0x2b>
c0003597:	eb c1                	jmp    c000355a <remove_chain+0x3b>
c0003599:	b8 02 00 00 00       	mov    eax,0x2
c000359e:	eb 05                	jmp    c00035a5 <remove_chain+0x86>
c00035a0:	b8 01 00 00 00       	mov    eax,0x1
c00035a5:	83 c4 0c             	add    esp,0xc
c00035a8:	5b                   	pop    ebx
c00035a9:	5e                   	pop    esi
c00035aa:	5f                   	pop    edi
c00035ab:	5d                   	pop    ebp
c00035ac:	c3                   	ret    

c00035ad <dir_next>:
c00035ad:	55                   	push   ebp
c00035ae:	57                   	push   edi
c00035af:	56                   	push   esi
c00035b0:	53                   	push   ebx
c00035b1:	83 ec 1c             	sub    esp,0x1c
c00035b4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035b7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035b9:	83 c7 20             	add    edi,0x20
c00035bc:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035c2:	76 07                	jbe    c00035cb <dir_next+0x1e>
c00035c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00035cb:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00035ce:	b9 04 00 00 00       	mov    ecx,0x4
c00035d3:	85 f6                	test   esi,esi
c00035d5:	0f 84 cd 00 00 00    	je     c00036a8 <dir_next+0xfb>
c00035db:	89 c3                	mov    ebx,eax
c00035dd:	89 d1                	mov    ecx,edx
c00035df:	89 f8                	mov    eax,edi
c00035e1:	25 ff 01 00 00       	and    eax,0x1ff
c00035e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035ea:	0f 85 a8 00 00 00    	jne    c0003698 <dir_next+0xeb>
c00035f0:	46                   	inc    esi
c00035f1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00035f4:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00035f7:	85 d2                	test   edx,edx
c00035f9:	75 22                	jne    c000361d <dir_next+0x70>
c00035fb:	89 fa                	mov    edx,edi
c00035fd:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003601:	c1 ea 05             	shr    edx,0x5
c0003604:	39 c2                	cmp    edx,eax
c0003606:	0f 82 8c 00 00 00    	jb     c0003698 <dir_next+0xeb>
c000360c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003613:	b9 04 00 00 00       	mov    ecx,0x4
c0003618:	e9 8b 00 00 00       	jmp    c00036a8 <dir_next+0xfb>
c000361d:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003621:	89 fe                	mov    esi,edi
c0003623:	48                   	dec    eax
c0003624:	c1 ee 09             	shr    esi,0x9
c0003627:	85 f0                	test   eax,esi
c0003629:	75 6d                	jne    c0003698 <dir_next+0xeb>
c000362b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000362f:	89 e8                	mov    eax,ebp
c0003631:	e8 de fb ff ff       	call   c0003214 <get_fat.isra.2>
c0003636:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000363a:	89 c6                	mov    esi,eax
c000363c:	83 f8 01             	cmp    eax,0x1
c000363f:	77 07                	ja     c0003648 <dir_next+0x9b>
c0003641:	b9 02 00 00 00       	mov    ecx,0x2
c0003646:	eb 60                	jmp    c00036a8 <dir_next+0xfb>
c0003648:	83 f8 ff             	cmp    eax,0xffffffff
c000364b:	75 07                	jne    c0003654 <dir_next+0xa7>
c000364d:	b9 01 00 00 00       	mov    ecx,0x1
c0003652:	eb 54                	jmp    c00036a8 <dir_next+0xfb>
c0003654:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003657:	77 30                	ja     c0003689 <dir_next+0xdc>
c0003659:	85 c9                	test   ecx,ecx
c000365b:	74 af                	je     c000360c <dir_next+0x5f>
c000365d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003660:	89 d8                	mov    eax,ebx
c0003662:	e8 79 fd ff ff       	call   c00033e0 <create_chain>
c0003667:	b9 07 00 00 00       	mov    ecx,0x7
c000366c:	89 c6                	mov    esi,eax
c000366e:	85 c0                	test   eax,eax
c0003670:	74 36                	je     c00036a8 <dir_next+0xfb>
c0003672:	83 f8 01             	cmp    eax,0x1
c0003675:	74 ca                	je     c0003641 <dir_next+0x94>
c0003677:	83 f8 ff             	cmp    eax,0xffffffff
c000367a:	74 d1                	je     c000364d <dir_next+0xa0>
c000367c:	89 c2                	mov    edx,eax
c000367e:	89 e8                	mov    eax,ebp
c0003680:	e8 54 f2 ff ff       	call   c00028d9 <dir_clear>
c0003685:	85 c0                	test   eax,eax
c0003687:	75 c4                	jne    c000364d <dir_next+0xa0>
c0003689:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000368c:	89 f2                	mov    edx,esi
c000368e:	89 e8                	mov    eax,ebp
c0003690:	e8 99 e9 ff ff       	call   c000202e <clst2sect>
c0003695:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000369c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000369f:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036a3:	31 c9                	xor    ecx,ecx
c00036a5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036a8:	83 c4 1c             	add    esp,0x1c
c00036ab:	89 c8                	mov    eax,ecx
c00036ad:	5b                   	pop    ebx
c00036ae:	5e                   	pop    esi
c00036af:	5f                   	pop    edi
c00036b0:	5d                   	pop    ebp
c00036b1:	c3                   	ret    

c00036b2 <dir_alloc>:
c00036b2:	55                   	push   ebp
c00036b3:	89 c5                	mov    ebp,eax
c00036b5:	57                   	push   edi
c00036b6:	89 d7                	mov    edi,edx
c00036b8:	56                   	push   esi
c00036b9:	31 d2                	xor    edx,edx
c00036bb:	53                   	push   ebx
c00036bc:	83 ec 0c             	sub    esp,0xc
c00036bf:	8b 30                	mov    esi,DWORD PTR [eax]
c00036c1:	e8 52 fc ff ff       	call   c0003318 <dir_sdi>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 3b                	jne    c0003705 <dir_alloc+0x53>
c00036ca:	31 db                	xor    ebx,ebx
c00036cc:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00036cf:	89 f0                	mov    eax,esi
c00036d1:	e8 68 ec ff ff       	call   c000233e <move_window>
c00036d6:	85 c0                	test   eax,eax
c00036d8:	75 2b                	jne    c0003705 <dir_alloc+0x53>
c00036da:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00036dd:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00036e0:	85 d2                	test   edx,edx
c00036e2:	74 08                	je     c00036ec <dir_alloc+0x3a>
c00036e4:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00036ea:	75 07                	jne    c00036f3 <dir_alloc+0x41>
c00036ec:	43                   	inc    ebx
c00036ed:	39 fb                	cmp    ebx,edi
c00036ef:	75 04                	jne    c00036f5 <dir_alloc+0x43>
c00036f1:	eb 1c                	jmp    c000370f <dir_alloc+0x5d>
c00036f3:	31 db                	xor    ebx,ebx
c00036f5:	ba 01 00 00 00       	mov    edx,0x1
c00036fa:	89 e8                	mov    eax,ebp
c00036fc:	e8 ac fe ff ff       	call   c00035ad <dir_next>
c0003701:	85 c0                	test   eax,eax
c0003703:	74 c7                	je     c00036cc <dir_alloc+0x1a>
c0003705:	83 f8 04             	cmp    eax,0x4
c0003708:	75 05                	jne    c000370f <dir_alloc+0x5d>
c000370a:	b8 07 00 00 00       	mov    eax,0x7
c000370f:	83 c4 0c             	add    esp,0xc
c0003712:	5b                   	pop    ebx
c0003713:	5e                   	pop    esi
c0003714:	5f                   	pop    edi
c0003715:	5d                   	pop    ebp
c0003716:	c3                   	ret    

c0003717 <dir_read>:
c0003717:	55                   	push   ebp
c0003718:	57                   	push   edi
c0003719:	bf ff ff ff ff       	mov    edi,0xffffffff
c000371e:	56                   	push   esi
c000371f:	be 04 00 00 00       	mov    esi,0x4
c0003724:	53                   	push   ebx
c0003725:	89 c3                	mov    ebx,eax
c0003727:	83 ec 1c             	sub    esp,0x1c
c000372a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003730:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003735:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003738:	85 d2                	test   edx,edx
c000373a:	0f 84 e3 00 00 00    	je     c0003823 <dir_read+0x10c>
c0003740:	89 e8                	mov    eax,ebp
c0003742:	e8 f7 eb ff ff       	call   c000233e <move_window>
c0003747:	89 c6                	mov    esi,eax
c0003749:	85 c0                	test   eax,eax
c000374b:	0f 85 dd 00 00 00    	jne    c000382e <dir_read+0x117>
c0003751:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003754:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003757:	88 04 24             	mov    BYTE PTR [esp],al
c000375a:	85 c0                	test   eax,eax
c000375c:	0f 84 c7 00 00 00    	je     c0003829 <dir_read+0x112>
c0003762:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003765:	83 e1 3f             	and    ecx,0x3f
c0003768:	83 f8 2e             	cmp    eax,0x2e
c000376b:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000376e:	0f 84 95 00 00 00    	je     c0003809 <dir_read+0xf2>
c0003774:	3d e5 00 00 00       	cmp    eax,0xe5
c0003779:	0f 84 8a 00 00 00    	je     c0003809 <dir_read+0xf2>
c000377f:	0f b6 c9             	movzx  ecx,cl
c0003782:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003786:	83 e1 df             	and    ecx,0xffffffdf
c0003789:	83 f9 08             	cmp    ecx,0x8
c000378c:	0f 94 c1             	sete   cl
c000378f:	0f b6 c9             	movzx  ecx,cl
c0003792:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003796:	75 71                	jne    c0003809 <dir_read+0xf2>
c0003798:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c000379d:	75 4a                	jne    c00037e9 <dir_read+0xd2>
c000379f:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037a3:	74 16                	je     c00037bb <dir_read+0xa4>
c00037a5:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037a8:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037af:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037b6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037b9:	eb 0e                	jmp    c00037c9 <dir_read+0xb2>
c00037bb:	89 f9                	mov    ecx,edi
c00037bd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c2:	0f b6 c9             	movzx  ecx,cl
c00037c5:	39 c1                	cmp    ecx,eax
c00037c7:	75 45                	jne    c000380e <dir_read+0xf7>
c00037c9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037cd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037d2:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00037d5:	75 37                	jne    c000380e <dir_read+0xf7>
c00037d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00037da:	e8 6c e8 ff ff       	call   c000204b <pick_lfn>
c00037df:	85 c0                	test   eax,eax
c00037e1:	74 2b                	je     c000380e <dir_read+0xf7>
c00037e3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00037e6:	4f                   	dec    edi
c00037e7:	eb 25                	jmp    c000380e <dir_read+0xf7>
c00037e9:	89 f8                	mov    eax,edi
c00037eb:	84 c0                	test   al,al
c00037ed:	75 11                	jne    c0003800 <dir_read+0xe9>
c00037ef:	89 d0                	mov    eax,edx
c00037f1:	e8 32 ea ff ff       	call   c0002228 <sum_sfn>
c00037f6:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00037fa:	75 04                	jne    c0003800 <dir_read+0xe9>
c00037fc:	31 f6                	xor    esi,esi
c00037fe:	eb 35                	jmp    c0003835 <dir_read+0x11e>
c0003800:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003807:	eb 2c                	jmp    c0003835 <dir_read+0x11e>
c0003809:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380e:	31 d2                	xor    edx,edx
c0003810:	89 d8                	mov    eax,ebx
c0003812:	e8 96 fd ff ff       	call   c00035ad <dir_next>
c0003817:	89 c6                	mov    esi,eax
c0003819:	85 c0                	test   eax,eax
c000381b:	0f 84 14 ff ff ff    	je     c0003735 <dir_read+0x1e>
c0003821:	eb 0b                	jmp    c000382e <dir_read+0x117>
c0003823:	85 f6                	test   esi,esi
c0003825:	74 d5                	je     c00037fc <dir_read+0xe5>
c0003827:	eb 05                	jmp    c000382e <dir_read+0x117>
c0003829:	be 04 00 00 00       	mov    esi,0x4
c000382e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003835:	83 c4 1c             	add    esp,0x1c
c0003838:	89 f0                	mov    eax,esi
c000383a:	5b                   	pop    ebx
c000383b:	5e                   	pop    esi
c000383c:	5f                   	pop    edi
c000383d:	5d                   	pop    ebp
c000383e:	c3                   	ret    

c000383f <dir_remove>:
c000383f:	57                   	push   edi
c0003840:	56                   	push   esi
c0003841:	53                   	push   ebx
c0003842:	89 c3                	mov    ebx,eax
c0003844:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003847:	8b 30                	mov    esi,DWORD PTR [eax]
c0003849:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000384c:	83 fa ff             	cmp    edx,0xffffffff
c000384f:	74 09                	je     c000385a <dir_remove+0x1b>
c0003851:	e8 c2 fa ff ff       	call   c0003318 <dir_sdi>
c0003856:	85 c0                	test   eax,eax
c0003858:	75 34                	jne    c000388e <dir_remove+0x4f>
c000385a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000385d:	89 f0                	mov    eax,esi
c000385f:	e8 da ea ff ff       	call   c000233e <move_window>
c0003864:	85 c0                	test   eax,eax
c0003866:	75 1c                	jne    c0003884 <dir_remove+0x45>
c0003868:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000386b:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000386e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003872:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003875:	73 17                	jae    c000388e <dir_remove+0x4f>
c0003877:	31 d2                	xor    edx,edx
c0003879:	89 d8                	mov    eax,ebx
c000387b:	e8 2d fd ff ff       	call   c00035ad <dir_next>
c0003880:	85 c0                	test   eax,eax
c0003882:	74 d6                	je     c000385a <dir_remove+0x1b>
c0003884:	83 f8 04             	cmp    eax,0x4
c0003887:	75 05                	jne    c000388e <dir_remove+0x4f>
c0003889:	b8 02 00 00 00       	mov    eax,0x2
c000388e:	5b                   	pop    ebx
c000388f:	5e                   	pop    esi
c0003890:	5f                   	pop    edi
c0003891:	c3                   	ret    

c0003892 <dir_find>:
c0003892:	55                   	push   ebp
c0003893:	31 d2                	xor    edx,edx
c0003895:	57                   	push   edi
c0003896:	56                   	push   esi
c0003897:	53                   	push   ebx
c0003898:	89 c3                	mov    ebx,eax
c000389a:	83 ec 1c             	sub    esp,0x1c
c000389d:	8b 00                	mov    eax,DWORD PTR [eax]
c000389f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038a3:	89 d8                	mov    eax,ebx
c00038a5:	e8 6e fa ff ff       	call   c0003318 <dir_sdi>
c00038aa:	89 c6                	mov    esi,eax
c00038ac:	85 c0                	test   eax,eax
c00038ae:	0f 85 1d 01 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038b4:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038bb:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c00038c0:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038c5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038cc:	e8 6d ea ff ff       	call   c000233e <move_window>
c00038d1:	89 c6                	mov    esi,eax
c00038d3:	85 c0                	test   eax,eax
c00038d5:	0f 85 f6 00 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038db:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00038de:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c00038e2:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00038e6:	85 c9                	test   ecx,ecx
c00038e8:	0f 84 de 00 00 00    	je     c00039cc <dir_find+0x13a>
c00038ee:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00038f1:	89 d0                	mov    eax,edx
c00038f3:	83 e0 3f             	and    eax,0x3f
c00038f6:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c00038fc:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00038ff:	0f 84 a6 00 00 00    	je     c00039ab <dir_find+0x119>
c0003905:	80 e2 08             	and    dl,0x8
c0003908:	0f b6 c0             	movzx  eax,al
c000390b:	74 0b                	je     c0003918 <dir_find+0x86>
c000390d:	83 f8 0f             	cmp    eax,0xf
c0003910:	0f 85 95 00 00 00    	jne    c00039ab <dir_find+0x119>
c0003916:	eb 05                	jmp    c000391d <dir_find+0x8b>
c0003918:	83 f8 0f             	cmp    eax,0xf
c000391b:	75 62                	jne    c000397f <dir_find+0xed>
c000391d:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003921:	0f 85 90 00 00 00    	jne    c00039b7 <dir_find+0x125>
c0003927:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c000392c:	74 17                	je     c0003945 <dir_find+0xb3>
c000392e:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003931:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003939:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000393d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003940:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003943:	eb 13                	jmp    c0003958 <dir_find+0xc6>
c0003945:	89 f8                	mov    eax,edi
c0003947:	bf ff ff ff ff       	mov    edi,0xffffffff
c000394c:	0f b6 d0             	movzx  edx,al
c000394f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003954:	39 c2                	cmp    edx,eax
c0003956:	75 5f                	jne    c00039b7 <dir_find+0x125>
c0003958:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000395c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003961:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003964:	75 51                	jne    c00039b7 <dir_find+0x125>
c0003966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000396a:	89 ea                	mov    edx,ebp
c000396c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000396f:	e8 37 f3 ff ff       	call   c0002cab <cmp_lfn>
c0003974:	85 c0                	test   eax,eax
c0003976:	74 3f                	je     c00039b7 <dir_find+0x125>
c0003978:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000397c:	4f                   	dec    edi
c000397d:	eb 38                	jmp    c00039b7 <dir_find+0x125>
c000397f:	89 f8                	mov    eax,edi
c0003981:	84 c0                	test   al,al
c0003983:	75 0d                	jne    c0003992 <dir_find+0x100>
c0003985:	89 e8                	mov    eax,ebp
c0003987:	e8 9c e8 ff ff       	call   c0002228 <sum_sfn>
c000398c:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003990:	74 3f                	je     c00039d1 <dir_find+0x13f>
c0003992:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003996:	75 13                	jne    c00039ab <dir_find+0x119>
c0003998:	8d 53 20             	lea    edx,[ebx+0x20]
c000399b:	b9 0b 00 00 00       	mov    ecx,0xb
c00039a0:	89 e8                	mov    eax,ebp
c00039a2:	e8 7c e4 ff ff       	call   c0001e23 <mem_cmp>
c00039a7:	85 c0                	test   eax,eax
c00039a9:	74 26                	je     c00039d1 <dir_find+0x13f>
c00039ab:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039b2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039b7:	31 d2                	xor    edx,edx
c00039b9:	89 d8                	mov    eax,ebx
c00039bb:	e8 ed fb ff ff       	call   c00035ad <dir_next>
c00039c0:	89 c6                	mov    esi,eax
c00039c2:	85 c0                	test   eax,eax
c00039c4:	0f 84 fb fe ff ff    	je     c00038c5 <dir_find+0x33>
c00039ca:	eb 05                	jmp    c00039d1 <dir_find+0x13f>
c00039cc:	be 04 00 00 00       	mov    esi,0x4
c00039d1:	83 c4 1c             	add    esp,0x1c
c00039d4:	89 f0                	mov    eax,esi
c00039d6:	5b                   	pop    ebx
c00039d7:	5e                   	pop    esi
c00039d8:	5f                   	pop    edi
c00039d9:	5d                   	pop    ebp
c00039da:	c3                   	ret    

c00039db <follow_path>:
c00039db:	56                   	push   esi
c00039dc:	53                   	push   ebx
c00039dd:	89 c3                	mov    ebx,eax
c00039df:	83 ec 14             	sub    esp,0x14
c00039e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e6:	8b 30                	mov    esi,DWORD PTR [eax]
c00039e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039ec:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00039ef:	83 fa 5c             	cmp    edx,0x5c
c00039f2:	75 07                	jne    c00039fb <follow_path+0x20>
c00039f4:	40                   	inc    eax
c00039f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039f9:	eb ed                	jmp    c00039e8 <follow_path+0xd>
c00039fb:	83 fa 2f             	cmp    edx,0x2f
c00039fe:	74 f4                	je     c00039f4 <follow_path+0x19>
c0003a00:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a07:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a0a:	77 3e                	ja     c0003a4a <follow_path+0x6f>
c0003a0c:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a10:	31 d2                	xor    edx,edx
c0003a12:	89 d8                	mov    eax,ebx
c0003a14:	e8 ff f8 ff ff       	call   c0003318 <dir_sdi>
c0003a19:	eb 4f                	jmp    c0003a6a <follow_path+0x8f>
c0003a1b:	89 d8                	mov    eax,ebx
c0003a1d:	e8 70 fe ff ff       	call   c0003892 <dir_find>
c0003a22:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a25:	85 c0                	test   eax,eax
c0003a27:	75 32                	jne    c0003a5b <follow_path+0x80>
c0003a29:	80 e2 04             	and    dl,0x4
c0003a2c:	75 3c                	jne    c0003a6a <follow_path+0x8f>
c0003a2e:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a32:	74 31                	je     c0003a65 <follow_path+0x8a>
c0003a34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a37:	25 ff 01 00 00       	and    eax,0x1ff
c0003a3c:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a40:	8a 06                	mov    al,BYTE PTR [esi]
c0003a42:	e8 7c f7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003a47:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a4a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a4e:	89 d8                	mov    eax,ebx
c0003a50:	e8 7f ef ff ff       	call   c00029d4 <create_name>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	74 c2                	je     c0003a1b <follow_path+0x40>
c0003a59:	eb 0f                	jmp    c0003a6a <follow_path+0x8f>
c0003a5b:	83 f8 04             	cmp    eax,0x4
c0003a5e:	75 0a                	jne    c0003a6a <follow_path+0x8f>
c0003a60:	80 e2 04             	and    dl,0x4
c0003a63:	75 05                	jne    c0003a6a <follow_path+0x8f>
c0003a65:	b8 05 00 00 00       	mov    eax,0x5
c0003a6a:	83 c4 14             	add    esp,0x14
c0003a6d:	5b                   	pop    ebx
c0003a6e:	5e                   	pop    esi
c0003a6f:	c3                   	ret    

c0003a70 <dir_register>:
c0003a70:	55                   	push   ebp
c0003a71:	57                   	push   edi
c0003a72:	56                   	push   esi
c0003a73:	be 06 00 00 00       	mov    esi,0x6
c0003a78:	53                   	push   ebx
c0003a79:	83 ec 2c             	sub    esp,0x2c
c0003a7c:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003a7f:	80 e2 a0             	and    dl,0xa0
c0003a82:	0f 85 66 01 00 00    	jne    c0003bee <dir_register+0x17e>
c0003a88:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003a92:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003a95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a99:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003a9e:	74 06                	je     c0003aa6 <dir_register+0x36>
c0003aa0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aa4:	eb ef                	jmp    c0003a95 <dir_register+0x25>
c0003aa6:	89 c3                	mov    ebx,eax
c0003aa8:	b9 0c 00 00 00       	mov    ecx,0xc
c0003aad:	8d 40 20             	lea    eax,[eax+0x20]
c0003ab0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003ab4:	89 c2                	mov    edx,eax
c0003ab6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003aba:	e8 44 e3 ff ff       	call   c0001e03 <mem_cpy>
c0003abf:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ac4:	74 48                	je     c0003b0e <dir_register+0x9e>
c0003ac6:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003aca:	bd 01 00 00 00       	mov    ebp,0x1
c0003acf:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003ad2:	55                   	push   ebp
c0003ad3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003ad7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003adb:	e8 86 e6 ff ff       	call   c0002166 <gen_numname>
c0003ae0:	58                   	pop    eax
c0003ae1:	89 d8                	mov    eax,ebx
c0003ae3:	e8 aa fd ff ff       	call   c0003892 <dir_find>
c0003ae8:	89 c6                	mov    esi,eax
c0003aea:	85 c0                	test   eax,eax
c0003aec:	75 10                	jne    c0003afe <dir_register+0x8e>
c0003aee:	45                   	inc    ebp
c0003aef:	83 fd 64             	cmp    ebp,0x64
c0003af2:	75 db                	jne    c0003acf <dir_register+0x5f>
c0003af4:	be 07 00 00 00       	mov    esi,0x7
c0003af9:	e9 f0 00 00 00       	jmp    c0003bee <dir_register+0x17e>
c0003afe:	83 f8 04             	cmp    eax,0x4
c0003b01:	0f 85 e7 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b07:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b0b:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b0e:	bd 01 00 00 00       	mov    ebp,0x1
c0003b13:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b18:	74 13                	je     c0003b2d <dir_register+0xbd>
c0003b1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1e:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b23:	83 c0 0c             	add    eax,0xc
c0003b26:	31 d2                	xor    edx,edx
c0003b28:	f7 f1                	div    ecx
c0003b2a:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b2d:	89 ea                	mov    edx,ebp
c0003b2f:	89 d8                	mov    eax,ebx
c0003b31:	e8 7c fb ff ff       	call   c00036b2 <dir_alloc>
c0003b36:	89 c6                	mov    esi,eax
c0003b38:	85 c0                	test   eax,eax
c0003b3a:	0f 85 ae 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b40:	4d                   	dec    ebp
c0003b41:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003b45:	74 67                	je     c0003bae <dir_register+0x13e>
c0003b47:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b4a:	89 e8                	mov    eax,ebp
c0003b4c:	c1 e0 05             	shl    eax,0x5
c0003b4f:	29 c2                	sub    edx,eax
c0003b51:	89 d8                	mov    eax,ebx
c0003b53:	e8 c0 f7 ff ff       	call   c0003318 <dir_sdi>
c0003b58:	89 c6                	mov    esi,eax
c0003b5a:	85 c0                	test   eax,eax
c0003b5c:	0f 85 8c 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b66:	e8 bd e6 ff ff       	call   c0002228 <sum_sfn>
c0003b6b:	0f b6 e8             	movzx  ebp,al
c0003b6e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b71:	89 f8                	mov    eax,edi
c0003b73:	e8 c6 e7 ff ff       	call   c000233e <move_window>
c0003b78:	89 c6                	mov    esi,eax
c0003b7a:	85 c0                	test   eax,eax
c0003b7c:	75 70                	jne    c0003bee <dir_register+0x17e>
c0003b7e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003b83:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003b86:	83 ec 0c             	sub    esp,0xc
c0003b89:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003b8c:	55                   	push   ebp
c0003b8d:	e8 39 e5 ff ff       	call   c00020cb <put_lfn>
c0003b92:	31 d2                	xor    edx,edx
c0003b94:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003b98:	89 d8                	mov    eax,ebx
c0003b9a:	e8 0e fa ff ff       	call   c00035ad <dir_next>
c0003b9f:	83 c4 10             	add    esp,0x10
c0003ba2:	89 c6                	mov    esi,eax
c0003ba4:	85 c0                	test   eax,eax
c0003ba6:	75 46                	jne    c0003bee <dir_register+0x17e>
c0003ba8:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003bac:	75 c0                	jne    c0003b6e <dir_register+0xfe>
c0003bae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb1:	89 f8                	mov    eax,edi
c0003bb3:	e8 86 e7 ff ff       	call   c000233e <move_window>
c0003bb8:	89 c6                	mov    esi,eax
c0003bba:	85 c0                	test   eax,eax
c0003bbc:	75 30                	jne    c0003bee <dir_register+0x17e>
c0003bbe:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bc1:	b9 20 00 00 00       	mov    ecx,0x20
c0003bc6:	31 d2                	xor    edx,edx
c0003bc8:	e8 4b e2 ff ff       	call   c0001e18 <mem_set>
c0003bcd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003bd4:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bd9:	e8 25 e2 ff ff       	call   c0001e03 <mem_cpy>
c0003bde:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003be1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003be4:	83 e0 18             	and    eax,0x18
c0003be7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003bea:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003bee:	83 c4 2c             	add    esp,0x2c
c0003bf1:	89 f0                	mov    eax,esi
c0003bf3:	5b                   	pop    ebx
c0003bf4:	5e                   	pop    esi
c0003bf5:	5f                   	pop    edi
c0003bf6:	5d                   	pop    ebp
c0003bf7:	c3                   	ret    

c0003bf8 <f_mount>:
c0003bf8:	53                   	push   ebx
c0003bf9:	83 ec 18             	sub    esp,0x18
c0003bfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c00:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c0c:	e8 37 e6 ff ff       	call   c0002248 <get_ldnumber>
c0003c11:	89 c2                	mov    edx,eax
c0003c13:	b8 0b 00 00 00       	mov    eax,0xb
c0003c18:	85 d2                	test   edx,edx
c0003c1a:	78 39                	js     c0003c55 <f_mount+0x5d>
c0003c1c:	8b 04 95 a0 54 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdab60]
c0003c23:	85 c0                	test   eax,eax
c0003c25:	74 03                	je     c0003c2a <f_mount+0x32>
c0003c27:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c2e:	85 c0                	test   eax,eax
c0003c30:	74 03                	je     c0003c35 <f_mount+0x3d>
c0003c32:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c39:	89 04 95 a0 54 02 c0 	mov    DWORD PTR [edx*4-0x3ffdab60],eax
c0003c40:	31 c0                	xor    eax,eax
c0003c42:	84 db                	test   bl,bl
c0003c44:	74 0f                	je     c0003c55 <f_mount+0x5d>
c0003c46:	31 c9                	xor    ecx,ecx
c0003c48:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c50:	e8 3c e8 ff ff       	call   c0002491 <mount_volume>
c0003c55:	83 c4 18             	add    esp,0x18
c0003c58:	5b                   	pop    ebx
c0003c59:	c3                   	ret    

c0003c5a <f_open>:
c0003c5a:	55                   	push   ebp
c0003c5b:	b8 09 00 00 00       	mov    eax,0x9
c0003c60:	57                   	push   edi
c0003c61:	56                   	push   esi
c0003c62:	53                   	push   ebx
c0003c63:	83 ec 5c             	sub    esp,0x5c
c0003c66:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003c6a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003c6e:	85 db                	test   ebx,ebx
c0003c70:	0f 84 9f 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003c76:	89 fd                	mov    ebp,edi
c0003c78:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c7c:	83 e5 3f             	and    ebp,0x3f
c0003c7f:	89 e8                	mov    eax,ebp
c0003c81:	89 ee                	mov    esi,ebp
c0003c83:	0f b6 c8             	movzx  ecx,al
c0003c86:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003c8a:	e8 02 e8 ff ff       	call   c0002491 <mount_volume>
c0003c8f:	85 c0                	test   eax,eax
c0003c91:	0f 85 78 02 00 00    	jne    c0003f0f <f_open+0x2b5>
c0003c97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9b:	83 ec 0c             	sub    esp,0xc
c0003c9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ca2:	68 00 02 00 00       	push   0x200
c0003ca7:	e8 74 1f 00 00       	call   c0005c20 <ff_memalloc>
c0003cac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cb0:	83 c4 10             	add    esp,0x10
c0003cb3:	b8 11 00 00 00       	mov    eax,0x11
c0003cb8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003cbd:	0f 84 52 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003cc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003cc7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ccb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ccf:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003cd2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003cd6:	e8 00 fd ff ff       	call   c00039db <follow_path>
c0003cdb:	85 c0                	test   eax,eax
c0003cdd:	75 0c                	jne    c0003ceb <f_open+0x91>
c0003cdf:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ce4:	74 05                	je     c0003ceb <f_open+0x91>
c0003ce6:	b8 06 00 00 00       	mov    eax,0x6
c0003ceb:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003cf1:	0f 84 d5 00 00 00    	je     c0003dcc <f_open+0x172>
c0003cf7:	85 c0                	test   eax,eax
c0003cf9:	74 21                	je     c0003d1c <f_open+0xc2>
c0003cfb:	83 f8 04             	cmp    eax,0x4
c0003cfe:	0f 85 f0 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d04:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d08:	e8 63 fd ff ff       	call   c0003a70 <dir_register>
c0003d0d:	85 c0                	test   eax,eax
c0003d0f:	0f 85 df 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d15:	83 cd 08             	or     ebp,0x8
c0003d18:	89 ee                	mov    esi,ebp
c0003d1a:	eb 2c                	jmp    c0003d48 <f_open+0xee>
c0003d1c:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d20:	b8 07 00 00 00       	mov    eax,0x7
c0003d25:	80 e2 11             	and    dl,0x11
c0003d28:	0f 85 c6 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d2e:	b8 08 00 00 00       	mov    eax,0x8
c0003d33:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d39:	0f 85 b5 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d3f:	83 e7 08             	and    edi,0x8
c0003d42:	0f 84 b1 00 00 00    	je     c0003df9 <f_open+0x19f>
c0003d48:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d50:	89 ea                	mov    edx,ebp
c0003d52:	8a 00                	mov    al,BYTE PTR [eax]
c0003d54:	e8 6a f4 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003d59:	ba 00 00 21 50       	mov    edx,0x50210000
c0003d5e:	89 c7                	mov    edi,eax
c0003d60:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003d63:	e8 98 e0 ff ff       	call   c0001e00 <st_dword>
c0003d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d6c:	31 c9                	xor    ecx,ecx
c0003d6e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d76:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003d7a:	e8 6d f4 ff ff       	call   c00031ec <st_clust.isra.1>
c0003d7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d83:	31 d2                	xor    edx,edx
c0003d85:	83 c0 1c             	add    eax,0x1c
c0003d88:	e8 73 e0 ff ff       	call   c0001e00 <st_dword>
c0003d8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d91:	85 ff                	test   edi,edi
c0003d93:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003d97:	74 60                	je     c0003df9 <f_open+0x19f>
c0003d99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d9d:	31 c9                	xor    ecx,ecx
c0003d9f:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003da2:	89 fa                	mov    edx,edi
c0003da4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003da8:	e8 72 f7 ff ff       	call   c000351f <remove_chain>
c0003dad:	85 c0                	test   eax,eax
c0003daf:	0f 85 3f 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003db5:	89 ea                	mov    edx,ebp
c0003db7:	4f                   	dec    edi
c0003db8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbc:	e8 7d e5 ff ff       	call   c000233e <move_window>
c0003dc1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003dc5:	85 c0                	test   eax,eax
c0003dc7:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003dca:	eb 27                	jmp    c0003df3 <f_open+0x199>
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	0f 85 20 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003dd4:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003dd8:	b8 04 00 00 00       	mov    eax,0x4
c0003ddd:	f6 c2 10             	test   dl,0x10
c0003de0:	0f 85 0e 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003de6:	83 e7 02             	and    edi,0x2
c0003de9:	74 0e                	je     c0003df9 <f_open+0x19f>
c0003deb:	b8 07 00 00 00       	mov    eax,0x7
c0003df0:	80 e2 01             	and    dl,0x1
c0003df3:	0f 85 fb 00 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003df9:	f7 c6 08 00 00 00    	test   esi,0x8
c0003dff:	74 03                	je     c0003e04 <f_open+0x1aa>
c0003e01:	83 ce 40             	or     esi,0x40
c0003e04:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e08:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e0c:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e0f:	89 fa                	mov    edx,edi
c0003e11:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e14:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e17:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e1a:	e8 a4 f3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003e1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e22:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e25:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e28:	e8 b7 df ff ff       	call   c0001de4 <ld_dword>
c0003e2d:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e2f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e32:	31 d2                	xor    edx,edx
c0003e34:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e38:	b9 00 02 00 00       	mov    ecx,0x200
c0003e3d:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e41:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e45:	89 f0                	mov    eax,esi
c0003e47:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e4e:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e51:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e58:	89 f8                	mov    eax,edi
c0003e5a:	e8 b9 df ff ff       	call   c0001e18 <mem_set>
c0003e5f:	83 e6 20             	and    esi,0x20
c0003e62:	75 07                	jne    c0003e6b <f_open+0x211>
c0003e64:	31 c0                	xor    eax,eax
c0003e66:	e9 89 00 00 00       	jmp    c0003ef4 <f_open+0x29a>
c0003e6b:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0003e6e:	85 ed                	test   ebp,ebp
c0003e70:	74 f2                	je     c0003e64 <f_open+0x20a>
c0003e72:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c0003e75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e79:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003e7c:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003e80:	c1 e6 09             	shl    esi,0x9
c0003e83:	39 ee                	cmp    esi,ebp
c0003e85:	73 1c                	jae    c0003ea3 <f_open+0x249>
c0003e87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003e89:	29 f5                	sub    ebp,esi
c0003e8b:	e8 84 f3 ff ff       	call   c0003214 <get_fat.isra.2>
c0003e90:	89 c2                	mov    edx,eax
c0003e92:	83 f8 01             	cmp    eax,0x1
c0003e95:	76 10                	jbe    c0003ea7 <f_open+0x24d>
c0003e97:	83 f8 ff             	cmp    eax,0xffffffff
c0003e9a:	75 e7                	jne    c0003e83 <f_open+0x229>
c0003e9c:	b8 01 00 00 00       	mov    eax,0x1
c0003ea1:	eb 09                	jmp    c0003eac <f_open+0x252>
c0003ea3:	31 c0                	xor    eax,eax
c0003ea5:	eb 05                	jmp    c0003eac <f_open+0x252>
c0003ea7:	b8 02 00 00 00       	mov    eax,0x2
c0003eac:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003eaf:	85 c0                	test   eax,eax
c0003eb1:	75 41                	jne    c0003ef4 <f_open+0x29a>
c0003eb3:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003eb9:	74 a9                	je     c0003e64 <f_open+0x20a>
c0003ebb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003ebf:	89 f0                	mov    eax,esi
c0003ec1:	e8 68 e1 ff ff       	call   c000202e <clst2sect>
c0003ec6:	89 c2                	mov    edx,eax
c0003ec8:	b8 02 00 00 00       	mov    eax,0x2
c0003ecd:	85 d2                	test   edx,edx
c0003ecf:	74 23                	je     c0003ef4 <f_open+0x29a>
c0003ed1:	c1 ed 09             	shr    ebp,0x9
c0003ed4:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003ed8:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003edb:	6a 01                	push   0x1
c0003edd:	50                   	push   eax
c0003ede:	57                   	push   edi
c0003edf:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003ee3:	50                   	push   eax
c0003ee4:	e8 a3 de ff ff       	call   c0001d8c <disk_read>
c0003ee9:	83 c4 10             	add    esp,0x10
c0003eec:	85 c0                	test   eax,eax
c0003eee:	0f 95 c0             	setne  al
c0003ef1:	0f b6 c0             	movzx  eax,al
c0003ef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ef8:	83 ec 0c             	sub    esp,0xc
c0003efb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003eff:	e8 34 1d 00 00       	call   c0005c38 <ff_memfree>
c0003f04:	83 c4 10             	add    esp,0x10
c0003f07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	74 06                	je     c0003f15 <f_open+0x2bb>
c0003f0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f15:	83 c4 5c             	add    esp,0x5c
c0003f18:	5b                   	pop    ebx
c0003f19:	5e                   	pop    esi
c0003f1a:	5f                   	pop    edi
c0003f1b:	5d                   	pop    ebp
c0003f1c:	c3                   	ret    

c0003f1d <f_read>:
c0003f1d:	55                   	push   ebp
c0003f1e:	57                   	push   edi
c0003f1f:	56                   	push   esi
c0003f20:	53                   	push   ebx
c0003f21:	83 ec 2c             	sub    esp,0x2c
c0003f24:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f28:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f32:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003f36:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f3a:	89 d8                	mov    eax,ebx
c0003f3c:	e8 54 e3 ff ff       	call   c0002295 <validate>
c0003f41:	89 c5                	mov    ebp,eax
c0003f43:	85 c0                	test   eax,eax
c0003f45:	0f 85 c7 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f4b:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003f4f:	85 ed                	test   ebp,ebp
c0003f51:	0f 85 bb 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f57:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003f5b:	0f 84 ac 01 00 00    	je     c000410d <f_read+0x1f0>
c0003f61:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f64:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003f67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f6b:	39 f0                	cmp    eax,esi
c0003f6d:	0f 86 b0 00 00 00    	jbe    c0004023 <f_read+0x106>
c0003f73:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0003f77:	e9 a7 00 00 00       	jmp    c0004023 <f_read+0x106>
c0003f7c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003f7f:	a9 ff 01 00 00       	test   eax,0x1ff
c0003f84:	0f 85 56 01 00 00    	jne    c00040e0 <f_read+0x1c3>
c0003f8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003f8e:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c0003f92:	89 c2                	mov    edx,eax
c0003f94:	4f                   	dec    edi
c0003f95:	c1 ea 09             	shr    edx,0x9
c0003f98:	21 d7                	and    edi,edx
c0003f9a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0003f9e:	0f 84 8f 00 00 00    	je     c0004033 <f_read+0x116>
c0003fa4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003fa8:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003fab:	89 c8                	mov    eax,ecx
c0003fad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003fb1:	e8 78 e0 ff ff       	call   c000202e <clst2sect>
c0003fb6:	85 c0                	test   eax,eax
c0003fb8:	0f 84 8d 00 00 00    	je     c000404b <f_read+0x12e>
c0003fbe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003fc2:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c0003fca:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0003fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003fd1:	0f 86 bf 00 00 00    	jbe    c0004096 <f_read+0x179>
c0003fd7:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003fdb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003fdf:	c1 ee 09             	shr    esi,0x9
c0003fe2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fe6:	01 f2                	add    edx,esi
c0003fe8:	39 c2                	cmp    edx,eax
c0003fea:	76 06                	jbe    c0003ff2 <f_read+0xd5>
c0003fec:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ff0:	89 c6                	mov    esi,eax
c0003ff2:	56                   	push   esi
c0003ff3:	57                   	push   edi
c0003ff4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ff8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ffc:	50                   	push   eax
c0003ffd:	e8 8a dd ff ff       	call   c0001d8c <disk_read>
c0004002:	83 c4 10             	add    esp,0x10
c0004005:	85 c0                	test   eax,eax
c0004007:	75 55                	jne    c000405e <f_read+0x141>
c0004009:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000400d:	75 65                	jne    c0004074 <f_read+0x157>
c000400f:	c1 e6 09             	shl    esi,0x9
c0004012:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004016:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c000401a:	01 30                	add    DWORD PTR [eax],esi
c000401c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004020:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004023:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004028:	0f 85 4e ff ff ff    	jne    c0003f7c <f_read+0x5f>
c000402e:	e9 df 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004033:	85 c0                	test   eax,eax
c0004035:	75 05                	jne    c000403c <f_read+0x11f>
c0004037:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000403a:	eb 0a                	jmp    c0004046 <f_read+0x129>
c000403c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000403f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004041:	e8 ce f1 ff ff       	call   c0003214 <get_fat.isra.2>
c0004046:	83 f8 01             	cmp    eax,0x1
c0004049:	77 0e                	ja     c0004059 <f_read+0x13c>
c000404b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000404f:	bd 02 00 00 00       	mov    ebp,0x2
c0004054:	e9 b9 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004059:	83 f8 ff             	cmp    eax,0xffffffff
c000405c:	75 0e                	jne    c000406c <f_read+0x14f>
c000405e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004062:	bd 01 00 00 00       	mov    ebp,0x1
c0004067:	e9 a6 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c000406c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000406f:	e9 30 ff ff ff       	jmp    c0003fa4 <f_read+0x87>
c0004074:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004077:	29 f8                	sub    eax,edi
c0004079:	39 f0                	cmp    eax,esi
c000407b:	73 92                	jae    c000400f <f_read+0xf2>
c000407d:	c1 e0 09             	shl    eax,0x9
c0004080:	8d 53 28             	lea    edx,[ebx+0x28]
c0004083:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004087:	b9 00 02 00 00       	mov    ecx,0x200
c000408c:	e8 72 dd ff ff       	call   c0001e03 <mem_cpy>
c0004091:	e9 79 ff ff ff       	jmp    c000400f <f_read+0xf2>
c0004096:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004099:	39 f8                	cmp    eax,edi
c000409b:	74 40                	je     c00040dd <f_read+0x1c0>
c000409d:	8d 73 28             	lea    esi,[ebx+0x28]
c00040a0:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040a4:	74 1e                	je     c00040c4 <f_read+0x1a7>
c00040a6:	6a 01                	push   0x1
c00040a8:	50                   	push   eax
c00040a9:	56                   	push   esi
c00040aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040ae:	50                   	push   eax
c00040af:	e8 ee dc ff ff       	call   c0001da2 <disk_write>
c00040b4:	83 c4 10             	add    esp,0x10
c00040b7:	85 c0                	test   eax,eax
c00040b9:	75 a3                	jne    c000405e <f_read+0x141>
c00040bb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040be:	83 e0 7f             	and    eax,0x7f
c00040c1:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040c4:	6a 01                	push   0x1
c00040c6:	57                   	push   edi
c00040c7:	56                   	push   esi
c00040c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040cc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040d0:	50                   	push   eax
c00040d1:	e8 b6 dc ff ff       	call   c0001d8c <disk_read>
c00040d6:	83 c4 10             	add    esp,0x10
c00040d9:	85 c0                	test   eax,eax
c00040db:	75 81                	jne    c000405e <f_read+0x141>
c00040dd:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00040e0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040e3:	ba 00 02 00 00       	mov    edx,0x200
c00040e8:	25 ff 01 00 00       	and    eax,0x1ff
c00040ed:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00040f1:	29 c2                	sub    edx,eax
c00040f3:	39 d6                	cmp    esi,edx
c00040f5:	76 02                	jbe    c00040f9 <f_read+0x1dc>
c00040f7:	89 d6                	mov    esi,edx
c00040f9:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00040fd:	89 f1                	mov    ecx,esi
c00040ff:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004103:	e8 fb dc ff ff       	call   c0001e03 <mem_cpy>
c0004108:	e9 05 ff ff ff       	jmp    c0004012 <f_read+0xf5>
c000410d:	bd 07 00 00 00       	mov    ebp,0x7
c0004112:	83 c4 2c             	add    esp,0x2c
c0004115:	89 e8                	mov    eax,ebp
c0004117:	5b                   	pop    ebx
c0004118:	5e                   	pop    esi
c0004119:	5f                   	pop    edi
c000411a:	5d                   	pop    ebp
c000411b:	c3                   	ret    

c000411c <f_write>:
c000411c:	55                   	push   ebp
c000411d:	57                   	push   edi
c000411e:	56                   	push   esi
c000411f:	53                   	push   ebx
c0004120:	83 ec 2c             	sub    esp,0x2c
c0004123:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004127:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000412b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004131:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004135:	89 d8                	mov    eax,ebx
c0004137:	e8 59 e1 ff ff       	call   c0002295 <validate>
c000413c:	89 c5                	mov    ebp,eax
c000413e:	85 c0                	test   eax,eax
c0004140:	0f 85 14 02 00 00    	jne    c000435a <f_write+0x23e>
c0004146:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000414a:	85 ed                	test   ebp,ebp
c000414c:	0f 85 08 02 00 00    	jne    c000435a <f_write+0x23e>
c0004152:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004156:	0f 84 f9 01 00 00    	je     c0004355 <f_write+0x239>
c000415c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000415f:	89 c7                	mov    edi,eax
c0004161:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004165:	0f 83 ef 00 00 00    	jae    c000425a <f_write+0x13e>
c000416b:	f7 d0                	not    eax
c000416d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004171:	e9 e4 00 00 00       	jmp    c000425a <f_write+0x13e>
c0004176:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004179:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000417f:	0f 85 9a 01 00 00    	jne    c000431f <f_write+0x203>
c0004185:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004189:	89 d1                	mov    ecx,edx
c000418b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000418f:	c1 e9 09             	shr    ecx,0x9
c0004192:	48                   	dec    eax
c0004193:	21 c8                	and    eax,ecx
c0004195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004199:	0f 84 c8 00 00 00    	je     c0004267 <f_write+0x14b>
c000419f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041a3:	0f 85 22 01 00 00    	jne    c00042cb <f_write+0x1af>
c00041a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041ad:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041b0:	89 c8                	mov    eax,ecx
c00041b2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041b6:	e8 73 de ff ff       	call   c000202e <clst2sect>
c00041bb:	85 c0                	test   eax,eax
c00041bd:	0f 84 d2 00 00 00    	je     c0004295 <f_write+0x179>
c00041c3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00041c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041cb:	01 c7                	add    edi,eax
c00041cd:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041d5:	0f 86 1c 01 00 00    	jbe    c00042f7 <f_write+0x1db>
c00041db:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041df:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041e3:	c1 ee 09             	shr    esi,0x9
c00041e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041ea:	01 f2                	add    edx,esi
c00041ec:	39 c2                	cmp    edx,eax
c00041ee:	76 06                	jbe    c00041f6 <f_write+0xda>
c00041f0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041f4:	89 c6                	mov    esi,eax
c00041f6:	56                   	push   esi
c00041f7:	57                   	push   edi
c00041f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041fc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004200:	50                   	push   eax
c0004201:	e8 9c db ff ff       	call   c0001da2 <disk_write>
c0004206:	83 c4 10             	add    esp,0x10
c0004209:	85 c0                	test   eax,eax
c000420b:	0f 85 97 00 00 00    	jne    c00042a8 <f_write+0x18c>
c0004211:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004214:	29 fa                	sub    edx,edi
c0004216:	39 f2                	cmp    edx,esi
c0004218:	73 1d                	jae    c0004237 <f_write+0x11b>
c000421a:	8d 43 28             	lea    eax,[ebx+0x28]
c000421d:	c1 e2 09             	shl    edx,0x9
c0004220:	b9 00 02 00 00       	mov    ecx,0x200
c0004225:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004229:	e8 d5 db ff ff       	call   c0001e03 <mem_cpy>
c000422e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004231:	83 e0 7f             	and    eax,0x7f
c0004234:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004237:	c1 e6 09             	shl    esi,0x9
c000423a:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000423e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004242:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004246:	01 30                	add    DWORD PTR [eax],esi
c0004248:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000424b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000424e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004251:	39 f0                	cmp    eax,esi
c0004253:	73 02                	jae    c0004257 <f_write+0x13b>
c0004255:	89 f0                	mov    eax,esi
c0004257:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000425a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000425f:	0f 85 11 ff ff ff    	jne    c0004176 <f_write+0x5a>
c0004265:	eb 1b                	jmp    c0004282 <f_write+0x166>
c0004267:	85 d2                	test   edx,edx
c0004269:	75 09                	jne    c0004274 <f_write+0x158>
c000426b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000426e:	85 c0                	test   eax,eax
c0004270:	75 1e                	jne    c0004290 <f_write+0x174>
c0004272:	eb 03                	jmp    c0004277 <f_write+0x15b>
c0004274:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004277:	89 d8                	mov    eax,ebx
c0004279:	e8 62 f1 ff ff       	call   c00033e0 <create_chain>
c000427e:	85 c0                	test   eax,eax
c0004280:	75 0e                	jne    c0004290 <f_write+0x174>
c0004282:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004285:	83 c8 40             	or     eax,0x40
c0004288:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000428b:	e9 ca 00 00 00       	jmp    c000435a <f_write+0x23e>
c0004290:	83 f8 01             	cmp    eax,0x1
c0004293:	75 0e                	jne    c00042a3 <f_write+0x187>
c0004295:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004299:	bd 02 00 00 00       	mov    ebp,0x2
c000429e:	e9 b7 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042a3:	83 f8 ff             	cmp    eax,0xffffffff
c00042a6:	75 0e                	jne    c00042b6 <f_write+0x19a>
c00042a8:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042ac:	bd 01 00 00 00       	mov    ebp,0x1
c00042b1:	e9 a4 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042b6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042b9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042bd:	0f 85 dc fe ff ff    	jne    c000419f <f_write+0x83>
c00042c3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042c6:	e9 d4 fe ff ff       	jmp    c000419f <f_write+0x83>
c00042cb:	6a 01                	push   0x1
c00042cd:	8d 43 28             	lea    eax,[ebx+0x28]
c00042d0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042d3:	50                   	push   eax
c00042d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042dc:	50                   	push   eax
c00042dd:	e8 c0 da ff ff       	call   c0001da2 <disk_write>
c00042e2:	83 c4 10             	add    esp,0x10
c00042e5:	85 c0                	test   eax,eax
c00042e7:	75 bf                	jne    c00042a8 <f_write+0x18c>
c00042e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ec:	83 e0 7f             	and    eax,0x7f
c00042ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042f2:	e9 b2 fe ff ff       	jmp    c00041a9 <f_write+0x8d>
c00042f7:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00042fa:	74 20                	je     c000431c <f_write+0x200>
c00042fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042ff:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0004302:	76 18                	jbe    c000431c <f_write+0x200>
c0004304:	6a 01                	push   0x1
c0004306:	8d 43 28             	lea    eax,[ebx+0x28]
c0004309:	57                   	push   edi
c000430a:	50                   	push   eax
c000430b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000430f:	50                   	push   eax
c0004310:	e8 77 da ff ff       	call   c0001d8c <disk_read>
c0004315:	83 c4 10             	add    esp,0x10
c0004318:	85 c0                	test   eax,eax
c000431a:	75 8c                	jne    c00042a8 <f_write+0x18c>
c000431c:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000431f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004322:	ba 00 02 00 00       	mov    edx,0x200
c0004327:	25 ff 01 00 00       	and    eax,0x1ff
c000432c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004330:	29 c2                	sub    edx,eax
c0004332:	39 d6                	cmp    esi,edx
c0004334:	76 02                	jbe    c0004338 <f_write+0x21c>
c0004336:	89 d6                	mov    esi,edx
c0004338:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c000433c:	89 f1                	mov    ecx,esi
c000433e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004342:	e8 bc da ff ff       	call   c0001e03 <mem_cpy>
c0004347:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000434a:	83 c8 80             	or     eax,0xffffff80
c000434d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004350:	e9 e5 fe ff ff       	jmp    c000423a <f_write+0x11e>
c0004355:	bd 07 00 00 00       	mov    ebp,0x7
c000435a:	83 c4 2c             	add    esp,0x2c
c000435d:	89 e8                	mov    eax,ebp
c000435f:	5b                   	pop    ebx
c0004360:	5e                   	pop    esi
c0004361:	5f                   	pop    edi
c0004362:	5d                   	pop    ebp
c0004363:	c3                   	ret    

c0004364 <f_sync>:
c0004364:	56                   	push   esi
c0004365:	53                   	push   ebx
c0004366:	83 ec 14             	sub    esp,0x14
c0004369:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000436d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004371:	89 d8                	mov    eax,ebx
c0004373:	e8 1d df ff ff       	call   c0002295 <validate>
c0004378:	85 c0                	test   eax,eax
c000437a:	0f 85 a3 00 00 00    	jne    c0004423 <f_sync+0xbf>
c0004380:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004383:	f6 c2 40             	test   dl,0x40
c0004386:	0f 84 97 00 00 00    	je     c0004423 <f_sync+0xbf>
c000438c:	80 e2 80             	and    dl,0x80
c000438f:	74 2e                	je     c00043bf <f_sync+0x5b>
c0004391:	6a 01                	push   0x1
c0004393:	8d 43 28             	lea    eax,[ebx+0x28]
c0004396:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004399:	50                   	push   eax
c000439a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000439e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043a2:	50                   	push   eax
c00043a3:	e8 fa d9 ff ff       	call   c0001da2 <disk_write>
c00043a8:	83 c4 10             	add    esp,0x10
c00043ab:	89 c2                	mov    edx,eax
c00043ad:	b8 01 00 00 00       	mov    eax,0x1
c00043b2:	85 d2                	test   edx,edx
c00043b4:	75 6d                	jne    c0004423 <f_sync+0xbf>
c00043b6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043b9:	83 e0 7f             	and    eax,0x7f
c00043bc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043bf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043c6:	e8 73 df ff ff       	call   c000233e <move_window>
c00043cb:	85 c0                	test   eax,eax
c00043cd:	75 54                	jne    c0004423 <f_sync+0xbf>
c00043cf:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043d2:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043d5:	89 f2                	mov    edx,esi
c00043d7:	83 c8 20             	or     eax,0x20
c00043da:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00043dd:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00043e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043e2:	e8 05 ee ff ff       	call   c00031ec <st_clust.isra.1>
c00043e7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043ea:	8d 46 1c             	lea    eax,[esi+0x1c]
c00043ed:	e8 0e da ff ff       	call   c0001e00 <st_dword>
c00043f2:	8d 46 16             	lea    eax,[esi+0x16]
c00043f5:	ba 00 00 21 50       	mov    edx,0x50210000
c00043fa:	e8 01 da ff ff       	call   c0001e00 <st_dword>
c00043ff:	31 d2                	xor    edx,edx
c0004401:	8d 46 12             	lea    eax,[esi+0x12]
c0004404:	e8 f3 d9 ff ff       	call   c0001dfc <st_word>
c0004409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000440d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004411:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004415:	e8 5b e9 ff ff       	call   c0002d75 <sync_fs>
c000441a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000441d:	83 e2 bf             	and    edx,0xffffffbf
c0004420:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004423:	83 c4 14             	add    esp,0x14
c0004426:	5b                   	pop    ebx
c0004427:	5e                   	pop    esi
c0004428:	c3                   	ret    

c0004429 <f_close>:
c0004429:	53                   	push   ebx
c000442a:	83 ec 24             	sub    esp,0x24
c000442d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004431:	53                   	push   ebx
c0004432:	e8 2d ff ff ff       	call   c0004364 <f_sync>
c0004437:	83 c4 10             	add    esp,0x10
c000443a:	85 c0                	test   eax,eax
c000443c:	75 15                	jne    c0004453 <f_close+0x2a>
c000443e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004442:	89 d8                	mov    eax,ebx
c0004444:	e8 4c de ff ff       	call   c0002295 <validate>
c0004449:	85 c0                	test   eax,eax
c000444b:	75 06                	jne    c0004453 <f_close+0x2a>
c000444d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004453:	83 c4 18             	add    esp,0x18
c0004456:	5b                   	pop    ebx
c0004457:	c3                   	ret    

c0004458 <f_lseek>:
c0004458:	55                   	push   ebp
c0004459:	57                   	push   edi
c000445a:	56                   	push   esi
c000445b:	53                   	push   ebx
c000445c:	83 ec 2c             	sub    esp,0x2c
c000445f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004463:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004467:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000446b:	89 d8                	mov    eax,ebx
c000446d:	e8 23 de ff ff       	call   c0002295 <validate>
c0004472:	89 c5                	mov    ebp,eax
c0004474:	85 c0                	test   eax,eax
c0004476:	0f 85 83 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c000447c:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004480:	85 ed                	test   ebp,ebp
c0004482:	0f 85 77 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c0004488:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000448b:	39 f0                	cmp    eax,esi
c000448d:	73 08                	jae    c0004497 <f_lseek+0x3f>
c000448f:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004493:	75 02                	jne    c0004497 <f_lseek+0x3f>
c0004495:	89 c6                	mov    esi,eax
c0004497:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000449a:	85 f6                	test   esi,esi
c000449c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044a3:	75 07                	jne    c00044ac <f_lseek+0x54>
c00044a5:	31 f6                	xor    esi,esi
c00044a7:	e9 e2 00 00 00       	jmp    c000458e <f_lseek+0x136>
c00044ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044b0:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044b4:	c1 e7 09             	shl    edi,0x9
c00044b7:	85 c9                	test   ecx,ecx
c00044b9:	74 28                	je     c00044e3 <f_lseek+0x8b>
c00044bb:	49                   	dec    ecx
c00044bc:	31 d2                	xor    edx,edx
c00044be:	8d 46 ff             	lea    eax,[esi-0x1]
c00044c1:	f7 f7                	div    edi
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044c9:	89 c8                	mov    eax,ecx
c00044cb:	f7 f7                	div    edi
c00044cd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044d1:	72 10                	jb     c00044e3 <f_lseek+0x8b>
c00044d3:	89 f8                	mov    eax,edi
c00044d5:	f7 d8                	neg    eax
c00044d7:	21 c1                	and    ecx,eax
c00044d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00044dc:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00044df:	29 ce                	sub    esi,ecx
c00044e1:	eb 3c                	jmp    c000451f <f_lseek+0xc7>
c00044e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00044e6:	85 c0                	test   eax,eax
c00044e8:	75 32                	jne    c000451c <f_lseek+0xc4>
c00044ea:	31 d2                	xor    edx,edx
c00044ec:	89 d8                	mov    eax,ebx
c00044ee:	e8 ed ee ff ff       	call   c00033e0 <create_chain>
c00044f3:	83 f8 01             	cmp    eax,0x1
c00044f6:	75 0e                	jne    c0004506 <f_lseek+0xae>
c00044f8:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044fc:	bd 02 00 00 00       	mov    ebp,0x2
c0004501:	e9 f9 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004506:	83 f8 ff             	cmp    eax,0xffffffff
c0004509:	75 0e                	jne    c0004519 <f_lseek+0xc1>
c000450b:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000450f:	bd 01 00 00 00       	mov    ebp,0x1
c0004514:	e9 e6 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004519:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000451c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000451f:	85 c0                	test   eax,eax
c0004521:	74 82                	je     c00044a5 <f_lseek+0x4d>
c0004523:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004526:	39 fe                	cmp    esi,edi
c0004528:	76 3d                	jbe    c0004567 <f_lseek+0x10f>
c000452a:	01 fa                	add    edx,edi
c000452c:	29 fe                	sub    esi,edi
c000452e:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004531:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004535:	89 c2                	mov    edx,eax
c0004537:	74 0d                	je     c0004546 <f_lseek+0xee>
c0004539:	89 d8                	mov    eax,ebx
c000453b:	e8 a0 ee ff ff       	call   c00033e0 <create_chain>
c0004540:	85 c0                	test   eax,eax
c0004542:	75 09                	jne    c000454d <f_lseek+0xf5>
c0004544:	eb 1f                	jmp    c0004565 <f_lseek+0x10d>
c0004546:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004548:	e8 c7 ec ff ff       	call   c0003214 <get_fat.isra.2>
c000454d:	83 f8 ff             	cmp    eax,0xffffffff
c0004550:	74 b9                	je     c000450b <f_lseek+0xb3>
c0004552:	83 f8 01             	cmp    eax,0x1
c0004555:	76 a1                	jbe    c00044f8 <f_lseek+0xa0>
c0004557:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000455b:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c000455e:	76 98                	jbe    c00044f8 <f_lseek+0xa0>
c0004560:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004563:	eb be                	jmp    c0004523 <f_lseek+0xcb>
c0004565:	31 f6                	xor    esi,esi
c0004567:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000456a:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004570:	0f 84 2f ff ff ff    	je     c00044a5 <f_lseek+0x4d>
c0004576:	89 c2                	mov    edx,eax
c0004578:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000457c:	e8 ad da ff ff       	call   c000202e <clst2sect>
c0004581:	85 c0                	test   eax,eax
c0004583:	0f 84 6f ff ff ff    	je     c00044f8 <f_lseek+0xa0>
c0004589:	c1 ee 09             	shr    esi,0x9
c000458c:	01 c6                	add    esi,eax
c000458e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004591:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004594:	76 0c                	jbe    c00045a2 <f_lseek+0x14a>
c0004596:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004599:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000459c:	83 ca 40             	or     edx,0x40
c000459f:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045a2:	a9 ff 01 00 00       	test   eax,0x1ff
c00045a7:	74 56                	je     c00045ff <f_lseek+0x1a7>
c00045a9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045ac:	39 f0                	cmp    eax,esi
c00045ae:	74 4f                	je     c00045ff <f_lseek+0x1a7>
c00045b0:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045b3:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045b7:	74 26                	je     c00045df <f_lseek+0x187>
c00045b9:	6a 01                	push   0x1
c00045bb:	50                   	push   eax
c00045bc:	57                   	push   edi
c00045bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045c5:	50                   	push   eax
c00045c6:	e8 d7 d7 ff ff       	call   c0001da2 <disk_write>
c00045cb:	83 c4 10             	add    esp,0x10
c00045ce:	85 c0                	test   eax,eax
c00045d0:	0f 85 35 ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045d6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045d9:	83 e0 7f             	and    eax,0x7f
c00045dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045df:	6a 01                	push   0x1
c00045e1:	56                   	push   esi
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 9b d7 ff ff       	call   c0001d8c <disk_read>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 0f ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045fc:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00045ff:	83 c4 2c             	add    esp,0x2c
c0004602:	89 e8                	mov    eax,ebp
c0004604:	5b                   	pop    ebx
c0004605:	5e                   	pop    esi
c0004606:	5f                   	pop    edi
c0004607:	5d                   	pop    ebp
c0004608:	c3                   	ret    

c0004609 <f_opendir>:
c0004609:	56                   	push   esi
c000460a:	b8 09 00 00 00       	mov    eax,0x9
c000460f:	53                   	push   ebx
c0004610:	83 ec 24             	sub    esp,0x24
c0004613:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004617:	85 db                	test   ebx,ebx
c0004619:	0f 84 af 00 00 00    	je     c00046ce <f_opendir+0xc5>
c000461f:	31 c9                	xor    ecx,ecx
c0004621:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004625:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004629:	e8 63 de ff ff       	call   c0002491 <mount_volume>
c000462e:	85 c0                	test   eax,eax
c0004630:	0f 85 92 00 00 00    	jne    c00046c8 <f_opendir+0xbf>
c0004636:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000463a:	83 ec 0c             	sub    esp,0xc
c000463d:	89 03                	mov    DWORD PTR [ebx],eax
c000463f:	68 00 02 00 00       	push   0x200
c0004644:	e8 d7 15 00 00       	call   c0005c20 <ff_memalloc>
c0004649:	83 c4 10             	add    esp,0x10
c000464c:	89 c6                	mov    esi,eax
c000464e:	b8 11 00 00 00       	mov    eax,0x11
c0004653:	85 f6                	test   esi,esi
c0004655:	74 77                	je     c00046ce <f_opendir+0xc5>
c0004657:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000465b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000465f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004662:	89 d8                	mov    eax,ebx
c0004664:	e8 72 f3 ff ff       	call   c00039db <follow_path>
c0004669:	85 c0                	test   eax,eax
c000466b:	75 37                	jne    c00046a4 <f_opendir+0x9b>
c000466d:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004671:	75 1c                	jne    c000468f <f_opendir+0x86>
c0004673:	b8 05 00 00 00       	mov    eax,0x5
c0004678:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000467c:	74 26                	je     c00046a4 <f_opendir+0x9b>
c000467e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004681:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004685:	8a 00                	mov    al,BYTE PTR [eax]
c0004687:	e8 37 eb ff ff       	call   c00031c3 <ld_clust.isra.0>
c000468c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000468f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004693:	31 d2                	xor    edx,edx
c0004695:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004699:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 74 ec ff ff       	call   c0003318 <dir_sdi>
c00046a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046a8:	83 ec 0c             	sub    esp,0xc
c00046ab:	56                   	push   esi
c00046ac:	e8 87 15 00 00       	call   c0005c38 <ff_memfree>
c00046b1:	83 c4 10             	add    esp,0x10
c00046b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046b8:	83 f8 04             	cmp    eax,0x4
c00046bb:	74 06                	je     c00046c3 <f_opendir+0xba>
c00046bd:	85 c0                	test   eax,eax
c00046bf:	74 0d                	je     c00046ce <f_opendir+0xc5>
c00046c1:	eb 05                	jmp    c00046c8 <f_opendir+0xbf>
c00046c3:	b8 05 00 00 00       	mov    eax,0x5
c00046c8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046ce:	83 c4 24             	add    esp,0x24
c00046d1:	5b                   	pop    ebx
c00046d2:	5e                   	pop    esi
c00046d3:	c3                   	ret    

c00046d4 <f_closedir>:
c00046d4:	53                   	push   ebx
c00046d5:	83 ec 18             	sub    esp,0x18
c00046d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046e0:	89 d8                	mov    eax,ebx
c00046e2:	e8 ae db ff ff       	call   c0002295 <validate>
c00046e7:	85 c0                	test   eax,eax
c00046e9:	75 06                	jne    c00046f1 <f_closedir+0x1d>
c00046eb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f1:	83 c4 18             	add    esp,0x18
c00046f4:	5b                   	pop    ebx
c00046f5:	c3                   	ret    

c00046f6 <f_readdir>:
c00046f6:	57                   	push   edi
c00046f7:	56                   	push   esi
c00046f8:	53                   	push   ebx
c00046f9:	83 ec 20             	sub    esp,0x20
c00046fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004700:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004704:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004708:	89 d8                	mov    eax,ebx
c000470a:	e8 86 db ff ff       	call   c0002295 <validate>
c000470f:	85 c0                	test   eax,eax
c0004711:	75 6e                	jne    c0004781 <f_readdir+0x8b>
c0004713:	85 ff                	test   edi,edi
c0004715:	75 0b                	jne    c0004722 <f_readdir+0x2c>
c0004717:	31 d2                	xor    edx,edx
c0004719:	89 d8                	mov    eax,ebx
c000471b:	e8 f8 eb ff ff       	call   c0003318 <dir_sdi>
c0004720:	eb 5f                	jmp    c0004781 <f_readdir+0x8b>
c0004722:	83 ec 0c             	sub    esp,0xc
c0004725:	68 00 02 00 00       	push   0x200
c000472a:	e8 f1 14 00 00       	call   c0005c20 <ff_memalloc>
c000472f:	83 c4 10             	add    esp,0x10
c0004732:	89 c6                	mov    esi,eax
c0004734:	b8 11 00 00 00       	mov    eax,0x11
c0004739:	85 f6                	test   esi,esi
c000473b:	74 44                	je     c0004781 <f_readdir+0x8b>
c000473d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004741:	31 d2                	xor    edx,edx
c0004743:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004746:	89 d8                	mov    eax,ebx
c0004748:	e8 ca ef ff ff       	call   c0003717 <dir_read>
c000474d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004752:	75 19                	jne    c000476d <f_readdir+0x77>
c0004754:	89 fa                	mov    edx,edi
c0004756:	89 d8                	mov    eax,ebx
c0004758:	e8 70 e8 ff ff       	call   c0002fcd <get_fileinfo>
c000475d:	31 d2                	xor    edx,edx
c000475f:	89 d8                	mov    eax,ebx
c0004761:	e8 47 ee ff ff       	call   c00035ad <dir_next>
c0004766:	83 f8 04             	cmp    eax,0x4
c0004769:	75 02                	jne    c000476d <f_readdir+0x77>
c000476b:	31 c0                	xor    eax,eax
c000476d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004771:	83 ec 0c             	sub    esp,0xc
c0004774:	56                   	push   esi
c0004775:	e8 be 14 00 00       	call   c0005c38 <ff_memfree>
c000477a:	83 c4 10             	add    esp,0x10
c000477d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004781:	83 c4 20             	add    esp,0x20
c0004784:	5b                   	pop    ebx
c0004785:	5e                   	pop    esi
c0004786:	5f                   	pop    edi
c0004787:	c3                   	ret    

c0004788 <f_stat>:
c0004788:	57                   	push   edi
c0004789:	31 c9                	xor    ecx,ecx
c000478b:	56                   	push   esi
c000478c:	53                   	push   ebx
c000478d:	83 ec 30             	sub    esp,0x30
c0004790:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004794:	89 e2                	mov    edx,esp
c0004796:	8d 44 24 40          	lea    eax,[esp+0x40]
c000479a:	e8 f2 dc ff ff       	call   c0002491 <mount_volume>
c000479f:	89 c3                	mov    ebx,eax
c00047a1:	85 c0                	test   eax,eax
c00047a3:	75 59                	jne    c00047fe <f_stat+0x76>
c00047a5:	83 ec 0c             	sub    esp,0xc
c00047a8:	bb 11 00 00 00       	mov    ebx,0x11
c00047ad:	68 00 02 00 00       	push   0x200
c00047b2:	e8 69 14 00 00       	call   c0005c20 <ff_memalloc>
c00047b7:	83 c4 10             	add    esp,0x10
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	74 3e                	je     c00047fe <f_stat+0x76>
c00047c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047c3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047ca:	89 e0                	mov    eax,esp
c00047cc:	e8 0a f2 ff ff       	call   c00039db <follow_path>
c00047d1:	89 c3                	mov    ebx,eax
c00047d3:	85 c0                	test   eax,eax
c00047d5:	75 1b                	jne    c00047f2 <f_stat+0x6a>
c00047d7:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00047dc:	75 0f                	jne    c00047ed <f_stat+0x65>
c00047de:	85 ff                	test   edi,edi
c00047e0:	74 10                	je     c00047f2 <f_stat+0x6a>
c00047e2:	89 fa                	mov    edx,edi
c00047e4:	89 e0                	mov    eax,esp
c00047e6:	e8 e2 e7 ff ff       	call   c0002fcd <get_fileinfo>
c00047eb:	eb 05                	jmp    c00047f2 <f_stat+0x6a>
c00047ed:	bb 06 00 00 00       	mov    ebx,0x6
c00047f2:	83 ec 0c             	sub    esp,0xc
c00047f5:	56                   	push   esi
c00047f6:	e8 3d 14 00 00       	call   c0005c38 <ff_memfree>
c00047fb:	83 c4 10             	add    esp,0x10
c00047fe:	83 c4 30             	add    esp,0x30
c0004801:	89 d8                	mov    eax,ebx
c0004803:	5b                   	pop    ebx
c0004804:	5e                   	pop    esi
c0004805:	5f                   	pop    edi
c0004806:	c3                   	ret    

c0004807 <f_getfree>:
c0004807:	55                   	push   ebp
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	57                   	push   edi
c000480b:	56                   	push   esi
c000480c:	53                   	push   ebx
c000480d:	83 ec 2c             	sub    esp,0x2c
c0004810:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004814:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004818:	e8 74 dc ff ff       	call   c0002491 <mount_volume>
c000481d:	89 c7                	mov    edi,eax
c000481f:	85 c0                	test   eax,eax
c0004821:	0f 85 df 00 00 00    	jne    c0004906 <f_getfree+0xff>
c0004827:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000482b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000482f:	89 30                	mov    DWORD PTR [eax],esi
c0004831:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004834:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004837:	8d 55 fe             	lea    edx,[ebp-0x2]
c000483a:	39 d0                	cmp    eax,edx
c000483c:	77 0b                	ja     c0004849 <f_getfree+0x42>
c000483e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004842:	89 01                	mov    DWORD PTR [ecx],eax
c0004844:	e9 bd 00 00 00       	jmp    c0004906 <f_getfree+0xff>
c0004849:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c000484c:	75 29                	jne    c0004877 <f_getfree+0x70>
c000484e:	bd 02 00 00 00       	mov    ebp,0x2
c0004853:	31 db                	xor    ebx,ebx
c0004855:	89 ea                	mov    edx,ebp
c0004857:	89 f0                	mov    eax,esi
c0004859:	e8 b6 e9 ff ff       	call   c0003214 <get_fat.isra.2>
c000485e:	83 f8 ff             	cmp    eax,0xffffffff
c0004861:	74 7d                	je     c00048e0 <f_getfree+0xd9>
c0004863:	83 f8 01             	cmp    eax,0x1
c0004866:	74 7f                	je     c00048e7 <f_getfree+0xe0>
c0004868:	83 d3 00             	adc    ebx,0x0
c000486b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486f:	45                   	inc    ebp
c0004870:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004873:	77 e0                	ja     c0004855 <f_getfree+0x4e>
c0004875:	eb 79                	jmp    c00048f0 <f_getfree+0xe9>
c0004877:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c000487a:	31 db                	xor    ebx,ebx
c000487c:	31 f6                	xor    esi,esi
c000487e:	85 f6                	test   esi,esi
c0004880:	75 18                	jne    c000489a <f_getfree+0x93>
c0004882:	8d 42 01             	lea    eax,[edx+0x1]
c0004885:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004889:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000488d:	e8 ac da ff ff       	call   c000233e <move_window>
c0004892:	85 c0                	test   eax,eax
c0004894:	75 58                	jne    c00048ee <f_getfree+0xe7>
c0004896:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000489a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000489e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048a2:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c00048a6:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048a9:	75 13                	jne    c00048be <f_getfree+0xb7>
c00048ab:	e8 27 d5 ff ff       	call   c0001dd7 <ld_word>
c00048b0:	0f b7 c0             	movzx  eax,ax
c00048b3:	83 f8 01             	cmp    eax,0x1
c00048b6:	83 d3 00             	adc    ebx,0x0
c00048b9:	83 c6 02             	add    esi,0x2
c00048bc:	eb 13                	jmp    c00048d1 <f_getfree+0xca>
c00048be:	e8 21 d5 ff ff       	call   c0001de4 <ld_dword>
c00048c3:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048c8:	83 f8 01             	cmp    eax,0x1
c00048cb:	83 d3 00             	adc    ebx,0x0
c00048ce:	83 c6 04             	add    esi,0x4
c00048d1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00048d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048db:	4d                   	dec    ebp
c00048dc:	75 a0                	jne    c000487e <f_getfree+0x77>
c00048de:	eb 10                	jmp    c00048f0 <f_getfree+0xe9>
c00048e0:	bf 01 00 00 00       	mov    edi,0x1
c00048e5:	eb 09                	jmp    c00048f0 <f_getfree+0xe9>
c00048e7:	bf 02 00 00 00       	mov    edi,0x2
c00048ec:	eb 02                	jmp    c00048f0 <f_getfree+0xe9>
c00048ee:	89 c7                	mov    edi,eax
c00048f0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00048f4:	89 18                	mov    DWORD PTR [eax],ebx
c00048f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fa:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c00048fd:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004900:	83 ca 01             	or     edx,0x1
c0004903:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004906:	83 c4 2c             	add    esp,0x2c
c0004909:	89 f8                	mov    eax,edi
c000490b:	5b                   	pop    ebx
c000490c:	5e                   	pop    esi
c000490d:	5f                   	pop    edi
c000490e:	5d                   	pop    ebp
c000490f:	c3                   	ret    

c0004910 <f_truncate>:
c0004910:	56                   	push   esi
c0004911:	53                   	push   ebx
c0004912:	83 ec 14             	sub    esp,0x14
c0004915:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004919:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000491d:	89 d8                	mov    eax,ebx
c000491f:	e8 71 d9 ff ff       	call   c0002295 <validate>
c0004924:	89 c6                	mov    esi,eax
c0004926:	85 c0                	test   eax,eax
c0004928:	0f 85 c4 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000492e:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004932:	85 f6                	test   esi,esi
c0004934:	0f 85 b8 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000493a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000493e:	0f 84 a9 00 00 00    	je     c00049ed <f_truncate+0xdd>
c0004944:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004947:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000494a:	0f 83 a2 00 00 00    	jae    c00049f2 <f_truncate+0xe2>
c0004950:	85 c0                	test   eax,eax
c0004952:	75 15                	jne    c0004969 <f_truncate+0x59>
c0004954:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004957:	31 c9                	xor    ecx,ecx
c0004959:	89 d8                	mov    eax,ebx
c000495b:	e8 bf eb ff ff       	call   c000351f <remove_chain>
c0004960:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004967:	eb 35                	jmp    c000499e <f_truncate+0x8e>
c0004969:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000496c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000496e:	e8 a1 e8 ff ff       	call   c0003214 <get_fat.isra.2>
c0004973:	89 c2                	mov    edx,eax
c0004975:	b8 01 00 00 00       	mov    eax,0x1
c000497a:	83 fa ff             	cmp    edx,0xffffffff
c000497d:	74 1f                	je     c000499e <f_truncate+0x8e>
c000497f:	b8 02 00 00 00       	mov    eax,0x2
c0004984:	83 fa 01             	cmp    edx,0x1
c0004987:	74 15                	je     c000499e <f_truncate+0x8e>
c0004989:	31 c0                	xor    eax,eax
c000498b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000498f:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004992:	76 0a                	jbe    c000499e <f_truncate+0x8e>
c0004994:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004997:	89 d8                	mov    eax,ebx
c0004999:	e8 81 eb ff ff       	call   c000351f <remove_chain>
c000499e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049a1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049a4:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049a7:	83 ca 40             	or     edx,0x40
c00049aa:	85 c0                	test   eax,eax
c00049ac:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049af:	75 35                	jne    c00049e6 <f_truncate+0xd6>
c00049b1:	80 e2 80             	and    dl,0x80
c00049b4:	74 3c                	je     c00049f2 <f_truncate+0xe2>
c00049b6:	6a 01                	push   0x1
c00049b8:	8d 43 28             	lea    eax,[ebx+0x28]
c00049bb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049be:	50                   	push   eax
c00049bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049c3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049c7:	50                   	push   eax
c00049c8:	e8 d5 d3 ff ff       	call   c0001da2 <disk_write>
c00049cd:	83 c4 10             	add    esp,0x10
c00049d0:	85 c0                	test   eax,eax
c00049d2:	75 0d                	jne    c00049e1 <f_truncate+0xd1>
c00049d4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049d7:	31 f6                	xor    esi,esi
c00049d9:	83 e0 7f             	and    eax,0x7f
c00049dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00049df:	eb 11                	jmp    c00049f2 <f_truncate+0xe2>
c00049e1:	b8 01 00 00 00       	mov    eax,0x1
c00049e6:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00049e9:	89 c6                	mov    esi,eax
c00049eb:	eb 05                	jmp    c00049f2 <f_truncate+0xe2>
c00049ed:	be 07 00 00 00       	mov    esi,0x7
c00049f2:	89 f0                	mov    eax,esi
c00049f4:	83 c4 14             	add    esp,0x14
c00049f7:	5b                   	pop    ebx
c00049f8:	5e                   	pop    esi
c00049f9:	c3                   	ret    

c00049fa <f_unlink>:
c00049fa:	55                   	push   ebp
c00049fb:	b9 02 00 00 00       	mov    ecx,0x2
c0004a00:	57                   	push   edi
c0004a01:	56                   	push   esi
c0004a02:	53                   	push   ebx
c0004a03:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a09:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a0d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a14:	e8 78 da ff ff       	call   c0002491 <mount_volume>
c0004a19:	85 c0                	test   eax,eax
c0004a1b:	0f 85 f0 00 00 00    	jne    c0004b11 <f_unlink+0x117>
c0004a21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a25:	83 ec 0c             	sub    esp,0xc
c0004a28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a2c:	68 00 02 00 00       	push   0x200
c0004a31:	e8 ea 11 00 00       	call   c0005c20 <ff_memalloc>
c0004a36:	83 c4 10             	add    esp,0x10
c0004a39:	89 c3                	mov    ebx,eax
c0004a3b:	b8 11 00 00 00       	mov    eax,0x11
c0004a40:	85 db                	test   ebx,ebx
c0004a42:	0f 84 c9 00 00 00    	je     c0004b11 <f_unlink+0x117>
c0004a48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4c:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a53:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a56:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a5a:	e8 7c ef ff ff       	call   c00039db <follow_path>
c0004a5f:	85 c0                	test   eax,eax
c0004a61:	0f 85 96 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a67:	b8 06 00 00 00       	mov    eax,0x6
c0004a6c:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a71:	0f 85 86 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a77:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004a7c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004a82:	74 07                	je     c0004a8b <f_unlink+0x91>
c0004a84:	b8 07 00 00 00       	mov    eax,0x7
c0004a89:	eb 72                	jmp    c0004afd <f_unlink+0x103>
c0004a8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004a8f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004a93:	8a 07                	mov    al,BYTE PTR [edi]
c0004a95:	e8 29 e7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004a9a:	83 e5 10             	and    ebp,0x10
c0004a9d:	89 c6                	mov    esi,eax
c0004a9f:	75 0f                	jne    c0004ab0 <f_unlink+0xb6>
c0004aa1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aa5:	e8 95 ed ff ff       	call   c000383f <dir_remove>
c0004aaa:	85 c0                	test   eax,eax
c0004aac:	74 2f                	je     c0004add <f_unlink+0xe3>
c0004aae:	eb 4d                	jmp    c0004afd <f_unlink+0x103>
c0004ab0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ab4:	31 d2                	xor    edx,edx
c0004ab6:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004aba:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004abe:	e8 55 e8 ff ff       	call   c0003318 <dir_sdi>
c0004ac3:	85 c0                	test   eax,eax
c0004ac5:	75 36                	jne    c0004afd <f_unlink+0x103>
c0004ac7:	31 d2                	xor    edx,edx
c0004ac9:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004acd:	e8 45 ec ff ff       	call   c0003717 <dir_read>
c0004ad2:	85 c0                	test   eax,eax
c0004ad4:	74 ae                	je     c0004a84 <f_unlink+0x8a>
c0004ad6:	83 f8 04             	cmp    eax,0x4
c0004ad9:	75 22                	jne    c0004afd <f_unlink+0x103>
c0004adb:	eb c4                	jmp    c0004aa1 <f_unlink+0xa7>
c0004add:	85 f6                	test   esi,esi
c0004adf:	75 0b                	jne    c0004aec <f_unlink+0xf2>
c0004ae1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae5:	e8 8b e2 ff ff       	call   c0002d75 <sync_fs>
c0004aea:	eb 11                	jmp    c0004afd <f_unlink+0x103>
c0004aec:	31 c9                	xor    ecx,ecx
c0004aee:	89 f2                	mov    edx,esi
c0004af0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004af4:	e8 26 ea ff ff       	call   c000351f <remove_chain>
c0004af9:	85 c0                	test   eax,eax
c0004afb:	74 e4                	je     c0004ae1 <f_unlink+0xe7>
c0004afd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b01:	83 ec 0c             	sub    esp,0xc
c0004b04:	53                   	push   ebx
c0004b05:	e8 2e 11 00 00       	call   c0005c38 <ff_memfree>
c0004b0a:	83 c4 10             	add    esp,0x10
c0004b0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b11:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b17:	5b                   	pop    ebx
c0004b18:	5e                   	pop    esi
c0004b19:	5f                   	pop    edi
c0004b1a:	5d                   	pop    ebp
c0004b1b:	c3                   	ret    

c0004b1c <f_mkdir>:
c0004b1c:	57                   	push   edi
c0004b1d:	b9 02 00 00 00       	mov    ecx,0x2
c0004b22:	56                   	push   esi
c0004b23:	53                   	push   ebx
c0004b24:	83 ec 50             	sub    esp,0x50
c0004b27:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b2b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b2f:	e8 5d d9 ff ff       	call   c0002491 <mount_volume>
c0004b34:	89 c3                	mov    ebx,eax
c0004b36:	85 c0                	test   eax,eax
c0004b38:	0f 85 70 01 00 00    	jne    c0004cae <f_mkdir+0x192>
c0004b3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b42:	bb 11 00 00 00       	mov    ebx,0x11
c0004b47:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004b4b:	83 ec 0c             	sub    esp,0xc
c0004b4e:	68 00 02 00 00       	push   0x200
c0004b53:	e8 c8 10 00 00       	call   c0005c20 <ff_memalloc>
c0004b58:	83 c4 10             	add    esp,0x10
c0004b5b:	89 c7                	mov    edi,eax
c0004b5d:	85 c0                	test   eax,eax
c0004b5f:	0f 84 49 01 00 00    	je     c0004cae <f_mkdir+0x192>
c0004b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b6d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b74:	e8 62 ee ff ff       	call   c00039db <follow_path>
c0004b79:	89 c3                	mov    ebx,eax
c0004b7b:	85 c0                	test   eax,eax
c0004b7d:	74 3e                	je     c0004bbd <f_mkdir+0xa1>
c0004b7f:	83 f8 04             	cmp    eax,0x4
c0004b82:	75 3e                	jne    c0004bc2 <f_mkdir+0xa6>
c0004b84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b88:	31 d2                	xor    edx,edx
c0004b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004b8e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b92:	e8 49 e8 ff ff       	call   c00033e0 <create_chain>
c0004b97:	89 c6                	mov    esi,eax
c0004b99:	85 c0                	test   eax,eax
c0004b9b:	74 0c                	je     c0004ba9 <f_mkdir+0x8d>
c0004b9d:	bb 02 00 00 00       	mov    ebx,0x2
c0004ba2:	83 f8 01             	cmp    eax,0x1
c0004ba5:	74 07                	je     c0004bae <f_mkdir+0x92>
c0004ba7:	eb 2a                	jmp    c0004bd3 <f_mkdir+0xb7>
c0004ba9:	bb 07 00 00 00       	mov    ebx,0x7
c0004bae:	31 c9                	xor    ecx,ecx
c0004bb0:	89 f2                	mov    edx,esi
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 64 e9 ff ff       	call   c000351f <remove_chain>
c0004bbb:	eb 05                	jmp    c0004bc2 <f_mkdir+0xa6>
c0004bbd:	bb 08 00 00 00       	mov    ebx,0x8
c0004bc2:	83 ec 0c             	sub    esp,0xc
c0004bc5:	57                   	push   edi
c0004bc6:	e8 6d 10 00 00       	call   c0005c38 <ff_memfree>
c0004bcb:	83 c4 10             	add    esp,0x10
c0004bce:	e9 db 00 00 00       	jmp    c0004cae <f_mkdir+0x192>
c0004bd3:	bb 01 00 00 00       	mov    ebx,0x1
c0004bd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004bdb:	74 d1                	je     c0004bae <f_mkdir+0x92>
c0004bdd:	89 f2                	mov    edx,esi
c0004bdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004be3:	e8 f1 dc ff ff       	call   c00028d9 <dir_clear>
c0004be8:	89 c3                	mov    ebx,eax
c0004bea:	85 c0                	test   eax,eax
c0004bec:	75 c0                	jne    c0004bae <f_mkdir+0x92>
c0004bee:	b9 0b 00 00 00       	mov    ecx,0xb
c0004bf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bf7:	ba 20 00 00 00       	mov    edx,0x20
c0004bfc:	83 c0 34             	add    eax,0x34
c0004bff:	e8 14 d2 ff ff       	call   c0001e18 <mem_set>
c0004c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c08:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c0d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c11:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004c15:	83 c0 4a             	add    eax,0x4a
c0004c18:	e8 e3 d1 ff ff       	call   c0001e00 <st_dword>
c0004c1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c21:	89 f1                	mov    ecx,esi
c0004c23:	8d 50 34             	lea    edx,[eax+0x34]
c0004c26:	e8 c1 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2f:	b9 20 00 00 00       	mov    ecx,0x20
c0004c34:	8d 50 34             	lea    edx,[eax+0x34]
c0004c37:	83 c0 54             	add    eax,0x54
c0004c3a:	e8 c4 d1 ff ff       	call   c0001e03 <mem_cpy>
c0004c3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c43:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c47:	8d 50 54             	lea    edx,[eax+0x54]
c0004c4a:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c4e:	e8 99 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c57:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c5f:	e8 0c ee ff ff       	call   c0003a70 <dir_register>
c0004c64:	89 c3                	mov    ebx,eax
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 40 ff ff ff    	jne    c0004bae <f_mkdir+0x92>
c0004c6e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c72:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c77:	83 c0 16             	add    eax,0x16
c0004c7a:	e8 81 d1 ff ff       	call   c0001e00 <st_dword>
c0004c7f:	89 f1                	mov    ecx,esi
c0004c81:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c89:	e8 5e e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c92:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004c96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c9a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ca2:	e8 ce e0 ff ff       	call   c0002d75 <sync_fs>
c0004ca7:	89 c3                	mov    ebx,eax
c0004ca9:	e9 14 ff ff ff       	jmp    c0004bc2 <f_mkdir+0xa6>
c0004cae:	83 c4 50             	add    esp,0x50
c0004cb1:	89 d8                	mov    eax,ebx
c0004cb3:	5b                   	pop    ebx
c0004cb4:	5e                   	pop    esi
c0004cb5:	5f                   	pop    edi
c0004cb6:	c3                   	ret    

c0004cb7 <f_rename>:
c0004cb7:	57                   	push   edi
c0004cb8:	56                   	push   esi
c0004cb9:	53                   	push   ebx
c0004cba:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004cc0:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004cc7:	e8 7c d5 ff ff       	call   c0002248 <get_ldnumber>
c0004ccc:	b9 02 00 00 00       	mov    ecx,0x2
c0004cd1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cd5:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004cdc:	e8 b0 d7 ff ff       	call   c0002491 <mount_volume>
c0004ce1:	85 c0                	test   eax,eax
c0004ce3:	0f 85 7c 01 00 00    	jne    c0004e65 <f_rename+0x1ae>
c0004ce9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ced:	83 ec 0c             	sub    esp,0xc
c0004cf0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004cf4:	68 00 02 00 00       	push   0x200
c0004cf9:	e8 22 0f 00 00       	call   c0005c20 <ff_memalloc>
c0004cfe:	83 c4 10             	add    esp,0x10
c0004d01:	89 c6                	mov    esi,eax
c0004d03:	b8 11 00 00 00       	mov    eax,0x11
c0004d08:	85 f6                	test   esi,esi
c0004d0a:	0f 84 55 01 00 00    	je     c0004e65 <f_rename+0x1ae>
c0004d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d14:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d1b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d1e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d22:	e8 b4 ec ff ff       	call   c00039db <follow_path>
c0004d27:	85 c0                	test   eax,eax
c0004d29:	0f 85 22 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d2f:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d33:	b8 06 00 00 00       	mov    eax,0x6
c0004d38:	80 e2 a0             	and    dl,0xa0
c0004d3b:	0f 85 10 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d41:	b9 20 00 00 00       	mov    ecx,0x20
c0004d46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d4e:	e8 b0 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d53:	b9 30 00 00 00       	mov    ecx,0x30
c0004d58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d5c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d60:	e8 9e d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d65:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d70:	e8 66 ec ff ff       	call   c00039db <follow_path>
c0004d75:	85 c0                	test   eax,eax
c0004d77:	75 20                	jne    c0004d99 <f_rename+0xe2>
c0004d79:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004d7d:	b8 08 00 00 00       	mov    eax,0x8
c0004d82:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004d86:	0f 85 c5 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d8c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004d90:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004d97:	eb 03                	jmp    c0004d9c <f_rename+0xe5>
c0004d99:	83 f8 04             	cmp    eax,0x4
c0004d9c:	0f 85 af 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004da2:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004da6:	e8 c5 ec ff ff       	call   c0003a70 <dir_register>
c0004dab:	85 c0                	test   eax,eax
c0004dad:	0f 85 9e 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004db3:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dba:	b9 13 00 00 00       	mov    ecx,0x13
c0004dbf:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dc2:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004dc6:	e8 38 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004dcb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004dcf:	a8 10                	test   al,0x10
c0004dd1:	75 03                	jne    c0004dd6 <f_rename+0x11f>
c0004dd3:	83 c8 20             	or     eax,0x20
c0004dd6:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ddd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004de1:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004de5:	74 54                	je     c0004e3b <f_rename+0x184>
c0004de7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004deb:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004def:	74 4a                	je     c0004e3b <f_rename+0x184>
c0004df1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004df5:	89 da                	mov    edx,ebx
c0004df7:	8a 07                	mov    al,BYTE PTR [edi]
c0004df9:	e8 c5 e3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004dfe:	89 c2                	mov    edx,eax
c0004e00:	89 f8                	mov    eax,edi
c0004e02:	e8 27 d2 ff ff       	call   c000202e <clst2sect>
c0004e07:	89 c2                	mov    edx,eax
c0004e09:	b8 02 00 00 00       	mov    eax,0x2
c0004e0e:	85 d2                	test   edx,edx
c0004e10:	74 3f                	je     c0004e51 <f_rename+0x19a>
c0004e12:	89 f8                	mov    eax,edi
c0004e14:	e8 25 d5 ff ff       	call   c000233e <move_window>
c0004e19:	85 c0                	test   eax,eax
c0004e1b:	75 34                	jne    c0004e51 <f_rename+0x19a>
c0004e1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e21:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e25:	75 14                	jne    c0004e3b <f_rename+0x184>
c0004e27:	8d 50 54             	lea    edx,[eax+0x54]
c0004e2a:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e2e:	e8 b9 e3 ff ff       	call   c00031ec <st_clust.isra.1>
c0004e33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e37:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e3b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e3f:	e8 fb e9 ff ff       	call   c000383f <dir_remove>
c0004e44:	85 c0                	test   eax,eax
c0004e46:	75 09                	jne    c0004e51 <f_rename+0x19a>
c0004e48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4c:	e8 24 df ff ff       	call   c0002d75 <sync_fs>
c0004e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e55:	83 ec 0c             	sub    esp,0xc
c0004e58:	56                   	push   esi
c0004e59:	e8 da 0d 00 00       	call   c0005c38 <ff_memfree>
c0004e5e:	83 c4 10             	add    esp,0x10
c0004e61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e65:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e6b:	5b                   	pop    ebx
c0004e6c:	5e                   	pop    esi
c0004e6d:	5f                   	pop    edi
c0004e6e:	c3                   	ret    

c0004e6f <f_chmod>:
c0004e6f:	57                   	push   edi
c0004e70:	b9 02 00 00 00       	mov    ecx,0x2
c0004e75:	56                   	push   esi
c0004e76:	53                   	push   ebx
c0004e77:	83 ec 50             	sub    esp,0x50
c0004e7a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004e7e:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004e82:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e86:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e8a:	e8 02 d6 ff ff       	call   c0002491 <mount_volume>
c0004e8f:	85 c0                	test   eax,eax
c0004e91:	0f 85 81 00 00 00    	jne    c0004f18 <f_chmod+0xa9>
c0004e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e9b:	83 ec 0c             	sub    esp,0xc
c0004e9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ea2:	68 00 02 00 00       	push   0x200
c0004ea7:	e8 74 0d 00 00       	call   c0005c20 <ff_memalloc>
c0004eac:	83 c4 10             	add    esp,0x10
c0004eaf:	89 c6                	mov    esi,eax
c0004eb1:	b8 11 00 00 00       	mov    eax,0x11
c0004eb6:	85 f6                	test   esi,esi
c0004eb8:	74 5e                	je     c0004f18 <f_chmod+0xa9>
c0004eba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebe:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ec2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ec5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec9:	e8 0d eb ff ff       	call   c00039db <follow_path>
c0004ece:	85 c0                	test   eax,eax
c0004ed0:	75 32                	jne    c0004f04 <f_chmod+0x95>
c0004ed2:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004ed6:	b8 06 00 00 00       	mov    eax,0x6
c0004edb:	80 e2 a0             	and    dl,0xa0
c0004ede:	75 24                	jne    c0004f04 <f_chmod+0x95>
c0004ee0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ee4:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004ee7:	31 d7                	xor    edi,edx
c0004ee9:	21 fb                	and    ebx,edi
c0004eeb:	83 e3 27             	and    ebx,0x27
c0004eee:	31 d3                	xor    ebx,edx
c0004ef0:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004ef3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004eff:	e8 71 de ff ff       	call   c0002d75 <sync_fs>
c0004f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f08:	83 ec 0c             	sub    esp,0xc
c0004f0b:	56                   	push   esi
c0004f0c:	e8 27 0d 00 00       	call   c0005c38 <ff_memfree>
c0004f11:	83 c4 10             	add    esp,0x10
c0004f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f18:	83 c4 50             	add    esp,0x50
c0004f1b:	5b                   	pop    ebx
c0004f1c:	5e                   	pop    esi
c0004f1d:	5f                   	pop    edi
c0004f1e:	c3                   	ret    

c0004f1f <f_utime>:
c0004f1f:	56                   	push   esi
c0004f20:	b9 02 00 00 00       	mov    ecx,0x2
c0004f25:	53                   	push   ebx
c0004f26:	83 ec 54             	sub    esp,0x54
c0004f29:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f2d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f31:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f35:	e8 57 d5 ff ff       	call   c0002491 <mount_volume>
c0004f3a:	85 c0                	test   eax,eax
c0004f3c:	0f 85 87 00 00 00    	jne    c0004fc9 <f_utime+0xaa>
c0004f42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f46:	83 ec 0c             	sub    esp,0xc
c0004f49:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f4d:	68 00 02 00 00       	push   0x200
c0004f52:	e8 c9 0c 00 00       	call   c0005c20 <ff_memalloc>
c0004f57:	83 c4 10             	add    esp,0x10
c0004f5a:	89 c3                	mov    ebx,eax
c0004f5c:	b8 11 00 00 00       	mov    eax,0x11
c0004f61:	85 db                	test   ebx,ebx
c0004f63:	74 64                	je     c0004fc9 <f_utime+0xaa>
c0004f65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f6d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f74:	e8 62 ea ff ff       	call   c00039db <follow_path>
c0004f79:	85 c0                	test   eax,eax
c0004f7b:	75 38                	jne    c0004fb5 <f_utime+0x96>
c0004f7d:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004f81:	b8 06 00 00 00       	mov    eax,0x6
c0004f86:	80 e2 a0             	and    dl,0xa0
c0004f89:	75 2a                	jne    c0004fb5 <f_utime+0x96>
c0004f8b:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004f8f:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004f93:	c1 e2 10             	shl    edx,0x10
c0004f96:	09 c2                	or     edx,eax
c0004f98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f9c:	83 c0 16             	add    eax,0x16
c0004f9f:	e8 5c ce ff ff       	call   c0001e00 <st_dword>
c0004fa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fa8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fb0:	e8 c0 dd ff ff       	call   c0002d75 <sync_fs>
c0004fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fb9:	83 ec 0c             	sub    esp,0xc
c0004fbc:	53                   	push   ebx
c0004fbd:	e8 76 0c 00 00       	call   c0005c38 <ff_memfree>
c0004fc2:	83 c4 10             	add    esp,0x10
c0004fc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fc9:	83 c4 54             	add    esp,0x54
c0004fcc:	5b                   	pop    ebx
c0004fcd:	5e                   	pop    esi
c0004fce:	c3                   	ret    

c0004fcf <f_getlabel>:
c0004fcf:	55                   	push   ebp
c0004fd0:	31 c9                	xor    ecx,ecx
c0004fd2:	57                   	push   edi
c0004fd3:	56                   	push   esi
c0004fd4:	53                   	push   ebx
c0004fd5:	83 ec 5c             	sub    esp,0x5c
c0004fd8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004fdc:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fe0:	e8 ac d4 ff ff       	call   c0002491 <mount_volume>
c0004fe5:	89 c6                	mov    esi,eax
c0004fe7:	85 c0                	test   eax,eax
c0004fe9:	0f 85 27 01 00 00    	jne    c0005116 <f_getlabel+0x147>
c0004fef:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004ff4:	0f 84 d0 00 00 00    	je     c00050ca <f_getlabel+0xfb>
c0004ffa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ffe:	31 d2                	xor    edx,edx
c0005000:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005004:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000500c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005010:	e8 03 e3 ff ff       	call   c0003318 <dir_sdi>
c0005015:	85 c0                	test   eax,eax
c0005017:	0f 85 a1 00 00 00    	jne    c00050be <f_getlabel+0xef>
c000501d:	ba 01 00 00 00       	mov    edx,0x1
c0005022:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005026:	e8 ec e6 ff ff       	call   c0003717 <dir_read>
c000502b:	85 c0                	test   eax,eax
c000502d:	0f 85 8b 00 00 00    	jne    c00050be <f_getlabel+0xef>
c0005033:	31 db                	xor    ebx,ebx
c0005035:	31 c9                	xor    ecx,ecx
c0005037:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000503b:	8d 79 01             	lea    edi,[ecx+0x1]
c000503e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0005043:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005048:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000504c:	e8 06 ce ff ff       	call   c0001e57 <dbc_1st>
c0005051:	85 c0                	test   eax,eax
c0005053:	74 16                	je     c000506b <f_getlabel+0x9c>
c0005055:	83 ff 0b             	cmp    edi,0xb
c0005058:	74 11                	je     c000506b <f_getlabel+0x9c>
c000505a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c000505f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005063:	8d 79 02             	lea    edi,[ecx+0x2]
c0005066:	c1 e0 08             	shl    eax,0x8
c0005069:	09 c2                	or     edx,eax
c000506b:	0f b7 d2             	movzx  edx,dx
c000506e:	50                   	push   eax
c000506f:	50                   	push   eax
c0005070:	68 b5 01 00 00       	push   0x1b5
c0005075:	52                   	push   edx
c0005076:	e8 75 0c 00 00       	call   c0005cf0 <ff_oem2uni>
c000507b:	83 c4 10             	add    esp,0x10
c000507e:	0f b7 c0             	movzx  eax,ax
c0005081:	85 c0                	test   eax,eax
c0005083:	74 22                	je     c00050a7 <f_getlabel+0xd8>
c0005085:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005089:	b9 04 00 00 00       	mov    ecx,0x4
c000508e:	01 da                	add    edx,ebx
c0005090:	e8 a0 ce ff ff       	call   c0001f35 <put_utf>
c0005095:	0f b6 c0             	movzx  eax,al
c0005098:	85 c0                	test   eax,eax
c000509a:	74 0b                	je     c00050a7 <f_getlabel+0xd8>
c000509c:	01 c3                	add    ebx,eax
c000509e:	83 ff 0b             	cmp    edi,0xb
c00050a1:	74 06                	je     c00050a9 <f_getlabel+0xda>
c00050a3:	89 f9                	mov    ecx,edi
c00050a5:	eb 90                	jmp    c0005037 <f_getlabel+0x68>
c00050a7:	31 db                	xor    ebx,ebx
c00050a9:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c00050ad:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00050b0:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c00050b4:	74 14                	je     c00050ca <f_getlabel+0xfb>
c00050b6:	4b                   	dec    ebx
c00050b7:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00050ba:	74 f1                	je     c00050ad <f_getlabel+0xde>
c00050bc:	eb 0c                	jmp    c00050ca <f_getlabel+0xfb>
c00050be:	83 f8 04             	cmp    eax,0x4
c00050c1:	75 51                	jne    c0005114 <f_getlabel+0x145>
c00050c3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00050c7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00050ca:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050cf:	74 45                	je     c0005116 <f_getlabel+0x147>
c00050d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050d5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00050d8:	e8 61 d2 ff ff       	call   c000233e <move_window>
c00050dd:	89 c6                	mov    esi,eax
c00050df:	85 c0                	test   eax,eax
c00050e1:	75 33                	jne    c0005116 <f_getlabel+0x147>
c00050e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00050e7:	b8 43 00 00 00       	mov    eax,0x43
c00050ec:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00050ef:	83 f9 03             	cmp    ecx,0x3
c00050f2:	74 0f                	je     c0005103 <f_getlabel+0x134>
c00050f4:	31 c0                	xor    eax,eax
c00050f6:	83 f9 04             	cmp    ecx,0x4
c00050f9:	0f 94 c0             	sete   al
c00050fc:	48                   	dec    eax
c00050fd:	83 e0 c3             	and    eax,0xffffffc3
c0005100:	83 c0 64             	add    eax,0x64
c0005103:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005107:	e8 d8 cc ff ff       	call   c0001de4 <ld_dword>
c000510c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005110:	89 07                	mov    DWORD PTR [edi],eax
c0005112:	eb 02                	jmp    c0005116 <f_getlabel+0x147>
c0005114:	89 c6                	mov    esi,eax
c0005116:	83 c4 5c             	add    esp,0x5c
c0005119:	89 f0                	mov    eax,esi
c000511b:	5b                   	pop    ebx
c000511c:	5e                   	pop    esi
c000511d:	5f                   	pop    edi
c000511e:	5d                   	pop    ebp
c000511f:	c3                   	ret    

c0005120 <f_setlabel>:
c0005120:	57                   	push   edi
c0005121:	b9 02 00 00 00       	mov    ecx,0x2
c0005126:	56                   	push   esi
c0005127:	53                   	push   ebx
c0005128:	83 ec 50             	sub    esp,0x50
c000512b:	8d 54 24 04          	lea    edx,[esp+0x4]
c000512f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005133:	e8 59 d3 ff ff       	call   c0002491 <mount_volume>
c0005138:	89 c6                	mov    esi,eax
c000513a:	85 c0                	test   eax,eax
c000513c:	0f 85 65 01 00 00    	jne    c00052a7 <f_setlabel+0x187>
c0005142:	b9 0b 00 00 00       	mov    ecx,0xb
c0005147:	ba 20 00 00 00       	mov    edx,0x20
c000514c:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005150:	31 db                	xor    ebx,ebx
c0005152:	e8 c1 cc ff ff       	call   c0001e18 <mem_set>
c0005157:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000515b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000515e:	76 5d                	jbe    c00051bd <f_setlabel+0x9d>
c0005160:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005164:	e8 f4 cc ff ff       	call   c0001e5d <tchar2uni>
c0005169:	3d ff ff 00 00       	cmp    eax,0xffff
c000516e:	76 0a                	jbe    c000517a <f_setlabel+0x5a>
c0005170:	be 06 00 00 00       	mov    esi,0x6
c0005175:	e9 2d 01 00 00       	jmp    c00052a7 <f_setlabel+0x187>
c000517a:	83 ec 0c             	sub    esp,0xc
c000517d:	50                   	push   eax
c000517e:	e8 e5 0b 00 00       	call   c0005d68 <ff_wtoupper>
c0005183:	5a                   	pop    edx
c0005184:	59                   	pop    ecx
c0005185:	68 b5 01 00 00       	push   0x1b5
c000518a:	50                   	push   eax
c000518b:	e8 c0 0a 00 00       	call   c0005c50 <ff_uni2oem>
c0005190:	83 c4 10             	add    esp,0x10
c0005193:	0f b7 f0             	movzx  esi,ax
c0005196:	89 f7                	mov    edi,esi
c0005198:	85 f6                	test   esi,esi
c000519a:	74 d4                	je     c0005170 <f_setlabel+0x50>
c000519c:	89 f2                	mov    edx,esi
c000519e:	b8 30 00 02 c0       	mov    eax,0xc0020030
c00051a3:	e8 9e cc ff ff       	call   c0001e46 <chk_chr>
c00051a8:	85 c0                	test   eax,eax
c00051aa:	75 c4                	jne    c0005170 <f_setlabel+0x50>
c00051ac:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051b2:	0f 87 c9 00 00 00    	ja     c0005281 <f_setlabel+0x161>
c00051b8:	e9 e0 00 00 00       	jmp    c000529d <f_setlabel+0x17d>
c00051bd:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051c2:	74 ac                	je     c0005170 <f_setlabel+0x50>
c00051c4:	85 db                	test   ebx,ebx
c00051c6:	74 0e                	je     c00051d6 <f_setlabel+0xb6>
c00051c8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051cb:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051d0:	75 04                	jne    c00051d6 <f_setlabel+0xb6>
c00051d2:	89 c3                	mov    ebx,eax
c00051d4:	eb ee                	jmp    c00051c4 <f_setlabel+0xa4>
c00051d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00051da:	31 d2                	xor    edx,edx
c00051dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051e0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051e8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051ec:	e8 27 e1 ff ff       	call   c0003318 <dir_sdi>
c00051f1:	89 c6                	mov    esi,eax
c00051f3:	85 c0                	test   eax,eax
c00051f5:	0f 85 ac 00 00 00    	jne    c00052a7 <f_setlabel+0x187>
c00051fb:	ba 01 00 00 00       	mov    edx,0x1
c0005200:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005204:	e8 0e e5 ff ff       	call   c0003717 <dir_read>
c0005209:	85 c0                	test   eax,eax
c000520b:	75 18                	jne    c0005225 <f_setlabel+0x105>
c000520d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005211:	85 db                	test   ebx,ebx
c0005213:	74 0b                	je     c0005220 <f_setlabel+0x100>
c0005215:	b9 0b 00 00 00       	mov    ecx,0xb
c000521a:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000521e:	eb 47                	jmp    c0005267 <f_setlabel+0x147>
c0005220:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005223:	eb 47                	jmp    c000526c <f_setlabel+0x14c>
c0005225:	83 f8 04             	cmp    eax,0x4
c0005228:	75 53                	jne    c000527d <f_setlabel+0x15d>
c000522a:	85 db                	test   ebx,ebx
c000522c:	74 79                	je     c00052a7 <f_setlabel+0x187>
c000522e:	ba 01 00 00 00       	mov    edx,0x1
c0005233:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005237:	e8 76 e4 ff ff       	call   c00036b2 <dir_alloc>
c000523c:	89 c6                	mov    esi,eax
c000523e:	85 c0                	test   eax,eax
c0005240:	75 65                	jne    c00052a7 <f_setlabel+0x187>
c0005242:	b9 20 00 00 00       	mov    ecx,0x20
c0005247:	31 d2                	xor    edx,edx
c0005249:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000524d:	e8 c6 cb ff ff       	call   c0001e18 <mem_set>
c0005252:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005256:	b9 0b 00 00 00       	mov    ecx,0xb
c000525b:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000525f:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005263:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005267:	e8 97 cb ff ff       	call   c0001e03 <mem_cpy>
c000526c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005270:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005278:	e8 f8 da ff ff       	call   c0002d75 <sync_fs>
c000527d:	89 c6                	mov    esi,eax
c000527f:	eb 26                	jmp    c00052a7 <f_setlabel+0x187>
c0005281:	83 fb 09             	cmp    ebx,0x9
c0005284:	0f 87 e6 fe ff ff    	ja     c0005170 <f_setlabel+0x50>
c000528a:	89 f0                	mov    eax,esi
c000528c:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005290:	43                   	inc    ebx
c0005291:	89 f8                	mov    eax,edi
c0005293:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005297:	43                   	inc    ebx
c0005298:	e9 ba fe ff ff       	jmp    c0005157 <f_setlabel+0x37>
c000529d:	83 fb 0a             	cmp    ebx,0xa
c00052a0:	76 ef                	jbe    c0005291 <f_setlabel+0x171>
c00052a2:	e9 c9 fe ff ff       	jmp    c0005170 <f_setlabel+0x50>
c00052a7:	83 c4 50             	add    esp,0x50
c00052aa:	89 f0                	mov    eax,esi
c00052ac:	5b                   	pop    ebx
c00052ad:	5e                   	pop    esi
c00052ae:	5f                   	pop    edi
c00052af:	c3                   	ret    

c00052b0 <f_expand>:
c00052b0:	55                   	push   ebp
c00052b1:	57                   	push   edi
c00052b2:	56                   	push   esi
c00052b3:	53                   	push   ebx
c00052b4:	83 ec 2c             	sub    esp,0x2c
c00052b7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052bb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052c7:	89 d8                	mov    eax,ebx
c00052c9:	e8 c7 cf ff ff       	call   c0002295 <validate>
c00052ce:	89 c6                	mov    esi,eax
c00052d0:	85 c0                	test   eax,eax
c00052d2:	0f 85 3b 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052d8:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00052dc:	85 f6                	test   esi,esi
c00052de:	0f 85 2f 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052e4:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00052e9:	75 0a                	jne    c00052f5 <f_expand+0x45>
c00052eb:	be 07 00 00 00       	mov    esi,0x7
c00052f0:	e9 1e 01 00 00       	jmp    c0005413 <f_expand+0x163>
c00052f5:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00052f9:	75 f0                	jne    c00052eb <f_expand+0x3b>
c00052fb:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00052ff:	74 ea                	je     c00052eb <f_expand+0x3b>
c0005301:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0005305:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005309:	c1 e1 09             	shl    ecx,0x9
c000530c:	8d 41 ff             	lea    eax,[ecx-0x1]
c000530f:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005313:	0f 95 c0             	setne  al
c0005316:	31 d2                	xor    edx,edx
c0005318:	0f b6 c0             	movzx  eax,al
c000531b:	89 c7                	mov    edi,eax
c000531d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005321:	f7 f1                	div    ecx
c0005323:	01 f8                	add    eax,edi
c0005325:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005328:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000532c:	83 ff 01             	cmp    edi,0x1
c000532f:	76 05                	jbe    c0005336 <f_expand+0x86>
c0005331:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0005334:	77 05                	ja     c000533b <f_expand+0x8b>
c0005336:	bf 02 00 00 00       	mov    edi,0x2
c000533b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000533e:	89 fd                	mov    ebp,edi
c0005340:	31 c9                	xor    ecx,ecx
c0005342:	89 ea                	mov    edx,ebp
c0005344:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005348:	8b 03                	mov    eax,DWORD PTR [ebx]
c000534a:	45                   	inc    ebp
c000534b:	e8 c4 de ff ff       	call   c0003214 <get_fat.isra.2>
c0005350:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005354:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005358:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000535b:	77 05                	ja     c0005362 <f_expand+0xb2>
c000535d:	bd 02 00 00 00       	mov    ebp,0x2
c0005362:	83 f8 01             	cmp    eax,0x1
c0005365:	74 20                	je     c0005387 <f_expand+0xd7>
c0005367:	83 f8 ff             	cmp    eax,0xffffffff
c000536a:	74 25                	je     c0005391 <f_expand+0xe1>
c000536c:	85 c0                	test   eax,eax
c000536e:	75 09                	jne    c0005379 <f_expand+0xc9>
c0005370:	41                   	inc    ecx
c0005371:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005375:	75 07                	jne    c000537e <f_expand+0xce>
c0005377:	eb 1f                	jmp    c0005398 <f_expand+0xe8>
c0005379:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000537c:	31 c9                	xor    ecx,ecx
c000537e:	39 fd                	cmp    ebp,edi
c0005380:	75 c0                	jne    c0005342 <f_expand+0x92>
c0005382:	e9 64 ff ff ff       	jmp    c00052eb <f_expand+0x3b>
c0005387:	be 02 00 00 00       	mov    esi,0x2
c000538c:	e9 82 00 00 00       	jmp    c0005413 <f_expand+0x163>
c0005391:	be 01 00 00 00       	mov    esi,0x1
c0005396:	eb 7b                	jmp    c0005413 <f_expand+0x163>
c0005398:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000539d:	74 2b                	je     c00053ca <f_expand+0x11a>
c000539f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053a2:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053a6:	85 ed                	test   ebp,ebp
c00053a8:	74 24                	je     c00053ce <f_expand+0x11e>
c00053aa:	83 c9 ff             	or     ecx,0xffffffff
c00053ad:	83 fd 01             	cmp    ebp,0x1
c00053b0:	74 03                	je     c00053b5 <f_expand+0x105>
c00053b2:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053b5:	89 fa                	mov    edx,edi
c00053b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053bb:	e8 c2 d3 ff ff       	call   c0002782 <put_fat>
c00053c0:	85 c0                	test   eax,eax
c00053c2:	75 4d                	jne    c0005411 <f_expand+0x161>
c00053c4:	89 f8                	mov    eax,edi
c00053c6:	4d                   	dec    ebp
c00053c7:	47                   	inc    edi
c00053c8:	eb dc                	jmp    c00053a6 <f_expand+0xf6>
c00053ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053cd:	48                   	dec    eax
c00053ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053d2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053d7:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00053da:	74 37                	je     c0005413 <f_expand+0x163>
c00053dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053df:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00053e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00053e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00053ec:	83 c8 40             	or     eax,0x40
c00053ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00053f2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00053f5:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00053f8:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00053fb:	39 c8                	cmp    eax,ecx
c00053fd:	77 14                	ja     c0005413 <f_expand+0x163>
c00053ff:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005403:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005406:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005409:	83 c8 01             	or     eax,0x1
c000540c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000540f:	eb 02                	jmp    c0005413 <f_expand+0x163>
c0005411:	89 c6                	mov    esi,eax
c0005413:	83 c4 2c             	add    esp,0x2c
c0005416:	89 f0                	mov    eax,esi
c0005418:	5b                   	pop    ebx
c0005419:	5e                   	pop    esi
c000541a:	5f                   	pop    edi
c000541b:	5d                   	pop    ebp
c000541c:	c3                   	ret    

c000541d <f_mkfs>:
c000541d:	55                   	push   ebp
c000541e:	57                   	push   edi
c000541f:	56                   	push   esi
c0005420:	be 0b 00 00 00       	mov    esi,0xb
c0005425:	53                   	push   ebx
c0005426:	83 ec 5c             	sub    esp,0x5c
c0005429:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000542d:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c0005431:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005435:	e8 0e ce ff ff       	call   c0002248 <get_ldnumber>
c000543a:	85 c0                	test   eax,eax
c000543c:	0f 88 d1 07 00 00    	js     c0005c13 <f_mkfs+0x7f6>
c0005442:	8b 14 85 a0 54 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdab60]
c0005449:	85 d2                	test   edx,edx
c000544b:	74 03                	je     c0005450 <f_mkfs+0x33>
c000544d:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005450:	85 db                	test   ebx,ebx
c0005452:	75 05                	jne    c0005459 <f_mkfs+0x3c>
c0005454:	bb 20 00 02 c0       	mov    ebx,0xc0020020
c0005459:	83 ec 0c             	sub    esp,0xc
c000545c:	0f b6 c0             	movzx  eax,al
c000545f:	be 03 00 00 00       	mov    esi,0x3
c0005464:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005468:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000546c:	e8 18 c9 ff ff       	call   c0001d89 <disk_initialize>
c0005471:	83 c4 10             	add    esp,0x10
c0005474:	a8 01                	test   al,0x1
c0005476:	0f 85 97 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c000547c:	be 0a 00 00 00       	mov    esi,0xa
c0005481:	a8 04                	test   al,0x4
c0005483:	0f 85 8a 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c0005489:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000548c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005490:	85 c0                	test   eax,eax
c0005492:	75 20                	jne    c00054b4 <f_mkfs+0x97>
c0005494:	51                   	push   ecx
c0005495:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005499:	50                   	push   eax
c000549a:	6a 03                	push   0x3
c000549c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054a0:	e8 13 c9 ff ff       	call   c0001db8 <disk_ioctl>
c00054a5:	83 c4 10             	add    esp,0x10
c00054a8:	85 c0                	test   eax,eax
c00054aa:	74 08                	je     c00054b4 <f_mkfs+0x97>
c00054ac:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054b4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054b8:	8d 42 ff             	lea    eax,[edx-0x1]
c00054bb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054c0:	77 04                	ja     c00054c6 <f_mkfs+0xa9>
c00054c2:	85 c2                	test   edx,eax
c00054c4:	74 08                	je     c00054ce <f_mkfs+0xb1>
c00054c6:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054ce:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054d1:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00054d9:	48                   	dec    eax
c00054da:	3c 01                	cmp    al,0x1
c00054dc:	76 05                	jbe    c00054e3 <f_mkfs+0xc6>
c00054de:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00054e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00054ea:	48                   	dec    eax
c00054eb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054f0:	77 07                	ja     c00054f9 <f_mkfs+0xdc>
c00054f2:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00054f7:	74 08                	je     c0005501 <f_mkfs+0xe4>
c00054f9:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c0005501:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005504:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000550a:	77 07                	ja     c0005513 <f_mkfs+0xf6>
c000550c:	8d 47 ff             	lea    eax,[edi-0x1]
c000550f:	85 f8                	test   eax,edi
c0005511:	74 02                	je     c0005515 <f_mkfs+0xf8>
c0005513:	31 ff                	xor    edi,edi
c0005515:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000551d:	77 0a                	ja     c0005529 <f_mkfs+0x10c>
c000551f:	be 11 00 00 00       	mov    esi,0x11
c0005524:	e9 ea 06 00 00       	jmp    c0005c13 <f_mkfs+0x7f6>
c0005529:	8b 33                	mov    esi,DWORD PTR [ebx]
c000552b:	85 ed                	test   ebp,ebp
c000552d:	89 eb                	mov    ebx,ebp
c000552f:	75 1e                	jne    c000554f <f_mkfs+0x132>
c0005531:	83 ec 0c             	sub    esp,0xc
c0005534:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c000553b:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005540:	50                   	push   eax
c0005541:	e8 da 06 00 00       	call   c0005c20 <ff_memalloc>
c0005546:	83 c4 10             	add    esp,0x10
c0005549:	89 c3                	mov    ebx,eax
c000554b:	85 c0                	test   eax,eax
c000554d:	74 d0                	je     c000551f <f_mkfs+0x102>
c000554f:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005557:	52                   	push   edx
c0005558:	8d 44 24 48          	lea    eax,[esp+0x48]
c000555c:	50                   	push   eax
c000555d:	6a 01                	push   0x1
c000555f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005563:	e8 50 c8 ff ff       	call   c0001db8 <disk_ioctl>
c0005568:	83 c4 10             	add    esp,0x10
c000556b:	85 c0                	test   eax,eax
c000556d:	0f 85 49 06 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005573:	89 f0                	mov    eax,esi
c0005575:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000557d:	83 e0 08             	and    eax,0x8
c0005580:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005584:	75 18                	jne    c000559e <f_mkfs+0x181>
c0005586:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000558a:	83 f8 3f             	cmp    eax,0x3f
c000558d:	76 0f                	jbe    c000559e <f_mkfs+0x181>
c000558f:	83 e8 3f             	sub    eax,0x3f
c0005592:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000559a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000559e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055a6:	83 f8 7f             	cmp    eax,0x7f
c00055a9:	0f 86 5b 02 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c00055af:	b9 80 00 00 00       	mov    ecx,0x80
c00055b4:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055ba:	77 05                	ja     c00055c1 <f_mkfs+0x1a4>
c00055bc:	c1 ef 09             	shr    edi,0x9
c00055bf:	89 f9                	mov    ecx,edi
c00055c1:	89 f0                	mov    eax,esi
c00055c3:	89 f7                	mov    edi,esi
c00055c5:	83 e0 01             	and    eax,0x1
c00055c8:	83 e7 02             	and    edi,0x2
c00055cb:	0f b6 c0             	movzx  eax,al
c00055ce:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00055d2:	74 0a                	je     c00055de <f_mkfs+0x1c1>
c00055d4:	85 c0                	test   eax,eax
c00055d6:	0f 84 4f 01 00 00    	je     c000572b <f_mkfs+0x30e>
c00055dc:	eb 37                	jmp    c0005615 <f_mkfs+0x1f8>
c00055de:	be 13 00 00 00       	mov    esi,0x13
c00055e3:	85 c0                	test   eax,eax
c00055e5:	75 2e                	jne    c0005615 <f_mkfs+0x1f8>
c00055e7:	e9 e7 05 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c00055ec:	83 f8 02             	cmp    eax,0x2
c00055ef:	0f 85 0d 02 00 00    	jne    c0005802 <f_mkfs+0x3e5>
c00055f5:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00055fb:	0f 86 e4 01 00 00    	jbe    c00057e5 <f_mkfs+0x3c8>
c0005601:	85 c9                	test   ecx,ecx
c0005603:	0f 85 dc 05 00 00    	jne    c0005be5 <f_mkfs+0x7c8>
c0005609:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000560c:	83 f9 40             	cmp    ecx,0x40
c000560f:	0f 87 e0 05 00 00    	ja     c0005bf5 <f_mkfs+0x7d8>
c0005615:	89 cf                	mov    edi,ecx
c0005617:	85 c9                	test   ecx,ecx
c0005619:	75 1c                	jne    c0005637 <f_mkfs+0x21a>
c000561b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000561f:	b8 00 00 02 c0       	mov    eax,0xc0020000
c0005624:	c1 ee 0c             	shr    esi,0xc
c0005627:	bf 01 00 00 00       	mov    edi,0x1
c000562c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000562f:	85 d2                	test   edx,edx
c0005631:	0f 85 63 01 00 00    	jne    c000579a <f_mkfs+0x37d>
c0005637:	31 d2                	xor    edx,edx
c0005639:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000563d:	f7 f7                	div    edi
c000563f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005644:	0f 86 62 01 00 00    	jbe    c00057ac <f_mkfs+0x38f>
c000564a:	83 c0 02             	add    eax,0x2
c000564d:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005652:	01 c0                	add    eax,eax
c0005654:	05 ff 01 00 00       	add    eax,0x1ff
c0005659:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005661:	c1 e8 09             	shr    eax,0x9
c0005664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005668:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000566c:	c1 e0 05             	shl    eax,0x5
c000566f:	c1 e8 09             	shr    eax,0x9
c0005672:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005676:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000567b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000567f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005683:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005687:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000568b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000568f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005694:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005698:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000569c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056a8:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056ac:	f7 d8                	neg    eax
c00056ae:	21 c6                	and    esi,eax
c00056b0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056b5:	29 d6                	sub    esi,edx
c00056b7:	83 f8 03             	cmp    eax,0x3
c00056ba:	0f 85 ff 00 00 00    	jne    c00057bf <f_mkfs+0x3a2>
c00056c0:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00056c4:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00056c8:	89 f8                	mov    eax,edi
c00056ca:	c1 e0 04             	shl    eax,0x4
c00056cd:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00056d1:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00056d5:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00056d9:	0f 82 2b 01 00 00    	jb     c000580a <f_mkfs+0x3ed>
c00056df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00056e7:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00056eb:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00056f0:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00056f4:	29 d0                	sub    eax,edx
c00056f6:	31 d2                	xor    edx,edx
c00056f8:	f7 f7                	div    edi
c00056fa:	89 c6                	mov    esi,eax
c00056fc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005701:	83 f8 03             	cmp    eax,0x3
c0005704:	0f 85 e2 fe ff ff    	jne    c00055ec <f_mkfs+0x1cf>
c000570a:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005710:	0f 87 03 01 00 00    	ja     c0005819 <f_mkfs+0x3fc>
c0005716:	85 c9                	test   ecx,ecx
c0005718:	0f 85 ec 00 00 00    	jne    c000580a <f_mkfs+0x3ed>
c000571e:	83 ff 01             	cmp    edi,0x1
c0005721:	0f 86 e3 00 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c0005727:	d1 ef                	shr    edi,1
c0005729:	89 f9                	mov    ecx,edi
c000572b:	89 ce                	mov    esi,ecx
c000572d:	85 c9                	test   ecx,ecx
c000572f:	75 25                	jne    c0005756 <f_mkfs+0x339>
c0005731:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005735:	b8 10 00 02 c0       	mov    eax,0xc0020010
c000573a:	c1 ee 11             	shr    esi,0x11
c000573d:	b9 01 00 00 00       	mov    ecx,0x1
c0005742:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005745:	85 d2                	test   edx,edx
c0005747:	74 0b                	je     c0005754 <f_mkfs+0x337>
c0005749:	83 c0 02             	add    eax,0x2
c000574c:	39 f2                	cmp    edx,esi
c000574e:	77 04                	ja     c0005754 <f_mkfs+0x337>
c0005750:	01 c9                	add    ecx,ecx
c0005752:	eb ee                	jmp    c0005742 <f_mkfs+0x325>
c0005754:	31 f6                	xor    esi,esi
c0005756:	31 d2                	xor    edx,edx
c0005758:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000575c:	f7 f1                	div    ecx
c000575e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005765:	2d f6 ff 00 00       	sub    eax,0xfff6
c000576a:	c1 ea 09             	shr    edx,0x9
c000576d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005772:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005776:	0f 87 8e 00 00 00    	ja     c000580a <f_mkfs+0x3ed>
c000577c:	89 cf                	mov    edi,ecx
c000577e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005786:	89 f1                	mov    ecx,esi
c0005788:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005790:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005795:	e9 dc fe ff ff       	jmp    c0005676 <f_mkfs+0x259>
c000579a:	83 c0 02             	add    eax,0x2
c000579d:	39 f2                	cmp    edx,esi
c000579f:	0f 87 92 fe ff ff    	ja     c0005637 <f_mkfs+0x21a>
c00057a5:	01 ff                	add    edi,edi
c00057a7:	e9 80 fe ff ff       	jmp    c000562c <f_mkfs+0x20f>
c00057ac:	8d 04 40             	lea    eax,[eax+eax*2]
c00057af:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057b4:	40                   	inc    eax
c00057b5:	d1 e8                	shr    eax,1
c00057b7:	83 c0 03             	add    eax,0x3
c00057ba:	e9 95 fe ff ff       	jmp    c0005654 <f_mkfs+0x237>
c00057bf:	31 d2                	xor    edx,edx
c00057c1:	89 f0                	mov    eax,esi
c00057c3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057c7:	85 d2                	test   edx,edx
c00057c9:	74 09                	je     c00057d4 <f_mkfs+0x3b7>
c00057cb:	4e                   	dec    esi
c00057cc:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00057d0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00057d4:	89 f0                	mov    eax,esi
c00057d6:	31 d2                	xor    edx,edx
c00057d8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057dc:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00057e0:	e9 e3 fe ff ff       	jmp    c00056c8 <f_mkfs+0x2ab>
c00057e5:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00057eb:	77 2c                	ja     c0005819 <f_mkfs+0x3fc>
c00057ed:	85 c9                	test   ecx,ecx
c00057ef:	75 19                	jne    c000580a <f_mkfs+0x3ed>
c00057f1:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f4:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00057fa:	0f 86 15 fe ff ff    	jbe    c0005615 <f_mkfs+0x1f8>
c0005800:	eb 08                	jmp    c000580a <f_mkfs+0x3ed>
c0005802:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005808:	76 0a                	jbe    c0005814 <f_mkfs+0x3f7>
c000580a:	be 0e 00 00 00       	mov    esi,0xe
c000580f:	e9 bf 03 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c0005814:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005819:	31 d2                	xor    edx,edx
c000581b:	b9 00 02 00 00       	mov    ecx,0x200
c0005820:	89 d8                	mov    eax,ebx
c0005822:	e8 f1 c5 ff ff       	call   c0001e18 <mem_set>
c0005827:	b9 0b 00 00 00       	mov    ecx,0xb
c000582c:	ba b2 ff 01 c0       	mov    edx,0xc001ffb2
c0005831:	89 d8                	mov    eax,ebx
c0005833:	e8 cb c5 ff ff       	call   c0001e03 <mem_cpy>
c0005838:	8d 43 0b             	lea    eax,[ebx+0xb]
c000583b:	ba 00 02 00 00       	mov    edx,0x200
c0005840:	e8 b7 c5 ff ff       	call   c0001dfc <st_word>
c0005845:	89 f8                	mov    eax,edi
c0005847:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000584c:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c000584f:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005852:	e8 a5 c5 ff ff       	call   c0001dfc <st_word>
c0005857:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000585b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000585e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005863:	83 f8 03             	cmp    eax,0x3
c0005866:	75 08                	jne    c0005870 <f_mkfs+0x453>
c0005868:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005870:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005874:	8d 43 11             	lea    eax,[ebx+0x11]
c0005877:	e8 80 c5 ff ff       	call   c0001dfc <st_word>
c000587c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005880:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005886:	77 0a                	ja     c0005892 <f_mkfs+0x475>
c0005888:	8d 43 13             	lea    eax,[ebx+0x13]
c000588b:	e8 6c c5 ff ff       	call   c0001dfc <st_word>
c0005890:	eb 08                	jmp    c000589a <f_mkfs+0x47d>
c0005892:	8d 43 20             	lea    eax,[ebx+0x20]
c0005895:	e8 66 c5 ff ff       	call   c0001e00 <st_dword>
c000589a:	8d 43 18             	lea    eax,[ebx+0x18]
c000589d:	ba 3f 00 00 00       	mov    edx,0x3f
c00058a2:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058a6:	e8 51 c5 ff ff       	call   c0001dfc <st_word>
c00058ab:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058ae:	ba ff 00 00 00       	mov    edx,0xff
c00058b3:	e8 44 c5 ff ff       	call   c0001dfc <st_word>
c00058b8:	8d 43 1c             	lea    eax,[ebx+0x1c]
c00058bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bf:	e8 3c c5 ff ff       	call   c0001e00 <st_dword>
c00058c4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058c9:	83 f8 03             	cmp    eax,0x3
c00058cc:	75 57                	jne    c0005925 <f_mkfs+0x508>
c00058ce:	8d 43 43             	lea    eax,[ebx+0x43]
c00058d1:	ba 00 00 21 50       	mov    edx,0x50210000
c00058d6:	e8 25 c5 ff ff       	call   c0001e00 <st_dword>
c00058db:	8d 43 24             	lea    eax,[ebx+0x24]
c00058de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058e2:	e8 19 c5 ff ff       	call   c0001e00 <st_dword>
c00058e7:	8d 43 2c             	lea    eax,[ebx+0x2c]
c00058ea:	ba 02 00 00 00       	mov    edx,0x2
c00058ef:	e8 0c c5 ff ff       	call   c0001e00 <st_dword>
c00058f4:	8d 43 30             	lea    eax,[ebx+0x30]
c00058f7:	ba 01 00 00 00       	mov    edx,0x1
c00058fc:	e8 fb c4 ff ff       	call   c0001dfc <st_word>
c0005901:	8d 43 32             	lea    eax,[ebx+0x32]
c0005904:	ba 06 00 00 00       	mov    edx,0x6
c0005909:	e8 ee c4 ff ff       	call   c0001dfc <st_word>
c000590e:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005912:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005916:	8d 43 47             	lea    eax,[ebx+0x47]
c0005919:	b9 13 00 00 00       	mov    ecx,0x13
c000591e:	ba be ff 01 c0       	mov    edx,0xc001ffbe
c0005923:	eb 2f                	jmp    c0005954 <f_mkfs+0x537>
c0005925:	8d 43 27             	lea    eax,[ebx+0x27]
c0005928:	ba 00 00 21 50       	mov    edx,0x50210000
c000592d:	e8 ce c4 ff ff       	call   c0001e00 <st_dword>
c0005932:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005937:	8d 43 16             	lea    eax,[ebx+0x16]
c000593a:	e8 bd c4 ff ff       	call   c0001dfc <st_word>
c000593f:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005943:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005947:	8d 43 2b             	lea    eax,[ebx+0x2b]
c000594a:	b9 13 00 00 00       	mov    ecx,0x13
c000594f:	ba d2 ff 01 c0       	mov    edx,0xc001ffd2
c0005954:	e8 aa c4 ff ff       	call   c0001e03 <mem_cpy>
c0005959:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000595f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005964:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005968:	e8 8f c4 ff ff       	call   c0001dfc <st_word>
c000596d:	6a 01                	push   0x1
c000596f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005973:	53                   	push   ebx
c0005974:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005978:	e8 25 c4 ff ff       	call   c0001da2 <disk_write>
c000597d:	83 c4 10             	add    esp,0x10
c0005980:	85 c0                	test   eax,eax
c0005982:	0f 85 34 02 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005988:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000598d:	83 f8 03             	cmp    eax,0x3
c0005990:	0f 85 98 00 00 00    	jne    c0005a2e <f_mkfs+0x611>
c0005996:	6a 01                	push   0x1
c0005998:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000599c:	83 c0 06             	add    eax,0x6
c000599f:	50                   	push   eax
c00059a0:	53                   	push   ebx
c00059a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059a5:	e8 f8 c3 ff ff       	call   c0001da2 <disk_write>
c00059aa:	b9 00 02 00 00       	mov    ecx,0x200
c00059af:	31 d2                	xor    edx,edx
c00059b1:	89 d8                	mov    eax,ebx
c00059b3:	e8 60 c4 ff ff       	call   c0001e18 <mem_set>
c00059b8:	ba 52 52 61 41       	mov    edx,0x41615252
c00059bd:	89 d8                	mov    eax,ebx
c00059bf:	e8 3c c4 ff ff       	call   c0001e00 <st_dword>
c00059c4:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c00059ca:	ba 72 72 41 61       	mov    edx,0x61417272
c00059cf:	e8 2c c4 ff ff       	call   c0001e00 <st_dword>
c00059d4:	8d 56 ff             	lea    edx,[esi-0x1]
c00059d7:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c00059dd:	e8 1e c4 ff ff       	call   c0001e00 <st_dword>
c00059e2:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c00059e8:	ba 02 00 00 00       	mov    edx,0x2
c00059ed:	e8 0e c4 ff ff       	call   c0001e00 <st_dword>
c00059f2:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059f7:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059fd:	e8 fa c3 ff ff       	call   c0001dfc <st_word>
c0005a02:	6a 01                	push   0x1
c0005a04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005a08:	83 c0 07             	add    eax,0x7
c0005a0b:	50                   	push   eax
c0005a0c:	53                   	push   ebx
c0005a0d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a11:	e8 8c c3 ff ff       	call   c0001da2 <disk_write>
c0005a16:	83 c4 20             	add    esp,0x20
c0005a19:	6a 01                	push   0x1
c0005a1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a1f:	40                   	inc    eax
c0005a20:	50                   	push   eax
c0005a21:	53                   	push   ebx
c0005a22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a26:	e8 77 c3 ff ff       	call   c0001da2 <disk_write>
c0005a2b:	83 c4 10             	add    esp,0x10
c0005a2e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a32:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a36:	c1 e8 09             	shr    eax,0x9
c0005a39:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a43:	31 d2                	xor    edx,edx
c0005a45:	89 d8                	mov    eax,ebx
c0005a47:	e8 cc c3 ff ff       	call   c0001e18 <mem_set>
c0005a4c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a51:	31 c9                	xor    ecx,ecx
c0005a53:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005a5b:	83 f8 01             	cmp    eax,0x1
c0005a5e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005a62:	0f 94 c1             	sete   cl
c0005a65:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005a69:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005a6d:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005a75:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005a7d:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005a82:	75 21                	jne    c0005aa5 <f_mkfs+0x688>
c0005a84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005a89:	89 d8                	mov    eax,ebx
c0005a8b:	e8 70 c3 ff ff       	call   c0001e00 <st_dword>
c0005a90:	8d 43 04             	lea    eax,[ebx+0x4]
c0005a93:	83 ca ff             	or     edx,0xffffffff
c0005a96:	e8 65 c3 ff ff       	call   c0001e00 <st_dword>
c0005a9b:	8d 43 08             	lea    eax,[ebx+0x8]
c0005a9e:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005aa3:	eb 06                	jmp    c0005aab <f_mkfs+0x68e>
c0005aa5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005aa9:	89 d8                	mov    eax,ebx
c0005aab:	e8 50 c3 ff ff       	call   c0001e00 <st_dword>
c0005ab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ab4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ab8:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005abc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac0:	39 ce                	cmp    esi,ecx
c0005ac2:	76 02                	jbe    c0005ac6 <f_mkfs+0x6a9>
c0005ac4:	89 ce                	mov    esi,ecx
c0005ac6:	56                   	push   esi
c0005ac7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005acb:	53                   	push   ebx
c0005acc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ad0:	e8 cd c2 ff ff       	call   c0001da2 <disk_write>
c0005ad5:	83 c4 10             	add    esp,0x10
c0005ad8:	85 c0                	test   eax,eax
c0005ada:	0f 85 dc 00 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005ae0:	31 d2                	xor    edx,edx
c0005ae2:	b9 00 02 00 00       	mov    ecx,0x200
c0005ae7:	89 d8                	mov    eax,ebx
c0005ae9:	e8 2a c3 ff ff       	call   c0001e18 <mem_set>
c0005aee:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005af2:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005af6:	75 c0                	jne    c0005ab8 <f_mkfs+0x69b>
c0005af8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005afc:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005b04:	40                   	inc    eax
c0005b05:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b09:	0f 87 6e ff ff ff    	ja     c0005a7d <f_mkfs+0x660>
c0005b0f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b14:	83 f8 03             	cmp    eax,0x3
c0005b17:	74 04                	je     c0005b1d <f_mkfs+0x700>
c0005b19:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005b1d:	89 fe                	mov    esi,edi
c0005b1f:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b23:	76 04                	jbe    c0005b29 <f_mkfs+0x70c>
c0005b25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b29:	56                   	push   esi
c0005b2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b2e:	53                   	push   ebx
c0005b2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b33:	e8 6a c2 ff ff       	call   c0001da2 <disk_write>
c0005b38:	83 c4 10             	add    esp,0x10
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	75 7d                	jne    c0005bbc <f_mkfs+0x79f>
c0005b3f:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b43:	29 f7                	sub    edi,esi
c0005b45:	75 d6                	jne    c0005b1d <f_mkfs+0x700>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b51:	83 f8 03             	cmp    eax,0x3
c0005b54:	74 1e                	je     c0005b74 <f_mkfs+0x757>
c0005b56:	b9 06 00 00 00       	mov    ecx,0x6
c0005b5b:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b63:	77 0f                	ja     c0005b74 <f_mkfs+0x757>
c0005b65:	b9 04 00 00 00       	mov    ecx,0x4
c0005b6a:	83 f8 02             	cmp    eax,0x2
c0005b6d:	74 05                	je     c0005b74 <f_mkfs+0x757>
c0005b6f:	b9 01 00 00 00       	mov    ecx,0x1
c0005b74:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005b79:	75 2a                	jne    c0005ba5 <f_mkfs+0x788>
c0005b7b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005b7f:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005b87:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005b8b:	83 ec 0c             	sub    esp,0xc
c0005b8e:	53                   	push   ebx
c0005b8f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005b93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b97:	e8 89 d2 ff ff       	call   c0002e25 <create_partition>
c0005b9c:	83 c4 10             	add    esp,0x10
c0005b9f:	89 c6                	mov    esi,eax
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 2e                	jne    c0005bd3 <f_mkfs+0x7b6>
c0005ba5:	31 f6                	xor    esi,esi
c0005ba7:	50                   	push   eax
c0005ba8:	6a 00                	push   0x0
c0005baa:	6a 00                	push   0x0
c0005bac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bb0:	e8 03 c2 ff ff       	call   c0001db8 <disk_ioctl>
c0005bb5:	83 c4 10             	add    esp,0x10
c0005bb8:	85 c0                	test   eax,eax
c0005bba:	74 17                	je     c0005bd3 <f_mkfs+0x7b6>
c0005bbc:	85 ed                	test   ebp,ebp
c0005bbe:	75 0c                	jne    c0005bcc <f_mkfs+0x7af>
c0005bc0:	83 ec 0c             	sub    esp,0xc
c0005bc3:	53                   	push   ebx
c0005bc4:	e8 6f 00 00 00       	call   c0005c38 <ff_memfree>
c0005bc9:	83 c4 10             	add    esp,0x10
c0005bcc:	be 01 00 00 00       	mov    esi,0x1
c0005bd1:	eb 40                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005bd3:	85 ed                	test   ebp,ebp
c0005bd5:	75 3c                	jne    c0005c13 <f_mkfs+0x7f6>
c0005bd7:	83 ec 0c             	sub    esp,0xc
c0005bda:	53                   	push   ebx
c0005bdb:	e8 58 00 00 00       	call   c0005c38 <ff_memfree>
c0005be0:	83 c4 10             	add    esp,0x10
c0005be3:	eb 2e                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005be5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bea:	0f 85 3b fb ff ff    	jne    c000572b <f_mkfs+0x30e>
c0005bf0:	e9 15 fc ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005bf5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bfa:	0f 85 31 fb ff ff    	jne    c0005731 <f_mkfs+0x314>
c0005c00:	89 cf                	mov    edi,ecx
c0005c02:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c08:	0f 86 29 fa ff ff    	jbe    c0005637 <f_mkfs+0x21a>
c0005c0e:	e9 f7 fb ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005c13:	83 c4 5c             	add    esp,0x5c
c0005c16:	89 f0                	mov    eax,esi
c0005c18:	5b                   	pop    ebx
c0005c19:	5e                   	pop    esi
c0005c1a:	5f                   	pop    edi
c0005c1b:	5d                   	pop    ebp
c0005c1c:	c3                   	ret    
c0005c1d:	66 90                	xchg   ax,ax
c0005c1f:	90                   	nop

c0005c20 <ff_memalloc>:
c0005c20:	83 ec 0c             	sub    esp,0xc
c0005c23:	83 ec 0c             	sub    esp,0xc
c0005c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c2a:	e8 87 1e 00 00       	call   c0007ab6 <malloc>
c0005c2f:	83 c4 10             	add    esp,0x10
c0005c32:	83 c4 0c             	add    esp,0xc
c0005c35:	c3                   	ret    
c0005c36:	66 90                	xchg   ax,ax

c0005c38 <ff_memfree>:
c0005c38:	83 ec 0c             	sub    esp,0xc
c0005c3b:	83 ec 0c             	sub    esp,0xc
c0005c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c42:	e8 7f 1e 00 00       	call   c0007ac6 <free>
c0005c47:	83 c4 10             	add    esp,0x10
c0005c4a:	90                   	nop
c0005c4b:	83 c4 0c             	add    esp,0xc
c0005c4e:	c3                   	ret    
c0005c4f:	90                   	nop

c0005c50 <ff_uni2oem>:
c0005c50:	83 ec 14             	sub    esp,0x14
c0005c53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c57:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c5b:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c62:	c7 44 24 0c 00 04 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020400
c0005c6a:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005c6f:	77 0b                	ja     c0005c7c <ff_uni2oem+0x2c>
c0005c71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c75:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c7a:	eb 68                	jmp    c0005ce4 <ff_uni2oem+0x94>
c0005c7c:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005c84:	77 5e                	ja     c0005ce4 <ff_uni2oem+0x94>
c0005c86:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005c8a:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005c8f:	75 53                	jne    c0005ce4 <ff_uni2oem+0x94>
c0005c91:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c98:	eb 12                	jmp    c0005cac <ff_uni2oem+0x5c>
c0005c9a:	66 90                	xchg   ax,ax
c0005c9c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ca1:	83 c0 01             	add    eax,0x1
c0005ca4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0005cac:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cb1:	83 f8 7f             	cmp    eax,0x7f
c0005cb4:	77 1e                	ja     c0005cd4 <ff_uni2oem+0x84>
c0005cb6:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cbb:	01 c0                	add    eax,eax
c0005cbd:	89 c2                	mov    edx,eax
c0005cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc3:	01 d0                	add    eax,edx
c0005cc5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cc8:	0f b7 c0             	movzx  eax,ax
c0005ccb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ccf:	75 cb                	jne    c0005c9c <ff_uni2oem+0x4c>
c0005cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0005cd4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd9:	83 e8 80             	sub    eax,0xffffff80
c0005cdc:	0f b6 c0             	movzx  eax,al
c0005cdf:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ce4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ce9:	83 c4 14             	add    esp,0x14
c0005cec:	c3                   	ret    
c0005ced:	8d 76 00             	lea    esi,[esi+0x0]

c0005cf0 <ff_oem2uni>:
c0005cf0:	83 ec 18             	sub    esp,0x18
c0005cf3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005cf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005cfb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d00:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d04:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d0b:	c7 44 24 10 00 04 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020400
c0005d13:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d18:	83 f8 7f             	cmp    eax,0x7f
c0005d1b:	77 0b                	ja     c0005d28 <ff_oem2uni+0x38>
c0005d1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d21:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d26:	eb 34                	jmp    c0005d5c <ff_oem2uni+0x6c>
c0005d28:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d2c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d31:	75 29                	jne    c0005d5c <ff_oem2uni+0x6c>
c0005d33:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d38:	3d ff 00 00 00       	cmp    eax,0xff
c0005d3d:	77 1d                	ja     c0005d5c <ff_oem2uni+0x6c>
c0005d3f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d44:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d49:	01 c0                	add    eax,eax
c0005d4b:	89 c2                	mov    edx,eax
c0005d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d51:	01 d0                	add    eax,edx
c0005d53:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d56:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d5b:	90                   	nop
c0005d5c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d61:	83 c4 18             	add    esp,0x18
c0005d64:	c3                   	ret    
c0005d65:	8d 76 00             	lea    esi,[esi+0x0]

c0005d68 <ff_wtoupper>:
c0005d68:	83 ec 10             	sub    esp,0x10
c0005d6b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005d73:	0f 87 ab 01 00 00    	ja     c0005f24 <ff_wtoupper+0x1bc>
c0005d79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d7d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005d82:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d87:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005d8c:	77 0a                	ja     c0005d98 <ff_wtoupper+0x30>
c0005d8e:	b8 00 02 02 c0       	mov    eax,0xc0020200
c0005d93:	eb 0b                	jmp    c0005da0 <ff_wtoupper+0x38>
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]
c0005d98:	b8 40 01 02 c0       	mov    eax,0xc0020140
c0005d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0005da0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005da4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005da8:	8d 50 02             	lea    edx,[eax+0x2]
c0005dab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005daf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005db2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005db7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dbc:	85 c0                	test   eax,eax
c0005dbe:	0f 84 54 01 00 00    	je     c0005f18 <ff_wtoupper+0x1b0>
c0005dc4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005dc9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dce:	39 c2                	cmp    edx,eax
c0005dd0:	0f 82 42 01 00 00    	jb     c0005f18 <ff_wtoupper+0x1b0>
c0005dd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dda:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005de1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005de9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005dee:	c1 e8 08             	shr    eax,0x8
c0005df1:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005df6:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005dfb:	0f b6 c0             	movzx  eax,al
c0005dfe:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e03:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e08:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e0d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e12:	01 ca                	add    edx,ecx
c0005e14:	39 d0                	cmp    eax,edx
c0005e16:	0f 8d d8 00 00 00    	jge    c0005ef4 <ff_wtoupper+0x18c>
c0005e1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e21:	83 f8 08             	cmp    eax,0x8
c0005e24:	0f 87 ea 00 00 00    	ja     c0005f14 <ff_wtoupper+0x1ac>
c0005e2a:	8b 04 85 00 01 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdff00]
c0005e31:	ff e0                	jmp    eax
c0005e33:	90                   	nop
c0005e34:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e39:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e3e:	29 c2                	sub    edx,eax
c0005e40:	89 d0                	mov    eax,edx
c0005e42:	01 c0                	add    eax,eax
c0005e44:	89 c2                	mov    edx,eax
c0005e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e4a:	01 d0                	add    eax,edx
c0005e4c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e4f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e54:	e9 97 00 00 00       	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e59:	8d 76 00             	lea    esi,[esi+0x0]
c0005e5c:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e65:	89 d1                	mov    ecx,edx
c0005e67:	29 c1                	sub    ecx,eax
c0005e69:	89 c8                	mov    eax,ecx
c0005e6b:	83 e0 01             	and    eax,0x1
c0005e6e:	89 c2                	mov    edx,eax
c0005e70:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e75:	29 d0                	sub    eax,edx
c0005e77:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e7c:	eb 72                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e7e:	66 90                	xchg   ax,ax
c0005e80:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e85:	83 e8 10             	sub    eax,0x10
c0005e88:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e8d:	eb 61                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e8f:	90                   	nop
c0005e90:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e95:	83 e8 20             	sub    eax,0x20
c0005e98:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e9d:	eb 51                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e9f:	90                   	nop
c0005ea0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea5:	83 e8 30             	sub    eax,0x30
c0005ea8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ead:	eb 41                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005eaf:	90                   	nop
c0005eb0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb5:	83 e8 1a             	sub    eax,0x1a
c0005eb8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ebd:	eb 31                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ebf:	90                   	nop
c0005ec0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec5:	83 c0 08             	add    eax,0x8
c0005ec8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ecd:	eb 21                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ecf:	90                   	nop
c0005ed0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed5:	83 e8 50             	sub    eax,0x50
c0005ed8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005edd:	eb 11                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005edf:	90                   	nop
c0005ee0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee5:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005eea:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eef:	90                   	nop
c0005ef0:	eb 22                	jmp    c0005f14 <ff_wtoupper+0x1ac>
c0005ef2:	66 90                	xchg   ax,ax
c0005ef4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ef9:	85 c0                	test   eax,eax
c0005efb:	0f 85 a3 fe ff ff    	jne    c0005da4 <ff_wtoupper+0x3c>
c0005f01:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f06:	01 c0                	add    eax,eax
c0005f08:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f0c:	e9 93 fe ff ff       	jmp    c0005da4 <ff_wtoupper+0x3c>
c0005f11:	8d 76 00             	lea    esi,[esi+0x0]
c0005f14:	90                   	nop
c0005f15:	8d 76 00             	lea    esi,[esi+0x0]
c0005f18:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f21:	8d 76 00             	lea    esi,[esi+0x0]
c0005f24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f28:	83 c4 10             	add    esp,0x10
c0005f2b:	c3                   	ret    

c0005f2c <utf2ucs>:
c0005f2c:	57                   	push   edi
c0005f2d:	31 c9                	xor    ecx,ecx
c0005f2f:	56                   	push   esi
c0005f30:	89 d7                	mov    edi,edx
c0005f32:	53                   	push   ebx
c0005f33:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f37:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f3b:	89 de                	mov    esi,ebx
c0005f3d:	c1 fe 08             	sar    esi,0x8
c0005f40:	89 f2                	mov    edx,esi
c0005f42:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f45:	41                   	inc    ecx
c0005f46:	85 db                	test   ebx,ebx
c0005f48:	75 e9                	jne    c0005f33 <utf2ucs+0x7>
c0005f4a:	5b                   	pop    ebx
c0005f4b:	5e                   	pop    esi
c0005f4c:	5f                   	pop    edi
c0005f4d:	c3                   	ret    

c0005f4e <ucs2utfn>:
c0005f4e:	83 e1 fe             	and    ecx,0xfffffffe
c0005f51:	01 d1                	add    ecx,edx
c0005f53:	39 d1                	cmp    ecx,edx
c0005f55:	75 04                	jne    c0005f5b <ucs2utfn+0xd>
c0005f57:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f5a:	c3                   	ret    
c0005f5b:	57                   	push   edi
c0005f5c:	56                   	push   esi
c0005f5d:	53                   	push   ebx
c0005f5e:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f61:	83 c2 02             	add    edx,0x2
c0005f64:	89 de                	mov    esi,ebx
c0005f66:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	09 f3                	or     ebx,esi
c0005f6f:	83 fb 3b             	cmp    ebx,0x3b
c0005f72:	74 50                	je     c0005fc4 <ucs2utfn+0x76>
c0005f74:	83 fb 7f             	cmp    ebx,0x7f
c0005f77:	7f 05                	jg     c0005f7e <ucs2utfn+0x30>
c0005f79:	88 18                	mov    BYTE PTR [eax],bl
c0005f7b:	40                   	inc    eax
c0005f7c:	eb 42                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005f7e:	89 de                	mov    esi,ebx
c0005f80:	89 df                	mov    edi,ebx
c0005f82:	c1 fe 06             	sar    esi,0x6
c0005f85:	83 e7 3f             	and    edi,0x3f
c0005f88:	83 cf 80             	or     edi,0xffffff80
c0005f8b:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005f91:	7f 12                	jg     c0005fa5 <ucs2utfn+0x57>
c0005f93:	83 ce c0             	or     esi,0xffffffc0
c0005f96:	83 c0 02             	add    eax,0x2
c0005f99:	89 f3                	mov    ebx,esi
c0005f9b:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005f9e:	89 fb                	mov    ebx,edi
c0005fa0:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fa3:	eb 1b                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005fa5:	c1 fb 0c             	sar    ebx,0xc
c0005fa8:	83 e6 3f             	and    esi,0x3f
c0005fab:	83 cb e0             	or     ebx,0xffffffe0
c0005fae:	83 ce 80             	or     esi,0xffffff80
c0005fb1:	88 18                	mov    BYTE PTR [eax],bl
c0005fb3:	89 f3                	mov    ebx,esi
c0005fb5:	83 c0 03             	add    eax,0x3
c0005fb8:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fbb:	89 fb                	mov    ebx,edi
c0005fbd:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fc0:	39 d1                	cmp    ecx,edx
c0005fc2:	75 9a                	jne    c0005f5e <ucs2utfn+0x10>
c0005fc4:	5b                   	pop    ebx
c0005fc5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005fc8:	5e                   	pop    esi
c0005fc9:	5f                   	pop    edi
c0005fca:	c3                   	ret    

c0005fcb <isjoliet>:
c0005fcb:	31 d2                	xor    edx,edx
c0005fcd:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005fd0:	75 26                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd2:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005fd6:	75 20                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd8:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0005fdc:	ba 02 00 00 00       	mov    edx,0x2
c0005fe1:	83 f8 43             	cmp    eax,0x43
c0005fe4:	74 12                	je     c0005ff8 <isjoliet+0x2d>
c0005fe6:	ba 03 00 00 00       	mov    edx,0x3
c0005feb:	83 f8 45             	cmp    eax,0x45
c0005fee:	74 08                	je     c0005ff8 <isjoliet+0x2d>
c0005ff0:	31 d2                	xor    edx,edx
c0005ff2:	83 f8 40             	cmp    eax,0x40
c0005ff5:	0f 94 c2             	sete   dl
c0005ff8:	89 d0                	mov    eax,edx
c0005ffa:	c3                   	ret    

c0005ffb <htohl_32>:
c0005ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ffd:	c3                   	ret    

c0005ffe <iso_733>:
c0005ffe:	eb fb                	jmp    c0005ffb <htohl_32>

c0006000 <bgrad_cache>:
c0006000:	83 fa 0e             	cmp    edx,0xe
c0006003:	77 16                	ja     c000601b <bgrad_cache+0x1b>
c0006005:	53                   	push   ebx
c0006006:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006009:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c000600d:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0006010:	42                   	inc    edx
c0006011:	83 fa 0f             	cmp    edx,0xf
c0006014:	75 f3                	jne    c0006009 <bgrad_cache+0x9>
c0006016:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006019:	5b                   	pop    ebx
c000601a:	c3                   	ret    
c000601b:	c3                   	ret    

c000601c <ucscompare>:
c000601c:	55                   	push   ebp
c000601d:	57                   	push   edi
c000601e:	89 c7                	mov    edi,eax
c0006020:	56                   	push   esi
c0006021:	89 d6                	mov    esi,edx
c0006023:	53                   	push   ebx
c0006024:	31 d2                	xor    edx,edx
c0006026:	83 ec 1c             	sub    esp,0x1c
c0006029:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c000602d:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0006032:	c1 e3 08             	shl    ebx,0x8
c0006035:	09 c3                	or     ebx,eax
c0006037:	39 ca                	cmp    edx,ecx
c0006039:	7d 42                	jge    c000607d <ucscompare+0x61>
c000603b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000603f:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006044:	c1 e0 08             	shl    eax,0x8
c0006047:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000604b:	09 e8                	or     eax,ebp
c000604d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006051:	83 f8 3b             	cmp    eax,0x3b
c0006054:	74 27                	je     c000607d <ucscompare+0x61>
c0006056:	83 ec 0c             	sub    esp,0xc
c0006059:	50                   	push   eax
c000605a:	e8 f1 a8 ff ff       	call   c0000950 <tolower>
c000605f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006062:	89 c5                	mov    ebp,eax
c0006064:	e8 e7 a8 ff ff       	call   c0000950 <tolower>
c0006069:	83 c4 10             	add    esp,0x10
c000606c:	39 c5                	cmp    ebp,eax
c000606e:	75 20                	jne    c0006090 <ucscompare+0x74>
c0006070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006074:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006078:	83 c2 02             	add    edx,0x2
c000607b:	eb ac                	jmp    c0006029 <ucscompare+0xd>
c000607d:	85 db                	test   ebx,ebx
c000607f:	0f 95 c2             	setne  dl
c0006082:	31 c0                	xor    eax,eax
c0006084:	83 fb 2f             	cmp    ebx,0x2f
c0006087:	0f 95 c0             	setne  al
c000608a:	21 d0                	and    eax,edx
c000608c:	f7 d8                	neg    eax
c000608e:	eb 03                	jmp    c0006093 <ucscompare+0x77>
c0006090:	83 c8 ff             	or     eax,0xffffffff
c0006093:	83 c4 1c             	add    esp,0x1c
c0006096:	5b                   	pop    ebx
c0006097:	5e                   	pop    esi
c0006098:	5f                   	pop    edi
c0006099:	5d                   	pop    ebp
c000609a:	c3                   	ret    

c000609b <fncompare>:
c000609b:	55                   	push   ebp
c000609c:	57                   	push   edi
c000609d:	89 c7                	mov    edi,eax
c000609f:	56                   	push   esi
c00060a0:	89 ce                	mov    esi,ecx
c00060a2:	53                   	push   ebx
c00060a3:	31 db                	xor    ebx,ebx
c00060a5:	83 ec 1c             	sub    esp,0x1c
c00060a8:	39 d3                	cmp    ebx,edx
c00060aa:	7d 45                	jge    c00060f1 <fncompare+0x56>
c00060ac:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060b0:	83 f8 3b             	cmp    eax,0x3b
c00060b3:	74 3c                	je     c00060f1 <fncompare+0x56>
c00060b5:	83 f8 2e             	cmp    eax,0x2e
c00060b8:	75 0e                	jne    c00060c8 <fncompare+0x2d>
c00060ba:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060bd:	39 d9                	cmp    ecx,ebx
c00060bf:	74 30                	je     c00060f1 <fncompare+0x56>
c00060c1:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060c6:	74 29                	je     c00060f1 <fncompare+0x56>
c00060c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060cc:	83 ec 0c             	sub    esp,0xc
c00060cf:	50                   	push   eax
c00060d0:	e8 7b a8 ff ff       	call   c0000950 <tolower>
c00060d5:	89 c5                	mov    ebp,eax
c00060d7:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00060db:	89 04 24             	mov    DWORD PTR [esp],eax
c00060de:	e8 6d a8 ff ff       	call   c0000950 <tolower>
c00060e3:	83 c4 10             	add    esp,0x10
c00060e6:	39 c5                	cmp    ebp,eax
c00060e8:	75 1e                	jne    c0006108 <fncompare+0x6d>
c00060ea:	43                   	inc    ebx
c00060eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00060ef:	eb b7                	jmp    c00060a8 <fncompare+0xd>
c00060f1:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00060f5:	85 d2                	test   edx,edx
c00060f7:	0f 95 c1             	setne  cl
c00060fa:	31 c0                	xor    eax,eax
c00060fc:	83 fa 2f             	cmp    edx,0x2f
c00060ff:	0f 95 c0             	setne  al
c0006102:	21 c8                	and    eax,ecx
c0006104:	f7 d8                	neg    eax
c0006106:	eb 03                	jmp    c000610b <fncompare+0x70>
c0006108:	83 c8 ff             	or     eax,0xffffffff
c000610b:	83 c4 1c             	add    esp,0x1c
c000610e:	5b                   	pop    ebx
c000610f:	5e                   	pop    esi
c0006110:	5f                   	pop    edi
c0006111:	5d                   	pop    ebp
c0006112:	c3                   	ret    

c0006113 <bclear_cache>:
c0006113:	83 ec 18             	sub    esp,0x18
c0006116:	68 00 05 02 c0       	push   0xc0020500
c000611b:	e8 74 3d 01 00       	call   c0019e94 <iso_kprintf>
c0006120:	83 c4 10             	add    esp,0x10
c0006123:	31 c0                	xor    eax,eax
c0006125:	8b 14 85 20 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdafe0]
c000612c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006132:	8b 14 85 80 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaf80]
c0006139:	40                   	inc    eax
c000613a:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006140:	83 f8 10             	cmp    eax,0x10
c0006143:	75 e0                	jne    c0006125 <bclear_cache+0x12>
c0006145:	83 c4 0c             	add    esp,0xc
c0006148:	c3                   	ret    

c0006149 <bclear>:
c0006149:	eb c8                	jmp    c0006113 <bclear_cache>

c000614b <iso_break_all>:
c000614b:	83 ec 18             	sub    esp,0x18
c000614e:	68 0e 05 02 c0       	push   0xc002050e
c0006153:	e8 3c 3d 01 00       	call   c0019e94 <iso_kprintf>
c0006158:	83 c4 10             	add    esp,0x10
c000615b:	31 c0                	xor    eax,eax
c000615d:	c7 80 d0 55 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdaa30],0x1
c0006167:	05 94 00 00 00       	add    eax,0x94
c000616c:	3d 40 09 00 00       	cmp    eax,0x940
c0006171:	75 ea                	jne    c000615d <iso_break_all+0x12>
c0006173:	83 c4 0c             	add    esp,0xc
c0006176:	c3                   	ret    

c0006177 <isoReadDiscSector>:
c0006177:	83 ec 0c             	sub    esp,0xc
c000617a:	0f be 05 60 50 02 c0 	movsx  eax,BYTE PTR ds:0xc0025060
c0006181:	50                   	push   eax
c0006182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618e:	e8 a5 3c 01 00       	call   c0019e38 <isoReadDiscSectorHelper>
c0006193:	83 c4 1c             	add    esp,0x1c
c0006196:	c3                   	ret    

c0006197 <bread_cache>:
c0006197:	55                   	push   ebp
c0006198:	57                   	push   edi
c0006199:	89 d7                	mov    edi,edx
c000619b:	56                   	push   esi
c000619c:	ba 0f 00 00 00       	mov    edx,0xf
c00061a1:	53                   	push   ebx
c00061a2:	89 c6                	mov    esi,eax
c00061a4:	83 ec 0c             	sub    esp,0xc
c00061a7:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061aa:	39 38                	cmp    DWORD PTR [eax],edi
c00061ac:	74 3c                	je     c00061ea <bread_cache+0x53>
c00061ae:	4a                   	dec    edx
c00061af:	83 fa ff             	cmp    edx,0xffffffff
c00061b2:	75 f3                	jne    c00061a7 <bread_cache+0x10>
c00061b4:	31 db                	xor    ebx,ebx
c00061b6:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061b9:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061bc:	74 08                	je     c00061c6 <bread_cache+0x2f>
c00061be:	43                   	inc    ebx
c00061bf:	83 fb 10             	cmp    ebx,0x10
c00061c2:	75 f2                	jne    c00061b6 <bread_cache+0x1f>
c00061c4:	31 db                	xor    ebx,ebx
c00061c6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061c9:	50                   	push   eax
c00061ca:	6a 01                	push   0x1
c00061cc:	57                   	push   edi
c00061cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061d0:	83 c0 04             	add    eax,0x4
c00061d3:	50                   	push   eax
c00061d4:	e8 9e ff ff ff       	call   c0006177 <isoReadDiscSector>
c00061d9:	83 c4 10             	add    esp,0x10
c00061dc:	83 c9 ff             	or     ecx,0xffffffff
c00061df:	85 c0                	test   eax,eax
c00061e1:	78 13                	js     c00061f6 <bread_cache+0x5f>
c00061e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061e6:	89 da                	mov    edx,ebx
c00061e8:	89 38                	mov    DWORD PTR [eax],edi
c00061ea:	89 f0                	mov    eax,esi
c00061ec:	e8 0f fe ff ff       	call   c0006000 <bgrad_cache>
c00061f1:	b9 0f 00 00 00       	mov    ecx,0xf
c00061f6:	83 c4 0c             	add    esp,0xc
c00061f9:	89 c8                	mov    eax,ecx
c00061fb:	5b                   	pop    ebx
c00061fc:	5e                   	pop    esi
c00061fd:	5f                   	pop    edi
c00061fe:	5d                   	pop    ebp
c00061ff:	c3                   	ret    

c0006200 <biread>:
c0006200:	89 c2                	mov    edx,eax
c0006202:	b8 80 50 02 c0       	mov    eax,0xc0025080
c0006207:	eb 8e                	jmp    c0006197 <bread_cache>

c0006209 <bdread>:
c0006209:	89 c2                	mov    edx,eax
c000620b:	b8 20 50 02 c0       	mov    eax,0xc0025020
c0006210:	eb 85                	jmp    c0006197 <bread_cache>

c0006212 <strnicmp>:
c0006212:	55                   	push   ebp
c0006213:	57                   	push   edi
c0006214:	31 ff                	xor    edi,edi
c0006216:	56                   	push   esi
c0006217:	53                   	push   ebx
c0006218:	83 ec 0c             	sub    esp,0xc
c000621b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000621f:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006223:	74 43                	je     c0006268 <strnicmp+0x56>
c0006225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006229:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000622d:	85 c0                	test   eax,eax
c000622f:	74 37                	je     c0006268 <strnicmp+0x56>
c0006231:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006235:	85 d2                	test   edx,edx
c0006237:	74 2f                	je     c0006268 <strnicmp+0x56>
c0006239:	39 d0                	cmp    eax,edx
c000623b:	8d 6f 01             	lea    ebp,[edi+0x1]
c000623e:	75 04                	jne    c0006244 <strnicmp+0x32>
c0006240:	89 ef                	mov    edi,ebp
c0006242:	eb db                	jmp    c000621f <strnicmp+0xd>
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	50                   	push   eax
c0006248:	e8 03 a7 ff ff       	call   c0000950 <tolower>
c000624d:	89 c3                	mov    ebx,eax
c000624f:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006253:	89 ef                	mov    edi,ebp
c0006255:	89 04 24             	mov    DWORD PTR [esp],eax
c0006258:	e8 f3 a6 ff ff       	call   c0000950 <tolower>
c000625d:	83 c4 10             	add    esp,0x10
c0006260:	29 c3                	sub    ebx,eax
c0006262:	89 d8                	mov    eax,ebx
c0006264:	74 b9                	je     c000621f <strnicmp+0xd>
c0006266:	eb 02                	jmp    c000626a <strnicmp+0x58>
c0006268:	31 c0                	xor    eax,eax
c000626a:	83 c4 0c             	add    esp,0xc
c000626d:	5b                   	pop    ebx
c000626e:	5e                   	pop    esi
c000626f:	5f                   	pop    edi
c0006270:	5d                   	pop    ebp
c0006271:	c3                   	ret    

c0006272 <find_object>:
c0006272:	55                   	push   ebp
c0006273:	57                   	push   edi
c0006274:	89 c7                	mov    edi,eax
c0006276:	56                   	push   esi
c0006277:	53                   	push   ebx
c0006278:	89 d3                	mov    ebx,edx
c000627a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006280:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006287:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000628b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000628f:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006296:	74 0b                	je     c00062a3 <find_object+0x31>
c0006298:	89 fa                	mov    edx,edi
c000629a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000629e:	e8 89 fc ff ff       	call   c0005f2c <utf2ucs>
c00062a3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062aa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00062af:	7e 11                	jle    c00062c2 <find_object+0x50>
c00062b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b5:	e8 46 ff ff ff       	call   c0006200 <biread>
c00062ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00062be:	85 c0                	test   eax,eax
c00062c0:	79 07                	jns    c00062c9 <find_object+0x57>
c00062c2:	31 db                	xor    ebx,ebx
c00062c4:	e9 56 01 00 00       	jmp    c000641f <find_object+0x1ad>
c00062c9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00062d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00062d9:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c00062e0:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00062e4:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00062e7:	85 f6                	test   esi,esi
c00062e9:	75 0e                	jne    c00062f9 <find_object+0x87>
c00062eb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00062ef:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00062f7:	eb b1                	jmp    c00062aa <find_object+0x38>
c00062f9:	8b 2d b4 5e 02 c0    	mov    ebp,DWORD PTR ds:0xc0025eb4
c00062ff:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006303:	85 ed                	test   ebp,ebp
c0006305:	89 c8                	mov    eax,ecx
c0006307:	74 2b                	je     c0006334 <find_object+0xc2>
c0006309:	8d 43 21             	lea    eax,[ebx+0x21]
c000630c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006310:	e8 07 fd ff ff       	call   c000601c <ucscompare>
c0006315:	85 c0                	test   eax,eax
c0006317:	0f 84 bf 00 00 00    	je     c00063dc <find_object+0x16a>
c000631d:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006320:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006324:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c000632c:	0f 8e da 00 00 00    	jle    c000640c <find_object+0x19a>
c0006332:	eb b7                	jmp    c00062eb <find_object+0x79>
c0006334:	29 ce                	sub    esi,ecx
c0006336:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c000633a:	a8 01                	test   al,0x1
c000633c:	74 05                	je     c0006343 <find_object+0xd1>
c000633e:	83 ee 21             	sub    esi,0x21
c0006341:	eb 5a                	jmp    c000639d <find_object+0x12b>
c0006343:	42                   	inc    edx
c0006344:	83 ee 22             	sub    esi,0x22
c0006347:	eb 54                	jmp    c000639d <find_object+0x12b>
c0006349:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000634c:	48                   	dec    eax
c000634d:	3c 01                	cmp    al,0x1
c000634f:	77 51                	ja     c00063a2 <find_object+0x130>
c0006351:	50                   	push   eax
c0006352:	6a 02                	push   0x2
c0006354:	68 1d 05 02 c0       	push   0xc002051d
c0006359:	52                   	push   edx
c000635a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000635e:	e8 7d a4 ff ff       	call   c00007e0 <strncmp>
c0006363:	83 c4 10             	add    esp,0x10
c0006366:	85 c0                	test   eax,eax
c0006368:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000636c:	75 27                	jne    c0006395 <find_object+0x123>
c000636e:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006372:	8d 68 fb             	lea    ebp,[eax-0x5]
c0006375:	50                   	push   eax
c0006376:	8d 42 05             	lea    eax,[edx+0x5]
c0006379:	55                   	push   ebp
c000637a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000637e:	50                   	push   eax
c000637f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006383:	50                   	push   eax
c0006384:	e8 f7 a2 ff ff       	call   c0000680 <strncpy>
c0006389:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006395:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006399:	29 c6                	sub    esi,eax
c000639b:	01 c2                	add    edx,eax
c000639d:	83 fe 03             	cmp    esi,0x3
c00063a0:	7f a7                	jg     c0006349 <find_object+0xd7>
c00063a2:	85 ed                	test   ebp,ebp
c00063a4:	7e 40                	jle    c00063e6 <find_object+0x174>
c00063a6:	51                   	push   ecx
c00063a7:	51                   	push   ecx
c00063a8:	6a 2f                	push   0x2f
c00063aa:	57                   	push   edi
c00063ab:	e8 f0 a3 ff ff       	call   c00007a0 <strchr>
c00063b0:	83 c4 10             	add    esp,0x10
c00063b3:	85 c0                	test   eax,eax
c00063b5:	74 04                	je     c00063bb <find_object+0x149>
c00063b7:	29 f8                	sub    eax,edi
c00063b9:	eb 0c                	jmp    c00063c7 <find_object+0x155>
c00063bb:	83 ec 0c             	sub    esp,0xc
c00063be:	57                   	push   edi
c00063bf:	e8 ac a1 ff ff       	call   c0000570 <strlen>
c00063c4:	83 c4 10             	add    esp,0x10
c00063c7:	52                   	push   edx
c00063c8:	50                   	push   eax
c00063c9:	57                   	push   edi
c00063ca:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063ce:	50                   	push   eax
c00063cf:	e8 3e fe ff ff       	call   c0006212 <strnicmp>
c00063d4:	83 c4 10             	add    esp,0x10
c00063d7:	e9 39 ff ff ff       	jmp    c0006315 <find_object+0xa3>
c00063dc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063e0:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00063e4:	eb 1e                	jmp    c0006404 <find_object+0x192>
c00063e6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00063ea:	8d 43 21             	lea    eax,[ebx+0x21]
c00063ed:	89 f9                	mov    ecx,edi
c00063ef:	e8 a7 fc ff ff       	call   c000609b <fncompare>
c00063f4:	85 c0                	test   eax,eax
c00063f6:	0f 85 21 ff ff ff    	jne    c000631d <find_object+0xab>
c00063fc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006400:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0006404:	0f 85 13 ff ff ff    	jne    c000631d <find_object+0xab>
c000640a:	eb 13                	jmp    c000641f <find_object+0x1ad>
c000640c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006410:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0006414:	0f 8f b7 fe ff ff    	jg     c00062d1 <find_object+0x5f>
c000641a:	e9 cc fe ff ff       	jmp    c00062eb <find_object+0x79>
c000641f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006425:	89 d8                	mov    eax,ebx
c0006427:	5b                   	pop    ebx
c0006428:	5e                   	pop    esi
c0006429:	5f                   	pop    edi
c000642a:	5d                   	pop    ebp
c000642b:	c3                   	ret    

c000642c <find_object_path>:
c000642c:	55                   	push   ebp
c000642d:	57                   	push   edi
c000642e:	89 d7                	mov    edi,edx
c0006430:	56                   	push   esi
c0006431:	89 c6                	mov    esi,eax
c0006433:	53                   	push   ebx
c0006434:	89 cb                	mov    ebx,ecx
c0006436:	83 ec 0c             	sub    esp,0xc
c0006439:	50                   	push   eax
c000643a:	50                   	push   eax
c000643b:	6a 2f                	push   0x2f
c000643d:	56                   	push   esi
c000643e:	e8 5d a3 ff ff       	call   c00007a0 <strchr>
c0006443:	83 c4 10             	add    esp,0x10
c0006446:	89 c5                	mov    ebp,eax
c0006448:	85 c0                	test   eax,eax
c000644a:	74 3a                	je     c0006486 <find_object_path+0x5a>
c000644c:	39 ee                	cmp    esi,ebp
c000644e:	74 31                	je     c0006481 <find_object_path+0x55>
c0006450:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006453:	e8 a6 fb ff ff       	call   c0005ffe <iso_733>
c0006458:	89 c2                	mov    edx,eax
c000645a:	8d 43 02             	lea    eax,[ebx+0x2]
c000645d:	e8 9c fb ff ff       	call   c0005ffe <iso_733>
c0006462:	83 ec 0c             	sub    esp,0xc
c0006465:	89 c1                	mov    ecx,eax
c0006467:	52                   	push   edx
c0006468:	89 f0                	mov    eax,esi
c000646a:	ba 01 00 00 00       	mov    edx,0x1
c000646f:	e8 fe fd ff ff       	call   c0006272 <find_object>
c0006474:	83 c4 10             	add    esp,0x10
c0006477:	89 c3                	mov    ebx,eax
c0006479:	85 c0                	test   eax,eax
c000647b:	75 04                	jne    c0006481 <find_object_path+0x55>
c000647d:	31 db                	xor    ebx,ebx
c000647f:	eb 36                	jmp    c00064b7 <find_object_path+0x8b>
c0006481:	8d 75 01             	lea    esi,[ebp+0x1]
c0006484:	eb b3                	jmp    c0006439 <find_object_path+0xd>
c0006486:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006489:	74 28                	je     c00064b3 <find_object_path+0x87>
c000648b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000648e:	e8 6b fb ff ff       	call   c0005ffe <iso_733>
c0006493:	89 c2                	mov    edx,eax
c0006495:	8d 43 02             	lea    eax,[ebx+0x2]
c0006498:	e8 61 fb ff ff       	call   c0005ffe <iso_733>
c000649d:	83 ec 0c             	sub    esp,0xc
c00064a0:	89 c1                	mov    ecx,eax
c00064a2:	52                   	push   edx
c00064a3:	89 f0                	mov    eax,esi
c00064a5:	89 fa                	mov    edx,edi
c00064a7:	e8 c6 fd ff ff       	call   c0006272 <find_object>
c00064ac:	83 c4 10             	add    esp,0x10
c00064af:	89 c3                	mov    ebx,eax
c00064b1:	eb 04                	jmp    c00064b7 <find_object_path+0x8b>
c00064b3:	85 ff                	test   edi,edi
c00064b5:	74 c6                	je     c000647d <find_object_path+0x51>
c00064b7:	83 c4 0c             	add    esp,0xc
c00064ba:	89 d8                	mov    eax,ebx
c00064bc:	5b                   	pop    ebx
c00064bd:	5e                   	pop    esi
c00064be:	5f                   	pop    edi
c00064bf:	5d                   	pop    ebp
c00064c0:	c3                   	ret    

c00064c1 <stricmp>:
c00064c1:	57                   	push   edi
c00064c2:	56                   	push   esi
c00064c3:	31 f6                	xor    esi,esi
c00064c5:	53                   	push   ebx
c00064c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064ca:	83 ec 0c             	sub    esp,0xc
c00064cd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064d5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064d9:	50                   	push   eax
c00064da:	e8 51 a4 ff ff       	call   c0000930 <toupper>
c00064df:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e2:	e8 69 a4 ff ff       	call   c0000950 <tolower>
c00064e7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00064ea:	89 c3                	mov    ebx,eax
c00064ec:	e8 3f a4 ff ff       	call   c0000930 <toupper>
c00064f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064f4:	e8 57 a4 ff ff       	call   c0000950 <tolower>
c00064f9:	83 c4 10             	add    esp,0x10
c00064fc:	39 c3                	cmp    ebx,eax
c00064fe:	75 05                	jne    c0006505 <stricmp+0x44>
c0006500:	46                   	inc    esi
c0006501:	85 db                	test   ebx,ebx
c0006503:	75 c1                	jne    c00064c6 <stricmp+0x5>
c0006505:	29 c3                	sub    ebx,eax
c0006507:	89 d8                	mov    eax,ebx
c0006509:	5b                   	pop    ebx
c000650a:	5e                   	pop    esi
c000650b:	5f                   	pop    edi
c000650c:	c3                   	ret    

c000650d <iso_open>:
c000650d:	57                   	push   edi
c000650e:	31 c0                	xor    eax,eax
c0006510:	56                   	push   esi
c0006511:	b9 80 5e 02 c0       	mov    ecx,0xc0025e80
c0006516:	53                   	push   ebx
c0006517:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000651c:	0f 95 c0             	setne  al
c000651f:	89 c2                	mov    edx,eax
c0006521:	89 c6                	mov    esi,eax
c0006523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006527:	e8 00 ff ff ff       	call   c000642c <find_object_path>
c000652c:	83 ca ff             	or     edx,0xffffffff
c000652f:	85 c0                	test   eax,eax
c0006531:	74 5e                	je     c0006591 <iso_open+0x84>
c0006533:	89 c1                	mov    ecx,eax
c0006535:	31 d2                	xor    edx,edx
c0006537:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000653d:	83 bf 40 55 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdaac0],0x0
c0006544:	75 42                	jne    c0006588 <iso_open+0x7b>
c0006546:	8d 41 02             	lea    eax,[ecx+0x2]
c0006549:	c7 87 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdaac0],0xffffffff
c0006553:	e8 a6 fa ff ff       	call   c0005ffe <iso_733>
c0006558:	89 b7 44 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaabc],esi
c000655e:	89 87 40 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaac0],eax
c0006564:	c7 87 48 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaab8],0x0
c000656e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006571:	e8 88 fa ff ff       	call   c0005ffe <iso_733>
c0006576:	c7 87 d0 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaa30],0x0
c0006580:	89 87 4c 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaab4],eax
c0006586:	eb 09                	jmp    c0006591 <iso_open+0x84>
c0006588:	42                   	inc    edx
c0006589:	83 fa 10             	cmp    edx,0x10
c000658c:	75 a9                	jne    c0006537 <iso_open+0x2a>
c000658e:	83 ca ff             	or     edx,0xffffffff
c0006591:	5b                   	pop    ebx
c0006592:	89 d0                	mov    eax,edx
c0006594:	5e                   	pop    esi
c0006595:	5f                   	pop    edi
c0006596:	c3                   	ret    

c0006597 <iso_close>:
c0006597:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000659b:	83 f8 0f             	cmp    eax,0xf
c000659e:	7f 10                	jg     c00065b0 <iso_close+0x19>
c00065a0:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065a6:	c7 80 40 55 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdaac0],0x0
c00065b0:	e9 5e fb ff ff       	jmp    c0006113 <bclear_cache>

c00065b5 <iso_read>:
c00065b5:	55                   	push   ebp
c00065b6:	57                   	push   edi
c00065b7:	56                   	push   esi
c00065b8:	53                   	push   ebx
c00065b9:	83 ec 1c             	sub    esp,0x1c
c00065bc:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065c0:	83 fd 0f             	cmp    ebp,0xf
c00065c3:	7e 0a                	jle    c00065cf <iso_read+0x1a>
c00065c5:	83 c8 ff             	or     eax,0xffffffff
c00065c8:	89 c2                	mov    edx,eax
c00065ca:	e9 f4 00 00 00       	jmp    c00066c3 <iso_read+0x10e>
c00065cf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065d5:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c00065dc:	74 e7                	je     c00065c5 <iso_read+0x10>
c00065de:	8b 95 d0 55 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdaa30]
c00065e4:	85 d2                	test   edx,edx
c00065e6:	75 dd                	jne    c00065c5 <iso_read+0x10>
c00065e8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00065ed:	0f 84 cd 00 00 00    	je     c00066c0 <iso_read+0x10b>
c00065f3:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c00065f9:	8b 8d 4c 55 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffdaab4]
c00065ff:	29 c1                	sub    ecx,eax
c0006601:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c0006605:	76 04                	jbe    c000660b <iso_read+0x56>
c0006607:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000660b:	85 c9                	test   ecx,ecx
c000660d:	0f 84 ad 00 00 00    	je     c00066c0 <iso_read+0x10b>
c0006613:	89 c6                	mov    esi,eax
c0006615:	bb 00 08 00 00       	mov    ebx,0x800
c000661a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006620:	c1 e8 0b             	shr    eax,0xb
c0006623:	29 f3                	sub    ebx,esi
c0006625:	03 85 40 55 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdaac0]
c000662b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006631:	7e 3f                	jle    c0006672 <iso_read+0xbd>
c0006633:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006639:	75 37                	jne    c0006672 <iso_read+0xbd>
c000663b:	be 20 00 00 00       	mov    esi,0x20
c0006640:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006646:	7f 05                	jg     c000664d <iso_read+0x98>
c0006648:	89 ce                	mov    esi,ecx
c000664a:	c1 fe 0b             	sar    esi,0xb
c000664d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006651:	89 f3                	mov    ebx,esi
c0006653:	c1 e3 0b             	shl    ebx,0xb
c0006656:	52                   	push   edx
c0006657:	56                   	push   esi
c0006658:	50                   	push   eax
c0006659:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000665d:	e8 15 fb ff ff       	call   c0006177 <isoReadDiscSector>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	85 c0                	test   eax,eax
c0006667:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000666b:	7f 3e                	jg     c00066ab <iso_read+0xf6>
c000666d:	e9 53 ff ff ff       	jmp    c00065c5 <iso_read+0x10>
c0006672:	39 cb                	cmp    ebx,ecx
c0006674:	7e 02                	jle    c0006678 <iso_read+0xc3>
c0006676:	89 cb                	mov    ebx,ecx
c0006678:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000667c:	e8 88 fb ff ff       	call   c0006209 <bdread>
c0006681:	85 c0                	test   eax,eax
c0006683:	0f 88 3c ff ff ff    	js     c00065c5 <iso_read+0x10>
c0006689:	8b 0c 85 20 50 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdafe0]
c0006690:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006694:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c000669a:	25 ff 07 00 00       	and    eax,0x7ff
c000669f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066a3:	89 d9                	mov    ecx,ebx
c00066a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066ab:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066af:	01 9d 48 55 02 c0    	add    DWORD PTR [ebp-0x3ffdaab8],ebx
c00066b5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066b9:	01 da                	add    edx,ebx
c00066bb:	e9 28 ff ff ff       	jmp    c00065e8 <iso_read+0x33>
c00066c0:	89 d0                	mov    eax,edx
c00066c2:	99                   	cdq    
c00066c3:	83 c4 1c             	add    esp,0x1c
c00066c6:	5b                   	pop    ebx
c00066c7:	5e                   	pop    esi
c00066c8:	5f                   	pop    edi
c00066c9:	5d                   	pop    ebp
c00066ca:	c3                   	ret    

c00066cb <iso_seek>:
c00066cb:	55                   	push   ebp
c00066cc:	83 c8 ff             	or     eax,0xffffffff
c00066cf:	57                   	push   edi
c00066d0:	89 c2                	mov    edx,eax
c00066d2:	56                   	push   esi
c00066d3:	53                   	push   ebx
c00066d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066d8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066e0:	83 fe 0f             	cmp    esi,0xf
c00066e3:	7f 65                	jg     c000674a <iso_seek+0x7f>
c00066e5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00066eb:	8d 8d 40 55 02 c0    	lea    ecx,[ebp-0x3ffdaac0]
c00066f1:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c00066f8:	74 50                	je     c000674a <iso_seek+0x7f>
c00066fa:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006701:	75 47                	jne    c000674a <iso_seek+0x7f>
c0006703:	83 fb 01             	cmp    ebx,0x1
c0006706:	74 0e                	je     c0006716 <iso_seek+0x4b>
c0006708:	83 fb 02             	cmp    ebx,0x2
c000670b:	74 0e                	je     c000671b <iso_seek+0x50>
c000670d:	85 db                	test   ebx,ebx
c000670f:	75 39                	jne    c000674a <iso_seek+0x7f>
c0006711:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006714:	eb 0d                	jmp    c0006723 <iso_seek+0x58>
c0006716:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006719:	eb 08                	jmp    c0006723 <iso_seek+0x58>
c000671b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000671e:	01 f8                	add    eax,edi
c0006720:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006723:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006729:	8b 88 4c 55 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdaab4]
c000672f:	05 40 55 02 c0       	add    eax,0xc0025540
c0006734:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006737:	76 03                	jbe    c000673c <iso_seek+0x71>
c0006739:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000673c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006742:	8b 82 48 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab8]
c0006748:	31 d2                	xor    edx,edx
c000674a:	5b                   	pop    ebx
c000674b:	5e                   	pop    esi
c000674c:	5f                   	pop    edi
c000674d:	5d                   	pop    ebp
c000674e:	c3                   	ret    

c000674f <iso_tell>:
c000674f:	83 c8 ff             	or     eax,0xffffffff
c0006752:	53                   	push   ebx
c0006753:	89 c2                	mov    edx,eax
c0006755:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006759:	83 f9 0f             	cmp    ecx,0xf
c000675c:	7f 20                	jg     c000677e <iso_tell+0x2f>
c000675e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006764:	83 bb 40 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaac0],0x0
c000676b:	74 11                	je     c000677e <iso_tell+0x2f>
c000676d:	83 bb d0 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaa30],0x0
c0006774:	75 08                	jne    c000677e <iso_tell+0x2f>
c0006776:	8b 83 48 55 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdaab8]
c000677c:	31 d2                	xor    edx,edx
c000677e:	5b                   	pop    ebx
c000677f:	c3                   	ret    

c0006780 <iso_total>:
c0006780:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006784:	83 c8 ff             	or     eax,0xffffffff
c0006787:	83 fa 0f             	cmp    edx,0xf
c000678a:	7f 1e                	jg     c00067aa <iso_total+0x2a>
c000678c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006792:	83 ba 40 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaac0],0x0
c0006799:	74 0f                	je     c00067aa <iso_total+0x2a>
c000679b:	83 ba d0 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaa30],0x0
c00067a2:	75 06                	jne    c00067aa <iso_total+0x2a>
c00067a4:	8b 82 4c 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab4]
c00067aa:	c3                   	ret    

c00067ab <fn_postprocess>:
c00067ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067af:	89 d0                	mov    eax,edx
c00067b1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067b4:	83 f9 3b             	cmp    ecx,0x3b
c00067b7:	74 07                	je     c00067c0 <fn_postprocess+0x15>
c00067b9:	85 c9                	test   ecx,ecx
c00067bb:	74 03                	je     c00067c0 <fn_postprocess+0x15>
c00067bd:	40                   	inc    eax
c00067be:	eb f1                	jmp    c00067b1 <fn_postprocess+0x6>
c00067c0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067c3:	39 d0                	cmp    eax,edx
c00067c5:	76 0a                	jbe    c00067d1 <fn_postprocess+0x26>
c00067c7:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067cb:	75 04                	jne    c00067d1 <fn_postprocess+0x26>
c00067cd:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067d1:	c3                   	ret    

c00067d2 <iso_readdir>:
c00067d2:	55                   	push   ebp
c00067d3:	57                   	push   edi
c00067d4:	56                   	push   esi
c00067d5:	53                   	push   ebx
c00067d6:	83 ec 1c             	sub    esp,0x1c
c00067d9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067dd:	83 fb 0f             	cmp    ebx,0xf
c00067e0:	7f 28                	jg     c000680a <iso_readdir+0x38>
c00067e2:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00067e8:	8d b8 40 55 02 c0    	lea    edi,[eax-0x3ffdaac0]
c00067ee:	83 b8 40 55 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdaac0],0x0
c00067f5:	74 13                	je     c000680a <iso_readdir+0x38>
c00067f7:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00067fb:	74 0d                	je     c000680a <iso_readdir+0x38>
c00067fd:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006804:	0f 84 b1 00 00 00    	je     c00068bb <iso_readdir+0xe9>
c000680a:	83 ec 0c             	sub    esp,0xc
c000680d:	68 20 05 02 c0       	push   0xc0020520
c0006812:	e8 7d 36 01 00       	call   c0019e94 <iso_kprintf>
c0006817:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000681a:	e8 91 36 01 00       	call   c0019eb0 <iso_kprintfd>
c000681f:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006825:	c7 04 24 25 05 02 c0 	mov    DWORD PTR [esp],0xc0020525
c000682c:	e8 63 36 01 00       	call   c0019e94 <iso_kprintf>
c0006831:	5d                   	pop    ebp
c0006832:	ff b3 40 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaac0]
c0006838:	e8 73 36 01 00       	call   c0019eb0 <iso_kprintfd>
c000683d:	c7 04 24 2b 05 02 c0 	mov    DWORD PTR [esp],0xc002052b
c0006844:	e8 4b 36 01 00       	call   c0019e94 <iso_kprintf>
c0006849:	58                   	pop    eax
c000684a:	ff b3 44 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaabc]
c0006850:	e8 5b 36 01 00       	call   c0019eb0 <iso_kprintfd>
c0006855:	c7 04 24 31 05 02 c0 	mov    DWORD PTR [esp],0xc0020531
c000685c:	e8 33 36 01 00       	call   c0019e94 <iso_kprintf>
c0006861:	58                   	pop    eax
c0006862:	ff b3 d0 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaa30]
c0006868:	e8 43 36 01 00       	call   c0019eb0 <iso_kprintfd>
c000686d:	83 c4 10             	add    esp,0x10
c0006870:	eb 42                	jmp    c00068b4 <iso_readdir+0xe2>
c0006872:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006875:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c000687c:	89 d1                	mov    ecx,edx
c000687e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006884:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006888:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000688b:	75 35                	jne    c00068c2 <iso_readdir+0xf0>
c000688d:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006893:	81 c2 00 08 00 00    	add    edx,0x800
c0006899:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000689c:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000689f:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068a2:	73 1e                	jae    c00068c2 <iso_readdir+0xf0>
c00068a4:	c1 ea 0b             	shr    edx,0xb
c00068a7:	8b 07                	mov    eax,DWORD PTR [edi]
c00068a9:	01 d0                	add    eax,edx
c00068ab:	e8 50 f9 ff ff       	call   c0006200 <biread>
c00068b0:	85 c0                	test   eax,eax
c00068b2:	79 be                	jns    c0006872 <iso_readdir+0xa0>
c00068b4:	31 c0                	xor    eax,eax
c00068b6:	e9 66 01 00 00       	jmp    c0006a21 <iso_readdir+0x24f>
c00068bb:	31 f6                	xor    esi,esi
c00068bd:	83 c8 ff             	or     eax,0xffffffff
c00068c0:	eb da                	jmp    c000689c <iso_readdir+0xca>
c00068c2:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068c8:	8b ba 48 55 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdaab8]
c00068ce:	81 c2 40 55 02 c0    	add    edx,0xc0025540
c00068d4:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068d7:	73 db                	jae    c00068b4 <iso_readdir+0xe2>
c00068d9:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068dd:	75 34                	jne    c0006913 <iso_readdir+0x141>
c00068df:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00068e3:	75 2e                	jne    c0006913 <iso_readdir+0x141>
c00068e5:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00068e8:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c00068ef:	01 f9                	add    ecx,edi
c00068f1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068f4:	89 c8                	mov    eax,ecx
c00068f6:	25 ff 07 00 00       	and    eax,0x7ff
c00068fb:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006900:	01 c8                	add    eax,ecx
c0006902:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006905:	25 ff 07 00 00       	and    eax,0x7ff
c000690a:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000690e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006911:	74 a1                	je     c00068b4 <iso_readdir+0xe2>
c0006913:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006919:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000691d:	8d 56 21             	lea    edx,[esi+0x21]
c0006920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006924:	8d a8 58 55 02 c0    	lea    ebp,[eax-0x3ffdaaa8]
c000692a:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006931:	74 0c                	je     c000693f <iso_readdir+0x16d>
c0006933:	89 e8                	mov    eax,ebp
c0006935:	e8 14 f6 ff ff       	call   c0005f4e <ucs2utfn>
c000693a:	e9 a6 00 00 00       	jmp    c00069e5 <iso_readdir+0x213>
c000693f:	57                   	push   edi
c0006940:	51                   	push   ecx
c0006941:	52                   	push   edx
c0006942:	55                   	push   ebp
c0006943:	e8 38 9d ff ff       	call   c0000680 <strncpy>
c0006948:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c000694c:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006952:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006955:	c6 84 01 58 55 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffdaaa8],0x0
c000695d:	e8 49 fe ff ff       	call   c00067ab <fn_postprocess>
c0006962:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006966:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	29 d0                	sub    eax,edx
c000696e:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006972:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006976:	74 05                	je     c000697d <iso_readdir+0x1ab>
c0006978:	83 e8 21             	sub    eax,0x21
c000697b:	eb 04                	jmp    c0006981 <iso_readdir+0x1af>
c000697d:	47                   	inc    edi
c000697e:	83 e8 22             	sub    eax,0x22
c0006981:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006985:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000698b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000698f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006994:	7e 4f                	jle    c00069e5 <iso_readdir+0x213>
c0006996:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006999:	48                   	dec    eax
c000699a:	3c 01                	cmp    al,0x1
c000699c:	77 47                	ja     c00069e5 <iso_readdir+0x213>
c000699e:	52                   	push   edx
c000699f:	6a 02                	push   0x2
c00069a1:	68 1d 05 02 c0       	push   0xc002051d
c00069a6:	57                   	push   edi
c00069a7:	e8 34 9e ff ff       	call   c00007e0 <strncmp>
c00069ac:	83 c4 10             	add    esp,0x10
c00069af:	85 c0                	test   eax,eax
c00069b1:	75 26                	jne    c00069d9 <iso_readdir+0x207>
c00069b3:	50                   	push   eax
c00069b4:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069b8:	83 e8 05             	sub    eax,0x5
c00069bb:	50                   	push   eax
c00069bc:	8d 47 05             	lea    eax,[edi+0x5]
c00069bf:	50                   	push   eax
c00069c0:	55                   	push   ebp
c00069c1:	e8 ba 9c ff ff       	call   c0000680 <strncpy>
c00069c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00069ca:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069ce:	83 c4 10             	add    esp,0x10
c00069d1:	c6 84 08 53 55 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdaaad],0x0
c00069d9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069dd:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00069e1:	01 c7                	add    edi,eax
c00069e3:	eb aa                	jmp    c000698f <iso_readdir+0x1bd>
c00069e5:	83 c8 ff             	or     eax,0xffffffff
c00069e8:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00069ec:	89 c2                	mov    edx,eax
c00069ee:	75 0a                	jne    c00069fa <iso_readdir+0x228>
c00069f0:	8d 46 0a             	lea    eax,[esi+0xa]
c00069f3:	e8 06 f6 ff ff       	call   c0005ffe <iso_733>
c00069f8:	31 d2                	xor    edx,edx
c00069fa:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a00:	89 83 50 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaab0],eax
c0006a06:	89 93 54 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaaac],edx
c0006a0c:	81 c3 40 55 02 c0    	add    ebx,0xc0025540
c0006a12:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a15:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006a1c:	05 50 55 02 c0       	add    eax,0xc0025550
c0006a21:	83 c4 1c             	add    esp,0x1c
c0006a24:	5b                   	pop    ebx
c0006a25:	5e                   	pop    esi
c0006a26:	5f                   	pop    edi
c0006a27:	5d                   	pop    ebp
c0006a28:	c3                   	ret    

c0006a29 <iso_reset>:
c0006a29:	83 ec 18             	sub    esp,0x18
c0006a2c:	68 3a 05 02 c0       	push   0xc002053a
c0006a31:	e8 5e 34 01 00       	call   c0019e94 <iso_kprintf>
c0006a36:	e8 10 f7 ff ff       	call   c000614b <iso_break_all>
c0006a3b:	e8 09 f7 ff ff       	call   c0006149 <bclear>
c0006a40:	31 c0                	xor    eax,eax
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	c3                   	ret    

c0006a46 <init_percd>:
c0006a46:	57                   	push   edi
c0006a47:	56                   	push   esi
c0006a48:	53                   	push   ebx
c0006a49:	bb 01 00 00 00       	mov    ebx,0x1
c0006a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a52:	a2 60 50 02 c0       	mov    ds:0xc0025060,al
c0006a57:	e8 cd ff ff ff       	call   c0006a29 <iso_reset>
c0006a5c:	c7 05 b4 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb4,0x0
c0006a66:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006a6b:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a6f:	e8 8c f7 ff ff       	call   c0006200 <biread>
c0006a74:	89 c6                	mov    esi,eax
c0006a76:	85 c0                	test   eax,eax
c0006a78:	0f 88 ba 00 00 00    	js     c0006b38 <init_percd+0xf2>
c0006a7e:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c0006a85:	83 c0 04             	add    eax,0x4
c0006a88:	52                   	push   edx
c0006a89:	6a 06                	push   0x6
c0006a8b:	68 45 05 02 c0       	push   0xc0020545
c0006a90:	50                   	push   eax
c0006a91:	e8 ea 98 ff ff       	call   c0000380 <memcmp>
c0006a96:	83 c4 10             	add    esp,0x10
c0006a99:	85 c0                	test   eax,eax
c0006a9b:	74 08                	je     c0006aa5 <init_percd+0x5f>
c0006a9d:	43                   	inc    ebx
c0006a9e:	83 fb 04             	cmp    ebx,0x4
c0006aa1:	75 c3                	jne    c0006a66 <init_percd+0x20>
c0006aa3:	eb 1a                	jmp    c0006abf <init_percd+0x79>
c0006aa5:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006aac:	83 c0 5c             	add    eax,0x5c
c0006aaf:	e8 17 f5 ff ff       	call   c0005fcb <isjoliet>
c0006ab4:	a3 b4 5e 02 c0       	mov    ds:0xc0025eb4,eax
c0006ab9:	85 c0                	test   eax,eax
c0006abb:	74 e0                	je     c0006a9d <init_percd+0x57>
c0006abd:	eb 3e                	jmp    c0006afd <init_percd+0xb7>
c0006abf:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006ac6:	75 35                	jne    c0006afd <init_percd+0xb7>
c0006ac8:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006acd:	83 c0 10             	add    eax,0x10
c0006ad0:	e8 2b f7 ff ff       	call   c0006200 <biread>
c0006ad5:	89 c6                	mov    esi,eax
c0006ad7:	85 c0                	test   eax,eax
c0006ad9:	78 5f                	js     c0006b3a <init_percd+0xf4>
c0006adb:	83 cb ff             	or     ebx,0xffffffff
c0006ade:	50                   	push   eax
c0006adf:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006ae6:	6a 06                	push   0x6
c0006ae8:	83 c0 04             	add    eax,0x4
c0006aeb:	68 4c 05 02 c0       	push   0xc002054c
c0006af0:	50                   	push   eax
c0006af1:	e8 8a 98 ff ff       	call   c0000380 <memcmp>
c0006af6:	83 c4 10             	add    esp,0x10
c0006af9:	85 c0                	test   eax,eax
c0006afb:	75 3d                	jne    c0006b3a <init_percd+0xf4>
c0006afd:	8b 34 b5 80 50 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdaf80]
c0006b04:	bf 80 5e 02 c0       	mov    edi,0xc0025e80
c0006b09:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b0f:	b9 22 00 00 00       	mov    ecx,0x22
c0006b14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b16:	b8 82 5e 02 c0       	mov    eax,0xc0025e82
c0006b1b:	31 db                	xor    ebx,ebx
c0006b1d:	e8 dc f4 ff ff       	call   c0005ffe <iso_733>
c0006b22:	a3 a8 5e 02 c0       	mov    ds:0xc0025ea8,eax
c0006b27:	b8 8a 5e 02 c0       	mov    eax,0xc0025e8a
c0006b2c:	e8 cd f4 ff ff       	call   c0005ffe <iso_733>
c0006b31:	a3 a4 5e 02 c0       	mov    ds:0xc0025ea4,eax
c0006b36:	eb 02                	jmp    c0006b3a <init_percd+0xf4>
c0006b38:	89 c3                	mov    ebx,eax
c0006b3a:	89 d8                	mov    eax,ebx
c0006b3c:	5b                   	pop    ebx
c0006b3d:	5e                   	pop    esi
c0006b3e:	5f                   	pop    edi
c0006b3f:	c3                   	ret    

c0006b40 <iso_ioctl>:
c0006b40:	83 ec 18             	sub    esp,0x18
c0006b43:	68 53 05 02 c0       	push   0xc0020553
c0006b48:	e8 47 33 01 00       	call   c0019e94 <iso_kprintf>
c0006b4d:	e8 d7 fe ff ff       	call   c0006a29 <iso_reset>
c0006b52:	31 c0                	xor    eax,eax
c0006b54:	83 c4 1c             	add    esp,0x1c
c0006b57:	c3                   	ret    

c0006b58 <fs_iso9660_init>:
c0006b58:	53                   	push   ebx
c0006b59:	31 db                	xor    ebx,ebx
c0006b5b:	83 ec 14             	sub    esp,0x14
c0006b5e:	68 5e 05 02 c0       	push   0xc002055e
c0006b63:	e8 2c 33 01 00       	call   c0019e94 <iso_kprintf>
c0006b68:	83 c4 0c             	add    esp,0xc
c0006b6b:	68 40 09 00 00       	push   0x940
c0006b70:	6a 00                	push   0x0
c0006b72:	68 40 55 02 c0       	push   0xc0025540
c0006b77:	e8 74 99 ff ff       	call   c00004f0 <memset>
c0006b7c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b83:	c7 05 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0025540,0xffffffff
c0006b8d:	e8 24 0f 00 00       	call   c0007ab6 <malloc>
c0006b92:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b99:	a3 b0 5e 02 c0       	mov    ds:0xc0025eb0,eax
c0006b9e:	e8 13 0f 00 00       	call   c0007ab6 <malloc>
c0006ba3:	83 c4 10             	add    esp,0x10
c0006ba6:	a3 20 55 02 c0       	mov    ds:0xc0025520,eax
c0006bab:	83 ec 0c             	sub    esp,0xc
c0006bae:	68 04 08 00 00       	push   0x804
c0006bb3:	e8 fe 0e 00 00       	call   c0007ab6 <malloc>
c0006bb8:	89 04 9d 80 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdaf80],eax
c0006bbf:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006bc5:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bcc:	e8 e5 0e 00 00       	call   c0007ab6 <malloc>
c0006bd1:	83 c4 10             	add    esp,0x10
c0006bd4:	89 04 9d 20 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdafe0],eax
c0006bdb:	43                   	inc    ebx
c0006bdc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be2:	83 fb 10             	cmp    ebx,0x10
c0006be5:	75 c4                	jne    c0006bab <fs_iso9660_init+0x53>
c0006be7:	31 c0                	xor    eax,eax
c0006be9:	83 c4 08             	add    esp,0x8
c0006bec:	5b                   	pop    ebx
c0006bed:	c3                   	ret    

c0006bee <fs_iso9660_shutdown>:
c0006bee:	53                   	push   ebx
c0006bef:	31 db                	xor    ebx,ebx
c0006bf1:	83 ec 08             	sub    esp,0x8
c0006bf4:	83 ec 0c             	sub    esp,0xc
c0006bf7:	ff 34 9d 80 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdaf80]
c0006bfe:	e8 c3 0e 00 00       	call   c0007ac6 <free>
c0006c03:	58                   	pop    eax
c0006c04:	ff 34 9d 20 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdafe0]
c0006c0b:	43                   	inc    ebx
c0006c0c:	e8 b5 0e 00 00       	call   c0007ac6 <free>
c0006c11:	83 c4 10             	add    esp,0x10
c0006c14:	83 fb 10             	cmp    ebx,0x10
c0006c17:	75 db                	jne    c0006bf4 <fs_iso9660_shutdown+0x6>
c0006c19:	a1 b0 5e 02 c0       	mov    eax,ds:0xc0025eb0
c0006c1e:	85 c0                	test   eax,eax
c0006c20:	74 0c                	je     c0006c2e <fs_iso9660_shutdown+0x40>
c0006c22:	83 ec 0c             	sub    esp,0xc
c0006c25:	50                   	push   eax
c0006c26:	e8 9b 0e 00 00       	call   c0007ac6 <free>
c0006c2b:	83 c4 10             	add    esp,0x10
c0006c2e:	a1 20 55 02 c0       	mov    eax,ds:0xc0025520
c0006c33:	85 c0                	test   eax,eax
c0006c35:	74 0c                	je     c0006c43 <fs_iso9660_shutdown+0x55>
c0006c37:	83 ec 0c             	sub    esp,0xc
c0006c3a:	50                   	push   eax
c0006c3b:	e8 86 0e 00 00       	call   c0007ac6 <free>
c0006c40:	83 c4 10             	add    esp,0x10
c0006c43:	c7 05 20 55 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025520,0x0
c0006c4d:	c7 05 b0 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb0,0x0
c0006c57:	31 c0                	xor    eax,eax
c0006c59:	83 c4 08             	add    esp,0x8
c0006c5c:	5b                   	pop    ebx
c0006c5d:	c3                   	ret    

c0006c5e <Computer::close(int, int, void*)>:
c0006c5e:	57                   	push   edi
c0006c5f:	56                   	push   esi
c0006c60:	53                   	push   ebx
c0006c61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c6d:	e8 42 9e 00 00       	call   c0010ab4 <KeExecuteAtexit()>
c0006c72:	83 ec 0c             	sub    esp,0xc
c0006c75:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c7b:	50                   	push   eax
c0006c7c:	e8 d7 5a 00 00       	call   c000c758 <Device::closeAll()>
c0006c81:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c87:	83 c4 10             	add    esp,0x10
c0006c8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006c8c:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006c90:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006c98:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006c9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006ca0:	5b                   	pop    ebx
c0006ca1:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006ca4:	5e                   	pop    esi
c0006ca5:	5f                   	pop    edi
c0006ca6:	ff e0                	jmp    eax

c0006ca8 <Krnl::firstTask()>:
c0006ca8:	53                   	push   ebx
c0006ca9:	83 ec 14             	sub    esp,0x14
c0006cac:	fb                   	sti    
c0006cad:	68 6f 05 02 c0       	push   0xc002056f
c0006cb2:	e8 dc 9e 00 00       	call   c0010b93 <KeSetBootMessage(char const*)>
c0006cb7:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006cbe:	e8 f3 0d 00 00       	call   c0007ab6 <malloc>
c0006cc3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cca:	89 c3                	mov    ebx,eax
c0006ccc:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0006cd1:	50                   	push   eax
c0006cd2:	68 88 05 02 c0       	push   0xc0020588
c0006cd7:	6a 01                	push   0x1
c0006cd9:	53                   	push   ebx
c0006cda:	e8 d5 e9 00 00       	call   c00156b4 <Process::Process(bool, char const*, Process*, char**)>
c0006cdf:	83 c4 20             	add    esp,0x20
c0006ce2:	68 ff 00 00 00       	push   0xff
c0006ce7:	6a 00                	push   0x0
c0006ce9:	68 fd 74 00 c0       	push   0xc00074fd
c0006cee:	53                   	push   ebx
c0006cef:	e8 e4 eb 00 00       	call   c00158d8 <Process::createThread(void (*)(void*), void*, int)>
c0006cf4:	8b 15 f0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296f0
c0006cfa:	6a 7a                	push   0x7a
c0006cfc:	6a 00                	push   0x0
c0006cfe:	68 c0 63 01 c0       	push   0xc00163c0
c0006d03:	52                   	push   edx
c0006d04:	e8 cf eb 00 00       	call   c00158d8 <Process::createThread(void (*)(void*), void*, int)>
c0006d09:	83 c4 14             	add    esp,0x14
c0006d0c:	a3 a8 96 02 c0       	mov    ds:0xc00296a8,eax
c0006d11:	68 84 06 02 c0       	push   0xc0020684
c0006d16:	e8 78 9e 00 00       	call   c0010b93 <KeSetBootMessage(char const*)>
c0006d1b:	c6 05 bd 5e 02 c0 01 	mov    BYTE PTR ds:0xc0025ebd,0x1
c0006d22:	e8 fb a6 00 00       	call   c0011422 <KeInitRand()>
c0006d27:	e8 b7 fa 00 00       	call   c00167e3 <Vm::initialise8086()>
c0006d2c:	e8 07 48 00 00       	call   c000b538 <Fs::initVFS()>
c0006d31:	c7 04 24 95 05 02 c0 	mov    DWORD PTR [esp],0xc0020595
c0006d38:	e8 56 9e 00 00       	call   c0010b93 <KeSetBootMessage(char const*)>
c0006d3d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006d42:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d48:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d4a:	6a 00                	push   0x0
c0006d4c:	6a 00                	push   0x0
c0006d4e:	6a 00                	push   0x0
c0006d50:	50                   	push   eax
c0006d51:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d54:	83 c4 14             	add    esp,0x14
c0006d57:	68 84 06 02 c0       	push   0xc0020684
c0006d5c:	e8 32 9e 00 00       	call   c0010b93 <KeSetBootMessage(char const*)>
c0006d61:	e8 b0 44 00 00       	call   c000b216 <KeInitialiseSymlinks()>
c0006d66:	e8 61 a3 00 00       	call   c00110cc <KeLoadSystemEnv()>
c0006d6b:	e8 be a5 00 00       	call   c001132e <KeSetupPowerManager()>
c0006d70:	83 c4 0c             	add    esp,0xc
c0006d73:	6a 3a                	push   0x3a
c0006d75:	68 af 05 02 c0       	push   0xc00205af
c0006d7a:	68 b8 05 02 c0       	push   0xc00205b8
c0006d7f:	e8 7c cb 00 00       	call   c0013900 <Reg::readIntWithDefault(char*, char*, int)>
c0006d84:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d87:	e8 2c 53 00 00       	call   c000c0b8 <User::loadClockSettings(int)>
c0006d8c:	c7 04 24 a8 06 02 c0 	mov    DWORD PTR [esp],0xc00206a8
c0006d93:	e8 fb 9d 00 00       	call   c0010b93 <KeSetBootMessage(char const*)>
c0006d98:	59                   	pop    ecx
c0006d99:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006d9e:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006da4:	53                   	push   ebx
c0006da5:	e8 ac 59 00 00       	call   c000c756 <Device::loadDriversForAll()>
c0006daa:	c7 04 24 c0 05 02 c0 	mov    DWORD PTR [esp],0xc00205c0
c0006db1:	e8 dd 9d 00 00       	call   c0010b93 <KeSetBootMessage(char const*)>
c0006db6:	58                   	pop    eax
c0006db7:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c0006dbd:	5a                   	pop    edx
c0006dbe:	6a 01                	push   0x1
c0006dc0:	68 d1 05 02 c0       	push   0xc00205d1
c0006dc5:	e8 00 e3 00 00       	call   c00150ca <Thr::loadDLL(char const*, bool)>
c0006dca:	59                   	pop    ecx
c0006dcb:	5a                   	pop    edx
c0006dcc:	53                   	push   ebx
c0006dcd:	50                   	push   eax
c0006dce:	e8 28 e5 00 00       	call   c00152fb <Thr::executeDLL(unsigned long, void*)>
c0006dd3:	83 c4 10             	add    esp,0x10
c0006dd6:	83 ec 0c             	sub    esp,0xc
c0006dd9:	6a 02                	push   0x2
c0006ddb:	e8 5c ef 00 00       	call   c0015d3c <blockTask(TaskState)>
c0006de0:	83 c4 10             	add    esp,0x10
c0006de3:	eb f1                	jmp    c0006dd6 <Krnl::firstTask()+0x12e>
c0006de5:	90                   	nop

c0006de6 <Computer::Computer()>:
c0006de6:	83 ec 0c             	sub    esp,0xc
c0006de9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ded:	83 ec 08             	sub    esp,0x8
c0006df0:	68 ed 05 02 c0       	push   0xc00205ed
c0006df5:	50                   	push   eax
c0006df6:	e8 d7 59 00 00       	call   c000c7d2 <Device::Device(char const*)>
c0006dfb:	83 c4 10             	add    esp,0x10
c0006dfe:	ba f4 06 02 c0       	mov    edx,0xc00206f4
c0006e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e07:	89 10                	mov    DWORD PTR [eax],edx
c0006e09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e0d:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e1b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e29:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e2f:	83 ca 04             	or     edx,0x4
c0006e32:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e42:	0f b6 d0             	movzx  edx,al
c0006e45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e49:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e54:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e5a:	0f b6 d0             	movzx  edx,al
c0006e5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e61:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e70:	8d 50 01             	lea    edx,[eax+0x1]
c0006e73:	88 d1                	mov    cl,dl
c0006e75:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e79:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e7f:	0f b6 d0             	movzx  edx,al
c0006e82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e86:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006e8a:	83 e1 3f             	and    ecx,0x3f
c0006e8d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006e91:	90                   	nop
c0006e92:	83 c4 0c             	add    esp,0xc
c0006e95:	c3                   	ret    

c0006e96 <Computer::setBootMessage(char const*)>:
c0006e96:	c3                   	ret    
c0006e97:	90                   	nop

c0006e98 <Computer::detectFeatures()>:
c0006e98:	55                   	push   ebp
c0006e99:	57                   	push   edi
c0006e9a:	56                   	push   esi
c0006e9b:	53                   	push   ebx
c0006e9c:	83 ec 1c             	sub    esp,0x1c
c0006e9f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ea3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ea9:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006eaf:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006eb5:	e8 3f 93 ff ff       	call   c00001f9 <detectCPUID>
c0006eba:	31 d2                	xor    edx,edx
c0006ebc:	85 c0                	test   eax,eax
c0006ebe:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ec4:	0f 95 c2             	setne  dl
c0006ec7:	83 e0 fd             	and    eax,0xfffffffd
c0006eca:	d1 e2                	shl    edx,1
c0006ecc:	09 d0                	or     eax,edx
c0006ece:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ed4:	a8 02                	test   al,0x2
c0006ed6:	75 51                	jne    c0006f29 <Computer::detectFeatures()+0x91>
c0006ed8:	f6 05 d1 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed1,0x4
c0006edf:	74 0f                	je     c0006ef0 <Computer::detectFeatures()+0x58>
c0006ee1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ee7:	83 e0 fb             	and    eax,0xfffffffb
c0006eea:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef0:	e8 71 7f 01 00       	call   c001ee66 <x87Detect>
c0006ef5:	83 e0 01             	and    eax,0x1
c0006ef8:	c1 e0 04             	shl    eax,0x4
c0006efb:	89 c2                	mov    edx,eax
c0006efd:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f03:	83 e0 ef             	and    eax,0xffffffef
c0006f06:	09 d0                	or     eax,edx
c0006f08:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f0e:	88 c2                	mov    dl,al
c0006f10:	a8 10                	test   al,0x10
c0006f12:	0f 85 33 01 00 00    	jne    c000704b <Computer::detectFeatures()+0x1b3>
c0006f18:	80 e2 80             	and    dl,0x80
c0006f1b:	0f 85 4c 01 00 00    	jne    c000706d <Computer::detectFeatures()+0x1d5>
c0006f21:	83 c4 1c             	add    esp,0x1c
c0006f24:	5b                   	pop    ebx
c0006f25:	5e                   	pop    esi
c0006f26:	5f                   	pop    edi
c0006f27:	5d                   	pop    ebp
c0006f28:	c3                   	ret    
c0006f29:	83 ec 0c             	sub    esp,0xc
c0006f2c:	6a 20                	push   0x20
c0006f2e:	e8 99 90 00 00       	call   c000ffcc <CPU::cpuidCheckEDX(unsigned int)>
c0006f33:	83 e0 01             	and    eax,0x1
c0006f36:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f3d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f43:	83 e0 f7             	and    eax,0xfffffff7
c0006f46:	09 d0                	or     eax,edx
c0006f48:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f4e:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f55:	e8 72 90 00 00       	call   c000ffcc <CPU::cpuidCheckEDX(unsigned int)>
c0006f5a:	89 c2                	mov    edx,eax
c0006f5c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f62:	83 e2 01             	and    edx,0x1
c0006f65:	83 e0 fe             	and    eax,0xfffffffe
c0006f68:	09 d0                	or     eax,edx
c0006f6a:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f70:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f77:	e8 50 90 00 00       	call   c000ffcc <CPU::cpuidCheckEDX(unsigned int)>
c0006f7c:	89 c2                	mov    edx,eax
c0006f7e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f84:	c1 e2 07             	shl    edx,0x7
c0006f87:	83 e0 7f             	and    eax,0x7f
c0006f8a:	09 d0                	or     eax,edx
c0006f8c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f92:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006f99:	e8 2e 90 00 00       	call   c000ffcc <CPU::cpuidCheckEDX(unsigned int)>
c0006f9e:	83 c4 10             	add    esp,0x10
c0006fa1:	83 e0 01             	and    eax,0x1
c0006fa4:	c1 e0 05             	shl    eax,0x5
c0006fa7:	89 c2                	mov    edx,eax
c0006fa9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006faf:	83 e0 df             	and    eax,0xffffffdf
c0006fb2:	09 d0                	or     eax,edx
c0006fb4:	f7 05 d0 5e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0025ed0,0x401
c0006fbe:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fc4:	0f 84 c9 00 00 00    	je     c0007093 <Computer::detectFeatures()+0x1fb>
c0006fca:	83 e0 fe             	and    eax,0xfffffffe
c0006fcd:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fd3:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd9:	89 c2                	mov    edx,eax
c0006fdb:	83 e2 09             	and    edx,0x9
c0006fde:	83 fa 01             	cmp    edx,0x1
c0006fe1:	75 09                	jne    c0006fec <Computer::detectFeatures()+0x154>
c0006fe3:	83 e0 fe             	and    eax,0xfffffffe
c0006fe6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fec:	83 ec 0c             	sub    esp,0xc
c0006fef:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006ff3:	50                   	push   eax
c0006ff4:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006ff8:	55                   	push   ebp
c0006ff9:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006ffd:	57                   	push   edi
c0006ffe:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007002:	56                   	push   esi
c0007003:	68 00 00 00 80       	push   0x80000000
c0007008:	e8 3b 8f 00 00       	call   c000ff48 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000700d:	83 c4 20             	add    esp,0x20
c0007010:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007017:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000701b:	0f 86 b7 fe ff ff    	jbe    c0006ed8 <Computer::detectFeatures()+0x40>
c0007021:	83 ec 0c             	sub    esp,0xc
c0007024:	50                   	push   eax
c0007025:	55                   	push   ebp
c0007026:	57                   	push   edi
c0007027:	56                   	push   esi
c0007028:	68 01 00 00 80       	push   0x80000001
c000702d:	e8 16 8f 00 00       	call   c000ff48 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007032:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0007038:	83 c4 20             	add    esp,0x20
c000703b:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007040:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007046:	e9 8d fe ff ff       	jmp    c0006ed8 <Computer::detectFeatures()+0x40>
c000704b:	e8 d0 7d 01 00       	call   c001ee20 <absolutelyNoChanceInHell>
c0007050:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007056:	c1 e0 07             	shl    eax,0x7
c0007059:	83 e2 7f             	and    edx,0x7f
c000705c:	09 c2                	or     edx,eax
c000705e:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007064:	80 e2 80             	and    dl,0x80
c0007067:	0f 84 b4 fe ff ff    	je     c0006f21 <Computer::detectFeatures()+0x89>
c000706d:	e8 1e 7a 01 00       	call   c001ea90 <avxDetect>
c0007072:	83 e0 01             	and    eax,0x1
c0007075:	c1 e0 05             	shl    eax,0x5
c0007078:	89 c2                	mov    edx,eax
c000707a:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007080:	83 e0 df             	and    eax,0xffffffdf
c0007083:	09 d0                	or     eax,edx
c0007085:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c000708b:	83 c4 1c             	add    esp,0x1c
c000708e:	5b                   	pop    ebx
c000708f:	5e                   	pop    esi
c0007090:	5f                   	pop    edi
c0007091:	5d                   	pop    ebp
c0007092:	c3                   	ret    
c0007093:	83 ec 0c             	sub    esp,0xc
c0007096:	68 00 02 00 00       	push   0x200
c000709b:	e8 2c 8f 00 00       	call   c000ffcc <CPU::cpuidCheckEDX(unsigned int)>
c00070a0:	83 c4 10             	add    esp,0x10
c00070a3:	89 c2                	mov    edx,eax
c00070a5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070ab:	83 e2 01             	and    edx,0x1
c00070ae:	83 e0 fe             	and    eax,0xfffffffe
c00070b1:	09 d0                	or     eax,edx
c00070b3:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070b9:	e9 15 ff ff ff       	jmp    c0006fd3 <Computer::detectFeatures()+0x13b>

c00070be <Computer::displayFeatures()>:
c00070be:	c3                   	ret    
c00070bf:	90                   	nop

c00070c0 <Computer::rdmsr(unsigned int)>:
c00070c0:	83 ec 0c             	sub    esp,0xc
c00070c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070c7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070ce:	74 0a                	je     c00070da <Computer::rdmsr(unsigned int)+0x1a>
c00070d0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070d4:	0f 32                	rdmsr  
c00070d6:	83 c4 0c             	add    esp,0xc
c00070d9:	c3                   	ret    
c00070da:	83 ec 0c             	sub    esp,0xc
c00070dd:	68 f6 05 02 c0       	push   0xc00205f6
c00070e2:	e8 82 a1 00 00       	call   c0011269 <KePanic(char const*)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	eb e4                	jmp    c00070d0 <Computer::rdmsr(unsigned int)+0x10>

c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>:
c00070ec:	57                   	push   edi
c00070ed:	56                   	push   esi
c00070ee:	83 ec 04             	sub    esp,0x4
c00070f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070f5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00070f9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00070fd:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007104:	74 10                	je     c0007116 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007106:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000710a:	89 f0                	mov    eax,esi
c000710c:	89 fa                	mov    edx,edi
c000710e:	0f 30                	wrmsr  
c0007110:	83 c4 04             	add    esp,0x4
c0007113:	5e                   	pop    esi
c0007114:	5f                   	pop    edi
c0007115:	c3                   	ret    
c0007116:	83 ec 0c             	sub    esp,0xc
c0007119:	68 fc 05 02 c0       	push   0xc00205fc
c000711e:	e8 46 a1 00 00       	call   c0011269 <KePanic(char const*)>
c0007123:	83 c4 10             	add    esp,0x10
c0007126:	eb de                	jmp    c0007106 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0007128 <Computer::shutdown()>:
c0007128:	83 ec 0c             	sub    esp,0xc
c000712b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000712f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007131:	6a 00                	push   0x0
c0007133:	6a 00                	push   0x0
c0007135:	6a 00                	push   0x0
c0007137:	50                   	push   eax
c0007138:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000713b:	83 c4 1c             	add    esp,0x1c
c000713e:	c3                   	ret    
c000713f:	90                   	nop

c0007140 <Computer::restart()>:
c0007140:	83 ec 0c             	sub    esp,0xc
c0007143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007147:	8b 10                	mov    edx,DWORD PTR [eax]
c0007149:	6a 00                	push   0x0
c000714b:	6a 00                	push   0x0
c000714d:	6a 01                	push   0x1
c000714f:	50                   	push   eax
c0007150:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007153:	83 c4 1c             	add    esp,0x1c
c0007156:	c3                   	ret    
c0007157:	90                   	nop

c0007158 <Computer::sleep()>:
c0007158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000715c:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007162:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007166:	e9 79 88 00 00       	jmp    c000f9e4 <ACPI::sleep()>
c000716b:	90                   	nop

c000716c <Computer::nmiEnabled()>:
c000716c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007170:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007176:	c3                   	ret    
c0007177:	90                   	nop

c0007178 <Computer::readCMOS(unsigned char)>:
c0007178:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000717c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007180:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c0007187:	75 09                	jne    c0007192 <Computer::readCMOS(unsigned char)+0x1a>
c0007189:	b2 80                	mov    dl,0x80
c000718b:	09 d0                	or     eax,edx
c000718d:	e6 70                	out    0x70,al
c000718f:	e4 71                	in     al,0x71
c0007191:	c3                   	ret    
c0007192:	31 d2                	xor    edx,edx
c0007194:	eb f5                	jmp    c000718b <Computer::readCMOS(unsigned char)+0x13>

c0007196 <Computer::enableNMI(bool)>:
c0007196:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000719a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000719e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071a4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071ac:	eb ca                	jmp    c0007178 <Computer::readCMOS(unsigned char)>

c00071ae <Computer::open(int, int, void*)>:
c00071ae:	56                   	push   esi
c00071af:	53                   	push   ebx
c00071b0:	83 ec 10             	sub    esp,0x10
c00071b3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071b7:	f6 05 d0 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed0,0x4
c00071be:	68 02 06 02 c0       	push   0xc0020602
c00071c3:	0f 94 05 80 2f 02 c0 	sete   BYTE PTR ds:0xc0022f80
c00071ca:	e8 c4 99 00 00       	call   c0010b93 <KeSetBootMessage(char const*)>
c00071cf:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071d6:	e8 db 08 00 00       	call   c0007ab6 <malloc>
c00071db:	89 04 24             	mov    DWORD PTR [esp],eax
c00071de:	89 c6                	mov    esi,eax
c00071e0:	e8 73 83 00 00       	call   c000f558 <ACPI::ACPI()>
c00071e5:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00071eb:	58                   	pop    eax
c00071ec:	5a                   	pop    edx
c00071ed:	56                   	push   esi
c00071ee:	53                   	push   ebx
c00071ef:	e8 46 54 00 00       	call   c000c63a <Device::addChild(Device*)>
c00071f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00071f7:	e8 9c fc ff ff       	call   c0006e98 <Computer::detectFeatures()>
c00071fc:	59                   	pop    ecx
c00071fd:	5e                   	pop    esi
c00071fe:	6a 01                	push   0x1
c0007200:	53                   	push   ebx
c0007201:	e8 90 ff ff ff       	call   c0007196 <Computer::enableNMI(bool)>
c0007206:	c7 04 24 1a 06 02 c0 	mov    DWORD PTR [esp],0xc002061a
c000720d:	e8 81 99 00 00       	call   c0010b93 <KeSetBootMessage(char const*)>
c0007212:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007219:	e8 98 08 00 00       	call   c0007ab6 <malloc>
c000721e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007221:	89 c6                	mov    esi,eax
c0007223:	e8 5c 8e 00 00       	call   c0010084 <CPU::CPU()>
c0007228:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000722e:	58                   	pop    eax
c000722f:	5a                   	pop    edx
c0007230:	56                   	push   esi
c0007231:	53                   	push   ebx
c0007232:	e8 03 54 00 00       	call   c000c63a <Device::addChild(Device*)>
c0007237:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000723d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007241:	8b 10                	mov    edx,DWORD PTR [eax]
c0007243:	51                   	push   ecx
c0007244:	6a 00                	push   0x0
c0007246:	6a 00                	push   0x0
c0007248:	50                   	push   eax
c0007249:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000724c:	83 c4 14             	add    esp,0x14
c000724f:	68 c8 06 02 c0       	push   0xc00206c8
c0007254:	e8 3a 99 00 00       	call   c0010b93 <KeSetBootMessage(char const*)>
c0007259:	e8 c2 07 01 00       	call   c0017a20 <HalInitialiseCoprocessor()>
c000725e:	c7 04 24 34 06 02 c0 	mov    DWORD PTR [esp],0xc0020634
c0007265:	e8 29 99 00 00       	call   c0010b93 <KeSetBootMessage(char const*)>
c000726a:	c7 04 24 a8 6c 00 c0 	mov    DWORD PTR [esp],0xc0006ca8
c0007271:	e8 8e e7 00 00       	call   c0015a04 <setupMultitasking(void (*)())>
c0007276:	83 c4 14             	add    esp,0x14
c0007279:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000727e:	5b                   	pop    ebx
c000727f:	5e                   	pop    esi
c0007280:	c3                   	ret    
c0007281:	90                   	nop

c0007282 <Computer::disableNMI()>:
c0007282:	6a 00                	push   0x0
c0007284:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007288:	50                   	push   eax
c0007289:	e8 08 ff ff ff       	call   c0007196 <Computer::enableNMI(bool)>
c000728e:	5a                   	pop    edx
c000728f:	59                   	pop    ecx
c0007290:	c3                   	ret    
c0007291:	90                   	nop

c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007292:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007296:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000729a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000729e:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00072a5:	75 0b                	jne    c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c00072a7:	b1 80                	mov    cl,0x80
c00072a9:	09 c8                	or     eax,ecx
c00072ab:	e6 70                	out    0x70,al
c00072ad:	88 d0                	mov    al,dl
c00072af:	e6 71                	out    0x71,al
c00072b1:	c3                   	ret    
c00072b2:	31 c9                	xor    ecx,ecx
c00072b4:	eb f3                	jmp    c00072a9 <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c00072b6 <Computer::handleNMI()>:
c00072b6:	56                   	push   esi
c00072b7:	53                   	push   ebx
c00072b8:	83 ec 10             	sub    esp,0x10
c00072bb:	e4 92                	in     al,0x92
c00072bd:	89 c6                	mov    esi,eax
c00072bf:	e4 61                	in     al,0x61
c00072c1:	68 4f 06 02 c0       	push   0xc002064f
c00072c6:	88 c3                	mov    bl,al
c00072c8:	e8 78 36 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00072cd:	83 c4 10             	add    esp,0x10
c00072d0:	83 e6 10             	and    esi,0x10
c00072d3:	75 10                	jne    c00072e5 <Computer::handleNMI()+0x2f>
c00072d5:	f6 c3 40             	test   bl,0x40
c00072d8:	75 20                	jne    c00072fa <Computer::handleNMI()+0x44>
c00072da:	80 e3 80             	and    bl,0x80
c00072dd:	75 30                	jne    c000730f <Computer::handleNMI()+0x59>
c00072df:	83 c4 04             	add    esp,0x4
c00072e2:	5b                   	pop    ebx
c00072e3:	5e                   	pop    esi
c00072e4:	c3                   	ret    
c00072e5:	83 ec 0c             	sub    esp,0xc
c00072e8:	68 60 06 02 c0       	push   0xc0020660
c00072ed:	e8 77 9f 00 00       	call   c0011269 <KePanic(char const*)>
c00072f2:	83 c4 10             	add    esp,0x10
c00072f5:	f6 c3 40             	test   bl,0x40
c00072f8:	74 e0                	je     c00072da <Computer::handleNMI()+0x24>
c00072fa:	83 ec 0c             	sub    esp,0xc
c00072fd:	68 6d 06 02 c0       	push   0xc002066d
c0007302:	e8 62 9f 00 00       	call   c0011269 <KePanic(char const*)>
c0007307:	83 c4 10             	add    esp,0x10
c000730a:	80 e3 80             	and    bl,0x80
c000730d:	74 d0                	je     c00072df <Computer::handleNMI()+0x29>
c000730f:	c7 44 24 10 77 06 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020677
c0007317:	83 c4 04             	add    esp,0x4
c000731a:	5b                   	pop    ebx
c000731b:	5e                   	pop    esi
c000731c:	e9 48 9f 00 00       	jmp    c0011269 <KePanic(char const*)>
c0007321:	90                   	nop

c0007322 <GDTEntry::setBase(unsigned int)>:
c0007322:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007326:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000732a:	89 c1                	mov    ecx,eax
c000732c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007330:	c1 e9 10             	shr    ecx,0x10
c0007333:	c1 e8 18             	shr    eax,0x18
c0007336:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007339:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000733c:	c3                   	ret    
c000733d:	90                   	nop

c000733e <GDTEntry::setLimit(unsigned int)>:
c000733e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007342:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007346:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007349:	66 89 01             	mov    WORD PTR [ecx],ax
c000734c:	83 e2 f0             	and    edx,0xfffffff0
c000734f:	c1 e8 10             	shr    eax,0x10
c0007352:	83 e0 0f             	and    eax,0xf
c0007355:	09 d0                	or     eax,edx
c0007357:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000735a:	c3                   	ret    
c000735b:	90                   	nop

c000735c <GDT::GDT()>:
c000735c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007360:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007366:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000736a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007370:	90                   	nop
c0007371:	c3                   	ret    

c0007372 <GDT::addEntry(GDTEntry)>:
c0007372:	53                   	push   ebx
c0007373:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007377:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000737b:	8b 02                	mov    eax,DWORD PTR [edx]
c000737d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007381:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0007385:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007389:	8d 48 01             	lea    ecx,[eax+0x1]
c000738c:	c1 e0 03             	shl    eax,0x3
c000738f:	89 0a                	mov    DWORD PTR [edx],ecx
c0007391:	5b                   	pop    ebx
c0007392:	c3                   	ret    
c0007393:	90                   	nop

c0007394 <GDT::getNumberOfEntries()>:
c0007394:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007398:	8b 00                	mov    eax,DWORD PTR [eax]
c000739a:	c3                   	ret    
c000739b:	90                   	nop

c000739c <GDT::flush()>:
c000739c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073a2:	83 c0 04             	add    eax,0x4
c00073a5:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073ac:	a3 c2 5e 02 c0       	mov    ds:0xc0025ec2,eax
c00073b1:	66 89 15 c0 5e 02 c0 	mov    WORD PTR ds:0xc0025ec0,dx
c00073b8:	e9 9d 8f ff ff       	jmp    c000035a <loadGDT>
c00073bd:	90                   	nop

c00073be <GDT::setup()>:
c00073be:	57                   	push   edi
c00073bf:	56                   	push   esi
c00073c0:	53                   	push   ebx
c00073c1:	83 ec 30             	sub    esp,0x30
c00073c4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073c8:	6a 00                	push   0x0
c00073ca:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073ce:	56                   	push   esi
c00073cf:	e8 4e ff ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c00073d4:	6a 00                	push   0x0
c00073d6:	56                   	push   esi
c00073d7:	e8 62 ff ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c00073dc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00073e4:	6a 00                	push   0x0
c00073e6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00073ea:	56                   	push   esi
c00073eb:	e8 32 ff ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c00073f0:	68 ff ff ff 00       	push   0xffffff
c00073f5:	56                   	push   esi
c00073f6:	e8 43 ff ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c00073fb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00073ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007403:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007407:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000740b:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007410:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007415:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007419:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000741d:	89 f8                	mov    eax,edi
c000741f:	89 fa                	mov    edx,edi
c0007421:	80 e4 f7             	and    ah,0xf7
c0007424:	80 ce 60             	or     dh,0x60
c0007427:	89 c7                	mov    edi,eax
c0007429:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000742d:	80 cc 60             	or     ah,0x60
c0007430:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007434:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007438:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000743c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007440:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007444:	83 c4 20             	add    esp,0x20
c0007447:	6a 00                	push   0x0
c0007449:	8d 44 24 24          	lea    eax,[esp+0x24]
c000744d:	50                   	push   eax
c000744e:	e8 cf fe ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c0007453:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007457:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000745b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000745f:	83 e0 3f             	and    eax,0x3f
c0007462:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007466:	6a 00                	push   0x0
c0007468:	8d 44 24 34          	lea    eax,[esp+0x34]
c000746c:	50                   	push   eax
c000746d:	e8 b0 fe ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c0007472:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007476:	83 e0 3f             	and    eax,0x3f
c0007479:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000747d:	83 c4 0c             	add    esp,0xc
c0007480:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007484:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007488:	53                   	push   ebx
c0007489:	e8 e4 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c000748e:	83 c4 0c             	add    esp,0xc
c0007491:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007495:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007499:	53                   	push   ebx
c000749a:	e8 d3 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c000749f:	83 c4 0c             	add    esp,0xc
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	e8 c8 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074aa:	83 c4 0c             	add    esp,0xc
c00074ad:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b5:	53                   	push   ebx
c00074b6:	e8 b7 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074bb:	83 c4 0c             	add    esp,0xc
c00074be:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c6:	53                   	push   ebx
c00074c7:	e8 a6 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074cc:	83 c4 0c             	add    esp,0xc
c00074cf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d7:	53                   	push   ebx
c00074d8:	e8 95 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074dd:	83 c4 0c             	add    esp,0xc
c00074e0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e8:	53                   	push   ebx
c00074e9:	e8 84 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00074f1:	e8 a6 fe ff ff       	call   c000739c <GDT::flush()>
c00074f6:	83 c4 40             	add    esp,0x40
c00074f9:	5b                   	pop    ebx
c00074fa:	5e                   	pop    esi
c00074fb:	5f                   	pop    edi
c00074fc:	c3                   	ret    

c00074fd <idleFunction(void*)>:
c00074fd:	83 ec 0c             	sub    esp,0xc
c0007500:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007505:	48                   	dec    eax
c0007506:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000750b:	75 01                	jne    c000750e <idleFunction(void*)+0x11>
c000750d:	fb                   	sti    
c000750e:	e8 d9 01 01 00       	call   c00176ec <HalSystemIdle()>
c0007513:	e8 0a 7f 01 00       	call   c001f422 <idleCommon()>
c0007518:	eb f4                	jmp    c000750e <idleFunction(void*)+0x11>
c000751a:	66 90                	xchg   ax,ax

c000751c <IDTEntry::IDTEntry(bool)>:
c000751c:	53                   	push   ebx
c000751d:	83 ec 04             	sub    esp,0x4
c0007520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007524:	88 04 24             	mov    BYTE PTR [esp],al
c0007527:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000752b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007531:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007535:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007539:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000753d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007540:	83 e2 f0             	and    edx,0xfffffff0
c0007543:	83 ca 0e             	or     edx,0xe
c0007546:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007549:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007550:	83 e2 ef             	and    edx,0xffffffef
c0007553:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007556:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000755a:	85 c0                	test   eax,eax
c000755c:	74 06                	je     c0007564 <IDTEntry::IDTEntry(bool)+0x48>
c000755e:	b2 03                	mov    dl,0x3
c0007560:	eb 06                	jmp    c0007568 <IDTEntry::IDTEntry(bool)+0x4c>
c0007562:	66 90                	xchg   ax,ax
c0007564:	b2 00                	mov    dl,0x0
c0007566:	66 90                	xchg   ax,ax
c0007568:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756c:	83 e2 03             	and    edx,0x3
c000756f:	89 d3                	mov    ebx,edx
c0007571:	c1 e3 05             	shl    ebx,0x5
c0007574:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007577:	83 e2 9f             	and    edx,0xffffff9f
c000757a:	88 d1                	mov    cl,dl
c000757c:	88 da                	mov    dl,bl
c000757e:	09 ca                	or     edx,ecx
c0007580:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007583:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007587:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000758a:	83 ca 80             	or     edx,0xffffff80
c000758d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007590:	90                   	nop
c0007591:	83 c4 04             	add    esp,0x4
c0007594:	5b                   	pop    ebx
c0007595:	c3                   	ret    

c0007596 <IDTEntry::setOffset(unsigned int)>:
c0007596:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000759a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000759e:	66 89 02             	mov    WORD PTR [edx],ax
c00075a1:	c1 e8 10             	shr    eax,0x10
c00075a4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075a8:	c3                   	ret    
c00075a9:	90                   	nop
c00075aa:	66 90                	xchg   ax,ax

c00075ac <IDT::IDT()>:
c00075ac:	90                   	nop
c00075ad:	c3                   	ret    

c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075b2:	83 c0 30             	add    eax,0x30
c00075b5:	c3                   	ret    

c00075b6 <IDT::addEntry(IDTEntry, int)>:
c00075b6:	53                   	push   ebx
c00075b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075c7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ca:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075ce:	5b                   	pop    ebx
c00075cf:	c3                   	ret    

c00075d0 <IDT::addEntry(int, void (*)(), bool)>:
c00075d0:	53                   	push   ebx
c00075d1:	83 ec 10             	sub    esp,0x10
c00075d4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075d9:	50                   	push   eax
c00075da:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075de:	53                   	push   ebx
c00075df:	e8 38 ff ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c00075e4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075e8:	53                   	push   ebx
c00075e9:	e8 a8 ff ff ff       	call   c0007596 <IDTEntry::setOffset(unsigned int)>
c00075ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00075f2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00075fe:	e8 b3 ff ff ff       	call   c00075b6 <IDT::addEntry(IDTEntry, int)>
c0007603:	83 c4 30             	add    esp,0x30
c0007606:	5b                   	pop    ebx
c0007607:	c3                   	ret    

c0007608 <IDT::flush()>:
c0007608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000760c:	66 c7 05 c8 5e 02 c0 ff 07 	mov    WORD PTR ds:0xc0025ec8,0x7ff
c0007615:	a3 ca 5e 02 c0       	mov    ds:0xc0025eca,eax
c000761a:	0f 01 1d c8 5e 02 c0 	lidtd  ds:0xc0025ec8
c0007621:	c3                   	ret    

c0007622 <IDT::setup()>:
c0007622:	57                   	push   edi
c0007623:	56                   	push   esi
c0007624:	53                   	push   ebx
c0007625:	83 ec 10             	sub    esp,0x10
c0007628:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000762c:	6a 00                	push   0x0
c000762e:	68 20 eb 01 c0       	push   0xc001eb20
c0007633:	6a 00                	push   0x0
c0007635:	53                   	push   ebx
c0007636:	e8 95 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000763b:	6a 00                	push   0x0
c000763d:	68 30 eb 01 c0       	push   0xc001eb30
c0007642:	6a 01                	push   0x1
c0007644:	53                   	push   ebx
c0007645:	e8 86 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000764a:	83 c4 20             	add    esp,0x20
c000764d:	6a 00                	push   0x0
c000764f:	68 3a eb 01 c0       	push   0xc001eb3a
c0007654:	6a 02                	push   0x2
c0007656:	53                   	push   ebx
c0007657:	e8 74 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000765c:	6a 00                	push   0x0
c000765e:	68 44 eb 01 c0       	push   0xc001eb44
c0007663:	6a 03                	push   0x3
c0007665:	53                   	push   ebx
c0007666:	e8 65 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000766b:	83 c4 20             	add    esp,0x20
c000766e:	6a 00                	push   0x0
c0007670:	68 4e eb 01 c0       	push   0xc001eb4e
c0007675:	6a 04                	push   0x4
c0007677:	53                   	push   ebx
c0007678:	e8 53 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000767d:	6a 00                	push   0x0
c000767f:	68 58 eb 01 c0       	push   0xc001eb58
c0007684:	6a 05                	push   0x5
c0007686:	53                   	push   ebx
c0007687:	e8 44 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000768c:	83 c4 20             	add    esp,0x20
c000768f:	6a 00                	push   0x0
c0007691:	68 62 eb 01 c0       	push   0xc001eb62
c0007696:	6a 06                	push   0x6
c0007698:	53                   	push   ebx
c0007699:	e8 32 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000769e:	6a 00                	push   0x0
c00076a0:	68 6c eb 01 c0       	push   0xc001eb6c
c00076a5:	6a 07                	push   0x7
c00076a7:	53                   	push   ebx
c00076a8:	e8 23 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ad:	83 c4 20             	add    esp,0x20
c00076b0:	6a 00                	push   0x0
c00076b2:	68 76 eb 01 c0       	push   0xc001eb76
c00076b7:	6a 08                	push   0x8
c00076b9:	53                   	push   ebx
c00076ba:	e8 11 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076bf:	6a 00                	push   0x0
c00076c1:	68 7e eb 01 c0       	push   0xc001eb7e
c00076c6:	6a 09                	push   0x9
c00076c8:	53                   	push   ebx
c00076c9:	e8 02 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ce:	83 c4 20             	add    esp,0x20
c00076d1:	6a 00                	push   0x0
c00076d3:	68 88 eb 01 c0       	push   0xc001eb88
c00076d8:	6a 0a                	push   0xa
c00076da:	53                   	push   ebx
c00076db:	e8 f0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076e0:	6a 00                	push   0x0
c00076e2:	68 90 eb 01 c0       	push   0xc001eb90
c00076e7:	6a 0b                	push   0xb
c00076e9:	53                   	push   ebx
c00076ea:	e8 e1 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ef:	83 c4 20             	add    esp,0x20
c00076f2:	6a 00                	push   0x0
c00076f4:	68 98 eb 01 c0       	push   0xc001eb98
c00076f9:	6a 0c                	push   0xc
c00076fb:	53                   	push   ebx
c00076fc:	e8 cf fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007701:	6a 00                	push   0x0
c0007703:	68 a0 eb 01 c0       	push   0xc001eba0
c0007708:	6a 0d                	push   0xd
c000770a:	53                   	push   ebx
c000770b:	e8 c0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007710:	83 c4 20             	add    esp,0x20
c0007713:	6a 00                	push   0x0
c0007715:	68 ba eb 01 c0       	push   0xc001ebba
c000771a:	6a 0e                	push   0xe
c000771c:	53                   	push   ebx
c000771d:	e8 ae fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007722:	6a 00                	push   0x0
c0007724:	68 c2 eb 01 c0       	push   0xc001ebc2
c0007729:	6a 0f                	push   0xf
c000772b:	53                   	push   ebx
c000772c:	e8 9f fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007731:	83 c4 20             	add    esp,0x20
c0007734:	6a 00                	push   0x0
c0007736:	68 cc eb 01 c0       	push   0xc001ebcc
c000773b:	6a 10                	push   0x10
c000773d:	53                   	push   ebx
c000773e:	e8 8d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007743:	6a 00                	push   0x0
c0007745:	68 d6 eb 01 c0       	push   0xc001ebd6
c000774a:	6a 11                	push   0x11
c000774c:	53                   	push   ebx
c000774d:	e8 7e fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007752:	83 c4 20             	add    esp,0x20
c0007755:	6a 00                	push   0x0
c0007757:	68 e0 eb 01 c0       	push   0xc001ebe0
c000775c:	6a 12                	push   0x12
c000775e:	53                   	push   ebx
c000775f:	e8 6c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007764:	6a 01                	push   0x1
c0007766:	68 7a ec 01 c0       	push   0xc001ec7a
c000776b:	6a 60                	push   0x60
c000776d:	53                   	push   ebx
c000776e:	e8 5d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007773:	83 c4 20             	add    esp,0x20
c0007776:	6a 00                	push   0x0
c0007778:	68 81 ec 01 c0       	push   0xc001ec81
c000777d:	6a 20                	push   0x20
c000777f:	53                   	push   ebx
c0007780:	e8 4b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007785:	6a 00                	push   0x0
c0007787:	68 6c ec 01 c0       	push   0xc001ec6c
c000778c:	6a 21                	push   0x21
c000778e:	53                   	push   ebx
c000778f:	e8 3c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007794:	83 c4 20             	add    esp,0x20
c0007797:	6a 00                	push   0x0
c0007799:	68 73 ec 01 c0       	push   0xc001ec73
c000779e:	6a 22                	push   0x22
c00077a0:	53                   	push   ebx
c00077a1:	e8 2a fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077a6:	6a 00                	push   0x0
c00077a8:	68 ea eb 01 c0       	push   0xc001ebea
c00077ad:	6a 23                	push   0x23
c00077af:	53                   	push   ebx
c00077b0:	e8 1b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077b5:	83 c4 20             	add    esp,0x20
c00077b8:	6a 00                	push   0x0
c00077ba:	68 f4 eb 01 c0       	push   0xc001ebf4
c00077bf:	6a 24                	push   0x24
c00077c1:	53                   	push   ebx
c00077c2:	e8 09 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077c7:	6a 00                	push   0x0
c00077c9:	68 fe eb 01 c0       	push   0xc001ebfe
c00077ce:	6a 25                	push   0x25
c00077d0:	53                   	push   ebx
c00077d1:	e8 fa fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077d6:	83 c4 20             	add    esp,0x20
c00077d9:	6a 00                	push   0x0
c00077db:	68 08 ec 01 c0       	push   0xc001ec08
c00077e0:	6a 26                	push   0x26
c00077e2:	53                   	push   ebx
c00077e3:	e8 e8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077e8:	6a 00                	push   0x0
c00077ea:	68 12 ec 01 c0       	push   0xc001ec12
c00077ef:	6a 27                	push   0x27
c00077f1:	53                   	push   ebx
c00077f2:	e8 d9 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077f7:	83 c4 20             	add    esp,0x20
c00077fa:	6a 00                	push   0x0
c00077fc:	68 1c ec 01 c0       	push   0xc001ec1c
c0007801:	6a 28                	push   0x28
c0007803:	53                   	push   ebx
c0007804:	e8 c7 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007809:	6a 00                	push   0x0
c000780b:	68 26 ec 01 c0       	push   0xc001ec26
c0007810:	6a 29                	push   0x29
c0007812:	53                   	push   ebx
c0007813:	e8 b8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007818:	83 c4 20             	add    esp,0x20
c000781b:	6a 00                	push   0x0
c000781d:	68 30 ec 01 c0       	push   0xc001ec30
c0007822:	6a 2a                	push   0x2a
c0007824:	53                   	push   ebx
c0007825:	e8 a6 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000782a:	6a 00                	push   0x0
c000782c:	68 3a ec 01 c0       	push   0xc001ec3a
c0007831:	6a 2b                	push   0x2b
c0007833:	53                   	push   ebx
c0007834:	e8 97 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007839:	83 c4 20             	add    esp,0x20
c000783c:	6a 00                	push   0x0
c000783e:	68 44 ec 01 c0       	push   0xc001ec44
c0007843:	6a 2c                	push   0x2c
c0007845:	53                   	push   ebx
c0007846:	e8 85 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000784b:	6a 00                	push   0x0
c000784d:	68 4e ec 01 c0       	push   0xc001ec4e
c0007852:	6a 2d                	push   0x2d
c0007854:	53                   	push   ebx
c0007855:	e8 76 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000785a:	83 c4 20             	add    esp,0x20
c000785d:	6a 00                	push   0x0
c000785f:	68 58 ec 01 c0       	push   0xc001ec58
c0007864:	6a 2e                	push   0x2e
c0007866:	53                   	push   ebx
c0007867:	e8 64 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000786c:	6a 00                	push   0x0
c000786e:	68 62 ec 01 c0       	push   0xc001ec62
c0007873:	6a 2f                	push   0x2f
c0007875:	53                   	push   ebx
c0007876:	e8 55 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000787b:	83 c4 20             	add    esp,0x20
c000787e:	6a 00                	push   0x0
c0007880:	68 bc ed 01 c0       	push   0xc001edbc
c0007885:	6a 30                	push   0x30
c0007887:	53                   	push   ebx
c0007888:	e8 43 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000788d:	6a 00                	push   0x0
c000788f:	68 c6 ed 01 c0       	push   0xc001edc6
c0007894:	6a 31                	push   0x31
c0007896:	53                   	push   ebx
c0007897:	e8 34 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000789c:	83 c4 20             	add    esp,0x20
c000789f:	6a 00                	push   0x0
c00078a1:	68 d0 ed 01 c0       	push   0xc001edd0
c00078a6:	6a 32                	push   0x32
c00078a8:	53                   	push   ebx
c00078a9:	e8 22 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ae:	6a 00                	push   0x0
c00078b0:	68 da ed 01 c0       	push   0xc001edda
c00078b5:	6a 33                	push   0x33
c00078b7:	53                   	push   ebx
c00078b8:	e8 13 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078bd:	83 c4 20             	add    esp,0x20
c00078c0:	6a 00                	push   0x0
c00078c2:	68 e4 ed 01 c0       	push   0xc001ede4
c00078c7:	6a 34                	push   0x34
c00078c9:	53                   	push   ebx
c00078ca:	e8 01 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078cf:	6a 00                	push   0x0
c00078d1:	68 ee ed 01 c0       	push   0xc001edee
c00078d6:	6a 35                	push   0x35
c00078d8:	53                   	push   ebx
c00078d9:	e8 f2 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078de:	83 c4 20             	add    esp,0x20
c00078e1:	6a 00                	push   0x0
c00078e3:	68 f8 ed 01 c0       	push   0xc001edf8
c00078e8:	6a 36                	push   0x36
c00078ea:	53                   	push   ebx
c00078eb:	e8 e0 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078f0:	6a 00                	push   0x0
c00078f2:	68 02 ee 01 c0       	push   0xc001ee02
c00078f7:	6a 37                	push   0x37
c00078f9:	53                   	push   ebx
c00078fa:	e8 d1 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ff:	83 c4 1c             	add    esp,0x1c
c0007902:	6a 03                	push   0x3
c0007904:	6a 02                	push   0x2
c0007906:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c000790c:	e8 13 25 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007911:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007918:	89 c6                	mov    esi,eax
c000791a:	e8 97 01 00 00       	call   c0007ab6 <malloc>
c000791f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007925:	89 04 24             	mov    DWORD PTR [esp],eax
c0007928:	89 c7                	mov    edi,eax
c000792a:	e8 15 16 00 00       	call   c0008f44 <TSS::TSS()>
c000792f:	83 c4 0c             	add    esp,0xc
c0007932:	68 76 eb 01 c0       	push   0xc001eb76
c0007937:	56                   	push   esi
c0007938:	57                   	push   edi
c0007939:	e8 4a 16 00 00       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c000793e:	89 c6                	mov    esi,eax
c0007940:	58                   	pop    eax
c0007941:	5a                   	pop    edx
c0007942:	6a 00                	push   0x0
c0007944:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007948:	50                   	push   eax
c0007949:	e8 ce fb ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c000794e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007952:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007957:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000795e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007964:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007968:	80 ce 05             	or     dh,0x5
c000796b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000796e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007972:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007976:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007979:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000797c:	e8 87 fc ff ff       	call   c0007608 <IDT::flush()>
c0007981:	83 c4 20             	add    esp,0x20
c0007984:	5b                   	pop    ebx
c0007985:	5e                   	pop    esi
c0007986:	5f                   	pop    edi
c0007987:	c3                   	ret    

c0007988 <sbrk>:
c0007988:	55                   	push   ebp
c0007989:	57                   	push   edi
c000798a:	56                   	push   esi
c000798b:	53                   	push   ebx
c000798c:	83 ec 1c             	sub    esp,0x1c
c000798f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007993:	85 c0                	test   eax,eax
c0007995:	74 61                	je     c00079f8 <sbrk+0x70>
c0007997:	78 66                	js     c00079ff <sbrk+0x77>
c0007999:	8b 15 74 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022f74
c000799f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079a3:	05 ff 0f 00 00       	add    eax,0xfff
c00079a8:	89 c5                	mov    ebp,eax
c00079aa:	78 6b                	js     c0007a17 <sbrk+0x8f>
c00079ac:	c1 fd 0c             	sar    ebp,0xc
c00079af:	bb 00 00 00 00       	mov    ebx,0x0
c00079b4:	8b 35 b0 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fb0
c00079ba:	8b 3d 74 2f 02 c0    	mov    edi,DWORD PTR ds:0xc0022f74
c00079c0:	e8 fa 03 00 00       	call   c0007dbf <Phys::allocatePage()>
c00079c5:	68 01 04 00 00       	push   0x401
c00079ca:	57                   	push   edi
c00079cb:	50                   	push   eax
c00079cc:	56                   	push   esi
c00079cd:	e8 4e 23 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079d2:	81 05 74 2f 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0022f74,0x1000
c00079dc:	83 c3 01             	add    ebx,0x1
c00079df:	83 c4 10             	add    esp,0x10
c00079e2:	39 dd                	cmp    ebp,ebx
c00079e4:	75 ce                	jne    c00079b4 <sbrk+0x2c>
c00079e6:	0f 20 d8             	mov    eax,cr3
c00079e9:	0f 22 d8             	mov    cr3,eax
c00079ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079f0:	83 c4 1c             	add    esp,0x1c
c00079f3:	5b                   	pop    ebx
c00079f4:	5e                   	pop    esi
c00079f5:	5f                   	pop    edi
c00079f6:	5d                   	pop    ebp
c00079f7:	c3                   	ret    
c00079f8:	a1 74 2f 02 c0       	mov    eax,ds:0xc0022f74
c00079fd:	eb f1                	jmp    c00079f0 <sbrk+0x68>
c00079ff:	83 ec 08             	sub    esp,0x8
c0007a02:	50                   	push   eax
c0007a03:	68 18 07 02 c0       	push   0xc0020718
c0007a08:	e8 38 2f 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007a0d:	83 c4 10             	add    esp,0x10
c0007a10:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a15:	eb d9                	jmp    c00079f0 <sbrk+0x68>
c0007a17:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007a1d:	eb 8d                	jmp    c00079ac <sbrk+0x24>

c0007a1f <mmap>:
c0007a1f:	83 ec 18             	sub    esp,0x18
c0007a22:	68 48 07 02 c0       	push   0xc0020748
c0007a27:	e8 3d 98 00 00       	call   c0011269 <KePanic(char const*)>
c0007a2c:	b8 00 00 00 00       	mov    eax,0x0
c0007a31:	83 c4 1c             	add    esp,0x1c
c0007a34:	c3                   	ret    

c0007a35 <munmap>:
c0007a35:	83 ec 18             	sub    esp,0x18
c0007a38:	68 4d 07 02 c0       	push   0xc002074d
c0007a3d:	e8 27 98 00 00       	call   c0011269 <KePanic(char const*)>
c0007a42:	b8 00 00 00 00       	mov    eax,0x0
c0007a47:	83 c4 1c             	add    esp,0x1c
c0007a4a:	c3                   	ret    

c0007a4b <liballoc_lock()>:
c0007a4b:	fa                   	cli    
c0007a4c:	83 05 c8 96 02 c0 01 	add    DWORD PTR ds:0xc00296c8,0x1
c0007a53:	b8 00 00 00 00       	mov    eax,0x0
c0007a58:	c3                   	ret    

c0007a59 <liballoc_unlock()>:
c0007a59:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007a5e:	83 e8 01             	sub    eax,0x1
c0007a61:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007a66:	75 01                	jne    c0007a69 <liballoc_unlock()+0x10>
c0007a68:	fb                   	sti    
c0007a69:	b8 00 00 00 00       	mov    eax,0x0
c0007a6e:	c3                   	ret    

c0007a6f <liballoc_alloc(int)>:
c0007a6f:	83 ec 10             	sub    esp,0x10
c0007a72:	6a 01                	push   0x1
c0007a74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a78:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007a7e:	e8 a1 23 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007a83:	83 c4 1c             	add    esp,0x1c
c0007a86:	c3                   	ret    

c0007a87 <liballoc_free(void*, int)>:
c0007a87:	83 ec 14             	sub    esp,0x14
c0007a8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a8e:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007a94:	e8 cf 1f 00 00       	call   c0009a68 <VAS::freeAllocatedPages(unsigned long)>
c0007a99:	b8 00 00 00 00       	mov    eax,0x0
c0007a9e:	83 c4 1c             	add    esp,0x1c
c0007aa1:	c3                   	ret    

c0007aa2 <realloc>:
c0007aa2:	83 ec 14             	sub    esp,0x14
c0007aa5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aad:	e8 36 9b ff ff       	call   c00015e8 <dlrealloc>
c0007ab2:	83 c4 1c             	add    esp,0x1c
c0007ab5:	c3                   	ret    

c0007ab6 <malloc>:
c0007ab6:	83 ec 18             	sub    esp,0x18
c0007ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007abd:	e8 e9 95 ff ff       	call   c00010ab <dlmalloc>
c0007ac2:	83 c4 1c             	add    esp,0x1c
c0007ac5:	c3                   	ret    

c0007ac6 <free>:
c0007ac6:	83 ec 18             	sub    esp,0x18
c0007ac9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007acd:	e8 81 92 ff ff       	call   c0000d53 <dlfree>
c0007ad2:	83 c4 1c             	add    esp,0x1c
c0007ad5:	c3                   	ret    

c0007ad6 <rfree>:
c0007ad6:	83 ec 18             	sub    esp,0x18
c0007ad9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007add:	e8 71 92 ff ff       	call   c0000d53 <dlfree>
c0007ae2:	83 c4 1c             	add    esp,0x1c
c0007ae5:	c3                   	ret    

c0007ae6 <calloc>:
c0007ae6:	56                   	push   esi
c0007ae7:	53                   	push   ebx
c0007ae8:	83 ec 10             	sub    esp,0x10
c0007aeb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007aef:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007af4:	53                   	push   ebx
c0007af5:	e8 bc ff ff ff       	call   c0007ab6 <malloc>
c0007afa:	89 c6                	mov    esi,eax
c0007afc:	83 c4 0c             	add    esp,0xc
c0007aff:	53                   	push   ebx
c0007b00:	6a 00                	push   0x0
c0007b02:	50                   	push   eax
c0007b03:	e8 e8 89 ff ff       	call   c00004f0 <memset>
c0007b08:	89 f0                	mov    eax,esi
c0007b0a:	83 c4 14             	add    esp,0x14
c0007b0d:	5b                   	pop    ebx
c0007b0e:	5e                   	pop    esi
c0007b0f:	c3                   	ret    

c0007b10 <KeEntryPoint>:
c0007b10:	57                   	push   edi
c0007b11:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b16:	56                   	push   esi
c0007b17:	89 fa                	mov    edx,edi
c0007b19:	53                   	push   ebx
c0007b1a:	31 f6                	xor    esi,esi
c0007b1c:	83 ec 2c             	sub    esp,0x2c
c0007b1f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b24:	a3 d0 5e 02 c0       	mov    ds:0xc0025ed0,eax
c0007b29:	89 f0                	mov    eax,esi
c0007b2b:	ee                   	out    dx,al
c0007b2c:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b31:	b0 80                	mov    al,0x80
c0007b33:	89 da                	mov    edx,ebx
c0007b35:	ee                   	out    dx,al
c0007b36:	b1 03                	mov    cl,0x3
c0007b38:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b3d:	88 c8                	mov    al,cl
c0007b3f:	ee                   	out    dx,al
c0007b40:	89 f0                	mov    eax,esi
c0007b42:	89 fa                	mov    edx,edi
c0007b44:	ee                   	out    dx,al
c0007b45:	88 c8                	mov    al,cl
c0007b47:	89 da                	mov    edx,ebx
c0007b49:	ee                   	out    dx,al
c0007b4a:	b0 c7                	mov    al,0xc7
c0007b4c:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b51:	ee                   	out    dx,al
c0007b52:	b0 0b                	mov    al,0xb
c0007b54:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b59:	ee                   	out    dx,al
c0007b5a:	68 54 07 02 c0       	push   0xc0020754
c0007b5f:	e8 e1 2d 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007b64:	e8 ae 8f 00 00       	call   c0010b17 <KeDisplaySplashScreen()>
c0007b69:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b6e:	05 ff 0f 00 00       	add    eax,0xfff
c0007b73:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b78:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b7b:	e8 ad 03 00 00       	call   c0007f2d <Phys::physicalMemorySetup(unsigned int)>
c0007b80:	e8 66 1c 00 00       	call   c00097eb <Virt::virtualMemorySetup()>
c0007b85:	e8 d7 8e 00 00       	call   c0010a61 <KeInitialiseAtexit()>
c0007b8a:	58                   	pop    eax
c0007b8b:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b8f:	53                   	push   ebx
c0007b90:	e8 53 1f 00 00       	call   c0009ae8 <VAS::VAS()>
c0007b95:	89 1d b0 5f 02 c0    	mov    DWORD PTR ds:0xc0025fb0,ebx
c0007b9b:	e8 1a 78 01 00       	call   c001f3ba <_init>
c0007ba0:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007ba7:	e8 0a ff ff ff       	call   c0007ab6 <malloc>
c0007bac:	89 04 24             	mov    DWORD PTR [esp],eax
c0007baf:	89 c6                	mov    esi,eax
c0007bb1:	e8 30 f2 ff ff       	call   c0006de6 <Computer::Computer()>
c0007bb6:	53                   	push   ebx
c0007bb7:	89 35 b8 5e 02 c0    	mov    DWORD PTR ds:0xc0025eb8,esi
c0007bbd:	6a 00                	push   0x0
c0007bbf:	6a 00                	push   0x0
c0007bc1:	56                   	push   esi
c0007bc2:	e8 e7 f5 ff ff       	call   c00071ae <Computer::open(int, int, void*)>
c0007bc7:	83 c4 14             	add    esp,0x14
c0007bca:	53                   	push   ebx
c0007bcb:	e8 e2 1f 00 00       	call   c0009bb2 <VAS::~VAS()>
c0007bd0:	83 c4 30             	add    esp,0x30
c0007bd3:	5b                   	pop    ebx
c0007bd4:	5e                   	pop    esi
c0007bd5:	5f                   	pop    edi
c0007bd6:	c3                   	ret    

c0007bd7 <Phys::allocateDMA(unsigned long)>:
c0007bd7:	55                   	push   ebp
c0007bd8:	31 ed                	xor    ebp,ebp
c0007bda:	57                   	push   edi
c0007bdb:	56                   	push   esi
c0007bdc:	53                   	push   ebx
c0007bdd:	31 db                	xor    ebx,ebx
c0007bdf:	83 ec 1c             	sub    esp,0x1c
c0007be2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007be6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007bee:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0007bf4:	31 c0                	xor    eax,eax
c0007bf6:	c1 ef 0c             	shr    edi,0xc
c0007bf9:	eb 1b                	jmp    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007bfb:	85 c0                	test   eax,eax
c0007bfd:	75 06                	jne    c0007c05 <Phys::allocateDMA(unsigned long)+0x2e>
c0007bff:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007c03:	89 dd                	mov    ebp,ebx
c0007c05:	8d 70 01             	lea    esi,[eax+0x1]
c0007c08:	39 f7                	cmp    edi,esi
c0007c0a:	74 37                	je     c0007c43 <Phys::allocateDMA(unsigned long)+0x6c>
c0007c0c:	89 f0                	mov    eax,esi
c0007c0e:	83 c3 01             	add    ebx,0x1
c0007c11:	83 fb 0f             	cmp    ebx,0xf
c0007c14:	7f 13                	jg     c0007c29 <Phys::allocateDMA(unsigned long)+0x52>
c0007c16:	80 bb ec 5e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffda114],0x0
c0007c1d:	74 dc                	je     c0007bfb <Phys::allocateDMA(unsigned long)+0x24>
c0007c1f:	31 c0                	xor    eax,eax
c0007c21:	83 c3 01             	add    ebx,0x1
c0007c24:	83 fb 0f             	cmp    ebx,0xf
c0007c27:	7e ed                	jle    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007c29:	83 ec 0c             	sub    esp,0xc
c0007c2c:	68 6c 07 02 c0       	push   0xc002076c
c0007c31:	e8 33 96 00 00       	call   c0011269 <KePanic(char const*)>
c0007c36:	83 c4 10             	add    esp,0x10
c0007c39:	31 c0                	xor    eax,eax
c0007c3b:	83 c4 1c             	add    esp,0x1c
c0007c3e:	5b                   	pop    ebx
c0007c3f:	5e                   	pop    esi
c0007c40:	5f                   	pop    edi
c0007c41:	5d                   	pop    ebp
c0007c42:	c3                   	ret    
c0007c43:	89 e9                	mov    ecx,ebp
c0007c45:	c1 f9 04             	sar    ecx,0x4
c0007c48:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007c4c:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007c50:	89 ca                	mov    edx,ecx
c0007c52:	83 ea 01             	sub    edx,0x1
c0007c55:	79 03                	jns    c0007c5a <Phys::allocateDMA(unsigned long)+0x83>
c0007c57:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c5a:	c1 fa 04             	sar    edx,0x4
c0007c5d:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007c61:	74 08                	je     c0007c6b <Phys::allocateDMA(unsigned long)+0x94>
c0007c63:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c67:	31 c0                	xor    eax,eax
c0007c69:	eb b6                	jmp    c0007c21 <Phys::allocateDMA(unsigned long)+0x4a>
c0007c6b:	85 f6                	test   esi,esi
c0007c6d:	74 17                	je     c0007c86 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c6f:	8d 95 ec 5e 02 c0    	lea    edx,[ebp-0x3ffda114]
c0007c75:	8d 84 05 ed 5e 02 c0 	lea    eax,[ebp+eax*1-0x3ffda113]
c0007c7c:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c7f:	83 c2 01             	add    edx,0x1
c0007c82:	39 d0                	cmp    eax,edx
c0007c84:	75 f6                	jne    c0007c7c <Phys::allocateDMA(unsigned long)+0xa5>
c0007c86:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007c8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007c8f:	01 f8                	add    eax,edi
c0007c91:	85 d2                	test   edx,edx
c0007c93:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007c98:	74 17                	je     c0007cb1 <Phys::allocateDMA(unsigned long)+0xda>
c0007c9a:	83 ec 0c             	sub    esp,0xc
c0007c9d:	68 6c 07 02 c0       	push   0xc002076c
c0007ca2:	e8 c2 95 00 00       	call   c0011269 <KePanic(char const*)>
c0007ca7:	83 c4 10             	add    esp,0x10
c0007caa:	89 f0                	mov    eax,esi
c0007cac:	e9 5d ff ff ff       	jmp    c0007c0e <Phys::allocateDMA(unsigned long)+0x37>
c0007cb1:	c1 e5 0c             	shl    ebp,0xc
c0007cb4:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007cba:	e9 7c ff ff ff       	jmp    c0007c3b <Phys::allocateDMA(unsigned long)+0x64>

c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>:
c0007cbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cc3:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cc9:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007cce:	c1 ea 0c             	shr    edx,0xc
c0007cd1:	29 d0                	sub    eax,edx
c0007cd3:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007cd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cdc:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007ce1:	c1 e8 0c             	shr    eax,0xc
c0007ce4:	85 d2                	test   edx,edx
c0007ce6:	74 11                	je     c0007cf9 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007ce8:	05 ec 5e 02 c0       	add    eax,0xc0025eec
c0007ced:	01 c2                	add    edx,eax
c0007cef:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007cf2:	83 c0 01             	add    eax,0x1
c0007cf5:	39 d0                	cmp    eax,edx
c0007cf7:	75 f6                	jne    c0007cef <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007cf9:	c3                   	ret    

c0007cfa <Phys::setPageState(unsigned long, bool)>:
c0007cfa:	57                   	push   edi
c0007cfb:	56                   	push   esi
c0007cfc:	8b 35 78 2f 02 c0    	mov    esi,DWORD PTR ds:0xc0022f78
c0007d02:	53                   	push   ebx
c0007d03:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d0c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d10:	0f b6 c0             	movzx  eax,al
c0007d13:	89 ca                	mov    edx,ecx
c0007d15:	83 e1 07             	and    ecx,0x7
c0007d18:	c1 ea 03             	shr    edx,0x3
c0007d1b:	d3 c3                	rol    ebx,cl
c0007d1d:	01 d6                	add    esi,edx
c0007d1f:	d3 e0                	shl    eax,cl
c0007d21:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d24:	21 fb                	and    ebx,edi
c0007d26:	88 1e                	mov    BYTE PTR [esi],bl
c0007d28:	8b 1d 78 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022f78
c0007d2e:	01 da                	add    edx,ebx
c0007d30:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d32:	09 c8                	or     eax,ecx
c0007d34:	88 02                	mov    BYTE PTR [edx],al
c0007d36:	5b                   	pop    ebx
c0007d37:	5e                   	pop    esi
c0007d38:	5f                   	pop    edi
c0007d39:	c3                   	ret    

c0007d3a <Phys::getPageState(unsigned long)>:
c0007d3a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d3e:	8b 15 78 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022f78
c0007d44:	89 c8                	mov    eax,ecx
c0007d46:	83 e1 07             	and    ecx,0x7
c0007d49:	c1 e8 03             	shr    eax,0x3
c0007d4c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d50:	d3 f8                	sar    eax,cl
c0007d52:	83 e0 01             	and    eax,0x1
c0007d55:	c3                   	ret    

c0007d56 <Phys::freePage(unsigned long)>:
c0007d56:	53                   	push   ebx
c0007d57:	83 ec 08             	sub    esp,0x8
c0007d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d5e:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d64:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d6a:	76 41                	jbe    c0007dad <Phys::freePage(unsigned long)+0x57>
c0007d6c:	c1 e8 0c             	shr    eax,0xc
c0007d6f:	50                   	push   eax
c0007d70:	89 c3                	mov    ebx,eax
c0007d72:	e8 c3 ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007d77:	5a                   	pop    edx
c0007d78:	84 c0                	test   al,al
c0007d7a:	74 20                	je     c0007d9c <Phys::freePage(unsigned long)+0x46>
c0007d7c:	83 ec 08             	sub    esp,0x8
c0007d7f:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007d84:	6a 00                	push   0x0
c0007d86:	83 e8 01             	sub    eax,0x1
c0007d89:	53                   	push   ebx
c0007d8a:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007d8f:	e8 66 ff ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007d94:	83 c4 10             	add    esp,0x10
c0007d97:	83 c4 08             	add    esp,0x8
c0007d9a:	5b                   	pop    ebx
c0007d9b:	c3                   	ret    
c0007d9c:	c7 44 24 10 11 08 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020811
c0007da4:	83 c4 08             	add    esp,0x8
c0007da7:	5b                   	pop    ebx
c0007da8:	e9 bc 94 00 00       	jmp    c0011269 <KePanic(char const*)>
c0007dad:	68 00 10 00 00       	push   0x1000
c0007db2:	50                   	push   eax
c0007db3:	e8 07 ff ff ff       	call   c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>
c0007db8:	59                   	pop    ecx
c0007db9:	5b                   	pop    ebx
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	c3                   	ret    

c0007dbf <Phys::allocatePage()>:
c0007dbf:	56                   	push   esi
c0007dc0:	53                   	push   ebx
c0007dc1:	83 ec 14             	sub    esp,0x14
c0007dc4:	8b 35 d8 5e 02 c0    	mov    esi,DWORD PTR ds:0xc0025ed8
c0007dca:	89 f3                	mov    ebx,esi
c0007dcc:	eb 0a                	jmp    c0007dd8 <Phys::allocatePage()+0x19>
c0007dce:	89 1d d8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ed8,ebx
c0007dd4:	39 de                	cmp    esi,ebx
c0007dd6:	74 26                	je     c0007dfe <Phys::allocatePage()+0x3f>
c0007dd8:	53                   	push   ebx
c0007dd9:	e8 5c ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007dde:	5a                   	pop    edx
c0007ddf:	84 c0                	test   al,al
c0007de1:	74 67                	je     c0007e4a <Phys::allocatePage()+0x8b>
c0007de3:	83 c3 01             	add    ebx,0x1
c0007de6:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007dec:	75 e0                	jne    c0007dce <Phys::allocatePage()+0xf>
c0007dee:	31 db                	xor    ebx,ebx
c0007df0:	c7 05 d8 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025ed8,0x0
c0007dfa:	39 de                	cmp    esi,ebx
c0007dfc:	75 da                	jne    c0007dd8 <Phys::allocatePage()+0x19>
c0007dfe:	83 ec 0c             	sub    esp,0xc
c0007e01:	a0 fc 5e 02 c0       	mov    al,ds:0xc0025efc
c0007e06:	83 f0 01             	xor    eax,0x1
c0007e09:	a2 fc 5e 02 c0       	mov    ds:0xc0025efc,al
c0007e0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e13:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e16:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e1c:	50                   	push   eax
c0007e1d:	e8 a8 27 00 00       	call   c000a5ca <VAS::scanForEviction()>
c0007e22:	83 c4 10             	add    esp,0x10
c0007e25:	85 c0                	test   eax,eax
c0007e27:	75 48                	jne    c0007e71 <Phys::allocatePage()+0xb2>
c0007e29:	83 ec 0c             	sub    esp,0xc
c0007e2c:	68 94 07 02 c0       	push   0xc0020794
c0007e31:	e8 33 94 00 00       	call   c0011269 <KePanic(char const*)>
c0007e36:	83 c4 10             	add    esp,0x10
c0007e39:	8b 1d d8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025ed8
c0007e3f:	53                   	push   ebx
c0007e40:	e8 f5 fe ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007e45:	5a                   	pop    edx
c0007e46:	84 c0                	test   al,al
c0007e48:	75 99                	jne    c0007de3 <Phys::allocatePage()+0x24>
c0007e4a:	6a 01                	push   0x1
c0007e4c:	53                   	push   ebx
c0007e4d:	e8 a8 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e52:	8b 15 e4 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee4
c0007e58:	a1 d8 5e 02 c0       	mov    eax,ds:0xc0025ed8
c0007e5d:	83 c2 01             	add    edx,0x1
c0007e60:	59                   	pop    ecx
c0007e61:	89 15 e4 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee4,edx
c0007e67:	c1 e0 0c             	shl    eax,0xc
c0007e6a:	5b                   	pop    ebx
c0007e6b:	83 c4 14             	add    esp,0x14
c0007e6e:	5b                   	pop    ebx
c0007e6f:	5e                   	pop    esi
c0007e70:	c3                   	ret    
c0007e71:	83 ec 08             	sub    esp,0x8
c0007e74:	89 c2                	mov    edx,eax
c0007e76:	6a 01                	push   0x1
c0007e78:	c1 ea 0c             	shr    edx,0xc
c0007e7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e7f:	52                   	push   edx
c0007e80:	e8 75 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e85:	83 c4 10             	add    esp,0x10
c0007e88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e8c:	eb dd                	jmp    c0007e6b <Phys::allocatePage()+0xac>

c0007e8e <Phys::allocateContiguousPages(int)>:
c0007e8e:	57                   	push   edi
c0007e8f:	56                   	push   esi
c0007e90:	53                   	push   ebx
c0007e91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007e95:	fa                   	cli    
c0007e96:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007e9b:	31 db                	xor    ebx,ebx
c0007e9d:	83 c0 01             	add    eax,0x1
c0007ea0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007ea5:	85 db                	test   ebx,ebx
c0007ea7:	75 11                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ea9:	e8 11 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007eae:	83 fe 01             	cmp    esi,0x1
c0007eb1:	89 c7                	mov    edi,eax
c0007eb3:	74 21                	je     c0007ed6 <Phys::allocateContiguousPages(int)+0x48>
c0007eb5:	bb 01 00 00 00       	mov    ebx,0x1
c0007eba:	e8 00 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007ebf:	89 da                	mov    edx,ebx
c0007ec1:	c1 e2 0c             	shl    edx,0xc
c0007ec4:	01 fa                	add    edx,edi
c0007ec6:	39 c2                	cmp    edx,eax
c0007ec8:	74 22                	je     c0007eec <Phys::allocateContiguousPages(int)+0x5e>
c0007eca:	bb 01 00 00 00       	mov    ebx,0x1
c0007ecf:	89 c7                	mov    edi,eax
c0007ed1:	83 fe 01             	cmp    esi,0x1
c0007ed4:	75 e4                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ed6:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007edb:	83 e8 01             	sub    eax,0x1
c0007ede:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007ee3:	75 01                	jne    c0007ee6 <Phys::allocateContiguousPages(int)+0x58>
c0007ee5:	fb                   	sti    
c0007ee6:	89 f8                	mov    eax,edi
c0007ee8:	5b                   	pop    ebx
c0007ee9:	5e                   	pop    esi
c0007eea:	5f                   	pop    edi
c0007eeb:	c3                   	ret    
c0007eec:	83 c3 01             	add    ebx,0x1
c0007eef:	39 f3                	cmp    ebx,esi
c0007ef1:	75 b2                	jne    c0007ea5 <Phys::allocateContiguousPages(int)+0x17>
c0007ef3:	eb e1                	jmp    c0007ed6 <Phys::allocateContiguousPages(int)+0x48>

c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007ef5:	56                   	push   esi
c0007ef6:	53                   	push   ebx
c0007ef7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007efb:	39 1d dc 5e 02 c0    	cmp    DWORD PTR ds:0xc0025edc,ebx
c0007f01:	73 06                	jae    c0007f09 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f03:	89 1d dc 5e 02 c0    	mov    DWORD PTR ds:0xc0025edc,ebx
c0007f09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f0d:	c1 eb 0c             	shr    ebx,0xc
c0007f10:	c1 e8 0c             	shr    eax,0xc
c0007f13:	39 d8                	cmp    eax,ebx
c0007f15:	73 13                	jae    c0007f2a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f17:	6a 00                	push   0x0
c0007f19:	8d 70 01             	lea    esi,[eax+0x1]
c0007f1c:	50                   	push   eax
c0007f1d:	e8 d8 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f22:	5a                   	pop    edx
c0007f23:	89 f0                	mov    eax,esi
c0007f25:	59                   	pop    ecx
c0007f26:	39 f3                	cmp    ebx,esi
c0007f28:	75 ed                	jne    c0007f17 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f2a:	5b                   	pop    ebx
c0007f2b:	5e                   	pop    esi
c0007f2c:	c3                   	ret    

c0007f2d <Phys::physicalMemorySetup(unsigned int)>:
c0007f2d:	55                   	push   ebp
c0007f2e:	57                   	push   edi
c0007f2f:	56                   	push   esi
c0007f30:	53                   	push   ebx
c0007f31:	83 ec 40             	sub    esp,0x40
c0007f34:	6a 10                	push   0x10
c0007f36:	6a 00                	push   0x0
c0007f38:	68 ec 5e 02 c0       	push   0xc0025eec
c0007f3d:	e8 ae 85 ff ff       	call   c00004f0 <memset>
c0007f42:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f46:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f4b:	05 00 10 00 00       	add    eax,0x1000
c0007f50:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007f54:	5b                   	pop    ebx
c0007f55:	31 db                	xor    ebx,ebx
c0007f57:	5e                   	pop    esi
c0007f58:	50                   	push   eax
c0007f59:	68 27 08 02 c0       	push   0xc0020827
c0007f5e:	e8 e2 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007f63:	83 c4 10             	add    esp,0x10
c0007f66:	83 ec 08             	sub    esp,0x8
c0007f69:	6a 01                	push   0x1
c0007f6b:	53                   	push   ebx
c0007f6c:	83 c3 01             	add    ebx,0x1
c0007f6f:	e8 86 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f74:	83 c4 10             	add    esp,0x10
c0007f77:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f7d:	75 e7                	jne    c0007f66 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f7f:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007f86:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007f8d:	c1 e0 08             	shl    eax,0x8
c0007f90:	09 c2                	or     edx,eax
c0007f92:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0007f96:	0f 84 98 01 00 00    	je     c0008134 <Phys::physicalMemorySetup(unsigned int)+0x207>
c0007f9c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007fa0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fa8:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fad:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007fb1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007fb9:	eb 1c                	jmp    c0007fd7 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c0007fbb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007fbf:	83 c3 18             	add    ebx,0x18
c0007fc2:	83 c6 01             	add    esi,0x1
c0007fc5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007fc9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007fcd:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007fd1:	0f 84 6d 01 00 00    	je     c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0007fd7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007fda:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007fdd:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007fe0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007fe4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007fe8:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007fea:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007fed:	01 f0                	add    eax,esi
c0007fef:	55                   	push   ebp
c0007ff0:	11 fa                	adc    edx,edi
c0007ff2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ff6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007ffa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007ffe:	51                   	push   ecx
c0007fff:	56                   	push   esi
c0008000:	68 c4 07 02 c0       	push   0xc00207c4
c0008005:	e8 3b 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000800a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000800e:	83 c4 10             	add    esp,0x10
c0008011:	09 f8                	or     eax,edi
c0008013:	0f 85 2b 01 00 00    	jne    c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0008019:	83 fd 01             	cmp    ebp,0x1
c000801c:	75 9d                	jne    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000801e:	ba 00 00 08 00       	mov    edx,0x80000
c0008023:	89 c1                	mov    ecx,eax
c0008025:	39 f2                	cmp    edx,esi
c0008027:	19 f9                	sbb    ecx,edi
c0008029:	0f 82 ab 00 00 00    	jb     c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000802f:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0008033:	89 c1                	mov    ecx,eax
c0008035:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0008039:	0f 83 9b 00 00 00    	jae    c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000803f:	ba 00 00 0a 00       	mov    edx,0xa0000
c0008044:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008048:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000804c:	39 fa                	cmp    edx,edi
c000804e:	19 e8                	sbb    eax,ebp
c0008050:	0f 82 b0 01 00 00    	jb     c0008206 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c0008056:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000805a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000805e:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0008064:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008069:	83 d5 ff             	adc    ebp,0xffffffff
c000806c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0008070:	31 c0                	xor    eax,eax
c0008072:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0008076:	39 fa                	cmp    edx,edi
c0008078:	89 c1                	mov    ecx,eax
c000807a:	19 e9                	sbb    ecx,ebp
c000807c:	0f 83 39 ff ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008082:	be 00 00 08 00       	mov    esi,0x80000
c0008087:	83 ec 04             	sub    esp,0x4
c000808a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000808e:	57                   	push   edi
c000808f:	56                   	push   esi
c0008090:	68 e8 07 02 c0       	push   0xc00207e8
c0008095:	e8 ab 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000809a:	5d                   	pop    ebp
c000809b:	58                   	pop    eax
c000809c:	57                   	push   edi
c000809d:	56                   	push   esi
c000809e:	e8 52 fe ff ff       	call   c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00080a3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00080a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00080ab:	83 c4 0c             	add    esp,0xc
c00080ae:	0f ac d0 0c          	shrd   eax,edx,0xc
c00080b2:	8b 15 e8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee8
c00080b8:	01 d0                	add    eax,edx
c00080ba:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00080c1:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00080c6:	52                   	push   edx
c00080c7:	50                   	push   eax
c00080c8:	68 4d 08 02 c0       	push   0xc002084d
c00080cd:	e8 73 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00080d2:	83 c4 10             	add    esp,0x10
c00080d5:	e9 e1 fe ff ff       	jmp    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080da:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00080de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00080e2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080e6:	39 ea                	cmp    edx,ebp
c00080e8:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00080ec:	0f 82 c9 fe ff ff    	jb     c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080f2:	ba ff 1f 00 00       	mov    edx,0x1fff
c00080f7:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00080fb:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00080ff:	0f 83 b6 fe ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008105:	39 ee                	cmp    esi,ebp
c0008107:	89 f8                	mov    eax,edi
c0008109:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000810d:	0f 83 74 ff ff ff    	jae    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008113:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000811b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000811f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008123:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0008127:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000812b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000812f:	e9 53 ff ff ff       	jmp    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008134:	83 ec 0c             	sub    esp,0xc
c0008137:	68 3f 08 02 c0       	push   0xc002083f
c000813c:	e8 28 91 00 00       	call   c0011269 <KePanic(char const*)>
c0008141:	83 c4 10             	add    esp,0x10
c0008144:	83 ec 08             	sub    esp,0x8
c0008147:	bb 60 00 00 00       	mov    ebx,0x60
c000814c:	6a 00                	push   0x0
c000814e:	6a 06                	push   0x6
c0008150:	e8 a5 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008155:	58                   	pop    eax
c0008156:	5a                   	pop    edx
c0008157:	6a 00                	push   0x0
c0008159:	6a 07                	push   0x7
c000815b:	e8 9a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008160:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0008166:	83 c4 10             	add    esp,0x10
c0008169:	83 c1 02             	add    ecx,0x2
c000816c:	89 0d e8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee8,ecx
c0008172:	83 ec 08             	sub    esp,0x8
c0008175:	6a 00                	push   0x0
c0008177:	53                   	push   ebx
c0008178:	83 c3 01             	add    ebx,0x1
c000817b:	e8 7a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008189:	75 e7                	jne    c0008172 <Phys::physicalMemorySetup(unsigned int)+0x245>
c000818b:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c0008190:	bb 40 01 00 00       	mov    ebx,0x140
c0008195:	83 c0 20             	add    eax,0x20
c0008198:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c000819d:	eb 26                	jmp    c00081c5 <Phys::physicalMemorySetup(unsigned int)+0x298>
c000819f:	83 ec 08             	sub    esp,0x8
c00081a2:	6a 00                	push   0x0
c00081a4:	53                   	push   ebx
c00081a5:	83 c3 01             	add    ebx,0x1
c00081a8:	e8 4d fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081ad:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c00081b2:	83 c4 10             	add    esp,0x10
c00081b5:	83 c0 01             	add    eax,0x1
c00081b8:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00081be:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00081c3:	74 07                	je     c00081cc <Phys::physicalMemorySetup(unsigned int)+0x29f>
c00081c5:	3d ff 03 00 00       	cmp    eax,0x3ff
c00081ca:	7e d3                	jle    c000819f <Phys::physicalMemorySetup(unsigned int)+0x272>
c00081cc:	bb d0 01 00 00       	mov    ebx,0x1d0
c00081d1:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081d6:	7f 26                	jg     c00081fe <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c00081d8:	83 ec 08             	sub    esp,0x8
c00081db:	6a 00                	push   0x0
c00081dd:	53                   	push   ebx
c00081de:	83 c3 01             	add    ebx,0x1
c00081e1:	e8 14 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081e6:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c00081eb:	83 c4 10             	add    esp,0x10
c00081ee:	83 c0 01             	add    eax,0x1
c00081f1:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081f7:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00081fc:	75 d3                	jne    c00081d1 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c00081fe:	83 c4 3c             	add    esp,0x3c
c0008201:	5b                   	pop    ebx
c0008202:	5e                   	pop    esi
c0008203:	5f                   	pop    edi
c0008204:	5d                   	pop    ebp
c0008205:	c3                   	ret    
c0008206:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000820e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008216:	e9 3b fe ff ff       	jmp    c0008056 <Phys::physicalMemorySetup(unsigned int)+0x129>
c000821b:	90                   	nop

c000821c <Pipe::isAtty()>:
c000821c:	31 c0                	xor    eax,eax
c000821e:	c3                   	ret    
c000821f:	90                   	nop

c0008220 <Pipe::~Pipe()>:
c0008220:	83 ec 0c             	sub    esp,0xc
c0008223:	ba ac 08 02 c0       	mov    edx,0xc00208ac
c0008228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000822c:	89 10                	mov    DWORD PTR [eax],edx
c000822e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008232:	83 ec 0c             	sub    esp,0xc
c0008235:	50                   	push   eax
c0008236:	e8 69 11 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c000823b:	83 c4 10             	add    esp,0x10
c000823e:	90                   	nop
c000823f:	83 c4 0c             	add    esp,0xc
c0008242:	c3                   	ret    
c0008243:	90                   	nop

c0008244 <Pipe::~Pipe()>:
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	83 ec 0c             	sub    esp,0xc
c000824a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000824e:	e8 cd ff ff ff       	call   c0008220 <Pipe::~Pipe()>
c0008253:	83 c4 10             	add    esp,0x10
c0008256:	83 ec 08             	sub    esp,0x8
c0008259:	6a 20                	push   0x20
c000825b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000825f:	e8 b4 25 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0008264:	83 c4 10             	add    esp,0x10
c0008267:	83 c4 0c             	add    esp,0xc
c000826a:	c3                   	ret    
c000826b:	90                   	nop

c000826c <Pipe::write(unsigned long long, void*, int*)>:
c000826c:	55                   	push   ebp
c000826d:	57                   	push   edi
c000826e:	56                   	push   esi
c000826f:	53                   	push   ebx
c0008270:	83 ec 1c             	sub    esp,0x1c
c0008273:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008277:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000827b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000827e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008282:	89 04 24             	mov    DWORD PTR [esp],eax
c0008285:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008289:	89 d8                	mov    eax,ebx
c000828b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000828e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0008292:	89 d6                	mov    esi,edx
c0008294:	89 d7                	mov    edi,edx
c0008296:	c1 ff 1f             	sar    edi,0x1f
c0008299:	03 34 24             	add    esi,DWORD PTR [esp]
c000829c:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082a0:	c1 f8 1f             	sar    eax,0x1f
c00082a3:	39 f3                	cmp    ebx,esi
c00082a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082ad:	19 f8                	sbb    eax,edi
c00082af:	b8 01 00 00 00       	mov    eax,0x1
c00082b4:	72 6e                	jb     c0008324 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00082b6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082b9:	01 d0                	add    eax,edx
c00082bb:	99                   	cdq    
c00082bc:	f7 fb                	idiv   ebx
c00082be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082c2:	29 d3                	sub    ebx,edx
c00082c4:	89 d7                	mov    edi,edx
c00082c6:	89 de                	mov    esi,ebx
c00082c8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082cb:	c1 fb 1f             	sar    ebx,0x1f
c00082ce:	39 f2                	cmp    edx,esi
c00082d0:	19 d8                	sbb    eax,ebx
c00082d2:	b8 00 00 00 00       	mov    eax,0x0
c00082d7:	72 04                	jb     c00082dd <Pipe::write(unsigned long long, void*, int*)+0x71>
c00082d9:	89 d0                	mov    eax,edx
c00082db:	29 f0                	sub    eax,esi
c00082dd:	89 d3                	mov    ebx,edx
c00082df:	29 c3                	sub    ebx,eax
c00082e1:	74 0b                	je     c00082ee <Pipe::write(unsigned long long, void*, int*)+0x82>
c00082e3:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00082e6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00082ea:	89 d9                	mov    ecx,ebx
c00082ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ee:	85 c0                	test   eax,eax
c00082f0:	74 0d                	je     c00082ff <Pipe::write(unsigned long long, void*, int*)+0x93>
c00082f2:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00082f6:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00082f9:	89 de                	mov    esi,ebx
c00082fb:	89 c1                	mov    ecx,eax
c00082fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ff:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008302:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008307:	75 10                	jne    c0008319 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0008309:	83 ec 0c             	sub    esp,0xc
c000830c:	68 69 08 02 c0       	push   0xc0020869
c0008311:	e8 53 8f 00 00       	call   c0011269 <KePanic(char const*)>
c0008316:	83 c4 10             	add    esp,0x10
c0008319:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000831d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008320:	89 08                	mov    DWORD PTR [eax],ecx
c0008322:	31 c0                	xor    eax,eax
c0008324:	83 c4 1c             	add    esp,0x1c
c0008327:	5b                   	pop    ebx
c0008328:	5e                   	pop    esi
c0008329:	5f                   	pop    edi
c000832a:	5d                   	pop    ebp
c000832b:	c3                   	ret    

c000832c <Pipe::read(unsigned long long, void*, int*)>:
c000832c:	55                   	push   ebp
c000832d:	57                   	push   edi
c000832e:	56                   	push   esi
c000832f:	53                   	push   ebx
c0008330:	83 ec 1c             	sub    esp,0x1c
c0008333:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008337:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000833b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000833f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008342:	89 c8                	mov    eax,ecx
c0008344:	99                   	cdq    
c0008345:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008349:	74 24                	je     c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000834b:	39 f9                	cmp    ecx,edi
c000834d:	89 d1                	mov    ecx,edx
c000834f:	19 f1                	sbb    ecx,esi
c0008351:	73 1c                	jae    c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008353:	fa                   	cli    
c0008354:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000835a:	e8 c9 d7 00 00       	call   c0015b28 <schedule()>
c000835f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0008364:	48                   	dec    eax
c0008365:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000836a:	75 d3                	jne    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836c:	fb                   	sti    
c000836d:	eb d0                	jmp    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836f:	39 f8                	cmp    eax,edi
c0008371:	89 d1                	mov    ecx,edx
c0008373:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008376:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000837a:	19 f1                	sbb    ecx,esi
c000837c:	73 07                	jae    c0008385 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000837e:	89 04 24             	mov    DWORD PTR [esp],eax
c0008381:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008385:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0008388:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000838b:	29 f7                	sub    edi,esi
c000838d:	89 f8                	mov    eax,edi
c000838f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008393:	99                   	cdq    
c0008394:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0008397:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000839b:	19 d0                	sbb    eax,edx
c000839d:	73 07                	jae    c00083a6 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000839f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00083a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083a6:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00083a9:	89 ea                	mov    edx,ebp
c00083ab:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00083af:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00083b4:	74 0d                	je     c00083c3 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00083b6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083b9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00083c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083c3:	85 d2                	test   edx,edx
c00083c5:	74 11                	je     c00083d8 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00083c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083cb:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083ce:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083d2:	89 d1                	mov    ecx,edx
c00083d4:	89 c7                	mov    edi,eax
c00083d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083d8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083db:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083de:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083e1:	99                   	cdq    
c00083e2:	89 f7                	mov    edi,esi
c00083e4:	03 04 24             	add    eax,DWORD PTR [esp]
c00083e7:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00083eb:	c1 ff 1f             	sar    edi,0x1f
c00083ee:	57                   	push   edi
c00083ef:	56                   	push   esi
c00083f0:	52                   	push   edx
c00083f1:	50                   	push   eax
c00083f2:	e8 a9 6e 01 00       	call   c001f2a0 <__umoddi3>
c00083f7:	83 c4 10             	add    esp,0x10
c00083fa:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00083fd:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008402:	75 10                	jne    c0008414 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0008404:	83 ec 0c             	sub    esp,0xc
c0008407:	68 86 08 02 c0       	push   0xc0020886
c000840c:	e8 58 8e 00 00       	call   c0011269 <KePanic(char const*)>
c0008411:	83 c4 10             	add    esp,0x10
c0008414:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008418:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000841b:	89 10                	mov    DWORD PTR [eax],edx
c000841d:	83 c4 1c             	add    esp,0x1c
c0008420:	31 c0                	xor    eax,eax
c0008422:	5b                   	pop    ebx
c0008423:	5e                   	pop    esi
c0008424:	5f                   	pop    edi
c0008425:	5d                   	pop    ebp
c0008426:	c3                   	ret    
c0008427:	90                   	nop

c0008428 <Pipe::Pipe(int)>:
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000842f:	83 ec 08             	sub    esp,0x8
c0008432:	6a 00                	push   0x0
c0008434:	50                   	push   eax
c0008435:	e8 84 0d 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c000843a:	83 c4 10             	add    esp,0x10
c000843d:	ba ac 08 02 c0       	mov    edx,0xc00208ac
c0008442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008446:	89 10                	mov    DWORD PTR [eax],edx
c0008448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000844c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008450:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008457:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008469:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000846d:	83 ec 0c             	sub    esp,0xc
c0008470:	50                   	push   eax
c0008471:	e8 40 f6 ff ff       	call   c0007ab6 <malloc>
c0008476:	83 c4 10             	add    esp,0x10
c0008479:	89 c2                	mov    edx,eax
c000847b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000847f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008486:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000848a:	90                   	nop
c000848b:	83 c4 0c             	add    esp,0xc
c000848e:	c3                   	ret    
c000848f:	90                   	nop

c0008490 <VgaText::isAtty()>:
c0008490:	b0 01                	mov    al,0x1
c0008492:	c3                   	ret    
c0008493:	90                   	nop

c0008494 <VgaText::~VgaText()>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	ba f4 08 02 c0       	mov    edx,0xc00208f4
c000849c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a0:	89 10                	mov    DWORD PTR [eax],edx
c00084a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a6:	83 ec 0c             	sub    esp,0xc
c00084a9:	50                   	push   eax
c00084aa:	e8 f5 0e 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c00084af:	83 c4 10             	add    esp,0x10
c00084b2:	90                   	nop
c00084b3:	83 c4 0c             	add    esp,0xc
c00084b6:	c3                   	ret    
c00084b7:	90                   	nop

c00084b8 <VgaText::~VgaText()>:
c00084b8:	83 ec 0c             	sub    esp,0xc
c00084bb:	83 ec 0c             	sub    esp,0xc
c00084be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084c2:	e8 cd ff ff ff       	call   c0008494 <VgaText::~VgaText()>
c00084c7:	83 c4 10             	add    esp,0x10
c00084ca:	83 ec 08             	sub    esp,0x8
c00084cd:	68 84 01 00 00       	push   0x184
c00084d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d6:	e8 3d 23 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00084db:	83 c4 10             	add    esp,0x10
c00084de:	83 c4 0c             	add    esp,0xc
c00084e1:	c3                   	ret    

c00084e2 <VgaText::read(unsigned long long, void*, int*)>:
c00084e2:	83 ec 10             	sub    esp,0x10
c00084e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00084ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084f1:	e8 1e 50 00 00       	call   c000d514 <readKeyboard(VgaText*, char*, unsigned long)>
c00084f6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084fa:	89 02                	mov    DWORD PTR [edx],eax
c00084fc:	31 c0                	xor    eax,eax
c00084fe:	83 c4 1c             	add    esp,0x1c
c0008501:	c3                   	ret    

c0008502 <setTerminalScrollLock(bool)>:
c0008502:	c3                   	ret    

c0008503 <doTerminalCycle()>:
c0008503:	c3                   	ret    

c0008504 <addToTerminalCycle(VgaText*)>:
c0008504:	c3                   	ret    

c0008505 <scrollTerminalScrollLock(int)>:
c0008505:	c3                   	ret    

c0008506 <VgaText::updateTitle()>:
c0008506:	c3                   	ret    
c0008507:	90                   	nop

c0008508 <VgaText::load()>:
c0008508:	c3                   	ret    
c0008509:	90                   	nop

c000850a <VgaText::updateCursor()>:
c000850a:	83 ec 14             	sub    esp,0x14
c000850d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008511:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008514:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008517:	e8 c4 03 01 00       	call   c00188e0 <HalConsoleCursorUpdate(int, int)>
c000851c:	83 c4 1c             	add    esp,0x1c
c000851f:	c3                   	ret    

c0008520 <VgaText::doANSI_SGR(int)>:
c0008520:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008524:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008528:	85 d2                	test   edx,edx
c000852a:	75 0b                	jne    c0008537 <VgaText::doANSI_SGR(int)+0x17>
c000852c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000852f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008532:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008535:	eb 59                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008537:	83 fa 07             	cmp    edx,0x7
c000853a:	75 0b                	jne    c0008547 <VgaText::doANSI_SGR(int)+0x27>
c000853c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000853f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008542:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008545:	eb 49                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008547:	83 fa 1b             	cmp    edx,0x1b
c000854a:	74 e0                	je     c000852c <VgaText::doANSI_SGR(int)+0xc>
c000854c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000854f:	83 f9 07             	cmp    ecx,0x7
c0008552:	77 09                	ja     c000855d <VgaText::doANSI_SGR(int)+0x3d>
c0008554:	8b 14 8d a0 2f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd060]
c000855b:	eb 20                	jmp    c000857d <VgaText::doANSI_SGR(int)+0x5d>
c000855d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008560:	83 f9 07             	cmp    ecx,0x7
c0008563:	77 09                	ja     c000856e <VgaText::doANSI_SGR(int)+0x4e>
c0008565:	8b 14 8d a0 2f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd060]
c000856c:	eb 22                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c000856e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008571:	83 f9 07             	cmp    ecx,0x7
c0008574:	77 0b                	ja     c0008581 <VgaText::doANSI_SGR(int)+0x61>
c0008576:	8b 14 95 58 2e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd1a8]
c000857d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008580:	c3                   	ret    
c0008581:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0008584:	83 f9 07             	cmp    ecx,0x7
c0008587:	77 0a                	ja     c0008593 <VgaText::doANSI_SGR(int)+0x73>
c0008589:	8b 14 95 30 2e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd1d0]
c0008590:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008593:	c3                   	ret    

c0008594 <VgaText::setDefaultBgColour(VgaColour)>:
c0008594:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008598:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000859c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000859f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a2:	c3                   	ret    
c00085a3:	90                   	nop

c00085a4 <VgaText::setDefaultFgColour(VgaColour)>:
c00085a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085ac:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085af:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085b2:	c3                   	ret    
c00085b3:	90                   	nop

c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085b4:	53                   	push   ebx
c00085b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085b9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085c1:	51                   	push   ecx
c00085c2:	e8 cd ff ff ff       	call   c0008594 <VgaText::setDefaultBgColour(VgaColour)>
c00085c7:	58                   	pop    eax
c00085c8:	5a                   	pop    edx
c00085c9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085cd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085d1:	5b                   	pop    ebx
c00085d2:	eb d0                	jmp    c00085a4 <VgaText::setDefaultFgColour(VgaColour)>

c00085d4 <VgaText::setTitleTextColour(VgaColour)>:
c00085d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085dc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085df:	c3                   	ret    

c00085e0 <VgaText::setTitleColour(VgaColour)>:
c00085e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085e8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00085eb:	c3                   	ret    

c00085ec <VgaText::setTitle(char*)>:
c00085ec:	c3                   	ret    
c00085ed:	90                   	nop

c00085ee <VgaText::combineColours(unsigned char, unsigned char)>:
c00085ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085f2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00085f7:	83 e0 0f             	and    eax,0xf
c00085fa:	c1 e2 04             	shl    edx,0x4
c00085fd:	09 d0                	or     eax,edx
c00085ff:	c3                   	ret    

c0008600 <VgaText::scrollScreen()>:
c0008600:	55                   	push   ebp
c0008601:	57                   	push   edi
c0008602:	56                   	push   esi
c0008603:	be 01 00 00 00       	mov    esi,0x1
c0008608:	53                   	push   ebx
c0008609:	83 ec 0c             	sub    esp,0xc
c000860c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008610:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008613:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008619:	31 ff                	xor    edi,edi
c000861b:	01 e9                	add    ecx,ebp
c000861d:	8a 01                	mov    al,BYTE PTR [ecx]
c000861f:	83 fe 18             	cmp    esi,0x18
c0008622:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008628:	75 20                	jne    c000864a <VgaText::scrollScreen()+0x4a>
c000862a:	f7 c7 01 00 00 00    	test   edi,0x1
c0008630:	74 15                	je     c0008647 <VgaText::scrollScreen()+0x47>
c0008632:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008636:	50                   	push   eax
c0008637:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000863b:	50                   	push   eax
c000863c:	e8 ad ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008641:	5a                   	pop    edx
c0008642:	5a                   	pop    edx
c0008643:	88 01                	mov    BYTE PTR [ecx],al
c0008645:	eb 03                	jmp    c000864a <VgaText::scrollScreen()+0x4a>
c0008647:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c000864a:	47                   	inc    edi
c000864b:	41                   	inc    ecx
c000864c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008652:	75 c9                	jne    c000861d <VgaText::scrollScreen()+0x1d>
c0008654:	46                   	inc    esi
c0008655:	83 fe 19             	cmp    esi,0x19
c0008658:	75 b9                	jne    c0008613 <VgaText::scrollScreen()+0x13>
c000865a:	39 1d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebx
c0008660:	75 1f                	jne    c0008681 <VgaText::scrollScreen()+0x81>
c0008662:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008666:	74 05                	je     c000866d <VgaText::scrollScreen()+0x6d>
c0008668:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000866b:	eb 14                	jmp    c0008681 <VgaText::scrollScreen()+0x81>
c000866d:	50                   	push   eax
c000866e:	50                   	push   eax
c000866f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008673:	50                   	push   eax
c0008674:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008678:	50                   	push   eax
c0008679:	e8 f6 00 01 00       	call   c0018774 <HalConsoleScroll(int, int)>
c000867e:	83 c4 10             	add    esp,0x10
c0008681:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008685:	83 c4 0c             	add    esp,0xc
c0008688:	5b                   	pop    ebx
c0008689:	5e                   	pop    esi
c000868a:	5f                   	pop    edi
c000868b:	5d                   	pop    ebp
c000868c:	e9 79 fe ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008691:	90                   	nop

c0008692 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008692:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008697:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000869c:	c1 e0 08             	shl    eax,0x8
c000869f:	09 d0                	or     eax,edx
c00086a1:	c3                   	ret    

c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086a2:	55                   	push   ebp
c00086a3:	57                   	push   edi
c00086a4:	56                   	push   esi
c00086a5:	53                   	push   ebx
c00086a6:	83 ec 1c             	sub    esp,0x1c
c00086a9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086b1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086b9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086bd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086c1:	0f b6 c3             	movzx  eax,bl
c00086c4:	50                   	push   eax
c00086c5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086ca:	50                   	push   eax
c00086cb:	e8 1e ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c00086d0:	5a                   	pop    edx
c00086d1:	0f b6 c0             	movzx  eax,al
c00086d4:	59                   	pop    ecx
c00086d5:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086da:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086de:	50                   	push   eax
c00086df:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086e3:	e8 aa ff ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c00086e8:	5a                   	pop    edx
c00086e9:	6b d7 50             	imul   edx,edi,0x50
c00086ec:	59                   	pop    ecx
c00086ed:	01 f2                	add    edx,esi
c00086ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00086f2:	0f b7 d2             	movzx  edx,dx
c00086f5:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00086f9:	39 2d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebp
c00086ff:	75 28                	jne    c0008729 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008701:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008705:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008709:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c000870d:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008711:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008715:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008719:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000871d:	83 c4 1c             	add    esp,0x1c
c0008720:	5b                   	pop    ebx
c0008721:	5e                   	pop    esi
c0008722:	5f                   	pop    edi
c0008723:	5d                   	pop    ebp
c0008724:	e9 53 01 01 00       	jmp    c001887c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008729:	83 c4 1c             	add    esp,0x1c
c000872c:	5b                   	pop    ebx
c000872d:	5e                   	pop    esi
c000872e:	5f                   	pop    edi
c000872f:	5d                   	pop    ebp
c0008730:	c3                   	ret    
c0008731:	90                   	nop

c0008732 <VgaText::getCursorX()>:
c0008732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008736:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008739:	c3                   	ret    

c000873a <VgaText::getCursorY()>:
c000873a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000873e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008741:	c3                   	ret    

c0008742 <VgaText::setCursor(int, int)>:
c0008742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008746:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000874a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000874d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008751:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008754:	e9 b1 fd ff ff       	jmp    c000850a <VgaText::updateCursor()>

c0008759 <setActiveTerminal(VgaText*)>:
c0008759:	53                   	push   ebx
c000875a:	83 ec 08             	sub    esp,0x8
c000875d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008761:	85 db                	test   ebx,ebx
c0008763:	75 11                	jne    c0008776 <setActiveTerminal(VgaText*)+0x1d>
c0008765:	c7 44 24 10 c0 08 02 c0 	mov    DWORD PTR [esp+0x10],0xc00208c0
c000876d:	83 c4 08             	add    esp,0x8
c0008770:	5b                   	pop    ebx
c0008771:	e9 f3 8a 00 00       	jmp    c0011269 <KePanic(char const*)>
c0008776:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c000877b:	85 c0                	test   eax,eax
c000877d:	74 0c                	je     c000878b <setActiveTerminal(VgaText*)+0x32>
c000877f:	83 ec 0c             	sub    esp,0xc
c0008782:	50                   	push   eax
c0008783:	e8 82 fd ff ff       	call   c000850a <VgaText::updateCursor()>
c0008788:	83 c4 10             	add    esp,0x10
c000878b:	89 1d 04 5f 02 c0    	mov    DWORD PTR ds:0xc0025f04,ebx
c0008791:	50                   	push   eax
c0008792:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008795:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008798:	53                   	push   ebx
c0008799:	e8 a4 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000879e:	83 c4 18             	add    esp,0x18
c00087a1:	5b                   	pop    ebx
c00087a2:	c3                   	ret    
c00087a3:	90                   	nop

c00087a4 <VgaText::clearScreen()>:
c00087a4:	57                   	push   edi
c00087a5:	56                   	push   esi
c00087a6:	31 f6                	xor    esi,esi
c00087a8:	53                   	push   ebx
c00087a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087ad:	52                   	push   edx
c00087ae:	6a 00                	push   0x0
c00087b0:	6a 00                	push   0x0
c00087b2:	53                   	push   ebx
c00087b3:	e8 8a ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c00087b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087bf:	83 c4 10             	add    esp,0x10
c00087c2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087c5:	7e 20                	jle    c00087e7 <VgaText::clearScreen()+0x43>
c00087c7:	31 ff                	xor    edi,edi
c00087c9:	50                   	push   eax
c00087ca:	50                   	push   eax
c00087cb:	56                   	push   esi
c00087cc:	57                   	push   edi
c00087cd:	47                   	inc    edi
c00087ce:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087d1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087d4:	6a 20                	push   0x20
c00087d6:	53                   	push   ebx
c00087d7:	e8 c6 fe ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087dc:	83 c4 20             	add    esp,0x20
c00087df:	83 ff 50             	cmp    edi,0x50
c00087e2:	75 e5                	jne    c00087c9 <VgaText::clearScreen()+0x25>
c00087e4:	46                   	inc    esi
c00087e5:	eb db                	jmp    c00087c2 <VgaText::clearScreen()+0x1e>
c00087e7:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00087ee:	5b                   	pop    ebx
c00087ef:	5e                   	pop    esi
c00087f0:	5f                   	pop    edi
c00087f1:	c3                   	ret    

c00087f2 <VgaText::setCursorX(int)>:
c00087f2:	83 ec 10             	sub    esp,0x10
c00087f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087f9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00087fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008800:	50                   	push   eax
c0008801:	e8 3c ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008806:	83 c4 1c             	add    esp,0x1c
c0008809:	c3                   	ret    

c000880a <VgaText::setCursorY(int)>:
c000880a:	83 ec 10             	sub    esp,0x10
c000880d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008811:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008815:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008818:	50                   	push   eax
c0008819:	e8 24 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000881e:	83 c4 1c             	add    esp,0x1c
c0008821:	c3                   	ret    

c0008822 <VgaText::incrementCursor(bool)>:
c0008822:	56                   	push   esi
c0008823:	53                   	push   ebx
c0008824:	51                   	push   ecx
c0008825:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008829:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000882d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008830:	40                   	inc    eax
c0008831:	83 f8 50             	cmp    eax,0x50
c0008834:	74 05                	je     c000883b <VgaText::incrementCursor(bool)+0x19>
c0008836:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008839:	eb 24                	jmp    c000885f <VgaText::incrementCursor(bool)+0x3d>
c000883b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000883e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008845:	8d 50 01             	lea    edx,[eax+0x1]
c0008848:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000884b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000884e:	75 0f                	jne    c000885f <VgaText::incrementCursor(bool)+0x3d>
c0008850:	83 ec 0c             	sub    esp,0xc
c0008853:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008856:	53                   	push   ebx
c0008857:	e8 a4 fd ff ff       	call   c0008600 <VgaText::scrollScreen()>
c000885c:	83 c4 10             	add    esp,0x10
c000885f:	89 f0                	mov    eax,esi
c0008861:	84 c0                	test   al,al
c0008863:	74 0c                	je     c0008871 <VgaText::incrementCursor(bool)+0x4f>
c0008865:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008869:	5a                   	pop    edx
c000886a:	5b                   	pop    ebx
c000886b:	5e                   	pop    esi
c000886c:	e9 99 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008871:	58                   	pop    eax
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	c3                   	ret    
c0008875:	90                   	nop

c0008876 <VgaText::decrementCursor(bool)>:
c0008876:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000887a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000887e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008881:	85 c0                	test   eax,eax
c0008883:	74 04                	je     c0008889 <VgaText::decrementCursor(bool)+0x13>
c0008885:	48                   	dec    eax
c0008886:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008889:	84 c9                	test   cl,cl
c000888b:	74 09                	je     c0008896 <VgaText::decrementCursor(bool)+0x20>
c000888d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008891:	e9 74 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008896:	c3                   	ret    
c0008897:	90                   	nop

c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008898:	53                   	push   ebx
c0008899:	83 ec 08             	sub    esp,0x8
c000889c:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088ad:	83 f8 07             	cmp    eax,0x7
c00088b0:	75 21                	jne    c00088d3 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088b2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088ba:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088c2:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088ca:	83 c4 08             	add    esp,0x8
c00088cd:	5b                   	pop    ebx
c00088ce:	e9 8c 37 00 00       	jmp    c000c05f <Krnl::beep(int, int, bool)>
c00088d3:	83 f8 0d             	cmp    eax,0xd
c00088d6:	75 09                	jne    c00088e1 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088d8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088df:	eb 2d                	jmp    c000890e <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088e1:	83 f8 0a             	cmp    eax,0xa
c00088e4:	75 31                	jne    c0008917 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088e6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088e9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f0:	8d 50 01             	lea    edx,[eax+0x1]
c00088f3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00088f6:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088f9:	75 0f                	jne    c000890a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00088fb:	83 ec 0c             	sub    esp,0xc
c00088fe:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008901:	53                   	push   ebx
c0008902:	e8 f9 fc ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008907:	83 c4 10             	add    esp,0x10
c000890a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000890e:	83 c4 08             	add    esp,0x8
c0008911:	5b                   	pop    ebx
c0008912:	e9 f3 fb ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008917:	83 f8 08             	cmp    eax,0x8
c000891a:	75 25                	jne    c0008941 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c000891c:	50                   	push   eax
c000891d:	50                   	push   eax
c000891e:	6a 01                	push   0x1
c0008920:	53                   	push   ebx
c0008921:	e8 50 ff ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008926:	5a                   	pop    edx
c0008927:	59                   	pop    ecx
c0008928:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000892b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000892e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008931:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008934:	6a 20                	push   0x20
c0008936:	53                   	push   ebx
c0008937:	e8 66 fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000893c:	83 c4 28             	add    esp,0x28
c000893f:	5b                   	pop    ebx
c0008940:	c3                   	ret    
c0008941:	83 ec 08             	sub    esp,0x8
c0008944:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008947:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000894a:	51                   	push   ecx
c000894b:	52                   	push   edx
c000894c:	50                   	push   eax
c000894d:	53                   	push   ebx
c000894e:	e8 4f fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008953:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008957:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000895f:	83 c4 28             	add    esp,0x28
c0008962:	5b                   	pop    ebx
c0008963:	e9 ba fe ff ff       	jmp    c0008822 <VgaText::incrementCursor(bool)>

c0008968 <VgaText::putchar(char)>:
c0008968:	57                   	push   edi
c0008969:	56                   	push   esi
c000896a:	53                   	push   ebx
c000896b:	83 ec 10             	sub    esp,0x10
c000896e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008972:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008976:	89 f8                	mov    eax,edi
c0008978:	0f be c0             	movsx  eax,al
c000897b:	83 f8 5b             	cmp    eax,0x5b
c000897e:	75 18                	jne    c0008998 <VgaText::putchar(char)+0x30>
c0008980:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008984:	74 20                	je     c00089a6 <VgaText::putchar(char)+0x3e>
c0008986:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000898c:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008993:	e9 c1 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008998:	83 f8 1b             	cmp    eax,0x1b
c000899b:	75 09                	jne    c00089a6 <VgaText::putchar(char)+0x3e>
c000899d:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089a1:	e9 b3 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c00089a6:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00089a9:	84 c9                	test   cl,cl
c00089ab:	0f 84 98 00 00 00    	je     c0008a49 <VgaText::putchar(char)+0xe1>
c00089b1:	8d 77 c0             	lea    esi,[edi-0x40]
c00089b4:	89 f2                	mov    edx,esi
c00089b6:	80 fa 3e             	cmp    dl,0x3e
c00089b9:	77 78                	ja     c0008a33 <VgaText::putchar(char)+0xcb>
c00089bb:	83 f8 6d             	cmp    eax,0x6d
c00089be:	75 47                	jne    c0008a07 <VgaText::putchar(char)+0x9f>
c00089c0:	31 f6                	xor    esi,esi
c00089c2:	31 d2                	xor    edx,edx
c00089c4:	31 c0                	xor    eax,eax
c00089c6:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089c9:	7e 2d                	jle    c00089f8 <VgaText::putchar(char)+0x90>
c00089cb:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089d0:	83 fa 3b             	cmp    edx,0x3b
c00089d3:	75 17                	jne    c00089ec <VgaText::putchar(char)+0x84>
c00089d5:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00089d9:	50                   	push   eax
c00089da:	53                   	push   ebx
c00089db:	e8 40 fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c00089e0:	59                   	pop    ecx
c00089e1:	31 d2                	xor    edx,edx
c00089e3:	5f                   	pop    edi
c00089e4:	31 c0                	xor    eax,eax
c00089e6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00089ea:	eb 09                	jmp    c00089f5 <VgaText::putchar(char)+0x8d>
c00089ec:	6b c0 0a             	imul   eax,eax,0xa
c00089ef:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089f3:	88 ca                	mov    dl,cl
c00089f5:	46                   	inc    esi
c00089f6:	eb ce                	jmp    c00089c6 <VgaText::putchar(char)+0x5e>
c00089f8:	84 d2                	test   dl,dl
c00089fa:	74 2f                	je     c0008a2b <VgaText::putchar(char)+0xc3>
c00089fc:	50                   	push   eax
c00089fd:	53                   	push   ebx
c00089fe:	e8 1d fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c0008a03:	58                   	pop    eax
c0008a04:	5a                   	pop    edx
c0008a05:	eb 24                	jmp    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a07:	83 f8 4a             	cmp    eax,0x4a
c0008a0a:	75 1f                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a0c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a10:	75 19                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a12:	83 ec 0c             	sub    esp,0xc
c0008a15:	53                   	push   ebx
c0008a16:	e8 89 fd ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008a1b:	83 c4 0c             	add    esp,0xc
c0008a1e:	6a 00                	push   0x0
c0008a20:	6a 00                	push   0x0
c0008a22:	53                   	push   ebx
c0008a23:	e8 1a fd ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008a28:	83 c4 10             	add    esp,0x10
c0008a2b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a31:	eb 26                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a33:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a36:	83 f8 0e             	cmp    eax,0xe
c0008a39:	7f 1e                	jg     c0008a59 <VgaText::putchar(char)+0xf1>
c0008a3b:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a3e:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a41:	89 f9                	mov    ecx,edi
c0008a43:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0008a47:	eb 10                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a49:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a4c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a4f:	50                   	push   eax
c0008a50:	53                   	push   ebx
c0008a51:	e8 42 fe ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a56:	83 c4 10             	add    esp,0x10
c0008a59:	83 c4 10             	add    esp,0x10
c0008a5c:	5b                   	pop    ebx
c0008a5d:	5e                   	pop    esi
c0008a5e:	5f                   	pop    edi
c0008a5f:	c3                   	ret    

c0008a60 <VgaText::putx(unsigned int)>:
c0008a60:	57                   	push   edi
c0008a61:	b9 11 00 00 00       	mov    ecx,0x11
c0008a66:	56                   	push   esi
c0008a67:	be ce 08 02 c0       	mov    esi,0xc00208ce
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 20             	sub    esp,0x20
c0008a70:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a74:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a78:	fc                   	cld    
c0008a79:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a7b:	be 08 00 00 00       	mov    esi,0x8
c0008a80:	50                   	push   eax
c0008a81:	50                   	push   eax
c0008a82:	89 d8                	mov    eax,ebx
c0008a84:	c1 e3 04             	shl    ebx,0x4
c0008a87:	c1 e8 1c             	shr    eax,0x1c
c0008a8a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a8f:	50                   	push   eax
c0008a90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a94:	e8 cf fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008a99:	83 c4 10             	add    esp,0x10
c0008a9c:	4e                   	dec    esi
c0008a9d:	75 e1                	jne    c0008a80 <VgaText::putx(unsigned int)+0x20>
c0008a9f:	83 c4 20             	add    esp,0x20
c0008aa2:	5b                   	pop    ebx
c0008aa3:	5e                   	pop    esi
c0008aa4:	5f                   	pop    edi
c0008aa5:	c3                   	ret    

c0008aa6 <VgaText::puts(char const*)>:
c0008aa6:	53                   	push   ebx
c0008aa7:	83 ec 08             	sub    esp,0x8
c0008aaa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008aae:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ab1:	85 c0                	test   eax,eax
c0008ab3:	74 12                	je     c0008ac7 <VgaText::puts(char const*)+0x21>
c0008ab5:	43                   	inc    ebx
c0008ab6:	51                   	push   ecx
c0008ab7:	51                   	push   ecx
c0008ab8:	50                   	push   eax
c0008ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008abd:	e8 a6 fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ac2:	83 c4 10             	add    esp,0x10
c0008ac5:	eb e7                	jmp    c0008aae <VgaText::puts(char const*)+0x8>
c0008ac7:	83 c4 08             	add    esp,0x8
c0008aca:	5b                   	pop    ebx
c0008acb:	c3                   	ret    

c0008acc <VgaText::write(unsigned long long, void*, int*)>:
c0008acc:	55                   	push   ebp
c0008acd:	57                   	push   edi
c0008ace:	56                   	push   esi
c0008acf:	53                   	push   ebx
c0008ad0:	83 ec 0c             	sub    esp,0xc
c0008ad3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008ad7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008adb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008adf:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008ae6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008ae9:	39 eb                	cmp    ebx,ebp
c0008aeb:	74 13                	je     c0008b00 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008aed:	43                   	inc    ebx
c0008aee:	50                   	push   eax
c0008aef:	50                   	push   eax
c0008af0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008af4:	50                   	push   eax
c0008af5:	56                   	push   esi
c0008af6:	e8 6d fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008afb:	83 c4 10             	add    esp,0x10
c0008afe:	eb e9                	jmp    c0008ae9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b00:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b0b:	89 38                	mov    DWORD PTR [eax],edi
c0008b0d:	83 c4 0c             	add    esp,0xc
c0008b10:	31 c0                	xor    eax,eax
c0008b12:	5b                   	pop    ebx
c0008b13:	5e                   	pop    esi
c0008b14:	5f                   	pop    edi
c0008b15:	5d                   	pop    ebp
c0008b16:	c3                   	ret    
c0008b17:	90                   	nop

c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b18:	55                   	push   ebp
c0008b19:	57                   	push   edi
c0008b1a:	56                   	push   esi
c0008b1b:	53                   	push   ebx
c0008b1c:	83 ec 0c             	sub    esp,0xc
c0008b1f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008b23:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b28:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008b2f:	50                   	push   eax
c0008b30:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b35:	50                   	push   eax
c0008b36:	e8 b3 fa ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008b3b:	5a                   	pop    edx
c0008b3c:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b40:	59                   	pop    ecx
c0008b41:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b44:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b48:	0f b7 f6             	movzx  esi,si
c0008b4b:	0f b6 e8             	movzx  ebp,al
c0008b4e:	01 f6                	add    esi,esi
c0008b50:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b53:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008b56:	85 c0                	test   eax,eax
c0008b58:	0f 84 ef 00 00 00    	je     c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b5e:	83 f8 0d             	cmp    eax,0xd
c0008b61:	75 0c                	jne    c0008b6f <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b63:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b6a:	e9 d8 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b6f:	83 f8 0a             	cmp    eax,0xa
c0008b72:	75 44                	jne    c0008bb8 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b74:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008b77:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b7e:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b81:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008b84:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008b87:	75 0f                	jne    c0008b98 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b89:	83 ec 0c             	sub    esp,0xc
c0008b8c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008b8f:	53                   	push   ebx
c0008b90:	e8 6b fa ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008b95:	83 c4 10             	add    esp,0x10
c0008b98:	83 ec 0c             	sub    esp,0xc
c0008b9b:	53                   	push   ebx
c0008b9c:	e8 69 f9 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008ba1:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008bab:	0f b7 f6             	movzx  esi,si
c0008bae:	01 f6                	add    esi,esi
c0008bb0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bb3:	e9 8f 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bb8:	83 f8 08             	cmp    eax,0x8
c0008bbb:	75 34                	jne    c0008bf1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bbd:	51                   	push   ecx
c0008bbe:	51                   	push   ecx
c0008bbf:	6a 01                	push   0x1
c0008bc1:	53                   	push   ebx
c0008bc2:	e8 af fc ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008bc7:	5e                   	pop    esi
c0008bc8:	58                   	pop    eax
c0008bc9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bcc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bcf:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bd2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bd5:	6a 20                	push   0x20
c0008bd7:	53                   	push   ebx
c0008bd8:	e8 c5 fa ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bdd:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008be1:	83 c4 20             	add    esp,0x20
c0008be4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008be7:	0f b7 f6             	movzx  esi,si
c0008bea:	01 f6                	add    esi,esi
c0008bec:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bef:	eb 56                	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bf1:	52                   	push   edx
c0008bf2:	52                   	push   edx
c0008bf3:	55                   	push   ebp
c0008bf4:	50                   	push   eax
c0008bf5:	e8 98 fa ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c0008bfa:	83 c4 10             	add    esp,0x10
c0008bfd:	66 89 06             	mov    WORD PTR [esi],ax
c0008c00:	39 1d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebx
c0008c06:	75 1d                	jne    c0008c25 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c08:	83 ec 0c             	sub    esp,0xc
c0008c0b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008c0e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008c11:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c15:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c19:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008c1c:	50                   	push   eax
c0008c1d:	e8 5a fc 00 00       	call   c001887c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c22:	83 c4 20             	add    esp,0x20
c0008c25:	83 c6 02             	add    esi,0x2
c0008c28:	50                   	push   eax
c0008c29:	50                   	push   eax
c0008c2a:	6a 00                	push   0x0
c0008c2c:	53                   	push   ebx
c0008c2d:	e8 f0 fb ff ff       	call   c0008822 <VgaText::incrementCursor(bool)>
c0008c32:	83 c4 10             	add    esp,0x10
c0008c35:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008c39:	75 0c                	jne    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c3b:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c3f:	0f b7 f6             	movzx  esi,si
c0008c42:	01 f6                	add    esi,esi
c0008c44:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c47:	47                   	inc    edi
c0008c48:	e9 06 ff ff ff       	jmp    c0008b53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c4d:	83 ec 0c             	sub    esp,0xc
c0008c50:	53                   	push   ebx
c0008c51:	e8 b4 f8 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008c56:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c5d:	83 c4 1c             	add    esp,0x1c
c0008c60:	5b                   	pop    ebx
c0008c61:	5e                   	pop    esi
c0008c62:	5f                   	pop    edi
c0008c63:	5d                   	pop    ebp
c0008c64:	c3                   	ret    
c0008c65:	90                   	nop

c0008c66 <VgaText::VgaText(char const*)>:
c0008c66:	56                   	push   esi
c0008c67:	53                   	push   ebx
c0008c68:	83 ec 04             	sub    esp,0x4
c0008c6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c6f:	83 ec 08             	sub    esp,0x8
c0008c72:	6a 00                	push   0x0
c0008c74:	50                   	push   eax
c0008c75:	e8 44 05 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c0008c7a:	83 c4 10             	add    esp,0x10
c0008c7d:	ba f4 08 02 c0       	mov    edx,0xc00208f4
c0008c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c86:	89 10                	mov    DWORD PTR [eax],edx
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c97:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca2:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caa:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb2:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbd:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc8:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008ccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd3:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cde:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ce5:	83 ec 0c             	sub    esp,0xc
c0008ce8:	6a 01                	push   0x1
c0008cea:	e8 1e 09 00 00       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0008cef:	83 c4 10             	add    esp,0x10
c0008cf2:	89 c2                	mov    edx,eax
c0008cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008cfb:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c0008d01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d05:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d08:	89 c6                	mov    esi,eax
c0008d0a:	e8 b0 f0 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0008d0f:	68 05 0c 00 00       	push   0xc05
c0008d14:	56                   	push   esi
c0008d15:	50                   	push   eax
c0008d16:	53                   	push   ebx
c0008d17:	e8 04 10 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d1c:	83 c4 10             	add    esp,0x10
c0008d1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d23:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d26:	83 ec 04             	sub    esp,0x4
c0008d29:	68 a0 0f 00 00       	push   0xfa0
c0008d2e:	6a 00                	push   0x0
c0008d30:	50                   	push   eax
c0008d31:	e8 ba 77 ff ff       	call   c00004f0 <memset>
c0008d36:	83 c4 10             	add    esp,0x10
c0008d39:	83 ec 04             	sub    esp,0x4
c0008d3c:	6a 00                	push   0x0
c0008d3e:	6a 07                	push   0x7
c0008d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d44:	e8 6b f8 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	83 ec 04             	sub    esp,0x4
c0008d4f:	6a 00                	push   0x0
c0008d51:	6a 00                	push   0x0
c0008d53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d57:	e8 e6 f9 ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008d5c:	83 c4 10             	add    esp,0x10
c0008d5f:	83 ec 0c             	sub    esp,0xc
c0008d62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d66:	e8 39 fa ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008d6b:	83 c4 10             	add    esp,0x10
c0008d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d72:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d7a:	05 82 00 00 00       	add    eax,0x82
c0008d7f:	83 ec 04             	sub    esp,0x4
c0008d82:	68 80 00 00 00       	push   0x80
c0008d87:	6a 00                	push   0x0
c0008d89:	50                   	push   eax
c0008d8a:	e8 61 77 ff ff       	call   c00004f0 <memset>
c0008d8f:	83 c4 10             	add    esp,0x10
c0008d92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d96:	05 02 01 00 00       	add    eax,0x102
c0008d9b:	83 ec 04             	sub    esp,0x4
c0008d9e:	68 80 00 00 00       	push   0x80
c0008da3:	6a 00                	push   0x0
c0008da5:	50                   	push   eax
c0008da6:	e8 45 77 ff ff       	call   c00004f0 <memset>
c0008dab:	83 c4 10             	add    esp,0x10
c0008dae:	90                   	nop
c0008daf:	83 c4 04             	add    esp,0x4
c0008db2:	5b                   	pop    ebx
c0008db3:	5e                   	pop    esi
c0008db4:	c3                   	ret    
c0008db5:	90                   	nop

c0008db6 <VgaText::receiveKey(unsigned char)>:
c0008db6:	55                   	push   ebp
c0008db7:	57                   	push   edi
c0008db8:	56                   	push   esi
c0008db9:	53                   	push   ebx
c0008dba:	83 ec 2c             	sub    esp,0x2c
c0008dbd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0008dc1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dc5:	89 ef                	mov    edi,ebp
c0008dc7:	81 e7 ff 00 00 00    	and    edi,0xff
c0008dcd:	0f 84 66 01 00 00    	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008dd3:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008dd9:	83 ff 08             	cmp    edi,0x8
c0008ddc:	75 73                	jne    c0008e51 <VgaText::receiveKey(unsigned char)+0x9b>
c0008dde:	83 ec 0c             	sub    esp,0xc
c0008de1:	56                   	push   esi
c0008de2:	e8 89 77 ff ff       	call   c0000570 <strlen>
c0008de7:	83 c4 10             	add    esp,0x10
c0008dea:	85 c0                	test   eax,eax
c0008dec:	0f 84 02 01 00 00    	je     c0008ef4 <VgaText::receiveKey(unsigned char)+0x13e>
c0008df2:	50                   	push   eax
c0008df3:	50                   	push   eax
c0008df4:	6a 08                	push   0x8
c0008df6:	53                   	push   ebx
c0008df7:	e8 6c fb ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008dfc:	89 34 24             	mov    DWORD PTR [esp],esi
c0008dff:	e8 6c 77 ff ff       	call   c0000570 <strlen>
c0008e04:	83 c4 10             	add    esp,0x10
c0008e07:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e0f:	83 fa 0d             	cmp    edx,0xd
c0008e12:	89 d0                	mov    eax,edx
c0008e14:	0f 95 c1             	setne  cl
c0008e17:	83 fa 1f             	cmp    edx,0x1f
c0008e1a:	0f 9e c2             	setle  dl
c0008e1d:	0f b6 d2             	movzx  edx,dl
c0008e20:	85 ca                	test   edx,ecx
c0008e22:	74 17                	je     c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e24:	83 e8 08             	sub    eax,0x8
c0008e27:	3c 02                	cmp    al,0x2
c0008e29:	76 10                	jbe    c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e2b:	55                   	push   ebp
c0008e2c:	55                   	push   ebp
c0008e2d:	68 df 08 02 c0       	push   0xc00208df
c0008e32:	53                   	push   ebx
c0008e33:	e8 6e fc ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0008e38:	83 c4 10             	add    esp,0x10
c0008e3b:	83 ec 0c             	sub    esp,0xc
c0008e3e:	56                   	push   esi
c0008e3f:	e8 2c 77 ff ff       	call   c0000570 <strlen>
c0008e44:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e4c:	e9 a0 00 00 00       	jmp    c0008ef1 <VgaText::receiveKey(unsigned char)+0x13b>
c0008e51:	83 ec 0c             	sub    esp,0xc
c0008e54:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e5a:	50                   	push   eax
c0008e5b:	e8 10 77 ff ff       	call   c0000570 <strlen>
c0008e60:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e63:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e67:	e8 04 77 ff ff       	call   c0000570 <strlen>
c0008e6c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e70:	83 c4 10             	add    esp,0x10
c0008e73:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e77:	3d 80 00 00 00       	cmp    eax,0x80
c0008e7c:	0f 87 b7 00 00 00    	ja     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008e82:	8d 45 ff             	lea    eax,[ebp-0x1]
c0008e85:	8d 55 f7             	lea    edx,[ebp-0x9]
c0008e88:	3c 1e                	cmp    al,0x1e
c0008e8a:	0f 96 c0             	setbe  al
c0008e8d:	80 fa 01             	cmp    dl,0x1
c0008e90:	0f 97 c2             	seta   dl
c0008e93:	0f b6 d2             	movzx  edx,dl
c0008e96:	85 c2                	test   edx,eax
c0008e98:	74 2e                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9a:	83 ff 0d             	cmp    edi,0xd
c0008e9d:	74 29                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ea5:	68 e5 08 02 c0       	push   0xc00208e5
c0008eaa:	53                   	push   ebx
c0008eab:	e8 68 fc ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008eb0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008eb3:	8d 45 40             	lea    eax,[ebp+0x40]
c0008eb6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eb9:	0f b6 c0             	movzx  eax,al
c0008ebc:	50                   	push   eax
c0008ebd:	53                   	push   ebx
c0008ebe:	e8 d5 f9 ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ec3:	83 c4 20             	add    esp,0x20
c0008ec6:	eb 11                	jmp    c0008ed9 <VgaText::receiveKey(unsigned char)+0x123>
c0008ec8:	89 e8                	mov    eax,ebp
c0008eca:	51                   	push   ecx
c0008ecb:	0f be c0             	movsx  eax,al
c0008ece:	51                   	push   ecx
c0008ecf:	50                   	push   eax
c0008ed0:	53                   	push   ebx
c0008ed1:	e8 92 fa ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ed6:	83 c4 10             	add    esp,0x10
c0008ed9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ede:	89 e8                	mov    eax,ebp
c0008ee0:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ee4:	52                   	push   edx
c0008ee5:	52                   	push   edx
c0008ee6:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008eea:	50                   	push   eax
c0008eeb:	56                   	push   esi
c0008eec:	e8 4f 79 ff ff       	call   c0000840 <strcat>
c0008ef1:	83 c4 10             	add    esp,0x10
c0008ef4:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0008efa:	b0 01                	mov    al,0x1
c0008efc:	83 ff 1c             	cmp    edi,0x1c
c0008eff:	77 0e                	ja     c0008f0f <VgaText::receiveKey(unsigned char)+0x159>
c0008f01:	b8 08 04 00 10       	mov    eax,0x10000408
c0008f06:	89 f9                	mov    ecx,edi
c0008f08:	d3 e8                	shr    eax,cl
c0008f0a:	f7 d0                	not    eax
c0008f0c:	83 e0 01             	and    eax,0x1
c0008f0f:	84 c0                	test   al,al
c0008f11:	74 04                	je     c0008f17 <VgaText::receiveKey(unsigned char)+0x161>
c0008f13:	84 d2                	test   dl,dl
c0008f15:	74 22                	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008f17:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f1d:	50                   	push   eax
c0008f1e:	50                   	push   eax
c0008f1f:	56                   	push   esi
c0008f20:	53                   	push   ebx
c0008f21:	e8 1a 79 ff ff       	call   c0000840 <strcat>
c0008f26:	83 c4 0c             	add    esp,0xc
c0008f29:	68 80 00 00 00       	push   0x80
c0008f2e:	6a 00                	push   0x0
c0008f30:	56                   	push   esi
c0008f31:	e8 ba 75 ff ff       	call   c00004f0 <memset>
c0008f36:	83 c4 10             	add    esp,0x10
c0008f39:	83 c4 2c             	add    esp,0x2c
c0008f3c:	5b                   	pop    ebx
c0008f3d:	5e                   	pop    esi
c0008f3e:	5f                   	pop    edi
c0008f3f:	5d                   	pop    ebp
c0008f40:	c3                   	ret    
c0008f41:	90                   	nop

c0008f42 <VgaText::doUpdate()>:
c0008f42:	c3                   	ret    
c0008f43:	90                   	nop

c0008f44 <TSS::TSS()>:
c0008f44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f48:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f4f:	90                   	nop
c0008f50:	c3                   	ret    
c0008f51:	90                   	nop
c0008f52:	66 90                	xchg   ax,ax

c0008f54 <TSS::setESP(unsigned long)>:
c0008f54:	55                   	push   ebp
c0008f55:	89 e5                	mov    ebp,esp
c0008f57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f5d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f60:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f63:	90                   	nop
c0008f64:	5d                   	pop    ebp
c0008f65:	c3                   	ret    
c0008f66:	66 90                	xchg   ax,ax

c0008f68 <TSS::flush()>:
c0008f68:	55                   	push   ebp
c0008f69:	89 e5                	mov    ebp,esp
c0008f6b:	83 ec 10             	sub    esp,0x10
c0008f6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f71:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f73:	83 c8 03             	or     eax,0x3
c0008f76:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f7a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f7e:	66 89 d0             	mov    ax,dx
c0008f81:	0f 00 d8             	ltr    ax
c0008f84:	90                   	nop
c0008f85:	c9                   	leave  
c0008f86:	c3                   	ret    
c0008f87:	90                   	nop

c0008f88 <TSS::setup(unsigned long, unsigned long)>:
c0008f88:	55                   	push   ebp
c0008f89:	89 e5                	mov    ebp,esp
c0008f8b:	83 ec 18             	sub    esp,0x18
c0008f8e:	83 ec 0c             	sub    esp,0xc
c0008f91:	6a 68                	push   0x68
c0008f93:	e8 1e eb ff ff       	call   c0007ab6 <malloc>
c0008f98:	83 c4 10             	add    esp,0x10
c0008f9b:	89 c2                	mov    edx,eax
c0008f9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa9:	83 ec 04             	sub    esp,0x4
c0008fac:	6a 68                	push   0x68
c0008fae:	6a 00                	push   0x0
c0008fb0:	50                   	push   eax
c0008fb1:	e8 3a 75 ff ff       	call   c00004f0 <memset>
c0008fb6:	83 c4 10             	add    esp,0x10
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fda:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000902e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009034:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009037:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000903a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000903d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009040:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009043:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000904a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000904d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009050:	0f 20 da             	mov    edx,cr3
c0009053:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009056:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009059:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000905c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000905f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009062:	83 ec 08             	sub    esp,0x8
c0009065:	50                   	push   eax
c0009066:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009069:	50                   	push   eax
c000906a:	e8 b3 e2 ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c000906f:	83 c4 10             	add    esp,0x10
c0009072:	83 ec 08             	sub    esp,0x8
c0009075:	6a 68                	push   0x68
c0009077:	8d 45 ec             	lea    eax,[ebp-0x14]
c000907a:	50                   	push   eax
c000907b:	e8 be e2 ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c0009080:	83 c4 10             	add    esp,0x10
c0009083:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0009087:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000908a:	83 e0 0f             	and    eax,0xf
c000908d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009090:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009093:	83 c8 40             	or     eax,0x40
c0009096:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009099:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000909e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090a4:	05 78 01 00 00       	add    eax,0x178
c00090a9:	83 ec 04             	sub    esp,0x4
c00090ac:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00090af:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00090b2:	50                   	push   eax
c00090b3:	e8 ba e2 ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00090b8:	83 c4 10             	add    esp,0x10
c00090bb:	89 c2                	mov    edx,eax
c00090bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c0:	89 10                	mov    DWORD PTR [eax],edx
c00090c2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00090c7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090cd:	05 78 01 00 00       	add    eax,0x178
c00090d2:	83 ec 0c             	sub    esp,0xc
c00090d5:	50                   	push   eax
c00090d6:	e8 c1 e2 ff ff       	call   c000739c <GDT::flush()>
c00090db:	83 c4 10             	add    esp,0x10
c00090de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00090e3:	c9                   	leave  
c00090e4:	c3                   	ret    
c00090e5:	90                   	nop

c00090e6 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090f1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090f6:	75 08                	jne    c0009100 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090f8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090fe:	eb 38                	jmp    c0009138 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009100:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009105:	75 17                	jne    c000911e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0009107:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000910c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000910f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009115:	8b 10                	mov    edx,DWORD PTR [eax]
c0009117:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000911b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000911e:	89 c1                	mov    ecx,eax
c0009120:	83 e1 fd             	and    ecx,0xfffffffd
c0009123:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009129:	74 cd                	je     c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000912b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009130:	83 e0 ef             	and    eax,0xffffffef
c0009133:	83 f8 08             	cmp    eax,0x8
c0009136:	76 c0                	jbe    c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009138:	31 c0                	xor    eax,eax
c000913a:	c3                   	ret    
c000913b:	90                   	nop

c000913c <ReservedFilename::isAtty()>:
c000913c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009140:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009143:	31 c0                	xor    eax,eax
c0009145:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000914b:	74 09                	je     c0009156 <ReservedFilename::isAtty()+0x1a>
c000914d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0009153:	0f 94 c0             	sete   al
c0009156:	c3                   	ret    
c0009157:	90                   	nop

c0009158 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000915c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009160:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009163:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009167:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000916c:	75 08                	jne    c0009176 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000916e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009174:	eb 3d                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009176:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000917b:	75 17                	jne    c0009194 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000917d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009182:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009185:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000918b:	8b 10                	mov    edx,DWORD PTR [eax]
c000918d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009191:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0009194:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009199:	75 04                	jne    c000919f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000919b:	89 0a                	mov    DWORD PTR [edx],ecx
c000919d:	eb 14                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000919f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00091a4:	74 c8                	je     c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091a6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00091ab:	83 e0 ef             	and    eax,0xffffffef
c00091ae:	83 f8 08             	cmp    eax,0x8
c00091b1:	76 bb                	jbe    c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091b3:	31 c0                	xor    eax,eax
c00091b5:	c3                   	ret    

c00091b6 <UnixFile::getFileDescriptor()>:
c00091b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091bd:	c3                   	ret    

c00091be <UnixFile::UnixFile(int)>:
c00091be:	53                   	push   ebx
c00091bf:	83 ec 28             	sub    esp,0x28
c00091c2:	ba bc 09 02 c0       	mov    edx,0xc00209bc
c00091c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091cb:	89 10                	mov    DWORD PTR [eax],edx
c00091cd:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091d5:	0f 8f 90 01 00 00    	jg     c000936b <UnixFile::UnixFile(int)+0x1ad>
c00091db:	a1 e0 2f 02 c0       	mov    eax,ds:0xc0022fe0
c00091e0:	8d 50 01             	lea    edx,[eax+0x1]
c00091e3:	89 15 e0 2f 02 c0    	mov    DWORD PTR ds:0xc0022fe0,edx
c00091e9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091ed:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091f0:	83 ec 08             	sub    esp,0x8
c00091f3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091f7:	68 98 5f 02 c0       	push   0xc0025f98
c00091fc:	e8 87 62 01 00       	call   c001f488 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009201:	83 c4 10             	add    esp,0x10
c0009204:	a0 94 5f 02 c0       	mov    al,ds:0xc0025f94
c0009209:	83 f0 01             	xor    eax,0x1
c000920c:	0f b6 c0             	movzx  eax,al
c000920f:	85 c0                	test   eax,eax
c0009211:	0f 84 55 01 00 00    	je     c000936c <UnixFile::UnixFile(int)+0x1ae>
c0009217:	c6 05 94 5f 02 c0 01 	mov    BYTE PTR ds:0xc0025f94,0x1
c000921e:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0009226:	83 ec 0c             	sub    esp,0xc
c0009229:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000922d:	e8 84 e8 ff ff       	call   c0007ab6 <malloc>
c0009232:	83 c4 10             	add    esp,0x10
c0009235:	89 c3                	mov    ebx,eax
c0009237:	83 ec 08             	sub    esp,0x8
c000923a:	68 03 ff ff 0f       	push   0xfffff03
c000923f:	53                   	push   ebx
c0009240:	e8 2d 01 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009245:	83 c4 10             	add    esp,0x10
c0009248:	89 1d 8c 5f 02 c0    	mov    DWORD PTR ds:0xc0025f8c,ebx
c000924e:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0009256:	83 ec 0c             	sub    esp,0xc
c0009259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000925d:	e8 54 e8 ff ff       	call   c0007ab6 <malloc>
c0009262:	83 c4 10             	add    esp,0x10
c0009265:	89 c3                	mov    ebx,eax
c0009267:	83 ec 08             	sub    esp,0x8
c000926a:	68 01 ff ff 0f       	push   0xfffff01
c000926f:	53                   	push   ebx
c0009270:	e8 fd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009275:	83 c4 10             	add    esp,0x10
c0009278:	89 1d 90 5f 02 c0    	mov    DWORD PTR ds:0xc0025f90,ebx
c000927e:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0009286:	83 ec 0c             	sub    esp,0xc
c0009289:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000928d:	e8 24 e8 ff ff       	call   c0007ab6 <malloc>
c0009292:	83 c4 10             	add    esp,0x10
c0009295:	89 c3                	mov    ebx,eax
c0009297:	83 ec 08             	sub    esp,0x8
c000929a:	68 00 ff ff 0f       	push   0xfffff00
c000929f:	53                   	push   ebx
c00092a0:	e8 cd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 1d 84 5f 02 c0    	mov    DWORD PTR ds:0xc0025f84,ebx
c00092ae:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092b6:	83 ec 0c             	sub    esp,0xc
c00092b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bd:	e8 f4 e7 ff ff       	call   c0007ab6 <malloc>
c00092c2:	83 c4 10             	add    esp,0x10
c00092c5:	89 c3                	mov    ebx,eax
c00092c7:	83 ec 08             	sub    esp,0x8
c00092ca:	68 02 ff ff 0f       	push   0xfffff02
c00092cf:	53                   	push   ebx
c00092d0:	e8 9d 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092d5:	83 c4 10             	add    esp,0x10
c00092d8:	89 1d 88 5f 02 c0    	mov    DWORD PTR ds:0xc0025f88,ebx
c00092de:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092e6:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092eb:	7f 7f                	jg     c000936c <UnixFile::UnixFile(int)+0x1ae>
c00092ed:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092f5:	83 ec 0c             	sub    esp,0xc
c00092f8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092fc:	e8 b5 e7 ff ff       	call   c0007ab6 <malloc>
c0009301:	83 c4 10             	add    esp,0x10
c0009304:	89 c3                	mov    ebx,eax
c0009306:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000930a:	05 10 ff ff 0f       	add    eax,0xfffff10
c000930f:	83 ec 08             	sub    esp,0x8
c0009312:	50                   	push   eax
c0009313:	53                   	push   ebx
c0009314:	e8 59 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009319:	83 c4 10             	add    esp,0x10
c000931c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009320:	89 1c 85 60 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0a0],ebx
c0009327:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000932f:	83 ec 0c             	sub    esp,0xc
c0009332:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009336:	e8 7b e7 ff ff       	call   c0007ab6 <malloc>
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	89 c3                	mov    ebx,eax
c0009340:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009344:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009349:	83 ec 08             	sub    esp,0x8
c000934c:	50                   	push   eax
c000934d:	53                   	push   ebx
c000934e:	e8 1f 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009353:	83 c4 10             	add    esp,0x10
c0009356:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000935a:	89 1c 85 20 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0e0],ebx
c0009361:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009366:	e9 7b ff ff ff       	jmp    c00092e6 <UnixFile::UnixFile(int)+0x128>
c000936b:	90                   	nop
c000936c:	83 c4 28             	add    esp,0x28
c000936f:	5b                   	pop    ebx
c0009370:	c3                   	ret    
c0009371:	90                   	nop

c0009372 <ReservedFilename::ReservedFilename(int)>:
c0009372:	83 ec 0c             	sub    esp,0xc
c0009375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009379:	83 ec 08             	sub    esp,0x8
c000937c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009380:	50                   	push   eax
c0009381:	e8 38 fe ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c0009386:	83 c4 10             	add    esp,0x10
c0009389:	ba d8 09 02 c0       	mov    edx,0xc00209d8
c000938e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009392:	89 10                	mov    DWORD PTR [eax],edx
c0009394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009398:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000939c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000939f:	90                   	nop
c00093a0:	83 c4 0c             	add    esp,0xc
c00093a3:	c3                   	ret    

c00093a4 <UnixFile::~UnixFile()>:
c00093a4:	83 ec 1c             	sub    esp,0x1c
c00093a7:	ba bc 09 02 c0       	mov    edx,0xc00209bc
c00093ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b0:	89 10                	mov    DWORD PTR [eax],edx
c00093b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093b9:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093be:	7f 76                	jg     c0009436 <UnixFile::~UnixFile()+0x92>
c00093c0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093c8:	83 ec 0c             	sub    esp,0xc
c00093cb:	68 98 5f 02 c0       	push   0xc0025f98
c00093d0:	e8 87 61 01 00       	call   c001f55c <LinkedList<UnixFile>::getFirstElement()>
c00093d5:	83 c4 10             	add    esp,0x10
c00093d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093dc:	83 ec 0c             	sub    esp,0xc
c00093df:	68 98 5f 02 c0       	push   0xc0025f98
c00093e4:	e8 7b 61 01 00       	call   c001f564 <LinkedList<UnixFile>::removeFirst()>
c00093e9:	83 c4 10             	add    esp,0x10
c00093ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093f0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093f4:	74 43                	je     c0009439 <UnixFile::~UnixFile()+0x95>
c00093f6:	83 ec 08             	sub    esp,0x8
c00093f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093fd:	68 98 5f 02 c0       	push   0xc0025f98
c0009402:	e8 81 60 01 00       	call   c001f488 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009407:	83 c4 10             	add    esp,0x10
c000940a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000940e:	8d 50 01             	lea    edx,[eax+0x1]
c0009411:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009415:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000941a:	0f 94 c0             	sete   al
c000941d:	0f b6 c0             	movzx  eax,al
c0009420:	85 c0                	test   eax,eax
c0009422:	74 a4                	je     c00093c8 <UnixFile::~UnixFile()+0x24>
c0009424:	83 ec 0c             	sub    esp,0xc
c0009427:	68 94 09 02 c0       	push   0xc0020994
c000942c:	e8 38 7e 00 00       	call   c0011269 <KePanic(char const*)>
c0009431:	83 c4 10             	add    esp,0x10
c0009434:	eb 92                	jmp    c00093c8 <UnixFile::~UnixFile()+0x24>
c0009436:	90                   	nop
c0009437:	eb 01                	jmp    c000943a <UnixFile::~UnixFile()+0x96>
c0009439:	90                   	nop
c000943a:	90                   	nop
c000943b:	83 c4 1c             	add    esp,0x1c
c000943e:	c3                   	ret    
c000943f:	90                   	nop

c0009440 <UnixFile::~UnixFile()>:
c0009440:	83 ec 0c             	sub    esp,0xc
c0009443:	83 ec 0c             	sub    esp,0xc
c0009446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000944a:	e8 55 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000944f:	83 c4 10             	add    esp,0x10
c0009452:	83 ec 08             	sub    esp,0x8
c0009455:	6a 0c                	push   0xc
c0009457:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000945b:	e8 b8 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0009460:	83 c4 10             	add    esp,0x10
c0009463:	83 c4 0c             	add    esp,0xc
c0009466:	c3                   	ret    
c0009467:	90                   	nop

c0009468 <ReservedFilename::~ReservedFilename()>:
c0009468:	83 ec 0c             	sub    esp,0xc
c000946b:	ba d8 09 02 c0       	mov    edx,0xc00209d8
c0009470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009474:	89 10                	mov    DWORD PTR [eax],edx
c0009476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000947a:	83 ec 0c             	sub    esp,0xc
c000947d:	50                   	push   eax
c000947e:	e8 21 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c0009483:	83 c4 10             	add    esp,0x10
c0009486:	90                   	nop
c0009487:	83 c4 0c             	add    esp,0xc
c000948a:	c3                   	ret    
c000948b:	90                   	nop

c000948c <ReservedFilename::~ReservedFilename()>:
c000948c:	83 ec 0c             	sub    esp,0xc
c000948f:	83 ec 0c             	sub    esp,0xc
c0009492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009496:	e8 cd ff ff ff       	call   c0009468 <ReservedFilename::~ReservedFilename()>
c000949b:	83 c4 10             	add    esp,0x10
c000949e:	83 ec 08             	sub    esp,0x8
c00094a1:	6a 0c                	push   0xc
c00094a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094a7:	e8 6c 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00094ac:	83 c4 10             	add    esp,0x10
c00094af:	83 c4 0c             	add    esp,0xc
c00094b2:	c3                   	ret    

c00094b3 <KeGetFileFromDescriptor(int)>:
c00094b3:	53                   	push   ebx
c00094b4:	83 ec 08             	sub    esp,0x8
c00094b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094bb:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094c1:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094c7:	7f 2c                	jg     c00094f5 <KeGetFileFromDescriptor(int)+0x42>
c00094c9:	83 ec 0c             	sub    esp,0xc
c00094cc:	68 98 5f 02 c0       	push   0xc0025f98
c00094d1:	e8 86 60 01 00       	call   c001f55c <LinkedList<UnixFile>::getFirstElement()>
c00094d6:	83 c4 10             	add    esp,0x10
c00094d9:	85 c0                	test   eax,eax
c00094db:	75 04                	jne    c00094e1 <KeGetFileFromDescriptor(int)+0x2e>
c00094dd:	31 c0                	xor    eax,eax
c00094df:	eb 6e                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e1:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094e4:	74 69                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e6:	52                   	push   edx
c00094e7:	52                   	push   edx
c00094e8:	50                   	push   eax
c00094e9:	68 98 5f 02 c0       	push   0xc0025f98
c00094ee:	e8 13 61 01 00       	call   c001f606 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094f3:	eb e1                	jmp    c00094d6 <KeGetFileFromDescriptor(int)+0x23>
c00094f5:	a1 8c 5f 02 c0       	mov    eax,ds:0xc0025f8c
c00094fa:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009500:	74 4d                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009502:	a1 90 5f 02 c0       	mov    eax,ds:0xc0025f90
c0009507:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000950d:	74 40                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000950f:	a1 88 5f 02 c0       	mov    eax,ds:0xc0025f88
c0009514:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000951a:	74 33                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000951c:	a1 84 5f 02 c0       	mov    eax,ds:0xc0025f84
c0009521:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0009527:	74 26                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009529:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000952f:	83 f8 08             	cmp    eax,0x8
c0009532:	77 09                	ja     c000953d <KeGetFileFromDescriptor(int)+0x8a>
c0009534:	8b 04 85 60 5f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda0a0]
c000953b:	eb 12                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000953d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009543:	83 fb 08             	cmp    ebx,0x8
c0009546:	77 95                	ja     c00094dd <KeGetFileFromDescriptor(int)+0x2a>
c0009548:	8b 04 9d 20 5f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda0e0]
c000954f:	83 c4 08             	add    esp,0x8
c0009552:	5b                   	pop    ebx
c0009553:	c3                   	ret    

c0009554 <__static_initialization_and_destruction_0(int, int)>:
c0009554:	83 ec 0c             	sub    esp,0xc
c0009557:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000955c:	75 34                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000955e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0009566:	75 2a                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009568:	83 ec 0c             	sub    esp,0xc
c000956b:	68 98 5f 02 c0       	push   0xc0025f98
c0009570:	e8 d1 5e 01 00       	call   c001f446 <LinkedList<UnixFile>::LinkedList()>
c0009575:	83 c4 10             	add    esp,0x10
c0009578:	83 ec 04             	sub    esp,0x4
c000957b:	68 70 2f 02 c0       	push   0xc0022f70
c0009580:	68 98 5f 02 c0       	push   0xc0025f98
c0009585:	68 44 f4 01 c0       	push   0xc001f444
c000958a:	e8 39 12 00 00       	call   c000a7c8 <__cxa_atexit>
c000958f:	83 c4 10             	add    esp,0x10
c0009592:	90                   	nop
c0009593:	83 c4 0c             	add    esp,0xc
c0009596:	c3                   	ret    

c0009597 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009597:	83 ec 0c             	sub    esp,0xc
c000959a:	83 ec 08             	sub    esp,0x8
c000959d:	68 ff ff 00 00       	push   0xffff
c00095a2:	6a 01                	push   0x1
c00095a4:	e8 ab ff ff ff       	call   c0009554 <__static_initialization_and_destruction_0(int, int)>
c00095a9:	83 c4 10             	add    esp,0x10
c00095ac:	83 c4 0c             	add    esp,0xc
c00095af:	c3                   	ret    

c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095b0:	53                   	push   ebx
c00095b1:	8b 15 e8 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022fe8
c00095b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095bf:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095c5:	89 d8                	mov    eax,ebx
c00095c7:	d1 e8                	shr    eax,1
c00095c9:	01 d0                	add    eax,edx
c00095cb:	80 e3 01             	and    bl,0x1
c00095ce:	8a 10                	mov    dl,BYTE PTR [eax]
c00095d0:	75 09                	jne    c00095db <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095d2:	83 e2 f0             	and    edx,0xfffffff0
c00095d5:	09 ca                	or     edx,ecx
c00095d7:	88 10                	mov    BYTE PTR [eax],dl
c00095d9:	5b                   	pop    ebx
c00095da:	c3                   	ret    
c00095db:	83 e2 0f             	and    edx,0xf
c00095de:	0f b6 c9             	movzx  ecx,cl
c00095e1:	c1 e1 04             	shl    ecx,0x4
c00095e4:	09 ca                	or     edx,ecx
c00095e6:	88 10                	mov    BYTE PTR [eax],dl
c00095e8:	5b                   	pop    ebx
c00095e9:	c3                   	ret    

c00095ea <Virt::getPageState(unsigned long)>:
c00095ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095ee:	8b 0d e8 2f 02 c0    	mov    ecx,DWORD PTR ds:0xc0022fe8
c00095f4:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095fa:	89 d0                	mov    eax,edx
c00095fc:	d1 e8                	shr    eax,1
c00095fe:	80 e2 01             	and    dl,0x1
c0009601:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009604:	74 03                	je     c0009609 <Virt::getPageState(unsigned long)+0x1f>
c0009606:	c1 e8 04             	shr    eax,0x4
c0009609:	83 e0 0f             	and    eax,0xf
c000960c:	c3                   	ret    

c000960d <Virt::allocateKernelVirtualPages(int)>:
c000960d:	55                   	push   ebp
c000960e:	31 ed                	xor    ebp,ebp
c0009610:	57                   	push   edi
c0009611:	31 ff                	xor    edi,edi
c0009613:	56                   	push   esi
c0009614:	53                   	push   ebx
c0009615:	31 db                	xor    ebx,ebx
c0009617:	83 ec 0c             	sub    esp,0xc
c000961a:	8b 35 e4 2f 02 c0    	mov    esi,DWORD PTR ds:0xc0022fe4
c0009620:	56                   	push   esi
c0009621:	e8 c4 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009626:	5a                   	pop    edx
c0009627:	84 c0                	test   al,al
c0009629:	75 41                	jne    c000966c <Virt::allocateKernelVirtualPages(int)+0x5f>
c000962b:	85 db                	test   ebx,ebx
c000962d:	75 02                	jne    c0009631 <Virt::allocateKernelVirtualPages(int)+0x24>
c000962f:	89 f5                	mov    ebp,esi
c0009631:	83 c3 01             	add    ebx,0x1
c0009634:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009638:	74 5f                	je     c0009699 <Virt::allocateKernelVirtualPages(int)+0x8c>
c000963a:	83 c6 01             	add    esi,0x1
c000963d:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009643:	76 34                	jbe    c0009679 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0009645:	c7 05 e4 2f 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0022fe4,0xc8000
c000964f:	f7 c7 01 00 00 00    	test   edi,0x1
c0009655:	75 2a                	jne    c0009681 <Virt::allocateKernelVirtualPages(int)+0x74>
c0009657:	be 00 80 0c 00       	mov    esi,0xc8000
c000965c:	bf 01 00 00 00       	mov    edi,0x1
c0009661:	56                   	push   esi
c0009662:	e8 83 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009667:	5a                   	pop    edx
c0009668:	84 c0                	test   al,al
c000966a:	74 bf                	je     c000962b <Virt::allocateKernelVirtualPages(int)+0x1e>
c000966c:	31 db                	xor    ebx,ebx
c000966e:	83 c6 01             	add    esi,0x1
c0009671:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009677:	77 cc                	ja     c0009645 <Virt::allocateKernelVirtualPages(int)+0x38>
c0009679:	89 35 e4 2f 02 c0    	mov    DWORD PTR ds:0xc0022fe4,esi
c000967f:	eb 9f                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009681:	83 ec 0c             	sub    esp,0xc
c0009684:	68 ec 09 02 c0       	push   0xc00209ec
c0009689:	e8 db 7b 00 00       	call   c0011269 <KePanic(char const*)>
c000968e:	8b 35 e4 2f 02 c0    	mov    esi,DWORD PTR ds:0xc0022fe4
c0009694:	83 c4 10             	add    esp,0x10
c0009697:	eb 87                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009699:	89 2d e4 2f 02 c0    	mov    DWORD PTR ds:0xc0022fe4,ebp
c000969f:	83 fb 01             	cmp    ebx,0x1
c00096a2:	74 6f                	je     c0009713 <Virt::allocateKernelVirtualPages(int)+0x106>
c00096a4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096a8:	85 c9                	test   ecx,ecx
c00096aa:	74 49                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096ac:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096b0:	89 e8                	mov    eax,ebp
c00096b2:	31 db                	xor    ebx,ebx
c00096b4:	8d 79 ff             	lea    edi,[ecx-0x1]
c00096b7:	eb 18                	jmp    c00096d1 <Virt::allocateKernelVirtualPages(int)+0xc4>
c00096b9:	6a 01                	push   0x1
c00096bb:	83 c3 01             	add    ebx,0x1
c00096be:	50                   	push   eax
c00096bf:	e8 ec fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096c4:	58                   	pop    eax
c00096c5:	5a                   	pop    edx
c00096c6:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096ca:	74 29                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096cc:	a1 e4 2f 02 c0       	mov    eax,ds:0xc0022fe4
c00096d1:	8d 50 01             	lea    edx,[eax+0x1]
c00096d4:	85 db                	test   ebx,ebx
c00096d6:	89 15 e4 2f 02 c0    	mov    DWORD PTR ds:0xc0022fe4,edx
c00096dc:	74 24                	je     c0009702 <Virt::allocateKernelVirtualPages(int)+0xf5>
c00096de:	39 df                	cmp    edi,ebx
c00096e0:	75 d7                	jne    c00096b9 <Virt::allocateKernelVirtualPages(int)+0xac>
c00096e2:	6a 03                	push   0x3
c00096e4:	83 c3 01             	add    ebx,0x1
c00096e7:	50                   	push   eax
c00096e8:	e8 c3 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ed:	59                   	pop    ecx
c00096ee:	5e                   	pop    esi
c00096ef:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096f3:	75 d7                	jne    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c00096f5:	83 c4 0c             	add    esp,0xc
c00096f8:	89 e8                	mov    eax,ebp
c00096fa:	5b                   	pop    ebx
c00096fb:	c1 e0 0c             	shl    eax,0xc
c00096fe:	5e                   	pop    esi
c00096ff:	5f                   	pop    edi
c0009700:	5d                   	pop    ebp
c0009701:	c3                   	ret    
c0009702:	6a 02                	push   0x2
c0009704:	bb 01 00 00 00       	mov    ebx,0x1
c0009709:	50                   	push   eax
c000970a:	e8 a1 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000970f:	58                   	pop    eax
c0009710:	5a                   	pop    edx
c0009711:	eb b9                	jmp    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c0009713:	6a 04                	push   0x4
c0009715:	8d 45 01             	lea    eax,[ebp+0x1]
c0009718:	55                   	push   ebp
c0009719:	a3 e4 2f 02 c0       	mov    ds:0xc0022fe4,eax
c000971e:	e8 8d fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009723:	5b                   	pop    ebx
c0009724:	89 e8                	mov    eax,ebp
c0009726:	5e                   	pop    esi
c0009727:	c1 e0 0c             	shl    eax,0xc
c000972a:	83 c4 0c             	add    esp,0xc
c000972d:	5b                   	pop    ebx
c000972e:	5e                   	pop    esi
c000972f:	5f                   	pop    edi
c0009730:	5d                   	pop    ebp
c0009731:	c3                   	ret    

c0009732 <Virt::freeSwapfilePage(unsigned long)>:
c0009732:	53                   	push   ebx
c0009733:	8b 15 ac 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fac
c0009739:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000973d:	b8 01 00 00 00       	mov    eax,0x1
c0009742:	89 cb                	mov    ebx,ecx
c0009744:	d3 e0                	shl    eax,cl
c0009746:	c1 eb 05             	shr    ebx,0x5
c0009749:	f7 d0                	not    eax
c000974b:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000974e:	21 c1                	and    ecx,eax
c0009750:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009753:	5b                   	pop    ebx
c0009754:	c3                   	ret    

c0009755 <Virt::swapIDToSector(unsigned long)>:
c0009755:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009759:	8b 15 ec 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022fec
c000975f:	8b 0d f4 2f 02 c0    	mov    ecx,DWORD PTR ds:0xc0022ff4
c0009765:	0f af c2             	imul   eax,edx
c0009768:	01 c8                	add    eax,ecx
c000976a:	c3                   	ret    

c000976b <Virt::allocateSwapfilePage()>:
c000976b:	55                   	push   ebp
c000976c:	31 d2                	xor    edx,edx
c000976e:	57                   	push   edi
c000976f:	56                   	push   esi
c0009770:	53                   	push   ebx
c0009771:	83 ec 0c             	sub    esp,0xc
c0009774:	8b 0d ec 2f 02 c0    	mov    ecx,DWORD PTR ds:0xc0022fec
c000977a:	a1 f0 2f 02 c0       	mov    eax,ds:0xc0022ff0
c000977f:	f7 f1                	div    ecx
c0009781:	39 0d f0 2f 02 c0    	cmp    DWORD PTR ds:0xc0022ff0,ecx
c0009787:	72 2f                	jb     c00097b8 <Virt::allocateSwapfilePage()+0x4d>
c0009789:	8b 35 ac 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fac
c000978f:	8b 16                	mov    edx,DWORD PTR [esi]
c0009791:	f6 c2 01             	test   dl,0x1
c0009794:	74 3e                	je     c00097d4 <Virt::allocateSwapfilePage()+0x69>
c0009796:	31 c9                	xor    ecx,ecx
c0009798:	bf 01 00 00 00       	mov    edi,0x1
c000979d:	eb 12                	jmp    c00097b1 <Virt::allocateSwapfilePage()+0x46>
c000979f:	89 fd                	mov    ebp,edi
c00097a1:	89 ca                	mov    edx,ecx
c00097a3:	d3 e5                	shl    ebp,cl
c00097a5:	c1 ea 05             	shr    edx,0x5
c00097a8:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00097ab:	8b 13                	mov    edx,DWORD PTR [ebx]
c00097ad:	85 ea                	test   edx,ebp
c00097af:	74 2c                	je     c00097dd <Virt::allocateSwapfilePage()+0x72>
c00097b1:	83 c1 01             	add    ecx,0x1
c00097b4:	39 c8                	cmp    eax,ecx
c00097b6:	77 e7                	ja     c000979f <Virt::allocateSwapfilePage()+0x34>
c00097b8:	83 ec 0c             	sub    esp,0xc
c00097bb:	68 80 0c 02 c0       	push   0xc0020c80
c00097c0:	e8 a4 7a 00 00       	call   c0011269 <KePanic(char const*)>
c00097c5:	83 c4 10             	add    esp,0x10
c00097c8:	31 c9                	xor    ecx,ecx
c00097ca:	83 c4 0c             	add    esp,0xc
c00097cd:	89 c8                	mov    eax,ecx
c00097cf:	5b                   	pop    ebx
c00097d0:	5e                   	pop    esi
c00097d1:	5f                   	pop    edi
c00097d2:	5d                   	pop    ebp
c00097d3:	c3                   	ret    
c00097d4:	89 f3                	mov    ebx,esi
c00097d6:	bd 01 00 00 00       	mov    ebp,0x1
c00097db:	31 c9                	xor    ecx,ecx
c00097dd:	09 ea                	or     edx,ebp
c00097df:	89 c8                	mov    eax,ecx
c00097e1:	89 13                	mov    DWORD PTR [ebx],edx
c00097e3:	83 c4 0c             	add    esp,0xc
c00097e6:	5b                   	pop    ebx
c00097e7:	5e                   	pop    esi
c00097e8:	5f                   	pop    edi
c00097e9:	5d                   	pop    ebp
c00097ea:	c3                   	ret    

c00097eb <Virt::virtualMemorySetup()>:
c00097eb:	53                   	push   ebx
c00097ec:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097f1:	6a 0f                	push   0xf
c00097f3:	53                   	push   ebx
c00097f4:	83 c3 01             	add    ebx,0x1
c00097f7:	e8 b4 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097fc:	58                   	pop    eax
c00097fd:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009803:	5a                   	pop    edx
c0009804:	75 eb                	jne    c00097f1 <Virt::virtualMemorySetup()+0x6>
c0009806:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000980b:	6a 00                	push   0x0
c000980d:	53                   	push   ebx
c000980e:	83 c3 01             	add    ebx,0x1
c0009811:	e8 9a fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009816:	59                   	pop    ecx
c0009817:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000981d:	58                   	pop    eax
c000981e:	75 eb                	jne    c000980b <Virt::virtualMemorySetup()+0x20>
c0009820:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009825:	6a 0f                	push   0xf
c0009827:	53                   	push   ebx
c0009828:	83 c3 01             	add    ebx,0x1
c000982b:	e8 80 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009830:	58                   	pop    eax
c0009831:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009837:	5a                   	pop    edx
c0009838:	75 eb                	jne    c0009825 <Virt::virtualMemorySetup()+0x3a>
c000983a:	5b                   	pop    ebx
c000983b:	c3                   	ret    

c000983c <Virt::setupPageSwapping(int)>:
c000983c:	53                   	push   ebx
c000983d:	83 ec 0c             	sub    esp,0xc
c0009840:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009844:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0009849:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000984f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009851:	53                   	push   ebx
c0009852:	c1 e3 0b             	shl    ebx,0xb
c0009855:	68 97 0c 02 c0       	push   0xc0020c97
c000985a:	50                   	push   eax
c000985b:	ff 52 60             	call   DWORD PTR [edx+0x60]
c000985e:	89 1d f0 2f 02 c0    	mov    DWORD PTR ds:0xc0022ff0,ebx
c0009864:	c6 05 f8 2f 02 c0 43 	mov    BYTE PTR ds:0xc0022ff8,0x43
c000986b:	c1 eb 08             	shr    ebx,0x8
c000986e:	a3 f4 2f 02 c0       	mov    ds:0xc0022ff4,eax
c0009873:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009876:	c7 05 ec 2f 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0022fec,0x8
c0009880:	e8 31 e2 ff ff       	call   c0007ab6 <malloc>
c0009885:	83 c4 0c             	add    esp,0xc
c0009888:	89 c1                	mov    ecx,eax
c000988a:	a3 ac 5f 02 c0       	mov    ds:0xc0025fac,eax
c000988f:	31 d2                	xor    edx,edx
c0009891:	a1 f0 2f 02 c0       	mov    eax,ds:0xc0022ff0
c0009896:	f7 35 ec 2f 02 c0    	div    DWORD PTR ds:0xc0022fec
c000989c:	c1 e8 05             	shr    eax,0x5
c000989f:	50                   	push   eax
c00098a0:	6a 00                	push   0x0
c00098a2:	51                   	push   ecx
c00098a3:	e8 48 6c ff ff       	call   c00004f0 <memset>
c00098a8:	83 c4 18             	add    esp,0x18
c00098ab:	5b                   	pop    ebx
c00098ac:	c3                   	ret    
c00098ad:	90                   	nop

c00098ae <VAS::setCPUSpecific(unsigned long)>:
c00098ae:	c3                   	ret    
c00098af:	90                   	nop

c00098b0 <VAS::VAS(VAS*)>:
c00098b0:	83 ec 0c             	sub    esp,0xc
c00098b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098c2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098c9:	83 ec 0c             	sub    esp,0xc
c00098cc:	68 0c 0a 02 c0       	push   0xc0020a0c
c00098d1:	e8 93 79 00 00       	call   c0011269 <KePanic(char const*)>
c00098d6:	83 c4 10             	add    esp,0x10
c00098d9:	90                   	nop
c00098da:	83 c4 0c             	add    esp,0xc
c00098dd:	c3                   	ret    

c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098e2:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098e7:	89 c2                	mov    edx,eax
c00098e9:	c1 e8 0a             	shr    eax,0xa
c00098ec:	c1 ea 16             	shr    edx,0x16
c00098ef:	83 f9 01             	cmp    ecx,0x1
c00098f2:	19 c9                	sbb    ecx,ecx
c00098f4:	c1 e2 0c             	shl    edx,0xc
c00098f7:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098fd:	25 fc 0f 00 00       	and    eax,0xffc
c0009902:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009909:	01 d0                	add    eax,edx
c000990b:	c3                   	ret    

c000990c <VAS::getPageTableEntry(unsigned long)>:
c000990c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009910:	89 ca                	mov    edx,ecx
c0009912:	c1 e9 0a             	shr    ecx,0xa
c0009915:	c1 ea 16             	shr    edx,0x16
c0009918:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000991e:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009924:	c1 e0 0c             	shl    eax,0xc
c0009927:	8d 04 08             	lea    eax,[eax+ecx*1]
c000992a:	c3                   	ret    

c000992b <Virt::freeKernelVirtualPages(unsigned long)>:
c000992b:	55                   	push   ebp
c000992c:	57                   	push   edi
c000992d:	bf 01 00 00 00       	mov    edi,0x1
c0009932:	56                   	push   esi
c0009933:	53                   	push   ebx
c0009934:	83 ec 1c             	sub    esp,0x1c
c0009937:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000993b:	c1 ee 0c             	shr    esi,0xc
c000993e:	eb 48                	jmp    c0009988 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0009940:	83 ec 08             	sub    esp,0x8
c0009943:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c0009948:	55                   	push   ebp
c0009949:	50                   	push   eax
c000994a:	e8 bd ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000994f:	83 c4 10             	add    esp,0x10
c0009952:	8b 10                	mov    edx,DWORD PTR [eax]
c0009954:	f6 c6 04             	test   dh,0x4
c0009957:	75 70                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009959:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000995f:	83 fb 04             	cmp    ebx,0x4
c0009962:	0f 84 8a 00 00 00    	je     c00099f2 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009968:	83 fb 02             	cmp    ebx,0x2
c000996b:	0f 84 9a 00 00 00    	je     c0009a0b <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0009971:	83 fb 03             	cmp    ebx,0x3
c0009974:	0f 84 be 00 00 00    	je     c0009a38 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000997a:	83 fb 01             	cmp    ebx,0x1
c000997d:	0f 84 a2 00 00 00    	je     c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009983:	83 c6 01             	add    esi,0x1
c0009986:	31 ff                	xor    edi,edi
c0009988:	56                   	push   esi
c0009989:	89 f5                	mov    ebp,esi
c000998b:	e8 5a fc ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009990:	c1 e5 0c             	shl    ebp,0xc
c0009993:	0f b6 d8             	movzx  ebx,al
c0009996:	5a                   	pop    edx
c0009997:	85 db                	test   ebx,ebx
c0009999:	75 a5                	jne    c0009940 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c000999b:	83 ec 0c             	sub    esp,0xc
c000999e:	68 ae 0c 02 c0       	push   0xc0020cae
c00099a3:	e8 c1 78 00 00       	call   c0011269 <KePanic(char const*)>
c00099a8:	5a                   	pop    edx
c00099a9:	59                   	pop    ecx
c00099aa:	55                   	push   ebp
c00099ab:	8b 2d b0 5f 02 c0    	mov    ebp,DWORD PTR ds:0xc0025fb0
c00099b1:	55                   	push   ebp
c00099b2:	e8 55 ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c00099b7:	83 c4 10             	add    esp,0x10
c00099ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00099bc:	f6 c6 04             	test   dh,0x4
c00099bf:	75 08                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00099c1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099c7:	eb ba                	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099cd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099d3:	83 ec 0c             	sub    esp,0xc
c00099d6:	52                   	push   edx
c00099d7:	e8 7a e3 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c00099dc:	83 c4 10             	add    esp,0x10
c00099df:	83 fb 04             	cmp    ebx,0x4
c00099e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ec:	0f 85 76 ff ff ff    	jne    c0009968 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099f2:	83 e7 01             	and    edi,0x1
c00099f5:	75 46                	jne    c0009a3d <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099f7:	c7 44 24 30 30 0a 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020a30
c00099ff:	83 c4 1c             	add    esp,0x1c
c0009a02:	5b                   	pop    ebx
c0009a03:	5e                   	pop    esi
c0009a04:	5f                   	pop    edi
c0009a05:	5d                   	pop    ebp
c0009a06:	e9 5e 78 00 00       	jmp    c0011269 <KePanic(char const*)>
c0009a0b:	83 e7 01             	and    edi,0x1
c0009a0e:	75 15                	jne    c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009a10:	83 ec 0c             	sub    esp,0xc
c0009a13:	68 ca 0c 02 c0       	push   0xc0020cca
c0009a18:	e8 4c 78 00 00       	call   c0011269 <KePanic(char const*)>
c0009a1d:	83 c4 10             	add    esp,0x10
c0009a20:	e9 5e ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a25:	83 ec 08             	sub    esp,0x8
c0009a28:	6a 00                	push   0x0
c0009a2a:	56                   	push   esi
c0009a2b:	e8 80 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a30:	83 c4 10             	add    esp,0x10
c0009a33:	e9 4b ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a38:	83 e7 01             	and    edi,0x1
c0009a3b:	75 16                	jne    c0009a53 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a3d:	83 ec 08             	sub    esp,0x8
c0009a40:	6a 00                	push   0x0
c0009a42:	56                   	push   esi
c0009a43:	e8 68 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a48:	83 c4 10             	add    esp,0x10
c0009a4b:	83 c4 1c             	add    esp,0x1c
c0009a4e:	5b                   	pop    ebx
c0009a4f:	5e                   	pop    esi
c0009a50:	5f                   	pop    edi
c0009a51:	5d                   	pop    ebp
c0009a52:	c3                   	ret    
c0009a53:	c7 44 24 30 e6 0c 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020ce6
c0009a5b:	83 c4 1c             	add    esp,0x1c
c0009a5e:	5b                   	pop    ebx
c0009a5f:	5e                   	pop    esi
c0009a60:	5f                   	pop    edi
c0009a61:	5d                   	pop    ebp
c0009a62:	e9 02 78 00 00       	jmp    c0011269 <KePanic(char const*)>
c0009a67:	90                   	nop

c0009a68 <VAS::freeAllocatedPages(unsigned long)>:
c0009a68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a70:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a74:	74 09                	je     c0009a7f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a76:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a7a:	e9 ac fe ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009a7f:	c7 44 24 04 54 0a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020a54
c0009a87:	e9 b9 0e 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c0009a8c <VAS::virtualToPhysical(unsigned long)>:
c0009a8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a90:	50                   	push   eax
c0009a91:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a95:	52                   	push   edx
c0009a96:	e8 71 fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009a9b:	59                   	pop    ecx
c0009a9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a9e:	5a                   	pop    edx
c0009a9f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009aa4:	c3                   	ret    
c0009aa5:	90                   	nop

c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009aa6:	55                   	push   ebp
c0009aa7:	57                   	push   edi
c0009aa8:	56                   	push   esi
c0009aa9:	53                   	push   ebx
c0009aaa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009aae:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009ab2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009ab6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009aba:	85 db                	test   ebx,ebx
c0009abc:	7e 24                	jle    c0009ae2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009abe:	c1 e3 0c             	shl    ebx,0xc
c0009ac1:	01 f3                	add    ebx,esi
c0009ac3:	56                   	push   esi
c0009ac4:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aca:	55                   	push   ebp
c0009acb:	e8 3c fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009ad0:	5a                   	pop    edx
c0009ad1:	59                   	pop    ecx
c0009ad2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ad4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ad8:	21 f9                	and    ecx,edi
c0009ada:	09 d1                	or     ecx,edx
c0009adc:	39 f3                	cmp    ebx,esi
c0009ade:	89 08                	mov    DWORD PTR [eax],ecx
c0009ae0:	75 e1                	jne    c0009ac3 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ae2:	5b                   	pop    ebx
c0009ae3:	5e                   	pop    esi
c0009ae4:	5f                   	pop    edi
c0009ae5:	5d                   	pop    ebp
c0009ae6:	c3                   	ret    
c0009ae7:	90                   	nop

c0009ae8 <VAS::VAS()>:
c0009ae8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009af3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009afe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b02:	a3 b0 5f 02 c0       	mov    ds:0xc0025fb0,eax
c0009b07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b0b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b13:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b1a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b21:	ba 7d 40 02 c0       	mov    edx,0xc002407d
c0009b26:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b2b:	29 c2                	sub    edx,eax
c0009b2d:	89 d0                	mov    eax,edx
c0009b2f:	05 ff 0f 00 00       	add    eax,0xfff
c0009b34:	c1 e8 0c             	shr    eax,0xc
c0009b37:	89 c2                	mov    edx,eax
c0009b39:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b3e:	6a 04                	push   0x4
c0009b40:	6a ff                	push   0xffffffff
c0009b42:	52                   	push   edx
c0009b43:	50                   	push   eax
c0009b44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b48:	e8 59 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b4d:	83 c4 14             	add    esp,0x14
c0009b50:	90                   	nop
c0009b51:	c3                   	ret    

c0009b52 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b52:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009b57:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b5d:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b64:	75 01                	jne    c0009b67 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b66:	c3                   	ret    
c0009b67:	68 80 00 00 00       	push   0x80
c0009b6c:	6a ff                	push   0xffffffff
c0009b6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b72:	50                   	push   eax
c0009b73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b77:	52                   	push   edx
c0009b78:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b7c:	51                   	push   ecx
c0009b7d:	e8 24 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b82:	83 c4 14             	add    esp,0x14
c0009b85:	c3                   	ret    

c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b8a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b91:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b94:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b99:	83 f8 01             	cmp    eax,0x1
c0009b9c:	19 c0                	sbb    eax,eax
c0009b9e:	83 ca 03             	or     edx,0x3
c0009ba1:	83 e0 fc             	and    eax,0xfffffffc
c0009ba4:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009bab:	0f 20 d8             	mov    eax,cr3
c0009bae:	0f 22 d8             	mov    cr3,eax
c0009bb1:	c3                   	ret    

c0009bb2 <VAS::~VAS()>:
c0009bb2:	83 ec 2c             	sub    esp,0x2c
c0009bb5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009bbd:	fa                   	cli    
c0009bbe:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009bc3:	83 c0 01             	add    eax,0x1
c0009bc6:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0009bcb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bd2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bd5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bdb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bdf:	6a 01                	push   0x1
c0009be1:	50                   	push   eax
c0009be2:	e8 9f ff ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c0009be7:	83 c4 0c             	add    esp,0xc
c0009bea:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bf2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bfa:	0f 8f d8 00 00 00    	jg     c0009cd8 <VAS::~VAS()+0x126>
c0009c00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c04:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c07:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009c0b:	c1 e2 02             	shl    edx,0x2
c0009c0e:	01 d0                	add    eax,edx
c0009c10:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c1a:	83 e0 01             	and    eax,0x1
c0009c1d:	0f 84 ab 00 00 00    	je     c0009cce <VAS::~VAS()+0x11c>
c0009c23:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c2b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c33:	7f 74                	jg     c0009ca9 <VAS::~VAS()+0xf7>
c0009c35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c39:	c1 e0 0a             	shl    eax,0xa
c0009c3c:	89 c2                	mov    edx,eax
c0009c3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c42:	01 d0                	add    eax,edx
c0009c44:	c1 e0 0c             	shl    eax,0xc
c0009c47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c4b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c52:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c55:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c5f:	6a 01                	push   0x1
c0009c61:	50                   	push   eax
c0009c62:	e8 77 fc ff ff       	call   c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c67:	83 c4 0c             	add    esp,0xc
c0009c6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c72:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c7c:	25 01 04 00 00       	and    eax,0x401
c0009c81:	3d 01 04 00 00       	cmp    eax,0x401
c0009c86:	75 1a                	jne    c0009ca2 <VAS::~VAS()+0xf0>
c0009c88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c8c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c91:	83 ec 0c             	sub    esp,0xc
c0009c94:	50                   	push   eax
c0009c95:	e8 bc e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009c9a:	83 c4 10             	add    esp,0x10
c0009c9d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ca2:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009ca7:	eb 82                	jmp    c0009c2b <VAS::~VAS()+0x79>
c0009ca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cad:	25 00 04 00 00       	and    eax,0x400
c0009cb2:	74 1a                	je     c0009cce <VAS::~VAS()+0x11c>
c0009cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cb8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cbd:	83 ec 0c             	sub    esp,0xc
c0009cc0:	50                   	push   eax
c0009cc1:	e8 90 e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cce:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cd3:	e9 1a ff ff ff       	jmp    c0009bf2 <VAS::~VAS()+0x40>
c0009cd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cdc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cdf:	83 ec 0c             	sub    esp,0xc
c0009ce2:	50                   	push   eax
c0009ce3:	e8 43 fc ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009ce8:	83 c4 10             	add    esp,0x10
c0009ceb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cf2:	83 ec 0c             	sub    esp,0xc
c0009cf5:	50                   	push   eax
c0009cf6:	e8 5b e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cfb:	83 c4 10             	add    esp,0x10
c0009cfe:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009d03:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009d08:	83 e8 01             	sub    eax,0x1
c0009d0b:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0009d10:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009d15:	85 c0                	test   eax,eax
c0009d17:	75 01                	jne    c0009d1a <VAS::~VAS()+0x168>
c0009d19:	fb                   	sti    
c0009d1a:	90                   	nop
c0009d1b:	83 c4 2c             	add    esp,0x2c
c0009d1e:	c3                   	ret    
c0009d1f:	90                   	nop

c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009d20:	55                   	push   ebp
c0009d21:	57                   	push   edi
c0009d22:	56                   	push   esi
c0009d23:	53                   	push   ebx
c0009d24:	83 ec 1c             	sub    esp,0x1c
c0009d27:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d2b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d2f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d35:	77 08                	ja     c0009d3f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0009d37:	0f 20 d8             	mov    eax,cr3
c0009d3a:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009d3d:	75 49                	jne    c0009d88 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0009d3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d43:	09 d8                	or     eax,ebx
c0009d45:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d4a:	75 59                	jne    c0009da5 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0009d4c:	89 de                	mov    esi,ebx
c0009d4e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d51:	c1 ee 16             	shr    esi,0x16
c0009d54:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d5b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d5f:	74 56                	je     c0009db7 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0009d61:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d65:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d69:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d6f:	c1 eb 0a             	shr    ebx,0xa
c0009d72:	c1 e6 0c             	shl    esi,0xc
c0009d75:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d7b:	09 d0                	or     eax,edx
c0009d7d:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009d80:	83 c4 1c             	add    esp,0x1c
c0009d83:	5b                   	pop    ebx
c0009d84:	5e                   	pop    esi
c0009d85:	5f                   	pop    edi
c0009d86:	5d                   	pop    ebp
c0009d87:	c3                   	ret    
c0009d88:	83 ec 0c             	sub    esp,0xc
c0009d8b:	68 78 0a 02 c0       	push   0xc0020a78
c0009d90:	e8 b0 0b 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0009d95:	83 c4 10             	add    esp,0x10
c0009d98:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d9c:	09 d8                	or     eax,ebx
c0009d9e:	a9 ff 0f 00 00       	test   eax,0xfff
c0009da3:	74 a7                	je     c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009da5:	83 ec 0c             	sub    esp,0xc
c0009da8:	68 e0 0a 02 c0       	push   0xc0020ae0
c0009dad:	e8 b7 74 00 00       	call   c0011269 <KePanic(char const*)>
c0009db2:	83 c4 10             	add    esp,0x10
c0009db5:	eb 95                	jmp    c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009db7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009dbb:	e8 ff df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009dc0:	83 ec 0c             	sub    esp,0xc
c0009dc3:	89 c5                	mov    ebp,eax
c0009dc5:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c0009dcb:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009dcf:	6a 01                	push   0x1
c0009dd1:	e8 37 f8 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009dd6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009ddd:	6a 01                	push   0x1
c0009ddf:	50                   	push   eax
c0009de0:	55                   	push   ebp
c0009de1:	81 cd 07 04 00 00    	or     ebp,0x407
c0009de7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009deb:	51                   	push   ecx
c0009dec:	e8 29 01 00 00       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009df1:	83 c4 1c             	add    esp,0x1c
c0009df4:	68 00 10 00 00       	push   0x1000
c0009df9:	6a 00                	push   0x0
c0009dfb:	50                   	push   eax
c0009dfc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e00:	e8 eb 66 ff ff       	call   c00004f0 <memset>
c0009e05:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009e09:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e0c:	e8 1a fb ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009e11:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e15:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009e18:	83 c4 10             	add    esp,0x10
c0009e1b:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009e1e:	e9 3e ff ff ff       	jmp    c0009d61 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0009e23:	90                   	nop

c0009e24 <VAS::allocatePages(int, int)>:
c0009e24:	55                   	push   ebp
c0009e25:	57                   	push   edi
c0009e26:	56                   	push   esi
c0009e27:	53                   	push   ebx
c0009e28:	83 ec 1c             	sub    esp,0x1c
c0009e2b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e2f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009e33:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e37:	75 71                	jne    c0009eaa <VAS::allocatePages(int, int)+0x86>
c0009e39:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e40:	85 c0                	test   eax,eax
c0009e42:	74 4d                	je     c0009e91 <VAS::allocatePages(int, int)+0x6d>
c0009e44:	89 dd                	mov    ebp,ebx
c0009e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e4a:	c1 e5 0c             	shl    ebp,0xc
c0009e4d:	01 c5                	add    ebp,eax
c0009e4f:	85 db                	test   ebx,ebx
c0009e51:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e54:	7e 29                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009e56:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e5a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e5e:	81 cf 00 04 00 00    	or     edi,0x400
c0009e64:	e8 56 df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009e69:	57                   	push   edi
c0009e6a:	53                   	push   ebx
c0009e6b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e71:	50                   	push   eax
c0009e72:	56                   	push   esi
c0009e73:	e8 a8 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e78:	83 c4 10             	add    esp,0x10
c0009e7b:	39 dd                	cmp    ebp,ebx
c0009e7d:	75 e5                	jne    c0009e64 <VAS::allocatePages(int, int)+0x40>
c0009e7f:	0f 20 d8             	mov    eax,cr3
c0009e82:	0f 22 d8             	mov    cr3,eax
c0009e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e89:	83 c4 1c             	add    esp,0x1c
c0009e8c:	5b                   	pop    ebx
c0009e8d:	5e                   	pop    esi
c0009e8e:	5f                   	pop    edi
c0009e8f:	5d                   	pop    ebp
c0009e90:	c3                   	ret    
c0009e91:	83 ec 0c             	sub    esp,0xc
c0009e94:	68 04 0b 02 c0       	push   0xc0020b04
c0009e99:	e8 cb 73 00 00       	call   c0011269 <KePanic(char const*)>
c0009e9e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009ea1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea5:	83 c4 10             	add    esp,0x10
c0009ea8:	eb 9a                	jmp    c0009e44 <VAS::allocatePages(int, int)+0x20>
c0009eaa:	83 ec 0c             	sub    esp,0xc
c0009ead:	53                   	push   ebx
c0009eae:	e8 5a f7 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009eb3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009eb7:	83 c4 10             	add    esp,0x10
c0009eba:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ebf:	77 37                	ja     c0009ef8 <VAS::allocatePages(int, int)+0xd4>
c0009ec1:	85 db                	test   ebx,ebx
c0009ec3:	7e ba                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ec5:	c1 e3 0c             	shl    ebx,0xc
c0009ec8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ecc:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009ed0:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0009ed3:	81 cf 00 04 00 00    	or     edi,0x400
c0009ed9:	89 c3                	mov    ebx,eax
c0009edb:	e8 df de ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009ee0:	57                   	push   edi
c0009ee1:	53                   	push   ebx
c0009ee2:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ee8:	50                   	push   eax
c0009ee9:	56                   	push   esi
c0009eea:	e8 31 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009eef:	83 c4 10             	add    esp,0x10
c0009ef2:	39 dd                	cmp    ebp,ebx
c0009ef4:	75 e5                	jne    c0009edb <VAS::allocatePages(int, int)+0xb7>
c0009ef6:	eb 87                	jmp    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ef8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009efd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f03:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009f0a:	74 b5                	je     c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f0c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009f10:	80 ce 01             	or     dh,0x1
c0009f13:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009f17:	eb a8                	jmp    c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f19:	90                   	nop

c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f1a:	55                   	push   ebp
c0009f1b:	57                   	push   edi
c0009f1c:	56                   	push   esi
c0009f1d:	53                   	push   ebx
c0009f1e:	83 ec 0c             	sub    esp,0xc
c0009f21:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0009f25:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009f29:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009f2d:	85 db                	test   ebx,ebx
c0009f2f:	7e 2f                	jle    c0009f60 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0009f31:	c1 e3 0c             	shl    ebx,0xc
c0009f34:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009f38:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009f3c:	01 d3                	add    ebx,edx
c0009f3e:	55                   	push   ebp
c0009f3f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009f43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f47:	29 c2                	sub    edx,eax
c0009f49:	01 f2                	add    edx,esi
c0009f4b:	52                   	push   edx
c0009f4c:	56                   	push   esi
c0009f4d:	81 c6 00 10 00 00    	add    esi,0x1000
c0009f53:	57                   	push   edi
c0009f54:	e8 c7 fd ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f59:	83 c4 10             	add    esp,0x10
c0009f5c:	39 de                	cmp    esi,ebx
c0009f5e:	75 de                	jne    c0009f3e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0009f60:	0f 20 d8             	mov    eax,cr3
c0009f63:	0f 22 d8             	mov    cr3,eax
c0009f66:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f6a:	83 c4 0c             	add    esp,0xc
c0009f6d:	5b                   	pop    ebx
c0009f6e:	5e                   	pop    esi
c0009f6f:	5f                   	pop    edi
c0009f70:	5d                   	pop    ebp
c0009f71:	c3                   	ret    

c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f72:	55                   	push   ebp
c0009f73:	57                   	push   edi
c0009f74:	56                   	push   esi
c0009f75:	53                   	push   ebx
c0009f76:	83 ec 1c             	sub    esp,0x1c
c0009f79:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009f7d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0009f81:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009f85:	09 f8                	or     eax,edi
c0009f87:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009f8b:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f90:	75 4f                	jne    c0009fe1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f92:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f96:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0009f99:	c1 eb 16             	shr    ebx,0x16
c0009f9c:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0009fa3:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0009fa7:	74 52                	je     c0009ffb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0009fa9:	0f b6 f2             	movzx  esi,dl
c0009fac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009fb0:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009fb4:	c1 e8 0a             	shr    eax,0xa
c0009fb7:	83 fe 01             	cmp    esi,0x1
c0009fba:	19 d2                	sbb    edx,edx
c0009fbc:	c1 e3 0c             	shl    ebx,0xc
c0009fbf:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009fc5:	25 fc 0f 00 00       	and    eax,0xffc
c0009fca:	01 d8                	add    eax,ebx
c0009fcc:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009fd0:	09 d9                	or     ecx,ebx
c0009fd2:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009fd9:	83 c4 1c             	add    esp,0x1c
c0009fdc:	5b                   	pop    ebx
c0009fdd:	5e                   	pop    esi
c0009fde:	5f                   	pop    edi
c0009fdf:	5d                   	pop    ebp
c0009fe0:	c3                   	ret    
c0009fe1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009fe5:	83 ec 0c             	sub    esp,0xc
c0009fe8:	68 30 0b 02 c0       	push   0xc0020b30
c0009fed:	e8 77 72 00 00       	call   c0011269 <KePanic(char const*)>
c0009ff2:	83 c4 10             	add    esp,0x10
c0009ff5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ff9:	eb 97                	jmp    c0009f92 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0009ffb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009fff:	e8 bb dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a004:	83 ec 0c             	sub    esp,0xc
c000a007:	89 c5                	mov    ebp,eax
c000a009:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c000a00f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a013:	6a 01                	push   0x1
c000a015:	e8 f3 f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a01a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a021:	6a 01                	push   0x1
c000a023:	50                   	push   eax
c000a024:	55                   	push   ebp
c000a025:	81 cd 07 04 00 00    	or     ebp,0x407
c000a02b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a02f:	51                   	push   ecx
c000a030:	e8 e5 fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a035:	83 c4 1c             	add    esp,0x1c
c000a038:	68 00 10 00 00       	push   0x1000
c000a03d:	6a 00                	push   0x0
c000a03f:	50                   	push   eax
c000a040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a044:	e8 a7 64 ff ff       	call   c00004f0 <memset>
c000a049:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a04d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a050:	e8 d6 f8 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a055:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a058:	83 c4 10             	add    esp,0x10
c000a05b:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c000a05e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a062:	e9 42 ff ff ff       	jmp    c0009fa9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000a067:	90                   	nop

c000a068 <VAS::VAS(bool)>:
c000a068:	53                   	push   ebx
c000a069:	83 ec 28             	sub    esp,0x28
c000a06c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a070:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a078:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a07f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a083:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a08a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a092:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a095:	e8 25 dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a09a:	89 c2                	mov    edx,eax
c000a09c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a0a3:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000a0a9:	83 ec 0c             	sub    esp,0xc
c000a0ac:	6a 01                	push   0x1
c000a0ae:	e8 5a f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a0b3:	83 c4 10             	add    esp,0x10
c000a0b6:	89 c2                	mov    edx,eax
c000a0b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0bc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0bf:	83 ec 0c             	sub    esp,0xc
c000a0c2:	6a 03                	push   0x3
c000a0c4:	6a 01                	push   0x1
c000a0c6:	52                   	push   edx
c000a0c7:	50                   	push   eax
c000a0c8:	53                   	push   ebx
c000a0c9:	e8 4c fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0ce:	83 c4 20             	add    esp,0x20
c000a0d1:	89 c2                	mov    edx,eax
c000a0d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0d7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0da:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0e2:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0ea:	7f 1d                	jg     c000a109 <VAS::VAS(bool)+0xa1>
c000a0ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0f0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0f3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0f7:	c1 e2 02             	shl    edx,0x2
c000a0fa:	01 d0                	add    eax,edx
c000a0fc:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a102:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a107:	eb d9                	jmp    c000a0e2 <VAS::VAS(bool)+0x7a>
c000a109:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a111:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a119:	7f 7e                	jg     c000a199 <VAS::VAS(bool)+0x131>
c000a11b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a11f:	2d 00 02 00 00       	sub    eax,0x200
c000a124:	c1 e0 0c             	shl    eax,0xc
c000a127:	83 c8 05             	or     eax,0x5
c000a12a:	89 c2                	mov    edx,eax
c000a12c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a131:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a137:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a13d:	83 e0 10             	and    eax,0x10
c000a140:	0f b6 c0             	movzx  eax,al
c000a143:	85 c0                	test   eax,eax
c000a145:	74 07                	je     c000a14e <VAS::VAS(bool)+0xe6>
c000a147:	b8 00 01 00 00       	mov    eax,0x100
c000a14c:	eb 05                	jmp    c000a153 <VAS::VAS(bool)+0xeb>
c000a14e:	b8 00 00 00 00       	mov    eax,0x0
c000a153:	09 d0                	or     eax,edx
c000a155:	89 c1                	mov    ecx,eax
c000a157:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a15b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a15e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a162:	c1 e2 02             	shl    edx,0x2
c000a165:	01 d0                	add    eax,edx
c000a167:	89 ca                	mov    edx,ecx
c000a169:	89 10                	mov    DWORD PTR [eax],edx
c000a16b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a16f:	2d 40 03 00 00       	sub    eax,0x340
c000a174:	83 f8 7f             	cmp    eax,0x7f
c000a177:	77 16                	ja     c000a18f <VAS::VAS(bool)+0x127>
c000a179:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a17d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a180:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a184:	c1 e2 02             	shl    edx,0x2
c000a187:	01 d0                	add    eax,edx
c000a189:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a18f:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a194:	e9 78 ff ff ff       	jmp    c000a111 <VAS::VAS(bool)+0xa9>
c000a199:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a19e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1a4:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1aa:	83 e0 10             	and    eax,0x10
c000a1ad:	0f b6 c0             	movzx  eax,al
c000a1b0:	85 c0                	test   eax,eax
c000a1b2:	74 07                	je     c000a1bb <VAS::VAS(bool)+0x153>
c000a1b4:	b8 03 41 00 00       	mov    eax,0x4103
c000a1b9:	eb 05                	jmp    c000a1c0 <VAS::VAS(bool)+0x158>
c000a1bb:	b8 03 40 00 00       	mov    eax,0x4003
c000a1c0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1c4:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1c7:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1cd:	89 02                	mov    DWORD PTR [edx],eax
c000a1cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1d3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1d6:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a1db:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1e1:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1e7:	83 e0 10             	and    eax,0x10
c000a1ea:	0f b6 c0             	movzx  eax,al
c000a1ed:	85 c0                	test   eax,eax
c000a1ef:	74 07                	je     c000a1f8 <VAS::VAS(bool)+0x190>
c000a1f1:	b8 00 01 00 00       	mov    eax,0x100
c000a1f6:	eb 05                	jmp    c000a1fd <VAS::VAS(bool)+0x195>
c000a1f8:	b8 00 00 00 00       	mov    eax,0x0
c000a1fd:	09 c2                	or     edx,eax
c000a1ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a203:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a206:	05 fc 0f 00 00       	add    eax,0xffc
c000a20b:	83 ca 03             	or     edx,0x3
c000a20e:	89 10                	mov    DWORD PTR [eax],edx
c000a210:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a215:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a21b:	83 ec 0c             	sub    esp,0xc
c000a21e:	50                   	push   eax
c000a21f:	e8 aa 26 00 00       	call   c000c8ce <Device::getName()>
c000a224:	83 c4 10             	add    esp,0x10
c000a227:	83 ec 08             	sub    esp,0x8
c000a22a:	68 00 0d 02 c0       	push   0xc0020d00
c000a22f:	50                   	push   eax
c000a230:	e8 1b 65 ff ff       	call   c0000750 <strcmp>
c000a235:	83 c4 10             	add    esp,0x10
c000a238:	85 c0                	test   eax,eax
c000a23a:	0f 94 c0             	sete   al
c000a23d:	0f b6 c0             	movzx  eax,al
c000a240:	85 c0                	test   eax,eax
c000a242:	74 68                	je     c000a2ac <VAS::VAS(bool)+0x244>
c000a244:	fa                   	cli    
c000a245:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a24a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a250:	05 7c 09 00 00       	add    eax,0x97c
c000a255:	83 ec 0c             	sub    esp,0xc
c000a258:	50                   	push   eax
c000a259:	e8 50 d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a25e:	83 c4 10             	add    esp,0x10
c000a261:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a266:	89 c3                	mov    ebx,eax
c000a268:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a26d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a273:	05 7c 09 00 00       	add    eax,0x97c
c000a278:	83 ec 0c             	sub    esp,0xc
c000a27b:	50                   	push   eax
c000a27c:	e8 2d d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a281:	83 c4 10             	add    esp,0x10
c000a284:	83 ec 08             	sub    esp,0x8
c000a287:	50                   	push   eax
c000a288:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28c:	e8 7b f6 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a291:	83 c4 10             	add    esp,0x10
c000a294:	8b 00                	mov    eax,DWORD PTR [eax]
c000a296:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a29b:	6a 11                	push   0x11
c000a29d:	53                   	push   ebx
c000a29e:	50                   	push   eax
c000a29f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2a3:	e8 78 fa ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a2a8:	83 c4 10             	add    esp,0x10
c000a2ab:	fb                   	sti    
c000a2ac:	90                   	nop
c000a2ad:	83 c4 28             	add    esp,0x28
c000a2b0:	5b                   	pop    ebx
c000a2b1:	c3                   	ret    

c000a2b2 <VAS::evict(unsigned long)>:
c000a2b2:	55                   	push   ebp
c000a2b3:	57                   	push   edi
c000a2b4:	56                   	push   esi
c000a2b5:	53                   	push   ebx
c000a2b6:	83 ec 1c             	sub    esp,0x1c
c000a2b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2bd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2c5:	e8 a1 f4 ff ff       	call   c000976b <Virt::allocateSwapfilePage()>
c000a2ca:	89 c7                	mov    edi,eax
c000a2cc:	a1 ec 2f 02 c0       	mov    eax,ds:0xc0022fec
c000a2d1:	85 c0                	test   eax,eax
c000a2d3:	7e 40                	jle    c000a315 <VAS::evict(unsigned long)+0x63>
c000a2d5:	89 ee                	mov    esi,ebp
c000a2d7:	31 db                	xor    ebx,ebx
c000a2d9:	83 ec 0c             	sub    esp,0xc
c000a2dc:	57                   	push   edi
c000a2dd:	e8 73 f4 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a2e2:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2e5:	01 d8                	add    eax,ebx
c000a2e7:	6a 01                	push   0x1
c000a2e9:	31 d2                	xor    edx,edx
c000a2eb:	83 c3 01             	add    ebx,0x1
c000a2ee:	52                   	push   edx
c000a2ef:	81 c6 00 02 00 00    	add    esi,0x200
c000a2f5:	50                   	push   eax
c000a2f6:	0f be 05 f8 2f 02 c0 	movsx  eax,BYTE PTR ds:0xc0022ff8
c000a2fd:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c000a304:	50                   	push   eax
c000a305:	e8 7e 37 00 00       	call   c000da88 <LogicalDisk::write(unsigned long long, int, void*)>
c000a30a:	83 c4 20             	add    esp,0x20
c000a30d:	39 1d ec 2f 02 c0    	cmp    DWORD PTR ds:0xc0022fec,ebx
c000a313:	7f c4                	jg     c000a2d9 <VAS::evict(unsigned long)+0x27>
c000a315:	83 ec 08             	sub    esp,0x8
c000a318:	c1 e7 0c             	shl    edi,0xc
c000a31b:	55                   	push   ebp
c000a31c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a320:	50                   	push   eax
c000a321:	e8 e6 f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a326:	8b 10                	mov    edx,DWORD PTR [eax]
c000a328:	89 d3                	mov    ebx,edx
c000a32a:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a330:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a336:	09 d7                	or     edi,edx
c000a338:	89 38                	mov    DWORD PTR [eax],edi
c000a33a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a33d:	8b 15 a8 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fa8
c000a343:	83 c2 01             	add    edx,0x1
c000a346:	89 15 a8 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa8,edx
c000a34c:	e8 05 da ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c000a351:	0f 20 d8             	mov    eax,cr3
c000a354:	0f 22 d8             	mov    cr3,eax
c000a357:	8b 0d a8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fa8
c000a35d:	51                   	push   ecx
c000a35e:	55                   	push   ebp
c000a35f:	53                   	push   ebx
c000a360:	68 54 0b 02 c0       	push   0xc0020b54
c000a365:	e8 db 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a36a:	a1 a4 5f 02 c0       	mov    eax,ds:0xc0025fa4
c000a36f:	c7 44 24 50 0e 0d 02 c0 	mov    DWORD PTR [esp+0x50],0xc0020d0e
c000a377:	8d 50 01             	lea    edx,[eax+0x1]
c000a37a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a37e:	89 15 a4 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa4,edx
c000a384:	83 c4 3c             	add    esp,0x3c
c000a387:	5b                   	pop    ebx
c000a388:	5e                   	pop    esi
c000a389:	5f                   	pop    edi
c000a38a:	5d                   	pop    ebp
c000a38b:	e9 b5 05 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a390:	55                   	push   ebp
c000a391:	57                   	push   edi
c000a392:	56                   	push   esi
c000a393:	53                   	push   ebx
c000a394:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a39a:	8b b4 24 34 10 00 00 	mov    esi,DWORD PTR [esp+0x1034]
c000a3a1:	89 f3                	mov    ebx,esi
c000a3a3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a3a9:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c000a3af:	77 22                	ja     c000a3d3 <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c000a3b1:	83 ec 08             	sub    esp,0x8
c000a3b4:	56                   	push   esi
c000a3b5:	68 31 0d 02 c0       	push   0xc0020d31
c000a3ba:	e8 86 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3bf:	83 c4 10             	add    esp,0x10
c000a3c2:	85 db                	test   ebx,ebx
c000a3c4:	75 2a                	jne    c000a3f0 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c000a3c6:	31 c0                	xor    eax,eax
c000a3c8:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3ce:	5b                   	pop    ebx
c000a3cf:	5e                   	pop    esi
c000a3d0:	5f                   	pop    edi
c000a3d1:	5d                   	pop    ebp
c000a3d2:	c3                   	ret    
c000a3d3:	83 ec 0c             	sub    esp,0xc
c000a3d6:	68 1f 0d 02 c0       	push   0xc0020d1f
c000a3db:	e8 89 6e 00 00       	call   c0011269 <KePanic(char const*)>
c000a3e0:	5f                   	pop    edi
c000a3e1:	5d                   	pop    ebp
c000a3e2:	56                   	push   esi
c000a3e3:	68 31 0d 02 c0       	push   0xc0020d31
c000a3e8:	e8 58 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3ed:	83 c4 10             	add    esp,0x10
c000a3f0:	83 ec 08             	sub    esp,0x8
c000a3f3:	53                   	push   ebx
c000a3f4:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3fb:	51                   	push   ecx
c000a3fc:	e8 0b f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a401:	83 c4 10             	add    esp,0x10
c000a404:	89 c2                	mov    edx,eax
c000a406:	85 c0                	test   eax,eax
c000a408:	74 bc                	je     c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a40a:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a40c:	f7 c5 00 02 00 00    	test   ebp,0x200
c000a412:	0f 85 c0 00 00 00    	jne    c000a4d8 <VAS::tryLoadBackOffDisk(unsigned long)+0x148>
c000a418:	89 e8                	mov    eax,ebp
c000a41a:	25 01 04 00 00       	and    eax,0x401
c000a41f:	3d 00 04 00 00       	cmp    eax,0x400
c000a424:	75 a0                	jne    c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a426:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a42a:	c1 ed 0c             	shr    ebp,0xc
c000a42d:	e8 8d d9 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a432:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a436:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a438:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000a43e:	09 c1                	or     ecx,eax
c000a440:	81 c9 01 08 00 00    	or     ecx,0x801
c000a446:	89 0a                	mov    DWORD PTR [edx],ecx
c000a448:	8b 15 ec 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022fec
c000a44e:	85 d2                	test   edx,edx
c000a450:	7e 40                	jle    c000a492 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c000a452:	89 df                	mov    edi,ebx
c000a454:	31 f6                	xor    esi,esi
c000a456:	83 ec 0c             	sub    esp,0xc
c000a459:	55                   	push   ebp
c000a45a:	e8 f6 f2 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a45f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a462:	01 f0                	add    eax,esi
c000a464:	6a 01                	push   0x1
c000a466:	31 d2                	xor    edx,edx
c000a468:	83 c6 01             	add    esi,0x1
c000a46b:	52                   	push   edx
c000a46c:	81 c7 00 02 00 00    	add    edi,0x200
c000a472:	50                   	push   eax
c000a473:	0f be 05 f8 2f 02 c0 	movsx  eax,BYTE PTR ds:0xc0022ff8
c000a47a:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c000a481:	50                   	push   eax
c000a482:	e8 95 35 00 00       	call   c000da1c <LogicalDisk::read(unsigned long long, int, void*)>
c000a487:	83 c4 20             	add    esp,0x20
c000a48a:	39 35 ec 2f 02 c0    	cmp    DWORD PTR ds:0xc0022fec,esi
c000a490:	7f c4                	jg     c000a456 <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c000a492:	83 ec 04             	sub    esp,0x4
c000a495:	a1 a8 5f 02 c0       	mov    eax,ds:0xc0025fa8
c000a49a:	83 e8 01             	sub    eax,0x1
c000a49d:	50                   	push   eax
c000a49e:	a3 a8 5f 02 c0       	mov    ds:0xc0025fa8,eax
c000a4a3:	53                   	push   ebx
c000a4a4:	68 44 0d 02 c0       	push   0xc0020d44
c000a4a9:	e8 97 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4ae:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a4b1:	e8 7c f2 ff ff       	call   c0009732 <Virt::freeSwapfilePage(unsigned long)>
c000a4b6:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000a4bb:	83 c4 10             	add    esp,0x10
c000a4be:	83 e8 01             	sub    eax,0x1
c000a4c1:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000a4c6:	85 c0                	test   eax,eax
c000a4c8:	75 01                	jne    c000a4cb <VAS::tryLoadBackOffDisk(unsigned long)+0x13b>
c000a4ca:	fb                   	sti    
c000a4cb:	0f 20 d8             	mov    eax,cr3
c000a4ce:	0f 22 d8             	mov    cr3,eax
c000a4d1:	b0 01                	mov    al,0x1
c000a4d3:	e9 f0 fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c000a4d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a4dc:	bd 00 10 00 00       	mov    ebp,0x1000
c000a4e1:	83 ec 0c             	sub    esp,0xc
c000a4e4:	89 de                	mov    esi,ebx
c000a4e6:	68 84 0b 02 c0       	push   0xc0020b84
c000a4eb:	e8 55 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4f0:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a4f4:	e8 c6 d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a4f9:	89 e9                	mov    ecx,ebp
c000a4fb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a4fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a501:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a503:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a509:	09 c8                	or     eax,ecx
c000a50b:	83 c8 02             	or     eax,0x2
c000a50e:	89 02                	mov    DWORD PTR [edx],eax
c000a510:	0f 20 d8             	mov    eax,cr3
c000a513:	0f 22 d8             	mov    cr3,eax
c000a516:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a51a:	89 df                	mov    edi,ebx
c000a51c:	89 e9                	mov    ecx,ebp
c000a51e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a520:	b0 01                	mov    al,0x1
c000a522:	83 c4 10             	add    esp,0x10
c000a525:	e9 9e fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>

c000a52a <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a52a:	55                   	push   ebp
c000a52b:	57                   	push   edi
c000a52c:	56                   	push   esi
c000a52d:	53                   	push   ebx
c000a52e:	83 ec 28             	sub    esp,0x28
c000a531:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a535:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a539:	50                   	push   eax
c000a53a:	e8 ce f0 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a53f:	83 c4 0c             	add    esp,0xc
c000a542:	89 c5                	mov    ebp,eax
c000a544:	6a 07                	push   0x7
c000a546:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a54a:	52                   	push   edx
c000a54b:	56                   	push   esi
c000a54c:	e8 d3 f8 ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c000a551:	83 c4 10             	add    esp,0x10
c000a554:	89 c7                	mov    edi,eax
c000a556:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a55a:	85 c9                	test   ecx,ecx
c000a55c:	74 2f                	je     c000a58d <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a55e:	31 db                	xor    ebx,ebx
c000a560:	e8 5a d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a565:	83 c3 01             	add    ebx,0x1
c000a568:	6a 03                	push   0x3
c000a56a:	55                   	push   ebp
c000a56b:	50                   	push   eax
c000a56c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a570:	56                   	push   esi
c000a571:	e8 aa f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a576:	6a 07                	push   0x7
c000a578:	57                   	push   edi
c000a579:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a57d:	50                   	push   eax
c000a57e:	56                   	push   esi
c000a57f:	e8 9c f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a584:	83 c4 20             	add    esp,0x20
c000a587:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c000a58b:	75 d3                	jne    c000a560 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a58d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a591:	89 28                	mov    DWORD PTR [eax],ebp
c000a593:	83 c4 1c             	add    esp,0x1c
c000a596:	89 f8                	mov    eax,edi
c000a598:	5b                   	pop    ebx
c000a599:	5e                   	pop    esi
c000a59a:	5f                   	pop    edi
c000a59b:	5d                   	pop    ebp
c000a59c:	c3                   	ret    
c000a59d:	90                   	nop

c000a59e <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a59e:	53                   	push   ebx
c000a59f:	83 ec 14             	sub    esp,0x14
c000a5a2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a5a6:	68 a4 0b 02 c0       	push   0xc0020ba4
c000a5ab:	e8 95 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5b0:	c7 04 24 04 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c04
c000a5b7:	e8 89 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5bc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5c0:	83 c4 18             	add    esp,0x18
c000a5c3:	5b                   	pop    ebx
c000a5c4:	e9 62 f3 ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a5c9:	90                   	nop

c000a5ca <VAS::scanForEviction()>:
c000a5ca:	57                   	push   edi
c000a5cb:	56                   	push   esi
c000a5cc:	31 f6                	xor    esi,esi
c000a5ce:	53                   	push   ebx
c000a5cf:	83 ec 10             	sub    esp,0x10
c000a5d2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5d6:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5d9:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5df:	75 0e                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a5e1:	89 da                	mov    edx,ebx
c000a5e3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5e6:	c1 ea 16             	shr    edx,0x16
c000a5e9:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5ed:	74 57                	je     c000a646 <VAS::scanForEviction()+0x7c>
c000a5ef:	53                   	push   ebx
c000a5f0:	57                   	push   edi
c000a5f1:	e8 16 f3 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a5f6:	5a                   	pop    edx
c000a5f7:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5f9:	59                   	pop    ecx
c000a5fa:	89 d1                	mov    ecx,edx
c000a5fc:	c1 e9 0c             	shr    ecx,0xc
c000a5ff:	74 10                	je     c000a611 <VAS::scanForEviction()+0x47>
c000a601:	89 d1                	mov    ecx,edx
c000a603:	81 e1 01 08 00 00    	and    ecx,0x801
c000a609:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a60f:	74 40                	je     c000a651 <VAS::scanForEviction()+0x87>
c000a611:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a617:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a61d:	76 2d                	jbe    c000a64c <VAS::scanForEviction()+0x82>
c000a61f:	83 c6 01             	add    esi,0x1
c000a622:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a629:	83 fe 03             	cmp    esi,0x3
c000a62c:	74 32                	je     c000a660 <VAS::scanForEviction()+0x96>
c000a62e:	31 db                	xor    ebx,ebx
c000a630:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a636:	75 b7                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a638:	89 da                	mov    edx,ebx
c000a63a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a63d:	c1 ea 16             	shr    edx,0x16
c000a640:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a644:	75 a9                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a646:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a64c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a64f:	eb 88                	jmp    c000a5d9 <VAS::scanForEviction()+0xf>
c000a651:	f6 c2 20             	test   dl,0x20
c000a654:	74 13                	je     c000a669 <VAS::scanForEviction()+0x9f>
c000a656:	83 e2 df             	and    edx,0xffffffdf
c000a659:	89 10                	mov    DWORD PTR [eax],edx
c000a65b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a65e:	eb b1                	jmp    c000a611 <VAS::scanForEviction()+0x47>
c000a660:	83 c4 10             	add    esp,0x10
c000a663:	31 c0                	xor    eax,eax
c000a665:	5b                   	pop    ebx
c000a666:	5e                   	pop    esi
c000a667:	5f                   	pop    edi
c000a668:	c3                   	ret    
c000a669:	83 ec 08             	sub    esp,0x8
c000a66c:	89 d0                	mov    eax,edx
c000a66e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a673:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a677:	53                   	push   ebx
c000a678:	68 59 0d 02 c0       	push   0xc0020d59
c000a67d:	e8 c3 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a682:	58                   	pop    eax
c000a683:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a686:	5a                   	pop    edx
c000a687:	51                   	push   ecx
c000a688:	57                   	push   edi
c000a689:	e8 24 fc ff ff       	call   c000a2b2 <VAS::evict(unsigned long)>
c000a68e:	5b                   	pop    ebx
c000a68f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a692:	5e                   	pop    esi
c000a693:	50                   	push   eax
c000a694:	68 6d 0d 02 c0       	push   0xc0020d6d
c000a699:	e8 a7 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a69e:	58                   	pop    eax
c000a69f:	5a                   	pop    edx
c000a6a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a6a4:	50                   	push   eax
c000a6a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a6a9:	68 80 0d 02 c0       	push   0xc0020d80
c000a6ae:	e8 92 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a6b3:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6b6:	83 c4 10             	add    esp,0x10
c000a6b9:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6c3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	5b                   	pop    ebx
c000a6ca:	5e                   	pop    esi
c000a6cb:	5f                   	pop    edi
c000a6cc:	c3                   	ret    

c000a6cd <mapVASFirstTime>:
c000a6cd:	55                   	push   ebp
c000a6ce:	57                   	push   edi
c000a6cf:	56                   	push   esi
c000a6d0:	53                   	push   ebx
c000a6d1:	83 ec 0c             	sub    esp,0xc
c000a6d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6d9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6dc:	83 fa 01             	cmp    edx,0x1
c000a6df:	0f 84 cb 00 00 00    	je     c000a7b0 <mapVASFirstTime+0xe3>
c000a6e5:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6e8:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6eb:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6f0:	c1 e5 15             	shl    ebp,0x15
c000a6f3:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6f8:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6fe:	29 eb                	sub    ebx,ebp
c000a700:	29 ef                	sub    edi,ebp
c000a702:	e8 b8 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a707:	83 ec 0c             	sub    esp,0xc
c000a70a:	68 03 04 00 00       	push   0x403
c000a70f:	6a 01                	push   0x1
c000a711:	53                   	push   ebx
c000a712:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a718:	50                   	push   eax
c000a719:	56                   	push   esi
c000a71a:	e8 fb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a71f:	83 c4 20             	add    esp,0x20
c000a722:	39 fb                	cmp    ebx,edi
c000a724:	75 dc                	jne    c000a702 <mapVASFirstTime+0x35>
c000a726:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a72b:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a730:	29 eb                	sub    ebx,ebp
c000a732:	29 ef                	sub    edi,ebp
c000a734:	e8 86 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a739:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a73d:	83 fa 01             	cmp    edx,0x1
c000a740:	19 d2                	sbb    edx,edx
c000a742:	83 ec 0c             	sub    esp,0xc
c000a745:	83 e2 04             	and    edx,0x4
c000a748:	81 c2 03 04 00 00    	add    edx,0x403
c000a74e:	52                   	push   edx
c000a74f:	6a 01                	push   0x1
c000a751:	53                   	push   ebx
c000a752:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a758:	50                   	push   eax
c000a759:	56                   	push   esi
c000a75a:	e8 bb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a75f:	83 c4 20             	add    esp,0x20
c000a762:	39 df                	cmp    edi,ebx
c000a764:	75 ce                	jne    c000a734 <mapVASFirstTime+0x67>
c000a766:	83 ec 0c             	sub    esp,0xc
c000a769:	bb 7c 50 02 c0       	mov    ebx,0xc002507c
c000a76e:	6a 04                	push   0x4
c000a770:	81 eb 00 40 02 c0    	sub    ebx,0xc0024000
c000a776:	6a ff                	push   0xffffffff
c000a778:	c1 eb 0c             	shr    ebx,0xc
c000a77b:	53                   	push   ebx
c000a77c:	68 00 40 02 c0       	push   0xc0024000
c000a781:	56                   	push   esi
c000a782:	e8 1f f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a787:	83 c4 14             	add    esp,0x14
c000a78a:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c000a78f:	6a 04                	push   0x4
c000a791:	6a ff                	push   0xffffffff
c000a793:	53                   	push   ebx
c000a794:	68 00 40 02 c0       	push   0xc0024000
c000a799:	50                   	push   eax
c000a79a:	e8 07 f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a79f:	0f 20 d8             	mov    eax,cr3
c000a7a2:	0f 22 d8             	mov    cr3,eax
c000a7a5:	83 c4 20             	add    esp,0x20
c000a7a8:	83 c4 0c             	add    esp,0xc
c000a7ab:	5b                   	pop    ebx
c000a7ac:	5e                   	pop    esi
c000a7ad:	5f                   	pop    edi
c000a7ae:	5d                   	pop    ebp
c000a7af:	c3                   	ret    
c000a7b0:	83 ec 0c             	sub    esp,0xc
c000a7b3:	68 8d 0d 02 c0       	push   0xc0020d8d
c000a7b8:	e8 88 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7bd:	83 c4 10             	add    esp,0x10
c000a7c0:	83 c4 0c             	add    esp,0xc
c000a7c3:	5b                   	pop    ebx
c000a7c4:	5e                   	pop    esi
c000a7c5:	5f                   	pop    edi
c000a7c6:	5d                   	pop    ebp
c000a7c7:	c3                   	ret    

c000a7c8 <__cxa_atexit>:
c000a7c8:	31 c0                	xor    eax,eax
c000a7ca:	c3                   	ret    

c000a7cb <__cxa_finalize>:
c000a7cb:	c3                   	ret    

c000a7cc <__stack_chk_fail>:
c000a7cc:	55                   	push   ebp
c000a7cd:	89 e5                	mov    ebp,esp
c000a7cf:	83 ec 10             	sub    esp,0x10
c000a7d2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7d5:	68 a6 0d 02 c0       	push   0xc0020da6
c000a7da:	e8 66 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7df:	58                   	pop    eax
c000a7e0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7e3:	5a                   	pop    edx
c000a7e4:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7e7:	68 a6 0d 02 c0       	push   0xc0020da6
c000a7ec:	e8 54 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7f1:	c7 04 24 ae 0d 02 c0 	mov    DWORD PTR [esp],0xc0020dae
c000a7f8:	e8 6c 6a 00 00       	call   c0011269 <KePanic(char const*)>
c000a7fd:	83 c4 10             	add    esp,0x10
c000a800:	c9                   	leave  
c000a801:	c3                   	ret    

c000a802 <__cxa_pure_virtual>:
c000a802:	83 ec 18             	sub    esp,0x18
c000a805:	68 c6 0d 02 c0       	push   0xc0020dc6
c000a80a:	e8 5a 6a 00 00       	call   c0011269 <KePanic(char const*)>
c000a80f:	83 c4 1c             	add    esp,0x1c
c000a812:	c3                   	ret    

c000a813 <operator new[](unsigned long)>:
c000a813:	e9 9e d2 ff ff       	jmp    c0007ab6 <malloc>

c000a818 <operator delete(void*, unsigned long)>:
c000a818:	e9 b9 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a81d <operator delete[](void*)>:
c000a81d:	e9 b4 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a822 <operator delete[](void*, unsigned long)>:
c000a822:	e9 af d2 ff ff       	jmp    c0007ad6 <rfree>

c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a827:	55                   	push   ebp
c000a828:	57                   	push   edi
c000a829:	56                   	push   esi
c000a82a:	be cf 08 02 c0       	mov    esi,0xc00208cf
c000a82f:	53                   	push   ebx
c000a830:	83 ec 20             	sub    esp,0x20
c000a833:	a0 ce 08 02 c0       	mov    al,ds:0xc00208ce
c000a838:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a83c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000a840:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a844:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a848:	b8 10 00 00 00       	mov    eax,0x10
c000a84d:	f7 c7 02 00 00 00    	test   edi,0x2
c000a853:	75 60                	jne    c000a8b5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c000a855:	89 c1                	mov    ecx,eax
c000a857:	c1 e9 02             	shr    ecx,0x2
c000a85a:	fc                   	cld    
c000a85b:	31 d2                	xor    edx,edx
c000a85d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a85f:	a8 02                	test   al,0x2
c000a861:	74 0b                	je     c000a86e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c000a863:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a866:	66 89 17             	mov    WORD PTR [edi],dx
c000a869:	ba 02 00 00 00       	mov    edx,0x2
c000a86e:	a8 01                	test   al,0x1
c000a870:	74 06                	je     c000a878 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c000a872:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000a875:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000a878:	89 ee                	mov    esi,ebp
c000a87a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a87e:	eb 02                	jmp    c000a882 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c000a880:	89 c6                	mov    esi,eax
c000a882:	31 d2                	xor    edx,edx
c000a884:	83 c1 01             	add    ecx,0x1
c000a887:	89 f0                	mov    eax,esi
c000a889:	f7 f3                	div    ebx
c000a88b:	39 de                	cmp    esi,ebx
c000a88d:	73 f1                	jae    c000a880 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c000a88f:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a892:	eb 02                	jmp    c000a896 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c000a894:	89 c5                	mov    ebp,eax
c000a896:	31 d2                	xor    edx,edx
c000a898:	83 e9 01             	sub    ecx,0x1
c000a89b:	89 e8                	mov    eax,ebp
c000a89d:	f7 f3                	div    ebx
c000a89f:	39 dd                	cmp    ebp,ebx
c000a8a1:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a8a5:	88 11                	mov    BYTE PTR [ecx],dl
c000a8a7:	73 eb                	jae    c000a894 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c000a8a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a8ad:	83 c4 20             	add    esp,0x20
c000a8b0:	5b                   	pop    ebx
c000a8b1:	5e                   	pop    esi
c000a8b2:	5f                   	pop    edi
c000a8b3:	5d                   	pop    ebp
c000a8b4:	c3                   	ret    
c000a8b5:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a8b8:	83 c7 02             	add    edi,0x2
c000a8bb:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000a8bf:	83 c6 02             	add    esi,0x2
c000a8c2:	83 e8 02             	sub    eax,0x2
c000a8c5:	eb 8e                	jmp    c000a855 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c000a8c7 <Dbg::logc(char)>:
c000a8c7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8cb:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a8d2:	75 12                	jne    c000a8e6 <Dbg::logc(char)+0x1f>
c000a8d4:	ba fd 03 00 00       	mov    edx,0x3fd
c000a8d9:	ec                   	in     al,dx
c000a8da:	a8 20                	test   al,0x20
c000a8dc:	74 fb                	je     c000a8d9 <Dbg::logc(char)+0x12>
c000a8de:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8e3:	88 c8                	mov    al,cl
c000a8e5:	ee                   	out    dx,al
c000a8e6:	c3                   	ret    

c000a8e7 <Dbg::logs(char*)>:
c000a8e7:	53                   	push   ebx
c000a8e8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8ec:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8ef:	85 c0                	test   eax,eax
c000a8f1:	74 11                	je     c000a904 <Dbg::logs(char*)+0x1d>
c000a8f3:	83 c3 01             	add    ebx,0x1
c000a8f6:	50                   	push   eax
c000a8f7:	e8 cb ff ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a8fc:	58                   	pop    eax
c000a8fd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a900:	85 c0                	test   eax,eax
c000a902:	75 ef                	jne    c000a8f3 <Dbg::logs(char*)+0xc>
c000a904:	5b                   	pop    ebx
c000a905:	c3                   	ret    

c000a906 <Dbg::logWriteInt(unsigned int)>:
c000a906:	83 ec 10             	sub    esp,0x10
c000a909:	6a 0a                	push   0xa
c000a90b:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a90f:	50                   	push   eax
c000a910:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a914:	50                   	push   eax
c000a915:	e8 0d ff ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a91a:	50                   	push   eax
c000a91b:	e8 c7 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a920:	83 c4 20             	add    esp,0x20
c000a923:	c3                   	ret    

c000a924 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a924:	83 ec 10             	sub    esp,0x10
c000a927:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a92b:	50                   	push   eax
c000a92c:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a930:	50                   	push   eax
c000a931:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a935:	52                   	push   edx
c000a936:	e8 ec fe ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a93b:	50                   	push   eax
c000a93c:	e8 a6 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a941:	83 c4 20             	add    esp,0x20
c000a944:	c3                   	ret    

c000a945 <Dbg::kprintf(char const*, ...)>:
c000a945:	55                   	push   ebp
c000a946:	57                   	push   edi
c000a947:	56                   	push   esi
c000a948:	53                   	push   ebx
c000a949:	83 ec 0c             	sub    esp,0xc
c000a94c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a950:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a957:	74 08                	je     c000a961 <Dbg::kprintf(char const*, ...)+0x1c>
c000a959:	83 c4 0c             	add    esp,0xc
c000a95c:	5b                   	pop    ebx
c000a95d:	5e                   	pop    esi
c000a95e:	5f                   	pop    edi
c000a95f:	5d                   	pop    ebp
c000a960:	c3                   	ret    
c000a961:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a965:	31 ff                	xor    edi,edi
c000a967:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a96b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a96e:	85 c0                	test   eax,eax
c000a970:	74 e7                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a972:	8d 77 01             	lea    esi,[edi+0x1]
c000a975:	83 f8 25             	cmp    eax,0x25
c000a978:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a97b:	75 47                	jne    c000a9c4 <Dbg::kprintf(char const*, ...)+0x7f>
c000a97d:	83 c7 02             	add    edi,0x2
c000a980:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a983:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a986:	83 e8 25             	sub    eax,0x25
c000a989:	0f b6 c0             	movzx  eax,al
c000a98c:	83 f8 53             	cmp    eax,0x53
c000a98f:	0f 87 ce 00 00 00    	ja     c000aa63 <Dbg::kprintf(char const*, ...)+0x11e>
c000a995:	ff 24 85 dc 0d 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf224]
c000a99c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9a0:	89 c8                	mov    eax,ecx
c000a9a2:	83 c1 04             	add    ecx,0x4
c000a9a5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a9:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a9ab:	55                   	push   ebp
c000a9ac:	e8 55 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9b1:	58                   	pop    eax
c000a9b2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a9b5:	85 c0                	test   eax,eax
c000a9b7:	74 a0                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a9b9:	8d 77 01             	lea    esi,[edi+0x1]
c000a9bc:	83 f8 25             	cmp    eax,0x25
c000a9bf:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9c2:	74 b9                	je     c000a97d <Dbg::kprintf(char const*, ...)+0x38>
c000a9c4:	50                   	push   eax
c000a9c5:	89 f7                	mov    edi,esi
c000a9c7:	e8 fb fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a9cc:	89 ee                	mov    esi,ebp
c000a9ce:	58                   	pop    eax
c000a9cf:	eb e1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9d1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9d5:	89 c8                	mov    eax,ecx
c000a9d7:	83 c1 04             	add    ecx,0x4
c000a9da:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9dc:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9e0:	50                   	push   eax
c000a9e1:	e8 01 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a9e6:	58                   	pop    eax
c000a9e7:	eb c9                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ed:	89 d0                	mov    eax,edx
c000a9ef:	83 c2 04             	add    edx,0x4
c000a9f2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9f8:	50                   	push   eax
c000a9f9:	e8 08 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9fe:	58                   	pop    eax
c000a9ff:	eb b1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa01:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa05:	89 d0                	mov    eax,edx
c000aa07:	83 c2 04             	add    edx,0x4
c000aa0a:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa0d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa11:	50                   	push   eax
c000aa12:	e8 b0 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa17:	58                   	pop    eax
c000aa18:	eb 98                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa1e:	89 c8                	mov    eax,ecx
c000aa20:	83 c1 04             	add    ecx,0x4
c000aa23:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa27:	6a 10                	push   0x10
c000aa29:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa2b:	51                   	push   ecx
c000aa2c:	e8 f3 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa31:	5d                   	pop    ebp
c000aa32:	58                   	pop    eax
c000aa33:	e9 7a ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa38:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa3c:	89 d0                	mov    eax,edx
c000aa3e:	83 c2 08             	add    edx,0x8
c000aa41:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa45:	6a 10                	push   0x10
c000aa47:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa49:	50                   	push   eax
c000aa4a:	e8 d5 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa4f:	58                   	pop    eax
c000aa50:	5a                   	pop    edx
c000aa51:	e9 5c ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa56:	6a 25                	push   0x25
c000aa58:	e8 6a fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa5d:	5a                   	pop    edx
c000aa5e:	e9 4f ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa63:	6a 25                	push   0x25
c000aa65:	e8 5d fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa6a:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa6e:	50                   	push   eax
c000aa6f:	e8 53 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa74:	5a                   	pop    edx
c000aa75:	59                   	pop    ecx
c000aa76:	e9 37 ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa7b:	90                   	nop

c000aa7c <KiUbsanPrintDetails(char const*, void*)>:
c000aa7c:	83 ec 1c             	sub    esp,0x1c
c000aa7f:	83 ec 08             	sub    esp,0x8
c000aa82:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa86:	68 2c 0f 02 c0       	push   0xc0020f2c
c000aa8b:	e8 b5 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aa90:	83 c4 10             	add    esp,0x10
c000aa93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa9f:	8b 00                	mov    eax,DWORD PTR [eax]
c000aaa1:	83 ec 08             	sub    esp,0x8
c000aaa4:	50                   	push   eax
c000aaa5:	68 40 0f 02 c0       	push   0xc0020f40
c000aaaa:	e8 96 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aaaf:	83 c4 10             	add    esp,0x10
c000aab2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aab6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aab9:	83 ec 08             	sub    esp,0x8
c000aabc:	50                   	push   eax
c000aabd:	68 4a 0f 02 c0       	push   0xc0020f4a
c000aac2:	e8 7e fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aac7:	83 c4 10             	add    esp,0x10
c000aaca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aace:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aad1:	83 ec 08             	sub    esp,0x8
c000aad4:	50                   	push   eax
c000aad5:	68 54 0f 02 c0       	push   0xc0020f54
c000aada:	e8 66 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aadf:	83 c4 10             	add    esp,0x10
c000aae2:	90                   	nop
c000aae3:	83 c4 1c             	add    esp,0x1c
c000aae6:	c3                   	ret    
c000aae7:	90                   	nop

c000aae8 <__ubsan_handle_type_mismatch_v1>:
c000aae8:	83 ec 0c             	sub    esp,0xc
c000aaeb:	83 ec 08             	sub    esp,0x8
c000aaee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aaf2:	68 98 10 02 c0       	push   0xc0021098
c000aaf7:	e8 80 ff ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000aafc:	83 c4 10             	add    esp,0x10
c000aaff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ab04:	75 16                	jne    c000ab1c <__ubsan_handle_type_mismatch_v1+0x34>
c000ab06:	83 ec 0c             	sub    esp,0xc
c000ab09:	68 5e 0f 02 c0       	push   0xc0020f5e
c000ab0e:	e8 32 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab13:	83 c4 10             	add    esp,0x10
c000ab16:	e9 91 00 00 00       	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab1b:	90                   	nop
c000ab1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab20:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab23:	85 c0                	test   eax,eax
c000ab25:	74 29                	je     c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab2b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab2e:	83 e8 01             	sub    eax,0x1
c000ab31:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000ab35:	75 19                	jne    c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab37:	83 ec 08             	sub    esp,0x8
c000ab3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab3e:	68 b8 10 02 c0       	push   0xc00210b8
c000ab43:	e8 fd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab48:	83 c4 10             	add    esp,0x10
c000ab4b:	eb 5f                	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab4d:	8d 76 00             	lea    esi,[esi+0x0]
c000ab50:	83 ec 0c             	sub    esp,0xc
c000ab53:	68 73 0f 02 c0       	push   0xc0020f73
c000ab58:	e8 e8 fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab64:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab67:	0f b6 c0             	movzx  eax,al
c000ab6a:	83 ec 08             	sub    esp,0x8
c000ab6d:	50                   	push   eax
c000ab6e:	68 8d 0f 02 c0       	push   0xc0020f8d
c000ab73:	e8 cd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab78:	83 c4 10             	add    esp,0x10
c000ab7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab82:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab85:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab8d:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab90:	0f b6 c0             	movzx  eax,al
c000ab93:	8b 04 85 00 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd000]
c000ab9a:	51                   	push   ecx
c000ab9b:	52                   	push   edx
c000ab9c:	50                   	push   eax
c000ab9d:	68 e0 10 02 c0       	push   0xc00210e0
c000aba2:	e8 9e fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aba7:	83 c4 10             	add    esp,0x10
c000abaa:	66 90                	xchg   ax,ax
c000abac:	83 ec 0c             	sub    esp,0xc
c000abaf:	68 98 10 02 c0       	push   0xc0021098
c000abb4:	e8 b0 66 00 00       	call   c0011269 <KePanic(char const*)>
c000abb9:	83 c4 10             	add    esp,0x10
c000abbc:	90                   	nop
c000abbd:	83 c4 0c             	add    esp,0xc
c000abc0:	c3                   	ret    
c000abc1:	8d 76 00             	lea    esi,[esi+0x0]

c000abc4 <__ubsan_handle_pointer_overflow>:
c000abc4:	83 ec 0c             	sub    esp,0xc
c000abc7:	83 ec 08             	sub    esp,0x8
c000abca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abce:	68 28 11 02 c0       	push   0xc0021128
c000abd3:	e8 a4 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	83 ec 0c             	sub    esp,0xc
c000abde:	68 28 11 02 c0       	push   0xc0021128
c000abe3:	e8 81 66 00 00       	call   c0011269 <KePanic(char const*)>
c000abe8:	83 c4 10             	add    esp,0x10
c000abeb:	90                   	nop
c000abec:	83 c4 0c             	add    esp,0xc
c000abef:	c3                   	ret    

c000abf0 <__ubsan_handle_out_of_bounds>:
c000abf0:	83 ec 0c             	sub    esp,0xc
c000abf3:	83 ec 08             	sub    esp,0x8
c000abf6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abfa:	68 98 0f 02 c0       	push   0xc0020f98
c000abff:	e8 78 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	83 ec 0c             	sub    esp,0xc
c000ac0a:	68 98 0f 02 c0       	push   0xc0020f98
c000ac0f:	e8 55 66 00 00       	call   c0011269 <KePanic(char const*)>
c000ac14:	83 c4 10             	add    esp,0x10
c000ac17:	90                   	nop
c000ac18:	83 c4 0c             	add    esp,0xc
c000ac1b:	c3                   	ret    

c000ac1c <__ubsan_handle_add_overflow>:
c000ac1c:	83 ec 0c             	sub    esp,0xc
c000ac1f:	83 ec 08             	sub    esp,0x8
c000ac22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac26:	68 b5 0f 02 c0       	push   0xc0020fb5
c000ac2b:	e8 4c fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	83 ec 0c             	sub    esp,0xc
c000ac36:	68 b5 0f 02 c0       	push   0xc0020fb5
c000ac3b:	e8 29 66 00 00       	call   c0011269 <KePanic(char const*)>
c000ac40:	83 c4 10             	add    esp,0x10
c000ac43:	90                   	nop
c000ac44:	83 c4 0c             	add    esp,0xc
c000ac47:	c3                   	ret    

c000ac48 <__ubsan_handle_load_invalid_value>:
c000ac48:	83 ec 0c             	sub    esp,0xc
c000ac4b:	83 ec 08             	sub    esp,0x8
c000ac4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac52:	68 48 11 02 c0       	push   0xc0021148
c000ac57:	e8 20 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac5c:	83 c4 10             	add    esp,0x10
c000ac5f:	83 ec 0c             	sub    esp,0xc
c000ac62:	68 48 11 02 c0       	push   0xc0021148
c000ac67:	e8 fd 65 00 00       	call   c0011269 <KePanic(char const*)>
c000ac6c:	83 c4 10             	add    esp,0x10
c000ac6f:	90                   	nop
c000ac70:	83 c4 0c             	add    esp,0xc
c000ac73:	c3                   	ret    

c000ac74 <__ubsan_handle_divrem_overflow>:
c000ac74:	83 ec 0c             	sub    esp,0xc
c000ac77:	83 ec 08             	sub    esp,0x8
c000ac7a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac7e:	68 6c 11 02 c0       	push   0xc002116c
c000ac83:	e8 f4 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	83 ec 0c             	sub    esp,0xc
c000ac8e:	68 6c 11 02 c0       	push   0xc002116c
c000ac93:	e8 d1 65 00 00       	call   c0011269 <KePanic(char const*)>
c000ac98:	83 c4 10             	add    esp,0x10
c000ac9b:	90                   	nop
c000ac9c:	83 c4 0c             	add    esp,0xc
c000ac9f:	c3                   	ret    

c000aca0 <__ubsan_handle_mul_overflow>:
c000aca0:	83 ec 0c             	sub    esp,0xc
c000aca3:	83 ec 08             	sub    esp,0x8
c000aca6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acaa:	68 d1 0f 02 c0       	push   0xc0020fd1
c000acaf:	e8 c8 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000acb4:	83 c4 10             	add    esp,0x10
c000acb7:	83 ec 0c             	sub    esp,0xc
c000acba:	68 d1 0f 02 c0       	push   0xc0020fd1
c000acbf:	e8 a5 65 00 00       	call   c0011269 <KePanic(char const*)>
c000acc4:	83 c4 10             	add    esp,0x10
c000acc7:	90                   	nop
c000acc8:	83 c4 0c             	add    esp,0xc
c000accb:	c3                   	ret    

c000accc <__ubsan_handle_sub_overflow>:
c000accc:	83 ec 0c             	sub    esp,0xc
c000accf:	83 ec 08             	sub    esp,0x8
c000acd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acd6:	68 ed 0f 02 c0       	push   0xc0020fed
c000acdb:	e8 9c fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	83 ec 0c             	sub    esp,0xc
c000ace6:	68 ed 0f 02 c0       	push   0xc0020fed
c000aceb:	e8 79 65 00 00       	call   c0011269 <KePanic(char const*)>
c000acf0:	83 c4 10             	add    esp,0x10
c000acf3:	90                   	nop
c000acf4:	83 c4 0c             	add    esp,0xc
c000acf7:	c3                   	ret    

c000acf8 <__ubsan_handle_shift_out_of_bounds>:
c000acf8:	83 ec 0c             	sub    esp,0xc
c000acfb:	83 ec 08             	sub    esp,0x8
c000acfe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad02:	68 8c 11 02 c0       	push   0xc002118c
c000ad07:	e8 70 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad0c:	83 c4 10             	add    esp,0x10
c000ad0f:	83 ec 0c             	sub    esp,0xc
c000ad12:	68 8c 11 02 c0       	push   0xc002118c
c000ad17:	e8 4d 65 00 00       	call   c0011269 <KePanic(char const*)>
c000ad1c:	83 c4 10             	add    esp,0x10
c000ad1f:	90                   	nop
c000ad20:	83 c4 0c             	add    esp,0xc
c000ad23:	c3                   	ret    

c000ad24 <__ubsan_handle_negate_overflow>:
c000ad24:	83 ec 0c             	sub    esp,0xc
c000ad27:	83 ec 08             	sub    esp,0x8
c000ad2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad2e:	68 b0 11 02 c0       	push   0xc00211b0
c000ad33:	e8 44 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad38:	83 c4 10             	add    esp,0x10
c000ad3b:	83 ec 0c             	sub    esp,0xc
c000ad3e:	68 b0 11 02 c0       	push   0xc00211b0
c000ad43:	e8 21 65 00 00       	call   c0011269 <KePanic(char const*)>
c000ad48:	83 c4 10             	add    esp,0x10
c000ad4b:	90                   	nop
c000ad4c:	83 c4 0c             	add    esp,0xc
c000ad4f:	c3                   	ret    

c000ad50 <KiCreateSymlinkID()>:
c000ad50:	55                   	push   ebp
c000ad51:	57                   	push   edi
c000ad52:	56                   	push   esi
c000ad53:	53                   	push   ebx
c000ad54:	31 db                	xor    ebx,ebx
c000ad56:	83 ec 1c             	sub    esp,0x1c
c000ad59:	e8 59 66 00 00       	call   c00113b7 <KeRand()>
c000ad5e:	43                   	inc    ebx
c000ad5f:	8b 2d 00 64 02 c0    	mov    ebp,DWORD PTR ds:0xc0026400
c000ad65:	31 d2                	xor    edx,edx
c000ad67:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000ad6a:	0f a4 c2 1b          	shld   edx,eax,0x1b
c000ad6e:	89 0d 00 64 02 c0    	mov    DWORD PTR ds:0xc0026400,ecx
c000ad74:	c1 e0 1b             	shl    eax,0x1b
c000ad77:	89 d7                	mov    edi,edx
c000ad79:	89 c6                	mov    esi,eax
c000ad7b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000ad7f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ad87:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000ad8d:	75 10                	jne    c000ad9f <KiCreateSymlinkID()+0x4f>
c000ad8f:	83 ec 0c             	sub    esp,0xc
c000ad92:	68 cf 11 02 c0       	push   0xc00211cf
c000ad97:	e8 cd 64 00 00       	call   c0011269 <KePanic(char const*)>
c000ad9c:	83 c4 10             	add    esp,0x10
c000ad9f:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ada3:	75 04                	jne    c000ada9 <KiCreateSymlinkID()+0x59>
c000ada5:	39 f5                	cmp    ebp,esi
c000ada7:	74 b0                	je     c000ad59 <KiCreateSymlinkID()+0x9>
c000ada9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000adad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000adb1:	31 f0                	xor    eax,esi
c000adb3:	83 c4 1c             	add    esp,0x1c
c000adb6:	31 fa                	xor    edx,edi
c000adb8:	5b                   	pop    ebx
c000adb9:	5e                   	pop    esi
c000adba:	5f                   	pop    edi
c000adbb:	5d                   	pop    ebp
c000adbc:	c3                   	ret    

c000adbd <KiFlushSymlinkChanges()>:
c000adbd:	56                   	push   esi
c000adbe:	53                   	push   ebx
c000adbf:	83 ec 20             	sub    esp,0x20
c000adc2:	68 14 01 00 00       	push   0x114
c000adc7:	e8 ea cc ff ff       	call   c0007ab6 <malloc>
c000adcc:	83 c4 0c             	add    esp,0xc
c000adcf:	89 c3                	mov    ebx,eax
c000add1:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000add7:	68 d8 11 02 c0       	push   0xc00211d8
c000addc:	50                   	push   eax
c000addd:	e8 4e 09 00 00       	call   c000b730 <File::File(char const*, Process*)>
c000ade2:	83 c4 10             	add    esp,0x10
c000ade5:	85 db                	test   ebx,ebx
c000ade7:	75 10                	jne    c000adf9 <KiFlushSymlinkChanges()+0x3c>
c000ade9:	83 ec 0c             	sub    esp,0xc
c000adec:	68 f6 11 02 c0       	push   0xc00211f6
c000adf1:	e8 73 64 00 00       	call   c0011269 <KePanic(char const*)>
c000adf6:	83 c4 10             	add    esp,0x10
c000adf9:	50                   	push   eax
c000adfa:	50                   	push   eax
c000adfb:	6a 06                	push   0x6
c000adfd:	53                   	push   ebx
c000adfe:	e8 e9 09 00 00       	call   c000b7ec <File::open(FileOpenMode)>
c000ae03:	83 c4 10             	add    esp,0x10
c000ae06:	85 c0                	test   eax,eax
c000ae08:	74 10                	je     c000ae1a <KiFlushSymlinkChanges()+0x5d>
c000ae0a:	83 ec 0c             	sub    esp,0xc
c000ae0d:	68 10 12 02 c0       	push   0xc0021210
c000ae12:	e8 52 64 00 00       	call   c0011269 <KePanic(char const*)>
c000ae17:	83 c4 10             	add    esp,0x10
c000ae1a:	31 f6                	xor    esi,esi
c000ae1c:	39 35 c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,esi
c000ae22:	7e 40                	jle    c000ae64 <KiFlushSymlinkChanges()+0xa7>
c000ae24:	83 ec 0c             	sub    esp,0xc
c000ae27:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ae29:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ae2d:	50                   	push   eax
c000ae2e:	89 f0                	mov    eax,esi
c000ae30:	c1 e0 08             	shl    eax,0x8
c000ae33:	05 00 60 02 c0       	add    eax,0xc0026000
c000ae38:	50                   	push   eax
c000ae39:	6a 00                	push   0x0
c000ae3b:	68 00 01 00 00       	push   0x100
c000ae40:	53                   	push   ebx
c000ae41:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ae44:	83 c4 20             	add    esp,0x20
c000ae47:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ae4f:	74 10                	je     c000ae61 <KiFlushSymlinkChanges()+0xa4>
c000ae51:	83 ec 0c             	sub    esp,0xc
c000ae54:	68 2a 12 02 c0       	push   0xc002122a
c000ae59:	e8 0b 64 00 00       	call   c0011269 <KePanic(char const*)>
c000ae5e:	83 c4 10             	add    esp,0x10
c000ae61:	46                   	inc    esi
c000ae62:	eb b8                	jmp    c000ae1c <KiFlushSymlinkChanges()+0x5f>
c000ae64:	83 ec 0c             	sub    esp,0xc
c000ae67:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000ae71:	53                   	push   ebx
c000ae72:	e8 d3 09 00 00       	call   c000b84a <File::close()>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	85 db                	test   ebx,ebx
c000ae7c:	74 0c                	je     c000ae8a <KiFlushSymlinkChanges()+0xcd>
c000ae7e:	83 ec 0c             	sub    esp,0xc
c000ae81:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae83:	53                   	push   ebx
c000ae84:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae87:	83 c4 10             	add    esp,0x10
c000ae8a:	83 c4 14             	add    esp,0x14
c000ae8d:	5b                   	pop    ebx
c000ae8e:	5e                   	pop    esi
c000ae8f:	c3                   	ret    

c000ae90 <KiDeinitialiseSymlinks(void*)>:
c000ae90:	e9 28 ff ff ff       	jmp    c000adbd <KiFlushSymlinkChanges()>

c000ae95 <KeRegisterSymlink(char const*, unsigned long long)>:
c000ae95:	53                   	push   ebx
c000ae96:	83 ec 0c             	sub    esp,0xc
c000ae99:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000ae9d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000aea1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000aea5:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aeaa:	68 00 01 00 00       	push   0x100
c000aeaf:	89 14 c5 e0 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda020],edx
c000aeb6:	6a 00                	push   0x0
c000aeb8:	89 0c c5 e4 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda01c],ecx
c000aebf:	c1 e0 08             	shl    eax,0x8
c000aec2:	05 00 60 02 c0       	add    eax,0xc0026000
c000aec7:	50                   	push   eax
c000aec8:	e8 23 56 ff ff       	call   c00004f0 <memset>
c000aecd:	58                   	pop    eax
c000aece:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aed3:	5a                   	pop    edx
c000aed4:	c1 e0 08             	shl    eax,0x8
c000aed7:	53                   	push   ebx
c000aed8:	05 00 60 02 c0       	add    eax,0xc0026000
c000aedd:	50                   	push   eax
c000aede:	e8 5d 57 ff ff       	call   c0000640 <strcpy>
c000aee3:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aee8:	83 c4 10             	add    esp,0x10
c000aeeb:	40                   	inc    eax
c000aeec:	a3 c0 5f 02 c0       	mov    ds:0xc0025fc0,eax
c000aef1:	83 f8 03             	cmp    eax,0x3
c000aef4:	7e 09                	jle    c000aeff <KeRegisterSymlink(char const*, unsigned long long)+0x6a>
c000aef6:	83 c4 08             	add    esp,0x8
c000aef9:	5b                   	pop    ebx
c000aefa:	e9 be fe ff ff       	jmp    c000adbd <KiFlushSymlinkChanges()>
c000aeff:	83 c4 08             	add    esp,0x8
c000af02:	5b                   	pop    ebx
c000af03:	c3                   	ret    

c000af04 <KiIsSymlinkRegistered(char const*)>:
c000af04:	53                   	push   ebx
c000af05:	31 db                	xor    ebx,ebx
c000af07:	83 ec 08             	sub    esp,0x8
c000af0a:	39 1d c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,ebx
c000af10:	7e 30                	jle    c000af42 <KiIsSymlinkRegistered(char const*)+0x3e>
c000af12:	50                   	push   eax
c000af13:	50                   	push   eax
c000af14:	89 d8                	mov    eax,ebx
c000af16:	c1 e0 08             	shl    eax,0x8
c000af19:	05 00 60 02 c0       	add    eax,0xc0026000
c000af1e:	50                   	push   eax
c000af1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af23:	e8 28 58 ff ff       	call   c0000750 <strcmp>
c000af28:	83 c4 10             	add    esp,0x10
c000af2b:	85 c0                	test   eax,eax
c000af2d:	75 10                	jne    c000af3f <KiIsSymlinkRegistered(char const*)+0x3b>
c000af2f:	8b 04 dd e0 5f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffda020]
c000af36:	8b 14 dd e4 5f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffda01c]
c000af3d:	eb 07                	jmp    c000af46 <KiIsSymlinkRegistered(char const*)+0x42>
c000af3f:	43                   	inc    ebx
c000af40:	eb c8                	jmp    c000af0a <KiIsSymlinkRegistered(char const*)+0x6>
c000af42:	31 c0                	xor    eax,eax
c000af44:	31 d2                	xor    edx,edx
c000af46:	83 c4 08             	add    esp,0x8
c000af49:	5b                   	pop    ebx
c000af4a:	c3                   	ret    

c000af4b <KeDereferenceSymlink(char const*, char*)>:
c000af4b:	55                   	push   ebp
c000af4c:	57                   	push   edi
c000af4d:	56                   	push   esi
c000af4e:	53                   	push   ebx
c000af4f:	83 ec 48             	sub    esp,0x48
c000af52:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c000af56:	56                   	push   esi
c000af57:	e8 a8 ff ff ff       	call   c000af04 <KiIsSymlinkRegistered(char const*)>
c000af5c:	83 c4 10             	add    esp,0x10
c000af5f:	89 c7                	mov    edi,eax
c000af61:	89 d0                	mov    eax,edx
c000af63:	09 f8                	or     eax,edi
c000af65:	0f 84 64 01 00 00    	je     c000b0cf <KeDereferenceSymlink(char const*, char*)+0x184>
c000af6b:	83 ec 0c             	sub    esp,0xc
c000af6e:	89 d5                	mov    ebp,edx
c000af70:	68 14 01 00 00       	push   0x114
c000af75:	e8 3c cb ff ff       	call   c0007ab6 <malloc>
c000af7a:	83 c4 0c             	add    esp,0xc
c000af7d:	89 c3                	mov    ebx,eax
c000af7f:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000af85:	56                   	push   esi
c000af86:	50                   	push   eax
c000af87:	e8 a4 07 00 00       	call   c000b730 <File::File(char const*, Process*)>
c000af8c:	83 c4 10             	add    esp,0x10
c000af8f:	85 db                	test   ebx,ebx
c000af91:	0f 84 1f 01 00 00    	je     c000b0b6 <KeDereferenceSymlink(char const*, char*)+0x16b>
c000af97:	52                   	push   edx
c000af98:	52                   	push   edx
c000af99:	6a 01                	push   0x1
c000af9b:	53                   	push   ebx
c000af9c:	e8 4b 08 00 00       	call   c000b7ec <File::open(FileOpenMode)>
c000afa1:	83 c4 10             	add    esp,0x10
c000afa4:	85 c0                	test   eax,eax
c000afa6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afa8:	74 09                	je     c000afb3 <KeDereferenceSymlink(char const*, char*)+0x68>
c000afaa:	83 ec 0c             	sub    esp,0xc
c000afad:	53                   	push   ebx
c000afae:	e9 fd 00 00 00       	jmp    c000b0b0 <KeDereferenceSymlink(char const*, char*)+0x165>
c000afb3:	83 ec 0c             	sub    esp,0xc
c000afb6:	8d 74 24 18          	lea    esi,[esp+0x18]
c000afba:	56                   	push   esi
c000afbb:	8d 54 24 37          	lea    edx,[esp+0x37]
c000afbf:	52                   	push   edx
c000afc0:	6a 00                	push   0x0
c000afc2:	6a 08                	push   0x8
c000afc4:	53                   	push   ebx
c000afc5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000afc8:	83 c4 20             	add    esp,0x20
c000afcb:	85 c0                	test   eax,eax
c000afcd:	0f 85 cf 00 00 00    	jne    c000b0a2 <KeDereferenceSymlink(char const*, char*)+0x157>
c000afd3:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000afd8:	0f 85 c4 00 00 00    	jne    c000b0a2 <KeDereferenceSymlink(char const*, char*)+0x157>
c000afde:	83 ec 0c             	sub    esp,0xc
c000afe1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afe3:	56                   	push   esi
c000afe4:	8d 54 24 20          	lea    edx,[esp+0x20]
c000afe8:	52                   	push   edx
c000afe9:	6a 00                	push   0x0
c000afeb:	6a 08                	push   0x8
c000afed:	53                   	push   ebx
c000afee:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000aff1:	83 c4 20             	add    esp,0x20
c000aff4:	85 c0                	test   eax,eax
c000aff6:	0f 85 a6 00 00 00    	jne    c000b0a2 <KeDereferenceSymlink(char const*, char*)+0x157>
c000affc:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b001:	0f 85 9b 00 00 00    	jne    c000b0a2 <KeDereferenceSymlink(char const*, char*)+0x157>
c000b007:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000b00b:	0f 85 be 00 00 00    	jne    c000b0cf <KeDereferenceSymlink(char const*, char*)+0x184>
c000b011:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000b015:	0f 85 b4 00 00 00    	jne    c000b0cf <KeDereferenceSymlink(char const*, char*)+0x184>
c000b01b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b023:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b02b:	50                   	push   eax
c000b02c:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000b030:	50                   	push   eax
c000b031:	8d 44 24 20          	lea    eax,[esp+0x20]
c000b035:	50                   	push   eax
c000b036:	53                   	push   ebx
c000b037:	e8 b2 0a 00 00       	call   c000baee <File::stat(unsigned long long*, bool*)>
c000b03c:	83 c4 10             	add    esp,0x10
c000b03f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b044:	75 5c                	jne    c000b0a2 <KeDereferenceSymlink(char const*, char*)+0x157>
c000b046:	31 c9                	xor    ecx,ecx
c000b048:	bf 0f 00 00 00       	mov    edi,0xf
c000b04d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b051:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b055:	39 c7                	cmp    edi,eax
c000b057:	89 cf                	mov    edi,ecx
c000b059:	19 d7                	sbb    edi,edx
c000b05b:	73 45                	jae    c000b0a2 <KeDereferenceSymlink(char const*, char*)+0x157>
c000b05d:	83 c0 f0             	add    eax,0xfffffff0
c000b060:	bf ff 00 00 00       	mov    edi,0xff
c000b065:	83 d2 ff             	adc    edx,0xffffffff
c000b068:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b06c:	39 c7                	cmp    edi,eax
c000b06e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b072:	19 d1                	sbb    ecx,edx
c000b074:	72 40                	jb     c000b0b6 <KeDereferenceSymlink(char const*, char*)+0x16b>
c000b076:	83 ec 0c             	sub    esp,0xc
c000b079:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000b07b:	56                   	push   esi
c000b07c:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b080:	52                   	push   edx
c000b081:	50                   	push   eax
c000b082:	53                   	push   ebx
c000b083:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b086:	83 c4 20             	add    esp,0x20
c000b089:	85 c0                	test   eax,eax
c000b08b:	75 15                	jne    c000b0a2 <KeDereferenceSymlink(char const*, char*)+0x157>
c000b08d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b091:	89 c7                	mov    edi,eax
c000b093:	c1 ff 1f             	sar    edi,0x1f
c000b096:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b09a:	75 06                	jne    c000b0a2 <KeDereferenceSymlink(char const*, char*)+0x157>
c000b09c:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b0a0:	74 19                	je     c000b0bb <KeDereferenceSymlink(char const*, char*)+0x170>
c000b0a2:	83 ec 0c             	sub    esp,0xc
c000b0a5:	53                   	push   ebx
c000b0a6:	e8 9f 07 00 00       	call   c000b84a <File::close()>
c000b0ab:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b0b0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0b3:	83 c4 10             	add    esp,0x10
c000b0b6:	83 c8 ff             	or     eax,0xffffffff
c000b0b9:	eb 16                	jmp    c000b0d1 <KeDereferenceSymlink(char const*, char*)+0x186>
c000b0bb:	83 ec 0c             	sub    esp,0xc
c000b0be:	53                   	push   ebx
c000b0bf:	e8 86 07 00 00       	call   c000b84a <File::close()>
c000b0c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b0c9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	31 c0                	xor    eax,eax
c000b0d1:	83 c4 3c             	add    esp,0x3c
c000b0d4:	5b                   	pop    ebx
c000b0d5:	5e                   	pop    esi
c000b0d6:	5f                   	pop    edi
c000b0d7:	5d                   	pop    ebp
c000b0d8:	c3                   	ret    

c000b0d9 <KeCreateSymlink(char const*, char const*)>:
c000b0d9:	55                   	push   ebp
c000b0da:	57                   	push   edi
c000b0db:	56                   	push   esi
c000b0dc:	53                   	push   ebx
c000b0dd:	83 ec 38             	sub    esp,0x38
c000b0e0:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b0e4:	68 14 01 00 00       	push   0x114
c000b0e9:	e8 c8 c9 ff ff       	call   c0007ab6 <malloc>
c000b0ee:	83 c4 0c             	add    esp,0xc
c000b0f1:	89 c3                	mov    ebx,eax
c000b0f3:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000b0f9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b0fd:	50                   	push   eax
c000b0fe:	e8 2d 06 00 00       	call   c000b730 <File::File(char const*, Process*)>
c000b103:	83 c4 10             	add    esp,0x10
c000b106:	b8 01 00 00 00       	mov    eax,0x1
c000b10b:	85 db                	test   ebx,ebx
c000b10d:	0f 84 fb 00 00 00    	je     c000b20e <KeCreateSymlink(char const*, char const*)+0x135>
c000b113:	52                   	push   edx
c000b114:	52                   	push   edx
c000b115:	6a 12                	push   0x12
c000b117:	53                   	push   ebx
c000b118:	e8 cf 06 00 00       	call   c000b7ec <File::open(FileOpenMode)>
c000b11d:	83 c4 10             	add    esp,0x10
c000b120:	85 c0                	test   eax,eax
c000b122:	74 0b                	je     c000b12f <KeCreateSymlink(char const*, char const*)+0x56>
c000b124:	83 ec 0c             	sub    esp,0xc
c000b127:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b129:	53                   	push   ebx
c000b12a:	e9 d4 00 00 00       	jmp    c000b203 <KeCreateSymlink(char const*, char const*)+0x12a>
c000b12f:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b133:	be 44 12 02 c0       	mov    esi,0xc0021244
c000b138:	b9 09 00 00 00       	mov    ecx,0x9
c000b13d:	fc                   	cld    
c000b13e:	83 ec 0c             	sub    esp,0xc
c000b141:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b143:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b147:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b149:	56                   	push   esi
c000b14a:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b14e:	52                   	push   edx
c000b14f:	6a 00                	push   0x0
c000b151:	6a 08                	push   0x8
c000b153:	53                   	push   ebx
c000b154:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b157:	83 c4 20             	add    esp,0x20
c000b15a:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b15f:	0f 85 90 00 00 00    	jne    c000b1f5 <KeCreateSymlink(char const*, char const*)+0x11c>
c000b165:	85 c0                	test   eax,eax
c000b167:	0f 85 88 00 00 00    	jne    c000b1f5 <KeCreateSymlink(char const*, char const*)+0x11c>
c000b16d:	e8 de fb ff ff       	call   c000ad50 <KiCreateSymlinkID()>
c000b172:	83 ec 0c             	sub    esp,0xc
c000b175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b179:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b17d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b17f:	56                   	push   esi
c000b180:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b184:	52                   	push   edx
c000b185:	6a 00                	push   0x0
c000b187:	6a 08                	push   0x8
c000b189:	53                   	push   ebx
c000b18a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b18d:	83 c4 20             	add    esp,0x20
c000b190:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b195:	75 5e                	jne    c000b1f5 <KeCreateSymlink(char const*, char const*)+0x11c>
c000b197:	85 c0                	test   eax,eax
c000b199:	75 5a                	jne    c000b1f5 <KeCreateSymlink(char const*, char const*)+0x11c>
c000b19b:	83 ec 0c             	sub    esp,0xc
c000b19e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1a0:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b1a3:	55                   	push   ebp
c000b1a4:	e8 c7 53 ff ff       	call   c0000570 <strlen>
c000b1a9:	89 34 24             	mov    DWORD PTR [esp],esi
c000b1ac:	31 d2                	xor    edx,edx
c000b1ae:	55                   	push   ebp
c000b1af:	52                   	push   edx
c000b1b0:	50                   	push   eax
c000b1b1:	53                   	push   ebx
c000b1b2:	ff d7                	call   edi
c000b1b4:	83 c4 14             	add    esp,0x14
c000b1b7:	89 c6                	mov    esi,eax
c000b1b9:	55                   	push   ebp
c000b1ba:	e8 b1 53 ff ff       	call   c0000570 <strlen>
c000b1bf:	83 c4 10             	add    esp,0x10
c000b1c2:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b1c6:	75 2d                	jne    c000b1f5 <KeCreateSymlink(char const*, char const*)+0x11c>
c000b1c8:	85 f6                	test   esi,esi
c000b1ca:	75 29                	jne    c000b1f5 <KeCreateSymlink(char const*, char const*)+0x11c>
c000b1cc:	50                   	push   eax
c000b1cd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1d1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1d5:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b1d9:	e8 b7 fc ff ff       	call   c000ae95 <KeRegisterSymlink(char const*, unsigned long long)>
c000b1de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b1e1:	e8 64 06 00 00       	call   c000b84a <File::close()>
c000b1e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1e8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b1eb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b1ee:	83 c4 10             	add    esp,0x10
c000b1f1:	31 c0                	xor    eax,eax
c000b1f3:	eb 19                	jmp    c000b20e <KeCreateSymlink(char const*, char const*)+0x135>
c000b1f5:	83 ec 0c             	sub    esp,0xc
c000b1f8:	53                   	push   ebx
c000b1f9:	e8 4c 06 00 00       	call   c000b84a <File::close()>
c000b1fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b200:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b203:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b206:	83 c4 10             	add    esp,0x10
c000b209:	b8 01 00 00 00       	mov    eax,0x1
c000b20e:	83 c4 2c             	add    esp,0x2c
c000b211:	5b                   	pop    ebx
c000b212:	5e                   	pop    esi
c000b213:	5f                   	pop    edi
c000b214:	5d                   	pop    ebp
c000b215:	c3                   	ret    

c000b216 <KeInitialiseSymlinks()>:
c000b216:	53                   	push   ebx
c000b217:	83 ec 10             	sub    esp,0x10
c000b21a:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000b224:	6a 00                	push   0x0
c000b226:	68 90 ae 00 c0       	push   0xc000ae90
c000b22b:	e8 50 58 00 00       	call   c0010a80 <KeRegisterAtexit(void (*)(void*), void*)>
c000b230:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b237:	e8 7a c8 ff ff       	call   c0007ab6 <malloc>
c000b23c:	83 c4 0c             	add    esp,0xc
c000b23f:	89 c3                	mov    ebx,eax
c000b241:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000b247:	68 d8 11 02 c0       	push   0xc00211d8
c000b24c:	50                   	push   eax
c000b24d:	e8 de 04 00 00       	call   c000b730 <File::File(char const*, Process*)>
c000b252:	83 c4 10             	add    esp,0x10
c000b255:	85 db                	test   ebx,ebx
c000b257:	75 10                	jne    c000b269 <KeInitialiseSymlinks()+0x53>
c000b259:	83 ec 0c             	sub    esp,0xc
c000b25c:	68 4d 12 02 c0       	push   0xc002124d
c000b261:	e8 03 60 00 00       	call   c0011269 <KePanic(char const*)>
c000b266:	83 c4 10             	add    esp,0x10
c000b269:	83 ec 0c             	sub    esp,0xc
c000b26c:	53                   	push   ebx
c000b26d:	e8 3e 08 00 00       	call   c000bab0 <File::exists()>
c000b272:	83 c4 10             	add    esp,0x10
c000b275:	84 c0                	test   al,al
c000b277:	75 2d                	jne    c000b2a6 <KeInitialiseSymlinks()+0x90>
c000b279:	52                   	push   edx
c000b27a:	52                   	push   edx
c000b27b:	6a 12                	push   0x12
c000b27d:	53                   	push   ebx
c000b27e:	e8 69 05 00 00       	call   c000b7ec <File::open(FileOpenMode)>
c000b283:	83 c4 10             	add    esp,0x10
c000b286:	85 c0                	test   eax,eax
c000b288:	74 10                	je     c000b29a <KeInitialiseSymlinks()+0x84>
c000b28a:	83 ec 0c             	sub    esp,0xc
c000b28d:	68 6a 12 02 c0       	push   0xc002126a
c000b292:	e8 d2 5f 00 00       	call   c0011269 <KePanic(char const*)>
c000b297:	83 c4 10             	add    esp,0x10
c000b29a:	83 ec 0c             	sub    esp,0xc
c000b29d:	53                   	push   ebx
c000b29e:	e8 a7 05 00 00       	call   c000b84a <File::close()>
c000b2a3:	83 c4 10             	add    esp,0x10
c000b2a6:	85 db                	test   ebx,ebx
c000b2a8:	74 0c                	je     c000b2b6 <KeInitialiseSymlinks()+0xa0>
c000b2aa:	83 ec 0c             	sub    esp,0xc
c000b2ad:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2af:	53                   	push   ebx
c000b2b0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b2b3:	83 c4 10             	add    esp,0x10
c000b2b6:	50                   	push   eax
c000b2b7:	50                   	push   eax
c000b2b8:	68 87 12 02 c0       	push   0xc0021287
c000b2bd:	68 95 12 02 c0       	push   0xc0021295
c000b2c2:	e8 12 fe ff ff       	call   c000b0d9 <KeCreateSymlink(char const*, char const*)>
c000b2c7:	83 c4 18             	add    esp,0x18
c000b2ca:	5b                   	pop    ebx
c000b2cb:	c3                   	ret    

c000b2cc <File::read(unsigned long long, void*, int*)>:
c000b2cc:	53                   	push   ebx
c000b2cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b2d1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b2d5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b2dc:	83 f8 19             	cmp    eax,0x19
c000b2df:	77 35                	ja     c000b316 <File::read(unsigned long long, void*, int*)+0x4a>
c000b2e1:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b2e8:	85 c0                	test   eax,eax
c000b2ea:	74 2a                	je     c000b316 <File::read(unsigned long long, void*, int*)+0x4a>
c000b2ec:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b2f2:	85 c0                	test   eax,eax
c000b2f4:	74 20                	je     c000b316 <File::read(unsigned long long, void*, int*)+0x4a>
c000b2f6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2fa:	74 21                	je     c000b31d <File::read(unsigned long long, void*, int*)+0x51>
c000b2fc:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b2fe:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b302:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b308:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b30c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b310:	5b                   	pop    ebx
c000b311:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b314:	ff e0                	jmp    eax
c000b316:	b8 0b 00 00 00       	mov    eax,0xb
c000b31b:	eb 05                	jmp    c000b322 <File::read(unsigned long long, void*, int*)+0x56>
c000b31d:	b8 05 00 00 00       	mov    eax,0x5
c000b322:	5b                   	pop    ebx
c000b323:	c3                   	ret    

c000b324 <File::write(unsigned long long, void*, int*)>:
c000b324:	53                   	push   ebx
c000b325:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b329:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b32d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b334:	83 f8 19             	cmp    eax,0x19
c000b337:	77 35                	ja     c000b36e <File::write(unsigned long long, void*, int*)+0x4a>
c000b339:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b340:	85 c0                	test   eax,eax
c000b342:	74 2a                	je     c000b36e <File::write(unsigned long long, void*, int*)+0x4a>
c000b344:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b34a:	85 c0                	test   eax,eax
c000b34c:	74 20                	je     c000b36e <File::write(unsigned long long, void*, int*)+0x4a>
c000b34e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b352:	74 21                	je     c000b375 <File::write(unsigned long long, void*, int*)+0x51>
c000b354:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b356:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b35a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b360:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b364:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b368:	5b                   	pop    ebx
c000b369:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b36c:	ff e0                	jmp    eax
c000b36e:	b8 0b 00 00 00       	mov    eax,0xb
c000b373:	eb 05                	jmp    c000b37a <File::write(unsigned long long, void*, int*)+0x56>
c000b375:	b8 05 00 00 00       	mov    eax,0x5
c000b37a:	5b                   	pop    ebx
c000b37b:	c3                   	ret    

c000b37c <Directory::read(unsigned long long, void*, int*)>:
c000b37c:	53                   	push   ebx
c000b37d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b381:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b385:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b38c:	83 f8 19             	cmp    eax,0x19
c000b38f:	77 35                	ja     c000b3c6 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b391:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b398:	85 c0                	test   eax,eax
c000b39a:	74 2a                	je     c000b3c6 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b39c:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b3a2:	85 c0                	test   eax,eax
c000b3a4:	74 20                	je     c000b3c6 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b3a6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b3aa:	74 21                	je     c000b3cd <Directory::read(unsigned long long, void*, int*)+0x51>
c000b3ac:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b3ae:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b3b2:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b3b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3c0:	5b                   	pop    ebx
c000b3c1:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b3c4:	ff e0                	jmp    eax
c000b3c6:	b8 0b 00 00 00       	mov    eax,0xb
c000b3cb:	eb 05                	jmp    c000b3d2 <Directory::read(unsigned long long, void*, int*)+0x56>
c000b3cd:	b8 05 00 00 00       	mov    eax,0x5
c000b3d2:	5b                   	pop    ebx
c000b3d3:	c3                   	ret    

c000b3d4 <Directory::write(unsigned long long, void*, int*)>:
c000b3d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3d8:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b3df:	b8 0b 00 00 00       	mov    eax,0xb
c000b3e4:	83 fa 19             	cmp    edx,0x19
c000b3e7:	77 18                	ja     c000b401 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b3e9:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b3f0:	85 d2                	test   edx,edx
c000b3f2:	74 0d                	je     c000b401 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b3f4:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b3fb:	19 c0                	sbb    eax,eax
c000b3fd:	83 e0 0a             	and    eax,0xa
c000b400:	40                   	inc    eax
c000b401:	c3                   	ret    

c000b402 <File::isAtty()>:
c000b402:	31 c0                	xor    eax,eax
c000b404:	c3                   	ret    
c000b405:	90                   	nop

c000b406 <Directory::isAtty()>:
c000b406:	31 c0                	xor    eax,eax
c000b408:	c3                   	ret    
c000b409:	90                   	nop

c000b40a <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b40a:	b8 0a 00 00 00       	mov    eax,0xa
c000b40f:	c3                   	ret    

c000b410 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b410:	b8 0a 00 00 00       	mov    eax,0xa
c000b415:	c3                   	ret    

c000b416 <Filesystem::allocateSwapfile(char const*, int)>:
c000b416:	31 c0                	xor    eax,eax
c000b418:	31 d2                	xor    edx,edx
c000b41a:	c3                   	ret    
c000b41b:	90                   	nop

c000b41c <File::~File()>:
c000b41c:	83 ec 0c             	sub    esp,0xc
c000b41f:	ba 28 13 02 c0       	mov    edx,0xc0021328
c000b424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b428:	89 10                	mov    DWORD PTR [eax],edx
c000b42a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b42e:	83 ec 0c             	sub    esp,0xc
c000b431:	50                   	push   eax
c000b432:	e8 6d df ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b437:	83 c4 10             	add    esp,0x10
c000b43a:	90                   	nop
c000b43b:	83 c4 0c             	add    esp,0xc
c000b43e:	c3                   	ret    
c000b43f:	90                   	nop

c000b440 <File::~File()>:
c000b440:	83 ec 0c             	sub    esp,0xc
c000b443:	83 ec 0c             	sub    esp,0xc
c000b446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b44a:	e8 cd ff ff ff       	call   c000b41c <File::~File()>
c000b44f:	83 c4 10             	add    esp,0x10
c000b452:	83 ec 08             	sub    esp,0x8
c000b455:	68 14 01 00 00       	push   0x114
c000b45a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b45e:	e8 b5 f3 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b463:	83 c4 10             	add    esp,0x10
c000b466:	83 c4 0c             	add    esp,0xc
c000b469:	c3                   	ret    

c000b46a <Directory::~Directory()>:
c000b46a:	83 ec 0c             	sub    esp,0xc
c000b46d:	ba 44 13 02 c0       	mov    edx,0xc0021344
c000b472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b476:	89 10                	mov    DWORD PTR [eax],edx
c000b478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b47c:	83 ec 0c             	sub    esp,0xc
c000b47f:	50                   	push   eax
c000b480:	e8 1f df ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b485:	83 c4 10             	add    esp,0x10
c000b488:	90                   	nop
c000b489:	83 c4 0c             	add    esp,0xc
c000b48c:	c3                   	ret    
c000b48d:	90                   	nop

c000b48e <Directory::~Directory()>:
c000b48e:	83 ec 0c             	sub    esp,0xc
c000b491:	83 ec 0c             	sub    esp,0xc
c000b494:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b498:	e8 cd ff ff ff       	call   c000b46a <Directory::~Directory()>
c000b49d:	83 c4 10             	add    esp,0x10
c000b4a0:	83 ec 08             	sub    esp,0x8
c000b4a3:	68 14 01 00 00       	push   0x114
c000b4a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4ac:	e8 67 f3 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b4b1:	83 c4 10             	add    esp,0x10
c000b4b4:	83 c4 0c             	add    esp,0xc
c000b4b7:	c3                   	ret    

c000b4b8 <Filesystem::Filesystem()>:
c000b4b8:	ba bc 12 02 c0       	mov    edx,0xc00212bc
c000b4bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4c1:	89 10                	mov    DWORD PTR [eax],edx
c000b4c3:	8b 15 04 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026404
c000b4c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4cd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b4d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4d4:	a3 04 64 02 c0       	mov    ds:0xc0026404,eax
c000b4d9:	90                   	nop
c000b4da:	c3                   	ret    
c000b4db:	90                   	nop

c000b4dc <Filesystem::~Filesystem()>:
c000b4dc:	ba bc 12 02 c0       	mov    edx,0xc00212bc
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	89 10                	mov    DWORD PTR [eax],edx
c000b4e7:	90                   	nop
c000b4e8:	c3                   	ret    
c000b4e9:	90                   	nop

c000b4ea <Filesystem::~Filesystem()>:
c000b4ea:	83 ec 0c             	sub    esp,0xc
c000b4ed:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b4f1:	e8 e6 ff ff ff       	call   c000b4dc <Filesystem::~Filesystem()>
c000b4f6:	83 c4 04             	add    esp,0x4
c000b4f9:	83 ec 08             	sub    esp,0x8
c000b4fc:	6a 08                	push   0x8
c000b4fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b502:	e8 11 f3 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b507:	83 c4 10             	add    esp,0x10
c000b50a:	83 c4 0c             	add    esp,0xc
c000b50d:	c3                   	ret    

c000b50e <Fs::getcwd(Process*, char*, int)>:
c000b50e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b512:	31 c0                	xor    eax,eax
c000b514:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b517:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b51b:	7d 15                	jge    c000b532 <Fs::getcwd(Process*, char*, int)+0x24>
c000b51d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b521:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b528:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b52b:	84 c9                	test   cl,cl
c000b52d:	74 06                	je     c000b535 <Fs::getcwd(Process*, char*, int)+0x27>
c000b52f:	40                   	inc    eax
c000b530:	eb e2                	jmp    c000b514 <Fs::getcwd(Process*, char*, int)+0x6>
c000b532:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b535:	31 c0                	xor    eax,eax
c000b537:	c3                   	ret    

c000b538 <Fs::initVFS()>:
c000b538:	83 ec 18             	sub    esp,0x18
c000b53b:	6a 08                	push   0x8
c000b53d:	e8 74 c5 ff ff       	call   c0007ab6 <malloc>
c000b542:	89 04 24             	mov    DWORD PTR [esp],eax
c000b545:	e8 4a e1 00 00       	call   c0019694 <FAT::FAT()>
c000b54a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b551:	e8 60 c5 ff ff       	call   c0007ab6 <malloc>
c000b556:	89 04 24             	mov    DWORD PTR [esp],eax
c000b559:	e8 62 f0 00 00       	call   c001a5c0 <ISO9660::ISO9660()>
c000b55e:	83 c4 1c             	add    esp,0x1c
c000b561:	c3                   	ret    

c000b562 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000b562:	55                   	push   ebp
c000b563:	57                   	push   edi
c000b564:	56                   	push   esi
c000b565:	53                   	push   ebx
c000b566:	81 ec 10 04 00 00    	sub    esp,0x410
c000b56c:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000b573:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000b57a:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000b581:	68 00 04 00 00       	push   0x400
c000b586:	6a 00                	push   0x0
c000b588:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000b58c:	56                   	push   esi
c000b58d:	e8 5e 4f ff ff       	call   c00004f0 <memset>
c000b592:	83 c4 10             	add    esp,0x10
c000b595:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000b599:	75 0b                	jne    c000b5a6 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000b59b:	50                   	push   eax
c000b59c:	50                   	push   eax
c000b59d:	57                   	push   edi
c000b59e:	56                   	push   esi
c000b59f:	e8 9c 50 ff ff       	call   c0000640 <strcpy>
c000b5a4:	eb 44                	jmp    c000b5ea <Fs::standardiseFiles(char*, char const*, char const*)+0x88>
c000b5a6:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000b5a9:	83 f8 5c             	cmp    eax,0x5c
c000b5ac:	74 05                	je     c000b5b3 <Fs::standardiseFiles(char*, char const*, char const*)+0x51>
c000b5ae:	83 f8 2f             	cmp    eax,0x2f
c000b5b1:	75 18                	jne    c000b5cb <Fs::standardiseFiles(char*, char const*, char const*)+0x69>
c000b5b3:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000b5b6:	3c 60                	cmp    al,0x60
c000b5b8:	7e 03                	jle    c000b5bd <Fs::standardiseFiles(char*, char const*, char const*)+0x5b>
c000b5ba:	83 e8 20             	sub    eax,0x20
c000b5bd:	88 04 24             	mov    BYTE PTR [esp],al
c000b5c0:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b5c7:	50                   	push   eax
c000b5c8:	50                   	push   eax
c000b5c9:	eb 18                	jmp    c000b5e3 <Fs::standardiseFiles(char*, char const*, char const*)+0x81>
c000b5cb:	50                   	push   eax
c000b5cc:	50                   	push   eax
c000b5cd:	55                   	push   ebp
c000b5ce:	56                   	push   esi
c000b5cf:	e8 6c 50 ff ff       	call   c0000640 <strcpy>
c000b5d4:	58                   	pop    eax
c000b5d5:	5a                   	pop    edx
c000b5d6:	68 63 22 02 c0       	push   0xc0022263
c000b5db:	56                   	push   esi
c000b5dc:	e8 5f 52 ff ff       	call   c0000840 <strcat>
c000b5e1:	59                   	pop    ecx
c000b5e2:	5d                   	pop    ebp
c000b5e3:	57                   	push   edi
c000b5e4:	56                   	push   esi
c000b5e5:	e8 56 52 ff ff       	call   c0000840 <strcat>
c000b5ea:	83 c4 10             	add    esp,0x10
c000b5ed:	8a 04 24             	mov    al,BYTE PTR [esp]
c000b5f0:	3c 60                	cmp    al,0x60
c000b5f2:	7e 03                	jle    c000b5f7 <Fs::standardiseFiles(char*, char const*, char const*)+0x95>
c000b5f4:	83 e8 20             	sub    eax,0x20
c000b5f7:	88 04 24             	mov    BYTE PTR [esp],al
c000b5fa:	88 03                	mov    BYTE PTR [ebx],al
c000b5fc:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b603:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b609:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b60d:	bf 03 00 00 00       	mov    edi,0x3
c000b612:	b8 03 00 00 00       	mov    eax,0x3
c000b617:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c000b61b:	89 ea                	mov    edx,ebp
c000b61d:	85 ed                	test   ebp,ebp
c000b61f:	0f 84 97 00 00 00    	je     c000b6bc <Fs::standardiseFiles(char*, char const*, char const*)+0x15a>
c000b625:	8d 4f 01             	lea    ecx,[edi+0x1]
c000b628:	83 fd 2f             	cmp    ebp,0x2f
c000b62b:	74 05                	je     c000b632 <Fs::standardiseFiles(char*, char const*, char const*)+0xd0>
c000b62d:	83 fd 5c             	cmp    ebp,0x5c
c000b630:	75 12                	jne    c000b644 <Fs::standardiseFiles(char*, char const*, char const*)+0xe2>
c000b632:	89 c5                	mov    ebp,eax
c000b634:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b639:	74 09                	je     c000b644 <Fs::standardiseFiles(char*, char const*, char const*)+0xe2>
c000b63b:	40                   	inc    eax
c000b63c:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b640:	89 cf                	mov    edi,ecx
c000b642:	eb d3                	jmp    c000b617 <Fs::standardiseFiles(char*, char const*, char const*)+0xb5>
c000b644:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000b649:	0f be ea             	movsx  ebp,dl
c000b64c:	75 5e                	jne    c000b6ac <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000b64e:	83 fd 2e             	cmp    ebp,0x2e
c000b651:	75 59                	jne    c000b6ac <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000b653:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000b657:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c000b65c:	74 18                	je     c000b676 <Fs::standardiseFiles(char*, char const*, char const*)+0x114>
c000b65e:	83 fd 2e             	cmp    ebp,0x2e
c000b661:	74 53                	je     c000b6b6 <Fs::standardiseFiles(char*, char const*, char const*)+0x154>
c000b663:	89 f9                	mov    ecx,edi
c000b665:	41                   	inc    ecx
c000b666:	0f be 14 0e          	movsx  edx,BYTE PTR [esi+ecx*1]
c000b66a:	83 fa 2f             	cmp    edx,0x2f
c000b66d:	74 f6                	je     c000b665 <Fs::standardiseFiles(char*, char const*, char const*)+0x103>
c000b66f:	83 fa 5c             	cmp    edx,0x5c
c000b672:	74 f1                	je     c000b665 <Fs::standardiseFiles(char*, char const*, char const*)+0x103>
c000b674:	eb ca                	jmp    c000b640 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b676:	83 fd 2e             	cmp    ebp,0x2e
c000b679:	74 3b                	je     c000b6b6 <Fs::standardiseFiles(char*, char const*, char const*)+0x154>
c000b67b:	83 f8 03             	cmp    eax,0x3
c000b67e:	74 c0                	je     c000b640 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b680:	41                   	inc    ecx
c000b681:	0f be 14 0e          	movsx  edx,BYTE PTR [esi+ecx*1]
c000b685:	83 fa 2f             	cmp    edx,0x2f
c000b688:	74 f6                	je     c000b680 <Fs::standardiseFiles(char*, char const*, char const*)+0x11e>
c000b68a:	83 fa 5c             	cmp    edx,0x5c
c000b68d:	74 f1                	je     c000b680 <Fs::standardiseFiles(char*, char const*, char const*)+0x11e>
c000b68f:	48                   	dec    eax
c000b690:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b694:	75 06                	jne    c000b69c <Fs::standardiseFiles(char*, char const*, char const*)+0x13a>
c000b696:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b69a:	eb f3                	jmp    c000b68f <Fs::standardiseFiles(char*, char const*, char const*)+0x12d>
c000b69c:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b6a0:	74 07                	je     c000b6a9 <Fs::standardiseFiles(char*, char const*, char const*)+0x147>
c000b6a2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b6a6:	48                   	dec    eax
c000b6a7:	eb f3                	jmp    c000b69c <Fs::standardiseFiles(char*, char const*, char const*)+0x13a>
c000b6a9:	40                   	inc    eax
c000b6aa:	eb 94                	jmp    c000b640 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b6ac:	83 fd 2f             	cmp    ebp,0x2f
c000b6af:	74 8f                	je     c000b640 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b6b1:	83 fd 5c             	cmp    ebp,0x5c
c000b6b4:	74 8a                	je     c000b640 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b6b6:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000b6b9:	40                   	inc    eax
c000b6ba:	eb 84                	jmp    c000b640 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b6bc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b6c0:	83 ec 0c             	sub    esp,0xc
c000b6c3:	53                   	push   ebx
c000b6c4:	e8 a7 4e ff ff       	call   c0000570 <strlen>
c000b6c9:	83 c4 10             	add    esp,0x10
c000b6cc:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000b6d1:	75 26                	jne    c000b6f9 <Fs::standardiseFiles(char*, char const*, char const*)+0x197>
c000b6d3:	83 ec 0c             	sub    esp,0xc
c000b6d6:	53                   	push   ebx
c000b6d7:	e8 94 4e ff ff       	call   c0000570 <strlen>
c000b6dc:	83 c4 10             	add    esp,0x10
c000b6df:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000b6e4:	74 26                	je     c000b70c <Fs::standardiseFiles(char*, char const*, char const*)+0x1aa>
c000b6e6:	83 ec 0c             	sub    esp,0xc
c000b6e9:	53                   	push   ebx
c000b6ea:	e8 81 4e ff ff       	call   c0000570 <strlen>
c000b6ef:	83 c4 10             	add    esp,0x10
c000b6f2:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b6f7:	eb c7                	jmp    c000b6c0 <Fs::standardiseFiles(char*, char const*, char const*)+0x15e>
c000b6f9:	83 ec 0c             	sub    esp,0xc
c000b6fc:	53                   	push   ebx
c000b6fd:	e8 6e 4e ff ff       	call   c0000570 <strlen>
c000b702:	83 c4 10             	add    esp,0x10
c000b705:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b70a:	74 c7                	je     c000b6d3 <Fs::standardiseFiles(char*, char const*, char const*)+0x171>
c000b70c:	50                   	push   eax
c000b70d:	50                   	push   eax
c000b70e:	53                   	push   ebx
c000b70f:	56                   	push   esi
c000b710:	e8 2b 4f ff ff       	call   c0000640 <strcpy>
c000b715:	5a                   	pop    edx
c000b716:	59                   	pop    ecx
c000b717:	53                   	push   ebx
c000b718:	56                   	push   esi
c000b719:	e8 2d f8 ff ff       	call   c000af4b <KeDereferenceSymlink(char const*, char*)>
c000b71e:	83 c4 10             	add    esp,0x10
c000b721:	48                   	dec    eax
c000b722:	74 e8                	je     c000b70c <Fs::standardiseFiles(char*, char const*, char const*)+0x1aa>
c000b724:	81 c4 0c 04 00 00    	add    esp,0x40c
c000b72a:	5b                   	pop    ebx
c000b72b:	5e                   	pop    esi
c000b72c:	5f                   	pop    edi
c000b72d:	5d                   	pop    ebp
c000b72e:	c3                   	ret    
c000b72f:	90                   	nop

c000b730 <File::File(char const*, Process*)>:
c000b730:	83 ec 0c             	sub    esp,0xc
c000b733:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b737:	83 ec 08             	sub    esp,0x8
c000b73a:	6a 00                	push   0x0
c000b73c:	50                   	push   eax
c000b73d:	e8 7c da ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000b742:	83 c4 10             	add    esp,0x10
c000b745:	ba 28 13 02 c0       	mov    edx,0xc0021328
c000b74a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b74e:	89 10                	mov    DWORD PTR [eax],edx
c000b750:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b754:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b75a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b75e:	83 c0 0d             	add    eax,0xd
c000b761:	83 ec 04             	sub    esp,0x4
c000b764:	52                   	push   edx
c000b765:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b769:	50                   	push   eax
c000b76a:	e8 f3 fd ff ff       	call   c000b562 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b76f:	83 c4 10             	add    esp,0x10
c000b772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b776:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b779:	83 e8 41             	sub    eax,0x41
c000b77c:	88 c2                	mov    dl,al
c000b77e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b782:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b78c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b794:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b79a:	0f b6 c0             	movzx  eax,al
c000b79d:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b7a4:	85 c0                	test   eax,eax
c000b7a6:	74 3e                	je     c000b7e6 <File::File(char const*, Process*)+0xb6>
c000b7a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7ac:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b7b2:	0f b6 c0             	movzx  eax,al
c000b7b5:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b7bc:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b7c2:	85 c0                	test   eax,eax
c000b7c4:	75 20                	jne    c000b7e6 <File::File(char const*, Process*)+0xb6>
c000b7c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7ca:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b7d0:	0f b6 c0             	movzx  eax,al
c000b7d3:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b7da:	83 ec 0c             	sub    esp,0xc
c000b7dd:	50                   	push   eax
c000b7de:	e8 77 21 00 00       	call   c000d95a <LogicalDisk::mount()>
c000b7e3:	83 c4 10             	add    esp,0x10
c000b7e6:	90                   	nop
c000b7e7:	83 c4 0c             	add    esp,0xc
c000b7ea:	c3                   	ret    
c000b7eb:	90                   	nop

c000b7ec <File::open(FileOpenMode)>:
c000b7ec:	53                   	push   ebx
c000b7ed:	b8 0b 00 00 00       	mov    eax,0xb
c000b7f2:	83 ec 08             	sub    esp,0x8
c000b7f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b7f9:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b800:	83 fa 19             	cmp    edx,0x19
c000b803:	77 40                	ja     c000b845 <File::open(FileOpenMode)+0x59>
c000b805:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b80c:	85 d2                	test   edx,edx
c000b80e:	74 35                	je     c000b845 <File::open(FileOpenMode)+0x59>
c000b810:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b816:	85 d2                	test   edx,edx
c000b818:	74 2b                	je     c000b845 <File::open(FileOpenMode)+0x59>
c000b81a:	b8 06 00 00 00       	mov    eax,0x6
c000b81f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b823:	75 20                	jne    c000b845 <File::open(FileOpenMode)+0x59>
c000b825:	8b 02                	mov    eax,DWORD PTR [edx]
c000b827:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b82d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b831:	51                   	push   ecx
c000b832:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b835:	51                   	push   ecx
c000b836:	52                   	push   edx
c000b837:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b83a:	83 c4 10             	add    esp,0x10
c000b83d:	85 c0                	test   eax,eax
c000b83f:	75 04                	jne    c000b845 <File::open(FileOpenMode)+0x59>
c000b841:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b845:	83 c4 08             	add    esp,0x8
c000b848:	5b                   	pop    ebx
c000b849:	c3                   	ret    

c000b84a <File::close()>:
c000b84a:	53                   	push   ebx
c000b84b:	b8 0b 00 00 00       	mov    eax,0xb
c000b850:	83 ec 08             	sub    esp,0x8
c000b853:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b857:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b85e:	83 f9 19             	cmp    ecx,0x19
c000b861:	77 41                	ja     c000b8a4 <File::close()+0x5a>
c000b863:	8b 1c 8d 80 88 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7780]
c000b86a:	85 db                	test   ebx,ebx
c000b86c:	74 36                	je     c000b8a4 <File::close()+0x5a>
c000b86e:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b875:	74 2d                	je     c000b8a4 <File::close()+0x5a>
c000b877:	b8 05 00 00 00       	mov    eax,0x5
c000b87c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b880:	74 22                	je     c000b8a4 <File::close()+0x5a>
c000b882:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b886:	8b 04 8d 80 88 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7780]
c000b88d:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b893:	53                   	push   ebx
c000b894:	53                   	push   ebx
c000b895:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b897:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b89d:	50                   	push   eax
c000b89e:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b8a1:	83 c4 10             	add    esp,0x10
c000b8a4:	83 c4 08             	add    esp,0x8
c000b8a7:	5b                   	pop    ebx
c000b8a8:	c3                   	ret    
c000b8a9:	90                   	nop

c000b8aa <File::seek(unsigned long long)>:
c000b8aa:	56                   	push   esi
c000b8ab:	53                   	push   ebx
c000b8ac:	b8 0b 00 00 00       	mov    eax,0xb
c000b8b1:	51                   	push   ecx
c000b8b2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b8b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b8ba:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b8c1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b8c5:	83 fa 19             	cmp    edx,0x19
c000b8c8:	77 31                	ja     c000b8fb <File::seek(unsigned long long)+0x51>
c000b8ca:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b8d1:	85 d2                	test   edx,edx
c000b8d3:	74 26                	je     c000b8fb <File::seek(unsigned long long)+0x51>
c000b8d5:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b8db:	85 d2                	test   edx,edx
c000b8dd:	74 1c                	je     c000b8fb <File::seek(unsigned long long)+0x51>
c000b8df:	b8 05 00 00 00       	mov    eax,0x5
c000b8e4:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b8e8:	74 11                	je     c000b8fb <File::seek(unsigned long long)+0x51>
c000b8ea:	8b 02                	mov    eax,DWORD PTR [edx]
c000b8ec:	53                   	push   ebx
c000b8ed:	51                   	push   ecx
c000b8ee:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b8f4:	52                   	push   edx
c000b8f5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b8f8:	83 c4 10             	add    esp,0x10
c000b8fb:	5a                   	pop    edx
c000b8fc:	5b                   	pop    ebx
c000b8fd:	5e                   	pop    esi
c000b8fe:	c3                   	ret    
c000b8ff:	90                   	nop

c000b900 <File::truncate(unsigned long long)>:
c000b900:	56                   	push   esi
c000b901:	53                   	push   ebx
c000b902:	b8 0b 00 00 00       	mov    eax,0xb
c000b907:	51                   	push   ecx
c000b908:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b90c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b910:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b917:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b91b:	83 fa 19             	cmp    edx,0x19
c000b91e:	77 31                	ja     c000b951 <File::truncate(unsigned long long)+0x51>
c000b920:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b927:	85 d2                	test   edx,edx
c000b929:	74 26                	je     c000b951 <File::truncate(unsigned long long)+0x51>
c000b92b:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b931:	85 d2                	test   edx,edx
c000b933:	74 1c                	je     c000b951 <File::truncate(unsigned long long)+0x51>
c000b935:	b8 05 00 00 00       	mov    eax,0x5
c000b93a:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b93e:	74 11                	je     c000b951 <File::truncate(unsigned long long)+0x51>
c000b940:	8b 02                	mov    eax,DWORD PTR [edx]
c000b942:	53                   	push   ebx
c000b943:	51                   	push   ecx
c000b944:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b94a:	52                   	push   edx
c000b94b:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b94e:	83 c4 10             	add    esp,0x10
c000b951:	5a                   	pop    edx
c000b952:	5b                   	pop    ebx
c000b953:	5e                   	pop    esi
c000b954:	c3                   	ret    
c000b955:	90                   	nop

c000b956 <File::tell(unsigned long long*)>:
c000b956:	83 ec 0c             	sub    esp,0xc
c000b959:	b8 0b 00 00 00       	mov    eax,0xb
c000b95e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b962:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b969:	83 fa 19             	cmp    edx,0x19
c000b96c:	77 34                	ja     c000b9a2 <File::tell(unsigned long long*)+0x4c>
c000b96e:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b975:	85 d2                	test   edx,edx
c000b977:	74 29                	je     c000b9a2 <File::tell(unsigned long long*)+0x4c>
c000b979:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b97f:	85 d2                	test   edx,edx
c000b981:	74 1f                	je     c000b9a2 <File::tell(unsigned long long*)+0x4c>
c000b983:	b8 05 00 00 00       	mov    eax,0x5
c000b988:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b98c:	74 14                	je     c000b9a2 <File::tell(unsigned long long*)+0x4c>
c000b98e:	50                   	push   eax
c000b98f:	8b 02                	mov    eax,DWORD PTR [edx]
c000b991:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b995:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b99b:	52                   	push   edx
c000b99c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b99f:	83 c4 10             	add    esp,0x10
c000b9a2:	83 c4 0c             	add    esp,0xc
c000b9a5:	c3                   	ret    

c000b9a6 <File::rewind()>:
c000b9a6:	83 ec 10             	sub    esp,0x10
c000b9a9:	6a 00                	push   0x0
c000b9ab:	6a 00                	push   0x0
c000b9ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9b1:	e8 f4 fe ff ff       	call   c000b8aa <File::seek(unsigned long long)>
c000b9b6:	83 c4 1c             	add    esp,0x1c
c000b9b9:	c3                   	ret    

c000b9ba <File::unlink()>:
c000b9ba:	83 ec 0c             	sub    esp,0xc
c000b9bd:	b8 0b 00 00 00       	mov    eax,0xb
c000b9c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b9c6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b9cd:	83 f9 19             	cmp    ecx,0x19
c000b9d0:	77 2f                	ja     c000ba01 <File::unlink()+0x47>
c000b9d2:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000b9d9:	85 c9                	test   ecx,ecx
c000b9db:	74 24                	je     c000ba01 <File::unlink()+0x47>
c000b9dd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b9e3:	85 c9                	test   ecx,ecx
c000b9e5:	74 1a                	je     c000ba01 <File::unlink()+0x47>
c000b9e7:	b8 06 00 00 00       	mov    eax,0x6
c000b9ec:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b9f0:	75 0f                	jne    c000ba01 <File::unlink()+0x47>
c000b9f2:	83 c2 0d             	add    edx,0xd
c000b9f5:	50                   	push   eax
c000b9f6:	50                   	push   eax
c000b9f7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b9f9:	52                   	push   edx
c000b9fa:	51                   	push   ecx
c000b9fb:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b9fe:	83 c4 10             	add    esp,0x10
c000ba01:	83 c4 0c             	add    esp,0xc
c000ba04:	c3                   	ret    
c000ba05:	90                   	nop

c000ba06 <File::rename(char const*)>:
c000ba06:	83 ec 0c             	sub    esp,0xc
c000ba09:	b8 0b 00 00 00       	mov    eax,0xb
c000ba0e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba12:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ba19:	83 f9 19             	cmp    ecx,0x19
c000ba1c:	77 32                	ja     c000ba50 <File::rename(char const*)+0x4a>
c000ba1e:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000ba25:	85 c9                	test   ecx,ecx
c000ba27:	74 27                	je     c000ba50 <File::rename(char const*)+0x4a>
c000ba29:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ba2f:	85 c9                	test   ecx,ecx
c000ba31:	74 1d                	je     c000ba50 <File::rename(char const*)+0x4a>
c000ba33:	b8 06 00 00 00       	mov    eax,0x6
c000ba38:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ba3c:	75 12                	jne    c000ba50 <File::rename(char const*)+0x4a>
c000ba3e:	83 c2 0d             	add    edx,0xd
c000ba41:	50                   	push   eax
c000ba42:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ba44:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ba48:	52                   	push   edx
c000ba49:	51                   	push   ecx
c000ba4a:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000ba4d:	83 c4 10             	add    esp,0x10
c000ba50:	83 c4 0c             	add    esp,0xc
c000ba53:	c3                   	ret    

c000ba54 <File::chfatattr(unsigned char, unsigned char)>:
c000ba54:	57                   	push   edi
c000ba55:	b8 0b 00 00 00       	mov    eax,0xb
c000ba5a:	56                   	push   esi
c000ba5b:	53                   	push   ebx
c000ba5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba60:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ba64:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ba6b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ba6f:	83 f9 19             	cmp    ecx,0x19
c000ba72:	77 37                	ja     c000baab <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ba74:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000ba7b:	85 c9                	test   ecx,ecx
c000ba7d:	74 2c                	je     c000baab <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ba7f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ba85:	85 c9                	test   ecx,ecx
c000ba87:	74 22                	je     c000baab <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ba89:	b8 06 00 00 00       	mov    eax,0x6
c000ba8e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ba92:	75 17                	jne    c000baab <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ba94:	8b 39                	mov    edi,DWORD PTR [ecx]
c000ba96:	89 f0                	mov    eax,esi
c000ba98:	83 c2 0d             	add    edx,0xd
c000ba9b:	0f b6 f0             	movzx  esi,al
c000ba9e:	0f b6 db             	movzx  ebx,bl
c000baa1:	56                   	push   esi
c000baa2:	53                   	push   ebx
c000baa3:	52                   	push   edx
c000baa4:	51                   	push   ecx
c000baa5:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000baa8:	83 c4 10             	add    esp,0x10
c000baab:	5b                   	pop    ebx
c000baac:	5e                   	pop    esi
c000baad:	5f                   	pop    edi
c000baae:	c3                   	ret    
c000baaf:	90                   	nop

c000bab0 <File::exists()>:
c000bab0:	83 ec 0c             	sub    esp,0xc
c000bab3:	31 c0                	xor    eax,eax
c000bab5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bab9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bac0:	83 f9 19             	cmp    ecx,0x19
c000bac3:	77 24                	ja     c000bae9 <File::exists()+0x39>
c000bac5:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bacc:	85 c9                	test   ecx,ecx
c000bace:	74 19                	je     c000bae9 <File::exists()+0x39>
c000bad0:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bad6:	85 c9                	test   ecx,ecx
c000bad8:	74 0f                	je     c000bae9 <File::exists()+0x39>
c000bada:	83 c2 0d             	add    edx,0xd
c000badd:	50                   	push   eax
c000bade:	50                   	push   eax
c000badf:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bae1:	52                   	push   edx
c000bae2:	51                   	push   ecx
c000bae3:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000bae6:	83 c4 10             	add    esp,0x10
c000bae9:	83 c4 0c             	add    esp,0xc
c000baec:	c3                   	ret    
c000baed:	90                   	nop

c000baee <File::stat(unsigned long long*, bool*)>:
c000baee:	56                   	push   esi
c000baef:	53                   	push   ebx
c000baf0:	50                   	push   eax
c000baf1:	b8 0b 00 00 00       	mov    eax,0xb
c000baf6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bafa:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bafe:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bb05:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bb09:	83 f9 19             	cmp    ecx,0x19
c000bb0c:	77 3d                	ja     c000bb4b <File::stat(unsigned long long*, bool*)+0x5d>
c000bb0e:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bb15:	85 c9                	test   ecx,ecx
c000bb17:	74 32                	je     c000bb4b <File::stat(unsigned long long*, bool*)+0x5d>
c000bb19:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bb1f:	85 c9                	test   ecx,ecx
c000bb21:	74 28                	je     c000bb4b <File::stat(unsigned long long*, bool*)+0x5d>
c000bb23:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bb25:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bb29:	74 13                	je     c000bb3e <File::stat(unsigned long long*, bool*)+0x50>
c000bb2b:	83 ec 04             	sub    esp,0x4
c000bb2e:	56                   	push   esi
c000bb2f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bb35:	51                   	push   ecx
c000bb36:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000bb39:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000bb3c:	eb 0a                	jmp    c000bb48 <File::stat(unsigned long long*, bool*)+0x5a>
c000bb3e:	53                   	push   ebx
c000bb3f:	83 c2 0d             	add    edx,0xd
c000bb42:	56                   	push   esi
c000bb43:	52                   	push   edx
c000bb44:	51                   	push   ecx
c000bb45:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000bb48:	83 c4 10             	add    esp,0x10
c000bb4b:	5a                   	pop    edx
c000bb4c:	5b                   	pop    ebx
c000bb4d:	5e                   	pop    esi
c000bb4e:	c3                   	ret    

c000bb4f <Fs::setcwd(Process*, char*)>:
c000bb4f:	55                   	push   ebp
c000bb50:	57                   	push   edi
c000bb51:	56                   	push   esi
c000bb52:	53                   	push   ebx
c000bb53:	81 ec 20 02 00 00    	sub    esp,0x220
c000bb59:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000bb60:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bb66:	57                   	push   edi
c000bb67:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000bb6e:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000bb72:	56                   	push   esi
c000bb73:	e8 ea f9 ff ff       	call   c000b562 <Fs::standardiseFiles(char*, char const*, char const*)>
c000bb78:	89 34 24             	mov    DWORD PTR [esp],esi
c000bb7b:	e8 f0 49 ff ff       	call   c0000570 <strlen>
c000bb80:	83 c4 10             	add    esp,0x10
c000bb83:	83 f8 02             	cmp    eax,0x2
c000bb86:	77 15                	ja     c000bb9d <Fs::setcwd(Process*, char*)+0x4e>
c000bb88:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bb8d:	83 eb 41             	sub    ebx,0x41
c000bb90:	8b 04 9d 80 88 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7780]
c000bb97:	85 c0                	test   eax,eax
c000bb99:	75 1c                	jne    c000bbb7 <Fs::setcwd(Process*, char*)+0x68>
c000bb9b:	eb 2f                	jmp    c000bbcc <Fs::setcwd(Process*, char*)+0x7d>
c000bb9d:	83 ec 0c             	sub    esp,0xc
c000bba0:	56                   	push   esi
c000bba1:	e8 ca 49 ff ff       	call   c0000570 <strlen>
c000bba6:	83 c4 10             	add    esp,0x10
c000bba9:	83 f8 03             	cmp    eax,0x3
c000bbac:	75 57                	jne    c000bc05 <Fs::setcwd(Process*, char*)+0xb6>
c000bbae:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bbb3:	75 50                	jne    c000bc05 <Fs::setcwd(Process*, char*)+0xb6>
c000bbb5:	eb d1                	jmp    c000bb88 <Fs::setcwd(Process*, char*)+0x39>
c000bbb7:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bbbe:	75 0c                	jne    c000bbcc <Fs::setcwd(Process*, char*)+0x7d>
c000bbc0:	83 ec 0c             	sub    esp,0xc
c000bbc3:	50                   	push   eax
c000bbc4:	e8 91 1d 00 00       	call   c000d95a <LogicalDisk::mount()>
c000bbc9:	83 c4 10             	add    esp,0x10
c000bbcc:	b8 03 00 00 00       	mov    eax,0x3
c000bbd1:	83 fb 19             	cmp    ebx,0x19
c000bbd4:	0f 87 c6 00 00 00    	ja     c000bca0 <Fs::setcwd(Process*, char*)+0x151>
c000bbda:	8b 14 9d 80 88 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd7780]
c000bbe1:	b8 05 00 00 00       	mov    eax,0x5
c000bbe6:	85 d2                	test   edx,edx
c000bbe8:	0f 84 b2 00 00 00    	je     c000bca0 <Fs::setcwd(Process*, char*)+0x151>
c000bbee:	b8 06 00 00 00       	mov    eax,0x6
c000bbf3:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bbfa:	0f 85 92 00 00 00    	jne    c000bc92 <Fs::setcwd(Process*, char*)+0x143>
c000bc00:	e9 9b 00 00 00       	jmp    c000bca0 <Fs::setcwd(Process*, char*)+0x151>
c000bc05:	83 ec 0c             	sub    esp,0xc
c000bc08:	68 14 01 00 00       	push   0x114
c000bc0d:	e8 a4 be ff ff       	call   c0007ab6 <malloc>
c000bc12:	83 c4 0c             	add    esp,0xc
c000bc15:	89 c3                	mov    ebx,eax
c000bc17:	55                   	push   ebp
c000bc18:	56                   	push   esi
c000bc19:	50                   	push   eax
c000bc1a:	e8 11 fb ff ff       	call   c000b730 <File::File(char const*, Process*)>
c000bc1f:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bc24:	83 c4 0c             	add    esp,0xc
c000bc27:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bc2b:	50                   	push   eax
c000bc2c:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bc30:	50                   	push   eax
c000bc31:	53                   	push   ebx
c000bc32:	e8 b7 fe ff ff       	call   c000baee <File::stat(unsigned long long*, bool*)>
c000bc37:	83 c4 10             	add    esp,0x10
c000bc3a:	83 f8 02             	cmp    eax,0x2
c000bc3d:	74 27                	je     c000bc66 <Fs::setcwd(Process*, char*)+0x117>
c000bc3f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bc44:	75 1c                	jne    c000bc62 <Fs::setcwd(Process*, char*)+0x113>
c000bc46:	b8 02 00 00 00       	mov    eax,0x2
c000bc4b:	85 db                	test   ebx,ebx
c000bc4d:	74 51                	je     c000bca0 <Fs::setcwd(Process*, char*)+0x151>
c000bc4f:	83 ec 0c             	sub    esp,0xc
c000bc52:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bc54:	53                   	push   ebx
c000bc55:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bc58:	83 c4 10             	add    esp,0x10
c000bc5b:	b8 02 00 00 00       	mov    eax,0x2
c000bc60:	eb 3e                	jmp    c000bca0 <Fs::setcwd(Process*, char*)+0x151>
c000bc62:	85 c0                	test   eax,eax
c000bc64:	74 1c                	je     c000bc82 <Fs::setcwd(Process*, char*)+0x133>
c000bc66:	b8 01 00 00 00       	mov    eax,0x1
c000bc6b:	85 db                	test   ebx,ebx
c000bc6d:	74 31                	je     c000bca0 <Fs::setcwd(Process*, char*)+0x151>
c000bc6f:	83 ec 0c             	sub    esp,0xc
c000bc72:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bc74:	53                   	push   ebx
c000bc75:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bc78:	83 c4 10             	add    esp,0x10
c000bc7b:	b8 01 00 00 00       	mov    eax,0x1
c000bc80:	eb 1e                	jmp    c000bca0 <Fs::setcwd(Process*, char*)+0x151>
c000bc82:	85 db                	test   ebx,ebx
c000bc84:	74 0c                	je     c000bc92 <Fs::setcwd(Process*, char*)+0x143>
c000bc86:	83 ec 0c             	sub    esp,0xc
c000bc89:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bc8b:	53                   	push   ebx
c000bc8c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bc8f:	83 c4 10             	add    esp,0x10
c000bc92:	50                   	push   eax
c000bc93:	50                   	push   eax
c000bc94:	56                   	push   esi
c000bc95:	57                   	push   edi
c000bc96:	e8 a5 49 ff ff       	call   c0000640 <strcpy>
c000bc9b:	83 c4 10             	add    esp,0x10
c000bc9e:	31 c0                	xor    eax,eax
c000bca0:	81 c4 1c 02 00 00    	add    esp,0x21c
c000bca6:	5b                   	pop    ebx
c000bca7:	5e                   	pop    esi
c000bca8:	5f                   	pop    edi
c000bca9:	5d                   	pop    ebp
c000bcaa:	c3                   	ret    
c000bcab:	90                   	nop

c000bcac <Directory::Directory(char const*, Process*)>:
c000bcac:	83 ec 0c             	sub    esp,0xc
c000bcaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcb3:	83 ec 08             	sub    esp,0x8
c000bcb6:	6a 00                	push   0x0
c000bcb8:	50                   	push   eax
c000bcb9:	e8 00 d5 ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000bcbe:	83 c4 10             	add    esp,0x10
c000bcc1:	ba 44 13 02 c0       	mov    edx,0xc0021344
c000bcc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcca:	89 10                	mov    DWORD PTR [eax],edx
c000bccc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bcd0:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000bcd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcda:	83 c0 0d             	add    eax,0xd
c000bcdd:	83 ec 04             	sub    esp,0x4
c000bce0:	52                   	push   edx
c000bce1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bce5:	50                   	push   eax
c000bce6:	e8 77 f8 ff ff       	call   c000b562 <Fs::standardiseFiles(char*, char const*, char const*)>
c000bceb:	83 c4 10             	add    esp,0x10
c000bcee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcf2:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000bcf5:	83 e8 41             	sub    eax,0x41
c000bcf8:	88 c2                	mov    dl,al
c000bcfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcfe:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000bd04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd08:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000bd0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd10:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bd16:	0f b6 c0             	movzx  eax,al
c000bd19:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000bd20:	85 c0                	test   eax,eax
c000bd22:	74 3e                	je     c000bd62 <Directory::Directory(char const*, Process*)+0xb6>
c000bd24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd28:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bd2e:	0f b6 c0             	movzx  eax,al
c000bd31:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000bd38:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bd3e:	85 c0                	test   eax,eax
c000bd40:	75 20                	jne    c000bd62 <Directory::Directory(char const*, Process*)+0xb6>
c000bd42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd46:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bd4c:	0f b6 c0             	movzx  eax,al
c000bd4f:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000bd56:	83 ec 0c             	sub    esp,0xc
c000bd59:	50                   	push   eax
c000bd5a:	e8 fb 1b 00 00       	call   c000d95a <LogicalDisk::mount()>
c000bd5f:	83 c4 10             	add    esp,0x10
c000bd62:	90                   	nop
c000bd63:	83 c4 0c             	add    esp,0xc
c000bd66:	c3                   	ret    
c000bd67:	90                   	nop

c000bd68 <Directory::open()>:
c000bd68:	53                   	push   ebx
c000bd69:	b8 0b 00 00 00       	mov    eax,0xb
c000bd6e:	83 ec 08             	sub    esp,0x8
c000bd71:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bd75:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000bd7c:	83 fa 19             	cmp    edx,0x19
c000bd7f:	77 3d                	ja     c000bdbe <Directory::open()+0x56>
c000bd81:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000bd88:	85 d2                	test   edx,edx
c000bd8a:	74 32                	je     c000bdbe <Directory::open()+0x56>
c000bd8c:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bd92:	85 d2                	test   edx,edx
c000bd94:	74 28                	je     c000bdbe <Directory::open()+0x56>
c000bd96:	b8 06 00 00 00       	mov    eax,0x6
c000bd9b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000bd9f:	75 1d                	jne    c000bdbe <Directory::open()+0x56>
c000bda1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000bda7:	50                   	push   eax
c000bda8:	8b 02                	mov    eax,DWORD PTR [edx]
c000bdaa:	51                   	push   ecx
c000bdab:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000bdae:	51                   	push   ecx
c000bdaf:	52                   	push   edx
c000bdb0:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000bdb3:	83 c4 10             	add    esp,0x10
c000bdb6:	85 c0                	test   eax,eax
c000bdb8:	75 04                	jne    c000bdbe <Directory::open()+0x56>
c000bdba:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bdbe:	83 c4 08             	add    esp,0x8
c000bdc1:	5b                   	pop    ebx
c000bdc2:	c3                   	ret    
c000bdc3:	90                   	nop

c000bdc4 <Directory::close()>:
c000bdc4:	53                   	push   ebx
c000bdc5:	b8 0b 00 00 00       	mov    eax,0xb
c000bdca:	83 ec 08             	sub    esp,0x8
c000bdcd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bdd1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bdd8:	83 f9 19             	cmp    ecx,0x19
c000bddb:	77 41                	ja     c000be1e <Directory::close()+0x5a>
c000bddd:	8b 1c 8d 80 88 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7780]
c000bde4:	85 db                	test   ebx,ebx
c000bde6:	74 36                	je     c000be1e <Directory::close()+0x5a>
c000bde8:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bdef:	74 2d                	je     c000be1e <Directory::close()+0x5a>
c000bdf1:	b8 05 00 00 00       	mov    eax,0x5
c000bdf6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bdfa:	74 22                	je     c000be1e <Directory::close()+0x5a>
c000bdfc:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000be00:	8b 04 8d 80 88 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7780]
c000be07:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000be0d:	53                   	push   ebx
c000be0e:	53                   	push   ebx
c000be0f:	8b 08                	mov    ecx,DWORD PTR [eax]
c000be11:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000be17:	50                   	push   eax
c000be18:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000be1b:	83 c4 10             	add    esp,0x10
c000be1e:	83 c4 08             	add    esp,0x8
c000be21:	5b                   	pop    ebx
c000be22:	c3                   	ret    
c000be23:	90                   	nop

c000be24 <Directory::unlink()>:
c000be24:	83 ec 0c             	sub    esp,0xc
c000be27:	b8 0b 00 00 00       	mov    eax,0xb
c000be2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be30:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be37:	83 f9 19             	cmp    ecx,0x19
c000be3a:	77 2f                	ja     c000be6b <Directory::unlink()+0x47>
c000be3c:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000be43:	85 c9                	test   ecx,ecx
c000be45:	74 24                	je     c000be6b <Directory::unlink()+0x47>
c000be47:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be4d:	85 c9                	test   ecx,ecx
c000be4f:	74 1a                	je     c000be6b <Directory::unlink()+0x47>
c000be51:	b8 06 00 00 00       	mov    eax,0x6
c000be56:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be5a:	75 0f                	jne    c000be6b <Directory::unlink()+0x47>
c000be5c:	83 c2 0d             	add    edx,0xd
c000be5f:	50                   	push   eax
c000be60:	50                   	push   eax
c000be61:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be63:	52                   	push   edx
c000be64:	51                   	push   ecx
c000be65:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000be68:	83 c4 10             	add    esp,0x10
c000be6b:	83 c4 0c             	add    esp,0xc
c000be6e:	c3                   	ret    
c000be6f:	90                   	nop

c000be70 <Directory::rename(char const*)>:
c000be70:	83 ec 0c             	sub    esp,0xc
c000be73:	b8 0b 00 00 00       	mov    eax,0xb
c000be78:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be7c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be83:	83 f9 19             	cmp    ecx,0x19
c000be86:	77 32                	ja     c000beba <Directory::rename(char const*)+0x4a>
c000be88:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000be8f:	85 c9                	test   ecx,ecx
c000be91:	74 27                	je     c000beba <Directory::rename(char const*)+0x4a>
c000be93:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be99:	85 c9                	test   ecx,ecx
c000be9b:	74 1d                	je     c000beba <Directory::rename(char const*)+0x4a>
c000be9d:	b8 06 00 00 00       	mov    eax,0x6
c000bea2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bea6:	75 12                	jne    c000beba <Directory::rename(char const*)+0x4a>
c000bea8:	83 c2 0d             	add    edx,0xd
c000beab:	50                   	push   eax
c000beac:	8b 01                	mov    eax,DWORD PTR [ecx]
c000beae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000beb2:	52                   	push   edx
c000beb3:	51                   	push   ecx
c000beb4:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000beb7:	83 c4 10             	add    esp,0x10
c000beba:	83 c4 0c             	add    esp,0xc
c000bebd:	c3                   	ret    

c000bebe <Directory::exists()>:
c000bebe:	83 ec 0c             	sub    esp,0xc
c000bec1:	31 c0                	xor    eax,eax
c000bec3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bec7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bece:	83 f9 19             	cmp    ecx,0x19
c000bed1:	77 24                	ja     c000bef7 <Directory::exists()+0x39>
c000bed3:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000beda:	85 c9                	test   ecx,ecx
c000bedc:	74 19                	je     c000bef7 <Directory::exists()+0x39>
c000bede:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bee4:	85 c9                	test   ecx,ecx
c000bee6:	74 0f                	je     c000bef7 <Directory::exists()+0x39>
c000bee8:	83 c2 0d             	add    edx,0xd
c000beeb:	50                   	push   eax
c000beec:	50                   	push   eax
c000beed:	8b 01                	mov    eax,DWORD PTR [ecx]
c000beef:	52                   	push   edx
c000bef0:	51                   	push   ecx
c000bef1:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000bef4:	83 c4 10             	add    esp,0x10
c000bef7:	83 c4 0c             	add    esp,0xc
c000befa:	c3                   	ret    
c000befb:	90                   	nop

c000befc <Directory::read(dirent*)>:
c000befc:	83 ec 1c             	sub    esp,0x1c
c000beff:	b8 0b 00 00 00       	mov    eax,0xb
c000bf04:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bf08:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bf0f:	83 f9 19             	cmp    ecx,0x19
c000bf12:	77 30                	ja     c000bf44 <Directory::read(dirent*)+0x48>
c000bf14:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bf1b:	85 c9                	test   ecx,ecx
c000bf1d:	74 25                	je     c000bf44 <Directory::read(dirent*)+0x48>
c000bf1f:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000bf26:	74 1c                	je     c000bf44 <Directory::read(dirent*)+0x48>
c000bf28:	83 ec 0c             	sub    esp,0xc
c000bf2b:	8b 02                	mov    eax,DWORD PTR [edx]
c000bf2d:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000bf31:	51                   	push   ecx
c000bf32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf36:	6a 00                	push   0x0
c000bf38:	68 10 01 00 00       	push   0x110
c000bf3d:	52                   	push   edx
c000bf3e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bf41:	83 c4 20             	add    esp,0x20
c000bf44:	83 c4 1c             	add    esp,0x1c
c000bf47:	c3                   	ret    

c000bf48 <Directory::create()>:
c000bf48:	83 ec 0c             	sub    esp,0xc
c000bf4b:	b8 0b 00 00 00       	mov    eax,0xb
c000bf50:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf54:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bf5b:	83 f9 19             	cmp    ecx,0x19
c000bf5e:	77 2f                	ja     c000bf8f <Directory::create()+0x47>
c000bf60:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bf67:	85 c9                	test   ecx,ecx
c000bf69:	74 24                	je     c000bf8f <Directory::create()+0x47>
c000bf6b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bf71:	85 c9                	test   ecx,ecx
c000bf73:	74 1a                	je     c000bf8f <Directory::create()+0x47>
c000bf75:	b8 06 00 00 00       	mov    eax,0x6
c000bf7a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bf7e:	75 0f                	jne    c000bf8f <Directory::create()+0x47>
c000bf80:	83 c2 0d             	add    edx,0xd
c000bf83:	50                   	push   eax
c000bf84:	50                   	push   eax
c000bf85:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bf87:	52                   	push   edx
c000bf88:	51                   	push   ecx
c000bf89:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000bf8c:	83 c4 10             	add    esp,0x10
c000bf8f:	83 c4 0c             	add    esp,0xc
c000bf92:	c3                   	ret    
c000bf93:	90                   	nop

c000bf94 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000bf94:	b8 0a 00 00 00       	mov    eax,0xa
c000bf99:	c3                   	ret    
c000bf9a:	66 90                	xchg   ax,ax

c000bf9c <Bus::Bus(char const*)>:
c000bf9c:	83 ec 0c             	sub    esp,0xc
c000bf9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfa3:	83 ec 08             	sub    esp,0x8
c000bfa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfaa:	50                   	push   eax
c000bfab:	e8 22 08 00 00       	call   c000c7d2 <Device::Device(char const*)>
c000bfb0:	83 c4 10             	add    esp,0x10
c000bfb3:	ba 60 13 02 c0       	mov    edx,0xc0021360
c000bfb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfbc:	89 10                	mov    DWORD PTR [eax],edx
c000bfbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfc2:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000bfcc:	90                   	nop
c000bfcd:	83 c4 0c             	add    esp,0xc
c000bfd0:	c3                   	ret    
c000bfd1:	90                   	nop
c000bfd2:	66 90                	xchg   ax,ax

c000bfd4 <Bus::~Bus()>:
c000bfd4:	83 ec 0c             	sub    esp,0xc
c000bfd7:	ba 60 13 02 c0       	mov    edx,0xc0021360
c000bfdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfe0:	89 10                	mov    DWORD PTR [eax],edx
c000bfe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfe6:	83 ec 0c             	sub    esp,0xc
c000bfe9:	50                   	push   eax
c000bfea:	e8 4d 05 00 00       	call   c000c53c <Device::~Device()>
c000bfef:	83 c4 10             	add    esp,0x10
c000bff2:	90                   	nop
c000bff3:	83 c4 0c             	add    esp,0xc
c000bff6:	c3                   	ret    
c000bff7:	90                   	nop

c000bff8 <Bus::~Bus()>:
c000bff8:	83 ec 0c             	sub    esp,0xc
c000bffb:	83 ec 0c             	sub    esp,0xc
c000bffe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c002:	e8 cd ff ff ff       	call   c000bfd4 <Bus::~Bus()>
c000c007:	83 c4 10             	add    esp,0x10
c000c00a:	83 ec 08             	sub    esp,0x8
c000c00d:	68 58 01 00 00       	push   0x158
c000c012:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c016:	e8 fd e7 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c01b:	83 c4 10             	add    esp,0x10
c000c01e:	83 c4 0c             	add    esp,0xc
c000c021:	c3                   	ret    

c000c022 <beepThread(void*)>:
c000c022:	83 ec 0c             	sub    esp,0xc
c000c025:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000c02a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c02e:	48                   	dec    eax
c000c02f:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000c034:	75 01                	jne    c000c037 <beepThread(void*)+0x15>
c000c036:	fb                   	sti    
c000c037:	83 ec 0c             	sub    esp,0xc
c000c03a:	6b c2 0a             	imul   eax,edx,0xa
c000c03d:	50                   	push   eax
c000c03e:	e8 15 9e 00 00       	call   c0015e58 <milliTenthSleep(unsigned int)>
c000c043:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c04a:	e8 64 bd 00 00       	call   c0017db3 <HalMakeBeep(int)>
c000c04f:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c057:	83 c4 1c             	add    esp,0x1c
c000c05a:	e9 dd 9c 00 00       	jmp    c0015d3c <blockTask(TaskState)>

c000c05f <Krnl::beep(int, int, bool)>:
c000c05f:	56                   	push   esi
c000c060:	53                   	push   ebx
c000c061:	83 ec 10             	sub    esp,0x10
c000c064:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c068:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c06c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c070:	e8 3e bd 00 00       	call   c0017db3 <HalMakeBeep(int)>
c000c075:	83 c4 10             	add    esp,0x10
c000c078:	89 f0                	mov    eax,esi
c000c07a:	84 c0                	test   al,al
c000c07c:	74 1e                	je     c000c09c <Krnl::beep(int, int, bool)+0x3d>
c000c07e:	83 ec 0c             	sub    esp,0xc
c000c081:	6b db 0a             	imul   ebx,ebx,0xa
c000c084:	53                   	push   ebx
c000c085:	e8 ce 9d 00 00       	call   c0015e58 <milliTenthSleep(unsigned int)>
c000c08a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c092:	83 c4 14             	add    esp,0x14
c000c095:	5b                   	pop    ebx
c000c096:	5e                   	pop    esi
c000c097:	e9 17 bd 00 00       	jmp    c0017db3 <HalMakeBeep(int)>
c000c09c:	68 e6 00 00 00       	push   0xe6
c000c0a1:	53                   	push   ebx
c000c0a2:	68 22 c0 00 c0       	push   0xc000c022
c000c0a7:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000c0ad:	e8 26 98 00 00       	call   c00158d8 <Process::createThread(void (*)(void*), void*, int)>
c000c0b2:	83 c4 14             	add    esp,0x14
c000c0b5:	5b                   	pop    ebx
c000c0b6:	5e                   	pop    esi
c000c0b7:	c3                   	ret    

c000c0b8 <User::loadClockSettings(int)>:
c000c0b8:	53                   	push   ebx
c000c0b9:	83 ec 14             	sub    esp,0x14
c000c0bc:	68 14 01 00 00       	push   0x114
c000c0c1:	e8 f0 b9 ff ff       	call   c0007ab6 <malloc>
c000c0c6:	83 c4 0c             	add    esp,0xc
c000c0c9:	89 c3                	mov    ebx,eax
c000c0cb:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000c0d1:	68 84 13 02 c0       	push   0xc0021384
c000c0d6:	50                   	push   eax
c000c0d7:	e8 54 f6 ff ff       	call   c000b730 <File::File(char const*, Process*)>
c000c0dc:	58                   	pop    eax
c000c0dd:	5a                   	pop    edx
c000c0de:	6a 01                	push   0x1
c000c0e0:	53                   	push   ebx
c000c0e1:	e8 06 f7 ff ff       	call   c000b7ec <File::open(FileOpenMode)>
c000c0e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c0e9:	e8 5c f7 ff ff       	call   c000b84a <File::close()>
c000c0ee:	83 c4 10             	add    esp,0x10
c000c0f1:	85 db                	test   ebx,ebx
c000c0f3:	74 0f                	je     c000c104 <User::loadClockSettings(int)+0x4c>
c000c0f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c0f7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c0fb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c0fe:	83 c4 08             	add    esp,0x8
c000c101:	5b                   	pop    ebx
c000c102:	ff e0                	jmp    eax
c000c104:	83 c4 08             	add    esp,0x8
c000c107:	5b                   	pop    ebx
c000c108:	c3                   	ret    
c000c109:	90                   	nop

c000c10a <Clock::Clock(char const*)>:
c000c10a:	83 ec 0c             	sub    esp,0xc
c000c10d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c111:	83 ec 08             	sub    esp,0x8
c000c114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c118:	50                   	push   eax
c000c119:	e8 b4 06 00 00       	call   c000c7d2 <Device::Device(char const*)>
c000c11e:	83 c4 10             	add    esp,0x10
c000c121:	ba ac 13 02 c0       	mov    edx,0xc00213ac
c000c126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c12a:	89 10                	mov    DWORD PTR [eax],edx
c000c12c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c130:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c13a:	90                   	nop
c000c13b:	83 c4 0c             	add    esp,0xc
c000c13e:	c3                   	ret    
c000c13f:	90                   	nop

c000c140 <Clock::~Clock()>:
c000c140:	83 ec 0c             	sub    esp,0xc
c000c143:	ba ac 13 02 c0       	mov    edx,0xc00213ac
c000c148:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c14c:	89 10                	mov    DWORD PTR [eax],edx
c000c14e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c152:	83 ec 0c             	sub    esp,0xc
c000c155:	50                   	push   eax
c000c156:	e8 e1 03 00 00       	call   c000c53c <Device::~Device()>
c000c15b:	83 c4 10             	add    esp,0x10
c000c15e:	90                   	nop
c000c15f:	83 c4 0c             	add    esp,0xc
c000c162:	c3                   	ret    
c000c163:	90                   	nop

c000c164 <Clock::~Clock()>:
c000c164:	83 ec 0c             	sub    esp,0xc
c000c167:	83 ec 0c             	sub    esp,0xc
c000c16a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c16e:	e8 cd ff ff ff       	call   c000c140 <Clock::~Clock()>
c000c173:	83 c4 10             	add    esp,0x10
c000c176:	83 ec 08             	sub    esp,0x8
c000c179:	68 58 01 00 00       	push   0x158
c000c17e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c182:	e8 91 e6 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c187:	83 c4 10             	add    esp,0x10
c000c18a:	83 c4 0c             	add    esp,0xc
c000c18d:	c3                   	ret    

c000c18e <Clock::timeInSecondsLocal()>:
c000c18e:	53                   	push   ebx
c000c18f:	83 ec 14             	sub    esp,0x14
c000c192:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c196:	8b 10                	mov    edx,DWORD PTR [eax]
c000c198:	50                   	push   eax
c000c199:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c19c:	0f b6 0d 08 64 02 c0 	movzx  ecx,BYTE PTR ds:0xc0026408
c000c1a3:	03 0d 0c 64 02 c0    	add    ecx,DWORD PTR ds:0xc002640c
c000c1a9:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c1af:	89 cb                	mov    ebx,ecx
c000c1b1:	c1 fb 1f             	sar    ebx,0x1f
c000c1b4:	01 c8                	add    eax,ecx
c000c1b6:	11 da                	adc    edx,ebx
c000c1b8:	83 c4 10             	add    esp,0x10
c000c1bb:	31 c9                	xor    ecx,ecx
c000c1bd:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c1c4:	74 05                	je     c000c1cb <Clock::timeInSecondsLocal()+0x3d>
c000c1c6:	b9 08 07 00 00       	mov    ecx,0x708
c000c1cb:	31 db                	xor    ebx,ebx
c000c1cd:	01 c8                	add    eax,ecx
c000c1cf:	11 da                	adc    edx,ebx
c000c1d1:	83 c4 08             	add    esp,0x8
c000c1d4:	5b                   	pop    ebx
c000c1d5:	c3                   	ret    

c000c1d6 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c1d6:	57                   	push   edi
c000c1d7:	56                   	push   esi
c000c1d8:	53                   	push   ebx
c000c1d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c1dd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c1e1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c1e3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c1e7:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c1ea:	0f b6 05 08 64 02 c0 	movzx  eax,BYTE PTR ds:0xc0026408
c000c1f1:	03 05 0c 64 02 c0    	add    eax,DWORD PTR ds:0xc002640c
c000c1f7:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c1fd:	99                   	cdq    
c000c1fe:	29 c6                	sub    esi,eax
c000c200:	19 d7                	sbb    edi,edx
c000c202:	89 f0                	mov    eax,esi
c000c204:	89 fa                	mov    edx,edi
c000c206:	31 f6                	xor    esi,esi
c000c208:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c20f:	74 05                	je     c000c216 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c211:	be 08 07 00 00       	mov    esi,0x708
c000c216:	31 ff                	xor    edi,edi
c000c218:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c21c:	29 f0                	sub    eax,esi
c000c21e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c222:	19 fa                	sbb    edx,edi
c000c224:	89 d8                	mov    eax,ebx
c000c226:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c22a:	5b                   	pop    ebx
c000c22b:	5e                   	pop    esi
c000c22c:	5f                   	pop    edi
c000c22d:	ff e0                	jmp    eax

c000c22f <datetimeToSeconds(datetime_t)>:
c000c22f:	55                   	push   ebp
c000c230:	57                   	push   edi
c000c231:	56                   	push   esi
c000c232:	53                   	push   ebx
c000c233:	83 ec 0c             	sub    esp,0xc
c000c236:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c23a:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000c23e:	89 d6                	mov    esi,edx
c000c240:	0f b6 c7             	movzx  eax,bh
c000c243:	c1 ee 10             	shr    esi,0x10
c000c246:	6b e8 3c             	imul   ebp,eax,0x3c
c000c249:	81 ee 6c 07 00 00    	sub    esi,0x76c
c000c24f:	0f b6 ce             	movzx  ecx,dh
c000c252:	89 df                	mov    edi,ebx
c000c254:	49                   	dec    ecx
c000c255:	c1 ef 10             	shr    edi,0x10
c000c258:	0f b6 db             	movzx  ebx,bl
c000c25b:	89 f8                	mov    eax,edi
c000c25d:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c000c263:	0f b6 f8             	movzx  edi,al
c000c266:	0f b6 d2             	movzx  edx,dl
c000c269:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000c26d:	01 d8                	add    eax,ebx
c000c26f:	0f b7 de             	movzx  ebx,si
c000c272:	89 04 24             	mov    DWORD PTR [esp],eax
c000c275:	c1 f8 1f             	sar    eax,0x1f
c000c278:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c27c:	0f b6 c1             	movzx  eax,cl
c000c27f:	8b 0c 85 e0 13 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdec20]
c000c286:	83 f8 01             	cmp    eax,0x1
c000c289:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000c28d:	76 27                	jbe    c000c2b6 <datetimeToSeconds(datetime_t)+0x87>
c000c28f:	83 e6 03             	and    esi,0x3
c000c292:	75 22                	jne    c000c2b6 <datetimeToSeconds(datetime_t)+0x87>
c000c294:	31 d2                	xor    edx,edx
c000c296:	be 64 00 00 00       	mov    esi,0x64
c000c29b:	89 d8                	mov    eax,ebx
c000c29d:	f7 f6                	div    esi
c000c29f:	85 d2                	test   edx,edx
c000c2a1:	75 12                	jne    c000c2b5 <datetimeToSeconds(datetime_t)+0x86>
c000c2a3:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c2a9:	be 90 01 00 00       	mov    esi,0x190
c000c2ae:	99                   	cdq    
c000c2af:	f7 fe                	idiv   esi
c000c2b1:	85 d2                	test   edx,edx
c000c2b3:	75 01                	jne    c000c2b6 <datetimeToSeconds(datetime_t)+0x87>
c000c2b5:	41                   	inc    ecx
c000c2b6:	83 fb 46             	cmp    ebx,0x46
c000c2b9:	76 48                	jbe    c000c303 <datetimeToSeconds(datetime_t)+0xd4>
c000c2bb:	be 46 00 00 00       	mov    esi,0x46
c000c2c0:	bf 64 00 00 00       	mov    edi,0x64
c000c2c5:	bd 90 01 00 00       	mov    ebp,0x190
c000c2ca:	b8 6d 01 00 00       	mov    eax,0x16d
c000c2cf:	f7 c6 03 00 00 00    	test   esi,0x3
c000c2d5:	75 23                	jne    c000c2fa <datetimeToSeconds(datetime_t)+0xcb>
c000c2d7:	89 f0                	mov    eax,esi
c000c2d9:	99                   	cdq    
c000c2da:	f7 ff                	idiv   edi
c000c2dc:	b8 6e 01 00 00       	mov    eax,0x16e
c000c2e1:	85 d2                	test   edx,edx
c000c2e3:	75 15                	jne    c000c2fa <datetimeToSeconds(datetime_t)+0xcb>
c000c2e5:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c2eb:	99                   	cdq    
c000c2ec:	f7 fd                	idiv   ebp
c000c2ee:	83 fa 01             	cmp    edx,0x1
c000c2f1:	19 c0                	sbb    eax,eax
c000c2f3:	f7 d0                	not    eax
c000c2f5:	05 6e 01 00 00       	add    eax,0x16e
c000c2fa:	01 c1                	add    ecx,eax
c000c2fc:	46                   	inc    esi
c000c2fd:	39 de                	cmp    esi,ebx
c000c2ff:	7c c9                	jl     c000c2ca <datetimeToSeconds(datetime_t)+0x9b>
c000c301:	eb 34                	jmp    c000c337 <datetimeToSeconds(datetime_t)+0x108>
c000c303:	74 32                	je     c000c337 <datetimeToSeconds(datetime_t)+0x108>
c000c305:	b8 45 00 00 00       	mov    eax,0x45
c000c30a:	89 c2                	mov    edx,eax
c000c30c:	83 e2 03             	and    edx,0x3
c000c30f:	39 d8                	cmp    eax,ebx
c000c311:	7e 0f                	jle    c000c322 <datetimeToSeconds(datetime_t)+0xf3>
c000c313:	83 fa 01             	cmp    edx,0x1
c000c316:	19 d2                	sbb    edx,edx
c000c318:	48                   	dec    eax
c000c319:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c320:	eb e8                	jmp    c000c30a <datetimeToSeconds(datetime_t)+0xdb>
c000c322:	b8 6d 01 00 00       	mov    eax,0x16d
c000c327:	85 d2                	test   edx,edx
c000c329:	75 0a                	jne    c000c335 <datetimeToSeconds(datetime_t)+0x106>
c000c32b:	83 fb 01             	cmp    ebx,0x1
c000c32e:	19 c0                	sbb    eax,eax
c000c330:	05 6e 01 00 00       	add    eax,0x16e
c000c335:	29 c1                	sub    ecx,eax
c000c337:	b8 80 51 01 00       	mov    eax,0x15180
c000c33c:	f7 e9                	imul   ecx
c000c33e:	03 04 24             	add    eax,DWORD PTR [esp]
c000c341:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c345:	83 c4 0c             	add    esp,0xc
c000c348:	5b                   	pop    ebx
c000c349:	5e                   	pop    esi
c000c34a:	5f                   	pop    edi
c000c34b:	5d                   	pop    ebp
c000c34c:	c3                   	ret    
c000c34d:	90                   	nop

c000c34e <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c34e:	57                   	push   edi
c000c34f:	56                   	push   esi
c000c350:	53                   	push   ebx
c000c351:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c355:	8b 06                	mov    eax,DWORD PTR [esi]
c000c357:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c35a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c35e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c362:	e8 c8 fe ff ff       	call   c000c22f <datetimeToSeconds(datetime_t)>
c000c367:	59                   	pop    ecx
c000c368:	0f b6 0d 08 64 02 c0 	movzx  ecx,BYTE PTR ds:0xc0026408
c000c36f:	5b                   	pop    ebx
c000c370:	03 0d 0c 64 02 c0    	add    ecx,DWORD PTR ds:0xc002640c
c000c376:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c37c:	89 cb                	mov    ebx,ecx
c000c37e:	c1 fb 1f             	sar    ebx,0x1f
c000c381:	29 c8                	sub    eax,ecx
c000c383:	19 da                	sbb    edx,ebx
c000c385:	31 c9                	xor    ecx,ecx
c000c387:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c38e:	74 05                	je     c000c395 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c390:	b9 08 07 00 00       	mov    ecx,0x708
c000c395:	31 db                	xor    ebx,ebx
c000c397:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c39b:	29 c8                	sub    eax,ecx
c000c39d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c3a1:	19 da                	sbb    edx,ebx
c000c3a3:	89 f8                	mov    eax,edi
c000c3a5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c3a9:	5b                   	pop    ebx
c000c3aa:	5e                   	pop    esi
c000c3ab:	5f                   	pop    edi
c000c3ac:	ff e0                	jmp    eax

c000c3ae <secondsToDatetime(unsigned long long)>:
c000c3ae:	55                   	push   ebp
c000c3af:	57                   	push   edi
c000c3b0:	56                   	push   esi
c000c3b1:	53                   	push   ebx
c000c3b2:	83 ec 1c             	sub    esp,0x1c
c000c3b5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c3b9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c3bd:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c3c1:	6a 00                	push   0x0
c000c3c3:	68 80 51 01 00       	push   0x15180
c000c3c8:	55                   	push   ebp
c000c3c9:	57                   	push   edi
c000c3ca:	e8 d1 2d 01 00       	call   c001f1a0 <__udivdi3>
c000c3cf:	83 c4 10             	add    esp,0x10
c000c3d2:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c3d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c3dc:	6a 00                	push   0x0
c000c3de:	68 80 51 01 00       	push   0x15180
c000c3e3:	55                   	push   ebp
c000c3e4:	57                   	push   edi
c000c3e5:	bf 10 0e 00 00       	mov    edi,0xe10
c000c3ea:	e8 b1 2e 01 00       	call   c001f2a0 <__umoddi3>
c000c3ef:	83 c4 10             	add    esp,0x10
c000c3f2:	99                   	cdq    
c000c3f3:	f7 ff                	idiv   edi
c000c3f5:	bf 3c 00 00 00       	mov    edi,0x3c
c000c3fa:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c3fd:	89 d0                	mov    eax,edx
c000c3ff:	99                   	cdq    
c000c400:	f7 ff                	idiv   edi
c000c402:	85 db                	test   ebx,ebx
c000c404:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c407:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c40a:	79 11                	jns    c000c41d <secondsToDatetime(unsigned long long)+0x6f>
c000c40c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c410:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c416:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c41b:	eb 07                	jmp    c000c424 <secondsToDatetime(unsigned long long)+0x76>
c000c41d:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c422:	89 d8                	mov    eax,ebx
c000c424:	bf b4 05 00 00       	mov    edi,0x5b4
c000c429:	99                   	cdq    
c000c42a:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c42f:	f7 f9                	idiv   ecx
c000c431:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c436:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c43a:	31 d2                	xor    edx,edx
c000c43c:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c444:	01 c3                	add    ebx,eax
c000c446:	89 d8                	mov    eax,ebx
c000c448:	f7 f1                	div    ecx
c000c44a:	31 d2                	xor    edx,edx
c000c44c:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c44f:	89 d8                	mov    eax,ebx
c000c451:	f7 f7                	div    edi
c000c453:	31 d2                	xor    edx,edx
c000c455:	29 c1                	sub    ecx,eax
c000c457:	89 d8                	mov    eax,ebx
c000c459:	f7 f5                	div    ebp
c000c45b:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c460:	29 c1                	sub    ecx,eax
c000c462:	31 d2                	xor    edx,edx
c000c464:	89 c8                	mov    eax,ecx
c000c466:	f7 f5                	div    ebp
c000c468:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c46d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 c8                	mov    eax,ecx
c000c475:	f7 f5                	div    ebp
c000c477:	31 d2                	xor    edx,edx
c000c479:	01 c3                	add    ebx,eax
c000c47b:	89 c8                	mov    eax,ecx
c000c47d:	f7 f7                	div    edi
c000c47f:	bf 99 00 00 00       	mov    edi,0x99
c000c484:	29 c3                	sub    ebx,eax
c000c486:	31 d2                	xor    edx,edx
c000c488:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c490:	29 c3                	sub    ebx,eax
c000c492:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c495:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c498:	bb 05 00 00 00       	mov    ebx,0x5
c000c49d:	83 c1 02             	add    ecx,0x2
c000c4a0:	89 c8                	mov    eax,ecx
c000c4a2:	f7 f7                	div    edi
c000c4a4:	31 d2                	xor    edx,edx
c000c4a6:	89 c7                	mov    edi,eax
c000c4a8:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c4ae:	83 c0 02             	add    eax,0x2
c000c4b1:	f7 f3                	div    ebx
c000c4b3:	89 eb                	mov    ebx,ebp
c000c4b5:	29 c3                	sub    ebx,eax
c000c4b7:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c4bd:	88 1e                	mov    BYTE PTR [esi],bl
c000c4bf:	19 c0                	sbb    eax,eax
c000c4c1:	31 d2                	xor    edx,edx
c000c4c3:	83 e0 0c             	and    eax,0xc
c000c4c6:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c4ca:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c4d2:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c4d6:	83 f9 01             	cmp    ecx,0x1
c000c4d9:	0f 96 c2             	setbe  dl
c000c4dc:	41                   	inc    ecx
c000c4dd:	01 d0                	add    eax,edx
c000c4df:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c4e2:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c4e6:	83 c4 1c             	add    esp,0x1c
c000c4e9:	89 f0                	mov    eax,esi
c000c4eb:	5b                   	pop    ebx
c000c4ec:	5e                   	pop    esi
c000c4ed:	5f                   	pop    edi
c000c4ee:	5d                   	pop    ebp
c000c4ef:	c2 04 00             	ret    0x4

c000c4f2 <Clock::timeInDatetimeLocal()>:
c000c4f2:	53                   	push   ebx
c000c4f3:	83 ec 14             	sub    esp,0x14
c000c4f6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c4fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c4fe:	e8 8b fc ff ff       	call   c000c18e <Clock::timeInSecondsLocal()>
c000c503:	83 c4 0c             	add    esp,0xc
c000c506:	52                   	push   edx
c000c507:	50                   	push   eax
c000c508:	53                   	push   ebx
c000c509:	e8 a0 fe ff ff       	call   c000c3ae <secondsToDatetime(unsigned long long)>
c000c50e:	89 d8                	mov    eax,ebx
c000c510:	83 c4 14             	add    esp,0x14
c000c513:	5b                   	pop    ebx
c000c514:	c2 04 00             	ret    0x4
c000c517:	90                   	nop

c000c518 <Device::hibernate()>:
c000c518:	c3                   	ret    
c000c519:	90                   	nop

c000c51a <Device::wake()>:
c000c51a:	c3                   	ret    
c000c51b:	90                   	nop

c000c51c <Device::detect()>:
c000c51c:	c3                   	ret    
c000c51d:	90                   	nop

c000c51e <Device::disableLegacy()>:
c000c51e:	c3                   	ret    
c000c51f:	90                   	nop

c000c520 <Device::powerSaving(PowerSavingLevel)>:
c000c520:	c3                   	ret    
c000c521:	90                   	nop

c000c522 <DriverlessDevice::close(int, int, void*)>:
c000c522:	31 c0                	xor    eax,eax
c000c524:	c3                   	ret    
c000c525:	90                   	nop

c000c526 <DriverlessDevice::detect()>:
c000c526:	c3                   	ret    
c000c527:	90                   	nop

c000c528 <DriverlessDevice::open(int, int, void*)>:
c000c528:	83 ec 18             	sub    esp,0x18
c000c52b:	68 10 14 02 c0       	push   0xc0021410
c000c530:	e8 34 4d 00 00       	call   c0011269 <KePanic(char const*)>
c000c535:	83 c8 ff             	or     eax,0xffffffff
c000c538:	83 c4 1c             	add    esp,0x1c
c000c53b:	c3                   	ret    

c000c53c <Device::~Device()>:
c000c53c:	ba 70 14 02 c0       	mov    edx,0xc0021470
c000c541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c545:	89 10                	mov    DWORD PTR [eax],edx
c000c547:	90                   	nop
c000c548:	c3                   	ret    
c000c549:	90                   	nop

c000c54a <Device::~Device()>:
c000c54a:	83 ec 0c             	sub    esp,0xc
c000c54d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c551:	e8 e6 ff ff ff       	call   c000c53c <Device::~Device()>
c000c556:	83 c4 04             	add    esp,0x4
c000c559:	83 ec 08             	sub    esp,0x8
c000c55c:	68 58 01 00 00       	push   0x158
c000c561:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c565:	e8 ae e2 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c56a:	83 c4 10             	add    esp,0x10
c000c56d:	83 c4 0c             	add    esp,0xc
c000c570:	c3                   	ret    
c000c571:	90                   	nop

c000c572 <Device::findAndLoadDriver()>:
c000c572:	c7 44 24 04 2e 14 02 c0 	mov    DWORD PTR [esp+0x4],0xc002142e
c000c57a:	e9 c6 e3 ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c000c57f:	90                   	nop

c000c580 <Device::preOpenPCI(PCIDeviceInfo)>:
c000c580:	57                   	push   edi
c000c581:	b9 09 00 00 00       	mov    ecx,0x9
c000c586:	56                   	push   esi
c000c587:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c58b:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c58f:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c599:	81 c7 18 01 00 00    	add    edi,0x118
c000c59f:	fc                   	cld    
c000c5a0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c5a2:	5e                   	pop    esi
c000c5a3:	5f                   	pop    edi
c000c5a4:	c3                   	ret    
c000c5a5:	90                   	nop

c000c5a6 <Device::preOpenACPI(void*, char*, char*)>:
c000c5a6:	57                   	push   edi
c000c5a7:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c5ac:	56                   	push   esi
c000c5ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c5b1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5b5:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c5bf:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c5c5:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c5cb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c5cf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c5d1:	b9 0e 00 00 00       	mov    ecx,0xe
c000c5d6:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c5dc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c5e0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c5e2:	5e                   	pop    esi
c000c5e3:	5f                   	pop    edi
c000c5e4:	c3                   	ret    
c000c5e5:	90                   	nop

c000c5e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c5e6:	53                   	push   ebx
c000c5e7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c5eb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c5ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c5f3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c5f7:	0f b6 c0             	movzx  eax,al
c000c5fa:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c5fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c602:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c606:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c60a:	5b                   	pop    ebx
c000c60b:	e9 a8 05 00 00       	jmp    c000cbb8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c610 <Device::getParent()>:
c000c610:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c614:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c61a:	c3                   	ret    
c000c61b:	90                   	nop

c000c61c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c61c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c620:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c624:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c629:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c62d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c631:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c635:	e9 e6 06 00 00       	jmp    c000cd20 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c63a <Device::addChild(Device*)>:
c000c63a:	53                   	push   ebx
c000c63b:	83 ec 08             	sub    esp,0x8
c000c63e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c642:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c646:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c64c:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c652:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c654:	85 d2                	test   edx,edx
c000c656:	74 04                	je     c000c65c <Device::addChild(Device*)+0x22>
c000c658:	89 d3                	mov    ebx,edx
c000c65a:	eb f6                	jmp    c000c652 <Device::addChild(Device*)+0x18>
c000c65c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c65f:	83 ec 0c             	sub    esp,0xc
c000c662:	6a 08                	push   0x8
c000c664:	e8 4d b4 ff ff       	call   c0007ab6 <malloc>
c000c669:	89 03                	mov    DWORD PTR [ebx],eax
c000c66b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c671:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c678:	83 c4 18             	add    esp,0x18
c000c67b:	5b                   	pop    ebx
c000c67c:	c3                   	ret    
c000c67d:	90                   	nop

c000c67e <Device::removeAllChildren()>:
c000c67e:	56                   	push   esi
c000c67f:	53                   	push   ebx
c000c680:	52                   	push   edx
c000c681:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c685:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c68b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c68e:	74 17                	je     c000c6a7 <Device::removeAllChildren()+0x29>
c000c690:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c693:	85 c0                	test   eax,eax
c000c695:	74 0c                	je     c000c6a3 <Device::removeAllChildren()+0x25>
c000c697:	83 ec 0c             	sub    esp,0xc
c000c69a:	8b 10                	mov    edx,DWORD PTR [eax]
c000c69c:	50                   	push   eax
c000c69d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c6a0:	83 c4 10             	add    esp,0x10
c000c6a3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c6a5:	eb e4                	jmp    c000c68b <Device::removeAllChildren()+0xd>
c000c6a7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c6ad:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c6b3:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c6b9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c6c0:	58                   	pop    eax
c000c6c1:	5b                   	pop    ebx
c000c6c2:	5e                   	pop    esi
c000c6c3:	c3                   	ret    

c000c6c4 <Device::hibernateAll()>:
c000c6c4:	53                   	push   ebx
c000c6c5:	83 ec 14             	sub    esp,0x14
c000c6c8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c6cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c6ce:	53                   	push   ebx
c000c6cf:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c6d2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c6d8:	83 c4 10             	add    esp,0x10
c000c6db:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c6de:	74 0f                	je     c000c6ef <Device::hibernateAll()+0x2b>
c000c6e0:	83 ec 0c             	sub    esp,0xc
c000c6e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c6e6:	e8 d9 ff ff ff       	call   c000c6c4 <Device::hibernateAll()>
c000c6eb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c6ed:	eb e9                	jmp    c000c6d8 <Device::hibernateAll()+0x14>
c000c6ef:	83 c4 08             	add    esp,0x8
c000c6f2:	5b                   	pop    ebx
c000c6f3:	c3                   	ret    

c000c6f4 <Device::wakeAll()>:
c000c6f4:	53                   	push   ebx
c000c6f5:	83 ec 14             	sub    esp,0x14
c000c6f8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c6fc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c6fe:	53                   	push   ebx
c000c6ff:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000c702:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c708:	83 c4 10             	add    esp,0x10
c000c70b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c70e:	74 0f                	je     c000c71f <Device::wakeAll()+0x2b>
c000c710:	83 ec 0c             	sub    esp,0xc
c000c713:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c716:	e8 d9 ff ff ff       	call   c000c6f4 <Device::wakeAll()>
c000c71b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c71d:	eb e9                	jmp    c000c708 <Device::wakeAll()+0x14>
c000c71f:	83 c4 08             	add    esp,0x8
c000c722:	5b                   	pop    ebx
c000c723:	c3                   	ret    

c000c724 <Device::detectAll()>:
c000c724:	53                   	push   ebx
c000c725:	83 ec 14             	sub    esp,0x14
c000c728:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c72c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c72e:	53                   	push   ebx
c000c72f:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000c732:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c738:	83 c4 10             	add    esp,0x10
c000c73b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c73e:	74 0f                	je     c000c74f <Device::detectAll()+0x2b>
c000c740:	83 ec 0c             	sub    esp,0xc
c000c743:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c746:	e8 d9 ff ff ff       	call   c000c724 <Device::detectAll()>
c000c74b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c74d:	eb e9                	jmp    c000c738 <Device::detectAll()+0x14>
c000c74f:	83 c4 08             	add    esp,0x8
c000c752:	5b                   	pop    ebx
c000c753:	c3                   	ret    

c000c754 <Device::disableLegacyAll()>:
c000c754:	c3                   	ret    
c000c755:	90                   	nop

c000c756 <Device::loadDriversForAll()>:
c000c756:	c3                   	ret    
c000c757:	90                   	nop

c000c758 <Device::closeAll()>:
c000c758:	53                   	push   ebx
c000c759:	83 ec 08             	sub    esp,0x8
c000c75c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c760:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c762:	6a 00                	push   0x0
c000c764:	6a 00                	push   0x0
c000c766:	6a 00                	push   0x0
c000c768:	53                   	push   ebx
c000c769:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c76c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c772:	83 c4 10             	add    esp,0x10
c000c775:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c778:	74 0f                	je     c000c789 <Device::closeAll()+0x31>
c000c77a:	83 ec 0c             	sub    esp,0xc
c000c77d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c780:	e8 d3 ff ff ff       	call   c000c758 <Device::closeAll()>
c000c785:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c787:	eb e9                	jmp    c000c772 <Device::closeAll()+0x1a>
c000c789:	83 c4 08             	add    esp,0x8
c000c78c:	5b                   	pop    ebx
c000c78d:	c3                   	ret    

c000c78e <Device::powerSavingAll(PowerSavingLevel)>:
c000c78e:	56                   	push   esi
c000c78f:	53                   	push   ebx
c000c790:	83 ec 0c             	sub    esp,0xc
c000c793:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c797:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c79b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c79d:	56                   	push   esi
c000c79e:	53                   	push   ebx
c000c79f:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c7a2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c7a8:	83 c4 10             	add    esp,0x10
c000c7ab:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c7ae:	74 0f                	je     c000c7bf <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c7b0:	52                   	push   edx
c000c7b1:	52                   	push   edx
c000c7b2:	56                   	push   esi
c000c7b3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c7b6:	e8 d3 ff ff ff       	call   c000c78e <Device::powerSavingAll(PowerSavingLevel)>
c000c7bb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c7bd:	eb e9                	jmp    c000c7a8 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c7bf:	58                   	pop    eax
c000c7c0:	5b                   	pop    ebx
c000c7c1:	5e                   	pop    esi
c000c7c2:	c3                   	ret    
c000c7c3:	90                   	nop

c000c7c4 <Device::setName(char const*)>:
c000c7c4:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c7cc:	e9 6f 3e ff ff       	jmp    c0000640 <strcpy>
c000c7d1:	90                   	nop

c000c7d2 <Device::Device(char const*)>:
c000c7d2:	83 ec 1c             	sub    esp,0x1c
c000c7d5:	ba 70 14 02 c0       	mov    edx,0xc0021470
c000c7da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7de:	89 10                	mov    DWORD PTR [eax],edx
c000c7e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7e4:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c7ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7f2:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c7fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c800:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c80a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c80e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c818:	83 ec 08             	sub    esp,0x8
c000c81b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c81f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c823:	e8 9c ff ff ff       	call   c000c7c4 <Device::setName(char const*)>
c000c828:	83 c4 10             	add    esp,0x10
c000c82b:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c833:	83 ec 0c             	sub    esp,0xc
c000c836:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c83a:	e8 77 b2 ff ff       	call   c0007ab6 <malloc>
c000c83f:	83 c4 10             	add    esp,0x10
c000c842:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c848:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c84f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c853:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c859:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c85d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c863:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c869:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c86d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c873:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c87a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c87e:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c885:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c889:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c890:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c894:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c89e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8a2:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c8ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8b0:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c8ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8be:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c8c8:	90                   	nop
c000c8c9:	83 c4 1c             	add    esp,0x1c
c000c8cc:	c3                   	ret    
c000c8cd:	90                   	nop

c000c8ce <Device::getName()>:
c000c8ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c8d2:	05 d0 00 00 00       	add    eax,0xd0
c000c8d7:	c3                   	ret    

c000c8d8 <DriverlessDevice::DriverlessDevice(char const*)>:
c000c8d8:	83 ec 0c             	sub    esp,0xc
c000c8db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8df:	83 ec 08             	sub    esp,0x8
c000c8e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8e6:	50                   	push   eax
c000c8e7:	e8 e6 fe ff ff       	call   c000c7d2 <Device::Device(char const*)>
c000c8ec:	83 c4 10             	add    esp,0x10
c000c8ef:	ba 9c 14 02 c0       	mov    edx,0xc002149c
c000c8f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8f8:	89 10                	mov    DWORD PTR [eax],edx
c000c8fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8fe:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c908:	90                   	nop
c000c909:	83 c4 0c             	add    esp,0xc
c000c90c:	c3                   	ret    
c000c90d:	90                   	nop

c000c90e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c90e:	57                   	push   edi
c000c90f:	56                   	push   esi
c000c910:	53                   	push   ebx
c000c911:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c915:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c919:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c91d:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c923:	75 0c                	jne    c000c931 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c925:	52                   	push   edx
c000c926:	52                   	push   edx
c000c927:	53                   	push   ebx
c000c928:	56                   	push   esi
c000c929:	e8 24 2d 01 00       	call   c001f652 <LinkedList<Device>::addElement(Device*)>
c000c92e:	83 c4 10             	add    esp,0x10
c000c931:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c937:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c93a:	74 12                	je     c000c94e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c93c:	50                   	push   eax
c000c93d:	57                   	push   edi
c000c93e:	56                   	push   esi
c000c93f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c942:	e8 c7 ff ff ff       	call   c000c90e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c947:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c949:	83 c4 10             	add    esp,0x10
c000c94c:	eb e9                	jmp    c000c937 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c94e:	5b                   	pop    ebx
c000c94f:	5e                   	pop    esi
c000c950:	5f                   	pop    edi
c000c951:	c3                   	ret    

c000c952 <getDevicesOfType(DeviceType)>:
c000c952:	53                   	push   ebx
c000c953:	83 ec 14             	sub    esp,0x14
c000c956:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c95a:	53                   	push   ebx
c000c95b:	e8 ce 2d 01 00       	call   c001f72e <LinkedList<Device>::LinkedList()>
c000c960:	83 c4 0c             	add    esp,0xc
c000c963:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c967:	53                   	push   ebx
c000c968:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000c96e:	e8 9b ff ff ff       	call   c000c90e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c973:	89 d8                	mov    eax,ebx
c000c975:	83 c4 18             	add    esp,0x18
c000c978:	5b                   	pop    ebx
c000c979:	c2 04 00             	ret    0x4

c000c97c <HardDiskController::HardDiskController(char const*)>:
c000c97c:	83 ec 0c             	sub    esp,0xc
c000c97f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c983:	83 ec 08             	sub    esp,0x8
c000c986:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c98a:	50                   	push   eax
c000c98b:	e8 42 fe ff ff       	call   c000c7d2 <Device::Device(char const*)>
c000c990:	83 c4 10             	add    esp,0x10
c000c993:	ba c8 14 02 c0       	mov    edx,0xc00214c8
c000c998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c99c:	89 10                	mov    DWORD PTR [eax],edx
c000c99e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9a2:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c9ac:	90                   	nop
c000c9ad:	83 c4 0c             	add    esp,0xc
c000c9b0:	c3                   	ret    
c000c9b1:	90                   	nop
c000c9b2:	66 90                	xchg   ax,ax

c000c9b4 <HardDiskController::~HardDiskController()>:
c000c9b4:	83 ec 0c             	sub    esp,0xc
c000c9b7:	ba c8 14 02 c0       	mov    edx,0xc00214c8
c000c9bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9c0:	89 10                	mov    DWORD PTR [eax],edx
c000c9c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9c6:	83 ec 0c             	sub    esp,0xc
c000c9c9:	50                   	push   eax
c000c9ca:	e8 6d fb ff ff       	call   c000c53c <Device::~Device()>
c000c9cf:	83 c4 10             	add    esp,0x10
c000c9d2:	90                   	nop
c000c9d3:	83 c4 0c             	add    esp,0xc
c000c9d6:	c3                   	ret    
c000c9d7:	90                   	nop

c000c9d8 <HardDiskController::~HardDiskController()>:
c000c9d8:	83 ec 0c             	sub    esp,0xc
c000c9db:	83 ec 0c             	sub    esp,0xc
c000c9de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9e2:	e8 cd ff ff ff       	call   c000c9b4 <HardDiskController::~HardDiskController()>
c000c9e7:	83 c4 10             	add    esp,0x10
c000c9ea:	83 ec 08             	sub    esp,0x8
c000c9ed:	68 58 01 00 00       	push   0x158
c000c9f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f6:	e8 1d de ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c9fb:	83 c4 10             	add    esp,0x10
c000c9fe:	83 c4 0c             	add    esp,0xc
c000ca01:	c3                   	ret    

c000ca02 <PhysicalDisk::eject()>:
c000ca02:	83 c8 ff             	or     eax,0xffffffff
c000ca05:	c3                   	ret    

c000ca06 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000ca06:	83 ec 0c             	sub    esp,0xc
c000ca09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca0d:	83 ec 08             	sub    esp,0x8
c000ca10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca14:	50                   	push   eax
c000ca15:	e8 b8 fd ff ff       	call   c000c7d2 <Device::Device(char const*)>
c000ca1a:	83 c4 10             	add    esp,0x10
c000ca1d:	ba f4 14 02 c0       	mov    edx,0xc00214f4
c000ca22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca26:	89 10                	mov    DWORD PTR [eax],edx
c000ca28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca2c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ca33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca37:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000ca3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca42:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000ca4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca50:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ca54:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000ca5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca5e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ca68:	90                   	nop
c000ca69:	83 c4 0c             	add    esp,0xc
c000ca6c:	c3                   	ret    
c000ca6d:	90                   	nop

c000ca6e <PhysicalDisk::startCache()>:
c000ca6e:	56                   	push   esi
c000ca6f:	53                   	push   ebx
c000ca70:	83 ec 10             	sub    esp,0x10
c000ca73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca77:	6a 44                	push   0x44
c000ca79:	e8 38 b0 ff ff       	call   c0007ab6 <malloc>
c000ca7e:	89 c6                	mov    esi,eax
c000ca80:	58                   	pop    eax
c000ca81:	5a                   	pop    edx
c000ca82:	53                   	push   ebx
c000ca83:	56                   	push   esi
c000ca84:	e8 7b 17 00 00       	call   c000e204 <VCache::VCache(PhysicalDisk*)>
c000ca89:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000ca8f:	83 c4 14             	add    esp,0x14
c000ca92:	5b                   	pop    ebx
c000ca93:	5e                   	pop    esi
c000ca94:	c3                   	ret    
c000ca95:	90                   	nop

c000ca96 <PhysicalDisk::~PhysicalDisk()>:
c000ca96:	83 ec 0c             	sub    esp,0xc
c000ca99:	ba f4 14 02 c0       	mov    edx,0xc00214f4
c000ca9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000caa2:	89 10                	mov    DWORD PTR [eax],edx
c000caa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000caa8:	83 ec 0c             	sub    esp,0xc
c000caab:	50                   	push   eax
c000caac:	e8 8b fa ff ff       	call   c000c53c <Device::~Device()>
c000cab1:	83 c4 10             	add    esp,0x10
c000cab4:	90                   	nop
c000cab5:	83 c4 0c             	add    esp,0xc
c000cab8:	c3                   	ret    
c000cab9:	90                   	nop

c000caba <PhysicalDisk::~PhysicalDisk()>:
c000caba:	83 ec 0c             	sub    esp,0xc
c000cabd:	83 ec 0c             	sub    esp,0xc
c000cac0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cac4:	e8 cd ff ff ff       	call   c000ca96 <PhysicalDisk::~PhysicalDisk()>
c000cac9:	83 c4 10             	add    esp,0x10
c000cacc:	83 ec 08             	sub    esp,0x8
c000cacf:	68 6c 01 00 00       	push   0x16c
c000cad4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cad8:	e8 3b dd ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000cadd:	83 c4 10             	add    esp,0x10
c000cae0:	83 c4 0c             	add    esp,0xc
c000cae3:	c3                   	ret    

c000cae4 <int_handler>:
c000cae4:	55                   	push   ebp
c000cae5:	57                   	push   edi
c000cae6:	56                   	push   esi
c000cae7:	53                   	push   ebx
c000cae8:	83 ec 0c             	sub    esp,0xc
c000caeb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000caef:	80 3d 88 8e 02 c0 00 	cmp    BYTE PTR ds:0xc0028e88,0x0
c000caf6:	74 0b                	je     c000cb03 <int_handler+0x1f>
c000caf8:	fa                   	cli    
c000caf9:	f4                   	hlt    
c000cafa:	80 3d 88 8e 02 c0 00 	cmp    BYTE PTR ds:0xc0028e88,0x0
c000cb01:	75 f5                	jne    c000caf8 <int_handler+0x14>
c000cb03:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000cb06:	8d 46 e0             	lea    eax,[esi-0x20]
c000cb09:	83 f8 17             	cmp    eax,0x17
c000cb0c:	76 40                	jbe    c000cb4e <int_handler+0x6a>
c000cb0e:	c1 e6 04             	shl    esi,0x4
c000cb11:	31 db                	xor    ebx,ebx
c000cb13:	8d ae 20 74 02 c0    	lea    ebp,[esi-0x3ffd8be0]
c000cb19:	81 c6 20 64 02 c0    	add    esi,0xc0026420
c000cb1f:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000cb23:	85 c0                	test   eax,eax
c000cb25:	74 13                	je     c000cb3a <int_handler+0x56>
c000cb27:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000cb2a:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000cb2e:	74 2c                	je     c000cb5c <int_handler+0x78>
c000cb30:	83 ec 08             	sub    esp,0x8
c000cb33:	52                   	push   edx
c000cb34:	57                   	push   edi
c000cb35:	ff d0                	call   eax
c000cb37:	83 c4 10             	add    esp,0x10
c000cb3a:	83 c3 01             	add    ebx,0x1
c000cb3d:	83 fb 04             	cmp    ebx,0x4
c000cb40:	75 dd                	jne    c000cb1f <int_handler+0x3b>
c000cb42:	83 c4 0c             	add    esp,0xc
c000cb45:	31 c0                	xor    eax,eax
c000cb47:	5b                   	pop    ebx
c000cb48:	31 d2                	xor    edx,edx
c000cb4a:	5e                   	pop    esi
c000cb4b:	5f                   	pop    edi
c000cb4c:	5d                   	pop    ebp
c000cb4d:	c3                   	ret    
c000cb4e:	83 ec 0c             	sub    esp,0xc
c000cb51:	50                   	push   eax
c000cb52:	e8 99 b2 00 00       	call   c0017df0 <HalEndOfInterrupt(int)>
c000cb57:	83 c4 10             	add    esp,0x10
c000cb5a:	eb b2                	jmp    c000cb0e <int_handler+0x2a>
c000cb5c:	83 ec 08             	sub    esp,0x8
c000cb5f:	52                   	push   edx
c000cb60:	57                   	push   edi
c000cb61:	ff d0                	call   eax
c000cb63:	83 c4 10             	add    esp,0x10
c000cb66:	83 c4 0c             	add    esp,0xc
c000cb69:	5b                   	pop    ebx
c000cb6a:	5e                   	pop    esi
c000cb6b:	5f                   	pop    edi
c000cb6c:	5d                   	pop    ebp
c000cb6d:	c3                   	ret    

c000cb6e <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cb6e:	56                   	push   esi
c000cb6f:	31 c0                	xor    eax,eax
c000cb71:	53                   	push   ebx
c000cb72:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cb76:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cb7a:	89 ca                	mov    edx,ecx
c000cb7c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cb80:	c1 e2 04             	shl    edx,0x4
c000cb83:	83 bc 82 20 74 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd8be0],0x0
c000cb8b:	74 17                	je     c000cba4 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cb8d:	83 c0 01             	add    eax,0x1
c000cb90:	83 f8 04             	cmp    eax,0x4
c000cb93:	75 ee                	jne    c000cb83 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cb95:	c7 44 24 0c 24 15 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021524
c000cb9d:	5b                   	pop    ebx
c000cb9e:	5e                   	pop    esi
c000cb9f:	e9 c5 46 00 00       	jmp    c0011269 <KePanic(char const*)>
c000cba4:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cba7:	89 1c 85 20 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8be0],ebx
c000cbae:	89 34 85 20 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9be0],esi
c000cbb5:	5b                   	pop    ebx
c000cbb6:	5e                   	pop    esi
c000cbb7:	c3                   	ret    

c000cbb8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cbb8:	57                   	push   edi
c000cbb9:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000cbbf:	56                   	push   esi
c000cbc0:	53                   	push   ebx
c000cbc1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cbc5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cbc9:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cbd0:	74 54                	je     c000cc26 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c000cbd2:	89 c7                	mov    edi,eax
c000cbd4:	84 c0                	test   al,al
c000cbd6:	74 1d                	je     c000cbf5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000cbd8:	83 fe 0f             	cmp    esi,0xf
c000cbdb:	0f 8f d5 00 00 00    	jg     c000ccb6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c000cbe1:	0f b6 b6 28 30 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdcfd8]
c000cbe8:	0f b7 bc 36 c0 8b 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd7440]
c000cbf0:	d1 ef                	shr    edi,1
c000cbf2:	83 e7 01             	and    edi,0x1
c000cbf5:	83 ec 08             	sub    esp,0x8
c000cbf8:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c000cbfd:	31 db                	xor    ebx,ebx
c000cbff:	50                   	push   eax
c000cc00:	68 31 15 02 c0       	push   0xc0021531
c000cc05:	e8 3b dd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000cc0a:	83 c4 10             	add    esp,0x10
c000cc0d:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c000cc12:	85 c0                	test   eax,eax
c000cc14:	7f 55                	jg     c000cc6b <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000cc16:	83 ec 0c             	sub    esp,0xc
c000cc19:	68 48 15 02 c0       	push   0xc0021548
c000cc1e:	e8 46 46 00 00       	call   c0011269 <KePanic(char const*)>
c000cc23:	83 c4 10             	add    esp,0x10
c000cc26:	8d 7e 20             	lea    edi,[esi+0x20]
c000cc29:	89 f8                	mov    eax,edi
c000cc2b:	31 d2                	xor    edx,edx
c000cc2d:	c1 e0 04             	shl    eax,0x4
c000cc30:	8b 8c 90 20 74 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd8be0]
c000cc37:	85 c9                	test   ecx,ecx
c000cc39:	0f 84 8e 00 00 00    	je     c000cccd <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c000cc3f:	83 c2 01             	add    edx,0x1
c000cc42:	83 fa 04             	cmp    edx,0x4
c000cc45:	75 e9                	jne    c000cc30 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cc47:	83 ec 0c             	sub    esp,0xc
c000cc4a:	68 9c 15 02 c0       	push   0xc002159c
c000cc4f:	e8 15 46 00 00       	call   c0011269 <KePanic(char const*)>
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cc5c:	5b                   	pop    ebx
c000cc5d:	5e                   	pop    esi
c000cc5e:	5f                   	pop    edi
c000cc5f:	c3                   	ret    
c000cc60:	83 c3 01             	add    ebx,0x1
c000cc63:	39 1d c0 a0 02 c0    	cmp    DWORD PTR ds:0xc002a0c0,ebx
c000cc69:	7e ab                	jle    c000cc16 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c000cc6b:	83 ec 08             	sub    esp,0x8
c000cc6e:	8b 04 9d e0 a0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd5f20]
c000cc75:	56                   	push   esi
c000cc76:	50                   	push   eax
c000cc77:	e8 fe 18 01 00       	call   c001e57a <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000cc7c:	83 c4 10             	add    esp,0x10
c000cc7f:	84 c0                	test   al,al
c000cc81:	74 dd                	je     c000cc60 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c000cc83:	83 ec 04             	sub    esp,0x4
c000cc86:	89 f8                	mov    eax,edi
c000cc88:	8b 1c 9d e0 a0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd5f20]
c000cc8f:	0f b6 f8             	movzx  edi,al
c000cc92:	57                   	push   edi
c000cc93:	8d 7e 20             	lea    edi,[esi+0x20]
c000cc96:	6a 00                	push   0x0
c000cc98:	89 f8                	mov    eax,edi
c000cc9a:	0f b6 c0             	movzx  eax,al
c000cc9d:	50                   	push   eax
c000cc9e:	89 f0                	mov    eax,esi
c000cca0:	6a 00                	push   0x0
c000cca2:	0f b6 c0             	movzx  eax,al
c000cca5:	6a 00                	push   0x0
c000cca7:	50                   	push   eax
c000cca8:	53                   	push   ebx
c000cca9:	e8 38 1a 01 00       	call   c001e6e6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000ccae:	83 c4 20             	add    esp,0x20
c000ccb1:	e9 73 ff ff ff       	jmp    c000cc29 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c000ccb6:	83 ec 0c             	sub    esp,0xc
c000ccb9:	31 ff                	xor    edi,edi
c000ccbb:	68 64 15 02 c0       	push   0xc0021564
c000ccc0:	e8 a4 45 00 00       	call   c0011269 <KePanic(char const*)>
c000ccc5:	83 c4 10             	add    esp,0x10
c000ccc8:	e9 28 ff ff ff       	jmp    c000cbf5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000cccd:	8d 04 ba             	lea    eax,[edx+edi*4]
c000ccd0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ccd4:	89 14 85 20 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8be0],edx
c000ccdb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccdf:	5b                   	pop    ebx
c000cce0:	89 14 85 20 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9be0],edx
c000cce7:	89 f0                	mov    eax,esi
c000cce9:	5e                   	pop    esi
c000ccea:	5f                   	pop    edi
c000cceb:	c3                   	ret    

c000ccec <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000ccec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccf0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ccf4:	c1 e0 04             	shl    eax,0x4
c000ccf7:	8d 50 10             	lea    edx,[eax+0x10]
c000ccfa:	39 88 20 74 02 c0    	cmp    DWORD PTR [eax-0x3ffd8be0],ecx
c000cd00:	74 08                	je     c000cd0a <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000cd02:	83 c0 04             	add    eax,0x4
c000cd05:	39 d0                	cmp    eax,edx
c000cd07:	75 f1                	jne    c000ccfa <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000cd09:	c3                   	ret    
c000cd0a:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000cd14:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000cd1e:	eb e2                	jmp    c000cd02 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000cd20 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000cd20:	53                   	push   ebx
c000cd21:	83 ec 08             	sub    esp,0x8
c000cd24:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cd28:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000cd2d:	74 0e                	je     c000cd3d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000cd2f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000cd34:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000cd3b:	75 37                	jne    c000cd74 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000cd3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd41:	83 c0 20             	add    eax,0x20
c000cd44:	c1 e0 04             	shl    eax,0x4
c000cd47:	8d 50 10             	lea    edx,[eax+0x10]
c000cd4a:	39 98 20 74 02 c0    	cmp    DWORD PTR [eax-0x3ffd8be0],ebx
c000cd50:	74 0c                	je     c000cd5e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000cd52:	83 c0 04             	add    eax,0x4
c000cd55:	39 d0                	cmp    eax,edx
c000cd57:	75 f1                	jne    c000cd4a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000cd59:	83 c4 08             	add    esp,0x8
c000cd5c:	5b                   	pop    ebx
c000cd5d:	c3                   	ret    
c000cd5e:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000cd68:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000cd72:	eb de                	jmp    c000cd52 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000cd74:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000cd79:	7f 11                	jg     c000cd8c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000cd7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd7f:	0f b6 80 28 30 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdcfd8]
c000cd86:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cd8a:	eb b1                	jmp    c000cd3d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000cd8c:	83 ec 0c             	sub    esp,0xc
c000cd8f:	68 55 15 02 c0       	push   0xc0021555
c000cd94:	e8 d0 44 00 00       	call   c0011269 <KePanic(char const*)>
c000cd99:	83 c4 10             	add    esp,0x10
c000cd9c:	eb 9f                	jmp    c000cd3d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000cd9e <setupINTS()>:
c000cd9e:	31 c0                	xor    eax,eax
c000cda0:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000cdaa:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000cdb4:	c7 80 24 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bdc],0x0
c000cdbe:	c7 80 24 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bdc],0x0
c000cdc8:	c7 80 28 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bd8],0x0
c000cdd2:	c7 80 28 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bd8],0x0
c000cddc:	c7 80 2c 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bd4],0x0
c000cde6:	c7 80 2c 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bd4],0x0
c000cdf0:	83 c0 10             	add    eax,0x10
c000cdf3:	3d 00 10 00 00       	cmp    eax,0x1000
c000cdf8:	75 a6                	jne    c000cda0 <setupINTS()+0x2>
c000cdfa:	c3                   	ret    

c000cdfb <convertLegacyIRQNumber(int)>:
c000cdfb:	83 ec 0c             	sub    esp,0xc
c000cdfe:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000ce04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce08:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000ce0f:	74 0c                	je     c000ce1d <convertLegacyIRQNumber(int)+0x22>
c000ce11:	83 f8 0f             	cmp    eax,0xf
c000ce14:	7f 0b                	jg     c000ce21 <convertLegacyIRQNumber(int)+0x26>
c000ce16:	0f b6 80 28 30 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdcfd8]
c000ce1d:	83 c4 0c             	add    esp,0xc
c000ce20:	c3                   	ret    
c000ce21:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ce25:	83 ec 0c             	sub    esp,0xc
c000ce28:	68 64 15 02 c0       	push   0xc0021564
c000ce2d:	e8 37 44 00 00       	call   c0011269 <KePanic(char const*)>
c000ce32:	83 c4 10             	add    esp,0x10
c000ce35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce39:	83 c4 0c             	add    esp,0xc
c000ce3c:	c3                   	ret    
c000ce3d:	90                   	nop

c000ce3e <startGUI(void*)>:
c000ce3e:	55                   	push   ebp
c000ce3f:	89 e5                	mov    ebp,esp
c000ce41:	53                   	push   ebx
c000ce42:	83 ec 04             	sub    esp,0x4
c000ce45:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000ce4a:	83 e8 01             	sub    eax,0x1
c000ce4d:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000ce52:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000ce57:	85 c0                	test   eax,eax
c000ce59:	75 01                	jne    c000ce5c <startGUI(void*)+0x1e>
c000ce5b:	fb                   	sti    
c000ce5c:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000ce62:	83 ec 08             	sub    esp,0x8
c000ce65:	6a 01                	push   0x1
c000ce67:	68 c1 15 02 c0       	push   0xc00215c1
c000ce6c:	e8 59 82 00 00       	call   c00150ca <Thr::loadDLL(char const*, bool)>
c000ce71:	83 c4 10             	add    esp,0x10
c000ce74:	83 ec 08             	sub    esp,0x8
c000ce77:	53                   	push   ebx
c000ce78:	50                   	push   eax
c000ce79:	e8 7d 84 00 00       	call   c00152fb <Thr::executeDLL(unsigned long, void*)>
c000ce7e:	83 c4 10             	add    esp,0x10
c000ce81:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000ce87:	83 ec 08             	sub    esp,0x8
c000ce8a:	6a 01                	push   0x1
c000ce8c:	68 db 15 02 c0       	push   0xc00215db
c000ce91:	e8 34 82 00 00       	call   c00150ca <Thr::loadDLL(char const*, bool)>
c000ce96:	83 c4 10             	add    esp,0x10
c000ce99:	83 ec 08             	sub    esp,0x8
c000ce9c:	53                   	push   ebx
c000ce9d:	50                   	push   eax
c000ce9e:	e8 58 84 00 00       	call   c00152fb <Thr::executeDLL(unsigned long, void*)>
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	90                   	nop
c000cea7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000ceaa:	c9                   	leave  
c000ceab:	c3                   	ret    

c000ceac <startGUIVESA(void*)>:
c000ceac:	55                   	push   ebp
c000cead:	89 e5                	mov    ebp,esp
c000ceaf:	53                   	push   ebx
c000ceb0:	83 ec 04             	sub    esp,0x4
c000ceb3:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000ceb8:	83 e8 01             	sub    eax,0x1
c000cebb:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000cec0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cec5:	85 c0                	test   eax,eax
c000cec7:	75 01                	jne    c000ceca <startGUIVESA(void*)+0x1e>
c000cec9:	fb                   	sti    
c000ceca:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000ced0:	83 ec 08             	sub    esp,0x8
c000ced3:	6a 01                	push   0x1
c000ced5:	68 f9 15 02 c0       	push   0xc00215f9
c000ceda:	e8 eb 81 00 00       	call   c00150ca <Thr::loadDLL(char const*, bool)>
c000cedf:	83 c4 10             	add    esp,0x10
c000cee2:	83 ec 08             	sub    esp,0x8
c000cee5:	53                   	push   ebx
c000cee6:	50                   	push   eax
c000cee7:	e8 0f 84 00 00       	call   c00152fb <Thr::executeDLL(unsigned long, void*)>
c000ceec:	83 c4 10             	add    esp,0x10
c000ceef:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cef5:	83 ec 08             	sub    esp,0x8
c000cef8:	6a 01                	push   0x1
c000cefa:	68 db 15 02 c0       	push   0xc00215db
c000ceff:	e8 c6 81 00 00       	call   c00150ca <Thr::loadDLL(char const*, bool)>
c000cf04:	83 c4 10             	add    esp,0x10
c000cf07:	83 ec 08             	sub    esp,0x8
c000cf0a:	53                   	push   ebx
c000cf0b:	50                   	push   eax
c000cf0c:	e8 ea 83 00 00       	call   c00152fb <Thr::executeDLL(unsigned long, void*)>
c000cf11:	83 c4 10             	add    esp,0x10
c000cf14:	90                   	nop
c000cf15:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000cf18:	c9                   	leave  
c000cf19:	c3                   	ret    

c000cf1a <sendKeyToTerminal(unsigned char)>:
c000cf1a:	55                   	push   ebp
c000cf1b:	89 e5                	mov    ebp,esp
c000cf1d:	83 ec 28             	sub    esp,0x28
c000cf20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cf23:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000cf26:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c000cf2b:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000cf2f:	83 ec 08             	sub    esp,0x8
c000cf32:	52                   	push   edx
c000cf33:	50                   	push   eax
c000cf34:	e8 7d be ff ff       	call   c0008db6 <VgaText::receiveKey(unsigned char)>
c000cf39:	83 c4 10             	add    esp,0x10
c000cf3c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000cf40:	83 f8 0a             	cmp    eax,0xa
c000cf43:	74 16                	je     c000cf5b <sendKeyToTerminal(unsigned char)+0x41>
c000cf45:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000cf49:	83 f8 03             	cmp    eax,0x3
c000cf4c:	74 0d                	je     c000cf5b <sendKeyToTerminal(unsigned char)+0x41>
c000cf4e:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000cf52:	83 f8 1c             	cmp    eax,0x1c
c000cf55:	0f 85 97 00 00 00    	jne    c000cff2 <sendKeyToTerminal(unsigned char)+0xd8>
c000cf5b:	fa                   	cli    
c000cf5c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cf61:	83 c0 01             	add    eax,0x1
c000cf64:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000cf69:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000cf6e:	83 c0 01             	add    eax,0x1
c000cf71:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000cf76:	a1 20 84 02 c0       	mov    eax,ds:0xc0028420
c000cf7b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000cf7e:	c7 05 20 84 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028420,0x0
c000cf88:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000cf8c:	74 1f                	je     c000cfad <sendKeyToTerminal(unsigned char)+0x93>
c000cf8e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cf91:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000cf94:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000cf97:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000cf9a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000cf9d:	83 ec 0c             	sub    esp,0xc
c000cfa0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000cfa3:	e8 98 90 00 00       	call   c0016040 <unblockTask(ThreadControlBlock*)>
c000cfa8:	83 c4 10             	add    esp,0x10
c000cfab:	eb db                	jmp    c000cf88 <sendKeyToTerminal(unsigned char)+0x6e>
c000cfad:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000cfb2:	83 e8 01             	sub    eax,0x1
c000cfb5:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000cfba:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000cfbf:	85 c0                	test   eax,eax
c000cfc1:	75 18                	jne    c000cfdb <sendKeyToTerminal(unsigned char)+0xc1>
c000cfc3:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c000cfc8:	85 c0                	test   eax,eax
c000cfca:	74 0f                	je     c000cfdb <sendKeyToTerminal(unsigned char)+0xc1>
c000cfcc:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c000cfd6:	e8 4d 8b 00 00       	call   c0015b28 <schedule()>
c000cfdb:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cfe0:	83 e8 01             	sub    eax,0x1
c000cfe3:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000cfe8:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cfed:	85 c0                	test   eax,eax
c000cfef:	75 01                	jne    c000cff2 <sendKeyToTerminal(unsigned char)+0xd8>
c000cff1:	fb                   	sti    
c000cff2:	90                   	nop
c000cff3:	c9                   	leave  
c000cff4:	c3                   	ret    

c000cff5 <sendKeyboardToken(KeyboardToken)>:
c000cff5:	55                   	push   ebp
c000cff6:	89 e5                	mov    ebp,esp
c000cff8:	83 ec 18             	sub    esp,0x18
c000cffb:	e8 b9 42 00 00       	call   c00112b9 <KeUserIOReceived()>
c000d000:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d003:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d006:	0f b7 c0             	movzx  eax,ax
c000d009:	83 f2 01             	xor    edx,0x1
c000d00c:	88 90 40 84 02 c0    	mov    BYTE PTR [eax-0x3ffd7bc0],dl
c000d012:	a1 28 84 02 c0       	mov    eax,ds:0xc0028428
c000d017:	85 c0                	test   eax,eax
c000d019:	74 24                	je     c000d03f <sendKeyboardToken(KeyboardToken)+0x4a>
c000d01b:	8b 0d 28 84 02 c0    	mov    ecx,DWORD PTR ds:0xc0028428
c000d021:	83 ec 04             	sub    esp,0x4
c000d024:	68 40 84 02 c0       	push   0xc0028440
c000d029:	83 ec 08             	sub    esp,0x8
c000d02c:	89 e2                	mov    edx,esp
c000d02e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d031:	89 02                	mov    DWORD PTR [edx],eax
c000d033:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d036:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d03a:	ff d1                	call   ecx
c000d03c:	83 c4 10             	add    esp,0x10
c000d03f:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d043:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d046:	a0 48 88 02 c0       	mov    al,ds:0xc0028848
c000d04b:	0f b6 d2             	movzx  edx,dl
c000d04e:	0f b6 c0             	movzx  eax,al
c000d051:	39 c2                	cmp    edx,eax
c000d053:	74 1c                	je     c000d071 <sendKeyboardToken(KeyboardToken)+0x7c>
c000d055:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d058:	a2 48 88 02 c0       	mov    ds:0xc0028848,al
c000d05d:	a0 48 88 02 c0       	mov    al,ds:0xc0028848
c000d062:	0f b6 c0             	movzx  eax,al
c000d065:	83 ec 0c             	sub    esp,0xc
c000d068:	50                   	push   eax
c000d069:	e8 94 b4 ff ff       	call   c0008502 <setTerminalScrollLock(bool)>
c000d06e:	83 c4 10             	add    esp,0x10
c000d071:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d074:	0f b6 c0             	movzx  eax,al
c000d077:	85 c0                	test   eax,eax
c000d079:	0f 84 da 00 00 00    	je     c000d159 <sendKeyboardToken(KeyboardToken)+0x164>
c000d07f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d082:	0f b7 c0             	movzx  eax,ax
c000d085:	3d 18 03 00 00       	cmp    eax,0x318
c000d08a:	75 06                	jne    c000d092 <sendKeyboardToken(KeyboardToken)+0x9d>
c000d08c:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d092:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d095:	0f b7 c0             	movzx  eax,ax
c000d098:	3d 19 03 00 00       	cmp    eax,0x319
c000d09d:	75 06                	jne    c000d0a5 <sendKeyboardToken(KeyboardToken)+0xb0>
c000d09f:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d0a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0a8:	0f b7 c0             	movzx  eax,ax
c000d0ab:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d0b0:	75 06                	jne    c000d0b8 <sendKeyboardToken(KeyboardToken)+0xc3>
c000d0b2:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d0b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0bb:	0f b7 c0             	movzx  eax,ax
c000d0be:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d0c3:	75 06                	jne    c000d0cb <sendKeyboardToken(KeyboardToken)+0xd6>
c000d0c5:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d0cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0ce:	0f b7 c0             	movzx  eax,ax
c000d0d1:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d0d6:	75 06                	jne    c000d0de <sendKeyboardToken(KeyboardToken)+0xe9>
c000d0d8:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d0de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0e1:	0f b7 c0             	movzx  eax,ax
c000d0e4:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d0e9:	75 06                	jne    c000d0f1 <sendKeyboardToken(KeyboardToken)+0xfc>
c000d0eb:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d0f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0f4:	0f b7 c0             	movzx  eax,ax
c000d0f7:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d0fc:	75 06                	jne    c000d104 <sendKeyboardToken(KeyboardToken)+0x10f>
c000d0fe:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d104:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d107:	0f b7 c0             	movzx  eax,ax
c000d10a:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d10f:	75 06                	jne    c000d117 <sendKeyboardToken(KeyboardToken)+0x122>
c000d111:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d117:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d11a:	0f b7 c0             	movzx  eax,ax
c000d11d:	3d 20 03 00 00       	cmp    eax,0x320
c000d122:	75 06                	jne    c000d12a <sendKeyboardToken(KeyboardToken)+0x135>
c000d124:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d12a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d12d:	0f b7 c0             	movzx  eax,ax
c000d130:	3d 21 03 00 00       	cmp    eax,0x321
c000d135:	75 06                	jne    c000d13d <sendKeyboardToken(KeyboardToken)+0x148>
c000d137:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d13d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d140:	0f b7 c0             	movzx  eax,ax
c000d143:	3d 22 03 00 00       	cmp    eax,0x322
c000d148:	0f 85 f1 00 00 00    	jne    c000d23f <sendKeyboardToken(KeyboardToken)+0x24a>
c000d14e:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d154:	e9 e6 00 00 00       	jmp    c000d23f <sendKeyboardToken(KeyboardToken)+0x24a>
c000d159:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d15c:	0f b7 c0             	movzx  eax,ax
c000d15f:	3d 18 03 00 00       	cmp    eax,0x318
c000d164:	75 0a                	jne    c000d170 <sendKeyboardToken(KeyboardToken)+0x17b>
c000d166:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d16c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d170:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d173:	0f b7 c0             	movzx  eax,ax
c000d176:	3d 19 03 00 00       	cmp    eax,0x319
c000d17b:	75 0a                	jne    c000d187 <sendKeyboardToken(KeyboardToken)+0x192>
c000d17d:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d183:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d187:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d18a:	0f b7 c0             	movzx  eax,ax
c000d18d:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d192:	75 0a                	jne    c000d19e <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d194:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d19a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d19e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1a1:	0f b7 c0             	movzx  eax,ax
c000d1a4:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d1a9:	75 0a                	jne    c000d1b5 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d1ab:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d1b1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d1b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1b8:	0f b7 c0             	movzx  eax,ax
c000d1bb:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d1c0:	75 0a                	jne    c000d1cc <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d1c2:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d1c8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d1cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1cf:	0f b7 c0             	movzx  eax,ax
c000d1d2:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d1d7:	75 0a                	jne    c000d1e3 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d1d9:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d1df:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d1e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1e6:	0f b7 c0             	movzx  eax,ax
c000d1e9:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d1ee:	75 0a                	jne    c000d1fa <sendKeyboardToken(KeyboardToken)+0x205>
c000d1f0:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d1f6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d1fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1fd:	0f b7 c0             	movzx  eax,ax
c000d200:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d205:	75 0a                	jne    c000d211 <sendKeyboardToken(KeyboardToken)+0x21c>
c000d207:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d20d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d211:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d214:	0f b7 c0             	movzx  eax,ax
c000d217:	3d 20 03 00 00       	cmp    eax,0x320
c000d21c:	75 0a                	jne    c000d228 <sendKeyboardToken(KeyboardToken)+0x233>
c000d21e:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d224:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d228:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d22b:	0f b7 c0             	movzx  eax,ax
c000d22e:	3d 21 03 00 00       	cmp    eax,0x321
c000d233:	75 0a                	jne    c000d23f <sendKeyboardToken(KeyboardToken)+0x24a>
c000d235:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d23b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d23f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d242:	0f b7 c0             	movzx  eax,ax
c000d245:	3d 00 02 00 00       	cmp    eax,0x200
c000d24a:	75 2f                	jne    c000d27b <sendKeyboardToken(KeyboardToken)+0x286>
c000d24c:	a0 40 88 02 c0       	mov    al,ds:0xc0028840
c000d251:	83 f0 01             	xor    eax,0x1
c000d254:	0f b6 c0             	movzx  eax,al
c000d257:	85 c0                	test   eax,eax
c000d259:	74 20                	je     c000d27b <sendKeyboardToken(KeyboardToken)+0x286>
c000d25b:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000d260:	6a 01                	push   0x1
c000d262:	6a 00                	push   0x0
c000d264:	68 3e ce 00 c0       	push   0xc000ce3e
c000d269:	50                   	push   eax
c000d26a:	e8 69 86 00 00       	call   c00158d8 <Process::createThread(void (*)(void*), void*, int)>
c000d26f:	83 c4 10             	add    esp,0x10
c000d272:	c6 05 40 88 02 c0 01 	mov    BYTE PTR ds:0xc0028840,0x1
c000d279:	eb 3a                	jmp    c000d2b5 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d27b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d27e:	0f b7 c0             	movzx  eax,ax
c000d281:	3d 01 02 00 00       	cmp    eax,0x201
c000d286:	75 2d                	jne    c000d2b5 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d288:	a0 40 88 02 c0       	mov    al,ds:0xc0028840
c000d28d:	83 f0 01             	xor    eax,0x1
c000d290:	0f b6 c0             	movzx  eax,al
c000d293:	85 c0                	test   eax,eax
c000d295:	74 1e                	je     c000d2b5 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d297:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000d29c:	6a 01                	push   0x1
c000d29e:	6a 00                	push   0x0
c000d2a0:	68 ac ce 00 c0       	push   0xc000ceac
c000d2a5:	50                   	push   eax
c000d2a6:	e8 2d 86 00 00       	call   c00158d8 <Process::createThread(void (*)(void*), void*, int)>
c000d2ab:	83 c4 10             	add    esp,0x10
c000d2ae:	c6 05 40 88 02 c0 01 	mov    BYTE PTR ds:0xc0028840,0x1
c000d2b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2b8:	0f b7 c0             	movzx  eax,ax
c000d2bb:	3d 25 03 00 00       	cmp    eax,0x325
c000d2c0:	75 06                	jne    c000d2c8 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d2c2:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d2c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2cb:	0f b7 c0             	movzx  eax,ax
c000d2ce:	3d 24 03 00 00       	cmp    eax,0x324
c000d2d3:	75 06                	jne    c000d2db <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d2d5:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d2db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2de:	0f b7 c0             	movzx  eax,ax
c000d2e1:	3d 23 03 00 00       	cmp    eax,0x323
c000d2e6:	75 06                	jne    c000d2ee <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d2e8:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d2ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2f1:	0f b7 c0             	movzx  eax,ax
c000d2f4:	3d 26 03 00 00       	cmp    eax,0x326
c000d2f9:	75 06                	jne    c000d301 <sendKeyboardToken(KeyboardToken)+0x30c>
c000d2fb:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d301:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d304:	0f b7 c0             	movzx  eax,ax
c000d307:	3d 27 03 00 00       	cmp    eax,0x327
c000d30c:	75 06                	jne    c000d314 <sendKeyboardToken(KeyboardToken)+0x31f>
c000d30e:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d314:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d317:	0f b7 c0             	movzx  eax,ax
c000d31a:	3d 22 03 00 00       	cmp    eax,0x322
c000d31f:	75 06                	jne    c000d327 <sendKeyboardToken(KeyboardToken)+0x332>
c000d321:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d327:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d32b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d32e:	83 f0 01             	xor    eax,0x1
c000d331:	0f b6 c0             	movzx  eax,al
c000d334:	85 c0                	test   eax,eax
c000d336:	74 7c                	je     c000d3b4 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d338:	a0 41 85 02 c0       	mov    al,ds:0xc0028541
c000d33d:	0f b6 c0             	movzx  eax,al
c000d340:	85 c0                	test   eax,eax
c000d342:	74 43                	je     c000d387 <sendKeyboardToken(KeyboardToken)+0x392>
c000d344:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d348:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d34c:	85 c0                	test   eax,eax
c000d34e:	74 2b                	je     c000d37b <sendKeyboardToken(KeyboardToken)+0x386>
c000d350:	8b 15 44 88 02 c0    	mov    edx,DWORD PTR ds:0xc0028844
c000d356:	89 d0                	mov    eax,edx
c000d358:	c1 e0 02             	shl    eax,0x2
c000d35b:	01 d0                	add    eax,edx
c000d35d:	01 c0                	add    eax,eax
c000d35f:	a3 44 88 02 c0       	mov    ds:0xc0028844,eax
c000d364:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d367:	0f b7 c0             	movzx  eax,ax
c000d36a:	8d 50 d0             	lea    edx,[eax-0x30]
c000d36d:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d372:	01 d0                	add    eax,edx
c000d374:	a3 44 88 02 c0       	mov    ds:0xc0028844,eax
c000d379:	eb 71                	jmp    c000d3ec <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d37b:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d385:	eb 65                	jmp    c000d3ec <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d387:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d38c:	85 c0                	test   eax,eax
c000d38e:	74 18                	je     c000d3a8 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d390:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d395:	0f b6 c0             	movzx  eax,al
c000d398:	83 ec 0c             	sub    esp,0xc
c000d39b:	50                   	push   eax
c000d39c:	e8 79 fb ff ff       	call   c000cf1a <sendKeyToTerminal(unsigned char)>
c000d3a1:	83 c4 10             	add    esp,0x10
c000d3a4:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d3a8:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d3b2:	eb 38                	jmp    c000d3ec <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d3b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3b7:	0f b7 c0             	movzx  eax,ax
c000d3ba:	3d 01 01 00 00       	cmp    eax,0x101
c000d3bf:	75 2b                	jne    c000d3ec <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d3c1:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d3c6:	85 c0                	test   eax,eax
c000d3c8:	74 18                	je     c000d3e2 <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d3ca:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d3cf:	0f b6 c0             	movzx  eax,al
c000d3d2:	83 ec 0c             	sub    esp,0xc
c000d3d5:	50                   	push   eax
c000d3d6:	e8 3f fb ff ff       	call   c000cf1a <sendKeyToTerminal(unsigned char)>
c000d3db:	83 c4 10             	add    esp,0x10
c000d3de:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d3e2:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d3ec:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d3ef:	83 f0 01             	xor    eax,0x1
c000d3f2:	0f b6 c0             	movzx  eax,al
c000d3f5:	85 c0                	test   eax,eax
c000d3f7:	74 5a                	je     c000d453 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d3f9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d3fc:	83 f0 01             	xor    eax,0x1
c000d3ff:	0f b6 c0             	movzx  eax,al
c000d402:	85 c0                	test   eax,eax
c000d404:	74 4d                	je     c000d453 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d406:	a0 40 85 02 c0       	mov    al,ds:0xc0028540
c000d40b:	83 f0 01             	xor    eax,0x1
c000d40e:	0f b6 c0             	movzx  eax,al
c000d411:	85 c0                	test   eax,eax
c000d413:	74 3e                	je     c000d453 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d415:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d418:	0f b7 c0             	movzx  eax,ax
c000d41b:	83 f8 1f             	cmp    eax,0x1f
c000d41e:	76 0b                	jbe    c000d42b <sendKeyboardToken(KeyboardToken)+0x436>
c000d420:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d423:	0f b7 c0             	movzx  eax,ax
c000d426:	83 f8 7e             	cmp    eax,0x7e
c000d429:	76 16                	jbe    c000d441 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d42b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d42e:	0f b7 c0             	movzx  eax,ax
c000d431:	83 f8 0a             	cmp    eax,0xa
c000d434:	74 0b                	je     c000d441 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d436:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d439:	0f b7 c0             	movzx  eax,ax
c000d43c:	83 f8 08             	cmp    eax,0x8
c000d43f:	75 12                	jne    c000d453 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d441:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d444:	0f b6 c0             	movzx  eax,al
c000d447:	83 ec 0c             	sub    esp,0xc
c000d44a:	50                   	push   eax
c000d44b:	e8 ca fa ff ff       	call   c000cf1a <sendKeyToTerminal(unsigned char)>
c000d450:	83 c4 10             	add    esp,0x10
c000d453:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d456:	83 f0 01             	xor    eax,0x1
c000d459:	0f b6 c0             	movzx  eax,al
c000d45c:	85 c0                	test   eax,eax
c000d45e:	74 5d                	je     c000d4bd <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d460:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d463:	83 f0 01             	xor    eax,0x1
c000d466:	0f b6 c0             	movzx  eax,al
c000d469:	85 c0                	test   eax,eax
c000d46b:	74 50                	je     c000d4bd <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d46d:	a0 40 85 02 c0       	mov    al,ds:0xc0028540
c000d472:	0f b6 c0             	movzx  eax,al
c000d475:	85 c0                	test   eax,eax
c000d477:	74 44                	je     c000d4bd <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d479:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d47c:	0f b7 c0             	movzx  eax,ax
c000d47f:	83 f8 3f             	cmp    eax,0x3f
c000d482:	76 39                	jbe    c000d4bd <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d484:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d487:	0f b7 c0             	movzx  eax,ax
c000d48a:	83 f8 7f             	cmp    eax,0x7f
c000d48d:	77 2e                	ja     c000d4bd <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d48f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d492:	88 c2                	mov    dl,al
c000d494:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d497:	0f b7 c0             	movzx  eax,ax
c000d49a:	83 f8 5f             	cmp    eax,0x5f
c000d49d:	76 04                	jbe    c000d4a3 <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d49f:	b0 20                	mov    al,0x20
c000d4a1:	eb 02                	jmp    c000d4a5 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d4a3:	b0 00                	mov    al,0x0
c000d4a5:	89 d1                	mov    ecx,edx
c000d4a7:	29 c1                	sub    ecx,eax
c000d4a9:	89 c8                	mov    eax,ecx
c000d4ab:	83 e8 40             	sub    eax,0x40
c000d4ae:	0f b6 c0             	movzx  eax,al
c000d4b1:	83 ec 0c             	sub    esp,0xc
c000d4b4:	50                   	push   eax
c000d4b5:	e8 60 fa ff ff       	call   c000cf1a <sendKeyToTerminal(unsigned char)>
c000d4ba:	83 c4 10             	add    esp,0x10
c000d4bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4c0:	0f b7 c0             	movzx  eax,ax
c000d4c3:	3d 00 03 00 00       	cmp    eax,0x300
c000d4c8:	75 12                	jne    c000d4dc <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d4ca:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d4cd:	83 f0 01             	xor    eax,0x1
c000d4d0:	0f b6 c0             	movzx  eax,al
c000d4d3:	85 c0                	test   eax,eax
c000d4d5:	74 05                	je     c000d4dc <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d4d7:	e8 27 b0 ff ff       	call   c0008503 <doTerminalCycle()>
c000d4dc:	90                   	nop
c000d4dd:	c9                   	leave  
c000d4de:	c3                   	ret    

c000d4df <clearInternalKeybuffer(VgaText*)>:
c000d4df:	55                   	push   ebp
c000d4e0:	89 e5                	mov    ebp,esp
c000d4e2:	83 ec 08             	sub    esp,0x8
c000d4e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4e8:	05 02 01 00 00       	add    eax,0x102
c000d4ed:	83 ec 0c             	sub    esp,0xc
c000d4f0:	50                   	push   eax
c000d4f1:	e8 7a 30 ff ff       	call   c0000570 <strlen>
c000d4f6:	83 c4 10             	add    esp,0x10
c000d4f9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d4fc:	81 c2 02 01 00 00    	add    edx,0x102
c000d502:	83 ec 04             	sub    esp,0x4
c000d505:	50                   	push   eax
c000d506:	6a 00                	push   0x0
c000d508:	52                   	push   edx
c000d509:	e8 e2 2f ff ff       	call   c00004f0 <memset>
c000d50e:	83 c4 10             	add    esp,0x10
c000d511:	90                   	nop
c000d512:	c9                   	leave  
c000d513:	c3                   	ret    

c000d514 <readKeyboard(VgaText*, char*, unsigned long)>:
c000d514:	55                   	push   ebp
c000d515:	89 e5                	mov    ebp,esp
c000d517:	83 ec 18             	sub    esp,0x18
c000d51a:	a1 28 84 02 c0       	mov    eax,ds:0xc0028428
c000d51f:	85 c0                	test   eax,eax
c000d521:	74 2a                	je     c000d54d <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d523:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d529:	8b 0d 28 84 02 c0    	mov    ecx,DWORD PTR ds:0xc0028428
c000d52f:	83 ec 04             	sub    esp,0x4
c000d532:	68 40 84 02 c0       	push   0xc0028440
c000d537:	83 ec 08             	sub    esp,0x8
c000d53a:	89 e2                	mov    edx,esp
c000d53c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000d53f:	89 02                	mov    DWORD PTR [edx],eax
c000d541:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d544:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d548:	ff d1                	call   ecx
c000d54a:	83 c4 10             	add    esp,0x10
c000d54d:	fb                   	sti    
c000d54e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d555:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d559:	0f 84 0d 01 00 00    	je     c000d66c <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d55f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d562:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d568:	0f be c0             	movsx  eax,al
c000d56b:	85 c0                	test   eax,eax
c000d56d:	75 2c                	jne    c000d59b <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d56f:	fa                   	cli    
c000d570:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d575:	83 c0 01             	add    eax,0x1
c000d578:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d57d:	e8 a6 85 00 00       	call   c0015b28 <schedule()>
c000d582:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d587:	83 e8 01             	sub    eax,0x1
c000d58a:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d58f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d594:	85 c0                	test   eax,eax
c000d596:	75 c7                	jne    c000d55f <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d598:	fb                   	sti    
c000d599:	eb c4                	jmp    c000d55f <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d59b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d59e:	8d 50 01             	lea    edx,[eax+0x1]
c000d5a1:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d5a4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d5a7:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d5ad:	88 10                	mov    BYTE PTR [eax],dl
c000d5af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5b2:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d5b8:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d5bb:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d5bf:	83 f8 03             	cmp    eax,0x3
c000d5c2:	75 1e                	jne    c000d5e2 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d5c4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d5c9:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5cb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d5ce:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d5d4:	83 ec 08             	sub    esp,0x8
c000d5d7:	6a 02                	push   0x2
c000d5d9:	50                   	push   eax
c000d5da:	e8 2b 41 00 00       	call   c001170a <KeRaiseSignal(SigHandlerBlock*, int)>
c000d5df:	83 c4 10             	add    esp,0x10
c000d5e2:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d5e6:	83 f8 1c             	cmp    eax,0x1c
c000d5e9:	75 1e                	jne    c000d609 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d5eb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d5f0:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5f2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d5f5:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d5fb:	83 ec 08             	sub    esp,0x8
c000d5fe:	6a 09                	push   0x9
c000d600:	50                   	push   eax
c000d601:	e8 04 41 00 00       	call   c001170a <KeRaiseSignal(SigHandlerBlock*, int)>
c000d606:	83 c4 10             	add    esp,0x10
c000d609:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d60c:	05 02 01 00 00       	add    eax,0x102
c000d611:	83 ec 0c             	sub    esp,0xc
c000d614:	50                   	push   eax
c000d615:	e8 56 2f ff ff       	call   c0000570 <strlen>
c000d61a:	83 c4 10             	add    esp,0x10
c000d61d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d620:	81 c2 02 01 00 00    	add    edx,0x102
c000d626:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d629:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d62c:	81 c2 02 01 00 00    	add    edx,0x102
c000d632:	83 ec 04             	sub    esp,0x4
c000d635:	50                   	push   eax
c000d636:	51                   	push   ecx
c000d637:	52                   	push   edx
c000d638:	e8 93 2d ff ff       	call   c00003d0 <memmove>
c000d63d:	83 c4 10             	add    esp,0x10
c000d640:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d644:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d648:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d64c:	83 f8 0a             	cmp    eax,0xa
c000d64f:	74 16                	je     c000d667 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d651:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d655:	83 f8 03             	cmp    eax,0x3
c000d658:	74 0d                	je     c000d667 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d65a:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d65e:	83 f8 1c             	cmp    eax,0x1c
c000d661:	0f 85 ee fe ff ff    	jne    c000d555 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000d667:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d66a:	eb 03                	jmp    c000d66f <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000d66c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d66f:	c9                   	leave  
c000d670:	c3                   	ret    
c000d671:	90                   	nop

c000d672 <Keyboard::Keyboard(char const*)>:
c000d672:	83 ec 0c             	sub    esp,0xc
c000d675:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d679:	83 ec 08             	sub    esp,0x8
c000d67c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d680:	50                   	push   eax
c000d681:	e8 4c f1 ff ff       	call   c000c7d2 <Device::Device(char const*)>
c000d686:	83 c4 10             	add    esp,0x10
c000d689:	ba 1c 16 02 c0       	mov    edx,0xc002161c
c000d68e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d692:	89 10                	mov    DWORD PTR [eax],edx
c000d694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d698:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000d6a2:	c6 05 24 84 02 c0 01 	mov    BYTE PTR ds:0xc0028424,0x1
c000d6a9:	90                   	nop
c000d6aa:	83 c4 0c             	add    esp,0xc
c000d6ad:	c3                   	ret    

c000d6ae <Keyboard::~Keyboard()>:
c000d6ae:	83 ec 0c             	sub    esp,0xc
c000d6b1:	ba 1c 16 02 c0       	mov    edx,0xc002161c
c000d6b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6ba:	89 10                	mov    DWORD PTR [eax],edx
c000d6bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c0:	83 ec 0c             	sub    esp,0xc
c000d6c3:	50                   	push   eax
c000d6c4:	e8 73 ee ff ff       	call   c000c53c <Device::~Device()>
c000d6c9:	83 c4 10             	add    esp,0x10
c000d6cc:	90                   	nop
c000d6cd:	83 c4 0c             	add    esp,0xc
c000d6d0:	c3                   	ret    
c000d6d1:	90                   	nop

c000d6d2 <Keyboard::~Keyboard()>:
c000d6d2:	83 ec 0c             	sub    esp,0xc
c000d6d5:	83 ec 0c             	sub    esp,0xc
c000d6d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6dc:	e8 cd ff ff ff       	call   c000d6ae <Keyboard::~Keyboard()>
c000d6e1:	83 c4 10             	add    esp,0x10
c000d6e4:	83 ec 08             	sub    esp,0x8
c000d6e7:	68 5c 01 00 00       	push   0x15c
c000d6ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6f0:	e8 23 d1 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000d6f5:	83 c4 10             	add    esp,0x10
c000d6f8:	83 c4 0c             	add    esp,0xc
c000d6fb:	c3                   	ret    

c000d6fc <LogicalDisk::close(int, int, void*)>:
c000d6fc:	83 c8 ff             	or     eax,0xffffffff
c000d6ff:	c3                   	ret    

c000d700 <LogicalDisk::~LogicalDisk()>:
c000d700:	83 ec 0c             	sub    esp,0xc
c000d703:	ba 94 16 02 c0       	mov    edx,0xc0021694
c000d708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d70c:	89 10                	mov    DWORD PTR [eax],edx
c000d70e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d712:	83 ec 0c             	sub    esp,0xc
c000d715:	50                   	push   eax
c000d716:	e8 21 ee ff ff       	call   c000c53c <Device::~Device()>
c000d71b:	83 c4 10             	add    esp,0x10
c000d71e:	90                   	nop
c000d71f:	83 c4 0c             	add    esp,0xc
c000d722:	c3                   	ret    
c000d723:	90                   	nop

c000d724 <LogicalDisk::~LogicalDisk()>:
c000d724:	83 ec 0c             	sub    esp,0xc
c000d727:	83 ec 0c             	sub    esp,0xc
c000d72a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d72e:	e8 cd ff ff ff       	call   c000d700 <LogicalDisk::~LogicalDisk()>
c000d733:	83 c4 10             	add    esp,0x10
c000d736:	83 ec 08             	sub    esp,0x8
c000d739:	68 78 01 00 00       	push   0x178
c000d73e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d742:	e8 d1 d0 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000d747:	83 c4 10             	add    esp,0x10
c000d74a:	83 c4 0c             	add    esp,0xc
c000d74d:	c3                   	ret    

c000d74e <LogicalDisk::open(int, int, void*)>:
c000d74e:	83 ec 18             	sub    esp,0x18
c000d751:	68 48 16 02 c0       	push   0xc0021648
c000d756:	e8 0e 3b 00 00       	call   c0011269 <KePanic(char const*)>
c000d75b:	83 c8 ff             	or     eax,0xffffffff
c000d75e:	83 c4 1c             	add    esp,0x1c
c000d761:	c3                   	ret    

c000d762 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000d762:	53                   	push   ebx
c000d763:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d767:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d76b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d76f:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000d775:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000d77b:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000d781:	77 10                	ja     c000d793 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000d783:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000d789:	89 d3                	mov    ebx,edx
c000d78b:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000d791:	72 05                	jb     c000d798 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000d793:	83 c8 ff             	or     eax,0xffffffff
c000d796:	89 c2                	mov    edx,eax
c000d798:	5b                   	pop    ebx
c000d799:	c3                   	ret    

c000d79a <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000d79a:	56                   	push   esi
c000d79b:	83 c8 ff             	or     eax,0xffffffff
c000d79e:	53                   	push   ebx
c000d79f:	89 c2                	mov    edx,eax
c000d7a1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d7a5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d7a9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d7ad:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d7b3:	77 27                	ja     c000d7dc <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d7b5:	89 d8                	mov    eax,ebx
c000d7b7:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000d7bd:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000d7c3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d7c8:	89 c2                	mov    edx,eax
c000d7ca:	73 10                	jae    c000d7dc <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d7cc:	89 c8                	mov    eax,ecx
c000d7ce:	89 da                	mov    edx,ebx
c000d7d0:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000d7d6:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000d7dc:	5b                   	pop    ebx
c000d7dd:	5e                   	pop    esi
c000d7de:	c3                   	ret    
c000d7df:	90                   	nop

c000d7e0 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d7e0:	83 ec 1c             	sub    esp,0x1c
c000d7e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d7e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d7ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d7f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d7f7:	89 04 24             	mov    DWORD PTR [esp],eax
c000d7fa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d7fe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d802:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d806:	83 ec 08             	sub    esp,0x8
c000d809:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d80d:	50                   	push   eax
c000d80e:	e8 bf ef ff ff       	call   c000c7d2 <Device::Device(char const*)>
c000d813:	83 c4 10             	add    esp,0x10
c000d816:	ba 94 16 02 c0       	mov    edx,0xc0021694
c000d81b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d81f:	89 10                	mov    DWORD PTR [eax],edx
c000d821:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d825:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d82c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d830:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000d837:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d83b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d842:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d846:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d850:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d854:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d858:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d85c:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d862:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d868:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d86c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d86f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d873:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d879:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d87f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d883:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d887:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d88d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d891:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d89b:	90                   	nop
c000d89c:	83 c4 1c             	add    esp,0x1c
c000d89f:	c3                   	ret    

c000d8a0 <LogicalDisk::assignDriveLetter()>:
c000d8a0:	55                   	push   ebp
c000d8a1:	57                   	push   edi
c000d8a2:	56                   	push   esi
c000d8a3:	53                   	push   ebx
c000d8a4:	83 ec 14             	sub    esp,0x14
c000d8a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d8ab:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d8b1:	b0 41                	mov    al,0x41
c000d8b3:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000d8b9:	84 d2                	test   dl,dl
c000d8bb:	75 02                	jne    c000d8bf <LogicalDisk::assignDriveLetter()+0x1f>
c000d8bd:	b0 43                	mov    al,0x43
c000d8bf:	8b 3d 60 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028860
c000d8c5:	0f b6 ca             	movzx  ecx,dl
c000d8c8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000d8cc:	0f be e8             	movsx  ebp,al
c000d8cf:	8b 3d 64 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028864
c000d8d5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d8d9:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d8dd:	3c 43                	cmp    al,0x43
c000d8df:	75 10                	jne    c000d8f1 <LogicalDisk::assignDriveLetter()+0x51>
c000d8e1:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d8e8:	75 5a                	jne    c000d944 <LogicalDisk::assignDriveLetter()+0xa4>
c000d8ea:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d8ef:	75 53                	jne    c000d944 <LogicalDisk::assignDriveLetter()+0xa4>
c000d8f1:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d8f4:	ba 01 00 00 00       	mov    edx,0x1
c000d8f9:	89 34 24             	mov    DWORD PTR [esp],esi
c000d8fc:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000d8ff:	d3 e2                	shl    edx,cl
c000d901:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d905:	89 d7                	mov    edi,edx
c000d907:	89 d6                	mov    esi,edx
c000d909:	c1 ff 1f             	sar    edi,0x1f
c000d90c:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000d910:	21 f9                	and    ecx,edi
c000d912:	09 d1                	or     ecx,edx
c000d914:	75 2e                	jne    c000d944 <LogicalDisk::assignDriveLetter()+0xa4>
c000d916:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d91a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d91e:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d924:	09 f2                	or     edx,esi
c000d926:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000d929:	89 15 60 88 02 c0    	mov    DWORD PTR ds:0xc0028860,edx
c000d92f:	89 1c b5 80 88 02 c0 	mov    DWORD PTR [esi*4-0x3ffd7780],ebx
c000d936:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d93a:	09 fa                	or     edx,edi
c000d93c:	89 15 64 88 02 c0    	mov    DWORD PTR ds:0xc0028864,edx
c000d942:	eb 0d                	jmp    c000d951 <LogicalDisk::assignDriveLetter()+0xb1>
c000d944:	8d 50 01             	lea    edx,[eax+0x1]
c000d947:	45                   	inc    ebp
c000d948:	88 d0                	mov    al,dl
c000d94a:	80 fa 5b             	cmp    dl,0x5b
c000d94d:	75 8e                	jne    c000d8dd <LogicalDisk::assignDriveLetter()+0x3d>
c000d94f:	31 c0                	xor    eax,eax
c000d951:	83 c4 14             	add    esp,0x14
c000d954:	5b                   	pop    ebx
c000d955:	5e                   	pop    esi
c000d956:	5f                   	pop    edi
c000d957:	5d                   	pop    ebp
c000d958:	c3                   	ret    
c000d959:	90                   	nop

c000d95a <LogicalDisk::mount()>:
c000d95a:	56                   	push   esi
c000d95b:	53                   	push   ebx
c000d95c:	53                   	push   ebx
c000d95d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d961:	8b 1d 04 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026404
c000d967:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000d971:	85 db                	test   ebx,ebx
c000d973:	74 27                	je     c000d99c <LogicalDisk::mount()+0x42>
c000d975:	51                   	push   ecx
c000d976:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d97d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d97f:	83 e8 41             	sub    eax,0x41
c000d982:	50                   	push   eax
c000d983:	56                   	push   esi
c000d984:	53                   	push   ebx
c000d985:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d988:	83 c4 10             	add    esp,0x10
c000d98b:	84 c0                	test   al,al
c000d98d:	74 08                	je     c000d997 <LogicalDisk::mount()+0x3d>
c000d98f:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000d995:	eb 07                	jmp    c000d99e <LogicalDisk::mount()+0x44>
c000d997:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d99a:	eb d5                	jmp    c000d971 <LogicalDisk::mount()+0x17>
c000d99c:	31 c0                	xor    eax,eax
c000d99e:	5a                   	pop    edx
c000d99f:	5b                   	pop    ebx
c000d9a0:	5e                   	pop    esi
c000d9a1:	c3                   	ret    

c000d9a2 <LogicalDisk::unmount()>:
c000d9a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d9a6:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d9b0:	c3                   	ret    
c000d9b1:	90                   	nop

c000d9b2 <LogicalDisk::eject()>:
c000d9b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d9b6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d9bc:	8b 10                	mov    edx,DWORD PTR [eax]
c000d9be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d9c2:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d9c5:	90                   	nop

c000d9c6 <LogicalDisk::unassignDriveLetter()>:
c000d9c6:	57                   	push   edi
c000d9c7:	56                   	push   esi
c000d9c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d9cc:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000d9d3:	85 c9                	test   ecx,ecx
c000d9d5:	75 0f                	jne    c000d9e6 <LogicalDisk::unassignDriveLetter()+0x20>
c000d9d7:	c7 44 24 0c 6c 16 02 c0 	mov    DWORD PTR [esp+0xc],0xc002166c
c000d9df:	5e                   	pop    esi
c000d9e0:	5f                   	pop    edi
c000d9e1:	e9 83 38 00 00       	jmp    c0011269 <KePanic(char const*)>
c000d9e6:	83 e9 41             	sub    ecx,0x41
c000d9e9:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000d9f0:	b8 01 00 00 00       	mov    eax,0x1
c000d9f5:	c7 04 8d 80 88 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd7780],0x0
c000da00:	d3 e0                	shl    eax,cl
c000da02:	89 c7                	mov    edi,eax
c000da04:	f7 d0                	not    eax
c000da06:	c1 ff 1f             	sar    edi,0x1f
c000da09:	21 05 60 88 02 c0    	and    DWORD PTR ds:0xc0028860,eax
c000da0f:	89 fe                	mov    esi,edi
c000da11:	f7 d6                	not    esi
c000da13:	21 35 64 88 02 c0    	and    DWORD PTR ds:0xc0028864,esi
c000da19:	5e                   	pop    esi
c000da1a:	5f                   	pop    edi
c000da1b:	c3                   	ret    

c000da1c <LogicalDisk::read(unsigned long long, int, void*)>:
c000da1c:	57                   	push   edi
c000da1d:	56                   	push   esi
c000da1e:	53                   	push   ebx
c000da1f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000da23:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000da27:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000da2b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000da2f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000da35:	77 41                	ja     c000da78 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000da37:	99                   	cdq    
c000da38:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000da3e:	01 c8                	add    eax,ecx
c000da40:	11 da                	adc    edx,ebx
c000da42:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000da48:	19 d7                	sbb    edi,edx
c000da4a:	72 33                	jb     c000da7f <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000da4c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000da52:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000da58:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000da5c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000da60:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000da66:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000da6c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da70:	5b                   	pop    ebx
c000da71:	5e                   	pop    esi
c000da72:	5f                   	pop    edi
c000da73:	e9 c6 0a 00 00       	jmp    c000e53e <VCache::read(unsigned long long, int, void*)>
c000da78:	b8 05 00 00 00       	mov    eax,0x5
c000da7d:	eb 05                	jmp    c000da84 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000da7f:	b8 07 00 00 00       	mov    eax,0x7
c000da84:	5b                   	pop    ebx
c000da85:	5e                   	pop    esi
c000da86:	5f                   	pop    edi
c000da87:	c3                   	ret    

c000da88 <LogicalDisk::write(unsigned long long, int, void*)>:
c000da88:	57                   	push   edi
c000da89:	56                   	push   esi
c000da8a:	53                   	push   ebx
c000da8b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000da8f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000da93:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000da97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000da9b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000daa1:	77 41                	ja     c000dae4 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000daa3:	99                   	cdq    
c000daa4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000daaa:	01 c8                	add    eax,ecx
c000daac:	11 da                	adc    edx,ebx
c000daae:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000dab4:	19 d7                	sbb    edi,edx
c000dab6:	72 33                	jb     c000daeb <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000dab8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000dabe:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000dac4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000dac8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dacc:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000dad2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000dad8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dadc:	5b                   	pop    ebx
c000dadd:	5e                   	pop    esi
c000dade:	5f                   	pop    edi
c000dadf:	e9 6c 09 00 00       	jmp    c000e450 <VCache::write(unsigned long long, int, void*)>
c000dae4:	b8 05 00 00 00       	mov    eax,0x5
c000dae9:	eb 05                	jmp    c000daf0 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000daeb:	b8 07 00 00 00       	mov    eax,0x7
c000daf0:	5b                   	pop    ebx
c000daf1:	5e                   	pop    esi
c000daf2:	5f                   	pop    edi
c000daf3:	c3                   	ret    

c000daf4 <Mouse::Mouse(char const*)>:
c000daf4:	83 ec 0c             	sub    esp,0xc
c000daf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dafb:	83 ec 08             	sub    esp,0x8
c000dafe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db02:	50                   	push   eax
c000db03:	e8 ca ec ff ff       	call   c000c7d2 <Device::Device(char const*)>
c000db08:	83 c4 10             	add    esp,0x10
c000db0b:	ba c0 16 02 c0       	mov    edx,0xc00216c0
c000db10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db14:	89 10                	mov    DWORD PTR [eax],edx
c000db16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db1a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000db24:	90                   	nop
c000db25:	83 c4 0c             	add    esp,0xc
c000db28:	c3                   	ret    
c000db29:	90                   	nop
c000db2a:	66 90                	xchg   ax,ax

c000db2c <Mouse::~Mouse()>:
c000db2c:	83 ec 0c             	sub    esp,0xc
c000db2f:	ba c0 16 02 c0       	mov    edx,0xc00216c0
c000db34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db38:	89 10                	mov    DWORD PTR [eax],edx
c000db3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db3e:	83 ec 0c             	sub    esp,0xc
c000db41:	50                   	push   eax
c000db42:	e8 f5 e9 ff ff       	call   c000c53c <Device::~Device()>
c000db47:	83 c4 10             	add    esp,0x10
c000db4a:	90                   	nop
c000db4b:	83 c4 0c             	add    esp,0xc
c000db4e:	c3                   	ret    
c000db4f:	90                   	nop

c000db50 <Mouse::~Mouse()>:
c000db50:	83 ec 0c             	sub    esp,0xc
c000db53:	83 ec 0c             	sub    esp,0xc
c000db56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db5a:	e8 cd ff ff ff       	call   c000db2c <Mouse::~Mouse()>
c000db5f:	83 c4 10             	add    esp,0x10
c000db62:	83 ec 08             	sub    esp,0x8
c000db65:	68 58 01 00 00       	push   0x158
c000db6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db6e:	e8 a5 cc ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000db73:	83 c4 10             	add    esp,0x10
c000db76:	83 c4 0c             	add    esp,0xc
c000db79:	c3                   	ret    

c000db7a <NIC::getMAC()>:
c000db7a:	31 c0                	xor    eax,eax
c000db7c:	31 d2                	xor    edx,edx
c000db7e:	c3                   	ret    
c000db7f:	90                   	nop

c000db80 <NIC::write(int, unsigned char*, int*)>:
c000db80:	b8 01 00 00 00       	mov    eax,0x1
c000db85:	c3                   	ret    

c000db86 <NIC::NIC(char const*)>:
c000db86:	83 ec 0c             	sub    esp,0xc
c000db89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db8d:	83 ec 08             	sub    esp,0x8
c000db90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db94:	50                   	push   eax
c000db95:	e8 38 ec ff ff       	call   c000c7d2 <Device::Device(char const*)>
c000db9a:	83 c4 10             	add    esp,0x10
c000db9d:	ba ec 16 02 c0       	mov    edx,0xc00216ec
c000dba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dba6:	89 10                	mov    DWORD PTR [eax],edx
c000dba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbac:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000dbb6:	90                   	nop
c000dbb7:	83 c4 0c             	add    esp,0xc
c000dbba:	c3                   	ret    
c000dbbb:	90                   	nop

c000dbbc <NIC::~NIC()>:
c000dbbc:	83 ec 0c             	sub    esp,0xc
c000dbbf:	ba ec 16 02 c0       	mov    edx,0xc00216ec
c000dbc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbc8:	89 10                	mov    DWORD PTR [eax],edx
c000dbca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbce:	83 ec 0c             	sub    esp,0xc
c000dbd1:	50                   	push   eax
c000dbd2:	e8 65 e9 ff ff       	call   c000c53c <Device::~Device()>
c000dbd7:	83 c4 10             	add    esp,0x10
c000dbda:	90                   	nop
c000dbdb:	83 c4 0c             	add    esp,0xc
c000dbde:	c3                   	ret    
c000dbdf:	90                   	nop

c000dbe0 <NIC::~NIC()>:
c000dbe0:	83 ec 0c             	sub    esp,0xc
c000dbe3:	83 ec 0c             	sub    esp,0xc
c000dbe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbea:	e8 cd ff ff ff       	call   c000dbbc <NIC::~NIC()>
c000dbef:	83 c4 10             	add    esp,0x10
c000dbf2:	83 ec 08             	sub    esp,0x8
c000dbf5:	68 58 01 00 00       	push   0x158
c000dbfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbfe:	e8 15 cc ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000dc03:	83 c4 10             	add    esp,0x10
c000dc06:	83 c4 0c             	add    esp,0xc
c000dc09:	c3                   	ret    

c000dc0a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dc0a:	55                   	push   ebp
c000dc0b:	57                   	push   edi
c000dc0c:	56                   	push   esi
c000dc0d:	53                   	push   ebx
c000dc0e:	81 ec 28 01 00 00    	sub    esp,0x128
c000dc14:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000dc1b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000dc22:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000dc29:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000dc30:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dc34:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dc38:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dc3f:	e8 8a ec ff ff       	call   c000c8ce <Device::getName()>
c000dc44:	5a                   	pop    edx
c000dc45:	59                   	pop    ecx
c000dc46:	50                   	push   eax
c000dc47:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000dc4b:	55                   	push   ebp
c000dc4c:	e8 ef 29 ff ff       	call   c0000640 <strcpy>
c000dc51:	5b                   	pop    ebx
c000dc52:	58                   	pop    eax
c000dc53:	68 18 17 02 c0       	push   0xc0021718
c000dc58:	55                   	push   ebp
c000dc59:	e8 e2 2b ff ff       	call   c0000840 <strcat>
c000dc5e:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000dc65:	e8 4c 9e ff ff       	call   c0007ab6 <malloc>
c000dc6a:	83 c4 0c             	add    esp,0xc
c000dc6d:	89 c3                	mov    ebx,eax
c000dc6f:	57                   	push   edi
c000dc70:	56                   	push   esi
c000dc71:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dc75:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dc79:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000dc80:	55                   	push   ebp
c000dc81:	50                   	push   eax
c000dc82:	e8 59 fb ff ff       	call   c000d7e0 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000dc87:	83 c4 14             	add    esp,0x14
c000dc8a:	53                   	push   ebx
c000dc8b:	e8 10 fc ff ff       	call   c000d8a0 <LogicalDisk::assignDriveLetter()>
c000dc90:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dc93:	e8 c2 fc ff ff       	call   c000d95a <LogicalDisk::mount()>
c000dc98:	58                   	pop    eax
c000dc99:	5a                   	pop    edx
c000dc9a:	53                   	push   ebx
c000dc9b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dca2:	e8 93 e9 ff ff       	call   c000c63a <Device::addChild(Device*)>
c000dca7:	81 c4 2c 01 00 00    	add    esp,0x12c
c000dcad:	5b                   	pop    ebx
c000dcae:	5e                   	pop    esi
c000dcaf:	5f                   	pop    edi
c000dcb0:	5d                   	pop    ebp
c000dcb1:	c3                   	ret    

c000dcb2 <createPartitionsForDisk(PhysicalDisk*)>:
c000dcb2:	55                   	push   ebp
c000dcb3:	57                   	push   edi
c000dcb4:	56                   	push   esi
c000dcb5:	53                   	push   ebx
c000dcb6:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000dcbc:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000dcc3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000dcc9:	3d 00 02 00 00       	cmp    eax,0x200
c000dcce:	74 27                	je     c000dcf7 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000dcd0:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000dcd6:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000dcdc:	83 ec 10             	sub    esp,0x10
c000dcdf:	0f a4 f7 0a          	shld   edi,esi,0xa
c000dce3:	99                   	cdq    
c000dce4:	c1 e6 0a             	shl    esi,0xa
c000dce7:	52                   	push   edx
c000dce8:	89 fd                	mov    ebp,edi
c000dcea:	50                   	push   eax
c000dceb:	55                   	push   ebp
c000dcec:	56                   	push   esi
c000dced:	e8 ae 14 01 00       	call   c001f1a0 <__udivdi3>
c000dcf2:	e9 b9 00 00 00       	jmp    c000ddb0 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000dcf7:	83 ec 0c             	sub    esp,0xc
c000dcfa:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dcfc:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000dd00:	56                   	push   esi
c000dd01:	6a 01                	push   0x1
c000dd03:	6a 00                	push   0x0
c000dd05:	6a 00                	push   0x0
c000dd07:	53                   	push   ebx
c000dd08:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000dd0b:	83 c4 20             	add    esp,0x20
c000dd0e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000dd16:	75 0a                	jne    c000dd22 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000dd18:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000dd20:	74 2c                	je     c000dd4e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000dd22:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000dd28:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000dd2e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000dd34:	83 ec 10             	sub    esp,0x10
c000dd37:	0f a4 c2 0a          	shld   edx,eax,0xa
c000dd3b:	89 f7                	mov    edi,esi
c000dd3d:	c1 e0 0a             	shl    eax,0xa
c000dd40:	c1 ff 1f             	sar    edi,0x1f
c000dd43:	57                   	push   edi
c000dd44:	56                   	push   esi
c000dd45:	52                   	push   edx
c000dd46:	50                   	push   eax
c000dd47:	e8 54 14 01 00       	call   c001f1a0 <__udivdi3>
c000dd4c:	eb 62                	jmp    c000ddb0 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000dd4e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000dd55:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000dd5c:	89 cf                	mov    edi,ecx
c000dd5e:	83 e2 7f             	and    edx,0x7f
c000dd61:	83 e7 7f             	and    edi,0x7f
c000dd64:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000dd6b:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000dd6e:	83 e0 7f             	and    eax,0x7f
c000dd71:	8d 14 01             	lea    edx,[ecx+eax*1]
c000dd74:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000dd7b:	83 e0 7f             	and    eax,0x7f
c000dd7e:	01 d0                	add    eax,edx
c000dd80:	89 c5                	mov    ebp,eax
c000dd82:	84 c0                	test   al,al
c000dd84:	74 41                	je     c000ddc7 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000dd86:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000dd8c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000dd92:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000dd98:	83 ec 10             	sub    esp,0x10
c000dd9b:	0f a4 c2 0a          	shld   edx,eax,0xa
c000dd9f:	89 f7                	mov    edi,esi
c000dda1:	c1 e0 0a             	shl    eax,0xa
c000dda4:	c1 ff 1f             	sar    edi,0x1f
c000dda7:	57                   	push   edi
c000dda8:	56                   	push   esi
c000dda9:	52                   	push   edx
c000ddaa:	50                   	push   eax
c000ddab:	e8 f0 13 01 00       	call   c001f1a0 <__udivdi3>
c000ddb0:	83 c4 14             	add    esp,0x14
c000ddb3:	52                   	push   edx
c000ddb4:	50                   	push   eax
c000ddb5:	6a 00                	push   0x0
c000ddb7:	6a 00                	push   0x0
c000ddb9:	53                   	push   ebx
c000ddba:	e8 4b fe ff ff       	call   c000dc0a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000ddbf:	83 c4 20             	add    esp,0x20
c000ddc2:	e9 73 01 00 00       	jmp    c000df3a <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000ddc7:	89 f0                	mov    eax,esi
c000ddc9:	31 c9                	xor    ecx,ecx
c000ddcb:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000ddd2:	75 02                	jne    c000ddd6 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000ddd4:	89 cd                	mov    ebp,ecx
c000ddd6:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000dddd:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000dde4:	c1 e2 08             	shl    edx,0x8
c000dde7:	c1 e6 10             	shl    esi,0x10
c000ddea:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000ddf2:	09 f2                	or     edx,esi
c000ddf4:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000ddfc:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000de03:	83 c0 10             	add    eax,0x10
c000de06:	09 f2                	or     edx,esi
c000de08:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000de0f:	c1 e6 18             	shl    esi,0x18
c000de12:	09 f2                	or     edx,esi
c000de14:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000de1b:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000de1f:	c1 e6 10             	shl    esi,0x10
c000de22:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000de29:	c1 e2 08             	shl    edx,0x8
c000de2c:	09 f2                	or     edx,esi
c000de2e:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000de35:	09 f2                	or     edx,esi
c000de37:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000de3e:	c1 e6 18             	shl    esi,0x18
c000de41:	09 f2                	or     edx,esi
c000de43:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000de47:	41                   	inc    ecx
c000de48:	83 f9 04             	cmp    ecx,0x4
c000de4b:	0f 85 7a ff ff ff    	jne    c000ddcb <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000de51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de55:	83 f0 01             	xor    eax,0x1
c000de58:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000de5c:	75 4f                	jne    c000dead <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000de5e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de62:	83 f0 01             	xor    eax,0x1
c000de65:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000de69:	75 42                	jne    c000dead <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000de6b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000de73:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000de7b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000de81:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000de87:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000de8d:	0f a4 c2 0a          	shld   edx,eax,0xa
c000de91:	89 f7                	mov    edi,esi
c000de93:	c1 e0 0a             	shl    eax,0xa
c000de96:	c1 ff 1f             	sar    edi,0x1f
c000de99:	57                   	push   edi
c000de9a:	56                   	push   esi
c000de9b:	52                   	push   edx
c000de9c:	50                   	push   eax
c000de9d:	e8 fe 12 01 00       	call   c001f1a0 <__udivdi3>
c000dea2:	83 c4 10             	add    esp,0x10
c000dea5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dea9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dead:	89 e8                	mov    eax,ebp
c000deaf:	0f b6 e8             	movzx  ebp,al
c000deb2:	85 ed                	test   ebp,ebp
c000deb4:	74 50                	je     c000df06 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000deb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000deba:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000debe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dec2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000dec6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000deca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dece:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000ded2:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000ded6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000deda:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dede:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dee2:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000dee6:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000deea:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000deee:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000def2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000def6:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000defa:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000defe:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000df02:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000df06:	31 ed                	xor    ebp,ebp
c000df08:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000df0c:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000df10:	89 f8                	mov    eax,edi
c000df12:	09 f0                	or     eax,esi
c000df14:	74 1e                	je     c000df34 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000df16:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000df1a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000df1e:	89 d1                	mov    ecx,edx
c000df20:	09 c1                	or     ecx,eax
c000df22:	74 10                	je     c000df34 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000df24:	83 ec 0c             	sub    esp,0xc
c000df27:	57                   	push   edi
c000df28:	56                   	push   esi
c000df29:	52                   	push   edx
c000df2a:	50                   	push   eax
c000df2b:	53                   	push   ebx
c000df2c:	e8 d9 fc ff ff       	call   c000dc0a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000df31:	83 c4 20             	add    esp,0x20
c000df34:	45                   	inc    ebp
c000df35:	83 fd 04             	cmp    ebp,0x4
c000df38:	75 ce                	jne    c000df08 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000df3a:	81 c4 5c 02 00 00    	add    esp,0x25c
c000df40:	5b                   	pop    ebx
c000df41:	5e                   	pop    esi
c000df42:	5f                   	pop    edi
c000df43:	5d                   	pop    ebp
c000df44:	c3                   	ret    
c000df45:	66 90                	xchg   ax,ax
c000df47:	90                   	nop

c000df48 <Serial::Serial(char const*)>:
c000df48:	83 ec 0c             	sub    esp,0xc
c000df4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df4f:	83 ec 08             	sub    esp,0x8
c000df52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df56:	50                   	push   eax
c000df57:	e8 76 e8 ff ff       	call   c000c7d2 <Device::Device(char const*)>
c000df5c:	83 c4 10             	add    esp,0x10
c000df5f:	ba 2c 17 02 c0       	mov    edx,0xc002172c
c000df64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df68:	89 10                	mov    DWORD PTR [eax],edx
c000df6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df6e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000df78:	90                   	nop
c000df79:	83 c4 0c             	add    esp,0xc
c000df7c:	c3                   	ret    
c000df7d:	90                   	nop
c000df7e:	66 90                	xchg   ax,ax

c000df80 <Serial::~Serial()>:
c000df80:	83 ec 0c             	sub    esp,0xc
c000df83:	ba 2c 17 02 c0       	mov    edx,0xc002172c
c000df88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df8c:	89 10                	mov    DWORD PTR [eax],edx
c000df8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df92:	83 ec 0c             	sub    esp,0xc
c000df95:	50                   	push   eax
c000df96:	e8 a1 e5 ff ff       	call   c000c53c <Device::~Device()>
c000df9b:	83 c4 10             	add    esp,0x10
c000df9e:	90                   	nop
c000df9f:	83 c4 0c             	add    esp,0xc
c000dfa2:	c3                   	ret    
c000dfa3:	90                   	nop

c000dfa4 <Serial::~Serial()>:
c000dfa4:	83 ec 0c             	sub    esp,0xc
c000dfa7:	83 ec 0c             	sub    esp,0xc
c000dfaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfae:	e8 cd ff ff ff       	call   c000df80 <Serial::~Serial()>
c000dfb3:	83 c4 10             	add    esp,0x10
c000dfb6:	83 ec 08             	sub    esp,0x8
c000dfb9:	68 58 01 00 00       	push   0x158
c000dfbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfc2:	e8 51 c8 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000dfc7:	83 c4 10             	add    esp,0x10
c000dfca:	83 c4 0c             	add    esp,0xc
c000dfcd:	c3                   	ret    
c000dfce:	66 90                	xchg   ax,ax

c000dfd0 <Timer::Timer(char const*)>:
c000dfd0:	83 ec 0c             	sub    esp,0xc
c000dfd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfd7:	83 ec 08             	sub    esp,0x8
c000dfda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfde:	50                   	push   eax
c000dfdf:	e8 ee e7 ff ff       	call   c000c7d2 <Device::Device(char const*)>
c000dfe4:	83 c4 10             	add    esp,0x10
c000dfe7:	ba 70 17 02 c0       	mov    edx,0xc0021770
c000dfec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dff0:	89 10                	mov    DWORD PTR [eax],edx
c000dff2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dff6:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e000:	90                   	nop
c000e001:	83 c4 0c             	add    esp,0xc
c000e004:	c3                   	ret    
c000e005:	90                   	nop
c000e006:	66 90                	xchg   ax,ax

c000e008 <Timer::~Timer()>:
c000e008:	83 ec 0c             	sub    esp,0xc
c000e00b:	ba 70 17 02 c0       	mov    edx,0xc0021770
c000e010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e014:	89 10                	mov    DWORD PTR [eax],edx
c000e016:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e01a:	83 ec 0c             	sub    esp,0xc
c000e01d:	50                   	push   eax
c000e01e:	e8 19 e5 ff ff       	call   c000c53c <Device::~Device()>
c000e023:	83 c4 10             	add    esp,0x10
c000e026:	90                   	nop
c000e027:	83 c4 0c             	add    esp,0xc
c000e02a:	c3                   	ret    
c000e02b:	90                   	nop

c000e02c <Timer::~Timer()>:
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	83 ec 0c             	sub    esp,0xc
c000e032:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e036:	e8 cd ff ff ff       	call   c000e008 <Timer::~Timer()>
c000e03b:	83 c4 10             	add    esp,0x10
c000e03e:	83 ec 08             	sub    esp,0x8
c000e041:	68 5c 01 00 00       	push   0x15c
c000e046:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e04a:	e8 c9 c7 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e04f:	83 c4 10             	add    esp,0x10
c000e052:	83 c4 0c             	add    esp,0xc
c000e055:	c3                   	ret    

c000e056 <Timer::read()>:
c000e056:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e05a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e060:	c3                   	ret    

c000e061 <setupTimer(int)>:
c000e061:	53                   	push   ebx
c000e062:	83 ec 14             	sub    esp,0x14
c000e065:	68 5c 01 00 00       	push   0x15c
c000e06a:	e8 47 9a ff ff       	call   c0007ab6 <malloc>
c000e06f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e072:	89 c3                	mov    ebx,eax
c000e074:	e8 8b 09 01 00       	call   c001ea04 <PIT::PIT()>
c000e079:	58                   	pop    eax
c000e07a:	5a                   	pop    edx
c000e07b:	53                   	push   ebx
c000e07c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000e082:	e8 b3 e5 ff ff       	call   c000c63a <Device::addChild(Device*)>
c000e087:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e089:	6a 00                	push   0x0
c000e08b:	6a 00                	push   0x0
c000e08d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e091:	53                   	push   ebx
c000e092:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e095:	89 d8                	mov    eax,ebx
c000e097:	83 c4 28             	add    esp,0x28
c000e09a:	5b                   	pop    ebx
c000e09b:	c3                   	ret    

c000e09c <timerHandler(unsigned int)>:
c000e09c:	56                   	push   esi
c000e09d:	53                   	push   ebx
c000e09e:	51                   	push   ecx
c000e09f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0a3:	01 05 ec 88 02 c0    	add    DWORD PTR ds:0xc00288ec,eax
c000e0a9:	80 3d bd 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebd,0x0
c000e0b0:	0f 84 4a 01 00 00    	je     c000e200 <timerHandler(unsigned int)+0x164>
c000e0b6:	fa                   	cli    
c000e0b7:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000e0bd:	83 ec 0c             	sub    esp,0xc
c000e0c0:	ff 05 c4 96 02 c0    	inc    DWORD PTR ds:0xc00296c4
c000e0c6:	68 d8 96 02 c0       	push   0xc00296d8
c000e0cb:	e8 a0 16 01 00       	call   c001f770 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e0d0:	83 c4 10             	add    esp,0x10
c000e0d3:	84 c0                	test   al,al
c000e0d5:	0f 85 a1 00 00 00    	jne    c000e17c <timerHandler(unsigned int)+0xe0>
c000e0db:	83 ec 0c             	sub    esp,0xc
c000e0de:	68 d8 96 02 c0       	push   0xc00296d8
c000e0e3:	e8 a4 16 01 00       	call   c001f78c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e0e8:	83 c4 10             	add    esp,0x10
c000e0eb:	89 c6                	mov    esi,eax
c000e0ed:	8d 76 00             	lea    esi,[esi+0x0]
c000e0f0:	83 ec 0c             	sub    esp,0xc
c000e0f3:	68 d8 96 02 c0       	push   0xc00296d8
c000e0f8:	e8 8f 16 01 00       	call   c001f78c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e0fd:	c7 04 24 d8 96 02 c0 	mov    DWORD PTR [esp],0xc00296d8
c000e104:	89 c3                	mov    ebx,eax
c000e106:	e8 89 16 01 00       	call   c001f794 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e10b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e10e:	83 c4 10             	add    esp,0x10
c000e111:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c000e117:	77 23                	ja     c000e13c <timerHandler(unsigned int)+0xa0>
c000e119:	83 ec 0c             	sub    esp,0xc
c000e11c:	53                   	push   ebx
c000e11d:	e8 1e 7f 00 00       	call   c0016040 <unblockTask(ThreadControlBlock*)>
c000e122:	83 c4 10             	add    esp,0x10
c000e125:	39 de                	cmp    esi,ebx
c000e127:	75 27                	jne    c000e150 <timerHandler(unsigned int)+0xb4>
c000e129:	83 ec 0c             	sub    esp,0xc
c000e12c:	68 d8 96 02 c0       	push   0xc00296d8
c000e131:	e8 56 16 01 00       	call   c001f78c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e136:	89 c6                	mov    esi,eax
c000e138:	eb 12                	jmp    c000e14c <timerHandler(unsigned int)+0xb0>
c000e13a:	66 90                	xchg   ax,ax
c000e13c:	52                   	push   edx
c000e13d:	52                   	push   edx
c000e13e:	53                   	push   ebx
c000e13f:	68 d8 96 02 c0       	push   0xc00296d8
c000e144:	e8 07 17 01 00       	call   c001f850 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e149:	8d 76 00             	lea    esi,[esi+0x0]
c000e14c:	83 c4 10             	add    esp,0x10
c000e14f:	90                   	nop
c000e150:	83 ec 0c             	sub    esp,0xc
c000e153:	68 d8 96 02 c0       	push   0xc00296d8
c000e158:	e8 13 16 01 00       	call   c001f770 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e15d:	83 c4 10             	add    esp,0x10
c000e160:	84 c0                	test   al,al
c000e162:	75 18                	jne    c000e17c <timerHandler(unsigned int)+0xe0>
c000e164:	83 ec 0c             	sub    esp,0xc
c000e167:	68 d8 96 02 c0       	push   0xc00296d8
c000e16c:	e8 1b 16 01 00       	call   c001f78c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e171:	83 c4 10             	add    esp,0x10
c000e174:	39 f0                	cmp    eax,esi
c000e176:	0f 85 74 ff ff ff    	jne    c000e0f0 <timerHandler(unsigned int)+0x54>
c000e17c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e181:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e185:	74 41                	je     c000e1c8 <timerHandler(unsigned int)+0x12c>
c000e187:	80 3d bc 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebc,0x0
c000e18e:	74 38                	je     c000e1c8 <timerHandler(unsigned int)+0x12c>
c000e190:	fa                   	cli    
c000e191:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000e197:	a1 ec 88 02 c0       	mov    eax,ds:0xc00288ec
c000e19c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e1a2:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e1a5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e1ab:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e1ae:	72 08                	jb     c000e1b8 <timerHandler(unsigned int)+0x11c>
c000e1b0:	e8 73 79 00 00       	call   c0015b28 <schedule()>
c000e1b5:	8d 76 00             	lea    esi,[esi+0x0]
c000e1b8:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000e1bd:	48                   	dec    eax
c000e1be:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000e1c3:	75 03                	jne    c000e1c8 <timerHandler(unsigned int)+0x12c>
c000e1c5:	fb                   	sti    
c000e1c6:	66 90                	xchg   ax,ax
c000e1c8:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000e1cd:	48                   	dec    eax
c000e1ce:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000e1d3:	75 1b                	jne    c000e1f0 <timerHandler(unsigned int)+0x154>
c000e1d5:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c000e1dc:	74 12                	je     c000e1f0 <timerHandler(unsigned int)+0x154>
c000e1de:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c000e1e8:	e8 3b 79 00 00       	call   c0015b28 <schedule()>
c000e1ed:	8d 76 00             	lea    esi,[esi+0x0]
c000e1f0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000e1f5:	48                   	dec    eax
c000e1f6:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000e1fb:	75 03                	jne    c000e200 <timerHandler(unsigned int)+0x164>
c000e1fd:	fb                   	sti    
c000e1fe:	66 90                	xchg   ax,ax
c000e200:	58                   	pop    eax
c000e201:	5b                   	pop    ebx
c000e202:	5e                   	pop    esi
c000e203:	c3                   	ret    

c000e204 <VCache::VCache(PhysicalDisk*)>:
c000e204:	53                   	push   ebx
c000e205:	83 ec 18             	sub    esp,0x18
c000e208:	ba a0 17 02 c0       	mov    edx,0xc00217a0
c000e20d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e211:	89 10                	mov    DWORD PTR [eax],edx
c000e213:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e217:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e21e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e222:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e229:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e22d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e234:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e23b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e23f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e246:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e24d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e251:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e258:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e25c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e264:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e26b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e272:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e276:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e27a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e27e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e282:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e286:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e28a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e28e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e295:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e29d:	83 ec 0c             	sub    esp,0xc
c000e2a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e2a4:	e8 0d 98 ff ff       	call   c0007ab6 <malloc>
c000e2a9:	83 c4 10             	add    esp,0x10
c000e2ac:	89 c3                	mov    ebx,eax
c000e2ae:	83 ec 0c             	sub    esp,0xc
c000e2b1:	53                   	push   ebx
c000e2b2:	e8 0d 76 00 00       	call   c00158c4 <Mutex::Mutex()>
c000e2b7:	83 c4 10             	add    esp,0x10
c000e2ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2be:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e2c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2c5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e2c9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e2cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2d0:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e2d7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e2db:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e2e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2e5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e2e8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e2ec:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e2f2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e2f8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e2fc:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e2ff:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e302:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e306:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e30a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e30e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e314:	05 00 02 00 00       	add    eax,0x200
c000e319:	c1 e0 03             	shl    eax,0x3
c000e31c:	83 ec 0c             	sub    esp,0xc
c000e31f:	50                   	push   eax
c000e320:	e8 91 97 ff ff       	call   c0007ab6 <malloc>
c000e325:	83 c4 10             	add    esp,0x10
c000e328:	89 c2                	mov    edx,eax
c000e32a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e32e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e331:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e335:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e33c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e340:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e344:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e348:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e34e:	89 d0                	mov    eax,edx
c000e350:	c1 e0 02             	shl    eax,0x2
c000e353:	01 d0                	add    eax,edx
c000e355:	c1 e0 04             	shl    eax,0x4
c000e358:	83 ec 0c             	sub    esp,0xc
c000e35b:	50                   	push   eax
c000e35c:	e8 55 97 ff ff       	call   c0007ab6 <malloc>
c000e361:	83 c4 10             	add    esp,0x10
c000e364:	89 c2                	mov    edx,eax
c000e366:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e36a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e36d:	90                   	nop
c000e36e:	83 c4 18             	add    esp,0x18
c000e371:	5b                   	pop    ebx
c000e372:	c3                   	ret    
c000e373:	90                   	nop

c000e374 <VCache::invalidateReadBuffer()>:
c000e374:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e378:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e37e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e382:	c3                   	ret    
c000e383:	90                   	nop

c000e384 <VCache::writeWriteBuffer()>:
c000e384:	53                   	push   ebx
c000e385:	83 ec 08             	sub    esp,0x8
c000e388:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e38c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e390:	74 1e                	je     c000e3b0 <VCache::writeWriteBuffer()+0x2c>
c000e392:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e395:	83 ec 0c             	sub    esp,0xc
c000e398:	8b 10                	mov    edx,DWORD PTR [eax]
c000e39a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e39d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e3a0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e3a3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e3a6:	50                   	push   eax
c000e3a7:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e3aa:	83 c4 20             	add    esp,0x20
c000e3ad:	8d 76 00             	lea    esi,[esi+0x0]
c000e3b0:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e3b7:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e3be:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e3c2:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e3c9:	83 c4 08             	add    esp,0x8
c000e3cc:	5b                   	pop    ebx
c000e3cd:	c3                   	ret    
c000e3ce:	66 90                	xchg   ax,ax

c000e3d0 <VCache::~VCache()>:
c000e3d0:	83 ec 0c             	sub    esp,0xc
c000e3d3:	ba a0 17 02 c0       	mov    edx,0xc00217a0
c000e3d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3dc:	89 10                	mov    DWORD PTR [eax],edx
c000e3de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3e2:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e3e5:	0f b6 c0             	movzx  eax,al
c000e3e8:	85 c0                	test   eax,eax
c000e3ea:	74 10                	je     c000e3fc <VCache::~VCache()+0x2c>
c000e3ec:	83 ec 0c             	sub    esp,0xc
c000e3ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3f3:	e8 8c ff ff ff       	call   c000e384 <VCache::writeWriteBuffer()>
c000e3f8:	83 c4 10             	add    esp,0x10
c000e3fb:	90                   	nop
c000e3fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e400:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e403:	83 ec 0c             	sub    esp,0xc
c000e406:	50                   	push   eax
c000e407:	e8 ba 96 ff ff       	call   c0007ac6 <free>
c000e40c:	83 c4 10             	add    esp,0x10
c000e40f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e413:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e416:	83 ec 0c             	sub    esp,0xc
c000e419:	50                   	push   eax
c000e41a:	e8 a7 96 ff ff       	call   c0007ac6 <free>
c000e41f:	83 c4 10             	add    esp,0x10
c000e422:	90                   	nop
c000e423:	83 c4 0c             	add    esp,0xc
c000e426:	c3                   	ret    
c000e427:	90                   	nop

c000e428 <VCache::~VCache()>:
c000e428:	83 ec 0c             	sub    esp,0xc
c000e42b:	83 ec 0c             	sub    esp,0xc
c000e42e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e432:	e8 99 ff ff ff       	call   c000e3d0 <VCache::~VCache()>
c000e437:	83 c4 10             	add    esp,0x10
c000e43a:	83 ec 08             	sub    esp,0x8
c000e43d:	6a 44                	push   0x44
c000e43f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e443:	e8 d0 c3 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e448:	83 c4 10             	add    esp,0x10
c000e44b:	83 c4 0c             	add    esp,0xc
c000e44e:	c3                   	ret    
c000e44f:	90                   	nop

c000e450 <VCache::write(unsigned long long, int, void*)>:
c000e450:	55                   	push   ebp
c000e451:	57                   	push   edi
c000e452:	56                   	push   esi
c000e453:	53                   	push   ebx
c000e454:	83 ec 1c             	sub    esp,0x1c
c000e457:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e45b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e45f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e463:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e467:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e46b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e46f:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e473:	74 07                	je     c000e47c <VCache::write(unsigned long long, int, void*)+0x2c>
c000e475:	53                   	push   ebx
c000e476:	e8 f9 fe ff ff       	call   c000e374 <VCache::invalidateReadBuffer()>
c000e47b:	58                   	pop    eax
c000e47c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e480:	74 62                	je     c000e4e4 <VCache::write(unsigned long long, int, void*)+0x94>
c000e482:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e485:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e489:	99                   	cdq    
c000e48a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e48e:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e491:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e494:	31 c1                	xor    ecx,eax
c000e496:	89 d0                	mov    eax,edx
c000e498:	89 ca                	mov    edx,ecx
c000e49a:	31 e8                	xor    eax,ebp
c000e49c:	09 c2                	or     edx,eax
c000e49e:	75 38                	jne    c000e4d8 <VCache::write(unsigned long long, int, void*)+0x88>
c000e4a0:	83 ff 01             	cmp    edi,0x1
c000e4a3:	75 33                	jne    c000e4d8 <VCache::write(unsigned long long, int, void*)+0x88>
c000e4a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e4a8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e4ac:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e4b2:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e4b5:	0f af c8             	imul   ecx,eax
c000e4b8:	01 cf                	add    edi,ecx
c000e4ba:	89 c1                	mov    ecx,eax
c000e4bc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e4be:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e4c1:	40                   	inc    eax
c000e4c2:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e4c5:	83 f8 50             	cmp    eax,0x50
c000e4c8:	75 6a                	jne    c000e534 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e4ca:	83 ec 0c             	sub    esp,0xc
c000e4cd:	53                   	push   ebx
c000e4ce:	e8 b1 fe ff ff       	call   c000e384 <VCache::writeWriteBuffer()>
c000e4d3:	83 c4 10             	add    esp,0x10
c000e4d6:	eb 5c                	jmp    c000e534 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e4d8:	83 ec 0c             	sub    esp,0xc
c000e4db:	53                   	push   ebx
c000e4dc:	e8 a3 fe ff ff       	call   c000e384 <VCache::writeWriteBuffer()>
c000e4e1:	83 c4 10             	add    esp,0x10
c000e4e4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e4e7:	83 ff 4f             	cmp    edi,0x4f
c000e4ea:	7f 20                	jg     c000e50c <VCache::write(unsigned long long, int, void*)+0xbc>
c000e4ec:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e4ef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e4f3:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e4f6:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000e4f9:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e4fd:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e500:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e506:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e508:	eb 2a                	jmp    c000e534 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e50a:	66 90                	xchg   ax,ax
c000e50c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e50e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e512:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e516:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e51a:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e51e:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000e522:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e526:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e529:	83 c4 1c             	add    esp,0x1c
c000e52c:	5b                   	pop    ebx
c000e52d:	5e                   	pop    esi
c000e52e:	5f                   	pop    edi
c000e52f:	5d                   	pop    ebp
c000e530:	ff e0                	jmp    eax
c000e532:	66 90                	xchg   ax,ax
c000e534:	83 c4 1c             	add    esp,0x1c
c000e537:	31 c0                	xor    eax,eax
c000e539:	5b                   	pop    ebx
c000e53a:	5e                   	pop    esi
c000e53b:	5f                   	pop    edi
c000e53c:	5d                   	pop    ebp
c000e53d:	c3                   	ret    

c000e53e <VCache::read(unsigned long long, int, void*)>:
c000e53e:	55                   	push   ebp
c000e53f:	57                   	push   edi
c000e540:	56                   	push   esi
c000e541:	53                   	push   ebx
c000e542:	83 ec 1c             	sub    esp,0x1c
c000e545:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e549:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e54d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e551:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e555:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e559:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e55d:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e561:	74 0d                	je     c000e570 <VCache::read(unsigned long long, int, void*)+0x32>
c000e563:	83 ec 0c             	sub    esp,0xc
c000e566:	57                   	push   edi
c000e567:	e8 18 fe ff ff       	call   c000e384 <VCache::writeWriteBuffer()>
c000e56c:	83 c4 10             	add    esp,0x10
c000e56f:	90                   	nop
c000e570:	83 fd 01             	cmp    ebp,0x1
c000e573:	0f 85 93 00 00 00    	jne    c000e60c <VCache::read(unsigned long long, int, void*)+0xce>
c000e579:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e57c:	89 04 24             	mov    DWORD PTR [esp],eax
c000e57f:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e586:	0f 85 80 00 00 00    	jne    c000e60c <VCache::read(unsigned long long, int, void*)+0xce>
c000e58c:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000e58f:	89 e9                	mov    ecx,ebp
c000e591:	f7 d9                	neg    ecx
c000e593:	89 c8                	mov    eax,ecx
c000e595:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e599:	c1 f8 1f             	sar    eax,0x1f
c000e59c:	21 d9                	and    ecx,ebx
c000e59e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e5a2:	89 c8                	mov    eax,ecx
c000e5a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e5a8:	21 f1                	and    ecx,esi
c000e5aa:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e5ae:	89 ca                	mov    edx,ecx
c000e5b0:	74 2e                	je     c000e5e0 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e5b2:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000e5b5:	75 29                	jne    c000e5e0 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e5b7:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e5ba:	75 24                	jne    c000e5e0 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e5bc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e5bf:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e5c5:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e5c8:	8d 70 ff             	lea    esi,[eax-0x1]
c000e5cb:	21 f3                	and    ebx,esi
c000e5cd:	0f af d9             	imul   ebx,ecx
c000e5d0:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e5d3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e5d7:	89 de                	mov    esi,ebx
c000e5d9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5db:	31 c0                	xor    eax,eax
c000e5dd:	eb 61                	jmp    c000e640 <VCache::read(unsigned long long, int, void*)+0x102>
c000e5df:	90                   	nop
c000e5e0:	83 ec 0c             	sub    esp,0xc
c000e5e3:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e5e7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e5eb:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e5ee:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e5f1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e5f3:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e5f6:	55                   	push   ebp
c000e5f7:	52                   	push   edx
c000e5f8:	50                   	push   eax
c000e5f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5fd:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000e600:	83 c4 20             	add    esp,0x20
c000e603:	85 c0                	test   eax,eax
c000e605:	75 39                	jne    c000e640 <VCache::read(unsigned long long, int, void*)+0x102>
c000e607:	eb b3                	jmp    c000e5bc <VCache::read(unsigned long long, int, void*)+0x7e>
c000e609:	8d 76 00             	lea    esi,[esi+0x0]
c000e60c:	83 ec 0c             	sub    esp,0xc
c000e60f:	57                   	push   edi
c000e610:	e8 5f fd ff ff       	call   c000e374 <VCache::invalidateReadBuffer()>
c000e615:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e618:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e61c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e61e:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e622:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e626:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e62a:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e62e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e632:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e635:	83 c4 2c             	add    esp,0x2c
c000e638:	5b                   	pop    ebx
c000e639:	5e                   	pop    esi
c000e63a:	5f                   	pop    edi
c000e63b:	5d                   	pop    ebp
c000e63c:	ff e0                	jmp    eax
c000e63e:	66 90                	xchg   ax,ax
c000e640:	83 c4 1c             	add    esp,0x1c
c000e643:	5b                   	pop    ebx
c000e644:	5e                   	pop    esi
c000e645:	5f                   	pop    edi
c000e646:	5d                   	pop    ebp
c000e647:	c3                   	ret    

c000e648 <Video::putrect(int, int, int, int, unsigned int)>:
c000e648:	55                   	push   ebp
c000e649:	57                   	push   edi
c000e64a:	56                   	push   esi
c000e64b:	53                   	push   ebx
c000e64c:	83 ec 1c             	sub    esp,0x1c
c000e64f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e653:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e657:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e65b:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e65f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e663:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e667:	01 df                	add    edi,ebx
c000e669:	39 fb                	cmp    ebx,edi
c000e66b:	7d 1f                	jge    c000e68c <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000e66d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e671:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e675:	7d 12                	jge    c000e689 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000e677:	8b 16                	mov    edx,DWORD PTR [esi]
c000e679:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e67d:	53                   	push   ebx
c000e67e:	55                   	push   ebp
c000e67f:	45                   	inc    ebp
c000e680:	56                   	push   esi
c000e681:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e684:	83 c4 10             	add    esp,0x10
c000e687:	eb e8                	jmp    c000e671 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000e689:	43                   	inc    ebx
c000e68a:	eb dd                	jmp    c000e669 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000e68c:	83 c4 1c             	add    esp,0x1c
c000e68f:	5b                   	pop    ebx
c000e690:	5e                   	pop    esi
c000e691:	5f                   	pop    edi
c000e692:	5d                   	pop    ebp
c000e693:	c3                   	ret    

c000e694 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000e694:	55                   	push   ebp
c000e695:	57                   	push   edi
c000e696:	31 ff                	xor    edi,edi
c000e698:	56                   	push   esi
c000e699:	53                   	push   ebx
c000e69a:	83 ec 1c             	sub    esp,0x1c
c000e69d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000e6a1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000e6a5:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000e6ac:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000e6b1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e6b5:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000e6b9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e6bd:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000e6c0:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e6c4:	01 f9                	add    ecx,edi
c000e6c6:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000e6ca:	7d 2f                	jge    c000e6fb <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000e6cc:	31 f6                	xor    esi,esi
c000e6ce:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e6d2:	01 f2                	add    edx,esi
c000e6d4:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000e6d8:	7d 1a                	jge    c000e6f4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000e6da:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e6dd:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000e6e0:	46                   	inc    esi
c000e6e1:	51                   	push   ecx
c000e6e2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000e6e6:	52                   	push   edx
c000e6e7:	55                   	push   ebp
c000e6e8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e6eb:	83 c4 10             	add    esp,0x10
c000e6ee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e6f2:	eb da                	jmp    c000e6ce <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000e6f4:	47                   	inc    edi
c000e6f5:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000e6f9:	eb c5                	jmp    c000e6c0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000e6fb:	83 c4 1c             	add    esp,0x1c
c000e6fe:	5b                   	pop    ebx
c000e6ff:	5e                   	pop    esi
c000e700:	5f                   	pop    edi
c000e701:	5d                   	pop    ebp
c000e702:	c3                   	ret    
c000e703:	90                   	nop

c000e704 <Video::blit(unsigned int*, int, int, int, int)>:
c000e704:	55                   	push   ebp
c000e705:	57                   	push   edi
c000e706:	56                   	push   esi
c000e707:	53                   	push   ebx
c000e708:	83 ec 1c             	sub    esp,0x1c
c000e70b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e70f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e713:	85 c0                	test   eax,eax
c000e715:	79 02                	jns    c000e719 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000e717:	31 c0                	xor    eax,eax
c000e719:	c1 e0 02             	shl    eax,0x2
c000e71c:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000e720:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e724:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e728:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000e72c:	39 d8                	cmp    eax,ebx
c000e72e:	7e 49                	jle    c000e779 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000e730:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e736:	7c 41                	jl     c000e779 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000e738:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000e73c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e740:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e744:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000e748:	39 f9                	cmp    ecx,edi
c000e74a:	7e 22                	jle    c000e76e <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000e74c:	83 c5 04             	add    ebp,0x4
c000e74f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e755:	7c 14                	jl     c000e76b <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000e757:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e759:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000e75c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e760:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e764:	56                   	push   esi
c000e765:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e768:	83 c4 10             	add    esp,0x10
c000e76b:	47                   	inc    edi
c000e76c:	eb d2                	jmp    c000e740 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000e76e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e772:	43                   	inc    ebx
c000e773:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e777:	eb ab                	jmp    c000e724 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000e779:	83 c4 1c             	add    esp,0x1c
c000e77c:	5b                   	pop    ebx
c000e77d:	5e                   	pop    esi
c000e77e:	5f                   	pop    edi
c000e77f:	5d                   	pop    ebp
c000e780:	c3                   	ret    
c000e781:	90                   	nop

c000e782 <Video::clearScreen(unsigned int)>:
c000e782:	57                   	push   edi
c000e783:	56                   	push   esi
c000e784:	53                   	push   ebx
c000e785:	31 db                	xor    ebx,ebx
c000e787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e78b:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e791:	7e 1f                	jle    c000e7b2 <Video::clearScreen(unsigned int)+0x30>
c000e793:	31 ff                	xor    edi,edi
c000e795:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e79b:	7e 12                	jle    c000e7af <Video::clearScreen(unsigned int)+0x2d>
c000e79d:	8b 06                	mov    eax,DWORD PTR [esi]
c000e79f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e7a3:	53                   	push   ebx
c000e7a4:	57                   	push   edi
c000e7a5:	47                   	inc    edi
c000e7a6:	56                   	push   esi
c000e7a7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e7aa:	83 c4 10             	add    esp,0x10
c000e7ad:	eb e6                	jmp    c000e795 <Video::clearScreen(unsigned int)+0x13>
c000e7af:	43                   	inc    ebx
c000e7b0:	eb d9                	jmp    c000e78b <Video::clearScreen(unsigned int)+0x9>
c000e7b2:	5b                   	pop    ebx
c000e7b3:	5e                   	pop    esi
c000e7b4:	5f                   	pop    edi
c000e7b5:	c3                   	ret    

c000e7b6 <Video::putpixel(int, int, unsigned int)>:
c000e7b6:	c7 44 24 04 a8 17 02 c0 	mov    DWORD PTR [esp+0x4],0xc00217a8
c000e7be:	e9 a6 2a 00 00       	jmp    c0011269 <KePanic(char const*)>
c000e7c3:	90                   	nop

c000e7c4 <Video::readPixelApprox(int, int)>:
c000e7c4:	83 ec 18             	sub    esp,0x18
c000e7c7:	68 c9 17 02 c0       	push   0xc00217c9
c000e7cc:	e8 98 2a 00 00       	call   c0011269 <KePanic(char const*)>
c000e7d1:	31 c0                	xor    eax,eax
c000e7d3:	83 c4 1c             	add    esp,0x1c
c000e7d6:	c3                   	ret    
c000e7d7:	90                   	nop

c000e7d8 <Video::Video(char const*)>:
c000e7d8:	83 ec 0c             	sub    esp,0xc
c000e7db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7df:	83 ec 08             	sub    esp,0x8
c000e7e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7e6:	50                   	push   eax
c000e7e7:	e8 e6 df ff ff       	call   c000c7d2 <Device::Device(char const*)>
c000e7ec:	83 c4 10             	add    esp,0x10
c000e7ef:	ba 44 18 02 c0       	mov    edx,0xc0021844
c000e7f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f8:	89 10                	mov    DWORD PTR [eax],edx
c000e7fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fe:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000e808:	90                   	nop
c000e809:	83 c4 0c             	add    esp,0xc
c000e80c:	c3                   	ret    
c000e80d:	90                   	nop

c000e80e <Video::~Video()>:
c000e80e:	83 ec 0c             	sub    esp,0xc
c000e811:	ba 44 18 02 c0       	mov    edx,0xc0021844
c000e816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e81a:	89 10                	mov    DWORD PTR [eax],edx
c000e81c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e820:	83 ec 0c             	sub    esp,0xc
c000e823:	50                   	push   eax
c000e824:	e8 13 dd ff ff       	call   c000c53c <Device::~Device()>
c000e829:	83 c4 10             	add    esp,0x10
c000e82c:	90                   	nop
c000e82d:	83 c4 0c             	add    esp,0xc
c000e830:	c3                   	ret    
c000e831:	90                   	nop

c000e832 <Video::~Video()>:
c000e832:	83 ec 0c             	sub    esp,0xc
c000e835:	83 ec 0c             	sub    esp,0xc
c000e838:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e83c:	e8 cd ff ff ff       	call   c000e80e <Video::~Video()>
c000e841:	83 c4 10             	add    esp,0x10
c000e844:	83 ec 08             	sub    esp,0x8
c000e847:	68 64 01 00 00       	push   0x164
c000e84c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e850:	e8 c3 bf ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e855:	83 c4 10             	add    esp,0x10
c000e858:	83 c4 0c             	add    esp,0xc
c000e85b:	c3                   	ret    

c000e85c <Video::isMonochrome()>:
c000e85c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e860:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e866:	c3                   	ret    
c000e867:	90                   	nop

c000e868 <Video::getWidth()>:
c000e868:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e86c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e872:	c3                   	ret    
c000e873:	90                   	nop

c000e874 <Video::getHeight()>:
c000e874:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e878:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e87e:	c3                   	ret    
c000e87f:	90                   	nop

c000e880 <Video::drawCursor(int, int, unsigned int*, int)>:
c000e880:	55                   	push   ebp
c000e881:	57                   	push   edi
c000e882:	56                   	push   esi
c000e883:	53                   	push   ebx
c000e884:	83 ec 2c             	sub    esp,0x2c
c000e887:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e88b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e88f:	83 f8 01             	cmp    eax,0x1
c000e892:	19 c9                	sbb    ecx,ecx
c000e894:	31 db                	xor    ebx,ebx
c000e896:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e89a:	89 cd                	mov    ebp,ecx
c000e89c:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e8a4:	f7 d5                	not    ebp
c000e8a6:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000e8ac:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e8b0:	01 d8                	add    eax,ebx
c000e8b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e8b6:	56                   	push   esi
c000e8b7:	e8 b8 ff ff ff       	call   c000e874 <Video::getHeight()>
c000e8bc:	59                   	pop    ecx
c000e8bd:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e8c1:	7e 70                	jle    c000e933 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e8c3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e8c7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000e8cb:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e8ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e8d2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e8d6:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e8dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e8e1:	89 f8                	mov    eax,edi
c000e8e3:	83 c0 20             	add    eax,0x20
c000e8e6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e8ea:	56                   	push   esi
c000e8eb:	e8 78 ff ff ff       	call   c000e868 <Video::getWidth()>
c000e8f0:	5a                   	pop    edx
c000e8f1:	39 c7                	cmp    edi,eax
c000e8f3:	7d 34                	jge    c000e929 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000e8f5:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e8fa:	74 05                	je     c000e901 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000e8fc:	8b 06                	mov    eax,DWORD PTR [esi]
c000e8fe:	55                   	push   ebp
c000e8ff:	eb 0d                	jmp    c000e90e <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000e901:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e906:	74 12                	je     c000e91a <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000e908:	8b 06                	mov    eax,DWORD PTR [esi]
c000e90a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e90e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e912:	57                   	push   edi
c000e913:	56                   	push   esi
c000e914:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e917:	83 c4 10             	add    esp,0x10
c000e91a:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e91e:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e922:	47                   	inc    edi
c000e923:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000e927:	75 c1                	jne    c000e8ea <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000e929:	43                   	inc    ebx
c000e92a:	83 fb 20             	cmp    ebx,0x20
c000e92d:	0f 85 79 ff ff ff    	jne    c000e8ac <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000e933:	83 c4 2c             	add    esp,0x2c
c000e936:	5b                   	pop    ebx
c000e937:	5e                   	pop    esi
c000e938:	5f                   	pop    edi
c000e939:	5d                   	pop    ebp
c000e93a:	c3                   	ret    
c000e93b:	90                   	nop

c000e93c <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e93c:	55                   	push   ebp
c000e93d:	57                   	push   edi
c000e93e:	56                   	push   esi
c000e93f:	53                   	push   ebx
c000e940:	83 ec 28             	sub    esp,0x28
c000e943:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e947:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e94b:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000e94f:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000e953:	c1 e6 08             	shl    esi,0x8
c000e956:	01 c6                	add    esi,eax
c000e958:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000e95c:	c1 e0 08             	shl    eax,0x8
c000e95f:	01 d0                	add    eax,edx
c000e961:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e965:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e969:	0f af c6             	imul   eax,esi
c000e96c:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e973:	50                   	push   eax
c000e974:	e8 3d 91 ff ff       	call   c0007ab6 <malloc>
c000e979:	83 c4 10             	add    esp,0x10
c000e97c:	89 c7                	mov    edi,eax
c000e97e:	85 c0                	test   eax,eax
c000e980:	75 10                	jne    c000e992 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000e982:	83 ec 0c             	sub    esp,0xc
c000e985:	68 f4 17 02 c0       	push   0xc00217f4
c000e98a:	e8 da 28 00 00       	call   c0011269 <KePanic(char const*)>
c000e98f:	83 c4 10             	add    esp,0x10
c000e992:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000e996:	ba 12 00 00 00       	mov    edx,0x12
c000e99b:	85 c0                	test   eax,eax
c000e99d:	74 11                	je     c000e9b0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000e99f:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e9a3:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e9a7:	c1 fa 03             	sar    edx,0x3
c000e9aa:	0f af d1             	imul   edx,ecx
c000e9ad:	83 c2 12             	add    edx,0x12
c000e9b0:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000e9b4:	74 04                	je     c000e9ba <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000e9b6:	85 f6                	test   esi,esi
c000e9b8:	75 12                	jne    c000e9cc <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000e9ba:	83 ec 0c             	sub    esp,0xc
c000e9bd:	68 04 18 02 c0       	push   0xc0021804
c000e9c2:	e8 7e bf ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000e9c7:	e9 b8 00 00 00       	jmp    c000ea84 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000e9cc:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e9d0:	83 f9 02             	cmp    ecx,0x2
c000e9d3:	0f 85 96 00 00 00    	jne    c000ea6f <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000e9d9:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e9de:	75 0e                	jne    c000e9ee <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e9e0:	85 c0                	test   eax,eax
c000e9e2:	75 0a                	jne    c000e9ee <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e9e4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000e9e7:	83 e8 18             	sub    eax,0x18
c000e9ea:	a8 f7                	test   al,0xf7
c000e9ec:	74 0a                	je     c000e9f8 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000e9ee:	83 ec 0c             	sub    esp,0xc
c000e9f1:	68 19 18 02 c0       	push   0xc0021819
c000e9f6:	eb 7f                	jmp    c000ea77 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000e9f8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ea00:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000ea08:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000ea0c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ea14:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000ea18:	75 0c                	jne    c000ea26 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000ea1a:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000ea1f:	c1 e0 18             	shl    eax,0x18
c000ea22:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ea26:	45                   	inc    ebp
c000ea27:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000ea2c:	c1 e1 10             	shl    ecx,0x10
c000ea2f:	89 c8                	mov    eax,ecx
c000ea31:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000ea36:	c1 e1 08             	shl    ecx,0x8
c000ea39:	09 c1                	or     ecx,eax
c000ea3b:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000ea3f:	09 c1                	or     ecx,eax
c000ea41:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000ea45:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000ea49:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000ea4d:	c1 f8 03             	sar    eax,0x3
c000ea50:	01 c2                	add    edx,eax
c000ea52:	89 e8                	mov    eax,ebp
c000ea54:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000ea58:	39 c6                	cmp    esi,eax
c000ea5a:	7f b0                	jg     c000ea0c <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000ea5c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ea60:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ea64:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000ea67:	7e 22                	jle    c000ea8b <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000ea69:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000ea6d:	eb 99                	jmp    c000ea08 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000ea6f:	50                   	push   eax
c000ea70:	50                   	push   eax
c000ea71:	51                   	push   ecx
c000ea72:	68 27 18 02 c0       	push   0xc0021827
c000ea77:	e8 c9 be ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ea7c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ea7f:	e8 42 90 ff ff       	call   c0007ac6 <free>
c000ea84:	83 c4 10             	add    esp,0x10
c000ea87:	31 ff                	xor    edi,edi
c000ea89:	eb 0f                	jmp    c000ea9a <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000ea8b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ea8f:	89 30                	mov    DWORD PTR [eax],esi
c000ea91:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ea95:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ea98:	89 30                	mov    DWORD PTR [eax],esi
c000ea9a:	83 c4 1c             	add    esp,0x1c
c000ea9d:	89 f8                	mov    eax,edi
c000ea9f:	5b                   	pop    ebx
c000eaa0:	5e                   	pop    esi
c000eaa1:	5f                   	pop    edi
c000eaa2:	5d                   	pop    ebp
c000eaa3:	c3                   	ret    

c000eaa4 <Video::putTGA(int, int, unsigned char*, int)>:
c000eaa4:	55                   	push   ebp
c000eaa5:	57                   	push   edi
c000eaa6:	56                   	push   esi
c000eaa7:	53                   	push   ebx
c000eaa8:	83 ec 28             	sub    esp,0x28
c000eaab:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000eaaf:	8d 44 24 18          	lea    eax,[esp+0x18]
c000eab3:	50                   	push   eax
c000eab4:	8d 44 24 18          	lea    eax,[esp+0x18]
c000eab8:	50                   	push   eax
c000eab9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000eabd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000eac1:	56                   	push   esi
c000eac2:	e8 75 fe ff ff       	call   c000e93c <Video::tgaParse(unsigned char*, int, int*, int*)>
c000eac7:	83 c4 20             	add    esp,0x20
c000eaca:	85 c0                	test   eax,eax
c000eacc:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ead0:	74 35                	je     c000eb07 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ead2:	89 c7                	mov    edi,eax
c000ead4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ead8:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000eadc:	39 d8                	cmp    eax,ebx
c000eade:	7e 27                	jle    c000eb07 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000eae0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000eae4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eae8:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000eaec:	39 e8                	cmp    eax,ebp
c000eaee:	7e 14                	jle    c000eb04 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000eaf0:	8b 06                	mov    eax,DWORD PTR [esi]
c000eaf2:	83 c7 04             	add    edi,0x4
c000eaf5:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000eaf8:	53                   	push   ebx
c000eaf9:	55                   	push   ebp
c000eafa:	45                   	inc    ebp
c000eafb:	56                   	push   esi
c000eafc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eaff:	83 c4 10             	add    esp,0x10
c000eb02:	eb e0                	jmp    c000eae4 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000eb04:	43                   	inc    ebx
c000eb05:	eb cd                	jmp    c000ead4 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000eb07:	83 c4 1c             	add    esp,0x1c
c000eb0a:	5b                   	pop    ebx
c000eb0b:	5e                   	pop    esi
c000eb0c:	5f                   	pop    edi
c000eb0d:	5d                   	pop    ebp
c000eb0e:	c3                   	ret    
c000eb0f:	90                   	nop

c000eb10 <ACPI::close(int, int, void*)>:
c000eb10:	83 ec 1c             	sub    esp,0x1c
c000eb13:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000eb1b:	74 0b                	je     c000eb28 <ACPI::close(int, int, void*)+0x18>
c000eb1d:	b8 00 00 00 00       	mov    eax,0x0
c000eb22:	e9 99 00 00 00       	jmp    c000ebc0 <ACPI::close(int, int, void*)+0xb0>
c000eb27:	90                   	nop
c000eb28:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000eb2d:	75 29                	jne    c000eb58 <ACPI::close(int, int, void*)+0x48>
c000eb2f:	a1 08 89 02 c0       	mov    eax,ds:0xc0028908
c000eb34:	85 c0                	test   eax,eax
c000eb36:	74 08                	je     c000eb40 <ACPI::close(int, int, void*)+0x30>
c000eb38:	a1 08 89 02 c0       	mov    eax,ds:0xc0028908
c000eb3d:	ff d0                	call   eax
c000eb3f:	90                   	nop
c000eb40:	83 ec 0c             	sub    esp,0xc
c000eb43:	68 88 18 02 c0       	push   0xc0021888
c000eb48:	e8 1c 27 00 00       	call   c0011269 <KePanic(char const*)>
c000eb4d:	83 c4 10             	add    esp,0x10
c000eb50:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eb55:	eb 69                	jmp    c000ebc0 <ACPI::close(int, int, void*)+0xb0>
c000eb57:	90                   	nop
c000eb58:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000eb5d:	75 59                	jne    c000ebb8 <ACPI::close(int, int, void*)+0xa8>
c000eb5f:	a1 04 89 02 c0       	mov    eax,ds:0xc0028904
c000eb64:	85 c0                	test   eax,eax
c000eb66:	74 08                	je     c000eb70 <ACPI::close(int, int, void*)+0x60>
c000eb68:	a1 04 89 02 c0       	mov    eax,ds:0xc0028904
c000eb6d:	ff d0                	call   eax
c000eb6f:	90                   	nop
c000eb70:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000eb75:	8d 76 00             	lea    esi,[esi+0x0]
c000eb78:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000eb7d:	83 e0 02             	and    eax,0x2
c000eb80:	74 1e                	je     c000eba0 <ACPI::close(int, int, void*)+0x90>
c000eb82:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000eb89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb8d:	89 c2                	mov    edx,eax
c000eb8f:	ec                   	in     al,dx
c000eb90:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000eb94:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000eb98:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000eb9c:	eb da                	jmp    c000eb78 <ACPI::close(int, int, void*)+0x68>
c000eb9e:	66 90                	xchg   ax,ax
c000eba0:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000eba7:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000ebac:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000ebb0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ebb4:	ee                   	out    dx,al
c000ebb5:	8d 76 00             	lea    esi,[esi+0x0]
c000ebb8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ebbd:	8d 76 00             	lea    esi,[esi+0x0]
c000ebc0:	83 c4 1c             	add    esp,0x1c
c000ebc3:	c3                   	ret    

c000ebc4 <findRSDP()>:
c000ebc4:	83 ec 1c             	sub    esp,0x1c
c000ebc7:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ebcc:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ebd2:	83 e0 04             	and    eax,0x4
c000ebd5:	0f b6 c0             	movzx  eax,al
c000ebd8:	85 c0                	test   eax,eax
c000ebda:	75 08                	jne    c000ebe4 <findRSDP()+0x20>
c000ebdc:	b8 00 00 00 00       	mov    eax,0x0
c000ebe1:	eb 75                	jmp    c000ec58 <findRSDP()+0x94>
c000ebe3:	90                   	nop
c000ebe4:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c000ebe9:	3d ff 07 00 00       	cmp    eax,0x7ff
c000ebee:	7f 1c                	jg     c000ec0c <findRSDP()+0x48>
c000ebf0:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ebf5:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000ebfb:	83 e2 fb             	and    edx,0xfffffffb
c000ebfe:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000ec04:	b8 00 00 00 00       	mov    eax,0x0
c000ec09:	eb 4d                	jmp    c000ec58 <findRSDP()+0x94>
c000ec0b:	90                   	nop
c000ec0c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000ec14:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000ec1c:	77 32                	ja     c000ec50 <findRSDP()+0x8c>
c000ec1e:	83 ec 04             	sub    esp,0x4
c000ec21:	6a 08                	push   0x8
c000ec23:	68 23 19 02 c0       	push   0xc0021923
c000ec28:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ec2c:	e8 4f 17 ff ff       	call   c0000380 <memcmp>
c000ec31:	83 c4 10             	add    esp,0x10
c000ec34:	85 c0                	test   eax,eax
c000ec36:	0f 94 c0             	sete   al
c000ec39:	0f b6 c0             	movzx  eax,al
c000ec3c:	85 c0                	test   eax,eax
c000ec3e:	74 08                	je     c000ec48 <findRSDP()+0x84>
c000ec40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec44:	eb 12                	jmp    c000ec58 <findRSDP()+0x94>
c000ec46:	66 90                	xchg   ax,ax
c000ec48:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000ec4d:	eb c5                	jmp    c000ec14 <findRSDP()+0x50>
c000ec4f:	90                   	nop
c000ec50:	b8 00 00 00 00       	mov    eax,0x0
c000ec55:	8d 76 00             	lea    esi,[esi+0x0]
c000ec58:	83 c4 1c             	add    esp,0x1c
c000ec5b:	c3                   	ret    

c000ec5c <loadACPITables(unsigned char*)>:
c000ec5c:	57                   	push   edi
c000ec5d:	56                   	push   esi
c000ec5e:	53                   	push   ebx
c000ec5f:	83 ec 60             	sub    esp,0x60
c000ec62:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ec67:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ec6d:	83 e0 04             	and    eax,0x4
c000ec70:	0f b6 c0             	movzx  eax,al
c000ec73:	85 c0                	test   eax,eax
c000ec75:	0f 84 41 02 00 00    	je     c000eebc <loadACPITables(unsigned char*)+0x260>
c000ec7b:	a0 20 8b 02 c0       	mov    al,ds:0xc0028b20
c000ec80:	0f b6 c0             	movzx  eax,al
c000ec83:	85 c0                	test   eax,eax
c000ec85:	74 79                	je     c000ed00 <loadACPITables(unsigned char*)+0xa4>
c000ec87:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ec8b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ec8f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ec93:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ec96:	83 e8 24             	sub    eax,0x24
c000ec99:	c1 e8 03             	shr    eax,0x3
c000ec9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000eca0:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000eca8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ecac:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000ecb0:	0f 8d ba 00 00 00    	jge    c000ed70 <loadACPITables(unsigned char*)+0x114>
c000ecb6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ecba:	83 c0 24             	add    eax,0x24
c000ecbd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ecc1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ecc5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ecc9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000eccd:	c1 e0 03             	shl    eax,0x3
c000ecd0:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000ecd4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ecd8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ecdb:	8b 00                	mov    eax,DWORD PTR [eax]
c000ecdd:	89 c1                	mov    ecx,eax
c000ecdf:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000ece4:	8d 50 01             	lea    edx,[eax+0x1]
c000ece7:	89 15 0c 89 02 c0    	mov    DWORD PTR ds:0xc002890c,edx
c000eced:	89 ca                	mov    edx,ecx
c000ecef:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000ecf6:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000ecfb:	eb ab                	jmp    c000eca8 <loadACPITables(unsigned char*)+0x4c>
c000ecfd:	8d 76 00             	lea    esi,[esi+0x0]
c000ed00:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ed04:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ed08:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ed0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ed0f:	83 e8 24             	sub    eax,0x24
c000ed12:	c1 e8 02             	shr    eax,0x2
c000ed15:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ed19:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000ed21:	8d 76 00             	lea    esi,[esi+0x0]
c000ed24:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ed28:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000ed2c:	7d 42                	jge    c000ed70 <loadACPITables(unsigned char*)+0x114>
c000ed2e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ed32:	83 c0 24             	add    eax,0x24
c000ed35:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ed39:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ed3d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ed41:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ed45:	c1 e0 02             	shl    eax,0x2
c000ed48:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000ed4c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed50:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ed52:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000ed57:	8d 50 01             	lea    edx,[eax+0x1]
c000ed5a:	89 15 0c 89 02 c0    	mov    DWORD PTR ds:0xc002890c,edx
c000ed60:	89 ca                	mov    edx,ecx
c000ed62:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000ed69:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000ed6e:	eb b4                	jmp    c000ed24 <loadACPITables(unsigned char*)+0xc8>
c000ed70:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000ed78:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000ed7d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000ed81:	0f 8d 39 01 00 00    	jge    c000eec0 <loadACPITables(unsigned char*)+0x264>
c000ed87:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ed8b:	8b 04 c5 24 89 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd76dc]
c000ed92:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ed96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed9a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ed9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eda2:	25 ff 0f 00 00       	and    eax,0xfff
c000eda7:	89 c6                	mov    esi,eax
c000eda9:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000edaf:	83 ec 0c             	sub    esp,0xc
c000edb2:	6a 01                	push   0x1
c000edb4:	e8 54 a8 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000edb9:	83 c4 10             	add    esp,0x10
c000edbc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000edc0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000edc6:	83 ec 0c             	sub    esp,0xc
c000edc9:	6a 01                	push   0x1
c000edcb:	6a 01                	push   0x1
c000edcd:	50                   	push   eax
c000edce:	52                   	push   edx
c000edcf:	53                   	push   ebx
c000edd0:	e8 45 b1 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000edd5:	83 c4 20             	add    esp,0x20
c000edd8:	09 f0                	or     eax,esi
c000edda:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000edde:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ede2:	c1 e0 03             	shl    eax,0x3
c000ede5:	05 20 89 02 c0       	add    eax,0xc0028920
c000edea:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000edee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edf2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000edf6:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000edfe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ee02:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ee06:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee0a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ee0e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee12:	89 c6                	mov    esi,eax
c000ee14:	89 d7                	mov    edi,edx
c000ee16:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ee18:	89 c8                	mov    eax,ecx
c000ee1a:	89 fa                	mov    edx,edi
c000ee1c:	89 f3                	mov    ebx,esi
c000ee1e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ee22:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ee26:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ee2a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ee31:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ee35:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ee39:	05 00 10 00 00       	add    eax,0x1000
c000ee3e:	c1 e8 0c             	shr    eax,0xc
c000ee41:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ee45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee49:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ee4d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee51:	25 ff 0f 00 00       	and    eax,0xfff
c000ee56:	89 c6                	mov    esi,eax
c000ee58:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ee5e:	83 ec 0c             	sub    esp,0xc
c000ee61:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee65:	e8 a3 a7 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000ee6a:	83 c4 10             	add    esp,0x10
c000ee6d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ee71:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ee77:	83 ec 0c             	sub    esp,0xc
c000ee7a:	6a 01                	push   0x1
c000ee7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ee80:	50                   	push   eax
c000ee81:	52                   	push   edx
c000ee82:	53                   	push   ebx
c000ee83:	e8 92 b0 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ee88:	83 c4 20             	add    esp,0x20
c000ee8b:	09 f0                	or     eax,esi
c000ee8d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ee91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee95:	83 ec 0c             	sub    esp,0xc
c000ee98:	50                   	push   eax
c000ee99:	e8 8d aa ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000ee9e:	83 c4 10             	add    esp,0x10
c000eea1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000eea5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000eea9:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000eeb0:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000eeb5:	e9 be fe ff ff       	jmp    c000ed78 <loadACPITables(unsigned char*)+0x11c>
c000eeba:	66 90                	xchg   ax,ax
c000eebc:	90                   	nop
c000eebd:	8d 76 00             	lea    esi,[esi+0x0]
c000eec0:	83 c4 60             	add    esp,0x60
c000eec3:	5b                   	pop    ebx
c000eec4:	5e                   	pop    esi
c000eec5:	5f                   	pop    edi
c000eec6:	c3                   	ret    
c000eec7:	90                   	nop

c000eec8 <findRSDT(unsigned char*)>:
c000eec8:	57                   	push   edi
c000eec9:	56                   	push   esi
c000eeca:	53                   	push   ebx
c000eecb:	83 ec 50             	sub    esp,0x50
c000eece:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000eed3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000eed9:	83 e0 04             	and    eax,0x4
c000eedc:	0f b6 c0             	movzx  eax,al
c000eedf:	85 c0                	test   eax,eax
c000eee1:	75 0d                	jne    c000eef0 <findRSDT(unsigned char*)+0x28>
c000eee3:	b8 00 00 00 00       	mov    eax,0x0
c000eee8:	e9 2b 01 00 00       	jmp    c000f018 <findRSDT(unsigned char*)+0x150>
c000eeed:	8d 76 00             	lea    esi,[esi+0x0]
c000eef0:	89 e0                	mov    eax,esp
c000eef2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000eef6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000eefa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000eefe:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000ef06:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ef0a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ef0e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ef12:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ef16:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000ef1a:	89 c6                	mov    esi,eax
c000ef1c:	89 d7                	mov    edi,edx
c000ef1e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ef20:	89 c8                	mov    eax,ecx
c000ef22:	89 fa                	mov    edx,edi
c000ef24:	89 f3                	mov    ebx,esi
c000ef26:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000ef2a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000ef2e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ef32:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ef36:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000ef3a:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000ef42:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef46:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef4a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ef4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef52:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ef56:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ef5a:	25 ff 0f 00 00       	and    eax,0xfff
c000ef5f:	89 c6                	mov    esi,eax
c000ef61:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ef67:	83 ec 0c             	sub    esp,0xc
c000ef6a:	6a 02                	push   0x2
c000ef6c:	e8 9c a6 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000ef71:	83 c4 10             	add    esp,0x10
c000ef74:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000ef78:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ef7e:	83 ec 0c             	sub    esp,0xc
c000ef81:	6a 01                	push   0x1
c000ef83:	6a 02                	push   0x2
c000ef85:	50                   	push   eax
c000ef86:	52                   	push   edx
c000ef87:	53                   	push   ebx
c000ef88:	e8 8d af ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef8d:	83 c4 20             	add    esp,0x20
c000ef90:	09 f0                	or     eax,esi
c000ef92:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ef96:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ef9a:	25 ff 0f 00 00       	and    eax,0xfff
c000ef9f:	89 c6                	mov    esi,eax
c000efa1:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000efa7:	83 ec 0c             	sub    esp,0xc
c000efaa:	6a 02                	push   0x2
c000efac:	e8 5c a6 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000efb1:	83 c4 10             	add    esp,0x10
c000efb4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000efb8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000efbe:	83 ec 0c             	sub    esp,0xc
c000efc1:	6a 01                	push   0x1
c000efc3:	6a 02                	push   0x2
c000efc5:	50                   	push   eax
c000efc6:	52                   	push   edx
c000efc7:	53                   	push   ebx
c000efc8:	e8 4d af ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000efcd:	83 c4 20             	add    esp,0x20
c000efd0:	09 f0                	or     eax,esi
c000efd2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000efd6:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000efdb:	85 c0                	test   eax,eax
c000efdd:	75 11                	jne    c000eff0 <findRSDT(unsigned char*)+0x128>
c000efdf:	c6 05 20 8b 02 c0 00 	mov    BYTE PTR ds:0xc0028b20,0x0
c000efe6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000efea:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000efee:	eb 24                	jmp    c000f014 <findRSDT(unsigned char*)+0x14c>
c000eff0:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000eff5:	83 f8 02             	cmp    eax,0x2
c000eff8:	75 12                	jne    c000f00c <findRSDT(unsigned char*)+0x144>
c000effa:	c6 05 20 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b20,0x1
c000f001:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f005:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f009:	eb 09                	jmp    c000f014 <findRSDT(unsigned char*)+0x14c>
c000f00b:	90                   	nop
c000f00c:	b8 00 00 00 00       	mov    eax,0x0
c000f011:	eb 05                	jmp    c000f018 <findRSDT(unsigned char*)+0x150>
c000f013:	90                   	nop
c000f014:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f018:	83 c4 50             	add    esp,0x50
c000f01b:	5b                   	pop    ebx
c000f01c:	5e                   	pop    esi
c000f01d:	5f                   	pop    edi
c000f01e:	c3                   	ret    
c000f01f:	90                   	nop

c000f020 <findDataTable(unsigned char*, char*)>:
c000f020:	83 ec 1c             	sub    esp,0x1c
c000f023:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f028:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f02e:	83 e0 04             	and    eax,0x4
c000f031:	0f b6 c0             	movzx  eax,al
c000f034:	85 c0                	test   eax,eax
c000f036:	75 08                	jne    c000f040 <findDataTable(unsigned char*, char*)+0x20>
c000f038:	b8 00 00 00 00       	mov    eax,0x0
c000f03d:	eb 5d                	jmp    c000f09c <findDataTable(unsigned char*, char*)+0x7c>
c000f03f:	90                   	nop
c000f040:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f048:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000f04d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f051:	7d 41                	jge    c000f094 <findDataTable(unsigned char*, char*)+0x74>
c000f053:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f057:	c1 e0 03             	shl    eax,0x3
c000f05a:	05 20 89 02 c0       	add    eax,0xc0028920
c000f05f:	83 ec 04             	sub    esp,0x4
c000f062:	6a 04                	push   0x4
c000f064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f068:	50                   	push   eax
c000f069:	e8 12 13 ff ff       	call   c0000380 <memcmp>
c000f06e:	83 c4 10             	add    esp,0x10
c000f071:	85 c0                	test   eax,eax
c000f073:	0f 94 c0             	sete   al
c000f076:	0f b6 c0             	movzx  eax,al
c000f079:	85 c0                	test   eax,eax
c000f07b:	74 0f                	je     c000f08c <findDataTable(unsigned char*, char*)+0x6c>
c000f07d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f081:	8b 04 c5 24 89 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd76dc]
c000f088:	eb 12                	jmp    c000f09c <findDataTable(unsigned char*, char*)+0x7c>
c000f08a:	66 90                	xchg   ax,ax
c000f08c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f091:	eb b5                	jmp    c000f048 <findDataTable(unsigned char*, char*)+0x28>
c000f093:	90                   	nop
c000f094:	b8 00 00 00 00       	mov    eax,0x0
c000f099:	8d 76 00             	lea    esi,[esi+0x0]
c000f09c:	83 c4 1c             	add    esp,0x1c
c000f09f:	c3                   	ret    

c000f0a0 <scanMADT()>:
c000f0a0:	53                   	push   ebx
c000f0a1:	83 ec 38             	sub    esp,0x38
c000f0a4:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c000f0a9:	25 00 04 00 00       	and    eax,0x400
c000f0ae:	74 14                	je     c000f0c4 <scanMADT()+0x24>
c000f0b0:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f0b5:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f0bb:	83 e2 fb             	and    edx,0xfffffffb
c000f0be:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f0c4:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f0c9:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f0cf:	83 e0 04             	and    eax,0x4
c000f0d2:	0f b6 c0             	movzx  eax,al
c000f0d5:	85 c0                	test   eax,eax
c000f0d7:	0f 84 6b 04 00 00    	je     c000f548 <scanMADT()+0x4a8>
c000f0dd:	e8 e2 fa ff ff       	call   c000ebc4 <findRSDP()>
c000f0e2:	a3 2c 8b 02 c0       	mov    ds:0xc0028b2c,eax
c000f0e7:	a1 2c 8b 02 c0       	mov    eax,ds:0xc0028b2c
c000f0ec:	85 c0                	test   eax,eax
c000f0ee:	75 1c                	jne    c000f10c <scanMADT()+0x6c>
c000f0f0:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f0f5:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f0fb:	83 e2 fb             	and    edx,0xfffffffb
c000f0fe:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f104:	e9 47 04 00 00       	jmp    c000f550 <scanMADT()+0x4b0>
c000f109:	8d 76 00             	lea    esi,[esi+0x0]
c000f10c:	a1 2c 8b 02 c0       	mov    eax,ds:0xc0028b2c
c000f111:	83 ec 0c             	sub    esp,0xc
c000f114:	50                   	push   eax
c000f115:	e8 ae fd ff ff       	call   c000eec8 <findRSDT(unsigned char*)>
c000f11a:	83 c4 10             	add    esp,0x10
c000f11d:	a3 28 8b 02 c0       	mov    ds:0xc0028b28,eax
c000f122:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f127:	85 c0                	test   eax,eax
c000f129:	75 19                	jne    c000f144 <scanMADT()+0xa4>
c000f12b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f130:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f136:	83 e2 fb             	and    edx,0xfffffffb
c000f139:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f13f:	e9 0c 04 00 00       	jmp    c000f550 <scanMADT()+0x4b0>
c000f144:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f149:	83 ec 0c             	sub    esp,0xc
c000f14c:	50                   	push   eax
c000f14d:	e8 0a fb ff ff       	call   c000ec5c <loadACPITables(unsigned char*)>
c000f152:	83 c4 10             	add    esp,0x10
c000f155:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f15a:	83 ec 08             	sub    esp,0x8
c000f15d:	68 2c 19 02 c0       	push   0xc002192c
c000f162:	50                   	push   eax
c000f163:	e8 b8 fe ff ff       	call   c000f020 <findDataTable(unsigned char*, char*)>
c000f168:	83 c4 10             	add    esp,0x10
c000f16b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f16f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f174:	75 1a                	jne    c000f190 <scanMADT()+0xf0>
c000f176:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f17b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f181:	83 e2 fe             	and    edx,0xfffffffe
c000f184:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f18a:	e9 c1 03 00 00       	jmp    c000f550 <scanMADT()+0x4b0>
c000f18f:	90                   	nop
c000f190:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f198:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f19c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f19f:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f1a3:	0f 87 a7 03 00 00    	ja     c000f550 <scanMADT()+0x4b0>
c000f1a9:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f1b1:	0f 87 99 03 00 00    	ja     c000f550 <scanMADT()+0x4b0>
c000f1b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f1bb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f1bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f1c3:	8d 50 01             	lea    edx,[eax+0x1]
c000f1c6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f1ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f1ce:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f1d2:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f1d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f1da:	8d 50 01             	lea    edx,[eax+0x1]
c000f1dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f1e1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f1e5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f1e9:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f1ed:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f1f2:	83 f8 02             	cmp    eax,0x2
c000f1f5:	0f 86 51 03 00 00    	jbe    c000f54c <scanMADT()+0x4ac>
c000f1fb:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f200:	85 c0                	test   eax,eax
c000f202:	75 58                	jne    c000f25c <scanMADT()+0x1bc>
c000f204:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f208:	8d 50 01             	lea    edx,[eax+0x1]
c000f20b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f20f:	8a 15 20 8d 02 c0    	mov    dl,BYTE PTR ds:0xc0028d20
c000f215:	0f b6 d2             	movzx  edx,dl
c000f218:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f21c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f220:	88 82 60 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd72a0],al
c000f226:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f22a:	8d 50 01             	lea    edx,[eax+0x1]
c000f22d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f231:	8a 15 20 8d 02 c0    	mov    dl,BYTE PTR ds:0xc0028d20
c000f237:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f23a:	88 0d 20 8d 02 c0    	mov    BYTE PTR ds:0xc0028d20,cl
c000f240:	0f b6 d2             	movzx  edx,dl
c000f243:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f247:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f24b:	88 82 40 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd72c0],al
c000f251:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f256:	e9 d9 02 00 00       	jmp    c000f534 <scanMADT()+0x494>
c000f25b:	90                   	nop
c000f25c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f261:	83 f8 01             	cmp    eax,0x1
c000f264:	0f 85 1a 01 00 00    	jne    c000f384 <scanMADT()+0x2e4>
c000f26a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f26e:	8d 50 01             	lea    edx,[eax+0x1]
c000f271:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f275:	8a 15 e0 8b 02 c0    	mov    dl,BYTE PTR ds:0xc0028be0
c000f27b:	0f b6 d2             	movzx  edx,dl
c000f27e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f282:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f286:	88 82 00 8c 02 c0    	mov    BYTE PTR [edx-0x3ffd7400],al
c000f28c:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f291:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f295:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f299:	01 d0                	add    eax,edx
c000f29b:	83 c0 2c             	add    eax,0x2c
c000f29e:	8a 00                	mov    al,BYTE PTR [eax]
c000f2a0:	0f b6 d0             	movzx  edx,al
c000f2a3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2a7:	8d 48 01             	lea    ecx,[eax+0x1]
c000f2aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2ae:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f2b2:	0f b6 c0             	movzx  eax,al
c000f2b5:	c1 e0 08             	shl    eax,0x8
c000f2b8:	89 d1                	mov    ecx,edx
c000f2ba:	09 c1                	or     ecx,eax
c000f2bc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2c0:	8d 50 02             	lea    edx,[eax+0x2]
c000f2c3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2c7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f2cb:	0f b6 c0             	movzx  eax,al
c000f2ce:	c1 e0 10             	shl    eax,0x10
c000f2d1:	09 c1                	or     ecx,eax
c000f2d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2d7:	8d 50 03             	lea    edx,[eax+0x3]
c000f2da:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2de:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f2e2:	0f b6 c0             	movzx  eax,al
c000f2e5:	c1 e0 18             	shl    eax,0x18
c000f2e8:	09 c1                	or     ecx,eax
c000f2ea:	89 ca                	mov    edx,ecx
c000f2ec:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f2f1:	0f b6 c0             	movzx  eax,al
c000f2f4:	89 14 85 20 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd73e0],edx
c000f2fb:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f300:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f304:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f308:	01 d0                	add    eax,edx
c000f30a:	83 c0 2c             	add    eax,0x2c
c000f30d:	8a 00                	mov    al,BYTE PTR [eax]
c000f30f:	0f b6 d0             	movzx  edx,al
c000f312:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f316:	8d 48 01             	lea    ecx,[eax+0x1]
c000f319:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f31d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f321:	0f b6 c0             	movzx  eax,al
c000f324:	c1 e0 08             	shl    eax,0x8
c000f327:	89 d1                	mov    ecx,edx
c000f329:	09 c1                	or     ecx,eax
c000f32b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f32f:	8d 50 02             	lea    edx,[eax+0x2]
c000f332:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f336:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f33a:	0f b6 c0             	movzx  eax,al
c000f33d:	c1 e0 10             	shl    eax,0x10
c000f340:	09 c1                	or     ecx,eax
c000f342:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f346:	8d 50 03             	lea    edx,[eax+0x3]
c000f349:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f34d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f351:	0f b6 c0             	movzx  eax,al
c000f354:	c1 e0 18             	shl    eax,0x18
c000f357:	09 c1                	or     ecx,eax
c000f359:	89 ca                	mov    edx,ecx
c000f35b:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f360:	0f b6 c0             	movzx  eax,al
c000f363:	89 14 85 a0 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7360],edx
c000f36a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f36f:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f374:	83 c0 01             	add    eax,0x1
c000f377:	a2 e0 8b 02 c0       	mov    ds:0xc0028be0,al
c000f37c:	e9 b3 01 00 00       	jmp    c000f534 <scanMADT()+0x494>
c000f381:	8d 76 00             	lea    esi,[esi+0x0]
c000f384:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f389:	83 f8 02             	cmp    eax,0x2
c000f38c:	0f 85 ea 00 00 00    	jne    c000f47c <scanMADT()+0x3dc>
c000f392:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f396:	8d 50 01             	lea    edx,[eax+0x1]
c000f399:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f39d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f3a1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f3a5:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f3a9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3ad:	8d 50 01             	lea    edx,[eax+0x1]
c000f3b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f3b4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f3b8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f3bc:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f3c0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f3c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3c8:	01 d0                	add    eax,edx
c000f3ca:	83 c0 2c             	add    eax,0x2c
c000f3cd:	8a 00                	mov    al,BYTE PTR [eax]
c000f3cf:	0f b6 d0             	movzx  edx,al
c000f3d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3d6:	8d 48 01             	lea    ecx,[eax+0x1]
c000f3d9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3dd:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f3e1:	0f b6 c0             	movzx  eax,al
c000f3e4:	c1 e0 08             	shl    eax,0x8
c000f3e7:	89 d1                	mov    ecx,edx
c000f3e9:	09 c1                	or     ecx,eax
c000f3eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3ef:	8d 50 02             	lea    edx,[eax+0x2]
c000f3f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3f6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f3fa:	0f b6 c0             	movzx  eax,al
c000f3fd:	c1 e0 10             	shl    eax,0x10
c000f400:	09 c1                	or     ecx,eax
c000f402:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f406:	8d 50 03             	lea    edx,[eax+0x3]
c000f409:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f40d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f411:	0f b6 c0             	movzx  eax,al
c000f414:	c1 e0 18             	shl    eax,0x18
c000f417:	09 c8                	or     eax,ecx
c000f419:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f41d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f422:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f426:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f42a:	01 d0                	add    eax,edx
c000f42c:	83 c0 2c             	add    eax,0x2c
c000f42f:	8a 00                	mov    al,BYTE PTR [eax]
c000f431:	0f b6 c0             	movzx  eax,al
c000f434:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f438:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f43b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f43f:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000f443:	0f b6 d2             	movzx  edx,dl
c000f446:	c1 e2 08             	shl    edx,0x8
c000f449:	09 d0                	or     eax,edx
c000f44b:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f450:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f455:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f45a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f45e:	88 90 28 30 02 c0    	mov    BYTE PTR [eax-0x3ffdcfd8],dl
c000f464:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000f469:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000f46e:	66 89 84 12 c0 8b 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd7440],ax
c000f476:	e9 b9 00 00 00       	jmp    c000f534 <scanMADT()+0x494>
c000f47b:	90                   	nop
c000f47c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f481:	83 f8 04             	cmp    eax,0x4
c000f484:	0f 85 9a 00 00 00    	jne    c000f524 <scanMADT()+0x484>
c000f48a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f48e:	8d 50 01             	lea    edx,[eax+0x1]
c000f491:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f495:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f499:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f49d:	0f b6 c0             	movzx  eax,al
c000f4a0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f4a4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4a8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4ac:	01 d0                	add    eax,edx
c000f4ae:	83 c0 2c             	add    eax,0x2c
c000f4b1:	8a 00                	mov    al,BYTE PTR [eax]
c000f4b3:	0f b6 d0             	movzx  edx,al
c000f4b6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4ba:	8d 48 01             	lea    ecx,[eax+0x1]
c000f4bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f4c1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f4c5:	0f b6 c0             	movzx  eax,al
c000f4c8:	c1 e0 08             	shl    eax,0x8
c000f4cb:	09 d0                	or     eax,edx
c000f4cd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f4d1:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f4d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4da:	8d 50 01             	lea    edx,[eax+0x1]
c000f4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f4e1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4e5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f4e9:	0f b6 c0             	movzx  eax,al
c000f4ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f4f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4f4:	c1 e0 08             	shl    eax,0x8
c000f4f7:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f4fb:	89 c1                	mov    ecx,eax
c000f4fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f501:	c1 e0 18             	shl    eax,0x18
c000f504:	89 c3                	mov    ebx,eax
c000f506:	a1 30 8b 02 c0       	mov    eax,ds:0xc0028b30
c000f50b:	8d 50 01             	lea    edx,[eax+0x1]
c000f50e:	89 15 30 8b 02 c0    	mov    DWORD PTR ds:0xc0028b30,edx
c000f514:	09 d9                	or     ecx,ebx
c000f516:	89 ca                	mov    edx,ecx
c000f518:	89 14 85 40 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd74c0],edx
c000f51f:	eb 13                	jmp    c000f534 <scanMADT()+0x494>
c000f521:	8d 76 00             	lea    esi,[esi+0x0]
c000f524:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f529:	83 f8 05             	cmp    eax,0x5
c000f52c:	75 06                	jne    c000f534 <scanMADT()+0x494>
c000f52e:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f533:	90                   	nop
c000f534:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f539:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f53d:	01 d0                	add    eax,edx
c000f53f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f543:	e9 50 fc ff ff       	jmp    c000f198 <scanMADT()+0xf8>
c000f548:	90                   	nop
c000f549:	eb 05                	jmp    c000f550 <scanMADT()+0x4b0>
c000f54b:	90                   	nop
c000f54c:	90                   	nop
c000f54d:	8d 76 00             	lea    esi,[esi+0x0]
c000f550:	83 c4 38             	add    esp,0x38
c000f553:	5b                   	pop    ebx
c000f554:	c3                   	ret    
c000f555:	90                   	nop
c000f556:	66 90                	xchg   ax,ax

c000f558 <ACPI::ACPI()>:
c000f558:	83 ec 0c             	sub    esp,0xc
c000f55b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f55f:	83 ec 08             	sub    esp,0x8
c000f562:	68 31 19 02 c0       	push   0xc0021931
c000f567:	50                   	push   eax
c000f568:	e8 65 d2 ff ff       	call   c000c7d2 <Device::Device(char const*)>
c000f56d:	83 c4 10             	add    esp,0x10
c000f570:	ba 84 1a 02 c0       	mov    edx,0xc0021a84
c000f575:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f579:	89 10                	mov    DWORD PTR [eax],edx
c000f57b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f57f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f58a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f594:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f598:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f5a2:	e8 f9 fa ff ff       	call   c000f0a0 <scanMADT()>
c000f5a7:	90                   	nop
c000f5a8:	83 c4 0c             	add    esp,0xc
c000f5ab:	c3                   	ret    

c000f5ac <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f5ac:	83 ec 2c             	sub    esp,0x2c
c000f5af:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000f5b3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f5b7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f5bb:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000f5bf:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f5c4:	88 d0                	mov    al,dl
c000f5c6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f5ca:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f5cf:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f5d7:	90                   	nop
c000f5d8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f5dc:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f5e2:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f5e6:	0f 8d b0 00 00 00    	jge    c000f69c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f5ec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f5f0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f5f4:	83 c2 2a             	add    edx,0x2a
c000f5f7:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f5fb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000f600:	0f b7 c0             	movzx  eax,ax
c000f603:	39 c2                	cmp    edx,eax
c000f605:	0f 85 85 00 00 00    	jne    c000f690 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f60b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f60f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f613:	83 c2 2a             	add    edx,0x2a
c000f616:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000f61a:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000f61f:	0f b6 c0             	movzx  eax,al
c000f622:	39 c2                	cmp    edx,eax
c000f624:	75 6a                	jne    c000f690 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f626:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f62b:	85 c0                	test   eax,eax
c000f62d:	74 3d                	je     c000f66c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000f62f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f633:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f637:	83 c2 2a             	add    edx,0x2a
c000f63a:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000f63e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f642:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f645:	39 c2                	cmp    edx,eax
c000f647:	74 13                	je     c000f65c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000f649:	83 ec 0c             	sub    esp,0xc
c000f64c:	68 ac 18 02 c0       	push   0xc00218ac
c000f651:	e8 13 1c 00 00       	call   c0011269 <KePanic(char const*)>
c000f656:	83 c4 10             	add    esp,0x10
c000f659:	8d 76 00             	lea    esi,[esi+0x0]
c000f65c:	83 ec 0c             	sub    esp,0xc
c000f65f:	68 36 19 02 c0       	push   0xc0021936
c000f664:	e8 00 1c 00 00       	call   c0011269 <KePanic(char const*)>
c000f669:	83 c4 10             	add    esp,0x10
c000f66c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f670:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f674:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f678:	83 c2 2a             	add    edx,0x2a
c000f67b:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000f67f:	8b 02                	mov    eax,DWORD PTR [edx]
c000f681:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f684:	89 01                	mov    DWORD PTR [ecx],eax
c000f686:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f689:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f68e:	66 90                	xchg   ax,ax
c000f690:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000f695:	e9 3e ff ff ff       	jmp    c000f5d8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000f69a:	66 90                	xchg   ax,ax
c000f69c:	90                   	nop
c000f69d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6a1:	83 c4 2c             	add    esp,0x2c
c000f6a4:	c2 04 00             	ret    0x4
c000f6a7:	90                   	nop

c000f6a8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000f6a8:	83 ec 1c             	sub    esp,0x1c
c000f6ab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6af:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000f6b3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f6b7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f6bc:	88 c8                	mov    al,cl
c000f6be:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000f6c2:	88 d0                	mov    al,dl
c000f6c4:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f6c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6cc:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f6d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6d6:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f6d9:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000f6dd:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000f6e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6e5:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f6eb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000f6ef:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000f6f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f6f6:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000f6fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6ff:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f705:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000f709:	83 c0 01             	add    eax,0x1
c000f70c:	88 c1                	mov    cl,al
c000f70e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f712:	83 c2 2a             	add    edx,0x2a
c000f715:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000f719:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f71d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f723:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f727:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f72a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f72e:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000f732:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f736:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f73c:	8d 50 01             	lea    edx,[eax+0x1]
c000f73f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f743:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000f749:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f74d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f753:	3d 00 02 00 00       	cmp    eax,0x200
c000f758:	75 12                	jne    c000f76c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000f75a:	83 ec 0c             	sub    esp,0xc
c000f75d:	68 45 19 02 c0       	push   0xc0021945
c000f762:	e8 02 1b 00 00       	call   c0011269 <KePanic(char const*)>
c000f767:	83 c4 10             	add    esp,0x10
c000f76a:	66 90                	xchg   ax,ax
c000f76c:	90                   	nop
c000f76d:	83 c4 1c             	add    esp,0x1c
c000f770:	c3                   	ret    
c000f771:	90                   	nop
c000f772:	66 90                	xchg   ax,ax

c000f774 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000f774:	b8 00 00 00 00       	mov    eax,0x0
c000f779:	c3                   	ret    
c000f77a:	66 90                	xchg   ax,ax

c000f77c <ACPI::detectPCI()>:
c000f77c:	53                   	push   ebx
c000f77d:	83 ec 28             	sub    esp,0x28
c000f780:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f785:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000f78a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f78f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f795:	83 e0 04             	and    eax,0x4
c000f798:	0f b6 c0             	movzx  eax,al
c000f79b:	85 c0                	test   eax,eax
c000f79d:	74 2d                	je     c000f7cc <ACPI::detectPCI()+0x50>
c000f79f:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f7a4:	83 ec 08             	sub    esp,0x8
c000f7a7:	68 62 19 02 c0       	push   0xc0021962
c000f7ac:	50                   	push   eax
c000f7ad:	e8 6e f8 ff ff       	call   c000f020 <findDataTable(unsigned char*, char*)>
c000f7b2:	83 c4 10             	add    esp,0x10
c000f7b5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f7b9:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f7be:	74 0c                	je     c000f7cc <ACPI::detectPCI()+0x50>
c000f7c0:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f7c5:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f7ca:	66 90                	xchg   ax,ax
c000f7cc:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000f7d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f7d8:	8a 00                	mov    al,BYTE PTR [eax]
c000f7da:	0f b6 c0             	movzx  eax,al
c000f7dd:	83 f8 01             	cmp    eax,0x1
c000f7e0:	75 0e                	jne    c000f7f0 <ACPI::detectPCI()+0x74>
c000f7e2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f7e7:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f7ec:	eb 2e                	jmp    c000f81c <ACPI::detectPCI()+0xa0>
c000f7ee:	66 90                	xchg   ax,ax
c000f7f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f7f4:	8a 00                	mov    al,BYTE PTR [eax]
c000f7f6:	0f b6 c0             	movzx  eax,al
c000f7f9:	83 f8 02             	cmp    eax,0x2
c000f7fc:	75 1e                	jne    c000f81c <ACPI::detectPCI()+0xa0>
c000f7fe:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f803:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f808:	85 c0                	test   eax,eax
c000f80a:	74 10                	je     c000f81c <ACPI::detectPCI()+0xa0>
c000f80c:	83 ec 0c             	sub    esp,0xc
c000f80f:	68 dc 18 02 c0       	push   0xc00218dc
c000f814:	e8 50 1a 00 00       	call   c0011269 <KePanic(char const*)>
c000f819:	83 c4 10             	add    esp,0x10
c000f81c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000f820:	83 f0 01             	xor    eax,0x1
c000f823:	0f b6 c0             	movzx  eax,al
c000f826:	85 c0                	test   eax,eax
c000f828:	74 46                	je     c000f870 <ACPI::detectPCI()+0xf4>
c000f82a:	e8 01 09 ff ff       	call   c0000130 <manualPCIProbe>
c000f82f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f833:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f838:	75 0e                	jne    c000f848 <ACPI::detectPCI()+0xcc>
c000f83a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f83f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f844:	eb 2a                	jmp    c000f870 <ACPI::detectPCI()+0xf4>
c000f846:	66 90                	xchg   ax,ax
c000f848:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000f84d:	75 21                	jne    c000f870 <ACPI::detectPCI()+0xf4>
c000f84f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f854:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f859:	85 c0                	test   eax,eax
c000f85b:	74 13                	je     c000f870 <ACPI::detectPCI()+0xf4>
c000f85d:	83 ec 0c             	sub    esp,0xc
c000f860:	68 dc 18 02 c0       	push   0xc00218dc
c000f865:	e8 ff 19 00 00       	call   c0011269 <KePanic(char const*)>
c000f86a:	83 c4 10             	add    esp,0x10
c000f86d:	8d 76 00             	lea    esi,[esi+0x0]
c000f870:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f875:	85 c0                	test   eax,eax
c000f877:	0f 84 87 00 00 00    	je     c000f904 <ACPI::detectPCI()+0x188>
c000f87d:	83 ec 0c             	sub    esp,0xc
c000f880:	68 67 19 02 c0       	push   0xc0021967
c000f885:	e8 09 13 00 00       	call   c0010b93 <KeSetBootMessage(char const*)>
c000f88a:	83 c4 10             	add    esp,0x10
c000f88d:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f895:	83 ec 0c             	sub    esp,0xc
c000f898:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f89c:	e8 15 82 ff ff       	call   c0007ab6 <malloc>
c000f8a1:	83 c4 10             	add    esp,0x10
c000f8a4:	89 c3                	mov    ebx,eax
c000f8a6:	83 ec 0c             	sub    esp,0xc
c000f8a9:	53                   	push   ebx
c000f8aa:	e8 51 b3 00 00       	call   c001ac00 <PCI::PCI()>
c000f8af:	83 c4 10             	add    esp,0x10
c000f8b2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f8b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f8ba:	83 ec 08             	sub    esp,0x8
c000f8bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f8c1:	50                   	push   eax
c000f8c2:	e8 73 cd ff ff       	call   c000c63a <Device::addChild(Device*)>
c000f8c7:	83 c4 10             	add    esp,0x10
c000f8ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f8ce:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8d0:	83 c0 08             	add    eax,0x8
c000f8d3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8d5:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000f8da:	85 d2                	test   edx,edx
c000f8dc:	74 0a                	je     c000f8e8 <ACPI::detectPCI()+0x16c>
c000f8de:	ba 01 00 00 00       	mov    edx,0x1
c000f8e3:	eb 0b                	jmp    c000f8f0 <ACPI::detectPCI()+0x174>
c000f8e5:	8d 76 00             	lea    esi,[esi+0x0]
c000f8e8:	ba 02 00 00 00       	mov    edx,0x2
c000f8ed:	8d 76 00             	lea    esi,[esi+0x0]
c000f8f0:	6a 00                	push   0x0
c000f8f2:	6a 00                	push   0x0
c000f8f4:	52                   	push   edx
c000f8f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f8f9:	ff d0                	call   eax
c000f8fb:	83 c4 10             	add    esp,0x10
c000f8fe:	e9 91 00 00 00       	jmp    c000f994 <ACPI::detectPCI()+0x218>
c000f903:	90                   	nop
c000f904:	83 ec 0c             	sub    esp,0xc
c000f907:	68 7f 19 02 c0       	push   0xc002197f
c000f90c:	e8 82 12 00 00       	call   c0010b93 <KeSetBootMessage(char const*)>
c000f911:	83 c4 10             	add    esp,0x10
c000f914:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000f91b:	83 ec 0c             	sub    esp,0xc
c000f91e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f922:	e8 8f 81 ff ff       	call   c0007ab6 <malloc>
c000f927:	83 c4 10             	add    esp,0x10
c000f92a:	89 c3                	mov    ebx,eax
c000f92c:	83 ec 0c             	sub    esp,0xc
c000f92f:	53                   	push   ebx
c000f930:	e8 65 be 00 00       	call   c001b79a <IDE::IDE()>
c000f935:	83 c4 10             	add    esp,0x10
c000f938:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f93c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f940:	83 ec 08             	sub    esp,0x8
c000f943:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f947:	50                   	push   eax
c000f948:	e8 ed cc ff ff       	call   c000c63a <Device::addChild(Device*)>
c000f94d:	83 c4 10             	add    esp,0x10
c000f950:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f954:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f95e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f962:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f96b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f96f:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f978:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f97c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f97e:	83 c0 08             	add    eax,0x8
c000f981:	8b 00                	mov    eax,DWORD PTR [eax]
c000f983:	6a 00                	push   0x0
c000f985:	6a 00                	push   0x0
c000f987:	6a 00                	push   0x0
c000f989:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f98d:	ff d0                	call   eax
c000f98f:	83 c4 10             	add    esp,0x10
c000f992:	66 90                	xchg   ax,ax
c000f994:	90                   	nop
c000f995:	83 c4 28             	add    esp,0x28
c000f998:	5b                   	pop    ebx
c000f999:	c3                   	ret    
c000f99a:	66 90                	xchg   ax,ax

c000f99c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f99c:	83 ec 1c             	sub    esp,0x1c
c000f99f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f9a3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f9a6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f9aa:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f9af:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f9b4:	83 ec 08             	sub    esp,0x8
c000f9b7:	52                   	push   edx
c000f9b8:	50                   	push   eax
c000f9b9:	e8 ba 77 ff ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c000f9be:	83 c4 10             	add    esp,0x10
c000f9c1:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000f9c5:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f9ca:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f9cf:	83 ec 04             	sub    esp,0x4
c000f9d2:	6a 01                	push   0x1
c000f9d4:	52                   	push   edx
c000f9d5:	50                   	push   eax
c000f9d6:	e8 b7 78 ff ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c000f9db:	83 c4 10             	add    esp,0x10
c000f9de:	90                   	nop
c000f9df:	83 c4 1c             	add    esp,0x1c
c000f9e2:	c3                   	ret    
c000f9e3:	90                   	nop

c000f9e4 <ACPI::sleep()>:
c000f9e4:	83 ec 0c             	sub    esp,0xc
c000f9e7:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c000f9ec:	85 c0                	test   eax,eax
c000f9ee:	74 08                	je     c000f9f8 <ACPI::sleep()+0x14>
c000f9f0:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c000f9f5:	ff d0                	call   eax
c000f9f7:	90                   	nop
c000f9f8:	90                   	nop
c000f9f9:	83 c4 0c             	add    esp,0xc
c000f9fc:	c3                   	ret    
c000f9fd:	90                   	nop
c000f9fe:	66 90                	xchg   ax,ax

c000fa00 <ACPI::open(int, int, void*)>:
c000fa00:	57                   	push   edi
c000fa01:	56                   	push   esi
c000fa02:	53                   	push   ebx
c000fa03:	81 ec 70 01 00 00    	sub    esp,0x170
c000fa09:	83 ec 0c             	sub    esp,0xc
c000fa0c:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000fa13:	e8 64 fd ff ff       	call   c000f77c <ACPI::detectPCI()>
c000fa18:	83 c4 10             	add    esp,0x10
c000fa1b:	83 ec 0c             	sub    esp,0xc
c000fa1e:	68 04 19 02 c0       	push   0xc0021904
c000fa23:	e8 6b 11 00 00       	call   c0010b93 <KeSetBootMessage(char const*)>
c000fa28:	83 c4 10             	add    esp,0x10
c000fa2b:	b8 4c 05 00 00       	mov    eax,0x54c
c000fa30:	8a 00                	mov    al,BYTE PTR [eax]
c000fa32:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000fa39:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fa41:	83 f8 01             	cmp    eax,0x1
c000fa44:	75 12                	jne    c000fa58 <ACPI::open(int, int, void*)+0x58>
c000fa46:	83 ec 0c             	sub    esp,0xc
c000fa49:	68 95 12 02 c0       	push   0xc0021295
c000fa4e:	e8 fd 4b 00 00       	call   c0014650 <Thr::loadKernelSymbolTable(char const*)>
c000fa53:	83 c4 10             	add    esp,0x10
c000fa56:	eb 34                	jmp    c000fa8c <ACPI::open(int, int, void*)+0x8c>
c000fa58:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fa60:	3d bb 00 00 00       	cmp    eax,0xbb
c000fa65:	75 15                	jne    c000fa7c <ACPI::open(int, int, void*)+0x7c>
c000fa67:	83 ec 0c             	sub    esp,0xc
c000fa6a:	68 94 19 02 c0       	push   0xc0021994
c000fa6f:	e8 dc 4b 00 00       	call   c0014650 <Thr::loadKernelSymbolTable(char const*)>
c000fa74:	83 c4 10             	add    esp,0x10
c000fa77:	eb 13                	jmp    c000fa8c <ACPI::open(int, int, void*)+0x8c>
c000fa79:	8d 76 00             	lea    esi,[esi+0x0]
c000fa7c:	83 ec 0c             	sub    esp,0xc
c000fa7f:	68 b2 19 02 c0       	push   0xc00219b2
c000fa84:	e8 e0 17 00 00       	call   c0011269 <KePanic(char const*)>
c000fa89:	83 c4 10             	add    esp,0x10
c000fa8c:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000fa94:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000fa9f:	83 ec 0c             	sub    esp,0xc
c000faa2:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000faa9:	e8 08 80 ff ff       	call   c0007ab6 <malloc>
c000faae:	83 c4 10             	add    esp,0x10
c000fab1:	89 c3                	mov    ebx,eax
c000fab3:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fab8:	83 ec 04             	sub    esp,0x4
c000fabb:	50                   	push   eax
c000fabc:	68 cc 19 02 c0       	push   0xc00219cc
c000fac1:	53                   	push   ebx
c000fac2:	e8 69 bc ff ff       	call   c000b730 <File::File(char const*, Process*)>
c000fac7:	83 c4 10             	add    esp,0x10
c000faca:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000fad1:	83 ec 08             	sub    esp,0x8
c000fad4:	6a 01                	push   0x1
c000fad6:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fadd:	e8 0a bd ff ff       	call   c000b7ec <File::open(FileOpenMode)>
c000fae2:	83 c4 10             	add    esp,0x10
c000fae5:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000faec:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000faf4:	75 16                	jne    c000fb0c <ACPI::open(int, int, void*)+0x10c>
c000faf6:	83 ec 0c             	sub    esp,0xc
c000faf9:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fb00:	e8 45 bd ff ff       	call   c000b84a <File::close()>
c000fb05:	83 c4 10             	add    esp,0x10
c000fb08:	eb 0a                	jmp    c000fb14 <ACPI::open(int, int, void*)+0x114>
c000fb0a:	66 90                	xchg   ax,ax
c000fb0c:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000fb14:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000fb1c:	74 1e                	je     c000fb3c <ACPI::open(int, int, void*)+0x13c>
c000fb1e:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000fb25:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb27:	83 c0 08             	add    eax,0x8
c000fb2a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb2c:	83 ec 0c             	sub    esp,0xc
c000fb2f:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fb36:	ff d0                	call   eax
c000fb38:	83 c4 10             	add    esp,0x10
c000fb3b:	90                   	nop
c000fb3c:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000fb43:	83 f0 01             	xor    eax,0x1
c000fb46:	0f b6 c0             	movzx  eax,al
c000fb49:	85 c0                	test   eax,eax
c000fb4b:	74 43                	je     c000fb90 <ACPI::open(int, int, void*)+0x190>
c000fb4d:	83 ec 0c             	sub    esp,0xc
c000fb50:	68 ea 19 02 c0       	push   0xc00219ea
c000fb55:	e8 39 10 00 00       	call   c0010b93 <KeSetBootMessage(char const*)>
c000fb5a:	83 c4 10             	add    esp,0x10
c000fb5d:	83 ec 04             	sub    esp,0x4
c000fb60:	6a 0c                	push   0xc
c000fb62:	68 05 1a 02 c0       	push   0xc0021a05
c000fb67:	68 16 1a 02 c0       	push   0xc0021a16
c000fb6c:	e8 8f 3d 00 00       	call   c0013900 <Reg::readIntWithDefault(char*, char*, int)>
c000fb71:	83 c4 10             	add    esp,0x10
c000fb74:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000fb7b:	83 ec 0c             	sub    esp,0xc
c000fb7e:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000fb85:	e8 b2 9c ff ff       	call   c000983c <Virt::setupPageSwapping(int)>
c000fb8a:	83 c4 10             	add    esp,0x10
c000fb8d:	8d 76 00             	lea    esi,[esi+0x0]
c000fb90:	83 ec 0c             	sub    esp,0xc
c000fb93:	68 95 05 02 c0       	push   0xc0020595
c000fb98:	e8 f6 0f 00 00       	call   c0010b93 <KeSetBootMessage(char const*)>
c000fb9d:	83 c4 10             	add    esp,0x10
c000fba0:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000fba7:	83 ec 08             	sub    esp,0x8
c000fbaa:	6a 13                	push   0x13
c000fbac:	50                   	push   eax
c000fbad:	e8 a0 cd ff ff       	call   c000c952 <getDevicesOfType(DeviceType)>
c000fbb2:	83 c4 0c             	add    esp,0xc
c000fbb5:	8d 76 00             	lea    esi,[esi+0x0]
c000fbb8:	83 ec 0c             	sub    esp,0xc
c000fbbb:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fbc2:	50                   	push   eax
c000fbc3:	e8 b8 fd 00 00       	call   c001f980 <LinkedList<Device>::isEmpty()>
c000fbc8:	83 c4 10             	add    esp,0x10
c000fbcb:	83 f0 01             	xor    eax,0x1
c000fbce:	0f b6 c0             	movzx  eax,al
c000fbd1:	85 c0                	test   eax,eax
c000fbd3:	0f 84 47 01 00 00    	je     c000fd20 <ACPI::open(int, int, void*)+0x320>
c000fbd9:	83 ec 0c             	sub    esp,0xc
c000fbdc:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fbe3:	50                   	push   eax
c000fbe4:	e8 b3 fd 00 00       	call   c001f99c <LinkedList<Device>::getFirstElement()>
c000fbe9:	83 c4 10             	add    esp,0x10
c000fbec:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000fbf3:	83 ec 0c             	sub    esp,0xc
c000fbf6:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fbfd:	50                   	push   eax
c000fbfe:	e8 a1 fd 00 00       	call   c001f9a4 <LinkedList<Device>::removeFirst()>
c000fc03:	83 c4 10             	add    esp,0x10
c000fc06:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000fc0d:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000fc14:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000fc1b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fc1f:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000fc25:	ba 09 00 00 00       	mov    edx,0x9
c000fc2a:	fc                   	cld    
c000fc2b:	89 c7                	mov    edi,eax
c000fc2d:	89 de                	mov    esi,ebx
c000fc2f:	89 d1                	mov    ecx,edx
c000fc31:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fc33:	83 ec 08             	sub    esp,0x8
c000fc36:	8d 44 24 38          	lea    eax,[esp+0x38]
c000fc3a:	50                   	push   eax
c000fc3b:	83 ec 24             	sub    esp,0x24
c000fc3e:	89 e0                	mov    eax,esp
c000fc40:	89 c3                	mov    ebx,eax
c000fc42:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000fc46:	ba 09 00 00 00       	mov    edx,0x9
c000fc4b:	89 df                	mov    edi,ebx
c000fc4d:	89 c6                	mov    esi,eax
c000fc4f:	89 d1                	mov    ecx,edx
c000fc51:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fc53:	e8 92 b4 00 00       	call   c001b0ea <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000fc58:	83 c4 30             	add    esp,0x30
c000fc5b:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000fc62:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000fc6a:	0f 84 48 ff ff ff    	je     c000fbb8 <ACPI::open(int, int, void*)+0x1b8>
c000fc70:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000fc7b:	83 ec 0c             	sub    esp,0xc
c000fc7e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fc85:	e8 2c 7e ff ff       	call   c0007ab6 <malloc>
c000fc8a:	83 c4 10             	add    esp,0x10
c000fc8d:	89 c3                	mov    ebx,eax
c000fc8f:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fc94:	83 ec 04             	sub    esp,0x4
c000fc97:	50                   	push   eax
c000fc98:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000fc9f:	53                   	push   ebx
c000fca0:	e8 8b ba ff ff       	call   c000b730 <File::File(char const*, Process*)>
c000fca5:	83 c4 10             	add    esp,0x10
c000fca8:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000fcaf:	83 ec 0c             	sub    esp,0xc
c000fcb2:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000fcb9:	e8 f2 bd ff ff       	call   c000bab0 <File::exists()>
c000fcbe:	83 c4 10             	add    esp,0x10
c000fcc1:	0f b6 c0             	movzx  eax,al
c000fcc4:	85 c0                	test   eax,eax
c000fcc6:	74 28                	je     c000fcf0 <ACPI::open(int, int, void*)+0x2f0>
c000fcc8:	83 ec 08             	sub    esp,0x8
c000fccb:	6a 01                	push   0x1
c000fccd:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000fcd4:	e8 f1 53 00 00       	call   c00150ca <Thr::loadDLL(char const*, bool)>
c000fcd9:	83 c4 10             	add    esp,0x10
c000fcdc:	83 ec 08             	sub    esp,0x8
c000fcdf:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000fce6:	50                   	push   eax
c000fce7:	e8 0f 56 00 00       	call   c00152fb <Thr::executeDLL(unsigned long, void*)>
c000fcec:	83 c4 10             	add    esp,0x10
c000fcef:	90                   	nop
c000fcf0:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000fcf8:	0f 84 ba fe ff ff    	je     c000fbb8 <ACPI::open(int, int, void*)+0x1b8>
c000fcfe:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000fd05:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd07:	83 c0 08             	add    eax,0x8
c000fd0a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd0c:	83 ec 0c             	sub    esp,0xc
c000fd0f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000fd16:	ff d0                	call   eax
c000fd18:	83 c4 10             	add    esp,0x10
c000fd1b:	e9 98 fe ff ff       	jmp    c000fbb8 <ACPI::open(int, int, void*)+0x1b8>
c000fd20:	83 ec 0c             	sub    esp,0xc
c000fd23:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fd2a:	50                   	push   eax
c000fd2b:	e8 4c fc 00 00       	call   c001f97c <LinkedList<Device>::~LinkedList()>
c000fd30:	83 c4 10             	add    esp,0x10
c000fd33:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000fd39:	83 ec 08             	sub    esp,0x8
c000fd3c:	6a 01                	push   0x1
c000fd3e:	68 1d 1a 02 c0       	push   0xc0021a1d
c000fd43:	e8 82 53 00 00       	call   c00150ca <Thr::loadDLL(char const*, bool)>
c000fd48:	83 c4 10             	add    esp,0x10
c000fd4b:	83 ec 08             	sub    esp,0x8
c000fd4e:	53                   	push   ebx
c000fd4f:	50                   	push   eax
c000fd50:	e8 a6 55 00 00       	call   c00152fb <Thr::executeDLL(unsigned long, void*)>
c000fd55:	83 c4 10             	add    esp,0x10
c000fd58:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fd5d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fd63:	83 e0 04             	and    eax,0x4
c000fd66:	0f b6 c0             	movzx  eax,al
c000fd69:	85 c0                	test   eax,eax
c000fd6b:	0f 84 1b 01 00 00    	je     c000fe8c <ACPI::open(int, int, void*)+0x48c>
c000fd71:	83 ec 0c             	sub    esp,0xc
c000fd74:	68 3a 1a 02 c0       	push   0xc0021a3a
c000fd79:	e8 15 0e 00 00       	call   c0010b93 <KeSetBootMessage(char const*)>
c000fd7e:	83 c4 10             	add    esp,0x10
c000fd81:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000fd8c:	83 ec 0c             	sub    esp,0xc
c000fd8f:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000fd96:	e8 1b 7d ff ff       	call   c0007ab6 <malloc>
c000fd9b:	83 c4 10             	add    esp,0x10
c000fd9e:	89 c3                	mov    ebx,eax
c000fda0:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fda5:	83 ec 04             	sub    esp,0x4
c000fda8:	50                   	push   eax
c000fda9:	68 57 1a 02 c0       	push   0xc0021a57
c000fdae:	53                   	push   ebx
c000fdaf:	e8 7c b9 ff ff       	call   c000b730 <File::File(char const*, Process*)>
c000fdb4:	83 c4 10             	add    esp,0x10
c000fdb7:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000fdbe:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000fdc6:	74 20                	je     c000fde8 <ACPI::open(int, int, void*)+0x3e8>
c000fdc8:	83 ec 0c             	sub    esp,0xc
c000fdcb:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000fdd2:	e8 d9 bc ff ff       	call   c000bab0 <File::exists()>
c000fdd7:	83 c4 10             	add    esp,0x10
c000fdda:	0f b6 c0             	movzx  eax,al
c000fddd:	85 c0                	test   eax,eax
c000fddf:	74 07                	je     c000fde8 <ACPI::open(int, int, void*)+0x3e8>
c000fde1:	b0 01                	mov    al,0x1
c000fde3:	eb 07                	jmp    c000fdec <ACPI::open(int, int, void*)+0x3ec>
c000fde5:	8d 76 00             	lea    esi,[esi+0x0]
c000fde8:	b0 00                	mov    al,0x0
c000fdea:	66 90                	xchg   ax,ax
c000fdec:	0f b6 c0             	movzx  eax,al
c000fdef:	85 c0                	test   eax,eax
c000fdf1:	74 25                	je     c000fe18 <ACPI::open(int, int, void*)+0x418>
c000fdf3:	83 ec 08             	sub    esp,0x8
c000fdf6:	6a 01                	push   0x1
c000fdf8:	68 57 1a 02 c0       	push   0xc0021a57
c000fdfd:	e8 c8 52 00 00       	call   c00150ca <Thr::loadDLL(char const*, bool)>
c000fe02:	83 c4 10             	add    esp,0x10
c000fe05:	83 ec 08             	sub    esp,0x8
c000fe08:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000fe0f:	50                   	push   eax
c000fe10:	e8 e6 54 00 00       	call   c00152fb <Thr::executeDLL(unsigned long, void*)>
c000fe15:	83 c4 10             	add    esp,0x10
c000fe18:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000fe20:	74 2a                	je     c000fe4c <ACPI::open(int, int, void*)+0x44c>
c000fe22:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000fe2a:	74 20                	je     c000fe4c <ACPI::open(int, int, void*)+0x44c>
c000fe2c:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000fe33:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe35:	83 c0 08             	add    eax,0x8
c000fe38:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe3a:	83 ec 0c             	sub    esp,0xc
c000fe3d:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000fe44:	ff d0                	call   eax
c000fe46:	83 c4 10             	add    esp,0x10
c000fe49:	8d 76 00             	lea    esi,[esi+0x0]
c000fe4c:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000fe51:	83 ec 08             	sub    esp,0x8
c000fe54:	68 74 1a 02 c0       	push   0xc0021a74
c000fe59:	50                   	push   eax
c000fe5a:	e8 c1 f1 ff ff       	call   c000f020 <findDataTable(unsigned char*, char*)>
c000fe5f:	83 c4 10             	add    esp,0x10
c000fe62:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000fe69:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000fe71:	74 19                	je     c000fe8c <ACPI::open(int, int, void*)+0x48c>
c000fe73:	83 ec 08             	sub    esp,0x8
c000fe76:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000fe7d:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000fe84:	e8 13 fb ff ff       	call   c000f99c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000fe89:	83 c4 10             	add    esp,0x10
c000fe8c:	b8 00 00 00 00       	mov    eax,0x0
c000fe91:	81 c4 70 01 00 00    	add    esp,0x170
c000fe97:	5b                   	pop    ebx
c000fe98:	5e                   	pop    esi
c000fe99:	5f                   	pop    edi
c000fe9a:	c3                   	ret    
c000fe9b:	90                   	nop

c000fe9c <CPU::close(int, int, void*)>:
c000fe9c:	31 c0                	xor    eax,eax
c000fe9e:	c3                   	ret    
c000fe9f:	90                   	nop

c000fea0 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000fea0:	60                   	pusha  
c000fea1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fea5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fea9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fead:	9c                   	pushf  
c000feae:	fa                   	cli    
c000feaf:	0f 09                	wbinvd 
c000feb1:	0f 30                	wrmsr  
c000feb3:	9d                   	popf   
c000feb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000feb8:	89 02                	mov    DWORD PTR [edx],eax
c000feba:	61                   	popa   
c000febb:	c3                   	ret    

c000febc <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000febc:	60                   	pusha  
c000febd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fec1:	9c                   	pushf  
c000fec2:	fa                   	cli    
c000fec3:	0f 09                	wbinvd 
c000fec5:	31 c0                	xor    eax,eax
c000fec7:	31 d2                	xor    edx,edx
c000fec9:	0f 32                	rdmsr  
c000fecb:	9d                   	popf   
c000fecc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fed0:	89 02                	mov    DWORD PTR [edx],eax
c000fed2:	61                   	popa   
c000fed3:	c3                   	ret    

c000fed4 <CPU::AMD_K6_writeback(int, int, int)>:
c000fed4:	56                   	push   esi
c000fed5:	53                   	push   ebx
c000fed6:	83 ec 10             	sub    esp,0x10
c000fed9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fedd:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000fee2:	75 5d                	jne    c000ff41 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000fee4:	83 f8 08             	cmp    eax,0x8
c000fee7:	75 09                	jne    c000fef2 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000fee9:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000feee:	7e 13                	jle    c000ff03 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000fef0:	eb 30                	jmp    c000ff22 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000fef2:	83 f8 06             	cmp    eax,0x6
c000fef5:	7c 4a                	jl     c000ff41 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000fef7:	83 f8 07             	cmp    eax,0x7
c000fefa:	7e 07                	jle    c000ff03 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000fefc:	83 f8 09             	cmp    eax,0x9
c000feff:	74 21                	je     c000ff22 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ff01:	eb 3e                	jmp    c000ff41 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ff03:	89 e6                	mov    esi,esp
c000ff05:	8b 1d dc 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025edc
c000ff0b:	56                   	push   esi
c000ff0c:	c1 eb 15             	shr    ebx,0x15
c000ff0f:	68 82 00 00 c0       	push   0xc0000082
c000ff14:	83 e3 7e             	and    ebx,0x7e
c000ff17:	e8 a0 ff ff ff       	call   c000febc <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ff1c:	56                   	push   esi
c000ff1d:	6a 00                	push   0x0
c000ff1f:	53                   	push   ebx
c000ff20:	eb 12                	jmp    c000ff34 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000ff22:	89 e3                	mov    ebx,esp
c000ff24:	53                   	push   ebx
c000ff25:	68 82 00 00 c0       	push   0xc0000082
c000ff2a:	e8 8d ff ff ff       	call   c000febc <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ff2f:	53                   	push   ebx
c000ff30:	6a 00                	push   0x0
c000ff32:	6a 00                	push   0x0
c000ff34:	68 82 00 00 c0       	push   0xc0000082
c000ff39:	e8 62 ff ff ff       	call   c000fea0 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000ff3e:	83 c4 18             	add    esp,0x18
c000ff41:	83 c4 10             	add    esp,0x10
c000ff44:	5b                   	pop    ebx
c000ff45:	5e                   	pop    esi
c000ff46:	c3                   	ret    
c000ff47:	90                   	nop

c000ff48 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000ff48:	55                   	push   ebp
c000ff49:	57                   	push   edi
c000ff4a:	56                   	push   esi
c000ff4b:	53                   	push   ebx
c000ff4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff50:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ff54:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ff58:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000ff5c:	39 05 38 30 02 c0    	cmp    DWORD PTR ds:0xc0023038,eax
c000ff62:	75 23                	jne    c000ff87 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000ff64:	a1 8c 8d 02 c0       	mov    eax,ds:0xc0028d8c
c000ff69:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ff6d:	89 06                	mov    DWORD PTR [esi],eax
c000ff6f:	a1 88 8d 02 c0       	mov    eax,ds:0xc0028d88
c000ff74:	89 07                	mov    DWORD PTR [edi],eax
c000ff76:	a1 84 8d 02 c0       	mov    eax,ds:0xc0028d84
c000ff7b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ff7e:	a1 80 8d 02 c0       	mov    eax,ds:0xc0028d80
c000ff83:	89 02                	mov    DWORD PTR [edx],eax
c000ff85:	eb 3f                	jmp    c000ffc6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000ff87:	31 c9                	xor    ecx,ecx
c000ff89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff8d:	0f a2                	cpuid  
c000ff8f:	89 06                	mov    DWORD PTR [esi],eax
c000ff91:	89 1f                	mov    DWORD PTR [edi],ebx
c000ff93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ff97:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000ff9a:	89 10                	mov    DWORD PTR [eax],edx
c000ff9c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ffa0:	a3 38 30 02 c0       	mov    ds:0xc0023038,eax
c000ffa5:	8b 06                	mov    eax,DWORD PTR [esi]
c000ffa7:	a3 8c 8d 02 c0       	mov    ds:0xc0028d8c,eax
c000ffac:	8b 07                	mov    eax,DWORD PTR [edi]
c000ffae:	a3 88 8d 02 c0       	mov    ds:0xc0028d88,eax
c000ffb3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ffb6:	a3 84 8d 02 c0       	mov    ds:0xc0028d84,eax
c000ffbb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ffbf:	8b 00                	mov    eax,DWORD PTR [eax]
c000ffc1:	a3 80 8d 02 c0       	mov    ds:0xc0028d80,eax
c000ffc6:	5b                   	pop    ebx
c000ffc7:	5e                   	pop    esi
c000ffc8:	5f                   	pop    edi
c000ffc9:	5d                   	pop    ebp
c000ffca:	c3                   	ret    
c000ffcb:	90                   	nop

c000ffcc <CPU::cpuidCheckEDX(unsigned int)>:
c000ffcc:	83 ec 10             	sub    esp,0x10
c000ffcf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffd3:	50                   	push   eax
c000ffd4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffd8:	50                   	push   eax
c000ffd9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffdd:	50                   	push   eax
c000ffde:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffe2:	50                   	push   eax
c000ffe3:	6a 01                	push   0x1
c000ffe5:	e8 5e ff ff ff       	call   c000ff48 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ffea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ffee:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000fff2:	0f 95 c0             	setne  al
c000fff5:	83 c4 24             	add    esp,0x24
c000fff8:	c3                   	ret    
c000fff9:	90                   	nop

c000fffa <CPU::cpuidCheckECX(unsigned int)>:
c000fffa:	83 ec 10             	sub    esp,0x10
c000fffd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010001:	50                   	push   eax
c0010002:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010006:	50                   	push   eax
c0010007:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001000b:	50                   	push   eax
c001000c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010010:	50                   	push   eax
c0010011:	6a 01                	push   0x1
c0010013:	e8 30 ff ff ff       	call   c000ff48 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010018:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001001c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0010020:	0f 95 c0             	setne  al
c0010023:	83 c4 24             	add    esp,0x24
c0010026:	c3                   	ret    
c0010027:	90                   	nop

c0010028 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0010028:	83 ec 10             	sub    esp,0x10
c001002b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001002f:	50                   	push   eax
c0010030:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010034:	50                   	push   eax
c0010035:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010039:	50                   	push   eax
c001003a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001003e:	50                   	push   eax
c001003f:	6a 07                	push   0x7
c0010041:	e8 02 ff ff ff       	call   c000ff48 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010046:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001004a:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001004e:	0f 95 c0             	setne  al
c0010051:	83 c4 24             	add    esp,0x24
c0010054:	c3                   	ret    
c0010055:	90                   	nop

c0010056 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0010056:	83 ec 10             	sub    esp,0x10
c0010059:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001005d:	50                   	push   eax
c001005e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010062:	50                   	push   eax
c0010063:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010067:	50                   	push   eax
c0010068:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001006c:	50                   	push   eax
c001006d:	6a 07                	push   0x7
c001006f:	e8 d4 fe ff ff       	call   c000ff48 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010074:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010078:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001007c:	0f 95 c0             	setne  al
c001007f:	83 c4 24             	add    esp,0x24
c0010082:	c3                   	ret    
c0010083:	90                   	nop

c0010084 <CPU::CPU()>:
c0010084:	83 ec 0c             	sub    esp,0xc
c0010087:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001008b:	83 ec 08             	sub    esp,0x8
c001008e:	68 99 1b 02 c0       	push   0xc0021b99
c0010093:	50                   	push   eax
c0010094:	e8 39 c7 ff ff       	call   c000c7d2 <Device::Device(char const*)>
c0010099:	83 c4 10             	add    esp,0x10
c001009c:	ba 2c 1c 02 c0       	mov    edx,0xc0021c2c
c00100a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100a5:	89 10                	mov    DWORD PTR [eax],edx
c00100a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100ab:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00100b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100b9:	05 78 01 00 00       	add    eax,0x178
c00100be:	83 ec 0c             	sub    esp,0xc
c00100c1:	50                   	push   eax
c00100c2:	e8 95 72 ff ff       	call   c000735c <GDT::GDT()>
c00100c7:	83 c4 10             	add    esp,0x10
c00100ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100ce:	05 7c 09 00 00       	add    eax,0x97c
c00100d3:	83 ec 0c             	sub    esp,0xc
c00100d6:	50                   	push   eax
c00100d7:	e8 d0 74 ff ff       	call   c00075ac <IDT::IDT()>
c00100dc:	83 c4 10             	add    esp,0x10
c00100df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100e3:	05 7c 11 00 00       	add    eax,0x117c
c00100e8:	83 ec 0c             	sub    esp,0xc
c00100eb:	50                   	push   eax
c00100ec:	e8 53 8e ff ff       	call   c0008f44 <TSS::TSS()>
c00100f1:	83 c4 10             	add    esp,0x10
c00100f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100f8:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c00100ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010103:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001010d:	90                   	nop
c001010e:	83 c4 0c             	add    esp,0xc
c0010111:	c3                   	ret    

c0010112 <CPU::displayFeatures()>:
c0010112:	c3                   	ret    
c0010113:	90                   	nop

c0010114 <CPU::detectFeatures()>:
c0010114:	55                   	push   ebp
c0010115:	57                   	push   edi
c0010116:	56                   	push   esi
c0010117:	53                   	push   ebx
c0010118:	83 ec 30             	sub    esp,0x30
c001011b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001011f:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c0010129:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c0010130:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0010136:	6a 0d                	push   0xd
c0010138:	6a 00                	push   0x0
c001013a:	55                   	push   ebp
c001013b:	e8 b0 03 ff ff       	call   c00004f0 <memset>
c0010140:	83 c4 10             	add    esp,0x10
c0010143:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0010148:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c001014f:	0f 84 db 05 00 00    	je     c0010730 <CPU::detectFeatures()+0x61c>
c0010155:	83 ec 0c             	sub    esp,0xc
c0010158:	89 ef                	mov    edi,ebp
c001015a:	6a 10                	push   0x10
c001015c:	e8 6b fe ff ff       	call   c000ffcc <CPU::cpuidCheckEDX(unsigned int)>
c0010161:	83 e0 01             	and    eax,0x1
c0010164:	8d 14 00             	lea    edx,[eax+eax*1]
c0010167:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001016d:	83 e0 fd             	and    eax,0xfffffffd
c0010170:	09 d0                	or     eax,edx
c0010172:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010178:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001017f:	e8 48 fe ff ff       	call   c000ffcc <CPU::cpuidCheckEDX(unsigned int)>
c0010184:	83 e0 01             	and    eax,0x1
c0010187:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001018e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010194:	83 e0 fb             	and    eax,0xfffffffb
c0010197:	09 d0                	or     eax,edx
c0010199:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001019f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00101a6:	e8 21 fe ff ff       	call   c000ffcc <CPU::cpuidCheckEDX(unsigned int)>
c00101ab:	83 e0 01             	and    eax,0x1
c00101ae:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00101b5:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00101bb:	83 e0 f7             	and    eax,0xfffffff7
c00101be:	09 d0                	or     eax,edx
c00101c0:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00101c6:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00101cd:	e8 fa fd ff ff       	call   c000ffcc <CPU::cpuidCheckEDX(unsigned int)>
c00101d2:	83 e0 01             	and    eax,0x1
c00101d5:	c1 e0 04             	shl    eax,0x4
c00101d8:	89 c2                	mov    edx,eax
c00101da:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00101e0:	83 e0 ef             	and    eax,0xffffffef
c00101e3:	09 d0                	or     eax,edx
c00101e5:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00101eb:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00101f2:	e8 d5 fd ff ff       	call   c000ffcc <CPU::cpuidCheckEDX(unsigned int)>
c00101f7:	83 e0 01             	and    eax,0x1
c00101fa:	c1 e0 05             	shl    eax,0x5
c00101fd:	89 c2                	mov    edx,eax
c00101ff:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010205:	83 e0 df             	and    eax,0xffffffdf
c0010208:	09 d0                	or     eax,edx
c001020a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010210:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0010217:	e8 b0 fd ff ff       	call   c000ffcc <CPU::cpuidCheckEDX(unsigned int)>
c001021c:	83 e0 01             	and    eax,0x1
c001021f:	8d 14 00             	lea    edx,[eax+eax*1]
c0010222:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010228:	83 e0 fd             	and    eax,0xfffffffd
c001022b:	09 d0                	or     eax,edx
c001022d:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010233:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001023a:	e8 8d fd ff ff       	call   c000ffcc <CPU::cpuidCheckEDX(unsigned int)>
c001023f:	83 e0 01             	and    eax,0x1
c0010242:	c1 e0 06             	shl    eax,0x6
c0010245:	89 c2                	mov    edx,eax
c0010247:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001024d:	83 e0 bf             	and    eax,0xffffffbf
c0010250:	09 d0                	or     eax,edx
c0010252:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010258:	58                   	pop    eax
c0010259:	8d 44 24 28          	lea    eax,[esp+0x28]
c001025d:	50                   	push   eax
c001025e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010262:	50                   	push   eax
c0010263:	8d 74 24 28          	lea    esi,[esp+0x28]
c0010267:	56                   	push   esi
c0010268:	8d 44 24 28          	lea    eax,[esp+0x28]
c001026c:	50                   	push   eax
c001026d:	6a 00                	push   0x0
c001026f:	e8 d4 fc ff ff       	call   c000ff48 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010274:	b8 04 00 00 00       	mov    eax,0x4
c0010279:	89 c1                	mov    ecx,eax
c001027b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001027d:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0010283:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0010287:	89 c1                	mov    ecx,eax
c0010289:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001028b:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0010291:	8d 74 24 38          	lea    esi,[esp+0x38]
c0010295:	89 c1                	mov    ecx,eax
c0010297:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010299:	83 c4 18             	add    esp,0x18
c001029c:	68 a8 1a 02 c0       	push   0xc0021aa8
c00102a1:	55                   	push   ebp
c00102a2:	e8 a9 04 ff ff       	call   c0000750 <strcmp>
c00102a7:	83 c4 10             	add    esp,0x10
c00102aa:	85 c0                	test   eax,eax
c00102ac:	75 0f                	jne    c00102bd <CPU::detectFeatures()+0x1a9>
c00102ae:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00102b8:	e9 22 02 00 00       	jmp    c00104df <CPU::detectFeatures()+0x3cb>
c00102bd:	50                   	push   eax
c00102be:	50                   	push   eax
c00102bf:	68 b5 1a 02 c0       	push   0xc0021ab5
c00102c4:	55                   	push   ebp
c00102c5:	e8 86 04 ff ff       	call   c0000750 <strcmp>
c00102ca:	83 c4 10             	add    esp,0x10
c00102cd:	85 c0                	test   eax,eax
c00102cf:	74 dd                	je     c00102ae <CPU::detectFeatures()+0x19a>
c00102d1:	50                   	push   eax
c00102d2:	50                   	push   eax
c00102d3:	68 c2 1a 02 c0       	push   0xc0021ac2
c00102d8:	55                   	push   ebp
c00102d9:	e8 72 04 ff ff       	call   c0000750 <strcmp>
c00102de:	83 c4 10             	add    esp,0x10
c00102e1:	85 c0                	test   eax,eax
c00102e3:	74 2a                	je     c001030f <CPU::detectFeatures()+0x1fb>
c00102e5:	50                   	push   eax
c00102e6:	50                   	push   eax
c00102e7:	68 cf 1a 02 c0       	push   0xc0021acf
c00102ec:	55                   	push   ebp
c00102ed:	e8 5e 04 ff ff       	call   c0000750 <strcmp>
c00102f2:	83 c4 10             	add    esp,0x10
c00102f5:	85 c0                	test   eax,eax
c00102f7:	74 16                	je     c001030f <CPU::detectFeatures()+0x1fb>
c00102f9:	50                   	push   eax
c00102fa:	50                   	push   eax
c00102fb:	68 dc 1a 02 c0       	push   0xc0021adc
c0010300:	55                   	push   ebp
c0010301:	e8 4a 04 ff ff       	call   c0000750 <strcmp>
c0010306:	83 c4 10             	add    esp,0x10
c0010309:	85 c0                	test   eax,eax
c001030b:	74 48                	je     c0010355 <CPU::detectFeatures()+0x241>
c001030d:	eb 0f                	jmp    c001031e <CPU::detectFeatures()+0x20a>
c001030f:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0010319:	e9 c1 01 00 00       	jmp    c00104df <CPU::detectFeatures()+0x3cb>
c001031e:	50                   	push   eax
c001031f:	50                   	push   eax
c0010320:	68 e9 1a 02 c0       	push   0xc0021ae9
c0010325:	55                   	push   ebp
c0010326:	e8 25 04 ff ff       	call   c0000750 <strcmp>
c001032b:	83 c4 10             	add    esp,0x10
c001032e:	85 c0                	test   eax,eax
c0010330:	74 23                	je     c0010355 <CPU::detectFeatures()+0x241>
c0010332:	57                   	push   edi
c0010333:	57                   	push   edi
c0010334:	68 f6 1a 02 c0       	push   0xc0021af6
c0010339:	55                   	push   ebp
c001033a:	e8 11 04 ff ff       	call   c0000750 <strcmp>
c001033f:	83 c4 10             	add    esp,0x10
c0010342:	85 c0                	test   eax,eax
c0010344:	75 1e                	jne    c0010364 <CPU::detectFeatures()+0x250>
c0010346:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010350:	e9 8a 01 00 00       	jmp    c00104df <CPU::detectFeatures()+0x3cb>
c0010355:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001035f:	e9 7b 01 00 00       	jmp    c00104df <CPU::detectFeatures()+0x3cb>
c0010364:	56                   	push   esi
c0010365:	56                   	push   esi
c0010366:	68 03 1b 02 c0       	push   0xc0021b03
c001036b:	55                   	push   ebp
c001036c:	e8 df 03 ff ff       	call   c0000750 <strcmp>
c0010371:	83 c4 10             	add    esp,0x10
c0010374:	85 c0                	test   eax,eax
c0010376:	75 0f                	jne    c0010387 <CPU::detectFeatures()+0x273>
c0010378:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0010382:	e9 58 01 00 00       	jmp    c00104df <CPU::detectFeatures()+0x3cb>
c0010387:	51                   	push   ecx
c0010388:	51                   	push   ecx
c0010389:	68 c2 1a 02 c0       	push   0xc0021ac2
c001038e:	55                   	push   ebp
c001038f:	e8 bc 03 ff ff       	call   c0000750 <strcmp>
c0010394:	83 c4 10             	add    esp,0x10
c0010397:	85 c0                	test   eax,eax
c0010399:	75 0f                	jne    c00103aa <CPU::detectFeatures()+0x296>
c001039b:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00103a5:	e9 35 01 00 00       	jmp    c00104df <CPU::detectFeatures()+0x3cb>
c00103aa:	52                   	push   edx
c00103ab:	52                   	push   edx
c00103ac:	68 10 1b 02 c0       	push   0xc0021b10
c00103b1:	55                   	push   ebp
c00103b2:	e8 99 03 ff ff       	call   c0000750 <strcmp>
c00103b7:	83 c4 10             	add    esp,0x10
c00103ba:	85 c0                	test   eax,eax
c00103bc:	75 0f                	jne    c00103cd <CPU::detectFeatures()+0x2b9>
c00103be:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00103c8:	e9 12 01 00 00       	jmp    c00104df <CPU::detectFeatures()+0x3cb>
c00103cd:	50                   	push   eax
c00103ce:	50                   	push   eax
c00103cf:	68 1d 1b 02 c0       	push   0xc0021b1d
c00103d4:	55                   	push   ebp
c00103d5:	e8 76 03 ff ff       	call   c0000750 <strcmp>
c00103da:	83 c4 10             	add    esp,0x10
c00103dd:	85 c0                	test   eax,eax
c00103df:	75 0f                	jne    c00103f0 <CPU::detectFeatures()+0x2dc>
c00103e1:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00103eb:	e9 ef 00 00 00       	jmp    c00104df <CPU::detectFeatures()+0x3cb>
c00103f0:	50                   	push   eax
c00103f1:	50                   	push   eax
c00103f2:	68 2a 1b 02 c0       	push   0xc0021b2a
c00103f7:	55                   	push   ebp
c00103f8:	e8 53 03 ff ff       	call   c0000750 <strcmp>
c00103fd:	83 c4 10             	add    esp,0x10
c0010400:	85 c0                	test   eax,eax
c0010402:	75 0f                	jne    c0010413 <CPU::detectFeatures()+0x2ff>
c0010404:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001040e:	e9 cc 00 00 00       	jmp    c00104df <CPU::detectFeatures()+0x3cb>
c0010413:	50                   	push   eax
c0010414:	50                   	push   eax
c0010415:	68 37 1b 02 c0       	push   0xc0021b37
c001041a:	55                   	push   ebp
c001041b:	e8 30 03 ff ff       	call   c0000750 <strcmp>
c0010420:	83 c4 10             	add    esp,0x10
c0010423:	85 c0                	test   eax,eax
c0010425:	75 0f                	jne    c0010436 <CPU::detectFeatures()+0x322>
c0010427:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0010431:	e9 a9 00 00 00       	jmp    c00104df <CPU::detectFeatures()+0x3cb>
c0010436:	50                   	push   eax
c0010437:	50                   	push   eax
c0010438:	68 44 1b 02 c0       	push   0xc0021b44
c001043d:	55                   	push   ebp
c001043e:	e8 0d 03 ff ff       	call   c0000750 <strcmp>
c0010443:	83 c4 10             	add    esp,0x10
c0010446:	85 c0                	test   eax,eax
c0010448:	75 0f                	jne    c0010459 <CPU::detectFeatures()+0x345>
c001044a:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0010454:	e9 86 00 00 00       	jmp    c00104df <CPU::detectFeatures()+0x3cb>
c0010459:	50                   	push   eax
c001045a:	50                   	push   eax
c001045b:	68 51 1b 02 c0       	push   0xc0021b51
c0010460:	55                   	push   ebp
c0010461:	e8 ea 02 ff ff       	call   c0000750 <strcmp>
c0010466:	83 c4 10             	add    esp,0x10
c0010469:	85 c0                	test   eax,eax
c001046b:	75 0c                	jne    c0010479 <CPU::detectFeatures()+0x365>
c001046d:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0010477:	eb 66                	jmp    c00104df <CPU::detectFeatures()+0x3cb>
c0010479:	50                   	push   eax
c001047a:	50                   	push   eax
c001047b:	68 5e 1b 02 c0       	push   0xc0021b5e
c0010480:	55                   	push   ebp
c0010481:	e8 ca 02 ff ff       	call   c0000750 <strcmp>
c0010486:	83 c4 10             	add    esp,0x10
c0010489:	85 c0                	test   eax,eax
c001048b:	75 0c                	jne    c0010499 <CPU::detectFeatures()+0x385>
c001048d:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0010497:	eb 46                	jmp    c00104df <CPU::detectFeatures()+0x3cb>
c0010499:	57                   	push   edi
c001049a:	57                   	push   edi
c001049b:	68 6b 1b 02 c0       	push   0xc0021b6b
c00104a0:	55                   	push   ebp
c00104a1:	e8 aa 02 ff ff       	call   c0000750 <strcmp>
c00104a6:	83 c4 10             	add    esp,0x10
c00104a9:	85 c0                	test   eax,eax
c00104ab:	74 e0                	je     c001048d <CPU::detectFeatures()+0x379>
c00104ad:	56                   	push   esi
c00104ae:	56                   	push   esi
c00104af:	68 78 1b 02 c0       	push   0xc0021b78
c00104b4:	55                   	push   ebp
c00104b5:	e8 96 02 ff ff       	call   c0000750 <strcmp>
c00104ba:	83 c4 10             	add    esp,0x10
c00104bd:	85 c0                	test   eax,eax
c00104bf:	74 cc                	je     c001048d <CPU::detectFeatures()+0x379>
c00104c1:	51                   	push   ecx
c00104c2:	51                   	push   ecx
c00104c3:	68 85 1b 02 c0       	push   0xc0021b85
c00104c8:	55                   	push   ebp
c00104c9:	e8 82 02 ff ff       	call   c0000750 <strcmp>
c00104ce:	83 c4 10             	add    esp,0x10
c00104d1:	85 c0                	test   eax,eax
c00104d3:	74 b8                	je     c001048d <CPU::detectFeatures()+0x379>
c00104d5:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00104df:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00104e4:	0f 86 be 00 00 00    	jbe    c00105a8 <CPU::detectFeatures()+0x494>
c00104ea:	83 ec 0c             	sub    esp,0xc
c00104ed:	68 80 00 00 00       	push   0x80
c00104f2:	e8 31 fb ff ff       	call   c0010028 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00104f7:	83 e0 01             	and    eax,0x1
c00104fa:	c1 e0 06             	shl    eax,0x6
c00104fd:	89 c2                	mov    edx,eax
c00104ff:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010505:	83 e0 bf             	and    eax,0xffffffbf
c0010508:	09 d0                	or     eax,edx
c001050a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010510:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0010517:	e8 0c fb ff ff       	call   c0010028 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001051c:	83 e0 01             	and    eax,0x1
c001051f:	c1 e0 04             	shl    eax,0x4
c0010522:	89 c2                	mov    edx,eax
c0010524:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001052a:	83 e0 ef             	and    eax,0xffffffef
c001052d:	09 d0                	or     eax,edx
c001052f:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010535:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001053c:	e8 e7 fa ff ff       	call   c0010028 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010541:	89 c2                	mov    edx,eax
c0010543:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010549:	c1 e2 07             	shl    edx,0x7
c001054c:	83 e0 7f             	and    eax,0x7f
c001054f:	09 d0                	or     eax,edx
c0010551:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010557:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001055e:	e8 f3 fa ff ff       	call   c0010056 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0010563:	83 e0 01             	and    eax,0x1
c0010566:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001056d:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010573:	83 e0 f7             	and    eax,0xfffffff7
c0010576:	09 d0                	or     eax,edx
c0010578:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001057e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0010585:	e8 cc fa ff ff       	call   c0010056 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001058a:	83 c4 10             	add    esp,0x10
c001058d:	83 e0 01             	and    eax,0x1
c0010590:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010597:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001059d:	83 e0 fb             	and    eax,0xfffffffb
c00105a0:	09 d0                	or     eax,edx
c00105a2:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00105a8:	83 ec 0c             	sub    esp,0xc
c00105ab:	8d 44 24 28          	lea    eax,[esp+0x28]
c00105af:	50                   	push   eax
c00105b0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00105b4:	50                   	push   eax
c00105b5:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00105b9:	57                   	push   edi
c00105ba:	8d 74 24 28          	lea    esi,[esp+0x28]
c00105be:	56                   	push   esi
c00105bf:	6a 01                	push   0x1
c00105c1:	e8 82 f9 ff ff       	call   c000ff48 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00105c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00105ca:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00105d0:	89 c1                	mov    ecx,eax
c00105d2:	83 e2 f0             	and    edx,0xfffffff0
c00105d5:	83 e1 0f             	and    ecx,0xf
c00105d8:	09 ca                	or     edx,ecx
c00105da:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00105e0:	89 c2                	mov    edx,eax
c00105e2:	c1 ea 04             	shr    edx,0x4
c00105e5:	83 e2 0f             	and    edx,0xf
c00105e8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00105ec:	89 d1                	mov    ecx,edx
c00105ee:	83 c4 20             	add    esp,0x20
c00105f1:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00105f7:	c1 e1 06             	shl    ecx,0x6
c00105fa:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c0010600:	09 ca                	or     edx,ecx
c0010602:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0010609:	89 c2                	mov    edx,eax
c001060b:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c0010611:	c1 ea 08             	shr    edx,0x8
c0010614:	83 e1 3f             	and    ecx,0x3f
c0010617:	83 e2 0f             	and    edx,0xf
c001061a:	89 d5                	mov    ebp,edx
c001061c:	83 e5 03             	and    ebp,0x3
c001061f:	c1 e5 06             	shl    ebp,0x6
c0010622:	09 e9                	or     ecx,ebp
c0010624:	89 d5                	mov    ebp,edx
c0010626:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c001062c:	c1 ed 02             	shr    ebp,0x2
c001062f:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c0010635:	83 e1 c0             	and    ecx,0xffffffc0
c0010638:	09 e9                	or     ecx,ebp
c001063a:	89 c5                	mov    ebp,eax
c001063c:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0010642:	c1 ed 08             	shr    ebp,0x8
c0010645:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c001064b:	83 e5 30             	and    ebp,0x30
c001064e:	83 e1 cf             	and    ecx,0xffffffcf
c0010651:	09 e9                	or     ecx,ebp
c0010653:	83 fa 06             	cmp    edx,0x6
c0010656:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c001065c:	74 05                	je     c0010663 <CPU::detectFeatures()+0x54f>
c001065e:	83 fa 0f             	cmp    edx,0xf
c0010661:	75 64                	jne    c00106c7 <CPU::detectFeatures()+0x5b3>
c0010663:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0010669:	89 c1                	mov    ecx,eax
c001066b:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c0010671:	c1 e9 10             	shr    ecx,0x10
c0010674:	c1 e1 04             	shl    ecx,0x4
c0010677:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c001067b:	0f b6 c9             	movzx  ecx,cl
c001067e:	c1 e1 06             	shl    ecx,0x6
c0010681:	09 e9                	or     ecx,ebp
c0010683:	83 fa 0f             	cmp    edx,0xf
c0010686:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c001068d:	75 38                	jne    c00106c7 <CPU::detectFeatures()+0x5b3>
c001068f:	c1 e8 14             	shr    eax,0x14
c0010692:	83 c0 0f             	add    eax,0xf
c0010695:	0f b6 c0             	movzx  eax,al
c0010698:	89 c2                	mov    edx,eax
c001069a:	c1 e8 02             	shr    eax,0x2
c001069d:	83 e2 03             	and    edx,0x3
c00106a0:	89 d1                	mov    ecx,edx
c00106a2:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00106a8:	c1 e1 06             	shl    ecx,0x6
c00106ab:	83 e2 3f             	and    edx,0x3f
c00106ae:	09 ca                	or     edx,ecx
c00106b0:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00106b6:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00106bc:	83 e2 c0             	and    edx,0xffffffc0
c00106bf:	09 d0                	or     eax,edx
c00106c1:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c00106c7:	83 ec 0c             	sub    esp,0xc
c00106ca:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00106d0:	83 c8 07             	or     eax,0x7
c00106d3:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00106d9:	8d 44 24 28          	lea    eax,[esp+0x28]
c00106dd:	50                   	push   eax
c00106de:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00106e2:	55                   	push   ebp
c00106e3:	57                   	push   edi
c00106e4:	56                   	push   esi
c00106e5:	68 00 00 00 80       	push   0x80000000
c00106ea:	e8 59 f8 ff ff       	call   c000ff48 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00106ef:	83 c4 20             	add    esp,0x20
c00106f2:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00106fa:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00106fe:	76 1e                	jbe    c001071e <CPU::detectFeatures()+0x60a>
c0010700:	83 ec 0c             	sub    esp,0xc
c0010703:	50                   	push   eax
c0010704:	55                   	push   ebp
c0010705:	57                   	push   edi
c0010706:	56                   	push   esi
c0010707:	68 01 00 00 80       	push   0x80000001
c001070c:	e8 37 f8 ff ff       	call   c000ff48 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010711:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c001071b:	83 c4 20             	add    esp,0x20
c001071e:	52                   	push   edx
c001071f:	52                   	push   edx
c0010720:	68 91 1b 02 c0       	push   0xc0021b91
c0010725:	53                   	push   ebx
c0010726:	e8 99 c0 ff ff       	call   c000c7c4 <Device::setName(char const*)>
c001072b:	83 c4 10             	add    esp,0x10
c001072e:	eb 69                	jmp    c0010799 <CPU::detectFeatures()+0x685>
c0010730:	50                   	push   eax
c0010731:	50                   	push   eax
c0010732:	68 f6 1a 02 c0       	push   0xc0021af6
c0010737:	55                   	push   ebp
c0010738:	e8 03 ff fe ff       	call   c0000640 <strcpy>
c001073d:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010747:	e8 77 fa fe ff       	call   c00001c3 <is486>
c001074c:	83 c4 10             	add    esp,0x10
c001074f:	85 c0                	test   eax,eax
c0010751:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010757:	74 1f                	je     c0010778 <CPU::detectFeatures()+0x664>
c0010759:	83 c8 07             	or     eax,0x7
c001075c:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010762:	0f 20 c0             	mov    eax,cr0
c0010765:	83 e0 14             	and    eax,0x14
c0010768:	83 f8 04             	cmp    eax,0x4
c001076b:	75 10                	jne    c001077d <CPU::detectFeatures()+0x669>
c001076d:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010773:	83 e0 fd             	and    eax,0xfffffffd
c0010776:	eb 1b                	jmp    c0010793 <CPU::detectFeatures()+0x67f>
c0010778:	83 e0 f8             	and    eax,0xfffffff8
c001077b:	eb df                	jmp    c001075c <CPU::detectFeatures()+0x648>
c001077d:	e8 1c fa fe ff       	call   c000019e <hasLegacyFPU>
c0010782:	83 e0 01             	and    eax,0x1
c0010785:	8d 14 00             	lea    edx,[eax+eax*1]
c0010788:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001078e:	83 e0 fd             	and    eax,0xfffffffd
c0010791:	09 d0                	or     eax,edx
c0010793:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010799:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c00107a0:	74 17                	je     c00107b9 <CPU::detectFeatures()+0x6a5>
c00107a2:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c00107a8:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c00107ae:	83 c8 10             	or     eax,0x10
c00107b1:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c00107b7:	eb 20                	jmp    c00107d9 <CPU::detectFeatures()+0x6c5>
c00107b9:	e8 e0 f9 fe ff       	call   c000019e <hasLegacyFPU>
c00107be:	83 e0 01             	and    eax,0x1
c00107c1:	8d 14 00             	lea    edx,[eax+eax*1]
c00107c4:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00107ca:	83 e0 fd             	and    eax,0xfffffffd
c00107cd:	09 d0                	or     eax,edx
c00107cf:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00107d5:	a8 02                	test   al,0x2
c00107d7:	75 c9                	jne    c00107a2 <CPU::detectFeatures()+0x68e>
c00107d9:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c00107e0:	83 c4 2c             	add    esp,0x2c
c00107e3:	5b                   	pop    ebx
c00107e4:	5e                   	pop    esi
c00107e5:	5f                   	pop    edi
c00107e6:	5d                   	pop    ebp
c00107e7:	c3                   	ret    

c00107e8 <CPU::setupSMEP()>:
c00107e8:	0f 20 e0             	mov    eax,cr4
c00107eb:	0d 00 00 10 00       	or     eax,0x100000
c00107f0:	0f 22 e0             	mov    cr4,eax
c00107f3:	c3                   	ret    

c00107f4 <CPU::setupUMIP()>:
c00107f4:	0f 20 e0             	mov    eax,cr4
c00107f7:	80 cc 08             	or     ah,0x8
c00107fa:	0f 22 e0             	mov    cr4,eax
c00107fd:	c3                   	ret    

c00107fe <CPU::setupTSC()>:
c00107fe:	0f 20 e0             	mov    eax,cr4
c0010801:	83 c8 04             	or     eax,0x4
c0010804:	0f 22 e0             	mov    cr4,eax
c0010807:	c3                   	ret    

c0010808 <CPU::setupLargePages()>:
c0010808:	0f 20 e0             	mov    eax,cr4
c001080b:	83 c8 10             	or     eax,0x10
c001080e:	0f 22 e0             	mov    cr4,eax
c0010811:	c3                   	ret    

c0010812 <CPU::setupPAT()>:
c0010812:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0010817:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c001081e:	74 2c                	je     c001084c <CPU::setupPAT()+0x3a>
c0010820:	53                   	push   ebx
c0010821:	83 ec 10             	sub    esp,0x10
c0010824:	68 77 02 00 00       	push   0x277
c0010829:	50                   	push   eax
c001082a:	e8 91 68 ff ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c001082f:	83 e2 f8             	and    edx,0xfffffff8
c0010832:	83 ca 01             	or     edx,0x1
c0010835:	52                   	push   edx
c0010836:	50                   	push   eax
c0010837:	68 77 02 00 00       	push   0x277
c001083c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0010842:	e8 a5 68 ff ff       	call   c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>
c0010847:	83 c4 28             	add    esp,0x28
c001084a:	5b                   	pop    ebx
c001084b:	c3                   	ret    
c001084c:	c3                   	ret    
c001084d:	90                   	nop

c001084e <CPU::setupMTRR()>:
c001084e:	c3                   	ret    
c001084f:	90                   	nop

c0010850 <CPU::setupGlobalPages()>:
c0010850:	0f 20 e0             	mov    eax,cr4
c0010853:	0c 80                	or     al,0x80
c0010855:	0f 22 e0             	mov    cr4,eax
c0010858:	c3                   	ret    
c0010859:	90                   	nop

c001085a <CPU::allowUsermodeDataAccess()>:
c001085a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001085e:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010865:	74 03                	je     c001086a <CPU::allowUsermodeDataAccess()+0x10>
c0010867:	0f 01 cb             	stac   
c001086a:	c3                   	ret    
c001086b:	90                   	nop

c001086c <CPU::prohibitUsermodeDataAccess()>:
c001086c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010870:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010877:	74 03                	je     c001087c <CPU::prohibitUsermodeDataAccess()+0x10>
c0010879:	0f 01 ca             	clac   
c001087c:	c3                   	ret    
c001087d:	90                   	nop

c001087e <CPU::setupSMAP()>:
c001087e:	0f 20 e0             	mov    eax,cr4
c0010881:	0d 00 00 20 00       	or     eax,0x200000
c0010886:	0f 22 e0             	mov    cr4,eax
c0010889:	eb e1                	jmp    c001086c <CPU::prohibitUsermodeDataAccess()>
c001088b:	90                   	nop

c001088c <CPU::setupFeatures()>:
c001088c:	53                   	push   ebx
c001088d:	83 ec 08             	sub    esp,0x8
c0010890:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010894:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c001089b:	74 18                	je     c00108b5 <CPU::setupFeatures()+0x29>
c001089d:	83 ec 0c             	sub    esp,0xc
c00108a0:	68 9d 1b 02 c0       	push   0xc0021b9d
c00108a5:	e8 9b a0 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00108aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00108ad:	e8 42 ff ff ff       	call   c00107f4 <CPU::setupUMIP()>
c00108b2:	83 c4 10             	add    esp,0x10
c00108b5:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c00108bc:	74 18                	je     c00108d6 <CPU::setupFeatures()+0x4a>
c00108be:	83 ec 0c             	sub    esp,0xc
c00108c1:	68 a7 1b 02 c0       	push   0xc0021ba7
c00108c6:	e8 7a a0 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00108cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00108ce:	e8 2b ff ff ff       	call   c00107fe <CPU::setupTSC()>
c00108d3:	83 c4 10             	add    esp,0x10
c00108d6:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c00108dd:	74 18                	je     c00108f7 <CPU::setupFeatures()+0x6b>
c00108df:	83 ec 0c             	sub    esp,0xc
c00108e2:	68 b0 1b 02 c0       	push   0xc0021bb0
c00108e7:	e8 59 a0 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00108ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00108ef:	e8 14 ff ff ff       	call   c0010808 <CPU::setupLargePages()>
c00108f4:	83 c4 10             	add    esp,0x10
c00108f7:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c00108fe:	74 18                	je     c0010918 <CPU::setupFeatures()+0x8c>
c0010900:	83 ec 0c             	sub    esp,0xc
c0010903:	68 b9 1b 02 c0       	push   0xc0021bb9
c0010908:	e8 38 a0 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001090d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010910:	e8 3b ff ff ff       	call   c0010850 <CPU::setupGlobalPages()>
c0010915:	83 c4 10             	add    esp,0x10
c0010918:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c001091f:	74 18                	je     c0010939 <CPU::setupFeatures()+0xad>
c0010921:	83 ec 0c             	sub    esp,0xc
c0010924:	68 cb 1b 02 c0       	push   0xc0021bcb
c0010929:	e8 17 a0 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001092e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010931:	e8 dc fe ff ff       	call   c0010812 <CPU::setupPAT()>
c0010936:	83 c4 10             	add    esp,0x10
c0010939:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010940:	74 11                	je     c0010953 <CPU::setupFeatures()+0xc7>
c0010942:	c7 44 24 10 d4 1b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021bd4
c001094a:	83 c4 08             	add    esp,0x8
c001094d:	5b                   	pop    ebx
c001094e:	e9 f2 9f ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c0010953:	83 c4 08             	add    esp,0x8
c0010956:	5b                   	pop    ebx
c0010957:	c3                   	ret    

c0010958 <CPU::open(int, int, void*)>:
c0010958:	55                   	push   ebp
c0010959:	57                   	push   edi
c001095a:	56                   	push   esi
c001095b:	53                   	push   ebx
c001095c:	83 ec 18             	sub    esp,0x18
c001095f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010963:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0010967:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001096b:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010971:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c0010977:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c001097d:	50                   	push   eax
c001097e:	e8 3b 6a ff ff       	call   c00073be <GDT::setup()>
c0010983:	83 c4 0c             	add    esp,0xc
c0010986:	6a 00                	push   0x0
c0010988:	68 ef be ad de       	push   0xdeadbeef
c001098d:	55                   	push   ebp
c001098e:	e8 f5 85 ff ff       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c0010993:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010996:	e8 cd 85 ff ff       	call   c0008f68 <TSS::flush()>
c001099b:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00109a1:	89 04 24             	mov    DWORD PTR [esp],eax
c00109a4:	e8 79 6c ff ff       	call   c0007622 <IDT::setup()>
c00109a9:	b8 00 04 00 00       	mov    eax,0x400
c00109ae:	0f 23 f8             	mov    db7,eax
c00109b1:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00109bb:	e8 ff 73 ff ff       	call   c0007dbf <Phys::allocatePage()>
c00109c0:	83 c4 10             	add    esp,0x10
c00109c3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00109c9:	85 f6                	test   esi,esi
c00109cb:	89 38                	mov    DWORD PTR [eax],edi
c00109cd:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00109d3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00109d6:	74 10                	je     c00109e8 <CPU::open(int, int, void*)+0x90>
c00109d8:	50                   	push   eax
c00109d9:	50                   	push   eax
c00109da:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00109e0:	56                   	push   esi
c00109e1:	e8 c8 8e ff ff       	call   c00098ae <VAS::setCPUSpecific(unsigned long)>
c00109e6:	eb 0d                	jmp    c00109f5 <CPU::open(int, int, void*)+0x9d>
c00109e8:	83 ec 0c             	sub    esp,0xc
c00109eb:	68 de 1b 02 c0       	push   0xc0021bde
c00109f0:	e8 74 08 00 00       	call   c0011269 <KePanic(char const*)>
c00109f5:	83 c4 10             	add    esp,0x10
c00109f8:	83 ec 0c             	sub    esp,0xc
c00109fb:	68 ec 1b 02 c0       	push   0xc0021bec
c0010a00:	e8 8e 01 00 00       	call   c0010b93 <KeSetBootMessage(char const*)>
c0010a05:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a08:	e8 07 f7 ff ff       	call   c0010114 <CPU::detectFeatures()>
c0010a0d:	c7 04 24 0f 1c 02 c0 	mov    DWORD PTR [esp],0xc0021c0f
c0010a14:	e8 7a 01 00 00       	call   c0010b93 <KeSetBootMessage(char const*)>
c0010a19:	e8 df 71 00 00       	call   c0017bfd <HalInitialise()>
c0010a1e:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c0010a23:	83 e0 10             	and    eax,0x10
c0010a26:	83 f8 01             	cmp    eax,0x1
c0010a29:	19 c0                	sbb    eax,eax
c0010a2b:	83 e0 46             	and    eax,0x46
c0010a2e:	83 c0 1e             	add    eax,0x1e
c0010a31:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a34:	e8 28 d6 ff ff       	call   c000e061 <setupTimer(int)>
c0010a39:	83 c4 10             	add    esp,0x10
c0010a3c:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010a42:	f6 05 d0 5e 02 c0 20 	test   BYTE PTR ds:0xc0025ed0,0x20
c0010a49:	74 0c                	je     c0010a57 <CPU::open(int, int, void*)+0xff>
c0010a4b:	83 ec 0c             	sub    esp,0xc
c0010a4e:	53                   	push   ebx
c0010a4f:	e8 38 fe ff ff       	call   c001088c <CPU::setupFeatures()>
c0010a54:	83 c4 10             	add    esp,0x10
c0010a57:	83 c4 0c             	add    esp,0xc
c0010a5a:	31 c0                	xor    eax,eax
c0010a5c:	5b                   	pop    ebx
c0010a5d:	5e                   	pop    esi
c0010a5e:	5f                   	pop    edi
c0010a5f:	5d                   	pop    ebp
c0010a60:	c3                   	ret    

c0010a61 <KeInitialiseAtexit()>:
c0010a61:	83 ec 10             	sub    esp,0x10
c0010a64:	c7 05 a0 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028da0,0x0
c0010a6e:	6a 60                	push   0x60
c0010a70:	6a 00                	push   0x0
c0010a72:	68 20 8e 02 c0       	push   0xc0028e20
c0010a77:	e8 74 fa fe ff       	call   c00004f0 <memset>
c0010a7c:	83 c4 1c             	add    esp,0x1c
c0010a7f:	c3                   	ret    

c0010a80 <KeRegisterAtexit(void (*)(void*), void*)>:
c0010a80:	a1 a0 8d 02 c0       	mov    eax,ds:0xc0028da0
c0010a85:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010a89:	89 14 85 20 8e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd71e0],edx
c0010a90:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010a94:	89 14 85 c0 8d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7240],edx
c0010a9b:	40                   	inc    eax
c0010a9c:	a3 a0 8d 02 c0       	mov    ds:0xc0028da0,eax
c0010aa1:	83 f8 17             	cmp    eax,0x17
c0010aa4:	7e 0d                	jle    c0010ab3 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010aa6:	c7 44 24 04 50 1c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021c50
c0010aae:	e9 b6 07 00 00       	jmp    c0011269 <KePanic(char const*)>
c0010ab3:	c3                   	ret    

c0010ab4 <KeExecuteAtexit()>:
c0010ab4:	53                   	push   ebx
c0010ab5:	31 db                	xor    ebx,ebx
c0010ab7:	83 ec 08             	sub    esp,0x8
c0010aba:	39 1d a0 8d 02 c0    	cmp    DWORD PTR ds:0xc0028da0,ebx
c0010ac0:	7e 50                	jle    c0010b12 <KeExecuteAtexit()+0x5e>
c0010ac2:	8b 04 9d 20 8e 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd71e0]
c0010ac9:	85 c0                	test   eax,eax
c0010acb:	74 42                	je     c0010b0f <KeExecuteAtexit()+0x5b>
c0010acd:	51                   	push   ecx
c0010ace:	50                   	push   eax
c0010acf:	53                   	push   ebx
c0010ad0:	68 69 1c 02 c0       	push   0xc0021c69
c0010ad5:	e8 6b 9e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010ada:	58                   	pop    eax
c0010adb:	ff 34 9d c0 8d 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7240]
c0010ae2:	ff 14 9d 20 8e 02 c0 	call   DWORD PTR [ebx*4-0x3ffd71e0]
c0010ae9:	c7 04 24 8b 1c 02 c0 	mov    DWORD PTR [esp],0xc0021c8b
c0010af0:	e8 50 9e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010af5:	c7 04 24 eb 2d 02 c0 	mov    DWORD PTR [esp],0xc0022deb
c0010afc:	c7 04 9d 20 8e 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd71e0],0x0
c0010b07:	e8 39 9e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010b0c:	83 c4 10             	add    esp,0x10
c0010b0f:	43                   	inc    ebx
c0010b10:	eb a8                	jmp    c0010aba <KeExecuteAtexit()+0x6>
c0010b12:	83 c4 08             	add    esp,0x8
c0010b15:	5b                   	pop    ebx
c0010b16:	c3                   	ret    

c0010b17 <KeDisplaySplashScreen()>:
c0010b17:	55                   	push   ebp
c0010b18:	bd 05 00 00 00       	mov    ebp,0x5
c0010b1d:	57                   	push   edi
c0010b1e:	bf 0a 00 00 00       	mov    edi,0xa
c0010b23:	56                   	push   esi
c0010b24:	31 f6                	xor    esi,esi
c0010b26:	53                   	push   ebx
c0010b27:	31 db                	xor    ebx,ebx
c0010b29:	83 ec 0c             	sub    esp,0xc
c0010b2c:	0f b6 96 40 30 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdcfc0]
c0010b33:	89 d0                	mov    eax,edx
c0010b35:	85 d2                	test   edx,edx
c0010b37:	74 52                	je     c0010b8b <KeDisplaySplashScreen()+0x74>
c0010b39:	80 bb 76 30 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdcf8a],0xdb
c0010b40:	75 13                	jne    c0010b55 <KeDisplaySplashScreen()+0x3e>
c0010b42:	0f b6 8b 75 30 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdcf8b]
c0010b49:	83 e1 fe             	and    ecx,0xfffffffe
c0010b4c:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010b52:	75 01                	jne    c0010b55 <KeDisplaySplashScreen()+0x3e>
c0010b54:	47                   	inc    edi
c0010b55:	83 fa 0d             	cmp    edx,0xd
c0010b58:	74 28                	je     c0010b82 <KeDisplaySplashScreen()+0x6b>
c0010b5a:	83 fa 0a             	cmp    edx,0xa
c0010b5d:	75 0a                	jne    c0010b69 <KeDisplaySplashScreen()+0x52>
c0010b5f:	45                   	inc    ebp
c0010b60:	bf 0a 00 00 00       	mov    edi,0xa
c0010b65:	31 db                	xor    ebx,ebx
c0010b67:	eb 19                	jmp    c0010b82 <KeDisplaySplashScreen()+0x6b>
c0010b69:	83 ec 0c             	sub    esp,0xc
c0010b6c:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010b6f:	55                   	push   ebp
c0010b70:	0f be c0             	movsx  eax,al
c0010b73:	52                   	push   edx
c0010b74:	43                   	inc    ebx
c0010b75:	6a 00                	push   0x0
c0010b77:	6a 0e                	push   0xe
c0010b79:	50                   	push   eax
c0010b7a:	e8 fd 7c 00 00       	call   c001887c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010b7f:	83 c4 20             	add    esp,0x20
c0010b82:	46                   	inc    esi
c0010b83:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010b89:	75 a1                	jne    c0010b2c <KeDisplaySplashScreen()+0x15>
c0010b8b:	83 c4 0c             	add    esp,0xc
c0010b8e:	5b                   	pop    ebx
c0010b8f:	5e                   	pop    esi
c0010b90:	5f                   	pop    edi
c0010b91:	5d                   	pop    ebp
c0010b92:	c3                   	ret    

c0010b93 <KeSetBootMessage(char const*)>:
c0010b93:	57                   	push   edi
c0010b94:	56                   	push   esi
c0010b95:	53                   	push   ebx
c0010b96:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010b9c:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010ba3:	68 9e 00 00 00       	push   0x9e
c0010ba8:	6a 00                	push   0x0
c0010baa:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010bae:	56                   	push   esi
c0010baf:	e8 3c f9 fe ff       	call   c00004f0 <memset>
c0010bb4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010bb7:	e8 b4 f9 fe ff       	call   c0000570 <strlen>
c0010bbc:	ba 50 00 00 00       	mov    edx,0x50
c0010bc1:	83 c4 10             	add    esp,0x10
c0010bc4:	29 c2                	sub    edx,eax
c0010bc6:	31 c9                	xor    ecx,ecx
c0010bc8:	83 e2 fe             	and    edx,0xfffffffe
c0010bcb:	01 f2                	add    edx,esi
c0010bcd:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010bd2:	84 c0                	test   al,al
c0010bd4:	74 0a                	je     c0010be0 <KeSetBootMessage(char const*)+0x4d>
c0010bd6:	80 cc 0f             	or     ah,0xf
c0010bd9:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010bdd:	41                   	inc    ecx
c0010bde:	eb ed                	jmp    c0010bcd <KeSetBootMessage(char const*)+0x3a>
c0010be0:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010be5:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010bea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010bec:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010bf2:	5b                   	pop    ebx
c0010bf3:	5e                   	pop    esi
c0010bf4:	5f                   	pop    edi
c0010bf5:	c3                   	ret    
c0010bf6:	66 90                	xchg   ax,ax

c0010bf8 <Krnl::handlePowerButton()>:
c0010bf8:	83 ec 0c             	sub    esp,0xc
c0010bfb:	e8 c4 06 00 00       	call   c00112c4 <KeHandlePowerButton()>
c0010c00:	90                   	nop
c0010c01:	83 c4 0c             	add    esp,0xc
c0010c04:	c3                   	ret    
c0010c05:	8d 76 00             	lea    esi,[esi+0x0]

c0010c08 <Krnl::handleSleepButton()>:
c0010c08:	83 ec 0c             	sub    esp,0xc
c0010c0b:	e8 e9 06 00 00       	call   c00112f9 <KeHandleSleepButton()>
c0010c10:	90                   	nop
c0010c11:	83 c4 0c             	add    esp,0xc
c0010c14:	c3                   	ret    
c0010c15:	90                   	nop

c0010c16 <EnvVarContainer::getEnv(char const*)>:
c0010c16:	57                   	push   edi
c0010c17:	56                   	push   esi
c0010c18:	53                   	push   ebx
c0010c19:	31 db                	xor    ebx,ebx
c0010c1b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010c1f:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010c21:	7e 2b                	jle    c0010c4e <EnvVarContainer::getEnv(char const*)+0x38>
c0010c23:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010c2a:	50                   	push   eax
c0010c2b:	50                   	push   eax
c0010c2c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010c2f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010c32:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010c36:	e8 15 fb fe ff       	call   c0000750 <strcmp>
c0010c3b:	83 c4 10             	add    esp,0x10
c0010c3e:	85 c0                	test   eax,eax
c0010c40:	75 09                	jne    c0010c4b <EnvVarContainer::getEnv(char const*)+0x35>
c0010c42:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010c45:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010c49:	eb 05                	jmp    c0010c50 <EnvVarContainer::getEnv(char const*)+0x3a>
c0010c4b:	43                   	inc    ebx
c0010c4c:	eb d1                	jmp    c0010c1f <EnvVarContainer::getEnv(char const*)+0x9>
c0010c4e:	31 c0                	xor    eax,eax
c0010c50:	5b                   	pop    ebx
c0010c51:	5e                   	pop    esi
c0010c52:	5f                   	pop    edi
c0010c53:	c3                   	ret    

c0010c54 <EnvVarContainer::setEnv(char const*, char const*)>:
c0010c54:	55                   	push   ebp
c0010c55:	57                   	push   edi
c0010c56:	56                   	push   esi
c0010c57:	53                   	push   ebx
c0010c58:	83 ec 28             	sub    esp,0x28
c0010c5b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010c5f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010c63:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010c67:	56                   	push   esi
c0010c68:	e8 03 f9 fe ff       	call   c0000570 <strlen>
c0010c6d:	40                   	inc    eax
c0010c6e:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c71:	e8 40 6e ff ff       	call   c0007ab6 <malloc>
c0010c76:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010c7d:	e8 ee f8 fe ff       	call   c0000570 <strlen>
c0010c82:	40                   	inc    eax
c0010c83:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c86:	e8 2b 6e ff ff       	call   c0007ab6 <malloc>
c0010c8b:	89 34 24             	mov    DWORD PTR [esp],esi
c0010c8e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010c92:	e8 d9 f8 fe ff       	call   c0000570 <strlen>
c0010c97:	83 c4 0c             	add    esp,0xc
c0010c9a:	40                   	inc    eax
c0010c9b:	50                   	push   eax
c0010c9c:	6a 00                	push   0x0
c0010c9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010ca2:	e8 49 f8 fe ff       	call   c00004f0 <memset>
c0010ca7:	89 34 24             	mov    DWORD PTR [esp],esi
c0010caa:	e8 c1 f8 fe ff       	call   c0000570 <strlen>
c0010caf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010cb3:	8d 48 01             	lea    ecx,[eax+0x1]
c0010cb6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010cb8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cbb:	89 de                	mov    esi,ebx
c0010cbd:	e8 ae f8 fe ff       	call   c0000570 <strlen>
c0010cc2:	83 c4 0c             	add    esp,0xc
c0010cc5:	40                   	inc    eax
c0010cc6:	50                   	push   eax
c0010cc7:	6a 00                	push   0x0
c0010cc9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010ccd:	e8 1e f8 fe ff       	call   c00004f0 <memset>
c0010cd2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cd5:	e8 96 f8 fe ff       	call   c0000570 <strlen>
c0010cda:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010cde:	8d 48 01             	lea    ecx,[eax+0x1]
c0010ce1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010ce3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010ce6:	40                   	inc    eax
c0010ce7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010cea:	c1 e0 03             	shl    eax,0x3
c0010ced:	5a                   	pop    edx
c0010cee:	59                   	pop    ecx
c0010cef:	50                   	push   eax
c0010cf0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010cf3:	e8 aa 6d ff ff       	call   c0007aa2 <realloc>
c0010cf8:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010cfc:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010cff:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010d02:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010d06:	b9 08 00 00 00       	mov    ecx,0x8
c0010d0b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d0d:	83 c4 2c             	add    esp,0x2c
c0010d10:	5b                   	pop    ebx
c0010d11:	5e                   	pop    esi
c0010d12:	5f                   	pop    edi
c0010d13:	5d                   	pop    ebp
c0010d14:	c3                   	ret    
c0010d15:	90                   	nop

c0010d16 <EnvVarContainer::deleteEnv(char const*)>:
c0010d16:	c3                   	ret    
c0010d17:	90                   	nop

c0010d18 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010d18:	55                   	push   ebp
c0010d19:	57                   	push   edi
c0010d1a:	56                   	push   esi
c0010d1b:	53                   	push   ebx
c0010d1c:	81 ec 38 01 00 00    	sub    esp,0x138
c0010d22:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010d29:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010d30:	68 14 01 00 00       	push   0x114
c0010d35:	e8 7c 6d ff ff       	call   c0007ab6 <malloc>
c0010d3a:	83 c4 0c             	add    esp,0xc
c0010d3d:	89 c3                	mov    ebx,eax
c0010d3f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010d42:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010d49:	50                   	push   eax
c0010d4a:	e8 e1 a9 ff ff       	call   c000b730 <File::File(char const*, Process*)>
c0010d4f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d52:	e8 59 ad ff ff       	call   c000bab0 <File::exists()>
c0010d57:	83 c4 10             	add    esp,0x10
c0010d5a:	84 c0                	test   al,al
c0010d5c:	75 31                	jne    c0010d8f <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0010d5e:	50                   	push   eax
c0010d5f:	50                   	push   eax
c0010d60:	6a 12                	push   0x12
c0010d62:	53                   	push   ebx
c0010d63:	e8 84 aa ff ff       	call   c000b7ec <File::open(FileOpenMode)>
c0010d68:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010d6a:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0010d6d:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d70:	e8 fb f7 fe ff       	call   c0000570 <strlen>
c0010d75:	5a                   	pop    edx
c0010d76:	31 d2                	xor    edx,edx
c0010d78:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010d7c:	51                   	push   ecx
c0010d7d:	56                   	push   esi
c0010d7e:	52                   	push   edx
c0010d7f:	50                   	push   eax
c0010d80:	53                   	push   ebx
c0010d81:	ff d7                	call   edi
c0010d83:	83 c4 14             	add    esp,0x14
c0010d86:	53                   	push   ebx
c0010d87:	e8 be aa ff ff       	call   c000b84a <File::close()>
c0010d8c:	83 c4 10             	add    esp,0x10
c0010d8f:	56                   	push   esi
c0010d90:	31 f6                	xor    esi,esi
c0010d92:	68 00 01 00 00       	push   0x100
c0010d97:	6a 00                	push   0x0
c0010d99:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010d9d:	50                   	push   eax
c0010d9e:	e8 4d f7 fe ff       	call   c00004f0 <memset>
c0010da3:	5f                   	pop    edi
c0010da4:	58                   	pop    eax
c0010da5:	6a 01                	push   0x1
c0010da7:	53                   	push   ebx
c0010da8:	e8 3f aa ff ff       	call   c000b7ec <File::open(FileOpenMode)>
c0010dad:	83 c4 10             	add    esp,0x10
c0010db0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010db8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010dc0:	83 ec 0c             	sub    esp,0xc
c0010dc3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010dc5:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010dc9:	51                   	push   ecx
c0010dca:	8d 54 24 23          	lea    edx,[esp+0x23]
c0010dce:	52                   	push   edx
c0010dcf:	6a 00                	push   0x0
c0010dd1:	6a 01                	push   0x1
c0010dd3:	53                   	push   ebx
c0010dd4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010dd7:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c0010ddc:	83 c4 20             	add    esp,0x20
c0010ddf:	89 c2                	mov    edx,eax
c0010de1:	85 c0                	test   eax,eax
c0010de3:	0f 84 36 01 00 00    	je     c0010f1f <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c0010de9:	83 f8 0d             	cmp    eax,0xd
c0010dec:	0f 84 22 01 00 00    	je     c0010f14 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010df2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010df7:	0f 84 f0 00 00 00    	je     c0010eed <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c0010dfd:	83 f8 0a             	cmp    eax,0xa
c0010e00:	74 13                	je     c0010e15 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010e02:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010e07:	74 0c                	je     c0010e15 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010e09:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010e0f:	0f 8e f6 00 00 00    	jle    c0010f0b <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c0010e15:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e19:	83 ec 0c             	sub    esp,0xc
c0010e1c:	8d 78 01             	lea    edi,[eax+0x1]
c0010e1f:	57                   	push   edi
c0010e20:	e8 91 6c ff ff       	call   c0007ab6 <malloc>
c0010e25:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010e29:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010e2d:	8d 56 04             	lea    edx,[esi+0x4]
c0010e30:	89 14 24             	mov    DWORD PTR [esp],edx
c0010e33:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010e37:	e8 7a 6c ff ff       	call   c0007ab6 <malloc>
c0010e3c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010e40:	83 c4 0c             	add    esp,0xc
c0010e43:	57                   	push   edi
c0010e44:	6a 00                	push   0x0
c0010e46:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010e4a:	e8 a1 f6 fe ff       	call   c00004f0 <memset>
c0010e4f:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010e53:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010e57:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010e5b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e5d:	83 c4 0c             	add    esp,0xc
c0010e60:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010e64:	52                   	push   edx
c0010e65:	6a 00                	push   0x0
c0010e67:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010e6b:	e8 80 f6 fe ff       	call   c00004f0 <memset>
c0010e70:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010e74:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010e78:	89 34 24             	mov    DWORD PTR [esp],esi
c0010e7b:	e8 f0 f6 fe ff       	call   c0000570 <strlen>
c0010e80:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0010e84:	89 c1                	mov    ecx,eax
c0010e86:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e88:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010e8b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0010e8e:	40                   	inc    eax
c0010e8f:	83 c4 10             	add    esp,0x10
c0010e92:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010e95:	85 d2                	test   edx,edx
c0010e97:	75 0c                	jne    c0010ea5 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c0010e99:	83 ec 0c             	sub    esp,0xc
c0010e9c:	6a 08                	push   0x8
c0010e9e:	e8 13 6c ff ff       	call   c0007ab6 <malloc>
c0010ea3:	eb 0c                	jmp    c0010eb1 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c0010ea5:	c1 e0 03             	shl    eax,0x3
c0010ea8:	51                   	push   ecx
c0010ea9:	51                   	push   ecx
c0010eaa:	50                   	push   eax
c0010eab:	52                   	push   edx
c0010eac:	e8 f1 6b ff ff       	call   c0007aa2 <realloc>
c0010eb1:	83 c4 10             	add    esp,0x10
c0010eb4:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010eb7:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010eba:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0010ebd:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010ec1:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010ec5:	b9 08 00 00 00       	mov    ecx,0x8
c0010eca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010ecc:	31 f6                	xor    esi,esi
c0010ece:	50                   	push   eax
c0010ecf:	68 00 01 00 00       	push   0x100
c0010ed4:	6a 00                	push   0x0
c0010ed6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010eda:	50                   	push   eax
c0010edb:	e8 10 f6 fe ff       	call   c00004f0 <memset>
c0010ee0:	83 c4 10             	add    esp,0x10
c0010ee3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010eeb:	eb 27                	jmp    c0010f14 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010eed:	83 f8 3d             	cmp    eax,0x3d
c0010ef0:	74 1e                	je     c0010f10 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0010ef2:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010ef8:	7f 07                	jg     c0010f01 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c0010efa:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c0010efe:	46                   	inc    esi
c0010eff:	eb 13                	jmp    c0010f14 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010f01:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0010f09:	eb 09                	jmp    c0010f14 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010f0b:	83 f8 3d             	cmp    eax,0x3d
c0010f0e:	75 ea                	jne    c0010efa <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c0010f10:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0010f14:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010f19:	0f 85 99 fe ff ff    	jne    c0010db8 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0010f1f:	83 ec 0c             	sub    esp,0xc
c0010f22:	53                   	push   ebx
c0010f23:	e8 22 a9 ff ff       	call   c000b84a <File::close()>
c0010f28:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010f2a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f2d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010f30:	81 c4 3c 01 00 00    	add    esp,0x13c
c0010f36:	5b                   	pop    ebx
c0010f37:	5e                   	pop    esi
c0010f38:	5f                   	pop    edi
c0010f39:	5d                   	pop    ebp
c0010f3a:	c3                   	ret    
c0010f3b:	90                   	nop

c0010f3c <EnvVarContainer::__loadSystem()>:
c0010f3c:	83 ec 10             	sub    esp,0x10
c0010f3f:	68 a0 31 02 c0       	push   0xc00231a0
c0010f44:	68 90 1c 02 c0       	push   0xc0021c90
c0010f49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f4d:	e8 c6 fd ff ff       	call   c0010d18 <EnvVarContainer::loadFrom(char const*, char const*)>
c0010f52:	83 c4 1c             	add    esp,0x1c
c0010f55:	c3                   	ret    

c0010f56 <EnvVarContainer::__loadUser()>:
c0010f56:	c3                   	ret    
c0010f57:	90                   	nop

c0010f58 <EnvVarContainer::EnvVarContainer(Process*)>:
c0010f58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f5c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010f62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f66:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f6a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010f6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f71:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010f78:	90                   	nop
c0010f79:	c3                   	ret    

c0010f7a <EnvVarContainer::~EnvVarContainer()>:
c0010f7a:	83 ec 0c             	sub    esp,0xc
c0010f7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f81:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f84:	85 c0                	test   eax,eax
c0010f86:	74 1d                	je     c0010fa5 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010f88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f8e:	85 c0                	test   eax,eax
c0010f90:	74 13                	je     c0010fa5 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010f92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f99:	83 ec 0c             	sub    esp,0xc
c0010f9c:	50                   	push   eax
c0010f9d:	e8 24 6b ff ff       	call   c0007ac6 <free>
c0010fa2:	83 c4 10             	add    esp,0x10
c0010fa5:	90                   	nop
c0010fa6:	83 c4 0c             	add    esp,0xc
c0010fa9:	c3                   	ret    

c0010faa <KeGetEnv(Process*, char const*)>:
c0010faa:	53                   	push   ebx
c0010fab:	83 ec 08             	sub    esp,0x8
c0010fae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fb2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010fb6:	39 05 f0 96 02 c0    	cmp    DWORD PTR ds:0xc00296f0,eax
c0010fbc:	74 04                	je     c0010fc2 <KeGetEnv(Process*, char const*)+0x18>
c0010fbe:	85 c0                	test   eax,eax
c0010fc0:	75 0b                	jne    c0010fcd <KeGetEnv(Process*, char const*)+0x23>
c0010fc2:	a1 80 8e 02 c0       	mov    eax,ds:0xc0028e80
c0010fc7:	85 c0                	test   eax,eax
c0010fc9:	75 19                	jne    c0010fe4 <KeGetEnv(Process*, char const*)+0x3a>
c0010fcb:	eb 27                	jmp    c0010ff4 <KeGetEnv(Process*, char const*)+0x4a>
c0010fcd:	52                   	push   edx
c0010fce:	52                   	push   edx
c0010fcf:	53                   	push   ebx
c0010fd0:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0010fd6:	e8 3b fc ff ff       	call   c0010c16 <EnvVarContainer::getEnv(char const*)>
c0010fdb:	83 c4 10             	add    esp,0x10
c0010fde:	85 c0                	test   eax,eax
c0010fe0:	75 28                	jne    c001100a <KeGetEnv(Process*, char const*)+0x60>
c0010fe2:	eb de                	jmp    c0010fc2 <KeGetEnv(Process*, char const*)+0x18>
c0010fe4:	52                   	push   edx
c0010fe5:	52                   	push   edx
c0010fe6:	53                   	push   ebx
c0010fe7:	50                   	push   eax
c0010fe8:	e8 29 fc ff ff       	call   c0010c16 <EnvVarContainer::getEnv(char const*)>
c0010fed:	83 c4 10             	add    esp,0x10
c0010ff0:	85 c0                	test   eax,eax
c0010ff2:	75 16                	jne    c001100a <KeGetEnv(Process*, char const*)+0x60>
c0010ff4:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010ff8:	a1 84 8e 02 c0       	mov    eax,ds:0xc0028e84
c0010ffd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011001:	83 c4 08             	add    esp,0x8
c0011004:	5b                   	pop    ebx
c0011005:	e9 0c fc ff ff       	jmp    c0010c16 <EnvVarContainer::getEnv(char const*)>
c001100a:	83 c4 08             	add    esp,0x8
c001100d:	5b                   	pop    ebx
c001100e:	c3                   	ret    

c001100f <KeSetEnvSystem(char const*, char const*)>:
c001100f:	83 ec 10             	sub    esp,0x10
c0011012:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011016:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001101a:	ff 35 84 8e 02 c0    	push   DWORD PTR ds:0xc0028e84
c0011020:	e8 2f fc ff ff       	call   c0010c54 <EnvVarContainer::setEnv(char const*, char const*)>
c0011025:	83 c4 1c             	add    esp,0x1c
c0011028:	c3                   	ret    

c0011029 <KeSetEnvUser(char const*, char const*)>:
c0011029:	a1 80 8e 02 c0       	mov    eax,ds:0xc0028e80
c001102e:	85 c0                	test   eax,eax
c0011030:	74 15                	je     c0011047 <KeSetEnvUser(char const*, char const*)+0x1e>
c0011032:	83 ec 10             	sub    esp,0x10
c0011035:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011039:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001103d:	50                   	push   eax
c001103e:	e8 11 fc ff ff       	call   c0010c54 <EnvVarContainer::setEnv(char const*, char const*)>
c0011043:	83 c4 1c             	add    esp,0x1c
c0011046:	c3                   	ret    
c0011047:	c3                   	ret    

c0011048 <KeSetEnvProcess(Process*, char const*, char const*)>:
c0011048:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001104c:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0011052:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011056:	e9 f9 fb ff ff       	jmp    c0010c54 <EnvVarContainer::setEnv(char const*, char const*)>

c001105b <KeDeleteEnvSystem(char const*)>:
c001105b:	c3                   	ret    

c001105c <KeDeleteEnvUser(char const*)>:
c001105c:	c3                   	ret    

c001105d <KeDeleteEnvProcess(Process*, char const*)>:
c001105d:	c3                   	ret    

c001105e <KeNewProcessEnv(Process*)>:
c001105e:	83 ec 28             	sub    esp,0x28
c0011061:	6a 0c                	push   0xc
c0011063:	e8 4e 6a ff ff       	call   c0007ab6 <malloc>
c0011068:	5a                   	pop    edx
c0011069:	59                   	pop    ecx
c001106a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001106e:	50                   	push   eax
c001106f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011073:	e8 e0 fe ff ff       	call   c0010f58 <EnvVarContainer::EnvVarContainer(Process*)>
c0011078:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001107c:	83 c4 2c             	add    esp,0x2c
c001107f:	c3                   	ret    

c0011080 <KeCopyProcessEnv(Process*, Process*)>:
c0011080:	57                   	push   edi
c0011081:	56                   	push   esi
c0011082:	53                   	push   ebx
c0011083:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011087:	83 ec 0c             	sub    esp,0xc
c001108a:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0011090:	6a 0c                	push   0xc
c0011092:	e8 1f 6a ff ff       	call   c0007ab6 <malloc>
c0011097:	89 c3                	mov    ebx,eax
c0011099:	58                   	pop    eax
c001109a:	5a                   	pop    edx
c001109b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001109f:	53                   	push   ebx
c00110a0:	e8 b3 fe ff ff       	call   c0010f58 <EnvVarContainer::EnvVarContainer(Process*)>
c00110a5:	8b 07                	mov    eax,DWORD PTR [edi]
c00110a7:	89 03                	mov    DWORD PTR [ebx],eax
c00110a9:	c1 e0 03             	shl    eax,0x3
c00110ac:	89 04 24             	mov    DWORD PTR [esp],eax
c00110af:	e8 02 6a ff ff       	call   c0007ab6 <malloc>
c00110b4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00110b7:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00110b9:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00110bc:	c1 e1 03             	shl    ecx,0x3
c00110bf:	89 c7                	mov    edi,eax
c00110c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00110c3:	83 c4 10             	add    esp,0x10
c00110c6:	89 d8                	mov    eax,ebx
c00110c8:	5b                   	pop    ebx
c00110c9:	5e                   	pop    esi
c00110ca:	5f                   	pop    edi
c00110cb:	c3                   	ret    

c00110cc <KeLoadSystemEnv()>:
c00110cc:	53                   	push   ebx
c00110cd:	83 ec 14             	sub    esp,0x14
c00110d0:	6a 0c                	push   0xc
c00110d2:	e8 df 69 ff ff       	call   c0007ab6 <malloc>
c00110d7:	89 c3                	mov    ebx,eax
c00110d9:	58                   	pop    eax
c00110da:	5a                   	pop    edx
c00110db:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c00110e1:	53                   	push   ebx
c00110e2:	e8 71 fe ff ff       	call   c0010f58 <EnvVarContainer::EnvVarContainer(Process*)>
c00110e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00110ea:	89 1d 84 8e 02 c0    	mov    DWORD PTR ds:0xc0028e84,ebx
c00110f0:	e8 47 fe ff ff       	call   c0010f3c <EnvVarContainer::__loadSystem()>
c00110f5:	83 c4 18             	add    esp,0x18
c00110f8:	5b                   	pop    ebx
c00110f9:	c3                   	ret    

c00110fa <KeLoadUserEnv()>:
c00110fa:	53                   	push   ebx
c00110fb:	83 ec 14             	sub    esp,0x14
c00110fe:	6a 0c                	push   0xc
c0011100:	e8 b1 69 ff ff       	call   c0007ab6 <malloc>
c0011105:	89 c3                	mov    ebx,eax
c0011107:	58                   	pop    eax
c0011108:	5a                   	pop    edx
c0011109:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001110f:	53                   	push   ebx
c0011110:	e8 43 fe ff ff       	call   c0010f58 <EnvVarContainer::EnvVarContainer(Process*)>
c0011115:	89 1d 80 8e 02 c0    	mov    DWORD PTR ds:0xc0028e80,ebx
c001111b:	83 c4 18             	add    esp,0x18
c001111e:	5b                   	pop    ebx
c001111f:	c3                   	ret    

c0011120 <KeFlushEnv()>:
c0011120:	c3                   	ret    

c0011121 <KeGetProcessTotalEnvCount(Process*)>:
c0011121:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011125:	8b 15 80 8e 02 c0    	mov    edx,DWORD PTR ds:0xc0028e80
c001112b:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0011131:	a1 84 8e 02 c0       	mov    eax,ds:0xc0028e84
c0011136:	8b 00                	mov    eax,DWORD PTR [eax]
c0011138:	03 01                	add    eax,DWORD PTR [ecx]
c001113a:	85 d2                	test   edx,edx
c001113c:	74 02                	je     c0011140 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c001113e:	03 02                	add    eax,DWORD PTR [edx]
c0011140:	c3                   	ret    

c0011141 <KeGetProcessEnvPair(Process*, int)>:
c0011141:	57                   	push   edi
c0011142:	56                   	push   esi
c0011143:	8b 35 80 8e 02 c0    	mov    esi,DWORD PTR ds:0xc0028e80
c0011149:	53                   	push   ebx
c001114a:	85 f6                	test   esi,esi
c001114c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011150:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011154:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001115a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001115e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011160:	75 16                	jne    c0011178 <KeGetProcessEnvPair(Process*, int)+0x37>
c0011162:	39 c2                	cmp    edx,eax
c0011164:	7c 16                	jl     c001117c <KeGetProcessEnvPair(Process*, int)+0x3b>
c0011166:	8b 0d 84 8e 02 c0    	mov    ecx,DWORD PTR ds:0xc0028e84
c001116c:	8b 31                	mov    esi,DWORD PTR [ecx]
c001116e:	01 c6                	add    esi,eax
c0011170:	39 d6                	cmp    esi,edx
c0011172:	7e 3c                	jle    c00111b0 <KeGetProcessEnvPair(Process*, int)+0x6f>
c0011174:	29 c2                	sub    edx,eax
c0011176:	eb 04                	jmp    c001117c <KeGetProcessEnvPair(Process*, int)+0x3b>
c0011178:	39 c2                	cmp    edx,eax
c001117a:	7d 05                	jge    c0011181 <KeGetProcessEnvPair(Process*, int)+0x40>
c001117c:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001117f:	eb 20                	jmp    c00111a1 <KeGetProcessEnvPair(Process*, int)+0x60>
c0011181:	8b 3e                	mov    edi,DWORD PTR [esi]
c0011183:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0011186:	39 d1                	cmp    ecx,edx
c0011188:	7e 04                	jle    c001118e <KeGetProcessEnvPair(Process*, int)+0x4d>
c001118a:	29 c2                	sub    edx,eax
c001118c:	eb 10                	jmp    c001119e <KeGetProcessEnvPair(Process*, int)+0x5d>
c001118e:	8b 35 84 8e 02 c0    	mov    esi,DWORD PTR ds:0xc0028e84
c0011194:	03 0e                	add    ecx,DWORD PTR [esi]
c0011196:	39 d1                	cmp    ecx,edx
c0011198:	7e 16                	jle    c00111b0 <KeGetProcessEnvPair(Process*, int)+0x6f>
c001119a:	29 c2                	sub    edx,eax
c001119c:	29 fa                	sub    edx,edi
c001119e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00111a1:	8d 14 d0             	lea    edx,[eax+edx*8]
c00111a4:	8b 02                	mov    eax,DWORD PTR [edx]
c00111a6:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00111a9:	89 03                	mov    DWORD PTR [ebx],eax
c00111ab:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00111ae:	eb 1d                	jmp    c00111cd <KeGetProcessEnvPair(Process*, int)+0x8c>
c00111b0:	83 ec 0c             	sub    esp,0xc
c00111b3:	68 b2 1c 02 c0       	push   0xc0021cb2
c00111b8:	e8 ac 00 00 00       	call   c0011269 <KePanic(char const*)>
c00111bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00111c3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00111ca:	83 c4 10             	add    esp,0x10
c00111cd:	89 d8                	mov    eax,ebx
c00111cf:	5b                   	pop    ebx
c00111d0:	5e                   	pop    esi
c00111d1:	5f                   	pop    edi
c00111d2:	c2 04 00             	ret    0x4

c00111d5 <CPU::current()>:
c00111d5:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00111da:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00111e0:	c3                   	ret    

c00111e1 <operator new(unsigned long)>:
c00111e1:	e9 d0 68 ff ff       	jmp    c0007ab6 <malloc>

c00111e6 <operator delete(void*)>:
c00111e6:	e9 eb 68 ff ff       	jmp    c0007ad6 <rfree>

c00111eb <disableIRQs()>:
c00111eb:	fa                   	cli    
c00111ec:	c3                   	ret    

c00111ed <enableIRQs()>:
c00111ed:	fb                   	sti    
c00111ee:	c3                   	ret    

c00111ef <lockScheduler()>:
c00111ef:	fa                   	cli    
c00111f0:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00111f6:	c3                   	ret    

c00111f7 <unlockScheduler()>:
c00111f7:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00111fc:	48                   	dec    eax
c00111fd:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0011202:	75 01                	jne    c0011205 <unlockScheduler()+0xe>
c0011204:	fb                   	sti    
c0011205:	c3                   	ret    

c0011206 <lockStuff()>:
c0011206:	fa                   	cli    
c0011207:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001120d:	ff 05 c4 96 02 c0    	inc    DWORD PTR ds:0xc00296c4
c0011213:	c3                   	ret    

c0011214 <unlockStuff()>:
c0011214:	83 ec 0c             	sub    esp,0xc
c0011217:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c001121c:	48                   	dec    eax
c001121d:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0011222:	75 18                	jne    c001123c <unlockStuff()+0x28>
c0011224:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c001122b:	74 0f                	je     c001123c <unlockStuff()+0x28>
c001122d:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0011237:	e8 ec 48 00 00       	call   c0015b28 <schedule()>
c001123c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0011241:	48                   	dec    eax
c0011242:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0011247:	75 01                	jne    c001124a <unlockStuff()+0x36>
c0011249:	fb                   	sti    
c001124a:	83 c4 0c             	add    esp,0xc
c001124d:	c3                   	ret    

c001124e <Virt::getAKernelVAS()>:
c001124e:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c0011253:	c3                   	ret    

c0011254 <__not_memcpy>:
c0011254:	57                   	push   edi
c0011255:	56                   	push   esi
c0011256:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001125a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001125e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011262:	89 c7                	mov    edi,eax
c0011264:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011266:	5e                   	pop    esi
c0011267:	5f                   	pop    edi
c0011268:	c3                   	ret    

c0011269 <KePanic(char const*)>:
c0011269:	c6 05 88 8e 02 c0 01 	mov    BYTE PTR ds:0xc0028e88,0x1
c0011270:	e9 59 68 00 00       	jmp    c0017ace <HalPanic(char const*)>

c0011275 <KePowerThread(void*)>:
c0011275:	83 ec 0c             	sub    esp,0xc
c0011278:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001127d:	48                   	dec    eax
c001127e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0011283:	75 01                	jne    c0011286 <KePowerThread(void*)+0x11>
c0011285:	fb                   	sti    
c0011286:	83 ec 0c             	sub    esp,0xc
c0011289:	c6 05 a0 8e 02 c0 00 	mov    BYTE PTR ds:0xc0028ea0,0x0
c0011290:	6a 0a                	push   0xa
c0011292:	e8 d5 4b 00 00       	call   c0015e6c <sleep(unsigned int)>
c0011297:	83 05 e4 8e 02 c0 0a 	add    DWORD PTR ds:0xc0028ee4,0xa
c001129e:	83 c4 10             	add    esp,0x10
c00112a1:	eb e3                	jmp    c0011286 <KePowerThread(void*)+0x11>

c00112a3 <KeChangePowerSettings(PowerSettings)>:
c00112a3:	57                   	push   edi
c00112a4:	b9 09 00 00 00       	mov    ecx,0x9
c00112a9:	56                   	push   esi
c00112aa:	bf c0 8e 02 c0       	mov    edi,0xc0028ec0
c00112af:	fc                   	cld    
c00112b0:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00112b4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00112b6:	5e                   	pop    esi
c00112b7:	5f                   	pop    edi
c00112b8:	c3                   	ret    

c00112b9 <KeUserIOReceived()>:
c00112b9:	c7 05 e4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ee4,0x0
c00112c3:	c3                   	ret    

c00112c4 <KeHandlePowerButton()>:
c00112c4:	83 ec 0c             	sub    esp,0xc
c00112c7:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c00112cc:	83 f8 02             	cmp    eax,0x2
c00112cf:	75 10                	jne    c00112e1 <KeHandlePowerButton()+0x1d>
c00112d1:	83 ec 0c             	sub    esp,0xc
c00112d4:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00112da:	e8 49 5e ff ff       	call   c0007128 <Computer::shutdown()>
c00112df:	eb 11                	jmp    c00112f2 <KeHandlePowerButton()+0x2e>
c00112e1:	48                   	dec    eax
c00112e2:	75 11                	jne    c00112f5 <KeHandlePowerButton()+0x31>
c00112e4:	83 ec 0c             	sub    esp,0xc
c00112e7:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00112ed:	e8 66 5e ff ff       	call   c0007158 <Computer::sleep()>
c00112f2:	83 c4 10             	add    esp,0x10
c00112f5:	83 c4 0c             	add    esp,0xc
c00112f8:	c3                   	ret    

c00112f9 <KeHandleSleepButton()>:
c00112f9:	83 ec 0c             	sub    esp,0xc
c00112fc:	a1 c4 8e 02 c0       	mov    eax,ds:0xc0028ec4
c0011301:	83 f8 02             	cmp    eax,0x2
c0011304:	75 10                	jne    c0011316 <KeHandleSleepButton()+0x1d>
c0011306:	83 ec 0c             	sub    esp,0xc
c0011309:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001130f:	e8 14 5e ff ff       	call   c0007128 <Computer::shutdown()>
c0011314:	eb 11                	jmp    c0011327 <KeHandleSleepButton()+0x2e>
c0011316:	48                   	dec    eax
c0011317:	75 11                	jne    c001132a <KeHandleSleepButton()+0x31>
c0011319:	83 ec 0c             	sub    esp,0xc
c001131c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0011322:	e8 31 5e ff ff       	call   c0007158 <Computer::sleep()>
c0011327:	83 c4 10             	add    esp,0x10
c001132a:	83 c4 0c             	add    esp,0xc
c001132d:	c3                   	ret    

c001132e <KeSetupPowerManager()>:
c001132e:	83 ec 0c             	sub    esp,0xc
c0011331:	c7 05 e4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ee4,0x0
c001133b:	68 f0 00 00 00       	push   0xf0
c0011340:	c6 05 a0 8e 02 c0 00 	mov    BYTE PTR ds:0xc0028ea0,0x0
c0011347:	6a 00                	push   0x0
c0011349:	68 75 12 01 c0       	push   0xc0011275
c001134e:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0011354:	e8 7f 45 00 00       	call   c00158d8 <Process::createThread(void (*)(void*), void*, int)>
c0011359:	c7 05 c0 8e 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0028ec0,0x2
c0011363:	c7 05 c4 8e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028ec4,0x1
c001136d:	c7 05 c8 8e 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0028ec8,0x3
c0011377:	c7 05 cc 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ecc,0x0
c0011381:	c7 05 d8 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ed8,0x0
c001138b:	c7 05 d0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ed0,0x0
c0011395:	c7 05 dc 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028edc,0x0
c001139f:	c7 05 d4 8e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028ed4,0x3c
c00113a9:	c7 05 e0 8e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028ee0,0x3c
c00113b3:	83 c4 1c             	add    esp,0x1c
c00113b6:	c3                   	ret    

c00113b7 <KeRand()>:
c00113b7:	69 05 e8 8e 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0028ee8,0x2875
c00113c1:	69 0d ec 8e 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc0028eec,0xa2e7b175
c00113cb:	53                   	push   ebx
c00113cc:	01 c1                	add    ecx,eax
c00113ce:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00113d3:	f7 25 e8 8e 02 c0    	mul    DWORD PTR ds:0xc0028ee8
c00113d9:	01 ca                	add    edx,ecx
c00113db:	05 ef 04 b5 00       	add    eax,0xb504ef
c00113e0:	83 d2 00             	adc    edx,0x0
c00113e3:	a3 e8 8e 02 c0       	mov    ds:0xc0028ee8,eax
c00113e8:	0f b7 da             	movzx  ebx,dx
c00113eb:	89 da                	mov    edx,ebx
c00113ed:	89 1d ec 8e 02 c0    	mov    DWORD PTR ds:0xc0028eec,ebx
c00113f3:	0f ac d0 0e          	shrd   eax,edx,0xe
c00113f7:	5b                   	pop    ebx
c00113f8:	c3                   	ret    

c00113f9 <KeSeedRand(unsigned int)>:
c00113f9:	53                   	push   ebx
c00113fa:	83 ec 08             	sub    esp,0x8
c00113fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011401:	e8 e7 69 00 00       	call   c0017ded <HalGetRand()>
c0011406:	c7 05 ec 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028eec,0x0
c0011410:	31 d8                	xor    eax,ebx
c0011412:	a3 e8 8e 02 c0       	mov    ds:0xc0028ee8,eax
c0011417:	e8 9b ff ff ff       	call   c00113b7 <KeRand()>
c001141c:	83 c4 08             	add    esp,0x8
c001141f:	5b                   	pop    ebx
c0011420:	eb 95                	jmp    c00113b7 <KeRand()>

c0011422 <KeInitRand()>:
c0011422:	83 ec 0c             	sub    esp,0xc
c0011425:	e8 b8 67 00 00       	call   c0017be2 <HalQueryPerformanceCounter()>
c001142a:	0f 20 da             	mov    edx,cr3
c001142d:	0f 22 da             	mov    cr3,edx
c0011430:	0f 20 da             	mov    edx,cr3
c0011433:	0f 22 da             	mov    cr3,edx
c0011436:	0f 20 da             	mov    edx,cr3
c0011439:	0f 22 da             	mov    cr3,edx
c001143c:	0f 20 da             	mov    edx,cr3
c001143f:	0f 22 da             	mov    cr3,edx
c0011442:	83 ec 0c             	sub    esp,0xc
c0011445:	35 03 8a 95 38       	xor    eax,0x38958a03
c001144a:	50                   	push   eax
c001144b:	e8 a9 ff ff ff       	call   c00113f9 <KeSeedRand(unsigned int)>
c0011450:	83 c4 1c             	add    esp,0x1c
c0011453:	c3                   	ret    

c0011454 <KeResolveCompatibilitySymbol(char*)>:
c0011454:	83 ec 0c             	sub    esp,0xc
c0011457:	83 ec 08             	sub    esp,0x8
c001145a:	68 cc 1c 02 c0       	push   0xc0021ccc
c001145f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011463:	e8 e8 f2 fe ff       	call   c0000750 <strcmp>
c0011468:	83 c4 10             	add    esp,0x10
c001146b:	85 c0                	test   eax,eax
c001146d:	0f 94 c0             	sete   al
c0011470:	0f b6 c0             	movzx  eax,al
c0011473:	85 c0                	test   eax,eax
c0011475:	74 0d                	je     c0011484 <KeResolveCompatibilitySymbol(char*)+0x30>
c0011477:	b8 b8 5e 02 c0       	mov    eax,0xc0025eb8
c001147c:	e9 8b 01 00 00       	jmp    c001160c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011481:	8d 76 00             	lea    esi,[esi+0x0]
c0011484:	83 ec 08             	sub    esp,0x8
c0011487:	68 d5 1c 02 c0       	push   0xc0021cd5
c001148c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011490:	e8 bb f2 fe ff       	call   c0000750 <strcmp>
c0011495:	83 c4 10             	add    esp,0x10
c0011498:	85 c0                	test   eax,eax
c001149a:	0f 94 c0             	sete   al
c001149d:	0f b6 c0             	movzx  eax,al
c00114a0:	85 c0                	test   eax,eax
c00114a2:	74 0c                	je     c00114b0 <KeResolveCompatibilitySymbol(char*)+0x5c>
c00114a4:	b8 a0 f1 01 c0       	mov    eax,0xc001f1a0
c00114a9:	e9 5e 01 00 00       	jmp    c001160c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00114ae:	66 90                	xchg   ax,ax
c00114b0:	83 ec 08             	sub    esp,0x8
c00114b3:	68 df 1c 02 c0       	push   0xc0021cdf
c00114b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114bc:	e8 8f f2 fe ff       	call   c0000750 <strcmp>
c00114c1:	83 c4 10             	add    esp,0x10
c00114c4:	85 c0                	test   eax,eax
c00114c6:	0f 94 c0             	sete   al
c00114c9:	0f b6 c0             	movzx  eax,al
c00114cc:	85 c0                	test   eax,eax
c00114ce:	74 0c                	je     c00114dc <KeResolveCompatibilitySymbol(char*)+0x88>
c00114d0:	b8 d4 ee 01 c0       	mov    eax,0xc001eed4
c00114d5:	e9 32 01 00 00       	jmp    c001160c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00114da:	66 90                	xchg   ax,ax
c00114dc:	83 ec 08             	sub    esp,0x8
c00114df:	68 e8 1c 02 c0       	push   0xc0021ce8
c00114e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114e8:	e8 63 f2 fe ff       	call   c0000750 <strcmp>
c00114ed:	83 c4 10             	add    esp,0x10
c00114f0:	85 c0                	test   eax,eax
c00114f2:	0f 94 c0             	sete   al
c00114f5:	0f b6 c0             	movzx  eax,al
c00114f8:	85 c0                	test   eax,eax
c00114fa:	74 0c                	je     c0011508 <KeResolveCompatibilitySymbol(char*)+0xb4>
c00114fc:	b8 69 12 01 c0       	mov    eax,0xc0011269
c0011501:	e9 06 01 00 00       	jmp    c001160c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011506:	66 90                	xchg   ax,ax
c0011508:	83 ec 08             	sub    esp,0x8
c001150b:	68 fb 1c 02 c0       	push   0xc0021cfb
c0011510:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011514:	e8 37 f2 fe ff       	call   c0000750 <strcmp>
c0011519:	83 c4 10             	add    esp,0x10
c001151c:	85 c0                	test   eax,eax
c001151e:	0f 94 c0             	sete   al
c0011521:	0f b6 c0             	movzx  eax,al
c0011524:	85 c0                	test   eax,eax
c0011526:	74 0c                	je     c0011534 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0011528:	b8 93 0b 01 c0       	mov    eax,0xc0010b93
c001152d:	e9 da 00 00 00       	jmp    c001160c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011532:	66 90                	xchg   ax,ax
c0011534:	83 ec 08             	sub    esp,0x8
c0011537:	68 18 1d 02 c0       	push   0xc0021d18
c001153c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011540:	e8 0b f2 fe ff       	call   c0000750 <strcmp>
c0011545:	83 c4 10             	add    esp,0x10
c0011548:	85 c0                	test   eax,eax
c001154a:	0f 94 c0             	sete   al
c001154d:	0f b6 c0             	movzx  eax,al
c0011550:	85 c0                	test   eax,eax
c0011552:	74 0c                	je     c0011560 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0011554:	b8 a0 f2 01 c0       	mov    eax,0xc001f2a0
c0011559:	e9 ae 00 00 00       	jmp    c001160c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001155e:	66 90                	xchg   ax,ax
c0011560:	83 ec 08             	sub    esp,0x8
c0011563:	68 22 1d 02 c0       	push   0xc0021d22
c0011568:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001156c:	e8 df f1 fe ff       	call   c0000750 <strcmp>
c0011571:	83 c4 10             	add    esp,0x10
c0011574:	85 c0                	test   eax,eax
c0011576:	0f 94 c0             	sete   al
c0011579:	0f b6 c0             	movzx  eax,al
c001157c:	85 c0                	test   eax,eax
c001157e:	74 0c                	je     c001158c <KeResolveCompatibilitySymbol(char*)+0x138>
c0011580:	b8 20 f0 01 c0       	mov    eax,0xc001f020
c0011585:	e9 82 00 00 00       	jmp    c001160c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001158a:	66 90                	xchg   ax,ax
c001158c:	83 ec 08             	sub    esp,0x8
c001158f:	68 2b 1d 02 c0       	push   0xc0021d2b
c0011594:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011598:	e8 b3 f1 fe ff       	call   c0000750 <strcmp>
c001159d:	83 c4 10             	add    esp,0x10
c00115a0:	85 c0                	test   eax,eax
c00115a2:	0f 94 c0             	sete   al
c00115a5:	0f b6 c0             	movzx  eax,al
c00115a8:	85 c0                	test   eax,eax
c00115aa:	74 08                	je     c00115b4 <KeResolveCompatibilitySymbol(char*)+0x160>
c00115ac:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c00115b1:	eb 59                	jmp    c001160c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00115b3:	90                   	nop
c00115b4:	83 ec 08             	sub    esp,0x8
c00115b7:	68 43 1d 02 c0       	push   0xc0021d43
c00115bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115c0:	e8 8b f1 fe ff       	call   c0000750 <strcmp>
c00115c5:	83 c4 10             	add    esp,0x10
c00115c8:	85 c0                	test   eax,eax
c00115ca:	0f 94 c0             	sete   al
c00115cd:	0f b6 c0             	movzx  eax,al
c00115d0:	85 c0                	test   eax,eax
c00115d2:	74 08                	je     c00115dc <KeResolveCompatibilitySymbol(char*)+0x188>
c00115d4:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c00115d9:	eb 31                	jmp    c001160c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00115db:	90                   	nop
c00115dc:	83 ec 08             	sub    esp,0x8
c00115df:	68 50 1d 02 c0       	push   0xc0021d50
c00115e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115e8:	e8 63 f1 fe ff       	call   c0000750 <strcmp>
c00115ed:	83 c4 10             	add    esp,0x10
c00115f0:	85 c0                	test   eax,eax
c00115f2:	0f 94 c0             	sete   al
c00115f5:	0f b6 c0             	movzx  eax,al
c00115f8:	85 c0                	test   eax,eax
c00115fa:	74 08                	je     c0011604 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c00115fc:	b8 bd 5e 02 c0       	mov    eax,0xc0025ebd
c0011601:	eb 09                	jmp    c001160c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011603:	90                   	nop
c0011604:	b8 00 00 00 00       	mov    eax,0x0
c0011609:	8d 76 00             	lea    esi,[esi+0x0]
c001160c:	83 c4 0c             	add    esp,0xc
c001160f:	c3                   	ret    

c0011610 <KiSigKill(int)>:
c0011610:	83 ec 0c             	sub    esp,0xc
c0011613:	6a 00                	push   0x0
c0011615:	6a 00                	push   0x0
c0011617:	6a ff                	push   0xffffffff
c0011619:	6a 01                	push   0x1
c001161b:	e8 32 2a 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011620:	83 c4 1c             	add    esp,0x1c
c0011623:	c3                   	ret    

c0011624 <KiDefaultSignalHandlerIgnore(int)>:
c0011624:	c3                   	ret    

c0011625 <KiDefaultSignalHandlerPause(int)>:
c0011625:	57                   	push   edi
c0011626:	b9 07 00 00 00       	mov    ecx,0x7
c001162b:	56                   	push   esi
c001162c:	be 99 1d 02 c0       	mov    esi,0xc0021d99
c0011631:	83 ec 24             	sub    esp,0x24
c0011634:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011638:	fc                   	cld    
c0011639:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001163b:	8d 44 24 04          	lea    eax,[esp+0x4]
c001163f:	50                   	push   eax
c0011640:	6a 00                	push   0x0
c0011642:	6a 00                	push   0x0
c0011644:	6a 27                	push   0x27
c0011646:	e8 07 2a 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001164b:	83 c4 34             	add    esp,0x34
c001164e:	5e                   	pop    esi
c001164f:	5f                   	pop    edi
c0011650:	c3                   	ret    

c0011651 <KiDefaultSignalHandlerResume(int)>:
c0011651:	57                   	push   edi
c0011652:	b9 1d 00 00 00       	mov    ecx,0x1d
c0011657:	56                   	push   esi
c0011658:	be b5 1d 02 c0       	mov    esi,0xc0021db5
c001165d:	83 ec 24             	sub    esp,0x24
c0011660:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0011664:	fc                   	cld    
c0011665:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011667:	8d 44 24 03          	lea    eax,[esp+0x3]
c001166b:	50                   	push   eax
c001166c:	6a 00                	push   0x0
c001166e:	6a 00                	push   0x0
c0011670:	6a 27                	push   0x27
c0011672:	e8 db 29 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011677:	83 c4 34             	add    esp,0x34
c001167a:	5e                   	pop    esi
c001167b:	5f                   	pop    edi
c001167c:	c3                   	ret    

c001167d <KeDeinitSignals(SigHandlerBlock*)>:
c001167d:	e9 44 64 ff ff       	jmp    c0007ac6 <free>

c0011682 <KeInitSignals()>:
c0011682:	53                   	push   ebx
c0011683:	83 ec 14             	sub    esp,0x14
c0011686:	68 c8 00 00 00       	push   0xc8
c001168b:	e8 26 64 ff ff       	call   c0007ab6 <malloc>
c0011690:	83 c4 0c             	add    esp,0xc
c0011693:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c001169d:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c00116a7:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00116ae:	89 c3                	mov    ebx,eax
c00116b0:	6a 20                	push   0x20
c00116b2:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c00116b8:	6a 00                	push   0x0
c00116ba:	50                   	push   eax
c00116bb:	e8 30 ee fe ff       	call   c00004f0 <memset>
c00116c0:	83 c4 0c             	add    esp,0xc
c00116c3:	6a 44                	push   0x44
c00116c5:	6a 00                	push   0x0
c00116c7:	53                   	push   ebx
c00116c8:	e8 23 ee fe ff       	call   c00004f0 <memset>
c00116cd:	89 d8                	mov    eax,ebx
c00116cf:	83 c4 18             	add    esp,0x18
c00116d2:	5b                   	pop    ebx
c00116d3:	c3                   	ret    

c00116d4 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c00116d4:	53                   	push   ebx
c00116d5:	b8 01 00 00 00       	mov    eax,0x1
c00116da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00116de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00116e2:	83 f9 10             	cmp    ecx,0x10
c00116e5:	7f 21                	jg     c0011708 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c00116e7:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c00116ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116ee:	89 03                	mov    DWORD PTR [ebx],eax
c00116f0:	b8 01 00 00 00       	mov    eax,0x1
c00116f5:	d3 e0                	shl    eax,cl
c00116f7:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00116fb:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00116fe:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0011706:	31 c0                	xor    eax,eax
c0011708:	5b                   	pop    ebx
c0011709:	c3                   	ret    

c001170a <KeRaiseSignal(SigHandlerBlock*, int)>:
c001170a:	55                   	push   ebp
c001170b:	57                   	push   edi
c001170c:	bf 08 00 00 00       	mov    edi,0x8
c0011711:	56                   	push   esi
c0011712:	53                   	push   ebx
c0011713:	83 ec 18             	sub    esp,0x18
c0011716:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001171a:	68 d2 1d 02 c0       	push   0xc0021dd2
c001171f:	e8 21 92 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0011724:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001172b:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011731:	83 c4 10             	add    esp,0x10
c0011734:	31 c9                	xor    ecx,ecx
c0011736:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001173a:	99                   	cdq    
c001173b:	f7 ff                	idiv   edi
c001173d:	8d 42 24             	lea    eax,[edx+0x24]
c0011740:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011744:	85 f6                	test   esi,esi
c0011746:	75 1a                	jne    c0011762 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0011748:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001174c:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0011750:	50                   	push   eax
c0011751:	50                   	push   eax
c0011752:	52                   	push   edx
c0011753:	68 e3 1d 02 c0       	push   0xc0021de3
c0011758:	e8 e8 91 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001175d:	83 c4 10             	add    esp,0x10
c0011760:	eb 1b                	jmp    c001177d <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0011762:	41                   	inc    ecx
c0011763:	83 f9 08             	cmp    ecx,0x8
c0011766:	75 ce                	jne    c0011736 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0011768:	83 ec 0c             	sub    esp,0xc
c001176b:	be 01 00 00 00       	mov    esi,0x1
c0011770:	68 04 1e 02 c0       	push   0xc0021e04
c0011775:	e8 cb 91 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001177a:	83 c4 10             	add    esp,0x10
c001177d:	83 c4 0c             	add    esp,0xc
c0011780:	89 f0                	mov    eax,esi
c0011782:	5b                   	pop    ebx
c0011783:	5e                   	pop    esi
c0011784:	5f                   	pop    edi
c0011785:	5d                   	pop    ebp
c0011786:	c3                   	ret    

c0011787 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0011787:	55                   	push   ebp
c0011788:	57                   	push   edi
c0011789:	56                   	push   esi
c001178a:	53                   	push   ebx
c001178b:	51                   	push   ecx
c001178c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011790:	85 db                	test   ebx,ebx
c0011792:	0f 84 bc 00 00 00    	je     c0011854 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011798:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c001179f:	0f 84 af 00 00 00    	je     c0011854 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00117a5:	31 c9                	xor    ecx,ecx
c00117a7:	bf 08 00 00 00       	mov    edi,0x8
c00117ac:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c00117b2:	8d 04 0e             	lea    eax,[esi+ecx*1]
c00117b5:	99                   	cdq    
c00117b6:	f7 ff                	idiv   edi
c00117b8:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c00117bf:	85 ed                	test   ebp,ebp
c00117c1:	0f 84 9e 00 00 00    	je     c0011865 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c00117c7:	89 e9                	mov    ecx,ebp
c00117c9:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c00117cf:	bf 01 00 00 00       	mov    edi,0x1
c00117d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00117d7:	d3 e7                	shl    edi,cl
c00117d9:	31 c9                	xor    ecx,ecx
c00117db:	b8 01 00 00 00       	mov    eax,0x1
c00117e0:	d3 e0                	shl    eax,cl
c00117e2:	85 04 24             	test   DWORD PTR [esp],eax
c00117e5:	74 06                	je     c00117ed <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c00117e7:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c00117eb:	75 67                	jne    c0011854 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00117ed:	41                   	inc    ecx
c00117ee:	83 f9 11             	cmp    ecx,0x11
c00117f1:	75 e8                	jne    c00117db <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c00117f3:	46                   	inc    esi
c00117f4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00117f7:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00117fd:	09 f8                	or     eax,edi
c00117ff:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c001180a:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011810:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011817:	31 c0                	xor    eax,eax
c0011819:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011821:	74 09                	je     c001182c <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011823:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001182a:	eb 06                	jmp    c0011832 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c001182c:	40                   	inc    eax
c001182d:	83 f8 08             	cmp    eax,0x8
c0011830:	75 e7                	jne    c0011819 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0011832:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011835:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011839:	83 fd 09             	cmp    ebp,0x9
c001183c:	89 2a                	mov    DWORD PTR [edx],ebp
c001183e:	75 07                	jne    c0011847 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011840:	b8 10 16 01 c0       	mov    eax,0xc0011610
c0011845:	eb 31                	jmp    c0011878 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011847:	83 f8 01             	cmp    eax,0x1
c001184a:	75 0c                	jne    c0011858 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c001184c:	f7 d7                	not    edi
c001184e:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011854:	31 c0                	xor    eax,eax
c0011856:	eb 20                	jmp    c0011878 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011858:	85 c0                	test   eax,eax
c001185a:	75 1c                	jne    c0011878 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c001185c:	8b 04 ad 00 32 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdce00]
c0011863:	eb 13                	jmp    c0011878 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011865:	46                   	inc    esi
c0011866:	41                   	inc    ecx
c0011867:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c001186d:	83 f9 08             	cmp    ecx,0x8
c0011870:	0f 85 36 ff ff ff    	jne    c00117ac <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0011876:	eb dc                	jmp    c0011854 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011878:	5a                   	pop    edx
c0011879:	5b                   	pop    ebx
c001187a:	5e                   	pop    esi
c001187b:	5f                   	pop    edi
c001187c:	5d                   	pop    ebp
c001187d:	c3                   	ret    

c001187e <KiCheckSignalZ>:
c001187e:	83 ec 10             	sub    esp,0x10
c0011881:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011885:	50                   	push   eax
c0011886:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001188b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001188e:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011894:	e8 ee fe ff ff       	call   c0011787 <KeCheckSignal(SigHandlerBlock*, int*)>
c0011899:	5a                   	pop    edx
c001189a:	31 d2                	xor    edx,edx
c001189c:	59                   	pop    ecx
c001189d:	85 c0                	test   eax,eax
c001189f:	74 19                	je     c00118ba <KiCheckSignalZ+0x3c>
c00118a1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00118a7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00118aa:	89 02                	mov    DWORD PTR [edx],eax
c00118ac:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c00118b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118b7:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00118ba:	89 d0                	mov    eax,edx
c00118bc:	83 c4 10             	add    esp,0x10
c00118bf:	c3                   	ret    

c00118c0 <KeCompleteSignal(SigHandlerBlock*, int)>:
c00118c0:	56                   	push   esi
c00118c1:	53                   	push   ebx
c00118c2:	bb 01 00 00 00       	mov    ebx,0x1
c00118c7:	52                   	push   edx
c00118c8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00118cc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00118d0:	d3 e3                	shl    ebx,cl
c00118d2:	83 f9 10             	cmp    ecx,0x10
c00118d5:	7f 08                	jg     c00118df <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c00118d7:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c00118dd:	75 10                	jne    c00118ef <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c00118df:	83 ec 0c             	sub    esp,0xc
c00118e2:	68 15 1e 02 c0       	push   0xc0021e15
c00118e7:	e8 7d f9 ff ff       	call   c0011269 <KePanic(char const*)>
c00118ec:	83 c4 10             	add    esp,0x10
c00118ef:	f7 d3                	not    ebx
c00118f1:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c00118f7:	58                   	pop    eax
c00118f8:	5b                   	pop    ebx
c00118f9:	5e                   	pop    esi
c00118fa:	c3                   	ret    

c00118fb <KiFinishSignalZ>:
c00118fb:	53                   	push   ebx
c00118fc:	83 ec 10             	sub    esp,0x10
c00118ff:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011903:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011906:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001190b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001190e:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011914:	e8 a7 ff ff ff       	call   c00118c0 <KeCompleteSignal(SigHandlerBlock*, int)>
c0011919:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001191f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011926:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c001192d:	83 c4 18             	add    esp,0x18
c0011930:	5b                   	pop    ebx
c0011931:	c3                   	ret    

c0011932 <SysSeekDir(regs*)>:
c0011932:	31 c0                	xor    eax,eax
c0011934:	31 d2                	xor    edx,edx
c0011936:	c3                   	ret    

c0011937 <SysTellDir(regs*)>:
c0011937:	31 c0                	xor    eax,eax
c0011939:	31 d2                	xor    edx,edx
c001193b:	c3                   	ret    

c001193c <SysVerify(regs*)>:
c001193c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011940:	31 d2                	xor    edx,edx
c0011942:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011945:	c3                   	ret    

c0011946 <SysGetArgc(regs*)>:
c0011946:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001194b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001194e:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011954:	89 c2                	mov    edx,eax
c0011956:	c1 fa 1f             	sar    edx,0x1f
c0011959:	c3                   	ret    

c001195a <SysTTYName(regs*)>:
c001195a:	b8 01 00 00 00       	mov    eax,0x1
c001195f:	31 d2                	xor    edx,edx
c0011961:	c3                   	ret    

c0011962 <SysFormatDisk(regs*)>:
c0011962:	56                   	push   esi
c0011963:	53                   	push   ebx
c0011964:	83 ec 04             	sub    esp,0x4
c0011967:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001196b:	8b 1d 04 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026404
c0011971:	eb 28                	jmp    c001199b <SysFormatDisk(regs*)+0x39>
c0011973:	83 ec 0c             	sub    esp,0xc
c0011976:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011979:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c001197c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001197e:	51                   	push   ecx
c001197f:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011982:	51                   	push   ecx
c0011983:	50                   	push   eax
c0011984:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c001198b:	50                   	push   eax
c001198c:	53                   	push   ebx
c001198d:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011990:	83 c4 20             	add    esp,0x20
c0011993:	83 f8 08             	cmp    eax,0x8
c0011996:	75 14                	jne    c00119ac <SysFormatDisk(regs*)+0x4a>
c0011998:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001199b:	85 db                	test   ebx,ebx
c001199d:	75 d4                	jne    c0011973 <SysFormatDisk(regs*)+0x11>
c001199f:	83 c4 04             	add    esp,0x4
c00119a2:	b8 03 00 00 00       	mov    eax,0x3
c00119a7:	31 d2                	xor    edx,edx
c00119a9:	5b                   	pop    ebx
c00119aa:	5e                   	pop    esi
c00119ab:	c3                   	ret    
c00119ac:	85 c0                	test   eax,eax
c00119ae:	74 1f                	je     c00119cf <SysFormatDisk(regs*)+0x6d>
c00119b0:	83 f8 09             	cmp    eax,0x9
c00119b3:	74 0d                	je     c00119c2 <SysFormatDisk(regs*)+0x60>
c00119b5:	83 c4 04             	add    esp,0x4
c00119b8:	b8 02 00 00 00       	mov    eax,0x2
c00119bd:	31 d2                	xor    edx,edx
c00119bf:	5b                   	pop    ebx
c00119c0:	5e                   	pop    esi
c00119c1:	c3                   	ret    
c00119c2:	83 c4 04             	add    esp,0x4
c00119c5:	b8 01 00 00 00       	mov    eax,0x1
c00119ca:	31 d2                	xor    edx,edx
c00119cc:	5b                   	pop    ebx
c00119cd:	5e                   	pop    esi
c00119ce:	c3                   	ret    
c00119cf:	83 c4 04             	add    esp,0x4
c00119d2:	31 c0                	xor    eax,eax
c00119d4:	31 d2                	xor    edx,edx
c00119d6:	5b                   	pop    ebx
c00119d7:	5e                   	pop    esi
c00119d8:	c3                   	ret    

c00119d9 <SysSetDiskVolumeLabel(regs*)>:
c00119d9:	56                   	push   esi
c00119da:	53                   	push   ebx
c00119db:	83 ec 04             	sub    esp,0x4
c00119de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00119e2:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00119e5:	83 f8 19             	cmp    eax,0x19
c00119e8:	77 33                	ja     c0011a1d <SysSetDiskVolumeLabel(regs*)+0x44>
c00119ea:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c00119f1:	85 c9                	test   ecx,ecx
c00119f3:	74 28                	je     c0011a1d <SysSetDiskVolumeLabel(regs*)+0x44>
c00119f5:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00119f8:	85 db                	test   ebx,ebx
c00119fa:	74 21                	je     c0011a1d <SysSetDiskVolumeLabel(regs*)+0x44>
c00119fc:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011a02:	85 d2                	test   edx,edx
c0011a04:	74 17                	je     c0011a1d <SysSetDiskVolumeLabel(regs*)+0x44>
c0011a06:	8b 32                	mov    esi,DWORD PTR [edx]
c0011a08:	53                   	push   ebx
c0011a09:	50                   	push   eax
c0011a0a:	51                   	push   ecx
c0011a0b:	52                   	push   edx
c0011a0c:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011a0f:	83 c4 10             	add    esp,0x10
c0011a12:	89 c2                	mov    edx,eax
c0011a14:	83 c4 04             	add    esp,0x4
c0011a17:	c1 fa 1f             	sar    edx,0x1f
c0011a1a:	5b                   	pop    ebx
c0011a1b:	5e                   	pop    esi
c0011a1c:	c3                   	ret    
c0011a1d:	83 c4 04             	add    esp,0x4
c0011a20:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011a25:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011a2a:	5b                   	pop    ebx
c0011a2b:	5e                   	pop    esi
c0011a2c:	c3                   	ret    

c0011a2d <SysGetDiskVolumeLabel(regs*)>:
c0011a2d:	57                   	push   edi
c0011a2e:	56                   	push   esi
c0011a2f:	53                   	push   ebx
c0011a30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a34:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011a37:	83 fa 19             	cmp    edx,0x19
c0011a3a:	77 3c                	ja     c0011a78 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011a3c:	8b 0c 95 80 88 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd7780]
c0011a43:	85 c9                	test   ecx,ecx
c0011a45:	74 31                	je     c0011a78 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011a47:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011a4a:	85 db                	test   ebx,ebx
c0011a4c:	74 2a                	je     c0011a78 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011a4e:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011a51:	85 f6                	test   esi,esi
c0011a53:	74 23                	je     c0011a78 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011a55:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011a5b:	85 c0                	test   eax,eax
c0011a5d:	74 19                	je     c0011a78 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011a5f:	83 ec 0c             	sub    esp,0xc
c0011a62:	8b 38                	mov    edi,DWORD PTR [eax]
c0011a64:	56                   	push   esi
c0011a65:	53                   	push   ebx
c0011a66:	52                   	push   edx
c0011a67:	51                   	push   ecx
c0011a68:	50                   	push   eax
c0011a69:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011a6c:	83 c4 20             	add    esp,0x20
c0011a6f:	89 c2                	mov    edx,eax
c0011a71:	5b                   	pop    ebx
c0011a72:	c1 fa 1f             	sar    edx,0x1f
c0011a75:	5e                   	pop    esi
c0011a76:	5f                   	pop    edi
c0011a77:	c3                   	ret    
c0011a78:	5b                   	pop    ebx
c0011a79:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011a7e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011a83:	5e                   	pop    esi
c0011a84:	5f                   	pop    edi
c0011a85:	c3                   	ret    

c0011a86 <SysShutdown(regs*)>:
c0011a86:	83 ec 0c             	sub    esp,0xc
c0011a89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a8d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011a90:	85 c0                	test   eax,eax
c0011a92:	74 18                	je     c0011aac <SysShutdown(regs*)+0x26>
c0011a94:	83 f8 01             	cmp    eax,0x1
c0011a97:	74 38                	je     c0011ad1 <SysShutdown(regs*)+0x4b>
c0011a99:	83 f8 02             	cmp    eax,0x2
c0011a9c:	74 24                	je     c0011ac2 <SysShutdown(regs*)+0x3c>
c0011a9e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011aa3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011aa8:	83 c4 0c             	add    esp,0xc
c0011aab:	c3                   	ret    
c0011aac:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011ab1:	8b 10                	mov    edx,DWORD PTR [eax]
c0011ab3:	6a 00                	push   0x0
c0011ab5:	6a 00                	push   0x0
c0011ab7:	6a 00                	push   0x0
c0011ab9:	50                   	push   eax
c0011aba:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011abd:	83 c4 10             	add    esp,0x10
c0011ac0:	eb dc                	jmp    c0011a9e <SysShutdown(regs*)+0x18>
c0011ac2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011ac7:	8b 10                	mov    edx,DWORD PTR [eax]
c0011ac9:	6a 00                	push   0x0
c0011acb:	6a 00                	push   0x0
c0011acd:	6a 01                	push   0x1
c0011acf:	eb e8                	jmp    c0011ab9 <SysShutdown(regs*)+0x33>
c0011ad1:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c0011ad6:	85 c0                	test   eax,eax
c0011ad8:	74 02                	je     c0011adc <SysShutdown(regs*)+0x56>
c0011ada:	ff d0                	call   eax
c0011adc:	31 c0                	xor    eax,eax
c0011ade:	31 d2                	xor    edx,edx
c0011ae0:	83 c4 0c             	add    esp,0xc
c0011ae3:	c3                   	ret    

c0011ae4 <SysRealpath(regs*)>:
c0011ae4:	83 ec 0c             	sub    esp,0xc
c0011ae7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011aeb:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011aee:	85 d2                	test   edx,edx
c0011af0:	74 07                	je     c0011af9 <SysRealpath(regs*)+0x15>
c0011af2:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011af5:	85 c0                	test   eax,eax
c0011af7:	75 0b                	jne    c0011b04 <SysRealpath(regs*)+0x20>
c0011af9:	b8 01 00 00 00       	mov    eax,0x1
c0011afe:	31 d2                	xor    edx,edx
c0011b00:	83 c4 0c             	add    esp,0xc
c0011b03:	c3                   	ret    
c0011b04:	83 ec 04             	sub    esp,0x4
c0011b07:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011b0d:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011b10:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0011b16:	51                   	push   ecx
c0011b17:	52                   	push   edx
c0011b18:	50                   	push   eax
c0011b19:	e8 44 9a ff ff       	call   c000b562 <Fs::standardiseFiles(char*, char const*, char const*)>
c0011b1e:	83 c4 10             	add    esp,0x10
c0011b21:	31 c0                	xor    eax,eax
c0011b23:	31 d2                	xor    edx,edx
c0011b25:	83 c4 0c             	add    esp,0xc
c0011b28:	c3                   	ret    

c0011b29 <SysReadDir(regs*)>:
c0011b29:	53                   	push   ebx
c0011b2a:	83 ec 18             	sub    esp,0x18
c0011b2d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011b31:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011b34:	83 f8 02             	cmp    eax,0x2
c0011b37:	76 61                	jbe    c0011b9a <SysReadDir(regs*)+0x71>
c0011b39:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011b40:	77 49                	ja     c0011b8b <SysReadDir(regs*)+0x62>
c0011b42:	83 ec 0c             	sub    esp,0xc
c0011b45:	50                   	push   eax
c0011b46:	e8 68 79 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011b4b:	83 c4 10             	add    esp,0x10
c0011b4e:	85 c0                	test   eax,eax
c0011b50:	74 39                	je     c0011b8b <SysReadDir(regs*)+0x62>
c0011b52:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011b5a:	83 ec 0c             	sub    esp,0xc
c0011b5d:	8b 10                	mov    edx,DWORD PTR [eax]
c0011b5f:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011b63:	51                   	push   ecx
c0011b64:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011b67:	51                   	push   ecx
c0011b68:	6a 00                	push   0x0
c0011b6a:	68 10 01 00 00       	push   0x110
c0011b6f:	50                   	push   eax
c0011b70:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011b73:	83 c4 20             	add    esp,0x20
c0011b76:	85 c0                	test   eax,eax
c0011b78:	74 29                	je     c0011ba3 <SysReadDir(regs*)+0x7a>
c0011b7a:	83 f8 07             	cmp    eax,0x7
c0011b7d:	74 1b                	je     c0011b9a <SysReadDir(regs*)+0x71>
c0011b7f:	b8 02 00 00 00       	mov    eax,0x2
c0011b84:	31 d2                	xor    edx,edx
c0011b86:	83 c4 18             	add    esp,0x18
c0011b89:	5b                   	pop    ebx
c0011b8a:	c3                   	ret    
c0011b8b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b90:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b95:	83 c4 18             	add    esp,0x18
c0011b98:	5b                   	pop    ebx
c0011b99:	c3                   	ret    
c0011b9a:	b8 01 00 00 00       	mov    eax,0x1
c0011b9f:	31 d2                	xor    edx,edx
c0011ba1:	eb e3                	jmp    c0011b86 <SysReadDir(regs*)+0x5d>
c0011ba3:	31 c0                	xor    eax,eax
c0011ba5:	31 d2                	xor    edx,edx
c0011ba7:	eb dd                	jmp    c0011b86 <SysReadDir(regs*)+0x5d>

c0011ba9 <SysIsATTY(regs*)>:
c0011ba9:	83 ec 0c             	sub    esp,0xc
c0011bac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011bb0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011bb3:	83 f8 02             	cmp    eax,0x2
c0011bb6:	76 07                	jbe    c0011bbf <SysIsATTY(regs*)+0x16>
c0011bb8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011bbd:	75 26                	jne    c0011be5 <SysIsATTY(regs*)+0x3c>
c0011bbf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bc4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011bc7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011bcd:	85 c0                	test   eax,eax
c0011bcf:	74 24                	je     c0011bf5 <SysIsATTY(regs*)+0x4c>
c0011bd1:	83 ec 0c             	sub    esp,0xc
c0011bd4:	8b 10                	mov    edx,DWORD PTR [eax]
c0011bd6:	50                   	push   eax
c0011bd7:	ff 12                	call   DWORD PTR [edx]
c0011bd9:	31 d2                	xor    edx,edx
c0011bdb:	0f b6 c0             	movzx  eax,al
c0011bde:	83 c4 10             	add    esp,0x10
c0011be1:	83 c4 0c             	add    esp,0xc
c0011be4:	c3                   	ret    
c0011be5:	83 ec 0c             	sub    esp,0xc
c0011be8:	50                   	push   eax
c0011be9:	e8 c5 78 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011bee:	83 c4 10             	add    esp,0x10
c0011bf1:	85 c0                	test   eax,eax
c0011bf3:	75 dc                	jne    c0011bd1 <SysIsATTY(regs*)+0x28>
c0011bf5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011bfa:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011bff:	83 c4 0c             	add    esp,0xc
c0011c02:	c3                   	ret    

c0011c03 <SysSeek(regs*)>:
c0011c03:	53                   	push   ebx
c0011c04:	83 ec 08             	sub    esp,0x8
c0011c07:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011c0b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011c0e:	8d 50 fd             	lea    edx,[eax-0x3]
c0011c11:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011c17:	77 32                	ja     c0011c4b <SysSeek(regs*)+0x48>
c0011c19:	83 ec 0c             	sub    esp,0xc
c0011c1c:	50                   	push   eax
c0011c1d:	e8 91 78 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011c22:	83 c4 0c             	add    esp,0xc
c0011c25:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011c28:	31 db                	xor    ebx,ebx
c0011c2a:	53                   	push   ebx
c0011c2b:	51                   	push   ecx
c0011c2c:	50                   	push   eax
c0011c2d:	e8 78 9c ff ff       	call   c000b8aa <File::seek(unsigned long long)>
c0011c32:	83 c4 10             	add    esp,0x10
c0011c35:	85 c0                	test   eax,eax
c0011c37:	0f 95 c0             	setne  al
c0011c3a:	31 d2                	xor    edx,edx
c0011c3c:	0f b6 c0             	movzx  eax,al
c0011c3f:	f7 d8                	neg    eax
c0011c41:	83 d2 00             	adc    edx,0x0
c0011c44:	83 c4 08             	add    esp,0x8
c0011c47:	f7 da                	neg    edx
c0011c49:	5b                   	pop    ebx
c0011c4a:	c3                   	ret    
c0011c4b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c50:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c55:	83 c4 08             	add    esp,0x8
c0011c58:	5b                   	pop    ebx
c0011c59:	c3                   	ret    

c0011c5a <SysTell(regs*)>:
c0011c5a:	53                   	push   ebx
c0011c5b:	83 ec 08             	sub    esp,0x8
c0011c5e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011c62:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011c65:	83 f8 02             	cmp    eax,0x2
c0011c68:	76 4e                	jbe    c0011cb8 <SysTell(regs*)+0x5e>
c0011c6a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011c6f:	76 19                	jbe    c0011c8a <SysTell(regs*)+0x30>
c0011c71:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011c74:	31 d2                	xor    edx,edx
c0011c76:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011c7c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011c83:	31 c0                	xor    eax,eax
c0011c85:	83 c4 08             	add    esp,0x8
c0011c88:	5b                   	pop    ebx
c0011c89:	c3                   	ret    
c0011c8a:	83 ec 0c             	sub    esp,0xc
c0011c8d:	50                   	push   eax
c0011c8e:	e8 20 78 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011c93:	5a                   	pop    edx
c0011c94:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011c97:	59                   	pop    ecx
c0011c98:	53                   	push   ebx
c0011c99:	50                   	push   eax
c0011c9a:	e8 b7 9c ff ff       	call   c000b956 <File::tell(unsigned long long*)>
c0011c9f:	83 c4 10             	add    esp,0x10
c0011ca2:	85 c0                	test   eax,eax
c0011ca4:	0f 95 c0             	setne  al
c0011ca7:	31 d2                	xor    edx,edx
c0011ca9:	0f b6 c0             	movzx  eax,al
c0011cac:	f7 d8                	neg    eax
c0011cae:	83 d2 00             	adc    edx,0x0
c0011cb1:	83 c4 08             	add    esp,0x8
c0011cb4:	f7 da                	neg    edx
c0011cb6:	5b                   	pop    ebx
c0011cb7:	c3                   	ret    
c0011cb8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011cbd:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011cc2:	83 c4 08             	add    esp,0x8
c0011cc5:	5b                   	pop    ebx
c0011cc6:	c3                   	ret    

c0011cc7 <SysSize(regs*)>:
c0011cc7:	53                   	push   ebx
c0011cc8:	83 ec 18             	sub    esp,0x18
c0011ccb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ccf:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011cd2:	83 f8 02             	cmp    eax,0x2
c0011cd5:	76 54                	jbe    c0011d2b <SysSize(regs*)+0x64>
c0011cd7:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011cdc:	76 19                	jbe    c0011cf7 <SysSize(regs*)+0x30>
c0011cde:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011ce1:	31 d2                	xor    edx,edx
c0011ce3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011ce9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011cf0:	31 c0                	xor    eax,eax
c0011cf2:	83 c4 18             	add    esp,0x18
c0011cf5:	5b                   	pop    ebx
c0011cf6:	c3                   	ret    
c0011cf7:	83 ec 0c             	sub    esp,0xc
c0011cfa:	50                   	push   eax
c0011cfb:	e8 b3 77 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011d00:	83 c4 0c             	add    esp,0xc
c0011d03:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011d07:	52                   	push   edx
c0011d08:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011d0b:	52                   	push   edx
c0011d0c:	50                   	push   eax
c0011d0d:	e8 dc 9d ff ff       	call   c000baee <File::stat(unsigned long long*, bool*)>
c0011d12:	83 c4 10             	add    esp,0x10
c0011d15:	85 c0                	test   eax,eax
c0011d17:	0f 95 c0             	setne  al
c0011d1a:	31 d2                	xor    edx,edx
c0011d1c:	0f b6 c0             	movzx  eax,al
c0011d1f:	f7 d8                	neg    eax
c0011d21:	83 d2 00             	adc    edx,0x0
c0011d24:	83 c4 18             	add    esp,0x18
c0011d27:	f7 da                	neg    edx
c0011d29:	5b                   	pop    ebx
c0011d2a:	c3                   	ret    
c0011d2b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d30:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d35:	83 c4 18             	add    esp,0x18
c0011d38:	5b                   	pop    ebx
c0011d39:	c3                   	ret    

c0011d3a <SysSizeFromFilename(regs*)>:
c0011d3a:	57                   	push   edi
c0011d3b:	56                   	push   esi
c0011d3c:	53                   	push   ebx
c0011d3d:	83 ec 20             	sub    esp,0x20
c0011d40:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011d44:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0011d47:	83 fb 02             	cmp    ebx,0x2
c0011d4a:	0f 86 8a 00 00 00    	jbe    c0011dda <SysSizeFromFilename(regs*)+0xa0>
c0011d50:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011d56:	76 1b                	jbe    c0011d73 <SysSizeFromFilename(regs*)+0x39>
c0011d58:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011d5b:	31 d2                	xor    edx,edx
c0011d5d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011d63:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011d6a:	83 c4 20             	add    esp,0x20
c0011d6d:	31 c0                	xor    eax,eax
c0011d6f:	5b                   	pop    ebx
c0011d70:	5e                   	pop    esi
c0011d71:	5f                   	pop    edi
c0011d72:	c3                   	ret    
c0011d73:	83 ec 0c             	sub    esp,0xc
c0011d76:	68 14 01 00 00       	push   0x114
c0011d7b:	e8 36 5d ff ff       	call   c0007ab6 <malloc>
c0011d80:	83 c4 0c             	add    esp,0xc
c0011d83:	89 c7                	mov    edi,eax
c0011d85:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d8a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d8d:	50                   	push   eax
c0011d8e:	53                   	push   ebx
c0011d8f:	57                   	push   edi
c0011d90:	e8 9b 99 ff ff       	call   c000b730 <File::File(char const*, Process*)>
c0011d95:	83 c4 0c             	add    esp,0xc
c0011d98:	8d 44 24 23          	lea    eax,[esp+0x23]
c0011d9c:	50                   	push   eax
c0011d9d:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0011da0:	52                   	push   edx
c0011da1:	57                   	push   edi
c0011da2:	e8 47 9d ff ff       	call   c000baee <File::stat(unsigned long long*, bool*)>
c0011da7:	83 c4 10             	add    esp,0x10
c0011daa:	85 ff                	test   edi,edi
c0011dac:	74 14                	je     c0011dc2 <SysSizeFromFilename(regs*)+0x88>
c0011dae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011db2:	8b 17                	mov    edx,DWORD PTR [edi]
c0011db4:	83 ec 0c             	sub    esp,0xc
c0011db7:	57                   	push   edi
c0011db8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011dbb:	83 c4 10             	add    esp,0x10
c0011dbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011dc2:	85 c0                	test   eax,eax
c0011dc4:	0f 95 c0             	setne  al
c0011dc7:	31 d2                	xor    edx,edx
c0011dc9:	0f b6 c0             	movzx  eax,al
c0011dcc:	f7 d8                	neg    eax
c0011dce:	83 d2 00             	adc    edx,0x0
c0011dd1:	83 c4 20             	add    esp,0x20
c0011dd4:	f7 da                	neg    edx
c0011dd6:	5b                   	pop    ebx
c0011dd7:	5e                   	pop    esi
c0011dd8:	5f                   	pop    edi
c0011dd9:	c3                   	ret    
c0011dda:	83 c4 20             	add    esp,0x20
c0011ddd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011de2:	5b                   	pop    ebx
c0011de3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011de8:	5e                   	pop    esi
c0011de9:	5f                   	pop    edi
c0011dea:	c3                   	ret    

c0011deb <SysClose(regs*)>:
c0011deb:	53                   	push   ebx
c0011dec:	83 ec 08             	sub    esp,0x8
c0011def:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011df3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011df6:	83 f8 02             	cmp    eax,0x2
c0011df9:	76 41                	jbe    c0011e3c <SysClose(regs*)+0x51>
c0011dfb:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011e01:	83 fa 01             	cmp    edx,0x1
c0011e04:	76 2d                	jbe    c0011e33 <SysClose(regs*)+0x48>
c0011e06:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011e0b:	77 2f                	ja     c0011e3c <SysClose(regs*)+0x51>
c0011e0d:	83 ec 0c             	sub    esp,0xc
c0011e10:	50                   	push   eax
c0011e11:	e8 9d 76 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011e16:	89 c3                	mov    ebx,eax
c0011e18:	89 04 24             	mov    DWORD PTR [esp],eax
c0011e1b:	e8 2a 9a ff ff       	call   c000b84a <File::close()>
c0011e20:	83 c4 10             	add    esp,0x10
c0011e23:	85 db                	test   ebx,ebx
c0011e25:	74 0c                	je     c0011e33 <SysClose(regs*)+0x48>
c0011e27:	83 ec 0c             	sub    esp,0xc
c0011e2a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011e2c:	53                   	push   ebx
c0011e2d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011e30:	83 c4 10             	add    esp,0x10
c0011e33:	31 c0                	xor    eax,eax
c0011e35:	31 d2                	xor    edx,edx
c0011e37:	83 c4 08             	add    esp,0x8
c0011e3a:	5b                   	pop    ebx
c0011e3b:	c3                   	ret    
c0011e3c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e41:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e46:	83 c4 08             	add    esp,0x8
c0011e49:	5b                   	pop    ebx
c0011e4a:	c3                   	ret    

c0011e4b <SysOpenDir(regs*)>:
c0011e4b:	56                   	push   esi
c0011e4c:	53                   	push   ebx
c0011e4d:	83 ec 04             	sub    esp,0x4
c0011e50:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011e54:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011e57:	85 c9                	test   ecx,ecx
c0011e59:	74 5d                	je     c0011eb8 <SysOpenDir(regs*)+0x6d>
c0011e5b:	83 ec 0c             	sub    esp,0xc
c0011e5e:	68 14 01 00 00       	push   0x114
c0011e63:	e8 4e 5c ff ff       	call   c0007ab6 <malloc>
c0011e68:	83 c4 0c             	add    esp,0xc
c0011e6b:	89 c6                	mov    esi,eax
c0011e6d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e72:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e75:	50                   	push   eax
c0011e76:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011e79:	52                   	push   edx
c0011e7a:	56                   	push   esi
c0011e7b:	e8 2c 9e ff ff       	call   c000bcac <Directory::Directory(char const*, Process*)>
c0011e80:	83 c4 10             	add    esp,0x10
c0011e83:	85 f6                	test   esi,esi
c0011e85:	74 31                	je     c0011eb8 <SysOpenDir(regs*)+0x6d>
c0011e87:	83 ec 0c             	sub    esp,0xc
c0011e8a:	56                   	push   esi
c0011e8b:	e8 d8 9e ff ff       	call   c000bd68 <Directory::open()>
c0011e90:	83 c4 10             	add    esp,0x10
c0011e93:	85 c0                	test   eax,eax
c0011e95:	75 21                	jne    c0011eb8 <SysOpenDir(regs*)+0x6d>
c0011e97:	83 ec 0c             	sub    esp,0xc
c0011e9a:	56                   	push   esi
c0011e9b:	e8 16 73 ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0011ea0:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011ea3:	83 c4 10             	add    esp,0x10
c0011ea6:	89 02                	mov    DWORD PTR [edx],eax
c0011ea8:	c1 f8 1f             	sar    eax,0x1f
c0011eab:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011eae:	83 c4 04             	add    esp,0x4
c0011eb1:	31 c0                	xor    eax,eax
c0011eb3:	31 d2                	xor    edx,edx
c0011eb5:	5b                   	pop    ebx
c0011eb6:	5e                   	pop    esi
c0011eb7:	c3                   	ret    
c0011eb8:	83 c4 04             	add    esp,0x4
c0011ebb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ec0:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ec5:	5b                   	pop    ebx
c0011ec6:	5e                   	pop    esi
c0011ec7:	c3                   	ret    

c0011ec8 <SysMakeDir(regs*)>:
c0011ec8:	56                   	push   esi
c0011ec9:	53                   	push   ebx
c0011eca:	83 ec 10             	sub    esp,0x10
c0011ecd:	68 14 01 00 00       	push   0x114
c0011ed2:	e8 df 5b ff ff       	call   c0007ab6 <malloc>
c0011ed7:	83 c4 0c             	add    esp,0xc
c0011eda:	89 c3                	mov    ebx,eax
c0011edc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ee1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ee4:	50                   	push   eax
c0011ee5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011ee9:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0011eec:	52                   	push   edx
c0011eed:	53                   	push   ebx
c0011eee:	e8 b9 9d ff ff       	call   c000bcac <Directory::Directory(char const*, Process*)>
c0011ef3:	83 c4 10             	add    esp,0x10
c0011ef6:	85 db                	test   ebx,ebx
c0011ef8:	74 2c                	je     c0011f26 <SysMakeDir(regs*)+0x5e>
c0011efa:	83 ec 0c             	sub    esp,0xc
c0011efd:	53                   	push   ebx
c0011efe:	e8 45 a0 ff ff       	call   c000bf48 <Directory::create()>
c0011f03:	89 c6                	mov    esi,eax
c0011f05:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f07:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011f0a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f0d:	83 c4 10             	add    esp,0x10
c0011f10:	31 c0                	xor    eax,eax
c0011f12:	85 f6                	test   esi,esi
c0011f14:	0f 95 c0             	setne  al
c0011f17:	31 d2                	xor    edx,edx
c0011f19:	f7 d8                	neg    eax
c0011f1b:	83 d2 00             	adc    edx,0x0
c0011f1e:	83 c4 04             	add    esp,0x4
c0011f21:	f7 da                	neg    edx
c0011f23:	5b                   	pop    ebx
c0011f24:	5e                   	pop    esi
c0011f25:	c3                   	ret    
c0011f26:	83 c4 04             	add    esp,0x4
c0011f29:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f2e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f33:	5b                   	pop    ebx
c0011f34:	5e                   	pop    esi
c0011f35:	c3                   	ret    

c0011f36 <SysCloseDir(regs*)>:
c0011f36:	53                   	push   ebx
c0011f37:	83 ec 08             	sub    esp,0x8
c0011f3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f3e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011f41:	8d 50 fd             	lea    edx,[eax-0x3]
c0011f44:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011f4a:	77 2f                	ja     c0011f7b <SysCloseDir(regs*)+0x45>
c0011f4c:	83 ec 0c             	sub    esp,0xc
c0011f4f:	50                   	push   eax
c0011f50:	e8 5e 75 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011f55:	89 c3                	mov    ebx,eax
c0011f57:	89 04 24             	mov    DWORD PTR [esp],eax
c0011f5a:	e8 65 9e ff ff       	call   c000bdc4 <Directory::close()>
c0011f5f:	83 c4 10             	add    esp,0x10
c0011f62:	85 db                	test   ebx,ebx
c0011f64:	74 0c                	je     c0011f72 <SysCloseDir(regs*)+0x3c>
c0011f66:	83 ec 0c             	sub    esp,0xc
c0011f69:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f6b:	53                   	push   ebx
c0011f6c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f6f:	83 c4 10             	add    esp,0x10
c0011f72:	31 c0                	xor    eax,eax
c0011f74:	31 d2                	xor    edx,edx
c0011f76:	83 c4 08             	add    esp,0x8
c0011f79:	5b                   	pop    ebx
c0011f7a:	c3                   	ret    
c0011f7b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f80:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f85:	83 c4 08             	add    esp,0x8
c0011f88:	5b                   	pop    ebx
c0011f89:	c3                   	ret    

c0011f8a <SysWait(regs*)>:
c0011f8a:	83 ec 10             	sub    esp,0x10
c0011f8d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011f91:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011f94:	52                   	push   edx
c0011f95:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011f98:	51                   	push   ecx
c0011f99:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011f9c:	50                   	push   eax
c0011f9d:	e8 d2 3d 00 00       	call   c0015d74 <waitTask(int, int*, int)>
c0011fa2:	83 c4 1c             	add    esp,0x1c
c0011fa5:	89 c2                	mov    edx,eax
c0011fa7:	c1 fa 1f             	sar    edx,0x1f
c0011faa:	c3                   	ret    

c0011fab <SysNotImpl(regs*)>:
c0011fab:	83 ec 18             	sub    esp,0x18
c0011fae:	68 26 1e 02 c0       	push   0xc0021e26
c0011fb3:	e8 b1 f2 ff ff       	call   c0011269 <KePanic(char const*)>
c0011fb8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011fbd:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011fc2:	83 c4 1c             	add    esp,0x1c
c0011fc5:	c3                   	ret    

c0011fc6 <SysPanic(regs*)>:
c0011fc6:	83 ec 18             	sub    esp,0x18
c0011fc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011fcd:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011fd0:	50                   	push   eax
c0011fd1:	e8 93 f2 ff ff       	call   c0011269 <KePanic(char const*)>
c0011fd6:	b8 01 00 00 00       	mov    eax,0x1
c0011fdb:	31 d2                	xor    edx,edx
c0011fdd:	83 c4 1c             	add    esp,0x1c
c0011fe0:	c3                   	ret    

c0011fe1 <SysRmdir(regs*)>:
c0011fe1:	56                   	push   esi
c0011fe2:	53                   	push   ebx
c0011fe3:	83 ec 20             	sub    esp,0x20
c0011fe6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011fea:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011fed:	68 14 01 00 00       	push   0x114
c0011ff2:	e8 bf 5a ff ff       	call   c0007ab6 <malloc>
c0011ff7:	83 c4 0c             	add    esp,0xc
c0011ffa:	89 c3                	mov    ebx,eax
c0011ffc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012001:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012004:	50                   	push   eax
c0012005:	56                   	push   esi
c0012006:	53                   	push   ebx
c0012007:	e8 24 97 ff ff       	call   c000b730 <File::File(char const*, Process*)>
c001200c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001200f:	e8 a6 99 ff ff       	call   c000b9ba <File::unlink()>
c0012014:	83 c4 10             	add    esp,0x10
c0012017:	85 db                	test   ebx,ebx
c0012019:	74 14                	je     c001202f <SysRmdir(regs*)+0x4e>
c001201b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001201f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012021:	83 ec 0c             	sub    esp,0xc
c0012024:	53                   	push   ebx
c0012025:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012028:	83 c4 10             	add    esp,0x10
c001202b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001202f:	85 c0                	test   eax,eax
c0012031:	0f 95 c0             	setne  al
c0012034:	31 d2                	xor    edx,edx
c0012036:	0f b6 c0             	movzx  eax,al
c0012039:	f7 d8                	neg    eax
c001203b:	83 d2 00             	adc    edx,0x0
c001203e:	83 c4 14             	add    esp,0x14
c0012041:	f7 da                	neg    edx
c0012043:	5b                   	pop    ebx
c0012044:	5e                   	pop    esi
c0012045:	c3                   	ret    

c0012046 <SysUnlink(regs*)>:
c0012046:	56                   	push   esi
c0012047:	53                   	push   ebx
c0012048:	83 ec 20             	sub    esp,0x20
c001204b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001204f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0012052:	68 14 01 00 00       	push   0x114
c0012057:	e8 5a 5a ff ff       	call   c0007ab6 <malloc>
c001205c:	83 c4 0c             	add    esp,0xc
c001205f:	89 c3                	mov    ebx,eax
c0012061:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012066:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012069:	50                   	push   eax
c001206a:	56                   	push   esi
c001206b:	53                   	push   ebx
c001206c:	e8 bf 96 ff ff       	call   c000b730 <File::File(char const*, Process*)>
c0012071:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012074:	e8 41 99 ff ff       	call   c000b9ba <File::unlink()>
c0012079:	83 c4 10             	add    esp,0x10
c001207c:	85 db                	test   ebx,ebx
c001207e:	74 14                	je     c0012094 <SysUnlink(regs*)+0x4e>
c0012080:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012084:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012086:	83 ec 0c             	sub    esp,0xc
c0012089:	53                   	push   ebx
c001208a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001208d:	83 c4 10             	add    esp,0x10
c0012090:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012094:	85 c0                	test   eax,eax
c0012096:	0f 95 c0             	setne  al
c0012099:	31 d2                	xor    edx,edx
c001209b:	0f b6 c0             	movzx  eax,al
c001209e:	f7 d8                	neg    eax
c00120a0:	83 d2 00             	adc    edx,0x0
c00120a3:	83 c4 14             	add    esp,0x14
c00120a6:	f7 da                	neg    edx
c00120a8:	5b                   	pop    ebx
c00120a9:	5e                   	pop    esi
c00120aa:	c3                   	ret    

c00120ab <SysGetArgv(regs*)>:
c00120ab:	83 ec 0c             	sub    esp,0xc
c00120ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00120b2:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00120b5:	85 c0                	test   eax,eax
c00120b7:	78 2c                	js     c00120e5 <SysGetArgv(regs*)+0x3a>
c00120b9:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00120bf:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00120c2:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00120c8:	7d 1b                	jge    c00120e5 <SysGetArgv(regs*)+0x3a>
c00120ca:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00120d1:	85 c0                	test   eax,eax
c00120d3:	74 18                	je     c00120ed <SysGetArgv(regs*)+0x42>
c00120d5:	83 ec 08             	sub    esp,0x8
c00120d8:	50                   	push   eax
c00120d9:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00120dc:	50                   	push   eax
c00120dd:	e8 5e e5 fe ff       	call   c0000640 <strcpy>
c00120e2:	83 c4 10             	add    esp,0x10
c00120e5:	31 c0                	xor    eax,eax
c00120e7:	31 d2                	xor    edx,edx
c00120e9:	83 c4 0c             	add    esp,0xc
c00120ec:	c3                   	ret    
c00120ed:	b8 01 00 00 00       	mov    eax,0x1
c00120f2:	31 d2                	xor    edx,edx
c00120f4:	83 c4 0c             	add    esp,0xc
c00120f7:	c3                   	ret    

c00120f8 <SysUSleep(regs*)>:
c00120f8:	83 ec 1c             	sub    esp,0x1c
c00120fb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00120ff:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0012102:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0012105:	6a 00                	push   0x0
c0012107:	6a 64                	push   0x64
c0012109:	52                   	push   edx
c001210a:	50                   	push   eax
c001210b:	e8 90 d0 00 00       	call   c001f1a0 <__udivdi3>
c0012110:	83 c4 14             	add    esp,0x14
c0012113:	50                   	push   eax
c0012114:	e8 3f 3d 00 00       	call   c0015e58 <milliTenthSleep(unsigned int)>
c0012119:	31 c0                	xor    eax,eax
c001211b:	31 d2                	xor    edx,edx
c001211d:	83 c4 1c             	add    esp,0x1c
c0012120:	c3                   	ret    

c0012121 <SysSpawn(regs*)>:
c0012121:	56                   	push   esi
c0012122:	53                   	push   ebx
c0012123:	83 ec 04             	sub    esp,0x4
c0012126:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001212a:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001212d:	85 f6                	test   esi,esi
c001212f:	75 0a                	jne    c001213b <SysSpawn(regs*)+0x1a>
c0012131:	83 c4 04             	add    esp,0x4
c0012134:	31 c0                	xor    eax,eax
c0012136:	31 d2                	xor    edx,edx
c0012138:	5b                   	pop    ebx
c0012139:	5e                   	pop    esi
c001213a:	c3                   	ret    
c001213b:	83 ec 0c             	sub    esp,0xc
c001213e:	68 24 07 00 00       	push   0x724
c0012143:	e8 6e 59 ff ff       	call   c0007ab6 <malloc>
c0012148:	83 c4 10             	add    esp,0x10
c001214b:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001214e:	89 c6                	mov    esi,eax
c0012150:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012153:	85 c9                	test   ecx,ecx
c0012155:	75 39                	jne    c0012190 <SysSpawn(regs*)+0x6f>
c0012157:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001215c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001215f:	52                   	push   edx
c0012160:	50                   	push   eax
c0012161:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012164:	50                   	push   eax
c0012165:	56                   	push   esi
c0012166:	e8 3d 33 00 00       	call   c00154a8 <Process::Process(char const*, Process*, char**)>
c001216b:	83 c4 10             	add    esp,0x10
c001216e:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0012175:	75 ba                	jne    c0012131 <SysSpawn(regs*)+0x10>
c0012177:	83 ec 0c             	sub    esp,0xc
c001217a:	56                   	push   esi
c001217b:	e8 64 38 00 00       	call   c00159e4 <Process::createUserThread()>
c0012180:	8b 06                	mov    eax,DWORD PTR [esi]
c0012182:	83 c4 10             	add    esp,0x10
c0012185:	89 c2                	mov    edx,eax
c0012187:	83 c4 04             	add    esp,0x4
c001218a:	c1 fa 1f             	sar    edx,0x1f
c001218d:	5b                   	pop    ebx
c001218e:	5e                   	pop    esi
c001218f:	c3                   	ret    
c0012190:	31 c0                	xor    eax,eax
c0012192:	eb cb                	jmp    c001215f <SysSpawn(regs*)+0x3e>

c0012194 <SysGetEnv(regs*)>:
c0012194:	57                   	push   edi
c0012195:	56                   	push   esi
c0012196:	53                   	push   ebx
c0012197:	83 ec 1c             	sub    esp,0x1c
c001219a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001219e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121a3:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00121a6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00121a9:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00121ac:	51                   	push   ecx
c00121ad:	e8 6f ef ff ff       	call   c0011121 <KeGetProcessTotalEnvCount(Process*)>
c00121b2:	83 c4 10             	add    esp,0x10
c00121b5:	39 c7                	cmp    edi,eax
c00121b7:	7c 14                	jl     c00121cd <SysGetEnv(regs*)+0x39>
c00121b9:	85 f6                	test   esi,esi
c00121bb:	75 0b                	jne    c00121c8 <SysGetEnv(regs*)+0x34>
c00121bd:	83 c4 10             	add    esp,0x10
c00121c0:	31 c0                	xor    eax,eax
c00121c2:	5b                   	pop    ebx
c00121c3:	31 d2                	xor    edx,edx
c00121c5:	5e                   	pop    esi
c00121c6:	5f                   	pop    edi
c00121c7:	c3                   	ret    
c00121c8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00121cb:	eb f0                	jmp    c00121bd <SysGetEnv(regs*)+0x29>
c00121cd:	8d 44 24 08          	lea    eax,[esp+0x8]
c00121d1:	83 ec 04             	sub    esp,0x4
c00121d4:	57                   	push   edi
c00121d5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00121db:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c00121de:	57                   	push   edi
c00121df:	50                   	push   eax
c00121e0:	e8 5c ef ff ff       	call   c0011141 <KeGetProcessEnvPair(Process*, int)>
c00121e5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00121e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00121ec:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00121f0:	83 c4 0c             	add    esp,0xc
c00121f3:	85 d2                	test   edx,edx
c00121f5:	75 23                	jne    c001221a <SysGetEnv(regs*)+0x86>
c00121f7:	83 ec 0c             	sub    esp,0xc
c00121fa:	50                   	push   eax
c00121fb:	e8 70 e3 fe ff       	call   c0000570 <strlen>
c0012200:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012203:	89 c3                	mov    ebx,eax
c0012205:	e8 66 e3 fe ff       	call   c0000570 <strlen>
c001220a:	83 c4 10             	add    esp,0x10
c001220d:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012211:	83 c4 10             	add    esp,0x10
c0012214:	31 d2                	xor    edx,edx
c0012216:	5b                   	pop    ebx
c0012217:	5e                   	pop    esi
c0012218:	5f                   	pop    edi
c0012219:	c3                   	ret    
c001221a:	83 ec 08             	sub    esp,0x8
c001221d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012220:	50                   	push   eax
c0012221:	56                   	push   esi
c0012222:	e8 19 e4 fe ff       	call   c0000640 <strcpy>
c0012227:	58                   	pop    eax
c0012228:	5a                   	pop    edx
c0012229:	68 40 1e 02 c0       	push   0xc0021e40
c001222e:	56                   	push   esi
c001222f:	e8 0c e6 fe ff       	call   c0000840 <strcat>
c0012234:	59                   	pop    ecx
c0012235:	5b                   	pop    ebx
c0012236:	57                   	push   edi
c0012237:	56                   	push   esi
c0012238:	e8 03 e6 fe ff       	call   c0000840 <strcat>
c001223d:	83 c4 10             	add    esp,0x10
c0012240:	e9 78 ff ff ff       	jmp    c00121bd <SysGetEnv(regs*)+0x29>

c0012245 <SysSetFatAttrib(regs*)>:
c0012245:	57                   	push   edi
c0012246:	56                   	push   esi
c0012247:	53                   	push   ebx
c0012248:	83 ec 1c             	sub    esp,0x1c
c001224b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001224f:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0012252:	68 14 01 00 00       	push   0x114
c0012257:	e8 5a 58 ff ff       	call   c0007ab6 <malloc>
c001225c:	83 c4 0c             	add    esp,0xc
c001225f:	89 c3                	mov    ebx,eax
c0012261:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012266:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012269:	50                   	push   eax
c001226a:	57                   	push   edi
c001226b:	53                   	push   ebx
c001226c:	e8 bf 94 ff ff       	call   c000b730 <File::File(char const*, Process*)>
c0012271:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0012274:	83 c4 0c             	add    esp,0xc
c0012277:	0f b6 d4             	movzx  edx,ah
c001227a:	0f b6 c0             	movzx  eax,al
c001227d:	52                   	push   edx
c001227e:	50                   	push   eax
c001227f:	53                   	push   ebx
c0012280:	e8 cf 97 ff ff       	call   c000ba54 <File::chfatattr(unsigned char, unsigned char)>
c0012285:	83 c4 10             	add    esp,0x10
c0012288:	85 db                	test   ebx,ebx
c001228a:	74 14                	je     c00122a0 <SysSetFatAttrib(regs*)+0x5b>
c001228c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012290:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012292:	83 ec 0c             	sub    esp,0xc
c0012295:	53                   	push   ebx
c0012296:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012299:	83 c4 10             	add    esp,0x10
c001229c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00122a0:	85 c0                	test   eax,eax
c00122a2:	0f 95 c0             	setne  al
c00122a5:	31 d2                	xor    edx,edx
c00122a7:	0f b6 c0             	movzx  eax,al
c00122aa:	f7 d8                	neg    eax
c00122ac:	83 d2 00             	adc    edx,0x0
c00122af:	83 c4 10             	add    esp,0x10
c00122b2:	f7 da                	neg    edx
c00122b4:	5b                   	pop    ebx
c00122b5:	5e                   	pop    esi
c00122b6:	5f                   	pop    edi
c00122b7:	c3                   	ret    

c00122b8 <SysPipe(regs*)>:
c00122b8:	57                   	push   edi
c00122b9:	56                   	push   esi
c00122ba:	53                   	push   ebx
c00122bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122bf:	83 ec 0c             	sub    esp,0xc
c00122c2:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00122c5:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00122c8:	6a 20                	push   0x20
c00122ca:	e8 e7 57 ff ff       	call   c0007ab6 <malloc>
c00122cf:	89 c3                	mov    ebx,eax
c00122d1:	58                   	pop    eax
c00122d2:	5a                   	pop    edx
c00122d3:	68 00 50 00 00       	push   0x5000
c00122d8:	53                   	push   ebx
c00122d9:	e8 4a 61 ff ff       	call   c0008428 <Pipe::Pipe(int)>
c00122de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00122e1:	e8 d0 6e ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c00122e6:	89 07                	mov    DWORD PTR [edi],eax
c00122e8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00122eb:	e8 c6 6e ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c00122f0:	83 c4 10             	add    esp,0x10
c00122f3:	89 06                	mov    DWORD PTR [esi],eax
c00122f5:	31 d2                	xor    edx,edx
c00122f7:	5b                   	pop    ebx
c00122f8:	31 c0                	xor    eax,eax
c00122fa:	5e                   	pop    esi
c00122fb:	5f                   	pop    edi
c00122fc:	c3                   	ret    

c00122fd <SysGetUnixTime(regs*)>:
c00122fd:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0012302:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012308:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001230c:	e9 7d 9e ff ff       	jmp    c000c18e <Clock::timeInSecondsLocal()>

c0012311 <string_ends_with(char const*, char const*)>:
c0012311:	57                   	push   edi
c0012312:	56                   	push   esi
c0012313:	53                   	push   ebx
c0012314:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012318:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001231c:	83 ec 0c             	sub    esp,0xc
c001231f:	53                   	push   ebx
c0012320:	e8 4b e2 fe ff       	call   c0000570 <strlen>
c0012325:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012328:	89 c6                	mov    esi,eax
c001232a:	e8 41 e2 fe ff       	call   c0000570 <strlen>
c001232f:	83 c4 10             	add    esp,0x10
c0012332:	39 c6                	cmp    esi,eax
c0012334:	7d 06                	jge    c001233c <string_ends_with(char const*, char const*)+0x2b>
c0012336:	5b                   	pop    ebx
c0012337:	31 c0                	xor    eax,eax
c0012339:	5e                   	pop    esi
c001233a:	5f                   	pop    edi
c001233b:	c3                   	ret    
c001233c:	83 ec 08             	sub    esp,0x8
c001233f:	29 c6                	sub    esi,eax
c0012341:	57                   	push   edi
c0012342:	01 f3                	add    ebx,esi
c0012344:	53                   	push   ebx
c0012345:	e8 06 e4 fe ff       	call   c0000750 <strcmp>
c001234a:	83 c4 10             	add    esp,0x10
c001234d:	85 c0                	test   eax,eax
c001234f:	5b                   	pop    ebx
c0012350:	0f 94 c0             	sete   al
c0012353:	5e                   	pop    esi
c0012354:	0f b6 c0             	movzx  eax,al
c0012357:	5f                   	pop    edi
c0012358:	c3                   	ret    

c0012359 <SysOpen(regs*)>:
c0012359:	56                   	push   esi
c001235a:	53                   	push   ebx
c001235b:	81 ec 04 01 00 00    	sub    esp,0x104
c0012361:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0012368:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001236b:	85 c0                	test   eax,eax
c001236d:	0f 84 bd 01 00 00    	je     c0012530 <SysOpen(regs*)+0x1d7>
c0012373:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012376:	85 c0                	test   eax,eax
c0012378:	0f 84 b2 01 00 00    	je     c0012530 <SysOpen(regs*)+0x1d7>
c001237e:	83 ec 04             	sub    esp,0x4
c0012381:	68 42 1e 02 c0       	push   0xc0021e42
c0012386:	50                   	push   eax
c0012387:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001238b:	56                   	push   esi
c001238c:	e8 d1 91 ff ff       	call   c000b562 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012391:	89 34 24             	mov    DWORD PTR [esp],esi
c0012394:	e8 d7 e1 fe ff       	call   c0000570 <strlen>
c0012399:	83 c4 10             	add    esp,0x10
c001239c:	83 e8 01             	sub    eax,0x1
c001239f:	74 21                	je     c00123c2 <SysOpen(regs*)+0x69>
c00123a1:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c00123a5:	eb 12                	jmp    c00123b9 <SysOpen(regs*)+0x60>
c00123a7:	83 fa 3a             	cmp    edx,0x3a
c00123aa:	74 12                	je     c00123be <SysOpen(regs*)+0x65>
c00123ac:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00123b0:	83 e8 01             	sub    eax,0x1
c00123b3:	74 0d                	je     c00123c2 <SysOpen(regs*)+0x69>
c00123b5:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c00123b9:	83 fa 2e             	cmp    edx,0x2e
c00123bc:	75 e9                	jne    c00123a7 <SysOpen(regs*)+0x4e>
c00123be:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00123c2:	83 ec 08             	sub    esp,0x8
c00123c5:	68 46 1e 02 c0       	push   0xc0021e46
c00123ca:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00123cd:	50                   	push   eax
c00123ce:	e8 3e ff ff ff       	call   c0012311 <string_ends_with(char const*, char const*)>
c00123d3:	83 c4 10             	add    esp,0x10
c00123d6:	85 c0                	test   eax,eax
c00123d8:	74 1d                	je     c00123f7 <SysOpen(regs*)+0x9e>
c00123da:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00123dd:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00123e3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00123ea:	81 c4 04 01 00 00    	add    esp,0x104
c00123f0:	31 c0                	xor    eax,eax
c00123f2:	31 d2                	xor    edx,edx
c00123f4:	5b                   	pop    ebx
c00123f5:	5e                   	pop    esi
c00123f6:	c3                   	ret    
c00123f7:	83 ec 08             	sub    esp,0x8
c00123fa:	68 4b 1e 02 c0       	push   0xc0021e4b
c00123ff:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012402:	50                   	push   eax
c0012403:	e8 09 ff ff ff       	call   c0012311 <string_ends_with(char const*, char const*)>
c0012408:	83 c4 10             	add    esp,0x10
c001240b:	85 c0                	test   eax,eax
c001240d:	75 cb                	jne    c00123da <SysOpen(regs*)+0x81>
c001240f:	83 ec 08             	sub    esp,0x8
c0012412:	68 47 1e 02 c0       	push   0xc0021e47
c0012417:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001241a:	50                   	push   eax
c001241b:	e8 30 e3 fe ff       	call   c0000750 <strcmp>
c0012420:	83 c4 10             	add    esp,0x10
c0012423:	85 c0                	test   eax,eax
c0012425:	74 b3                	je     c00123da <SysOpen(regs*)+0x81>
c0012427:	83 ec 08             	sub    esp,0x8
c001242a:	68 46 1e 02 c0       	push   0xc0021e46
c001242f:	56                   	push   esi
c0012430:	e8 dc fe ff ff       	call   c0012311 <string_ends_with(char const*, char const*)>
c0012435:	83 c4 10             	add    esp,0x10
c0012438:	85 c0                	test   eax,eax
c001243a:	75 9e                	jne    c00123da <SysOpen(regs*)+0x81>
c001243c:	83 ec 08             	sub    esp,0x8
c001243f:	68 50 1e 02 c0       	push   0xc0021e50
c0012444:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012447:	50                   	push   eax
c0012448:	e8 c4 fe ff ff       	call   c0012311 <string_ends_with(char const*, char const*)>
c001244d:	83 c4 10             	add    esp,0x10
c0012450:	85 c0                	test   eax,eax
c0012452:	0f 85 eb 00 00 00    	jne    c0012543 <SysOpen(regs*)+0x1ea>
c0012458:	83 ec 08             	sub    esp,0x8
c001245b:	68 55 1e 02 c0       	push   0xc0021e55
c0012460:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012463:	50                   	push   eax
c0012464:	e8 a8 fe ff ff       	call   c0012311 <string_ends_with(char const*, char const*)>
c0012469:	83 c4 10             	add    esp,0x10
c001246c:	85 c0                	test   eax,eax
c001246e:	0f 85 cf 00 00 00    	jne    c0012543 <SysOpen(regs*)+0x1ea>
c0012474:	83 ec 08             	sub    esp,0x8
c0012477:	68 51 1e 02 c0       	push   0xc0021e51
c001247c:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001247f:	51                   	push   ecx
c0012480:	e8 cb e2 fe ff       	call   c0000750 <strcmp>
c0012485:	83 c4 10             	add    esp,0x10
c0012488:	85 c0                	test   eax,eax
c001248a:	0f 84 b3 00 00 00    	je     c0012543 <SysOpen(regs*)+0x1ea>
c0012490:	83 ec 08             	sub    esp,0x8
c0012493:	68 50 1e 02 c0       	push   0xc0021e50
c0012498:	56                   	push   esi
c0012499:	e8 73 fe ff ff       	call   c0012311 <string_ends_with(char const*, char const*)>
c001249e:	83 c4 10             	add    esp,0x10
c00124a1:	85 c0                	test   eax,eax
c00124a3:	0f 85 9a 00 00 00    	jne    c0012543 <SysOpen(regs*)+0x1ea>
c00124a9:	83 ec 0c             	sub    esp,0xc
c00124ac:	68 14 01 00 00       	push   0x114
c00124b1:	e8 00 56 ff ff       	call   c0007ab6 <malloc>
c00124b6:	83 c4 0c             	add    esp,0xc
c00124b9:	89 c6                	mov    esi,eax
c00124bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00124c0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00124c3:	50                   	push   eax
c00124c4:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00124c7:	52                   	push   edx
c00124c8:	56                   	push   esi
c00124c9:	e8 62 92 ff ff       	call   c000b730 <File::File(char const*, Process*)>
c00124ce:	83 c4 10             	add    esp,0x10
c00124d1:	85 f6                	test   esi,esi
c00124d3:	74 5b                	je     c0012530 <SysOpen(regs*)+0x1d7>
c00124d5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00124d8:	0f b6 c2             	movzx  eax,dl
c00124db:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00124de:	89 d0                	mov    eax,edx
c00124e0:	83 e0 01             	and    eax,0x1
c00124e3:	f6 c2 02             	test   dl,0x2
c00124e6:	74 03                	je     c00124eb <SysOpen(regs*)+0x192>
c00124e8:	83 c8 02             	or     eax,0x2
c00124eb:	f6 c2 04             	test   dl,0x4
c00124ee:	74 03                	je     c00124f3 <SysOpen(regs*)+0x19a>
c00124f0:	83 c8 04             	or     eax,0x4
c00124f3:	f6 c2 08             	test   dl,0x8
c00124f6:	74 03                	je     c00124fb <SysOpen(regs*)+0x1a2>
c00124f8:	83 c8 0a             	or     eax,0xa
c00124fb:	80 e2 10             	and    dl,0x10
c00124fe:	74 03                	je     c0012503 <SysOpen(regs*)+0x1aa>
c0012500:	83 c8 12             	or     eax,0x12
c0012503:	83 ec 08             	sub    esp,0x8
c0012506:	50                   	push   eax
c0012507:	56                   	push   esi
c0012508:	e8 df 92 ff ff       	call   c000b7ec <File::open(FileOpenMode)>
c001250d:	83 c4 10             	add    esp,0x10
c0012510:	85 c0                	test   eax,eax
c0012512:	75 1c                	jne    c0012530 <SysOpen(regs*)+0x1d7>
c0012514:	83 ec 0c             	sub    esp,0xc
c0012517:	56                   	push   esi
c0012518:	e8 99 6c ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c001251d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012520:	83 c4 10             	add    esp,0x10
c0012523:	89 02                	mov    DWORD PTR [edx],eax
c0012525:	c1 f8 1f             	sar    eax,0x1f
c0012528:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001252b:	e9 ba fe ff ff       	jmp    c00123ea <SysOpen(regs*)+0x91>
c0012530:	81 c4 04 01 00 00    	add    esp,0x104
c0012536:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001253b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012540:	5b                   	pop    ebx
c0012541:	5e                   	pop    esi
c0012542:	c3                   	ret    
c0012543:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012546:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001254c:	e9 92 fe ff ff       	jmp    c00123e3 <SysOpen(regs*)+0x8a>

c0012551 <KeSystemCall(regs*, void*)>:
c0012551:	53                   	push   ebx
c0012552:	83 ec 08             	sub    esp,0x8
c0012555:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012559:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001255c:	83 f8 3b             	cmp    eax,0x3b
c001255f:	77 16                	ja     c0012577 <KeSystemCall(regs*, void*)+0x26>
c0012561:	8b 14 85 60 32 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcda0]
c0012568:	85 d2                	test   edx,edx
c001256a:	74 0b                	je     c0012577 <KeSystemCall(regs*, void*)+0x26>
c001256c:	83 ec 0c             	sub    esp,0xc
c001256f:	53                   	push   ebx
c0012570:	ff d2                	call   edx
c0012572:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0012575:	eb 0d                	jmp    c0012584 <KeSystemCall(regs*, void*)+0x33>
c0012577:	52                   	push   edx
c0012578:	52                   	push   edx
c0012579:	50                   	push   eax
c001257a:	68 5a 1e 02 c0       	push   0xc0021e5a
c001257f:	e8 c1 83 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0012584:	83 c4 10             	add    esp,0x10
c0012587:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001258c:	31 d2                	xor    edx,edx
c001258e:	83 c4 08             	add    esp,0x8
c0012591:	5b                   	pop    ebx
c0012592:	c3                   	ret    
c0012593:	90                   	nop

c0012594 <KeSwitchEndian16(unsigned short)>:
c0012594:	83 ec 04             	sub    esp,0x4
c0012597:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001259b:	66 89 04 24          	mov    WORD PTR [esp],ax
c001259f:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00125a3:	c1 f8 08             	sar    eax,0x8
c00125a6:	89 c2                	mov    edx,eax
c00125a8:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00125ac:	c1 e0 08             	shl    eax,0x8
c00125af:	09 d0                	or     eax,edx
c00125b1:	83 c4 04             	add    esp,0x4
c00125b4:	c3                   	ret    
c00125b5:	8d 76 00             	lea    esi,[esi+0x0]

c00125b8 <KeSwitchEndian32(unsigned int)>:
c00125b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125bc:	c1 e8 18             	shr    eax,0x18
c00125bf:	89 c2                	mov    edx,eax
c00125c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125c5:	c1 e0 08             	shl    eax,0x8
c00125c8:	25 00 00 ff 00       	and    eax,0xff0000
c00125cd:	09 c2                	or     edx,eax
c00125cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125d3:	c1 e8 08             	shr    eax,0x8
c00125d6:	25 00 ff 00 00       	and    eax,0xff00
c00125db:	09 c2                	or     edx,eax
c00125dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125e1:	c1 e0 18             	shl    eax,0x18
c00125e4:	09 d0                	or     eax,edx
c00125e6:	c3                   	ret    
c00125e7:	90                   	nop

c00125e8 <EthernetCRC32(unsigned char*, int)>:
c00125e8:	83 ec 10             	sub    esp,0x10
c00125eb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00125f0:	75 0a                	jne    c00125fc <EthernetCRC32(unsigned char*, int)+0x14>
c00125f2:	b8 00 00 00 00       	mov    eax,0x0
c00125f7:	e9 8c 00 00 00       	jmp    c0012688 <EthernetCRC32(unsigned char*, int)+0xa0>
c00125fc:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012601:	7f 09                	jg     c001260c <EthernetCRC32(unsigned char*, int)+0x24>
c0012603:	b8 00 00 00 00       	mov    eax,0x0
c0012608:	eb 7e                	jmp    c0012688 <EthernetCRC32(unsigned char*, int)+0xa0>
c001260a:	66 90                	xchg   ax,ax
c001260c:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0012614:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001261c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012620:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0012624:	7d 5a                	jge    c0012680 <EthernetCRC32(unsigned char*, int)+0x98>
c0012626:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001262a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001262e:	01 d0                	add    eax,edx
c0012630:	8a 00                	mov    al,BYTE PTR [eax]
c0012632:	0f b6 c0             	movzx  eax,al
c0012635:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0012639:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012641:	8d 76 00             	lea    esi,[esi+0x0]
c0012644:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0012649:	7f 2d                	jg     c0012678 <EthernetCRC32(unsigned char*, int)+0x90>
c001264b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001264f:	83 e0 01             	and    eax,0x1
c0012652:	74 10                	je     c0012664 <EthernetCRC32(unsigned char*, int)+0x7c>
c0012654:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012658:	d1 e8                	shr    eax,1
c001265a:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001265f:	eb 0b                	jmp    c001266c <EthernetCRC32(unsigned char*, int)+0x84>
c0012661:	8d 76 00             	lea    esi,[esi+0x0]
c0012664:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012668:	d1 e8                	shr    eax,1
c001266a:	66 90                	xchg   ax,ax
c001266c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012670:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0012675:	eb cd                	jmp    c0012644 <EthernetCRC32(unsigned char*, int)+0x5c>
c0012677:	90                   	nop
c0012678:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c001267d:	eb 9d                	jmp    c001261c <EthernetCRC32(unsigned char*, int)+0x34>
c001267f:	90                   	nop
c0012680:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012684:	f7 d0                	not    eax
c0012686:	66 90                	xchg   ax,ax
c0012688:	83 c4 10             	add    esp,0x10
c001268b:	c3                   	ret    

c001268c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c001268c:	83 ec 2c             	sub    esp,0x2c
c001268f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012693:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012698:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001269c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00126a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00126a4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00126a7:	0f b7 c0             	movzx  eax,ax
c00126aa:	3d 06 08 00 00       	cmp    eax,0x806
c00126af:	75 13                	jne    c00126c4 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c00126b1:	83 ec 0c             	sub    esp,0xc
c00126b4:	68 6e 1e 02 c0       	push   0xc0021e6e
c00126b9:	e8 87 82 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00126be:	83 c4 10             	add    esp,0x10
c00126c1:	eb 25                	jmp    c00126e8 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c00126c3:	90                   	nop
c00126c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00126c8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00126cb:	0f b7 c0             	movzx  eax,ax
c00126ce:	3d 00 08 00 00       	cmp    eax,0x800
c00126d3:	75 13                	jne    c00126e8 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c00126d5:	83 ec 0c             	sub    esp,0xc
c00126d8:	68 84 1e 02 c0       	push   0xc0021e84
c00126dd:	e8 63 82 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00126e2:	83 c4 10             	add    esp,0x10
c00126e5:	8d 76 00             	lea    esi,[esi+0x0]
c00126e8:	90                   	nop
c00126e9:	83 c4 2c             	add    esp,0x2c
c00126ec:	c3                   	ret    

c00126ed <CmOpen(char const*)>:
c00126ed:	57                   	push   edi
c00126ee:	56                   	push   esi
c00126ef:	53                   	push   ebx
c00126f0:	83 ec 1c             	sub    esp,0x1c
c00126f3:	6a 30                	push   0x30
c00126f5:	e8 bc 53 ff ff       	call   c0007ab6 <malloc>
c00126fa:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012701:	89 c3                	mov    ebx,eax
c0012703:	e8 ae 53 ff ff       	call   c0007ab6 <malloc>
c0012708:	83 c4 0c             	add    esp,0xc
c001270b:	89 c6                	mov    esi,eax
c001270d:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0012713:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012717:	50                   	push   eax
c0012718:	e8 13 90 ff ff       	call   c000b730 <File::File(char const*, Process*)>
c001271d:	83 c4 0c             	add    esp,0xc
c0012720:	89 33                	mov    DWORD PTR [ebx],esi
c0012722:	8d 44 24 07          	lea    eax,[esp+0x7]
c0012726:	50                   	push   eax
c0012727:	8d 44 24 10          	lea    eax,[esp+0x10]
c001272b:	50                   	push   eax
c001272c:	56                   	push   esi
c001272d:	e8 bc 93 ff ff       	call   c000baee <File::stat(unsigned long long*, bool*)>
c0012732:	5a                   	pop    edx
c0012733:	59                   	pop    ecx
c0012734:	6a 01                	push   0x1
c0012736:	ff 33                	push   DWORD PTR [ebx]
c0012738:	e8 af 90 ff ff       	call   c000b7ec <File::open(FileOpenMode)>
c001273d:	5e                   	pop    esi
c001273e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012742:	e8 6f 53 ff ff       	call   c0007ab6 <malloc>
c0012747:	5a                   	pop    edx
c0012748:	89 c7                	mov    edi,eax
c001274a:	8d 74 24 10          	lea    esi,[esp+0x10]
c001274e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012750:	8b 10                	mov    edx,DWORD PTR [eax]
c0012752:	56                   	push   esi
c0012753:	57                   	push   edi
c0012754:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012758:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001275c:	50                   	push   eax
c001275d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012760:	83 c4 14             	add    esp,0x14
c0012763:	ff 33                	push   DWORD PTR [ebx]
c0012765:	e8 e0 90 ff ff       	call   c000b84a <File::close()>
c001276a:	59                   	pop    ecx
c001276b:	58                   	pop    eax
c001276c:	6a 13                	push   0x13
c001276e:	ff 33                	push   DWORD PTR [ebx]
c0012770:	e8 77 90 ff ff       	call   c000b7ec <File::open(FileOpenMode)>
c0012775:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012777:	8b 10                	mov    edx,DWORD PTR [eax]
c0012779:	89 34 24             	mov    DWORD PTR [esp],esi
c001277c:	57                   	push   edi
c001277d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012781:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012785:	50                   	push   eax
c0012786:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012789:	83 c4 14             	add    esp,0x14
c001278c:	57                   	push   edi
c001278d:	e8 34 53 ff ff       	call   c0007ac6 <free>
c0012792:	83 c4 10             	add    esp,0x10
c0012795:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0012798:	75 10                	jne    c00127aa <CmOpen(char const*)+0xbd>
c001279a:	83 ec 0c             	sub    esp,0xc
c001279d:	68 99 1e 02 c0       	push   0xc0021e99
c00127a2:	e8 c2 ea ff ff       	call   c0011269 <KePanic(char const*)>
c00127a7:	83 c4 10             	add    esp,0x10
c00127aa:	8d 7b 05             	lea    edi,[ebx+0x5]
c00127ad:	50                   	push   eax
c00127ae:	6a 00                	push   0x0
c00127b0:	6a 00                	push   0x0
c00127b2:	ff 33                	push   DWORD PTR [ebx]
c00127b4:	e8 f1 90 ff ff       	call   c000b8aa <File::seek(unsigned long long)>
c00127b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00127bb:	8b 10                	mov    edx,DWORD PTR [eax]
c00127bd:	89 34 24             	mov    DWORD PTR [esp],esi
c00127c0:	57                   	push   edi
c00127c1:	6a 00                	push   0x0
c00127c3:	6a 2b                	push   0x2b
c00127c5:	50                   	push   eax
c00127c6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00127c9:	83 c4 1c             	add    esp,0x1c
c00127cc:	6a 00                	push   0x0
c00127ce:	6a 00                	push   0x0
c00127d0:	ff 33                	push   DWORD PTR [ebx]
c00127d2:	e8 d3 90 ff ff       	call   c000b8aa <File::seek(unsigned long long)>
c00127d7:	83 c4 0c             	add    esp,0xc
c00127da:	6a 08                	push   0x8
c00127dc:	68 aa 1e 02 c0       	push   0xc0021eaa
c00127e1:	57                   	push   edi
c00127e2:	e8 99 db fe ff       	call   c0000380 <memcmp>
c00127e7:	83 c4 10             	add    esp,0x10
c00127ea:	85 c0                	test   eax,eax
c00127ec:	74 10                	je     c00127fe <CmOpen(char const*)+0x111>
c00127ee:	83 ec 0c             	sub    esp,0xc
c00127f1:	68 b3 1e 02 c0       	push   0xc0021eb3
c00127f6:	e8 6e ea ff ff       	call   c0011269 <KePanic(char const*)>
c00127fb:	83 c4 10             	add    esp,0x10
c00127fe:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0012802:	89 d8                	mov    eax,ebx
c0012804:	83 c4 10             	add    esp,0x10
c0012807:	5b                   	pop    ebx
c0012808:	5e                   	pop    esi
c0012809:	5f                   	pop    edi
c001280a:	c3                   	ret    

c001280b <CmClose(Reghive_Tag*)>:
c001280b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001280f:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012813:	74 0b                	je     c0012820 <CmClose(Reghive_Tag*)+0x15>
c0012815:	8b 00                	mov    eax,DWORD PTR [eax]
c0012817:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001281b:	e9 2a 90 ff ff       	jmp    c000b84a <File::close()>
c0012820:	c3                   	ret    

c0012821 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012821:	53                   	push   ebx
c0012822:	83 ec 18             	sub    esp,0x18
c0012825:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012829:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c001282d:	74 29                	je     c0012858 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c001282f:	50                   	push   eax
c0012830:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012835:	99                   	cdq    
c0012836:	52                   	push   edx
c0012837:	50                   	push   eax
c0012838:	ff 33                	push   DWORD PTR [ebx]
c001283a:	e8 6b 90 ff ff       	call   c000b8aa <File::seek(unsigned long long)>
c001283f:	5a                   	pop    edx
c0012840:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012842:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012846:	8b 10                	mov    edx,DWORD PTR [eax]
c0012848:	51                   	push   ecx
c0012849:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001284d:	6a 00                	push   0x0
c001284f:	6a 2b                	push   0x2b
c0012851:	50                   	push   eax
c0012852:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012855:	83 c4 20             	add    esp,0x20
c0012858:	83 c4 18             	add    esp,0x18
c001285b:	5b                   	pop    ebx
c001285c:	c3                   	ret    

c001285d <CmGetString(Reghive_Tag*, int, char*)>:
c001285d:	55                   	push   ebp
c001285e:	57                   	push   edi
c001285f:	56                   	push   esi
c0012860:	53                   	push   ebx
c0012861:	31 db                	xor    ebx,ebx
c0012863:	83 ec 70             	sub    esp,0x70
c0012866:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c001286d:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0012871:	50                   	push   eax
c0012872:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012879:	55                   	push   ebp
c001287a:	e8 a2 ff ff ff       	call   c0012821 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001287f:	83 c4 10             	add    esp,0x10
c0012882:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0012887:	c1 e0 08             	shl    eax,0x8
c001288a:	89 c2                	mov    edx,eax
c001288c:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012891:	09 d0                	or     eax,edx
c0012893:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0012898:	c1 e0 08             	shl    eax,0x8
c001289b:	09 d0                	or     eax,edx
c001289d:	74 25                	je     c00128c4 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c001289f:	6b fb 0d             	imul   edi,ebx,0xd
c00128a2:	52                   	push   edx
c00128a3:	8d 54 24 39          	lea    edx,[esp+0x39]
c00128a7:	52                   	push   edx
c00128a8:	50                   	push   eax
c00128a9:	55                   	push   ebp
c00128aa:	e8 72 ff ff ff       	call   c0012821 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00128af:	8d 74 24 49          	lea    esi,[esp+0x49]
c00128b3:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c00128ba:	b9 27 00 00 00       	mov    ecx,0x27
c00128bf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00128c1:	83 c4 10             	add    esp,0x10
c00128c4:	83 c3 03             	add    ebx,0x3
c00128c7:	83 fb 15             	cmp    ebx,0x15
c00128ca:	75 b6                	jne    c0012882 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c00128cc:	83 c4 6c             	add    esp,0x6c
c00128cf:	5b                   	pop    ebx
c00128d0:	5e                   	pop    esi
c00128d1:	5f                   	pop    edi
c00128d2:	5d                   	pop    ebp
c00128d3:	c3                   	ret    

c00128d4 <CmEnterDirectory(Reghive_Tag*, int)>:
c00128d4:	83 ec 40             	sub    esp,0x40
c00128d7:	8d 44 24 09          	lea    eax,[esp+0x9]
c00128db:	50                   	push   eax
c00128dc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00128e0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00128e4:	e8 38 ff ff ff       	call   c0012821 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00128e9:	83 c4 10             	add    esp,0x10
c00128ec:	83 c8 ff             	or     eax,0xffffffff
c00128ef:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c00128f4:	75 19                	jne    c001290f <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c00128f6:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c00128fb:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012900:	c1 e0 08             	shl    eax,0x8
c0012903:	09 c2                	or     edx,eax
c0012905:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c001290a:	c1 e0 10             	shl    eax,0x10
c001290d:	09 d0                	or     eax,edx
c001290f:	83 c4 3c             	add    esp,0x3c
c0012912:	c3                   	ret    

c0012913 <CmGetNext(Reghive_Tag*, int)>:
c0012913:	83 ec 40             	sub    esp,0x40
c0012916:	8d 44 24 09          	lea    eax,[esp+0x9]
c001291a:	50                   	push   eax
c001291b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001291f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012923:	e8 f9 fe ff ff       	call   c0012821 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012928:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c001292d:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012932:	c1 e0 08             	shl    eax,0x8
c0012935:	09 c2                	or     edx,eax
c0012937:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001293c:	83 c4 4c             	add    esp,0x4c
c001293f:	c1 e0 10             	shl    eax,0x10
c0012942:	09 d0                	or     eax,edx
c0012944:	c3                   	ret    

c0012945 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0012945:	53                   	push   ebx
c0012946:	83 ec 18             	sub    esp,0x18
c0012949:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001294d:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012951:	74 29                	je     c001297c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012953:	50                   	push   eax
c0012954:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012959:	99                   	cdq    
c001295a:	52                   	push   edx
c001295b:	50                   	push   eax
c001295c:	ff 33                	push   DWORD PTR [ebx]
c001295e:	e8 47 8f ff ff       	call   c000b8aa <File::seek(unsigned long long)>
c0012963:	5a                   	pop    edx
c0012964:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012966:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001296a:	8b 10                	mov    edx,DWORD PTR [eax]
c001296c:	51                   	push   ecx
c001296d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012971:	6a 00                	push   0x0
c0012973:	6a 2b                	push   0x2b
c0012975:	50                   	push   eax
c0012976:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012979:	83 c4 20             	add    esp,0x20
c001297c:	83 c4 18             	add    esp,0x18
c001297f:	5b                   	pop    ebx
c0012980:	c3                   	ret    

c0012981 <CmFreeExtent(Reghive_Tag*, int)>:
c0012981:	53                   	push   ebx
c0012982:	83 ec 3c             	sub    esp,0x3c
c0012985:	6a 2b                	push   0x2b
c0012987:	6a 00                	push   0x0
c0012989:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c001298d:	53                   	push   ebx
c001298e:	e8 5d db fe ff       	call   c00004f0 <memset>
c0012993:	83 c4 0c             	add    esp,0xc
c0012996:	53                   	push   ebx
c0012997:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001299b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001299f:	e8 a1 ff ff ff       	call   c0012945 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00129a4:	83 c4 48             	add    esp,0x48
c00129a7:	5b                   	pop    ebx
c00129a8:	c3                   	ret    

c00129a9 <CmUpdateHeader(Reghive_Tag*)>:
c00129a9:	83 ec 0c             	sub    esp,0xc
c00129ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129b0:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c00129b4:	74 10                	je     c00129c6 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c00129b6:	52                   	push   edx
c00129b7:	8d 50 05             	lea    edx,[eax+0x5]
c00129ba:	52                   	push   edx
c00129bb:	6a 00                	push   0x0
c00129bd:	50                   	push   eax
c00129be:	e8 82 ff ff ff       	call   c0012945 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00129c3:	83 c4 10             	add    esp,0x10
c00129c6:	83 c4 0c             	add    esp,0xc
c00129c9:	c3                   	ret    

c00129ca <CmExpand(Reghive_Tag*, int)>:
c00129ca:	57                   	push   edi
c00129cb:	56                   	push   esi
c00129cc:	83 ce ff             	or     esi,0xffffffff
c00129cf:	53                   	push   ebx
c00129d0:	83 ec 30             	sub    esp,0x30
c00129d3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00129d7:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00129db:	74 5f                	je     c0012a3c <CmExpand(Reghive_Tag*, int)+0x72>
c00129dd:	31 d2                	xor    edx,edx
c00129df:	31 f6                	xor    esi,esi
c00129e1:	50                   	push   eax
c00129e2:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c00129e6:	52                   	push   edx
c00129e7:	50                   	push   eax
c00129e8:	ff 33                	push   DWORD PTR [ebx]
c00129ea:	e8 bb 8e ff ff       	call   c000b8aa <File::seek(unsigned long long)>
c00129ef:	83 c4 0c             	add    esp,0xc
c00129f2:	6a 2b                	push   0x2b
c00129f4:	6a 00                	push   0x0
c00129f6:	8d 7c 24 11          	lea    edi,[esp+0x11]
c00129fa:	57                   	push   edi
c00129fb:	e8 f0 da fe ff       	call   c00004f0 <memset>
c0012a00:	83 c4 10             	add    esp,0x10
c0012a03:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0012a07:	7d 1b                	jge    c0012a24 <CmExpand(Reghive_Tag*, int)+0x5a>
c0012a09:	83 ec 0c             	sub    esp,0xc
c0012a0c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012a0e:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012a12:	8b 10                	mov    edx,DWORD PTR [eax]
c0012a14:	46                   	inc    esi
c0012a15:	51                   	push   ecx
c0012a16:	57                   	push   edi
c0012a17:	6a 00                	push   0x0
c0012a19:	6a 2b                	push   0x2b
c0012a1b:	50                   	push   eax
c0012a1c:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012a1f:	83 c4 20             	add    esp,0x20
c0012a22:	eb df                	jmp    c0012a03 <CmExpand(Reghive_Tag*, int)+0x39>
c0012a24:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0012a28:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c0012a2b:	83 ec 0c             	sub    esp,0xc
c0012a2e:	01 f2                	add    edx,esi
c0012a30:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c0012a33:	53                   	push   ebx
c0012a34:	e8 70 ff ff ff       	call   c00129a9 <CmUpdateHeader(Reghive_Tag*)>
c0012a39:	83 c4 10             	add    esp,0x10
c0012a3c:	83 c4 30             	add    esp,0x30
c0012a3f:	89 f0                	mov    eax,esi
c0012a41:	5b                   	pop    ebx
c0012a42:	5e                   	pop    esi
c0012a43:	5f                   	pop    edi
c0012a44:	c3                   	ret    

c0012a45 <CmFindUnusedExtent(Reghive_Tag*)>:
c0012a45:	55                   	push   ebp
c0012a46:	57                   	push   edi
c0012a47:	56                   	push   esi
c0012a48:	53                   	push   ebx
c0012a49:	83 cb ff             	or     ebx,0xffffffff
c0012a4c:	83 ec 1c             	sub    esp,0x1c
c0012a4f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012a53:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0012a57:	74 68                	je     c0012ac1 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012a59:	be 2b 00 00 00       	mov    esi,0x2b
c0012a5e:	51                   	push   ecx
c0012a5f:	31 ff                	xor    edi,edi
c0012a61:	6a 00                	push   0x0
c0012a63:	31 db                	xor    ebx,ebx
c0012a65:	6a 00                	push   0x0
c0012a67:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012a6a:	e8 3b 8e ff ff       	call   c000b8aa <File::seek(unsigned long long)>
c0012a6f:	83 c4 10             	add    esp,0x10
c0012a72:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012a75:	76 3b                	jbe    c0012ab2 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012a77:	83 ec 0c             	sub    esp,0xc
c0012a7a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012a7d:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012a81:	8b 10                	mov    edx,DWORD PTR [eax]
c0012a83:	51                   	push   ecx
c0012a84:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012a88:	51                   	push   ecx
c0012a89:	6a 00                	push   0x0
c0012a8b:	6a 01                	push   0x1
c0012a8d:	50                   	push   eax
c0012a8e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012a91:	83 c4 20             	add    esp,0x20
c0012a94:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012a99:	74 26                	je     c0012ac1 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012a9b:	43                   	inc    ebx
c0012a9c:	52                   	push   edx
c0012a9d:	57                   	push   edi
c0012a9e:	56                   	push   esi
c0012a9f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012aa2:	e8 03 8e ff ff       	call   c000b8aa <File::seek(unsigned long long)>
c0012aa7:	83 c6 2b             	add    esi,0x2b
c0012aaa:	83 d7 00             	adc    edi,0x0
c0012aad:	83 c4 10             	add    esp,0x10
c0012ab0:	eb c0                	jmp    c0012a72 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012ab2:	50                   	push   eax
c0012ab3:	50                   	push   eax
c0012ab4:	6a 40                	push   0x40
c0012ab6:	55                   	push   ebp
c0012ab7:	e8 0e ff ff ff       	call   c00129ca <CmExpand(Reghive_Tag*, int)>
c0012abc:	83 c4 10             	add    esp,0x10
c0012abf:	89 c3                	mov    ebx,eax
c0012ac1:	83 c4 1c             	add    esp,0x1c
c0012ac4:	89 d8                	mov    eax,ebx
c0012ac6:	5b                   	pop    ebx
c0012ac7:	5e                   	pop    esi
c0012ac8:	5f                   	pop    edi
c0012ac9:	5d                   	pop    ebp
c0012aca:	c3                   	ret    

c0012acb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0012acb:	55                   	push   ebp
c0012acc:	57                   	push   edi
c0012acd:	56                   	push   esi
c0012ace:	53                   	push   ebx
c0012acf:	81 ec 88 00 00 00    	sub    esp,0x88
c0012ad5:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0012adc:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012ae3:	e8 5d ff ff ff       	call   c0012a45 <CmFindUnusedExtent(Reghive_Tag*)>
c0012ae8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012aec:	83 c4 0c             	add    esp,0xc
c0012aef:	6a 2b                	push   0x2b
c0012af1:	6a 00                	push   0x0
c0012af3:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0012af7:	55                   	push   ebp
c0012af8:	e8 f3 d9 fe ff       	call   c00004f0 <memset>
c0012afd:	83 c4 10             	add    esp,0x10
c0012b00:	85 db                	test   ebx,ebx
c0012b02:	74 12                	je     c0012b16 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0012b04:	51                   	push   ecx
c0012b05:	55                   	push   ebp
c0012b06:	53                   	push   ebx
c0012b07:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012b0e:	e8 0e fd ff ff       	call   c0012821 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012b13:	83 c4 10             	add    esp,0x10
c0012b16:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0012b1a:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012b21:	b9 2b 00 00 00       	mov    ecx,0x2b
c0012b26:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012b28:	85 db                	test   ebx,ebx
c0012b2a:	74 49                	je     c0012b75 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0012b2c:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0012b31:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0012b36:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012b3a:	c1 e0 08             	shl    eax,0x8
c0012b3d:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0012b43:	09 c8                	or     eax,ecx
c0012b45:	74 11                	je     c0012b58 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0012b47:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012b4b:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0012b4f:	c1 e8 10             	shr    eax,0x10
c0012b52:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0012b56:	eb 0f                	jmp    c0012b67 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0012b58:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012b5d:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012b62:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012b67:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0012b6b:	c1 ea 08             	shr    edx,0x8
c0012b6e:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0012b73:	eb 0f                	jmp    c0012b84 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0012b75:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012b7a:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012b7f:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012b84:	52                   	push   edx
c0012b85:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012b89:	50                   	push   eax
c0012b8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012b8e:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012b95:	e8 ab fd ff ff       	call   c0012945 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012b9a:	83 c4 10             	add    esp,0x10
c0012b9d:	85 db                	test   ebx,ebx
c0012b9f:	74 12                	je     c0012bb3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0012ba1:	50                   	push   eax
c0012ba2:	55                   	push   ebp
c0012ba3:	53                   	push   ebx
c0012ba4:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012bab:	e8 95 fd ff ff       	call   c0012945 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012bb0:	83 c4 10             	add    esp,0x10
c0012bb3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012bb7:	83 c4 7c             	add    esp,0x7c
c0012bba:	5b                   	pop    ebx
c0012bbb:	5e                   	pop    esi
c0012bbc:	5f                   	pop    edi
c0012bbd:	5d                   	pop    ebp
c0012bbe:	c3                   	ret    

c0012bbf <CmSetString(Reghive_Tag*, int, char const*)>:
c0012bbf:	55                   	push   ebp
c0012bc0:	57                   	push   edi
c0012bc1:	56                   	push   esi
c0012bc2:	53                   	push   ebx
c0012bc3:	bb 27 00 00 00       	mov    ebx,0x27
c0012bc8:	81 ec 88 00 00 00    	sub    esp,0x88
c0012bce:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012bd5:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0012bdc:	e8 8f d9 fe ff       	call   c0000570 <strlen>
c0012be1:	8d 48 26             	lea    ecx,[eax+0x26]
c0012be4:	89 c8                	mov    eax,ecx
c0012be6:	99                   	cdq    
c0012be7:	f7 fb                	idiv   ebx
c0012be9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012bed:	83 c4 10             	add    esp,0x10
c0012bf0:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0012bf6:	7e 10                	jle    c0012c08 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0012bf8:	83 ec 0c             	sub    esp,0xc
c0012bfb:	68 c4 1e 02 c0       	push   0xc0021ec4
c0012c00:	e8 64 e6 ff ff       	call   c0011269 <KePanic(char const*)>
c0012c05:	83 c4 10             	add    esp,0x10
c0012c08:	31 ff                	xor    edi,edi
c0012c0a:	50                   	push   eax
c0012c0b:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0012c0f:	53                   	push   ebx
c0012c10:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012c17:	56                   	push   esi
c0012c18:	e8 04 fc ff ff       	call   c0012821 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012c1d:	83 c4 10             	add    esp,0x10
c0012c20:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c0012c24:	89 d0                	mov    eax,edx
c0012c26:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c0012c2a:	c1 e0 08             	shl    eax,0x8
c0012c2d:	09 c2                	or     edx,eax
c0012c2f:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0012c33:	c1 e2 08             	shl    edx,0x8
c0012c36:	09 c2                	or     edx,eax
c0012c38:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0012c3c:	7e 76                	jle    c0012cb4 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c0012c3e:	85 d2                	test   edx,edx
c0012c40:	75 25                	jne    c0012c67 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0012c42:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0012c47:	8d 44 24 45          	lea    eax,[esp+0x45]
c0012c4b:	50                   	push   eax
c0012c4c:	6a 00                	push   0x0
c0012c4e:	6a 00                	push   0x0
c0012c50:	56                   	push   esi
c0012c51:	e8 75 fe ff ff       	call   c0012acb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012c56:	83 c4 10             	add    esp,0x10
c0012c59:	89 c2                	mov    edx,eax
c0012c5b:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0012c5e:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0012c61:	c1 f8 10             	sar    eax,0x10
c0012c64:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0012c67:	55                   	push   ebp
c0012c68:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c0012c6c:	55                   	push   ebp
c0012c6d:	52                   	push   edx
c0012c6e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0012c72:	56                   	push   esi
c0012c73:	e8 a9 fb ff ff       	call   c0012821 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012c78:	83 c4 0c             	add    esp,0xc
c0012c7b:	6a 27                	push   0x27
c0012c7d:	6a 00                	push   0x0
c0012c7f:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012c83:	51                   	push   ecx
c0012c84:	e8 67 d8 fe ff       	call   c00004f0 <memset>
c0012c89:	83 c4 0c             	add    esp,0xc
c0012c8c:	6b c7 27             	imul   eax,edi,0x27
c0012c8f:	6a 27                	push   0x27
c0012c91:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0012c98:	50                   	push   eax
c0012c99:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012c9d:	51                   	push   ecx
c0012c9e:	e8 dd d9 fe ff       	call   c0000680 <strncpy>
c0012ca3:	83 c4 0c             	add    esp,0xc
c0012ca6:	55                   	push   ebp
c0012ca7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012cab:	52                   	push   edx
c0012cac:	56                   	push   esi
c0012cad:	e8 93 fc ff ff       	call   c0012945 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012cb2:	eb 19                	jmp    c0012ccd <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c0012cb4:	85 d2                	test   edx,edx
c0012cb6:	74 18                	je     c0012cd0 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c0012cb8:	51                   	push   ecx
c0012cb9:	51                   	push   ecx
c0012cba:	52                   	push   edx
c0012cbb:	56                   	push   esi
c0012cbc:	e8 c0 fc ff ff       	call   c0012981 <CmFreeExtent(Reghive_Tag*, int)>
c0012cc1:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0012cc5:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0012cc9:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0012ccd:	83 c4 10             	add    esp,0x10
c0012cd0:	47                   	inc    edi
c0012cd1:	83 c3 03             	add    ebx,0x3
c0012cd4:	83 ff 07             	cmp    edi,0x7
c0012cd7:	0f 85 43 ff ff ff    	jne    c0012c20 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0012cdd:	50                   	push   eax
c0012cde:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0012ce2:	50                   	push   eax
c0012ce3:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012cea:	56                   	push   esi
c0012ceb:	e8 55 fc ff ff       	call   c0012945 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012cf0:	81 c4 8c 00 00 00    	add    esp,0x8c
c0012cf6:	5b                   	pop    ebx
c0012cf7:	5e                   	pop    esi
c0012cf8:	5f                   	pop    edi
c0012cf9:	5d                   	pop    ebp
c0012cfa:	c3                   	ret    

c0012cfb <CmGetMatch(char*, char*, bool, bool*)>:
c0012cfb:	56                   	push   esi
c0012cfc:	53                   	push   ebx
c0012cfd:	50                   	push   eax
c0012cfe:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012d02:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0012d07:	74 25                	je     c0012d2e <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0012d09:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012d0c:	31 db                	xor    ebx,ebx
c0012d0e:	50                   	push   eax
c0012d0f:	50                   	push   eax
c0012d10:	8d 04 9d 60 33 02 c0 	lea    eax,[ebx*4-0x3ffdcca0]
c0012d17:	50                   	push   eax
c0012d18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d1c:	e8 2f da fe ff       	call   c0000750 <strcmp>
c0012d21:	83 c4 10             	add    esp,0x10
c0012d24:	85 c0                	test   eax,eax
c0012d26:	74 2e                	je     c0012d56 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012d28:	43                   	inc    ebx
c0012d29:	83 fb 3f             	cmp    ebx,0x3f
c0012d2c:	75 e0                	jne    c0012d0e <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0012d2e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012d31:	31 db                	xor    ebx,ebx
c0012d33:	8d 04 9d 60 33 02 c0 	lea    eax,[ebx*4-0x3ffdcca0]
c0012d3a:	51                   	push   ecx
c0012d3b:	51                   	push   ecx
c0012d3c:	50                   	push   eax
c0012d3d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012d41:	e8 0a da fe ff       	call   c0000750 <strcmp>
c0012d46:	83 c4 10             	add    esp,0x10
c0012d49:	85 c0                	test   eax,eax
c0012d4b:	74 09                	je     c0012d56 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012d4d:	43                   	inc    ebx
c0012d4e:	83 fb 3f             	cmp    ebx,0x3f
c0012d51:	75 e0                	jne    c0012d33 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0012d53:	83 cb ff             	or     ebx,0xffffffff
c0012d56:	89 d8                	mov    eax,ebx
c0012d58:	5a                   	pop    edx
c0012d59:	5b                   	pop    ebx
c0012d5a:	5e                   	pop    esi
c0012d5b:	c3                   	ret    

c0012d5c <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0012d5c:	55                   	push   ebp
c0012d5d:	31 c0                	xor    eax,eax
c0012d5f:	57                   	push   edi
c0012d60:	56                   	push   esi
c0012d61:	53                   	push   ebx
c0012d62:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012d66:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012d6a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012d6c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012d70:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0012d73:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012d77:	83 fd 1f             	cmp    ebp,0x1f
c0012d7a:	7f 0b                	jg     c0012d87 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0012d7c:	0f b6 c2             	movzx  eax,dl
c0012d7f:	d3 e0                	shl    eax,cl
c0012d81:	09 07                	or     DWORD PTR [edi],eax
c0012d83:	b0 01                	mov    al,0x1
c0012d85:	01 33                	add    DWORD PTR [ebx],esi
c0012d87:	5b                   	pop    ebx
c0012d88:	5e                   	pop    esi
c0012d89:	5f                   	pop    edi
c0012d8a:	5d                   	pop    ebp
c0012d8b:	c3                   	ret    

c0012d8c <CmGetShift(unsigned int*, int*, int, bool*)>:
c0012d8c:	57                   	push   edi
c0012d8d:	56                   	push   esi
c0012d8e:	53                   	push   ebx
c0012d8f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012d93:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012d97:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0012d9b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012d9f:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0012da1:	7c 17                	jl     c0012dba <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0012da3:	8b 17                	mov    edx,DWORD PTR [edi]
c0012da5:	b8 01 00 00 00       	mov    eax,0x1
c0012daa:	d3 e0                	shl    eax,cl
c0012dac:	48                   	dec    eax
c0012dad:	21 d0                	and    eax,edx
c0012daf:	d3 ea                	shr    edx,cl
c0012db1:	89 17                	mov    DWORD PTR [edi],edx
c0012db3:	29 0b                	sub    DWORD PTR [ebx],ecx
c0012db5:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012db8:	eb 05                	jmp    c0012dbf <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0012dba:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012dbd:	31 c0                	xor    eax,eax
c0012dbf:	5b                   	pop    ebx
c0012dc0:	5e                   	pop    esi
c0012dc1:	5f                   	pop    edi
c0012dc2:	c3                   	ret    

c0012dc3 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0012dc3:	83 ec 40             	sub    esp,0x40
c0012dc6:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012dca:	50                   	push   eax
c0012dcb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012dcf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012dd3:	e8 49 fa ff ff       	call   c0012821 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012dd8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0012ddc:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0012de0:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0012de4:	89 10                	mov    DWORD PTR [eax],edx
c0012de6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0012de9:	83 c4 4c             	add    esp,0x4c
c0012dec:	c3                   	ret    

c0012ded <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0012ded:	55                   	push   ebp
c0012dee:	57                   	push   edi
c0012def:	56                   	push   esi
c0012df0:	53                   	push   ebx
c0012df1:	83 ec 40             	sub    esp,0x40
c0012df4:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0012df8:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0012dfc:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0012e00:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0012e04:	53                   	push   ebx
c0012e05:	56                   	push   esi
c0012e06:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012e0a:	e8 12 fa ff ff       	call   c0012821 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e0f:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0012e13:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0012e17:	83 c4 0c             	add    esp,0xc
c0012e1a:	53                   	push   ebx
c0012e1b:	56                   	push   esi
c0012e1c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012e20:	e8 20 fb ff ff       	call   c0012945 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012e25:	83 c4 4c             	add    esp,0x4c
c0012e28:	5b                   	pop    ebx
c0012e29:	5e                   	pop    esi
c0012e2a:	5f                   	pop    edi
c0012e2b:	5d                   	pop    ebp
c0012e2c:	c3                   	ret    

c0012e2d <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0012e2d:	55                   	push   ebp
c0012e2e:	57                   	push   edi
c0012e2f:	56                   	push   esi
c0012e30:	31 f6                	xor    esi,esi
c0012e32:	53                   	push   ebx
c0012e33:	31 db                	xor    ebx,ebx
c0012e35:	83 ec 40             	sub    esp,0x40
c0012e38:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012e40:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012e48:	6a 12                	push   0x12
c0012e4a:	68 ee 00 00 00       	push   0xee
c0012e4f:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012e53:	e8 98 d6 fe ff       	call   c00004f0 <memset>
c0012e58:	83 c4 10             	add    esp,0x10
c0012e5b:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0012e5f:	6a 08                	push   0x8
c0012e61:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012e65:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0012e69:	50                   	push   eax
c0012e6a:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012e6e:	55                   	push   ebp
c0012e6f:	57                   	push   edi
c0012e70:	e8 e7 fe ff ff       	call   c0012d5c <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012e75:	83 c4 10             	add    esp,0x10
c0012e78:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012e7c:	50                   	push   eax
c0012e7d:	6a 06                	push   0x6
c0012e7f:	55                   	push   ebp
c0012e80:	57                   	push   edi
c0012e81:	e8 06 ff ff ff       	call   c0012d8c <CmGetShift(unsigned int*, int*, int, bool*)>
c0012e86:	83 c4 10             	add    esp,0x10
c0012e89:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012e8e:	74 07                	je     c0012e97 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0012e90:	46                   	inc    esi
c0012e91:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0012e95:	eb e1                	jmp    c0012e78 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0012e97:	43                   	inc    ebx
c0012e98:	83 fb 12             	cmp    ebx,0x12
c0012e9b:	75 c2                	jne    c0012e5f <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0012e9d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012ea1:	31 db                	xor    ebx,ebx
c0012ea3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012ea6:	50                   	push   eax
c0012ea7:	50                   	push   eax
c0012ea8:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c0012ead:	43                   	inc    ebx
c0012eae:	8d 04 85 60 33 02 c0 	lea    eax,[eax*4-0x3ffdcca0]
c0012eb5:	50                   	push   eax
c0012eb6:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012eba:	e8 81 d9 fe ff       	call   c0000840 <strcat>
c0012ebf:	83 c4 10             	add    esp,0x10
c0012ec2:	83 fb 18             	cmp    ebx,0x18
c0012ec5:	75 df                	jne    c0012ea6 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0012ec7:	83 c4 3c             	add    esp,0x3c
c0012eca:	31 c0                	xor    eax,eax
c0012ecc:	5b                   	pop    ebx
c0012ecd:	5e                   	pop    esi
c0012ece:	5f                   	pop    edi
c0012ecf:	5d                   	pop    ebp
c0012ed0:	c3                   	ret    

c0012ed1 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0012ed1:	83 ec 40             	sub    esp,0x40
c0012ed4:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012ed8:	50                   	push   eax
c0012ed9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012edd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ee1:	e8 3b f9 ff ff       	call   c0012821 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012ee6:	58                   	pop    eax
c0012ee7:	5a                   	pop    edx
c0012ee8:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0012eec:	8d 44 24 15          	lea    eax,[esp+0x15]
c0012ef0:	50                   	push   eax
c0012ef1:	e8 37 ff ff ff       	call   c0012e2d <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0012ef6:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0012efb:	83 c4 4c             	add    esp,0x4c
c0012efe:	c3                   	ret    

c0012eff <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0012eff:	55                   	push   ebp
c0012f00:	57                   	push   edi
c0012f01:	56                   	push   esi
c0012f02:	53                   	push   ebx
c0012f03:	31 db                	xor    ebx,ebx
c0012f05:	83 ec 70             	sub    esp,0x70
c0012f08:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0012f0f:	6a 30                	push   0x30
c0012f11:	6a 00                	push   0x0
c0012f13:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0012f17:	56                   	push   esi
c0012f18:	e8 d3 d5 fe ff       	call   c00004f0 <memset>
c0012f1d:	83 c4 10             	add    esp,0x10
c0012f20:	83 ec 0c             	sub    esp,0xc
c0012f23:	57                   	push   edi
c0012f24:	e8 47 d6 fe ff       	call   c0000570 <strlen>
c0012f29:	83 c4 10             	add    esp,0x10
c0012f2c:	39 d8                	cmp    eax,ebx
c0012f2e:	76 16                	jbe    c0012f46 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0012f30:	83 ec 0c             	sub    esp,0xc
c0012f33:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0012f37:	50                   	push   eax
c0012f38:	e8 f3 d9 fe ff       	call   c0000930 <toupper>
c0012f3d:	83 c4 10             	add    esp,0x10
c0012f40:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0012f43:	43                   	inc    ebx
c0012f44:	eb da                	jmp    c0012f20 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0012f46:	31 f6                	xor    esi,esi
c0012f48:	52                   	push   edx
c0012f49:	31 ff                	xor    edi,edi
c0012f4b:	6a 18                	push   0x18
c0012f4d:	6a 3f                	push   0x3f
c0012f4f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012f53:	50                   	push   eax
c0012f54:	e8 97 d5 fe ff       	call   c00004f0 <memset>
c0012f59:	83 c4 10             	add    esp,0x10
c0012f5c:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c0012f60:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c0012f64:	84 c0                	test   al,al
c0012f66:	0f 84 b0 00 00 00    	je     c001301c <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0012f6c:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0012f70:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c0012f75:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0012f79:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c0012f7e:	8d 6e 01             	lea    ebp,[esi+0x1]
c0012f81:	83 ec 0c             	sub    esp,0xc
c0012f84:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0012f88:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0012f8c:	53                   	push   ebx
c0012f8d:	e8 de d5 fe ff       	call   c0000570 <strlen>
c0012f92:	83 c4 10             	add    esp,0x10
c0012f95:	85 c0                	test   eax,eax
c0012f97:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012f9b:	74 0b                	je     c0012fa8 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0012f9d:	50                   	push   eax
c0012f9e:	6a 01                	push   0x1
c0012fa0:	53                   	push   ebx
c0012fa1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012fa5:	50                   	push   eax
c0012fa6:	eb 0a                	jmp    c0012fb2 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0012fa8:	50                   	push   eax
c0012fa9:	6a 00                	push   0x0
c0012fab:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0012faf:	50                   	push   eax
c0012fb0:	6a 00                	push   0x0
c0012fb2:	e8 44 fd ff ff       	call   c0012cfb <CmGetMatch(char*, char*, bool, bool*)>
c0012fb7:	83 c4 10             	add    esp,0x10
c0012fba:	83 f8 ff             	cmp    eax,0xffffffff
c0012fbd:	75 1a                	jne    c0012fd9 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0012fbf:	83 ec 0c             	sub    esp,0xc
c0012fc2:	68 d9 1e 02 c0       	push   0xc0021ed9
c0012fc7:	e8 9d e2 ff ff       	call   c0011269 <KePanic(char const*)>
c0012fcc:	83 c4 10             	add    esp,0x10
c0012fcf:	b8 02 00 00 00       	mov    eax,0x2
c0012fd4:	e9 bc 00 00 00       	jmp    c0013095 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0012fd9:	83 ff 18             	cmp    edi,0x18
c0012fdc:	75 1a                	jne    c0012ff8 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0012fde:	83 ec 0c             	sub    esp,0xc
c0012fe1:	68 ee 1e 02 c0       	push   0xc0021eee
c0012fe6:	e8 7e e2 ff ff       	call   c0011269 <KePanic(char const*)>
c0012feb:	83 c4 10             	add    esp,0x10
c0012fee:	b8 01 00 00 00       	mov    eax,0x1
c0012ff3:	e9 9d 00 00 00       	jmp    c0013095 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0012ff8:	47                   	inc    edi
c0012ff9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012ffe:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0013002:	74 02                	je     c0013006 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c0013004:	89 ee                	mov    esi,ebp
c0013006:	83 ec 0c             	sub    esp,0xc
c0013009:	53                   	push   ebx
c001300a:	e8 61 d5 fe ff       	call   c0000570 <strlen>
c001300f:	83 c4 10             	add    esp,0x10
c0013012:	85 c0                	test   eax,eax
c0013014:	74 06                	je     c001301c <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0013016:	46                   	inc    esi
c0013017:	e9 40 ff ff ff       	jmp    c0012f5c <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c001301c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013024:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001302c:	31 f6                	xor    esi,esi
c001302e:	50                   	push   eax
c001302f:	31 ff                	xor    edi,edi
c0013031:	6a 12                	push   0x12
c0013033:	68 ee 00 00 00       	push   0xee
c0013038:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c001303f:	e8 ac d4 fe ff       	call   c00004f0 <memset>
c0013044:	83 c4 10             	add    esp,0x10
c0013047:	83 fe 17             	cmp    esi,0x17
c001304a:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c001304e:	7e 26                	jle    c0013076 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c0013050:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0013054:	50                   	push   eax
c0013055:	6a 08                	push   0x8
c0013057:	55                   	push   ebp
c0013058:	53                   	push   ebx
c0013059:	e8 2e fd ff ff       	call   c0012d8c <CmGetShift(unsigned int*, int*, int, bool*)>
c001305e:	83 c4 10             	add    esp,0x10
c0013061:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013066:	74 26                	je     c001308e <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c0013068:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c001306f:	4e                   	dec    esi
c0013070:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0013073:	47                   	inc    edi
c0013074:	eb 1c                	jmp    c0013092 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0013076:	6a 06                	push   0x6
c0013078:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c001307d:	50                   	push   eax
c001307e:	55                   	push   ebp
c001307f:	53                   	push   ebx
c0013080:	e8 d7 fc ff ff       	call   c0012d5c <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0013085:	83 c4 10             	add    esp,0x10
c0013088:	84 c0                	test   al,al
c001308a:	75 06                	jne    c0013092 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c001308c:	eb c2                	jmp    c0013050 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c001308e:	31 c0                	xor    eax,eax
c0013090:	eb 03                	jmp    c0013095 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0013092:	46                   	inc    esi
c0013093:	eb b2                	jmp    c0013047 <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c0013095:	83 c4 6c             	add    esp,0x6c
c0013098:	5b                   	pop    ebx
c0013099:	5e                   	pop    esi
c001309a:	5f                   	pop    edi
c001309b:	5d                   	pop    ebp
c001309c:	c3                   	ret    

c001309d <CmCreateString(Reghive_Tag*, int, char const*)>:
c001309d:	53                   	push   ebx
c001309e:	83 ec 3c             	sub    esp,0x3c
c00130a1:	6a 2b                	push   0x2b
c00130a3:	6a 00                	push   0x0
c00130a5:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00130a9:	53                   	push   ebx
c00130aa:	e8 41 d4 fe ff       	call   c00004f0 <memset>
c00130af:	58                   	pop    eax
c00130b0:	5a                   	pop    edx
c00130b1:	8d 44 24 11          	lea    eax,[esp+0x11]
c00130b5:	50                   	push   eax
c00130b6:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00130ba:	e8 40 fe ff ff       	call   c0012eff <CmConvertToInternalFilename(char const*, unsigned char*)>
c00130bf:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c00130c4:	83 c4 0c             	add    esp,0xc
c00130c7:	6a 15                	push   0x15
c00130c9:	6a 00                	push   0x0
c00130cb:	8d 44 24 27          	lea    eax,[esp+0x27]
c00130cf:	50                   	push   eax
c00130d0:	e8 1b d4 fe ff       	call   c00004f0 <memset>
c00130d5:	53                   	push   ebx
c00130d6:	6a 00                	push   0x0
c00130d8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00130dc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00130e0:	e8 e6 f9 ff ff       	call   c0012acb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00130e5:	83 c4 58             	add    esp,0x58
c00130e8:	5b                   	pop    ebx
c00130e9:	c3                   	ret    

c00130ea <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c00130ea:	56                   	push   esi
c00130eb:	53                   	push   ebx
c00130ec:	83 ec 48             	sub    esp,0x48
c00130ef:	6a 12                	push   0x12
c00130f1:	68 ff 00 00 00       	push   0xff
c00130f6:	8d 74 24 0f          	lea    esi,[esp+0xf]
c00130fa:	56                   	push   esi
c00130fb:	e8 f0 d3 fe ff       	call   c00004f0 <memset>
c0013100:	5a                   	pop    edx
c0013101:	59                   	pop    ecx
c0013102:	56                   	push   esi
c0013103:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0013107:	e8 f3 fd ff ff       	call   c0012eff <CmConvertToInternalFilename(char const*, unsigned char*)>
c001310c:	83 c4 10             	add    esp,0x10
c001310f:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0013113:	85 db                	test   ebx,ebx
c0013115:	74 42                	je     c0013159 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c0013117:	50                   	push   eax
c0013118:	8d 44 24 19          	lea    eax,[esp+0x19]
c001311c:	50                   	push   eax
c001311d:	53                   	push   ebx
c001311e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013122:	e8 fa f6 ff ff       	call   c0012821 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013127:	83 c4 0c             	add    esp,0xc
c001312a:	6a 12                	push   0x12
c001312c:	8d 44 24 21          	lea    eax,[esp+0x21]
c0013130:	50                   	push   eax
c0013131:	56                   	push   esi
c0013132:	e8 49 d2 fe ff       	call   c0000380 <memcmp>
c0013137:	83 c4 10             	add    esp,0x10
c001313a:	85 c0                	test   eax,eax
c001313c:	74 1e                	je     c001315c <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c001313e:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c0013143:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0013148:	c1 e3 08             	shl    ebx,0x8
c001314b:	09 d8                	or     eax,ebx
c001314d:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0013152:	c1 e3 10             	shl    ebx,0x10
c0013155:	09 c3                	or     ebx,eax
c0013157:	eb ba                	jmp    c0013113 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0013159:	83 cb ff             	or     ebx,0xffffffff
c001315c:	89 d8                	mov    eax,ebx
c001315e:	83 c4 44             	add    esp,0x44
c0013161:	5b                   	pop    ebx
c0013162:	5e                   	pop    esi
c0013163:	c3                   	ret    

c0013164 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0013164:	57                   	push   edi
c0013165:	56                   	push   esi
c0013166:	53                   	push   ebx
c0013167:	83 ec 34             	sub    esp,0x34
c001316a:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001316e:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0013172:	6a 2b                	push   0x2b
c0013174:	6a 00                	push   0x0
c0013176:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c001317a:	53                   	push   ebx
c001317b:	e8 70 d3 fe ff       	call   c00004f0 <memset>
c0013180:	58                   	pop    eax
c0013181:	5a                   	pop    edx
c0013182:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013186:	50                   	push   eax
c0013187:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001318b:	e8 6f fd ff ff       	call   c0012eff <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013190:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0013194:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c0013198:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c001319c:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00131a0:	53                   	push   ebx
c00131a1:	6a 00                	push   0x0
c00131a3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00131a7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00131ab:	e8 1b f9 ff ff       	call   c0012acb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00131b0:	83 c4 50             	add    esp,0x50
c00131b3:	5b                   	pop    ebx
c00131b4:	5e                   	pop    esi
c00131b5:	5f                   	pop    edi
c00131b6:	c3                   	ret    

c00131b7 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c00131b7:	55                   	push   ebp
c00131b8:	57                   	push   edi
c00131b9:	56                   	push   esi
c00131ba:	53                   	push   ebx
c00131bb:	83 ec 40             	sub    esp,0x40
c00131be:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c00131c2:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00131c6:	6a 2b                	push   0x2b
c00131c8:	6a 00                	push   0x0
c00131ca:	8d 74 24 11          	lea    esi,[esp+0x11]
c00131ce:	56                   	push   esi
c00131cf:	e8 1c d3 fe ff       	call   c00004f0 <memset>
c00131d4:	5f                   	pop    edi
c00131d5:	89 ef                	mov    edi,ebp
c00131d7:	58                   	pop    eax
c00131d8:	8d 44 24 11          	lea    eax,[esp+0x11]
c00131dc:	50                   	push   eax
c00131dd:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00131e1:	e8 19 fd ff ff       	call   c0012eff <CmConvertToInternalFilename(char const*, unsigned char*)>
c00131e6:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c00131eb:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c00131f0:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c00131f5:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c00131fa:	83 c4 10             	add    esp,0x10
c00131fd:	85 ed                	test   ebp,ebp
c00131ff:	74 14                	je     c0013215 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013201:	51                   	push   ecx
c0013202:	51                   	push   ecx
c0013203:	57                   	push   edi
c0013204:	53                   	push   ebx
c0013205:	e8 09 f7 ff ff       	call   c0012913 <CmGetNext(Reghive_Tag*, int)>
c001320a:	83 c4 10             	add    esp,0x10
c001320d:	85 c0                	test   eax,eax
c001320f:	74 04                	je     c0013215 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013211:	89 c7                	mov    edi,eax
c0013213:	eb e8                	jmp    c00131fd <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0013215:	56                   	push   esi
c0013216:	6a 00                	push   0x0
c0013218:	57                   	push   edi
c0013219:	53                   	push   ebx
c001321a:	e8 ac f8 ff ff       	call   c0012acb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001321f:	83 c4 0c             	add    esp,0xc
c0013222:	89 c7                	mov    edi,eax
c0013224:	56                   	push   esi
c0013225:	50                   	push   eax
c0013226:	53                   	push   ebx
c0013227:	e8 f5 f5 ff ff       	call   c0012821 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001322c:	58                   	pop    eax
c001322d:	5a                   	pop    edx
c001322e:	6a 6c                	push   0x6c
c0013230:	6a 00                	push   0x0
c0013232:	6a 00                	push   0x0
c0013234:	68 ff 1e 02 c0       	push   0xc0021eff
c0013239:	57                   	push   edi
c001323a:	53                   	push   ebx
c001323b:	e8 24 ff ff ff       	call   c0013164 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0013240:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0013244:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c0013248:	c1 e8 10             	shr    eax,0x10
c001324b:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001324f:	83 c4 1c             	add    esp,0x1c
c0013252:	56                   	push   esi
c0013253:	57                   	push   edi
c0013254:	53                   	push   ebx
c0013255:	e8 eb f6 ff ff       	call   c0012945 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001325a:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c001325f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0013264:	c1 e0 08             	shl    eax,0x8
c0013267:	09 c2                	or     edx,eax
c0013269:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001326e:	83 c4 4c             	add    esp,0x4c
c0013271:	c1 e0 10             	shl    eax,0x10
c0013274:	5b                   	pop    ebx
c0013275:	09 d0                	or     eax,edx
c0013277:	5e                   	pop    esi
c0013278:	5f                   	pop    edi
c0013279:	5d                   	pop    ebp
c001327a:	c3                   	ret    

c001327b <zStrtok(char*, char const*)>:
c001327b:	55                   	push   ebp
c001327c:	57                   	push   edi
c001327d:	56                   	push   esi
c001327e:	53                   	push   ebx
c001327f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013283:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013287:	85 db                	test   ebx,ebx
c0013289:	74 2f                	je     c00132ba <zStrtok(char*, char const*)+0x3f>
c001328b:	85 c0                	test   eax,eax
c001328d:	75 09                	jne    c0013298 <zStrtok(char*, char const*)+0x1d>
c001328f:	a1 f0 8e 02 c0       	mov    eax,ds:0xc0028ef0
c0013294:	85 c0                	test   eax,eax
c0013296:	74 50                	je     c00132e8 <zStrtok(char*, char const*)+0x6d>
c0013298:	31 c9                	xor    ecx,ecx
c001329a:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c001329e:	74 03                	je     c00132a3 <zStrtok(char*, char const*)+0x28>
c00132a0:	41                   	inc    ecx
c00132a1:	eb f7                	jmp    c001329a <zStrtok(char*, char const*)+0x1f>
c00132a3:	31 d2                	xor    edx,edx
c00132a5:	39 ca                	cmp    edx,ecx
c00132a7:	74 15                	je     c00132be <zStrtok(char*, char const*)+0x43>
c00132a9:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c00132ad:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00132b0:	8d 3c 10             	lea    edi,[eax+edx*1]
c00132b3:	39 ee                	cmp    esi,ebp
c00132b5:	74 13                	je     c00132ca <zStrtok(char*, char const*)+0x4f>
c00132b7:	42                   	inc    edx
c00132b8:	eb eb                	jmp    c00132a5 <zStrtok(char*, char const*)+0x2a>
c00132ba:	31 c0                	xor    eax,eax
c00132bc:	eb 2a                	jmp    c00132e8 <zStrtok(char*, char const*)+0x6d>
c00132be:	c7 05 f0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ef0,0x0
c00132c8:	eb 1e                	jmp    c00132e8 <zStrtok(char*, char const*)+0x6d>
c00132ca:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00132cd:	39 ce                	cmp    esi,ecx
c00132cf:	75 0a                	jne    c00132db <zStrtok(char*, char const*)+0x60>
c00132d1:	40                   	inc    eax
c00132d2:	a3 f0 8e 02 c0       	mov    ds:0xc0028ef0,eax
c00132d7:	89 d8                	mov    eax,ebx
c00132d9:	eb 0d                	jmp    c00132e8 <zStrtok(char*, char const*)+0x6d>
c00132db:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c00132df:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00132e2:	89 15 f0 8e 02 c0    	mov    DWORD PTR ds:0xc0028ef0,edx
c00132e8:	5b                   	pop    ebx
c00132e9:	5e                   	pop    esi
c00132ea:	5f                   	pop    edi
c00132eb:	5d                   	pop    ebp
c00132ec:	c3                   	ret    

c00132ed <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c00132ed:	57                   	push   edi
c00132ee:	56                   	push   esi
c00132ef:	53                   	push   ebx
c00132f0:	81 ec 08 01 00 00    	sub    esp,0x108
c00132f6:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c00132fd:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0013304:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0013308:	53                   	push   ebx
c0013309:	e8 32 d3 fe ff       	call   c0000640 <strcpy>
c001330e:	59                   	pop    ecx
c001330f:	5e                   	pop    esi
c0013310:	68 63 22 02 c0       	push   0xc0022263
c0013315:	53                   	push   ebx
c0013316:	bb 01 00 00 00       	mov    ebx,0x1
c001331b:	e8 5b ff ff ff       	call   c001327b <zStrtok(char*, char const*)>
c0013320:	83 c4 10             	add    esp,0x10
c0013323:	85 c0                	test   eax,eax
c0013325:	74 3b                	je     c0013362 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013327:	52                   	push   edx
c0013328:	50                   	push   eax
c0013329:	6a 01                	push   0x1
c001332b:	57                   	push   edi
c001332c:	e8 b9 fd ff ff       	call   c00130ea <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0013331:	59                   	pop    ecx
c0013332:	89 c3                	mov    ebx,eax
c0013334:	5e                   	pop    esi
c0013335:	68 63 22 02 c0       	push   0xc0022263
c001333a:	6a 00                	push   0x0
c001333c:	e8 3a ff ff ff       	call   c001327b <zStrtok(char*, char const*)>
c0013341:	83 c4 10             	add    esp,0x10
c0013344:	89 c6                	mov    esi,eax
c0013346:	85 c0                	test   eax,eax
c0013348:	74 18                	je     c0013362 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001334a:	52                   	push   edx
c001334b:	52                   	push   edx
c001334c:	53                   	push   ebx
c001334d:	57                   	push   edi
c001334e:	e8 81 f5 ff ff       	call   c00128d4 <CmEnterDirectory(Reghive_Tag*, int)>
c0013353:	83 c4 10             	add    esp,0x10
c0013356:	89 c3                	mov    ebx,eax
c0013358:	83 f8 ff             	cmp    eax,0xffffffff
c001335b:	74 05                	je     c0013362 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001335d:	50                   	push   eax
c001335e:	56                   	push   esi
c001335f:	53                   	push   ebx
c0013360:	eb c9                	jmp    c001332b <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0013362:	81 c4 00 01 00 00    	add    esp,0x100
c0013368:	89 d8                	mov    eax,ebx
c001336a:	5b                   	pop    ebx
c001336b:	5e                   	pop    esi
c001336c:	5f                   	pop    edi
c001336d:	c3                   	ret    

c001336e <CmDisplayTree(Reghive_Tag*, int, int)>:
c001336e:	55                   	push   ebp
c001336f:	57                   	push   edi
c0013370:	56                   	push   esi
c0013371:	53                   	push   ebx
c0013372:	83 ec 5c             	sub    esp,0x5c
c0013375:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0013379:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c001337d:	85 db                	test   ebx,ebx
c001337f:	0f 8e 84 00 00 00    	jle    c0013409 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0013385:	31 ed                	xor    ebp,ebp
c0013387:	57                   	push   edi
c0013388:	6a 32                	push   0x32
c001338a:	6a 00                	push   0x0
c001338c:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0013390:	57                   	push   edi
c0013391:	e8 5a d1 fe ff       	call   c00004f0 <memset>
c0013396:	83 c4 0c             	add    esp,0xc
c0013399:	57                   	push   edi
c001339a:	53                   	push   ebx
c001339b:	56                   	push   esi
c001339c:	e8 30 fb ff ff       	call   c0012ed1 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00133a1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00133a5:	83 c4 10             	add    esp,0x10
c00133a8:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c00133ac:	7d 13                	jge    c00133c1 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c00133ae:	83 ec 0c             	sub    esp,0xc
c00133b1:	45                   	inc    ebp
c00133b2:	68 07 26 02 c0       	push   0xc0022607
c00133b7:	e8 89 75 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00133bc:	83 c4 10             	add    esp,0x10
c00133bf:	eb e7                	jmp    c00133a8 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c00133c1:	51                   	push   ecx
c00133c2:	57                   	push   edi
c00133c3:	53                   	push   ebx
c00133c4:	68 05 1f 02 c0       	push   0xc0021f05
c00133c9:	e8 77 75 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00133ce:	83 c4 10             	add    esp,0x10
c00133d1:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c00133d6:	75 1e                	jne    c00133f6 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c00133d8:	52                   	push   edx
c00133d9:	52                   	push   edx
c00133da:	53                   	push   ebx
c00133db:	56                   	push   esi
c00133dc:	e8 f3 f4 ff ff       	call   c00128d4 <CmEnterDirectory(Reghive_Tag*, int)>
c00133e1:	83 c4 0c             	add    esp,0xc
c00133e4:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00133e8:	8d 51 04             	lea    edx,[ecx+0x4]
c00133eb:	52                   	push   edx
c00133ec:	50                   	push   eax
c00133ed:	56                   	push   esi
c00133ee:	e8 7b ff ff ff       	call   c001336e <CmDisplayTree(Reghive_Tag*, int, int)>
c00133f3:	83 c4 10             	add    esp,0x10
c00133f6:	50                   	push   eax
c00133f7:	50                   	push   eax
c00133f8:	53                   	push   ebx
c00133f9:	56                   	push   esi
c00133fa:	e8 14 f5 ff ff       	call   c0012913 <CmGetNext(Reghive_Tag*, int)>
c00133ff:	83 c4 10             	add    esp,0x10
c0013402:	89 c3                	mov    ebx,eax
c0013404:	e9 74 ff ff ff       	jmp    c001337d <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0013409:	83 c4 5c             	add    esp,0x5c
c001340c:	5b                   	pop    ebx
c001340d:	5e                   	pop    esi
c001340e:	5f                   	pop    edi
c001340f:	5d                   	pop    ebp
c0013410:	c3                   	ret    

c0013411 <CmSplitFinalSlashInPlace(char*)>:
c0013411:	53                   	push   ebx
c0013412:	83 ec 14             	sub    esp,0x14
c0013415:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013419:	53                   	push   ebx
c001341a:	e8 51 d1 fe ff       	call   c0000570 <strlen>
c001341f:	83 c4 10             	add    esp,0x10
c0013422:	48                   	dec    eax
c0013423:	85 c0                	test   eax,eax
c0013425:	74 15                	je     c001343c <CmSplitFinalSlashInPlace(char*)+0x2b>
c0013427:	8d 14 03             	lea    edx,[ebx+eax*1]
c001342a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001342e:	75 09                	jne    c0013439 <CmSplitFinalSlashInPlace(char*)+0x28>
c0013430:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0013433:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0013437:	eb 05                	jmp    c001343e <CmSplitFinalSlashInPlace(char*)+0x2d>
c0013439:	48                   	dec    eax
c001343a:	eb e7                	jmp    c0013423 <CmSplitFinalSlashInPlace(char*)+0x12>
c001343c:	31 c0                	xor    eax,eax
c001343e:	83 c4 08             	add    esp,0x8
c0013441:	5b                   	pop    ebx
c0013442:	c3                   	ret    

c0013443 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0013443:	55                   	push   ebp
c0013444:	57                   	push   edi
c0013445:	56                   	push   esi
c0013446:	53                   	push   ebx
c0013447:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001344d:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0013454:	8a 13                	mov    dl,BYTE PTR [ebx]
c0013456:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013459:	80 fa 40             	cmp    dl,0x40
c001345c:	75 1c                	jne    c001347a <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c001345e:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c0013461:	85 c9                	test   ecx,ecx
c0013463:	0f 84 09 01 00 00    	je     c0013572 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013469:	8d 43 01             	lea    eax,[ebx+0x1]
c001346c:	83 f9 3a             	cmp    ecx,0x3a
c001346f:	74 04                	je     c0013475 <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c0013471:	89 c3                	mov    ebx,eax
c0013473:	eb e9                	jmp    c001345e <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0013475:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013478:	89 c3                	mov    ebx,eax
c001347a:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001347e:	50                   	push   eax
c001347f:	6a 40                	push   0x40
c0013481:	6a 00                	push   0x0
c0013483:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013487:	50                   	push   eax
c0013488:	e8 63 d0 fe ff       	call   c00004f0 <memset>
c001348d:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0013494:	31 c0                	xor    eax,eax
c0013496:	83 c4 10             	add    esp,0x10
c0013499:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c001349e:	0f be 17             	movsx  edx,BYTE PTR [edi]
c00134a1:	89 d1                	mov    ecx,edx
c00134a3:	85 d2                	test   edx,edx
c00134a5:	0f 84 c7 00 00 00    	je     c0013572 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c00134ab:	3d c7 00 00 00       	cmp    eax,0xc7
c00134b0:	0f 8f bc 00 00 00    	jg     c0013572 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c00134b6:	83 fa 0a             	cmp    edx,0xa
c00134b9:	0f 85 a4 00 00 00    	jne    c0013563 <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c00134bf:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00134c4:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c00134c9:	89 c8                	mov    eax,ecx
c00134cb:	a8 df                	test   al,0xdf
c00134cd:	0f 94 c2             	sete   dl
c00134d0:	83 f9 23             	cmp    ecx,0x23
c00134d3:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c00134d8:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c00134dc:	80 e2 01             	and    dl,0x1
c00134df:	75 4a                	jne    c001352b <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c00134e1:	83 e8 09             	sub    eax,0x9
c00134e4:	3c 01                	cmp    al,0x1
c00134e6:	76 43                	jbe    c001352b <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c00134e8:	83 f9 5b             	cmp    ecx,0x5b
c00134eb:	75 42                	jne    c001352f <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c00134ed:	83 fe 40             	cmp    esi,0x40
c00134f0:	75 39                	jne    c001352b <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c00134f2:	83 ec 0c             	sub    esp,0xc
c00134f5:	8d 54 24 65          	lea    edx,[esp+0x65]
c00134f9:	52                   	push   edx
c00134fa:	e8 71 d0 fe ff       	call   c0000570 <strlen>
c00134ff:	83 c4 10             	add    esp,0x10
c0013502:	83 f8 3f             	cmp    eax,0x3f
c0013505:	77 6b                	ja     c0013572 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013507:	50                   	push   eax
c0013508:	50                   	push   eax
c0013509:	8d 54 24 61          	lea    edx,[esp+0x61]
c001350d:	52                   	push   edx
c001350e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0013512:	52                   	push   edx
c0013513:	e8 28 d1 fe ff       	call   c0000640 <strcpy>
c0013518:	58                   	pop    eax
c0013519:	8d 54 24 24          	lea    edx,[esp+0x24]
c001351d:	52                   	push   edx
c001351e:	e8 4d d0 fe ff       	call   c0000570 <strlen>
c0013523:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0013528:	83 c4 10             	add    esp,0x10
c001352b:	31 d2                	xor    edx,edx
c001352d:	eb 3b                	jmp    c001356a <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c001352f:	83 fe 40             	cmp    esi,0x40
c0013532:	74 06                	je     c001353a <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c0013534:	8d 44 24 58          	lea    eax,[esp+0x58]
c0013538:	eb 20                	jmp    c001355a <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c001353a:	50                   	push   eax
c001353b:	50                   	push   eax
c001353c:	55                   	push   ebp
c001353d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013541:	50                   	push   eax
c0013542:	e8 09 d2 fe ff       	call   c0000750 <strcmp>
c0013547:	83 c4 10             	add    esp,0x10
c001354a:	85 c0                	test   eax,eax
c001354c:	75 dd                	jne    c001352b <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c001354e:	eb e4                	jmp    c0013534 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0013550:	8d 50 01             	lea    edx,[eax+0x1]
c0013553:	83 f9 3d             	cmp    ecx,0x3d
c0013556:	74 1e                	je     c0013576 <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c0013558:	89 d0                	mov    eax,edx
c001355a:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c001355d:	85 c9                	test   ecx,ecx
c001355f:	75 ef                	jne    c0013550 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c0013561:	eb 0f                	jmp    c0013572 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013563:	8d 50 01             	lea    edx,[eax+0x1]
c0013566:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001356a:	47                   	inc    edi
c001356b:	89 d0                	mov    eax,edx
c001356d:	e9 2c ff ff ff       	jmp    c001349e <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c0013572:	31 c0                	xor    eax,eax
c0013574:	eb 33                	jmp    c00135a9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c0013576:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001357a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001357d:	50                   	push   eax
c001357e:	50                   	push   eax
c001357f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0013583:	50                   	push   eax
c0013584:	53                   	push   ebx
c0013585:	e8 c6 d1 fe ff       	call   c0000750 <strcmp>
c001358a:	83 c4 10             	add    esp,0x10
c001358d:	85 c0                	test   eax,eax
c001358f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013593:	75 96                	jne    c001352b <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013595:	51                   	push   ecx
c0013596:	51                   	push   ecx
c0013597:	52                   	push   edx
c0013598:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001359f:	e8 9c d0 fe ff       	call   c0000640 <strcpy>
c00135a4:	83 c4 10             	add    esp,0x10
c00135a7:	b0 01                	mov    al,0x1
c00135a9:	81 c4 2c 01 00 00    	add    esp,0x12c
c00135af:	5b                   	pop    ebx
c00135b0:	5e                   	pop    esi
c00135b1:	5f                   	pop    edi
c00135b2:	5d                   	pop    ebp
c00135b3:	c3                   	ret    

c00135b4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00135b4:	57                   	push   edi
c00135b5:	56                   	push   esi
c00135b6:	53                   	push   ebx
c00135b7:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00135bd:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00135c4:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00135cb:	53                   	push   ebx
c00135cc:	e8 9f cf fe ff       	call   c0000570 <strlen>
c00135d1:	89 34 24             	mov    DWORD PTR [esp],esi
c00135d4:	89 c7                	mov    edi,eax
c00135d6:	e8 95 cf fe ff       	call   c0000570 <strlen>
c00135db:	83 c4 10             	add    esp,0x10
c00135de:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00135e2:	3d ff 00 00 00       	cmp    eax,0xff
c00135e7:	0f 87 d3 00 00 00    	ja     c00136c0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00135ed:	57                   	push   edi
c00135ee:	57                   	push   edi
c00135ef:	56                   	push   esi
c00135f0:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00135f4:	56                   	push   esi
c00135f5:	e8 46 d0 fe ff       	call   c0000640 <strcpy>
c00135fa:	58                   	pop    eax
c00135fb:	5a                   	pop    edx
c00135fc:	68 63 22 02 c0       	push   0xc0022263
c0013601:	56                   	push   esi
c0013602:	e8 39 d2 fe ff       	call   c0000840 <strcat>
c0013607:	59                   	pop    ecx
c0013608:	5f                   	pop    edi
c0013609:	53                   	push   ebx
c001360a:	56                   	push   esi
c001360b:	e8 30 d2 fe ff       	call   c0000840 <strcat>
c0013610:	58                   	pop    eax
c0013611:	5a                   	pop    edx
c0013612:	68 0f 1f 02 c0       	push   0xc0021f0f
c0013617:	56                   	push   esi
c0013618:	e8 23 d2 fe ff       	call   c0000840 <strcat>
c001361d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013624:	e8 8d 44 ff ff       	call   c0007ab6 <malloc>
c0013629:	83 c4 0c             	add    esp,0xc
c001362c:	89 c3                	mov    ebx,eax
c001362e:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0013634:	56                   	push   esi
c0013635:	50                   	push   eax
c0013636:	e8 f5 80 ff ff       	call   c000b730 <File::File(char const*, Process*)>
c001363b:	83 c4 10             	add    esp,0x10
c001363e:	85 db                	test   ebx,ebx
c0013640:	74 7e                	je     c00136c0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013642:	51                   	push   ecx
c0013643:	51                   	push   ecx
c0013644:	6a 01                	push   0x1
c0013646:	53                   	push   ebx
c0013647:	e8 a0 81 ff ff       	call   c000b7ec <File::open(FileOpenMode)>
c001364c:	83 c4 10             	add    esp,0x10
c001364f:	85 c0                	test   eax,eax
c0013651:	74 08                	je     c001365b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0013653:	83 ec 0c             	sub    esp,0xc
c0013656:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013658:	53                   	push   ebx
c0013659:	eb 5f                	jmp    c00136ba <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001365b:	52                   	push   edx
c001365c:	8d 44 24 17          	lea    eax,[esp+0x17]
c0013660:	50                   	push   eax
c0013661:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013665:	50                   	push   eax
c0013666:	53                   	push   ebx
c0013667:	e8 82 84 ff ff       	call   c000baee <File::stat(unsigned long long*, bool*)>
c001366c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013670:	83 c4 10             	add    esp,0x10
c0013673:	89 c1                	mov    ecx,eax
c0013675:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0013679:	74 31                	je     c00136ac <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001367b:	83 ec 0c             	sub    esp,0xc
c001367e:	50                   	push   eax
c001367f:	e8 32 44 ff ff       	call   c0007ab6 <malloc>
c0013684:	89 c6                	mov    esi,eax
c0013686:	58                   	pop    eax
c0013687:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013689:	8d 54 24 20          	lea    edx,[esp+0x20]
c001368d:	52                   	push   edx
c001368e:	56                   	push   esi
c001368f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013693:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013697:	53                   	push   ebx
c0013698:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001369b:	83 c4 20             	add    esp,0x20
c001369e:	85 c0                	test   eax,eax
c00136a0:	75 0a                	jne    c00136ac <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00136a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00136a6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00136aa:	74 18                	je     c00136c4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c00136ac:	83 ec 0c             	sub    esp,0xc
c00136af:	53                   	push   ebx
c00136b0:	e8 95 81 ff ff       	call   c000b84a <File::close()>
c00136b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00136b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00136ba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00136bd:	83 c4 10             	add    esp,0x10
c00136c0:	31 c0                	xor    eax,eax
c00136c2:	eb 3b                	jmp    c00136ff <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00136c4:	83 ec 0c             	sub    esp,0xc
c00136c7:	53                   	push   ebx
c00136c8:	e8 7d 81 ff ff       	call   c000b84a <File::close()>
c00136cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00136cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00136d2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00136d5:	83 c4 0c             	add    esp,0xc
c00136d8:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00136df:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00136e6:	56                   	push   esi
c00136e7:	e8 57 fd ff ff       	call   c0013443 <Reg::findLineFromLoadedData(char*, char*, char*)>
c00136ec:	89 34 24             	mov    DWORD PTR [esp],esi
c00136ef:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00136f3:	e8 ce 43 ff ff       	call   c0007ac6 <free>
c00136f8:	83 c4 10             	add    esp,0x10
c00136fb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00136ff:	81 c4 20 01 00 00    	add    esp,0x120
c0013705:	5b                   	pop    ebx
c0013706:	5e                   	pop    esi
c0013707:	5f                   	pop    edi
c0013708:	c3                   	ret    

c0013709 <Reg::getLine(char*, char*, char*)>:
c0013709:	57                   	push   edi
c001370a:	56                   	push   esi
c001370b:	53                   	push   ebx
c001370c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013710:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013714:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013718:	57                   	push   edi
c0013719:	56                   	push   esi
c001371a:	53                   	push   ebx
c001371b:	68 14 1f 02 c0       	push   0xc0021f14
c0013720:	e8 8f fe ff ff       	call   c00135b4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013725:	83 c4 10             	add    esp,0x10
c0013728:	84 c0                	test   al,al
c001372a:	75 10                	jne    c001373c <Reg::getLine(char*, char*, char*)+0x33>
c001372c:	57                   	push   edi
c001372d:	56                   	push   esi
c001372e:	53                   	push   ebx
c001372f:	68 39 1f 02 c0       	push   0xc0021f39
c0013734:	e8 7b fe ff ff       	call   c00135b4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013739:	83 c4 10             	add    esp,0x10
c001373c:	5b                   	pop    ebx
c001373d:	5e                   	pop    esi
c001373e:	5f                   	pop    edi
c001373f:	c3                   	ret    

c0013740 <Reg::readInt(char*, char*, int*)>:
c0013740:	55                   	push   ebp
c0013741:	57                   	push   edi
c0013742:	56                   	push   esi
c0013743:	53                   	push   ebx
c0013744:	81 ec f0 00 00 00    	sub    esp,0xf0
c001374a:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001374e:	55                   	push   ebp
c001374f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013756:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001375d:	e8 a7 ff ff ff       	call   c0013709 <Reg::getLine(char*, char*, char*)>
c0013762:	83 c4 10             	add    esp,0x10
c0013765:	84 c0                	test   al,al
c0013767:	0f 84 b6 00 00 00    	je     c0013823 <Reg::readInt(char*, char*, int*)+0xe3>
c001376d:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0013772:	83 fa 2b             	cmp    edx,0x2b
c0013775:	74 0c                	je     c0013783 <Reg::readInt(char*, char*, int*)+0x43>
c0013777:	83 fa 2d             	cmp    edx,0x2d
c001377a:	75 0e                	jne    c001378a <Reg::readInt(char*, char*, int*)+0x4a>
c001377c:	ba 01 00 00 00       	mov    edx,0x1
c0013781:	eb 0b                	jmp    c001378e <Reg::readInt(char*, char*, int*)+0x4e>
c0013783:	ba 01 00 00 00       	mov    edx,0x1
c0013788:	eb 02                	jmp    c001378c <Reg::readInt(char*, char*, int*)+0x4c>
c001378a:	31 d2                	xor    edx,edx
c001378c:	31 c0                	xor    eax,eax
c001378e:	be 0a 00 00 00       	mov    esi,0xa
c0013793:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0013798:	75 21                	jne    c00137bb <Reg::readInt(char*, char*, int*)+0x7b>
c001379a:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c001379f:	83 f9 78             	cmp    ecx,0x78
c00137a2:	75 0a                	jne    c00137ae <Reg::readInt(char*, char*, int*)+0x6e>
c00137a4:	83 c2 02             	add    edx,0x2
c00137a7:	be 10 00 00 00       	mov    esi,0x10
c00137ac:	eb 0d                	jmp    c00137bb <Reg::readInt(char*, char*, int*)+0x7b>
c00137ae:	83 f9 62             	cmp    ecx,0x62
c00137b1:	75 08                	jne    c00137bb <Reg::readInt(char*, char*, int*)+0x7b>
c00137b3:	83 c2 02             	add    edx,0x2
c00137b6:	be 02 00 00 00       	mov    esi,0x2
c00137bb:	01 d5                	add    ebp,edx
c00137bd:	31 d2                	xor    edx,edx
c00137bf:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c00137c3:	83 f9 0d             	cmp    ecx,0xd
c00137c6:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00137ca:	0f 94 c3             	sete   bl
c00137cd:	85 c9                	test   ecx,ecx
c00137cf:	89 df                	mov    edi,ebx
c00137d1:	0f 94 c3             	sete   bl
c00137d4:	09 df                	or     edi,ebx
c00137d6:	89 fb                	mov    ebx,edi
c00137d8:	83 e7 01             	and    edi,0x1
c00137db:	75 35                	jne    c0013812 <Reg::readInt(char*, char*, int*)+0xd2>
c00137dd:	0f af d6             	imul   edx,esi
c00137e0:	83 fe 10             	cmp    esi,0x10
c00137e3:	75 26                	jne    c001380b <Reg::readInt(char*, char*, int*)+0xcb>
c00137e5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00137e9:	83 ef 41             	sub    edi,0x41
c00137ec:	89 fb                	mov    ebx,edi
c00137ee:	80 fb 05             	cmp    bl,0x5
c00137f1:	77 06                	ja     c00137f9 <Reg::readInt(char*, char*, int*)+0xb9>
c00137f3:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c00137f7:	eb 16                	jmp    c001380f <Reg::readInt(char*, char*, int*)+0xcf>
c00137f9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00137fd:	83 eb 61             	sub    ebx,0x61
c0013800:	80 fb 05             	cmp    bl,0x5
c0013803:	77 06                	ja     c001380b <Reg::readInt(char*, char*, int*)+0xcb>
c0013805:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0013809:	eb 04                	jmp    c001380f <Reg::readInt(char*, char*, int*)+0xcf>
c001380b:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c001380f:	45                   	inc    ebp
c0013810:	eb ad                	jmp    c00137bf <Reg::readInt(char*, char*, int*)+0x7f>
c0013812:	84 c0                	test   al,al
c0013814:	74 02                	je     c0013818 <Reg::readInt(char*, char*, int*)+0xd8>
c0013816:	f7 da                	neg    edx
c0013818:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001381f:	89 10                	mov    DWORD PTR [eax],edx
c0013821:	88 d8                	mov    al,bl
c0013823:	81 c4 ec 00 00 00    	add    esp,0xec
c0013829:	5b                   	pop    ebx
c001382a:	5e                   	pop    esi
c001382b:	5f                   	pop    edi
c001382c:	5d                   	pop    ebp
c001382d:	c3                   	ret    

c001382e <Reg::readString(char*, char*, char*, int)>:
c001382e:	57                   	push   edi
c001382f:	56                   	push   esi
c0013830:	53                   	push   ebx
c0013831:	81 ec d4 00 00 00    	sub    esp,0xd4
c0013837:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001383e:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013842:	57                   	push   edi
c0013843:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001384a:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013851:	e8 b3 fe ff ff       	call   c0013709 <Reg::getLine(char*, char*, char*)>
c0013856:	83 c4 10             	add    esp,0x10
c0013859:	89 c6                	mov    esi,eax
c001385b:	84 c0                	test   al,al
c001385d:	74 44                	je     c00138a3 <Reg::readString(char*, char*, char*, int)+0x75>
c001385f:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013866:	31 c0                	xor    eax,eax
c0013868:	4a                   	dec    edx
c0013869:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001386c:	84 c9                	test   cl,cl
c001386e:	74 0f                	je     c001387f <Reg::readString(char*, char*, char*, int)+0x51>
c0013870:	39 c2                	cmp    edx,eax
c0013872:	7e 0b                	jle    c001387f <Reg::readString(char*, char*, char*, int)+0x51>
c0013874:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0013877:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001387c:	40                   	inc    eax
c001387d:	eb ea                	jmp    c0013869 <Reg::readString(char*, char*, char*, int)+0x3b>
c001387f:	83 ec 0c             	sub    esp,0xc
c0013882:	53                   	push   ebx
c0013883:	e8 e8 cc fe ff       	call   c0000570 <strlen>
c0013888:	83 c4 10             	add    esp,0x10
c001388b:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0013890:	75 11                	jne    c00138a3 <Reg::readString(char*, char*, char*, int)+0x75>
c0013892:	83 ec 0c             	sub    esp,0xc
c0013895:	53                   	push   ebx
c0013896:	e8 d5 cc fe ff       	call   c0000570 <strlen>
c001389b:	83 c4 10             	add    esp,0x10
c001389e:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00138a3:	81 c4 d0 00 00 00    	add    esp,0xd0
c00138a9:	89 f0                	mov    eax,esi
c00138ab:	5b                   	pop    ebx
c00138ac:	5e                   	pop    esi
c00138ad:	5f                   	pop    edi
c00138ae:	c3                   	ret    

c00138af <Reg::readBool(char*, char*, bool*)>:
c00138af:	83 ec 20             	sub    esp,0x20
c00138b2:	8d 44 24 10          	lea    eax,[esp+0x10]
c00138b6:	50                   	push   eax
c00138b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138bf:	e8 7c fe ff ff       	call   c0013740 <Reg::readInt(char*, char*, int*)>
c00138c4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00138c9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00138cd:	0f 95 02             	setne  BYTE PTR [edx]
c00138d0:	83 c4 2c             	add    esp,0x2c
c00138d3:	c3                   	ret    

c00138d4 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00138d4:	53                   	push   ebx
c00138d5:	83 ec 1c             	sub    esp,0x1c
c00138d8:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00138dc:	8d 44 24 13          	lea    eax,[esp+0x13]
c00138e0:	50                   	push   eax
c00138e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138e9:	e8 c1 ff ff ff       	call   c00138af <Reg::readBool(char*, char*, bool*)>
c00138ee:	83 c4 10             	add    esp,0x10
c00138f1:	84 c0                	test   al,al
c00138f3:	74 04                	je     c00138f9 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00138f5:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00138f9:	88 d8                	mov    al,bl
c00138fb:	83 c4 18             	add    esp,0x18
c00138fe:	5b                   	pop    ebx
c00138ff:	c3                   	ret    

c0013900 <Reg::readIntWithDefault(char*, char*, int)>:
c0013900:	53                   	push   ebx
c0013901:	83 ec 1c             	sub    esp,0x1c
c0013904:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013908:	8d 44 24 10          	lea    eax,[esp+0x10]
c001390c:	50                   	push   eax
c001390d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013911:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013915:	e8 26 fe ff ff       	call   c0013740 <Reg::readInt(char*, char*, int*)>
c001391a:	83 c4 10             	add    esp,0x10
c001391d:	84 c0                	test   al,al
c001391f:	74 04                	je     c0013925 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013921:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013925:	89 d8                	mov    eax,ebx
c0013927:	83 c4 18             	add    esp,0x18
c001392a:	5b                   	pop    ebx
c001392b:	c3                   	ret    

c001392c <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001392c:	57                   	push   edi
c001392d:	56                   	push   esi
c001392e:	56                   	push   esi
c001392f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013933:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013937:	56                   	push   esi
c0013938:	57                   	push   edi
c0013939:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001393d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013941:	e8 e8 fe ff ff       	call   c001382e <Reg::readString(char*, char*, char*, int)>
c0013946:	83 c4 10             	add    esp,0x10
c0013949:	84 c0                	test   al,al
c001394b:	75 1a                	jne    c0013967 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001394d:	51                   	push   ecx
c001394e:	56                   	push   esi
c001394f:	6a 00                	push   0x0
c0013951:	57                   	push   edi
c0013952:	e8 99 cb fe ff       	call   c00004f0 <memset>
c0013957:	8d 4e ff             	lea    ecx,[esi-0x1]
c001395a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001395e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013960:	83 c4 10             	add    esp,0x10
c0013963:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013967:	89 f8                	mov    eax,edi
c0013969:	5a                   	pop    edx
c001396a:	5e                   	pop    esi
c001396b:	5f                   	pop    edi
c001396c:	c3                   	ret    

c001396d <SysEject(regs*)>:
c001396d:	83 ec 0c             	sub    esp,0xc
c0013970:	83 ca ff             	or     edx,0xffffffff
c0013973:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013977:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001397a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001397f:	83 e9 41             	sub    ecx,0x41
c0013982:	83 f9 19             	cmp    ecx,0x19
c0013985:	77 18                	ja     c001399f <SysEject(regs*)+0x32>
c0013987:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c001398e:	85 c9                	test   ecx,ecx
c0013990:	74 0d                	je     c001399f <SysEject(regs*)+0x32>
c0013992:	83 ec 0c             	sub    esp,0xc
c0013995:	51                   	push   ecx
c0013996:	e8 17 a0 ff ff       	call   c000d9b2 <LogicalDisk::eject()>
c001399b:	83 c4 10             	add    esp,0x10
c001399e:	99                   	cdq    
c001399f:	83 c4 0c             	add    esp,0xc
c00139a2:	c3                   	ret    

c00139a3 <SysExit(regs*)>:
c00139a3:	83 ec 18             	sub    esp,0x18
c00139a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00139aa:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00139ad:	e8 16 2b 00 00       	call   c00164c8 <terminateTask(int)>
c00139b2:	83 c8 ff             	or     eax,0xffffffff
c00139b5:	83 c4 1c             	add    esp,0x1c
c00139b8:	89 c2                	mov    edx,eax
c00139ba:	c3                   	ret    

c00139bb <SysGetCwd(regs*)>:
c00139bb:	83 ec 10             	sub    esp,0x10
c00139be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00139c2:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00139c5:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00139c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139cd:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00139d0:	e8 39 7b ff ff       	call   c000b50e <Fs::getcwd(Process*, char*, int)>
c00139d5:	83 c4 1c             	add    esp,0x1c
c00139d8:	99                   	cdq    
c00139d9:	c3                   	ret    

c00139da <SysGetPID(regs*)>:
c00139da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139df:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00139e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00139e4:	99                   	cdq    
c00139e5:	c3                   	ret    

c00139e6 <SysGetRAMData(regs*)>:
c00139e6:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c00139ec:	69 05 e4 5e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0025ee4,0xc8
c00139f6:	99                   	cdq    
c00139f7:	f7 f9                	idiv   ecx
c00139f9:	c1 e0 18             	shl    eax,0x18
c00139fc:	09 c8                	or     eax,ecx
c00139fe:	99                   	cdq    
c00139ff:	c3                   	ret    

c0013a00 <SysGetVGAPtr(regs*)>:
c0013a00:	55                   	push   ebp
c0013a01:	57                   	push   edi
c0013a02:	56                   	push   esi
c0013a03:	53                   	push   ebx
c0013a04:	83 ec 18             	sub    esp,0x18
c0013a07:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013a0b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013a0e:	e8 81 25 00 00       	call   c0015f94 <Thr::processFromPID(int)>
c0013a13:	83 c4 10             	add    esp,0x10
c0013a16:	89 c1                	mov    ecx,eax
c0013a18:	b8 01 00 00 00       	mov    eax,0x1
c0013a1d:	85 c9                	test   ecx,ecx
c0013a1f:	74 57                	je     c0013a78 <SysGetVGAPtr(regs*)+0x78>
c0013a21:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013a27:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013a2b:	74 0c                	je     c0013a39 <SysGetVGAPtr(regs*)+0x39>
c0013a2d:	83 ec 0c             	sub    esp,0xc
c0013a30:	55                   	push   ebp
c0013a31:	e8 23 4d ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0013a36:	83 c4 10             	add    esp,0x10
c0013a39:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013a3c:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013a3f:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013a44:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013a46:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013a49:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013a4c:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013a52:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013a55:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013a58:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013a5e:	50                   	push   eax
c0013a5f:	50                   	push   eax
c0013a60:	68 54 1f 02 c0       	push   0xc0021f54
c0013a65:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013a68:	05 a8 0f 00 00       	add    eax,0xfa8
c0013a6d:	50                   	push   eax
c0013a6e:	e8 cd cb fe ff       	call   c0000640 <strcpy>
c0013a73:	83 c4 10             	add    esp,0x10
c0013a76:	31 c0                	xor    eax,eax
c0013a78:	83 c4 0c             	add    esp,0xc
c0013a7b:	31 d2                	xor    edx,edx
c0013a7d:	5b                   	pop    ebx
c0013a7e:	5e                   	pop    esi
c0013a7f:	5f                   	pop    edi
c0013a80:	5d                   	pop    ebp
c0013a81:	c3                   	ret    
c0013a82:	66 90                	xchg   ax,ax

c0013a84 <SysKill(regs*)>:
c0013a84:	53                   	push   ebx
c0013a85:	83 ec 08             	sub    esp,0x8
c0013a88:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013a8c:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013a90:	75 16                	jne    c0013aa8 <SysKill(regs*)+0x24>
c0013a92:	83 ec 0c             	sub    esp,0xc
c0013a95:	68 5e 1f 02 c0       	push   0xc0021f5e
c0013a9a:	e8 ca d7 ff ff       	call   c0011269 <KePanic(char const*)>
c0013a9f:	83 c4 10             	add    esp,0x10
c0013aa2:	e9 89 00 00 00       	jmp    c0013b30 <SysKill(regs*)+0xac>
c0013aa7:	90                   	nop
c0013aa8:	83 ec 0c             	sub    esp,0xc
c0013aab:	68 e4 96 02 c0       	push   0xc00296e4
c0013ab0:	e8 d7 bc 00 00       	call   c001f78c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013ab5:	8d 76 00             	lea    esi,[esi+0x0]
c0013ab8:	83 c4 10             	add    esp,0x10
c0013abb:	85 c0                	test   eax,eax
c0013abd:	74 19                	je     c0013ad8 <SysKill(regs*)+0x54>
c0013abf:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013ac2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013ac5:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013ac7:	74 33                	je     c0013afc <SysKill(regs*)+0x78>
c0013ac9:	52                   	push   edx
c0013aca:	52                   	push   edx
c0013acb:	50                   	push   eax
c0013acc:	68 e4 96 02 c0       	push   0xc00296e4
c0013ad1:	e8 d6 bf 00 00       	call   c001faac <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013ad6:	eb e0                	jmp    c0013ab8 <SysKill(regs*)+0x34>
c0013ad8:	83 ec 0c             	sub    esp,0xc
c0013adb:	68 d8 96 02 c0       	push   0xc00296d8
c0013ae0:	e8 a7 bc 00 00       	call   c001f78c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013ae5:	8d 76 00             	lea    esi,[esi+0x0]
c0013ae8:	83 c4 10             	add    esp,0x10
c0013aeb:	85 c0                	test   eax,eax
c0013aed:	74 41                	je     c0013b30 <SysKill(regs*)+0xac>
c0013aef:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013af2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013af5:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013af7:	75 27                	jne    c0013b20 <SysKill(regs*)+0x9c>
c0013af9:	8d 76 00             	lea    esi,[esi+0x0]
c0013afc:	51                   	push   ecx
c0013afd:	51                   	push   ecx
c0013afe:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013b01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b06:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b09:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013b0f:	e8 f6 db ff ff       	call   c001170a <KeRaiseSignal(SigHandlerBlock*, int)>
c0013b14:	83 c4 10             	add    esp,0x10
c0013b17:	31 c0                	xor    eax,eax
c0013b19:	31 d2                	xor    edx,edx
c0013b1b:	eb 1b                	jmp    c0013b38 <SysKill(regs*)+0xb4>
c0013b1d:	8d 76 00             	lea    esi,[esi+0x0]
c0013b20:	52                   	push   edx
c0013b21:	52                   	push   edx
c0013b22:	50                   	push   eax
c0013b23:	68 d8 96 02 c0       	push   0xc00296d8
c0013b28:	e8 7f bf 00 00       	call   c001faac <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013b2d:	eb b9                	jmp    c0013ae8 <SysKill(regs*)+0x64>
c0013b2f:	90                   	nop
c0013b30:	83 c8 ff             	or     eax,0xffffffff
c0013b33:	89 c2                	mov    edx,eax
c0013b35:	8d 76 00             	lea    esi,[esi+0x0]
c0013b38:	83 c4 08             	add    esp,0x8
c0013b3b:	5b                   	pop    ebx
c0013b3c:	c3                   	ret    

c0013b3d <SysLoadDLL(regs*)>:
c0013b3d:	56                   	push   esi
c0013b3e:	53                   	push   ebx
c0013b3f:	31 d2                	xor    edx,edx
c0013b41:	51                   	push   ecx
c0013b42:	b8 01 00 00 00       	mov    eax,0x1
c0013b47:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013b4b:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013b4f:	0f 84 8c 00 00 00    	je     c0013be1 <SysLoadDLL(regs*)+0xa4>
c0013b55:	83 ec 0c             	sub    esp,0xc
c0013b58:	68 14 01 00 00       	push   0x114
c0013b5d:	e8 54 3f ff ff       	call   c0007ab6 <malloc>
c0013b62:	83 c4 0c             	add    esp,0xc
c0013b65:	89 c3                	mov    ebx,eax
c0013b67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b6c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013b6f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013b72:	53                   	push   ebx
c0013b73:	e8 b8 7b ff ff       	call   c000b730 <File::File(char const*, Process*)>
c0013b78:	83 c4 10             	add    esp,0x10
c0013b7b:	31 d2                	xor    edx,edx
c0013b7d:	b8 02 00 00 00       	mov    eax,0x2
c0013b82:	85 db                	test   ebx,ebx
c0013b84:	74 5b                	je     c0013be1 <SysLoadDLL(regs*)+0xa4>
c0013b86:	83 ec 0c             	sub    esp,0xc
c0013b89:	53                   	push   ebx
c0013b8a:	e8 21 7f ff ff       	call   c000bab0 <File::exists()>
c0013b8f:	83 c4 10             	add    esp,0x10
c0013b92:	84 c0                	test   al,al
c0013b94:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b96:	75 11                	jne    c0013ba9 <SysLoadDLL(regs*)+0x6c>
c0013b98:	83 ec 0c             	sub    esp,0xc
c0013b9b:	53                   	push   ebx
c0013b9c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013b9f:	83 c4 10             	add    esp,0x10
c0013ba2:	b8 03 00 00 00       	mov    eax,0x3
c0013ba7:	eb 36                	jmp    c0013bdf <SysLoadDLL(regs*)+0xa2>
c0013ba9:	83 ec 0c             	sub    esp,0xc
c0013bac:	53                   	push   ebx
c0013bad:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013bb0:	58                   	pop    eax
c0013bb1:	5a                   	pop    edx
c0013bb2:	6a 00                	push   0x0
c0013bb4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013bb7:	e8 0e 15 00 00       	call   c00150ca <Thr::loadDLL(char const*, bool)>
c0013bbc:	83 c4 10             	add    esp,0x10
c0013bbf:	89 c1                	mov    ecx,eax
c0013bc1:	31 d2                	xor    edx,edx
c0013bc3:	b8 04 00 00 00       	mov    eax,0x4
c0013bc8:	85 c9                	test   ecx,ecx
c0013bca:	74 15                	je     c0013be1 <SysLoadDLL(regs*)+0xa4>
c0013bcc:	53                   	push   ebx
c0013bcd:	53                   	push   ebx
c0013bce:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0013bd4:	51                   	push   ecx
c0013bd5:	e8 21 17 00 00       	call   c00152fb <Thr::executeDLL(unsigned long, void*)>
c0013bda:	83 c4 10             	add    esp,0x10
c0013bdd:	31 c0                	xor    eax,eax
c0013bdf:	31 d2                	xor    edx,edx
c0013be1:	59                   	pop    ecx
c0013be2:	5b                   	pop    ebx
c0013be3:	5e                   	pop    esi
c0013be4:	c3                   	ret    

c0013be5 <SysRead(regs*)>:
c0013be5:	57                   	push   edi
c0013be6:	56                   	push   esi
c0013be7:	53                   	push   ebx
c0013be8:	83 ec 10             	sub    esp,0x10
c0013beb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013bef:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013bf2:	83 f8 02             	cmp    eax,0x2
c0013bf5:	77 10                	ja     c0013c07 <SysRead(regs*)+0x22>
c0013bf7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013bfc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013bff:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013c05:	eb 0e                	jmp    c0013c15 <SysRead(regs*)+0x30>
c0013c07:	83 ec 0c             	sub    esp,0xc
c0013c0a:	50                   	push   eax
c0013c0b:	e8 a3 58 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0013c10:	83 c4 10             	add    esp,0x10
c0013c13:	89 c1                	mov    ecx,eax
c0013c15:	83 c8 ff             	or     eax,0xffffffff
c0013c18:	85 c9                	test   ecx,ecx
c0013c1a:	89 c2                	mov    edx,eax
c0013c1c:	74 28                	je     c0013c46 <SysRead(regs*)+0x61>
c0013c1e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013c26:	31 ff                	xor    edi,edi
c0013c28:	83 ec 0c             	sub    esp,0xc
c0013c2b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013c2d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013c31:	52                   	push   edx
c0013c32:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013c35:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013c38:	57                   	push   edi
c0013c39:	56                   	push   esi
c0013c3a:	51                   	push   ecx
c0013c3b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013c42:	83 c4 20             	add    esp,0x20
c0013c45:	99                   	cdq    
c0013c46:	83 c4 10             	add    esp,0x10
c0013c49:	5b                   	pop    ebx
c0013c4a:	5e                   	pop    esi
c0013c4b:	5f                   	pop    edi
c0013c4c:	c3                   	ret    

c0013c4d <SysRegisterSignal(regs*)>:
c0013c4d:	83 ec 18             	sub    esp,0x18
c0013c50:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c54:	6a 00                	push   0x0
c0013c56:	6a 00                	push   0x0
c0013c58:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013c5b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013c5e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c63:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013c66:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013c6c:	e8 63 da ff ff       	call   c00116d4 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013c71:	83 c4 2c             	add    esp,0x2c
c0013c74:	99                   	cdq    
c0013c75:	c3                   	ret    

c0013c76 <SysRegistryGetTypeFromPath(regs*)>:
c0013c76:	57                   	push   edi
c0013c77:	56                   	push   esi
c0013c78:	53                   	push   ebx
c0013c79:	81 ec 38 01 00 00    	sub    esp,0x138
c0013c7f:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0013c86:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013c89:	68 7f 1f 02 c0       	push   0xc0021f7f
c0013c8e:	e8 b2 6c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013c93:	5a                   	pop    edx
c0013c94:	59                   	pop    ecx
c0013c95:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013c98:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013c9b:	e8 4d f6 ff ff       	call   c00132ed <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013ca0:	5f                   	pop    edi
c0013ca1:	89 c6                	mov    esi,eax
c0013ca3:	5a                   	pop    edx
c0013ca4:	50                   	push   eax
c0013ca5:	68 9f 1f 02 c0       	push   0xc0021f9f
c0013caa:	e8 96 6c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013caf:	83 c4 10             	add    esp,0x10
c0013cb2:	85 f6                	test   esi,esi
c0013cb4:	74 28                	je     c0013cde <SysRegistryGetTypeFromPath(regs*)+0x68>
c0013cb6:	50                   	push   eax
c0013cb7:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013cbb:	57                   	push   edi
c0013cbc:	56                   	push   esi
c0013cbd:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013cc0:	e8 0c f2 ff ff       	call   c0012ed1 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013cc5:	83 c4 0c             	add    esp,0xc
c0013cc8:	89 c3                	mov    ebx,eax
c0013cca:	57                   	push   edi
c0013ccb:	50                   	push   eax
c0013ccc:	68 a7 1f 02 c0       	push   0xc0021fa7
c0013cd1:	e8 6f 6c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013cd6:	89 d8                	mov    eax,ebx
c0013cd8:	83 c4 10             	add    esp,0x10
c0013cdb:	99                   	cdq    
c0013cdc:	eb 05                	jmp    c0013ce3 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0013cde:	83 c8 ff             	or     eax,0xffffffff
c0013ce1:	89 c2                	mov    edx,eax
c0013ce3:	81 c4 30 01 00 00    	add    esp,0x130
c0013ce9:	5b                   	pop    ebx
c0013cea:	5e                   	pop    esi
c0013ceb:	5f                   	pop    edi
c0013cec:	c3                   	ret    

c0013ced <SysRegistryReadExtent(regs*)>:
c0013ced:	83 ec 1c             	sub    esp,0x1c
c0013cf0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013cf4:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013cf7:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0013cfa:	85 c0                	test   eax,eax
c0013cfc:	79 1f                	jns    c0013d1d <SysRegistryReadExtent(regs*)+0x30>
c0013cfe:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0013d03:	52                   	push   edx
c0013d04:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013d08:	52                   	push   edx
c0013d09:	50                   	push   eax
c0013d0a:	51                   	push   ecx
c0013d0b:	e8 b3 f0 ff ff       	call   c0012dc3 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013d10:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d14:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013d18:	83 c4 10             	add    esp,0x10
c0013d1b:	eb 14                	jmp    c0013d31 <SysRegistryReadExtent(regs*)+0x44>
c0013d1d:	83 ec 04             	sub    esp,0x4
c0013d20:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0013d23:	50                   	push   eax
c0013d24:	51                   	push   ecx
c0013d25:	e8 33 eb ff ff       	call   c001285d <CmGetString(Reghive_Tag*, int, char*)>
c0013d2a:	83 c4 10             	add    esp,0x10
c0013d2d:	31 c0                	xor    eax,eax
c0013d2f:	31 d2                	xor    edx,edx
c0013d31:	83 c4 1c             	add    esp,0x1c
c0013d34:	c3                   	ret    

c0013d35 <SysRegistryPathToExtentLookup(regs*)>:
c0013d35:	53                   	push   ebx
c0013d36:	83 ec 10             	sub    esp,0x10
c0013d39:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d3d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013d40:	68 bd 1f 02 c0       	push   0xc0021fbd
c0013d45:	e8 fb 6b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013d4a:	58                   	pop    eax
c0013d4b:	5a                   	pop    edx
c0013d4c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013d4f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013d52:	e8 96 f5 ff ff       	call   c00132ed <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013d57:	83 c4 18             	add    esp,0x18
c0013d5a:	99                   	cdq    
c0013d5b:	5b                   	pop    ebx
c0013d5c:	c3                   	ret    

c0013d5d <SysRegistryEnterDirectory(regs*)>:
c0013d5d:	53                   	push   ebx
c0013d5e:	83 ec 10             	sub    esp,0x10
c0013d61:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d65:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013d68:	68 e0 1f 02 c0       	push   0xc0021fe0
c0013d6d:	e8 d3 6b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013d72:	58                   	pop    eax
c0013d73:	5a                   	pop    edx
c0013d74:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013d77:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013d7a:	e8 55 eb ff ff       	call   c00128d4 <CmEnterDirectory(Reghive_Tag*, int)>
c0013d7f:	83 c4 18             	add    esp,0x18
c0013d82:	99                   	cdq    
c0013d83:	5b                   	pop    ebx
c0013d84:	c3                   	ret    

c0013d85 <SysRegistryGetNext(regs*)>:
c0013d85:	53                   	push   ebx
c0013d86:	83 ec 10             	sub    esp,0x10
c0013d89:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d8d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013d90:	68 fe 1f 02 c0       	push   0xc0021ffe
c0013d95:	e8 ab 6b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013d9a:	58                   	pop    eax
c0013d9b:	5a                   	pop    edx
c0013d9c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013d9f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013da2:	e8 6c eb ff ff       	call   c0012913 <CmGetNext(Reghive_Tag*, int)>
c0013da7:	83 c4 18             	add    esp,0x18
c0013daa:	99                   	cdq    
c0013dab:	5b                   	pop    ebx
c0013dac:	c3                   	ret    

c0013dad <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013dad:	57                   	push   edi
c0013dae:	56                   	push   esi
c0013daf:	53                   	push   ebx
c0013db0:	81 ec 34 01 00 00    	sub    esp,0x134
c0013db6:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0013dbd:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013dc1:	57                   	push   edi
c0013dc2:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013dc5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013dc8:	e8 04 f1 ff ff       	call   c0012ed1 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013dcd:	89 c3                	mov    ebx,eax
c0013dcf:	58                   	pop    eax
c0013dd0:	5a                   	pop    edx
c0013dd1:	57                   	push   edi
c0013dd2:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013dd5:	e8 66 c8 fe ff       	call   c0000640 <strcpy>
c0013dda:	89 d8                	mov    eax,ebx
c0013ddc:	81 c4 40 01 00 00    	add    esp,0x140
c0013de2:	99                   	cdq    
c0013de3:	5b                   	pop    ebx
c0013de4:	5e                   	pop    esi
c0013de5:	5f                   	pop    edi
c0013de6:	c3                   	ret    

c0013de7 <SysRegistryOpen(regs*)>:
c0013de7:	83 ec 18             	sub    esp,0x18
c0013dea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013dee:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013df1:	e8 f7 e8 ff ff       	call   c00126ed <CmOpen(char const*)>
c0013df6:	83 c4 1c             	add    esp,0x1c
c0013df9:	99                   	cdq    
c0013dfa:	c3                   	ret    

c0013dfb <SysRegistryClose(regs*)>:
c0013dfb:	83 ec 18             	sub    esp,0x18
c0013dfe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e02:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013e05:	e8 01 ea ff ff       	call   c001280b <CmClose(Reghive_Tag*)>
c0013e0a:	31 c0                	xor    eax,eax
c0013e0c:	31 d2                	xor    edx,edx
c0013e0e:	83 c4 1c             	add    esp,0x1c
c0013e11:	c3                   	ret    

c0013e12 <SysSbrk(regs*)>:
c0013e12:	56                   	push   esi
c0013e13:	53                   	push   ebx
c0013e14:	50                   	push   eax
c0013e15:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e1a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013e1e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013e21:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0013e24:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0013e2a:	85 db                	test   ebx,ebx
c0013e2c:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0013e2f:	74 02                	je     c0013e33 <SysSbrk(regs*)+0x21>
c0013e31:	79 06                	jns    c0013e39 <SysSbrk(regs*)+0x27>
c0013e33:	89 f0                	mov    eax,esi
c0013e35:	31 d2                	xor    edx,edx
c0013e37:	eb 2a                	jmp    c0013e63 <SysSbrk(regs*)+0x51>
c0013e39:	83 c8 ff             	or     eax,0xffffffff
c0013e3c:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0013e42:	89 c2                	mov    edx,eax
c0013e44:	77 1d                	ja     c0013e63 <SysSbrk(regs*)+0x51>
c0013e46:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013e4c:	50                   	push   eax
c0013e4d:	c1 ea 0c             	shr    edx,0xc
c0013e50:	68 07 0c 00 00       	push   0xc07
c0013e55:	52                   	push   edx
c0013e56:	51                   	push   ecx
c0013e57:	e8 c8 5f ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c0013e5c:	89 f0                	mov    eax,esi
c0013e5e:	31 d2                	xor    edx,edx
c0013e60:	83 c4 10             	add    esp,0x10
c0013e63:	59                   	pop    ecx
c0013e64:	5b                   	pop    ebx
c0013e65:	5e                   	pop    esi
c0013e66:	c3                   	ret    

c0013e67 <SysSetCwd(regs*)>:
c0013e67:	83 ec 14             	sub    esp,0x14
c0013e6a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013e6e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013e71:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e76:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013e79:	e8 d1 7c ff ff       	call   c000bb4f <Fs::setcwd(Process*, char*)>
c0013e7e:	83 c4 1c             	add    esp,0x1c
c0013e81:	99                   	cdq    
c0013e82:	c3                   	ret    

c0013e83 <SysSetTime(regs*)>:
c0013e83:	55                   	push   ebp
c0013e84:	31 c9                	xor    ecx,ecx
c0013e86:	57                   	push   edi
c0013e87:	bd 0c 00 00 00       	mov    ebp,0xc
c0013e8c:	56                   	push   esi
c0013e8d:	53                   	push   ebx
c0013e8e:	31 db                	xor    ebx,ebx
c0013e90:	83 ec 10             	sub    esp,0x10
c0013e93:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013e97:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0013e9a:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013e9d:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0013ea0:	89 c2                	mov    edx,eax
c0013ea2:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0013ea8:	83 e2 1f             	and    edx,0x1f
c0013eab:	c1 e7 10             	shl    edi,0x10
c0013eae:	42                   	inc    edx
c0013eaf:	c1 e8 05             	shr    eax,0x5
c0013eb2:	88 d1                	mov    cl,dl
c0013eb4:	31 d2                	xor    edx,edx
c0013eb6:	f7 f5                	div    ebp
c0013eb8:	89 dd                	mov    ebp,ebx
c0013eba:	88 d5                	mov    ch,dl
c0013ebc:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0013ec2:	0f b7 c1             	movzx  eax,cx
c0013ec5:	31 d2                	xor    edx,edx
c0013ec7:	09 f8                	or     eax,edi
c0013ec9:	bf 3c 00 00 00       	mov    edi,0x3c
c0013ece:	89 c1                	mov    ecx,eax
c0013ed0:	89 f0                	mov    eax,esi
c0013ed2:	f7 f7                	div    edi
c0013ed4:	c1 e2 10             	shl    edx,0x10
c0013ed7:	09 d5                	or     ebp,edx
c0013ed9:	31 d2                	xor    edx,edx
c0013edb:	89 eb                	mov    ebx,ebp
c0013edd:	f7 f7                	div    edi
c0013edf:	bf 10 0e 00 00       	mov    edi,0xe10
c0013ee4:	88 d7                	mov    bh,dl
c0013ee6:	89 f0                	mov    eax,esi
c0013ee8:	31 d2                	xor    edx,edx
c0013eea:	f7 f7                	div    edi
c0013eec:	bf 18 00 00 00       	mov    edi,0x18
c0013ef1:	31 d2                	xor    edx,edx
c0013ef3:	f7 f7                	div    edi
c0013ef5:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0013efa:	88 d3                	mov    bl,dl
c0013efc:	53                   	push   ebx
c0013efd:	51                   	push   ecx
c0013efe:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013f04:	e8 45 84 ff ff       	call   c000c34e <Clock::setTimeInDatetimeLocal(datetime_t)>
c0013f09:	83 c4 1c             	add    esp,0x1c
c0013f0c:	83 f0 01             	xor    eax,0x1
c0013f0f:	5b                   	pop    ebx
c0013f10:	0f b6 c0             	movzx  eax,al
c0013f13:	5e                   	pop    esi
c0013f14:	31 d2                	xor    edx,edx
c0013f16:	5f                   	pop    edi
c0013f17:	5d                   	pop    ebp
c0013f18:	c3                   	ret    

c0013f19 <SysTimezone(regs*)>:
c0013f19:	53                   	push   ebx
c0013f1a:	83 ec 08             	sub    esp,0x8
c0013f1d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013f21:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0013f25:	75 17                	jne    c0013f3e <SysTimezone(regs*)+0x25>
c0013f27:	83 ec 0c             	sub    esp,0xc
c0013f2a:	68 15 20 02 c0       	push   0xc0022015
c0013f2f:	e8 11 6a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013f34:	83 c8 ff             	or     eax,0xffffffff
c0013f37:	83 c4 10             	add    esp,0x10
c0013f3a:	89 c2                	mov    edx,eax
c0013f3c:	eb 20                	jmp    c0013f5e <SysTimezone(regs*)+0x45>
c0013f3e:	83 ec 0c             	sub    esp,0xc
c0013f41:	68 2a 20 02 c0       	push   0xc002202a
c0013f46:	e8 fa 69 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013f4b:	58                   	pop    eax
c0013f4c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013f4f:	e8 64 81 ff ff       	call   c000c0b8 <User::loadClockSettings(int)>
c0013f54:	83 c4 10             	add    esp,0x10
c0013f57:	b8 01 00 00 00       	mov    eax,0x1
c0013f5c:	31 d2                	xor    edx,edx
c0013f5e:	83 c4 08             	add    esp,0x8
c0013f61:	5b                   	pop    ebx
c0013f62:	c3                   	ret    

c0013f63 <SysTruncate(regs*)>:
c0013f63:	55                   	push   ebp
c0013f64:	57                   	push   edi
c0013f65:	31 ff                	xor    edi,edi
c0013f67:	56                   	push   esi
c0013f68:	53                   	push   ebx
c0013f69:	83 ec 0c             	sub    esp,0xc
c0013f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f70:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013f73:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0013f76:	89 ce                	mov    esi,ecx
c0013f78:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0013f7c:	0f 84 9a 00 00 00    	je     c001401c <SysTruncate(regs*)+0xb9>
c0013f82:	83 ec 0c             	sub    esp,0xc
c0013f85:	68 14 01 00 00       	push   0x114
c0013f8a:	e8 27 3b ff ff       	call   c0007ab6 <malloc>
c0013f8f:	83 c4 0c             	add    esp,0xc
c0013f92:	89 c3                	mov    ebx,eax
c0013f94:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f99:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013f9c:	55                   	push   ebp
c0013f9d:	53                   	push   ebx
c0013f9e:	e8 8d 77 ff ff       	call   c000b730 <File::File(char const*, Process*)>
c0013fa3:	83 c4 10             	add    esp,0x10
c0013fa6:	31 d2                	xor    edx,edx
c0013fa8:	b8 03 00 00 00       	mov    eax,0x3
c0013fad:	85 db                	test   ebx,ebx
c0013faf:	0f 84 a2 00 00 00    	je     c0014057 <SysTruncate(regs*)+0xf4>
c0013fb5:	51                   	push   ecx
c0013fb6:	51                   	push   ecx
c0013fb7:	6a 02                	push   0x2
c0013fb9:	53                   	push   ebx
c0013fba:	e8 2d 78 ff ff       	call   c000b7ec <File::open(FileOpenMode)>
c0013fbf:	83 c4 10             	add    esp,0x10
c0013fc2:	85 c0                	test   eax,eax
c0013fc4:	74 13                	je     c0013fd9 <SysTruncate(regs*)+0x76>
c0013fc6:	83 ec 0c             	sub    esp,0xc
c0013fc9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013fcb:	53                   	push   ebx
c0013fcc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013fcf:	83 c4 10             	add    esp,0x10
c0013fd2:	b8 04 00 00 00       	mov    eax,0x4
c0013fd7:	eb 7c                	jmp    c0014055 <SysTruncate(regs*)+0xf2>
c0013fd9:	52                   	push   edx
c0013fda:	57                   	push   edi
c0013fdb:	56                   	push   esi
c0013fdc:	53                   	push   ebx
c0013fdd:	e8 1e 79 ff ff       	call   c000b900 <File::truncate(unsigned long long)>
c0013fe2:	83 c4 10             	add    esp,0x10
c0013fe5:	85 c0                	test   eax,eax
c0013fe7:	74 1b                	je     c0014004 <SysTruncate(regs*)+0xa1>
c0013fe9:	83 ec 0c             	sub    esp,0xc
c0013fec:	53                   	push   ebx
c0013fed:	e8 58 78 ff ff       	call   c000b84a <File::close()>
c0013ff2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ff4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ff7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013ffa:	83 c4 10             	add    esp,0x10
c0013ffd:	b8 05 00 00 00       	mov    eax,0x5
c0014002:	eb 51                	jmp    c0014055 <SysTruncate(regs*)+0xf2>
c0014004:	83 ec 0c             	sub    esp,0xc
c0014007:	53                   	push   ebx
c0014008:	e8 3d 78 ff ff       	call   c000b84a <File::close()>
c001400d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001400f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014012:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014015:	83 c4 10             	add    esp,0x10
c0014018:	31 c0                	xor    eax,eax
c001401a:	eb 39                	jmp    c0014055 <SysTruncate(regs*)+0xf2>
c001401c:	31 d2                	xor    edx,edx
c001401e:	b8 01 00 00 00       	mov    eax,0x1
c0014023:	83 fd 02             	cmp    ebp,0x2
c0014026:	7e 2f                	jle    c0014057 <SysTruncate(regs*)+0xf4>
c0014028:	83 ec 0c             	sub    esp,0xc
c001402b:	51                   	push   ecx
c001402c:	e8 82 54 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0014031:	83 c4 10             	add    esp,0x10
c0014034:	89 c1                	mov    ecx,eax
c0014036:	31 d2                	xor    edx,edx
c0014038:	b8 02 00 00 00       	mov    eax,0x2
c001403d:	85 c9                	test   ecx,ecx
c001403f:	74 16                	je     c0014057 <SysTruncate(regs*)+0xf4>
c0014041:	50                   	push   eax
c0014042:	57                   	push   edi
c0014043:	56                   	push   esi
c0014044:	51                   	push   ecx
c0014045:	e8 b6 78 ff ff       	call   c000b900 <File::truncate(unsigned long long)>
c001404a:	83 c4 10             	add    esp,0x10
c001404d:	85 c0                	test   eax,eax
c001404f:	0f 95 c0             	setne  al
c0014052:	0f b6 c0             	movzx  eax,al
c0014055:	31 d2                	xor    edx,edx
c0014057:	83 c4 0c             	add    esp,0xc
c001405a:	5b                   	pop    ebx
c001405b:	5e                   	pop    esi
c001405c:	5f                   	pop    edi
c001405d:	5d                   	pop    ebp
c001405e:	c3                   	ret    

c001405f <SysWrite(regs*)>:
c001405f:	57                   	push   edi
c0014060:	56                   	push   esi
c0014061:	53                   	push   ebx
c0014062:	83 ec 10             	sub    esp,0x10
c0014065:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014069:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001406c:	83 f8 02             	cmp    eax,0x2
c001406f:	77 10                	ja     c0014081 <SysWrite(regs*)+0x22>
c0014071:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014076:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014079:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001407f:	eb 0e                	jmp    c001408f <SysWrite(regs*)+0x30>
c0014081:	83 ec 0c             	sub    esp,0xc
c0014084:	50                   	push   eax
c0014085:	e8 29 54 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c001408a:	83 c4 10             	add    esp,0x10
c001408d:	89 c1                	mov    ecx,eax
c001408f:	83 c8 ff             	or     eax,0xffffffff
c0014092:	85 c9                	test   ecx,ecx
c0014094:	89 c2                	mov    edx,eax
c0014096:	74 28                	je     c00140c0 <SysWrite(regs*)+0x61>
c0014098:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00140a0:	31 ff                	xor    edi,edi
c00140a2:	83 ec 0c             	sub    esp,0xc
c00140a5:	8b 01                	mov    eax,DWORD PTR [ecx]
c00140a7:	8d 54 24 18          	lea    edx,[esp+0x18]
c00140ab:	52                   	push   edx
c00140ac:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00140af:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00140b2:	57                   	push   edi
c00140b3:	56                   	push   esi
c00140b4:	51                   	push   ecx
c00140b5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00140b8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00140bc:	83 c4 20             	add    esp,0x20
c00140bf:	99                   	cdq    
c00140c0:	83 c4 10             	add    esp,0x10
c00140c3:	5b                   	pop    ebx
c00140c4:	5e                   	pop    esi
c00140c5:	5f                   	pop    edi
c00140c6:	c3                   	ret    

c00140c7 <SysWsbe(regs*)>:
c00140c7:	57                   	push   edi
c00140c8:	b9 0b 00 00 00       	mov    ecx,0xb
c00140cd:	56                   	push   esi
c00140ce:	be 69 20 02 c0       	mov    esi,0xc0022069
c00140d3:	53                   	push   ebx
c00140d4:	83 ec 30             	sub    esp,0x30
c00140d7:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00140db:	fc                   	cld    
c00140dc:	83 ec 0c             	sub    esp,0xc
c00140df:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00140e1:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00140e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140ea:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00140ed:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00140f3:	8b 06                	mov    eax,DWORD PTR [esi]
c00140f5:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00140f8:	57                   	push   edi
c00140f9:	e8 72 c4 fe ff       	call   c0000570 <strlen>
c00140fe:	5a                   	pop    edx
c00140ff:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014103:	52                   	push   edx
c0014104:	31 d2                	xor    edx,edx
c0014106:	57                   	push   edi
c0014107:	52                   	push   edx
c0014108:	50                   	push   eax
c0014109:	56                   	push   esi
c001410a:	ff d3                	call   ebx
c001410c:	83 c4 14             	add    esp,0x14
c001410f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014113:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014116:	e8 ad 23 00 00       	call   c00164c8 <terminateTask(int)>
c001411b:	83 c4 40             	add    esp,0x40
c001411e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0014123:	5b                   	pop    ebx
c0014124:	31 d2                	xor    edx,edx
c0014126:	5e                   	pop    esi
c0014127:	5f                   	pop    edi
c0014128:	c3                   	ret    

c0014129 <SysYield(regs*)>:
c0014129:	83 ec 0c             	sub    esp,0xc
c001412c:	fa                   	cli    
c001412d:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0014133:	e8 f0 19 00 00       	call   c0015b28 <schedule()>
c0014138:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001413d:	48                   	dec    eax
c001413e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0014143:	75 01                	jne    c0014146 <SysYield(regs*)+0x1d>
c0014145:	fb                   	sti    
c0014146:	31 c0                	xor    eax,eax
c0014148:	31 d2                	xor    edx,edx
c001414a:	83 c4 0c             	add    esp,0xc
c001414d:	c3                   	ret    

c001414e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001414e:	55                   	push   ebp
c001414f:	57                   	push   edi
c0014150:	56                   	push   esi
c0014151:	53                   	push   ebx
c0014152:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0014158:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0014160:	0f 95 c0             	setne  al
c0014163:	31 d2                	xor    edx,edx
c0014165:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001416d:	0f 94 c2             	sete   dl
c0014170:	85 c2                	test   edx,eax
c0014172:	74 34                	je     c00141a8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0014174:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c001417f:	74 27                	je     c00141a8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0014181:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0014188:	05 00 10 00 00       	add    eax,0x1000
c001418d:	89 c1                	mov    ecx,eax
c001418f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014194:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c001419a:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00141a1:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c00141a8:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00141af:	83 ec 0c             	sub    esp,0xc
c00141b2:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00141b8:	6a 01                	push   0x1
c00141ba:	e8 4e 54 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c00141bf:	83 c4 10             	add    esp,0x10
c00141c2:	89 c3                	mov    ebx,eax
c00141c4:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00141ca:	0f 86 25 01 00 00    	jbe    c00142f5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c00141d0:	c1 ee 0c             	shr    esi,0xc
c00141d3:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00141da:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00141de:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00141e6:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00141ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00141f1:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00141f8:	29 ef                	sub    edi,ebp
c00141fa:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00141fe:	0f 83 f8 00 00 00    	jae    c00142fc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c0014204:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001420a:	76 05                	jbe    c0014211 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c001420c:	bf 00 10 00 00       	mov    edi,0x1000
c0014211:	83 ec 0c             	sub    esp,0xc
c0014214:	31 d2                	xor    edx,edx
c0014216:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001421d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001421f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014223:	50                   	push   eax
c0014224:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014228:	56                   	push   esi
c0014229:	52                   	push   edx
c001422a:	57                   	push   edi
c001422b:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0014232:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014235:	83 c4 20             	add    esp,0x20
c0014238:	85 c0                	test   eax,eax
c001423a:	75 06                	jne    c0014242 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c001423c:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0014240:	74 13                	je     c0014255 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c0014242:	83 ec 0c             	sub    esp,0xc
c0014245:	53                   	push   ebx
c0014246:	e8 e0 56 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c001424b:	83 c4 10             	add    esp,0x10
c001424e:	31 c0                	xor    eax,eax
c0014250:	e9 7c 01 00 00       	jmp    c00143d1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0014255:	fa                   	cli    
c0014256:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001425c:	e8 5e 3b ff ff       	call   c0007dbf <Phys::allocatePage()>
c0014261:	6a 07                	push   0x7
c0014263:	89 c7                	mov    edi,eax
c0014265:	53                   	push   ebx
c0014266:	50                   	push   eax
c0014267:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001426c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001426f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014275:	e8 a6 5a ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001427a:	83 c4 0c             	add    esp,0xc
c001427d:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014284:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001428a:	6a 00                	push   0x0
c001428c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014291:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014294:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001429a:	e8 e7 58 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c001429f:	58                   	pop    eax
c00142a0:	5a                   	pop    edx
c00142a1:	68 07 0c 00 00       	push   0xc07
c00142a6:	55                   	push   ebp
c00142a7:	57                   	push   edi
c00142a8:	89 df                	mov    edi,ebx
c00142aa:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00142b1:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00142b7:	6a 00                	push   0x0
c00142b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00142be:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00142c1:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00142c7:	e8 a6 5c ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00142cc:	b9 00 10 00 00       	mov    ecx,0x1000
c00142d1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00142d3:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00142d8:	83 c4 20             	add    esp,0x20
c00142db:	48                   	dec    eax
c00142dc:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00142e1:	85 c0                	test   eax,eax
c00142e3:	75 01                	jne    c00142e6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c00142e5:	fb                   	sti    
c00142e6:	81 c5 00 10 00 00    	add    ebp,0x1000
c00142ec:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00142f0:	e9 f1 fe ff ff       	jmp    c00141e6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c00142f5:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00142fc:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014303:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0014309:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001430f:	0f 86 ae 00 00 00    	jbe    c00143c3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0014315:	fa                   	cli    
c0014316:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001431c:	c1 ee 0c             	shr    esi,0xc
c001431f:	51                   	push   ecx
c0014320:	31 ff                	xor    edi,edi
c0014322:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014329:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001432f:	6a 00                	push   0x0
c0014331:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014336:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014339:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001433f:	e8 42 58 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c0014344:	83 c4 10             	add    esp,0x10
c0014347:	e8 73 3a ff ff       	call   c0007dbf <Phys::allocatePage()>
c001434c:	47                   	inc    edi
c001434d:	6a 07                	push   0x7
c001434f:	53                   	push   ebx
c0014350:	50                   	push   eax
c0014351:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014355:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001435b:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001435e:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0014364:	e8 b7 59 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014369:	58                   	pop    eax
c001436a:	5a                   	pop    edx
c001436b:	68 07 0c 00 00       	push   0xc07
c0014370:	55                   	push   ebp
c0014371:	81 c5 00 10 00 00    	add    ebp,0x1000
c0014377:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001437b:	50                   	push   eax
c001437c:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014383:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014389:	6a 00                	push   0x0
c001438b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014390:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014393:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014399:	e8 d4 5b ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001439e:	83 c4 1c             	add    esp,0x1c
c00143a1:	68 00 10 00 00       	push   0x1000
c00143a6:	6a 00                	push   0x0
c00143a8:	53                   	push   ebx
c00143a9:	e8 42 c1 fe ff       	call   c00004f0 <memset>
c00143ae:	83 c4 10             	add    esp,0x10
c00143b1:	39 fe                	cmp    esi,edi
c00143b3:	77 92                	ja     c0014347 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c00143b5:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00143ba:	48                   	dec    eax
c00143bb:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00143c0:	75 01                	jne    c00143c3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c00143c2:	fb                   	sti    
c00143c3:	83 ec 0c             	sub    esp,0xc
c00143c6:	53                   	push   ebx
c00143c7:	e8 5f 55 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c00143cc:	83 c4 10             	add    esp,0x10
c00143cf:	b0 01                	mov    al,0x1
c00143d1:	81 c4 2c 10 00 00    	add    esp,0x102c
c00143d7:	5b                   	pop    ebx
c00143d8:	5e                   	pop    esi
c00143d9:	5f                   	pop    edi
c00143da:	5d                   	pop    ebp
c00143db:	c3                   	ret    

c00143dc <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00143dc:	55                   	push   ebp
c00143dd:	57                   	push   edi
c00143de:	56                   	push   esi
c00143df:	53                   	push   ebx
c00143e0:	83 ec 48             	sub    esp,0x48
c00143e3:	68 14 01 00 00       	push   0x114
c00143e8:	e8 c9 36 ff ff       	call   c0007ab6 <malloc>
c00143ed:	83 c4 0c             	add    esp,0xc
c00143f0:	89 c6                	mov    esi,eax
c00143f2:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00143f6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00143fa:	50                   	push   eax
c00143fb:	e8 30 73 ff ff       	call   c000b730 <File::File(char const*, Process*)>
c0014400:	58                   	pop    eax
c0014401:	5a                   	pop    edx
c0014402:	6a 01                	push   0x1
c0014404:	56                   	push   esi
c0014405:	e8 e2 73 ff ff       	call   c000b7ec <File::open(FileOpenMode)>
c001440a:	83 c4 10             	add    esp,0x10
c001440d:	85 c0                	test   eax,eax
c001440f:	0f 85 43 01 00 00    	jne    c0014558 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014415:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001441d:	83 ec 0c             	sub    esp,0xc
c0014420:	6a 34                	push   0x34
c0014422:	e8 8f 36 ff ff       	call   c0007ab6 <malloc>
c0014427:	89 c3                	mov    ebx,eax
c0014429:	58                   	pop    eax
c001442a:	8b 06                	mov    eax,DWORD PTR [esi]
c001442c:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0014430:	57                   	push   edi
c0014431:	53                   	push   ebx
c0014432:	6a 00                	push   0x0
c0014434:	6a 34                	push   0x34
c0014436:	56                   	push   esi
c0014437:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001443a:	83 c4 20             	add    esp,0x20
c001443d:	85 c0                	test   eax,eax
c001443f:	0f 85 13 01 00 00    	jne    c0014558 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014445:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001444b:	0f 85 07 01 00 00    	jne    c0014558 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014451:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014454:	85 c0                	test   eax,eax
c0014456:	0f 84 fc 00 00 00    	je     c0014558 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c001445c:	31 d2                	xor    edx,edx
c001445e:	55                   	push   ebp
c001445f:	52                   	push   edx
c0014460:	50                   	push   eax
c0014461:	56                   	push   esi
c0014462:	e8 43 74 ff ff       	call   c000b8aa <File::seek(unsigned long long)>
c0014467:	83 c4 10             	add    esp,0x10
c001446a:	85 c0                	test   eax,eax
c001446c:	0f 85 e6 00 00 00    	jne    c0014558 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014472:	83 ec 0c             	sub    esp,0xc
c0014475:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014478:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001447c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014480:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014484:	0f af c2             	imul   eax,edx
c0014487:	50                   	push   eax
c0014488:	e8 29 36 ff ff       	call   c0007ab6 <malloc>
c001448d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001448f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014493:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014496:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001449a:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001449e:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00144a2:	0f af c2             	imul   eax,edx
c00144a5:	99                   	cdq    
c00144a6:	52                   	push   edx
c00144a7:	50                   	push   eax
c00144a8:	56                   	push   esi
c00144a9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00144ac:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00144af:	83 c4 20             	add    esp,0x20
c00144b2:	85 c0                	test   eax,eax
c00144b4:	0f 84 9e 00 00 00    	je     c0014558 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00144ba:	31 d2                	xor    edx,edx
c00144bc:	51                   	push   ecx
c00144bd:	52                   	push   edx
c00144be:	50                   	push   eax
c00144bf:	56                   	push   esi
c00144c0:	e8 e5 73 ff ff       	call   c000b8aa <File::seek(unsigned long long)>
c00144c5:	83 c4 10             	add    esp,0x10
c00144c8:	85 c0                	test   eax,eax
c00144ca:	0f 85 88 00 00 00    	jne    c0014558 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00144d0:	83 ec 0c             	sub    esp,0xc
c00144d3:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00144d7:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00144db:	31 ed                	xor    ebp,ebp
c00144dd:	0f af c2             	imul   eax,edx
c00144e0:	50                   	push   eax
c00144e1:	e8 d0 35 ff ff       	call   c0007ab6 <malloc>
c00144e6:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00144e8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00144ec:	89 3c 24             	mov    DWORD PTR [esp],edi
c00144ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144f3:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00144f7:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00144fb:	0f af c2             	imul   eax,edx
c00144fe:	99                   	cdq    
c00144ff:	52                   	push   edx
c0014500:	50                   	push   eax
c0014501:	56                   	push   esi
c0014502:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014505:	83 c4 20             	add    esp,0x20
c0014508:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014510:	0f b7 fd             	movzx  edi,bp
c0014513:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0014517:	73 7d                	jae    c0014596 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0014519:	c1 e7 05             	shl    edi,0x5
c001451c:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0014520:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014523:	75 6b                	jne    c0014590 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014525:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0014528:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001452c:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001452f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014533:	52                   	push   edx
c0014534:	31 d2                	xor    edx,edx
c0014536:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014539:	52                   	push   edx
c001453a:	50                   	push   eax
c001453b:	56                   	push   esi
c001453c:	e8 69 73 ff ff       	call   c000b8aa <File::seek(unsigned long long)>
c0014541:	83 c4 10             	add    esp,0x10
c0014544:	85 c0                	test   eax,eax
c0014546:	74 17                	je     c001455f <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0014548:	83 ec 0c             	sub    esp,0xc
c001454b:	68 95 20 02 c0       	push   0xc0022095
c0014550:	e8 f0 63 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014555:	83 c4 10             	add    esp,0x10
c0014558:	31 c0                	xor    eax,eax
c001455a:	e9 87 00 00 00       	jmp    c00145e6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c001455f:	83 ec 0c             	sub    esp,0xc
c0014562:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014565:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0014568:	50                   	push   eax
c0014569:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001456d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014571:	56                   	push   esi
c0014572:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014576:	e8 d3 fb ff ff       	call   c001414e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001457b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001457f:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0014583:	83 c4 20             	add    esp,0x20
c0014586:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001458a:	73 04                	jae    c0014590 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c001458c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014590:	45                   	inc    ebp
c0014591:	e9 7a ff ff ff       	jmp    c0014510 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014596:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001459a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001459e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00145a2:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c00145a8:	83 ec 0c             	sub    esp,0xc
c00145ab:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c00145b1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00145b6:	05 00 10 00 00       	add    eax,0x1000
c00145bb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00145be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145c2:	e8 ff 34 ff ff       	call   c0007ac6 <free>
c00145c7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00145ca:	e8 f7 34 ff ff       	call   c0007ac6 <free>
c00145cf:	58                   	pop    eax
c00145d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145d4:	e8 ed 34 ff ff       	call   c0007ac6 <free>
c00145d9:	89 34 24             	mov    DWORD PTR [esp],esi
c00145dc:	e8 69 72 ff ff       	call   c000b84a <File::close()>
c00145e1:	83 c4 10             	add    esp,0x10
c00145e4:	b0 01                	mov    al,0x1
c00145e6:	83 c4 3c             	add    esp,0x3c
c00145e9:	5b                   	pop    ebx
c00145ea:	5e                   	pop    esi
c00145eb:	5f                   	pop    edi
c00145ec:	5d                   	pop    ebp
c00145ed:	c3                   	ret    

c00145ee <Thr::runtimeReferenceHelper()>:
c00145ee:	83 ec 18             	sub    esp,0x18
c00145f1:	68 9d 20 02 c0       	push   0xc002209d
c00145f6:	e8 4a 63 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00145fb:	fa                   	cli    
c00145fc:	83 c4 10             	add    esp,0x10
c00145ff:	eb fe                	jmp    c00145ff <Thr::runtimeReferenceHelper()+0x11>

c0014601 <Thr::getAddressOfKernelSymbol(char const*)>:
c0014601:	57                   	push   edi
c0014602:	56                   	push   esi
c0014603:	53                   	push   ebx
c0014604:	31 db                	xor    ebx,ebx
c0014606:	39 1d a0 96 02 c0    	cmp    DWORD PTR ds:0xc00296a0,ebx
c001460c:	7e 3c                	jle    c001464a <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001460e:	8b 34 9d 20 96 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd69e0]
c0014615:	31 ff                	xor    edi,edi
c0014617:	39 3c 9d 20 95 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd6ae0],edi
c001461e:	7e 27                	jle    c0014647 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014620:	50                   	push   eax
c0014621:	50                   	push   eax
c0014622:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014626:	8b 06                	mov    eax,DWORD PTR [esi]
c0014628:	03 04 9d a0 95 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd6a60]
c001462f:	50                   	push   eax
c0014630:	e8 1b c1 fe ff       	call   c0000750 <strcmp>
c0014635:	83 c4 10             	add    esp,0x10
c0014638:	85 c0                	test   eax,eax
c001463a:	75 05                	jne    c0014641 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001463c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001463f:	eb 0b                	jmp    c001464c <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014641:	83 c6 10             	add    esi,0x10
c0014644:	47                   	inc    edi
c0014645:	eb d0                	jmp    c0014617 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014647:	43                   	inc    ebx
c0014648:	eb bc                	jmp    c0014606 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001464a:	31 c0                	xor    eax,eax
c001464c:	5b                   	pop    ebx
c001464d:	5e                   	pop    esi
c001464e:	5f                   	pop    edi
c001464f:	c3                   	ret    

c0014650 <Thr::loadKernelSymbolTable(char const*)>:
c0014650:	55                   	push   ebp
c0014651:	57                   	push   edi
c0014652:	56                   	push   esi
c0014653:	53                   	push   ebx
c0014654:	83 ec 68             	sub    esp,0x68
c0014657:	8b 35 f0 96 02 c0    	mov    esi,DWORD PTR ds:0xc00296f0
c001465d:	68 14 01 00 00       	push   0x114
c0014662:	e8 4f 34 ff ff       	call   c0007ab6 <malloc>
c0014667:	83 c4 0c             	add    esp,0xc
c001466a:	89 c3                	mov    ebx,eax
c001466c:	56                   	push   esi
c001466d:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014671:	50                   	push   eax
c0014672:	e8 b9 70 ff ff       	call   c000b730 <File::File(char const*, Process*)>
c0014677:	5e                   	pop    esi
c0014678:	5f                   	pop    edi
c0014679:	6a 01                	push   0x1
c001467b:	53                   	push   ebx
c001467c:	e8 6b 71 ff ff       	call   c000b7ec <File::open(FileOpenMode)>
c0014681:	83 c4 10             	add    esp,0x10
c0014684:	85 c0                	test   eax,eax
c0014686:	74 0a                	je     c0014692 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014688:	83 ec 0c             	sub    esp,0xc
c001468b:	68 bf 20 02 c0       	push   0xc00220bf
c0014690:	eb 34                	jmp    c00146c6 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014692:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001469a:	83 ec 0c             	sub    esp,0xc
c001469d:	6a 34                	push   0x34
c001469f:	e8 12 34 ff ff       	call   c0007ab6 <malloc>
c00146a4:	59                   	pop    ecx
c00146a5:	89 c7                	mov    edi,eax
c00146a7:	8d 74 24 34          	lea    esi,[esp+0x34]
c00146ab:	8b 03                	mov    eax,DWORD PTR [ebx]
c00146ad:	56                   	push   esi
c00146ae:	57                   	push   edi
c00146af:	6a 00                	push   0x0
c00146b1:	6a 34                	push   0x34
c00146b3:	53                   	push   ebx
c00146b4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00146b7:	83 c4 20             	add    esp,0x20
c00146ba:	85 c0                	test   eax,eax
c00146bc:	74 17                	je     c00146d5 <Thr::loadKernelSymbolTable(char const*)+0x85>
c00146be:	83 ec 0c             	sub    esp,0xc
c00146c1:	68 d6 20 02 c0       	push   0xc00220d6
c00146c6:	e8 9e cb ff ff       	call   c0011269 <KePanic(char const*)>
c00146cb:	83 c4 10             	add    esp,0x10
c00146ce:	31 c0                	xor    eax,eax
c00146d0:	e9 31 02 00 00       	jmp    c0014906 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c00146d5:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00146db:	75 e1                	jne    c00146be <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00146dd:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00146e0:	85 c0                	test   eax,eax
c00146e2:	74 da                	je     c00146be <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00146e4:	52                   	push   edx
c00146e5:	31 d2                	xor    edx,edx
c00146e7:	52                   	push   edx
c00146e8:	50                   	push   eax
c00146e9:	53                   	push   ebx
c00146ea:	e8 bb 71 ff ff       	call   c000b8aa <File::seek(unsigned long long)>
c00146ef:	83 c4 10             	add    esp,0x10
c00146f2:	85 c0                	test   eax,eax
c00146f4:	75 c8                	jne    c00146be <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00146f6:	83 ec 0c             	sub    esp,0xc
c00146f9:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00146fd:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014701:	31 ed                	xor    ebp,ebp
c0014703:	0f af c2             	imul   eax,edx
c0014706:	50                   	push   eax
c0014707:	e8 aa 33 ff ff       	call   c0007ab6 <malloc>
c001470c:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001470e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014712:	89 34 24             	mov    DWORD PTR [esp],esi
c0014715:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014719:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001471d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014721:	0f af c2             	imul   eax,edx
c0014724:	99                   	cdq    
c0014725:	52                   	push   edx
c0014726:	50                   	push   eax
c0014727:	53                   	push   ebx
c0014728:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001472b:	83 c4 20             	add    esp,0x20
c001472e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014736:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001473e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014746:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001474e:	0f b7 f5             	movzx  esi,bp
c0014751:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014755:	0f 83 a7 00 00 00    	jae    c0014802 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001475b:	6b f6 28             	imul   esi,esi,0x28
c001475e:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014762:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014765:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014769:	50                   	push   eax
c001476a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001476e:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014772:	8b 16                	mov    edx,DWORD PTR [esi]
c0014774:	6b c0 28             	imul   eax,eax,0x28
c0014777:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001477b:	89 d0                	mov    eax,edx
c001477d:	31 d2                	xor    edx,edx
c001477f:	52                   	push   edx
c0014780:	50                   	push   eax
c0014781:	53                   	push   ebx
c0014782:	e8 23 71 ff ff       	call   c000b8aa <File::seek(unsigned long long)>
c0014787:	83 c4 0c             	add    esp,0xc
c001478a:	6a 20                	push   0x20
c001478c:	6a 00                	push   0x0
c001478e:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014792:	52                   	push   edx
c0014793:	e8 58 bd fe ff       	call   c00004f0 <memset>
c0014798:	58                   	pop    eax
c0014799:	8b 03                	mov    eax,DWORD PTR [ebx]
c001479b:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001479f:	51                   	push   ecx
c00147a0:	8d 54 24 40          	lea    edx,[esp+0x40]
c00147a4:	52                   	push   edx
c00147a5:	6a 00                	push   0x0
c00147a7:	6a 1f                	push   0x1f
c00147a9:	53                   	push   ebx
c00147aa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00147ad:	83 c4 18             	add    esp,0x18
c00147b0:	68 ed 20 02 c0       	push   0xc00220ed
c00147b5:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00147b9:	52                   	push   edx
c00147ba:	e8 91 bf fe ff       	call   c0000750 <strcmp>
c00147bf:	83 c4 10             	add    esp,0x10
c00147c2:	85 c0                	test   eax,eax
c00147c4:	75 0f                	jne    c00147d5 <Thr::loadKernelSymbolTable(char const*)+0x185>
c00147c6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00147c9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00147cd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00147d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00147d5:	50                   	push   eax
c00147d6:	50                   	push   eax
c00147d7:	68 f5 20 02 c0       	push   0xc00220f5
c00147dc:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00147e0:	50                   	push   eax
c00147e1:	e8 6a bf fe ff       	call   c0000750 <strcmp>
c00147e6:	83 c4 10             	add    esp,0x10
c00147e9:	85 c0                	test   eax,eax
c00147eb:	75 0f                	jne    c00147fc <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00147ed:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00147f0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00147f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00147f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00147fc:	45                   	inc    ebp
c00147fd:	e9 4c ff ff ff       	jmp    c001474e <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014802:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014807:	75 10                	jne    c0014819 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014809:	83 ec 0c             	sub    esp,0xc
c001480c:	68 fd 20 02 c0       	push   0xc00220fd
c0014811:	e8 53 ca ff ff       	call   c0011269 <KePanic(char const*)>
c0014816:	83 c4 10             	add    esp,0x10
c0014819:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001481e:	75 10                	jne    c0014830 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014820:	83 ec 0c             	sub    esp,0xc
c0014823:	68 fd 20 02 c0       	push   0xc00220fd
c0014828:	e8 3c ca ff ff       	call   c0011269 <KePanic(char const*)>
c001482d:	83 c4 10             	add    esp,0x10
c0014830:	31 d2                	xor    edx,edx
c0014832:	50                   	push   eax
c0014833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014837:	52                   	push   edx
c0014838:	50                   	push   eax
c0014839:	53                   	push   ebx
c001483a:	e8 6b 70 ff ff       	call   c000b8aa <File::seek(unsigned long long)>
c001483f:	5a                   	pop    edx
c0014840:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014844:	e8 6d 32 ff ff       	call   c0007ab6 <malloc>
c0014849:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001484d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014851:	31 c9                	xor    ecx,ecx
c0014853:	5e                   	pop    esi
c0014854:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014856:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001485a:	55                   	push   ebp
c001485b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001485f:	51                   	push   ecx
c0014860:	52                   	push   edx
c0014861:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014865:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014869:	53                   	push   ebx
c001486a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001486d:	83 c4 14             	add    esp,0x14
c0014870:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014874:	e8 3d 32 ff ff       	call   c0007ab6 <malloc>
c0014879:	89 c6                	mov    esi,eax
c001487b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001487d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014880:	56                   	push   esi
c0014881:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014885:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014889:	51                   	push   ecx
c001488a:	52                   	push   edx
c001488b:	53                   	push   ebx
c001488c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001488f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014893:	8b 15 a0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296a0
c0014899:	83 c4 1c             	add    esp,0x1c
c001489c:	c1 e8 04             	shr    eax,0x4
c001489f:	89 04 95 20 95 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6ae0],eax
c00148a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00148aa:	31 d2                	xor    edx,edx
c00148ac:	52                   	push   edx
c00148ad:	50                   	push   eax
c00148ae:	53                   	push   ebx
c00148af:	e8 f6 6f ff ff       	call   c000b8aa <File::seek(unsigned long long)>
c00148b4:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00148b6:	31 d2                	xor    edx,edx
c00148b8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00148bb:	56                   	push   esi
c00148bc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00148c0:	52                   	push   edx
c00148c1:	50                   	push   eax
c00148c2:	53                   	push   ebx
c00148c3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00148c6:	83 c4 14             	add    esp,0x14
c00148c9:	53                   	push   ebx
c00148ca:	e8 7b 6f ff ff       	call   c000b84a <File::close()>
c00148cf:	5d                   	pop    ebp
c00148d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00148d4:	e8 ed 31 ff ff       	call   c0007ac6 <free>
c00148d9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00148dc:	e8 e5 31 ff ff       	call   c0007ac6 <free>
c00148e1:	a1 a0 96 02 c0       	mov    eax,ds:0xc00296a0
c00148e6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00148ea:	8d 50 01             	lea    edx,[eax+0x1]
c00148ed:	89 0c 85 20 96 02 c0 	mov    DWORD PTR [eax*4-0x3ffd69e0],ecx
c00148f4:	89 34 85 a0 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6a60],esi
c00148fb:	89 15 a0 96 02 c0    	mov    DWORD PTR ds:0xc00296a0,edx
c0014901:	83 c4 10             	add    esp,0x10
c0014904:	b0 01                	mov    al,0x1
c0014906:	83 c4 5c             	add    esp,0x5c
c0014909:	5b                   	pop    ebx
c001490a:	5e                   	pop    esi
c001490b:	5f                   	pop    edi
c001490c:	5d                   	pop    ebp
c001490d:	c3                   	ret    

c001490e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001490e:	55                   	push   ebp
c001490f:	57                   	push   edi
c0014910:	56                   	push   esi
c0014911:	53                   	push   ebx
c0014912:	81 ec 68 03 00 00    	sub    esp,0x368
c0014918:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001491f:	8b 1d f0 96 02 c0    	mov    ebx,DWORD PTR ds:0xc00296f0
c0014925:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0014929:	68 14 01 00 00       	push   0x114
c001492e:	e8 83 31 ff ff       	call   c0007ab6 <malloc>
c0014933:	83 c4 0c             	add    esp,0xc
c0014936:	89 c5                	mov    ebp,eax
c0014938:	53                   	push   ebx
c0014939:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014940:	50                   	push   eax
c0014941:	e8 ea 6d ff ff       	call   c000b730 <File::File(char const*, Process*)>
c0014946:	5e                   	pop    esi
c0014947:	5f                   	pop    edi
c0014948:	6a 01                	push   0x1
c001494a:	55                   	push   ebp
c001494b:	e8 9c 6e ff ff       	call   c000b7ec <File::open(FileOpenMode)>
c0014950:	83 c4 10             	add    esp,0x10
c0014953:	85 c0                	test   eax,eax
c0014955:	0f 85 aa 06 00 00    	jne    c0015005 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001495b:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014963:	83 ec 0c             	sub    esp,0xc
c0014966:	6a 34                	push   0x34
c0014968:	e8 49 31 ff ff       	call   c0007ab6 <malloc>
c001496d:	5b                   	pop    ebx
c001496e:	89 c7                	mov    edi,eax
c0014970:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014974:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014977:	53                   	push   ebx
c0014978:	57                   	push   edi
c0014979:	6a 00                	push   0x0
c001497b:	6a 34                	push   0x34
c001497d:	55                   	push   ebp
c001497e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014981:	83 c4 20             	add    esp,0x20
c0014984:	85 c0                	test   eax,eax
c0014986:	0f 85 79 06 00 00    	jne    c0015005 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001498c:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014992:	0f 85 6d 06 00 00    	jne    c0015005 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014998:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001499b:	85 c0                	test   eax,eax
c001499d:	0f 84 62 06 00 00    	je     c0015005 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00149a3:	31 d2                	xor    edx,edx
c00149a5:	51                   	push   ecx
c00149a6:	52                   	push   edx
c00149a7:	50                   	push   eax
c00149a8:	55                   	push   ebp
c00149a9:	e8 fc 6e ff ff       	call   c000b8aa <File::seek(unsigned long long)>
c00149ae:	83 c4 10             	add    esp,0x10
c00149b1:	85 c0                	test   eax,eax
c00149b3:	0f 85 4c 06 00 00    	jne    c0015005 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00149b9:	83 ec 0c             	sub    esp,0xc
c00149bc:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00149bf:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00149c3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00149c7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00149cb:	0f af c2             	imul   eax,edx
c00149ce:	50                   	push   eax
c00149cf:	e8 e2 30 ff ff       	call   c0007ab6 <malloc>
c00149d4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00149d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00149db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00149de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00149e2:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00149e6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00149ea:	0f af c2             	imul   eax,edx
c00149ed:	99                   	cdq    
c00149ee:	52                   	push   edx
c00149ef:	50                   	push   eax
c00149f0:	55                   	push   ebp
c00149f1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00149f4:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c00149f7:	83 c4 20             	add    esp,0x20
c00149fa:	85 c0                	test   eax,eax
c00149fc:	0f 84 03 06 00 00    	je     c0015005 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014a02:	52                   	push   edx
c0014a03:	31 d2                	xor    edx,edx
c0014a05:	52                   	push   edx
c0014a06:	50                   	push   eax
c0014a07:	55                   	push   ebp
c0014a08:	e8 9d 6e ff ff       	call   c000b8aa <File::seek(unsigned long long)>
c0014a0d:	83 c4 10             	add    esp,0x10
c0014a10:	85 c0                	test   eax,eax
c0014a12:	0f 85 ed 05 00 00    	jne    c0015005 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014a18:	83 ec 0c             	sub    esp,0xc
c0014a1b:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014a1f:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014a23:	31 f6                	xor    esi,esi
c0014a25:	0f af c2             	imul   eax,edx
c0014a28:	50                   	push   eax
c0014a29:	e8 88 30 ff ff       	call   c0007ab6 <malloc>
c0014a2e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014a31:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014a35:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a38:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014a3c:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014a40:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014a44:	0f af c2             	imul   eax,edx
c0014a47:	99                   	cdq    
c0014a48:	52                   	push   edx
c0014a49:	50                   	push   eax
c0014a4a:	55                   	push   ebp
c0014a4b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014a4e:	83 c4 20             	add    esp,0x20
c0014a51:	0f b7 de             	movzx  ebx,si
c0014a54:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c0014a58:	0f 83 87 00 00 00    	jae    c0014ae5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0014a5e:	c1 e3 05             	shl    ebx,0x5
c0014a61:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0014a65:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0014a68:	75 75                	jne    c0014adf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0014a6a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0014a6d:	31 d2                	xor    edx,edx
c0014a6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014a73:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014a76:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014a7a:	50                   	push   eax
c0014a7b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014a7e:	52                   	push   edx
c0014a7f:	50                   	push   eax
c0014a80:	55                   	push   ebp
c0014a81:	e8 24 6e ff ff       	call   c000b8aa <File::seek(unsigned long long)>
c0014a86:	83 c4 10             	add    esp,0x10
c0014a89:	85 c0                	test   eax,eax
c0014a8b:	0f 85 74 05 00 00    	jne    c0015005 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014a91:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014a98:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014a9b:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0014a9f:	31 d2                	xor    edx,edx
c0014aa1:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014aa5:	83 ec 0c             	sub    esp,0xc
c0014aa8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014aac:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014ab3:	50                   	push   eax
c0014ab4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014ab8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014abc:	52                   	push   edx
c0014abd:	50                   	push   eax
c0014abe:	55                   	push   ebp
c0014abf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014ac2:	83 c4 1c             	add    esp,0x1c
c0014ac5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014ac8:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0014acb:	50                   	push   eax
c0014acc:	6a 00                	push   0x0
c0014ace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ad2:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0014ad6:	50                   	push   eax
c0014ad7:	e8 14 ba fe ff       	call   c00004f0 <memset>
c0014adc:	83 c4 10             	add    esp,0x10
c0014adf:	46                   	inc    esi
c0014ae0:	e9 6c ff ff ff       	jmp    c0014a51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0014ae5:	53                   	push   ebx
c0014ae6:	31 db                	xor    ebx,ebx
c0014ae8:	68 00 01 00 00       	push   0x100
c0014aed:	6a 00                	push   0x0
c0014aef:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0014af3:	50                   	push   eax
c0014af4:	e8 f7 b9 fe ff       	call   c00004f0 <memset>
c0014af9:	83 c4 0c             	add    esp,0xc
c0014afc:	68 00 01 00 00       	push   0x100
c0014b01:	6a 00                	push   0x0
c0014b03:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0014b0a:	50                   	push   eax
c0014b0b:	e8 e0 b9 fe ff       	call   c00004f0 <memset>
c0014b10:	83 c4 10             	add    esp,0x10
c0014b13:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014b1b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014b23:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014b2b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014b33:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014b3b:	0f b7 f3             	movzx  esi,bx
c0014b3e:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c0014b42:	0f 83 2d 01 00 00    	jae    c0014c75 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0014b48:	6b f6 28             	imul   esi,esi,0x28
c0014b4b:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014b4f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014b52:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014b56:	52                   	push   edx
c0014b57:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014b5b:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0014b5f:	8b 06                	mov    eax,DWORD PTR [esi]
c0014b61:	6b d2 28             	imul   edx,edx,0x28
c0014b64:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014b68:	31 d2                	xor    edx,edx
c0014b6a:	52                   	push   edx
c0014b6b:	50                   	push   eax
c0014b6c:	55                   	push   ebp
c0014b6d:	e8 38 6d ff ff       	call   c000b8aa <File::seek(unsigned long long)>
c0014b72:	83 c4 0c             	add    esp,0xc
c0014b75:	6a 20                	push   0x20
c0014b77:	6a 00                	push   0x0
c0014b79:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014b80:	51                   	push   ecx
c0014b81:	e8 6a b9 fe ff       	call   c00004f0 <memset>
c0014b86:	59                   	pop    ecx
c0014b87:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014b8a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014b8e:	52                   	push   edx
c0014b8f:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0014b96:	51                   	push   ecx
c0014b97:	6a 00                	push   0x0
c0014b99:	6a 1f                	push   0x1f
c0014b9b:	55                   	push   ebp
c0014b9c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014b9f:	83 c4 1c             	add    esp,0x1c
c0014ba2:	6a 09                	push   0x9
c0014ba4:	68 17 21 02 c0       	push   0xc0022117
c0014ba9:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014bb0:	51                   	push   ecx
c0014bb1:	e8 ca b7 fe ff       	call   c0000380 <memcmp>
c0014bb6:	83 c4 10             	add    esp,0x10
c0014bb9:	85 c0                	test   eax,eax
c0014bbb:	75 21                	jne    c0014bde <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0014bbd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014bc1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014bc5:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0014bc9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014bcd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014bd0:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014bd7:	89 d0                	mov    eax,edx
c0014bd9:	40                   	inc    eax
c0014bda:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014bde:	50                   	push   eax
c0014bdf:	6a 09                	push   0x9
c0014be1:	68 21 21 02 c0       	push   0xc0022121
c0014be6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014bed:	50                   	push   eax
c0014bee:	e8 8d b7 fe ff       	call   c0000380 <memcmp>
c0014bf3:	83 c4 10             	add    esp,0x10
c0014bf6:	85 c0                	test   eax,eax
c0014bf8:	75 21                	jne    c0014c1b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0014bfa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014bfe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014c02:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014c06:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c0014c0a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014c0d:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014c14:	89 d0                	mov    eax,edx
c0014c16:	40                   	inc    eax
c0014c17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014c1b:	50                   	push   eax
c0014c1c:	50                   	push   eax
c0014c1d:	68 ed 20 02 c0       	push   0xc00220ed
c0014c22:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014c29:	50                   	push   eax
c0014c2a:	e8 21 bb fe ff       	call   c0000750 <strcmp>
c0014c2f:	83 c4 10             	add    esp,0x10
c0014c32:	85 c0                	test   eax,eax
c0014c34:	75 0f                	jne    c0014c45 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0014c36:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014c39:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014c3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014c41:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014c45:	50                   	push   eax
c0014c46:	50                   	push   eax
c0014c47:	68 f5 20 02 c0       	push   0xc00220f5
c0014c4c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014c53:	50                   	push   eax
c0014c54:	e8 f7 ba fe ff       	call   c0000750 <strcmp>
c0014c59:	83 c4 10             	add    esp,0x10
c0014c5c:	85 c0                	test   eax,eax
c0014c5e:	75 0f                	jne    c0014c6f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0014c60:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014c63:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014c67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014c6b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014c6f:	43                   	inc    ebx
c0014c70:	e9 c6 fe ff ff       	jmp    c0014b3b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0014c75:	31 d2                	xor    edx,edx
c0014c77:	50                   	push   eax
c0014c78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c7c:	52                   	push   edx
c0014c7d:	50                   	push   eax
c0014c7e:	55                   	push   ebp
c0014c7f:	e8 26 6c ff ff       	call   c000b8aa <File::seek(unsigned long long)>
c0014c84:	58                   	pop    eax
c0014c85:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014c89:	e8 28 2e ff ff       	call   c0007ab6 <malloc>
c0014c8e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014c91:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014c95:	31 d2                	xor    edx,edx
c0014c97:	58                   	pop    eax
c0014c98:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014c9c:	53                   	push   ebx
c0014c9d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0014ca1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014ca5:	52                   	push   edx
c0014ca6:	50                   	push   eax
c0014ca7:	55                   	push   ebp
c0014ca8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014cab:	83 c4 14             	add    esp,0x14
c0014cae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014cb2:	e8 ff 2d ff ff       	call   c0007ab6 <malloc>
c0014cb7:	31 d2                	xor    edx,edx
c0014cb9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014cbd:	83 c4 0c             	add    esp,0xc
c0014cc0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014cc4:	52                   	push   edx
c0014cc5:	50                   	push   eax
c0014cc6:	55                   	push   ebp
c0014cc7:	e8 de 6b ff ff       	call   c000b8aa <File::seek(unsigned long long)>
c0014ccc:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014ccf:	31 d2                	xor    edx,edx
c0014cd1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014cd8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014cdc:	52                   	push   edx
c0014cdd:	50                   	push   eax
c0014cde:	55                   	push   ebp
c0014cdf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014ce2:	83 c4 20             	add    esp,0x20
c0014ce5:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c0014cea:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014cf2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014cf6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014cfa:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0014cfe:	0f 84 05 03 00 00    	je     c0015009 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c0014d04:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0014d0b:	31 d2                	xor    edx,edx
c0014d0d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014d11:	c1 e8 03             	shr    eax,0x3
c0014d14:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0014d18:	51                   	push   ecx
c0014d19:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d1d:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0014d21:	52                   	push   edx
c0014d22:	50                   	push   eax
c0014d23:	55                   	push   ebp
c0014d24:	e8 81 6b ff ff       	call   c000b8aa <File::seek(unsigned long long)>
c0014d29:	5b                   	pop    ebx
c0014d2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d2e:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0014d35:	e8 7c 2d ff ff       	call   c0007ab6 <malloc>
c0014d3a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014d3d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014d41:	31 d2                	xor    edx,edx
c0014d43:	5e                   	pop    esi
c0014d44:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014d48:	50                   	push   eax
c0014d49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d4d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014d51:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0014d58:	52                   	push   edx
c0014d59:	50                   	push   eax
c0014d5a:	55                   	push   ebp
c0014d5b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014d5e:	83 c4 20             	add    esp,0x20
c0014d61:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014d69:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0014d6d:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c0014d71:	0f 8d 76 02 00 00    	jge    c0014fed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c0014d77:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0014d7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014d7f:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c0014d84:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0014d87:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014d8b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014d8f:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c0014d93:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d97:	c1 e8 08             	shr    eax,0x8
c0014d9a:	89 c6                	mov    esi,eax
c0014d9c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014da0:	c1 e6 04             	shl    esi,0x4
c0014da3:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0014da7:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0014daa:	85 db                	test   ebx,ebx
c0014dac:	0f 85 b3 00 00 00    	jne    c0014e65 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014db2:	83 ec 0c             	sub    esp,0xc
c0014db5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014db9:	03 06                	add    eax,DWORD PTR [esi]
c0014dbb:	50                   	push   eax
c0014dbc:	e8 40 f8 ff ff       	call   c0014601 <Thr::getAddressOfKernelSymbol(char const*)>
c0014dc1:	83 c4 10             	add    esp,0x10
c0014dc4:	89 c3                	mov    ebx,eax
c0014dc6:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c0014dcb:	85 c0                	test   eax,eax
c0014dcd:	0f 85 92 00 00 00    	jne    c0014e65 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014dd3:	83 ec 0c             	sub    esp,0xc
c0014dd6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014dda:	03 06                	add    eax,DWORD PTR [esi]
c0014ddc:	50                   	push   eax
c0014ddd:	e8 72 c6 ff ff       	call   c0011454 <KeResolveCompatibilitySymbol(char*)>
c0014de2:	83 c4 10             	add    esp,0x10
c0014de5:	89 c3                	mov    ebx,eax
c0014de7:	85 c0                	test   eax,eax
c0014de9:	75 7a                	jne    c0014e65 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014deb:	51                   	push   ecx
c0014dec:	51                   	push   ecx
c0014ded:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014df1:	03 06                	add    eax,DWORD PTR [esi]
c0014df3:	50                   	push   eax
c0014df4:	68 2b 21 02 c0       	push   0xc002212b
c0014df9:	e8 47 5b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014dfe:	58                   	pop    eax
c0014dff:	5a                   	pop    edx
c0014e00:	68 45 21 02 c0       	push   0xc0022145
c0014e05:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014e0c:	50                   	push   eax
c0014e0d:	e8 2e b8 fe ff       	call   c0000640 <strcpy>
c0014e12:	59                   	pop    ecx
c0014e13:	58                   	pop    eax
c0014e14:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014e18:	03 06                	add    eax,DWORD PTR [esi]
c0014e1a:	50                   	push   eax
c0014e1b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014e22:	50                   	push   eax
c0014e23:	e8 18 ba fe ff       	call   c0000840 <strcat>
c0014e28:	58                   	pop    eax
c0014e29:	5a                   	pop    edx
c0014e2a:	68 db 21 02 c0       	push   0xc00221db
c0014e2f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014e36:	50                   	push   eax
c0014e37:	e8 04 ba fe ff       	call   c0000840 <strcat>
c0014e3c:	83 c4 10             	add    esp,0x10
c0014e3f:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014e44:	0f 84 5d 01 00 00    	je     c0014fa7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014e4a:	83 ec 0c             	sub    esp,0xc
c0014e4d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014e54:	50                   	push   eax
c0014e55:	e8 0f c4 ff ff       	call   c0011269 <KePanic(char const*)>
c0014e5a:	83 c4 10             	add    esp,0x10
c0014e5d:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0014e61:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c0014e65:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0014e6a:	83 f8 01             	cmp    eax,0x1
c0014e6d:	0f 85 8f 00 00 00    	jne    c0014f02 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c0014e73:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0014e7a:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0014e7e:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0014e82:	01 ce                	add    esi,ecx
c0014e84:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0014e8c:	0f 94 c0             	sete   al
c0014e8f:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0014e97:	0f 94 c2             	sete   dl
c0014e9a:	09 c2                	or     edx,eax
c0014e9c:	8b 06                	mov    eax,DWORD PTR [esi]
c0014e9e:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0014ea3:	0f b6 d2             	movzx  edx,dl
c0014ea6:	74 41                	je     c0014ee9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c0014ea8:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c0014eab:	85 d2                	test   edx,edx
c0014ead:	75 15                	jne    c0014ec4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c0014eaf:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014eb3:	66 83 f8 0c          	cmp    ax,0xc
c0014eb7:	76 05                	jbe    c0014ebe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c0014eb9:	b8 0c 00 00 00       	mov    eax,0xc
c0014ebe:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0014ec2:	76 37                	jbe    c0014efb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014ec4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0014ec8:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014ecd:	0f 84 d4 00 00 00    	je     c0014fa7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014ed3:	83 ec 0c             	sub    esp,0xc
c0014ed6:	68 5c 21 02 c0       	push   0xc002215c
c0014edb:	e8 89 c3 ff ff       	call   c0011269 <KePanic(char const*)>
c0014ee0:	83 c4 10             	add    esp,0x10
c0014ee3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0014ee7:	eb 12                	jmp    c0014efb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014ee9:	01 c1                	add    ecx,eax
c0014eeb:	85 d2                	test   edx,edx
c0014eed:	75 0c                	jne    c0014efb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014eef:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014ef3:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0014ef7:	77 02                	ja     c0014efb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014ef9:	01 d9                	add    ecx,ebx
c0014efb:	89 0e                	mov    DWORD PTR [esi],ecx
c0014efd:	e9 e2 00 00 00       	jmp    c0014fe4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0014f02:	83 f8 02             	cmp    eax,0x2
c0014f05:	75 77                	jne    c0014f7e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c0014f07:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0014f0e:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c0014f12:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c0014f16:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0014f1e:	74 21                	je     c0014f41 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0014f20:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0014f28:	74 17                	je     c0014f41 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0014f2a:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c0014f2e:	b8 0a 00 00 00       	mov    eax,0xa
c0014f33:	83 fa 0e             	cmp    edx,0xe
c0014f36:	77 03                	ja     c0014f3b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c0014f38:	8d 42 fc             	lea    eax,[edx-0x4]
c0014f3b:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0014f3f:	76 17                	jbe    c0014f58 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c0014f41:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014f46:	74 5f                	je     c0014fa7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014f48:	83 ec 0c             	sub    esp,0xc
c0014f4b:	68 78 21 02 c0       	push   0xc0022178
c0014f50:	e8 14 c3 ff ff       	call   c0011269 <KePanic(char const*)>
c0014f55:	83 c4 10             	add    esp,0x10
c0014f58:	8b 06                	mov    eax,DWORD PTR [esi]
c0014f5a:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0014f5f:	74 13                	je     c0014f74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c0014f61:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014f65:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c0014f6c:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c0014f70:	01 d0                	add    eax,edx
c0014f72:	eb 04                	jmp    c0014f78 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0014f74:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0014f78:	01 c3                	add    ebx,eax
c0014f7a:	89 1e                	mov    DWORD PTR [esi],ebx
c0014f7c:	eb 66                	jmp    c0014fe4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0014f7e:	52                   	push   edx
c0014f7f:	52                   	push   edx
c0014f80:	50                   	push   eax
c0014f81:	68 94 21 02 c0       	push   0xc0022194
c0014f86:	e8 ba 59 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014f8b:	83 c4 10             	add    esp,0x10
c0014f8e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014f93:	74 12                	je     c0014fa7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014f95:	83 ec 0c             	sub    esp,0xc
c0014f98:	68 9f 21 02 c0       	push   0xc002219f
c0014f9d:	e8 c7 c2 ff ff       	call   c0011269 <KePanic(char const*)>
c0014fa2:	83 c4 10             	add    esp,0x10
c0014fa5:	eb 3d                	jmp    c0014fe4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0014fa7:	83 ec 0c             	sub    esp,0xc
c0014faa:	55                   	push   ebp
c0014fab:	e8 9a 68 ff ff       	call   c000b84a <File::close()>
c0014fb0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014fb3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014fb6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014fb9:	59                   	pop    ecx
c0014fba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014fbe:	e8 03 2b ff ff       	call   c0007ac6 <free>
c0014fc3:	5b                   	pop    ebx
c0014fc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014fc8:	e8 f9 2a ff ff       	call   c0007ac6 <free>
c0014fcd:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014fd0:	e8 f1 2a ff ff       	call   c0007ac6 <free>
c0014fd5:	5e                   	pop    esi
c0014fd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014fda:	e8 e7 2a ff ff       	call   c0007ac6 <free>
c0014fdf:	83 c4 10             	add    esp,0x10
c0014fe2:	eb 21                	jmp    c0015005 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014fe4:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0014fe8:	e9 7c fd ff ff       	jmp    c0014d69 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c0014fed:	83 ec 0c             	sub    esp,0xc
c0014ff0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014ff4:	e8 cd 2a ff ff       	call   c0007ac6 <free>
c0014ff9:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0014ffd:	83 c4 10             	add    esp,0x10
c0015000:	e9 f1 fc ff ff       	jmp    c0014cf6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c0015005:	31 c0                	xor    eax,eax
c0015007:	eb 33                	jmp    c001503c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c0015009:	83 ec 0c             	sub    esp,0xc
c001500c:	55                   	push   ebp
c001500d:	e8 38 68 ff ff       	call   c000b84a <File::close()>
c0015012:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015015:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015018:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001501b:	58                   	pop    eax
c001501c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015020:	e8 a1 2a ff ff       	call   c0007ac6 <free>
c0015025:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015028:	e8 99 2a ff ff       	call   c0007ac6 <free>
c001502d:	5a                   	pop    edx
c001502e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015032:	e8 8f 2a ff ff       	call   c0007ac6 <free>
c0015037:	83 c4 10             	add    esp,0x10
c001503a:	b0 01                	mov    al,0x1
c001503c:	81 c4 5c 03 00 00    	add    esp,0x35c
c0015042:	5b                   	pop    ebx
c0015043:	5e                   	pop    esi
c0015044:	5f                   	pop    edi
c0015045:	5d                   	pop    ebp
c0015046:	c3                   	ret    

c0015047 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0015047:	56                   	push   esi
c0015048:	31 d2                	xor    edx,edx
c001504a:	53                   	push   ebx
c001504b:	8b 1d 00 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028f00
c0015051:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015055:	39 d3                	cmp    ebx,edx
c0015057:	7e 1b                	jle    c0015074 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0015059:	8b 04 95 20 91 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6ee0]
c0015060:	39 c8                	cmp    eax,ecx
c0015062:	77 0d                	ja     c0015071 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0015064:	8b 34 95 20 8f 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd70e0]
c001506b:	01 c6                	add    esi,eax
c001506d:	39 ce                	cmp    esi,ecx
c001506f:	77 05                	ja     c0015076 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0015071:	42                   	inc    edx
c0015072:	eb e1                	jmp    c0015055 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0015074:	31 c0                	xor    eax,eax
c0015076:	5b                   	pop    ebx
c0015077:	5e                   	pop    esi
c0015078:	c3                   	ret    

c0015079 <Thr::getDriverNameFromAddress(unsigned long)>:
c0015079:	53                   	push   ebx
c001507a:	31 c0                	xor    eax,eax
c001507c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015080:	8b 1d 00 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028f00
c0015086:	39 c3                	cmp    ebx,eax
c0015088:	7e 22                	jle    c00150ac <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001508a:	8b 14 85 20 91 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6ee0]
c0015091:	39 ca                	cmp    edx,ecx
c0015093:	77 14                	ja     c00150a9 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015095:	03 14 85 20 8f 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd70e0]
c001509c:	39 ca                	cmp    edx,ecx
c001509e:	76 09                	jbe    c00150a9 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00150a0:	8b 04 85 20 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ce0]
c00150a7:	eb 05                	jmp    c00150ae <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00150a9:	40                   	inc    eax
c00150aa:	eb da                	jmp    c0015086 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00150ac:	31 c0                	xor    eax,eax
c00150ae:	5b                   	pop    ebx
c00150af:	c3                   	ret    

c00150b0 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00150b0:	53                   	push   ebx
c00150b1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00150b5:	53                   	push   ebx
c00150b6:	e8 8c ff ff ff       	call   c0015047 <Thr::getDriverBaseFromAddress(unsigned long)>
c00150bb:	5a                   	pop    edx
c00150bc:	31 d2                	xor    edx,edx
c00150be:	85 c0                	test   eax,eax
c00150c0:	74 04                	je     c00150c6 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00150c2:	89 da                	mov    edx,ebx
c00150c4:	29 c2                	sub    edx,eax
c00150c6:	89 d0                	mov    eax,edx
c00150c8:	5b                   	pop    ebx
c00150c9:	c3                   	ret    

c00150ca <Thr::loadDLL(char const*, bool)>:
c00150ca:	55                   	push   ebp
c00150cb:	57                   	push   edi
c00150cc:	56                   	push   esi
c00150cd:	53                   	push   ebx
c00150ce:	81 ec 34 01 00 00    	sub    esp,0x134
c00150d4:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00150db:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00150e2:	56                   	push   esi
c00150e3:	68 b7 21 02 c0       	push   0xc00221b7
c00150e8:	e8 58 58 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00150ed:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00150f4:	e8 bd 29 ff ff       	call   c0007ab6 <malloc>
c00150f9:	83 c4 0c             	add    esp,0xc
c00150fc:	89 c3                	mov    ebx,eax
c00150fe:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0015104:	56                   	push   esi
c0015105:	50                   	push   eax
c0015106:	e8 25 66 ff ff       	call   c000b730 <File::File(char const*, Process*)>
c001510b:	83 c4 10             	add    esp,0x10
c001510e:	85 db                	test   ebx,ebx
c0015110:	75 3c                	jne    c001514e <Thr::loadDLL(char const*, bool)+0x84>
c0015112:	89 f8                	mov    eax,edi
c0015114:	84 c0                	test   al,al
c0015116:	0f 84 d2 01 00 00    	je     c00152ee <Thr::loadDLL(char const*, bool)+0x224>
c001511c:	55                   	push   ebp
c001511d:	55                   	push   ebp
c001511e:	68 c8 21 02 c0       	push   0xc00221c8
c0015123:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0015127:	55                   	push   ebp
c0015128:	e8 13 b5 fe ff       	call   c0000640 <strcpy>
c001512d:	58                   	pop    eax
c001512e:	5a                   	pop    edx
c001512f:	56                   	push   esi
c0015130:	55                   	push   ebp
c0015131:	e8 0a b7 fe ff       	call   c0000840 <strcat>
c0015136:	59                   	pop    ecx
c0015137:	58                   	pop    eax
c0015138:	68 db 21 02 c0       	push   0xc00221db
c001513d:	55                   	push   ebp
c001513e:	e8 fd b6 fe ff       	call   c0000840 <strcat>
c0015143:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015146:	e8 1e c1 ff ff       	call   c0011269 <KePanic(char const*)>
c001514b:	83 c4 10             	add    esp,0x10
c001514e:	51                   	push   ecx
c001514f:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0015153:	50                   	push   eax
c0015154:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015158:	50                   	push   eax
c0015159:	53                   	push   ebx
c001515a:	e8 8f 69 ff ff       	call   c000baee <File::stat(unsigned long long*, bool*)>
c001515f:	83 c4 10             	add    esp,0x10
c0015162:	85 db                	test   ebx,ebx
c0015164:	74 0c                	je     c0015172 <Thr::loadDLL(char const*, bool)+0xa8>
c0015166:	83 ec 0c             	sub    esp,0xc
c0015169:	8b 03                	mov    eax,DWORD PTR [ebx]
c001516b:	53                   	push   ebx
c001516c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001516f:	83 c4 10             	add    esp,0x10
c0015172:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0015177:	75 0a                	jne    c0015183 <Thr::loadDLL(char const*, bool)+0xb9>
c0015179:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001517d:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0015181:	75 3c                	jne    c00151bf <Thr::loadDLL(char const*, bool)+0xf5>
c0015183:	89 f8                	mov    eax,edi
c0015185:	84 c0                	test   al,al
c0015187:	0f 84 49 01 00 00    	je     c00152d6 <Thr::loadDLL(char const*, bool)+0x20c>
c001518d:	51                   	push   ecx
c001518e:	51                   	push   ecx
c001518f:	68 c8 21 02 c0       	push   0xc00221c8
c0015194:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0015198:	53                   	push   ebx
c0015199:	e8 a2 b4 fe ff       	call   c0000640 <strcpy>
c001519e:	5d                   	pop    ebp
c001519f:	58                   	pop    eax
c00151a0:	56                   	push   esi
c00151a1:	53                   	push   ebx
c00151a2:	e8 99 b6 fe ff       	call   c0000840 <strcat>
c00151a7:	58                   	pop    eax
c00151a8:	5a                   	pop    edx
c00151a9:	68 db 21 02 c0       	push   0xc00221db
c00151ae:	53                   	push   ebx
c00151af:	e8 8c b6 fe ff       	call   c0000840 <strcat>
c00151b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00151b7:	e8 ad c0 ff ff       	call   c0011269 <KePanic(char const*)>
c00151bc:	83 c4 10             	add    esp,0x10
c00151bf:	52                   	push   edx
c00151c0:	6a 03                	push   0x3
c00151c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151c6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00151ca:	05 ff 0f 00 00       	add    eax,0xfff
c00151cf:	83 d2 00             	adc    edx,0x0
c00151d2:	0f ac d0 0c          	shrd   eax,edx,0xc
c00151d6:	50                   	push   eax
c00151d7:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c00151dd:	e8 42 4c ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c00151e2:	59                   	pop    ecx
c00151e3:	89 c3                	mov    ebx,eax
c00151e5:	5d                   	pop    ebp
c00151e6:	50                   	push   eax
c00151e7:	68 32 08 02 c0       	push   0xc0020832
c00151ec:	e8 54 57 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00151f1:	89 34 24             	mov    DWORD PTR [esp],esi
c00151f4:	e8 77 b3 fe ff       	call   c0000570 <strlen>
c00151f9:	8b 2d 00 8f 02 c0    	mov    ebp,DWORD PTR ds:0xc0028f00
c00151ff:	40                   	inc    eax
c0015200:	89 04 24             	mov    DWORD PTR [esp],eax
c0015203:	e8 ae 28 ff ff       	call   c0007ab6 <malloc>
c0015208:	89 04 ad 20 93 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd6ce0],eax
c001520f:	58                   	pop    eax
c0015210:	a1 00 8f 02 c0       	mov    eax,ds:0xc0028f00
c0015215:	5a                   	pop    edx
c0015216:	56                   	push   esi
c0015217:	ff 34 85 20 93 02 c0 	push   DWORD PTR [eax*4-0x3ffd6ce0]
c001521e:	e8 1d b4 fe ff       	call   c0000640 <strcpy>
c0015223:	a1 00 8f 02 c0       	mov    eax,ds:0xc0028f00
c0015228:	8d 50 01             	lea    edx,[eax+0x1]
c001522b:	89 1c 85 20 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ee0],ebx
c0015232:	89 15 00 8f 02 c0    	mov    DWORD PTR ds:0xc0028f00,edx
c0015238:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001523c:	83 c4 0c             	add    esp,0xc
c001523f:	89 14 85 20 8f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd70e0],edx
c0015246:	6a 01                	push   0x1
c0015248:	53                   	push   ebx
c0015249:	56                   	push   esi
c001524a:	e8 bf f6 ff ff       	call   c001490e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001524f:	83 c4 10             	add    esp,0x10
c0015252:	0f b6 c0             	movzx  eax,al
c0015255:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015259:	85 c0                	test   eax,eax
c001525b:	0f 85 89 00 00 00    	jne    c00152ea <Thr::loadDLL(char const*, bool)+0x220>
c0015261:	89 f8                	mov    eax,edi
c0015263:	84 c0                	test   al,al
c0015265:	74 73                	je     c00152da <Thr::loadDLL(char const*, bool)+0x210>
c0015267:	83 ec 0c             	sub    esp,0xc
c001526a:	68 dd 21 02 c0       	push   0xc00221dd
c001526f:	e8 f5 bf ff ff       	call   c0011269 <KePanic(char const*)>
c0015274:	83 c4 10             	add    esp,0x10
c0015277:	eb 61                	jmp    c00152da <Thr::loadDLL(char const*, bool)+0x210>
c0015279:	50                   	push   eax
c001527a:	50                   	push   eax
c001527b:	89 e8                	mov    eax,ebp
c001527d:	c1 e0 0c             	shl    eax,0xc
c0015280:	01 d8                	add    eax,ebx
c0015282:	50                   	push   eax
c0015283:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0015289:	e8 7e 46 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c001528e:	83 c4 10             	add    esp,0x10
c0015291:	8b 00                	mov    eax,DWORD PTR [eax]
c0015293:	a8 60                	test   al,0x60
c0015295:	75 11                	jne    c00152a8 <Thr::loadDLL(char const*, bool)+0x1de>
c0015297:	83 ec 0c             	sub    esp,0xc
c001529a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001529f:	50                   	push   eax
c00152a0:	e8 b1 2a ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c00152a5:	83 c4 10             	add    esp,0x10
c00152a8:	45                   	inc    ebp
c00152a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00152ad:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00152b1:	05 ff 0f 00 00       	add    eax,0xfff
c00152b6:	bf 00 00 00 00       	mov    edi,0x0
c00152bb:	83 d2 00             	adc    edx,0x0
c00152be:	0f ac d0 0c          	shrd   eax,edx,0xc
c00152c2:	c1 ea 0c             	shr    edx,0xc
c00152c5:	39 c5                	cmp    ebp,eax
c00152c7:	89 d1                	mov    ecx,edx
c00152c9:	89 f8                	mov    eax,edi
c00152cb:	19 c8                	sbb    eax,ecx
c00152cd:	72 aa                	jb     c0015279 <Thr::loadDLL(char const*, bool)+0x1af>
c00152cf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00152d4:	75 18                	jne    c00152ee <Thr::loadDLL(char const*, bool)+0x224>
c00152d6:	31 db                	xor    ebx,ebx
c00152d8:	eb 14                	jmp    c00152ee <Thr::loadDLL(char const*, bool)+0x224>
c00152da:	83 ec 0c             	sub    esp,0xc
c00152dd:	68 fc 21 02 c0       	push   0xc00221fc
c00152e2:	e8 82 bf ff ff       	call   c0011269 <KePanic(char const*)>
c00152e7:	83 c4 10             	add    esp,0x10
c00152ea:	31 ed                	xor    ebp,ebp
c00152ec:	eb bb                	jmp    c00152a9 <Thr::loadDLL(char const*, bool)+0x1df>
c00152ee:	81 c4 2c 01 00 00    	add    esp,0x12c
c00152f4:	89 d8                	mov    eax,ebx
c00152f6:	5b                   	pop    ebx
c00152f7:	5e                   	pop    esi
c00152f8:	5f                   	pop    edi
c00152f9:	5d                   	pop    ebp
c00152fa:	c3                   	ret    

c00152fb <Thr::executeDLL(unsigned long, void*)>:
c00152fb:	56                   	push   esi
c00152fc:	53                   	push   ebx
c00152fd:	52                   	push   edx
c00152fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015302:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015306:	85 db                	test   ebx,ebx
c0015308:	75 10                	jne    c001531a <Thr::executeDLL(unsigned long, void*)+0x1f>
c001530a:	83 ec 0c             	sub    esp,0xc
c001530d:	68 18 22 02 c0       	push   0xc0022218
c0015312:	e8 52 bf ff ff       	call   c0011269 <KePanic(char const*)>
c0015317:	83 c4 10             	add    esp,0x10
c001531a:	50                   	push   eax
c001531b:	50                   	push   eax
c001531c:	53                   	push   ebx
c001531d:	68 42 22 02 c0       	push   0xc0022242
c0015322:	e8 1e 56 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015327:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001532b:	89 d8                	mov    eax,ebx
c001532d:	83 c4 14             	add    esp,0x14
c0015330:	5b                   	pop    ebx
c0015331:	5e                   	pop    esi
c0015332:	ff e0                	jmp    eax

c0015334 <userModeEntryPoint(void*)>:
c0015334:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015339:	83 e8 01             	sub    eax,0x1
c001533c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015341:	75 01                	jne    c0015344 <userModeEntryPoint(void*)+0x10>
c0015343:	fb                   	sti    
c0015344:	fb                   	sti    
c0015345:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001534a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001534d:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0015353:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015357:	e9 e3 ae fe ff       	jmp    c000023f <goToUsermode>

c001535c <changeTSS>:
c001535c:	83 ec 14             	sub    esp,0x14
c001535f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015364:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015367:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001536c:	c1 e2 15             	shl    edx,0x15
c001536f:	29 d0                	sub    eax,edx
c0015371:	50                   	push   eax
c0015372:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0015377:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001537d:	05 7c 11 00 00       	add    eax,0x117c
c0015382:	50                   	push   eax
c0015383:	e8 cc 3b ff ff       	call   c0008f54 <TSS::setESP(unsigned long)>
c0015388:	83 c4 1c             	add    esp,0x1c
c001538b:	c3                   	ret    

c001538c <switchToThread(ThreadControlBlock*)>:
c001538c:	57                   	push   edi
c001538d:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0015393:	56                   	push   esi
c0015394:	85 c9                	test   ecx,ecx
c0015396:	53                   	push   ebx
c0015397:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001539b:	0f 85 8b 00 00 00    	jne    c001542c <switchToThread(ThreadControlBlock*)+0xa0>
c00153a1:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c00153a5:	81 fa ff 00 00 00    	cmp    edx,0xff
c00153ab:	74 7b                	je     c0015428 <switchToThread(ThreadControlBlock*)+0x9c>
c00153ad:	b8 00 04 00 00       	mov    eax,0x400
c00153b2:	29 d0                	sub    eax,edx
c00153b4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00153b7:	d1 f8                	sar    eax,1
c00153b9:	01 d0                	add    eax,edx
c00153bb:	90                   	nop
c00153bc:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00153bf:	e8 1e 28 00 00       	call   c0017be2 <HalQueryPerformanceCounter()>
c00153c4:	a3 08 97 02 c0       	mov    ds:0xc0029708,eax
c00153c9:	89 15 0c 97 02 c0    	mov    DWORD PTR ds:0xc002970c,edx
c00153cf:	89 c6                	mov    esi,eax
c00153d1:	89 d7                	mov    edi,edx
c00153d3:	2b 35 f8 96 02 c0    	sub    esi,DWORD PTR ds:0xc00296f8
c00153d9:	a3 f8 96 02 c0       	mov    ds:0xc00296f8,eax
c00153de:	1b 3d fc 96 02 c0    	sbb    edi,DWORD PTR ds:0xc00296fc
c00153e4:	89 35 00 97 02 c0    	mov    DWORD PTR ds:0xc0029700,esi
c00153ea:	89 3d 04 97 02 c0    	mov    DWORD PTR ds:0xc0029704,edi
c00153f0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00153f6:	89 15 fc 96 02 c0    	mov    DWORD PTR ds:0xc00296fc,edx
c00153fc:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00153ff:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0015402:	01 c6                	add    esi,eax
c0015404:	11 d7                	adc    edi,edx
c0015406:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0015409:	83 ec 0c             	sub    esp,0xc
c001540c:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c001540f:	53                   	push   ebx
c0015410:	e8 62 ae fe ff       	call   c0000277 <switchToThreadASM>
c0015415:	0f 20 c0             	mov    eax,cr0
c0015418:	83 c8 08             	or     eax,0x8
c001541b:	0f 22 c0             	mov    cr0,eax
c001541e:	83 c4 10             	add    esp,0x10
c0015421:	5b                   	pop    ebx
c0015422:	5e                   	pop    esi
c0015423:	5f                   	pop    edi
c0015424:	c3                   	ret    
c0015425:	8d 76 00             	lea    esi,[esi+0x0]
c0015428:	31 c0                	xor    eax,eax
c001542a:	eb 90                	jmp    c00153bc <switchToThread(ThreadControlBlock*)+0x30>
c001542c:	5b                   	pop    ebx
c001542d:	c7 05 c0 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x1
c0015437:	5e                   	pop    esi
c0015438:	5f                   	pop    edi
c0015439:	c3                   	ret    
c001543a:	66 90                	xchg   ax,ax

c001543c <Process::addArgs(char**)>:
c001543c:	57                   	push   edi
c001543d:	56                   	push   esi
c001543e:	53                   	push   ebx
c001543f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015443:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0015447:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0015451:	85 ff                	test   edi,edi
c0015453:	74 4f                	je     c00154a4 <Process::addArgs(char**)+0x68>
c0015455:	8b 07                	mov    eax,DWORD PTR [edi]
c0015457:	85 c0                	test   eax,eax
c0015459:	74 49                	je     c00154a4 <Process::addArgs(char**)+0x68>
c001545b:	31 db                	xor    ebx,ebx
c001545d:	8d 76 00             	lea    esi,[esi+0x0]
c0015460:	83 ec 0c             	sub    esp,0xc
c0015463:	50                   	push   eax
c0015464:	e8 07 b1 fe ff       	call   c0000570 <strlen>
c0015469:	83 c0 01             	add    eax,0x1
c001546c:	89 04 24             	mov    DWORD PTR [esp],eax
c001546f:	e8 42 26 ff ff       	call   c0007ab6 <malloc>
c0015474:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c001547b:	5a                   	pop    edx
c001547c:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c001547f:	59                   	pop    ecx
c0015480:	83 c3 01             	add    ebx,0x1
c0015483:	52                   	push   edx
c0015484:	50                   	push   eax
c0015485:	e8 b6 b1 fe ff       	call   c0000640 <strcpy>
c001548a:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c0015490:	83 c4 10             	add    esp,0x10
c0015493:	83 c1 01             	add    ecx,0x1
c0015496:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c001549c:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001549f:	85 c0                	test   eax,eax
c00154a1:	75 bd                	jne    c0015460 <Process::addArgs(char**)+0x24>
c00154a3:	90                   	nop
c00154a4:	5b                   	pop    ebx
c00154a5:	5e                   	pop    esi
c00154a6:	5f                   	pop    edi
c00154a7:	c3                   	ret    

c00154a8 <Process::Process(char const*, Process*, char**)>:
c00154a8:	56                   	push   esi
c00154a9:	53                   	push   ebx
c00154aa:	83 ec 14             	sub    esp,0x14
c00154ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154b1:	05 0c 02 00 00       	add    eax,0x20c
c00154b6:	bb 07 00 00 00       	mov    ebx,0x7
c00154bb:	89 c6                	mov    esi,eax
c00154bd:	8d 76 00             	lea    esi,[esi+0x0]
c00154c0:	85 db                	test   ebx,ebx
c00154c2:	78 14                	js     c00154d8 <Process::Process(char const*, Process*, char**)+0x30>
c00154c4:	83 ec 0c             	sub    esp,0xc
c00154c7:	56                   	push   esi
c00154c8:	e8 eb a5 00 00       	call   c001fab8 <ThreadControlBlock::ThreadControlBlock()>
c00154cd:	83 c4 10             	add    esp,0x10
c00154d0:	83 c6 5f             	add    esi,0x5f
c00154d3:	83 eb 01             	sub    ebx,0x1
c00154d6:	eb e8                	jmp    c00154c0 <Process::Process(char const*, Process*, char**)+0x18>
c00154d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154dc:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00154e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154e7:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00154ee:	83 ec 0c             	sub    esp,0xc
c00154f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00154f5:	e8 64 bb ff ff       	call   c001105e <KeNewProcessEnv(Process*)>
c00154fa:	83 c4 10             	add    esp,0x10
c00154fd:	89 c2                	mov    edx,eax
c00154ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015503:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015509:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001550d:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015516:	a1 60 34 02 c0       	mov    eax,ds:0xc0023460
c001551b:	8d 50 01             	lea    edx,[eax+0x1]
c001551e:	89 15 60 34 02 c0    	mov    DWORD PTR ds:0xc0023460,edx
c0015524:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015528:	89 02                	mov    DWORD PTR [edx],eax
c001552a:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0015532:	83 ec 0c             	sub    esp,0xc
c0015535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015539:	e8 78 25 ff ff       	call   c0007ab6 <malloc>
c001553e:	83 c4 10             	add    esp,0x10
c0015541:	89 c3                	mov    ebx,eax
c0015543:	83 ec 08             	sub    esp,0x8
c0015546:	6a 00                	push   0x0
c0015548:	53                   	push   ebx
c0015549:	e8 1a 4b ff ff       	call   c000a068 <VAS::VAS(bool)>
c001554e:	83 c4 10             	add    esp,0x10
c0015551:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015555:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c001555b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001555f:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015569:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001556d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015571:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015577:	e8 06 c1 ff ff       	call   c0011682 <KeInitSignals()>
c001557c:	89 c2                	mov    edx,eax
c001557e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015582:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015588:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001558c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015592:	85 c0                	test   eax,eax
c0015594:	74 42                	je     c00155d8 <Process::Process(char const*, Process*, char**)+0x130>
c0015596:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001559a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00155a0:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00155a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155aa:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00155b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155b4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00155ba:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00155c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155c4:	05 0c 01 00 00       	add    eax,0x10c
c00155c9:	83 ec 08             	sub    esp,0x8
c00155cc:	52                   	push   edx
c00155cd:	50                   	push   eax
c00155ce:	e8 6d b0 fe ff       	call   c0000640 <strcpy>
c00155d3:	83 c4 10             	add    esp,0x10
c00155d6:	eb 64                	jmp    c001563c <Process::Process(char const*, Process*, char**)+0x194>
c00155d8:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c00155e0:	83 ec 0c             	sub    esp,0xc
c00155e3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00155e7:	e8 ca 24 ff ff       	call   c0007ab6 <malloc>
c00155ec:	83 c4 10             	add    esp,0x10
c00155ef:	89 c3                	mov    ebx,eax
c00155f1:	83 ec 08             	sub    esp,0x8
c00155f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155f8:	53                   	push   ebx
c00155f9:	e8 68 36 ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c00155fe:	83 c4 10             	add    esp,0x10
c0015601:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015605:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001560b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001560f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015615:	83 ec 0c             	sub    esp,0xc
c0015618:	50                   	push   eax
c0015619:	e8 e6 2e ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c001561e:	83 c4 10             	add    esp,0x10
c0015621:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015625:	05 0c 01 00 00       	add    eax,0x10c
c001562a:	83 ec 08             	sub    esp,0x8
c001562d:	68 61 22 02 c0       	push   0xc0022261
c0015632:	50                   	push   eax
c0015633:	e8 08 b0 fe ff       	call   c0000640 <strcpy>
c0015638:	83 c4 10             	add    esp,0x10
c001563b:	90                   	nop
c001563c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015640:	83 c0 0c             	add    eax,0xc
c0015643:	83 ec 08             	sub    esp,0x8
c0015646:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001564a:	50                   	push   eax
c001564b:	e8 f0 af fe ff       	call   c0000640 <strcpy>
c0015650:	83 c4 10             	add    esp,0x10
c0015653:	83 ec 08             	sub    esp,0x8
c0015656:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001565a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001565e:	e8 d9 fd ff ff       	call   c001543c <Process::addArgs(char**)>
c0015663:	83 c4 10             	add    esp,0x10
c0015666:	83 ec 08             	sub    esp,0x8
c0015669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001566d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015671:	e8 66 ed ff ff       	call   c00143dc <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015676:	83 c4 10             	add    esp,0x10
c0015679:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001567d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015681:	83 f0 01             	xor    eax,0x1
c0015684:	88 c2                	mov    dl,al
c0015686:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001568a:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015690:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015695:	83 ec 04             	sub    esp,0x4
c0015698:	50                   	push   eax
c0015699:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001569d:	68 b8 22 02 c0       	push   0xc00222b8
c00156a2:	e8 9e 52 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00156a7:	83 c4 10             	add    esp,0x10
c00156aa:	90                   	nop
c00156ab:	83 c4 14             	add    esp,0x14
c00156ae:	5b                   	pop    ebx
c00156af:	5e                   	pop    esi
c00156b0:	c3                   	ret    
c00156b1:	90                   	nop
c00156b2:	66 90                	xchg   ax,ax

c00156b4 <Process::Process(bool, char const*, Process*, char**)>:
c00156b4:	56                   	push   esi
c00156b5:	53                   	push   ebx
c00156b6:	83 ec 24             	sub    esp,0x24
c00156b9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00156bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00156c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156c5:	05 0c 02 00 00       	add    eax,0x20c
c00156ca:	bb 07 00 00 00       	mov    ebx,0x7
c00156cf:	89 c6                	mov    esi,eax
c00156d1:	8d 76 00             	lea    esi,[esi+0x0]
c00156d4:	85 db                	test   ebx,ebx
c00156d6:	78 14                	js     c00156ec <Process::Process(bool, char const*, Process*, char**)+0x38>
c00156d8:	83 ec 0c             	sub    esp,0xc
c00156db:	56                   	push   esi
c00156dc:	e8 d7 a3 00 00       	call   c001fab8 <ThreadControlBlock::ThreadControlBlock()>
c00156e1:	83 c4 10             	add    esp,0x10
c00156e4:	83 c6 5f             	add    esi,0x5f
c00156e7:	83 eb 01             	sub    ebx,0x1
c00156ea:	eb e8                	jmp    c00156d4 <Process::Process(bool, char const*, Process*, char**)+0x20>
c00156ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156f0:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00156f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156fb:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015702:	83 ec 0c             	sub    esp,0xc
c0015705:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015709:	e8 50 b9 ff ff       	call   c001105e <KeNewProcessEnv(Process*)>
c001570e:	83 c4 10             	add    esp,0x10
c0015711:	89 c2                	mov    edx,eax
c0015713:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015717:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001571d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015721:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001572a:	a1 60 34 02 c0       	mov    eax,ds:0xc0023460
c001572f:	8d 50 01             	lea    edx,[eax+0x1]
c0015732:	89 15 60 34 02 c0    	mov    DWORD PTR ds:0xc0023460,edx
c0015738:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001573c:	89 02                	mov    DWORD PTR [edx],eax
c001573e:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0015746:	83 ec 0c             	sub    esp,0xc
c0015749:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001574d:	e8 64 23 ff ff       	call   c0007ab6 <malloc>
c0015752:	83 c4 10             	add    esp,0x10
c0015755:	89 c3                	mov    ebx,eax
c0015757:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001575c:	83 ec 08             	sub    esp,0x8
c001575f:	50                   	push   eax
c0015760:	53                   	push   ebx
c0015761:	e8 02 49 ff ff       	call   c000a068 <VAS::VAS(bool)>
c0015766:	83 c4 10             	add    esp,0x10
c0015769:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001576d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015773:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015777:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015781:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015785:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015789:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001578f:	e8 ee be ff ff       	call   c0011682 <KeInitSignals()>
c0015794:	89 c2                	mov    edx,eax
c0015796:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001579a:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00157a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157a4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00157aa:	85 c0                	test   eax,eax
c00157ac:	74 42                	je     c00157f0 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c00157ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157b2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00157b8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00157be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157c2:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00157c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157cc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00157d2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00157d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157dc:	05 0c 01 00 00       	add    eax,0x10c
c00157e1:	83 ec 08             	sub    esp,0x8
c00157e4:	52                   	push   edx
c00157e5:	50                   	push   eax
c00157e6:	e8 55 ae fe ff       	call   c0000640 <strcpy>
c00157eb:	83 c4 10             	add    esp,0x10
c00157ee:	eb 64                	jmp    c0015854 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c00157f0:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c00157f8:	83 ec 0c             	sub    esp,0xc
c00157fb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00157ff:	e8 b2 22 ff ff       	call   c0007ab6 <malloc>
c0015804:	83 c4 10             	add    esp,0x10
c0015807:	89 c3                	mov    ebx,eax
c0015809:	83 ec 08             	sub    esp,0x8
c001580c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015810:	53                   	push   ebx
c0015811:	e8 50 34 ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c0015816:	83 c4 10             	add    esp,0x10
c0015819:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001581d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015823:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015827:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001582d:	83 ec 0c             	sub    esp,0xc
c0015830:	50                   	push   eax
c0015831:	e8 ce 2c ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c0015836:	83 c4 10             	add    esp,0x10
c0015839:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001583d:	05 0c 01 00 00       	add    eax,0x10c
c0015842:	83 ec 08             	sub    esp,0x8
c0015845:	68 61 22 02 c0       	push   0xc0022261
c001584a:	50                   	push   eax
c001584b:	e8 f0 ad fe ff       	call   c0000640 <strcpy>
c0015850:	83 c4 10             	add    esp,0x10
c0015853:	90                   	nop
c0015854:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015858:	83 c0 0c             	add    eax,0xc
c001585b:	83 ec 08             	sub    esp,0x8
c001585e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015862:	50                   	push   eax
c0015863:	e8 d8 ad fe ff       	call   c0000640 <strcpy>
c0015868:	83 c4 10             	add    esp,0x10
c001586b:	83 ec 08             	sub    esp,0x8
c001586e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015872:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015876:	e8 c1 fb ff ff       	call   c001543c <Process::addArgs(char**)>
c001587b:	83 c4 10             	add    esp,0x10
c001587e:	90                   	nop
c001587f:	83 c4 24             	add    esp,0x24
c0015882:	5b                   	pop    ebx
c0015883:	5e                   	pop    esi
c0015884:	c3                   	ret    
c0015885:	8d 76 00             	lea    esi,[esi+0x0]

c0015888 <taskStartupFunction>:
c0015888:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001588d:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015890:	c3                   	ret    
c0015891:	90                   	nop
c0015892:	66 90                	xchg   ax,ax

c0015894 <Semaphore::Semaphore(int)>:
c0015894:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015898:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001589c:	89 10                	mov    DWORD PTR [eax],edx
c001589e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00158a2:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00158a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00158ad:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00158b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00158b8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00158bf:	90                   	nop
c00158c0:	c3                   	ret    
c00158c1:	90                   	nop
c00158c2:	66 90                	xchg   ax,ax

c00158c4 <Mutex::Mutex()>:
c00158c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00158c8:	6a 01                	push   0x1
c00158ca:	50                   	push   eax
c00158cb:	e8 c4 ff ff ff       	call   c0015894 <Semaphore::Semaphore(int)>
c00158d0:	83 c4 08             	add    esp,0x8
c00158d3:	90                   	nop
c00158d4:	c3                   	ret    
c00158d5:	90                   	nop
c00158d6:	66 90                	xchg   ax,ax

c00158d8 <Process::createThread(void (*)(void*), void*, int)>:
c00158d8:	57                   	push   edi
c00158d9:	31 c9                	xor    ecx,ecx
c00158db:	56                   	push   esi
c00158dc:	53                   	push   ebx
c00158dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00158e1:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00158e8:	89 f2                	mov    edx,esi
c00158ea:	66 90                	xchg   ax,ax
c00158ec:	0f b7 c2             	movzx  eax,dx
c00158ef:	80 e2 01             	and    dl,0x1
c00158f2:	74 14                	je     c0015908 <Process::createThread(void (*)(void*), void*, int)+0x30>
c00158f4:	d1 f8                	sar    eax,1
c00158f6:	83 c1 01             	add    ecx,0x1
c00158f9:	89 c2                	mov    edx,eax
c00158fb:	83 f9 10             	cmp    ecx,0x10
c00158fe:	75 ec                	jne    c00158ec <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015900:	31 db                	xor    ebx,ebx
c0015902:	89 d8                	mov    eax,ebx
c0015904:	5b                   	pop    ebx
c0015905:	5e                   	pop    esi
c0015906:	5f                   	pop    edi
c0015907:	c3                   	ret    
c0015908:	b8 01 00 00 00       	mov    eax,0x1
c001590d:	d3 e0                	shl    eax,cl
c001590f:	09 c6                	or     esi,eax
c0015911:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015914:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c001591b:	01 c0                	add    eax,eax
c001591d:	01 c8                	add    eax,ecx
c001591f:	8d 04 80             	lea    eax,[eax+eax*4]
c0015922:	01 d8                	add    eax,ebx
c0015924:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c001592b:	75 0b                	jne    c0015938 <Process::createThread(void (*)(void*), void*, int)+0x60>
c001592d:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015937:	90                   	nop
c0015938:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001593e:	83 ec 0c             	sub    esp,0xc
c0015941:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015944:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015947:	01 c0                	add    eax,eax
c0015949:	01 c8                	add    eax,ecx
c001594b:	8d 3c 80             	lea    edi,[eax+eax*4]
c001594e:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0015951:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015957:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c001595d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015961:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015967:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c001596d:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015973:	89 ca                	mov    edx,ecx
c0015975:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c001597c:	f7 da                	neg    edx
c001597e:	c1 e2 15             	shl    edx,0x15
c0015981:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015987:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001598d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015991:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001599b:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00159a1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00159a5:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00159ab:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00159b5:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00159bf:	68 00 01 00 00       	push   0x100
c00159c4:	e8 ed 20 ff ff       	call   c0007ab6 <malloc>
c00159c9:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00159cc:	58                   	pop    eax
c00159cd:	5a                   	pop    edx
c00159ce:	53                   	push   ebx
c00159cf:	68 e4 96 02 c0       	push   0xc00296e4
c00159d4:	e8 77 9e 00 00       	call   c001f850 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00159d9:	83 c4 10             	add    esp,0x10
c00159dc:	89 d8                	mov    eax,ebx
c00159de:	5b                   	pop    ebx
c00159df:	5e                   	pop    esi
c00159e0:	5f                   	pop    edi
c00159e1:	c3                   	ret    
c00159e2:	66 90                	xchg   ax,ax

c00159e4 <Process::createUserThread()>:
c00159e4:	83 ec 0c             	sub    esp,0xc
c00159e7:	68 80 00 00 00       	push   0x80
c00159ec:	6a 00                	push   0x0
c00159ee:	68 34 53 01 c0       	push   0xc0015334
c00159f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00159f7:	50                   	push   eax
c00159f8:	e8 db fe ff ff       	call   c00158d8 <Process::createThread(void (*)(void*), void*, int)>
c00159fd:	83 c4 1c             	add    esp,0x1c
c0015a00:	c3                   	ret    
c0015a01:	8d 76 00             	lea    esi,[esi+0x0]

c0015a04 <setupMultitasking(void (*)())>:
c0015a04:	56                   	push   esi
c0015a05:	53                   	push   ebx
c0015a06:	83 ec 04             	sub    esp,0x4
c0015a09:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015a0d:	eb 11                	jmp    c0015a20 <setupMultitasking(void (*)())+0x1c>
c0015a0f:	90                   	nop
c0015a10:	83 ec 0c             	sub    esp,0xc
c0015a13:	68 e4 96 02 c0       	push   0xc00296e4
c0015a18:	e8 77 9d 00 00       	call   c001f794 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015a1d:	83 c4 10             	add    esp,0x10
c0015a20:	83 ec 0c             	sub    esp,0xc
c0015a23:	68 e4 96 02 c0       	push   0xc00296e4
c0015a28:	e8 43 9d 00 00       	call   c001f770 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015a2d:	83 c4 10             	add    esp,0x10
c0015a30:	84 c0                	test   al,al
c0015a32:	74 dc                	je     c0015a10 <setupMultitasking(void (*)())+0xc>
c0015a34:	83 ec 0c             	sub    esp,0xc
c0015a37:	68 24 07 00 00       	push   0x724
c0015a3c:	e8 75 20 ff ff       	call   c0007ab6 <malloc>
c0015a41:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015a48:	89 c3                	mov    ebx,eax
c0015a4a:	6a 00                	push   0x0
c0015a4c:	68 65 22 02 c0       	push   0xc0022265
c0015a51:	6a 01                	push   0x1
c0015a53:	50                   	push   eax
c0015a54:	e8 5b fc ff ff       	call   c00156b4 <Process::Process(bool, char const*, Process*, char**)>
c0015a59:	83 c4 14             	add    esp,0x14
c0015a5c:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0015a62:	89 1d f0 96 02 c0    	mov    DWORD PTR ds:0xc00296f0,ebx
c0015a68:	50                   	push   eax
c0015a69:	e8 eb 2c ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0015a6e:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0015a75:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015a7f:	83 c8 01             	or     eax,0x1
c0015a82:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015a89:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015a8f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015a92:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015a9c:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0015aa2:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0015aa8:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015ab2:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015abc:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0015ac6:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015acc:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015ad6:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015adc:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0015ae6:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015aed:	e8 c4 1f ff ff       	call   c0007ab6 <malloc>
c0015af2:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0015af8:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015afe:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015b04:	5a                   	pop    edx
c0015b05:	59                   	pop    ecx
c0015b06:	68 61 22 02 c0       	push   0xc0022261
c0015b0b:	50                   	push   eax
c0015b0c:	e8 2f ab fe ff       	call   c0000640 <strcpy>
c0015b11:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015b18:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015b1c:	83 c4 14             	add    esp,0x14
c0015b1f:	5b                   	pop    ebx
c0015b20:	5e                   	pop    esi
c0015b21:	e9 43 a7 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0015b26:	66 90                	xchg   ax,ax

c0015b28 <schedule()>:
c0015b28:	8b 15 c4 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c4
c0015b2e:	85 d2                	test   edx,edx
c0015b30:	74 0e                	je     c0015b40 <schedule()+0x18>
c0015b32:	c7 05 c0 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x1
c0015b3c:	c3                   	ret    
c0015b3d:	8d 76 00             	lea    esi,[esi+0x0]
c0015b40:	53                   	push   ebx
c0015b41:	83 ec 14             	sub    esp,0x14
c0015b44:	68 e4 96 02 c0       	push   0xc00296e4
c0015b49:	e8 22 9c 00 00       	call   c001f770 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015b4e:	83 c4 10             	add    esp,0x10
c0015b51:	84 c0                	test   al,al
c0015b53:	75 3f                	jne    c0015b94 <schedule()+0x6c>
c0015b55:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b5a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015b5d:	83 fa 01             	cmp    edx,0x1
c0015b60:	74 3a                	je     c0015b9c <schedule()+0x74>
c0015b62:	66 90                	xchg   ax,ax
c0015b64:	83 ec 0c             	sub    esp,0xc
c0015b67:	68 e4 96 02 c0       	push   0xc00296e4
c0015b6c:	e8 1b 9c 00 00       	call   c001f78c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015b71:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0015b78:	89 c3                	mov    ebx,eax
c0015b7a:	e8 15 9c 00 00       	call   c001f794 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015b7f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0015b86:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015b89:	e8 fe f7 ff ff       	call   c001538c <switchToThread(ThreadControlBlock*)>
c0015b8e:	83 c4 10             	add    esp,0x10
c0015b91:	8d 76 00             	lea    esi,[esi+0x0]
c0015b94:	83 c4 08             	add    esp,0x8
c0015b97:	5b                   	pop    ebx
c0015b98:	c3                   	ret    
c0015b99:	8d 76 00             	lea    esi,[esi+0x0]
c0015b9c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015ba3:	83 ec 08             	sub    esp,0x8
c0015ba6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015bab:	50                   	push   eax
c0015bac:	68 e4 96 02 c0       	push   0xc00296e4
c0015bb1:	e8 9a 9c 00 00       	call   c001f850 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015bb6:	83 c4 10             	add    esp,0x10
c0015bb9:	eb a9                	jmp    c0015b64 <schedule()+0x3c>
c0015bbb:	90                   	nop

c0015bbc <Semaphore::tryAcquire()>:
c0015bbc:	53                   	push   ebx
c0015bbd:	83 ec 08             	sub    esp,0x8
c0015bc0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015bc4:	fa                   	cli    
c0015bc5:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015bca:	8d 50 01             	lea    edx,[eax+0x1]
c0015bcd:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015bd3:	8b 15 c4 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c4
c0015bd9:	8d 5a 01             	lea    ebx,[edx+0x1]
c0015bdc:	89 1d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ebx
c0015be2:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0015be5:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0015be7:	7c 33                	jl     c0015c1c <Semaphore::tryAcquire()+0x60>
c0015be9:	89 15 c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,edx
c0015bef:	85 d2                	test   edx,edx
c0015bf1:	75 0d                	jne    c0015c00 <Semaphore::tryAcquire()+0x44>
c0015bf3:	8b 15 c0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c0
c0015bf9:	85 d2                	test   edx,edx
c0015bfb:	75 6f                	jne    c0015c6c <Semaphore::tryAcquire()+0xb0>
c0015bfd:	8d 76 00             	lea    esi,[esi+0x0]
c0015c00:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015c05:	85 c0                	test   eax,eax
c0015c07:	74 0b                	je     c0015c14 <Semaphore::tryAcquire()+0x58>
c0015c09:	8d 76 00             	lea    esi,[esi+0x0]
c0015c0c:	31 c0                	xor    eax,eax
c0015c0e:	83 c4 08             	add    esp,0x8
c0015c11:	5b                   	pop    ebx
c0015c12:	c3                   	ret    
c0015c13:	90                   	nop
c0015c14:	fb                   	sti    
c0015c15:	83 c4 08             	add    esp,0x8
c0015c18:	5b                   	pop    ebx
c0015c19:	c3                   	ret    
c0015c1a:	66 90                	xchg   ax,ax
c0015c1c:	83 c3 01             	add    ebx,0x1
c0015c1f:	89 15 c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,edx
c0015c25:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0015c28:	85 d2                	test   edx,edx
c0015c2a:	75 24                	jne    c0015c50 <Semaphore::tryAcquire()+0x94>
c0015c2c:	8b 0d c0 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c0
c0015c32:	85 c9                	test   ecx,ecx
c0015c34:	74 1a                	je     c0015c50 <Semaphore::tryAcquire()+0x94>
c0015c36:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015c40:	e8 e3 fe ff ff       	call   c0015b28 <schedule()>
c0015c45:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015c4a:	83 e8 01             	sub    eax,0x1
c0015c4d:	8d 76 00             	lea    esi,[esi+0x0]
c0015c50:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015c55:	85 c0                	test   eax,eax
c0015c57:	75 0b                	jne    c0015c64 <Semaphore::tryAcquire()+0xa8>
c0015c59:	fb                   	sti    
c0015c5a:	b0 01                	mov    al,0x1
c0015c5c:	83 c4 08             	add    esp,0x8
c0015c5f:	5b                   	pop    ebx
c0015c60:	c3                   	ret    
c0015c61:	8d 76 00             	lea    esi,[esi+0x0]
c0015c64:	b0 01                	mov    al,0x1
c0015c66:	83 c4 08             	add    esp,0x8
c0015c69:	5b                   	pop    ebx
c0015c6a:	c3                   	ret    
c0015c6b:	90                   	nop
c0015c6c:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015c76:	e8 ad fe ff ff       	call   c0015b28 <schedule()>
c0015c7b:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015c80:	83 e8 01             	sub    eax,0x1
c0015c83:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015c88:	85 c0                	test   eax,eax
c0015c8a:	75 80                	jne    c0015c0c <Semaphore::tryAcquire()+0x50>
c0015c8c:	eb 86                	jmp    c0015c14 <Semaphore::tryAcquire()+0x58>
c0015c8e:	66 90                	xchg   ax,ax

c0015c90 <Semaphore::assertLocked(char const*)>:
c0015c90:	83 ec 0c             	sub    esp,0xc
c0015c93:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015c97:	fa                   	cli    
c0015c98:	8b 0d c8 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c8
c0015c9e:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015ca3:	83 c1 01             	add    ecx,0x1
c0015ca6:	89 0d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ecx
c0015cac:	8d 48 01             	lea    ecx,[eax+0x1]
c0015caf:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015cb5:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0015cb7:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0015cba:	7c 28                	jl     c0015ce4 <Semaphore::assertLocked(char const*)+0x54>
c0015cbc:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015cc1:	85 c0                	test   eax,eax
c0015cc3:	75 0b                	jne    c0015cd0 <Semaphore::assertLocked(char const*)+0x40>
c0015cc5:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015cca:	85 c0                	test   eax,eax
c0015ccc:	75 32                	jne    c0015d00 <Semaphore::assertLocked(char const*)+0x70>
c0015cce:	66 90                	xchg   ax,ax
c0015cd0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015cd5:	83 e8 01             	sub    eax,0x1
c0015cd8:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015cdd:	75 01                	jne    c0015ce0 <Semaphore::assertLocked(char const*)+0x50>
c0015cdf:	fb                   	sti    
c0015ce0:	83 c4 0c             	add    esp,0xc
c0015ce3:	c3                   	ret    
c0015ce4:	83 ec 0c             	sub    esp,0xc
c0015ce7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015ceb:	52                   	push   edx
c0015cec:	e8 78 b5 ff ff       	call   c0011269 <KePanic(char const*)>
c0015cf1:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015cf6:	83 c4 10             	add    esp,0x10
c0015cf9:	83 e8 01             	sub    eax,0x1
c0015cfc:	eb be                	jmp    c0015cbc <Semaphore::assertLocked(char const*)+0x2c>
c0015cfe:	66 90                	xchg   ax,ax
c0015d00:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015d0a:	e8 19 fe ff ff       	call   c0015b28 <schedule()>
c0015d0f:	eb bf                	jmp    c0015cd0 <Semaphore::assertLocked(char const*)+0x40>
c0015d11:	8d 76 00             	lea    esi,[esi+0x0]

c0015d14 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015d14:	83 ec 0c             	sub    esp,0xc
c0015d17:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d1c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015d20:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015d23:	e8 00 fe ff ff       	call   c0015b28 <schedule()>
c0015d28:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015d2d:	83 e8 01             	sub    eax,0x1
c0015d30:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015d35:	75 01                	jne    c0015d38 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0015d37:	fb                   	sti    
c0015d38:	83 c4 0c             	add    esp,0xc
c0015d3b:	c3                   	ret    

c0015d3c <blockTask(TaskState)>:
c0015d3c:	83 ec 0c             	sub    esp,0xc
c0015d3f:	fa                   	cli    
c0015d40:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015d45:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015d49:	83 c0 01             	add    eax,0x1
c0015d4c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015d51:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d56:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015d59:	e8 ca fd ff ff       	call   c0015b28 <schedule()>
c0015d5e:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015d63:	83 e8 01             	sub    eax,0x1
c0015d66:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015d6b:	75 03                	jne    c0015d70 <blockTask(TaskState)+0x34>
c0015d6d:	fb                   	sti    
c0015d6e:	66 90                	xchg   ax,ax
c0015d70:	83 c4 0c             	add    esp,0xc
c0015d73:	c3                   	ret    

c0015d74 <waitTask(int, int*, int)>:
c0015d74:	83 ec 18             	sub    esp,0x18
c0015d77:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d7c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015d80:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0015d83:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015d87:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d8c:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015d8f:	6a 07                	push   0x7
c0015d91:	e8 a6 ff ff ff       	call   c0015d3c <blockTask(TaskState)>
c0015d96:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d9b:	83 c4 10             	add    esp,0x10
c0015d9e:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0015da1:	85 d2                	test   edx,edx
c0015da3:	74 0b                	je     c0015db0 <waitTask(int, int*, int)+0x3c>
c0015da5:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0015da8:	89 02                	mov    DWORD PTR [edx],eax
c0015daa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015daf:	90                   	nop
c0015db0:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0015db3:	83 c4 0c             	add    esp,0xc
c0015db6:	c3                   	ret    
c0015db7:	90                   	nop

c0015db8 <milliTenthSleepUntil(unsigned int)>:
c0015db8:	83 ec 0c             	sub    esp,0xc
c0015dbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015dbf:	39 05 ec 88 02 c0    	cmp    DWORD PTR ds:0xc00288ec,eax
c0015dc5:	76 05                	jbe    c0015dcc <milliTenthSleepUntil(unsigned int)+0x14>
c0015dc7:	90                   	nop
c0015dc8:	83 c4 0c             	add    esp,0xc
c0015dcb:	c3                   	ret    
c0015dcc:	fa                   	cli    
c0015dcd:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c0015dd3:	83 ec 08             	sub    esp,0x8
c0015dd6:	83 c2 01             	add    edx,0x1
c0015dd9:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0015ddf:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015de5:	83 c1 01             	add    ecx,0x1
c0015de8:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015dee:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015df4:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0015df7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015dfc:	50                   	push   eax
c0015dfd:	68 d8 96 02 c0       	push   0xc00296d8
c0015e02:	e8 49 9a 00 00       	call   c001f850 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015e07:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0015e0e:	e8 29 ff ff ff       	call   c0015d3c <blockTask(TaskState)>
c0015e13:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015e18:	83 c4 10             	add    esp,0x10
c0015e1b:	83 e8 01             	sub    eax,0x1
c0015e1e:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015e23:	85 c0                	test   eax,eax
c0015e25:	75 09                	jne    c0015e30 <milliTenthSleepUntil(unsigned int)+0x78>
c0015e27:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015e2c:	85 c0                	test   eax,eax
c0015e2e:	75 14                	jne    c0015e44 <milliTenthSleepUntil(unsigned int)+0x8c>
c0015e30:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015e35:	83 e8 01             	sub    eax,0x1
c0015e38:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015e3d:	75 89                	jne    c0015dc8 <milliTenthSleepUntil(unsigned int)+0x10>
c0015e3f:	fb                   	sti    
c0015e40:	83 c4 0c             	add    esp,0xc
c0015e43:	c3                   	ret    
c0015e44:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015e4e:	e8 d5 fc ff ff       	call   c0015b28 <schedule()>
c0015e53:	eb db                	jmp    c0015e30 <milliTenthSleepUntil(unsigned int)+0x78>
c0015e55:	8d 76 00             	lea    esi,[esi+0x0]

c0015e58 <milliTenthSleep(unsigned int)>:
c0015e58:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015e5c:	a1 ec 88 02 c0       	mov    eax,ds:0xc00288ec
c0015e61:	01 c2                	add    edx,eax
c0015e63:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015e67:	e9 4c ff ff ff       	jmp    c0015db8 <milliTenthSleepUntil(unsigned int)>

c0015e6c <sleep(unsigned int)>:
c0015e6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e70:	8d 04 80             	lea    eax,[eax+eax*4]
c0015e73:	8d 04 80             	lea    eax,[eax+eax*4]
c0015e76:	8d 04 80             	lea    eax,[eax+eax*4]
c0015e79:	8d 04 80             	lea    eax,[eax+eax*4]
c0015e7c:	c1 e0 04             	shl    eax,0x4
c0015e7f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015e83:	eb d3                	jmp    c0015e58 <milliTenthSleep(unsigned int)>
c0015e85:	90                   	nop
c0015e86:	66 90                	xchg   ax,ax

c0015e88 <Semaphore::acquire()>:
c0015e88:	83 ec 0c             	sub    esp,0xc
c0015e8b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015e8f:	fa                   	cli    
c0015e90:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015e95:	83 c0 01             	add    eax,0x1
c0015e98:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015e9d:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015ea2:	8d 48 01             	lea    ecx,[eax+0x1]
c0015ea5:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015eab:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015eae:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0015eb0:	7d 2e                	jge    c0015ee0 <Semaphore::acquire()+0x58>
c0015eb2:	83 c1 01             	add    ecx,0x1
c0015eb5:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015eb8:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015ebd:	85 c0                	test   eax,eax
c0015ebf:	75 0b                	jne    c0015ecc <Semaphore::acquire()+0x44>
c0015ec1:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015ec6:	85 c0                	test   eax,eax
c0015ec8:	75 66                	jne    c0015f30 <Semaphore::acquire()+0xa8>
c0015eca:	66 90                	xchg   ax,ax
c0015ecc:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015ed1:	83 e8 01             	sub    eax,0x1
c0015ed4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015ed9:	75 01                	jne    c0015edc <Semaphore::acquire()+0x54>
c0015edb:	fb                   	sti    
c0015edc:	83 c4 0c             	add    esp,0xc
c0015edf:	c3                   	ret    
c0015ee0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ee5:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0015eec:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015eef:	85 c9                	test   ecx,ecx
c0015ef1:	74 51                	je     c0015f44 <Semaphore::acquire()+0xbc>
c0015ef3:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0015ef6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015efc:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0015eff:	90                   	nop
c0015f00:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f05:	83 ec 0c             	sub    esp,0xc
c0015f08:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0015f0b:	68 e4 22 02 c0       	push   0xc00222e4
c0015f10:	e8 30 4a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015f15:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0015f1c:	e8 1b fe ff ff       	call   c0015d3c <blockTask(TaskState)>
c0015f21:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015f26:	83 c4 10             	add    esp,0x10
c0015f29:	83 e8 01             	sub    eax,0x1
c0015f2c:	eb 8a                	jmp    c0015eb8 <Semaphore::acquire()+0x30>
c0015f2e:	66 90                	xchg   ax,ax
c0015f30:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015f3a:	e8 e9 fb ff ff       	call   c0015b28 <schedule()>
c0015f3f:	eb 8b                	jmp    c0015ecc <Semaphore::acquire()+0x44>
c0015f41:	8d 76 00             	lea    esi,[esi+0x0]
c0015f44:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f49:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015f4c:	eb b2                	jmp    c0015f00 <Semaphore::acquire()+0x78>
c0015f4e:	66 90                	xchg   ax,ax

c0015f50 <taskReturned>:
c0015f50:	83 ec 18             	sub    esp,0x18
c0015f53:	68 04 23 02 c0       	push   0xc0022304
c0015f58:	e8 0c b3 ff ff       	call   c0011269 <KePanic(char const*)>
c0015f5d:	83 c4 10             	add    esp,0x10
c0015f60:	83 ec 0c             	sub    esp,0xc
c0015f63:	6a 02                	push   0x2
c0015f65:	e8 d2 fd ff ff       	call   c0015d3c <blockTask(TaskState)>
c0015f6a:	fa                   	cli    
c0015f6b:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015f70:	83 c0 01             	add    eax,0x1
c0015f73:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015f78:	e8 ab fb ff ff       	call   c0015b28 <schedule()>
c0015f7d:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015f82:	83 c4 10             	add    esp,0x10
c0015f85:	83 e8 01             	sub    eax,0x1
c0015f88:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015f8d:	85 c0                	test   eax,eax
c0015f8f:	75 cf                	jne    c0015f60 <taskReturned+0x10>
c0015f91:	fb                   	sti    
c0015f92:	eb cc                	jmp    c0015f60 <taskReturned+0x10>

c0015f94 <Thr::processFromPID(int)>:
c0015f94:	57                   	push   edi
c0015f95:	56                   	push   esi
c0015f96:	53                   	push   ebx
c0015f97:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f9b:	fa                   	cli    
c0015f9c:	8b 0d c8 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c8
c0015fa2:	83 ec 0c             	sub    esp,0xc
c0015fa5:	83 c1 01             	add    ecx,0x1
c0015fa8:	68 e4 96 02 c0       	push   0xc00296e4
c0015fad:	89 0d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ecx
c0015fb3:	e8 d4 97 00 00       	call   c001f78c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015fb8:	83 c4 10             	add    esp,0x10
c0015fbb:	89 c7                	mov    edi,eax
c0015fbd:	eb 15                	jmp    c0015fd4 <Thr::processFromPID(int)+0x40>
c0015fbf:	90                   	nop
c0015fc0:	83 ec 0c             	sub    esp,0xc
c0015fc3:	68 e4 96 02 c0       	push   0xc00296e4
c0015fc8:	e8 bf 97 00 00       	call   c001f78c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015fcd:	83 c4 10             	add    esp,0x10
c0015fd0:	39 f8                	cmp    eax,edi
c0015fd2:	74 50                	je     c0016024 <Thr::processFromPID(int)+0x90>
c0015fd4:	83 ec 0c             	sub    esp,0xc
c0015fd7:	68 e4 96 02 c0       	push   0xc00296e4
c0015fdc:	e8 ab 97 00 00       	call   c001f78c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015fe1:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0015fe8:	89 c3                	mov    ebx,eax
c0015fea:	e8 a5 97 00 00       	call   c001f794 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015fef:	58                   	pop    eax
c0015ff0:	5a                   	pop    edx
c0015ff1:	53                   	push   ebx
c0015ff2:	68 e4 96 02 c0       	push   0xc00296e4
c0015ff7:	e8 54 98 00 00       	call   c001f850 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015ffc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015fff:	83 c4 10             	add    esp,0x10
c0016002:	39 30                	cmp    DWORD PTR [eax],esi
c0016004:	75 ba                	jne    c0015fc0 <Thr::processFromPID(int)+0x2c>
c0016006:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001600b:	83 e8 01             	sub    eax,0x1
c001600e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016013:	74 0b                	je     c0016020 <Thr::processFromPID(int)+0x8c>
c0016015:	8d 76 00             	lea    esi,[esi+0x0]
c0016018:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001601b:	5b                   	pop    ebx
c001601c:	5e                   	pop    esi
c001601d:	5f                   	pop    edi
c001601e:	c3                   	ret    
c001601f:	90                   	nop
c0016020:	fb                   	sti    
c0016021:	eb f5                	jmp    c0016018 <Thr::processFromPID(int)+0x84>
c0016023:	90                   	nop
c0016024:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016029:	83 e8 01             	sub    eax,0x1
c001602c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016031:	75 05                	jne    c0016038 <Thr::processFromPID(int)+0xa4>
c0016033:	fb                   	sti    
c0016034:	5b                   	pop    ebx
c0016035:	5e                   	pop    esi
c0016036:	5f                   	pop    edi
c0016037:	c3                   	ret    
c0016038:	5b                   	pop    ebx
c0016039:	31 c0                	xor    eax,eax
c001603b:	5e                   	pop    esi
c001603c:	5f                   	pop    edi
c001603d:	c3                   	ret    
c001603e:	66 90                	xchg   ax,ax

c0016040 <unblockTask(ThreadControlBlock*)>:
c0016040:	53                   	push   ebx
c0016041:	83 ec 08             	sub    esp,0x8
c0016044:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016048:	fa                   	cli    
c0016049:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001604e:	83 c0 01             	add    eax,0x1
c0016051:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016056:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016059:	85 c0                	test   eax,eax
c001605b:	74 67                	je     c00160c4 <unblockTask(ThreadControlBlock*)+0x84>
c001605d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016060:	83 f8 01             	cmp    eax,0x1
c0016063:	74 37                	je     c001609c <unblockTask(ThreadControlBlock*)+0x5c>
c0016065:	83 ec 0c             	sub    esp,0xc
c0016068:	68 e4 96 02 c0       	push   0xc00296e4
c001606d:	e8 1a 97 00 00       	call   c001f78c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016072:	83 c4 10             	add    esp,0x10
c0016075:	85 c0                	test   eax,eax
c0016077:	75 1b                	jne    c0016094 <unblockTask(ThreadControlBlock*)+0x54>
c0016079:	eb 5d                	jmp    c00160d8 <unblockTask(ThreadControlBlock*)+0x98>
c001607b:	90                   	nop
c001607c:	83 ec 08             	sub    esp,0x8
c001607f:	50                   	push   eax
c0016080:	68 e4 96 02 c0       	push   0xc00296e4
c0016085:	e8 22 9a 00 00       	call   c001faac <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001608a:	83 c4 10             	add    esp,0x10
c001608d:	85 c0                	test   eax,eax
c001608f:	74 47                	je     c00160d8 <unblockTask(ThreadControlBlock*)+0x98>
c0016091:	8d 76 00             	lea    esi,[esi+0x0]
c0016094:	39 c3                	cmp    ebx,eax
c0016096:	75 e4                	jne    c001607c <unblockTask(ThreadControlBlock*)+0x3c>
c0016098:	eb 12                	jmp    c00160ac <unblockTask(ThreadControlBlock*)+0x6c>
c001609a:	66 90                	xchg   ax,ax
c001609c:	83 ec 0c             	sub    esp,0xc
c001609f:	68 83 22 02 c0       	push   0xc0022283
c00160a4:	e8 9c 48 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00160a9:	83 c4 10             	add    esp,0x10
c00160ac:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00160b1:	83 e8 01             	sub    eax,0x1
c00160b4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00160b9:	75 01                	jne    c00160bc <unblockTask(ThreadControlBlock*)+0x7c>
c00160bb:	fb                   	sti    
c00160bc:	83 c4 08             	add    esp,0x8
c00160bf:	5b                   	pop    ebx
c00160c0:	c3                   	ret    
c00160c1:	8d 76 00             	lea    esi,[esi+0x0]
c00160c4:	83 ec 0c             	sub    esp,0xc
c00160c7:	68 6c 22 02 c0       	push   0xc002226c
c00160cc:	e8 74 48 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00160d1:	83 c4 10             	add    esp,0x10
c00160d4:	eb d6                	jmp    c00160ac <unblockTask(ThreadControlBlock*)+0x6c>
c00160d6:	66 90                	xchg   ax,ax
c00160d8:	83 ec 08             	sub    esp,0x8
c00160db:	53                   	push   ebx
c00160dc:	68 e4 96 02 c0       	push   0xc00296e4
c00160e1:	e8 6a 97 00 00       	call   c001f850 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00160e6:	83 c4 10             	add    esp,0x10
c00160e9:	eb c1                	jmp    c00160ac <unblockTask(ThreadControlBlock*)+0x6c>
c00160eb:	90                   	nop

c00160ec <cleanupTerminatedTask(ThreadControlBlock*)>:
c00160ec:	55                   	push   ebp
c00160ed:	57                   	push   edi
c00160ee:	56                   	push   esi
c00160ef:	53                   	push   ebx
c00160f0:	83 ec 1c             	sub    esp,0x1c
c00160f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00160f7:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00160fa:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0016100:	85 ed                	test   ebp,ebp
c0016102:	7e 28                	jle    c001612c <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0016104:	31 f6                	xor    esi,esi
c0016106:	66 90                	xchg   ax,ax
c0016108:	83 ec 0c             	sub    esp,0xc
c001610b:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0016112:	83 c6 01             	add    esi,0x1
c0016115:	57                   	push   edi
c0016116:	e8 ab 19 ff ff       	call   c0007ac6 <free>
c001611b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001611e:	83 c4 10             	add    esp,0x10
c0016121:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0016127:	7f df                	jg     c0016108 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0016129:	8d 76 00             	lea    esi,[esi+0x0]
c001612c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0016136:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001613b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001613e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0016141:	d3 c0                	rol    eax,cl
c0016143:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c001614a:	21 c8                	and    eax,ecx
c001614c:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c0016153:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016156:	89 f7                	mov    edi,esi
c0016158:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0016160:	0f 85 72 01 00 00    	jne    c00162d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0016166:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c001616c:	85 ed                	test   ebp,ebp
c001616e:	74 1c                	je     c001618c <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0016170:	83 ec 0c             	sub    esp,0xc
c0016173:	55                   	push   ebp
c0016174:	e8 01 ae ff ff       	call   c0010f7a <EnvVarContainer::~EnvVarContainer()>
c0016179:	59                   	pop    ecx
c001617a:	5e                   	pop    esi
c001617b:	6a 0c                	push   0xc
c001617d:	55                   	push   ebp
c001617e:	e8 95 46 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0016183:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016186:	83 c4 10             	add    esp,0x10
c0016189:	89 f7                	mov    edi,esi
c001618b:	90                   	nop
c001618c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016192:	85 c0                	test   eax,eax
c0016194:	0f 84 b2 00 00 00    	je     c001624c <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001619a:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c001619d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00161a1:	31 c9                	xor    ecx,ecx
c00161a3:	eb 17                	jmp    c00161bc <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00161a5:	8d 76 00             	lea    esi,[esi+0x0]
c00161a8:	83 c1 01             	add    ecx,0x1
c00161ab:	83 f9 10             	cmp    ecx,0x10
c00161ae:	0f 84 98 00 00 00    	je     c001624c <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00161b4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00161ba:	66 90                	xchg   ax,ax
c00161bc:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c00161c3:	d3 fa                	sar    edx,cl
c00161c5:	80 e2 01             	and    dl,0x1
c00161c8:	74 de                	je     c00161a8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00161ca:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c00161cd:	01 d2                	add    edx,edx
c00161cf:	01 ca                	add    edx,ecx
c00161d1:	8d 14 92             	lea    edx,[edx+edx*4]
c00161d4:	01 d0                	add    eax,edx
c00161d6:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00161dc:	83 fd 07             	cmp    ebp,0x7
c00161df:	75 c7                	jne    c00161a8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00161e1:	05 40 02 00 00       	add    eax,0x240
c00161e6:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00161e9:	83 fd ff             	cmp    ebp,0xffffffff
c00161ec:	0f 8c ee 00 00 00    	jl     c00162e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c00161f2:	0f 84 ac 01 00 00    	je     c00163a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c00161f8:	85 ed                	test   ebp,ebp
c00161fa:	0f 84 90 01 00 00    	je     c0016390 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0016200:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0016202:	75 a4                	jne    c00161a8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016204:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001620a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001620e:	01 d0                	add    eax,edx
c0016210:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016214:	83 ec 0c             	sub    esp,0xc
c0016217:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c001621d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016220:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0016226:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001622d:	50                   	push   eax
c001622e:	e8 0d fe ff ff       	call   c0016040 <unblockTask(ThreadControlBlock*)>
c0016233:	83 c4 10             	add    esp,0x10
c0016236:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016239:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001623d:	89 f7                	mov    edi,esi
c001623f:	83 c1 01             	add    ecx,0x1
c0016242:	83 f9 10             	cmp    ecx,0x10
c0016245:	0f 85 69 ff ff ff    	jne    c00161b4 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c001624b:	90                   	nop
c001624c:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0016252:	85 c0                	test   eax,eax
c0016254:	74 62                	je     c00162b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0016256:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c001625c:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0016262:	74 54                	je     c00162b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0016264:	83 ec 0c             	sub    esp,0xc
c0016267:	68 e4 96 02 c0       	push   0xc00296e4
c001626c:	e8 1b 95 00 00       	call   c001f78c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016271:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0016278:	89 c7                	mov    edi,eax
c001627a:	e8 f1 94 00 00       	call   c001f770 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001627f:	83 c4 10             	add    esp,0x10
c0016282:	84 c0                	test   al,al
c0016284:	0f 84 ce 00 00 00    	je     c0016358 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c001628a:	66 90                	xchg   ax,ax
c001628c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001628f:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016295:	85 d2                	test   edx,edx
c0016297:	74 0f                	je     c00162a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0016299:	83 ec 0c             	sub    esp,0xc
c001629c:	8b 02                	mov    eax,DWORD PTR [edx]
c001629e:	52                   	push   edx
c001629f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00162a2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00162a5:	83 c4 10             	add    esp,0x10
c00162a8:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00162b2:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00162b5:	8d 76 00             	lea    esi,[esi+0x0]
c00162b8:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00162be:	85 db                	test   ebx,ebx
c00162c0:	74 16                	je     c00162d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00162c2:	83 ec 0c             	sub    esp,0xc
c00162c5:	53                   	push   ebx
c00162c6:	e8 e7 38 ff ff       	call   c0009bb2 <VAS::~VAS()>
c00162cb:	58                   	pop    eax
c00162cc:	5a                   	pop    edx
c00162cd:	6a 14                	push   0x14
c00162cf:	53                   	push   ebx
c00162d0:	e8 43 45 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00162d5:	83 c4 10             	add    esp,0x10
c00162d8:	83 c4 1c             	add    esp,0x1c
c00162db:	5b                   	pop    ebx
c00162dc:	5e                   	pop    esi
c00162dd:	5f                   	pop    edi
c00162de:	5d                   	pop    ebp
c00162df:	c3                   	ret    
c00162e0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00162e4:	83 ec 0c             	sub    esp,0xc
c00162e7:	68 38 23 02 c0       	push   0xc0022338
c00162ec:	e8 78 af ff ff       	call   c0011269 <KePanic(char const*)>
c00162f1:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00162f4:	83 c4 10             	add    esp,0x10
c00162f7:	89 f7                	mov    edi,esi
c00162f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00162fd:	e9 a6 fe ff ff       	jmp    c00161a8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016302:	66 90                	xchg   ax,ax
c0016304:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001630a:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0016310:	75 1e                	jne    c0016330 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016312:	83 ec 0c             	sub    esp,0xc
c0016315:	68 a0 23 02 c0       	push   0xc00223a0
c001631a:	e8 26 46 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001631f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0016326:	e8 11 fa ff ff       	call   c0015d3c <blockTask(TaskState)>
c001632b:	83 c4 10             	add    esp,0x10
c001632e:	66 90                	xchg   ax,ax
c0016330:	83 ec 08             	sub    esp,0x8
c0016333:	56                   	push   esi
c0016334:	68 e4 96 02 c0       	push   0xc00296e4
c0016339:	e8 12 95 00 00       	call   c001f850 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001633e:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0016345:	e8 42 94 00 00       	call   c001f78c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001634a:	83 c4 10             	add    esp,0x10
c001634d:	39 f8                	cmp    eax,edi
c001634f:	0f 84 37 ff ff ff    	je     c001628c <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0016355:	8d 76 00             	lea    esi,[esi+0x0]
c0016358:	83 ec 0c             	sub    esp,0xc
c001635b:	68 e4 96 02 c0       	push   0xc00296e4
c0016360:	e8 27 94 00 00       	call   c001f78c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016365:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c001636c:	89 c6                	mov    esi,eax
c001636e:	e8 21 94 00 00       	call   c001f794 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016373:	83 c4 10             	add    esp,0x10
c0016376:	39 f3                	cmp    ebx,esi
c0016378:	74 b6                	je     c0016330 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001637a:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c001637d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016380:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0016386:	75 a8                	jne    c0016330 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016388:	e9 77 ff ff ff       	jmp    c0016304 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c001638d:	8d 76 00             	lea    esi,[esi+0x0]
c0016390:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016394:	83 ec 0c             	sub    esp,0xc
c0016397:	68 6c 23 02 c0       	push   0xc002236c
c001639c:	e9 4b ff ff ff       	jmp    c00162ec <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c00163a1:	8d 76 00             	lea    esi,[esi+0x0]
c00163a4:	8b 36                	mov    esi,DWORD PTR [esi]
c00163a6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00163aa:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00163ad:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00163b0:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00163b6:	01 d7                	add    edi,edx
c00163b8:	89 f8                	mov    eax,edi
c00163ba:	e9 51 fe ff ff       	jmp    c0016210 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c00163bf:	90                   	nop

c00163c0 <cleanerTaskFunction(void*)>:
c00163c0:	53                   	push   ebx
c00163c1:	83 ec 08             	sub    esp,0x8
c00163c4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00163c9:	83 e8 01             	sub    eax,0x1
c00163cc:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00163d1:	75 01                	jne    c00163d4 <cleanerTaskFunction(void*)+0x14>
c00163d3:	fb                   	sti    
c00163d4:	fa                   	cli    
c00163d5:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00163da:	80 3d ac 96 02 c0 00 	cmp    BYTE PTR ds:0xc00296ac,0x0
c00163e1:	8d 50 01             	lea    edx,[eax+0x1]
c00163e4:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c00163ea:	0f 84 c4 00 00 00    	je     c00164b4 <cleanerTaskFunction(void*)+0xf4>
c00163f0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00163f5:	85 c0                	test   eax,eax
c00163f7:	75 03                	jne    c00163fc <cleanerTaskFunction(void*)+0x3c>
c00163f9:	fb                   	sti    
c00163fa:	66 90                	xchg   ax,ax
c00163fc:	c6 05 ac 96 02 c0 00 	mov    BYTE PTR ds:0xc00296ac,0x0
c0016403:	fa                   	cli    
c0016404:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c001640a:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0016410:	83 c2 01             	add    edx,0x1
c0016413:	83 c1 01             	add    ecx,0x1
c0016416:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c001641c:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0016422:	fa                   	cli    
c0016423:	8b 1d c8 96 02 c0    	mov    ebx,DWORD PTR ds:0xc00296c8
c0016429:	83 c3 01             	add    ebx,0x1
c001642c:	89 1d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ebx
c0016432:	eb 28                	jmp    c001645c <cleanerTaskFunction(void*)+0x9c>
c0016434:	83 ec 0c             	sub    esp,0xc
c0016437:	68 cc 96 02 c0       	push   0xc00296cc
c001643c:	e8 4b 93 00 00       	call   c001f78c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016441:	c7 04 24 cc 96 02 c0 	mov    DWORD PTR [esp],0xc00296cc
c0016448:	89 c3                	mov    ebx,eax
c001644a:	e8 45 93 00 00       	call   c001f794 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001644f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016452:	e8 95 fc ff ff       	call   c00160ec <cleanupTerminatedTask(ThreadControlBlock*)>
c0016457:	83 c4 10             	add    esp,0x10
c001645a:	66 90                	xchg   ax,ax
c001645c:	83 ec 0c             	sub    esp,0xc
c001645f:	68 cc 96 02 c0       	push   0xc00296cc
c0016464:	e8 07 93 00 00       	call   c001f770 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016469:	83 c4 10             	add    esp,0x10
c001646c:	84 c0                	test   al,al
c001646e:	74 c4                	je     c0016434 <cleanerTaskFunction(void*)+0x74>
c0016470:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016475:	83 e8 01             	sub    eax,0x1
c0016478:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001647d:	75 01                	jne    c0016480 <cleanerTaskFunction(void*)+0xc0>
c001647f:	fb                   	sti    
c0016480:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0016485:	83 e8 01             	sub    eax,0x1
c0016488:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c001648d:	0f 85 31 ff ff ff    	jne    c00163c4 <cleanerTaskFunction(void*)+0x4>
c0016493:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0016498:	85 c0                	test   eax,eax
c001649a:	0f 84 24 ff ff ff    	je     c00163c4 <cleanerTaskFunction(void*)+0x4>
c00164a0:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c00164aa:	e8 79 f6 ff ff       	call   c0015b28 <schedule()>
c00164af:	e9 10 ff ff ff       	jmp    c00163c4 <cleanerTaskFunction(void*)+0x4>
c00164b4:	83 ec 0c             	sub    esp,0xc
c00164b7:	6a 02                	push   0x2
c00164b9:	e8 56 f8 ff ff       	call   c0015d14 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00164be:	83 c4 10             	add    esp,0x10
c00164c1:	e9 36 ff ff ff       	jmp    c00163fc <cleanerTaskFunction(void*)+0x3c>
c00164c6:	66 90                	xchg   ax,ax

c00164c8 <terminateTask(int)>:
c00164c8:	83 ec 14             	sub    esp,0x14
c00164cb:	fa                   	cli    
c00164cc:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c00164d2:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c00164d8:	83 c2 01             	add    edx,0x1
c00164db:	83 c1 01             	add    ecx,0x1
c00164de:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c00164e4:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c00164ea:	fa                   	cli    
c00164eb:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00164f0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00164f4:	83 c0 01             	add    eax,0x1
c00164f7:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00164fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016501:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0016504:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016509:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001650c:	50                   	push   eax
c001650d:	68 cc 96 02 c0       	push   0xc00296cc
c0016512:	e8 39 93 00 00       	call   c001f850 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016517:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001651c:	83 c4 10             	add    esp,0x10
c001651f:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0016526:	a1 a8 96 02 c0       	mov    eax,ds:0xc00296a8
c001652b:	85 c0                	test   eax,eax
c001652d:	74 65                	je     c0016594 <terminateTask(int)+0xcc>
c001652f:	83 ec 0c             	sub    esp,0xc
c0016532:	c6 05 ac 96 02 c0 01 	mov    BYTE PTR ds:0xc00296ac,0x1
c0016539:	50                   	push   eax
c001653a:	e8 01 fb ff ff       	call   c0016040 <unblockTask(ThreadControlBlock*)>
c001653f:	83 c4 10             	add    esp,0x10
c0016542:	66 90                	xchg   ax,ax
c0016544:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016549:	83 e8 01             	sub    eax,0x1
c001654c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016551:	75 01                	jne    c0016554 <terminateTask(int)+0x8c>
c0016553:	fb                   	sti    
c0016554:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0016559:	83 e8 01             	sub    eax,0x1
c001655c:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0016561:	75 09                	jne    c001656c <terminateTask(int)+0xa4>
c0016563:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c001656a:	75 3c                	jne    c00165a8 <terminateTask(int)+0xe0>
c001656c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016571:	83 e8 01             	sub    eax,0x1
c0016574:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016579:	75 01                	jne    c001657c <terminateTask(int)+0xb4>
c001657b:	fb                   	sti    
c001657c:	fa                   	cli    
c001657d:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016582:	83 c0 01             	add    eax,0x1
c0016585:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001658a:	66 90                	xchg   ax,ax
c001658c:	e8 97 f5 ff ff       	call   c0015b28 <schedule()>
c0016591:	eb d9                	jmp    c001656c <terminateTask(int)+0xa4>
c0016593:	90                   	nop
c0016594:	83 ec 0c             	sub    esp,0xc
c0016597:	68 9a 22 02 c0       	push   0xc002229a
c001659c:	e8 a4 43 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00165a1:	83 c4 10             	add    esp,0x10
c00165a4:	eb 9e                	jmp    c0016544 <terminateTask(int)+0x7c>
c00165a6:	66 90                	xchg   ax,ax
c00165a8:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c00165b2:	eb d8                	jmp    c001658c <terminateTask(int)+0xc4>

c00165b4 <Thr::terminateFromIRQ(int)>:
c00165b4:	83 ec 18             	sub    esp,0x18
c00165b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00165bb:	50                   	push   eax
c00165bc:	e8 07 ff ff ff       	call   c00164c8 <terminateTask(int)>
c00165c1:	90                   	nop
c00165c2:	66 90                	xchg   ax,ax

c00165c4 <Semaphore::release()>:
c00165c4:	83 ec 0c             	sub    esp,0xc
c00165c7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00165cb:	fa                   	cli    
c00165cc:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00165d1:	83 c0 01             	add    eax,0x1
c00165d4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00165d9:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c00165de:	8d 48 01             	lea    ecx,[eax+0x1]
c00165e1:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c00165e7:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00165ea:	85 c9                	test   ecx,ecx
c00165ec:	74 42                	je     c0016630 <Semaphore::release()+0x6c>
c00165ee:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00165f1:	83 ec 0c             	sub    esp,0xc
c00165f4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00165f7:	51                   	push   ecx
c00165f8:	e8 43 fa ff ff       	call   c0016040 <unblockTask(ThreadControlBlock*)>
c00165fd:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0016602:	83 c4 10             	add    esp,0x10
c0016605:	83 e8 01             	sub    eax,0x1
c0016608:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c001660d:	85 c0                	test   eax,eax
c001660f:	75 0b                	jne    c001661c <Semaphore::release()+0x58>
c0016611:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0016616:	85 c0                	test   eax,eax
c0016618:	75 22                	jne    c001663c <Semaphore::release()+0x78>
c001661a:	66 90                	xchg   ax,ax
c001661c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016621:	83 e8 01             	sub    eax,0x1
c0016624:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016629:	75 01                	jne    c001662c <Semaphore::release()+0x68>
c001662b:	fb                   	sti    
c001662c:	83 c4 0c             	add    esp,0xc
c001662f:	c3                   	ret    
c0016630:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016633:	83 e9 01             	sub    ecx,0x1
c0016636:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016639:	eb cd                	jmp    c0016608 <Semaphore::release()+0x44>
c001663b:	90                   	nop
c001663c:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0016646:	e8 dd f4 ff ff       	call   c0015b28 <schedule()>
c001664b:	eb cf                	jmp    c001661c <Semaphore::release()+0x58>
c001664d:	8d 76 00             	lea    esi,[esi+0x0]

c0016650 <__static_initialization_and_destruction_0(int, int)>:
c0016650:	83 ec 0c             	sub    esp,0xc
c0016653:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016658:	0f 85 8e 00 00 00    	jne    c00166ec <__static_initialization_and_destruction_0(int, int)+0x9c>
c001665e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0016666:	0f 85 80 00 00 00    	jne    c00166ec <__static_initialization_and_destruction_0(int, int)+0x9c>
c001666c:	83 ec 0c             	sub    esp,0xc
c001666f:	68 e4 96 02 c0       	push   0xc00296e4
c0016674:	e8 8b 94 00 00       	call   c001fb04 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016679:	83 c4 10             	add    esp,0x10
c001667c:	83 ec 04             	sub    esp,0x4
c001667f:	68 70 2f 02 c0       	push   0xc0022f70
c0016684:	68 e4 96 02 c0       	push   0xc00296e4
c0016689:	68 b4 fa 01 c0       	push   0xc001fab4
c001668e:	e8 35 41 ff ff       	call   c000a7c8 <__cxa_atexit>
c0016693:	83 c4 10             	add    esp,0x10
c0016696:	83 ec 0c             	sub    esp,0xc
c0016699:	68 d8 96 02 c0       	push   0xc00296d8
c001669e:	e8 61 94 00 00       	call   c001fb04 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00166a3:	83 c4 10             	add    esp,0x10
c00166a6:	83 ec 04             	sub    esp,0x4
c00166a9:	68 70 2f 02 c0       	push   0xc0022f70
c00166ae:	68 d8 96 02 c0       	push   0xc00296d8
c00166b3:	68 b4 fa 01 c0       	push   0xc001fab4
c00166b8:	e8 0b 41 ff ff       	call   c000a7c8 <__cxa_atexit>
c00166bd:	83 c4 10             	add    esp,0x10
c00166c0:	83 ec 0c             	sub    esp,0xc
c00166c3:	68 cc 96 02 c0       	push   0xc00296cc
c00166c8:	e8 37 94 00 00       	call   c001fb04 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00166cd:	83 c4 10             	add    esp,0x10
c00166d0:	83 ec 04             	sub    esp,0x4
c00166d3:	68 70 2f 02 c0       	push   0xc0022f70
c00166d8:	68 cc 96 02 c0       	push   0xc00296cc
c00166dd:	68 b4 fa 01 c0       	push   0xc001fab4
c00166e2:	e8 e1 40 ff ff       	call   c000a7c8 <__cxa_atexit>
c00166e7:	83 c4 10             	add    esp,0x10
c00166ea:	66 90                	xchg   ax,ax
c00166ec:	90                   	nop
c00166ed:	83 c4 0c             	add    esp,0xc
c00166f0:	c3                   	ret    
c00166f1:	8d 76 00             	lea    esi,[esi+0x0]

c00166f4 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00166f4:	83 ec 0c             	sub    esp,0xc
c00166f7:	83 ec 08             	sub    esp,0x8
c00166fa:	68 ff ff 00 00       	push   0xffff
c00166ff:	6a 01                	push   0x1
c0016701:	e8 4a ff ff ff       	call   c0016650 <__static_initialization_and_destruction_0(int, int)>
c0016706:	83 c4 10             	add    esp,0x10
c0016709:	83 c4 0c             	add    esp,0xc
c001670c:	c3                   	ret    

c001670d <Vm::inbv(unsigned short)>:
c001670d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016711:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016716:	75 06                	jne    c001671e <Vm::inbv(unsigned short)+0x11>
c0016718:	a0 2c 97 02 c0       	mov    al,ds:0xc002972c
c001671d:	c3                   	ret    
c001671e:	ec                   	in     al,dx
c001671f:	c3                   	ret    

c0016720 <Vm::outbv(unsigned short, unsigned char)>:
c0016720:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016724:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016728:	66 81 fa fe fe       	cmp    dx,0xfefe
c001672d:	75 25                	jne    c0016754 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001672f:	8b 0d 2c 97 02 c0    	mov    ecx,DWORD PTR ds:0xc002972c
c0016735:	8d 51 01             	lea    edx,[ecx+0x1]
c0016738:	88 81 40 97 02 c0    	mov    BYTE PTR [ecx-0x3ffd68c0],al
c001673e:	89 15 2c 97 02 c0    	mov    DWORD PTR ds:0xc002972c,edx
c0016744:	83 fa 20             	cmp    edx,0x20
c0016747:	75 0c                	jne    c0016755 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016749:	c7 05 2c 97 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x1f
c0016753:	c3                   	ret    
c0016754:	ee                   	out    dx,al
c0016755:	c3                   	ret    

c0016756 <Vm::realToLinear(unsigned short, unsigned short)>:
c0016756:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001675b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016760:	c1 e0 04             	shl    eax,0x4
c0016763:	01 d0                	add    eax,edx
c0016765:	c3                   	ret    

c0016766 <Vm::getSegment(unsigned int)>:
c0016766:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001676a:	c1 e8 10             	shr    eax,0x10
c001676d:	c3                   	ret    

c001676e <Vm::getOffset(unsigned int)>:
c001676e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016772:	c3                   	ret    

c0016773 <Vm::mainloop2()>:
c0016773:	83 ec 18             	sub    esp,0x18
c0016776:	fa                   	cli    
c0016777:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001677d:	6a 02                	push   0x2
c001677f:	c6 05 25 97 02 c0 01 	mov    BYTE PTR ds:0xc0029725,0x1
c0016786:	e8 89 f5 ff ff       	call   c0015d14 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001678b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016790:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016794:	52                   	push   edx
c0016795:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016799:	52                   	push   edx
c001679a:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c001679e:	52                   	push   edx
c001679f:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c00167a3:	50                   	push   eax
c00167a4:	e8 66 9a fe ff       	call   c000020f <goToVM86>
c00167a9:	83 c4 2c             	add    esp,0x2c
c00167ac:	c3                   	ret    

c00167ad <Vm::mainVm8086Loop(void*)>:
c00167ad:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00167b2:	48                   	dec    eax
c00167b3:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00167b8:	75 01                	jne    c00167bb <Vm::mainVm8086Loop(void*)+0xe>
c00167ba:	fb                   	sti    
c00167bb:	eb b6                	jmp    c0016773 <Vm::mainloop2()>

c00167bd <Vm::mainloop3(unsigned long)>:
c00167bd:	83 ec 18             	sub    esp,0x18
c00167c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00167c4:	fa                   	cli    
c00167c5:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00167cb:	6a 02                	push   0x2
c00167cd:	c6 05 24 97 02 c0 01 	mov    BYTE PTR ds:0xc0029724,0x1
c00167d4:	a3 20 97 02 c0       	mov    ds:0xc0029720,eax
c00167d9:	e8 36 f5 ff ff       	call   c0015d14 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00167de:	83 c4 1c             	add    esp,0x1c
c00167e1:	eb 90                	jmp    c0016773 <Vm::mainloop2()>

c00167e3 <Vm::initialise8086()>:
c00167e3:	83 ec 0c             	sub    esp,0xc
c00167e6:	68 80 00 00 00       	push   0x80
c00167eb:	6a 00                	push   0x0
c00167ed:	68 ad 67 01 c0       	push   0xc00167ad
c00167f2:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c00167f8:	e8 db f0 ff ff       	call   c00158d8 <Process::createThread(void (*)(void*), void*, int)>
c00167fd:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016804:	a3 28 97 02 c0       	mov    ds:0xc0029728,eax
c0016809:	68 00 01 00 00       	push   0x100
c001680e:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0016813:	6a 00                	push   0x0
c0016815:	6a 00                	push   0x0
c0016817:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001681d:	e8 f8 36 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016822:	83 c4 2c             	add    esp,0x2c
c0016825:	c3                   	ret    

c0016826 <Vm::finish8086()>:
c0016826:	53                   	push   ebx
c0016827:	83 ec 08             	sub    esp,0x8
c001682a:	fa                   	cli    
c001682b:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016831:	80 3d 24 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029724,0x0
c0016838:	75 15                	jne    c001684f <Vm::finish8086()+0x29>
c001683a:	e8 e9 f2 ff ff       	call   c0015b28 <schedule()>
c001683f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016844:	48                   	dec    eax
c0016845:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001684a:	75 de                	jne    c001682a <Vm::finish8086()+0x4>
c001684c:	fb                   	sti    
c001684d:	eb db                	jmp    c001682a <Vm::finish8086()+0x4>
c001684f:	83 ec 0c             	sub    esp,0xc
c0016852:	8b 1d 20 97 02 c0    	mov    ebx,DWORD PTR ds:0xc0029720
c0016858:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c001685e:	c6 05 24 97 02 c0 00 	mov    BYTE PTR ds:0xc0029724,0x0
c0016865:	e8 d6 f7 ff ff       	call   c0016040 <unblockTask(ThreadControlBlock*)>
c001686a:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001686f:	83 c4 10             	add    esp,0x10
c0016872:	8d 50 ff             	lea    edx,[eax-0x1]
c0016875:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c001687b:	85 d2                	test   edx,edx
c001687d:	75 01                	jne    c0016880 <Vm::finish8086()+0x5a>
c001687f:	fb                   	sti    
c0016880:	89 d8                	mov    eax,ebx
c0016882:	83 c4 08             	add    esp,0x8
c0016885:	5b                   	pop    ebx
c0016886:	c3                   	ret    

c0016887 <Vm::getOutput8086(unsigned char*)>:
c0016887:	57                   	push   edi
c0016888:	8b 0d 2c 97 02 c0    	mov    ecx,DWORD PTR ds:0xc002972c
c001688e:	56                   	push   esi
c001688f:	be 40 97 02 c0       	mov    esi,0xc0029740
c0016894:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016898:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001689a:	a1 2c 97 02 c0       	mov    eax,ds:0xc002972c
c001689f:	5e                   	pop    esi
c00168a0:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c00168aa:	5f                   	pop    edi
c00168ab:	c3                   	ret    

c00168ac <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00168ac:	55                   	push   ebp
c00168ad:	57                   	push   edi
c00168ae:	56                   	push   esi
c00168af:	53                   	push   ebx
c00168b0:	83 ec 0c             	sub    esp,0xc
c00168b3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00168b7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00168bb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00168bf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00168c3:	fa                   	cli    
c00168c4:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00168ca:	80 3d 25 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029725,0x0
c00168d1:	75 15                	jne    c00168e8 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c00168d3:	e8 50 f2 ff ff       	call   c0015b28 <schedule()>
c00168d8:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00168dd:	48                   	dec    eax
c00168de:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00168e3:	75 de                	jne    c00168c3 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00168e5:	fb                   	sti    
c00168e6:	eb db                	jmp    c00168c3 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00168e8:	a1 28 97 02 c0       	mov    eax,ds:0xc0029728
c00168ed:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c00168f7:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00168fb:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00168ff:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016903:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016907:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001690b:	0f b7 ff             	movzx  edi,di
c001690e:	0f b7 f6             	movzx  esi,si
c0016911:	50                   	push   eax
c0016912:	6a 20                	push   0x20
c0016914:	6a 00                	push   0x0
c0016916:	68 40 97 02 c0       	push   0xc0029740
c001691b:	e8 d0 9b fe ff       	call   c00004f0 <memset>
c0016920:	5a                   	pop    edx
c0016921:	59                   	pop    ecx
c0016922:	57                   	push   edi
c0016923:	56                   	push   esi
c0016924:	e8 2d fe ff ff       	call   c0016756 <Vm::realToLinear(unsigned short, unsigned short)>
c0016929:	83 c4 10             	add    esp,0x10
c001692c:	89 c7                	mov    edi,eax
c001692e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016932:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016936:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016938:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001693d:	c6 05 25 97 02 c0 00 	mov    BYTE PTR ds:0xc0029725,0x0
c0016944:	48                   	dec    eax
c0016945:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001694a:	75 01                	jne    c001694d <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c001694c:	fb                   	sti    
c001694d:	83 ec 0c             	sub    esp,0xc
c0016950:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c0016956:	e8 e5 f6 ff ff       	call   c0016040 <unblockTask(ThreadControlBlock*)>
c001695b:	83 c4 1c             	add    esp,0x1c
c001695e:	b0 01                	mov    al,0x1
c0016960:	5b                   	pop    ebx
c0016961:	5e                   	pop    esi
c0016962:	5f                   	pop    edi
c0016963:	5d                   	pop    ebp
c0016964:	c3                   	ret    

c0016965 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016965:	55                   	push   ebp
c0016966:	57                   	push   edi
c0016967:	56                   	push   esi
c0016968:	53                   	push   ebx
c0016969:	83 ec 34             	sub    esp,0x34
c001696c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016970:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016974:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016978:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c001697c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016980:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016984:	68 c8 23 02 c0       	push   0xc00223c8
c0016989:	e8 b7 3f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001698e:	83 c4 10             	add    esp,0x10
c0016991:	fa                   	cli    
c0016992:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016998:	8a 1d 25 97 02 c0    	mov    bl,BYTE PTR ds:0xc0029725
c001699e:	84 db                	test   bl,bl
c00169a0:	75 15                	jne    c00169b7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c00169a2:	e8 81 f1 ff ff       	call   c0015b28 <schedule()>
c00169a7:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00169ac:	48                   	dec    eax
c00169ad:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00169b2:	75 dd                	jne    c0016991 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c00169b4:	fb                   	sti    
c00169b5:	eb da                	jmp    c0016991 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c00169b7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00169bb:	a1 28 97 02 c0       	mov    eax,ds:0xc0029728
c00169c0:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c00169ca:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c00169ce:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00169d2:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00169d6:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00169da:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00169de:	50                   	push   eax
c00169df:	6a 20                	push   0x20
c00169e1:	6a 00                	push   0x0
c00169e3:	68 40 97 02 c0       	push   0xc0029740
c00169e8:	e8 03 9b fe ff       	call   c00004f0 <memset>
c00169ed:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00169f4:	e8 bd 10 ff ff       	call   c0007ab6 <malloc>
c00169f9:	83 c4 0c             	add    esp,0xc
c00169fc:	89 c5                	mov    ebp,eax
c00169fe:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0016a04:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016a08:	50                   	push   eax
c0016a09:	e8 22 4d ff ff       	call   c000b730 <File::File(char const*, Process*)>
c0016a0e:	83 c4 10             	add    esp,0x10
c0016a11:	85 ed                	test   ebp,ebp
c0016a13:	75 0a                	jne    c0016a1f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0016a15:	83 ec 0c             	sub    esp,0xc
c0016a18:	68 ea 23 02 c0       	push   0xc00223ea
c0016a1d:	eb 2b                	jmp    c0016a4a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0016a1f:	50                   	push   eax
c0016a20:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016a24:	50                   	push   eax
c0016a25:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016a29:	50                   	push   eax
c0016a2a:	55                   	push   ebp
c0016a2b:	e8 be 50 ff ff       	call   c000baee <File::stat(unsigned long long*, bool*)>
c0016a30:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016a34:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016a38:	83 c4 10             	add    esp,0x10
c0016a3b:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016a40:	74 27                	je     c0016a69 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0016a42:	83 ec 0c             	sub    esp,0xc
c0016a45:	68 fe 23 02 c0       	push   0xc00223fe
c0016a4a:	e8 1a a8 ff ff       	call   c0011269 <KePanic(char const*)>
c0016a4f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016a54:	83 c4 10             	add    esp,0x10
c0016a57:	48                   	dec    eax
c0016a58:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016a5d:	85 c0                	test   eax,eax
c0016a5f:	75 01                	jne    c0016a62 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016a61:	fb                   	sti    
c0016a62:	31 db                	xor    ebx,ebx
c0016a64:	e9 90 00 00 00       	jmp    c0016af9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016a69:	51                   	push   ecx
c0016a6a:	51                   	push   ecx
c0016a6b:	6a 01                	push   0x1
c0016a6d:	55                   	push   ebp
c0016a6e:	e8 79 4d ff ff       	call   c000b7ec <File::open(FileOpenMode)>
c0016a73:	83 c4 10             	add    esp,0x10
c0016a76:	85 c0                	test   eax,eax
c0016a78:	74 26                	je     c0016aa0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0016a7a:	83 ec 0c             	sub    esp,0xc
c0016a7d:	68 17 24 02 c0       	push   0xc0022417
c0016a82:	e8 e2 a7 ff ff       	call   c0011269 <KePanic(char const*)>
c0016a87:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016a8c:	83 c4 10             	add    esp,0x10
c0016a8f:	48                   	dec    eax
c0016a90:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016a95:	85 c0                	test   eax,eax
c0016a97:	75 c9                	jne    c0016a62 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016a99:	fb                   	sti    
c0016a9a:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0016a9e:	eb 59                	jmp    c0016af9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016aa0:	0f b7 ff             	movzx  edi,di
c0016aa3:	50                   	push   eax
c0016aa4:	0f b7 f6             	movzx  esi,si
c0016aa7:	50                   	push   eax
c0016aa8:	57                   	push   edi
c0016aa9:	56                   	push   esi
c0016aaa:	e8 a7 fc ff ff       	call   c0016756 <Vm::realToLinear(unsigned short, unsigned short)>
c0016aaf:	5a                   	pop    edx
c0016ab0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0016ab3:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0016ab7:	51                   	push   ecx
c0016ab8:	50                   	push   eax
c0016ab9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016abd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016ac1:	55                   	push   ebp
c0016ac2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016ac5:	83 c4 14             	add    esp,0x14
c0016ac8:	55                   	push   ebp
c0016ac9:	e8 7c 4d ff ff       	call   c000b84a <File::close()>
c0016ace:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016ad3:	83 c4 10             	add    esp,0x10
c0016ad6:	48                   	dec    eax
c0016ad7:	c6 05 25 97 02 c0 00 	mov    BYTE PTR ds:0xc0029725,0x0
c0016ade:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016ae3:	85 c0                	test   eax,eax
c0016ae5:	75 01                	jne    c0016ae8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0016ae7:	fb                   	sti    
c0016ae8:	83 ec 0c             	sub    esp,0xc
c0016aeb:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c0016af1:	e8 4a f5 ff ff       	call   c0016040 <unblockTask(ThreadControlBlock*)>
c0016af6:	83 c4 10             	add    esp,0x10
c0016af9:	83 c4 2c             	add    esp,0x2c
c0016afc:	88 d8                	mov    al,bl
c0016afe:	5b                   	pop    ebx
c0016aff:	5e                   	pop    esi
c0016b00:	5f                   	pop    edi
c0016b01:	5d                   	pop    ebp
c0016b02:	c3                   	ret    

c0016b03 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0016b03:	57                   	push   edi
c0016b04:	56                   	push   esi
c0016b05:	53                   	push   ebx
c0016b06:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016b0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b0e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016b12:	83 e8 06             	sub    eax,0x6
c0016b15:	0f b7 c0             	movzx  eax,ax
c0016b18:	50                   	push   eax
c0016b19:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016b1e:	50                   	push   eax
c0016b1f:	e8 32 fc ff ff       	call   c0016756 <Vm::realToLinear(unsigned short, unsigned short)>
c0016b24:	5a                   	pop    edx
c0016b25:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0016b28:	59                   	pop    ecx
c0016b29:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0016b2c:	8d 51 fa             	lea    edx,[ecx-0x6]
c0016b2f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016b35:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0016b38:	8d 56 02             	lea    edx,[esi+0x2]
c0016b3b:	66 89 10             	mov    WORD PTR [eax],dx
c0016b3e:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0016b42:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0016b46:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0016b49:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0016b4d:	0f b6 f1             	movzx  esi,cl
c0016b50:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016b54:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016b5a:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0016b5e:	0f b6 d5             	movzx  edx,ch
c0016b61:	74 0a                	je     c0016b6d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c0016b63:	c1 e2 08             	shl    edx,0x8
c0016b66:	09 f2                	or     edx,esi
c0016b68:	80 ce 02             	or     dh,0x2
c0016b6b:	eb 08                	jmp    c0016b75 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c0016b6d:	c1 e2 08             	shl    edx,0x8
c0016b70:	09 f2                	or     edx,esi
c0016b72:	80 e6 fd             	and    dh,0xfd
c0016b75:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016b79:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b7e:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016b82:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0016b8a:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0016b8d:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0016b95:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016b98:	5b                   	pop    ebx
c0016b99:	5e                   	pop    esi
c0016b9a:	5f                   	pop    edi
c0016b9b:	c3                   	ret    

c0016b9c <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016b9c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016ba1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016ba6:	c1 e0 04             	shl    eax,0x4
c0016ba9:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016bac:	c3                   	ret    

c0016bad <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016bad:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016bb2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016bb7:	c1 e0 04             	shl    eax,0x4
c0016bba:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0016bbe:	c3                   	ret    

c0016bbf <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0016bbf:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016bc4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016bc9:	c1 e0 04             	shl    eax,0x4
c0016bcc:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016bcf:	c3                   	ret    

c0016bd0 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016bd0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016bd5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016bda:	c1 e0 04             	shl    eax,0x4
c0016bdd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016be1:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0016be4:	c3                   	ret    

c0016be5 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0016be5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016bea:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016bef:	c1 e0 04             	shl    eax,0x4
c0016bf2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016bf6:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0016bfa:	c3                   	ret    

c0016bfb <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0016bfb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016c00:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016c05:	c1 e0 04             	shl    eax,0x4
c0016c08:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016c0c:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0016c0f:	c3                   	ret    

c0016c10 <Vm::faultHandler(regs*)>:
c0016c10:	55                   	push   ebp
c0016c11:	57                   	push   edi
c0016c12:	56                   	push   esi
c0016c13:	53                   	push   ebx
c0016c14:	83 ec 2c             	sub    esp,0x2c
c0016c17:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016c1b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016c1e:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0016c22:	0f b7 f8             	movzx  edi,ax
c0016c25:	52                   	push   edx
c0016c26:	0f b7 c0             	movzx  eax,ax
c0016c29:	50                   	push   eax
c0016c2a:	e8 27 fb ff ff       	call   c0016756 <Vm::realToLinear(unsigned short, unsigned short)>
c0016c2f:	5a                   	pop    edx
c0016c30:	59                   	pop    ecx
c0016c31:	89 c1                	mov    ecx,eax
c0016c33:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016c36:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016c3a:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0016c3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016c43:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0016c46:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016c4a:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0016c4f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016c53:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016c57:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016c5b:	e8 f6 fa ff ff       	call   c0016756 <Vm::realToLinear(unsigned short, unsigned short)>
c0016c60:	5e                   	pop    esi
c0016c61:	be 06 00 00 00       	mov    esi,0x6
c0016c66:	5d                   	pop    ebp
c0016c67:	31 ed                	xor    ebp,ebp
c0016c69:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016c6e:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0016c71:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0016c77:	0f 84 74 02 00 00    	je     c0016ef1 <Vm::faultHandler(regs*)+0x2e1>
c0016c7d:	0f 87 94 00 00 00    	ja     c0016d17 <Vm::faultHandler(regs*)+0x107>
c0016c83:	83 fa 66             	cmp    edx,0x66
c0016c86:	0f 84 e2 01 00 00    	je     c0016e6e <Vm::faultHandler(regs*)+0x25e>
c0016c8c:	77 47                	ja     c0016cd5 <Vm::faultHandler(regs*)+0xc5>
c0016c8e:	83 fa 36             	cmp    edx,0x36
c0016c91:	0f 84 ca 01 00 00    	je     c0016e61 <Vm::faultHandler(regs*)+0x251>
c0016c97:	77 1a                	ja     c0016cb3 <Vm::faultHandler(regs*)+0xa3>
c0016c99:	83 fa 26             	cmp    edx,0x26
c0016c9c:	0f 84 98 01 00 00    	je     c0016e3a <Vm::faultHandler(regs*)+0x22a>
c0016ca2:	83 fa 2e             	cmp    edx,0x2e
c0016ca5:	0f 85 21 06 00 00    	jne    c00172cc <Vm::faultHandler(regs*)+0x6bc>
c0016cab:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016cae:	31 f6                	xor    esi,esi
c0016cb0:	41                   	inc    ecx
c0016cb1:	eb bb                	jmp    c0016c6e <Vm::faultHandler(regs*)+0x5e>
c0016cb3:	83 fa 64             	cmp    edx,0x64
c0016cb6:	0f 84 8b 01 00 00    	je     c0016e47 <Vm::faultHandler(regs*)+0x237>
c0016cbc:	0f 87 92 01 00 00    	ja     c0016e54 <Vm::faultHandler(regs*)+0x244>
c0016cc2:	83 fa 3e             	cmp    edx,0x3e
c0016cc5:	0f 85 01 06 00 00    	jne    c00172cc <Vm::faultHandler(regs*)+0x6bc>
c0016ccb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016cce:	be 01 00 00 00       	mov    esi,0x1
c0016cd3:	eb db                	jmp    c0016cb0 <Vm::faultHandler(regs*)+0xa0>
c0016cd5:	83 fa 6d             	cmp    edx,0x6d
c0016cd8:	0f 84 34 03 00 00    	je     c0017012 <Vm::faultHandler(regs*)+0x402>
c0016cde:	77 17                	ja     c0016cf7 <Vm::faultHandler(regs*)+0xe7>
c0016ce0:	83 fa 67             	cmp    edx,0x67
c0016ce3:	0f 84 92 01 00 00    	je     c0016e7b <Vm::faultHandler(regs*)+0x26b>
c0016ce9:	83 fa 6c             	cmp    edx,0x6c
c0016cec:	0f 84 b1 02 00 00    	je     c0016fa3 <Vm::faultHandler(regs*)+0x393>
c0016cf2:	e9 d5 05 00 00       	jmp    c00172cc <Vm::faultHandler(regs*)+0x6bc>
c0016cf7:	83 fa 6f             	cmp    edx,0x6f
c0016cfa:	0f 84 3d 04 00 00    	je     c001713d <Vm::faultHandler(regs*)+0x52d>
c0016d00:	0f 82 9f 03 00 00    	jb     c00170a5 <Vm::faultHandler(regs*)+0x495>
c0016d06:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0016d0c:	0f 84 76 01 00 00    	je     c0016e88 <Vm::faultHandler(regs*)+0x278>
c0016d12:	e9 b5 05 00 00       	jmp    c00172cc <Vm::faultHandler(regs*)+0x6bc>
c0016d17:	81 fa ec 00 00 00    	cmp    edx,0xec
c0016d1d:	0f 84 51 05 00 00    	je     c0017274 <Vm::faultHandler(regs*)+0x664>
c0016d23:	0f 87 a9 00 00 00    	ja     c0016dd2 <Vm::faultHandler(regs*)+0x1c2>
c0016d29:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0016d2f:	0f 84 d0 04 00 00    	je     c0017205 <Vm::faultHandler(regs*)+0x5f5>
c0016d35:	77 78                	ja     c0016daf <Vm::faultHandler(regs*)+0x19f>
c0016d37:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0016d3d:	0f 84 0e 02 00 00    	je     c0016f51 <Vm::faultHandler(regs*)+0x341>
c0016d43:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0016d49:	0f 85 7d 05 00 00    	jne    c00172cc <Vm::faultHandler(regs*)+0x6bc>
c0016d4f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0016d53:	89 d1                	mov    ecx,edx
c0016d55:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0016d58:	c1 e1 08             	shl    ecx,0x8
c0016d5b:	09 ca                	or     edx,ecx
c0016d5d:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0016d60:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0016d64:	89 d1                	mov    ecx,edx
c0016d66:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0016d6a:	c1 e1 08             	shl    ecx,0x8
c0016d6d:	09 ca                	or     edx,ecx
c0016d6f:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0016d72:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0016d76:	89 d1                	mov    ecx,edx
c0016d78:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0016d7c:	c1 e1 08             	shl    ecx,0x8
c0016d7f:	09 ca                	or     edx,ecx
c0016d81:	81 ca 00 02 02 00    	or     edx,0x20200
c0016d87:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016d8a:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0016d8e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016d94:	d1 e8                	shr    eax,1
c0016d96:	83 e0 01             	and    eax,0x1
c0016d99:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016d9c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016d9f:	83 c0 06             	add    eax,0x6
c0016da2:	25 ff ff 00 00       	and    eax,0xffff
c0016da7:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016daa:	e9 19 05 00 00       	jmp    c00172c8 <Vm::faultHandler(regs*)+0x6b8>
c0016daf:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0016db5:	0f 84 8f 04 00 00    	je     c001724a <Vm::faultHandler(regs*)+0x63a>
c0016dbb:	0f 82 60 04 00 00    	jb     c0017221 <Vm::faultHandler(regs*)+0x611>
c0016dc1:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0016dc7:	0f 84 94 04 00 00    	je     c0017261 <Vm::faultHandler(regs*)+0x651>
c0016dcd:	e9 fa 04 00 00       	jmp    c00172cc <Vm::faultHandler(regs*)+0x6bc>
c0016dd2:	81 fa ef 00 00 00    	cmp    edx,0xef
c0016dd8:	0f 84 d7 04 00 00    	je     c00172b5 <Vm::faultHandler(regs*)+0x6a5>
c0016dde:	77 2e                	ja     c0016e0e <Vm::faultHandler(regs*)+0x1fe>
c0016de0:	81 fa ed 00 00 00    	cmp    edx,0xed
c0016de6:	0f 84 a4 04 00 00    	je     c0017290 <Vm::faultHandler(regs*)+0x680>
c0016dec:	81 fa ee 00 00 00    	cmp    edx,0xee
c0016df2:	0f 85 d4 04 00 00    	jne    c00172cc <Vm::faultHandler(regs*)+0x6bc>
c0016df8:	50                   	push   eax
c0016df9:	50                   	push   eax
c0016dfa:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016dfe:	50                   	push   eax
c0016dff:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016e03:	50                   	push   eax
c0016e04:	e8 17 f9 ff ff       	call   c0016720 <Vm::outbv(unsigned short, unsigned char)>
c0016e09:	e9 9f 04 00 00       	jmp    c00172ad <Vm::faultHandler(regs*)+0x69d>
c0016e0e:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0016e14:	0f 84 6d 01 00 00    	je     c0016f87 <Vm::faultHandler(regs*)+0x377>
c0016e1a:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0016e20:	0f 84 6f 01 00 00    	je     c0016f95 <Vm::faultHandler(regs*)+0x385>
c0016e26:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0016e2c:	0f 85 9a 04 00 00    	jne    c00172cc <Vm::faultHandler(regs*)+0x6bc>
c0016e32:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e35:	e9 76 fe ff ff       	jmp    c0016cb0 <Vm::faultHandler(regs*)+0xa0>
c0016e3a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e3d:	be 02 00 00 00       	mov    esi,0x2
c0016e42:	e9 69 fe ff ff       	jmp    c0016cb0 <Vm::faultHandler(regs*)+0xa0>
c0016e47:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e4a:	be 03 00 00 00       	mov    esi,0x3
c0016e4f:	e9 5c fe ff ff       	jmp    c0016cb0 <Vm::faultHandler(regs*)+0xa0>
c0016e54:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e57:	be 04 00 00 00       	mov    esi,0x4
c0016e5c:	e9 4f fe ff ff       	jmp    c0016cb0 <Vm::faultHandler(regs*)+0xa0>
c0016e61:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e64:	be 05 00 00 00       	mov    esi,0x5
c0016e69:	e9 42 fe ff ff       	jmp    c0016cb0 <Vm::faultHandler(regs*)+0xa0>
c0016e6e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e71:	bd 01 00 00 00       	mov    ebp,0x1
c0016e76:	e9 35 fe ff ff       	jmp    c0016cb0 <Vm::faultHandler(regs*)+0xa0>
c0016e7b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e7e:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0016e83:	e9 28 fe ff ff       	jmp    c0016cb0 <Vm::faultHandler(regs*)+0xa0>
c0016e88:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016e8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016e8f:	83 e5 01             	and    ebp,0x1
c0016e92:	74 30                	je     c0016ec4 <Vm::faultHandler(regs*)+0x2b4>
c0016e94:	83 e9 04             	sub    ecx,0x4
c0016e97:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016e9d:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016ea3:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016ea6:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016ea9:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016eaf:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016eb3:	0f 84 0c 04 00 00    	je     c00172c5 <Vm::faultHandler(regs*)+0x6b5>
c0016eb9:	80 ce 02             	or     dh,0x2
c0016ebc:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016ebf:	e9 01 04 00 00       	jmp    c00172c5 <Vm::faultHandler(regs*)+0x6b5>
c0016ec4:	83 e9 02             	sub    ecx,0x2
c0016ec7:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016ecd:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016ed0:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016ed4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016eda:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016ede:	74 05                	je     c0016ee5 <Vm::faultHandler(regs*)+0x2d5>
c0016ee0:	80 ce 02             	or     dh,0x2
c0016ee3:	eb 03                	jmp    c0016ee8 <Vm::faultHandler(regs*)+0x2d8>
c0016ee5:	80 e6 fd             	and    dh,0xfd
c0016ee8:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016eec:	e9 d4 03 00 00       	jmp    c00172c5 <Vm::faultHandler(regs*)+0x6b5>
c0016ef1:	83 e5 01             	and    ebp,0x1
c0016ef4:	74 2a                	je     c0016f20 <Vm::faultHandler(regs*)+0x310>
c0016ef6:	8b 10                	mov    edx,DWORD PTR [eax]
c0016ef8:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016efe:	81 ca 00 02 02 00    	or     edx,0x20200
c0016f04:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016f07:	8b 00                	mov    eax,DWORD PTR [eax]
c0016f09:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016f0f:	c1 e8 09             	shr    eax,0x9
c0016f12:	83 e0 01             	and    eax,0x1
c0016f15:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016f18:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016f1b:	83 c0 04             	add    eax,0x4
c0016f1e:	eb 24                	jmp    c0016f44 <Vm::faultHandler(regs*)+0x334>
c0016f20:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0016f23:	81 ca 00 02 02 00    	or     edx,0x20200
c0016f29:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016f2c:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0016f2f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016f35:	c1 e8 09             	shr    eax,0x9
c0016f38:	83 e0 01             	and    eax,0x1
c0016f3b:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016f3e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016f41:	83 c0 02             	add    eax,0x2
c0016f44:	25 ff ff 00 00       	and    eax,0xffff
c0016f49:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016f4c:	e9 74 03 00 00       	jmp    c00172c5 <Vm::faultHandler(regs*)+0x6b5>
c0016f51:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016f55:	3d ee 00 00 00       	cmp    eax,0xee
c0016f5a:	75 10                	jne    c0016f6c <Vm::faultHandler(regs*)+0x35c>
c0016f5c:	83 ec 0c             	sub    esp,0xc
c0016f5f:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0016f62:	e8 56 f8 ff ff       	call   c00167bd <Vm::mainloop3(unsigned long)>
c0016f67:	e9 44 03 00 00       	jmp    c00172b0 <Vm::faultHandler(regs*)+0x6a0>
c0016f6c:	83 ec 0c             	sub    esp,0xc
c0016f6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016f73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016f77:	51                   	push   ecx
c0016f78:	50                   	push   eax
c0016f79:	53                   	push   ebx
c0016f7a:	e8 84 fb ff ff       	call   c0016b03 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0016f7f:	83 c4 20             	add    esp,0x20
c0016f82:	e9 41 03 00 00       	jmp    c00172c8 <Vm::faultHandler(regs*)+0x6b8>
c0016f87:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f8c:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016f90:	e9 30 03 00 00       	jmp    c00172c5 <Vm::faultHandler(regs*)+0x6b5>
c0016f95:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f9a:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0016f9e:	e9 22 03 00 00       	jmp    c00172c5 <Vm::faultHandler(regs*)+0x6b5>
c0016fa3:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016fa6:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016fab:	74 2b                	je     c0016fd8 <Vm::faultHandler(regs*)+0x3c8>
c0016fad:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0016fb4:	76 22                	jbe    c0016fd8 <Vm::faultHandler(regs*)+0x3c8>
c0016fb6:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016fba:	50                   	push   eax
c0016fbb:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016fbf:	50                   	push   eax
c0016fc0:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016fc4:	50                   	push   eax
c0016fc5:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016fc9:	50                   	push   eax
c0016fca:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016fce:	50                   	push   eax
c0016fcf:	6a 6c                	push   0x6c
c0016fd1:	6a 6c                	push   0x6c
c0016fd3:	e9 bd 01 00 00       	jmp    c0017195 <Vm::faultHandler(regs*)+0x585>
c0016fd8:	83 ec 0c             	sub    esp,0xc
c0016fdb:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016fdf:	0f b7 f6             	movzx  esi,si
c0016fe2:	50                   	push   eax
c0016fe3:	e8 25 f7 ff ff       	call   c001670d <Vm::inbv(unsigned short)>
c0016fe8:	83 c4 0c             	add    esp,0xc
c0016feb:	0f b6 c0             	movzx  eax,al
c0016fee:	50                   	push   eax
c0016fef:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0016ff3:	50                   	push   eax
c0016ff4:	56                   	push   esi
c0016ff5:	e8 d6 fb ff ff       	call   c0016bd0 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0016ffa:	83 c4 10             	add    esp,0x10
c0016ffd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017000:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017004:	74 03                	je     c0017009 <Vm::faultHandler(regs*)+0x3f9>
c0017006:	48                   	dec    eax
c0017007:	eb 01                	jmp    c001700a <Vm::faultHandler(regs*)+0x3fa>
c0017009:	40                   	inc    eax
c001700a:	0f b7 c0             	movzx  eax,ax
c001700d:	e9 8b 00 00 00       	jmp    c001709d <Vm::faultHandler(regs*)+0x48d>
c0017012:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017015:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017018:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001701d:	74 29                	je     c0017048 <Vm::faultHandler(regs*)+0x438>
c001701f:	3d ff ff 00 00       	cmp    eax,0xffff
c0017024:	76 22                	jbe    c0017048 <Vm::faultHandler(regs*)+0x438>
c0017026:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001702a:	50                   	push   eax
c001702b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001702f:	50                   	push   eax
c0017030:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017034:	50                   	push   eax
c0017035:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017039:	50                   	push   eax
c001703a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001703e:	50                   	push   eax
c001703f:	6a 6d                	push   0x6d
c0017041:	6a 6d                	push   0x6d
c0017043:	e9 4d 01 00 00       	jmp    c0017195 <Vm::faultHandler(regs*)+0x585>
c0017048:	0f b7 c8             	movzx  ecx,ax
c001704b:	0f b7 f6             	movzx  esi,si
c001704e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017051:	83 e5 01             	and    ebp,0x1
c0017054:	74 20                	je     c0017076 <Vm::faultHandler(regs*)+0x466>
c0017056:	ed                   	in     eax,dx
c0017057:	55                   	push   ebp
c0017058:	50                   	push   eax
c0017059:	51                   	push   ecx
c001705a:	56                   	push   esi
c001705b:	e8 9b fb ff ff       	call   c0016bfb <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0017060:	83 c4 10             	add    esp,0x10
c0017063:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017066:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001706a:	74 05                	je     c0017071 <Vm::faultHandler(regs*)+0x461>
c001706c:	83 e8 04             	sub    eax,0x4
c001706f:	eb 27                	jmp    c0017098 <Vm::faultHandler(regs*)+0x488>
c0017071:	83 c0 04             	add    eax,0x4
c0017074:	eb 22                	jmp    c0017098 <Vm::faultHandler(regs*)+0x488>
c0017076:	66 ed                	in     ax,dx
c0017078:	0f b7 c0             	movzx  eax,ax
c001707b:	57                   	push   edi
c001707c:	50                   	push   eax
c001707d:	51                   	push   ecx
c001707e:	56                   	push   esi
c001707f:	e8 61 fb ff ff       	call   c0016be5 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0017084:	83 c4 10             	add    esp,0x10
c0017087:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001708a:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001708e:	74 05                	je     c0017095 <Vm::faultHandler(regs*)+0x485>
c0017090:	83 e8 02             	sub    eax,0x2
c0017093:	eb 03                	jmp    c0017098 <Vm::faultHandler(regs*)+0x488>
c0017095:	83 c0 02             	add    eax,0x2
c0017098:	25 ff ff 00 00       	and    eax,0xffff
c001709d:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00170a0:	e9 20 02 00 00       	jmp    c00172c5 <Vm::faultHandler(regs*)+0x6b5>
c00170a5:	8d 46 ff             	lea    eax,[esi-0x1]
c00170a8:	0f b6 f0             	movzx  esi,al
c00170ab:	83 fe 05             	cmp    esi,0x5
c00170ae:	77 23                	ja     c00170d3 <Vm::faultHandler(regs*)+0x4c3>
c00170b0:	ff 24 b5 8c 24 02 c0 	jmp    DWORD PTR [esi*4-0x3ffddb74]
c00170b7:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c00170bc:	eb 15                	jmp    c00170d3 <Vm::faultHandler(regs*)+0x4c3>
c00170be:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00170c2:	eb 0f                	jmp    c00170d3 <Vm::faultHandler(regs*)+0x4c3>
c00170c4:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00170c8:	eb 09                	jmp    c00170d3 <Vm::faultHandler(regs*)+0x4c3>
c00170ca:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00170ce:	eb 03                	jmp    c00170d3 <Vm::faultHandler(regs*)+0x4c3>
c00170d0:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00170d3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00170d6:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00170db:	74 29                	je     c0017106 <Vm::faultHandler(regs*)+0x4f6>
c00170dd:	3d ff ff 00 00       	cmp    eax,0xffff
c00170e2:	76 22                	jbe    c0017106 <Vm::faultHandler(regs*)+0x4f6>
c00170e4:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00170e8:	50                   	push   eax
c00170e9:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00170ed:	50                   	push   eax
c00170ee:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00170f2:	50                   	push   eax
c00170f3:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00170f7:	50                   	push   eax
c00170f8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00170fc:	50                   	push   eax
c00170fd:	6a 6e                	push   0x6e
c00170ff:	6a 6e                	push   0x6e
c0017101:	e9 8f 00 00 00       	jmp    c0017195 <Vm::faultHandler(regs*)+0x585>
c0017106:	0f b7 c0             	movzx  eax,ax
c0017109:	52                   	push   edx
c001710a:	52                   	push   edx
c001710b:	50                   	push   eax
c001710c:	57                   	push   edi
c001710d:	e8 8a fa ff ff       	call   c0016b9c <Vm::readByteFromReal(unsigned short, unsigned short)>
c0017112:	59                   	pop    ecx
c0017113:	0f b6 c0             	movzx  eax,al
c0017116:	5e                   	pop    esi
c0017117:	50                   	push   eax
c0017118:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001711c:	50                   	push   eax
c001711d:	e8 fe f5 ff ff       	call   c0016720 <Vm::outbv(unsigned short, unsigned char)>
c0017122:	83 c4 10             	add    esp,0x10
c0017125:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017128:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001712c:	74 03                	je     c0017131 <Vm::faultHandler(regs*)+0x521>
c001712e:	48                   	dec    eax
c001712f:	eb 01                	jmp    c0017132 <Vm::faultHandler(regs*)+0x522>
c0017131:	40                   	inc    eax
c0017132:	0f b7 c0             	movzx  eax,ax
c0017135:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0017138:	e9 88 01 00 00       	jmp    c00172c5 <Vm::faultHandler(regs*)+0x6b5>
c001713d:	8d 46 ff             	lea    eax,[esi-0x1]
c0017140:	0f b6 f0             	movzx  esi,al
c0017143:	83 fe 05             	cmp    esi,0x5
c0017146:	77 1e                	ja     c0017166 <Vm::faultHandler(regs*)+0x556>
c0017148:	ff 24 b5 a4 24 02 c0 	jmp    DWORD PTR [esi*4-0x3ffddb5c]
c001714f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017153:	eb 11                	jmp    c0017166 <Vm::faultHandler(regs*)+0x556>
c0017155:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0017158:	eb 0c                	jmp    c0017166 <Vm::faultHandler(regs*)+0x556>
c001715a:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001715d:	eb 07                	jmp    c0017166 <Vm::faultHandler(regs*)+0x556>
c001715f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0017162:	eb 02                	jmp    c0017166 <Vm::faultHandler(regs*)+0x556>
c0017164:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0017166:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0017169:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001716e:	74 37                	je     c00171a7 <Vm::faultHandler(regs*)+0x597>
c0017170:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0017176:	76 2f                	jbe    c00171a7 <Vm::faultHandler(regs*)+0x597>
c0017178:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001717c:	50                   	push   eax
c001717d:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017181:	50                   	push   eax
c0017182:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017186:	50                   	push   eax
c0017187:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001718b:	50                   	push   eax
c001718c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017190:	50                   	push   eax
c0017191:	6a 6f                	push   0x6f
c0017193:	6a 6f                	push   0x6f
c0017195:	68 30 24 02 c0       	push   0xc0022430
c001719a:	e8 a6 37 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001719f:	83 c4 20             	add    esp,0x20
c00171a2:	e9 83 01 00 00       	jmp    c001732a <Vm::faultHandler(regs*)+0x71a>
c00171a7:	0f b7 d7             	movzx  edx,di
c00171aa:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00171ad:	0f b7 c6             	movzx  eax,si
c00171b0:	81 e1 00 04 00 00    	and    ecx,0x400
c00171b6:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00171b9:	83 e5 01             	and    ebp,0x1
c00171bc:	74 1d                	je     c00171db <Vm::faultHandler(regs*)+0x5cb>
c00171be:	55                   	push   ebp
c00171bf:	55                   	push   ebp
c00171c0:	50                   	push   eax
c00171c1:	52                   	push   edx
c00171c2:	e8 f8 f9 ff ff       	call   c0016bbf <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00171c7:	83 c4 10             	add    esp,0x10
c00171ca:	89 fa                	mov    edx,edi
c00171cc:	ef                   	out    dx,eax
c00171cd:	85 c9                	test   ecx,ecx
c00171cf:	74 05                	je     c00171d6 <Vm::faultHandler(regs*)+0x5c6>
c00171d1:	83 ee 04             	sub    esi,0x4
c00171d4:	eb 21                	jmp    c00171f7 <Vm::faultHandler(regs*)+0x5e7>
c00171d6:	83 c6 04             	add    esi,0x4
c00171d9:	eb 1c                	jmp    c00171f7 <Vm::faultHandler(regs*)+0x5e7>
c00171db:	55                   	push   ebp
c00171dc:	55                   	push   ebp
c00171dd:	50                   	push   eax
c00171de:	52                   	push   edx
c00171df:	e8 c9 f9 ff ff       	call   c0016bad <Vm::readWordFromReal(unsigned short, unsigned short)>
c00171e4:	83 c4 10             	add    esp,0x10
c00171e7:	89 fa                	mov    edx,edi
c00171e9:	66 ef                	out    dx,ax
c00171eb:	85 c9                	test   ecx,ecx
c00171ed:	74 05                	je     c00171f4 <Vm::faultHandler(regs*)+0x5e4>
c00171ef:	83 ee 02             	sub    esi,0x2
c00171f2:	eb 03                	jmp    c00171f7 <Vm::faultHandler(regs*)+0x5e7>
c00171f4:	83 c6 02             	add    esi,0x2
c00171f7:	81 e6 ff ff 00 00    	and    esi,0xffff
c00171fd:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0017200:	e9 c0 00 00 00       	jmp    c00172c5 <Vm::faultHandler(regs*)+0x6b5>
c0017205:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001720c:	83 ec 0c             	sub    esp,0xc
c001720f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017213:	50                   	push   eax
c0017214:	e8 f4 f4 ff ff       	call   c001670d <Vm::inbv(unsigned short)>
c0017219:	0f b6 c0             	movzx  eax,al
c001721c:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001721f:	eb 3a                	jmp    c001725b <Vm::faultHandler(regs*)+0x64b>
c0017221:	83 e5 01             	and    ebp,0x1
c0017224:	74 07                	je     c001722d <Vm::faultHandler(regs*)+0x61d>
c0017226:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001722a:	ed                   	in     eax,dx
c001722b:	eb 14                	jmp    c0017241 <Vm::faultHandler(regs*)+0x631>
c001722d:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0017230:	66 31 f6             	xor    si,si
c0017233:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0017236:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001723a:	66 ed                	in     ax,dx
c001723c:	0f b7 c0             	movzx  eax,ax
c001723f:	09 f0                	or     eax,esi
c0017241:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017244:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017248:	eb 7e                	jmp    c00172c8 <Vm::faultHandler(regs*)+0x6b8>
c001724a:	52                   	push   edx
c001724b:	52                   	push   edx
c001724c:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017250:	50                   	push   eax
c0017251:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017255:	50                   	push   eax
c0017256:	e8 c5 f4 ff ff       	call   c0016720 <Vm::outbv(unsigned short, unsigned char)>
c001725b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001725f:	eb 4f                	jmp    c00172b0 <Vm::faultHandler(regs*)+0x6a0>
c0017261:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017264:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017268:	83 e5 01             	and    ebp,0x1
c001726b:	74 03                	je     c0017270 <Vm::faultHandler(regs*)+0x660>
c001726d:	ef                   	out    dx,eax
c001726e:	eb d4                	jmp    c0017244 <Vm::faultHandler(regs*)+0x634>
c0017270:	66 ef                	out    dx,ax
c0017272:	eb d0                	jmp    c0017244 <Vm::faultHandler(regs*)+0x634>
c0017274:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001727b:	83 ec 0c             	sub    esp,0xc
c001727e:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017282:	50                   	push   eax
c0017283:	e8 85 f4 ff ff       	call   c001670d <Vm::inbv(unsigned short)>
c0017288:	0f b6 c0             	movzx  eax,al
c001728b:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001728e:	eb 1d                	jmp    c00172ad <Vm::faultHandler(regs*)+0x69d>
c0017290:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017293:	83 e5 01             	and    ebp,0x1
c0017296:	74 03                	je     c001729b <Vm::faultHandler(regs*)+0x68b>
c0017298:	ed                   	in     eax,dx
c0017299:	eb 0d                	jmp    c00172a8 <Vm::faultHandler(regs*)+0x698>
c001729b:	66 ed                	in     ax,dx
c001729d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00172a0:	0f b7 c0             	movzx  eax,ax
c00172a3:	66 31 d2             	xor    dx,dx
c00172a6:	09 d0                	or     eax,edx
c00172a8:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00172ab:	eb 18                	jmp    c00172c5 <Vm::faultHandler(regs*)+0x6b5>
c00172ad:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00172b0:	83 c4 10             	add    esp,0x10
c00172b3:	eb 13                	jmp    c00172c8 <Vm::faultHandler(regs*)+0x6b8>
c00172b5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00172b8:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00172bb:	83 e5 01             	and    ebp,0x1
c00172be:	74 03                	je     c00172c3 <Vm::faultHandler(regs*)+0x6b3>
c00172c0:	ef                   	out    dx,eax
c00172c1:	eb 02                	jmp    c00172c5 <Vm::faultHandler(regs*)+0x6b5>
c00172c3:	66 ef                	out    dx,ax
c00172c5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00172c8:	b0 01                	mov    al,0x1
c00172ca:	eb 60                	jmp    c001732c <Vm::faultHandler(regs*)+0x71c>
c00172cc:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00172d0:	50                   	push   eax
c00172d1:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00172d5:	50                   	push   eax
c00172d6:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00172da:	50                   	push   eax
c00172db:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00172df:	50                   	push   eax
c00172e0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00172e4:	50                   	push   eax
c00172e5:	52                   	push   edx
c00172e6:	52                   	push   edx
c00172e7:	68 5d 24 02 c0       	push   0xc002245d
c00172ec:	e8 54 36 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00172f1:	83 c4 20             	add    esp,0x20
c00172f4:	83 ec 0c             	sub    esp,0xc
c00172f7:	6a 60                	push   0x60
c00172f9:	e8 0f f4 ff ff       	call   c001670d <Vm::inbv(unsigned short)>
c00172fe:	83 c4 10             	add    esp,0x10
c0017301:	0f b6 d0             	movzx  edx,al
c0017304:	83 fa 1c             	cmp    edx,0x1c
c0017307:	74 05                	je     c001730e <Vm::faultHandler(regs*)+0x6fe>
c0017309:	83 fa 5a             	cmp    edx,0x5a
c001730c:	75 e6                	jne    c00172f4 <Vm::faultHandler(regs*)+0x6e4>
c001730e:	0f b6 c0             	movzx  eax,al
c0017311:	83 f8 1c             	cmp    eax,0x1c
c0017314:	74 05                	je     c001731b <Vm::faultHandler(regs*)+0x70b>
c0017316:	83 f8 5a             	cmp    eax,0x5a
c0017319:	75 0f                	jne    c001732a <Vm::faultHandler(regs*)+0x71a>
c001731b:	83 ec 0c             	sub    esp,0xc
c001731e:	6a 60                	push   0x60
c0017320:	e8 e8 f3 ff ff       	call   c001670d <Vm::inbv(unsigned short)>
c0017325:	83 c4 10             	add    esp,0x10
c0017328:	eb e4                	jmp    c001730e <Vm::faultHandler(regs*)+0x6fe>
c001732a:	31 c0                	xor    eax,eax
c001732c:	83 c4 2c             	add    esp,0x2c
c001732f:	5b                   	pop    ebx
c0017330:	5e                   	pop    esi
c0017331:	5f                   	pop    edi
c0017332:	5d                   	pop    ebp
c0017333:	c3                   	ret    

c0017334 <noCopro(unsigned long)>:
c0017334:	c3                   	ret    

c0017335 <nmiHandler(regs*, void*)>:
c0017335:	83 ec 0c             	sub    esp,0xc
c0017338:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001733d:	83 ec 0c             	sub    esp,0xc
c0017340:	50                   	push   eax
c0017341:	e8 70 ff fe ff       	call   c00072b6 <Computer::handleNMI()>
c0017346:	83 c4 10             	add    esp,0x10
c0017349:	90                   	nop
c001734a:	83 c4 0c             	add    esp,0xc
c001734d:	c3                   	ret    

c001734e <doubleFault(regs*, void*)>:
c001734e:	55                   	push   ebp
c001734f:	89 e5                	mov    ebp,esp
c0017351:	83 ec 08             	sub    esp,0x8
c0017354:	83 ec 0c             	sub    esp,0xc
c0017357:	68 bc 24 02 c0       	push   0xc00224bc
c001735c:	e8 08 9f ff ff       	call   c0011269 <KePanic(char const*)>
c0017361:	83 c4 10             	add    esp,0x10
c0017364:	90                   	nop
c0017365:	c9                   	leave  
c0017366:	c3                   	ret    

c0017367 <displayDebugInfo(regs*)>:
c0017367:	83 ec 1c             	sub    esp,0x1c
c001736a:	0f 20 c0             	mov    eax,cr0
c001736d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017371:	0f 20 d0             	mov    eax,cr2
c0017374:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017378:	0f 20 d8             	mov    eax,cr3
c001737b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001737f:	0f 20 e0             	mov    eax,cr4
c0017382:	89 04 24             	mov    DWORD PTR [esp],eax
c0017385:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017389:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001738c:	83 ec 08             	sub    esp,0x8
c001738f:	50                   	push   eax
c0017390:	68 d8 24 02 c0       	push   0xc00224d8
c0017395:	e8 ab 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001739a:	83 c4 10             	add    esp,0x10
c001739d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173a1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00173a4:	83 ec 08             	sub    esp,0x8
c00173a7:	50                   	push   eax
c00173a8:	68 c9 24 02 c0       	push   0xc00224c9
c00173ad:	e8 93 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00173b2:	83 c4 10             	add    esp,0x10
c00173b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173b9:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00173bc:	83 ec 08             	sub    esp,0x8
c00173bf:	50                   	push   eax
c00173c0:	68 d4 24 02 c0       	push   0xc00224d4
c00173c5:	e8 7b 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00173ca:	83 c4 10             	add    esp,0x10
c00173cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173d1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00173d4:	83 ec 08             	sub    esp,0x8
c00173d7:	50                   	push   eax
c00173d8:	68 e3 24 02 c0       	push   0xc00224e3
c00173dd:	e8 63 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00173e2:	83 c4 10             	add    esp,0x10
c00173e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173e9:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00173ec:	83 ec 08             	sub    esp,0x8
c00173ef:	50                   	push   eax
c00173f0:	68 ee 24 02 c0       	push   0xc00224ee
c00173f5:	e8 4b 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00173fa:	83 c4 10             	add    esp,0x10
c00173fd:	83 ec 08             	sub    esp,0x8
c0017400:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017404:	68 f9 24 02 c0       	push   0xc00224f9
c0017409:	e8 37 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001740e:	83 c4 10             	add    esp,0x10
c0017411:	83 ec 08             	sub    esp,0x8
c0017414:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017418:	68 04 25 02 c0       	push   0xc0022504
c001741d:	e8 23 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017422:	83 c4 10             	add    esp,0x10
c0017425:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017429:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001742c:	c1 e0 05             	shl    eax,0x5
c001742f:	8d 90 80 34 02 c0    	lea    edx,[eax-0x3ffdcb80]
c0017435:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017439:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001743c:	83 ec 04             	sub    esp,0x4
c001743f:	52                   	push   edx
c0017440:	50                   	push   eax
c0017441:	68 0f 25 02 c0       	push   0xc002250f
c0017446:	e8 fa 34 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001744b:	83 c4 10             	add    esp,0x10
c001744e:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017453:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017459:	83 ec 0c             	sub    esp,0xc
c001745c:	50                   	push   eax
c001745d:	e8 f7 12 ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0017462:	83 c4 10             	add    esp,0x10
c0017465:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001746a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017470:	83 ec 08             	sub    esp,0x8
c0017473:	68 1e 25 02 c0       	push   0xc002251e
c0017478:	50                   	push   eax
c0017479:	e8 28 16 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001747e:	83 c4 10             	add    esp,0x10
c0017481:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017486:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001748c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017490:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0017493:	83 ec 08             	sub    esp,0x8
c0017496:	52                   	push   edx
c0017497:	50                   	push   eax
c0017498:	e8 c3 15 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c001749d:	83 c4 10             	add    esp,0x10
c00174a0:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00174a5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00174ab:	83 ec 08             	sub    esp,0x8
c00174ae:	68 2c 25 02 c0       	push   0xc002252c
c00174b3:	50                   	push   eax
c00174b4:	e8 ed 15 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00174b9:	83 c4 10             	add    esp,0x10
c00174bc:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00174c1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00174c7:	ba 00 20 00 c2       	mov    edx,0xc2002000
c00174cc:	8b 12                	mov    edx,DWORD PTR [edx]
c00174ce:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00174d1:	83 c2 0c             	add    edx,0xc
c00174d4:	83 ec 08             	sub    esp,0x8
c00174d7:	52                   	push   edx
c00174d8:	50                   	push   eax
c00174d9:	e8 c8 15 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00174de:	83 c4 10             	add    esp,0x10
c00174e1:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00174e6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00174ec:	83 ec 08             	sub    esp,0x8
c00174ef:	68 35 25 02 c0       	push   0xc0022535
c00174f4:	50                   	push   eax
c00174f5:	e8 ac 15 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00174fa:	83 c4 10             	add    esp,0x10
c00174fd:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017502:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017508:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001750c:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001750f:	83 ec 08             	sub    esp,0x8
c0017512:	52                   	push   edx
c0017513:	50                   	push   eax
c0017514:	e8 47 15 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017519:	83 c4 10             	add    esp,0x10
c001751c:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017521:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017527:	83 ec 08             	sub    esp,0x8
c001752a:	68 3d 25 02 c0       	push   0xc002253d
c001752f:	50                   	push   eax
c0017530:	e8 71 15 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017535:	83 c4 10             	add    esp,0x10
c0017538:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001753d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017543:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017547:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001754a:	83 ec 08             	sub    esp,0x8
c001754d:	52                   	push   edx
c001754e:	50                   	push   eax
c001754f:	e8 0c 15 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017554:	83 c4 10             	add    esp,0x10
c0017557:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001755c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017562:	83 ec 08             	sub    esp,0x8
c0017565:	68 45 25 02 c0       	push   0xc0022545
c001756a:	50                   	push   eax
c001756b:	e8 36 15 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017570:	83 c4 10             	add    esp,0x10
c0017573:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017578:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001757e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017582:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0017585:	83 ec 08             	sub    esp,0x8
c0017588:	52                   	push   edx
c0017589:	50                   	push   eax
c001758a:	e8 d1 14 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c001758f:	83 c4 10             	add    esp,0x10
c0017592:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017597:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001759d:	83 ec 08             	sub    esp,0x8
c00175a0:	68 4d 25 02 c0       	push   0xc002254d
c00175a5:	50                   	push   eax
c00175a6:	e8 fb 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00175ab:	83 c4 10             	add    esp,0x10
c00175ae:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175b3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175b9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00175bd:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00175c0:	83 ec 08             	sub    esp,0x8
c00175c3:	52                   	push   edx
c00175c4:	50                   	push   eax
c00175c5:	e8 96 14 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00175ca:	83 c4 10             	add    esp,0x10
c00175cd:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175d2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175d8:	83 ec 08             	sub    esp,0x8
c00175db:	68 55 25 02 c0       	push   0xc0022555
c00175e0:	50                   	push   eax
c00175e1:	e8 c0 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00175e6:	83 c4 10             	add    esp,0x10
c00175e9:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175ee:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175f4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00175f8:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c00175fb:	83 ec 08             	sub    esp,0x8
c00175fe:	52                   	push   edx
c00175ff:	50                   	push   eax
c0017600:	e8 5b 14 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017605:	83 c4 10             	add    esp,0x10
c0017608:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001760d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017613:	83 ec 08             	sub    esp,0x8
c0017616:	68 5d 25 02 c0       	push   0xc002255d
c001761b:	50                   	push   eax
c001761c:	e8 85 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017621:	83 c4 10             	add    esp,0x10
c0017624:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017629:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001762f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017633:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017636:	83 ec 08             	sub    esp,0x8
c0017639:	52                   	push   edx
c001763a:	50                   	push   eax
c001763b:	e8 20 14 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017640:	83 c4 10             	add    esp,0x10
c0017643:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017648:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001764e:	83 ec 08             	sub    esp,0x8
c0017651:	68 65 25 02 c0       	push   0xc0022565
c0017656:	50                   	push   eax
c0017657:	e8 4a 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001765c:	83 c4 10             	add    esp,0x10
c001765f:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017664:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001766a:	83 ec 08             	sub    esp,0x8
c001766d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017671:	50                   	push   eax
c0017672:	e8 e9 13 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017677:	83 c4 10             	add    esp,0x10
c001767a:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001767f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017685:	83 ec 08             	sub    esp,0x8
c0017688:	68 6e 25 02 c0       	push   0xc002256e
c001768d:	50                   	push   eax
c001768e:	e8 13 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017693:	83 c4 10             	add    esp,0x10
c0017696:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001769b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176a1:	83 ec 08             	sub    esp,0x8
c00176a4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00176a8:	50                   	push   eax
c00176a9:	e8 b2 13 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00176ae:	83 c4 10             	add    esp,0x10
c00176b1:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176b6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176bc:	83 ec 08             	sub    esp,0x8
c00176bf:	68 76 25 02 c0       	push   0xc0022576
c00176c4:	50                   	push   eax
c00176c5:	e8 dc 13 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00176ca:	83 c4 10             	add    esp,0x10
c00176cd:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176d2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176d8:	83 ec 08             	sub    esp,0x8
c00176db:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00176df:	50                   	push   eax
c00176e0:	e8 7b 13 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00176e5:	83 c4 10             	add    esp,0x10
c00176e8:	fa                   	cli    
c00176e9:	f4                   	hlt    
c00176ea:	eb fe                	jmp    c00176ea <displayDebugInfo(regs*)+0x383>

c00176ec <HalSystemIdle()>:
c00176ec:	56                   	push   esi
c00176ed:	53                   	push   ebx
c00176ee:	83 ec 14             	sub    esp,0x14
c00176f1:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00176f6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00176fc:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0017702:	83 e0 04             	and    eax,0x4
c0017705:	0f b6 c0             	movzx  eax,al
c0017708:	85 c0                	test   eax,eax
c001770a:	0f 95 c0             	setne  al
c001770d:	0f b6 c0             	movzx  eax,al
c0017710:	85 c0                	test   eax,eax
c0017712:	74 4c                	je     c0017760 <HalSystemIdle()+0x74>
c0017714:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017719:	83 ec 08             	sub    esp,0x8
c001771c:	68 e1 00 00 00       	push   0xe1
c0017721:	50                   	push   eax
c0017722:	e8 99 f9 fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0017727:	83 c4 10             	add    esp,0x10
c001772a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001772e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017732:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017737:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001773b:	83 e2 02             	and    edx,0x2
c001773e:	89 d3                	mov    ebx,edx
c0017740:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017744:	83 e2 00             	and    edx,0x0
c0017747:	89 d6                	mov    esi,edx
c0017749:	56                   	push   esi
c001774a:	53                   	push   ebx
c001774b:	68 e1 00 00 00       	push   0xe1
c0017750:	50                   	push   eax
c0017751:	e8 96 f9 fe ff       	call   c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>
c0017756:	83 c4 10             	add    esp,0x10
c0017759:	e8 36 8a fe ff       	call   c0000194 <doTPAUSE>
c001775e:	eb 01                	jmp    c0017761 <HalSystemIdle()+0x75>
c0017760:	f4                   	hlt    
c0017761:	90                   	nop
c0017762:	83 c4 14             	add    esp,0x14
c0017765:	5b                   	pop    ebx
c0017766:	5e                   	pop    esi
c0017767:	c3                   	ret    

c0017768 <displayProgramFault(char const*)>:
c0017768:	83 ec 0c             	sub    esp,0xc
c001776b:	83 ec 0c             	sub    esp,0xc
c001776e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017772:	e8 ce 31 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017777:	83 c4 10             	add    esp,0x10
c001777a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001777f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017781:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017784:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001778a:	85 c0                	test   eax,eax
c001778c:	74 21                	je     c00177af <displayProgramFault(char const*)+0x47>
c001778e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017793:	8b 00                	mov    eax,DWORD PTR [eax]
c0017795:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017798:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001779e:	6a 04                	push   0x4
c00177a0:	6a 0f                	push   0xf
c00177a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00177a6:	50                   	push   eax
c00177a7:	e8 6c 13 ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00177ac:	83 c4 10             	add    esp,0x10
c00177af:	90                   	nop
c00177b0:	83 c4 0c             	add    esp,0xc
c00177b3:	c3                   	ret    

c00177b4 <gpFault(regs*, void*)>:
c00177b4:	83 ec 1c             	sub    esp,0x1c
c00177b7:	c7 05 74 97 02 c0 10 6c 01 c0 	mov    DWORD PTR ds:0xc0029774,0xc0016c10
c00177c1:	a1 74 97 02 c0       	mov    eax,ds:0xc0029774
c00177c6:	85 c0                	test   eax,eax
c00177c8:	74 1e                	je     c00177e8 <gpFault(regs*, void*)+0x34>
c00177ca:	a1 74 97 02 c0       	mov    eax,ds:0xc0029774
c00177cf:	83 ec 0c             	sub    esp,0xc
c00177d2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00177d6:	ff d0                	call   eax
c00177d8:	83 c4 10             	add    esp,0x10
c00177db:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00177df:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00177e4:	85 c0                	test   eax,eax
c00177e6:	75 2e                	jne    c0017816 <gpFault(regs*, void*)+0x62>
c00177e8:	83 ec 0c             	sub    esp,0xc
c00177eb:	68 7e 25 02 c0       	push   0xc002257e
c00177f0:	e8 73 ff ff ff       	call   c0017768 <displayProgramFault(char const*)>
c00177f5:	83 c4 10             	add    esp,0x10
c00177f8:	83 ec 0c             	sub    esp,0xc
c00177fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00177ff:	e8 63 fb ff ff       	call   c0017367 <displayDebugInfo(regs*)>
c0017804:	83 c4 10             	add    esp,0x10
c0017807:	83 ec 0c             	sub    esp,0xc
c001780a:	6a 00                	push   0x0
c001780c:	e8 a3 ed ff ff       	call   c00165b4 <Thr::terminateFromIRQ(int)>
c0017811:	83 c4 10             	add    esp,0x10
c0017814:	eb 01                	jmp    c0017817 <gpFault(regs*, void*)+0x63>
c0017816:	90                   	nop
c0017817:	83 c4 1c             	add    esp,0x1c
c001781a:	c3                   	ret    

c001781b <pgFault(regs*, void*)>:
c001781b:	83 ec 1c             	sub    esp,0x1c
c001781e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017822:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017825:	0f 20 d0             	mov    eax,cr2
c0017828:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001782c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017830:	83 ec 04             	sub    esp,0x4
c0017833:	52                   	push   edx
c0017834:	50                   	push   eax
c0017835:	68 5c 26 02 c0       	push   0xc002265c
c001783a:	e8 06 31 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001783f:	83 c4 10             	add    esp,0x10
c0017842:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017847:	8b 00                	mov    eax,DWORD PTR [eax]
c0017849:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001784c:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017852:	0f 20 d2             	mov    edx,cr2
c0017855:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017859:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001785d:	83 ec 08             	sub    esp,0x8
c0017860:	52                   	push   edx
c0017861:	50                   	push   eax
c0017862:	e8 29 2b ff ff       	call   c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>
c0017867:	83 c4 10             	add    esp,0x10
c001786a:	0f b6 c0             	movzx  eax,al
c001786d:	85 c0                	test   eax,eax
c001786f:	75 2e                	jne    c001789f <pgFault(regs*, void*)+0x84>
c0017871:	83 ec 0c             	sub    esp,0xc
c0017874:	68 97 25 02 c0       	push   0xc0022597
c0017879:	e8 ea fe ff ff       	call   c0017768 <displayProgramFault(char const*)>
c001787e:	83 c4 10             	add    esp,0x10
c0017881:	83 ec 0c             	sub    esp,0xc
c0017884:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017888:	e8 da fa ff ff       	call   c0017367 <displayDebugInfo(regs*)>
c001788d:	83 c4 10             	add    esp,0x10
c0017890:	83 ec 0c             	sub    esp,0xc
c0017893:	6a 00                	push   0x0
c0017895:	e8 1a ed ff ff       	call   c00165b4 <Thr::terminateFromIRQ(int)>
c001789a:	83 c4 10             	add    esp,0x10
c001789d:	eb 01                	jmp    c00178a0 <pgFault(regs*, void*)+0x85>
c001789f:	90                   	nop
c00178a0:	83 c4 1c             	add    esp,0x1c
c00178a3:	c3                   	ret    

c00178a4 <otherISRHandler(regs*, void*)>:
c00178a4:	83 ec 0c             	sub    esp,0xc
c00178a7:	83 ec 0c             	sub    esp,0xc
c00178aa:	68 84 26 02 c0       	push   0xc0022684
c00178af:	e8 b4 fe ff ff       	call   c0017768 <displayProgramFault(char const*)>
c00178b4:	83 c4 10             	add    esp,0x10
c00178b7:	83 ec 0c             	sub    esp,0xc
c00178ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00178be:	e8 a4 fa ff ff       	call   c0017367 <displayDebugInfo(regs*)>
c00178c3:	83 c4 10             	add    esp,0x10
c00178c6:	83 ec 0c             	sub    esp,0xc
c00178c9:	6a 00                	push   0x0
c00178cb:	e8 e4 ec ff ff       	call   c00165b4 <Thr::terminateFromIRQ(int)>
c00178d0:	83 c4 10             	add    esp,0x10
c00178d3:	90                   	nop
c00178d4:	83 c4 0c             	add    esp,0xc
c00178d7:	c3                   	ret    

c00178d8 <opcodeFault(regs*, void*)>:
c00178d8:	55                   	push   ebp
c00178d9:	89 e5                	mov    ebp,esp
c00178db:	83 ec 08             	sub    esp,0x8
c00178de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178e1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00178e4:	83 ec 08             	sub    esp,0x8
c00178e7:	50                   	push   eax
c00178e8:	68 a2 25 02 c0       	push   0xc00225a2
c00178ed:	e8 53 30 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00178f2:	83 c4 10             	add    esp,0x10
c00178f5:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00178fa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017900:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0017906:	0f b6 c0             	movzx  eax,al
c0017909:	85 c0                	test   eax,eax
c001790b:	74 21                	je     c001792e <opcodeFault(regs*, void*)+0x56>
c001790d:	83 ec 0c             	sub    esp,0xc
c0017910:	68 ac 26 02 c0       	push   0xc00226ac
c0017915:	e8 2b 30 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001791a:	83 c4 10             	add    esp,0x10
c001791d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017920:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017923:	8d 50 19             	lea    edx,[eax+0x19]
c0017926:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017929:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001792c:	eb 2b                	jmp    c0017959 <opcodeFault(regs*, void*)+0x81>
c001792e:	83 ec 0c             	sub    esp,0xc
c0017931:	68 b0 25 02 c0       	push   0xc00225b0
c0017936:	e8 2d fe ff ff       	call   c0017768 <displayProgramFault(char const*)>
c001793b:	83 c4 10             	add    esp,0x10
c001793e:	83 ec 0c             	sub    esp,0xc
c0017941:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017944:	e8 1e fa ff ff       	call   c0017367 <displayDebugInfo(regs*)>
c0017949:	83 c4 10             	add    esp,0x10
c001794c:	83 ec 0c             	sub    esp,0xc
c001794f:	6a 00                	push   0x0
c0017951:	e8 5e ec ff ff       	call   c00165b4 <Thr::terminateFromIRQ(int)>
c0017956:	83 c4 10             	add    esp,0x10
c0017959:	c9                   	leave  
c001795a:	c3                   	ret    

c001795b <i386SaveCoprocessor(void*)>:
c001795b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001795f:	83 c0 3f             	add    eax,0x3f
c0017962:	83 e0 c0             	and    eax,0xffffffc0
c0017965:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017969:	ff 25 70 97 02 c0    	jmp    DWORD PTR ds:0xc0029770

c001796f <i386LoadCoprocessor(void*)>:
c001796f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017973:	83 c0 3f             	add    eax,0x3f
c0017976:	83 e0 c0             	and    eax,0xffffffc0
c0017979:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001797d:	ff 25 6c 97 02 c0    	jmp    DWORD PTR ds:0xc002976c

c0017983 <x87EmulHandler(regs*, void*)>:
c0017983:	53                   	push   ebx
c0017984:	83 ec 08             	sub    esp,0x8
c0017987:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001798c:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017990:	74 10                	je     c00179a2 <x87EmulHandler(regs*, void*)+0x1f>
c0017992:	83 ec 0c             	sub    esp,0xc
c0017995:	68 bd 25 02 c0       	push   0xc00225bd
c001799a:	e8 ca 98 ff ff       	call   c0011269 <KePanic(char const*)>
c001799f:	83 c4 10             	add    esp,0x10
c00179a2:	0f 20 c0             	mov    eax,cr0
c00179a5:	a8 08                	test   al,0x8
c00179a7:	74 59                	je     c0017a02 <x87EmulHandler(regs*, void*)+0x7f>
c00179a9:	0f 06                	clts   
c00179ab:	a1 68 97 02 c0       	mov    eax,ds:0xc0029768
c00179b0:	85 c0                	test   eax,eax
c00179b2:	74 0e                	je     c00179c2 <x87EmulHandler(regs*, void*)+0x3f>
c00179b4:	83 ec 0c             	sub    esp,0xc
c00179b7:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00179ba:	e8 9c ff ff ff       	call   c001795b <i386SaveCoprocessor(void*)>
c00179bf:	83 c4 10             	add    esp,0x10
c00179c2:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00179c8:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c00179cc:	75 12                	jne    c00179e0 <x87EmulHandler(regs*, void*)+0x5d>
c00179ce:	83 ec 0c             	sub    esp,0xc
c00179d1:	68 40 02 00 00       	push   0x240
c00179d6:	e8 db 00 ff ff       	call   c0007ab6 <malloc>
c00179db:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c00179de:	eb 10                	jmp    c00179f0 <x87EmulHandler(regs*, void*)+0x6d>
c00179e0:	83 ec 0c             	sub    esp,0xc
c00179e3:	a1 68 97 02 c0       	mov    eax,ds:0xc0029768
c00179e8:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00179eb:	e8 7f ff ff ff       	call   c001796f <i386LoadCoprocessor(void*)>
c00179f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00179f5:	83 c4 10             	add    esp,0x10
c00179f8:	a3 68 97 02 c0       	mov    ds:0xc0029768,eax
c00179fd:	83 c4 08             	add    esp,0x8
c0017a00:	5b                   	pop    ebx
c0017a01:	c3                   	ret    
c0017a02:	83 ec 0c             	sub    esp,0xc
c0017a05:	68 d1 25 02 c0       	push   0xc00225d1
c0017a0a:	e8 36 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017a0f:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017a17:	83 c4 18             	add    esp,0x18
c0017a1a:	5b                   	pop    ebx
c0017a1b:	e9 94 eb ff ff       	jmp    c00165b4 <Thr::terminateFromIRQ(int)>

c0017a20 <HalInitialiseCoprocessor()>:
c0017a20:	83 ec 10             	sub    esp,0x10
c0017a23:	c7 05 68 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029768,0x0
c0017a2d:	6a 00                	push   0x0
c0017a2f:	68 83 79 01 c0       	push   0xc0017983
c0017a34:	6a 07                	push   0x7
c0017a36:	e8 33 51 ff ff       	call   c000cb6e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017a3b:	e8 50 70 00 00       	call   c001ea90 <avxDetect>
c0017a40:	83 c4 10             	add    esp,0x10
c0017a43:	85 c0                	test   eax,eax
c0017a45:	74 1c                	je     c0017a63 <HalInitialiseCoprocessor()+0x43>
c0017a47:	c7 05 70 97 02 c0 ba ea 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001eaba
c0017a51:	c7 05 6c 97 02 c0 cb ea 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001eacb
c0017a5b:	83 c4 0c             	add    esp,0xc
c0017a5e:	e9 79 70 00 00       	jmp    c001eadc <avxInit>
c0017a63:	e8 b8 73 00 00       	call   c001ee20 <absolutelyNoChanceInHell>
c0017a68:	85 c0                	test   eax,eax
c0017a6a:	74 1c                	je     c0017a88 <HalInitialiseCoprocessor()+0x68>
c0017a6c:	c7 05 70 97 02 c0 38 ee 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001ee38
c0017a76:	c7 05 6c 97 02 c0 40 ee 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001ee40
c0017a80:	83 c4 0c             	add    esp,0xc
c0017a83:	e9 c0 73 00 00       	jmp    c001ee48 <sseInit>
c0017a88:	e8 d9 73 00 00       	call   c001ee66 <x87Detect>
c0017a8d:	85 c0                	test   eax,eax
c0017a8f:	74 1c                	je     c0017aad <HalInitialiseCoprocessor()+0x8d>
c0017a91:	c7 05 70 97 02 c0 81 ee 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001ee81
c0017a9b:	c7 05 6c 97 02 c0 88 ee 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001ee88
c0017aa5:	83 c4 0c             	add    esp,0xc
c0017aa8:	e9 e2 73 00 00       	jmp    c001ee8f <x87Init>
c0017aad:	c7 05 70 97 02 c0 34 73 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc0017334
c0017ab7:	c7 05 6c 97 02 c0 34 73 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc0017334
c0017ac1:	0f 20 c0             	mov    eax,cr0
c0017ac4:	83 c8 04             	or     eax,0x4
c0017ac7:	0f 22 c0             	mov    cr0,eax
c0017aca:	83 c4 0c             	add    esp,0xc
c0017acd:	c3                   	ret    

c0017ace <HalPanic(char const*)>:
c0017ace:	53                   	push   ebx
c0017acf:	83 ec 10             	sub    esp,0x10
c0017ad2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017ad6:	fa                   	cli    
c0017ad7:	53                   	push   ebx
c0017ad8:	68 e7 25 02 c0       	push   0xc00225e7
c0017add:	e8 63 2e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017ae2:	a1 64 97 02 c0       	mov    eax,ds:0xc0029764
c0017ae7:	83 c4 10             	add    esp,0x10
c0017aea:	85 c0                	test   eax,eax
c0017aec:	74 09                	je     c0017af7 <HalPanic(char const*)+0x29>
c0017aee:	83 ec 0c             	sub    esp,0xc
c0017af1:	53                   	push   ebx
c0017af2:	ff d0                	call   eax
c0017af4:	83 c4 10             	add    esp,0x10
c0017af7:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c0017afc:	85 c0                	test   eax,eax
c0017afe:	0f 84 dc 00 00 00    	je     c0017be0 <HalPanic(char const*)+0x112>
c0017b04:	52                   	push   edx
c0017b05:	6a 01                	push   0x1
c0017b07:	6a 0f                	push   0xf
c0017b09:	50                   	push   eax
c0017b0a:	e8 a5 0a ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017b0f:	59                   	pop    ecx
c0017b10:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b16:	e8 89 0c ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0017b1b:	58                   	pop    eax
c0017b1c:	5a                   	pop    edx
c0017b1d:	68 e4 08 02 c0       	push   0xc00208e4
c0017b22:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b28:	e8 bf 0a ff ff       	call   c00085ec <VgaText::setTitle(char*)>
c0017b2d:	83 c4 0c             	add    esp,0xc
c0017b30:	6a 01                	push   0x1
c0017b32:	6a 0f                	push   0xf
c0017b34:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b3a:	e8 75 0a ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017b3f:	59                   	pop    ecx
c0017b40:	58                   	pop    eax
c0017b41:	68 00 26 02 c0       	push   0xc0022600
c0017b46:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b4c:	e8 55 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b51:	83 c4 0c             	add    esp,0xc
c0017b54:	6a 0f                	push   0xf
c0017b56:	6a 01                	push   0x1
c0017b58:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b5e:	e8 51 0a ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017b63:	58                   	pop    eax
c0017b64:	5a                   	pop    edx
c0017b65:	68 09 26 02 c0       	push   0xc0022609
c0017b6a:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b70:	e8 31 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b75:	83 c4 0c             	add    esp,0xc
c0017b78:	6a 01                	push   0x1
c0017b7a:	6a 0f                	push   0xf
c0017b7c:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b82:	e8 2d 0a ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017b87:	59                   	pop    ecx
c0017b88:	58                   	pop    eax
c0017b89:	68 4d 26 02 c0       	push   0xc002264d
c0017b8e:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b94:	e8 0d 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b99:	58                   	pop    eax
c0017b9a:	5a                   	pop    edx
c0017b9b:	68 16 26 02 c0       	push   0xc0022616
c0017ba0:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017ba6:	e8 fb 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017bab:	59                   	pop    ecx
c0017bac:	58                   	pop    eax
c0017bad:	68 50 26 02 c0       	push   0xc0022650
c0017bb2:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017bb8:	e8 e9 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017bbd:	58                   	pop    eax
c0017bbe:	5a                   	pop    edx
c0017bbf:	53                   	push   ebx
c0017bc0:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017bc6:	e8 db 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017bcb:	59                   	pop    ecx
c0017bcc:	5b                   	pop    ebx
c0017bcd:	68 4d 26 02 c0       	push   0xc002264d
c0017bd2:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017bd8:	e8 c9 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017bdd:	83 c4 10             	add    esp,0x10
c0017be0:	eb fe                	jmp    c0017be0 <HalPanic(char const*)+0x112>

c0017be2 <HalQueryPerformanceCounter()>:
c0017be2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017be7:	31 d2                	xor    edx,edx
c0017be9:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017bef:	31 c0                	xor    eax,eax
c0017bf1:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0017bf8:	74 02                	je     c0017bfc <HalQueryPerformanceCounter()+0x1a>
c0017bfa:	0f 31                	rdtsc  
c0017bfc:	c3                   	ret    

c0017bfd <HalInitialise()>:
c0017bfd:	53                   	push   ebx
c0017bfe:	83 ec 08             	sub    esp,0x8
c0017c01:	e8 98 51 ff ff       	call   c000cd9e <setupINTS()>
c0017c06:	80 3d e0 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028be0,0x0
c0017c0d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017c12:	75 0f                	jne    c0017c23 <HalInitialise()+0x26>
c0017c14:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017c1a:	83 e2 fe             	and    edx,0xfffffffe
c0017c1d:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017c23:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017c29:	c6 05 60 97 02 c0 00 	mov    BYTE PTR ds:0xc0029760,0x0
c0017c30:	83 e2 fe             	and    edx,0xfffffffe
c0017c33:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017c39:	e8 9e 02 00 00       	call   c0017edc <picOpen()>
c0017c3e:	80 3d 60 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029760,0x0
c0017c45:	74 0a                	je     c0017c51 <HalInitialise()+0x54>
c0017c47:	e8 e0 01 00 00       	call   c0017e2c <picDisable()>
c0017c4c:	e8 ad 67 00 00       	call   c001e3fe <apicOpen()>
c0017c51:	bb 0f 00 00 00       	mov    ebx,0xf
c0017c56:	50                   	push   eax
c0017c57:	6a 00                	push   0x0
c0017c59:	68 a4 78 01 c0       	push   0xc00178a4
c0017c5e:	6a 00                	push   0x0
c0017c60:	e8 09 4f ff ff       	call   c000cb6e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c65:	83 c4 0c             	add    esp,0xc
c0017c68:	6a 00                	push   0x0
c0017c6a:	68 a4 78 01 c0       	push   0xc00178a4
c0017c6f:	6a 01                	push   0x1
c0017c71:	e8 f8 4e ff ff       	call   c000cb6e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c76:	83 c4 0c             	add    esp,0xc
c0017c79:	6a 00                	push   0x0
c0017c7b:	68 35 73 01 c0       	push   0xc0017335
c0017c80:	6a 02                	push   0x2
c0017c82:	e8 e7 4e ff ff       	call   c000cb6e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c87:	83 c4 0c             	add    esp,0xc
c0017c8a:	6a 00                	push   0x0
c0017c8c:	68 a4 78 01 c0       	push   0xc00178a4
c0017c91:	6a 03                	push   0x3
c0017c93:	e8 d6 4e ff ff       	call   c000cb6e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c98:	83 c4 0c             	add    esp,0xc
c0017c9b:	6a 00                	push   0x0
c0017c9d:	68 a4 78 01 c0       	push   0xc00178a4
c0017ca2:	6a 04                	push   0x4
c0017ca4:	e8 c5 4e ff ff       	call   c000cb6e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017ca9:	83 c4 0c             	add    esp,0xc
c0017cac:	6a 00                	push   0x0
c0017cae:	68 a4 78 01 c0       	push   0xc00178a4
c0017cb3:	6a 05                	push   0x5
c0017cb5:	e8 b4 4e ff ff       	call   c000cb6e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017cba:	83 c4 0c             	add    esp,0xc
c0017cbd:	6a 00                	push   0x0
c0017cbf:	68 d8 78 01 c0       	push   0xc00178d8
c0017cc4:	6a 06                	push   0x6
c0017cc6:	e8 a3 4e ff ff       	call   c000cb6e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017ccb:	83 c4 0c             	add    esp,0xc
c0017cce:	6a 00                	push   0x0
c0017cd0:	68 4e 73 01 c0       	push   0xc001734e
c0017cd5:	6a 08                	push   0x8
c0017cd7:	e8 92 4e ff ff       	call   c000cb6e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017cdc:	83 c4 0c             	add    esp,0xc
c0017cdf:	6a 00                	push   0x0
c0017ce1:	68 a4 78 01 c0       	push   0xc00178a4
c0017ce6:	6a 09                	push   0x9
c0017ce8:	e8 81 4e ff ff       	call   c000cb6e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017ced:	83 c4 0c             	add    esp,0xc
c0017cf0:	6a 00                	push   0x0
c0017cf2:	68 a4 78 01 c0       	push   0xc00178a4
c0017cf7:	6a 0a                	push   0xa
c0017cf9:	e8 70 4e ff ff       	call   c000cb6e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017cfe:	83 c4 0c             	add    esp,0xc
c0017d01:	6a 00                	push   0x0
c0017d03:	68 a4 78 01 c0       	push   0xc00178a4
c0017d08:	6a 0b                	push   0xb
c0017d0a:	e8 5f 4e ff ff       	call   c000cb6e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d0f:	83 c4 0c             	add    esp,0xc
c0017d12:	6a 00                	push   0x0
c0017d14:	68 b4 77 01 c0       	push   0xc00177b4
c0017d19:	6a 0d                	push   0xd
c0017d1b:	e8 4e 4e ff ff       	call   c000cb6e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d20:	83 c4 0c             	add    esp,0xc
c0017d23:	6a 00                	push   0x0
c0017d25:	68 1b 78 01 c0       	push   0xc001781b
c0017d2a:	6a 0e                	push   0xe
c0017d2c:	e8 3d 4e ff ff       	call   c000cb6e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d31:	83 c4 10             	add    esp,0x10
c0017d34:	50                   	push   eax
c0017d35:	6a 00                	push   0x0
c0017d37:	68 a4 78 01 c0       	push   0xc00178a4
c0017d3c:	53                   	push   ebx
c0017d3d:	43                   	inc    ebx
c0017d3e:	e8 2b 4e ff ff       	call   c000cb6e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d43:	83 c4 10             	add    esp,0x10
c0017d46:	83 fb 1e             	cmp    ebx,0x1e
c0017d49:	75 e9                	jne    c0017d34 <HalInitialise()+0x137>
c0017d4b:	50                   	push   eax
c0017d4c:	6a 00                	push   0x0
c0017d4e:	68 51 25 01 c0       	push   0xc0012551
c0017d53:	6a 60                	push   0x60
c0017d55:	e8 14 4e ff ff       	call   c000cb6e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d5a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017d5f:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0017d69:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0017d70:	e8 41 fd fe ff       	call   c0007ab6 <malloc>
c0017d75:	89 04 24             	mov    DWORD PTR [esp],eax
c0017d78:	89 c3                	mov    ebx,eax
c0017d7a:	e8 3b 09 00 00       	call   c00186ba <RTC::RTC()>
c0017d7f:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0017d89:	5a                   	pop    edx
c0017d8a:	59                   	pop    ecx
c0017d8b:	53                   	push   ebx
c0017d8c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017d92:	e8 a3 48 ff ff       	call   c000c63a <Device::addChild(Device*)>
c0017d97:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017d99:	6a 00                	push   0x0
c0017d9b:	6a 00                	push   0x0
c0017d9d:	6a 00                	push   0x0
c0017d9f:	53                   	push   ebx
c0017da0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017da3:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017da8:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0017dae:	83 c4 28             	add    esp,0x28
c0017db1:	5b                   	pop    ebx
c0017db2:	c3                   	ret    

c0017db3 <HalMakeBeep(int)>:
c0017db3:	53                   	push   ebx
c0017db4:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017db8:	85 db                	test   ebx,ebx
c0017dba:	75 07                	jne    c0017dc3 <HalMakeBeep(int)+0x10>
c0017dbc:	e4 61                	in     al,0x61
c0017dbe:	83 e0 fc             	and    eax,0xfffffffc
c0017dc1:	eb 26                	jmp    c0017de9 <HalMakeBeep(int)+0x36>
c0017dc3:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0017dc8:	99                   	cdq    
c0017dc9:	f7 fb                	idiv   ebx
c0017dcb:	89 c1                	mov    ecx,eax
c0017dcd:	b0 b6                	mov    al,0xb6
c0017dcf:	e6 43                	out    0x43,al
c0017dd1:	88 c8                	mov    al,cl
c0017dd3:	e6 42                	out    0x42,al
c0017dd5:	89 c8                	mov    eax,ecx
c0017dd7:	c1 e8 08             	shr    eax,0x8
c0017dda:	e6 42                	out    0x42,al
c0017ddc:	e4 61                	in     al,0x61
c0017dde:	89 c2                	mov    edx,eax
c0017de0:	83 ca 03             	or     edx,0x3
c0017de3:	38 d0                	cmp    al,dl
c0017de5:	74 04                	je     c0017deb <HalMakeBeep(int)+0x38>
c0017de7:	88 d0                	mov    al,dl
c0017de9:	e6 61                	out    0x61,al
c0017deb:	5b                   	pop    ebx
c0017dec:	c3                   	ret    

c0017ded <HalGetRand()>:
c0017ded:	31 c0                	xor    eax,eax
c0017def:	c3                   	ret    

c0017df0 <HalEndOfInterrupt(int)>:
c0017df0:	80 3d 60 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029760,0x0
c0017df7:	74 23                	je     c0017e1c <HalEndOfInterrupt(int)+0x2c>
c0017df9:	83 ec 14             	sub    esp,0x14
c0017dfc:	6a 1b                	push   0x1b
c0017dfe:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017e04:	e8 b7 f2 fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0017e09:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017e0e:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0017e18:	83 c4 1c             	add    esp,0x1c
c0017e1b:	c3                   	ret    
c0017e1c:	e9 3f 02 00 00       	jmp    c0018060 <picEOI(int)>

c0017e21 <HalRestart()>:
c0017e21:	c3                   	ret    

c0017e22 <HalShutdown()>:
c0017e22:	c3                   	ret    

c0017e23 <HalSleep()>:
c0017e23:	c3                   	ret    

c0017e24 <picIoWait()>:
c0017e24:	eb 00                	jmp    c0017e26 <picIoWait()+0x2>
c0017e26:	eb 00                	jmp    c0017e28 <picIoWait()+0x4>
c0017e28:	90                   	nop
c0017e29:	c3                   	ret    
c0017e2a:	66 90                	xchg   ax,ax

c0017e2c <picDisable()>:
c0017e2c:	83 ec 10             	sub    esp,0x10
c0017e2f:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0017e36:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0017e3b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017e3f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0017e44:	ee                   	out    dx,al
c0017e45:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0017e4c:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0017e51:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017e55:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0017e5a:	ee                   	out    dx,al
c0017e5b:	90                   	nop
c0017e5c:	83 c4 10             	add    esp,0x10
c0017e5f:	c3                   	ret    

c0017e60 <picGetIRQReg(int)>:
c0017e60:	83 ec 10             	sub    esp,0x10
c0017e63:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017e67:	0f b6 c0             	movzx  eax,al
c0017e6a:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0017e71:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0017e75:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0017e79:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0017e7e:	ee                   	out    dx,al
c0017e7f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017e83:	0f b6 c0             	movzx  eax,al
c0017e86:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017e8d:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0017e91:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0017e95:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0017e9a:	ee                   	out    dx,al
c0017e9b:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0017ea2:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0017ea7:	89 c2                	mov    edx,eax
c0017ea9:	ec                   	in     al,dx
c0017eaa:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017eae:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017eb2:	0f b6 c0             	movzx  eax,al
c0017eb5:	c1 e0 08             	shl    eax,0x8
c0017eb8:	89 c1                	mov    ecx,eax
c0017eba:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0017ec1:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0017ec6:	89 c2                	mov    edx,eax
c0017ec8:	ec                   	in     al,dx
c0017ec9:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0017ecd:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017ed1:	0f b6 c0             	movzx  eax,al
c0017ed4:	09 c8                	or     eax,ecx
c0017ed6:	83 c4 10             	add    esp,0x10
c0017ed9:	c3                   	ret    
c0017eda:	66 90                	xchg   ax,ax

c0017edc <picOpen()>:
c0017edc:	83 ec 50             	sub    esp,0x50
c0017edf:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0017ee6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0017eeb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017eef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017ef3:	ee                   	out    dx,al
c0017ef4:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0017efb:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0017f00:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017f04:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017f08:	ee                   	out    dx,al
c0017f09:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0017f11:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0017f19:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0017f20:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017f24:	89 c2                	mov    edx,eax
c0017f26:	ec                   	in     al,dx
c0017f27:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0017f2b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017f2f:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0017f33:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0017f3a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017f3e:	89 c2                	mov    edx,eax
c0017f40:	ec                   	in     al,dx
c0017f41:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017f45:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017f49:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0017f4d:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0017f54:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0017f59:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017f5d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017f61:	ee                   	out    dx,al
c0017f62:	e8 bd fe ff ff       	call   c0017e24 <picIoWait()>
c0017f67:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0017f6e:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0017f73:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0017f77:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017f7b:	ee                   	out    dx,al
c0017f7c:	e8 a3 fe ff ff       	call   c0017e24 <picIoWait()>
c0017f81:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017f85:	0f b6 c0             	movzx  eax,al
c0017f88:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0017f8f:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0017f93:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0017f97:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f9b:	ee                   	out    dx,al
c0017f9c:	e8 83 fe ff ff       	call   c0017e24 <picIoWait()>
c0017fa1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017fa5:	0f b6 c0             	movzx  eax,al
c0017fa8:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0017faf:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017fb3:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0017fb7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017fbb:	ee                   	out    dx,al
c0017fbc:	e8 63 fe ff ff       	call   c0017e24 <picIoWait()>
c0017fc1:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0017fc8:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0017fcd:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0017fd1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017fd5:	ee                   	out    dx,al
c0017fd6:	e8 49 fe ff ff       	call   c0017e24 <picIoWait()>
c0017fdb:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0017fe2:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0017fe7:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0017feb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017fef:	ee                   	out    dx,al
c0017ff0:	e8 2f fe ff ff       	call   c0017e24 <picIoWait()>
c0017ff5:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0017ffc:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0018001:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0018005:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018009:	ee                   	out    dx,al
c001800a:	e8 15 fe ff ff       	call   c0017e24 <picIoWait()>
c001800f:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0018016:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001801b:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001801f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018023:	ee                   	out    dx,al
c0018024:	e8 fb fd ff ff       	call   c0017e24 <picIoWait()>
c0018029:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001802e:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0018035:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0018039:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001803d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018041:	ee                   	out    dx,al
c0018042:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0018047:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001804e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018052:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0018056:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001805a:	ee                   	out    dx,al
c001805b:	90                   	nop
c001805c:	83 c4 50             	add    esp,0x50
c001805f:	c3                   	ret    

c0018060 <picEOI(int)>:
c0018060:	83 ec 10             	sub    esp,0x10
c0018063:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018068:	75 1e                	jne    c0018088 <picEOI(int)+0x28>
c001806a:	6a 0b                	push   0xb
c001806c:	e8 ef fd ff ff       	call   c0017e60 <picGetIRQReg(int)>
c0018071:	83 c4 04             	add    esp,0x4
c0018074:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0018079:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001807e:	25 80 00 00 00       	and    eax,0x80
c0018083:	74 73                	je     c00180f8 <picEOI(int)+0x98>
c0018085:	8d 76 00             	lea    esi,[esi+0x0]
c0018088:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001808d:	75 31                	jne    c00180c0 <picEOI(int)+0x60>
c001808f:	6a 0b                	push   0xb
c0018091:	e8 ca fd ff ff       	call   c0017e60 <picGetIRQReg(int)>
c0018096:	83 c4 04             	add    esp,0x4
c0018099:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001809e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180a2:	98                   	cwde   
c00180a3:	85 c0                	test   eax,eax
c00180a5:	78 19                	js     c00180c0 <picEOI(int)+0x60>
c00180a7:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c00180ae:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c00180b3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00180b7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00180bc:	ee                   	out    dx,al
c00180bd:	eb 3d                	jmp    c00180fc <picEOI(int)+0x9c>
c00180bf:	90                   	nop
c00180c0:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00180c5:	7e 19                	jle    c00180e0 <picEOI(int)+0x80>
c00180c7:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00180ce:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c00180d3:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00180d7:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00180dc:	ee                   	out    dx,al
c00180dd:	8d 76 00             	lea    esi,[esi+0x0]
c00180e0:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00180e7:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c00180ec:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00180f0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00180f5:	ee                   	out    dx,al
c00180f6:	eb 04                	jmp    c00180fc <picEOI(int)+0x9c>
c00180f8:	90                   	nop
c00180f9:	8d 76 00             	lea    esi,[esi+0x0]
c00180fc:	83 c4 10             	add    esp,0x10
c00180ff:	c3                   	ret    

c0018100 <RTC::open(int, int, void*)>:
c0018100:	31 c0                	xor    eax,eax
c0018102:	c3                   	ret    
c0018103:	90                   	nop

c0018104 <RTC::close(int, int, void*)>:
c0018104:	31 c0                	xor    eax,eax
c0018106:	c3                   	ret    
c0018107:	90                   	nop

c0018108 <RTC::timeInSecondsUTC()>:
c0018108:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001810c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0018112:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018118:	c3                   	ret    
c0018119:	90                   	nop

c001811a <RTC::timeInDatetimeUTC()>:
c001811a:	53                   	push   ebx
c001811b:	83 ec 14             	sub    esp,0x14
c001811e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018126:	8b 10                	mov    edx,DWORD PTR [eax]
c0018128:	50                   	push   eax
c0018129:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001812c:	83 c4 0c             	add    esp,0xc
c001812f:	52                   	push   edx
c0018130:	50                   	push   eax
c0018131:	53                   	push   ebx
c0018132:	e8 77 42 ff ff       	call   c000c3ae <secondsToDatetime(unsigned long long)>
c0018137:	89 d8                	mov    eax,ebx
c0018139:	83 c4 14             	add    esp,0x14
c001813c:	5b                   	pop    ebx
c001813d:	c2 04 00             	ret    0x4

c0018140 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0018140:	56                   	push   esi
c0018141:	53                   	push   ebx
c0018142:	83 ec 14             	sub    esp,0x14
c0018145:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018149:	8b 03                	mov    eax,DWORD PTR [ebx]
c001814b:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001814e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018152:	52                   	push   edx
c0018153:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018157:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001815b:	50                   	push   eax
c001815c:	e8 4d 42 ff ff       	call   c000c3ae <secondsToDatetime(unsigned long long)>
c0018161:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018165:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018169:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001816d:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0018171:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0018175:	89 f0                	mov    eax,esi
c0018177:	83 c4 20             	add    esp,0x20
c001817a:	5b                   	pop    ebx
c001817b:	5e                   	pop    esi
c001817c:	ff e0                	jmp    eax

c001817e <RTC::~RTC()>:
c001817e:	83 ec 0c             	sub    esp,0xc
c0018181:	ba ec 26 02 c0       	mov    edx,0xc00226ec
c0018186:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001818a:	89 10                	mov    DWORD PTR [eax],edx
c001818c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018190:	83 ec 0c             	sub    esp,0xc
c0018193:	50                   	push   eax
c0018194:	e8 a7 3f ff ff       	call   c000c140 <Clock::~Clock()>
c0018199:	83 c4 10             	add    esp,0x10
c001819c:	90                   	nop
c001819d:	83 c4 0c             	add    esp,0xc
c00181a0:	c3                   	ret    
c00181a1:	90                   	nop

c00181a2 <RTC::~RTC()>:
c00181a2:	83 ec 0c             	sub    esp,0xc
c00181a5:	83 ec 0c             	sub    esp,0xc
c00181a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00181ac:	e8 cd ff ff ff       	call   c001817e <RTC::~RTC()>
c00181b1:	83 c4 10             	add    esp,0x10
c00181b4:	83 ec 08             	sub    esp,0x8
c00181b7:	68 60 01 00 00       	push   0x160
c00181bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00181c0:	e8 53 26 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00181c5:	83 c4 10             	add    esp,0x10
c00181c8:	83 c4 0c             	add    esp,0xc
c00181cb:	c3                   	ret    

c00181cc <RTC::get_update_in_progress_flag()>:
c00181cc:	83 ec 14             	sub    esp,0x14
c00181cf:	6a 0a                	push   0xa
c00181d1:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00181d7:	e8 9c ef fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00181dc:	83 c4 1c             	add    esp,0x1c
c00181df:	0f b6 c0             	movzx  eax,al
c00181e2:	c1 e8 07             	shr    eax,0x7
c00181e5:	c3                   	ret    

c00181e6 <RTC::completeRTCRefresh()>:
c00181e6:	55                   	push   ebp
c00181e7:	57                   	push   edi
c00181e8:	56                   	push   esi
c00181e9:	53                   	push   ebx
c00181ea:	83 ec 3c             	sub    esp,0x3c
c00181ed:	8b 1d ec 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288ec
c00181f3:	83 ec 0c             	sub    esp,0xc
c00181f6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00181fa:	e8 cd ff ff ff       	call   c00181cc <RTC::get_update_in_progress_flag()>
c00181ff:	83 c4 10             	add    esp,0x10
c0018202:	84 c0                	test   al,al
c0018204:	74 0e                	je     c0018214 <RTC::completeRTCRefresh()+0x2e>
c0018206:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001820c:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c0018212:	73 df                	jae    c00181f3 <RTC::completeRTCRefresh()+0xd>
c0018214:	51                   	push   ecx
c0018215:	51                   	push   ecx
c0018216:	6a 00                	push   0x0
c0018218:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001821e:	e8 55 ef fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018223:	5b                   	pop    ebx
c0018224:	89 c7                	mov    edi,eax
c0018226:	5e                   	pop    esi
c0018227:	6a 02                	push   0x2
c0018229:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001822f:	e8 44 ef fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018234:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0018238:	5d                   	pop    ebp
c0018239:	58                   	pop    eax
c001823a:	6a 04                	push   0x4
c001823c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018242:	e8 31 ef fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018247:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001824b:	58                   	pop    eax
c001824c:	5a                   	pop    edx
c001824d:	6a 07                	push   0x7
c001824f:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018255:	e8 1e ef fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001825a:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001825e:	59                   	pop    ecx
c001825f:	5b                   	pop    ebx
c0018260:	6a 08                	push   0x8
c0018262:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018268:	e8 0b ef fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001826d:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0018271:	5e                   	pop    esi
c0018272:	5d                   	pop    ebp
c0018273:	6a 09                	push   0x9
c0018275:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001827b:	e8 f8 ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018280:	0f b6 c0             	movzx  eax,al
c0018283:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0018287:	83 c4 10             	add    esp,0x10
c001828a:	8b 1d ec 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288ec
c0018290:	83 ec 0c             	sub    esp,0xc
c0018293:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0018297:	e8 30 ff ff ff       	call   c00181cc <RTC::get_update_in_progress_flag()>
c001829c:	83 c4 10             	add    esp,0x10
c001829f:	84 c0                	test   al,al
c00182a1:	74 0e                	je     c00182b1 <RTC::completeRTCRefresh()+0xcb>
c00182a3:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00182a9:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c00182af:	73 df                	jae    c0018290 <RTC::completeRTCRefresh()+0xaa>
c00182b1:	51                   	push   ecx
c00182b2:	51                   	push   ecx
c00182b3:	6a 00                	push   0x0
c00182b5:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00182bb:	e8 b8 ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00182c0:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00182c4:	5b                   	pop    ebx
c00182c5:	5e                   	pop    esi
c00182c6:	6a 02                	push   0x2
c00182c8:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00182ce:	e8 a5 ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00182d3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00182d7:	5d                   	pop    ebp
c00182d8:	58                   	pop    eax
c00182d9:	6a 04                	push   0x4
c00182db:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00182e1:	e8 92 ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00182e6:	88 c3                	mov    bl,al
c00182e8:	58                   	pop    eax
c00182e9:	5a                   	pop    edx
c00182ea:	6a 07                	push   0x7
c00182ec:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00182f2:	e8 81 ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00182f7:	59                   	pop    ecx
c00182f8:	89 c6                	mov    esi,eax
c00182fa:	5d                   	pop    ebp
c00182fb:	6a 08                	push   0x8
c00182fd:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018303:	e8 70 ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018308:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001830c:	58                   	pop    eax
c001830d:	5a                   	pop    edx
c001830e:	6a 09                	push   0x9
c0018310:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018316:	e8 5d ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001831b:	89 f9                	mov    ecx,edi
c001831d:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018321:	0f b6 e8             	movzx  ebp,al
c0018324:	83 c4 10             	add    esp,0x10
c0018327:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c001832b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018330:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c0018335:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018339:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001833d:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0018341:	0f 94 c0             	sete   al
c0018344:	0f b6 fb             	movzx  edi,bl
c0018347:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c001834b:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0018350:	0f 94 c2             	sete   dl
c0018353:	21 d0                	and    eax,edx
c0018355:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0018359:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001835d:	0f 94 c2             	sete   dl
c0018360:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0018364:	21 c2                	and    edx,eax
c0018366:	89 f0                	mov    eax,esi
c0018368:	0f b6 c0             	movzx  eax,al
c001836b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001836f:	89 f0                	mov    eax,esi
c0018371:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c0018375:	0f 94 c0             	sete   al
c0018378:	21 d0                	and    eax,edx
c001837a:	31 d2                	xor    edx,edx
c001837c:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0018380:	0f 94 c2             	sete   dl
c0018383:	85 c2                	test   edx,eax
c0018385:	75 27                	jne    c00183ae <RTC::completeRTCRefresh()+0x1c8>
c0018387:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001838b:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c001838f:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0018393:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0018397:	89 f0                	mov    eax,esi
c0018399:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001839d:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00183a1:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00183a5:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00183a9:	e9 dc fe ff ff       	jmp    c001828a <RTC::completeRTCRefresh()+0xa4>
c00183ae:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c00183b2:	75 d3                	jne    c0018387 <RTC::completeRTCRefresh()+0x1a1>
c00183b4:	52                   	push   edx
c00183b5:	52                   	push   edx
c00183b6:	6a 0b                	push   0xb
c00183b8:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00183be:	e8 b5 ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00183c3:	83 c4 10             	add    esp,0x10
c00183c6:	a8 04                	test   al,0x4
c00183c8:	75 7a                	jne    c0018444 <RTC::completeRTCRefresh()+0x25e>
c00183ca:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00183ce:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00183d2:	83 e1 0f             	and    ecx,0xf
c00183d5:	c1 ea 04             	shr    edx,0x4
c00183d8:	c1 ef 04             	shr    edi,0x4
c00183db:	6b d2 0a             	imul   edx,edx,0xa
c00183de:	83 e6 0f             	and    esi,0xf
c00183e1:	01 d1                	add    ecx,edx
c00183e3:	c1 ed 04             	shr    ebp,0x4
c00183e6:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00183ea:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00183ee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00183f2:	c1 ea 04             	shr    edx,0x4
c00183f5:	83 e1 0f             	and    ecx,0xf
c00183f8:	6b d2 0a             	imul   edx,edx,0xa
c00183fb:	6b ed 0a             	imul   ebp,ebp,0xa
c00183fe:	01 d1                	add    ecx,edx
c0018400:	89 fa                	mov    edx,edi
c0018402:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018406:	83 e2 07             	and    edx,0x7
c0018409:	89 d9                	mov    ecx,ebx
c001840b:	6b d2 0a             	imul   edx,edx,0xa
c001840e:	83 e1 0f             	and    ecx,0xf
c0018411:	83 e3 80             	and    ebx,0xffffff80
c0018414:	01 d1                	add    ecx,edx
c0018416:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001841a:	09 cb                	or     ebx,ecx
c001841c:	c1 ea 04             	shr    edx,0x4
c001841f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018423:	6b d2 0a             	imul   edx,edx,0xa
c0018426:	83 e1 0f             	and    ecx,0xf
c0018429:	01 d6                	add    esi,edx
c001842b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001842f:	c1 ea 04             	shr    edx,0x4
c0018432:	6b d2 0a             	imul   edx,edx,0xa
c0018435:	01 d1                	add    ecx,edx
c0018437:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001843b:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001843f:	83 e2 0f             	and    edx,0xf
c0018442:	01 d5                	add    ebp,edx
c0018444:	a8 02                	test   al,0x2
c0018446:	75 15                	jne    c001845d <RTC::completeRTCRefresh()+0x277>
c0018448:	f6 c3 80             	test   bl,0x80
c001844b:	74 10                	je     c001845d <RTC::completeRTCRefresh()+0x277>
c001844d:	83 e3 7f             	and    ebx,0x7f
c0018450:	b9 18 00 00 00       	mov    ecx,0x18
c0018455:	8d 43 0c             	lea    eax,[ebx+0xc]
c0018458:	99                   	cdq    
c0018459:	f7 f9                	idiv   ecx
c001845b:	88 d3                	mov    bl,dl
c001845d:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0018463:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0018469:	77 06                	ja     c0018471 <RTC::completeRTCRefresh()+0x28b>
c001846b:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0018471:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018476:	31 c9                	xor    ecx,ecx
c0018478:	c1 e0 10             	shl    eax,0x10
c001847b:	89 cd                	mov    ebp,ecx
c001847d:	c1 e7 10             	shl    edi,0x10
c0018480:	31 d2                	xor    edx,edx
c0018482:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0018488:	09 c5                	or     ebp,eax
c001848a:	89 f0                	mov    eax,esi
c001848c:	89 e9                	mov    ecx,ebp
c001848e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018492:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0018496:	88 c2                	mov    dl,al
c0018498:	88 d9                	mov    cl,bl
c001849a:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c001849e:	0f b7 c2             	movzx  eax,dx
c00184a1:	09 f8                	or     eax,edi
c00184a3:	89 c2                	mov    edx,eax
c00184a5:	50                   	push   eax
c00184a6:	50                   	push   eax
c00184a7:	51                   	push   ecx
c00184a8:	52                   	push   edx
c00184a9:	e8 81 3d ff ff       	call   c000c22f <datetimeToSeconds(datetime_t)>
c00184ae:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c00184b2:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c00184b8:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c00184be:	83 c4 4c             	add    esp,0x4c
c00184c1:	5b                   	pop    ebx
c00184c2:	5e                   	pop    esi
c00184c3:	5f                   	pop    edi
c00184c4:	5d                   	pop    ebp
c00184c5:	c3                   	ret    

c00184c6 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c00184c6:	55                   	push   ebp
c00184c7:	57                   	push   edi
c00184c8:	56                   	push   esi
c00184c9:	53                   	push   ebx
c00184ca:	83 ec 30             	sub    esp,0x30
c00184cd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00184d1:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00184d5:	6a 00                	push   0x0
c00184d7:	6a 00                	push   0x0
c00184d9:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00184df:	e8 ae ed fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c00184e4:	83 c4 0c             	add    esp,0xc
c00184e7:	6a 00                	push   0x0
c00184e9:	6a 02                	push   0x2
c00184eb:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00184f1:	e8 9c ed fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c00184f6:	31 d2                	xor    edx,edx
c00184f8:	89 f9                	mov    ecx,edi
c00184fa:	89 f8                	mov    eax,edi
c00184fc:	c1 e9 10             	shr    ecx,0x10
c00184ff:	0f b6 c4             	movzx  eax,ah
c0018502:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0018506:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001850a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001850e:	b9 64 00 00 00       	mov    ecx,0x64
c0018513:	89 f0                	mov    eax,esi
c0018515:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018519:	89 f0                	mov    eax,esi
c001851b:	0f b6 c4             	movzx  eax,ah
c001851e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018522:	89 f0                	mov    eax,esi
c0018524:	c1 e8 10             	shr    eax,0x10
c0018527:	f7 f1                	div    ecx
c0018529:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001852d:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0018531:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018535:	59                   	pop    ecx
c0018536:	5b                   	pop    ebx
c0018537:	89 fb                	mov    ebx,edi
c0018539:	6a 0b                	push   0xb
c001853b:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018541:	e8 32 ec fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018546:	83 c4 10             	add    esp,0x10
c0018549:	89 c5                	mov    ebp,eax
c001854b:	a8 04                	test   al,0x4
c001854d:	75 6e                	jne    c00185bd <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c001854f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018553:	31 d2                	xor    edx,edx
c0018555:	0f b6 c1             	movzx  eax,cl
c0018558:	b9 0a 00 00 00       	mov    ecx,0xa
c001855d:	f7 f1                	div    ecx
c001855f:	c1 e0 04             	shl    eax,0x4
c0018562:	09 d0                	or     eax,edx
c0018564:	31 d2                	xor    edx,edx
c0018566:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001856a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001856f:	f7 f1                	div    ecx
c0018571:	c1 e0 04             	shl    eax,0x4
c0018574:	09 d0                	or     eax,edx
c0018576:	31 d2                	xor    edx,edx
c0018578:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001857c:	0f b6 c3             	movzx  eax,bl
c001857f:	f7 f1                	div    ecx
c0018581:	c1 e0 04             	shl    eax,0x4
c0018584:	09 d0                	or     eax,edx
c0018586:	31 d2                	xor    edx,edx
c0018588:	89 c3                	mov    ebx,eax
c001858a:	89 f0                	mov    eax,esi
c001858c:	0f b6 c0             	movzx  eax,al
c001858f:	f7 f1                	div    ecx
c0018591:	c1 e0 04             	shl    eax,0x4
c0018594:	09 d0                	or     eax,edx
c0018596:	31 d2                	xor    edx,edx
c0018598:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001859c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00185a1:	f7 f1                	div    ecx
c00185a3:	c1 e0 04             	shl    eax,0x4
c00185a6:	09 d0                	or     eax,edx
c00185a8:	31 d2                	xor    edx,edx
c00185aa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00185ae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00185b2:	f7 f1                	div    ecx
c00185b4:	c1 e0 04             	shl    eax,0x4
c00185b7:	09 d0                	or     eax,edx
c00185b9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00185bd:	83 e5 02             	and    ebp,0x2
c00185c0:	75 1e                	jne    c00185e0 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c00185c2:	0f b6 c3             	movzx  eax,bl
c00185c5:	83 f8 0b             	cmp    eax,0xb
c00185c8:	76 10                	jbe    c00185da <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c00185ca:	8d 53 f4             	lea    edx,[ebx-0xc]
c00185cd:	88 d3                	mov    bl,dl
c00185cf:	84 d2                	test   dl,dl
c00185d1:	75 02                	jne    c00185d5 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c00185d3:	b3 0c                	mov    bl,0xc
c00185d5:	83 cb 80             	or     ebx,0xffffff80
c00185d8:	eb 06                	jmp    c00185e0 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c00185da:	85 c0                	test   eax,eax
c00185dc:	75 02                	jne    c00185e0 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c00185de:	b3 0c                	mov    bl,0xc
c00185e0:	0f b6 db             	movzx  ebx,bl
c00185e3:	50                   	push   eax
c00185e4:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00185e9:	52                   	push   edx
c00185ea:	6a 00                	push   0x0
c00185ec:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00185f2:	e8 9b ec fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c00185f7:	83 c4 0c             	add    esp,0xc
c00185fa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00185ff:	50                   	push   eax
c0018600:	6a 02                	push   0x2
c0018602:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018608:	e8 85 ec fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c001860d:	83 c4 0c             	add    esp,0xc
c0018610:	53                   	push   ebx
c0018611:	6a 04                	push   0x4
c0018613:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018619:	e8 74 ec fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c001861e:	83 c4 0c             	add    esp,0xc
c0018621:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0018626:	52                   	push   edx
c0018627:	6a 07                	push   0x7
c0018629:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001862f:	e8 5e ec fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018634:	83 c4 0c             	add    esp,0xc
c0018637:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001863c:	50                   	push   eax
c001863d:	6a 08                	push   0x8
c001863f:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018645:	e8 48 ec fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c001864a:	83 c4 0c             	add    esp,0xc
c001864d:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0018652:	55                   	push   ebp
c0018653:	6a 09                	push   0x9
c0018655:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001865b:	e8 32 ec fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018660:	5a                   	pop    edx
c0018661:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018665:	e8 7c fb ff ff       	call   c00181e6 <RTC::completeRTCRefresh()>
c001866a:	83 c4 3c             	add    esp,0x3c
c001866d:	b0 01                	mov    al,0x1
c001866f:	5b                   	pop    ebx
c0018670:	5e                   	pop    esi
c0018671:	5f                   	pop    edi
c0018672:	5d                   	pop    ebp
c0018673:	c3                   	ret    

c0018674 <rtcIRQHandler(regs*, void*)>:
c0018674:	53                   	push   ebx
c0018675:	83 ec 10             	sub    esp,0x10
c0018678:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001867c:	6a 0c                	push   0xc
c001867e:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018684:	e8 ef ea fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018689:	83 c4 10             	add    esp,0x10
c001868c:	a8 80                	test   al,0x80
c001868e:	74 24                	je     c00186b4 <rtcIRQHandler(regs*, void*)+0x40>
c0018690:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0018697:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001869e:	66 ff 05 78 97 02 c0 	inc    WORD PTR ds:0xc0029778
c00186a5:	75 0d                	jne    c00186b4 <rtcIRQHandler(regs*, void*)+0x40>
c00186a7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00186ab:	83 c4 08             	add    esp,0x8
c00186ae:	5b                   	pop    ebx
c00186af:	e9 32 fb ff ff       	jmp    c00181e6 <RTC::completeRTCRefresh()>
c00186b4:	83 c4 08             	add    esp,0x8
c00186b7:	5b                   	pop    ebx
c00186b8:	c3                   	ret    
c00186b9:	90                   	nop

c00186ba <RTC::RTC()>:
c00186ba:	83 ec 1c             	sub    esp,0x1c
c00186bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186c1:	83 ec 08             	sub    esp,0x8
c00186c4:	68 cf 26 02 c0       	push   0xc00226cf
c00186c9:	50                   	push   eax
c00186ca:	e8 3b 3a ff ff       	call   c000c10a <Clock::Clock(char const*)>
c00186cf:	83 c4 10             	add    esp,0x10
c00186d2:	ba ec 26 02 c0       	mov    edx,0xc00226ec
c00186d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186db:	89 10                	mov    DWORD PTR [eax],edx
c00186dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186e1:	83 ec 0c             	sub    esp,0xc
c00186e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00186e8:	6a 01                	push   0x1
c00186ea:	68 74 86 01 c0       	push   0xc0018674
c00186ef:	6a 08                	push   0x8
c00186f1:	50                   	push   eax
c00186f2:	e8 ef 3e ff ff       	call   c000c5e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00186f7:	83 c4 20             	add    esp,0x20
c00186fa:	89 c2                	mov    edx,eax
c00186fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018700:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0018706:	fa                   	cli    
c0018707:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001870c:	83 c0 01             	add    eax,0x1
c001870f:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0018714:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0018719:	83 ec 08             	sub    esp,0x8
c001871c:	6a 0b                	push   0xb
c001871e:	50                   	push   eax
c001871f:	e8 54 ea fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018724:	83 c4 10             	add    esp,0x10
c0018727:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001872b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0018730:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018734:	83 ca 10             	or     edx,0x10
c0018737:	0f b6 d2             	movzx  edx,dl
c001873a:	83 ec 04             	sub    esp,0x4
c001873d:	52                   	push   edx
c001873e:	6a 0b                	push   0xb
c0018740:	50                   	push   eax
c0018741:	e8 4c eb fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018746:	83 c4 10             	add    esp,0x10
c0018749:	83 ec 0c             	sub    esp,0xc
c001874c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018750:	e8 91 fa ff ff       	call   c00181e6 <RTC::completeRTCRefresh()>
c0018755:	83 c4 10             	add    esp,0x10
c0018758:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001875d:	83 e8 01             	sub    eax,0x1
c0018760:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0018765:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001876a:	85 c0                	test   eax,eax
c001876c:	75 01                	jne    c001876f <RTC::RTC()+0xb5>
c001876e:	fb                   	sti    
c001876f:	90                   	nop
c0018770:	83 c4 1c             	add    esp,0x1c
c0018773:	c3                   	ret    

c0018774 <HalConsoleScroll(int, int)>:
c0018774:	83 ec 10             	sub    esp,0x10
c0018777:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001877f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0018787:	90                   	nop
c0018788:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001878d:	0f 8f e1 00 00 00    	jg     c0018874 <HalConsoleScroll(int, int)+0x100>
c0018793:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001879b:	90                   	nop
c001879c:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c00187a4:	0f 8f be 00 00 00    	jg     c0018868 <HalConsoleScroll(int, int)+0xf4>
c00187aa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00187ae:	89 d0                	mov    eax,edx
c00187b0:	c1 e0 02             	shl    eax,0x2
c00187b3:	01 d0                	add    eax,edx
c00187b5:	c1 e0 05             	shl    eax,0x5
c00187b8:	89 c2                	mov    edx,eax
c00187ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00187be:	01 d0                	add    eax,edx
c00187c0:	89 c2                	mov    edx,eax
c00187c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00187c6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00187c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00187cd:	89 d0                	mov    eax,edx
c00187cf:	c1 e0 02             	shl    eax,0x2
c00187d2:	01 d0                	add    eax,edx
c00187d4:	c1 e0 05             	shl    eax,0x5
c00187d7:	89 c2                	mov    edx,eax
c00187d9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00187dd:	01 d0                	add    eax,edx
c00187df:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c00187e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00187e9:	01 c2                	add    edx,eax
c00187eb:	8a 01                	mov    al,BYTE PTR [ecx]
c00187ed:	88 02                	mov    BYTE PTR [edx],al
c00187ef:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00187f4:	75 66                	jne    c001885c <HalConsoleScroll(int, int)+0xe8>
c00187f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00187fa:	83 e0 01             	and    eax,0x1
c00187fd:	74 39                	je     c0018838 <HalConsoleScroll(int, int)+0xc4>
c00187ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018803:	83 e0 0f             	and    eax,0xf
c0018806:	88 c2                	mov    dl,al
c0018808:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001880c:	c1 e0 04             	shl    eax,0x4
c001880f:	09 d0                	or     eax,edx
c0018811:	88 c1                	mov    cl,al
c0018813:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018817:	89 d0                	mov    eax,edx
c0018819:	c1 e0 02             	shl    eax,0x2
c001881c:	01 d0                	add    eax,edx
c001881e:	c1 e0 05             	shl    eax,0x5
c0018821:	89 c2                	mov    edx,eax
c0018823:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018827:	01 d0                	add    eax,edx
c0018829:	89 c2                	mov    edx,eax
c001882b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001882f:	01 d0                	add    eax,edx
c0018831:	88 ca                	mov    dl,cl
c0018833:	88 10                	mov    BYTE PTR [eax],dl
c0018835:	eb 25                	jmp    c001885c <HalConsoleScroll(int, int)+0xe8>
c0018837:	90                   	nop
c0018838:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001883c:	89 d0                	mov    eax,edx
c001883e:	c1 e0 02             	shl    eax,0x2
c0018841:	01 d0                	add    eax,edx
c0018843:	c1 e0 05             	shl    eax,0x5
c0018846:	89 c2                	mov    edx,eax
c0018848:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001884c:	01 d0                	add    eax,edx
c001884e:	89 c2                	mov    edx,eax
c0018850:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018854:	01 d0                	add    eax,edx
c0018856:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0018859:	8d 76 00             	lea    esi,[esi+0x0]
c001885c:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018861:	e9 36 ff ff ff       	jmp    c001879c <HalConsoleScroll(int, int)+0x28>
c0018866:	66 90                	xchg   ax,ax
c0018868:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001886d:	e9 16 ff ff ff       	jmp    c0018788 <HalConsoleScroll(int, int)+0x14>
c0018872:	66 90                	xchg   ax,ax
c0018874:	90                   	nop
c0018875:	83 c4 10             	add    esp,0x10
c0018878:	c3                   	ret    
c0018879:	8d 76 00             	lea    esi,[esi+0x0]

c001887c <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001887c:	83 ec 14             	sub    esp,0x14
c001887f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018883:	88 04 24             	mov    BYTE PTR [esp],al
c0018886:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018889:	0f b6 c0             	movzx  eax,al
c001888c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018890:	89 d1                	mov    ecx,edx
c0018892:	83 e1 0f             	and    ecx,0xf
c0018895:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018899:	c1 e2 04             	shl    edx,0x4
c001889c:	0f b6 d2             	movzx  edx,dl
c001889f:	09 ca                	or     edx,ecx
c00188a1:	c1 e2 08             	shl    edx,0x8
c00188a4:	09 d0                	or     eax,edx
c00188a6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00188ab:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c00188b3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00188b7:	89 d0                	mov    eax,edx
c00188b9:	c1 e0 02             	shl    eax,0x2
c00188bc:	01 d0                	add    eax,edx
c00188be:	c1 e0 04             	shl    eax,0x4
c00188c1:	89 c2                	mov    edx,eax
c00188c3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00188c7:	01 d0                	add    eax,edx
c00188c9:	01 c0                	add    eax,eax
c00188cb:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00188cf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00188d3:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00188d8:	66 89 02             	mov    WORD PTR [edx],ax
c00188db:	90                   	nop
c00188dc:	83 c4 14             	add    esp,0x14
c00188df:	c3                   	ret    

c00188e0 <HalConsoleCursorUpdate(int, int)>:
c00188e0:	83 ec 20             	sub    esp,0x20
c00188e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00188e7:	89 c2                	mov    edx,eax
c00188e9:	c1 e2 02             	shl    edx,0x2
c00188ec:	01 d0                	add    eax,edx
c00188ee:	c1 e0 04             	shl    eax,0x4
c00188f1:	89 c2                	mov    edx,eax
c00188f3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00188f7:	01 d0                	add    eax,edx
c00188f9:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00188fe:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018905:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001890a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001890e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018912:	ee                   	out    dx,al
c0018913:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018918:	0f b6 c0             	movzx  eax,al
c001891b:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018922:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0018926:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001892a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001892e:	ee                   	out    dx,al
c001892f:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0018936:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001893b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001893f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018943:	ee                   	out    dx,al
c0018944:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018949:	c1 e8 08             	shr    eax,0x8
c001894c:	0f b6 c0             	movzx  eax,al
c001894f:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0018956:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001895a:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001895e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018962:	ee                   	out    dx,al
c0018963:	90                   	nop
c0018964:	83 c4 20             	add    esp,0x20
c0018967:	c3                   	ret    

c0018968 <FAT::getName()>:
c0018968:	b8 20 27 02 c0       	mov    eax,0xc0022720
c001896d:	c3                   	ret    
c001896e:	66 90                	xchg   ax,ax

c0018970 <FAT::tell(void*, unsigned long long*)>:
c0018970:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018975:	75 09                	jne    c0018980 <FAT::tell(void*, unsigned long long*)+0x10>
c0018977:	b8 04 00 00 00       	mov    eax,0x4
c001897c:	c3                   	ret    
c001897d:	8d 76 00             	lea    esi,[esi+0x0]
c0018980:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018985:	75 09                	jne    c0018990 <FAT::tell(void*, unsigned long long*)+0x20>
c0018987:	b8 04 00 00 00       	mov    eax,0x4
c001898c:	c3                   	ret    
c001898d:	8d 76 00             	lea    esi,[esi+0x0]
c0018990:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018994:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018997:	ba 00 00 00 00       	mov    edx,0x0
c001899c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00189a0:	89 01                	mov    DWORD PTR [ecx],eax
c00189a2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00189a5:	b8 00 00 00 00       	mov    eax,0x0
c00189aa:	c3                   	ret    
c00189ab:	90                   	nop

c00189ac <FAT::stat(void*, unsigned long long*)>:
c00189ac:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00189b1:	75 09                	jne    c00189bc <FAT::stat(void*, unsigned long long*)+0x10>
c00189b3:	b8 04 00 00 00       	mov    eax,0x4
c00189b8:	c3                   	ret    
c00189b9:	8d 76 00             	lea    esi,[esi+0x0]
c00189bc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00189c1:	75 09                	jne    c00189cc <FAT::stat(void*, unsigned long long*)+0x20>
c00189c3:	b8 04 00 00 00       	mov    eax,0x4
c00189c8:	c3                   	ret    
c00189c9:	8d 76 00             	lea    esi,[esi+0x0]
c00189cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00189d0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00189d3:	ba 00 00 00 00       	mov    edx,0x0
c00189d8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00189dc:	89 01                	mov    DWORD PTR [ecx],eax
c00189de:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00189e1:	b8 00 00 00 00       	mov    eax,0x0
c00189e6:	c3                   	ret    
c00189e7:	90                   	nop

c00189e8 <FAT::~FAT()>:
c00189e8:	83 ec 0c             	sub    esp,0xc
c00189eb:	ba 6c 27 02 c0       	mov    edx,0xc002276c
c00189f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00189f4:	89 10                	mov    DWORD PTR [eax],edx
c00189f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00189fa:	83 ec 0c             	sub    esp,0xc
c00189fd:	50                   	push   eax
c00189fe:	e8 d9 2a ff ff       	call   c000b4dc <Filesystem::~Filesystem()>
c0018a03:	83 c4 10             	add    esp,0x10
c0018a06:	90                   	nop
c0018a07:	83 c4 0c             	add    esp,0xc
c0018a0a:	c3                   	ret    
c0018a0b:	90                   	nop

c0018a0c <FAT::~FAT()>:
c0018a0c:	83 ec 0c             	sub    esp,0xc
c0018a0f:	83 ec 0c             	sub    esp,0xc
c0018a12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018a16:	e8 cd ff ff ff       	call   c00189e8 <FAT::~FAT()>
c0018a1b:	83 c4 10             	add    esp,0x10
c0018a1e:	83 ec 08             	sub    esp,0x8
c0018a21:	6a 08                	push   0x8
c0018a23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018a27:	e8 ec 1d ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0018a2c:	83 c4 10             	add    esp,0x10
c0018a2f:	83 c4 0c             	add    esp,0xc
c0018a32:	c3                   	ret    
c0018a33:	90                   	nop

c0018a34 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018a34:	83 ec 1c             	sub    esp,0x1c
c0018a37:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018a3e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018a43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a47:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018a4e:	83 f8 ff             	cmp    eax,0xffffffff
c0018a51:	75 35                	jne    c0018a88 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0018a53:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018a57:	88 c2                	mov    dl,al
c0018a59:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018a5e:	01 d0                	add    eax,edx
c0018a60:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018a64:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018a6a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a6e:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018a75:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018a7a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018a7e:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018a85:	eb 19                	jmp    c0018aa0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0018a87:	90                   	nop
c0018a88:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018a8c:	88 c2                	mov    dl,al
c0018a8e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a92:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018a99:	01 d0                	add    eax,edx
c0018a9b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018a9f:	90                   	nop
c0018aa0:	83 ec 04             	sub    esp,0x4
c0018aa3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018aa7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018aab:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018aaf:	50                   	push   eax
c0018ab0:	e8 1a c5 fe ff       	call   c0004fcf <f_getlabel>
c0018ab5:	83 c4 10             	add    esp,0x10
c0018ab8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018abc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018ac1:	75 09                	jne    c0018acc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0018ac3:	b8 00 00 00 00       	mov    eax,0x0
c0018ac8:	eb 0a                	jmp    c0018ad4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0018aca:	66 90                	xchg   ax,ax
c0018acc:	b8 01 00 00 00       	mov    eax,0x1
c0018ad1:	8d 76 00             	lea    esi,[esi+0x0]
c0018ad4:	83 c4 1c             	add    esp,0x1c
c0018ad7:	c3                   	ret    

c0018ad8 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018ad8:	57                   	push   edi
c0018ad9:	83 ec 58             	sub    esp,0x58
c0018adc:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018ae4:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018ae8:	b8 00 00 00 00       	mov    eax,0x0
c0018aed:	b9 0f 00 00 00       	mov    ecx,0xf
c0018af2:	fc                   	cld    
c0018af3:	89 d7                	mov    edi,edx
c0018af5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0018af7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018afb:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018b02:	83 f8 ff             	cmp    eax,0xffffffff
c0018b05:	75 35                	jne    c0018b3c <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0018b07:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018b0b:	88 c2                	mov    dl,al
c0018b0d:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018b12:	01 d0                	add    eax,edx
c0018b14:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018b18:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018b1e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018b22:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018b29:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018b2e:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018b32:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018b39:	eb 19                	jmp    c0018b54 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0018b3b:	90                   	nop
c0018b3c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018b40:	88 c2                	mov    dl,al
c0018b42:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018b46:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018b4d:	01 d0                	add    eax,edx
c0018b4f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018b53:	90                   	nop
c0018b54:	83 ec 08             	sub    esp,0x8
c0018b57:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0018b5b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018b5f:	50                   	push   eax
c0018b60:	e8 db 7c fe ff       	call   c0000840 <strcat>
c0018b65:	83 c4 10             	add    esp,0x10
c0018b68:	83 ec 0c             	sub    esp,0xc
c0018b6b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018b6f:	50                   	push   eax
c0018b70:	e8 ab c5 fe ff       	call   c0005120 <f_setlabel>
c0018b75:	83 c4 10             	add    esp,0x10
c0018b78:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018b7c:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018b81:	75 09                	jne    c0018b8c <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0018b83:	b8 00 00 00 00       	mov    eax,0x0
c0018b88:	eb 0a                	jmp    c0018b94 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0018b8a:	66 90                	xchg   ax,ax
c0018b8c:	b8 01 00 00 00       	mov    eax,0x1
c0018b91:	8d 76 00             	lea    esi,[esi+0x0]
c0018b94:	83 c4 58             	add    esp,0x58
c0018b97:	5f                   	pop    edi
c0018b98:	c3                   	ret    
c0018b99:	90                   	nop
c0018b9a:	66 90                	xchg   ax,ax

c0018b9c <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018b9c:	83 ec 2c             	sub    esp,0x2c
c0018b9f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018ba7:	83 ec 08             	sub    esp,0x8
c0018baa:	68 44 27 02 c0       	push   0xc0022744
c0018baf:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018bb3:	e8 98 7b fe ff       	call   c0000750 <strcmp>
c0018bb8:	83 c4 10             	add    esp,0x10
c0018bbb:	85 c0                	test   eax,eax
c0018bbd:	0f 94 c0             	sete   al
c0018bc0:	0f b6 c0             	movzx  eax,al
c0018bc3:	85 c0                	test   eax,eax
c0018bc5:	74 0d                	je     c0018bd4 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0018bc7:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018bcf:	e9 c0 00 00 00       	jmp    c0018c94 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018bd4:	83 ec 08             	sub    esp,0x8
c0018bd7:	68 36 27 02 c0       	push   0xc0022736
c0018bdc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018be0:	e8 6b 7b fe ff       	call   c0000750 <strcmp>
c0018be5:	83 c4 10             	add    esp,0x10
c0018be8:	85 c0                	test   eax,eax
c0018bea:	0f 94 c0             	sete   al
c0018bed:	0f b6 c0             	movzx  eax,al
c0018bf0:	85 c0                	test   eax,eax
c0018bf2:	74 10                	je     c0018c04 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0018bf4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018bfc:	e9 93 00 00 00       	jmp    c0018c94 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018c01:	8d 76 00             	lea    esi,[esi+0x0]
c0018c04:	83 ec 08             	sub    esp,0x8
c0018c07:	68 3c 27 02 c0       	push   0xc002273c
c0018c0c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018c10:	e8 3b 7b fe ff       	call   c0000750 <strcmp>
c0018c15:	83 c4 10             	add    esp,0x10
c0018c18:	85 c0                	test   eax,eax
c0018c1a:	0f 94 c0             	sete   al
c0018c1d:	0f b6 c0             	movzx  eax,al
c0018c20:	85 c0                	test   eax,eax
c0018c22:	74 0c                	je     c0018c30 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0018c24:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018c2c:	eb 66                	jmp    c0018c94 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018c2e:	66 90                	xchg   ax,ax
c0018c30:	83 ec 08             	sub    esp,0x8
c0018c33:	68 9c ff 01 c0       	push   0xc001ff9c
c0018c38:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018c3c:	e8 0f 7b fe ff       	call   c0000750 <strcmp>
c0018c41:	83 c4 10             	add    esp,0x10
c0018c44:	85 c0                	test   eax,eax
c0018c46:	0f 94 c0             	sete   al
c0018c49:	0f b6 c0             	movzx  eax,al
c0018c4c:	85 c0                	test   eax,eax
c0018c4e:	74 0c                	je     c0018c5c <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0018c50:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0018c58:	eb 3a                	jmp    c0018c94 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018c5a:	66 90                	xchg   ax,ax
c0018c5c:	83 ec 08             	sub    esp,0x8
c0018c5f:	68 42 27 02 c0       	push   0xc0022742
c0018c64:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018c68:	e8 e3 7a fe ff       	call   c0000750 <strcmp>
c0018c6d:	83 c4 10             	add    esp,0x10
c0018c70:	85 c0                	test   eax,eax
c0018c72:	0f 94 c0             	sete   al
c0018c75:	0f b6 c0             	movzx  eax,al
c0018c78:	85 c0                	test   eax,eax
c0018c7a:	74 0c                	je     c0018c88 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0018c7c:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0018c84:	eb 0e                	jmp    c0018c94 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018c86:	66 90                	xchg   ax,ax
c0018c88:	b8 08 00 00 00       	mov    eax,0x8
c0018c8d:	e9 ea 00 00 00       	jmp    c0018d7c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018c92:	66 90                	xchg   ax,ax
c0018c94:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0018c9b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018ca0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018ca4:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018cab:	83 f8 ff             	cmp    eax,0xffffffff
c0018cae:	75 34                	jne    c0018ce4 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0018cb0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018cb4:	88 c2                	mov    dl,al
c0018cb6:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018cbb:	01 d0                	add    eax,edx
c0018cbd:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018cc1:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018cc7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018ccb:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018cd2:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018cd7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018cdb:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018ce2:	eb 18                	jmp    c0018cfc <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0018ce4:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018ce8:	88 c2                	mov    dl,al
c0018cea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018cee:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018cf5:	01 d0                	add    eax,edx
c0018cf7:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018cfb:	90                   	nop
c0018cfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018d00:	88 04 24             	mov    BYTE PTR [esp],al
c0018d03:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018d07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018d0b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018d13:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0018d18:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018d20:	83 ec 0c             	sub    esp,0xc
c0018d23:	68 00 20 00 00       	push   0x2000
c0018d28:	e8 89 ed fe ff       	call   c0007ab6 <malloc>
c0018d2d:	83 c4 10             	add    esp,0x10
c0018d30:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018d34:	68 00 20 00 00       	push   0x2000
c0018d39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018d3d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018d41:	50                   	push   eax
c0018d42:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0018d46:	50                   	push   eax
c0018d47:	e8 d1 c6 fe ff       	call   c000541d <f_mkfs>
c0018d4c:	83 c4 10             	add    esp,0x10
c0018d4f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018d53:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0018d58:	75 0a                	jne    c0018d64 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0018d5a:	b8 00 00 00 00       	mov    eax,0x0
c0018d5f:	eb 1b                	jmp    c0018d7c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018d61:	8d 76 00             	lea    esi,[esi+0x0]
c0018d64:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0018d69:	75 09                	jne    c0018d74 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0018d6b:	b8 09 00 00 00       	mov    eax,0x9
c0018d70:	eb 0a                	jmp    c0018d7c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018d72:	66 90                	xchg   ax,ax
c0018d74:	b8 01 00 00 00       	mov    eax,0x1
c0018d79:	8d 76 00             	lea    esi,[esi+0x0]
c0018d7c:	83 c4 2c             	add    esp,0x2c
c0018d7f:	c3                   	ret    

c0018d80 <FAT::tryMount(LogicalDisk*, int)>:
c0018d80:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0018d86:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018d8b:	83 f8 14             	cmp    eax,0x14
c0018d8e:	75 18                	jne    c0018da8 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0018d90:	83 ec 0c             	sub    esp,0xc
c0018d93:	68 48 27 02 c0       	push   0xc0022748
c0018d98:	e8 cc 84 ff ff       	call   c0011269 <KePanic(char const*)>
c0018d9d:	83 c4 10             	add    esp,0x10
c0018da0:	b0 00                	mov    al,0x0
c0018da2:	e9 ed 01 00 00       	jmp    c0018f94 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018da7:	90                   	nop
c0018da8:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0018daf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018db5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018dbb:	3d 00 02 00 00       	cmp    eax,0x200
c0018dc0:	74 0a                	je     c0018dcc <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0018dc2:	b0 00                	mov    al,0x0
c0018dc4:	e9 cb 01 00 00       	jmp    c0018f94 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018dc9:	8d 76 00             	lea    esi,[esi+0x0]
c0018dcc:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0018dd4:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018ddb:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018de2:	83 f8 ff             	cmp    eax,0xffffffff
c0018de5:	74 09                	je     c0018df0 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0018de7:	b0 01                	mov    al,0x1
c0018de9:	e9 a6 01 00 00       	jmp    c0018f94 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018dee:	66 90                	xchg   ax,ax
c0018df0:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0018dfa:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0018e02:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0018e09:	88 c2                	mov    dl,al
c0018e0b:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018e10:	01 d0                	add    eax,edx
c0018e12:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0018e19:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018e1f:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018e26:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018e2d:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018e32:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0018e39:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018e40:	83 ec 0c             	sub    esp,0xc
c0018e43:	68 34 02 00 00       	push   0x234
c0018e48:	e8 69 ec fe ff       	call   c0007ab6 <malloc>
c0018e4d:	83 c4 10             	add    esp,0x10
c0018e50:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0018e57:	83 ec 04             	sub    esp,0x4
c0018e5a:	6a 00                	push   0x0
c0018e5c:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018e63:	50                   	push   eax
c0018e64:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018e6b:	e8 88 ad fe ff       	call   c0003bf8 <f_mount>
c0018e70:	83 c4 10             	add    esp,0x10
c0018e73:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018e7a:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0018e82:	74 1c                	je     c0018ea0 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0018e84:	83 ec 0c             	sub    esp,0xc
c0018e87:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018e8e:	e8 43 ec fe ff       	call   c0007ad6 <rfree>
c0018e93:	83 c4 10             	add    esp,0x10
c0018e96:	b0 00                	mov    al,0x0
c0018e98:	e9 f7 00 00 00       	jmp    c0018f94 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018e9d:	8d 76 00             	lea    esi,[esi+0x0]
c0018ea0:	83 ec 04             	sub    esp,0x4
c0018ea3:	68 00 01 00 00       	push   0x100
c0018ea8:	6a 00                	push   0x0
c0018eaa:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018eb1:	50                   	push   eax
c0018eb2:	e8 39 76 fe ff       	call   c00004f0 <memset>
c0018eb7:	83 c4 10             	add    esp,0x10
c0018eba:	83 ec 08             	sub    esp,0x8
c0018ebd:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018ec4:	50                   	push   eax
c0018ec5:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018ecc:	50                   	push   eax
c0018ecd:	e8 6e 79 fe ff       	call   c0000840 <strcat>
c0018ed2:	83 c4 10             	add    esp,0x10
c0018ed5:	83 ec 08             	sub    esp,0x8
c0018ed8:	68 56 27 02 c0       	push   0xc0022756
c0018edd:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018ee4:	50                   	push   eax
c0018ee5:	e8 56 79 fe ff       	call   c0000840 <strcat>
c0018eea:	83 c4 10             	add    esp,0x10
c0018eed:	83 ec 04             	sub    esp,0x4
c0018ef0:	6a 01                	push   0x1
c0018ef2:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0018ef9:	50                   	push   eax
c0018efa:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018efe:	50                   	push   eax
c0018eff:	e8 56 ad fe ff       	call   c0003c5a <f_open>
c0018f04:	83 c4 10             	add    esp,0x10
c0018f07:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018f0e:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0018f15:	85 c0                	test   eax,eax
c0018f17:	74 0b                	je     c0018f24 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0018f19:	78 31                	js     c0018f4c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018f1b:	83 e8 04             	sub    eax,0x4
c0018f1e:	83 f8 01             	cmp    eax,0x1
c0018f21:	77 29                	ja     c0018f4c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018f23:	90                   	nop
c0018f24:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0018f2c:	83 ec 0c             	sub    esp,0xc
c0018f2f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018f33:	50                   	push   eax
c0018f34:	e8 f0 b4 fe ff       	call   c0004429 <f_close>
c0018f39:	83 c4 10             	add    esp,0x10
c0018f3c:	90                   	nop
c0018f3d:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0018f45:	85 c0                	test   eax,eax
c0018f47:	74 43                	je     c0018f8c <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0018f49:	eb 31                	jmp    c0018f7c <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0018f4b:	90                   	nop
c0018f4c:	83 ec 0c             	sub    esp,0xc
c0018f4f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018f56:	e8 7b eb fe ff       	call   c0007ad6 <rfree>
c0018f5b:	83 c4 10             	add    esp,0x10
c0018f5e:	83 ec 04             	sub    esp,0x4
c0018f61:	6a 00                	push   0x0
c0018f63:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018f6a:	50                   	push   eax
c0018f6b:	6a 00                	push   0x0
c0018f6d:	e8 86 ac fe ff       	call   c0003bf8 <f_mount>
c0018f72:	83 c4 10             	add    esp,0x10
c0018f75:	b0 00                	mov    al,0x0
c0018f77:	eb 1b                	jmp    c0018f94 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018f79:	8d 76 00             	lea    esi,[esi+0x0]
c0018f7c:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018f81:	83 c0 01             	add    eax,0x1
c0018f84:	a3 80 97 02 c0       	mov    ds:0xc0029780,eax
c0018f89:	8d 76 00             	lea    esi,[esi+0x0]
c0018f8c:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0018f93:	90                   	nop
c0018f94:	81 c4 4c 03 00 00    	add    esp,0x34c
c0018f9a:	c3                   	ret    
c0018f9b:	90                   	nop

c0018f9c <FAT::allocateSwapfile(char const*, int)>:
c0018f9c:	55                   	push   ebp
c0018f9d:	57                   	push   edi
c0018f9e:	56                   	push   esi
c0018f9f:	53                   	push   ebx
c0018fa0:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0018fa6:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0018fb1:	83 ec 0c             	sub    esp,0xc
c0018fb4:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0018fbb:	e8 f6 ea fe ff       	call   c0007ab6 <malloc>
c0018fc0:	83 c4 10             	add    esp,0x10
c0018fc3:	89 c7                	mov    edi,eax
c0018fc5:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0018fca:	83 ec 04             	sub    esp,0x4
c0018fcd:	50                   	push   eax
c0018fce:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0018fd5:	57                   	push   edi
c0018fd6:	e8 55 27 ff ff       	call   c000b730 <File::File(char const*, Process*)>
c0018fdb:	83 c4 10             	add    esp,0x10
c0018fde:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0018fe5:	83 ec 04             	sub    esp,0x4
c0018fe8:	8d 44 24 13          	lea    eax,[esp+0x13]
c0018fec:	50                   	push   eax
c0018fed:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018ff1:	50                   	push   eax
c0018ff2:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018ff9:	e8 f0 2a ff ff       	call   c000baee <File::stat(unsigned long long*, bool*)>
c0018ffe:	83 c4 10             	add    esp,0x10
c0019001:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019008:	c1 e0 14             	shl    eax,0x14
c001900b:	89 c7                	mov    edi,eax
c001900d:	89 c5                	mov    ebp,eax
c001900f:	c1 fd 1f             	sar    ebp,0x1f
c0019012:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019016:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001901a:	89 f9                	mov    ecx,edi
c001901c:	31 c1                	xor    ecx,eax
c001901e:	89 cb                	mov    ebx,ecx
c0019020:	89 e9                	mov    ecx,ebp
c0019022:	31 d1                	xor    ecx,edx
c0019024:	89 ce                	mov    esi,ecx
c0019026:	89 f0                	mov    eax,esi
c0019028:	09 d8                	or     eax,ebx
c001902a:	0f 84 9c 00 00 00    	je     c00190cc <FAT::allocateSwapfile(char const*, int)+0x130>
c0019030:	83 ec 0c             	sub    esp,0xc
c0019033:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001903a:	e8 7b 29 ff ff       	call   c000b9ba <File::unlink()>
c001903f:	83 c4 10             	add    esp,0x10
c0019042:	83 ec 08             	sub    esp,0x8
c0019045:	6a 12                	push   0x12
c0019047:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001904e:	e8 99 27 ff ff       	call   c000b7ec <File::open(FileOpenMode)>
c0019053:	83 c4 10             	add    esp,0x10
c0019056:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001905d:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019063:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001906a:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019071:	c1 e0 14             	shl    eax,0x14
c0019074:	83 ec 04             	sub    esp,0x4
c0019077:	6a 01                	push   0x1
c0019079:	50                   	push   eax
c001907a:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0019081:	e8 2a c2 fe ff       	call   c00052b0 <f_expand>
c0019086:	83 c4 10             	add    esp,0x10
c0019089:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019090:	8b 00                	mov    eax,DWORD PTR [eax]
c0019092:	83 c0 10             	add    eax,0x10
c0019095:	8b 00                	mov    eax,DWORD PTR [eax]
c0019097:	83 ec 0c             	sub    esp,0xc
c001909a:	8d 54 24 24          	lea    edx,[esp+0x24]
c001909e:	52                   	push   edx
c001909f:	8d 54 24 30          	lea    edx,[esp+0x30]
c00190a3:	52                   	push   edx
c00190a4:	6a 00                	push   0x0
c00190a6:	68 00 04 00 00       	push   0x400
c00190ab:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00190b2:	ff d0                	call   eax
c00190b4:	83 c4 20             	add    esp,0x20
c00190b7:	83 ec 0c             	sub    esp,0xc
c00190ba:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00190c1:	e8 84 27 ff ff       	call   c000b84a <File::close()>
c00190c6:	83 c4 10             	add    esp,0x10
c00190c9:	8d 76 00             	lea    esi,[esi+0x0]
c00190cc:	83 ec 08             	sub    esp,0x8
c00190cf:	6a 01                	push   0x1
c00190d1:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00190d8:	e8 0f 27 ff ff       	call   c000b7ec <File::open(FileOpenMode)>
c00190dd:	83 c4 10             	add    esp,0x10
c00190e0:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00190e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00190e9:	83 c0 0c             	add    eax,0xc
c00190ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00190ee:	83 ec 0c             	sub    esp,0xc
c00190f1:	8d 54 24 24          	lea    edx,[esp+0x24]
c00190f5:	52                   	push   edx
c00190f6:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00190fa:	52                   	push   edx
c00190fb:	6a 00                	push   0x0
c00190fd:	6a 04                	push   0x4
c00190ff:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019106:	ff d0                	call   eax
c0019108:	83 c4 20             	add    esp,0x20
c001910b:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019112:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019118:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001911f:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0019126:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0019129:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0019130:	83 ec 0c             	sub    esp,0xc
c0019133:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001913a:	e8 0b 27 ff ff       	call   c000b84a <File::close()>
c001913f:	83 c4 10             	add    esp,0x10
c0019142:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0019149:	ba 00 00 00 00       	mov    edx,0x0
c001914e:	81 c4 3c 04 00 00    	add    esp,0x43c
c0019154:	5b                   	pop    ebx
c0019155:	5e                   	pop    esi
c0019156:	5f                   	pop    edi
c0019157:	5d                   	pop    ebp
c0019158:	c3                   	ret    
c0019159:	90                   	nop
c001915a:	66 90                	xchg   ax,ax

c001915c <FAT::readDir(void*, unsigned long, void*, int*)>:
c001915c:	57                   	push   edi
c001915d:	56                   	push   esi
c001915e:	53                   	push   ebx
c001915f:	81 ec 50 02 00 00    	sub    esp,0x250
c0019165:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001916d:	74 0d                	je     c001917c <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001916f:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0019177:	75 0f                	jne    c0019188 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0019179:	8d 76 00             	lea    esi,[esi+0x0]
c001917c:	b8 04 00 00 00       	mov    eax,0x4
c0019181:	e9 3a 01 00 00       	jmp    c00192c0 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019186:	66 90                	xchg   ax,ax
c0019188:	83 ec 08             	sub    esp,0x8
c001918b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019192:	50                   	push   eax
c0019193:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001919a:	e8 57 b5 fe ff       	call   c00046f6 <f_readdir>
c001919f:	83 c4 10             	add    esp,0x10
c00191a2:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00191a9:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c00191b0:	83 ec 0c             	sub    esp,0xc
c00191b3:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00191ba:	83 c0 16             	add    eax,0x16
c00191bd:	50                   	push   eax
c00191be:	e8 ad 73 fe ff       	call   c0000570 <strlen>
c00191c3:	83 c4 10             	add    esp,0x10
c00191c6:	ba 00 00 00 00       	mov    edx,0x0
c00191cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00191cf:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00191d3:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00191da:	0f b6 c0             	movzx  eax,al
c00191dd:	83 e0 10             	and    eax,0x10
c00191e0:	74 0a                	je     c00191ec <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c00191e2:	b8 02 00 00 00       	mov    eax,0x2
c00191e7:	eb 0b                	jmp    c00191f4 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c00191e9:	8d 76 00             	lea    esi,[esi+0x0]
c00191ec:	b8 01 00 00 00       	mov    eax,0x1
c00191f1:	8d 76 00             	lea    esi,[esi+0x0]
c00191f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00191f8:	83 ec 08             	sub    esp,0x8
c00191fb:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019202:	83 c0 16             	add    eax,0x16
c0019205:	50                   	push   eax
c0019206:	8d 44 24 14          	lea    eax,[esp+0x14]
c001920a:	83 c0 10             	add    eax,0x10
c001920d:	50                   	push   eax
c001920e:	e8 2d 74 fe ff       	call   c0000640 <strcpy>
c0019213:	83 c4 10             	add    esp,0x10
c0019216:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001921d:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0019224:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019228:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001922f:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0019236:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001923d:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0019244:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001924b:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0019252:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0019259:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0019260:	89 c6                	mov    esi,eax
c0019262:	89 d7                	mov    edi,edx
c0019264:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019266:	89 c8                	mov    eax,ecx
c0019268:	89 fa                	mov    edx,edi
c001926a:	89 f3                	mov    ebx,esi
c001926c:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0019273:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001927a:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0019281:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0019288:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001928e:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0019295:	0f be c0             	movsx  eax,al
c0019298:	85 c0                	test   eax,eax
c001929a:	75 08                	jne    c00192a4 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001929c:	b8 07 00 00 00       	mov    eax,0x7
c00192a1:	eb 1d                	jmp    c00192c0 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00192a3:	90                   	nop
c00192a4:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00192ab:	85 c0                	test   eax,eax
c00192ad:	75 09                	jne    c00192b8 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c00192af:	b8 00 00 00 00       	mov    eax,0x0
c00192b4:	eb 0a                	jmp    c00192c0 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00192b6:	66 90                	xchg   ax,ax
c00192b8:	b8 01 00 00 00       	mov    eax,0x1
c00192bd:	8d 76 00             	lea    esi,[esi+0x0]
c00192c0:	81 c4 50 02 00 00    	add    esp,0x250
c00192c6:	5b                   	pop    ebx
c00192c7:	5e                   	pop    esi
c00192c8:	5f                   	pop    edi
c00192c9:	c3                   	ret    
c00192ca:	66 90                	xchg   ax,ax

c00192cc <FAT::read(void*, unsigned long, void*, int*)>:
c00192cc:	83 ec 1c             	sub    esp,0x1c
c00192cf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00192d4:	74 0a                	je     c00192e0 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c00192d6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00192db:	75 0b                	jne    c00192e8 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c00192dd:	8d 76 00             	lea    esi,[esi+0x0]
c00192e0:	b8 04 00 00 00       	mov    eax,0x4
c00192e5:	eb 41                	jmp    c0019328 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00192e7:	90                   	nop
c00192e8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00192ec:	50                   	push   eax
c00192ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00192f1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00192f5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00192f9:	e8 1f ac fe ff       	call   c0003f1d <f_read>
c00192fe:	83 c4 10             	add    esp,0x10
c0019301:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019305:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019309:	89 c2                	mov    edx,eax
c001930b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001930f:	89 10                	mov    DWORD PTR [eax],edx
c0019311:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019315:	85 c0                	test   eax,eax
c0019317:	75 07                	jne    c0019320 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0019319:	b8 00 00 00 00       	mov    eax,0x0
c001931e:	eb 08                	jmp    c0019328 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019320:	b8 01 00 00 00       	mov    eax,0x1
c0019325:	8d 76 00             	lea    esi,[esi+0x0]
c0019328:	83 c4 1c             	add    esp,0x1c
c001932b:	c3                   	ret    

c001932c <FAT::write(void*, unsigned long, void*, int*)>:
c001932c:	83 ec 1c             	sub    esp,0x1c
c001932f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019334:	74 0a                	je     c0019340 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0019336:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001933b:	75 0b                	jne    c0019348 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001933d:	8d 76 00             	lea    esi,[esi+0x0]
c0019340:	b8 04 00 00 00       	mov    eax,0x4
c0019345:	eb 41                	jmp    c0019388 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019347:	90                   	nop
c0019348:	8d 44 24 08          	lea    eax,[esp+0x8]
c001934c:	50                   	push   eax
c001934d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019351:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019359:	e8 be ad fe ff       	call   c000411c <f_write>
c001935e:	83 c4 10             	add    esp,0x10
c0019361:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019365:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019369:	89 c2                	mov    edx,eax
c001936b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001936f:	89 10                	mov    DWORD PTR [eax],edx
c0019371:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019375:	85 c0                	test   eax,eax
c0019377:	75 07                	jne    c0019380 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0019379:	b8 00 00 00 00       	mov    eax,0x0
c001937e:	eb 08                	jmp    c0019388 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019380:	b8 01 00 00 00       	mov    eax,0x1
c0019385:	8d 76 00             	lea    esi,[esi+0x0]
c0019388:	83 c4 1c             	add    esp,0x1c
c001938b:	c3                   	ret    

c001938c <FAT::close(void*)>:
c001938c:	83 ec 1c             	sub    esp,0x1c
c001938f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019394:	75 0a                	jne    c00193a0 <FAT::close(void*)+0x14>
c0019396:	b8 04 00 00 00       	mov    eax,0x4
c001939b:	eb 3f                	jmp    c00193dc <FAT::close(void*)+0x50>
c001939d:	8d 76 00             	lea    esi,[esi+0x0]
c00193a0:	83 ec 0c             	sub    esp,0xc
c00193a3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00193a7:	e8 7d b0 fe ff       	call   c0004429 <f_close>
c00193ac:	83 c4 10             	add    esp,0x10
c00193af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00193b3:	83 ec 0c             	sub    esp,0xc
c00193b6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00193ba:	e8 07 e7 fe ff       	call   c0007ac6 <free>
c00193bf:	83 c4 10             	add    esp,0x10
c00193c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00193c6:	85 c0                	test   eax,eax
c00193c8:	75 0a                	jne    c00193d4 <FAT::close(void*)+0x48>
c00193ca:	b8 00 00 00 00       	mov    eax,0x0
c00193cf:	eb 0b                	jmp    c00193dc <FAT::close(void*)+0x50>
c00193d1:	8d 76 00             	lea    esi,[esi+0x0]
c00193d4:	b8 01 00 00 00       	mov    eax,0x1
c00193d9:	8d 76 00             	lea    esi,[esi+0x0]
c00193dc:	83 c4 1c             	add    esp,0x1c
c00193df:	c3                   	ret    

c00193e0 <FAT::closeDir(void*)>:
c00193e0:	83 ec 1c             	sub    esp,0x1c
c00193e3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00193e8:	75 0a                	jne    c00193f4 <FAT::closeDir(void*)+0x14>
c00193ea:	b8 04 00 00 00       	mov    eax,0x4
c00193ef:	eb 3f                	jmp    c0019430 <FAT::closeDir(void*)+0x50>
c00193f1:	8d 76 00             	lea    esi,[esi+0x0]
c00193f4:	83 ec 0c             	sub    esp,0xc
c00193f7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00193fb:	e8 d4 b2 fe ff       	call   c00046d4 <f_closedir>
c0019400:	83 c4 10             	add    esp,0x10
c0019403:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019407:	83 ec 0c             	sub    esp,0xc
c001940a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001940e:	e8 b3 e6 fe ff       	call   c0007ac6 <free>
c0019413:	83 c4 10             	add    esp,0x10
c0019416:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001941a:	85 c0                	test   eax,eax
c001941c:	75 0a                	jne    c0019428 <FAT::closeDir(void*)+0x48>
c001941e:	b8 00 00 00 00       	mov    eax,0x0
c0019423:	eb 0b                	jmp    c0019430 <FAT::closeDir(void*)+0x50>
c0019425:	8d 76 00             	lea    esi,[esi+0x0]
c0019428:	b8 01 00 00 00       	mov    eax,0x1
c001942d:	8d 76 00             	lea    esi,[esi+0x0]
c0019430:	83 c4 1c             	add    esp,0x1c
c0019433:	c3                   	ret    

c0019434 <FAT::truncate(void*, unsigned long long)>:
c0019434:	83 ec 2c             	sub    esp,0x2c
c0019437:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001943b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001943f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019443:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019447:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001944c:	75 0a                	jne    c0019458 <FAT::truncate(void*, unsigned long long)+0x24>
c001944e:	b8 04 00 00 00       	mov    eax,0x4
c0019453:	eb 47                	jmp    c001949c <FAT::truncate(void*, unsigned long long)+0x68>
c0019455:	8d 76 00             	lea    esi,[esi+0x0]
c0019458:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001945c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001945f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019463:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001946b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001946f:	83 ec 08             	sub    esp,0x8
c0019472:	50                   	push   eax
c0019473:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019477:	e8 dc af fe ff       	call   c0004458 <f_lseek>
c001947c:	83 c4 10             	add    esp,0x10
c001947f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019483:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019487:	85 c0                	test   eax,eax
c0019489:	75 09                	jne    c0019494 <FAT::truncate(void*, unsigned long long)+0x60>
c001948b:	b8 00 00 00 00       	mov    eax,0x0
c0019490:	eb 0a                	jmp    c001949c <FAT::truncate(void*, unsigned long long)+0x68>
c0019492:	66 90                	xchg   ax,ax
c0019494:	b8 01 00 00 00       	mov    eax,0x1
c0019499:	8d 76 00             	lea    esi,[esi+0x0]
c001949c:	83 c4 2c             	add    esp,0x2c
c001949f:	c3                   	ret    

c00194a0 <FAT::seek(void*, unsigned long long)>:
c00194a0:	83 ec 2c             	sub    esp,0x2c
c00194a3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00194a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00194ab:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00194af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00194b3:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00194b8:	75 0a                	jne    c00194c4 <FAT::seek(void*, unsigned long long)+0x24>
c00194ba:	b8 04 00 00 00       	mov    eax,0x4
c00194bf:	eb 33                	jmp    c00194f4 <FAT::seek(void*, unsigned long long)+0x54>
c00194c1:	8d 76 00             	lea    esi,[esi+0x0]
c00194c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00194c8:	83 ec 08             	sub    esp,0x8
c00194cb:	50                   	push   eax
c00194cc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00194d0:	e8 83 af fe ff       	call   c0004458 <f_lseek>
c00194d5:	83 c4 10             	add    esp,0x10
c00194d8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00194dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00194e0:	85 c0                	test   eax,eax
c00194e2:	75 08                	jne    c00194ec <FAT::seek(void*, unsigned long long)+0x4c>
c00194e4:	b8 00 00 00 00       	mov    eax,0x0
c00194e9:	eb 09                	jmp    c00194f4 <FAT::seek(void*, unsigned long long)+0x54>
c00194eb:	90                   	nop
c00194ec:	b8 01 00 00 00       	mov    eax,0x1
c00194f1:	8d 76 00             	lea    esi,[esi+0x0]
c00194f4:	83 c4 2c             	add    esp,0x2c
c00194f7:	c3                   	ret    

c00194f8 <fatWrapperReadDisk>:
c00194f8:	53                   	push   ebx
c00194f9:	83 ec 18             	sub    esp,0x18
c00194fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019500:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019504:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019509:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0019510:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019514:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019518:	ba 00 00 00 00       	mov    edx,0x0
c001951d:	83 ec 0c             	sub    esp,0xc
c0019520:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019524:	53                   	push   ebx
c0019525:	52                   	push   edx
c0019526:	50                   	push   eax
c0019527:	51                   	push   ecx
c0019528:	e8 ef 44 ff ff       	call   c000da1c <LogicalDisk::read(unsigned long long, int, void*)>
c001952d:	83 c4 20             	add    esp,0x20
c0019530:	83 c4 18             	add    esp,0x18
c0019533:	5b                   	pop    ebx
c0019534:	c3                   	ret    
c0019535:	8d 76 00             	lea    esi,[esi+0x0]

c0019538 <fatWrapperWriteDisk>:
c0019538:	53                   	push   ebx
c0019539:	83 ec 18             	sub    esp,0x18
c001953c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019540:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019544:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019549:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0019550:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019554:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019558:	ba 00 00 00 00       	mov    edx,0x0
c001955d:	83 ec 0c             	sub    esp,0xc
c0019560:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019564:	53                   	push   ebx
c0019565:	52                   	push   edx
c0019566:	50                   	push   eax
c0019567:	51                   	push   ecx
c0019568:	e8 1b 45 ff ff       	call   c000da88 <LogicalDisk::write(unsigned long long, int, void*)>
c001956d:	83 c4 20             	add    esp,0x20
c0019570:	83 c4 18             	add    esp,0x18
c0019573:	5b                   	pop    ebx
c0019574:	c3                   	ret    
c0019575:	8d 76 00             	lea    esi,[esi+0x0]

c0019578 <fatWrapperIoctl>:
c0019578:	53                   	push   ebx
c0019579:	83 ec 28             	sub    esp,0x28
c001957c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019580:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019584:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019588:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001958c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019591:	83 f8 02             	cmp    eax,0x2
c0019594:	75 32                	jne    c00195c8 <fatWrapperIoctl+0x50>
c0019596:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001959a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001959e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00195a3:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c00195aa:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00195b0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00195b6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00195ba:	66 89 02             	mov    WORD PTR [edx],ax
c00195bd:	b8 00 00 00 00       	mov    eax,0x0
c00195c2:	e9 c5 00 00 00       	jmp    c001968c <fatWrapperIoctl+0x114>
c00195c7:	90                   	nop
c00195c8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00195cd:	83 f8 01             	cmp    eax,0x1
c00195d0:	75 6a                	jne    c001963c <fatWrapperIoctl+0xc4>
c00195d2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00195d6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00195da:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00195df:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c00195e6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00195ec:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00195f2:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00195f8:	89 c8                	mov    eax,ecx
c00195fa:	89 da                	mov    edx,ebx
c00195fc:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019600:	c1 e0 0a             	shl    eax,0xa
c0019603:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019608:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c001960f:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019615:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001961b:	89 cb                	mov    ebx,ecx
c001961d:	c1 fb 1f             	sar    ebx,0x1f
c0019620:	53                   	push   ebx
c0019621:	51                   	push   ecx
c0019622:	52                   	push   edx
c0019623:	50                   	push   eax
c0019624:	e8 77 5b 00 00       	call   c001f1a0 <__udivdi3>
c0019629:	83 c4 10             	add    esp,0x10
c001962c:	89 c2                	mov    edx,eax
c001962e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019632:	89 10                	mov    DWORD PTR [eax],edx
c0019634:	b8 00 00 00 00       	mov    eax,0x0
c0019639:	eb 51                	jmp    c001968c <fatWrapperIoctl+0x114>
c001963b:	90                   	nop
c001963c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019641:	85 c0                	test   eax,eax
c0019643:	75 07                	jne    c001964c <fatWrapperIoctl+0xd4>
c0019645:	b8 00 00 00 00       	mov    eax,0x0
c001964a:	eb 40                	jmp    c001968c <fatWrapperIoctl+0x114>
c001964c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019651:	83 f8 03             	cmp    eax,0x3
c0019654:	75 1a                	jne    c0019670 <fatWrapperIoctl+0xf8>
c0019656:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001965a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001965e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019662:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019668:	b8 00 00 00 00       	mov    eax,0x0
c001966d:	eb 1d                	jmp    c001968c <fatWrapperIoctl+0x114>
c001966f:	90                   	nop
c0019670:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019675:	83 f8 04             	cmp    eax,0x4
c0019678:	75 0a                	jne    c0019684 <fatWrapperIoctl+0x10c>
c001967a:	b8 00 00 00 00       	mov    eax,0x0
c001967f:	eb 0b                	jmp    c001968c <fatWrapperIoctl+0x114>
c0019681:	8d 76 00             	lea    esi,[esi+0x0]
c0019684:	b8 04 00 00 00       	mov    eax,0x4
c0019689:	8d 76 00             	lea    esi,[esi+0x0]
c001968c:	83 c4 28             	add    esp,0x28
c001968f:	5b                   	pop    ebx
c0019690:	c3                   	ret    
c0019691:	90                   	nop
c0019692:	66 90                	xchg   ax,ax

c0019694 <FAT::FAT()>:
c0019694:	83 ec 1c             	sub    esp,0x1c
c0019697:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001969b:	83 ec 0c             	sub    esp,0xc
c001969e:	50                   	push   eax
c001969f:	e8 14 1e ff ff       	call   c000b4b8 <Filesystem::Filesystem()>
c00196a4:	83 c4 10             	add    esp,0x10
c00196a7:	ba 6c 27 02 c0       	mov    edx,0xc002276c
c00196ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00196b0:	89 10                	mov    DWORD PTR [eax],edx
c00196b2:	c7 05 80 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029780,0x0
c00196bc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00196c4:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00196c9:	7f 19                	jg     c00196e4 <FAT::FAT()+0x50>
c00196cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00196cf:	c7 04 85 a0 97 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd6860],0xffffffff
c00196da:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00196df:	eb e3                	jmp    c00196c4 <FAT::FAT()+0x30>
c00196e1:	8d 76 00             	lea    esi,[esi+0x0]
c00196e4:	90                   	nop
c00196e5:	83 c4 1c             	add    esp,0x1c
c00196e8:	c3                   	ret    
c00196e9:	90                   	nop
c00196ea:	66 90                	xchg   ax,ax

c00196ec <FAT::fixFilepath(char*)>:
c00196ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196f0:	8a 00                	mov    al,BYTE PTR [eax]
c00196f2:	0f be c0             	movsx  eax,al
c00196f5:	83 f8 40             	cmp    eax,0x40
c00196f8:	7e 2e                	jle    c0019728 <FAT::fixFilepath(char*)+0x3c>
c00196fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196fe:	8a 00                	mov    al,BYTE PTR [eax]
c0019700:	83 e8 41             	sub    eax,0x41
c0019703:	88 c2                	mov    dl,al
c0019705:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019709:	88 10                	mov    BYTE PTR [eax],dl
c001970b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001970f:	8a 00                	mov    al,BYTE PTR [eax]
c0019711:	0f be c0             	movsx  eax,al
c0019714:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c001971b:	83 c0 30             	add    eax,0x30
c001971e:	88 c2                	mov    dl,al
c0019720:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019724:	88 10                	mov    BYTE PTR [eax],dl
c0019726:	66 90                	xchg   ax,ax
c0019728:	90                   	nop
c0019729:	c3                   	ret    
c001972a:	66 90                	xchg   ax,ax

c001972c <FAT::open(char const*, void**, FileOpenMode)>:
c001972c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019732:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001973a:	74 0c                	je     c0019748 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001973c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019744:	75 0e                	jne    c0019754 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0019746:	66 90                	xchg   ax,ax
c0019748:	b8 04 00 00 00       	mov    eax,0x4
c001974d:	e9 46 01 00 00       	jmp    c0019898 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019752:	66 90                	xchg   ax,ax
c0019754:	83 ec 08             	sub    esp,0x8
c0019757:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001975e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019762:	50                   	push   eax
c0019763:	e8 d8 6e fe ff       	call   c0000640 <strcpy>
c0019768:	83 c4 10             	add    esp,0x10
c001976b:	83 ec 08             	sub    esp,0x8
c001976e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019772:	50                   	push   eax
c0019773:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001977a:	e8 6d ff ff ff       	call   c00196ec <FAT::fixFilepath(char*)>
c001977f:	83 c4 10             	add    esp,0x10
c0019782:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001978a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019791:	83 e0 01             	and    eax,0x1
c0019794:	74 12                	je     c00197a8 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0019796:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001979d:	83 c8 01             	or     eax,0x1
c00197a0:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00197a7:	90                   	nop
c00197a8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00197af:	83 e0 04             	and    eax,0x4
c00197b2:	74 24                	je     c00197d8 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c00197b4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00197bb:	83 c8 30             	or     eax,0x30
c00197be:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00197c5:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00197cc:	83 c8 02             	or     eax,0x2
c00197cf:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00197d6:	66 90                	xchg   ax,ax
c00197d8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00197df:	83 e0 02             	and    eax,0x2
c00197e2:	74 14                	je     c00197f8 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c00197e4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00197eb:	83 c8 02             	or     eax,0x2
c00197ee:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00197f5:	8d 76 00             	lea    esi,[esi+0x0]
c00197f8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00197ff:	83 e0 08             	and    eax,0x8
c0019802:	74 14                	je     c0019818 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0019804:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001980b:	83 c8 04             	or     eax,0x4
c001980e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019815:	8d 76 00             	lea    esi,[esi+0x0]
c0019818:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001981f:	83 e0 10             	and    eax,0x10
c0019822:	74 14                	je     c0019838 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0019824:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001982b:	83 c8 08             	or     eax,0x8
c001982e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019835:	8d 76 00             	lea    esi,[esi+0x0]
c0019838:	83 ec 0c             	sub    esp,0xc
c001983b:	68 28 02 00 00       	push   0x228
c0019840:	e8 71 e2 fe ff       	call   c0007ab6 <malloc>
c0019845:	83 c4 10             	add    esp,0x10
c0019848:	89 c2                	mov    edx,eax
c001984a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019851:	89 10                	mov    DWORD PTR [eax],edx
c0019853:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001985b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019862:	8b 00                	mov    eax,DWORD PTR [eax]
c0019864:	83 ec 04             	sub    esp,0x4
c0019867:	52                   	push   edx
c0019868:	8d 54 24 10          	lea    edx,[esp+0x10]
c001986c:	52                   	push   edx
c001986d:	50                   	push   eax
c001986e:	e8 e7 a3 fe ff       	call   c0003c5a <f_open>
c0019873:	83 c4 10             	add    esp,0x10
c0019876:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001987d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019885:	74 09                	je     c0019890 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0019887:	b8 01 00 00 00       	mov    eax,0x1
c001988c:	eb 0a                	jmp    c0019898 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001988e:	66 90                	xchg   ax,ax
c0019890:	b8 00 00 00 00       	mov    eax,0x0
c0019895:	8d 76 00             	lea    esi,[esi+0x0]
c0019898:	81 c4 1c 01 00 00    	add    esp,0x11c
c001989e:	c3                   	ret    
c001989f:	90                   	nop

c00198a0 <FAT::openDir(char const*, void**)>:
c00198a0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00198a6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00198ae:	74 0c                	je     c00198bc <FAT::openDir(char const*, void**)+0x1c>
c00198b0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00198b8:	75 0e                	jne    c00198c8 <FAT::openDir(char const*, void**)+0x28>
c00198ba:	66 90                	xchg   ax,ax
c00198bc:	b8 04 00 00 00       	mov    eax,0x4
c00198c1:	e9 82 00 00 00       	jmp    c0019948 <FAT::openDir(char const*, void**)+0xa8>
c00198c6:	66 90                	xchg   ax,ax
c00198c8:	83 ec 08             	sub    esp,0x8
c00198cb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00198d2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00198d6:	50                   	push   eax
c00198d7:	e8 64 6d fe ff       	call   c0000640 <strcpy>
c00198dc:	83 c4 10             	add    esp,0x10
c00198df:	83 ec 08             	sub    esp,0x8
c00198e2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00198e6:	50                   	push   eax
c00198e7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00198ee:	e8 f9 fd ff ff       	call   c00196ec <FAT::fixFilepath(char*)>
c00198f3:	83 c4 10             	add    esp,0x10
c00198f6:	83 ec 0c             	sub    esp,0xc
c00198f9:	6a 30                	push   0x30
c00198fb:	e8 b6 e1 fe ff       	call   c0007ab6 <malloc>
c0019900:	83 c4 10             	add    esp,0x10
c0019903:	89 c2                	mov    edx,eax
c0019905:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001990c:	89 10                	mov    DWORD PTR [eax],edx
c001990e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019915:	8b 00                	mov    eax,DWORD PTR [eax]
c0019917:	83 ec 08             	sub    esp,0x8
c001991a:	8d 54 24 14          	lea    edx,[esp+0x14]
c001991e:	52                   	push   edx
c001991f:	50                   	push   eax
c0019920:	e8 e4 ac fe ff       	call   c0004609 <f_opendir>
c0019925:	83 c4 10             	add    esp,0x10
c0019928:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001992f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019937:	74 07                	je     c0019940 <FAT::openDir(char const*, void**)+0xa0>
c0019939:	b8 01 00 00 00       	mov    eax,0x1
c001993e:	eb 08                	jmp    c0019948 <FAT::openDir(char const*, void**)+0xa8>
c0019940:	b8 00 00 00 00       	mov    eax,0x0
c0019945:	8d 76 00             	lea    esi,[esi+0x0]
c0019948:	81 c4 1c 01 00 00    	add    esp,0x11c
c001994e:	c3                   	ret    
c001994f:	90                   	nop

c0019950 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019950:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019956:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001995e:	75 0c                	jne    c001996c <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019960:	b8 04 00 00 00       	mov    eax,0x4
c0019965:	e9 d6 00 00 00       	jmp    c0019a40 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001996a:	66 90                	xchg   ax,ax
c001996c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019974:	75 0a                	jne    c0019980 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0019976:	b8 04 00 00 00       	mov    eax,0x4
c001997b:	e9 c0 00 00 00       	jmp    c0019a40 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019980:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019988:	75 0a                	jne    c0019994 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001998a:	b8 04 00 00 00       	mov    eax,0x4
c001998f:	e9 ac 00 00 00       	jmp    c0019a40 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019994:	83 ec 08             	sub    esp,0x8
c0019997:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001999e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00199a5:	50                   	push   eax
c00199a6:	e8 95 6c fe ff       	call   c0000640 <strcpy>
c00199ab:	83 c4 10             	add    esp,0x10
c00199ae:	83 ec 08             	sub    esp,0x8
c00199b1:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00199b8:	50                   	push   eax
c00199b9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00199c0:	e8 27 fd ff ff       	call   c00196ec <FAT::fixFilepath(char*)>
c00199c5:	83 c4 10             	add    esp,0x10
c00199c8:	83 ec 08             	sub    esp,0x8
c00199cb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00199cf:	50                   	push   eax
c00199d0:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00199d7:	50                   	push   eax
c00199d8:	e8 ab ad fe ff       	call   c0004788 <f_stat>
c00199dd:	83 c4 10             	add    esp,0x10
c00199e0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00199e7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00199ee:	85 c0                	test   eax,eax
c00199f0:	74 0a                	je     c00199fc <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c00199f2:	83 f8 04             	cmp    eax,0x4
c00199f5:	74 39                	je     c0019a30 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c00199f7:	eb 3f                	jmp    c0019a38 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c00199f9:	8d 76 00             	lea    esi,[esi+0x0]
c00199fc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019a00:	0f b6 c0             	movzx  eax,al
c0019a03:	83 e0 10             	and    eax,0x10
c0019a06:	0f 95 c2             	setne  dl
c0019a09:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019a10:	88 10                	mov    BYTE PTR [eax],dl
c0019a12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019a16:	ba 00 00 00 00       	mov    edx,0x0
c0019a1b:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019a22:	89 01                	mov    DWORD PTR [ecx],eax
c0019a24:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019a27:	b8 00 00 00 00       	mov    eax,0x0
c0019a2c:	eb 12                	jmp    c0019a40 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019a2e:	66 90                	xchg   ax,ax
c0019a30:	b8 02 00 00 00       	mov    eax,0x2
c0019a35:	eb 09                	jmp    c0019a40 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019a37:	90                   	nop
c0019a38:	b8 01 00 00 00       	mov    eax,0x1
c0019a3d:	8d 76 00             	lea    esi,[esi+0x0]
c0019a40:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019a46:	c3                   	ret    
c0019a47:	90                   	nop

c0019a48 <FAT::unlink(char const*)>:
c0019a48:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019a4e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019a56:	75 08                	jne    c0019a60 <FAT::unlink(char const*)+0x18>
c0019a58:	b8 04 00 00 00       	mov    eax,0x4
c0019a5d:	eb 61                	jmp    c0019ac0 <FAT::unlink(char const*)+0x78>
c0019a5f:	90                   	nop
c0019a60:	83 ec 08             	sub    esp,0x8
c0019a63:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019a6a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019a6e:	50                   	push   eax
c0019a6f:	e8 cc 6b fe ff       	call   c0000640 <strcpy>
c0019a74:	83 c4 10             	add    esp,0x10
c0019a77:	83 ec 08             	sub    esp,0x8
c0019a7a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019a7e:	50                   	push   eax
c0019a7f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019a86:	e8 61 fc ff ff       	call   c00196ec <FAT::fixFilepath(char*)>
c0019a8b:	83 c4 10             	add    esp,0x10
c0019a8e:	83 ec 0c             	sub    esp,0xc
c0019a91:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019a95:	50                   	push   eax
c0019a96:	e8 5f af fe ff       	call   c00049fa <f_unlink>
c0019a9b:	83 c4 10             	add    esp,0x10
c0019a9e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019aa5:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019aac:	85 c0                	test   eax,eax
c0019aae:	75 08                	jne    c0019ab8 <FAT::unlink(char const*)+0x70>
c0019ab0:	b8 00 00 00 00       	mov    eax,0x0
c0019ab5:	eb 09                	jmp    c0019ac0 <FAT::unlink(char const*)+0x78>
c0019ab7:	90                   	nop
c0019ab8:	b8 01 00 00 00       	mov    eax,0x1
c0019abd:	8d 76 00             	lea    esi,[esi+0x0]
c0019ac0:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019ac6:	c3                   	ret    
c0019ac7:	90                   	nop

c0019ac8 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019ac8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019ace:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0019ad5:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0019adc:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019ae0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019ae4:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019aec:	75 0a                	jne    c0019af8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0019aee:	b8 04 00 00 00       	mov    eax,0x4
c0019af3:	e9 7c 01 00 00       	jmp    c0019c74 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0019af8:	83 ec 08             	sub    esp,0x8
c0019afb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019b02:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019b06:	50                   	push   eax
c0019b07:	e8 34 6b fe ff       	call   c0000640 <strcpy>
c0019b0c:	83 c4 10             	add    esp,0x10
c0019b0f:	83 ec 08             	sub    esp,0x8
c0019b12:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019b16:	50                   	push   eax
c0019b17:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019b1e:	e8 c9 fb ff ff       	call   c00196ec <FAT::fixFilepath(char*)>
c0019b23:	83 c4 10             	add    esp,0x10
c0019b26:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019b2e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0019b36:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b3b:	83 e0 01             	and    eax,0x1
c0019b3e:	74 14                	je     c0019b54 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c0019b40:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019b47:	83 c8 01             	or     eax,0x1
c0019b4a:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019b51:	8d 76 00             	lea    esi,[esi+0x0]
c0019b54:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b59:	83 e0 02             	and    eax,0x2
c0019b5c:	74 12                	je     c0019b70 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c0019b5e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019b65:	83 c8 20             	or     eax,0x20
c0019b68:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019b6f:	90                   	nop
c0019b70:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b75:	83 e0 04             	and    eax,0x4
c0019b78:	74 12                	je     c0019b8c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c0019b7a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019b81:	83 c8 04             	or     eax,0x4
c0019b84:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019b8b:	90                   	nop
c0019b8c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b91:	83 e0 08             	and    eax,0x8
c0019b94:	74 12                	je     c0019ba8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c0019b96:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019b9d:	83 c8 02             	or     eax,0x2
c0019ba0:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019ba7:	90                   	nop
c0019ba8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019bad:	83 e0 01             	and    eax,0x1
c0019bb0:	74 12                	je     c0019bc4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0019bb2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019bb9:	83 c8 01             	or     eax,0x1
c0019bbc:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019bc3:	90                   	nop
c0019bc4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019bc9:	83 e0 02             	and    eax,0x2
c0019bcc:	74 12                	je     c0019be0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c0019bce:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019bd5:	83 c8 20             	or     eax,0x20
c0019bd8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019bdf:	90                   	nop
c0019be0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019be5:	83 e0 04             	and    eax,0x4
c0019be8:	74 12                	je     c0019bfc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c0019bea:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019bf1:	83 c8 04             	or     eax,0x4
c0019bf4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019bfb:	90                   	nop
c0019bfc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c01:	83 e0 08             	and    eax,0x8
c0019c04:	74 12                	je     c0019c18 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c0019c06:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019c0d:	83 c8 02             	or     eax,0x2
c0019c10:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019c17:	90                   	nop
c0019c18:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0019c1f:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019c26:	09 d0                	or     eax,edx
c0019c28:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019c2f:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0019c37:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019c3f:	83 ec 04             	sub    esp,0x4
c0019c42:	52                   	push   edx
c0019c43:	50                   	push   eax
c0019c44:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019c48:	50                   	push   eax
c0019c49:	e8 21 b2 fe ff       	call   c0004e6f <f_chmod>
c0019c4e:	83 c4 10             	add    esp,0x10
c0019c51:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019c58:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019c5f:	85 c0                	test   eax,eax
c0019c61:	75 09                	jne    c0019c6c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c0019c63:	b8 00 00 00 00       	mov    eax,0x0
c0019c68:	eb 0a                	jmp    c0019c74 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0019c6a:	66 90                	xchg   ax,ax
c0019c6c:	b8 01 00 00 00       	mov    eax,0x1
c0019c71:	8d 76 00             	lea    esi,[esi+0x0]
c0019c74:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019c7a:	c3                   	ret    
c0019c7b:	90                   	nop

c0019c7c <FAT::rename(char const*, char const*)>:
c0019c7c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019c82:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019c8a:	74 0c                	je     c0019c98 <FAT::rename(char const*, char const*)+0x1c>
c0019c8c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019c94:	75 0e                	jne    c0019ca4 <FAT::rename(char const*, char const*)+0x28>
c0019c96:	66 90                	xchg   ax,ax
c0019c98:	b8 04 00 00 00       	mov    eax,0x4
c0019c9d:	e9 9e 00 00 00       	jmp    c0019d40 <FAT::rename(char const*, char const*)+0xc4>
c0019ca2:	66 90                	xchg   ax,ax
c0019ca4:	83 ec 08             	sub    esp,0x8
c0019ca7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019cae:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019cb5:	50                   	push   eax
c0019cb6:	e8 85 69 fe ff       	call   c0000640 <strcpy>
c0019cbb:	83 c4 10             	add    esp,0x10
c0019cbe:	83 ec 08             	sub    esp,0x8
c0019cc1:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019cc8:	50                   	push   eax
c0019cc9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019cd0:	e8 17 fa ff ff       	call   c00196ec <FAT::fixFilepath(char*)>
c0019cd5:	83 c4 10             	add    esp,0x10
c0019cd8:	83 ec 08             	sub    esp,0x8
c0019cdb:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0019ce2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019ce6:	50                   	push   eax
c0019ce7:	e8 54 69 fe ff       	call   c0000640 <strcpy>
c0019cec:	83 c4 10             	add    esp,0x10
c0019cef:	83 ec 08             	sub    esp,0x8
c0019cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019cf6:	50                   	push   eax
c0019cf7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019cfe:	e8 e9 f9 ff ff       	call   c00196ec <FAT::fixFilepath(char*)>
c0019d03:	83 c4 10             	add    esp,0x10
c0019d06:	83 ec 08             	sub    esp,0x8
c0019d09:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d0d:	50                   	push   eax
c0019d0e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019d15:	50                   	push   eax
c0019d16:	e8 9c af fe ff       	call   c0004cb7 <f_rename>
c0019d1b:	83 c4 10             	add    esp,0x10
c0019d1e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019d25:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019d2c:	85 c0                	test   eax,eax
c0019d2e:	75 08                	jne    c0019d38 <FAT::rename(char const*, char const*)+0xbc>
c0019d30:	b8 00 00 00 00       	mov    eax,0x0
c0019d35:	eb 09                	jmp    c0019d40 <FAT::rename(char const*, char const*)+0xc4>
c0019d37:	90                   	nop
c0019d38:	b8 01 00 00 00       	mov    eax,0x1
c0019d3d:	8d 76 00             	lea    esi,[esi+0x0]
c0019d40:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019d46:	c3                   	ret    
c0019d47:	90                   	nop

c0019d48 <FAT::mkdir(char const*)>:
c0019d48:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019d4e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019d56:	75 08                	jne    c0019d60 <FAT::mkdir(char const*)+0x18>
c0019d58:	b8 04 00 00 00       	mov    eax,0x4
c0019d5d:	eb 61                	jmp    c0019dc0 <FAT::mkdir(char const*)+0x78>
c0019d5f:	90                   	nop
c0019d60:	83 ec 08             	sub    esp,0x8
c0019d63:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d6a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019d6e:	50                   	push   eax
c0019d6f:	e8 cc 68 fe ff       	call   c0000640 <strcpy>
c0019d74:	83 c4 10             	add    esp,0x10
c0019d77:	83 ec 08             	sub    esp,0x8
c0019d7a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d7e:	50                   	push   eax
c0019d7f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d86:	e8 61 f9 ff ff       	call   c00196ec <FAT::fixFilepath(char*)>
c0019d8b:	83 c4 10             	add    esp,0x10
c0019d8e:	83 ec 0c             	sub    esp,0xc
c0019d91:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019d95:	50                   	push   eax
c0019d96:	e8 81 ad fe ff       	call   c0004b1c <f_mkdir>
c0019d9b:	83 c4 10             	add    esp,0x10
c0019d9e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019da5:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019dac:	85 c0                	test   eax,eax
c0019dae:	75 08                	jne    c0019db8 <FAT::mkdir(char const*)+0x70>
c0019db0:	b8 00 00 00 00       	mov    eax,0x0
c0019db5:	eb 09                	jmp    c0019dc0 <FAT::mkdir(char const*)+0x78>
c0019db7:	90                   	nop
c0019db8:	b8 01 00 00 00       	mov    eax,0x1
c0019dbd:	8d 76 00             	lea    esi,[esi+0x0]
c0019dc0:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019dc6:	c3                   	ret    
c0019dc7:	90                   	nop

c0019dc8 <FAT::exists(char const*)>:
c0019dc8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019dce:	83 ec 08             	sub    esp,0x8
c0019dd1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019dd8:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019ddc:	50                   	push   eax
c0019ddd:	e8 5e 68 fe ff       	call   c0000640 <strcpy>
c0019de2:	83 c4 10             	add    esp,0x10
c0019de5:	83 ec 08             	sub    esp,0x8
c0019de8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019dec:	50                   	push   eax
c0019ded:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019df4:	e8 f3 f8 ff ff       	call   c00196ec <FAT::fixFilepath(char*)>
c0019df9:	83 c4 10             	add    esp,0x10
c0019dfc:	83 ec 08             	sub    esp,0x8
c0019dff:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0019e06:	50                   	push   eax
c0019e07:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019e0b:	50                   	push   eax
c0019e0c:	e8 77 a9 fe ff       	call   c0004788 <f_stat>
c0019e11:	83 c4 10             	add    esp,0x10
c0019e14:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019e1b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019e22:	85 c0                	test   eax,eax
c0019e24:	75 06                	jne    c0019e2c <FAT::exists(char const*)+0x64>
c0019e26:	b0 01                	mov    al,0x1
c0019e28:	eb 06                	jmp    c0019e30 <FAT::exists(char const*)+0x68>
c0019e2a:	66 90                	xchg   ax,ax
c0019e2c:	b0 00                	mov    al,0x0
c0019e2e:	66 90                	xchg   ax,ax
c0019e30:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019e36:	c3                   	ret    
c0019e37:	90                   	nop

c0019e38 <isoReadDiscSectorHelper>:
c0019e38:	83 ec 2c             	sub    esp,0x2c
c0019e3b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019e3f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019e43:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0019e48:	83 e8 41             	sub    eax,0x41
c0019e4b:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0019e52:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019e56:	ba 00 00 00 00       	mov    edx,0x0
c0019e5b:	83 ec 0c             	sub    esp,0xc
c0019e5e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019e62:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019e66:	52                   	push   edx
c0019e67:	50                   	push   eax
c0019e68:	51                   	push   ecx
c0019e69:	e8 ae 3b ff ff       	call   c000da1c <LogicalDisk::read(unsigned long long, int, void*)>
c0019e6e:	83 c4 20             	add    esp,0x20
c0019e71:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019e75:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0019e7a:	74 0c                	je     c0019e88 <isoReadDiscSectorHelper+0x50>
c0019e7c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019e80:	c1 e0 0b             	shl    eax,0xb
c0019e83:	eb 0b                	jmp    c0019e90 <isoReadDiscSectorHelper+0x58>
c0019e85:	8d 76 00             	lea    esi,[esi+0x0]
c0019e88:	b8 00 00 00 00       	mov    eax,0x0
c0019e8d:	8d 76 00             	lea    esi,[esi+0x0]
c0019e90:	83 c4 2c             	add    esp,0x2c
c0019e93:	c3                   	ret    

c0019e94 <iso_kprintf>:
c0019e94:	83 ec 0c             	sub    esp,0xc
c0019e97:	83 ec 08             	sub    esp,0x8
c0019e9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019e9e:	68 1a 25 02 c0       	push   0xc002251a
c0019ea3:	e8 9d 0a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0019ea8:	83 c4 10             	add    esp,0x10
c0019eab:	90                   	nop
c0019eac:	83 c4 0c             	add    esp,0xc
c0019eaf:	c3                   	ret    

c0019eb0 <iso_kprintfd>:
c0019eb0:	83 ec 0c             	sub    esp,0xc
c0019eb3:	83 ec 08             	sub    esp,0x8
c0019eb6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019eba:	68 7a 0d 02 c0       	push   0xc0020d7a
c0019ebf:	e8 81 0a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0019ec4:	83 c4 10             	add    esp,0x10
c0019ec7:	90                   	nop
c0019ec8:	83 c4 0c             	add    esp,0xc
c0019ecb:	c3                   	ret    

c0019ecc <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019ecc:	b8 08 00 00 00       	mov    eax,0x8
c0019ed1:	c3                   	ret    

c0019ed2 <ISO9660::truncate(void*, unsigned long long)>:
c0019ed2:	b8 01 00 00 00       	mov    eax,0x1
c0019ed7:	c3                   	ret    

c0019ed8 <ISO9660::getName()>:
c0019ed8:	b8 d0 27 02 c0       	mov    eax,0xc00227d0
c0019edd:	c3                   	ret    

c0019ede <ISO9660::closeDir(void*)>:
c0019ede:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ee2:	8b 00                	mov    eax,DWORD PTR [eax]
c0019ee4:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0019ee7:	90                   	nop

c0019ee8 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0019ee8:	b8 01 00 00 00       	mov    eax,0x1
c0019eed:	c3                   	ret    

c0019eee <ISO9660::unlink(char const*)>:
c0019eee:	b8 01 00 00 00       	mov    eax,0x1
c0019ef3:	c3                   	ret    

c0019ef4 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0019ef4:	b8 03 00 00 00       	mov    eax,0x3
c0019ef9:	c3                   	ret    

c0019efa <ISO9660::rename(char const*, char const*)>:
c0019efa:	b8 01 00 00 00       	mov    eax,0x1
c0019eff:	c3                   	ret    

c0019f00 <ISO9660::mkdir(char const*)>:
c0019f00:	b8 01 00 00 00       	mov    eax,0x1
c0019f05:	c3                   	ret    

c0019f06 <ISO9660::~ISO9660()>:
c0019f06:	83 ec 0c             	sub    esp,0xc
c0019f09:	ba 10 29 02 c0       	mov    edx,0xc0022910
c0019f0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f12:	89 10                	mov    DWORD PTR [eax],edx
c0019f14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f18:	83 ec 0c             	sub    esp,0xc
c0019f1b:	50                   	push   eax
c0019f1c:	e8 bb 15 ff ff       	call   c000b4dc <Filesystem::~Filesystem()>
c0019f21:	83 c4 10             	add    esp,0x10
c0019f24:	90                   	nop
c0019f25:	83 c4 0c             	add    esp,0xc
c0019f28:	c3                   	ret    
c0019f29:	90                   	nop

c0019f2a <ISO9660::~ISO9660()>:
c0019f2a:	83 ec 0c             	sub    esp,0xc
c0019f2d:	83 ec 0c             	sub    esp,0xc
c0019f30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f34:	e8 cd ff ff ff       	call   c0019f06 <ISO9660::~ISO9660()>
c0019f39:	83 c4 10             	add    esp,0x10
c0019f3c:	83 ec 08             	sub    esp,0x8
c0019f3f:	6a 08                	push   0x8
c0019f41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f45:	e8 ce 08 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0019f4a:	83 c4 10             	add    esp,0x10
c0019f4d:	83 c4 0c             	add    esp,0xc
c0019f50:	c3                   	ret    
c0019f51:	90                   	nop

c0019f52 <ISO9660::exists(char const*)>:
c0019f52:	83 ec 18             	sub    esp,0x18
c0019f55:	68 eb 27 02 c0       	push   0xc00227eb
c0019f5a:	e8 0a 73 ff ff       	call   c0011269 <KePanic(char const*)>
c0019f5f:	31 c0                	xor    eax,eax
c0019f61:	83 c4 1c             	add    esp,0x1c
c0019f64:	c3                   	ret    
c0019f65:	90                   	nop

c0019f66 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0019f66:	56                   	push   esi
c0019f67:	53                   	push   ebx
c0019f68:	53                   	push   ebx
c0019f69:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019f6d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019f71:	85 db                	test   ebx,ebx
c0019f73:	0f 84 ca 00 00 00    	je     c001a043 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0019f79:	85 f6                	test   esi,esi
c0019f7b:	0f 84 c2 00 00 00    	je     c001a043 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0019f81:	b8 03 00 00 00       	mov    eax,0x3
c0019f86:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0019f8b:	0f 85 b7 00 00 00    	jne    c001a048 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019f91:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0019f93:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c0019f9a:	38 0d 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,cl
c0019fa0:	74 1b                	je     c0019fbd <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0019fa2:	85 c0                	test   eax,eax
c0019fa4:	74 10                	je     c0019fb6 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c0019fa6:	83 ec 0c             	sub    esp,0xc
c0019fa9:	68 09 28 02 c0       	push   0xc0022809
c0019fae:	e8 b6 72 ff ff       	call   c0011269 <KePanic(char const*)>
c0019fb3:	83 c4 10             	add    esp,0x10
c0019fb6:	8a 03                	mov    al,BYTE PTR [ebx]
c0019fb8:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c0019fbd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019fc0:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c0019fc7:	85 c0                	test   eax,eax
c0019fc9:	74 09                	je     c0019fd4 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c0019fcb:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019fd2:	74 48                	je     c001a01c <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c0019fd4:	83 ec 0c             	sub    esp,0xc
c0019fd7:	68 19 28 02 c0       	push   0xc0022819
c0019fdc:	e8 64 09 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0019fe1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019fe4:	83 c4 10             	add    esp,0x10
c0019fe7:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c0019fee:	85 c0                	test   eax,eax
c0019ff0:	74 17                	je     c001a009 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c0019ff2:	83 ec 0c             	sub    esp,0xc
c0019ff5:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019ffc:	68 39 28 02 c0       	push   0xc0022839
c001a001:	e8 3f 09 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a006:	83 c4 10             	add    esp,0x10
c001a009:	83 ec 0c             	sub    esp,0xc
c001a00c:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a013:	50                   	push   eax
c001a014:	e8 2d ca fe ff       	call   c0006a46 <init_percd>
c001a019:	83 c4 10             	add    esp,0x10
c001a01c:	83 c3 03             	add    ebx,0x3
c001a01f:	51                   	push   ecx
c001a020:	51                   	push   ecx
c001a021:	6a 00                	push   0x0
c001a023:	53                   	push   ebx
c001a024:	e8 e4 c4 fe ff       	call   c000650d <iso_open>
c001a029:	83 c4 10             	add    esp,0x10
c001a02c:	89 c2                	mov    edx,eax
c001a02e:	b8 01 00 00 00       	mov    eax,0x1
c001a033:	83 fa ff             	cmp    edx,0xffffffff
c001a036:	74 10                	je     c001a048 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a038:	83 c2 32             	add    edx,0x32
c001a03b:	31 c0                	xor    eax,eax
c001a03d:	01 d2                	add    edx,edx
c001a03f:	89 16                	mov    DWORD PTR [esi],edx
c001a041:	eb 05                	jmp    c001a048 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a043:	b8 04 00 00 00       	mov    eax,0x4
c001a048:	5a                   	pop    edx
c001a049:	5b                   	pop    ebx
c001a04a:	5e                   	pop    esi
c001a04b:	c3                   	ret    

c001a04c <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a04c:	53                   	push   ebx
c001a04d:	83 ec 08             	sub    esp,0x8
c001a050:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a054:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a058:	85 c0                	test   eax,eax
c001a05a:	74 2d                	je     c001a089 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a05c:	85 db                	test   ebx,ebx
c001a05e:	74 29                	je     c001a089 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a060:	b9 02 00 00 00       	mov    ecx,0x2
c001a065:	52                   	push   edx
c001a066:	99                   	cdq    
c001a067:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a06b:	f7 f9                	idiv   ecx
c001a06d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a071:	83 e8 32             	sub    eax,0x32
c001a074:	50                   	push   eax
c001a075:	e8 3b c5 fe ff       	call   c00065b5 <iso_read>
c001a07a:	83 c4 10             	add    esp,0x10
c001a07d:	89 03                	mov    DWORD PTR [ebx],eax
c001a07f:	09 d0                	or     eax,edx
c001a081:	0f 94 c0             	sete   al
c001a084:	0f b6 c0             	movzx  eax,al
c001a087:	eb 05                	jmp    c001a08e <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a089:	b8 04 00 00 00       	mov    eax,0x4
c001a08e:	83 c4 08             	add    esp,0x8
c001a091:	5b                   	pop    ebx
c001a092:	c3                   	ret    
c001a093:	90                   	nop

c001a094 <ISO9660::seek(void*, unsigned long long)>:
c001a094:	57                   	push   edi
c001a095:	56                   	push   esi
c001a096:	b8 04 00 00 00       	mov    eax,0x4
c001a09b:	51                   	push   ecx
c001a09c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a0a0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a0a4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a0a8:	85 d2                	test   edx,edx
c001a0aa:	74 26                	je     c001a0d2 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a0ac:	6a 00                	push   0x0
c001a0ae:	b9 02 00 00 00       	mov    ecx,0x2
c001a0b3:	57                   	push   edi
c001a0b4:	89 d0                	mov    eax,edx
c001a0b6:	56                   	push   esi
c001a0b7:	99                   	cdq    
c001a0b8:	f7 f9                	idiv   ecx
c001a0ba:	83 e8 32             	sub    eax,0x32
c001a0bd:	50                   	push   eax
c001a0be:	e8 08 c6 fe ff       	call   c00066cb <iso_seek>
c001a0c3:	83 c4 10             	add    esp,0x10
c001a0c6:	31 f0                	xor    eax,esi
c001a0c8:	31 fa                	xor    edx,edi
c001a0ca:	09 d0                	or     eax,edx
c001a0cc:	0f 95 c0             	setne  al
c001a0cf:	0f b6 c0             	movzx  eax,al
c001a0d2:	5a                   	pop    edx
c001a0d3:	5e                   	pop    esi
c001a0d4:	5f                   	pop    edi
c001a0d5:	c3                   	ret    

c001a0d6 <ISO9660::tell(void*, unsigned long long*)>:
c001a0d6:	53                   	push   ebx
c001a0d7:	83 ec 08             	sub    esp,0x8
c001a0da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a0de:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a0e2:	85 c0                	test   eax,eax
c001a0e4:	74 24                	je     c001a10a <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a0e6:	85 db                	test   ebx,ebx
c001a0e8:	74 20                	je     c001a10a <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a0ea:	83 ec 0c             	sub    esp,0xc
c001a0ed:	b9 02 00 00 00       	mov    ecx,0x2
c001a0f2:	99                   	cdq    
c001a0f3:	f7 f9                	idiv   ecx
c001a0f5:	83 e8 32             	sub    eax,0x32
c001a0f8:	50                   	push   eax
c001a0f9:	e8 51 c6 fe ff       	call   c000674f <iso_tell>
c001a0fe:	83 c4 10             	add    esp,0x10
c001a101:	89 03                	mov    DWORD PTR [ebx],eax
c001a103:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a106:	31 c0                	xor    eax,eax
c001a108:	eb 05                	jmp    c001a10f <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a10a:	b8 04 00 00 00       	mov    eax,0x4
c001a10f:	83 c4 08             	add    esp,0x8
c001a112:	5b                   	pop    ebx
c001a113:	c3                   	ret    

c001a114 <ISO9660::stat(void*, unsigned long long*)>:
c001a114:	53                   	push   ebx
c001a115:	83 ec 14             	sub    esp,0x14
c001a118:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a11c:	68 5d 28 02 c0       	push   0xc002285d
c001a121:	e8 1f 08 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a126:	83 c4 10             	add    esp,0x10
c001a129:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a12e:	74 2c                	je     c001a15c <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a130:	85 db                	test   ebx,ebx
c001a132:	74 28                	je     c001a15c <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a134:	83 ec 0c             	sub    esp,0xc
c001a137:	b9 02 00 00 00       	mov    ecx,0x2
c001a13c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a140:	99                   	cdq    
c001a141:	f7 f9                	idiv   ecx
c001a143:	83 e8 32             	sub    eax,0x32
c001a146:	50                   	push   eax
c001a147:	e8 34 c6 fe ff       	call   c0006780 <iso_total>
c001a14c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a153:	89 03                	mov    DWORD PTR [ebx],eax
c001a155:	83 c4 10             	add    esp,0x10
c001a158:	31 c0                	xor    eax,eax
c001a15a:	eb 05                	jmp    c001a161 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a15c:	b8 04 00 00 00       	mov    eax,0x4
c001a161:	83 c4 08             	add    esp,0x8
c001a164:	5b                   	pop    ebx
c001a165:	c3                   	ret    

c001a166 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a166:	55                   	push   ebp
c001a167:	57                   	push   edi
c001a168:	56                   	push   esi
c001a169:	53                   	push   ebx
c001a16a:	83 ec 18             	sub    esp,0x18
c001a16d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a171:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a175:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a179:	68 65 28 02 c0       	push   0xc0022865
c001a17e:	e8 c2 07 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a183:	83 c4 10             	add    esp,0x10
c001a186:	85 ff                	test   edi,edi
c001a188:	0f 94 c0             	sete   al
c001a18b:	85 f6                	test   esi,esi
c001a18d:	0f 94 c2             	sete   dl
c001a190:	09 d0                	or     eax,edx
c001a192:	a8 01                	test   al,0x1
c001a194:	0f 85 dd 00 00 00    	jne    c001a277 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a19a:	85 db                	test   ebx,ebx
c001a19c:	0f 84 d5 00 00 00    	je     c001a277 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a1a2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a1a5:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a1ab:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a1b2:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a1b9:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a1bb:	38 0d 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,cl
c001a1c1:	74 1b                	je     c001a1de <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a1c3:	85 c0                	test   eax,eax
c001a1c5:	74 10                	je     c001a1d7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a1c7:	83 ec 0c             	sub    esp,0xc
c001a1ca:	68 09 28 02 c0       	push   0xc0022809
c001a1cf:	e8 95 70 ff ff       	call   c0011269 <KePanic(char const*)>
c001a1d4:	83 c4 10             	add    esp,0x10
c001a1d7:	8a 03                	mov    al,BYTE PTR [ebx]
c001a1d9:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a1de:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a1e1:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a1e8:	85 c0                	test   eax,eax
c001a1ea:	74 09                	je     c001a1f5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a1ec:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a1f3:	74 51                	je     c001a246 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a1f5:	83 ec 0c             	sub    esp,0xc
c001a1f8:	68 6d 28 02 c0       	push   0xc002286d
c001a1fd:	e8 43 07 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a202:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a205:	83 c4 10             	add    esp,0x10
c001a208:	83 3c 85 7c 87 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd7884],0x0
c001a210:	74 21                	je     c001a233 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a212:	83 ec 0c             	sub    esp,0xc
c001a215:	68 8d 28 02 c0       	push   0xc002288d
c001a21a:	e8 26 07 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a21f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a222:	83 c4 10             	add    esp,0x10
c001a225:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a22c:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a233:	83 ec 0c             	sub    esp,0xc
c001a236:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a23d:	50                   	push   eax
c001a23e:	e8 03 c8 fe ff       	call   c0006a46 <init_percd>
c001a243:	83 c4 10             	add    esp,0x10
c001a246:	83 c3 03             	add    ebx,0x3
c001a249:	52                   	push   edx
c001a24a:	52                   	push   edx
c001a24b:	6a 00                	push   0x0
c001a24d:	53                   	push   ebx
c001a24e:	e8 ba c2 fe ff       	call   c000650d <iso_open>
c001a253:	83 c4 10             	add    esp,0x10
c001a256:	89 c5                	mov    ebp,eax
c001a258:	83 f8 ff             	cmp    eax,0xffffffff
c001a25b:	75 21                	jne    c001a27e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a25d:	50                   	push   eax
c001a25e:	50                   	push   eax
c001a25f:	6a 01                	push   0x1
c001a261:	53                   	push   ebx
c001a262:	e8 a6 c2 fe ff       	call   c000650d <iso_open>
c001a267:	83 c4 10             	add    esp,0x10
c001a26a:	ba 02 00 00 00       	mov    edx,0x2
c001a26f:	40                   	inc    eax
c001a270:	74 2b                	je     c001a29d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a272:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a275:	eb 24                	jmp    c001a29b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a277:	ba 04 00 00 00       	mov    edx,0x4
c001a27c:	eb 1f                	jmp    c001a29d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a27e:	83 ec 0c             	sub    esp,0xc
c001a281:	50                   	push   eax
c001a282:	e8 f9 c4 fe ff       	call   c0006780 <iso_total>
c001a287:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a28e:	89 07                	mov    DWORD PTR [edi],eax
c001a290:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a293:	e8 ff c2 fe ff       	call   c0006597 <iso_close>
c001a298:	83 c4 10             	add    esp,0x10
c001a29b:	31 d2                	xor    edx,edx
c001a29d:	83 c4 0c             	add    esp,0xc
c001a2a0:	89 d0                	mov    eax,edx
c001a2a2:	5b                   	pop    ebx
c001a2a3:	5e                   	pop    esi
c001a2a4:	5f                   	pop    edi
c001a2a5:	5d                   	pop    ebp
c001a2a6:	c3                   	ret    
c001a2a7:	90                   	nop

c001a2a8 <ISO9660::close(void*)>:
c001a2a8:	83 ec 0c             	sub    esp,0xc
c001a2ab:	b8 04 00 00 00       	mov    eax,0x4
c001a2b0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a2b4:	85 d2                	test   edx,edx
c001a2b6:	74 1b                	je     c001a2d3 <ISO9660::close(void*)+0x2b>
c001a2b8:	83 ec 0c             	sub    esp,0xc
c001a2bb:	b9 02 00 00 00       	mov    ecx,0x2
c001a2c0:	89 d0                	mov    eax,edx
c001a2c2:	99                   	cdq    
c001a2c3:	f7 f9                	idiv   ecx
c001a2c5:	83 e8 32             	sub    eax,0x32
c001a2c8:	50                   	push   eax
c001a2c9:	e8 c9 c2 fe ff       	call   c0006597 <iso_close>
c001a2ce:	83 c4 10             	add    esp,0x10
c001a2d1:	31 c0                	xor    eax,eax
c001a2d3:	83 c4 0c             	add    esp,0xc
c001a2d6:	c3                   	ret    
c001a2d7:	90                   	nop

c001a2d8 <ISO9660::openDir(char const*, void**)>:
c001a2d8:	56                   	push   esi
c001a2d9:	53                   	push   ebx
c001a2da:	50                   	push   eax
c001a2db:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a2df:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a2e3:	85 db                	test   ebx,ebx
c001a2e5:	0f 84 bd 00 00 00    	je     c001a3a8 <ISO9660::openDir(char const*, void**)+0xd0>
c001a2eb:	85 f6                	test   esi,esi
c001a2ed:	0f 84 b5 00 00 00    	je     c001a3a8 <ISO9660::openDir(char const*, void**)+0xd0>
c001a2f3:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a2f5:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a2fc:	38 15 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,dl
c001a302:	74 1b                	je     c001a31f <ISO9660::openDir(char const*, void**)+0x47>
c001a304:	85 c0                	test   eax,eax
c001a306:	74 10                	je     c001a318 <ISO9660::openDir(char const*, void**)+0x40>
c001a308:	83 ec 0c             	sub    esp,0xc
c001a30b:	68 09 28 02 c0       	push   0xc0022809
c001a310:	e8 54 6f ff ff       	call   c0011269 <KePanic(char const*)>
c001a315:	83 c4 10             	add    esp,0x10
c001a318:	8a 03                	mov    al,BYTE PTR [ebx]
c001a31a:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a31f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a322:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a329:	85 c0                	test   eax,eax
c001a32b:	74 10                	je     c001a33d <ISO9660::openDir(char const*, void**)+0x65>
c001a32d:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a334:	74 1a                	je     c001a350 <ISO9660::openDir(char const*, void**)+0x78>
c001a336:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a33d:	83 ec 0c             	sub    esp,0xc
c001a340:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a347:	50                   	push   eax
c001a348:	e8 f9 c6 fe ff       	call   c0006a46 <init_percd>
c001a34d:	83 c4 10             	add    esp,0x10
c001a350:	83 c3 03             	add    ebx,0x3
c001a353:	50                   	push   eax
c001a354:	50                   	push   eax
c001a355:	6a 01                	push   0x1
c001a357:	53                   	push   ebx
c001a358:	e8 b0 c1 fe ff       	call   c000650d <iso_open>
c001a35d:	83 c4 10             	add    esp,0x10
c001a360:	89 c3                	mov    ebx,eax
c001a362:	83 f8 ff             	cmp    eax,0xffffffff
c001a365:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a36a:	75 1c                	jne    c001a388 <ISO9660::openDir(char const*, void**)+0xb0>
c001a36c:	53                   	push   ebx
c001a36d:	53                   	push   ebx
c001a36e:	68 b1 28 02 c0       	push   0xc00228b1
c001a373:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a379:	e8 28 e7 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a37e:	83 c4 10             	add    esp,0x10
c001a381:	b8 01 00 00 00       	mov    eax,0x1
c001a386:	eb 25                	jmp    c001a3ad <ISO9660::openDir(char const*, void**)+0xd5>
c001a388:	01 db                	add    ebx,ebx
c001a38a:	51                   	push   ecx
c001a38b:	83 c3 65             	add    ebx,0x65
c001a38e:	51                   	push   ecx
c001a38f:	68 c4 28 02 c0       	push   0xc00228c4
c001a394:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a39a:	e8 07 e7 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a39f:	89 1e                	mov    DWORD PTR [esi],ebx
c001a3a1:	83 c4 10             	add    esp,0x10
c001a3a4:	31 c0                	xor    eax,eax
c001a3a6:	eb 05                	jmp    c001a3ad <ISO9660::openDir(char const*, void**)+0xd5>
c001a3a8:	b8 04 00 00 00       	mov    eax,0x4
c001a3ad:	5a                   	pop    edx
c001a3ae:	5b                   	pop    ebx
c001a3af:	5e                   	pop    esi
c001a3b0:	c3                   	ret    
c001a3b1:	90                   	nop

c001a3b2 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a3b2:	55                   	push   ebp
c001a3b3:	57                   	push   edi
c001a3b4:	56                   	push   esi
c001a3b5:	53                   	push   ebx
c001a3b6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a3bc:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a3c3:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a3ca:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a3d2:	0f 84 e7 00 00 00    	je     c001a4bf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001a3d8:	85 db                	test   ebx,ebx
c001a3da:	0f 84 df 00 00 00    	je     c001a4bf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001a3e0:	83 ec 0c             	sub    esp,0xc
c001a3e3:	68 d7 28 02 c0       	push   0xc00228d7
c001a3e8:	e8 58 05 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a3ed:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001a3f4:	b9 02 00 00 00       	mov    ecx,0x2
c001a3f9:	99                   	cdq    
c001a3fa:	f7 f9                	idiv   ecx
c001a3fc:	83 e8 32             	sub    eax,0x32
c001a3ff:	89 04 24             	mov    DWORD PTR [esp],eax
c001a402:	e8 cb c3 fe ff       	call   c00067d2 <iso_readdir>
c001a407:	83 c4 10             	add    esp,0x10
c001a40a:	89 c6                	mov    esi,eax
c001a40c:	85 c0                	test   eax,eax
c001a40e:	75 37                	jne    c001a447 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001a410:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a415:	56                   	push   esi
c001a416:	56                   	push   esi
c001a417:	68 e2 28 02 c0       	push   0xc00228e2
c001a41c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a422:	e8 7f e6 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a427:	83 c4 0c             	add    esp,0xc
c001a42a:	68 10 01 00 00       	push   0x110
c001a42f:	6a 00                	push   0x0
c001a431:	57                   	push   edi
c001a432:	e8 b9 60 fe ff       	call   c00004f0 <memset>
c001a437:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a43d:	83 c4 10             	add    esp,0x10
c001a440:	b8 01 00 00 00       	mov    eax,0x1
c001a445:	eb 7d                	jmp    c001a4c4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001a447:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a44d:	8d 68 08             	lea    ebp,[eax+0x8]
c001a450:	83 ec 0c             	sub    esp,0xc
c001a453:	55                   	push   ebp
c001a454:	e8 17 61 fe ff       	call   c0000570 <strlen>
c001a459:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001a461:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a465:	83 c4 10             	add    esp,0x10
c001a468:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001a46c:	75 0a                	jne    c001a478 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001a46e:	b8 02 00 00 00       	mov    eax,0x2
c001a473:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001a476:	74 05                	je     c001a47d <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001a478:	b8 01 00 00 00       	mov    eax,0x1
c001a47d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a481:	50                   	push   eax
c001a482:	50                   	push   eax
c001a483:	55                   	push   ebp
c001a484:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a488:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001a48c:	50                   	push   eax
c001a48d:	e8 ae 61 fe ff       	call   c0000640 <strcpy>
c001a492:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a499:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a49b:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001a4a1:	5a                   	pop    edx
c001a4a2:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a4a7:	59                   	pop    ecx
c001a4a8:	68 f5 28 02 c0       	push   0xc00228f5
c001a4ad:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a4b3:	e8 ee e5 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a4b8:	83 c4 10             	add    esp,0x10
c001a4bb:	31 c0                	xor    eax,eax
c001a4bd:	eb 05                	jmp    c001a4c4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001a4bf:	b8 04 00 00 00       	mov    eax,0x4
c001a4c4:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a4ca:	5b                   	pop    ebx
c001a4cb:	5e                   	pop    esi
c001a4cc:	5f                   	pop    edi
c001a4cd:	5d                   	pop    ebp
c001a4ce:	c3                   	ret    

c001a4cf <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001a4cf:	57                   	push   edi
c001a4d0:	56                   	push   esi
c001a4d1:	53                   	push   ebx
c001a4d2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a4d6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a4da:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a4de:	39 35 84 98 02 c0    	cmp    DWORD PTR ds:0xc0029884,esi
c001a4e4:	0f be cb             	movsx  ecx,bl
c001a4e7:	75 0b                	jne    c001a4f4 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001a4e9:	0f be 05 20 37 02 c0 	movsx  eax,BYTE PTR ds:0xc0023720
c001a4f0:	39 c8                	cmp    eax,ecx
c001a4f2:	74 47                	je     c001a53b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a4f4:	83 ec 0c             	sub    esp,0xc
c001a4f7:	31 d2                	xor    edx,edx
c001a4f9:	68 a0 98 02 c0       	push   0xc00298a0
c001a4fe:	6a 01                	push   0x1
c001a500:	52                   	push   edx
c001a501:	56                   	push   esi
c001a502:	ff 34 8d 7c 87 02 c0 	push   DWORD PTR [ecx*4-0x3ffd7884]
c001a509:	e8 0e 35 ff ff       	call   c000da1c <LogicalDisk::read(unsigned long long, int, void*)>
c001a50e:	83 c4 20             	add    esp,0x20
c001a511:	85 c0                	test   eax,eax
c001a513:	75 0e                	jne    c001a523 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001a515:	89 35 84 98 02 c0    	mov    DWORD PTR ds:0xc0029884,esi
c001a51b:	88 1d 20 37 02 c0    	mov    BYTE PTR ds:0xc0023720,bl
c001a521:	eb 18                	jmp    c001a53b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a523:	50                   	push   eax
c001a524:	68 00 08 00 00       	push   0x800
c001a529:	6a 00                	push   0x0
c001a52b:	57                   	push   edi
c001a52c:	e8 bf 5f fe ff       	call   c00004f0 <memset>
c001a531:	83 c4 10             	add    esp,0x10
c001a534:	b8 01 00 00 00       	mov    eax,0x1
c001a539:	eb 0e                	jmp    c001a549 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001a53b:	be a0 98 02 c0       	mov    esi,0xc00298a0
c001a540:	b9 00 08 00 00       	mov    ecx,0x800
c001a545:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a547:	31 c0                	xor    eax,eax
c001a549:	5b                   	pop    ebx
c001a54a:	5e                   	pop    esi
c001a54b:	5f                   	pop    edi
c001a54c:	c3                   	ret    
c001a54d:	90                   	nop

c001a54e <ISO9660::tryMount(LogicalDisk*, int)>:
c001a54e:	53                   	push   ebx
c001a54f:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001a555:	c7 05 84 98 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0029884,0xdeadbeef
c001a55f:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001a566:	8d 58 41             	lea    ebx,[eax+0x41]
c001a569:	0f be db             	movsx  ebx,bl
c001a56c:	53                   	push   ebx
c001a56d:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a571:	50                   	push   eax
c001a572:	6a 10                	push   0x10
c001a574:	e8 56 ff ff ff       	call   c001a4cf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a579:	83 c4 10             	add    esp,0x10
c001a57c:	31 d2                	xor    edx,edx
c001a57e:	85 c0                	test   eax,eax
c001a580:	75 33                	jne    c001a5b5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a582:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001a587:	75 2c                	jne    c001a5b5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a589:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001a58e:	75 25                	jne    c001a5b5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a590:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001a595:	75 1e                	jne    c001a5b5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a597:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001a59c:	75 17                	jne    c001a5b5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a59e:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001a5a3:	75 10                	jne    c001a5b5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a5a5:	83 ec 0c             	sub    esp,0xc
c001a5a8:	53                   	push   ebx
c001a5a9:	e8 98 c4 fe ff       	call   c0006a46 <init_percd>
c001a5ae:	83 c4 10             	add    esp,0x10
c001a5b1:	40                   	inc    eax
c001a5b2:	0f 95 c2             	setne  dl
c001a5b5:	88 d0                	mov    al,dl
c001a5b7:	81 c4 08 08 00 00    	add    esp,0x808
c001a5bd:	5b                   	pop    ebx
c001a5be:	c3                   	ret    
c001a5bf:	90                   	nop

c001a5c0 <ISO9660::ISO9660()>:
c001a5c0:	83 ec 0c             	sub    esp,0xc
c001a5c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5c7:	83 ec 0c             	sub    esp,0xc
c001a5ca:	50                   	push   eax
c001a5cb:	e8 e8 0e ff ff       	call   c000b4b8 <Filesystem::Filesystem()>
c001a5d0:	83 c4 10             	add    esp,0x10
c001a5d3:	ba 10 29 02 c0       	mov    edx,0xc0022910
c001a5d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5dc:	89 10                	mov    DWORD PTR [eax],edx
c001a5de:	e8 75 c5 fe ff       	call   c0006b58 <fs_iso9660_init>
c001a5e3:	90                   	nop
c001a5e4:	83 c4 0c             	add    esp,0xc
c001a5e7:	c3                   	ret    

c001a5e8 <SoundCard::beginPlayback()>:
c001a5e8:	c7 44 24 04 74 29 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022974
c001a5f0:	e9 74 6c ff ff       	jmp    c0011269 <KePanic(char const*)>
c001a5f5:	90                   	nop

c001a5f6 <SoundCard::stopPlayback()>:
c001a5f6:	c7 44 24 04 74 29 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022974
c001a5fe:	e9 66 6c ff ff       	jmp    c0011269 <KePanic(char const*)>
c001a603:	90                   	nop

c001a604 <SoundCard::SoundCard(char const*)>:
c001a604:	83 ec 1c             	sub    esp,0x1c
c001a607:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a60b:	83 ec 08             	sub    esp,0x8
c001a60e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a612:	50                   	push   eax
c001a613:	e8 ba 21 ff ff       	call   c000c7d2 <Device::Device(char const*)>
c001a618:	83 c4 10             	add    esp,0x10
c001a61b:	ba c0 29 02 c0       	mov    edx,0xc00229c0
c001a620:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a624:	89 10                	mov    DWORD PTR [eax],edx
c001a626:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a62a:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a631:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a635:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001a63f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a643:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001a64d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a651:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001a65b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a65f:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001a669:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a671:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001a676:	7f 1a                	jg     c001a692 <SoundCard::SoundCard(char const*)+0x8e>
c001a678:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a67c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a680:	83 c2 54             	add    edx,0x54
c001a683:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001a68b:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001a690:	eb df                	jmp    c001a671 <SoundCard::SoundCard(char const*)+0x6d>
c001a692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a696:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a69d:	90                   	nop
c001a69e:	83 c4 1c             	add    esp,0x1c
c001a6a1:	c3                   	ret    

c001a6a2 <SoundCard::~SoundCard()>:
c001a6a2:	83 ec 0c             	sub    esp,0xc
c001a6a5:	ba c0 29 02 c0       	mov    edx,0xc00229c0
c001a6aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a6ae:	89 10                	mov    DWORD PTR [eax],edx
c001a6b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a6b4:	83 ec 0c             	sub    esp,0xc
c001a6b7:	50                   	push   eax
c001a6b8:	e8 7f 1e ff ff       	call   c000c53c <Device::~Device()>
c001a6bd:	83 c4 10             	add    esp,0x10
c001a6c0:	90                   	nop
c001a6c1:	83 c4 0c             	add    esp,0xc
c001a6c4:	c3                   	ret    
c001a6c5:	90                   	nop

c001a6c6 <SoundCard::~SoundCard()>:
c001a6c6:	83 ec 0c             	sub    esp,0xc
c001a6c9:	83 ec 0c             	sub    esp,0xc
c001a6cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a6d0:	e8 cd ff ff ff       	call   c001a6a2 <SoundCard::~SoundCard()>
c001a6d5:	83 c4 10             	add    esp,0x10
c001a6d8:	83 ec 08             	sub    esp,0x8
c001a6db:	68 e8 01 00 00       	push   0x1e8
c001a6e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a6e4:	e8 2f 01 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001a6e9:	83 c4 10             	add    esp,0x10
c001a6ec:	83 c4 0c             	add    esp,0xc
c001a6ef:	c3                   	ret    

c001a6f0 <SoundCard::configureRates(int, int, int)>:
c001a6f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a6f4:	31 c0                	xor    eax,eax
c001a6f6:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001a6fd:	75 20                	jne    c001a71f <SoundCard::configureRates(int, int, int)+0x2f>
c001a6ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a703:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001a709:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a70d:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001a713:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a717:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001a71d:	b0 01                	mov    al,0x1
c001a71f:	c3                   	ret    

c001a720 <SoundCard::getSamples16(int, short*)>:
c001a720:	55                   	push   ebp
c001a721:	57                   	push   edi
c001a722:	31 ff                	xor    edi,edi
c001a724:	56                   	push   esi
c001a725:	53                   	push   ebx
c001a726:	31 db                	xor    ebx,ebx
c001a728:	83 ec 10             	sub    esp,0x10
c001a72b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001a72f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a733:	8d 04 36             	lea    eax,[esi+esi*1]
c001a736:	50                   	push   eax
c001a737:	6a 00                	push   0x0
c001a739:	55                   	push   ebp
c001a73a:	e8 b1 5d fe ff       	call   c00004f0 <memset>
c001a73f:	83 c4 10             	add    esp,0x10
c001a742:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a746:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001a74d:	85 c0                	test   eax,eax
c001a74f:	74 1b                	je     c001a76c <SoundCard::getSamples16(int, short*)+0x4c>
c001a751:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a755:	75 15                	jne    c001a76c <SoundCard::getSamples16(int, short*)+0x4c>
c001a757:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a75b:	55                   	push   ebp
c001a75c:	56                   	push   esi
c001a75d:	50                   	push   eax
c001a75e:	e8 f1 02 00 00       	call   c001aa54 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001a763:	83 c4 10             	add    esp,0x10
c001a766:	39 c7                	cmp    edi,eax
c001a768:	7d 02                	jge    c001a76c <SoundCard::getSamples16(int, short*)+0x4c>
c001a76a:	89 c7                	mov    edi,eax
c001a76c:	43                   	inc    ebx
c001a76d:	83 fb 20             	cmp    ebx,0x20
c001a770:	75 d0                	jne    c001a742 <SoundCard::getSamples16(int, short*)+0x22>
c001a772:	83 c4 0c             	add    esp,0xc
c001a775:	89 f8                	mov    eax,edi
c001a777:	5b                   	pop    ebx
c001a778:	5e                   	pop    esi
c001a779:	5f                   	pop    edi
c001a77a:	5d                   	pop    ebp
c001a77b:	c3                   	ret    

c001a77c <SoundCard::getSamples32(int, int*)>:
c001a77c:	55                   	push   ebp
c001a77d:	57                   	push   edi
c001a77e:	31 ff                	xor    edi,edi
c001a780:	56                   	push   esi
c001a781:	31 f6                	xor    esi,esi
c001a783:	53                   	push   ebx
c001a784:	83 ec 10             	sub    esp,0x10
c001a787:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a78b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a78f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a793:	c1 e0 02             	shl    eax,0x2
c001a796:	50                   	push   eax
c001a797:	6a 00                	push   0x0
c001a799:	55                   	push   ebp
c001a79a:	e8 51 5d fe ff       	call   c00004f0 <memset>
c001a79f:	83 c4 10             	add    esp,0x10
c001a7a2:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001a7a9:	85 c0                	test   eax,eax
c001a7ab:	74 1b                	je     c001a7c8 <SoundCard::getSamples32(int, int*)+0x4c>
c001a7ad:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a7b1:	75 15                	jne    c001a7c8 <SoundCard::getSamples32(int, int*)+0x4c>
c001a7b3:	53                   	push   ebx
c001a7b4:	55                   	push   ebp
c001a7b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a7b9:	50                   	push   eax
c001a7ba:	e8 61 03 00 00       	call   c001ab20 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001a7bf:	83 c4 10             	add    esp,0x10
c001a7c2:	39 c6                	cmp    esi,eax
c001a7c4:	7d 02                	jge    c001a7c8 <SoundCard::getSamples32(int, int*)+0x4c>
c001a7c6:	89 c6                	mov    esi,eax
c001a7c8:	47                   	inc    edi
c001a7c9:	83 ff 20             	cmp    edi,0x20
c001a7cc:	75 d4                	jne    c001a7a2 <SoundCard::getSamples32(int, int*)+0x26>
c001a7ce:	85 f6                	test   esi,esi
c001a7d0:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001a7d7:	75 0f                	jne    c001a7e8 <SoundCard::getSamples32(int, int*)+0x6c>
c001a7d9:	85 c0                	test   eax,eax
c001a7db:	74 1b                	je     c001a7f8 <SoundCard::getSamples32(int, int*)+0x7c>
c001a7dd:	83 ec 0c             	sub    esp,0xc
c001a7e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a7e2:	53                   	push   ebx
c001a7e3:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a7e6:	eb 0d                	jmp    c001a7f5 <SoundCard::getSamples32(int, int*)+0x79>
c001a7e8:	85 c0                	test   eax,eax
c001a7ea:	75 0c                	jne    c001a7f8 <SoundCard::getSamples32(int, int*)+0x7c>
c001a7ec:	83 ec 0c             	sub    esp,0xc
c001a7ef:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a7f1:	53                   	push   ebx
c001a7f2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001a7f5:	83 c4 10             	add    esp,0x10
c001a7f8:	83 c4 0c             	add    esp,0xc
c001a7fb:	89 f0                	mov    eax,esi
c001a7fd:	5b                   	pop    ebx
c001a7fe:	5e                   	pop    esi
c001a7ff:	5f                   	pop    edi
c001a800:	5d                   	pop    ebp
c001a801:	c3                   	ret    

c001a802 <SoundCard::addChannel(SoundPort*)>:
c001a802:	83 ec 0c             	sub    esp,0xc
c001a805:	31 c0                	xor    eax,eax
c001a807:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a80b:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001a813:	74 1b                	je     c001a830 <SoundCard::addChannel(SoundPort*)+0x2e>
c001a815:	40                   	inc    eax
c001a816:	83 f8 20             	cmp    eax,0x20
c001a819:	75 f0                	jne    c001a80b <SoundCard::addChannel(SoundPort*)+0x9>
c001a81b:	83 ec 0c             	sub    esp,0xc
c001a81e:	68 99 29 02 c0       	push   0xc0022999
c001a823:	e8 41 6a ff ff       	call   c0011269 <KePanic(char const*)>
c001a828:	83 c4 10             	add    esp,0x10
c001a82b:	83 c8 ff             	or     eax,0xffffffff
c001a82e:	eb 0b                	jmp    c001a83b <SoundCard::addChannel(SoundPort*)+0x39>
c001a830:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a834:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001a83b:	83 c4 0c             	add    esp,0xc
c001a83e:	c3                   	ret    
c001a83f:	90                   	nop

c001a840 <SoundCard::removeChannel(int)>:
c001a840:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a844:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a848:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001a853:	c3                   	ret    

c001a854 <SoundPort::SoundPort(int, int, int, int)>:
c001a854:	83 ec 0c             	sub    esp,0xc
c001a857:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a85b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a862:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a866:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a86a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a86e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a872:	89 10                	mov    DWORD PTR [eax],edx
c001a874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a878:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a87c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a87f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a883:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a887:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a88a:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001a88f:	75 13                	jne    c001a8a4 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001a891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a895:	8b 00                	mov    eax,DWORD PTR [eax]
c001a897:	05 a0 0f 00 00       	add    eax,0xfa0
c001a89c:	01 c0                	add    eax,eax
c001a89e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a8a2:	66 90                	xchg   ax,ax
c001a8a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8a8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a8ac:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001a8af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8b3:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001a8ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a8c1:	c1 e0 02             	shl    eax,0x2
c001a8c4:	83 ec 0c             	sub    esp,0xc
c001a8c7:	50                   	push   eax
c001a8c8:	e8 e9 d1 fe ff       	call   c0007ab6 <malloc>
c001a8cd:	83 c4 10             	add    esp,0x10
c001a8d0:	89 c2                	mov    edx,eax
c001a8d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8d6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001a8d9:	90                   	nop
c001a8da:	83 c4 0c             	add    esp,0xc
c001a8dd:	c3                   	ret    
c001a8de:	66 90                	xchg   ax,ax

c001a8e0 <SoundPort::~SoundPort()>:
c001a8e0:	83 ec 0c             	sub    esp,0xc
c001a8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8e7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a8ea:	85 c0                	test   eax,eax
c001a8ec:	74 1e                	je     c001a90c <SoundPort::~SoundPort()+0x2c>
c001a8ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8f2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a8f5:	83 ec 0c             	sub    esp,0xc
c001a8f8:	50                   	push   eax
c001a8f9:	e8 c8 d1 fe ff       	call   c0007ac6 <free>
c001a8fe:	83 c4 10             	add    esp,0x10
c001a901:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a905:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a90c:	90                   	nop
c001a90d:	83 c4 0c             	add    esp,0xc
c001a910:	c3                   	ret    
c001a911:	90                   	nop
c001a912:	66 90                	xchg   ax,ax

c001a914 <SoundPort::unpause()>:
c001a914:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a918:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001a91c:	c3                   	ret    
c001a91d:	90                   	nop
c001a91e:	66 90                	xchg   ax,ax

c001a920 <SoundPort::pause()>:
c001a920:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a924:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a928:	c3                   	ret    
c001a929:	90                   	nop
c001a92a:	66 90                	xchg   ax,ax

c001a92c <SoundPort::getBufferUsed()>:
c001a92c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a930:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a933:	c3                   	ret    

c001a934 <SoundPort::getBufferSize()>:
c001a934:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a938:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a93b:	c3                   	ret    

c001a93c <SoundPort::buffer16(short*, int)>:
c001a93c:	55                   	push   ebp
c001a93d:	57                   	push   edi
c001a93e:	56                   	push   esi
c001a93f:	53                   	push   ebx
c001a940:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a944:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001a948:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001a94b:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001a94e:	74 68                	je     c001a9b8 <SoundPort::buffer16(short*, int)+0x7c>
c001a950:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a954:	85 c9                	test   ecx,ecx
c001a956:	7e 60                	jle    c001a9b8 <SoundPort::buffer16(short*, int)+0x7c>
c001a958:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001a95c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001a95f:	c1 e1 0f             	shl    ecx,0xf
c001a962:	8d 70 01             	lea    esi,[eax+0x1]
c001a965:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001a968:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001a96b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a96e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a971:	74 4d                	je     c001a9c0 <SoundPort::buffer16(short*, int)+0x84>
c001a973:	31 f6                	xor    esi,esi
c001a975:	eb 21                	jmp    c001a998 <SoundPort::buffer16(short*, int)+0x5c>
c001a977:	90                   	nop
c001a978:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001a97d:	8d 79 01             	lea    edi,[ecx+0x1]
c001a980:	c1 e3 0f             	shl    ebx,0xf
c001a983:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001a986:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001a989:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001a98c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a98f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a992:	74 1c                	je     c001a9b0 <SoundPort::buffer16(short*, int)+0x74>
c001a994:	89 c6                	mov    esi,eax
c001a996:	66 90                	xchg   ax,ax
c001a998:	8d 46 01             	lea    eax,[esi+0x1]
c001a99b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001a99f:	75 d7                	jne    c001a978 <SoundPort::buffer16(short*, int)+0x3c>
c001a9a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a9a5:	8d 76 00             	lea    esi,[esi+0x0]
c001a9a8:	5b                   	pop    ebx
c001a9a9:	5e                   	pop    esi
c001a9aa:	5f                   	pop    edi
c001a9ab:	5d                   	pop    ebp
c001a9ac:	c3                   	ret    
c001a9ad:	8d 76 00             	lea    esi,[esi+0x0]
c001a9b0:	5b                   	pop    ebx
c001a9b1:	8d 46 02             	lea    eax,[esi+0x2]
c001a9b4:	5e                   	pop    esi
c001a9b5:	5f                   	pop    edi
c001a9b6:	5d                   	pop    ebp
c001a9b7:	c3                   	ret    
c001a9b8:	5b                   	pop    ebx
c001a9b9:	31 c0                	xor    eax,eax
c001a9bb:	5e                   	pop    esi
c001a9bc:	5f                   	pop    edi
c001a9bd:	5d                   	pop    ebp
c001a9be:	c3                   	ret    
c001a9bf:	90                   	nop
c001a9c0:	b8 01 00 00 00       	mov    eax,0x1
c001a9c5:	eb e1                	jmp    c001a9a8 <SoundPort::buffer16(short*, int)+0x6c>
c001a9c7:	90                   	nop

c001a9c8 <SoundPort::buffer32(int*, int)>:
c001a9c8:	55                   	push   ebp
c001a9c9:	57                   	push   edi
c001a9ca:	56                   	push   esi
c001a9cb:	53                   	push   ebx
c001a9cc:	83 ec 04             	sub    esp,0x4
c001a9cf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a9d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a9d7:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a9da:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a9de:	89 04 24             	mov    DWORD PTR [esp],eax
c001a9e1:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a9e4:	74 5a                	je     c001aa40 <SoundPort::buffer32(int*, int)+0x78>
c001a9e6:	85 c0                	test   eax,eax
c001a9e8:	7e 56                	jle    c001aa40 <SoundPort::buffer32(int*, int)+0x78>
c001a9ea:	8d 71 01             	lea    esi,[ecx+0x1]
c001a9ed:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001a9f0:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001a9f3:	8b 37                	mov    esi,DWORD PTR [edi]
c001a9f5:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001a9f8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a9fb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a9fe:	74 4c                	je     c001aa4c <SoundPort::buffer32(int*, int)+0x84>
c001aa00:	31 f6                	xor    esi,esi
c001aa02:	eb 1c                	jmp    c001aa20 <SoundPort::buffer32(int*, int)+0x58>
c001aa04:	8d 69 01             	lea    ebp,[ecx+0x1]
c001aa07:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001aa0a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001aa0d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001aa10:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001aa14:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aa17:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aa1a:	74 18                	je     c001aa34 <SoundPort::buffer32(int*, int)+0x6c>
c001aa1c:	89 de                	mov    esi,ebx
c001aa1e:	66 90                	xchg   ax,ax
c001aa20:	8d 5e 01             	lea    ebx,[esi+0x1]
c001aa23:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001aa26:	75 dc                	jne    c001aa04 <SoundPort::buffer32(int*, int)+0x3c>
c001aa28:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001aa2b:	90                   	nop
c001aa2c:	83 c4 04             	add    esp,0x4
c001aa2f:	5b                   	pop    ebx
c001aa30:	5e                   	pop    esi
c001aa31:	5f                   	pop    edi
c001aa32:	5d                   	pop    ebp
c001aa33:	c3                   	ret    
c001aa34:	83 c4 04             	add    esp,0x4
c001aa37:	8d 46 02             	lea    eax,[esi+0x2]
c001aa3a:	5b                   	pop    ebx
c001aa3b:	5e                   	pop    esi
c001aa3c:	5f                   	pop    edi
c001aa3d:	5d                   	pop    ebp
c001aa3e:	c3                   	ret    
c001aa3f:	90                   	nop
c001aa40:	83 c4 04             	add    esp,0x4
c001aa43:	31 c0                	xor    eax,eax
c001aa45:	5b                   	pop    ebx
c001aa46:	5e                   	pop    esi
c001aa47:	5f                   	pop    edi
c001aa48:	5d                   	pop    ebp
c001aa49:	c3                   	ret    
c001aa4a:	66 90                	xchg   ax,ax
c001aa4c:	b8 01 00 00 00       	mov    eax,0x1
c001aa51:	eb d9                	jmp    c001aa2c <SoundPort::buffer32(int*, int)+0x64>
c001aa53:	90                   	nop

c001aa54 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001aa54:	57                   	push   edi
c001aa55:	56                   	push   esi
c001aa56:	53                   	push   ebx
c001aa57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aa5b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001aa5f:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001aa65:	39 03                	cmp    DWORD PTR [ebx],eax
c001aa67:	74 13                	je     c001aa7c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001aa69:	83 ec 0c             	sub    esp,0xc
c001aa6c:	68 ec 29 02 c0       	push   0xc00229ec
c001aa71:	e8 f3 67 ff ff       	call   c0011269 <KePanic(char const*)>
c001aa76:	83 c4 10             	add    esp,0x10
c001aa79:	8d 76 00             	lea    esi,[esi+0x0]
c001aa7c:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001aa82:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001aa85:	74 11                	je     c001aa98 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001aa87:	83 ec 0c             	sub    esp,0xc
c001aa8a:	68 2b 2a 02 c0       	push   0xc0022a2b
c001aa8f:	e8 d5 67 ff ff       	call   c0011269 <KePanic(char const*)>
c001aa94:	83 c4 10             	add    esp,0x10
c001aa97:	90                   	nop
c001aa98:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001aa9e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001aaa1:	74 11                	je     c001aab4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001aaa3:	83 ec 0c             	sub    esp,0xc
c001aaa6:	68 2b 2a 02 c0       	push   0xc0022a2b
c001aaab:	e8 b9 67 ff ff       	call   c0011269 <KePanic(char const*)>
c001aab0:	83 c4 10             	add    esp,0x10
c001aab3:	90                   	nop
c001aab4:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001aab7:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001aabb:	7e 07                	jle    c001aac4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001aabd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001aac1:	8d 76 00             	lea    esi,[esi+0x0]
c001aac4:	85 f6                	test   esi,esi
c001aac6:	7e 2c                	jle    c001aaf4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001aac8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aacc:	8d 3c 36             	lea    edi,[esi+esi*1]
c001aacf:	31 c9                	xor    ecx,ecx
c001aad1:	01 d7                	add    edi,edx
c001aad3:	90                   	nop
c001aad4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001aad7:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001aada:	85 c0                	test   eax,eax
c001aadc:	79 06                	jns    c001aae4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001aade:	05 ff 7f 00 00       	add    eax,0x7fff
c001aae3:	90                   	nop
c001aae4:	c1 f8 0f             	sar    eax,0xf
c001aae7:	83 c1 04             	add    ecx,0x4
c001aaea:	66 01 02             	add    WORD PTR [edx],ax
c001aaed:	83 c2 02             	add    edx,0x2
c001aaf0:	39 d7                	cmp    edi,edx
c001aaf2:	75 e0                	jne    c001aad4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001aaf4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001aaf7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001aafa:	83 ec 04             	sub    esp,0x4
c001aafd:	29 f0                	sub    eax,esi
c001aaff:	c1 e0 02             	shl    eax,0x2
c001ab02:	50                   	push   eax
c001ab03:	8d 04 b2             	lea    eax,[edx+esi*4]
c001ab06:	50                   	push   eax
c001ab07:	52                   	push   edx
c001ab08:	e8 c3 58 fe ff       	call   c00003d0 <memmove>
c001ab0d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ab10:	83 c4 10             	add    esp,0x10
c001ab13:	29 f0                	sub    eax,esi
c001ab15:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001ab18:	89 f0                	mov    eax,esi
c001ab1a:	5b                   	pop    ebx
c001ab1b:	5e                   	pop    esi
c001ab1c:	5f                   	pop    edi
c001ab1d:	c3                   	ret    
c001ab1e:	66 90                	xchg   ax,ax

c001ab20 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001ab20:	57                   	push   edi
c001ab21:	56                   	push   esi
c001ab22:	53                   	push   ebx
c001ab23:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ab27:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ab2b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ab2f:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001ab35:	39 06                	cmp    DWORD PTR [esi],eax
c001ab37:	74 13                	je     c001ab4c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001ab39:	83 ec 0c             	sub    esp,0xc
c001ab3c:	68 0c 2a 02 c0       	push   0xc0022a0c
c001ab41:	e8 23 67 ff ff       	call   c0011269 <KePanic(char const*)>
c001ab46:	83 c4 10             	add    esp,0x10
c001ab49:	8d 76 00             	lea    esi,[esi+0x0]
c001ab4c:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001ab52:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001ab55:	74 11                	je     c001ab68 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001ab57:	83 ec 0c             	sub    esp,0xc
c001ab5a:	68 47 2a 02 c0       	push   0xc0022a47
c001ab5f:	e8 05 67 ff ff       	call   c0011269 <KePanic(char const*)>
c001ab64:	83 c4 10             	add    esp,0x10
c001ab67:	90                   	nop
c001ab68:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001ab6e:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001ab71:	74 11                	je     c001ab84 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001ab73:	83 ec 0c             	sub    esp,0xc
c001ab76:	68 47 2a 02 c0       	push   0xc0022a47
c001ab7b:	e8 e9 66 ff ff       	call   c0011269 <KePanic(char const*)>
c001ab80:	83 c4 10             	add    esp,0x10
c001ab83:	90                   	nop
c001ab84:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001ab87:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001ab8b:	7e 07                	jle    c001ab94 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001ab8d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ab91:	8d 76 00             	lea    esi,[esi+0x0]
c001ab94:	85 ff                	test   edi,edi
c001ab96:	7e 1c                	jle    c001abb4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001ab98:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001ab9f:	31 c0                	xor    eax,eax
c001aba1:	8d 76 00             	lea    esi,[esi+0x0]
c001aba4:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001aba7:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001abaa:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001abad:	83 c0 04             	add    eax,0x4
c001abb0:	39 c1                	cmp    ecx,eax
c001abb2:	75 f0                	jne    c001aba4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001abb4:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001abb7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001abba:	83 ec 04             	sub    esp,0x4
c001abbd:	29 f8                	sub    eax,edi
c001abbf:	c1 e0 02             	shl    eax,0x2
c001abc2:	50                   	push   eax
c001abc3:	8d 04 ba             	lea    eax,[edx+edi*4]
c001abc6:	50                   	push   eax
c001abc7:	52                   	push   edx
c001abc8:	e8 03 58 fe ff       	call   c00003d0 <memmove>
c001abcd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001abd0:	83 c4 10             	add    esp,0x10
c001abd3:	29 f8                	sub    eax,edi
c001abd5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001abd8:	89 f8                	mov    eax,edi
c001abda:	5b                   	pop    ebx
c001abdb:	5e                   	pop    esi
c001abdc:	5f                   	pop    edi
c001abdd:	c3                   	ret    

c001abde <PCI::open(int, int, void*)>:
c001abde:	83 ec 18             	sub    esp,0x18
c001abe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001abe5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001abe9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001abef:	8b 10                	mov    edx,DWORD PTR [eax]
c001abf1:	50                   	push   eax
c001abf2:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001abf5:	31 c0                	xor    eax,eax
c001abf7:	83 c4 1c             	add    esp,0x1c
c001abfa:	c3                   	ret    
c001abfb:	90                   	nop

c001abfc <PCI::close(int, int, void*)>:
c001abfc:	31 c0                	xor    eax,eax
c001abfe:	c3                   	ret    
c001abff:	90                   	nop

c001ac00 <PCI::PCI()>:
c001ac00:	83 ec 0c             	sub    esp,0xc
c001ac03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac07:	83 ec 08             	sub    esp,0x8
c001ac0a:	68 63 2a 02 c0       	push   0xc0022a63
c001ac0f:	50                   	push   eax
c001ac10:	e8 87 13 ff ff       	call   c000bf9c <Bus::Bus(char const*)>
c001ac15:	83 c4 10             	add    esp,0x10
c001ac18:	ba 0c 2b 02 c0       	mov    edx,0xc0022b0c
c001ac1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac21:	89 10                	mov    DWORD PTR [eax],edx
c001ac23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac27:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001ac31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac35:	a3 a0 a0 02 c0       	mov    ds:0xc002a0a0,eax
c001ac3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac3e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ac44:	0f b6 d0             	movzx  edx,al
c001ac47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac4b:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001ac52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac56:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ac5c:	0f b6 d0             	movzx  edx,al
c001ac5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac63:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001ac68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac6c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ac72:	8d 50 01             	lea    edx,[eax+0x1]
c001ac75:	88 d1                	mov    cl,dl
c001ac77:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ac7b:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001ac81:	0f b6 d0             	movzx  edx,al
c001ac84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac88:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ac8c:	83 c9 c0             	or     ecx,0xffffffc0
c001ac8f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ac93:	90                   	nop
c001ac94:	83 c4 0c             	add    esp,0xc
c001ac97:	c3                   	ret    

c001ac98 <PCI::readBAR8(unsigned int, int)>:
c001ac98:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ac9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aca0:	f6 c2 01             	test   dl,0x1
c001aca3:	74 07                	je     c001acac <PCI::readBAR8(unsigned int, int)+0x14>
c001aca5:	83 e2 fc             	and    edx,0xfffffffc
c001aca8:	01 c2                	add    edx,eax
c001acaa:	ec                   	in     al,dx
c001acab:	c3                   	ret    
c001acac:	83 e2 f0             	and    edx,0xfffffff0
c001acaf:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001acb2:	c3                   	ret    
c001acb3:	90                   	nop

c001acb4 <PCI::readBAR16(unsigned int, int)>:
c001acb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001acb8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001acbc:	f6 c2 01             	test   dl,0x1
c001acbf:	74 08                	je     c001acc9 <PCI::readBAR16(unsigned int, int)+0x15>
c001acc1:	83 e2 fc             	and    edx,0xfffffffc
c001acc4:	01 c2                	add    edx,eax
c001acc6:	66 ed                	in     ax,dx
c001acc8:	c3                   	ret    
c001acc9:	83 e2 f0             	and    edx,0xfffffff0
c001accc:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001acd0:	c3                   	ret    
c001acd1:	90                   	nop

c001acd2 <PCI::readBAR32(unsigned int, int)>:
c001acd2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001acd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001acda:	f6 c2 01             	test   dl,0x1
c001acdd:	74 07                	je     c001ace6 <PCI::readBAR32(unsigned int, int)+0x14>
c001acdf:	83 e2 fc             	and    edx,0xfffffffc
c001ace2:	01 c2                	add    edx,eax
c001ace4:	ed                   	in     eax,dx
c001ace5:	c3                   	ret    
c001ace6:	83 e2 f0             	and    edx,0xfffffff0
c001ace9:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001acec:	c3                   	ret    
c001aced:	90                   	nop

c001acee <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001acee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001acf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001acf6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001acfa:	f6 c2 01             	test   dl,0x1
c001acfd:	74 07                	je     c001ad06 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001acff:	83 e2 fc             	and    edx,0xfffffffc
c001ad02:	01 ca                	add    edx,ecx
c001ad04:	ee                   	out    dx,al
c001ad05:	c3                   	ret    
c001ad06:	83 e2 f0             	and    edx,0xfffffff0
c001ad09:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001ad0c:	c3                   	ret    
c001ad0d:	90                   	nop

c001ad0e <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001ad0e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ad12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad16:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ad1a:	f6 c2 01             	test   dl,0x1
c001ad1d:	74 08                	je     c001ad27 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001ad1f:	83 e2 fc             	and    edx,0xfffffffc
c001ad22:	01 ca                	add    edx,ecx
c001ad24:	66 ef                	out    dx,ax
c001ad26:	c3                   	ret    
c001ad27:	83 e2 f0             	and    edx,0xfffffff0
c001ad2a:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001ad2e:	c3                   	ret    
c001ad2f:	90                   	nop

c001ad30 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001ad30:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ad34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad38:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ad3c:	f6 c2 01             	test   dl,0x1
c001ad3f:	74 07                	je     c001ad48 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001ad41:	83 e2 fc             	and    edx,0xfffffffc
c001ad44:	01 ca                	add    edx,ecx
c001ad46:	ef                   	out    dx,eax
c001ad47:	c3                   	ret    
c001ad48:	83 e2 f0             	and    edx,0xfffffff0
c001ad4b:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001ad4e:	c3                   	ret    
c001ad4f:	90                   	nop

c001ad50 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ad50:	55                   	push   ebp
c001ad51:	57                   	push   edi
c001ad52:	56                   	push   esi
c001ad53:	53                   	push   ebx
c001ad54:	83 ec 0c             	sub    esp,0xc
c001ad57:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001ad5c:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001ad60:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001ad64:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ad68:	83 fe 07             	cmp    esi,0x7
c001ad6b:	76 10                	jbe    c001ad7d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001ad6d:	83 ec 0c             	sub    esp,0xc
c001ad70:	68 6b 2a 02 c0       	push   0xc0022a6b
c001ad75:	e8 ef 64 ff ff       	call   c0011269 <KePanic(char const*)>
c001ad7a:	83 c4 10             	add    esp,0x10
c001ad7d:	0f b6 db             	movzx  ebx,bl
c001ad80:	83 fb 0f             	cmp    ebx,0xf
c001ad83:	76 10                	jbe    c001ad95 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001ad85:	83 ec 0c             	sub    esp,0xc
c001ad88:	68 9b 2a 02 c0       	push   0xc0022a9b
c001ad8d:	e8 d7 64 ff ff       	call   c0011269 <KePanic(char const*)>
c001ad92:	83 c4 10             	add    esp,0x10
c001ad95:	8d 04 36             	lea    eax,[esi+esi*1]
c001ad98:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ad9d:	83 c8 f0             	or     eax,0xfffffff0
c001ada0:	ee                   	out    dx,al
c001ada1:	ba fa 0c 00 00       	mov    edx,0xcfa
c001ada6:	89 e8                	mov    eax,ebp
c001ada8:	ee                   	out    dx,al
c001ada9:	83 c4 0c             	add    esp,0xc
c001adac:	89 d8                	mov    eax,ebx
c001adae:	89 f9                	mov    ecx,edi
c001adb0:	c1 e0 08             	shl    eax,0x8
c001adb3:	0f b6 d9             	movzx  ebx,cl
c001adb6:	83 e3 fc             	and    ebx,0xfffffffc
c001adb9:	09 d8                	or     eax,ebx
c001adbb:	5b                   	pop    ebx
c001adbc:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001adc1:	5e                   	pop    esi
c001adc2:	5f                   	pop    edi
c001adc3:	5d                   	pop    ebp
c001adc4:	c3                   	ret    
c001adc5:	90                   	nop

c001adc6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001adc6:	57                   	push   edi
c001adc7:	56                   	push   esi
c001adc8:	53                   	push   ebx
c001adc9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001adcd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001add1:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001add7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001addb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001addf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ade3:	83 ff 01             	cmp    edi,0x1
c001ade6:	75 3f                	jne    c001ae27 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001ade8:	89 de                	mov    esi,ebx
c001adea:	0f b6 c0             	movzx  eax,al
c001aded:	81 e6 fc 00 00 00    	and    esi,0xfc
c001adf3:	c1 e0 10             	shl    eax,0x10
c001adf6:	0f b6 c9             	movzx  ecx,cl
c001adf9:	09 f0                	or     eax,esi
c001adfb:	c1 e1 08             	shl    ecx,0x8
c001adfe:	0f b6 d2             	movzx  edx,dl
c001ae01:	09 c8                	or     eax,ecx
c001ae03:	c1 e2 0b             	shl    edx,0xb
c001ae06:	09 d0                	or     eax,edx
c001ae08:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ae0d:	0d 00 00 00 80       	or     eax,0x80000000
c001ae12:	ef                   	out    dx,eax
c001ae13:	ba fc 0c 00 00       	mov    edx,0xcfc
c001ae18:	ed                   	in     eax,dx
c001ae19:	83 e3 02             	and    ebx,0x2
c001ae1c:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001ae23:	d3 e8                	shr    eax,cl
c001ae25:	eb 44                	jmp    c001ae6b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001ae27:	83 ff 02             	cmp    edi,0x2
c001ae2a:	75 2d                	jne    c001ae59 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001ae2c:	83 ec 0c             	sub    esp,0xc
c001ae2f:	0f b6 c9             	movzx  ecx,cl
c001ae32:	0f b6 d2             	movzx  edx,dl
c001ae35:	0f b6 fb             	movzx  edi,bl
c001ae38:	0f b6 c0             	movzx  eax,al
c001ae3b:	57                   	push   edi
c001ae3c:	51                   	push   ecx
c001ae3d:	52                   	push   edx
c001ae3e:	50                   	push   eax
c001ae3f:	56                   	push   esi
c001ae40:	e8 0b ff ff ff       	call   c001ad50 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae45:	89 c2                	mov    edx,eax
c001ae47:	ed                   	in     eax,dx
c001ae48:	83 e3 02             	and    ebx,0x2
c001ae4b:	83 c4 20             	add    esp,0x20
c001ae4e:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001ae55:	d3 e8                	shr    eax,cl
c001ae57:	eb 12                	jmp    c001ae6b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001ae59:	83 ec 0c             	sub    esp,0xc
c001ae5c:	68 cb 2a 02 c0       	push   0xc0022acb
c001ae61:	e8 03 64 ff ff       	call   c0011269 <KePanic(char const*)>
c001ae66:	83 c4 10             	add    esp,0x10
c001ae69:	31 c0                	xor    eax,eax
c001ae6b:	5b                   	pop    ebx
c001ae6c:	5e                   	pop    esi
c001ae6d:	5f                   	pop    edi
c001ae6e:	c3                   	ret    
c001ae6f:	90                   	nop

c001ae70 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001ae70:	83 ec 18             	sub    esp,0x18
c001ae73:	6a 00                	push   0x0
c001ae75:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae7a:	50                   	push   eax
c001ae7b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae80:	50                   	push   eax
c001ae81:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae86:	50                   	push   eax
c001ae87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae8b:	e8 36 ff ff ff       	call   c001adc6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae90:	83 c4 2c             	add    esp,0x2c
c001ae93:	c3                   	ret    

c001ae94 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001ae94:	83 ec 18             	sub    esp,0x18
c001ae97:	6a 0e                	push   0xe
c001ae99:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae9e:	50                   	push   eax
c001ae9f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aea4:	50                   	push   eax
c001aea5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aeaa:	50                   	push   eax
c001aeab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aeaf:	e8 12 ff ff ff       	call   c001adc6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aeb4:	83 c4 2c             	add    esp,0x2c
c001aeb7:	0f b6 c0             	movzx  eax,al
c001aeba:	c3                   	ret    
c001aebb:	90                   	nop

c001aebc <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001aebc:	55                   	push   ebp
c001aebd:	57                   	push   edi
c001aebe:	56                   	push   esi
c001aebf:	53                   	push   ebx
c001aec0:	83 ec 18             	sub    esp,0x18
c001aec3:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001aec8:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001aecd:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001aed2:	6a 0a                	push   0xa
c001aed4:	56                   	push   esi
c001aed5:	55                   	push   ebp
c001aed6:	57                   	push   edi
c001aed7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001aedb:	e8 e6 fe ff ff       	call   c001adc6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aee0:	83 c4 14             	add    esp,0x14
c001aee3:	89 c3                	mov    ebx,eax
c001aee5:	6a 0a                	push   0xa
c001aee7:	0f b6 db             	movzx  ebx,bl
c001aeea:	56                   	push   esi
c001aeeb:	55                   	push   ebp
c001aeec:	57                   	push   edi
c001aeed:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001aef1:	e8 d0 fe ff ff       	call   c001adc6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aef6:	83 c4 2c             	add    esp,0x2c
c001aef9:	25 00 ff 00 00       	and    eax,0xff00
c001aefe:	09 d8                	or     eax,ebx
c001af00:	5b                   	pop    ebx
c001af01:	5e                   	pop    esi
c001af02:	5f                   	pop    edi
c001af03:	5d                   	pop    ebp
c001af04:	c3                   	ret    
c001af05:	90                   	nop

c001af06 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001af06:	83 ec 18             	sub    esp,0x18
c001af09:	6a 08                	push   0x8
c001af0b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af10:	50                   	push   eax
c001af11:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af16:	50                   	push   eax
c001af17:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af1c:	50                   	push   eax
c001af1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af21:	e8 a0 fe ff ff       	call   c001adc6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af26:	83 c4 2c             	add    esp,0x2c
c001af29:	0f b6 c4             	movzx  eax,ah
c001af2c:	c3                   	ret    
c001af2d:	90                   	nop

c001af2e <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001af2e:	83 ec 18             	sub    esp,0x18
c001af31:	6a 08                	push   0x8
c001af33:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af38:	50                   	push   eax
c001af39:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af3e:	50                   	push   eax
c001af3f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af44:	50                   	push   eax
c001af45:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af49:	e8 78 fe ff ff       	call   c001adc6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af4e:	83 c4 2c             	add    esp,0x2c
c001af51:	c3                   	ret    

c001af52 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001af52:	83 ec 18             	sub    esp,0x18
c001af55:	6a 3c                	push   0x3c
c001af57:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af5c:	50                   	push   eax
c001af5d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af62:	50                   	push   eax
c001af63:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af68:	50                   	push   eax
c001af69:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af6d:	e8 54 fe ff ff       	call   c001adc6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af72:	83 c4 2c             	add    esp,0x2c
c001af75:	c3                   	ret    

c001af76 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001af76:	83 ec 18             	sub    esp,0x18
c001af79:	6a 18                	push   0x18
c001af7b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af80:	50                   	push   eax
c001af81:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af86:	50                   	push   eax
c001af87:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af8c:	50                   	push   eax
c001af8d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af91:	e8 30 fe ff ff       	call   c001adc6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af96:	83 c4 2c             	add    esp,0x2c
c001af99:	0f b6 c4             	movzx  eax,ah
c001af9c:	c3                   	ret    
c001af9d:	90                   	nop

c001af9e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001af9e:	55                   	push   ebp
c001af9f:	57                   	push   edi
c001afa0:	56                   	push   esi
c001afa1:	53                   	push   ebx
c001afa2:	83 ec 28             	sub    esp,0x28
c001afa5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001afa9:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001afae:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001afb3:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001afb8:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001afbf:	8d 43 12             	lea    eax,[ebx+0x12]
c001afc2:	83 c3 10             	add    ebx,0x10
c001afc5:	0f b6 c0             	movzx  eax,al
c001afc8:	0f b6 db             	movzx  ebx,bl
c001afcb:	50                   	push   eax
c001afcc:	51                   	push   ecx
c001afcd:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001afd1:	57                   	push   edi
c001afd2:	55                   	push   ebp
c001afd3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001afd7:	e8 ea fd ff ff       	call   c001adc6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001afdc:	83 c4 14             	add    esp,0x14
c001afdf:	89 c6                	mov    esi,eax
c001afe1:	53                   	push   ebx
c001afe2:	c1 e6 10             	shl    esi,0x10
c001afe5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001afe9:	51                   	push   ecx
c001afea:	57                   	push   edi
c001afeb:	55                   	push   ebp
c001afec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001aff0:	e8 d1 fd ff ff       	call   c001adc6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aff5:	83 c4 3c             	add    esp,0x3c
c001aff8:	0f b7 c0             	movzx  eax,ax
c001affb:	5b                   	pop    ebx
c001affc:	09 f0                	or     eax,esi
c001affe:	5e                   	pop    esi
c001afff:	5f                   	pop    edi
c001b000:	5d                   	pop    ebp
c001b001:	c3                   	ret    

c001b002 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b002:	55                   	push   ebp
c001b003:	57                   	push   edi
c001b004:	56                   	push   esi
c001b005:	53                   	push   ebx
c001b006:	83 ec 0c             	sub    esp,0xc
c001b009:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b00d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b011:	89 f5                	mov    ebp,esi
c001b013:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001b019:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b01d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b021:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b025:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b029:	83 f9 01             	cmp    ecx,0x1
c001b02c:	75 5d                	jne    c001b08b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001b02e:	0f b6 c8             	movzx  ecx,al
c001b031:	0f b6 d2             	movzx  edx,dl
c001b034:	c1 e1 10             	shl    ecx,0x10
c001b037:	c1 e2 0b             	shl    edx,0xb
c001b03a:	89 f0                	mov    eax,esi
c001b03c:	25 fc 00 00 00       	and    eax,0xfc
c001b041:	09 c1                	or     ecx,eax
c001b043:	89 e8                	mov    eax,ebp
c001b045:	0f b6 c0             	movzx  eax,al
c001b048:	c1 e0 08             	shl    eax,0x8
c001b04b:	09 c1                	or     ecx,eax
c001b04d:	09 d1                	or     ecx,edx
c001b04f:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b054:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b05a:	89 c8                	mov    eax,ecx
c001b05c:	ef                   	out    dx,eax
c001b05d:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b062:	ed                   	in     eax,dx
c001b063:	0f b7 db             	movzx  ebx,bx
c001b066:	83 e6 02             	and    esi,0x2
c001b069:	74 0a                	je     c001b075 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001b06b:	0f b7 d0             	movzx  edx,ax
c001b06e:	c1 e3 10             	shl    ebx,0x10
c001b071:	09 d3                	or     ebx,edx
c001b073:	eb 05                	jmp    c001b07a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001b075:	66 31 c0             	xor    ax,ax
c001b078:	09 c3                	or     ebx,eax
c001b07a:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b07f:	89 c8                	mov    eax,ecx
c001b081:	ef                   	out    dx,eax
c001b082:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b087:	89 d8                	mov    eax,ebx
c001b089:	eb 41                	jmp    c001b0cc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b08b:	83 f9 02             	cmp    ecx,0x2
c001b08e:	75 45                	jne    c001b0d5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001b090:	83 ec 0c             	sub    esp,0xc
c001b093:	0f b6 d2             	movzx  edx,dl
c001b096:	89 f1                	mov    ecx,esi
c001b098:	0f b6 c0             	movzx  eax,al
c001b09b:	0f b6 f1             	movzx  esi,cl
c001b09e:	89 e9                	mov    ecx,ebp
c001b0a0:	56                   	push   esi
c001b0a1:	0f b6 c9             	movzx  ecx,cl
c001b0a4:	51                   	push   ecx
c001b0a5:	52                   	push   edx
c001b0a6:	50                   	push   eax
c001b0a7:	57                   	push   edi
c001b0a8:	e8 a3 fc ff ff       	call   c001ad50 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0ad:	89 c2                	mov    edx,eax
c001b0af:	ed                   	in     eax,dx
c001b0b0:	83 c4 20             	add    esp,0x20
c001b0b3:	0f b7 db             	movzx  ebx,bx
c001b0b6:	f6 c2 02             	test   dl,0x2
c001b0b9:	74 0c                	je     c001b0c7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001b0bb:	0f b7 c8             	movzx  ecx,ax
c001b0be:	89 d8                	mov    eax,ebx
c001b0c0:	c1 e0 10             	shl    eax,0x10
c001b0c3:	09 c8                	or     eax,ecx
c001b0c5:	eb 05                	jmp    c001b0cc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b0c7:	66 31 c0             	xor    ax,ax
c001b0ca:	09 d8                	or     eax,ebx
c001b0cc:	ef                   	out    dx,eax
c001b0cd:	83 c4 0c             	add    esp,0xc
c001b0d0:	5b                   	pop    ebx
c001b0d1:	5e                   	pop    esi
c001b0d2:	5f                   	pop    edi
c001b0d3:	5d                   	pop    ebp
c001b0d4:	c3                   	ret    
c001b0d5:	c7 44 24 20 cb 2a 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022acb
c001b0dd:	83 c4 0c             	add    esp,0xc
c001b0e0:	5b                   	pop    ebx
c001b0e1:	5e                   	pop    esi
c001b0e2:	5f                   	pop    edi
c001b0e3:	5d                   	pop    ebp
c001b0e4:	e9 80 61 ff ff       	jmp    c0011269 <KePanic(char const*)>
c001b0e9:	90                   	nop

c001b0ea <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b0ea:	55                   	push   ebp
c001b0eb:	57                   	push   edi
c001b0ec:	56                   	push   esi
c001b0ed:	53                   	push   ebx
c001b0ee:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b0f4:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001b0fb:	80 3d ac a0 02 c0 00 	cmp    BYTE PTR ds:0xc002a0ac,0x0
c001b102:	0f 85 bd 00 00 00    	jne    c001b1c5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b108:	83 ec 0c             	sub    esp,0xc
c001b10b:	68 14 01 00 00       	push   0x114
c001b110:	e8 a1 c9 fe ff       	call   c0007ab6 <malloc>
c001b115:	83 c4 0c             	add    esp,0xc
c001b118:	89 c3                	mov    ebx,eax
c001b11a:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001b120:	68 d1 2a 02 c0       	push   0xc0022ad1
c001b125:	50                   	push   eax
c001b126:	e8 05 06 ff ff       	call   c000b730 <File::File(char const*, Process*)>
c001b12b:	83 c4 10             	add    esp,0x10
c001b12e:	85 db                	test   ebx,ebx
c001b130:	0f 84 67 02 00 00    	je     c001b39d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b136:	56                   	push   esi
c001b137:	56                   	push   esi
c001b138:	6a 01                	push   0x1
c001b13a:	53                   	push   ebx
c001b13b:	e8 ac 06 ff ff       	call   c000b7ec <File::open(FileOpenMode)>
c001b140:	83 c4 10             	add    esp,0x10
c001b143:	85 c0                	test   eax,eax
c001b145:	0f 85 52 02 00 00    	jne    c001b39d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b14b:	52                   	push   edx
c001b14c:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b150:	50                   	push   eax
c001b151:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b155:	50                   	push   eax
c001b156:	53                   	push   ebx
c001b157:	e8 92 09 ff ff       	call   c000baee <File::stat(unsigned long long*, bool*)>
c001b15c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b160:	40                   	inc    eax
c001b161:	89 04 24             	mov    DWORD PTR [esp],eax
c001b164:	e8 4d c9 fe ff       	call   c0007ab6 <malloc>
c001b169:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b16d:	a3 a8 a0 02 c0       	mov    ds:0xc002a0a8,eax
c001b172:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b176:	59                   	pop    ecx
c001b177:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b179:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b17d:	51                   	push   ecx
c001b17e:	50                   	push   eax
c001b17f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b183:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b187:	53                   	push   ebx
c001b188:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b18b:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b18f:	83 c4 20             	add    esp,0x20
c001b192:	89 c8                	mov    eax,ecx
c001b194:	99                   	cdq    
c001b195:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b199:	0f 85 fe 01 00 00    	jne    c001b39d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b19f:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b1a3:	0f 85 f4 01 00 00    	jne    c001b39d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b1a9:	83 ec 0c             	sub    esp,0xc
c001b1ac:	53                   	push   ebx
c001b1ad:	e8 98 06 ff ff       	call   c000b84a <File::close()>
c001b1b2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b1b6:	c6 05 ac a0 02 c0 01 	mov    BYTE PTR ds:0xc002a0ac,0x1
c001b1bd:	a3 a4 a0 02 c0       	mov    ds:0xc002a0a4,eax
c001b1c2:	83 c4 10             	add    esp,0x10
c001b1c5:	a1 a4 a0 02 c0       	mov    eax,ds:0xc002a0a4
c001b1ca:	8b 1d a8 a0 02 c0    	mov    ebx,DWORD PTR ds:0xc002a0a8
c001b1d0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b1d4:	31 f6                	xor    esi,esi
c001b1d6:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b1de:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b1e5:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b1ea:	31 c9                	xor    ecx,ecx
c001b1ec:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b1f4:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b1f9:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b201:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b205:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b20d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b211:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b215:	0f 8e 82 01 00 00    	jle    c001b39d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b21b:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001b21e:	d4 40                	aam    0x40
c001b220:	d5 39                	aad    0x39
c001b222:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b226:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001b22a:	d4 40                	aam    0x40
c001b22c:	d5 39                	aad    0x39
c001b22e:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b232:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001b236:	d4 40                	aam    0x40
c001b238:	d5 39                	aad    0x39
c001b23a:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b23e:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001b242:	d4 40                	aam    0x40
c001b244:	d5 39                	aad    0x39
c001b246:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b24a:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001b24e:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b252:	3c 56                	cmp    al,0x56
c001b254:	74 43                	je     c001b299 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001b256:	d4 40                	aam    0x40
c001b258:	d5 39                	aad    0x39
c001b25a:	8d 48 d0             	lea    ecx,[eax-0x30]
c001b25d:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001b261:	0f b6 c9             	movzx  ecx,cl
c001b264:	c1 e1 04             	shl    ecx,0x4
c001b267:	d4 40                	aam    0x40
c001b269:	d5 39                	aad    0x39
c001b26b:	83 e8 30             	sub    eax,0x30
c001b26e:	0f b6 c0             	movzx  eax,al
c001b271:	09 c1                	or     ecx,eax
c001b273:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001b277:	c1 e1 04             	shl    ecx,0x4
c001b27a:	d4 40                	aam    0x40
c001b27c:	d5 39                	aad    0x39
c001b27e:	83 e8 30             	sub    eax,0x30
c001b281:	0f b6 c0             	movzx  eax,al
c001b284:	09 c1                	or     ecx,eax
c001b286:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001b28a:	c1 e1 04             	shl    ecx,0x4
c001b28d:	d4 40                	aam    0x40
c001b28f:	d5 39                	aad    0x39
c001b291:	83 e8 30             	sub    eax,0x30
c001b294:	0f b6 c0             	movzx  eax,al
c001b297:	09 c1                	or     ecx,eax
c001b299:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001b29d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001b2a1:	3c 58                	cmp    al,0x58
c001b2a3:	74 47                	je     c001b2ec <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001b2a5:	d4 40                	aam    0x40
c001b2a7:	d5 39                	aad    0x39
c001b2a9:	8d 50 d0             	lea    edx,[eax-0x30]
c001b2ac:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001b2b0:	0f b6 d2             	movzx  edx,dl
c001b2b3:	c1 e2 04             	shl    edx,0x4
c001b2b6:	d4 40                	aam    0x40
c001b2b8:	d5 39                	aad    0x39
c001b2ba:	83 e8 30             	sub    eax,0x30
c001b2bd:	0f b6 c0             	movzx  eax,al
c001b2c0:	09 c2                	or     edx,eax
c001b2c2:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001b2c6:	c1 e2 04             	shl    edx,0x4
c001b2c9:	d4 40                	aam    0x40
c001b2cb:	d5 39                	aad    0x39
c001b2cd:	83 e8 30             	sub    eax,0x30
c001b2d0:	0f b6 c0             	movzx  eax,al
c001b2d3:	09 c2                	or     edx,eax
c001b2d5:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001b2d9:	c1 e2 04             	shl    edx,0x4
c001b2dc:	d4 40                	aam    0x40
c001b2de:	d5 39                	aad    0x39
c001b2e0:	83 e8 30             	sub    eax,0x30
c001b2e3:	0f b6 c0             	movzx  eax,al
c001b2e6:	09 c2                	or     edx,eax
c001b2e8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b2ec:	83 c6 10             	add    esi,0x10
c001b2ef:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b2f3:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001b2f7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b2fb:	83 fa 0a             	cmp    edx,0xa
c001b2fe:	74 0b                	je     c001b30b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001b300:	47                   	inc    edi
c001b301:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b305:	75 19                	jne    c001b320 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001b307:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001b30b:	31 c0                	xor    eax,eax
c001b30d:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001b312:	0f 94 c0             	sete   al
c001b315:	01 c6                	add    esi,eax
c001b317:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b31c:	75 0b                	jne    c001b329 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001b31e:	eb 14                	jmp    c001b334 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001b320:	46                   	inc    esi
c001b321:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001b324:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b327:	eb ca                	jmp    c001b2f3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001b329:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001b32e:	0f 85 dd fe ff ff    	jne    c001b211 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b334:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001b339:	74 10                	je     c001b34b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001b33b:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b340:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b345:	0f 85 c6 fe ff ff    	jne    c001b211 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b34b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b34f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b353:	83 e8 30             	sub    eax,0x30
c001b356:	83 ef 30             	sub    edi,0x30
c001b359:	c1 e0 04             	shl    eax,0x4
c001b35c:	09 f8                	or     eax,edi
c001b35e:	0f b6 c0             	movzx  eax,al
c001b361:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b365:	0f 85 a6 fe ff ff    	jne    c001b211 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b36b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b36f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001b373:	83 e8 30             	sub    eax,0x30
c001b376:	83 ef 30             	sub    edi,0x30
c001b379:	c1 e0 04             	shl    eax,0x4
c001b37c:	09 f8                	or     eax,edi
c001b37e:	0f b6 c0             	movzx  eax,al
c001b381:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b385:	0f 85 86 fe ff ff    	jne    c001b211 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b38b:	50                   	push   eax
c001b38c:	50                   	push   eax
c001b38d:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b391:	50                   	push   eax
c001b392:	55                   	push   ebp
c001b393:	e8 a8 52 fe ff       	call   c0000640 <strcpy>
c001b398:	83 c4 10             	add    esp,0x10
c001b39b:	eb 06                	jmp    c001b3a3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001b39d:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001b3a1:	31 ed                	xor    ebp,ebp
c001b3a3:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b3a9:	89 e8                	mov    eax,ebp
c001b3ab:	5b                   	pop    ebx
c001b3ac:	5e                   	pop    esi
c001b3ad:	5f                   	pop    edi
c001b3ae:	5d                   	pop    ebp
c001b3af:	c3                   	ret    

c001b3b0 <PCI::checkBus(unsigned char)>:
c001b3b0:	56                   	push   esi
c001b3b1:	53                   	push   ebx
c001b3b2:	31 db                	xor    ebx,ebx
c001b3b4:	51                   	push   ecx
c001b3b5:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b3ba:	52                   	push   edx
c001b3bb:	53                   	push   ebx
c001b3bc:	43                   	inc    ebx
c001b3bd:	56                   	push   esi
c001b3be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b3c2:	e8 03 03 00 00       	call   c001b6ca <PCI::checkDevice(unsigned char, unsigned char)>
c001b3c7:	83 c4 10             	add    esp,0x10
c001b3ca:	83 fb 20             	cmp    ebx,0x20
c001b3cd:	75 eb                	jne    c001b3ba <PCI::checkBus(unsigned char)+0xa>
c001b3cf:	58                   	pop    eax
c001b3d0:	5b                   	pop    ebx
c001b3d1:	5e                   	pop    esi
c001b3d2:	c3                   	ret    
c001b3d3:	90                   	nop

c001b3d4 <PCI::foundDevice(PCIDeviceInfo)>:
c001b3d4:	55                   	push   ebp
c001b3d5:	57                   	push   edi
c001b3d6:	56                   	push   esi
c001b3d7:	53                   	push   ebx
c001b3d8:	83 ec 1c             	sub    esp,0x1c
c001b3db:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001b3e0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b3e4:	3d ff ff 00 00       	cmp    eax,0xffff
c001b3e9:	0f 84 57 01 00 00    	je     c001b546 <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001b3ef:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001b3f4:	66 3d 06 04          	cmp    ax,0x406
c001b3f8:	75 2c                	jne    c001b426 <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001b3fa:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b3ff:	50                   	push   eax
c001b400:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b405:	50                   	push   eax
c001b406:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b40b:	50                   	push   eax
c001b40c:	53                   	push   ebx
c001b40d:	e8 64 fb ff ff       	call   c001af76 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b412:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b416:	0f b6 c0             	movzx  eax,al
c001b419:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b41d:	83 c4 2c             	add    esp,0x2c
c001b420:	5b                   	pop    ebx
c001b421:	5e                   	pop    esi
c001b422:	5f                   	pop    edi
c001b423:	5d                   	pop    ebp
c001b424:	eb 8a                	jmp    c001b3b0 <PCI::checkBus(unsigned char)>
c001b426:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b42a:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001b430:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001b434:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001b438:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c001b43d:	85 d2                	test   edx,edx
c001b43f:	74 36                	je     c001b477 <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c001b441:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001b444:	85 c9                	test   ecx,ecx
c001b446:	74 2b                	je     c001b473 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b448:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c001b44e:	31 ee                	xor    esi,ebp
c001b450:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c001b456:	75 1b                	jne    c001b473 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b458:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001b45c:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c001b462:	75 0f                	jne    c001b473 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b464:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001b46b:	39 f9                	cmp    ecx,edi
c001b46d:	0f 84 d3 00 00 00    	je     c001b546 <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001b473:	8b 12                	mov    edx,DWORD PTR [edx]
c001b475:	eb c6                	jmp    c001b43d <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001b477:	3d 01 06 00 00       	cmp    eax,0x601
c001b47c:	75 19                	jne    c001b497 <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c001b47e:	83 ec 0c             	sub    esp,0xc
c001b481:	68 64 01 00 00       	push   0x164
c001b486:	e8 2b c6 fe ff       	call   c0007ab6 <malloc>
c001b48b:	89 c5                	mov    ebp,eax
c001b48d:	89 04 24             	mov    DWORD PTR [esp],eax
c001b490:	e8 a1 0e 00 00       	call   c001c336 <SATABus::SATABus()>
c001b495:	eb 1e                	jmp    c001b4b5 <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c001b497:	3d 01 01 00 00       	cmp    eax,0x101
c001b49c:	75 62                	jne    c001b500 <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c001b49e:	83 ec 0c             	sub    esp,0xc
c001b4a1:	68 70 02 00 00       	push   0x270
c001b4a6:	e8 0b c6 fe ff       	call   c0007ab6 <malloc>
c001b4ab:	89 c5                	mov    ebp,eax
c001b4ad:	89 04 24             	mov    DWORD PTR [esp],eax
c001b4b0:	e8 e5 02 00 00       	call   c001b79a <IDE::IDE()>
c001b4b5:	5f                   	pop    edi
c001b4b6:	58                   	pop    eax
c001b4b7:	55                   	push   ebp
c001b4b8:	53                   	push   ebx
c001b4b9:	e8 7c 11 ff ff       	call   c000c63a <Device::addChild(Device*)>
c001b4be:	83 ec 1c             	sub    esp,0x1c
c001b4c1:	b9 09 00 00 00       	mov    ecx,0x9
c001b4c6:	fc                   	cld    
c001b4c7:	89 e7                	mov    edi,esp
c001b4c9:	8d 74 24 60          	lea    esi,[esp+0x60]
c001b4cd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b4cf:	55                   	push   ebp
c001b4d0:	e8 ab 10 ff ff       	call   c000c580 <Device::preOpenPCI(PCIDeviceInfo)>
c001b4d5:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001b4d8:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b4dc:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b4e4:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b4ec:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b4f4:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001b4f7:	83 c4 4c             	add    esp,0x4c
c001b4fa:	5b                   	pop    ebx
c001b4fb:	5e                   	pop    esi
c001b4fc:	5f                   	pop    edi
c001b4fd:	5d                   	pop    ebp
c001b4fe:	ff e0                	jmp    eax
c001b500:	83 ec 0c             	sub    esp,0xc
c001b503:	68 58 01 00 00       	push   0x158
c001b508:	e8 a9 c5 fe ff       	call   c0007ab6 <malloc>
c001b50d:	89 c5                	mov    ebp,eax
c001b50f:	58                   	pop    eax
c001b510:	5a                   	pop    edx
c001b511:	68 ea 2a 02 c0       	push   0xc0022aea
c001b516:	55                   	push   ebp
c001b517:	e8 bc 13 ff ff       	call   c000c8d8 <DriverlessDevice::DriverlessDevice(char const*)>
c001b51c:	59                   	pop    ecx
c001b51d:	5e                   	pop    esi
c001b51e:	55                   	push   ebp
c001b51f:	53                   	push   ebx
c001b520:	e8 15 11 ff ff       	call   c000c63a <Device::addChild(Device*)>
c001b525:	83 c4 10             	add    esp,0x10
c001b528:	b9 09 00 00 00       	mov    ecx,0x9
c001b52d:	fc                   	cld    
c001b52e:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001b532:	89 fe                	mov    esi,edi
c001b534:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b536:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001b53a:	83 c4 1c             	add    esp,0x1c
c001b53d:	5b                   	pop    ebx
c001b53e:	5e                   	pop    esi
c001b53f:	5f                   	pop    edi
c001b540:	5d                   	pop    ebp
c001b541:	e9 3a 10 ff ff       	jmp    c000c580 <Device::preOpenPCI(PCIDeviceInfo)>
c001b546:	83 c4 1c             	add    esp,0x1c
c001b549:	5b                   	pop    ebx
c001b54a:	5e                   	pop    esi
c001b54b:	5f                   	pop    edi
c001b54c:	5d                   	pop    ebp
c001b54d:	c3                   	ret    

c001b54e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b54e:	55                   	push   ebp
c001b54f:	57                   	push   edi
c001b550:	56                   	push   esi
c001b551:	53                   	push   ebx
c001b552:	83 ec 68             	sub    esp,0x68
c001b555:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001b559:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b560:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b564:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b56b:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001b570:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b574:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b57b:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001b580:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b584:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001b589:	6a 0c                	push   0xc
c001b58b:	57                   	push   edi
c001b58c:	53                   	push   ebx
c001b58d:	56                   	push   esi
c001b58e:	55                   	push   ebp
c001b58f:	e8 32 f8 ff ff       	call   c001adc6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b594:	83 c4 20             	add    esp,0x20
c001b597:	57                   	push   edi
c001b598:	53                   	push   ebx
c001b599:	56                   	push   esi
c001b59a:	55                   	push   ebp
c001b59b:	e8 1c f9 ff ff       	call   c001aebc <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b5a0:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001b5a5:	57                   	push   edi
c001b5a6:	53                   	push   ebx
c001b5a7:	56                   	push   esi
c001b5a8:	55                   	push   ebp
c001b5a9:	e8 a4 f9 ff ff       	call   c001af52 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b5ae:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b5b2:	83 c4 14             	add    esp,0x14
c001b5b5:	6a 3c                	push   0x3c
c001b5b7:	57                   	push   edi
c001b5b8:	53                   	push   ebx
c001b5b9:	56                   	push   esi
c001b5ba:	55                   	push   ebp
c001b5bb:	e8 06 f8 ff ff       	call   c001adc6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5c0:	0f b6 c4             	movzx  eax,ah
c001b5c3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b5c7:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001b5cb:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001b5cf:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001b5d4:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001b5da:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001b5e0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b5e4:	83 c4 20             	add    esp,0x20
c001b5e7:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001b5ec:	74 30                	je     c001b61e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b5ee:	31 c0                	xor    eax,eax
c001b5f0:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001b5f4:	7e 28                	jle    c001b61e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b5f6:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001b5fe:	39 cb                	cmp    ebx,ecx
c001b600:	75 19                	jne    c001b61b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b602:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001b60a:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001b60e:	75 0b                	jne    c001b61b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b610:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001b617:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b61b:	40                   	inc    eax
c001b61c:	eb d2                	jmp    c001b5f0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001b61e:	31 d2                	xor    edx,edx
c001b620:	83 ec 0c             	sub    esp,0xc
c001b623:	57                   	push   edi
c001b624:	53                   	push   ebx
c001b625:	56                   	push   esi
c001b626:	52                   	push   edx
c001b627:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001b62b:	55                   	push   ebp
c001b62c:	e8 6d f9 ff ff       	call   c001af9e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b631:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b635:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001b639:	42                   	inc    edx
c001b63a:	83 c4 20             	add    esp,0x20
c001b63d:	83 fa 06             	cmp    edx,0x6
c001b640:	75 de                	jne    c001b620 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001b642:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b64a:	c1 e2 08             	shl    edx,0x8
c001b64d:	83 ec 0c             	sub    esp,0xc
c001b650:	0f b6 c4             	movzx  eax,ah
c001b653:	09 d0                	or     eax,edx
c001b655:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001b65a:	6a 02                	push   0x2
c001b65c:	57                   	push   edi
c001b65d:	53                   	push   ebx
c001b65e:	56                   	push   esi
c001b65f:	55                   	push   ebp
c001b660:	e8 61 f7 ff ff       	call   c001adc6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b665:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001b66a:	83 c4 20             	add    esp,0x20
c001b66d:	57                   	push   edi
c001b66e:	53                   	push   ebx
c001b66f:	56                   	push   esi
c001b670:	55                   	push   ebp
c001b671:	e8 90 f8 ff ff       	call   c001af06 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001b676:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b67a:	57                   	push   edi
c001b67b:	53                   	push   ebx
c001b67c:	56                   	push   esi
c001b67d:	55                   	push   ebp
c001b67e:	e8 ed f7 ff ff       	call   c001ae70 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b683:	b9 09 00 00 00       	mov    ecx,0x9
c001b688:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001b68d:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001b691:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001b695:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001b699:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001b69d:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001b6a1:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001b6a5:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001b6a9:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001b6ad:	83 ec 0c             	sub    esp,0xc
c001b6b0:	fc                   	cld    
c001b6b1:	89 e7                	mov    edi,esp
c001b6b3:	8d 74 24 58          	lea    esi,[esp+0x58]
c001b6b7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b6b9:	55                   	push   ebp
c001b6ba:	e8 15 fd ff ff       	call   c001b3d4 <PCI::foundDevice(PCIDeviceInfo)>
c001b6bf:	81 c4 8c 00 00 00    	add    esp,0x8c
c001b6c5:	5b                   	pop    ebx
c001b6c6:	5e                   	pop    esi
c001b6c7:	5f                   	pop    edi
c001b6c8:	5d                   	pop    ebp
c001b6c9:	c3                   	ret    

c001b6ca <PCI::checkDevice(unsigned char, unsigned char)>:
c001b6ca:	55                   	push   ebp
c001b6cb:	57                   	push   edi
c001b6cc:	56                   	push   esi
c001b6cd:	53                   	push   ebx
c001b6ce:	83 ec 0c             	sub    esp,0xc
c001b6d1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b6d5:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001b6da:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b6df:	6a 00                	push   0x0
c001b6e1:	56                   	push   esi
c001b6e2:	57                   	push   edi
c001b6e3:	55                   	push   ebp
c001b6e4:	e8 87 f7 ff ff       	call   c001ae70 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b6e9:	6a 00                	push   0x0
c001b6eb:	56                   	push   esi
c001b6ec:	57                   	push   edi
c001b6ed:	55                   	push   ebp
c001b6ee:	e8 5b fe ff ff       	call   c001b54e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b6f3:	83 c4 20             	add    esp,0x20
c001b6f6:	6a 00                	push   0x0
c001b6f8:	56                   	push   esi
c001b6f9:	57                   	push   edi
c001b6fa:	55                   	push   ebp
c001b6fb:	e8 94 f7 ff ff       	call   c001ae94 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b700:	83 c4 10             	add    esp,0x10
c001b703:	a8 80                	test   al,0x80
c001b705:	74 2d                	je     c001b734 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001b707:	bb 01 00 00 00       	mov    ebx,0x1
c001b70c:	53                   	push   ebx
c001b70d:	56                   	push   esi
c001b70e:	57                   	push   edi
c001b70f:	55                   	push   ebp
c001b710:	e8 5b f7 ff ff       	call   c001ae70 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b715:	83 c4 10             	add    esp,0x10
c001b718:	0f b7 c0             	movzx  eax,ax
c001b71b:	3d ff ff 00 00       	cmp    eax,0xffff
c001b720:	74 0c                	je     c001b72e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001b722:	53                   	push   ebx
c001b723:	56                   	push   esi
c001b724:	57                   	push   edi
c001b725:	55                   	push   ebp
c001b726:	e8 23 fe ff ff       	call   c001b54e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b72b:	83 c4 10             	add    esp,0x10
c001b72e:	43                   	inc    ebx
c001b72f:	83 fb 08             	cmp    ebx,0x8
c001b732:	75 d8                	jne    c001b70c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001b734:	83 c4 0c             	add    esp,0xc
c001b737:	5b                   	pop    ebx
c001b738:	5e                   	pop    esi
c001b739:	5f                   	pop    edi
c001b73a:	5d                   	pop    ebp
c001b73b:	c3                   	ret    

c001b73c <PCI::detect()>:
c001b73c:	56                   	push   esi
c001b73d:	53                   	push   ebx
c001b73e:	53                   	push   ebx
c001b73f:	31 db                	xor    ebx,ebx
c001b741:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b745:	6a 00                	push   0x0
c001b747:	6a 00                	push   0x0
c001b749:	6a 00                	push   0x0
c001b74b:	56                   	push   esi
c001b74c:	e8 43 f7 ff ff       	call   c001ae94 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b751:	83 c4 10             	add    esp,0x10
c001b754:	a8 80                	test   al,0x80
c001b756:	75 21                	jne    c001b779 <PCI::detect()+0x3d>
c001b758:	51                   	push   ecx
c001b759:	51                   	push   ecx
c001b75a:	6a 00                	push   0x0
c001b75c:	56                   	push   esi
c001b75d:	e8 4e fc ff ff       	call   c001b3b0 <PCI::checkBus(unsigned char)>
c001b762:	83 c4 10             	add    esp,0x10
c001b765:	eb 2a                	jmp    c001b791 <PCI::detect()+0x55>
c001b767:	52                   	push   edx
c001b768:	52                   	push   edx
c001b769:	53                   	push   ebx
c001b76a:	43                   	inc    ebx
c001b76b:	56                   	push   esi
c001b76c:	e8 3f fc ff ff       	call   c001b3b0 <PCI::checkBus(unsigned char)>
c001b771:	83 c4 10             	add    esp,0x10
c001b774:	83 fb 08             	cmp    ebx,0x8
c001b777:	74 18                	je     c001b791 <PCI::detect()+0x55>
c001b779:	53                   	push   ebx
c001b77a:	6a 00                	push   0x0
c001b77c:	6a 00                	push   0x0
c001b77e:	56                   	push   esi
c001b77f:	e8 ec f6 ff ff       	call   c001ae70 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b784:	83 c4 10             	add    esp,0x10
c001b787:	0f b7 c0             	movzx  eax,ax
c001b78a:	3d ff ff 00 00       	cmp    eax,0xffff
c001b78f:	74 d6                	je     c001b767 <PCI::detect()+0x2b>
c001b791:	58                   	pop    eax
c001b792:	5b                   	pop    ebx
c001b793:	5e                   	pop    esi
c001b794:	c3                   	ret    
c001b795:	90                   	nop

c001b796 <IDE::close(int, int, void*)>:
c001b796:	83 c8 ff             	or     eax,0xffffffff
c001b799:	c3                   	ret    

c001b79a <IDE::IDE()>:
c001b79a:	83 ec 0c             	sub    esp,0xc
c001b79d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7a1:	83 ec 08             	sub    esp,0x8
c001b7a4:	68 30 2b 02 c0       	push   0xc0022b30
c001b7a9:	50                   	push   eax
c001b7aa:	e8 cd 11 ff ff       	call   c000c97c <HardDiskController::HardDiskController(char const*)>
c001b7af:	83 c4 10             	add    esp,0x10
c001b7b2:	ba c0 2b 02 c0       	mov    edx,0xc0022bc0
c001b7b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7bb:	89 10                	mov    DWORD PTR [eax],edx
c001b7bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7c1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001b7c8:	90                   	nop
c001b7c9:	83 c4 0c             	add    esp,0xc
c001b7cc:	c3                   	ret    
c001b7cd:	90                   	nop

c001b7ce <IDE::prepareInterrupt(unsigned char)>:
c001b7ce:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b7d3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b7d7:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001b7df:	c3                   	ret    

c001b7e0 <selectDrive(unsigned char, unsigned char)>:
c001b7e0:	c3                   	ret    
c001b7e1:	90                   	nop

c001b7e2 <IDE::getBase(unsigned char)>:
c001b7e2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001b7e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b7eb:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001b7f3:	c3                   	ret    

c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001b7f4:	55                   	push   ebp
c001b7f5:	57                   	push   edi
c001b7f6:	56                   	push   esi
c001b7f7:	53                   	push   ebx
c001b7f8:	83 ec 1c             	sub    esp,0x1c
c001b7fb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b7ff:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b803:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001b806:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b80a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b80e:	80 f9 03             	cmp    cl,0x3
c001b811:	77 4f                	ja     c001b862 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001b813:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b817:	0f b6 fa             	movzx  edi,dl
c001b81a:	0f b6 db             	movzx  ebx,bl
c001b81d:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001b820:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001b825:	80 ca 80             	or     dl,0x80
c001b828:	52                   	push   edx
c001b829:	6a 0c                	push   0xc
c001b82b:	57                   	push   edi
c001b82c:	56                   	push   esi
c001b82d:	e8 c2 ff ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b832:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001b837:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b83b:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001b83f:	ee                   	out    dx,al
c001b840:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b845:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001b849:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b84d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b851:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b859:	83 c4 2c             	add    esp,0x2c
c001b85c:	5b                   	pop    ebx
c001b85d:	5e                   	pop    esi
c001b85e:	5f                   	pop    edi
c001b85f:	5d                   	pop    ebp
c001b860:	eb 92                	jmp    c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b862:	0f b6 cb             	movzx  ecx,bl
c001b865:	83 f9 07             	cmp    ecx,0x7
c001b868:	77 12                	ja     c001b87c <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001b86a:	0f b6 d2             	movzx  edx,dl
c001b86d:	0f b6 db             	movzx  ebx,bl
c001b870:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001b878:	01 da                	add    edx,ebx
c001b87a:	eb 2f                	jmp    c001b8ab <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b87c:	83 f9 0d             	cmp    ecx,0xd
c001b87f:	77 13                	ja     c001b894 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001b881:	0f b6 d2             	movzx  edx,dl
c001b884:	0f b6 db             	movzx  ebx,bl
c001b887:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001b88e:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001b892:	eb 17                	jmp    c001b8ab <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b894:	83 f9 15             	cmp    ecx,0x15
c001b897:	77 13                	ja     c001b8ac <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001b899:	0f b6 d2             	movzx  edx,dl
c001b89c:	0f b6 db             	movzx  ebx,bl
c001b89f:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001b8a7:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001b8ab:	ee                   	out    dx,al
c001b8ac:	83 c4 1c             	add    esp,0x1c
c001b8af:	5b                   	pop    ebx
c001b8b0:	5e                   	pop    esi
c001b8b1:	5f                   	pop    edi
c001b8b2:	5d                   	pop    ebp
c001b8b3:	c3                   	ret    

c001b8b4 <IDE::read(unsigned char, unsigned char)>:
c001b8b4:	55                   	push   ebp
c001b8b5:	57                   	push   edi
c001b8b6:	56                   	push   esi
c001b8b7:	53                   	push   ebx
c001b8b8:	83 ec 1c             	sub    esp,0x1c
c001b8bb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b8bf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b8c3:	8d 43 f8             	lea    eax,[ebx-0x8]
c001b8c6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001b8ca:	3c 03                	cmp    al,0x3
c001b8cc:	77 40                	ja     c001b90e <IDE::read(unsigned char, unsigned char)+0x5a>
c001b8ce:	0f b6 f9             	movzx  edi,cl
c001b8d1:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001b8d4:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b8d9:	0c 80                	or     al,0x80
c001b8db:	50                   	push   eax
c001b8dc:	6a 0c                	push   0xc
c001b8de:	57                   	push   edi
c001b8df:	56                   	push   esi
c001b8e0:	e8 0f ff ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b8e5:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001b8ea:	0f b6 d3             	movzx  edx,bl
c001b8ed:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b8f1:	ec                   	in     al,dx
c001b8f2:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b8f6:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001b8fb:	52                   	push   edx
c001b8fc:	6a 0c                	push   0xc
c001b8fe:	57                   	push   edi
c001b8ff:	56                   	push   esi
c001b900:	e8 ef fe ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b905:	83 c4 20             	add    esp,0x20
c001b908:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b90c:	eb 4c                	jmp    c001b95a <IDE::read(unsigned char, unsigned char)+0xa6>
c001b90e:	0f b6 d3             	movzx  edx,bl
c001b911:	83 fa 07             	cmp    edx,0x7
c001b914:	77 12                	ja     c001b928 <IDE::read(unsigned char, unsigned char)+0x74>
c001b916:	0f b6 c9             	movzx  ecx,cl
c001b919:	0f b6 d3             	movzx  edx,bl
c001b91c:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001b924:	01 c2                	add    edx,eax
c001b926:	eb 31                	jmp    c001b959 <IDE::read(unsigned char, unsigned char)+0xa5>
c001b928:	83 fa 0d             	cmp    edx,0xd
c001b92b:	77 13                	ja     c001b940 <IDE::read(unsigned char, unsigned char)+0x8c>
c001b92d:	0f b6 c9             	movzx  ecx,cl
c001b930:	0f b6 d3             	movzx  edx,bl
c001b933:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001b93a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b93e:	eb 19                	jmp    c001b959 <IDE::read(unsigned char, unsigned char)+0xa5>
c001b940:	31 c0                	xor    eax,eax
c001b942:	83 fa 15             	cmp    edx,0x15
c001b945:	77 13                	ja     c001b95a <IDE::read(unsigned char, unsigned char)+0xa6>
c001b947:	0f b6 c9             	movzx  ecx,cl
c001b94a:	0f b6 d3             	movzx  edx,bl
c001b94d:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001b955:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b959:	ec                   	in     al,dx
c001b95a:	83 c4 1c             	add    esp,0x1c
c001b95d:	5b                   	pop    ebx
c001b95e:	5e                   	pop    esi
c001b95f:	5f                   	pop    edi
c001b960:	5d                   	pop    ebp
c001b961:	c3                   	ret    

c001b962 <IDE::waitInterrupt(unsigned char)>:
c001b962:	55                   	push   ebp
c001b963:	57                   	push   edi
c001b964:	56                   	push   esi
c001b965:	53                   	push   ebx
c001b966:	31 db                	xor    ebx,ebx
c001b968:	83 ec 0c             	sub    esp,0xc
c001b96b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b96f:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001b974:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001b97c:	89 e8                	mov    eax,ebp
c001b97e:	84 c0                	test   al,al
c001b980:	75 30                	jne    c001b9b2 <IDE::waitInterrupt(unsigned char)+0x50>
c001b982:	50                   	push   eax
c001b983:	6a 0c                	push   0xc
c001b985:	56                   	push   esi
c001b986:	57                   	push   edi
c001b987:	e8 28 ff ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001b98c:	83 c4 10             	add    esp,0x10
c001b98f:	a8 01                	test   al,0x1
c001b991:	75 27                	jne    c001b9ba <IDE::waitInterrupt(unsigned char)+0x58>
c001b993:	f6 c3 04             	test   bl,0x4
c001b996:	75 12                	jne    c001b9aa <IDE::waitInterrupt(unsigned char)+0x48>
c001b998:	83 fb 32             	cmp    ebx,0x32
c001b99b:	7e 0d                	jle    c001b9aa <IDE::waitInterrupt(unsigned char)+0x48>
c001b99d:	83 ec 0c             	sub    esp,0xc
c001b9a0:	6a 64                	push   0x64
c001b9a2:	e8 b1 a4 ff ff       	call   c0015e58 <milliTenthSleep(unsigned int)>
c001b9a7:	83 c4 10             	add    esp,0x10
c001b9aa:	83 fb 3c             	cmp    ebx,0x3c
c001b9ad:	74 0b                	je     c001b9ba <IDE::waitInterrupt(unsigned char)+0x58>
c001b9af:	43                   	inc    ebx
c001b9b0:	eb c2                	jmp    c001b974 <IDE::waitInterrupt(unsigned char)+0x12>
c001b9b2:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001b9ba:	83 c4 0c             	add    esp,0xc
c001b9bd:	89 e8                	mov    eax,ebp
c001b9bf:	5b                   	pop    ebx
c001b9c0:	5e                   	pop    esi
c001b9c1:	5f                   	pop    edi
c001b9c2:	5d                   	pop    ebp
c001b9c3:	c3                   	ret    

c001b9c4 <ideChannel0IRQHandler(regs*, void*)>:
c001b9c4:	83 ec 10             	sub    esp,0x10
c001b9c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b9cb:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001b9d2:	6a 07                	push   0x7
c001b9d4:	6a 00                	push   0x0
c001b9d6:	50                   	push   eax
c001b9d7:	e8 d8 fe ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001b9dc:	83 c4 1c             	add    esp,0x1c
c001b9df:	c3                   	ret    

c001b9e0 <ideChannel1IRQHandler(regs*, void*)>:
c001b9e0:	83 ec 10             	sub    esp,0x10
c001b9e3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b9e7:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001b9ee:	6a 07                	push   0x7
c001b9f0:	6a 01                	push   0x1
c001b9f2:	50                   	push   eax
c001b9f3:	e8 bc fe ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001b9f8:	83 c4 1c             	add    esp,0x1c
c001b9fb:	c3                   	ret    

c001b9fc <IDE::enableIRQs(unsigned char, bool)>:
c001b9fc:	57                   	push   edi
c001b9fd:	b8 02 00 00 00       	mov    eax,0x2
c001ba02:	56                   	push   esi
c001ba03:	53                   	push   ebx
c001ba04:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ba08:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ba0c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001ba11:	74 02                	je     c001ba15 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001ba13:	31 c0                	xor    eax,eax
c001ba15:	0f b6 db             	movzx  ebx,bl
c001ba18:	bf 04 00 00 00       	mov    edi,0x4
c001ba1d:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001ba24:	50                   	push   eax
c001ba25:	6a 0c                	push   0xc
c001ba27:	53                   	push   ebx
c001ba28:	56                   	push   esi
c001ba29:	e8 c6 fd ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba2e:	83 c4 10             	add    esp,0x10
c001ba31:	50                   	push   eax
c001ba32:	6a 0c                	push   0xc
c001ba34:	53                   	push   ebx
c001ba35:	56                   	push   esi
c001ba36:	e8 79 fe ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001ba3b:	83 c4 10             	add    esp,0x10
c001ba3e:	4f                   	dec    edi
c001ba3f:	75 f0                	jne    c001ba31 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001ba41:	5b                   	pop    ebx
c001ba42:	5e                   	pop    esi
c001ba43:	5f                   	pop    edi
c001ba44:	c3                   	ret    
c001ba45:	90                   	nop

c001ba46 <IDE::open(int, int, void*)>:
c001ba46:	55                   	push   ebp
c001ba47:	57                   	push   edi
c001ba48:	56                   	push   esi
c001ba49:	53                   	push   ebx
c001ba4a:	83 ec 1c             	sub    esp,0x1c
c001ba4d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ba51:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001ba5a:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001ba63:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001ba6a:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001ba71:	0f 85 de 02 00 00    	jne    c001bd55 <IDE::open(int, int, void*)+0x30f>
c001ba77:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001ba7d:	88 04 24             	mov    BYTE PTR [esp],al
c001ba80:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ba83:	83 e0 7f             	and    eax,0x7f
c001ba86:	83 f8 05             	cmp    eax,0x5
c001ba89:	74 05                	je     c001ba90 <IDE::open(int, int, void*)+0x4a>
c001ba8b:	83 f8 0f             	cmp    eax,0xf
c001ba8e:	75 32                	jne    c001bac2 <IDE::open(int, int, void*)+0x7c>
c001ba90:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001ba96:	83 e0 fc             	and    eax,0xfffffffc
c001ba99:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001baa0:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001baa6:	83 e0 fc             	and    eax,0xfffffffc
c001baa9:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bab0:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001bab6:	83 e0 fc             	and    eax,0xfffffffc
c001bab9:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bac0:	eb 14                	jmp    c001bad6 <IDE::open(int, int, void*)+0x90>
c001bac2:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001bacc:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001bad6:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001badd:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001bae4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bae8:	89 c6                	mov    esi,eax
c001baea:	bf f8 0c 00 00       	mov    edi,0xcf8
c001baef:	c1 e6 10             	shl    esi,0x10
c001baf2:	89 e8                	mov    eax,ebp
c001baf4:	89 fa                	mov    edx,edi
c001baf6:	c1 e0 0b             	shl    eax,0xb
c001baf9:	09 f0                	or     eax,esi
c001bafb:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001bb02:	c1 e6 08             	shl    esi,0x8
c001bb05:	09 c6                	or     esi,eax
c001bb07:	89 f0                	mov    eax,esi
c001bb09:	0d 08 00 00 80       	or     eax,0x80000008
c001bb0e:	ef                   	out    dx,eax
c001bb0f:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001bb14:	89 ca                	mov    edx,ecx
c001bb16:	ed                   	in     eax,dx
c001bb17:	c1 e8 10             	shr    eax,0x10
c001bb1a:	3d ff ff 00 00       	cmp    eax,0xffff
c001bb1f:	0f 84 f9 00 00 00    	je     c001bc1e <IDE::open(int, int, void*)+0x1d8>
c001bb25:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001bb2b:	89 fa                	mov    edx,edi
c001bb2d:	89 f0                	mov    eax,esi
c001bb2f:	ef                   	out    dx,eax
c001bb30:	b0 fe                	mov    al,0xfe
c001bb32:	89 ca                	mov    edx,ecx
c001bb34:	ee                   	out    dx,al
c001bb35:	89 f0                	mov    eax,esi
c001bb37:	89 fa                	mov    edx,edi
c001bb39:	ef                   	out    dx,eax
c001bb3a:	89 ca                	mov    edx,ecx
c001bb3c:	ed                   	in     eax,dx
c001bb3d:	3c fe                	cmp    al,0xfe
c001bb3f:	0f 85 a9 00 00 00    	jne    c001bbee <IDE::open(int, int, void*)+0x1a8>
c001bb45:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c001bb4b:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001bb52:	74 33                	je     c001bb87 <IDE::open(int, int, void*)+0x141>
c001bb54:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001bb5a:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001bb5e:	40                   	inc    eax
c001bb5f:	83 ec 0c             	sub    esp,0xc
c001bb62:	0f b6 c0             	movzx  eax,al
c001bb65:	50                   	push   eax
c001bb66:	55                   	push   ebp
c001bb67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bb6b:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001bb71:	51                   	push   ecx
c001bb72:	e8 35 3a ff ff       	call   c000f5ac <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001bb77:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001bb7c:	83 c4 1c             	add    esp,0x1c
c001bb7f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bb85:	eb 0a                	jmp    c001bb91 <IDE::open(int, int, void*)+0x14b>
c001bb87:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001bb91:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001bb98:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bb9f:	c1 e1 10             	shl    ecx,0x10
c001bba2:	c1 e0 08             	shl    eax,0x8
c001bba5:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bbaa:	09 c1                	or     ecx,eax
c001bbac:	89 fa                	mov    edx,edi
c001bbae:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001bbb5:	c1 e0 0b             	shl    eax,0xb
c001bbb8:	09 c1                	or     ecx,eax
c001bbba:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bbc0:	89 c8                	mov    eax,ecx
c001bbc2:	ef                   	out    dx,eax
c001bbc3:	be fc 0c 00 00       	mov    esi,0xcfc
c001bbc8:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001bbce:	89 f2                	mov    edx,esi
c001bbd0:	ee                   	out    dx,al
c001bbd1:	89 c8                	mov    eax,ecx
c001bbd3:	89 fa                	mov    edx,edi
c001bbd5:	ef                   	out    dx,eax
c001bbd6:	89 f2                	mov    edx,esi
c001bbd8:	ed                   	in     eax,dx
c001bbd9:	0f b6 c0             	movzx  eax,al
c001bbdc:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001bbe2:	74 4a                	je     c001bc2e <IDE::open(int, int, void*)+0x1e8>
c001bbe4:	83 ec 0c             	sub    esp,0xc
c001bbe7:	68 48 2b 02 c0       	push   0xc0022b48
c001bbec:	eb 38                	jmp    c001bc26 <IDE::open(int, int, void*)+0x1e0>
c001bbee:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001bbf7:	75 1b                	jne    c001bc14 <IDE::open(int, int, void*)+0x1ce>
c001bbf9:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001bbfd:	3d 80 00 00 00       	cmp    eax,0x80
c001bc02:	74 07                	je     c001bc0b <IDE::open(int, int, void*)+0x1c5>
c001bc04:	3d 8a 00 00 00       	cmp    eax,0x8a
c001bc09:	75 09                	jne    c001bc14 <IDE::open(int, int, void*)+0x1ce>
c001bc0b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bc12:	eb 1a                	jmp    c001bc2e <IDE::open(int, int, void*)+0x1e8>
c001bc14:	83 ec 0c             	sub    esp,0xc
c001bc17:	68 50 2b 02 c0       	push   0xc0022b50
c001bc1c:	eb 08                	jmp    c001bc26 <IDE::open(int, int, void*)+0x1e0>
c001bc1e:	83 ec 0c             	sub    esp,0xc
c001bc21:	68 81 2b 02 c0       	push   0xc0022b81
c001bc26:	e8 3e 56 ff ff       	call   c0011269 <KePanic(char const*)>
c001bc2b:	83 c4 10             	add    esp,0x10
c001bc2e:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001bc35:	74 1a                	je     c001bc51 <IDE::open(int, int, void*)+0x20b>
c001bc37:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001bc3d:	83 e0 fc             	and    eax,0xfffffffc
c001bc40:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001bc47:	83 c0 08             	add    eax,0x8
c001bc4a:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001bc51:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001bc57:	89 c2                	mov    edx,eax
c001bc59:	83 e2 0f             	and    edx,0xf
c001bc5c:	83 fa 08             	cmp    edx,0x8
c001bc5f:	75 0a                	jne    c001bc6b <IDE::open(int, int, void*)+0x225>
c001bc61:	83 e8 02             	sub    eax,0x2
c001bc64:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bc6b:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001bc71:	89 c2                	mov    edx,eax
c001bc73:	83 e2 0f             	and    edx,0xf
c001bc76:	83 fa 08             	cmp    edx,0x8
c001bc79:	75 0a                	jne    c001bc85 <IDE::open(int, int, void*)+0x23f>
c001bc7b:	83 e8 02             	sub    eax,0x2
c001bc7e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bc85:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001bc8c:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001bc93:	89 d0                	mov    eax,edx
c001bc95:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bc98:	8d 7a 01             	lea    edi,[edx+0x1]
c001bc9b:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bc9f:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001bca3:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001bca7:	83 e1 3f             	and    ecx,0x3f
c001bcaa:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001bcae:	89 f9                	mov    ecx,edi
c001bcb0:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001bcb7:	0f b6 c9             	movzx  ecx,cl
c001bcba:	8d 78 02             	lea    edi,[eax+0x2]
c001bcbd:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bcc0:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bcc4:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001bcc8:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001bccc:	83 e2 3f             	and    edx,0x3f
c001bccf:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001bcd3:	89 f9                	mov    ecx,edi
c001bcd5:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001bcdb:	0f b6 d1             	movzx  edx,cl
c001bcde:	8d 78 03             	lea    edi,[eax+0x3]
c001bce1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bce4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bce8:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001bcec:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001bcf0:	83 e1 3f             	and    ecx,0x3f
c001bcf3:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001bcf7:	89 f9                	mov    ecx,edi
c001bcf9:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001bcff:	0f b6 c9             	movzx  ecx,cl
c001bd02:	8d 78 04             	lea    edi,[eax+0x4]
c001bd05:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bd08:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bd0c:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001bd10:	89 fa                	mov    edx,edi
c001bd12:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001bd18:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001bd1c:	83 e2 3f             	and    edx,0x3f
c001bd1f:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001bd23:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001bd2a:	66 85 f6             	test   si,si
c001bd2d:	74 65                	je     c001bd94 <IDE::open(int, int, void*)+0x34e>
c001bd2f:	89 f9                	mov    ecx,edi
c001bd31:	83 c0 05             	add    eax,0x5
c001bd34:	0f b6 d1             	movzx  edx,cl
c001bd37:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bd3a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bd3e:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001bd42:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001bd48:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001bd4c:	83 e0 3f             	and    eax,0x3f
c001bd4f:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001bd53:	eb 3f                	jmp    c001bd94 <IDE::open(int, int, void*)+0x34e>
c001bd55:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001bd5b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bd62:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bd69:	05 06 02 00 00       	add    eax,0x206
c001bd6e:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bd75:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001bd7c:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bd83:	05 06 02 00 00       	add    eax,0x206
c001bd88:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bd8f:	e9 bd fe ff ff       	jmp    c001bc51 <IDE::open(int, int, void*)+0x20b>
c001bd94:	50                   	push   eax
c001bd95:	50                   	push   eax
c001bd96:	6a 00                	push   0x0
c001bd98:	53                   	push   ebx
c001bd99:	e8 30 fa ff ff       	call   c001b7ce <IDE::prepareInterrupt(unsigned char)>
c001bd9e:	5a                   	pop    edx
c001bd9f:	59                   	pop    ecx
c001bda0:	6a 01                	push   0x1
c001bda2:	53                   	push   ebx
c001bda3:	e8 26 fa ff ff       	call   c001b7ce <IDE::prepareInterrupt(unsigned char)>
c001bda8:	83 c4 0c             	add    esp,0xc
c001bdab:	6a 00                	push   0x0
c001bdad:	6a 00                	push   0x0
c001bdaf:	53                   	push   ebx
c001bdb0:	e8 47 fc ff ff       	call   c001b9fc <IDE::enableIRQs(unsigned char, bool)>
c001bdb5:	83 c4 0c             	add    esp,0xc
c001bdb8:	6a 00                	push   0x0
c001bdba:	6a 01                	push   0x1
c001bdbc:	53                   	push   ebx
c001bdbd:	e8 3a fc ff ff       	call   c001b9fc <IDE::enableIRQs(unsigned char, bool)>
c001bdc2:	83 c4 10             	add    esp,0x10
c001bdc5:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001bdcc:	74 34                	je     c001be02 <IDE::open(int, int, void*)+0x3bc>
c001bdce:	83 ec 0c             	sub    esp,0xc
c001bdd1:	53                   	push   ebx
c001bdd2:	6a 01                	push   0x1
c001bdd4:	68 c4 b9 01 c0       	push   0xc001b9c4
c001bdd9:	6a 0e                	push   0xe
c001bddb:	53                   	push   ebx
c001bddc:	e8 05 08 ff ff       	call   c000c5e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bde1:	83 c4 14             	add    esp,0x14
c001bde4:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bdea:	53                   	push   ebx
c001bdeb:	6a 01                	push   0x1
c001bded:	68 e0 b9 01 c0       	push   0xc001b9e0
c001bdf2:	6a 0f                	push   0xf
c001bdf4:	53                   	push   ebx
c001bdf5:	e8 ec 07 ff ff       	call   c000c5e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bdfa:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001be00:	eb 38                	jmp    c001be3a <IDE::open(int, int, void*)+0x3f4>
c001be02:	83 ec 0c             	sub    esp,0xc
c001be05:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001be0f:	53                   	push   ebx
c001be10:	6a 00                	push   0x0
c001be12:	68 c4 b9 01 c0       	push   0xc001b9c4
c001be17:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001be1d:	53                   	push   ebx
c001be1e:	e8 c3 07 ff ff       	call   c000c5e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001be23:	83 c4 14             	add    esp,0x14
c001be26:	53                   	push   ebx
c001be27:	6a 00                	push   0x0
c001be29:	68 e0 b9 01 c0       	push   0xc001b9e0
c001be2e:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001be34:	53                   	push   ebx
c001be35:	e8 ac 07 ff ff       	call   c000c5e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001be3a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be3c:	83 c4 20             	add    esp,0x20
c001be3f:	83 ec 0c             	sub    esp,0xc
c001be42:	53                   	push   ebx
c001be43:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001be46:	83 c4 0c             	add    esp,0xc
c001be49:	6a 07                	push   0x7
c001be4b:	6a 00                	push   0x0
c001be4d:	53                   	push   ebx
c001be4e:	e8 61 fa ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001be53:	83 c4 0c             	add    esp,0xc
c001be56:	6a 07                	push   0x7
c001be58:	6a 01                	push   0x1
c001be5a:	53                   	push   ebx
c001be5b:	e8 54 fa ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001be60:	83 c4 0c             	add    esp,0xc
c001be63:	6a 01                	push   0x1
c001be65:	6a 00                	push   0x0
c001be67:	53                   	push   ebx
c001be68:	e8 8f fb ff ff       	call   c001b9fc <IDE::enableIRQs(unsigned char, bool)>
c001be6d:	83 c4 0c             	add    esp,0xc
c001be70:	6a 01                	push   0x1
c001be72:	6a 01                	push   0x1
c001be74:	53                   	push   ebx
c001be75:	e8 82 fb ff ff       	call   c001b9fc <IDE::enableIRQs(unsigned char, bool)>
c001be7a:	83 c4 2c             	add    esp,0x2c
c001be7d:	31 c0                	xor    eax,eax
c001be7f:	5b                   	pop    ebx
c001be80:	5e                   	pop    esi
c001be81:	5f                   	pop    edi
c001be82:	5d                   	pop    ebp
c001be83:	c3                   	ret    

c001be84 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001be84:	55                   	push   ebp
c001be85:	57                   	push   edi
c001be86:	56                   	push   esi
c001be87:	53                   	push   ebx
c001be88:	83 ec 1c             	sub    esp,0x1c
c001be8b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001be8f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001be93:	8d 42 f8             	lea    eax,[edx-0x8]
c001be96:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001be9a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001be9e:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001bea2:	3c 03                	cmp    al,0x3
c001bea4:	77 5a                	ja     c001bf00 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001bea6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001beaa:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001beae:	0f b6 db             	movzx  ebx,bl
c001beb1:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001beb4:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001beb9:	0c 80                	or     al,0x80
c001bebb:	50                   	push   eax
c001bebc:	6a 0c                	push   0xc
c001bebe:	53                   	push   ebx
c001bebf:	56                   	push   esi
c001bec0:	e8 2f f9 ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bec5:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001beca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bece:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bed2:	0f b6 d2             	movzx  edx,dl
c001bed5:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001bed9:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001bedb:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bee0:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001bee4:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001bee8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001beec:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bef4:	83 c4 2c             	add    esp,0x2c
c001bef7:	5b                   	pop    ebx
c001bef8:	5e                   	pop    esi
c001bef9:	5f                   	pop    edi
c001befa:	5d                   	pop    ebp
c001befb:	e9 f4 f8 ff ff       	jmp    c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf00:	0f b6 c2             	movzx  eax,dl
c001bf03:	83 f8 07             	cmp    eax,0x7
c001bf06:	77 12                	ja     c001bf1a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001bf08:	0f b6 c2             	movzx  eax,dl
c001bf0b:	0f b6 db             	movzx  ebx,bl
c001bf0e:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001bf16:	01 c2                	add    edx,eax
c001bf18:	eb 2f                	jmp    c001bf49 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001bf1a:	83 f8 0d             	cmp    eax,0xd
c001bf1d:	77 13                	ja     c001bf32 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001bf1f:	0f b6 db             	movzx  ebx,bl
c001bf22:	0f b6 d2             	movzx  edx,dl
c001bf25:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001bf2c:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bf30:	eb 17                	jmp    c001bf49 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001bf32:	83 f8 15             	cmp    eax,0x15
c001bf35:	77 14                	ja     c001bf4b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001bf37:	0f b6 db             	movzx  ebx,bl
c001bf3a:	0f b6 d2             	movzx  edx,dl
c001bf3d:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001bf45:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bf49:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001bf4b:	83 c4 1c             	add    esp,0x1c
c001bf4e:	5b                   	pop    ebx
c001bf4f:	5e                   	pop    esi
c001bf50:	5f                   	pop    edi
c001bf51:	5d                   	pop    ebp
c001bf52:	c3                   	ret    
c001bf53:	90                   	nop

c001bf54 <IDE::detect()>:
c001bf54:	55                   	push   ebp
c001bf55:	57                   	push   edi
c001bf56:	56                   	push   esi
c001bf57:	53                   	push   ebx
c001bf58:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001bf5e:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001bf65:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001bf6c:	0f 85 a4 02 00 00    	jne    c001c216 <IDE::detect()+0x2c2>
c001bf72:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001bf79:	31 f6                	xor    esi,esi
c001bf7b:	31 ed                	xor    ebp,ebp
c001bf7d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001bf85:	89 e8                	mov    eax,ebp
c001bf87:	c1 e0 06             	shl    eax,0x6
c001bf8a:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001bf92:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001bf96:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001bf9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf9e:	c1 e0 04             	shl    eax,0x4
c001bfa1:	83 c8 a0             	or     eax,0xffffffa0
c001bfa4:	0f b6 c0             	movzx  eax,al
c001bfa7:	50                   	push   eax
c001bfa8:	6a 06                	push   0x6
c001bfaa:	56                   	push   esi
c001bfab:	53                   	push   ebx
c001bfac:	e8 43 f8 ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bfb1:	83 c4 0c             	add    esp,0xc
c001bfb4:	6a 0c                	push   0xc
c001bfb6:	56                   	push   esi
c001bfb7:	53                   	push   ebx
c001bfb8:	e8 f7 f8 ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001bfbd:	83 c4 0c             	add    esp,0xc
c001bfc0:	6a 0c                	push   0xc
c001bfc2:	56                   	push   esi
c001bfc3:	53                   	push   ebx
c001bfc4:	e8 eb f8 ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001bfc9:	83 c4 0c             	add    esp,0xc
c001bfcc:	6a 0c                	push   0xc
c001bfce:	56                   	push   esi
c001bfcf:	53                   	push   ebx
c001bfd0:	e8 df f8 ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001bfd5:	83 c4 0c             	add    esp,0xc
c001bfd8:	6a 0c                	push   0xc
c001bfda:	56                   	push   esi
c001bfdb:	53                   	push   ebx
c001bfdc:	e8 d3 f8 ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001bfe1:	68 ec 00 00 00       	push   0xec
c001bfe6:	6a 07                	push   0x7
c001bfe8:	56                   	push   esi
c001bfe9:	53                   	push   ebx
c001bfea:	e8 05 f8 ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bfef:	83 c4 1c             	add    esp,0x1c
c001bff2:	6a 0c                	push   0xc
c001bff4:	56                   	push   esi
c001bff5:	53                   	push   ebx
c001bff6:	e8 b9 f8 ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001bffb:	83 c4 0c             	add    esp,0xc
c001bffe:	6a 0c                	push   0xc
c001c000:	56                   	push   esi
c001c001:	53                   	push   ebx
c001c002:	e8 ad f8 ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001c007:	83 c4 0c             	add    esp,0xc
c001c00a:	6a 0c                	push   0xc
c001c00c:	56                   	push   esi
c001c00d:	53                   	push   ebx
c001c00e:	e8 a1 f8 ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001c013:	83 c4 0c             	add    esp,0xc
c001c016:	6a 0c                	push   0xc
c001c018:	56                   	push   esi
c001c019:	53                   	push   ebx
c001c01a:	e8 95 f8 ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001c01f:	83 c4 0c             	add    esp,0xc
c001c022:	6a 0c                	push   0xc
c001c024:	56                   	push   esi
c001c025:	53                   	push   ebx
c001c026:	e8 89 f8 ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001c02b:	83 c4 10             	add    esp,0x10
c001c02e:	84 c0                	test   al,al
c001c030:	0f 84 60 01 00 00    	je     c001c196 <IDE::detect()+0x242>
c001c036:	31 ff                	xor    edi,edi
c001c038:	50                   	push   eax
c001c039:	6a 0c                	push   0xc
c001c03b:	56                   	push   esi
c001c03c:	53                   	push   ebx
c001c03d:	e8 72 f8 ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001c042:	83 c4 10             	add    esp,0x10
c001c045:	a8 01                	test   al,0x1
c001c047:	0f 85 6a 01 00 00    	jne    c001c1b7 <IDE::detect()+0x263>
c001c04d:	a8 80                	test   al,0x80
c001c04f:	75 04                	jne    c001c055 <IDE::detect()+0x101>
c001c051:	a8 08                	test   al,0x8
c001c053:	75 23                	jne    c001c078 <IDE::detect()+0x124>
c001c055:	47                   	inc    edi
c001c056:	81 ff 17 01 00 00    	cmp    edi,0x117
c001c05c:	7e da                	jle    c001c038 <IDE::detect()+0xe4>
c001c05e:	83 ec 0c             	sub    esp,0xc
c001c061:	6a 32                	push   0x32
c001c063:	e8 f0 9d ff ff       	call   c0015e58 <milliTenthSleep(unsigned int)>
c001c068:	83 c4 10             	add    esp,0x10
c001c06b:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001c071:	75 c5                	jne    c001c038 <IDE::detect()+0xe4>
c001c073:	e9 3f 01 00 00       	jmp    c001c1b7 <IDE::detect()+0x263>
c001c078:	31 c9                	xor    ecx,ecx
c001c07a:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c07e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001c082:	83 ec 0c             	sub    esp,0xc
c001c085:	68 80 00 00 00       	push   0x80
c001c08a:	57                   	push   edi
c001c08b:	6a 00                	push   0x0
c001c08d:	56                   	push   esi
c001c08e:	53                   	push   ebx
c001c08f:	e8 f0 fd ff ff       	call   c001be84 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c094:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c099:	89 e8                	mov    eax,ebp
c001c09b:	89 d1                	mov    ecx,edx
c001c09d:	c1 e0 06             	shl    eax,0x6
c001c0a0:	01 d8                	add    eax,ebx
c001c0a2:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c0a9:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c0b0:	89 f2                	mov    edx,esi
c001c0b2:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c0b8:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c0bc:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c0c2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c0c6:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c0cd:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c0d5:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c0dc:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c0e4:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c0ea:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c0f1:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c0f7:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c0fb:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c0ff:	83 c4 20             	add    esp,0x20
c001c102:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c105:	83 c0 02             	add    eax,0x2
c001c108:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c10e:	83 c7 02             	add    edi,0x2
c001c111:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c114:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c11a:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c11e:	75 e2                	jne    c001c102 <IDE::detect()+0x1ae>
c001c120:	89 e8                	mov    eax,ebp
c001c122:	c1 e0 06             	shl    eax,0x6
c001c125:	01 d8                	add    eax,ebx
c001c127:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c12e:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c135:	c1 ea 09             	shr    edx,0x9
c001c138:	83 e2 01             	and    edx,0x1
c001c13b:	80 e1 01             	and    cl,0x1
c001c13e:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c144:	75 22                	jne    c001c168 <IDE::detect()+0x214>
c001c146:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c14d:	74 46                	je     c001c195 <IDE::detect()+0x241>
c001c14f:	83 ec 0c             	sub    esp,0xc
c001c152:	68 7c 01 00 00       	push   0x17c
c001c157:	e8 5a b9 fe ff       	call   c0007ab6 <malloc>
c001c15c:	89 c7                	mov    edi,eax
c001c15e:	89 04 24             	mov    DWORD PTR [esp],eax
c001c161:	e8 1a 05 00 00       	call   c001c680 <ATA::ATA()>
c001c166:	eb 17                	jmp    c001c17f <IDE::detect()+0x22b>
c001c168:	83 ec 0c             	sub    esp,0xc
c001c16b:	68 84 01 00 00       	push   0x184
c001c170:	e8 41 b9 fe ff       	call   c0007ab6 <malloc>
c001c175:	89 c7                	mov    edi,eax
c001c177:	89 04 24             	mov    DWORD PTR [esp],eax
c001c17a:	e8 45 0e 00 00       	call   c001cfc4 <ATAPI::ATAPI()>
c001c17f:	5a                   	pop    edx
c001c180:	59                   	pop    ecx
c001c181:	57                   	push   edi
c001c182:	53                   	push   ebx
c001c183:	e8 b2 04 ff ff       	call   c000c63a <Device::addChild(Device*)>
c001c188:	8b 07                	mov    eax,DWORD PTR [edi]
c001c18a:	53                   	push   ebx
c001c18b:	55                   	push   ebp
c001c18c:	6a 00                	push   0x0
c001c18e:	57                   	push   edi
c001c18f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c192:	83 c4 20             	add    esp,0x20
c001c195:	45                   	inc    ebp
c001c196:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c19b:	74 0d                	je     c001c1aa <IDE::detect()+0x256>
c001c19d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c1a5:	e9 db fd ff ff       	jmp    c001bf85 <IDE::detect()+0x31>
c001c1aa:	4e                   	dec    esi
c001c1ab:	74 69                	je     c001c216 <IDE::detect()+0x2c2>
c001c1ad:	be 01 00 00 00       	mov    esi,0x1
c001c1b2:	e9 c6 fd ff ff       	jmp    c001bf7d <IDE::detect()+0x29>
c001c1b7:	50                   	push   eax
c001c1b8:	6a 04                	push   0x4
c001c1ba:	56                   	push   esi
c001c1bb:	53                   	push   ebx
c001c1bc:	e8 f3 f6 ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001c1c1:	83 c4 0c             	add    esp,0xc
c001c1c4:	89 c7                	mov    edi,eax
c001c1c6:	6a 05                	push   0x5
c001c1c8:	56                   	push   esi
c001c1c9:	53                   	push   ebx
c001c1ca:	e8 e5 f6 ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001c1cf:	83 c4 10             	add    esp,0x10
c001c1d2:	89 f9                	mov    ecx,edi
c001c1d4:	0f b6 c0             	movzx  eax,al
c001c1d7:	0f b6 f9             	movzx  edi,cl
c001c1da:	83 ff 14             	cmp    edi,0x14
c001c1dd:	75 07                	jne    c001c1e6 <IDE::detect()+0x292>
c001c1df:	3d eb 00 00 00       	cmp    eax,0xeb
c001c1e4:	eb 0a                	jmp    c001c1f0 <IDE::detect()+0x29c>
c001c1e6:	3d 96 00 00 00       	cmp    eax,0x96
c001c1eb:	75 a9                	jne    c001c196 <IDE::detect()+0x242>
c001c1ed:	83 ff 69             	cmp    edi,0x69
c001c1f0:	75 a4                	jne    c001c196 <IDE::detect()+0x242>
c001c1f2:	68 a1 00 00 00       	push   0xa1
c001c1f7:	6a 07                	push   0x7
c001c1f9:	56                   	push   esi
c001c1fa:	53                   	push   ebx
c001c1fb:	e8 f4 f5 ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c200:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c207:	e8 4c 9c ff ff       	call   c0015e58 <milliTenthSleep(unsigned int)>
c001c20c:	83 c4 10             	add    esp,0x10
c001c20f:	b1 01                	mov    cl,0x1
c001c211:	e9 64 fe ff ff       	jmp    c001c07a <IDE::detect()+0x126>
c001c216:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c21c:	5b                   	pop    ebx
c001c21d:	5e                   	pop    esi
c001c21e:	5f                   	pop    edi
c001c21f:	5d                   	pop    ebp
c001c220:	c3                   	ret    
c001c221:	90                   	nop

c001c222 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c222:	55                   	push   ebp
c001c223:	57                   	push   edi
c001c224:	56                   	push   esi
c001c225:	53                   	push   ebx
c001c226:	83 ec 1c             	sub    esp,0x1c
c001c229:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c22d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c231:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c235:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c239:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c23d:	88 c3                	mov    bl,al
c001c23f:	25 ff 00 00 00       	and    eax,0xff
c001c244:	0f 84 88 00 00 00    	je     c001c2d2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c24a:	83 ec 0c             	sub    esp,0xc
c001c24d:	89 c7                	mov    edi,eax
c001c24f:	68 ab 2b 02 c0       	push   0xc0022bab
c001c254:	e8 ec e6 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001c259:	83 c4 10             	add    esp,0x10
c001c25c:	83 ff 01             	cmp    edi,0x1
c001c25f:	74 6b                	je     c001c2cc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c261:	83 ff 02             	cmp    edi,0x2
c001c264:	75 58                	jne    c001c2be <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c266:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c26b:	01 ff                	add    edi,edi
c001c26d:	50                   	push   eax
c001c26e:	09 fe                	or     esi,edi
c001c270:	6a 01                	push   0x1
c001c272:	89 f0                	mov    eax,esi
c001c274:	0f b6 f0             	movzx  esi,al
c001c277:	c1 e6 06             	shl    esi,0x6
c001c27a:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c282:	50                   	push   eax
c001c283:	55                   	push   ebp
c001c284:	e8 2b f6 ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001c289:	83 c4 10             	add    esp,0x10
c001c28c:	a8 01                	test   al,0x1
c001c28e:	74 02                	je     c001c292 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c290:	b3 07                	mov    bl,0x7
c001c292:	a8 02                	test   al,0x2
c001c294:	74 02                	je     c001c298 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c296:	b3 03                	mov    bl,0x3
c001c298:	a8 04                	test   al,0x4
c001c29a:	74 02                	je     c001c29e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c29c:	b3 14                	mov    bl,0x14
c001c29e:	a8 08                	test   al,0x8
c001c2a0:	74 02                	je     c001c2a4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c2a2:	b3 03                	mov    bl,0x3
c001c2a4:	a8 10                	test   al,0x10
c001c2a6:	74 02                	je     c001c2aa <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c2a8:	b3 15                	mov    bl,0x15
c001c2aa:	a8 20                	test   al,0x20
c001c2ac:	74 02                	je     c001c2b0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c2ae:	b3 03                	mov    bl,0x3
c001c2b0:	a8 40                	test   al,0x40
c001c2b2:	74 02                	je     c001c2b6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c2b4:	b3 16                	mov    bl,0x16
c001c2b6:	a8 80                	test   al,0x80
c001c2b8:	74 18                	je     c001c2d2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c2ba:	b3 0d                	mov    bl,0xd
c001c2bc:	eb 14                	jmp    c001c2d2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c2be:	83 ff 03             	cmp    edi,0x3
c001c2c1:	74 0d                	je     c001c2d0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c2c3:	83 ff 04             	cmp    edi,0x4
c001c2c6:	75 0a                	jne    c001c2d2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c2c8:	b3 08                	mov    bl,0x8
c001c2ca:	eb 06                	jmp    c001c2d2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c2cc:	b3 13                	mov    bl,0x13
c001c2ce:	eb 02                	jmp    c001c2d2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c2d0:	b3 17                	mov    bl,0x17
c001c2d2:	83 c4 1c             	add    esp,0x1c
c001c2d5:	88 d8                	mov    al,bl
c001c2d7:	5b                   	pop    ebx
c001c2d8:	5e                   	pop    esi
c001c2d9:	5f                   	pop    edi
c001c2da:	5d                   	pop    ebp
c001c2db:	c3                   	ret    

c001c2dc <IDE::polling(unsigned char, unsigned int)>:
c001c2dc:	57                   	push   edi
c001c2dd:	56                   	push   esi
c001c2de:	53                   	push   ebx
c001c2df:	bb 04 00 00 00       	mov    ebx,0x4
c001c2e4:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c2e8:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c2ed:	52                   	push   edx
c001c2ee:	6a 0c                	push   0xc
c001c2f0:	56                   	push   esi
c001c2f1:	57                   	push   edi
c001c2f2:	e8 bd f5 ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001c2f7:	83 c4 10             	add    esp,0x10
c001c2fa:	4b                   	dec    ebx
c001c2fb:	75 f0                	jne    c001c2ed <IDE::polling(unsigned char, unsigned int)+0x11>
c001c2fd:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c302:	50                   	push   eax
c001c303:	6a 0c                	push   0xc
c001c305:	56                   	push   esi
c001c306:	57                   	push   edi
c001c307:	e8 a8 f5 ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001c30c:	83 c4 10             	add    esp,0x10
c001c30f:	a8 01                	test   al,0x1
c001c311:	75 17                	jne    c001c32a <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c313:	a8 20                	test   al,0x20
c001c315:	75 0f                	jne    c001c326 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c317:	4b                   	dec    ebx
c001c318:	74 10                	je     c001c32a <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c31a:	a8 80                	test   al,0x80
c001c31c:	75 e4                	jne    c001c302 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c31e:	a8 08                	test   al,0x8
c001c320:	74 e0                	je     c001c302 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c322:	31 c0                	xor    eax,eax
c001c324:	eb 06                	jmp    c001c32c <IDE::polling(unsigned char, unsigned int)+0x50>
c001c326:	b0 01                	mov    al,0x1
c001c328:	eb 02                	jmp    c001c32c <IDE::polling(unsigned char, unsigned int)+0x50>
c001c32a:	b0 02                	mov    al,0x2
c001c32c:	5b                   	pop    ebx
c001c32d:	5e                   	pop    esi
c001c32e:	5f                   	pop    edi
c001c32f:	c3                   	ret    

c001c330 <SATABus::close(int, int, void*)>:
c001c330:	31 c0                	xor    eax,eax
c001c332:	c3                   	ret    
c001c333:	90                   	nop

c001c334 <SATABus::detect()>:
c001c334:	c3                   	ret    
c001c335:	90                   	nop

c001c336 <SATABus::SATABus()>:
c001c336:	83 ec 0c             	sub    esp,0xc
c001c339:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c33d:	83 ec 08             	sub    esp,0x8
c001c340:	68 e4 2b 02 c0       	push   0xc0022be4
c001c345:	50                   	push   eax
c001c346:	e8 31 06 ff ff       	call   c000c97c <HardDiskController::HardDiskController(char const*)>
c001c34b:	83 c4 10             	add    esp,0x10
c001c34e:	ba 10 2c 02 c0       	mov    edx,0xc0022c10
c001c353:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c357:	89 10                	mov    DWORD PTR [eax],edx
c001c359:	83 ec 0c             	sub    esp,0xc
c001c35c:	6a 50                	push   0x50
c001c35e:	e8 2b bb fe ff       	call   c0007e8e <Phys::allocateContiguousPages(int)>
c001c363:	83 c4 10             	add    esp,0x10
c001c366:	89 c2                	mov    edx,eax
c001c368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c36c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c372:	83 ec 0c             	sub    esp,0xc
c001c375:	6a 50                	push   0x50
c001c377:	e8 91 d2 fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001c37c:	83 c4 10             	add    esp,0x10
c001c37f:	89 c2                	mov    edx,eax
c001c381:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c385:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c38b:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c001c390:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c394:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c39a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c39e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c3a4:	83 ec 0c             	sub    esp,0xc
c001c3a7:	6a 03                	push   0x3
c001c3a9:	6a 50                	push   0x50
c001c3ab:	51                   	push   ecx
c001c3ac:	52                   	push   edx
c001c3ad:	50                   	push   eax
c001c3ae:	e8 67 db fe ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c3b3:	83 c4 20             	add    esp,0x20
c001c3b6:	90                   	nop
c001c3b7:	83 c4 0c             	add    esp,0xc
c001c3ba:	c3                   	ret    
c001c3bb:	90                   	nop

c001c3bc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c3bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c3c0:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c3c3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c3c6:	09 c2                	or     edx,eax
c001c3c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3cc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c3d2:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c3d4:	31 c0                	xor    eax,eax
c001c3d6:	c1 e9 08             	shr    ecx,0x8
c001c3d9:	83 e1 0f             	and    ecx,0xf
c001c3dc:	39 c8                	cmp    eax,ecx
c001c3de:	74 0a                	je     c001c3ea <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001c3e0:	f6 c2 01             	test   dl,0x1
c001c3e3:	74 08                	je     c001c3ed <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001c3e5:	d1 ea                	shr    edx,1
c001c3e7:	40                   	inc    eax
c001c3e8:	eb f2                	jmp    c001c3dc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001c3ea:	83 c8 ff             	or     eax,0xffffffff
c001c3ed:	c3                   	ret    

c001c3ee <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001c3ee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c3f2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001c3f5:	89 c2                	mov    edx,eax
c001c3f7:	c1 ea 08             	shr    edx,0x8
c001c3fa:	83 e2 0f             	and    edx,0xf
c001c3fd:	4a                   	dec    edx
c001c3fe:	75 32                	jne    c001c432 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c400:	83 e0 0f             	and    eax,0xf
c001c403:	83 f8 03             	cmp    eax,0x3
c001c406:	75 2a                	jne    c001c432 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c408:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001c40b:	b8 02 00 00 00       	mov    eax,0x2
c001c410:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001c416:	74 1c                	je     c001c434 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c418:	b8 04 00 00 00       	mov    eax,0x4
c001c41d:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001c423:	74 0f                	je     c001c434 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c425:	31 c0                	xor    eax,eax
c001c427:	83 fa 03             	cmp    edx,0x3
c001c42a:	0f 94 c0             	sete   al
c001c42d:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001c431:	c3                   	ret    
c001c432:	31 c0                	xor    eax,eax
c001c434:	c3                   	ret    
c001c435:	90                   	nop

c001c436 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001c436:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c43a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c43d:	0f ba e2 0f          	bt     edx,0xf
c001c441:	72 f7                	jb     c001c43a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001c443:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c446:	83 ca 10             	or     edx,0x10
c001c449:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c44c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c44f:	83 ca 01             	or     edx,0x1
c001c452:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c455:	c3                   	ret    

c001c456 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001c456:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c45a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c45d:	83 e2 fe             	and    edx,0xfffffffe
c001c460:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c463:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c466:	83 e2 ef             	and    edx,0xffffffef
c001c469:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c46c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c46f:	0f ba e2 0e          	bt     edx,0xe
c001c473:	72 f7                	jb     c001c46c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c475:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c478:	0f ba e2 0f          	bt     edx,0xf
c001c47c:	72 ee                	jb     c001c46c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c47e:	c3                   	ret    
c001c47f:	90                   	nop

c001c480 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001c480:	55                   	push   ebp
c001c481:	57                   	push   edi
c001c482:	56                   	push   esi
c001c483:	53                   	push   ebx
c001c484:	83 ec 1c             	sub    esp,0x1c
c001c487:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c48b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c48f:	53                   	push   ebx
c001c490:	56                   	push   esi
c001c491:	e8 c0 ff ff ff       	call   c001c456 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001c496:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c49a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001c4a0:	83 ec 0c             	sub    esp,0xc
c001c4a3:	c1 e5 0a             	shl    ebp,0xa
c001c4a6:	01 e8                	add    eax,ebp
c001c4a8:	89 03                	mov    DWORD PTR [ebx],eax
c001c4aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c4ac:	68 00 04 00 00       	push   0x400
c001c4b1:	6a 00                	push   0x0
c001c4b3:	50                   	push   eax
c001c4b4:	e8 37 40 fe ff       	call   c00004f0 <memset>
c001c4b9:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001c4bf:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001c4c3:	01 e8                	add    eax,ebp
c001c4c5:	83 c4 1c             	add    esp,0x1c
c001c4c8:	89 03                	mov    DWORD PTR [ebx],eax
c001c4ca:	c1 e2 08             	shl    edx,0x8
c001c4cd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c4d4:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001c4da:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001c4e0:	01 f8                	add    eax,edi
c001c4e2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c4e5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c4e8:	68 00 01 00 00       	push   0x100
c001c4ed:	6a 00                	push   0x0
c001c4ef:	50                   	push   eax
c001c4f0:	e8 fb 3f fe ff       	call   c00004f0 <memset>
c001c4f5:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001c4fb:	01 fa                	add    edx,edi
c001c4fd:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c501:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001c504:	c1 e7 0d             	shl    edi,0xd
c001c507:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c50e:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001c514:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001c51a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c51e:	31 ff                	xor    edi,edi
c001c520:	83 c4 10             	add    esp,0x10
c001c523:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001c529:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c52d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001c533:	83 c5 20             	add    ebp,0x20
c001c536:	01 f8                	add    eax,edi
c001c538:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001c53b:	52                   	push   edx
c001c53c:	68 00 01 00 00       	push   0x100
c001c541:	6a 00                	push   0x0
c001c543:	50                   	push   eax
c001c544:	e8 a7 3f fe ff       	call   c00004f0 <memset>
c001c549:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c54d:	83 c4 10             	add    esp,0x10
c001c550:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001c556:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001c55d:	01 f8                	add    eax,edi
c001c55f:	81 c7 00 01 00 00    	add    edi,0x100
c001c565:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001c568:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001c56e:	75 b3                	jne    c001c523 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001c570:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c577:	50                   	push   eax
c001c578:	50                   	push   eax
c001c579:	53                   	push   ebx
c001c57a:	56                   	push   esi
c001c57b:	e8 b6 fe ff ff       	call   c001c436 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001c580:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c587:	83 c4 2c             	add    esp,0x2c
c001c58a:	5b                   	pop    ebx
c001c58b:	5e                   	pop    esi
c001c58c:	5f                   	pop    edi
c001c58d:	5d                   	pop    ebp
c001c58e:	c3                   	ret    
c001c58f:	90                   	nop

c001c590 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001c590:	55                   	push   ebp
c001c591:	57                   	push   edi
c001c592:	56                   	push   esi
c001c593:	53                   	push   ebx
c001c594:	31 db                	xor    ebx,ebx
c001c596:	83 ec 0c             	sub    esp,0xc
c001c599:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c59d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001c5a1:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001c5a4:	f7 c7 01 00 00 00    	test   edi,0x1
c001c5aa:	74 7a                	je     c001c626 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c5ac:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c5b0:	89 d8                	mov    eax,ebx
c001c5b2:	c1 e0 07             	shl    eax,0x7
c001c5b5:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001c5bc:	55                   	push   ebp
c001c5bd:	56                   	push   esi
c001c5be:	e8 2b fe ff ff       	call   c001c3ee <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001c5c3:	5a                   	pop    edx
c001c5c4:	83 f8 01             	cmp    eax,0x1
c001c5c7:	59                   	pop    ecx
c001c5c8:	75 21                	jne    c001c5eb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001c5ca:	50                   	push   eax
c001c5cb:	53                   	push   ebx
c001c5cc:	55                   	push   ebp
c001c5cd:	56                   	push   esi
c001c5ce:	e8 ad fe ff ff       	call   c001c480 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c5d3:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001c5da:	e8 d7 b4 fe ff       	call   c0007ab6 <malloc>
c001c5df:	89 c5                	mov    ebp,eax
c001c5e1:	89 04 24             	mov    DWORD PTR [esp],eax
c001c5e4:	e8 99 10 00 00       	call   c001d682 <SATA::SATA()>
c001c5e9:	eb 24                	jmp    c001c60f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001c5eb:	83 f8 04             	cmp    eax,0x4
c001c5ee:	75 36                	jne    c001c626 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c5f0:	51                   	push   ecx
c001c5f1:	53                   	push   ebx
c001c5f2:	55                   	push   ebp
c001c5f3:	56                   	push   esi
c001c5f4:	e8 87 fe ff ff       	call   c001c480 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c5f9:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001c600:	e8 b1 b4 fe ff       	call   c0007ab6 <malloc>
c001c605:	89 c5                	mov    ebp,eax
c001c607:	89 04 24             	mov    DWORD PTR [esp],eax
c001c60a:	e8 d5 17 00 00       	call   c001dde4 <SATAPI::SATAPI()>
c001c60f:	58                   	pop    eax
c001c610:	5a                   	pop    edx
c001c611:	55                   	push   ebp
c001c612:	56                   	push   esi
c001c613:	e8 22 00 ff ff       	call   c000c63a <Device::addChild(Device*)>
c001c618:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001c61b:	56                   	push   esi
c001c61c:	6a 00                	push   0x0
c001c61e:	53                   	push   ebx
c001c61f:	55                   	push   ebp
c001c620:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c623:	83 c4 20             	add    esp,0x20
c001c626:	d1 ef                	shr    edi,1
c001c628:	43                   	inc    ebx
c001c629:	83 fb 20             	cmp    ebx,0x20
c001c62c:	0f 85 72 ff ff ff    	jne    c001c5a4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001c632:	83 c4 0c             	add    esp,0xc
c001c635:	5b                   	pop    ebx
c001c636:	5e                   	pop    esi
c001c637:	5f                   	pop    edi
c001c638:	5d                   	pop    ebp
c001c639:	c3                   	ret    

c001c63a <SATABus::open(int, int, void*)>:
c001c63a:	83 ec 14             	sub    esp,0x14
c001c63d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c641:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001c647:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001c64d:	52                   	push   edx
c001c64e:	50                   	push   eax
c001c64f:	e8 3c ff ff ff       	call   c001c590 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001c654:	31 c0                	xor    eax,eax
c001c656:	83 c4 1c             	add    esp,0x1c
c001c659:	c3                   	ret    

c001c65a <ATA::close(int, int, void*)>:
c001c65a:	83 ec 0c             	sub    esp,0xc
c001c65d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c661:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c667:	85 c0                	test   eax,eax
c001c669:	74 0c                	je     c001c677 <ATA::close(int, int, void*)+0x1d>
c001c66b:	83 ec 0c             	sub    esp,0xc
c001c66e:	8b 10                	mov    edx,DWORD PTR [eax]
c001c670:	50                   	push   eax
c001c671:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c674:	83 c4 10             	add    esp,0x10
c001c677:	31 c0                	xor    eax,eax
c001c679:	83 c4 0c             	add    esp,0xc
c001c67c:	c3                   	ret    
c001c67d:	90                   	nop

c001c67e <ATA::powerSaving(PowerSavingLevel)>:
c001c67e:	c3                   	ret    
c001c67f:	90                   	nop

c001c680 <ATA::ATA()>:
c001c680:	83 ec 0c             	sub    esp,0xc
c001c683:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c687:	83 ec 04             	sub    esp,0x4
c001c68a:	68 00 02 00 00       	push   0x200
c001c68f:	68 dd 2c 02 c0       	push   0xc0022cdd
c001c694:	50                   	push   eax
c001c695:	e8 6c 03 ff ff       	call   c000ca06 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c69a:	83 c4 10             	add    esp,0x10
c001c69d:	ba 50 2c 02 c0       	mov    edx,0xc0022c50
c001c6a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6a6:	89 10                	mov    DWORD PTR [eax],edx
c001c6a8:	90                   	nop
c001c6a9:	83 c4 0c             	add    esp,0xc
c001c6ac:	c3                   	ret    
c001c6ad:	90                   	nop

c001c6ae <ATA::flush(bool)>:
c001c6ae:	53                   	push   ebx
c001c6af:	83 ec 08             	sub    esp,0x8
c001c6b2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c6b6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c6bb:	83 f8 01             	cmp    eax,0x1
c001c6be:	19 c0                	sbb    eax,eax
c001c6c0:	83 e0 fd             	and    eax,0xfffffffd
c001c6c3:	05 ea 00 00 00       	add    eax,0xea
c001c6c8:	50                   	push   eax
c001c6c9:	6a 07                	push   0x7
c001c6cb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c6d2:	50                   	push   eax
c001c6d3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c6d9:	e8 16 f1 ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c6de:	83 c4 0c             	add    esp,0xc
c001c6e1:	6a 00                	push   0x0
c001c6e3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c6ea:	50                   	push   eax
c001c6eb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c6f1:	e8 e6 fb ff ff       	call   c001c2dc <IDE::polling(unsigned char, unsigned int)>
c001c6f6:	83 c4 18             	add    esp,0x18
c001c6f9:	5b                   	pop    ebx
c001c6fa:	c3                   	ret    
c001c6fb:	90                   	nop

c001c6fc <ATA::readyForCommand()>:
c001c6fc:	56                   	push   esi
c001c6fd:	53                   	push   ebx
c001c6fe:	53                   	push   ebx
c001c6ff:	31 db                	xor    ebx,ebx
c001c701:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c705:	51                   	push   ecx
c001c706:	6a 0c                	push   0xc
c001c708:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c70f:	50                   	push   eax
c001c710:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c716:	e8 99 f1 ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001c71b:	83 c4 10             	add    esp,0x10
c001c71e:	a8 88                	test   al,0x88
c001c720:	74 1f                	je     c001c741 <ATA::readyForCommand()+0x45>
c001c722:	43                   	inc    ebx
c001c723:	83 fb 63             	cmp    ebx,0x63
c001c726:	7e dd                	jle    c001c705 <ATA::readyForCommand()+0x9>
c001c728:	83 ec 0c             	sub    esp,0xc
c001c72b:	6a 0a                	push   0xa
c001c72d:	e8 26 97 ff ff       	call   c0015e58 <milliTenthSleep(unsigned int)>
c001c732:	83 c4 10             	add    esp,0x10
c001c735:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c73b:	75 c8                	jne    c001c705 <ATA::readyForCommand()+0x9>
c001c73d:	31 c0                	xor    eax,eax
c001c73f:	eb 02                	jmp    c001c743 <ATA::readyForCommand()+0x47>
c001c741:	b0 01                	mov    al,0x1
c001c743:	5a                   	pop    edx
c001c744:	5b                   	pop    ebx
c001c745:	5e                   	pop    esi
c001c746:	c3                   	ret    
c001c747:	90                   	nop

c001c748 <ATA::access(unsigned long long, int, void*, bool)>:
c001c748:	55                   	push   ebp
c001c749:	57                   	push   edi
c001c74a:	56                   	push   esi
c001c74b:	53                   	push   ebx
c001c74c:	83 ec 2c             	sub    esp,0x2c
c001c74f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c753:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c757:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c75b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c75f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c763:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c767:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c76b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c771:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c775:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c77b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c77f:	c1 e0 06             	shl    eax,0x6
c001c782:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c78a:	74 5d                	je     c001c7e9 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001c78c:	89 fa                	mov    edx,edi
c001c78e:	89 f0                	mov    eax,esi
c001c790:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001c794:	c1 ea 1c             	shr    edx,0x1c
c001c797:	89 d1                	mov    ecx,edx
c001c799:	09 c1                	or     ecx,eax
c001c79b:	74 25                	je     c001c7c2 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c79d:	31 ed                	xor    ebp,ebp
c001c79f:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c7a6:	89 fa                	mov    edx,edi
c001c7a8:	89 f0                	mov    eax,esi
c001c7aa:	0f ad d0             	shrd   eax,edx,cl
c001c7ad:	d3 ea                	shr    edx,cl
c001c7af:	f6 c1 20             	test   cl,0x20
c001c7b2:	74 02                	je     c001c7b6 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c7b4:	89 d0                	mov    eax,edx
c001c7b6:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c7ba:	45                   	inc    ebp
c001c7bb:	83 fd 06             	cmp    ebp,0x6
c001c7be:	75 df                	jne    c001c79f <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c7c0:	eb 76                	jmp    c001c838 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001c7c2:	89 f0                	mov    eax,esi
c001c7c4:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c7c9:	89 fa                	mov    edx,edi
c001c7cb:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c7d2:	0f ac d0 10          	shrd   eax,edx,0x10
c001c7d6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c7db:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c7df:	c1 ee 18             	shr    esi,0x18
c001c7e2:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001c7e7:	eb 56                	jmp    c001c83f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c7e9:	6a 00                	push   0x0
c001c7eb:	6a 3f                	push   0x3f
c001c7ed:	57                   	push   edi
c001c7ee:	56                   	push   esi
c001c7ef:	e8 ac 2a 00 00       	call   c001f2a0 <__umoddi3>
c001c7f4:	83 c4 10             	add    esp,0x10
c001c7f7:	40                   	inc    eax
c001c7f8:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c7fc:	6a 00                	push   0x0
c001c7fe:	68 f0 03 00 00       	push   0x3f0
c001c803:	57                   	push   edi
c001c804:	56                   	push   esi
c001c805:	e8 96 29 00 00       	call   c001f1a0 <__udivdi3>
c001c80a:	83 c4 10             	add    esp,0x10
c001c80d:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c812:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c819:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c81e:	6a 00                	push   0x0
c001c820:	6a 3f                	push   0x3f
c001c822:	57                   	push   edi
c001c823:	56                   	push   esi
c001c824:	e8 77 29 00 00       	call   c001f1a0 <__udivdi3>
c001c829:	83 c4 10             	add    esp,0x10
c001c82c:	83 e0 0f             	and    eax,0xf
c001c82f:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001c834:	89 c6                	mov    esi,eax
c001c836:	eb 07                	jmp    c001c83f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c838:	31 f6                	xor    esi,esi
c001c83a:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001c83f:	bf 01 00 00 00       	mov    edi,0x1
c001c844:	50                   	push   eax
c001c845:	6a 00                	push   0x0
c001c847:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c84e:	50                   	push   eax
c001c84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c853:	e8 a4 f1 ff ff       	call   c001b9fc <IDE::enableIRQs(unsigned char, bool)>
c001c858:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c85b:	e8 9c fe ff ff       	call   c001c6fc <ATA::readyForCommand()>
c001c860:	83 c4 10             	add    esp,0x10
c001c863:	84 c0                	test   al,al
c001c865:	0f 84 69 02 00 00    	je     c001cad4 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001c86b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c871:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c877:	c1 e0 04             	shl    eax,0x4
c001c87a:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001c881:	09 c6                	or     esi,eax
c001c883:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001c888:	75 05                	jne    c001c88f <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001c88a:	83 ce a0             	or     esi,0xffffffa0
c001c88d:	eb 03                	jmp    c001c892 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001c88f:	83 ce e0             	or     esi,0xffffffe0
c001c892:	89 f0                	mov    eax,esi
c001c894:	0f b6 f0             	movzx  esi,al
c001c897:	56                   	push   esi
c001c898:	6a 06                	push   0x6
c001c89a:	51                   	push   ecx
c001c89b:	52                   	push   edx
c001c89c:	e8 53 ef ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8a1:	83 c4 10             	add    esp,0x10
c001c8a4:	6a 00                	push   0x0
c001c8a6:	6a 01                	push   0x1
c001c8a8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8af:	50                   	push   eax
c001c8b0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8b6:	e8 39 ef ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8bb:	83 c4 10             	add    esp,0x10
c001c8be:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001c8c3:	83 f8 02             	cmp    eax,0x2
c001c8c6:	75 6e                	jne    c001c936 <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c001c8c8:	6a 00                	push   0x0
c001c8ca:	6a 08                	push   0x8
c001c8cc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8d3:	50                   	push   eax
c001c8d4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8da:	e8 15 ef ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8df:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001c8e4:	50                   	push   eax
c001c8e5:	6a 09                	push   0x9
c001c8e7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8ee:	50                   	push   eax
c001c8ef:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8f5:	e8 fa ee ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8fa:	83 c4 20             	add    esp,0x20
c001c8fd:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001c902:	50                   	push   eax
c001c903:	6a 0a                	push   0xa
c001c905:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c90c:	50                   	push   eax
c001c90d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c913:	e8 dc ee ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c918:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001c91d:	50                   	push   eax
c001c91e:	6a 0b                	push   0xb
c001c920:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c927:	50                   	push   eax
c001c928:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c92e:	e8 c1 ee ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c933:	83 c4 20             	add    esp,0x20
c001c936:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001c93b:	50                   	push   eax
c001c93c:	6a 02                	push   0x2
c001c93e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c945:	50                   	push   eax
c001c946:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c94c:	e8 a3 ee ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c951:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001c956:	50                   	push   eax
c001c957:	6a 03                	push   0x3
c001c959:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c960:	50                   	push   eax
c001c961:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c967:	e8 88 ee ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c96c:	83 c4 20             	add    esp,0x20
c001c96f:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001c974:	50                   	push   eax
c001c975:	6a 04                	push   0x4
c001c977:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c97e:	50                   	push   eax
c001c97f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c985:	e8 6a ee ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c98a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c98f:	50                   	push   eax
c001c990:	6a 05                	push   0x5
c001c992:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c999:	50                   	push   eax
c001c99a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9a0:	e8 4f ee ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9a5:	83 c4 20             	add    esp,0x20
c001c9a8:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c9ad:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c001c9b2:	74 11                	je     c001c9c5 <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c001c9b4:	b8 30 00 00 00       	mov    eax,0x30
c001c9b9:	83 fa 02             	cmp    edx,0x2
c001c9bc:	75 16                	jne    c001c9d4 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001c9be:	b8 34 00 00 00       	mov    eax,0x34
c001c9c3:	eb 0f                	jmp    c001c9d4 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001c9c5:	b8 20 00 00 00       	mov    eax,0x20
c001c9ca:	83 fa 02             	cmp    edx,0x2
c001c9cd:	75 05                	jne    c001c9d4 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001c9cf:	b8 24 00 00 00       	mov    eax,0x24
c001c9d4:	50                   	push   eax
c001c9d5:	6a 07                	push   0x7
c001c9d7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9de:	50                   	push   eax
c001c9df:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9e5:	e8 0a ee ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9ea:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001c9ee:	83 c4 10             	add    esp,0x10
c001c9f1:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001c9f6:	85 f6                	test   esi,esi
c001c9f8:	0f 84 b3 00 00 00    	je     c001cab1 <ATA::access(unsigned long long, int, void*, bool)+0x369>
c001c9fe:	50                   	push   eax
c001c9ff:	6a 01                	push   0x1
c001ca01:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca08:	50                   	push   eax
c001ca09:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca0f:	e8 c8 f8 ff ff       	call   c001c2dc <IDE::polling(unsigned char, unsigned int)>
c001ca14:	83 c4 10             	add    esp,0x10
c001ca17:	0f b6 f8             	movzx  edi,al
c001ca1a:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001ca20:	85 ff                	test   edi,edi
c001ca22:	74 1d                	je     c001ca41 <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c001ca24:	57                   	push   edi
c001ca25:	0f b6 d2             	movzx  edx,dl
c001ca28:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001ca2f:	50                   	push   eax
c001ca30:	52                   	push   edx
c001ca31:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca37:	e8 e6 f7 ff ff       	call   c001c222 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001ca3c:	e9 90 00 00 00       	jmp    c001cad1 <ATA::access(unsigned long long, int, void*, bool)+0x389>
c001ca41:	85 ed                	test   ebp,ebp
c001ca43:	74 3b                	je     c001ca80 <ATA::access(unsigned long long, int, void*, bool)+0x338>
c001ca45:	31 c9                	xor    ecx,ecx
c001ca47:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001ca4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001ca4f:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001ca53:	50                   	push   eax
c001ca54:	50                   	push   eax
c001ca55:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca5c:	50                   	push   eax
c001ca5d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca63:	e8 7a ed ff ff       	call   c001b7e2 <IDE::getBase(unsigned char)>
c001ca68:	89 c2                	mov    edx,eax
c001ca6a:	89 f8                	mov    eax,edi
c001ca6c:	66 ef                	out    dx,ax
c001ca6e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001ca72:	83 c4 10             	add    esp,0x10
c001ca75:	41                   	inc    ecx
c001ca76:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001ca7c:	75 c9                	jne    c001ca47 <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001ca7e:	eb 23                	jmp    c001caa3 <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c001ca80:	0f b6 d2             	movzx  edx,dl
c001ca83:	51                   	push   ecx
c001ca84:	51                   	push   ecx
c001ca85:	52                   	push   edx
c001ca86:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca8c:	e8 51 ed ff ff       	call   c001b7e2 <IDE::getBase(unsigned char)>
c001ca91:	b9 00 01 00 00       	mov    ecx,0x100
c001ca96:	89 c2                	mov    edx,eax
c001ca98:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001ca9c:	fc                   	cld    
c001ca9d:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001caa0:	83 c4 10             	add    esp,0x10
c001caa3:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001caab:	4e                   	dec    esi
c001caac:	e9 45 ff ff ff       	jmp    c001c9f6 <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c001cab1:	31 ff                	xor    edi,edi
c001cab3:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cab8:	74 1a                	je     c001cad4 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001caba:	50                   	push   eax
c001cabb:	50                   	push   eax
c001cabc:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001cac1:	83 f8 02             	cmp    eax,0x2
c001cac4:	0f 94 c0             	sete   al
c001cac7:	0f b6 c0             	movzx  eax,al
c001caca:	50                   	push   eax
c001cacb:	53                   	push   ebx
c001cacc:	e8 dd fb ff ff       	call   c001c6ae <ATA::flush(bool)>
c001cad1:	83 c4 10             	add    esp,0x10
c001cad4:	83 c4 2c             	add    esp,0x2c
c001cad7:	89 f8                	mov    eax,edi
c001cad9:	5b                   	pop    ebx
c001cada:	5e                   	pop    esi
c001cadb:	5f                   	pop    edi
c001cadc:	5d                   	pop    ebp
c001cadd:	c3                   	ret    

c001cade <ATA::detectCHS()>:
c001cade:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cae2:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001cae8:	c1 e0 06             	shl    eax,0x6
c001caeb:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001caf1:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001cafb:	c7 44 24 04 34 2c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022c34
c001cb03:	e9 61 47 ff ff       	jmp    c0011269 <KePanic(char const*)>

c001cb08 <ATA::open(int, int, void*)>:
c001cb08:	53                   	push   ebx
c001cb09:	83 ec 08             	sub    esp,0x8
c001cb0c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cb10:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cb14:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cb18:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001cb1e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cb24:	c1 e0 06             	shl    eax,0x6
c001cb27:	01 d0                	add    eax,edx
c001cb29:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001cb30:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001cb36:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001cb3d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001cb47:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001cb4d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001cb54:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001cb5b:	75 0c                	jne    c001cb69 <ATA::open(int, int, void*)+0x61>
c001cb5d:	83 ec 0c             	sub    esp,0xc
c001cb60:	53                   	push   ebx
c001cb61:	e8 78 ff ff ff       	call   c001cade <ATA::detectCHS()>
c001cb66:	83 c4 10             	add    esp,0x10
c001cb69:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cb6f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cb75:	c1 e0 06             	shl    eax,0x6
c001cb78:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001cb7f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001cb89:	d1 e8                	shr    eax,1
c001cb8b:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001cb91:	6a 04                	push   0x4
c001cb93:	6a 0c                	push   0xc
c001cb95:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb9c:	50                   	push   eax
c001cb9d:	52                   	push   edx
c001cb9e:	e8 51 ec ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cba3:	90                   	nop
c001cba4:	90                   	nop
c001cba5:	6a 00                	push   0x0
c001cba7:	6a 0c                	push   0xc
c001cba9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cbb0:	50                   	push   eax
c001cbb1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cbb7:	e8 38 ec ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cbbc:	83 c4 14             	add    esp,0x14
c001cbbf:	53                   	push   ebx
c001cbc0:	e8 a9 fe fe ff       	call   c000ca6e <PhysicalDisk::startCache()>
c001cbc5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cbc8:	e8 e5 10 ff ff       	call   c000dcb2 <createPartitionsForDisk(PhysicalDisk*)>
c001cbcd:	31 c0                	xor    eax,eax
c001cbcf:	83 c4 18             	add    esp,0x18
c001cbd2:	5b                   	pop    ebx
c001cbd3:	c3                   	ret    

c001cbd4 <combineCharAndColour(char, unsigned char)>:
c001cbd4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cbd9:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001cbdf:	c1 e0 08             	shl    eax,0x8
c001cbe2:	09 d0                	or     eax,edx
c001cbe4:	c3                   	ret    

c001cbe5 <combineColours(unsigned char, unsigned char)>:
c001cbe5:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cbea:	c1 e0 04             	shl    eax,0x4
c001cbed:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001cbf1:	c3                   	ret    

c001cbf2 <ATA::read(unsigned long long, int, void*)>:
c001cbf2:	55                   	push   ebp
c001cbf3:	57                   	push   edi
c001cbf4:	56                   	push   esi
c001cbf5:	be 04 00 00 00       	mov    esi,0x4
c001cbfa:	53                   	push   ebx
c001cbfb:	83 ec 0c             	sub    esp,0xc
c001cbfe:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cc02:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cc06:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cc09:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cc0d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cc11:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cc17:	0f 87 a1 01 00 00    	ja     c001cdbe <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cc1d:	be 06 00 00 00       	mov    esi,0x6
c001cc22:	85 c9                	test   ecx,ecx
c001cc24:	0f 84 94 01 00 00    	je     c001cdbe <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cc2a:	55                   	push   ebp
c001cc2b:	55                   	push   ebp
c001cc2c:	6a 00                	push   0x0
c001cc2e:	51                   	push   ecx
c001cc2f:	53                   	push   ebx
c001cc30:	52                   	push   edx
c001cc31:	50                   	push   eax
c001cc32:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cc36:	e8 0d fb ff ff       	call   c001c748 <ATA::access(unsigned long long, int, void*, bool)>
c001cc3b:	83 c4 20             	add    esp,0x20
c001cc3e:	89 c6                	mov    esi,eax
c001cc40:	85 c0                	test   eax,eax
c001cc42:	0f 85 71 01 00 00    	jne    c001cdb9 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001cc48:	03 1d b4 a0 02 c0    	add    ebx,DWORD PTR ds:0xc002a0b4
c001cc4e:	89 da                	mov    edx,ebx
c001cc50:	50                   	push   eax
c001cc51:	bd 10 27 00 00       	mov    ebp,0x2710
c001cc56:	50                   	push   eax
c001cc57:	89 1d b4 a0 02 c0    	mov    DWORD PTR ds:0xc002a0b4,ebx
c001cc5d:	6a 0f                	push   0xf
c001cc5f:	6a 00                	push   0x0
c001cc61:	e8 7f ff ff ff       	call   c001cbe5 <combineColours(unsigned char, unsigned char)>
c001cc66:	59                   	pop    ecx
c001cc67:	b9 0a 00 00 00       	mov    ecx,0xa
c001cc6c:	5b                   	pop    ebx
c001cc6d:	0f b6 d8             	movzx  ebx,al
c001cc70:	89 d0                	mov    eax,edx
c001cc72:	53                   	push   ebx
c001cc73:	99                   	cdq    
c001cc74:	f7 fd                	idiv   ebp
c001cc76:	99                   	cdq    
c001cc77:	f7 f9                	idiv   ecx
c001cc79:	83 c2 30             	add    edx,0x30
c001cc7c:	0f b6 d2             	movzx  edx,dl
c001cc7f:	52                   	push   edx
c001cc80:	e8 4f ff ff ff       	call   c001cbd4 <combineCharAndColour(char, unsigned char)>
c001cc85:	5f                   	pop    edi
c001cc86:	bf e8 03 00 00       	mov    edi,0x3e8
c001cc8b:	5a                   	pop    edx
c001cc8c:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cc92:	53                   	push   ebx
c001cc93:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cc98:	99                   	cdq    
c001cc99:	f7 ff                	idiv   edi
c001cc9b:	99                   	cdq    
c001cc9c:	f7 f9                	idiv   ecx
c001cc9e:	8d 42 30             	lea    eax,[edx+0x30]
c001cca1:	0f b6 c0             	movzx  eax,al
c001cca4:	50                   	push   eax
c001cca5:	e8 2a ff ff ff       	call   c001cbd4 <combineCharAndColour(char, unsigned char)>
c001ccaa:	5f                   	pop    edi
c001ccab:	bf 64 00 00 00       	mov    edi,0x64
c001ccb0:	5a                   	pop    edx
c001ccb1:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001ccb7:	53                   	push   ebx
c001ccb8:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ccbd:	99                   	cdq    
c001ccbe:	f7 ff                	idiv   edi
c001ccc0:	99                   	cdq    
c001ccc1:	f7 f9                	idiv   ecx
c001ccc3:	8d 42 30             	lea    eax,[edx+0x30]
c001ccc6:	0f b6 c0             	movzx  eax,al
c001ccc9:	50                   	push   eax
c001ccca:	e8 05 ff ff ff       	call   c001cbd4 <combineCharAndColour(char, unsigned char)>
c001cccf:	5a                   	pop    edx
c001ccd0:	5a                   	pop    edx
c001ccd1:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001ccd7:	53                   	push   ebx
c001ccd8:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ccdd:	99                   	cdq    
c001ccde:	f7 f9                	idiv   ecx
c001cce0:	99                   	cdq    
c001cce1:	f7 f9                	idiv   ecx
c001cce3:	8d 42 30             	lea    eax,[edx+0x30]
c001cce6:	0f b6 c0             	movzx  eax,al
c001cce9:	50                   	push   eax
c001ccea:	e8 e5 fe ff ff       	call   c001cbd4 <combineCharAndColour(char, unsigned char)>
c001ccef:	5a                   	pop    edx
c001ccf0:	5a                   	pop    edx
c001ccf1:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001ccf7:	53                   	push   ebx
c001ccf8:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ccfd:	99                   	cdq    
c001ccfe:	f7 f9                	idiv   ecx
c001cd00:	83 c2 30             	add    edx,0x30
c001cd03:	0f b6 d2             	movzx  edx,dl
c001cd06:	52                   	push   edx
c001cd07:	e8 c8 fe ff ff       	call   c001cbd4 <combineCharAndColour(char, unsigned char)>
c001cd0c:	5a                   	pop    edx
c001cd0d:	5a                   	pop    edx
c001cd0e:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001cd14:	53                   	push   ebx
c001cd15:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cd1a:	99                   	cdq    
c001cd1b:	f7 fd                	idiv   ebp
c001cd1d:	99                   	cdq    
c001cd1e:	f7 f9                	idiv   ecx
c001cd20:	8d 42 30             	lea    eax,[edx+0x30]
c001cd23:	0f b6 c0             	movzx  eax,al
c001cd26:	50                   	push   eax
c001cd27:	e8 a8 fe ff ff       	call   c001cbd4 <combineCharAndColour(char, unsigned char)>
c001cd2c:	5d                   	pop    ebp
c001cd2d:	bd e8 03 00 00       	mov    ebp,0x3e8
c001cd32:	5a                   	pop    edx
c001cd33:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001cd39:	53                   	push   ebx
c001cd3a:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cd3f:	99                   	cdq    
c001cd40:	f7 fd                	idiv   ebp
c001cd42:	99                   	cdq    
c001cd43:	f7 f9                	idiv   ecx
c001cd45:	8d 42 30             	lea    eax,[edx+0x30]
c001cd48:	0f b6 c0             	movzx  eax,al
c001cd4b:	50                   	push   eax
c001cd4c:	e8 83 fe ff ff       	call   c001cbd4 <combineCharAndColour(char, unsigned char)>
c001cd51:	5d                   	pop    ebp
c001cd52:	5a                   	pop    edx
c001cd53:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001cd59:	53                   	push   ebx
c001cd5a:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cd5f:	99                   	cdq    
c001cd60:	f7 ff                	idiv   edi
c001cd62:	99                   	cdq    
c001cd63:	f7 f9                	idiv   ecx
c001cd65:	8d 42 30             	lea    eax,[edx+0x30]
c001cd68:	0f b6 c0             	movzx  eax,al
c001cd6b:	50                   	push   eax
c001cd6c:	e8 63 fe ff ff       	call   c001cbd4 <combineCharAndColour(char, unsigned char)>
c001cd71:	5f                   	pop    edi
c001cd72:	5d                   	pop    ebp
c001cd73:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cd79:	53                   	push   ebx
c001cd7a:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cd7f:	99                   	cdq    
c001cd80:	f7 f9                	idiv   ecx
c001cd82:	99                   	cdq    
c001cd83:	f7 f9                	idiv   ecx
c001cd85:	8d 42 30             	lea    eax,[edx+0x30]
c001cd88:	0f b6 c0             	movzx  eax,al
c001cd8b:	50                   	push   eax
c001cd8c:	e8 43 fe ff ff       	call   c001cbd4 <combineCharAndColour(char, unsigned char)>
c001cd91:	5a                   	pop    edx
c001cd92:	5f                   	pop    edi
c001cd93:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cd99:	53                   	push   ebx
c001cd9a:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cd9f:	99                   	cdq    
c001cda0:	f7 f9                	idiv   ecx
c001cda2:	83 c2 30             	add    edx,0x30
c001cda5:	0f b6 d2             	movzx  edx,dl
c001cda8:	52                   	push   edx
c001cda9:	e8 26 fe ff ff       	call   c001cbd4 <combineCharAndColour(char, unsigned char)>
c001cdae:	83 c4 10             	add    esp,0x10
c001cdb1:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cdb7:	eb 05                	jmp    c001cdbe <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cdb9:	be 01 00 00 00       	mov    esi,0x1
c001cdbe:	83 c4 0c             	add    esp,0xc
c001cdc1:	89 f0                	mov    eax,esi
c001cdc3:	5b                   	pop    ebx
c001cdc4:	5e                   	pop    esi
c001cdc5:	5f                   	pop    edi
c001cdc6:	5d                   	pop    ebp
c001cdc7:	c3                   	ret    

c001cdc8 <ATA::write(unsigned long long, int, void*)>:
c001cdc8:	55                   	push   ebp
c001cdc9:	57                   	push   edi
c001cdca:	56                   	push   esi
c001cdcb:	be 04 00 00 00       	mov    esi,0x4
c001cdd0:	53                   	push   ebx
c001cdd1:	83 ec 0c             	sub    esp,0xc
c001cdd4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cdd8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cddc:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cddf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cde3:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cde7:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cded:	0f 87 9c 01 00 00    	ja     c001cf8f <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cdf3:	be 06 00 00 00       	mov    esi,0x6
c001cdf8:	85 c9                	test   ecx,ecx
c001cdfa:	0f 84 8f 01 00 00    	je     c001cf8f <ATA::write(unsigned long long, int, void*)+0x1c7>
c001ce00:	55                   	push   ebp
c001ce01:	55                   	push   ebp
c001ce02:	6a 01                	push   0x1
c001ce04:	51                   	push   ecx
c001ce05:	53                   	push   ebx
c001ce06:	52                   	push   edx
c001ce07:	50                   	push   eax
c001ce08:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ce0c:	e8 37 f9 ff ff       	call   c001c748 <ATA::access(unsigned long long, int, void*, bool)>
c001ce11:	83 c4 20             	add    esp,0x20
c001ce14:	89 c6                	mov    esi,eax
c001ce16:	85 c0                	test   eax,eax
c001ce18:	0f 85 6c 01 00 00    	jne    c001cf8a <ATA::write(unsigned long long, int, void*)+0x1c2>
c001ce1e:	01 1d b0 a0 02 c0    	add    DWORD PTR ds:0xc002a0b0,ebx
c001ce24:	bd 10 27 00 00       	mov    ebp,0x2710
c001ce29:	50                   	push   eax
c001ce2a:	50                   	push   eax
c001ce2b:	6a 0f                	push   0xf
c001ce2d:	6a 00                	push   0x0
c001ce2f:	e8 b1 fd ff ff       	call   c001cbe5 <combineColours(unsigned char, unsigned char)>
c001ce34:	5a                   	pop    edx
c001ce35:	0f b6 d8             	movzx  ebx,al
c001ce38:	59                   	pop    ecx
c001ce39:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ce3e:	53                   	push   ebx
c001ce3f:	b9 0a 00 00 00       	mov    ecx,0xa
c001ce44:	99                   	cdq    
c001ce45:	f7 fd                	idiv   ebp
c001ce47:	99                   	cdq    
c001ce48:	f7 f9                	idiv   ecx
c001ce4a:	8d 42 30             	lea    eax,[edx+0x30]
c001ce4d:	0f b6 c0             	movzx  eax,al
c001ce50:	50                   	push   eax
c001ce51:	e8 7e fd ff ff       	call   c001cbd4 <combineCharAndColour(char, unsigned char)>
c001ce56:	5f                   	pop    edi
c001ce57:	bf e8 03 00 00       	mov    edi,0x3e8
c001ce5c:	5a                   	pop    edx
c001ce5d:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001ce63:	53                   	push   ebx
c001ce64:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ce69:	99                   	cdq    
c001ce6a:	f7 ff                	idiv   edi
c001ce6c:	99                   	cdq    
c001ce6d:	f7 f9                	idiv   ecx
c001ce6f:	8d 42 30             	lea    eax,[edx+0x30]
c001ce72:	0f b6 c0             	movzx  eax,al
c001ce75:	50                   	push   eax
c001ce76:	e8 59 fd ff ff       	call   c001cbd4 <combineCharAndColour(char, unsigned char)>
c001ce7b:	5f                   	pop    edi
c001ce7c:	bf 64 00 00 00       	mov    edi,0x64
c001ce81:	5a                   	pop    edx
c001ce82:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001ce88:	53                   	push   ebx
c001ce89:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ce8e:	99                   	cdq    
c001ce8f:	f7 ff                	idiv   edi
c001ce91:	99                   	cdq    
c001ce92:	f7 f9                	idiv   ecx
c001ce94:	8d 42 30             	lea    eax,[edx+0x30]
c001ce97:	0f b6 c0             	movzx  eax,al
c001ce9a:	50                   	push   eax
c001ce9b:	e8 34 fd ff ff       	call   c001cbd4 <combineCharAndColour(char, unsigned char)>
c001cea0:	5a                   	pop    edx
c001cea1:	5a                   	pop    edx
c001cea2:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001cea8:	53                   	push   ebx
c001cea9:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ceae:	99                   	cdq    
c001ceaf:	f7 f9                	idiv   ecx
c001ceb1:	99                   	cdq    
c001ceb2:	f7 f9                	idiv   ecx
c001ceb4:	8d 42 30             	lea    eax,[edx+0x30]
c001ceb7:	0f b6 c0             	movzx  eax,al
c001ceba:	50                   	push   eax
c001cebb:	e8 14 fd ff ff       	call   c001cbd4 <combineCharAndColour(char, unsigned char)>
c001cec0:	5a                   	pop    edx
c001cec1:	5a                   	pop    edx
c001cec2:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001cec8:	53                   	push   ebx
c001cec9:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cece:	99                   	cdq    
c001cecf:	f7 f9                	idiv   ecx
c001ced1:	8d 42 30             	lea    eax,[edx+0x30]
c001ced4:	0f b6 c0             	movzx  eax,al
c001ced7:	50                   	push   eax
c001ced8:	e8 f7 fc ff ff       	call   c001cbd4 <combineCharAndColour(char, unsigned char)>
c001cedd:	5a                   	pop    edx
c001cede:	5a                   	pop    edx
c001cedf:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001cee5:	53                   	push   ebx
c001cee6:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001ceeb:	99                   	cdq    
c001ceec:	f7 fd                	idiv   ebp
c001ceee:	99                   	cdq    
c001ceef:	f7 f9                	idiv   ecx
c001cef1:	8d 42 30             	lea    eax,[edx+0x30]
c001cef4:	0f b6 c0             	movzx  eax,al
c001cef7:	50                   	push   eax
c001cef8:	e8 d7 fc ff ff       	call   c001cbd4 <combineCharAndColour(char, unsigned char)>
c001cefd:	5d                   	pop    ebp
c001cefe:	bd e8 03 00 00       	mov    ebp,0x3e8
c001cf03:	5a                   	pop    edx
c001cf04:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001cf0a:	53                   	push   ebx
c001cf0b:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cf10:	99                   	cdq    
c001cf11:	f7 fd                	idiv   ebp
c001cf13:	99                   	cdq    
c001cf14:	f7 f9                	idiv   ecx
c001cf16:	8d 42 30             	lea    eax,[edx+0x30]
c001cf19:	0f b6 c0             	movzx  eax,al
c001cf1c:	50                   	push   eax
c001cf1d:	e8 b2 fc ff ff       	call   c001cbd4 <combineCharAndColour(char, unsigned char)>
c001cf22:	5d                   	pop    ebp
c001cf23:	5a                   	pop    edx
c001cf24:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001cf2a:	53                   	push   ebx
c001cf2b:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cf30:	99                   	cdq    
c001cf31:	f7 ff                	idiv   edi
c001cf33:	99                   	cdq    
c001cf34:	f7 f9                	idiv   ecx
c001cf36:	8d 42 30             	lea    eax,[edx+0x30]
c001cf39:	0f b6 c0             	movzx  eax,al
c001cf3c:	50                   	push   eax
c001cf3d:	e8 92 fc ff ff       	call   c001cbd4 <combineCharAndColour(char, unsigned char)>
c001cf42:	5f                   	pop    edi
c001cf43:	5d                   	pop    ebp
c001cf44:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cf4a:	53                   	push   ebx
c001cf4b:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cf50:	99                   	cdq    
c001cf51:	f7 f9                	idiv   ecx
c001cf53:	99                   	cdq    
c001cf54:	f7 f9                	idiv   ecx
c001cf56:	8d 42 30             	lea    eax,[edx+0x30]
c001cf59:	0f b6 c0             	movzx  eax,al
c001cf5c:	50                   	push   eax
c001cf5d:	e8 72 fc ff ff       	call   c001cbd4 <combineCharAndColour(char, unsigned char)>
c001cf62:	5a                   	pop    edx
c001cf63:	5f                   	pop    edi
c001cf64:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cf6a:	53                   	push   ebx
c001cf6b:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cf70:	99                   	cdq    
c001cf71:	f7 f9                	idiv   ecx
c001cf73:	83 c2 30             	add    edx,0x30
c001cf76:	0f b6 d2             	movzx  edx,dl
c001cf79:	52                   	push   edx
c001cf7a:	e8 55 fc ff ff       	call   c001cbd4 <combineCharAndColour(char, unsigned char)>
c001cf7f:	83 c4 10             	add    esp,0x10
c001cf82:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cf88:	eb 05                	jmp    c001cf8f <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cf8a:	be 01 00 00 00       	mov    esi,0x1
c001cf8f:	83 c4 0c             	add    esp,0xc
c001cf92:	89 f0                	mov    eax,esi
c001cf94:	5b                   	pop    ebx
c001cf95:	5e                   	pop    esi
c001cf96:	5f                   	pop    edi
c001cf97:	5d                   	pop    ebp
c001cf98:	c3                   	ret    
c001cf99:	90                   	nop

c001cf9a <ATAPI::write(unsigned long long, int, void*)>:
c001cf9a:	b8 03 00 00 00       	mov    eax,0x3
c001cf9f:	c3                   	ret    

c001cfa0 <ATAPI::close(int, int, void*)>:
c001cfa0:	83 ec 0c             	sub    esp,0xc
c001cfa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfa7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cfad:	85 c0                	test   eax,eax
c001cfaf:	74 0c                	je     c001cfbd <ATAPI::close(int, int, void*)+0x1d>
c001cfb1:	83 ec 0c             	sub    esp,0xc
c001cfb4:	8b 10                	mov    edx,DWORD PTR [eax]
c001cfb6:	50                   	push   eax
c001cfb7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cfba:	83 c4 10             	add    esp,0x10
c001cfbd:	31 c0                	xor    eax,eax
c001cfbf:	83 c4 0c             	add    esp,0xc
c001cfc2:	c3                   	ret    
c001cfc3:	90                   	nop

c001cfc4 <ATAPI::ATAPI()>:
c001cfc4:	83 ec 0c             	sub    esp,0xc
c001cfc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfcb:	83 ec 04             	sub    esp,0x4
c001cfce:	68 00 08 00 00       	push   0x800
c001cfd3:	68 7d 2d 02 c0       	push   0xc0022d7d
c001cfd8:	50                   	push   eax
c001cfd9:	e8 28 fa fe ff       	call   c000ca06 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cfde:	83 c4 10             	add    esp,0x10
c001cfe1:	ba 98 2c 02 c0       	mov    edx,0xc0022c98
c001cfe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfea:	89 10                	mov    DWORD PTR [eax],edx
c001cfec:	90                   	nop
c001cfed:	83 c4 0c             	add    esp,0xc
c001cff0:	c3                   	ret    
c001cff1:	90                   	nop

c001cff2 <ATAPI::readyForCommand()>:
c001cff2:	56                   	push   esi
c001cff3:	53                   	push   ebx
c001cff4:	53                   	push   ebx
c001cff5:	31 db                	xor    ebx,ebx
c001cff7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cffb:	51                   	push   ecx
c001cffc:	6a 0c                	push   0xc
c001cffe:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d005:	50                   	push   eax
c001d006:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d00c:	e8 a3 e8 ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001d011:	83 c4 10             	add    esp,0x10
c001d014:	a8 88                	test   al,0x88
c001d016:	74 25                	je     c001d03d <ATAPI::readyForCommand()+0x4b>
c001d018:	43                   	inc    ebx
c001d019:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d01f:	7e da                	jle    c001cffb <ATAPI::readyForCommand()+0x9>
c001d021:	83 ec 0c             	sub    esp,0xc
c001d024:	68 5e 01 00 00       	push   0x15e
c001d029:	e8 2a 8e ff ff       	call   c0015e58 <milliTenthSleep(unsigned int)>
c001d02e:	83 c4 10             	add    esp,0x10
c001d031:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d037:	75 c2                	jne    c001cffb <ATAPI::readyForCommand()+0x9>
c001d039:	31 c0                	xor    eax,eax
c001d03b:	eb 02                	jmp    c001d03f <ATAPI::readyForCommand()+0x4d>
c001d03d:	b0 01                	mov    al,0x1
c001d03f:	5a                   	pop    edx
c001d040:	5b                   	pop    ebx
c001d041:	5e                   	pop    esi
c001d042:	c3                   	ret    
c001d043:	90                   	nop

c001d044 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d044:	55                   	push   ebp
c001d045:	57                   	push   edi
c001d046:	56                   	push   esi
c001d047:	53                   	push   ebx
c001d048:	83 ec 20             	sub    esp,0x20
c001d04b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d04f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d053:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d057:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d05b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d05f:	6a 01                	push   0x1
c001d061:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d068:	50                   	push   eax
c001d069:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d06f:	e8 88 e9 ff ff       	call   c001b9fc <IDE::enableIRQs(unsigned char, bool)>
c001d074:	5e                   	pop    esi
c001d075:	58                   	pop    eax
c001d076:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d07d:	50                   	push   eax
c001d07e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d084:	e8 45 e7 ff ff       	call   c001b7ce <IDE::prepareInterrupt(unsigned char)>
c001d089:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d08c:	e8 61 ff ff ff       	call   c001cff2 <ATAPI::readyForCommand()>
c001d091:	83 c4 10             	add    esp,0x10
c001d094:	84 c0                	test   al,al
c001d096:	75 0a                	jne    c001d0a2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001d098:	bb 01 00 00 00       	mov    ebx,0x1
c001d09d:	e9 60 02 00 00       	jmp    c001d302 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d0a2:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d0a8:	c1 e0 04             	shl    eax,0x4
c001d0ab:	0f b6 c0             	movzx  eax,al
c001d0ae:	50                   	push   eax
c001d0af:	6a 06                	push   0x6
c001d0b1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d0b8:	50                   	push   eax
c001d0b9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0bf:	e8 30 e7 ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d0c4:	6a 00                	push   0x0
c001d0c6:	6a 01                	push   0x1
c001d0c8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d0cf:	50                   	push   eax
c001d0d0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0d6:	e8 19 e7 ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d0db:	83 c4 20             	add    esp,0x20
c001d0de:	0f b6 c3             	movzx  eax,bl
c001d0e1:	0f b6 df             	movzx  ebx,bh
c001d0e4:	50                   	push   eax
c001d0e5:	6a 04                	push   0x4
c001d0e7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d0ee:	50                   	push   eax
c001d0ef:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0f5:	e8 fa e6 ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d0fa:	53                   	push   ebx
c001d0fb:	6a 05                	push   0x5
c001d0fd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d104:	50                   	push   eax
c001d105:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d10b:	e8 e4 e6 ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d110:	83 c4 20             	add    esp,0x20
c001d113:	68 a0 00 00 00       	push   0xa0
c001d118:	6a 07                	push   0x7
c001d11a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d121:	50                   	push   eax
c001d122:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d128:	e8 c7 e6 ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d12d:	83 c4 0c             	add    esp,0xc
c001d130:	6a 01                	push   0x1
c001d132:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d139:	50                   	push   eax
c001d13a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d140:	e8 97 f1 ff ff       	call   c001c2dc <IDE::polling(unsigned char, unsigned int)>
c001d145:	83 c4 10             	add    esp,0x10
c001d148:	0f b6 d8             	movzx  ebx,al
c001d14b:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d151:	85 db                	test   ebx,ebx
c001d153:	74 20                	je     c001d175 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001d155:	53                   	push   ebx
c001d156:	0f b6 c0             	movzx  eax,al
c001d159:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d160:	52                   	push   edx
c001d161:	50                   	push   eax
c001d162:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d168:	e8 b5 f0 ff ff       	call   c001c222 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d16d:	83 c4 10             	add    esp,0x10
c001d170:	e9 8d 01 00 00       	jmp    c001d302 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d175:	0f b6 c0             	movzx  eax,al
c001d178:	53                   	push   ebx
c001d179:	53                   	push   ebx
c001d17a:	50                   	push   eax
c001d17b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d181:	e8 5c e6 ff ff       	call   c001b7e2 <IDE::getBase(unsigned char)>
c001d186:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d18a:	b9 06 00 00 00       	mov    ecx,0x6
c001d18f:	89 c2                	mov    edx,eax
c001d191:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d194:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d198:	83 c4 10             	add    esp,0x10
c001d19b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001d1a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d1a4:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d1aa:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d1b1:	85 db                	test   ebx,ebx
c001d1b3:	0f 84 ec 00 00 00    	je     c001d2a5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001d1b9:	51                   	push   ecx
c001d1ba:	51                   	push   ecx
c001d1bb:	52                   	push   edx
c001d1bc:	50                   	push   eax
c001d1bd:	e8 a0 e7 ff ff       	call   c001b962 <IDE::waitInterrupt(unsigned char)>
c001d1c2:	83 c4 10             	add    esp,0x10
c001d1c5:	84 c0                	test   al,al
c001d1c7:	0f 84 cb fe ff ff    	je     c001d098 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d1cd:	56                   	push   esi
c001d1ce:	56                   	push   esi
c001d1cf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d1d6:	50                   	push   eax
c001d1d7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d1dd:	e8 ec e5 ff ff       	call   c001b7ce <IDE::prepareInterrupt(unsigned char)>
c001d1e2:	83 c4 0c             	add    esp,0xc
c001d1e5:	6a 04                	push   0x4
c001d1e7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d1ee:	50                   	push   eax
c001d1ef:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d1f5:	e8 ba e6 ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001d1fa:	83 c4 0c             	add    esp,0xc
c001d1fd:	89 c6                	mov    esi,eax
c001d1ff:	6a 05                	push   0x5
c001d201:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d208:	50                   	push   eax
c001d209:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d20f:	e8 a0 e6 ff ff       	call   c001b8b4 <IDE::read(unsigned char, unsigned char)>
c001d214:	89 f1                	mov    ecx,esi
c001d216:	0f b6 c0             	movzx  eax,al
c001d219:	0f b6 f1             	movzx  esi,cl
c001d21c:	c1 e0 08             	shl    eax,0x8
c001d21f:	09 c6                	or     esi,eax
c001d221:	d1 fe                	sar    esi,1
c001d223:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001d227:	83 c4 10             	add    esp,0x10
c001d22a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001d22f:	74 41                	je     c001d272 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001d231:	31 c9                	xor    ecx,ecx
c001d233:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d239:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d240:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001d244:	75 0a                	jne    c001d250 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001d246:	01 c9                	add    ecx,ecx
c001d248:	01 cd                	add    ebp,ecx
c001d24a:	4b                   	dec    ebx
c001d24b:	e9 54 ff ff ff       	jmp    c001d1a4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001d250:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001d255:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d259:	51                   	push   ecx
c001d25a:	51                   	push   ecx
c001d25b:	52                   	push   edx
c001d25c:	50                   	push   eax
c001d25d:	e8 80 e5 ff ff       	call   c001b7e2 <IDE::getBase(unsigned char)>
c001d262:	89 c2                	mov    edx,eax
c001d264:	89 f0                	mov    eax,esi
c001d266:	66 ef                	out    dx,ax
c001d268:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d26c:	83 c4 10             	add    esp,0x10
c001d26f:	41                   	inc    ecx
c001d270:	eb c1                	jmp    c001d233 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001d272:	31 f6                	xor    esi,esi
c001d274:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d27a:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d281:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001d285:	75 06                	jne    c001d28d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001d287:	01 f6                	add    esi,esi
c001d289:	01 f5                	add    ebp,esi
c001d28b:	eb bd                	jmp    c001d24a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001d28d:	51                   	push   ecx
c001d28e:	51                   	push   ecx
c001d28f:	52                   	push   edx
c001d290:	50                   	push   eax
c001d291:	e8 4c e5 ff ff       	call   c001b7e2 <IDE::getBase(unsigned char)>
c001d296:	89 c2                	mov    edx,eax
c001d298:	66 ed                	in     ax,dx
c001d29a:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001d29f:	83 c4 10             	add    esp,0x10
c001d2a2:	46                   	inc    esi
c001d2a3:	eb cf                	jmp    c001d274 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001d2a5:	51                   	push   ecx
c001d2a6:	51                   	push   ecx
c001d2a7:	52                   	push   edx
c001d2a8:	50                   	push   eax
c001d2a9:	e8 b4 e6 ff ff       	call   c001b962 <IDE::waitInterrupt(unsigned char)>
c001d2ae:	83 c4 10             	add    esp,0x10
c001d2b1:	84 c0                	test   al,al
c001d2b3:	0f 84 df fd ff ff    	je     c001d098 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d2b9:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d2be:	52                   	push   edx
c001d2bf:	52                   	push   edx
c001d2c0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d2c7:	50                   	push   eax
c001d2c8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d2ce:	e8 fb e4 ff ff       	call   c001b7ce <IDE::prepareInterrupt(unsigned char)>
c001d2d3:	83 c4 10             	add    esp,0x10
c001d2d6:	50                   	push   eax
c001d2d7:	50                   	push   eax
c001d2d8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d2df:	50                   	push   eax
c001d2e0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d2e6:	e8 f7 e4 ff ff       	call   c001b7e2 <IDE::getBase(unsigned char)>
c001d2eb:	8d 50 07             	lea    edx,[eax+0x7]
c001d2ee:	ec                   	in     al,dx
c001d2ef:	83 c4 10             	add    esp,0x10
c001d2f2:	a8 88                	test   al,0x88
c001d2f4:	74 0a                	je     c001d300 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001d2f6:	4b                   	dec    ebx
c001d2f7:	75 dd                	jne    c001d2d6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001d2f9:	bb 02 00 00 00       	mov    ebx,0x2
c001d2fe:	eb 02                	jmp    c001d302 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d300:	31 db                	xor    ebx,ebx
c001d302:	83 c4 1c             	add    esp,0x1c
c001d305:	89 d8                	mov    eax,ebx
c001d307:	5b                   	pop    ebx
c001d308:	5e                   	pop    esi
c001d309:	5f                   	pop    edi
c001d30a:	5d                   	pop    ebp
c001d30b:	c3                   	ret    

c001d30c <ATAPI::diskRemoved()>:
c001d30c:	53                   	push   ebx
c001d30d:	83 ec 14             	sub    esp,0x14
c001d310:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d314:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d31b:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d321:	e8 7c 06 ff ff       	call   c000d9a2 <LogicalDisk::unmount()>
c001d326:	58                   	pop    eax
c001d327:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d32d:	e8 52 10 ff ff       	call   c000e384 <VCache::writeWriteBuffer()>
c001d332:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d338:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d33c:	83 c4 18             	add    esp,0x18
c001d33f:	5b                   	pop    ebx
c001d340:	e9 2f 10 ff ff       	jmp    c000e374 <VCache::invalidateReadBuffer()>
c001d345:	90                   	nop

c001d346 <ATAPI::eject()>:
c001d346:	57                   	push   edi
c001d347:	b9 03 00 00 00       	mov    ecx,0x3
c001d34c:	53                   	push   ebx
c001d34d:	83 ec 14             	sub    esp,0x14
c001d350:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d354:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d358:	fc                   	cld    
c001d359:	31 c0                	xor    eax,eax
c001d35b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d35d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d362:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d367:	50                   	push   eax
c001d368:	50                   	push   eax
c001d369:	6a 00                	push   0x0
c001d36b:	6a 00                	push   0x0
c001d36d:	6a 00                	push   0x0
c001d36f:	6a 02                	push   0x2
c001d371:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d375:	50                   	push   eax
c001d376:	53                   	push   ebx
c001d377:	e8 c8 fc ff ff       	call   c001d044 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d37c:	83 c4 14             	add    esp,0x14
c001d37f:	53                   	push   ebx
c001d380:	e8 87 ff ff ff       	call   c001d30c <ATAPI::diskRemoved()>
c001d385:	83 c4 24             	add    esp,0x24
c001d388:	31 c0                	xor    eax,eax
c001d38a:	5b                   	pop    ebx
c001d38b:	5f                   	pop    edi
c001d38c:	c3                   	ret    
c001d38d:	90                   	nop

c001d38e <ATAPI::diskInserted()>:
c001d38e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d392:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d399:	c3                   	ret    

c001d39a <ATAPI::detectMedia()>:
c001d39a:	56                   	push   esi
c001d39b:	53                   	push   ebx
c001d39c:	83 ec 28             	sub    esp,0x28
c001d39f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d3a3:	6a 0c                	push   0xc
c001d3a5:	6a 00                	push   0x0
c001d3a7:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d3ab:	56                   	push   esi
c001d3ac:	e8 3f 31 fe ff       	call   c00004f0 <memset>
c001d3b1:	58                   	pop    eax
c001d3b2:	5a                   	pop    edx
c001d3b3:	6a 00                	push   0x0
c001d3b5:	6a 00                	push   0x0
c001d3b7:	6a 00                	push   0x0
c001d3b9:	6a 00                	push   0x0
c001d3bb:	56                   	push   esi
c001d3bc:	53                   	push   ebx
c001d3bd:	e8 82 fc ff ff       	call   c001d044 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d3c2:	83 c4 1c             	add    esp,0x1c
c001d3c5:	6a 0c                	push   0xc
c001d3c7:	6a 00                	push   0x0
c001d3c9:	56                   	push   esi
c001d3ca:	e8 21 31 fe ff       	call   c00004f0 <memset>
c001d3cf:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d3d4:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d3d9:	59                   	pop    ecx
c001d3da:	58                   	pop    eax
c001d3db:	6a 01                	push   0x1
c001d3dd:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d3e1:	50                   	push   eax
c001d3e2:	6a 00                	push   0x0
c001d3e4:	6a 12                	push   0x12
c001d3e6:	56                   	push   esi
c001d3e7:	53                   	push   ebx
c001d3e8:	e8 57 fc ff ff       	call   c001d044 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d3ed:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d3f1:	83 c4 20             	add    esp,0x20
c001d3f4:	83 e0 7f             	and    eax,0x7f
c001d3f7:	83 f8 70             	cmp    eax,0x70
c001d3fa:	74 15                	je     c001d411 <ATAPI::detectMedia()+0x77>
c001d3fc:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d403:	75 0c                	jne    c001d411 <ATAPI::detectMedia()+0x77>
c001d405:	83 ec 0c             	sub    esp,0xc
c001d408:	53                   	push   ebx
c001d409:	e8 80 ff ff ff       	call   c001d38e <ATAPI::diskInserted()>
c001d40e:	83 c4 10             	add    esp,0x10
c001d411:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d415:	83 e0 0f             	and    eax,0xf
c001d418:	83 f8 02             	cmp    eax,0x2
c001d41b:	75 1b                	jne    c001d438 <ATAPI::detectMedia()+0x9e>
c001d41d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d422:	75 2d                	jne    c001d451 <ATAPI::detectMedia()+0xb7>
c001d424:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d42b:	74 24                	je     c001d451 <ATAPI::detectMedia()+0xb7>
c001d42d:	83 ec 0c             	sub    esp,0xc
c001d430:	53                   	push   ebx
c001d431:	e8 d6 fe ff ff       	call   c001d30c <ATAPI::diskRemoved()>
c001d436:	eb 16                	jmp    c001d44e <ATAPI::detectMedia()+0xb4>
c001d438:	85 c0                	test   eax,eax
c001d43a:	75 15                	jne    c001d451 <ATAPI::detectMedia()+0xb7>
c001d43c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d443:	75 0c                	jne    c001d451 <ATAPI::detectMedia()+0xb7>
c001d445:	83 ec 0c             	sub    esp,0xc
c001d448:	53                   	push   ebx
c001d449:	e8 40 ff ff ff       	call   c001d38e <ATAPI::diskInserted()>
c001d44e:	83 c4 10             	add    esp,0x10
c001d451:	83 c4 24             	add    esp,0x24
c001d454:	5b                   	pop    ebx
c001d455:	5e                   	pop    esi
c001d456:	c3                   	ret    
c001d457:	90                   	nop

c001d458 <ATAPI::open(int, int, void*)>:
c001d458:	56                   	push   esi
c001d459:	53                   	push   ebx
c001d45a:	50                   	push   eax
c001d45b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d45f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d463:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d467:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d46d:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d473:	c1 e0 06             	shl    eax,0x6
c001d476:	01 d0                	add    eax,edx
c001d478:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d47f:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d485:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d48c:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d496:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d49c:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d4a3:	6a 04                	push   0x4
c001d4a5:	6a 0c                	push   0xc
c001d4a7:	51                   	push   ecx
c001d4a8:	52                   	push   edx
c001d4a9:	e8 46 e3 ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d4ae:	90                   	nop
c001d4af:	90                   	nop
c001d4b0:	6a 00                	push   0x0
c001d4b2:	6a 0c                	push   0xc
c001d4b4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d4bb:	50                   	push   eax
c001d4bc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d4c2:	e8 2d e3 ff ff       	call   c001b7f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d4c7:	83 c4 14             	add    esp,0x14
c001d4ca:	68 78 01 00 00       	push   0x178
c001d4cf:	e8 e2 a5 fe ff       	call   c0007ab6 <malloc>
c001d4d4:	83 c4 0c             	add    esp,0xc
c001d4d7:	89 c6                	mov    esi,eax
c001d4d9:	6a 00                	push   0x0
c001d4db:	68 ff ff ff 7f       	push   0x7fffffff
c001d4e0:	6a 00                	push   0x0
c001d4e2:	6a 00                	push   0x0
c001d4e4:	53                   	push   ebx
c001d4e5:	68 2f 2e 02 c0       	push   0xc0022e2f
c001d4ea:	50                   	push   eax
c001d4eb:	e8 f0 02 ff ff       	call   c000d7e0 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d4f0:	83 c4 14             	add    esp,0x14
c001d4f3:	56                   	push   esi
c001d4f4:	e8 a7 03 ff ff       	call   c000d8a0 <LogicalDisk::assignDriveLetter()>
c001d4f9:	5a                   	pop    edx
c001d4fa:	0f be c0             	movsx  eax,al
c001d4fd:	59                   	pop    ecx
c001d4fe:	50                   	push   eax
c001d4ff:	68 80 2c 02 c0       	push   0xc0022c80
c001d504:	e8 3c d4 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001d509:	58                   	pop    eax
c001d50a:	5a                   	pop    edx
c001d50b:	56                   	push   esi
c001d50c:	53                   	push   ebx
c001d50d:	e8 28 f1 fe ff       	call   c000c63a <Device::addChild(Device*)>
c001d512:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001d518:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d51b:	e8 4e f5 fe ff       	call   c000ca6e <PhysicalDisk::startCache()>
c001d520:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d527:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d52a:	e8 6b fe ff ff       	call   c001d39a <ATAPI::detectMedia()>
c001d52f:	83 c4 14             	add    esp,0x14
c001d532:	31 c0                	xor    eax,eax
c001d534:	5b                   	pop    ebx
c001d535:	5e                   	pop    esi
c001d536:	c3                   	ret    
c001d537:	90                   	nop

c001d538 <ATAPI::read(unsigned long long, int, void*)>:
c001d538:	55                   	push   ebp
c001d539:	57                   	push   edi
c001d53a:	56                   	push   esi
c001d53b:	53                   	push   ebx
c001d53c:	83 ec 1c             	sub    esp,0x1c
c001d53f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d543:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d547:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d54b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d552:	74 3c                	je     c001d590 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001d554:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d558:	b9 03 00 00 00       	mov    ecx,0x3
c001d55d:	fc                   	cld    
c001d55e:	31 c0                	xor    eax,eax
c001d560:	0f ce                	bswap  esi
c001d562:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d564:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001d569:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001d56d:	89 e8                	mov    eax,ebp
c001d56f:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d573:	50                   	push   eax
c001d574:	50                   	push   eax
c001d575:	55                   	push   ebp
c001d576:	c1 e5 0b             	shl    ebp,0xb
c001d579:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d57d:	6a 00                	push   0x0
c001d57f:	55                   	push   ebp
c001d580:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d584:	50                   	push   eax
c001d585:	53                   	push   ebx
c001d586:	e8 b9 fa ff ff       	call   c001d044 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d58b:	83 c4 20             	add    esp,0x20
c001d58e:	eb 1a                	jmp    c001d5aa <ATAPI::read(unsigned long long, int, void*)+0x72>
c001d590:	83 ec 0c             	sub    esp,0xc
c001d593:	53                   	push   ebx
c001d594:	e8 01 fe ff ff       	call   c001d39a <ATAPI::detectMedia()>
c001d599:	83 c4 10             	add    esp,0x10
c001d59c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d5a3:	75 af                	jne    c001d554 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001d5a5:	b8 02 00 00 00       	mov    eax,0x2
c001d5aa:	83 c4 1c             	add    esp,0x1c
c001d5ad:	5b                   	pop    ebx
c001d5ae:	5e                   	pop    esi
c001d5af:	5f                   	pop    edi
c001d5b0:	5d                   	pop    ebp
c001d5b1:	c3                   	ret    

c001d5b2 <SATA::close(int, int, void*)>:
c001d5b2:	83 ec 0c             	sub    esp,0xc
c001d5b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5b9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d5bf:	85 c0                	test   eax,eax
c001d5c1:	74 0c                	je     c001d5cf <SATA::close(int, int, void*)+0x1d>
c001d5c3:	83 ec 0c             	sub    esp,0xc
c001d5c6:	8b 10                	mov    edx,DWORD PTR [eax]
c001d5c8:	50                   	push   eax
c001d5c9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d5cc:	83 c4 10             	add    esp,0x10
c001d5cf:	31 c0                	xor    eax,eax
c001d5d1:	83 c4 0c             	add    esp,0xc
c001d5d4:	c3                   	ret    
c001d5d5:	90                   	nop

c001d5d6 <SATA::powerSaving(PowerSavingLevel)>:
c001d5d6:	c3                   	ret    
c001d5d7:	90                   	nop

c001d5d8 <SATA::open(int, int, void*)>:
c001d5d8:	56                   	push   esi
c001d5d9:	53                   	push   ebx
c001d5da:	50                   	push   eax
c001d5db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d5df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d5e3:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d5ed:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d5f3:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d5fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d601:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d60b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d611:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d618:	e8 a2 a7 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001d61d:	89 c6                	mov    esi,eax
c001d61f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d625:	81 c6 00 10 00 00    	add    esi,0x1000
c001d62b:	e8 8f a7 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001d630:	39 c6                	cmp    esi,eax
c001d632:	74 10                	je     c001d644 <SATA::open(int, int, void*)+0x6c>
c001d634:	83 ec 0c             	sub    esp,0xc
c001d637:	68 c8 2c 02 c0       	push   0xc0022cc8
c001d63c:	e8 28 3c ff ff       	call   c0011269 <KePanic(char const*)>
c001d641:	83 c4 10             	add    esp,0x10
c001d644:	83 ec 0c             	sub    esp,0xc
c001d647:	6a 02                	push   0x2
c001d649:	e8 bf bf fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001d64e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d654:	6a 03                	push   0x3
c001d656:	50                   	push   eax
c001d657:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001d65d:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001d663:	e8 b8 c6 fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001d668:	83 c4 14             	add    esp,0x14
c001d66b:	53                   	push   ebx
c001d66c:	e8 fd f3 fe ff       	call   c000ca6e <PhysicalDisk::startCache()>
c001d671:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d674:	e8 39 06 ff ff       	call   c000dcb2 <createPartitionsForDisk(PhysicalDisk*)>
c001d679:	83 c4 14             	add    esp,0x14
c001d67c:	31 c0                	xor    eax,eax
c001d67e:	5b                   	pop    ebx
c001d67f:	5e                   	pop    esi
c001d680:	c3                   	ret    
c001d681:	90                   	nop

c001d682 <SATA::SATA()>:
c001d682:	83 ec 0c             	sub    esp,0xc
c001d685:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d689:	83 ec 04             	sub    esp,0x4
c001d68c:	68 00 02 00 00       	push   0x200
c001d691:	68 dc 2c 02 c0       	push   0xc0022cdc
c001d696:	50                   	push   eax
c001d697:	e8 6a f3 fe ff       	call   c000ca06 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d69c:	83 c4 10             	add    esp,0x10
c001d69f:	ba 4c 2d 02 c0       	mov    edx,0xc0022d4c
c001d6a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6a8:	89 10                	mov    DWORD PTR [eax],edx
c001d6aa:	90                   	nop
c001d6ab:	83 c4 0c             	add    esp,0xc
c001d6ae:	c3                   	ret    
c001d6af:	90                   	nop

c001d6b0 <SATA::access(unsigned long long, int, void*, bool)>:
c001d6b0:	55                   	push   ebp
c001d6b1:	57                   	push   edi
c001d6b2:	56                   	push   esi
c001d6b3:	53                   	push   ebx
c001d6b4:	83 ec 2c             	sub    esp,0x2c
c001d6b7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d6bb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d6bf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d6c3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d6c7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d6cb:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001d6d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d6d4:	7e 10                	jle    c001d6e6 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001d6d6:	83 ec 0c             	sub    esp,0xc
c001d6d9:	68 ec 2c 02 c0       	push   0xc0022cec
c001d6de:	e8 86 3b ff ff       	call   c0011269 <KePanic(char const*)>
c001d6e3:	83 c4 10             	add    esp,0x10
c001d6e6:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d6ec:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001d6f2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d6f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d6fc:	89 d0                	mov    eax,edx
c001d6fe:	c1 e0 07             	shl    eax,0x7
c001d701:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001d705:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d70f:	51                   	push   ecx
c001d710:	8d 42 02             	lea    eax,[edx+0x2]
c001d713:	51                   	push   ecx
c001d714:	c1 e0 07             	shl    eax,0x7
c001d717:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d71b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d71f:	50                   	push   eax
c001d720:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001d726:	e8 91 ec ff ff       	call   c001c3bc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d72b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d72f:	83 c4 10             	add    esp,0x10
c001d732:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001d737:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d73b:	0f 84 57 01 00 00    	je     c001d898 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d741:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d745:	c1 e0 09             	shl    eax,0x9
c001d748:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001d74d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d751:	74 0e                	je     c001d761 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001d753:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001d759:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001d75d:	89 c1                	mov    ecx,eax
c001d75f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d761:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d767:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d76b:	8d 42 02             	lea    eax,[edx+0x2]
c001d76e:	c1 e0 07             	shl    eax,0x7
c001d771:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001d775:	8b 00                	mov    eax,DWORD PTR [eax]
c001d777:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d77d:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d783:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d787:	c1 e1 05             	shl    ecx,0x5
c001d78a:	01 c8                	add    eax,ecx
c001d78c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d790:	83 e1 01             	and    ecx,0x1
c001d793:	89 ce                	mov    esi,ecx
c001d795:	8a 08                	mov    cl,BYTE PTR [eax]
c001d797:	c1 e6 06             	shl    esi,0x6
c001d79a:	83 e1 bf             	and    ecx,0xffffffbf
c001d79d:	09 f1                	or     ecx,esi
c001d79f:	88 08                	mov    BYTE PTR [eax],cl
c001d7a1:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d7a3:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001d7a9:	81 c9 05 00 01 00    	or     ecx,0x10005
c001d7af:	89 08                	mov    DWORD PTR [eax],ecx
c001d7b1:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d7b7:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001d7bd:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001d7c3:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001d7c6:	50                   	push   eax
c001d7c7:	68 90 00 00 00       	push   0x90
c001d7cc:	6a 00                	push   0x0
c001d7ce:	56                   	push   esi
c001d7cf:	e8 1c 2d fe ff       	call   c00004f0 <memset>
c001d7d4:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d7da:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001d7e0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d7e4:	83 c4 10             	add    esp,0x10
c001d7e7:	48                   	dec    eax
c001d7e8:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d7ed:	89 c1                	mov    ecx,eax
c001d7ef:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001d7f5:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d7fa:	09 c8                	or     eax,ecx
c001d7fc:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001d802:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001d808:	83 c8 80             	or     eax,0xffffff80
c001d80b:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001d811:	66 8b 06             	mov    ax,WORD PTR [esi]
c001d814:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d818:	25 00 7f 00 00       	and    eax,0x7f00
c001d81d:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d822:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001d827:	66 89 06             	mov    WORD PTR [esi],ax
c001d82a:	b0 35                	mov    al,0x35
c001d82c:	75 02                	jne    c001d830 <SATA::access(unsigned long long, int, void*, bool)+0x180>
c001d82e:	b0 25                	mov    al,0x25
c001d830:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001d833:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001d837:	89 e8                	mov    eax,ebp
c001d839:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001d83d:	c1 e8 10             	shr    eax,0x10
c001d840:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001d843:	89 e8                	mov    eax,ebp
c001d845:	c1 e8 18             	shr    eax,0x18
c001d848:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001d84b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001d84f:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001d852:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d856:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001d859:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d85d:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001d861:	89 d6                	mov    esi,edx
c001d863:	31 c0                	xor    eax,eax
c001d865:	c1 e6 07             	shl    esi,0x7
c001d868:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d86c:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001d872:	80 e1 88             	and    cl,0x88
c001d875:	74 0a                	je     c001d881 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001d877:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d87c:	74 0a                	je     c001d888 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001d87e:	40                   	inc    eax
c001d87f:	eb eb                	jmp    c001d86c <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001d881:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d886:	75 17                	jne    c001d89f <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001d888:	83 ec 0c             	sub    esp,0xc
c001d88b:	68 25 2d 02 c0       	push   0xc0022d25
c001d890:	e8 b0 d0 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001d895:	83 c4 10             	add    esp,0x10
c001d898:	b8 01 00 00 00       	mov    eax,0x1
c001d89d:	eb 5d                	jmp    c001d8fc <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001d89f:	b8 01 00 00 00       	mov    eax,0x1
c001d8a4:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001d8a8:	c1 e2 07             	shl    edx,0x7
c001d8ab:	d3 e0                	shl    eax,cl
c001d8ad:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001d8b1:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001d8b7:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001d8bd:	85 c8                	test   eax,ecx
c001d8bf:	74 16                	je     c001d8d7 <SATA::access(unsigned long long, int, void*, bool)+0x227>
c001d8c1:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001d8c7:	0f ba e1 1e          	bt     ecx,0x1e
c001d8cb:	73 ea                	jae    c001d8b7 <SATA::access(unsigned long long, int, void*, bool)+0x207>
c001d8cd:	83 ec 0c             	sub    esp,0xc
c001d8d0:	68 33 2d 02 c0       	push   0xc0022d33
c001d8d5:	eb b9                	jmp    c001d890 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001d8d7:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001d8dd:	0f ba e0 1e          	bt     eax,0x1e
c001d8e1:	72 b5                	jb     c001d898 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d8e3:	31 c0                	xor    eax,eax
c001d8e5:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001d8ea:	75 10                	jne    c001d8fc <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001d8ec:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001d8f2:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001d8f6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001d8fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d8fc:	83 c4 2c             	add    esp,0x2c
c001d8ff:	5b                   	pop    ebx
c001d900:	5e                   	pop    esi
c001d901:	5f                   	pop    edi
c001d902:	5d                   	pop    ebp
c001d903:	c3                   	ret    

c001d904 <SATA::read(unsigned long long, int, void*)>:
c001d904:	55                   	push   ebp
c001d905:	57                   	push   edi
c001d906:	56                   	push   esi
c001d907:	be 04 00 00 00       	mov    esi,0x4
c001d90c:	53                   	push   ebx
c001d90d:	83 ec 0c             	sub    esp,0xc
c001d910:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d914:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d918:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d91b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d91f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d923:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d929:	0f 87 1a 02 00 00    	ja     c001db49 <SATA::read(unsigned long long, int, void*)+0x245>
c001d92f:	be 06 00 00 00       	mov    esi,0x6
c001d934:	85 c9                	test   ecx,ecx
c001d936:	0f 84 0d 02 00 00    	je     c001db49 <SATA::read(unsigned long long, int, void*)+0x245>
c001d93c:	56                   	push   esi
c001d93d:	56                   	push   esi
c001d93e:	6a 00                	push   0x0
c001d940:	51                   	push   ecx
c001d941:	53                   	push   ebx
c001d942:	52                   	push   edx
c001d943:	50                   	push   eax
c001d944:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d948:	e8 63 fd ff ff       	call   c001d6b0 <SATA::access(unsigned long long, int, void*, bool)>
c001d94d:	83 c4 20             	add    esp,0x20
c001d950:	89 c6                	mov    esi,eax
c001d952:	85 c0                	test   eax,eax
c001d954:	0f 85 ea 01 00 00    	jne    c001db44 <SATA::read(unsigned long long, int, void*)+0x240>
c001d95a:	01 1d b4 a0 02 c0    	add    DWORD PTR ds:0xc002a0b4,ebx
c001d960:	bb 0a 00 00 00       	mov    ebx,0xa
c001d965:	50                   	push   eax
c001d966:	50                   	push   eax
c001d967:	6a 0f                	push   0xf
c001d969:	6a 00                	push   0x0
c001d96b:	e8 75 f2 ff ff       	call   c001cbe5 <combineColours(unsigned char, unsigned char)>
c001d970:	5a                   	pop    edx
c001d971:	0f b6 c0             	movzx  eax,al
c001d974:	59                   	pop    ecx
c001d975:	b9 10 27 00 00       	mov    ecx,0x2710
c001d97a:	50                   	push   eax
c001d97b:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d980:	99                   	cdq    
c001d981:	f7 f9                	idiv   ecx
c001d983:	99                   	cdq    
c001d984:	f7 fb                	idiv   ebx
c001d986:	8d 42 30             	lea    eax,[edx+0x30]
c001d989:	0f b6 c0             	movzx  eax,al
c001d98c:	50                   	push   eax
c001d98d:	e8 42 f2 ff ff       	call   c001cbd4 <combineCharAndColour(char, unsigned char)>
c001d992:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d998:	5f                   	pop    edi
c001d999:	5d                   	pop    ebp
c001d99a:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d99f:	6a 0f                	push   0xf
c001d9a1:	6a 00                	push   0x0
c001d9a3:	e8 3d f2 ff ff       	call   c001cbe5 <combineColours(unsigned char, unsigned char)>
c001d9a8:	5a                   	pop    edx
c001d9a9:	0f b6 c0             	movzx  eax,al
c001d9ac:	59                   	pop    ecx
c001d9ad:	50                   	push   eax
c001d9ae:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d9b3:	99                   	cdq    
c001d9b4:	f7 fd                	idiv   ebp
c001d9b6:	99                   	cdq    
c001d9b7:	f7 fb                	idiv   ebx
c001d9b9:	8d 42 30             	lea    eax,[edx+0x30]
c001d9bc:	0f b6 c0             	movzx  eax,al
c001d9bf:	50                   	push   eax
c001d9c0:	e8 0f f2 ff ff       	call   c001cbd4 <combineCharAndColour(char, unsigned char)>
c001d9c5:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d9cb:	5f                   	pop    edi
c001d9cc:	bf 64 00 00 00       	mov    edi,0x64
c001d9d1:	58                   	pop    eax
c001d9d2:	6a 0f                	push   0xf
c001d9d4:	6a 00                	push   0x0
c001d9d6:	e8 0a f2 ff ff       	call   c001cbe5 <combineColours(unsigned char, unsigned char)>
c001d9db:	5a                   	pop    edx
c001d9dc:	0f b6 c0             	movzx  eax,al
c001d9df:	59                   	pop    ecx
c001d9e0:	50                   	push   eax
c001d9e1:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d9e6:	99                   	cdq    
c001d9e7:	f7 ff                	idiv   edi
c001d9e9:	99                   	cdq    
c001d9ea:	f7 fb                	idiv   ebx
c001d9ec:	8d 42 30             	lea    eax,[edx+0x30]
c001d9ef:	0f b6 c0             	movzx  eax,al
c001d9f2:	50                   	push   eax
c001d9f3:	e8 dc f1 ff ff       	call   c001cbd4 <combineCharAndColour(char, unsigned char)>
c001d9f8:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d9fe:	58                   	pop    eax
c001d9ff:	5a                   	pop    edx
c001da00:	6a 0f                	push   0xf
c001da02:	6a 00                	push   0x0
c001da04:	e8 dc f1 ff ff       	call   c001cbe5 <combineColours(unsigned char, unsigned char)>
c001da09:	59                   	pop    ecx
c001da0a:	0f b6 c0             	movzx  eax,al
c001da0d:	5a                   	pop    edx
c001da0e:	50                   	push   eax
c001da0f:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001da14:	99                   	cdq    
c001da15:	f7 fb                	idiv   ebx
c001da17:	99                   	cdq    
c001da18:	f7 fb                	idiv   ebx
c001da1a:	8d 42 30             	lea    eax,[edx+0x30]
c001da1d:	0f b6 c0             	movzx  eax,al
c001da20:	50                   	push   eax
c001da21:	e8 ae f1 ff ff       	call   c001cbd4 <combineCharAndColour(char, unsigned char)>
c001da26:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001da2c:	59                   	pop    ecx
c001da2d:	58                   	pop    eax
c001da2e:	6a 0f                	push   0xf
c001da30:	6a 00                	push   0x0
c001da32:	e8 ae f1 ff ff       	call   c001cbe5 <combineColours(unsigned char, unsigned char)>
c001da37:	5a                   	pop    edx
c001da38:	0f b6 c0             	movzx  eax,al
c001da3b:	59                   	pop    ecx
c001da3c:	50                   	push   eax
c001da3d:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001da42:	99                   	cdq    
c001da43:	f7 fb                	idiv   ebx
c001da45:	8d 42 30             	lea    eax,[edx+0x30]
c001da48:	0f b6 c0             	movzx  eax,al
c001da4b:	50                   	push   eax
c001da4c:	e8 83 f1 ff ff       	call   c001cbd4 <combineCharAndColour(char, unsigned char)>
c001da51:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001da57:	58                   	pop    eax
c001da58:	5a                   	pop    edx
c001da59:	6a 0f                	push   0xf
c001da5b:	6a 00                	push   0x0
c001da5d:	e8 83 f1 ff ff       	call   c001cbe5 <combineColours(unsigned char, unsigned char)>
c001da62:	59                   	pop    ecx
c001da63:	0f b6 c0             	movzx  eax,al
c001da66:	5a                   	pop    edx
c001da67:	b9 10 27 00 00       	mov    ecx,0x2710
c001da6c:	50                   	push   eax
c001da6d:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001da72:	99                   	cdq    
c001da73:	f7 f9                	idiv   ecx
c001da75:	99                   	cdq    
c001da76:	f7 fb                	idiv   ebx
c001da78:	8d 42 30             	lea    eax,[edx+0x30]
c001da7b:	0f b6 c0             	movzx  eax,al
c001da7e:	50                   	push   eax
c001da7f:	e8 50 f1 ff ff       	call   c001cbd4 <combineCharAndColour(char, unsigned char)>
c001da84:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001da8a:	59                   	pop    ecx
c001da8b:	58                   	pop    eax
c001da8c:	6a 0f                	push   0xf
c001da8e:	6a 00                	push   0x0
c001da90:	e8 50 f1 ff ff       	call   c001cbe5 <combineColours(unsigned char, unsigned char)>
c001da95:	5a                   	pop    edx
c001da96:	0f b6 c0             	movzx  eax,al
c001da99:	59                   	pop    ecx
c001da9a:	50                   	push   eax
c001da9b:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001daa0:	99                   	cdq    
c001daa1:	f7 fd                	idiv   ebp
c001daa3:	99                   	cdq    
c001daa4:	f7 fb                	idiv   ebx
c001daa6:	8d 42 30             	lea    eax,[edx+0x30]
c001daa9:	0f b6 c0             	movzx  eax,al
c001daac:	50                   	push   eax
c001daad:	e8 22 f1 ff ff       	call   c001cbd4 <combineCharAndColour(char, unsigned char)>
c001dab2:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001dab8:	5d                   	pop    ebp
c001dab9:	58                   	pop    eax
c001daba:	6a 0f                	push   0xf
c001dabc:	6a 00                	push   0x0
c001dabe:	e8 22 f1 ff ff       	call   c001cbe5 <combineColours(unsigned char, unsigned char)>
c001dac3:	5a                   	pop    edx
c001dac4:	0f b6 c0             	movzx  eax,al
c001dac7:	59                   	pop    ecx
c001dac8:	50                   	push   eax
c001dac9:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dace:	99                   	cdq    
c001dacf:	f7 ff                	idiv   edi
c001dad1:	99                   	cdq    
c001dad2:	f7 fb                	idiv   ebx
c001dad4:	8d 42 30             	lea    eax,[edx+0x30]
c001dad7:	0f b6 c0             	movzx  eax,al
c001dada:	50                   	push   eax
c001dadb:	e8 f4 f0 ff ff       	call   c001cbd4 <combineCharAndColour(char, unsigned char)>
c001dae0:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001dae6:	5f                   	pop    edi
c001dae7:	5d                   	pop    ebp
c001dae8:	6a 0f                	push   0xf
c001daea:	6a 00                	push   0x0
c001daec:	e8 f4 f0 ff ff       	call   c001cbe5 <combineColours(unsigned char, unsigned char)>
c001daf1:	5a                   	pop    edx
c001daf2:	0f b6 c0             	movzx  eax,al
c001daf5:	59                   	pop    ecx
c001daf6:	50                   	push   eax
c001daf7:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dafc:	99                   	cdq    
c001dafd:	f7 fb                	idiv   ebx
c001daff:	99                   	cdq    
c001db00:	f7 fb                	idiv   ebx
c001db02:	8d 42 30             	lea    eax,[edx+0x30]
c001db05:	0f b6 c0             	movzx  eax,al
c001db08:	50                   	push   eax
c001db09:	e8 c6 f0 ff ff       	call   c001cbd4 <combineCharAndColour(char, unsigned char)>
c001db0e:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001db14:	5f                   	pop    edi
c001db15:	5d                   	pop    ebp
c001db16:	6a 0f                	push   0xf
c001db18:	6a 00                	push   0x0
c001db1a:	e8 c6 f0 ff ff       	call   c001cbe5 <combineColours(unsigned char, unsigned char)>
c001db1f:	5a                   	pop    edx
c001db20:	0f b6 c0             	movzx  eax,al
c001db23:	59                   	pop    ecx
c001db24:	50                   	push   eax
c001db25:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001db2a:	99                   	cdq    
c001db2b:	f7 fb                	idiv   ebx
c001db2d:	83 c2 30             	add    edx,0x30
c001db30:	0f b6 d2             	movzx  edx,dl
c001db33:	52                   	push   edx
c001db34:	e8 9b f0 ff ff       	call   c001cbd4 <combineCharAndColour(char, unsigned char)>
c001db39:	83 c4 10             	add    esp,0x10
c001db3c:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001db42:	eb 05                	jmp    c001db49 <SATA::read(unsigned long long, int, void*)+0x245>
c001db44:	be 01 00 00 00       	mov    esi,0x1
c001db49:	83 c4 0c             	add    esp,0xc
c001db4c:	89 f0                	mov    eax,esi
c001db4e:	5b                   	pop    ebx
c001db4f:	5e                   	pop    esi
c001db50:	5f                   	pop    edi
c001db51:	5d                   	pop    ebp
c001db52:	c3                   	ret    
c001db53:	90                   	nop

c001db54 <SATA::write(unsigned long long, int, void*)>:
c001db54:	55                   	push   ebp
c001db55:	b8 04 00 00 00       	mov    eax,0x4
c001db5a:	57                   	push   edi
c001db5b:	56                   	push   esi
c001db5c:	53                   	push   ebx
c001db5d:	83 ec 1c             	sub    esp,0x1c
c001db60:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001db64:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001db68:	8d 75 ff             	lea    esi,[ebp-0x1]
c001db6b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001db6f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001db73:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001db79:	0f 87 32 02 00 00    	ja     c001ddb1 <SATA::write(unsigned long long, int, void*)+0x25d>
c001db7f:	b8 06 00 00 00       	mov    eax,0x6
c001db84:	85 ff                	test   edi,edi
c001db86:	0f 84 25 02 00 00    	je     c001ddb1 <SATA::write(unsigned long long, int, void*)+0x25d>
c001db8c:	89 ee                	mov    esi,ebp
c001db8e:	c1 e6 09             	shl    esi,0x9
c001db91:	01 fe                	add    esi,edi
c001db93:	89 c8                	mov    eax,ecx
c001db95:	89 da                	mov    edx,ebx
c001db97:	83 c0 01             	add    eax,0x1
c001db9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001db9e:	83 d2 00             	adc    edx,0x0
c001dba1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001dba5:	50                   	push   eax
c001dba6:	50                   	push   eax
c001dba7:	6a 01                	push   0x1
c001dba9:	57                   	push   edi
c001dbaa:	81 c7 00 02 00 00    	add    edi,0x200
c001dbb0:	6a 01                	push   0x1
c001dbb2:	53                   	push   ebx
c001dbb3:	51                   	push   ecx
c001dbb4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dbb8:	e8 f3 fa ff ff       	call   c001d6b0 <SATA::access(unsigned long long, int, void*, bool)>
c001dbbd:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001dbc1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001dbc5:	83 c4 20             	add    esp,0x20
c001dbc8:	39 f7                	cmp    edi,esi
c001dbca:	75 c7                	jne    c001db93 <SATA::write(unsigned long long, int, void*)+0x3f>
c001dbcc:	bb 0a 00 00 00       	mov    ebx,0xa
c001dbd1:	01 2d b0 a0 02 c0    	add    DWORD PTR ds:0xc002a0b0,ebp
c001dbd7:	bd 10 27 00 00       	mov    ebp,0x2710
c001dbdc:	50                   	push   eax
c001dbdd:	50                   	push   eax
c001dbde:	6a 0f                	push   0xf
c001dbe0:	6a 00                	push   0x0
c001dbe2:	e8 fe ef ff ff       	call   c001cbe5 <combineColours(unsigned char, unsigned char)>
c001dbe7:	5a                   	pop    edx
c001dbe8:	0f b6 c0             	movzx  eax,al
c001dbeb:	59                   	pop    ecx
c001dbec:	50                   	push   eax
c001dbed:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dbf2:	99                   	cdq    
c001dbf3:	f7 fd                	idiv   ebp
c001dbf5:	99                   	cdq    
c001dbf6:	f7 fb                	idiv   ebx
c001dbf8:	8d 42 30             	lea    eax,[edx+0x30]
c001dbfb:	0f b6 c0             	movzx  eax,al
c001dbfe:	50                   	push   eax
c001dbff:	e8 d0 ef ff ff       	call   c001cbd4 <combineCharAndColour(char, unsigned char)>
c001dc04:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001dc0a:	5e                   	pop    esi
c001dc0b:	5f                   	pop    edi
c001dc0c:	bf e8 03 00 00       	mov    edi,0x3e8
c001dc11:	6a 0f                	push   0xf
c001dc13:	6a 00                	push   0x0
c001dc15:	e8 cb ef ff ff       	call   c001cbe5 <combineColours(unsigned char, unsigned char)>
c001dc1a:	5a                   	pop    edx
c001dc1b:	0f b6 c0             	movzx  eax,al
c001dc1e:	59                   	pop    ecx
c001dc1f:	50                   	push   eax
c001dc20:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dc25:	99                   	cdq    
c001dc26:	f7 ff                	idiv   edi
c001dc28:	99                   	cdq    
c001dc29:	f7 fb                	idiv   ebx
c001dc2b:	8d 42 30             	lea    eax,[edx+0x30]
c001dc2e:	0f b6 c0             	movzx  eax,al
c001dc31:	50                   	push   eax
c001dc32:	e8 9d ef ff ff       	call   c001cbd4 <combineCharAndColour(char, unsigned char)>
c001dc37:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001dc3d:	5e                   	pop    esi
c001dc3e:	be 64 00 00 00       	mov    esi,0x64
c001dc43:	58                   	pop    eax
c001dc44:	6a 0f                	push   0xf
c001dc46:	6a 00                	push   0x0
c001dc48:	e8 98 ef ff ff       	call   c001cbe5 <combineColours(unsigned char, unsigned char)>
c001dc4d:	5a                   	pop    edx
c001dc4e:	0f b6 c0             	movzx  eax,al
c001dc51:	59                   	pop    ecx
c001dc52:	50                   	push   eax
c001dc53:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dc58:	99                   	cdq    
c001dc59:	f7 fe                	idiv   esi
c001dc5b:	99                   	cdq    
c001dc5c:	f7 fb                	idiv   ebx
c001dc5e:	8d 42 30             	lea    eax,[edx+0x30]
c001dc61:	0f b6 c0             	movzx  eax,al
c001dc64:	50                   	push   eax
c001dc65:	e8 6a ef ff ff       	call   c001cbd4 <combineCharAndColour(char, unsigned char)>
c001dc6a:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001dc70:	58                   	pop    eax
c001dc71:	5a                   	pop    edx
c001dc72:	6a 0f                	push   0xf
c001dc74:	6a 00                	push   0x0
c001dc76:	e8 6a ef ff ff       	call   c001cbe5 <combineColours(unsigned char, unsigned char)>
c001dc7b:	59                   	pop    ecx
c001dc7c:	0f b6 c0             	movzx  eax,al
c001dc7f:	5a                   	pop    edx
c001dc80:	50                   	push   eax
c001dc81:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dc86:	99                   	cdq    
c001dc87:	f7 fb                	idiv   ebx
c001dc89:	99                   	cdq    
c001dc8a:	f7 fb                	idiv   ebx
c001dc8c:	8d 42 30             	lea    eax,[edx+0x30]
c001dc8f:	0f b6 c0             	movzx  eax,al
c001dc92:	50                   	push   eax
c001dc93:	e8 3c ef ff ff       	call   c001cbd4 <combineCharAndColour(char, unsigned char)>
c001dc98:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001dc9e:	59                   	pop    ecx
c001dc9f:	58                   	pop    eax
c001dca0:	6a 0f                	push   0xf
c001dca2:	6a 00                	push   0x0
c001dca4:	e8 3c ef ff ff       	call   c001cbe5 <combineColours(unsigned char, unsigned char)>
c001dca9:	5a                   	pop    edx
c001dcaa:	0f b6 c0             	movzx  eax,al
c001dcad:	59                   	pop    ecx
c001dcae:	50                   	push   eax
c001dcaf:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dcb4:	99                   	cdq    
c001dcb5:	f7 fb                	idiv   ebx
c001dcb7:	83 c2 30             	add    edx,0x30
c001dcba:	0f b6 d2             	movzx  edx,dl
c001dcbd:	52                   	push   edx
c001dcbe:	e8 11 ef ff ff       	call   c001cbd4 <combineCharAndColour(char, unsigned char)>
c001dcc3:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001dcc9:	58                   	pop    eax
c001dcca:	5a                   	pop    edx
c001dccb:	6a 0f                	push   0xf
c001dccd:	6a 00                	push   0x0
c001dccf:	e8 11 ef ff ff       	call   c001cbe5 <combineColours(unsigned char, unsigned char)>
c001dcd4:	59                   	pop    ecx
c001dcd5:	0f b6 c0             	movzx  eax,al
c001dcd8:	5a                   	pop    edx
c001dcd9:	50                   	push   eax
c001dcda:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dcdf:	99                   	cdq    
c001dce0:	f7 fd                	idiv   ebp
c001dce2:	99                   	cdq    
c001dce3:	f7 fb                	idiv   ebx
c001dce5:	8d 42 30             	lea    eax,[edx+0x30]
c001dce8:	0f b6 c0             	movzx  eax,al
c001dceb:	50                   	push   eax
c001dcec:	e8 e3 ee ff ff       	call   c001cbd4 <combineCharAndColour(char, unsigned char)>
c001dcf1:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001dcf7:	59                   	pop    ecx
c001dcf8:	5d                   	pop    ebp
c001dcf9:	6a 0f                	push   0xf
c001dcfb:	6a 00                	push   0x0
c001dcfd:	e8 e3 ee ff ff       	call   c001cbe5 <combineColours(unsigned char, unsigned char)>
c001dd02:	5a                   	pop    edx
c001dd03:	0f b6 c0             	movzx  eax,al
c001dd06:	59                   	pop    ecx
c001dd07:	50                   	push   eax
c001dd08:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dd0d:	99                   	cdq    
c001dd0e:	f7 ff                	idiv   edi
c001dd10:	99                   	cdq    
c001dd11:	f7 fb                	idiv   ebx
c001dd13:	8d 42 30             	lea    eax,[edx+0x30]
c001dd16:	0f b6 c0             	movzx  eax,al
c001dd19:	50                   	push   eax
c001dd1a:	e8 b5 ee ff ff       	call   c001cbd4 <combineCharAndColour(char, unsigned char)>
c001dd1f:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001dd25:	5f                   	pop    edi
c001dd26:	5d                   	pop    ebp
c001dd27:	6a 0f                	push   0xf
c001dd29:	6a 00                	push   0x0
c001dd2b:	e8 b5 ee ff ff       	call   c001cbe5 <combineColours(unsigned char, unsigned char)>
c001dd30:	5a                   	pop    edx
c001dd31:	0f b6 c0             	movzx  eax,al
c001dd34:	59                   	pop    ecx
c001dd35:	50                   	push   eax
c001dd36:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dd3b:	99                   	cdq    
c001dd3c:	f7 fe                	idiv   esi
c001dd3e:	99                   	cdq    
c001dd3f:	f7 fb                	idiv   ebx
c001dd41:	8d 42 30             	lea    eax,[edx+0x30]
c001dd44:	0f b6 c0             	movzx  eax,al
c001dd47:	50                   	push   eax
c001dd48:	e8 87 ee ff ff       	call   c001cbd4 <combineCharAndColour(char, unsigned char)>
c001dd4d:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001dd53:	5e                   	pop    esi
c001dd54:	5f                   	pop    edi
c001dd55:	6a 0f                	push   0xf
c001dd57:	6a 00                	push   0x0
c001dd59:	e8 87 ee ff ff       	call   c001cbe5 <combineColours(unsigned char, unsigned char)>
c001dd5e:	5d                   	pop    ebp
c001dd5f:	0f b6 c0             	movzx  eax,al
c001dd62:	5a                   	pop    edx
c001dd63:	50                   	push   eax
c001dd64:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dd69:	99                   	cdq    
c001dd6a:	f7 fb                	idiv   ebx
c001dd6c:	99                   	cdq    
c001dd6d:	f7 fb                	idiv   ebx
c001dd6f:	8d 42 30             	lea    eax,[edx+0x30]
c001dd72:	0f b6 c0             	movzx  eax,al
c001dd75:	50                   	push   eax
c001dd76:	e8 59 ee ff ff       	call   c001cbd4 <combineCharAndColour(char, unsigned char)>
c001dd7b:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001dd81:	59                   	pop    ecx
c001dd82:	5e                   	pop    esi
c001dd83:	6a 0f                	push   0xf
c001dd85:	6a 00                	push   0x0
c001dd87:	e8 59 ee ff ff       	call   c001cbe5 <combineColours(unsigned char, unsigned char)>
c001dd8c:	5f                   	pop    edi
c001dd8d:	0f b6 c0             	movzx  eax,al
c001dd90:	5d                   	pop    ebp
c001dd91:	50                   	push   eax
c001dd92:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dd97:	99                   	cdq    
c001dd98:	f7 fb                	idiv   ebx
c001dd9a:	83 c2 30             	add    edx,0x30
c001dd9d:	0f b6 d2             	movzx  edx,dl
c001dda0:	52                   	push   edx
c001dda1:	e8 2e ee ff ff       	call   c001cbd4 <combineCharAndColour(char, unsigned char)>
c001dda6:	83 c4 10             	add    esp,0x10
c001dda9:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001ddaf:	31 c0                	xor    eax,eax
c001ddb1:	83 c4 1c             	add    esp,0x1c
c001ddb4:	5b                   	pop    ebx
c001ddb5:	5e                   	pop    esi
c001ddb6:	5f                   	pop    edi
c001ddb7:	5d                   	pop    ebp
c001ddb8:	c3                   	ret    
c001ddb9:	90                   	nop

c001ddba <SATAPI::write(unsigned long long, int, void*)>:
c001ddba:	b8 03 00 00 00       	mov    eax,0x3
c001ddbf:	c3                   	ret    

c001ddc0 <SATAPI::close(int, int, void*)>:
c001ddc0:	83 ec 0c             	sub    esp,0xc
c001ddc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddc7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ddcd:	85 c0                	test   eax,eax
c001ddcf:	74 0c                	je     c001dddd <SATAPI::close(int, int, void*)+0x1d>
c001ddd1:	83 ec 0c             	sub    esp,0xc
c001ddd4:	8b 10                	mov    edx,DWORD PTR [eax]
c001ddd6:	50                   	push   eax
c001ddd7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ddda:	83 c4 10             	add    esp,0x10
c001dddd:	31 c0                	xor    eax,eax
c001dddf:	83 c4 0c             	add    esp,0xc
c001dde2:	c3                   	ret    
c001dde3:	90                   	nop

c001dde4 <SATAPI::SATAPI()>:
c001dde4:	83 ec 0c             	sub    esp,0xc
c001dde7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddeb:	83 ec 04             	sub    esp,0x4
c001ddee:	68 00 08 00 00       	push   0x800
c001ddf3:	68 7c 2d 02 c0       	push   0xc0022d7c
c001ddf8:	50                   	push   eax
c001ddf9:	e8 08 ec fe ff       	call   c000ca06 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ddfe:	83 c4 10             	add    esp,0x10
c001de01:	ba 70 2e 02 c0       	mov    edx,0xc0022e70
c001de06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de0a:	89 10                	mov    DWORD PTR [eax],edx
c001de0c:	90                   	nop
c001de0d:	83 c4 0c             	add    esp,0xc
c001de10:	c3                   	ret    
c001de11:	90                   	nop

c001de12 <SATAPI::diskRemoved()>:
c001de12:	c3                   	ret    
c001de13:	90                   	nop

c001de14 <SATAPI::diskInserted()>:
c001de14:	83 ec 18             	sub    esp,0x18
c001de17:	68 88 2d 02 c0       	push   0xc0022d88
c001de1c:	e8 24 cb fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001de21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de25:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001de2c:	83 c4 1c             	add    esp,0x1c
c001de2f:	c3                   	ret    

c001de30 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001de30:	55                   	push   ebp
c001de31:	57                   	push   edi
c001de32:	56                   	push   esi
c001de33:	53                   	push   ebx
c001de34:	83 ec 34             	sub    esp,0x34
c001de37:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001de3b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001de3f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001de43:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001de47:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001de4b:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001de51:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001de57:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001de5b:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001de61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001de65:	83 c0 02             	add    eax,0x2
c001de68:	c1 e0 07             	shl    eax,0x7
c001de6b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001de6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001de73:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001de77:	c1 e0 07             	shl    eax,0x7
c001de7a:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001de7e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001de82:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001de8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001de90:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001de96:	e8 21 e5 ff ff       	call   c001c3bc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001de9b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001de9f:	83 c4 10             	add    esp,0x10
c001dea2:	b8 01 00 00 00       	mov    eax,0x1
c001dea7:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001deac:	0f 84 53 02 00 00    	je     c001e105 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001deb2:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001deb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001debc:	8b 00                	mov    eax,DWORD PTR [eax]
c001debe:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001dec4:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001deca:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dece:	c1 e1 05             	shl    ecx,0x5
c001ded1:	01 c8                	add    eax,ecx
c001ded3:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ded5:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001dedb:	81 c9 25 00 01 00    	or     ecx,0x10025
c001dee1:	89 08                	mov    DWORD PTR [eax],ecx
c001dee3:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001dee9:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001deef:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001def5:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001def8:	8d 7b 40             	lea    edi,[ebx+0x40]
c001defb:	50                   	push   eax
c001defc:	68 90 00 00 00       	push   0x90
c001df01:	6a 00                	push   0x0
c001df03:	53                   	push   ebx
c001df04:	e8 e7 25 fe ff       	call   c00004f0 <memset>
c001df09:	b9 0c 00 00 00       	mov    ecx,0xc
c001df0e:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001df12:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001df14:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001df1a:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001df1e:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001df24:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001df28:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001df2c:	48                   	dec    eax
c001df2d:	25 ff ff 3f 00       	and    eax,0x3fffff
c001df32:	89 c1                	mov    ecx,eax
c001df34:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001df3a:	25 00 00 c0 ff       	and    eax,0xffc00000
c001df3f:	09 c8                	or     eax,ecx
c001df41:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001df47:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001df4d:	83 c8 80             	or     eax,0xffffff80
c001df50:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001df56:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001df59:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001df5d:	25 00 7f 00 00       	and    eax,0x7f00
c001df62:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001df66:	0d 27 80 ff ff       	or     eax,0xffff8027
c001df6b:	66 89 03             	mov    WORD PTR [ebx],ax
c001df6e:	89 d0                	mov    eax,edx
c001df70:	c1 ea 18             	shr    edx,0x18
c001df73:	c1 e8 10             	shr    eax,0x10
c001df76:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001df79:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001df7c:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001df80:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001df83:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001df87:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001df8a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001df8e:	83 c4 10             	add    esp,0x10
c001df91:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001df95:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001df99:	31 c0                	xor    eax,eax
c001df9b:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001dfa1:	80 e1 88             	and    cl,0x88
c001dfa4:	74 0a                	je     c001dfb0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001dfa6:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001dfab:	74 0a                	je     c001dfb7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001dfad:	40                   	inc    eax
c001dfae:	eb eb                	jmp    c001df9b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001dfb0:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001dfb5:	75 43                	jne    c001dffa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001dfb7:	83 ec 0c             	sub    esp,0xc
c001dfba:	68 a0 2d 02 c0       	push   0xc0022da0
c001dfbf:	e8 81 c9 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001dfc4:	58                   	pop    eax
c001dfc5:	5a                   	pop    edx
c001dfc6:	68 b5 2d 02 c0       	push   0xc0022db5
c001dfcb:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c001dfd1:	e8 d0 aa fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001dfd6:	59                   	pop    ecx
c001dfd7:	5b                   	pop    ebx
c001dfd8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001dfdc:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001dfe2:	e8 6f e4 ff ff       	call   c001c456 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001dfe7:	5e                   	pop    esi
c001dfe8:	5f                   	pop    edi
c001dfe9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001dfed:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001dff3:	e8 3e e4 ff ff       	call   c001c436 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001dff8:	eb 48                	jmp    c001e042 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001dffa:	be 01 00 00 00       	mov    esi,0x1
c001dfff:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001e003:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e007:	d3 e6                	shl    esi,cl
c001e009:	c1 e7 07             	shl    edi,0x7
c001e00c:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001e012:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001e017:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001e01b:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001e021:	85 c6                	test   esi,eax
c001e023:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001e029:	0f 84 a3 00 00 00    	je     c001e0d2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001e02f:	0f ba e0 1e          	bt     eax,0x1e
c001e033:	73 1a                	jae    c001e04f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001e035:	83 ec 0c             	sub    esp,0xc
c001e038:	68 c7 2d 02 c0       	push   0xc0022dc7
c001e03d:	e8 03 c9 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e042:	83 c4 10             	add    esp,0x10
c001e045:	b8 01 00 00 00       	mov    eax,0x1
c001e04a:	e9 b6 00 00 00       	jmp    c001e105 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e04f:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001e055:	83 f8 0d             	cmp    eax,0xd
c001e058:	77 0a                	ja     c001e064 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001e05a:	83 ec 0c             	sub    esp,0xc
c001e05d:	68 c8 00 00 00       	push   0xc8
c001e062:	eb 28                	jmp    c001e08c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e064:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001e06a:	83 f8 0d             	cmp    eax,0xd
c001e06d:	77 0a                	ja     c001e079 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001e06f:	83 ec 0c             	sub    esp,0xc
c001e072:	68 58 02 00 00       	push   0x258
c001e077:	eb 13                	jmp    c001e08c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e079:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001e07f:	83 f8 06             	cmp    eax,0x6
c001e082:	77 10                	ja     c001e094 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e084:	83 ec 0c             	sub    esp,0xc
c001e087:	68 dc 05 00 00       	push   0x5dc
c001e08c:	e8 c7 7d ff ff       	call   c0015e58 <milliTenthSleep(unsigned int)>
c001e091:	83 c4 10             	add    esp,0x10
c001e094:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e098:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e09b:	75 06                	jne    c001e0a3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001e09d:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e0a1:	74 15                	je     c001e0b8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e0a3:	83 fb 06             	cmp    ebx,0x6
c001e0a6:	77 10                	ja     c001e0b8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e0a8:	83 ec 0c             	sub    esp,0xc
c001e0ab:	68 c4 09 00 00       	push   0x9c4
c001e0b0:	e8 a3 7d ff ff       	call   c0015e58 <milliTenthSleep(unsigned int)>
c001e0b5:	83 c4 10             	add    esp,0x10
c001e0b8:	43                   	inc    ebx
c001e0b9:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001e0bf:	0f 85 56 ff ff ff    	jne    c001e01b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001e0c5:	83 ec 0c             	sub    esp,0xc
c001e0c8:	68 da 2d 02 c0       	push   0xc0022dda
c001e0cd:	e9 6b ff ff ff       	jmp    c001e03d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e0d2:	0f ba e0 1e          	bt     eax,0x1e
c001e0d6:	73 0d                	jae    c001e0e5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001e0d8:	83 ec 0c             	sub    esp,0xc
c001e0db:	68 ee 2d 02 c0       	push   0xc0022dee
c001e0e0:	e9 58 ff ff ff       	jmp    c001e03d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e0e5:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e0ea:	74 17                	je     c001e103 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e0ec:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e0f1:	74 10                	je     c001e103 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e0f3:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e0f9:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e0fd:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e101:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e103:	31 c0                	xor    eax,eax
c001e105:	83 c4 2c             	add    esp,0x2c
c001e108:	5b                   	pop    ebx
c001e109:	5e                   	pop    esi
c001e10a:	5f                   	pop    edi
c001e10b:	5d                   	pop    ebp
c001e10c:	c3                   	ret    
c001e10d:	90                   	nop

c001e10e <SATAPI::eject()>:
c001e10e:	57                   	push   edi
c001e10f:	b9 03 00 00 00       	mov    ecx,0x3
c001e114:	83 ec 18             	sub    esp,0x18
c001e117:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e11b:	fc                   	cld    
c001e11c:	31 c0                	xor    eax,eax
c001e11e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e120:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e125:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e12a:	50                   	push   eax
c001e12b:	6a 00                	push   0x0
c001e12d:	6a 00                	push   0x0
c001e12f:	6a 00                	push   0x0
c001e131:	6a 00                	push   0x0
c001e133:	6a 02                	push   0x2
c001e135:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e139:	50                   	push   eax
c001e13a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e13e:	e8 ed fc ff ff       	call   c001de30 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e143:	31 c0                	xor    eax,eax
c001e145:	83 c4 38             	add    esp,0x38
c001e148:	5f                   	pop    edi
c001e149:	c3                   	ret    

c001e14a <SATAPI::detectMedia()>:
c001e14a:	53                   	push   ebx
c001e14b:	83 ec 14             	sub    esp,0x14
c001e14e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e152:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e158:	e8 27 02 ff ff       	call   c000e384 <VCache::writeWriteBuffer()>
c001e15d:	59                   	pop    ecx
c001e15e:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e164:	e8 0b 02 ff ff       	call   c000e374 <VCache::invalidateReadBuffer()>
c001e169:	c7 04 24 03 2e 02 c0 	mov    DWORD PTR [esp],0xc0022e03
c001e170:	e8 d0 c7 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e175:	83 c4 10             	add    esp,0x10
c001e178:	31 c0                	xor    eax,eax
c001e17a:	8b 14 85 80 88 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7780]
c001e181:	85 d2                	test   edx,edx
c001e183:	74 0f                	je     c001e194 <SATAPI::detectMedia()+0x4a>
c001e185:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e18b:	75 07                	jne    c001e194 <SATAPI::detectMedia()+0x4a>
c001e18d:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e194:	40                   	inc    eax
c001e195:	83 f8 1a             	cmp    eax,0x1a
c001e198:	75 e0                	jne    c001e17a <SATAPI::detectMedia()+0x30>
c001e19a:	83 c4 08             	add    esp,0x8
c001e19d:	5b                   	pop    ebx
c001e19e:	c3                   	ret    
c001e19f:	90                   	nop

c001e1a0 <SATAPI::open(int, int, void*)>:
c001e1a0:	56                   	push   esi
c001e1a1:	53                   	push   ebx
c001e1a2:	51                   	push   ecx
c001e1a3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e1a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e1ab:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e1b5:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e1bb:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e1c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e1c9:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e1d3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e1d9:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e1e0:	e8 da 9b fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e1e5:	89 c6                	mov    esi,eax
c001e1e7:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e1ed:	81 c6 00 10 00 00    	add    esi,0x1000
c001e1f3:	e8 c7 9b fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e1f8:	39 c6                	cmp    esi,eax
c001e1fa:	74 10                	je     c001e20c <SATAPI::open(int, int, void*)+0x6c>
c001e1fc:	83 ec 0c             	sub    esp,0xc
c001e1ff:	68 18 2e 02 c0       	push   0xc0022e18
c001e204:	e8 60 30 ff ff       	call   c0011269 <KePanic(char const*)>
c001e209:	83 c4 10             	add    esp,0x10
c001e20c:	83 ec 0c             	sub    esp,0xc
c001e20f:	6a 02                	push   0x2
c001e211:	e8 f7 b3 fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001e216:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e21c:	6a 03                	push   0x3
c001e21e:	50                   	push   eax
c001e21f:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e225:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001e22b:	e8 f0 ba fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001e230:	83 c4 14             	add    esp,0x14
c001e233:	68 78 01 00 00       	push   0x178
c001e238:	e8 79 98 fe ff       	call   c0007ab6 <malloc>
c001e23d:	83 c4 0c             	add    esp,0xc
c001e240:	89 c6                	mov    esi,eax
c001e242:	6a 00                	push   0x0
c001e244:	68 ff ff ff 7f       	push   0x7fffffff
c001e249:	6a 00                	push   0x0
c001e24b:	6a 00                	push   0x0
c001e24d:	53                   	push   ebx
c001e24e:	68 2e 2e 02 c0       	push   0xc0022e2e
c001e253:	50                   	push   eax
c001e254:	e8 87 f5 fe ff       	call   c000d7e0 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e259:	83 c4 14             	add    esp,0x14
c001e25c:	56                   	push   esi
c001e25d:	e8 3e f6 fe ff       	call   c000d8a0 <LogicalDisk::assignDriveLetter()>
c001e262:	5a                   	pop    edx
c001e263:	0f be c0             	movsx  eax,al
c001e266:	59                   	pop    ecx
c001e267:	50                   	push   eax
c001e268:	68 80 2c 02 c0       	push   0xc0022c80
c001e26d:	e8 d3 c6 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e272:	58                   	pop    eax
c001e273:	5a                   	pop    edx
c001e274:	56                   	push   esi
c001e275:	53                   	push   ebx
c001e276:	e8 bf e3 fe ff       	call   c000c63a <Device::addChild(Device*)>
c001e27b:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e281:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e284:	e8 e5 e7 fe ff       	call   c000ca6e <PhysicalDisk::startCache()>
c001e289:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e290:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e293:	e8 b2 fe ff ff       	call   c001e14a <SATAPI::detectMedia()>
c001e298:	83 c4 14             	add    esp,0x14
c001e29b:	31 c0                	xor    eax,eax
c001e29d:	5b                   	pop    ebx
c001e29e:	5e                   	pop    esi
c001e29f:	c3                   	ret    

c001e2a0 <SATAPI::read(unsigned long long, int, void*)>:
c001e2a0:	57                   	push   edi
c001e2a1:	56                   	push   esi
c001e2a2:	53                   	push   ebx
c001e2a3:	83 ec 30             	sub    esp,0x30
c001e2a6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e2aa:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001e2ae:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001e2b2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001e2b6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e2ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e2be:	83 fe 04             	cmp    esi,0x4
c001e2c1:	7e 10                	jle    c001e2d3 <SATAPI::read(unsigned long long, int, void*)+0x33>
c001e2c3:	83 ec 0c             	sub    esp,0xc
c001e2c6:	68 3c 2e 02 c0       	push   0xc0022e3c
c001e2cb:	e8 99 2f ff ff       	call   c0011269 <KePanic(char const*)>
c001e2d0:	83 c4 10             	add    esp,0x10
c001e2d3:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e2d9:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e2df:	51                   	push   ecx
c001e2e0:	50                   	push   eax
c001e2e1:	83 c0 02             	add    eax,0x2
c001e2e4:	c1 e0 07             	shl    eax,0x7
c001e2e7:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e2ed:	50                   	push   eax
c001e2ee:	52                   	push   edx
c001e2ef:	e8 8c e1 ff ff       	call   c001c480 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e2f4:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e2f8:	b9 03 00 00 00       	mov    ecx,0x3
c001e2fd:	fc                   	cld    
c001e2fe:	31 c0                	xor    eax,eax
c001e300:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e302:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e307:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e30c:	83 c4 0c             	add    esp,0xc
c001e30f:	6a 00                	push   0x0
c001e311:	6a 00                	push   0x0
c001e313:	6a 00                	push   0x0
c001e315:	6a 00                	push   0x0
c001e317:	6a 02                	push   0x2
c001e319:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e31d:	50                   	push   eax
c001e31e:	53                   	push   ebx
c001e31f:	e8 0c fb ff ff       	call   c001de30 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e324:	83 c4 20             	add    esp,0x20
c001e327:	85 c0                	test   eax,eax
c001e329:	75 44                	jne    c001e36f <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001e32b:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e32f:	b9 03 00 00 00       	mov    ecx,0x3
c001e334:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e336:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e33a:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e33f:	0f c8                	bswap  eax
c001e341:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e345:	89 f0                	mov    eax,esi
c001e347:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e34b:	50                   	push   eax
c001e34c:	56                   	push   esi
c001e34d:	c1 e6 0b             	shl    esi,0xb
c001e350:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e354:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e358:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e35c:	56                   	push   esi
c001e35d:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e361:	50                   	push   eax
c001e362:	53                   	push   ebx
c001e363:	e8 c8 fa ff ff       	call   c001de30 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e368:	83 c4 20             	add    esp,0x20
c001e36b:	85 c0                	test   eax,eax
c001e36d:	74 14                	je     c001e383 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001e36f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e373:	83 ec 0c             	sub    esp,0xc
c001e376:	53                   	push   ebx
c001e377:	e8 ce fd ff ff       	call   c001e14a <SATAPI::detectMedia()>
c001e37c:	83 c4 10             	add    esp,0x10
c001e37f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e383:	83 c4 30             	add    esp,0x30
c001e386:	5b                   	pop    ebx
c001e387:	5e                   	pop    esi
c001e388:	5f                   	pop    edi
c001e389:	c3                   	ret    

c001e38a <IOAPIC::close(int, int, void*)>:
c001e38a:	b8 00 00 00 00       	mov    eax,0x0
c001e38f:	c3                   	ret    

c001e390 <apicGetBase()>:
c001e390:	55                   	push   ebp
c001e391:	89 e5                	mov    ebp,esp
c001e393:	83 ec 18             	sub    esp,0x18
c001e396:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e39b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e3a1:	83 e0 08             	and    eax,0x8
c001e3a4:	0f b6 c0             	movzx  eax,al
c001e3a7:	85 c0                	test   eax,eax
c001e3a9:	75 07                	jne    c001e3b2 <apicGetBase()+0x22>
c001e3ab:	b8 00 00 00 00       	mov    eax,0x0
c001e3b0:	eb 21                	jmp    c001e3d3 <apicGetBase()+0x43>
c001e3b2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e3b7:	83 ec 08             	sub    esp,0x8
c001e3ba:	6a 1b                	push   0x1b
c001e3bc:	50                   	push   eax
c001e3bd:	e8 fe 8c fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c001e3c2:	83 c4 10             	add    esp,0x10
c001e3c5:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e3c8:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e3cb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e3ce:	25 00 00 ff ff       	and    eax,0xffff0000
c001e3d3:	c9                   	leave  
c001e3d4:	c3                   	ret    
c001e3d5:	90                   	nop

c001e3d6 <IOAPIC::IOAPIC()>:
c001e3d6:	83 ec 0c             	sub    esp,0xc
c001e3d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3dd:	83 ec 08             	sub    esp,0x8
c001e3e0:	68 a0 2e 02 c0       	push   0xc0022ea0
c001e3e5:	50                   	push   eax
c001e3e6:	e8 e7 e3 fe ff       	call   c000c7d2 <Device::Device(char const*)>
c001e3eb:	83 c4 10             	add    esp,0x10
c001e3ee:	ba b0 2e 02 c0       	mov    edx,0xc0022eb0
c001e3f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3f7:	89 10                	mov    DWORD PTR [eax],edx
c001e3f9:	90                   	nop
c001e3fa:	83 c4 0c             	add    esp,0xc
c001e3fd:	c3                   	ret    

c001e3fe <apicOpen()>:
c001e3fe:	55                   	push   ebp
c001e3ff:	89 e5                	mov    ebp,esp
c001e401:	53                   	push   ebx
c001e402:	83 ec 34             	sub    esp,0x34
c001e405:	a0 00 a1 02 c0       	mov    al,ds:0xc002a100
c001e40a:	83 f0 01             	xor    eax,0x1
c001e40d:	0f b6 c0             	movzx  eax,al
c001e410:	85 c0                	test   eax,eax
c001e412:	0f 84 a3 00 00 00    	je     c001e4bb <apicOpen()+0xbd>
c001e418:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e41c:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c001e421:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e425:	0f b6 c0             	movzx  eax,al
c001e428:	39 c2                	cmp    edx,eax
c001e42a:	0f 83 84 00 00 00    	jae    c001e4b4 <apicOpen()+0xb6>
c001e430:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001e437:	83 ec 0c             	sub    esp,0xc
c001e43a:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001e43d:	e8 74 96 fe ff       	call   c0007ab6 <malloc>
c001e442:	83 c4 10             	add    esp,0x10
c001e445:	89 c3                	mov    ebx,eax
c001e447:	83 ec 0c             	sub    esp,0xc
c001e44a:	53                   	push   ebx
c001e44b:	e8 86 ff ff ff       	call   c001e3d6 <IOAPIC::IOAPIC()>
c001e450:	83 c4 10             	add    esp,0x10
c001e453:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001e456:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001e45a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e45d:	89 14 85 e0 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5f20],edx
c001e464:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c001e469:	83 c0 01             	add    eax,0x1
c001e46c:	a3 c0 a0 02 c0       	mov    ds:0xc002a0c0,eax
c001e471:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e476:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001e47c:	83 ec 08             	sub    esp,0x8
c001e47f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e482:	50                   	push   eax
c001e483:	e8 b2 e1 fe ff       	call   c000c63a <Device::addChild(Device*)>
c001e488:	83 c4 10             	add    esp,0x10
c001e48b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e48e:	8b 00                	mov    eax,DWORD PTR [eax]
c001e490:	83 c0 08             	add    eax,0x8
c001e493:	8b 00                	mov    eax,DWORD PTR [eax]
c001e495:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e499:	6a 00                	push   0x0
c001e49b:	6a 00                	push   0x0
c001e49d:	52                   	push   edx
c001e49e:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e4a1:	ff d0                	call   eax
c001e4a3:	83 c4 10             	add    esp,0x10
c001e4a6:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e4a9:	83 c0 01             	add    eax,0x1
c001e4ac:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001e4af:	e9 68 ff ff ff       	jmp    c001e41c <apicOpen()+0x1e>
c001e4b4:	c6 05 00 a1 02 c0 01 	mov    BYTE PTR ds:0xc002a100,0x1
c001e4bb:	e8 d0 fe ff ff       	call   c001e390 <apicGetBase()>
c001e4c0:	05 f0 00 00 00       	add    eax,0xf0
c001e4c5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e4c8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e4cb:	8b 00                	mov    eax,DWORD PTR [eax]
c001e4cd:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e4d0:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001e4d7:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001e4de:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e4e1:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001e4e4:	89 10                	mov    DWORD PTR [eax],edx
c001e4e6:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e4ed:	a1 30 8b 02 c0       	mov    eax,ds:0xc0028b30
c001e4f2:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e4f5:	7d 7c                	jge    c001e573 <apicOpen()+0x175>
c001e4f7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e4fa:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e501:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001e504:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e507:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e50e:	c1 e8 08             	shr    eax,0x8
c001e511:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001e515:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e518:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e51f:	c1 e8 18             	shr    eax,0x18
c001e522:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001e525:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001e529:	3d ff 00 00 00       	cmp    eax,0xff
c001e52e:	75 3a                	jne    c001e56a <apicOpen()+0x16c>
c001e530:	e8 5b fe ff ff       	call   c001e390 <apicGetBase()>
c001e535:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001e539:	83 fa 01             	cmp    edx,0x1
c001e53c:	75 07                	jne    c001e545 <apicOpen()+0x147>
c001e53e:	ba 60 03 00 00       	mov    edx,0x360
c001e543:	eb 05                	jmp    c001e54a <apicOpen()+0x14c>
c001e545:	ba 50 03 00 00       	mov    edx,0x350
c001e54a:	01 d0                	add    eax,edx
c001e54c:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e54f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e552:	8b 00                	mov    eax,DWORD PTR [eax]
c001e554:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001e557:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001e55e:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001e562:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e565:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001e568:	89 10                	mov    DWORD PTR [eax],edx
c001e56a:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001e56e:	e9 7a ff ff ff       	jmp    c001e4ed <apicOpen()+0xef>
c001e573:	90                   	nop
c001e574:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e577:	c9                   	leave  
c001e578:	c3                   	ret    
c001e579:	90                   	nop

c001e57a <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001e57a:	55                   	push   ebp
c001e57b:	89 e5                	mov    ebp,esp
c001e57d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e580:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e586:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e589:	72 1d                	jb     c001e5a8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e58b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e58e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e594:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e597:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e59d:	01 d0                	add    eax,edx
c001e59f:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e5a2:	73 04                	jae    c001e5a8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e5a4:	b0 01                	mov    al,0x1
c001e5a6:	eb 02                	jmp    c001e5aa <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001e5a8:	b0 00                	mov    al,0x0
c001e5aa:	5d                   	pop    ebp
c001e5ab:	c3                   	ret    

c001e5ac <IOAPIC::read(int)>:
c001e5ac:	55                   	push   ebp
c001e5ad:	89 e5                	mov    ebp,esp
c001e5af:	83 ec 10             	sub    esp,0x10
c001e5b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5b5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e5bb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e5be:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e5c1:	0f b6 d0             	movzx  edx,al
c001e5c4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e5c7:	89 10                	mov    DWORD PTR [eax],edx
c001e5c9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e5cc:	83 c0 10             	add    eax,0x10
c001e5cf:	8b 00                	mov    eax,DWORD PTR [eax]
c001e5d1:	c9                   	leave  
c001e5d2:	c3                   	ret    
c001e5d3:	90                   	nop

c001e5d4 <IOAPIC::open(int, int, void*)>:
c001e5d4:	55                   	push   ebp
c001e5d5:	89 e5                	mov    ebp,esp
c001e5d7:	57                   	push   edi
c001e5d8:	56                   	push   esi
c001e5d9:	53                   	push   ebx
c001e5da:	83 ec 04             	sub    esp,0x4
c001e5dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5e0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e5e3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e5e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5ec:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e5f2:	8b 14 85 20 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd73e0]
c001e5f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5fc:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e602:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e605:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e60b:	8b 14 85 a0 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7360]
c001e612:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e615:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e61b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e61e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001e624:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e627:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e62d:	0f b6 f0             	movzx  esi,al
c001e630:	89 d0                	mov    eax,edx
c001e632:	ba 00 00 00 00       	mov    edx,0x0
c001e637:	89 c7                	mov    edi,eax
c001e639:	83 e7 ff             	and    edi,0xffffffff
c001e63c:	89 f9                	mov    ecx,edi
c001e63e:	0f b6 da             	movzx  ebx,dl
c001e641:	89 c8                	mov    eax,ecx
c001e643:	89 da                	mov    edx,ebx
c001e645:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e648:	8d 5e 08             	lea    ebx,[esi+0x8]
c001e64b:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e64f:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e653:	83 e0 00             	and    eax,0x0
c001e656:	09 d0                	or     eax,edx
c001e658:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e65c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e65f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e665:	8d 50 01             	lea    edx,[eax+0x1]
c001e668:	88 d1                	mov    cl,dl
c001e66a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001e66d:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001e673:	0f b6 d0             	movzx  edx,al
c001e676:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e679:	83 c2 08             	add    edx,0x8
c001e67c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e680:	0f b6 c9             	movzx  ecx,cl
c001e683:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e689:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e68d:	6a 01                	push   0x1
c001e68f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e692:	e8 15 ff ff ff       	call   c001e5ac <IOAPIC::read(int)>
c001e697:	83 c4 08             	add    esp,0x8
c001e69a:	c1 f8 10             	sar    eax,0x10
c001e69d:	0f b6 c0             	movzx  eax,al
c001e6a0:	8d 50 01             	lea    edx,[eax+0x1]
c001e6a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6a6:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e6ac:	b8 00 00 00 00       	mov    eax,0x0
c001e6b1:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e6b4:	5b                   	pop    ebx
c001e6b5:	5e                   	pop    esi
c001e6b6:	5f                   	pop    edi
c001e6b7:	5d                   	pop    ebp
c001e6b8:	c3                   	ret    
c001e6b9:	90                   	nop

c001e6ba <IOAPIC::write(int, int)>:
c001e6ba:	55                   	push   ebp
c001e6bb:	89 e5                	mov    ebp,esp
c001e6bd:	83 ec 10             	sub    esp,0x10
c001e6c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6c3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e6c9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e6cc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e6cf:	0f b6 d0             	movzx  edx,al
c001e6d2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e6d5:	89 10                	mov    DWORD PTR [eax],edx
c001e6d7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e6da:	8d 50 10             	lea    edx,[eax+0x10]
c001e6dd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e6e0:	89 02                	mov    DWORD PTR [edx],eax
c001e6e2:	90                   	nop
c001e6e3:	c9                   	leave  
c001e6e4:	c3                   	ret    
c001e6e5:	90                   	nop

c001e6e6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001e6e6:	55                   	push   ebp
c001e6e7:	89 e5                	mov    ebp,esp
c001e6e9:	53                   	push   ebx
c001e6ea:	83 ec 2c             	sub    esp,0x2c
c001e6ed:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e6f0:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001e6f3:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001e6f6:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001e6f9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e6fc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e6ff:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e702:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e705:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001e708:	88 d8                	mov    al,bl
c001e70a:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001e70d:	88 c8                	mov    al,cl
c001e70f:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001e712:	88 d0                	mov    al,dl
c001e714:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001e717:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e71b:	83 c0 08             	add    eax,0x8
c001e71e:	01 c0                	add    eax,eax
c001e720:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e723:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e727:	83 c0 08             	add    eax,0x8
c001e72a:	01 c0                	add    eax,eax
c001e72c:	83 c0 01             	add    eax,0x1
c001e72f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001e732:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e735:	50                   	push   eax
c001e736:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e739:	e8 6e fe ff ff       	call   c001e5ac <IOAPIC::read(int)>
c001e73e:	83 c4 08             	add    esp,0x8
c001e741:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e744:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001e74b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e74e:	c1 e0 18             	shl    eax,0x18
c001e751:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001e754:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001e757:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e75a:	52                   	push   edx
c001e75b:	50                   	push   eax
c001e75c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e75f:	e8 56 ff ff ff       	call   c001e6ba <IOAPIC::write(int, int)>
c001e764:	83 c4 0c             	add    esp,0xc
c001e767:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e76a:	50                   	push   eax
c001e76b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e76e:	e8 39 fe ff ff       	call   c001e5ac <IOAPIC::read(int)>
c001e773:	83 c4 08             	add    esp,0x8
c001e776:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e779:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001e780:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001e787:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001e78e:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001e792:	85 c0                	test   eax,eax
c001e794:	74 09                	je     c001e79f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001e796:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001e79d:	eb 07                	jmp    c001e7a6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001e79f:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001e7a6:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001e7aa:	85 c0                	test   eax,eax
c001e7ac:	74 09                	je     c001e7b7 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001e7ae:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001e7b5:	eb 07                	jmp    c001e7be <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001e7b7:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001e7be:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001e7c5:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001e7c9:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e7cc:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e7cf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e7d2:	52                   	push   edx
c001e7d3:	50                   	push   eax
c001e7d4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e7d7:	e8 de fe ff ff       	call   c001e6ba <IOAPIC::write(int, int)>
c001e7dc:	83 c4 0c             	add    esp,0xc
c001e7df:	90                   	nop
c001e7e0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e7e3:	c9                   	leave  
c001e7e4:	c3                   	ret    
c001e7e5:	66 90                	xchg   ax,ax
c001e7e7:	90                   	nop

c001e7e8 <APICTimer::close(int, int, void*)>:
c001e7e8:	b8 00 00 00 00       	mov    eax,0x0
c001e7ed:	c3                   	ret    
c001e7ee:	66 90                	xchg   ax,ax

c001e7f0 <apicTimerHandler(regs*, void*)>:
c001e7f0:	83 ec 0c             	sub    esp,0xc
c001e7f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e7f7:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e7f9:	b8 10 27 00 00       	mov    eax,0x2710
c001e7fe:	ba 00 00 00 00       	mov    edx,0x0
c001e803:	f7 f1                	div    ecx
c001e805:	83 ec 0c             	sub    esp,0xc
c001e808:	50                   	push   eax
c001e809:	e8 8e f8 fe ff       	call   c000e09c <timerHandler(unsigned int)>
c001e80e:	83 c4 10             	add    esp,0x10
c001e811:	90                   	nop
c001e812:	83 c4 0c             	add    esp,0xc
c001e815:	c3                   	ret    
c001e816:	66 90                	xchg   ax,ax

c001e818 <APICTimer::open(int, int, void*)>:
c001e818:	83 ec 0c             	sub    esp,0xc
c001e81b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e81f:	8b 00                	mov    eax,DWORD PTR [eax]
c001e821:	83 c0 24             	add    eax,0x24
c001e824:	8b 00                	mov    eax,DWORD PTR [eax]
c001e826:	83 ec 08             	sub    esp,0x8
c001e829:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e82d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e831:	ff d0                	call   eax
c001e833:	83 c4 10             	add    esp,0x10
c001e836:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e83a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e83e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e848:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e84c:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001e852:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e856:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e85c:	83 ec 0c             	sub    esp,0xc
c001e85f:	51                   	push   ecx
c001e860:	6a 01                	push   0x1
c001e862:	68 f0 e7 01 c0       	push   0xc001e7f0
c001e867:	52                   	push   edx
c001e868:	50                   	push   eax
c001e869:	e8 78 dd fe ff       	call   c000c5e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e86e:	83 c4 20             	add    esp,0x20
c001e871:	89 c2                	mov    edx,eax
c001e873:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e877:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e87d:	b8 00 00 00 00       	mov    eax,0x0
c001e882:	83 c4 0c             	add    esp,0xc
c001e885:	c3                   	ret    
c001e886:	66 90                	xchg   ax,ax

c001e888 <APICTimer::write(int)>:
c001e888:	83 ec 0c             	sub    esp,0xc
c001e88b:	83 ec 0c             	sub    esp,0xc
c001e88e:	68 d4 2e 02 c0       	push   0xc0022ed4
c001e893:	e8 d1 29 ff ff       	call   c0011269 <KePanic(char const*)>
c001e898:	83 c4 10             	add    esp,0x10
c001e89b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e89f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e8a3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e8a9:	90                   	nop
c001e8aa:	83 c4 0c             	add    esp,0xc
c001e8ad:	c3                   	ret    
c001e8ae:	66 90                	xchg   ax,ax

c001e8b0 <APICTimer::APICTimer()>:
c001e8b0:	83 ec 0c             	sub    esp,0xc
c001e8b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8b7:	83 ec 08             	sub    esp,0x8
c001e8ba:	68 e4 2e 02 c0       	push   0xc0022ee4
c001e8bf:	50                   	push   eax
c001e8c0:	e8 0b f7 fe ff       	call   c000dfd0 <Timer::Timer(char const*)>
c001e8c5:	83 c4 10             	add    esp,0x10
c001e8c8:	ba f8 2e 02 c0       	mov    edx,0xc0022ef8
c001e8cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8d1:	89 10                	mov    DWORD PTR [eax],edx
c001e8d3:	90                   	nop
c001e8d4:	83 c4 0c             	add    esp,0xc
c001e8d7:	c3                   	ret    

c001e8d8 <PIT::write(int)>:
c001e8d8:	83 ec 10             	sub    esp,0x10
c001e8db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e8df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e8e3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e8e9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e8ed:	a3 04 a1 02 c0       	mov    ds:0xc002a104,eax
c001e8f2:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001e8f7:	89 c2                	mov    edx,eax
c001e8f9:	c1 fa 1f             	sar    edx,0x1f
c001e8fc:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001e900:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e904:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001e90b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001e910:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001e914:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001e919:	ee                   	out    dx,al
c001e91a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e91e:	0f b6 c0             	movzx  eax,al
c001e921:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001e928:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001e92c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001e930:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001e935:	ee                   	out    dx,al
c001e936:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e93a:	c1 f8 08             	sar    eax,0x8
c001e93d:	0f b6 c0             	movzx  eax,al
c001e940:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001e947:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e94b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e94f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001e954:	ee                   	out    dx,al
c001e955:	90                   	nop
c001e956:	83 c4 10             	add    esp,0x10
c001e959:	c3                   	ret    
c001e95a:	66 90                	xchg   ax,ax

c001e95c <pitHandler(regs*, void*)>:
c001e95c:	83 ec 0c             	sub    esp,0xc
c001e95f:	8b 0d 04 a1 02 c0    	mov    ecx,DWORD PTR ds:0xc002a104
c001e965:	b8 10 27 00 00       	mov    eax,0x2710
c001e96a:	89 c2                	mov    edx,eax
c001e96c:	c1 fa 1f             	sar    edx,0x1f
c001e96f:	f7 f9                	idiv   ecx
c001e971:	83 ec 0c             	sub    esp,0xc
c001e974:	50                   	push   eax
c001e975:	e8 22 f7 fe ff       	call   c000e09c <timerHandler(unsigned int)>
c001e97a:	83 c4 10             	add    esp,0x10
c001e97d:	90                   	nop
c001e97e:	83 c4 0c             	add    esp,0xc
c001e981:	c3                   	ret    
c001e982:	66 90                	xchg   ax,ax

c001e984 <PIT::open(int, int, void*)>:
c001e984:	83 ec 0c             	sub    esp,0xc
c001e987:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e98b:	8b 00                	mov    eax,DWORD PTR [eax]
c001e98d:	83 c0 24             	add    eax,0x24
c001e990:	8b 00                	mov    eax,DWORD PTR [eax]
c001e992:	83 ec 08             	sub    esp,0x8
c001e995:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e999:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e99d:	ff d0                	call   eax
c001e99f:	83 c4 10             	add    esp,0x10
c001e9a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9a6:	83 ec 0c             	sub    esp,0xc
c001e9a9:	6a 00                	push   0x0
c001e9ab:	6a 01                	push   0x1
c001e9ad:	68 5c e9 01 c0       	push   0xc001e95c
c001e9b2:	6a 00                	push   0x0
c001e9b4:	50                   	push   eax
c001e9b5:	e8 2c dc fe ff       	call   c000c5e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e9ba:	83 c4 20             	add    esp,0x20
c001e9bd:	89 c2                	mov    edx,eax
c001e9bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9c3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e9c9:	b8 00 00 00 00       	mov    eax,0x0
c001e9ce:	83 c4 0c             	add    esp,0xc
c001e9d1:	c3                   	ret    
c001e9d2:	66 90                	xchg   ax,ax

c001e9d4 <PIT::close(int, int, void*)>:
c001e9d4:	83 ec 0c             	sub    esp,0xc
c001e9d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9db:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001e9e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9e9:	6a 01                	push   0x1
c001e9eb:	68 5c e9 01 c0       	push   0xc001e95c
c001e9f0:	6a 00                	push   0x0
c001e9f2:	50                   	push   eax
c001e9f3:	e8 24 dc fe ff       	call   c000c61c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001e9f8:	83 c4 10             	add    esp,0x10
c001e9fb:	b8 00 00 00 00       	mov    eax,0x0
c001ea00:	83 c4 0c             	add    esp,0xc
c001ea03:	c3                   	ret    

c001ea04 <PIT::PIT()>:
c001ea04:	83 ec 0c             	sub    esp,0xc
c001ea07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea0b:	83 ec 08             	sub    esp,0x8
c001ea0e:	68 20 2f 02 c0       	push   0xc0022f20
c001ea13:	50                   	push   eax
c001ea14:	e8 b7 f5 fe ff       	call   c000dfd0 <Timer::Timer(char const*)>
c001ea19:	83 c4 10             	add    esp,0x10
c001ea1c:	ba 48 2f 02 c0       	mov    edx,0xc0022f48
c001ea21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea25:	89 10                	mov    DWORD PTR [eax],edx
c001ea27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea2b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea31:	0f b6 d0             	movzx  edx,al
c001ea34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea38:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001ea3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea43:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea49:	0f b6 d0             	movzx  edx,al
c001ea4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea50:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001ea55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea59:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea5f:	8d 50 01             	lea    edx,[eax+0x1]
c001ea62:	88 d1                	mov    cl,dl
c001ea64:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ea68:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001ea6e:	0f b6 d0             	movzx  edx,al
c001ea71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea75:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ea79:	83 e1 3f             	and    ecx,0x3f
c001ea7c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ea80:	90                   	nop
c001ea81:	83 c4 0c             	add    esp,0xc
c001ea84:	c3                   	ret    
c001ea85:	66 90                	xchg   ax,ax
c001ea87:	66 90                	xchg   ax,ax
c001ea89:	66 90                	xchg   ax,ax
c001ea8b:	66 90                	xchg   ax,ax
c001ea8d:	66 90                	xchg   ax,ax
c001ea8f:	90                   	nop

c001ea90 <avxDetect>:
c001ea90:	b8 01 00 00 00       	mov    eax,0x1
c001ea95:	0f a2                	cpuid  
c001ea97:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001ea9d:	74 15                	je     c001eab4 <avxDetect.noAVX>
c001ea9f:	b8 01 00 00 00       	mov    eax,0x1
c001eaa4:	0f a2                	cpuid  
c001eaa6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001eaac:	74 06                	je     c001eab4 <avxDetect.noAVX>
c001eaae:	b8 01 00 00 00       	mov    eax,0x1
c001eab3:	c3                   	ret    

c001eab4 <avxDetect.noAVX>:
c001eab4:	b8 00 00 00 00       	mov    eax,0x0
c001eab9:	c3                   	ret    

c001eaba <avxSave>:
c001eaba:	53                   	push   ebx
c001eabb:	52                   	push   edx
c001eabc:	31 c0                	xor    eax,eax
c001eabe:	48                   	dec    eax
c001eabf:	89 c2                	mov    edx,eax
c001eac1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001eac5:	0f ae 23             	xsave  [ebx]
c001eac8:	5a                   	pop    edx
c001eac9:	5b                   	pop    ebx
c001eaca:	c3                   	ret    

c001eacb <avxLoad>:
c001eacb:	53                   	push   ebx
c001eacc:	52                   	push   edx
c001eacd:	31 c0                	xor    eax,eax
c001eacf:	48                   	dec    eax
c001ead0:	89 c2                	mov    edx,eax
c001ead2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ead6:	0f ae 2b             	xrstor [ebx]
c001ead9:	5a                   	pop    edx
c001eada:	5b                   	pop    ebx
c001eadb:	c3                   	ret    

c001eadc <avxInit>:
c001eadc:	e8 67 03 00 00       	call   c001ee48 <sseInit>
c001eae1:	50                   	push   eax
c001eae2:	51                   	push   ecx
c001eae3:	0f 20 e0             	mov    eax,cr4
c001eae6:	0d 00 00 04 00       	or     eax,0x40000
c001eaeb:	0f 22 e0             	mov    cr4,eax
c001eaee:	31 c9                	xor    ecx,ecx
c001eaf0:	0f 01 d0             	xgetbv 
c001eaf3:	0d 07 00 00 00       	or     eax,0x7
c001eaf8:	0f 01 d1             	xsetbv 
c001eafb:	59                   	pop    ecx
c001eafc:	58                   	pop    eax
c001eafd:	c3                   	ret    

c001eafe <avxClose>:
c001eafe:	c3                   	ret    

c001eaff <wouldSheSayYes>:
c001eaff:	c3                   	ret    
c001eb00:	49                   	dec    ecx
c001eb01:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001eb05:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001eb09:	75 20                	jne    c001eb2b <isr0+0xb>
c001eb0b:	4e                   	dec    esi
c001eb0c:	79 61                	jns    c001eb6f <isr7+0x3>
c001eb0e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001eb13:	66 90                	xchg   ax,ax
c001eb15:	66 90                	xchg   ax,ax
c001eb17:	66 90                	xchg   ax,ax
c001eb19:	66 90                	xchg   ax,ax
c001eb1b:	66 90                	xchg   ax,ax
c001eb1d:	66 90                	xchg   ax,ax
c001eb1f:	90                   	nop

c001eb20 <isr0>:
c001eb20:	fa                   	cli    
c001eb21:	68 00 00 00 00       	push   0x0
c001eb26:	68 00 00 00 00       	push   0x0
c001eb2b:	e9 56 01 00 00       	jmp    c001ec86 <int_common_stub>

c001eb30 <isr1>:
c001eb30:	fa                   	cli    
c001eb31:	6a 00                	push   0x0
c001eb33:	6a 01                	push   0x1
c001eb35:	e9 4c 01 00 00       	jmp    c001ec86 <int_common_stub>

c001eb3a <isr2>:
c001eb3a:	fa                   	cli    
c001eb3b:	6a 00                	push   0x0
c001eb3d:	6a 02                	push   0x2
c001eb3f:	e9 42 01 00 00       	jmp    c001ec86 <int_common_stub>

c001eb44 <isr3>:
c001eb44:	fa                   	cli    
c001eb45:	6a 00                	push   0x0
c001eb47:	6a 03                	push   0x3
c001eb49:	e9 38 01 00 00       	jmp    c001ec86 <int_common_stub>

c001eb4e <isr4>:
c001eb4e:	fa                   	cli    
c001eb4f:	6a 00                	push   0x0
c001eb51:	6a 04                	push   0x4
c001eb53:	e9 2e 01 00 00       	jmp    c001ec86 <int_common_stub>

c001eb58 <isr5>:
c001eb58:	fa                   	cli    
c001eb59:	6a 00                	push   0x0
c001eb5b:	6a 05                	push   0x5
c001eb5d:	e9 24 01 00 00       	jmp    c001ec86 <int_common_stub>

c001eb62 <isr6>:
c001eb62:	fa                   	cli    
c001eb63:	6a 00                	push   0x0
c001eb65:	6a 06                	push   0x6
c001eb67:	e9 1a 01 00 00       	jmp    c001ec86 <int_common_stub>

c001eb6c <isr7>:
c001eb6c:	fa                   	cli    
c001eb6d:	6a 00                	push   0x0
c001eb6f:	6a 07                	push   0x7
c001eb71:	e9 10 01 00 00       	jmp    c001ec86 <int_common_stub>

c001eb76 <isr8>:
c001eb76:	fa                   	cli    
c001eb77:	6a 08                	push   0x8
c001eb79:	e9 08 01 00 00       	jmp    c001ec86 <int_common_stub>

c001eb7e <isr9>:
c001eb7e:	fa                   	cli    
c001eb7f:	6a 00                	push   0x0
c001eb81:	6a 09                	push   0x9
c001eb83:	e9 fe 00 00 00       	jmp    c001ec86 <int_common_stub>

c001eb88 <isr10>:
c001eb88:	fa                   	cli    
c001eb89:	6a 0a                	push   0xa
c001eb8b:	e9 f6 00 00 00       	jmp    c001ec86 <int_common_stub>

c001eb90 <isr11>:
c001eb90:	fa                   	cli    
c001eb91:	6a 0b                	push   0xb
c001eb93:	e9 ee 00 00 00       	jmp    c001ec86 <int_common_stub>

c001eb98 <isr12>:
c001eb98:	fa                   	cli    
c001eb99:	6a 0c                	push   0xc
c001eb9b:	e9 e6 00 00 00       	jmp    c001ec86 <int_common_stub>

c001eba0 <isr13>:
c001eba0:	fa                   	cli    
c001eba1:	6a 0d                	push   0xd
c001eba3:	53                   	push   ebx
c001eba4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001eba8:	81 fb 76 ed 01 c0    	cmp    ebx,0xc001ed76
c001ebae:	5b                   	pop    ebx
c001ebaf:	0f 84 c3 01 00 00    	je     c001ed78 <finishSignal2>
c001ebb5:	e9 cc 00 00 00       	jmp    c001ec86 <int_common_stub>

c001ebba <isr14>:
c001ebba:	fa                   	cli    
c001ebbb:	6a 0e                	push   0xe
c001ebbd:	e9 c4 00 00 00       	jmp    c001ec86 <int_common_stub>

c001ebc2 <isr15>:
c001ebc2:	fa                   	cli    
c001ebc3:	6a 00                	push   0x0
c001ebc5:	6a 0f                	push   0xf
c001ebc7:	e9 ba 00 00 00       	jmp    c001ec86 <int_common_stub>

c001ebcc <isr16>:
c001ebcc:	fa                   	cli    
c001ebcd:	6a 00                	push   0x0
c001ebcf:	6a 10                	push   0x10
c001ebd1:	e9 b0 00 00 00       	jmp    c001ec86 <int_common_stub>

c001ebd6 <isr17>:
c001ebd6:	fa                   	cli    
c001ebd7:	6a 00                	push   0x0
c001ebd9:	6a 11                	push   0x11
c001ebdb:	e9 a6 00 00 00       	jmp    c001ec86 <int_common_stub>

c001ebe0 <isr18>:
c001ebe0:	fa                   	cli    
c001ebe1:	6a 00                	push   0x0
c001ebe3:	6a 12                	push   0x12
c001ebe5:	e9 9c 00 00 00       	jmp    c001ec86 <int_common_stub>

c001ebea <irq3>:
c001ebea:	fa                   	cli    
c001ebeb:	6a 00                	push   0x0
c001ebed:	6a 23                	push   0x23
c001ebef:	e9 92 00 00 00       	jmp    c001ec86 <int_common_stub>

c001ebf4 <irq4>:
c001ebf4:	fa                   	cli    
c001ebf5:	6a 00                	push   0x0
c001ebf7:	6a 24                	push   0x24
c001ebf9:	e9 88 00 00 00       	jmp    c001ec86 <int_common_stub>

c001ebfe <irq5>:
c001ebfe:	fa                   	cli    
c001ebff:	6a 00                	push   0x0
c001ec01:	6a 25                	push   0x25
c001ec03:	e9 7e 00 00 00       	jmp    c001ec86 <int_common_stub>

c001ec08 <irq6>:
c001ec08:	fa                   	cli    
c001ec09:	6a 00                	push   0x0
c001ec0b:	6a 26                	push   0x26
c001ec0d:	e9 74 00 00 00       	jmp    c001ec86 <int_common_stub>

c001ec12 <irq7>:
c001ec12:	fa                   	cli    
c001ec13:	6a 00                	push   0x0
c001ec15:	6a 27                	push   0x27
c001ec17:	e9 6a 00 00 00       	jmp    c001ec86 <int_common_stub>

c001ec1c <irq8>:
c001ec1c:	fa                   	cli    
c001ec1d:	6a 00                	push   0x0
c001ec1f:	6a 28                	push   0x28
c001ec21:	e9 60 00 00 00       	jmp    c001ec86 <int_common_stub>

c001ec26 <irq9>:
c001ec26:	fa                   	cli    
c001ec27:	6a 00                	push   0x0
c001ec29:	6a 29                	push   0x29
c001ec2b:	e9 56 00 00 00       	jmp    c001ec86 <int_common_stub>

c001ec30 <irq10>:
c001ec30:	fa                   	cli    
c001ec31:	6a 00                	push   0x0
c001ec33:	6a 2a                	push   0x2a
c001ec35:	e9 4c 00 00 00       	jmp    c001ec86 <int_common_stub>

c001ec3a <irq11>:
c001ec3a:	fa                   	cli    
c001ec3b:	6a 00                	push   0x0
c001ec3d:	6a 2b                	push   0x2b
c001ec3f:	e9 42 00 00 00       	jmp    c001ec86 <int_common_stub>

c001ec44 <irq12>:
c001ec44:	fa                   	cli    
c001ec45:	6a 00                	push   0x0
c001ec47:	6a 2c                	push   0x2c
c001ec49:	e9 38 00 00 00       	jmp    c001ec86 <int_common_stub>

c001ec4e <irq13>:
c001ec4e:	fa                   	cli    
c001ec4f:	6a 00                	push   0x0
c001ec51:	6a 2d                	push   0x2d
c001ec53:	e9 2e 00 00 00       	jmp    c001ec86 <int_common_stub>

c001ec58 <irq14>:
c001ec58:	fa                   	cli    
c001ec59:	6a 00                	push   0x0
c001ec5b:	6a 2e                	push   0x2e
c001ec5d:	e9 24 00 00 00       	jmp    c001ec86 <int_common_stub>

c001ec62 <irq15>:
c001ec62:	fa                   	cli    
c001ec63:	6a 00                	push   0x0
c001ec65:	6a 2f                	push   0x2f
c001ec67:	e9 1a 00 00 00       	jmp    c001ec86 <int_common_stub>

c001ec6c <irq1>:
c001ec6c:	fa                   	cli    
c001ec6d:	6a 00                	push   0x0
c001ec6f:	6a 21                	push   0x21
c001ec71:	eb 13                	jmp    c001ec86 <int_common_stub>

c001ec73 <irq2>:
c001ec73:	fa                   	cli    
c001ec74:	6a 00                	push   0x0
c001ec76:	6a 22                	push   0x22
c001ec78:	eb 0c                	jmp    c001ec86 <int_common_stub>

c001ec7a <isr96>:
c001ec7a:	6a 00                	push   0x0
c001ec7c:	6a 60                	push   0x60
c001ec7e:	fb                   	sti    
c001ec7f:	eb 37                	jmp    c001ecb8 <syscall_common_stub>

c001ec81 <irq0>:
c001ec81:	fa                   	cli    
c001ec82:	6a 00                	push   0x0
c001ec84:	6a 20                	push   0x20

c001ec86 <int_common_stub>:
c001ec86:	60                   	pusha  
c001ec87:	1e                   	push   ds
c001ec88:	06                   	push   es
c001ec89:	0f a0                	push   fs
c001ec8b:	0f a8                	push   gs
c001ec8d:	66 b8 10 00          	mov    ax,0x10
c001ec91:	66 8e d8             	mov    ds,ax
c001ec94:	66 8e c0             	mov    es,ax
c001ec97:	66 8e e0             	mov    fs,ax
c001ec9a:	66 8e e8             	mov    gs,ax
c001ec9d:	54                   	push   esp
c001ec9e:	fc                   	cld    
c001ec9f:	e8 40 de fe ff       	call   c000cae4 <int_handler>
c001eca4:	81 c4 04 00 00 00    	add    esp,0x4
c001ecaa:	0f a9                	pop    gs
c001ecac:	0f a1                	pop    fs
c001ecae:	07                   	pop    es
c001ecaf:	1f                   	pop    ds
c001ecb0:	61                   	popa   
c001ecb1:	81 c4 08 00 00 00    	add    esp,0x8
c001ecb7:	cf                   	iret   

c001ecb8 <syscall_common_stub>:
c001ecb8:	60                   	pusha  
c001ecb9:	1e                   	push   ds
c001ecba:	06                   	push   es
c001ecbb:	0f a0                	push   fs
c001ecbd:	0f a8                	push   gs
c001ecbf:	66 b8 10 00          	mov    ax,0x10
c001ecc3:	66 8e d8             	mov    ds,ax
c001ecc6:	66 8e c0             	mov    es,ax
c001ecc9:	66 8e e0             	mov    fs,ax
c001eccc:	66 8e e8             	mov    gs,ax
c001eccf:	54                   	push   esp
c001ecd0:	fc                   	cld    
c001ecd1:	e8 0e de fe ff       	call   c000cae4 <int_handler>
c001ecd6:	81 c4 04 00 00 00    	add    esp,0x4
c001ecdc:	0f a9                	pop    gs
c001ecde:	0f a1                	pop    fs
c001ece0:	07                   	pop    es
c001ece1:	1f                   	pop    ds
c001ece2:	e8 97 2b ff ff       	call   c001187e <KiCheckSignalZ>
c001ece7:	3d 00 00 00 00       	cmp    eax,0x0
c001ecec:	0f 84 c0 00 00 00    	je     c001edb2 <skipSignals>
c001ecf2:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001ecf7:	61                   	popa   
c001ecf8:	53                   	push   ebx
c001ecf9:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001ecff:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001ed02:	5b                   	pop    ebx
c001ed03:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001ed08:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001ed0b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001ed0e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ed11:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001ed14:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001ed17:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001ed1a:	81 c4 08 00 00 00    	add    esp,0x8
c001ed20:	5e                   	pop    esi
c001ed21:	5b                   	pop    ebx
c001ed22:	59                   	pop    ecx
c001ed23:	5a                   	pop    edx
c001ed24:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001ed27:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001ed2a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001ed2d:	52                   	push   edx
c001ed2e:	51                   	push   ecx
c001ed2f:	53                   	push   ebx
c001ed30:	56                   	push   esi
c001ed31:	81 ec 08 00 00 00    	sub    esp,0x8
c001ed37:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001ed3a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001ed3d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001ed40:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ed43:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ed46:	60                   	pusha  
c001ed47:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001ed4d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001ed50:	89 e3                	mov    ebx,esp
c001ed52:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001ed55:	52                   	push   edx
c001ed56:	68 76 ed 01 c0       	push   0xc001ed76
c001ed5b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001ed5e:	89 dc                	mov    esp,ebx
c001ed60:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001ed63:	68 23 00 00 00       	push   0x23
c001ed68:	51                   	push   ecx
c001ed69:	68 02 02 00 00       	push   0x202
c001ed6e:	68 1b 00 00 00       	push   0x1b
c001ed73:	ff 36                	push   DWORD PTR [esi]
c001ed75:	cf                   	iret   

c001ed76 <finishSignal>:
c001ed76:	cd 0f                	int    0xf

c001ed78 <finishSignal2>:
c001ed78:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001ed7e:	e8 78 2b ff ff       	call   c00118fb <KiFinishSignalZ>
c001ed83:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001ed89:	68 23 00 00 00       	push   0x23
c001ed8e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001ed91:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001ed94:	68 1b 00 00 00       	push   0x1b
c001ed99:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001ed9c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ed9f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001eda2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001eda5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001eda8:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001edab:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001edae:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001edb1:	cf                   	iret   

c001edb2 <skipSignals>:
c001edb2:	61                   	popa   
c001edb3:	81 c4 08 00 00 00    	add    esp,0x8
c001edb9:	cf                   	iret   
c001edba:	90                   	nop
c001edbb:	90                   	nop

c001edbc <irq16>:
c001edbc:	fa                   	cli    
c001edbd:	6a 00                	push   0x0
c001edbf:	6a 30                	push   0x30
c001edc1:	e9 c0 fe ff ff       	jmp    c001ec86 <int_common_stub>

c001edc6 <irq17>:
c001edc6:	fa                   	cli    
c001edc7:	6a 00                	push   0x0
c001edc9:	6a 31                	push   0x31
c001edcb:	e9 b6 fe ff ff       	jmp    c001ec86 <int_common_stub>

c001edd0 <irq18>:
c001edd0:	fa                   	cli    
c001edd1:	6a 00                	push   0x0
c001edd3:	6a 32                	push   0x32
c001edd5:	e9 ac fe ff ff       	jmp    c001ec86 <int_common_stub>

c001edda <irq19>:
c001edda:	fa                   	cli    
c001eddb:	6a 00                	push   0x0
c001eddd:	6a 33                	push   0x33
c001eddf:	e9 a2 fe ff ff       	jmp    c001ec86 <int_common_stub>

c001ede4 <irq20>:
c001ede4:	fa                   	cli    
c001ede5:	6a 00                	push   0x0
c001ede7:	6a 34                	push   0x34
c001ede9:	e9 98 fe ff ff       	jmp    c001ec86 <int_common_stub>

c001edee <irq21>:
c001edee:	fa                   	cli    
c001edef:	6a 00                	push   0x0
c001edf1:	6a 35                	push   0x35
c001edf3:	e9 8e fe ff ff       	jmp    c001ec86 <int_common_stub>

c001edf8 <irq22>:
c001edf8:	fa                   	cli    
c001edf9:	6a 00                	push   0x0
c001edfb:	6a 36                	push   0x36
c001edfd:	e9 84 fe ff ff       	jmp    c001ec86 <int_common_stub>

c001ee02 <irq23>:
c001ee02:	fa                   	cli    
c001ee03:	6a 00                	push   0x0
c001ee05:	6a 37                	push   0x37
c001ee07:	e9 7a fe ff ff       	jmp    c001ec86 <int_common_stub>
c001ee0c:	66 90                	xchg   ax,ax
c001ee0e:	66 90                	xchg   ax,ax

c001ee10 <i386GetRDRAND>:
c001ee10:	b9 64 00 00 00       	mov    ecx,0x64

c001ee15 <retry>:
c001ee15:	0f c7 f0             	rdrand eax
c001ee18:	72 05                	jb     c001ee1f <retry.done>
c001ee1a:	e2 f9                	loop   c001ee15 <retry>

c001ee1c <retry.fail>:
c001ee1c:	31 c0                	xor    eax,eax
c001ee1e:	c3                   	ret    

c001ee1f <retry.done>:
c001ee1f:	c3                   	ret    

c001ee20 <absolutelyNoChanceInHell>:
c001ee20:	b8 01 00 00 00       	mov    eax,0x1
c001ee25:	0f a2                	cpuid  
c001ee27:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001ee2d:	74 06                	je     c001ee35 <sseDetect.noSSE>
c001ee2f:	b8 01 00 00 00       	mov    eax,0x1
c001ee34:	c3                   	ret    

c001ee35 <sseDetect.noSSE>:
c001ee35:	31 c0                	xor    eax,eax
c001ee37:	c3                   	ret    

c001ee38 <sseSave>:
c001ee38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee3c:	0f ae 00             	fxsave [eax]
c001ee3f:	c3                   	ret    

c001ee40 <sseLoad>:
c001ee40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee44:	0f ae 08             	fxrstor [eax]
c001ee47:	c3                   	ret    

c001ee48 <sseInit>:
c001ee48:	e8 42 00 00 00       	call   c001ee8f <x87Init>
c001ee4d:	0f 20 e0             	mov    eax,cr4
c001ee50:	66 0d 00 06          	or     ax,0x600
c001ee54:	0f 22 e0             	mov    cr4,eax
c001ee57:	c3                   	ret    

c001ee58 <sseClose>:
c001ee58:	c3                   	ret    
c001ee59:	66 90                	xchg   ax,ax
c001ee5b:	66 90                	xchg   ax,ax
c001ee5d:	66 90                	xchg   ax,ax
c001ee5f:	90                   	nop

c001ee60 <value_37F>:
c001ee60:	7f 03                	jg     c001ee65 <value_37A+0x1>

c001ee62 <value_37E>:
c001ee62:	7e 03                	jle    c001ee67 <x87Detect+0x1>

c001ee64 <value_37A>:
c001ee64:	7a 03                	jp     c001ee69 <x87Detect+0x3>

c001ee66 <x87Detect>:
c001ee66:	b8 01 00 00 00       	mov    eax,0x1
c001ee6b:	0f a2                	cpuid  
c001ee6d:	f7 c2 01 00 00 00    	test   edx,0x1
c001ee73:	74 06                	je     c001ee7b <x87Detect.nox87>
c001ee75:	b8 01 00 00 00       	mov    eax,0x1
c001ee7a:	c3                   	ret    

c001ee7b <x87Detect.nox87>:
c001ee7b:	b8 00 00 00 00       	mov    eax,0x0
c001ee80:	c3                   	ret    

c001ee81 <x87Save>:
c001ee81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee85:	dd 30                	fnsave [eax]
c001ee87:	c3                   	ret    

c001ee88 <x87Load>:
c001ee88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee8c:	dd 20                	frstor [eax]
c001ee8e:	c3                   	ret    

c001ee8f <x87Init>:
c001ee8f:	0f 20 c0             	mov    eax,cr0
c001ee92:	66 25 fb ff          	and    ax,0xfffb
c001ee96:	66 0d 22 00          	or     ax,0x22
c001ee9a:	0f 22 c0             	mov    cr0,eax
c001ee9d:	db e3                	fninit 
c001ee9f:	0f 06                	clts   
c001eea1:	d9 2d 64 ee 01 c0    	fldcw  WORD PTR ds:0xc001ee64
c001eea7:	c3                   	ret    

c001eea8 <x87Close>:
c001eea8:	c3                   	ret    
c001eea9:	66 90                	xchg   ax,ax
c001eeab:	90                   	nop

c001eeac <__do_global_ctors_aux>:
c001eeac:	a1 60 fe 01 c0       	mov    eax,ds:0xc001fe60
c001eeb1:	83 f8 ff             	cmp    eax,0xffffffff
c001eeb4:	74 1a                	je     c001eed0 <__do_global_ctors_aux+0x24>
c001eeb6:	55                   	push   ebp
c001eeb7:	89 e5                	mov    ebp,esp
c001eeb9:	53                   	push   ebx
c001eeba:	52                   	push   edx
c001eebb:	bb 60 fe 01 c0       	mov    ebx,0xc001fe60
c001eec0:	ff d0                	call   eax
c001eec2:	83 eb 04             	sub    ebx,0x4
c001eec5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001eec7:	83 f8 ff             	cmp    eax,0xffffffff
c001eeca:	75 f4                	jne    c001eec0 <__do_global_ctors_aux+0x14>
c001eecc:	58                   	pop    eax
c001eecd:	5b                   	pop    ebx
c001eece:	5d                   	pop    ebp
c001eecf:	c3                   	ret    
c001eed0:	c3                   	ret    
c001eed1:	66 90                	xchg   ax,ax
c001eed3:	90                   	nop

c001eed4 <__divdi3>:
c001eed4:	55                   	push   ebp
c001eed5:	57                   	push   edi
c001eed6:	56                   	push   esi
c001eed7:	53                   	push   ebx
c001eed8:	83 ec 1c             	sub    esp,0x1c
c001eedb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001eedf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001eee3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001eee6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001eeea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001eeee:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001eef2:	85 db                	test   ebx,ebx
c001eef4:	0f 88 8e 00 00 00    	js     c001ef88 <__divdi3+0xb4>
c001eefa:	89 dd                	mov    ebp,ebx
c001eefc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ef04:	89 d3                	mov    ebx,edx
c001ef06:	85 d2                	test   edx,edx
c001ef08:	79 0d                	jns    c001ef17 <__divdi3+0x43>
c001ef0a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001ef0e:	f7 d8                	neg    eax
c001ef10:	83 d2 00             	adc    edx,0x0
c001ef13:	f7 da                	neg    edx
c001ef15:	89 d3                	mov    ebx,edx
c001ef17:	89 c7                	mov    edi,eax
c001ef19:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ef1c:	85 db                	test   ebx,ebx
c001ef1e:	75 48                	jne    c001ef68 <__divdi3+0x94>
c001ef20:	39 ef                	cmp    edi,ebp
c001ef22:	76 24                	jbe    c001ef48 <__divdi3+0x74>
c001ef24:	89 ea                	mov    edx,ebp
c001ef26:	f7 f7                	div    edi
c001ef28:	89 c1                	mov    ecx,eax
c001ef2a:	31 f6                	xor    esi,esi
c001ef2c:	89 c8                	mov    eax,ecx
c001ef2e:	89 f2                	mov    edx,esi
c001ef30:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ef34:	85 c9                	test   ecx,ecx
c001ef36:	74 07                	je     c001ef3f <__divdi3+0x6b>
c001ef38:	f7 d8                	neg    eax
c001ef3a:	83 d2 00             	adc    edx,0x0
c001ef3d:	f7 da                	neg    edx
c001ef3f:	83 c4 1c             	add    esp,0x1c
c001ef42:	5b                   	pop    ebx
c001ef43:	5e                   	pop    esi
c001ef44:	5f                   	pop    edi
c001ef45:	5d                   	pop    ebp
c001ef46:	c3                   	ret    
c001ef47:	90                   	nop
c001ef48:	85 ff                	test   edi,edi
c001ef4a:	75 0b                	jne    c001ef57 <__divdi3+0x83>
c001ef4c:	b8 01 00 00 00       	mov    eax,0x1
c001ef51:	31 d2                	xor    edx,edx
c001ef53:	f7 f3                	div    ebx
c001ef55:	89 c7                	mov    edi,eax
c001ef57:	31 d2                	xor    edx,edx
c001ef59:	89 e8                	mov    eax,ebp
c001ef5b:	f7 f7                	div    edi
c001ef5d:	89 c6                	mov    esi,eax
c001ef5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ef62:	f7 f7                	div    edi
c001ef64:	89 c1                	mov    ecx,eax
c001ef66:	eb c4                	jmp    c001ef2c <__divdi3+0x58>
c001ef68:	39 eb                	cmp    ebx,ebp
c001ef6a:	77 3c                	ja     c001efa8 <__divdi3+0xd4>
c001ef6c:	0f bd f3             	bsr    esi,ebx
c001ef6f:	83 f6 1f             	xor    esi,0x1f
c001ef72:	75 40                	jne    c001efb4 <__divdi3+0xe0>
c001ef74:	39 eb                	cmp    ebx,ebp
c001ef76:	72 09                	jb     c001ef81 <__divdi3+0xad>
c001ef78:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001ef7b:	0f 87 97 00 00 00    	ja     c001f018 <__divdi3+0x144>
c001ef81:	b9 01 00 00 00       	mov    ecx,0x1
c001ef86:	eb a4                	jmp    c001ef2c <__divdi3+0x58>
c001ef88:	f7 d9                	neg    ecx
c001ef8a:	83 d3 00             	adc    ebx,0x0
c001ef8d:	f7 db                	neg    ebx
c001ef8f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001ef92:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001ef96:	89 dd                	mov    ebp,ebx
c001ef98:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001efa0:	e9 5f ff ff ff       	jmp    c001ef04 <__divdi3+0x30>
c001efa5:	8d 76 00             	lea    esi,[esi+0x0]
c001efa8:	31 f6                	xor    esi,esi
c001efaa:	31 c9                	xor    ecx,ecx
c001efac:	e9 7b ff ff ff       	jmp    c001ef2c <__divdi3+0x58>
c001efb1:	8d 76 00             	lea    esi,[esi+0x0]
c001efb4:	b8 20 00 00 00       	mov    eax,0x20
c001efb9:	29 f0                	sub    eax,esi
c001efbb:	89 f1                	mov    ecx,esi
c001efbd:	d3 e3                	shl    ebx,cl
c001efbf:	89 fa                	mov    edx,edi
c001efc1:	88 c1                	mov    cl,al
c001efc3:	d3 ea                	shr    edx,cl
c001efc5:	09 da                	or     edx,ebx
c001efc7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001efcb:	89 f1                	mov    ecx,esi
c001efcd:	d3 e7                	shl    edi,cl
c001efcf:	89 eb                	mov    ebx,ebp
c001efd1:	88 c1                	mov    cl,al
c001efd3:	d3 eb                	shr    ebx,cl
c001efd5:	89 f1                	mov    ecx,esi
c001efd7:	d3 e5                	shl    ebp,cl
c001efd9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001efdc:	88 c1                	mov    cl,al
c001efde:	d3 ea                	shr    edx,cl
c001efe0:	09 d5                	or     ebp,edx
c001efe2:	89 e8                	mov    eax,ebp
c001efe4:	89 da                	mov    edx,ebx
c001efe6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001efea:	89 d3                	mov    ebx,edx
c001efec:	89 c5                	mov    ebp,eax
c001efee:	f7 e7                	mul    edi
c001eff0:	39 d3                	cmp    ebx,edx
c001eff2:	72 18                	jb     c001f00c <__divdi3+0x138>
c001eff4:	74 0a                	je     c001f000 <__divdi3+0x12c>
c001eff6:	89 e9                	mov    ecx,ebp
c001eff8:	31 f6                	xor    esi,esi
c001effa:	e9 2d ff ff ff       	jmp    c001ef2c <__divdi3+0x58>
c001efff:	90                   	nop
c001f000:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f003:	89 f1                	mov    ecx,esi
c001f005:	d3 e7                	shl    edi,cl
c001f007:	39 c7                	cmp    edi,eax
c001f009:	73 eb                	jae    c001eff6 <__divdi3+0x122>
c001f00b:	90                   	nop
c001f00c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f00f:	31 f6                	xor    esi,esi
c001f011:	e9 16 ff ff ff       	jmp    c001ef2c <__divdi3+0x58>
c001f016:	66 90                	xchg   ax,ax
c001f018:	31 c9                	xor    ecx,ecx
c001f01a:	e9 0d ff ff ff       	jmp    c001ef2c <__divdi3+0x58>
c001f01f:	90                   	nop

c001f020 <__moddi3>:
c001f020:	55                   	push   ebp
c001f021:	57                   	push   edi
c001f022:	56                   	push   esi
c001f023:	53                   	push   ebx
c001f024:	83 ec 2c             	sub    esp,0x2c
c001f027:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f02b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f02f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f033:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f037:	85 db                	test   ebx,ebx
c001f039:	0f 88 85 00 00 00    	js     c001f0c4 <__moddi3+0xa4>
c001f03f:	89 de                	mov    esi,ebx
c001f041:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f049:	89 d7                	mov    edi,edx
c001f04b:	85 d2                	test   edx,edx
c001f04d:	79 09                	jns    c001f058 <__moddi3+0x38>
c001f04f:	f7 d8                	neg    eax
c001f051:	83 d2 00             	adc    edx,0x0
c001f054:	f7 da                	neg    edx
c001f056:	89 d7                	mov    edi,edx
c001f058:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f05c:	89 cd                	mov    ebp,ecx
c001f05e:	85 ff                	test   edi,edi
c001f060:	75 52                	jne    c001f0b4 <__moddi3+0x94>
c001f062:	89 c3                	mov    ebx,eax
c001f064:	39 f0                	cmp    eax,esi
c001f066:	76 24                	jbe    c001f08c <__moddi3+0x6c>
c001f068:	89 c8                	mov    eax,ecx
c001f06a:	89 f2                	mov    edx,esi
c001f06c:	f7 f3                	div    ebx
c001f06e:	89 d6                	mov    esi,edx
c001f070:	89 f0                	mov    eax,esi
c001f072:	31 d2                	xor    edx,edx
c001f074:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f078:	85 c9                	test   ecx,ecx
c001f07a:	74 07                	je     c001f083 <__moddi3+0x63>
c001f07c:	f7 d8                	neg    eax
c001f07e:	83 d2 00             	adc    edx,0x0
c001f081:	f7 da                	neg    edx
c001f083:	83 c4 2c             	add    esp,0x2c
c001f086:	5b                   	pop    ebx
c001f087:	5e                   	pop    esi
c001f088:	5f                   	pop    edi
c001f089:	5d                   	pop    ebp
c001f08a:	c3                   	ret    
c001f08b:	90                   	nop
c001f08c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f090:	85 db                	test   ebx,ebx
c001f092:	75 0d                	jne    c001f0a1 <__moddi3+0x81>
c001f094:	b8 01 00 00 00       	mov    eax,0x1
c001f099:	31 d2                	xor    edx,edx
c001f09b:	f7 f7                	div    edi
c001f09d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f0a1:	89 f0                	mov    eax,esi
c001f0a3:	31 d2                	xor    edx,edx
c001f0a5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f0a9:	f7 f7                	div    edi
c001f0ab:	89 e8                	mov    eax,ebp
c001f0ad:	f7 f7                	div    edi
c001f0af:	89 d6                	mov    esi,edx
c001f0b1:	eb bd                	jmp    c001f070 <__moddi3+0x50>
c001f0b3:	90                   	nop
c001f0b4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f0b8:	39 f7                	cmp    edi,esi
c001f0ba:	76 20                	jbe    c001f0dc <__moddi3+0xbc>
c001f0bc:	89 c8                	mov    eax,ecx
c001f0be:	89 f2                	mov    edx,esi
c001f0c0:	eb b2                	jmp    c001f074 <__moddi3+0x54>
c001f0c2:	66 90                	xchg   ax,ax
c001f0c4:	f7 d9                	neg    ecx
c001f0c6:	83 d3 00             	adc    ebx,0x0
c001f0c9:	f7 db                	neg    ebx
c001f0cb:	89 de                	mov    esi,ebx
c001f0cd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f0d5:	e9 6f ff ff ff       	jmp    c001f049 <__moddi3+0x29>
c001f0da:	66 90                	xchg   ax,ax
c001f0dc:	0f bd c7             	bsr    eax,edi
c001f0df:	83 f0 1f             	xor    eax,0x1f
c001f0e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f0e6:	75 24                	jne    c001f10c <__moddi3+0xec>
c001f0e8:	39 f7                	cmp    edi,esi
c001f0ea:	72 06                	jb     c001f0f2 <__moddi3+0xd2>
c001f0ec:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f0f0:	77 0c                	ja     c001f0fe <__moddi3+0xde>
c001f0f2:	89 e9                	mov    ecx,ebp
c001f0f4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f0f8:	19 fe                	sbb    esi,edi
c001f0fa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f0fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f102:	89 f2                	mov    edx,esi
c001f104:	e9 6b ff ff ff       	jmp    c001f074 <__moddi3+0x54>
c001f109:	8d 76 00             	lea    esi,[esi+0x0]
c001f10c:	b8 20 00 00 00       	mov    eax,0x20
c001f111:	89 c2                	mov    edx,eax
c001f113:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f117:	29 da                	sub    edx,ebx
c001f119:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f11d:	88 d9                	mov    cl,bl
c001f11f:	d3 e7                	shl    edi,cl
c001f121:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f125:	88 d1                	mov    cl,dl
c001f127:	d3 e8                	shr    eax,cl
c001f129:	09 c7                	or     edi,eax
c001f12b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f12f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f133:	89 d8                	mov    eax,ebx
c001f135:	88 d9                	mov    cl,bl
c001f137:	d3 e7                	shl    edi,cl
c001f139:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f13d:	89 f3                	mov    ebx,esi
c001f13f:	88 d1                	mov    cl,dl
c001f141:	d3 eb                	shr    ebx,cl
c001f143:	89 c7                	mov    edi,eax
c001f145:	88 c1                	mov    cl,al
c001f147:	d3 e6                	shl    esi,cl
c001f149:	89 e8                	mov    eax,ebp
c001f14b:	88 d1                	mov    cl,dl
c001f14d:	d3 e8                	shr    eax,cl
c001f14f:	09 f0                	or     eax,esi
c001f151:	89 f9                	mov    ecx,edi
c001f153:	d3 e5                	shl    ebp,cl
c001f155:	89 da                	mov    edx,ebx
c001f157:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f15b:	89 d3                	mov    ebx,edx
c001f15d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f161:	89 c6                	mov    esi,eax
c001f163:	89 d1                	mov    ecx,edx
c001f165:	39 d3                	cmp    ebx,edx
c001f167:	72 27                	jb     c001f190 <__moddi3+0x170>
c001f169:	74 21                	je     c001f18c <__moddi3+0x16c>
c001f16b:	29 f5                	sub    ebp,esi
c001f16d:	19 cb                	sbb    ebx,ecx
c001f16f:	89 de                	mov    esi,ebx
c001f171:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f175:	d3 e6                	shl    esi,cl
c001f177:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f17b:	89 f9                	mov    ecx,edi
c001f17d:	d3 ed                	shr    ebp,cl
c001f17f:	09 ee                	or     esi,ebp
c001f181:	89 f0                	mov    eax,esi
c001f183:	d3 eb                	shr    ebx,cl
c001f185:	89 da                	mov    edx,ebx
c001f187:	e9 e8 fe ff ff       	jmp    c001f074 <__moddi3+0x54>
c001f18c:	39 c5                	cmp    ebp,eax
c001f18e:	73 db                	jae    c001f16b <__moddi3+0x14b>
c001f190:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f194:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f198:	89 d1                	mov    ecx,edx
c001f19a:	89 c6                	mov    esi,eax
c001f19c:	eb cd                	jmp    c001f16b <__moddi3+0x14b>
c001f19e:	66 90                	xchg   ax,ax

c001f1a0 <__udivdi3>:
c001f1a0:	55                   	push   ebp
c001f1a1:	57                   	push   edi
c001f1a2:	56                   	push   esi
c001f1a3:	53                   	push   ebx
c001f1a4:	83 ec 1c             	sub    esp,0x1c
c001f1a7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f1ab:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f1af:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f1b3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f1b7:	85 d2                	test   edx,edx
c001f1b9:	75 41                	jne    c001f1fc <__udivdi3+0x5c>
c001f1bb:	39 f7                	cmp    edi,esi
c001f1bd:	76 15                	jbe    c001f1d4 <__udivdi3+0x34>
c001f1bf:	89 e8                	mov    eax,ebp
c001f1c1:	89 f2                	mov    edx,esi
c001f1c3:	f7 f7                	div    edi
c001f1c5:	31 db                	xor    ebx,ebx
c001f1c7:	89 da                	mov    edx,ebx
c001f1c9:	83 c4 1c             	add    esp,0x1c
c001f1cc:	5b                   	pop    ebx
c001f1cd:	5e                   	pop    esi
c001f1ce:	5f                   	pop    edi
c001f1cf:	5d                   	pop    ebp
c001f1d0:	c3                   	ret    
c001f1d1:	8d 76 00             	lea    esi,[esi+0x0]
c001f1d4:	89 f9                	mov    ecx,edi
c001f1d6:	85 ff                	test   edi,edi
c001f1d8:	75 0b                	jne    c001f1e5 <__udivdi3+0x45>
c001f1da:	b8 01 00 00 00       	mov    eax,0x1
c001f1df:	31 d2                	xor    edx,edx
c001f1e1:	f7 f7                	div    edi
c001f1e3:	89 c1                	mov    ecx,eax
c001f1e5:	31 d2                	xor    edx,edx
c001f1e7:	89 f0                	mov    eax,esi
c001f1e9:	f7 f1                	div    ecx
c001f1eb:	89 c3                	mov    ebx,eax
c001f1ed:	89 e8                	mov    eax,ebp
c001f1ef:	f7 f1                	div    ecx
c001f1f1:	89 da                	mov    edx,ebx
c001f1f3:	83 c4 1c             	add    esp,0x1c
c001f1f6:	5b                   	pop    ebx
c001f1f7:	5e                   	pop    esi
c001f1f8:	5f                   	pop    edi
c001f1f9:	5d                   	pop    ebp
c001f1fa:	c3                   	ret    
c001f1fb:	90                   	nop
c001f1fc:	39 f2                	cmp    edx,esi
c001f1fe:	77 1c                	ja     c001f21c <__udivdi3+0x7c>
c001f200:	0f bd da             	bsr    ebx,edx
c001f203:	83 f3 1f             	xor    ebx,0x1f
c001f206:	75 24                	jne    c001f22c <__udivdi3+0x8c>
c001f208:	39 f2                	cmp    edx,esi
c001f20a:	72 08                	jb     c001f214 <__udivdi3+0x74>
c001f20c:	39 ef                	cmp    edi,ebp
c001f20e:	0f 87 84 00 00 00    	ja     c001f298 <__udivdi3+0xf8>
c001f214:	b8 01 00 00 00       	mov    eax,0x1
c001f219:	eb ac                	jmp    c001f1c7 <__udivdi3+0x27>
c001f21b:	90                   	nop
c001f21c:	31 db                	xor    ebx,ebx
c001f21e:	31 c0                	xor    eax,eax
c001f220:	89 da                	mov    edx,ebx
c001f222:	83 c4 1c             	add    esp,0x1c
c001f225:	5b                   	pop    ebx
c001f226:	5e                   	pop    esi
c001f227:	5f                   	pop    edi
c001f228:	5d                   	pop    ebp
c001f229:	c3                   	ret    
c001f22a:	66 90                	xchg   ax,ax
c001f22c:	b8 20 00 00 00       	mov    eax,0x20
c001f231:	29 d8                	sub    eax,ebx
c001f233:	88 d9                	mov    cl,bl
c001f235:	d3 e2                	shl    edx,cl
c001f237:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f23b:	89 fa                	mov    edx,edi
c001f23d:	88 c1                	mov    cl,al
c001f23f:	d3 ea                	shr    edx,cl
c001f241:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f245:	09 d1                	or     ecx,edx
c001f247:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f24b:	88 d9                	mov    cl,bl
c001f24d:	d3 e7                	shl    edi,cl
c001f24f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f253:	89 f7                	mov    edi,esi
c001f255:	88 c1                	mov    cl,al
c001f257:	d3 ef                	shr    edi,cl
c001f259:	88 d9                	mov    cl,bl
c001f25b:	d3 e6                	shl    esi,cl
c001f25d:	89 ea                	mov    edx,ebp
c001f25f:	88 c1                	mov    cl,al
c001f261:	d3 ea                	shr    edx,cl
c001f263:	09 d6                	or     esi,edx
c001f265:	89 f0                	mov    eax,esi
c001f267:	89 fa                	mov    edx,edi
c001f269:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f26d:	89 d7                	mov    edi,edx
c001f26f:	89 c6                	mov    esi,eax
c001f271:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f275:	39 d7                	cmp    edi,edx
c001f277:	72 13                	jb     c001f28c <__udivdi3+0xec>
c001f279:	74 09                	je     c001f284 <__udivdi3+0xe4>
c001f27b:	89 f0                	mov    eax,esi
c001f27d:	31 db                	xor    ebx,ebx
c001f27f:	e9 43 ff ff ff       	jmp    c001f1c7 <__udivdi3+0x27>
c001f284:	88 d9                	mov    cl,bl
c001f286:	d3 e5                	shl    ebp,cl
c001f288:	39 c5                	cmp    ebp,eax
c001f28a:	73 ef                	jae    c001f27b <__udivdi3+0xdb>
c001f28c:	8d 46 ff             	lea    eax,[esi-0x1]
c001f28f:	31 db                	xor    ebx,ebx
c001f291:	e9 31 ff ff ff       	jmp    c001f1c7 <__udivdi3+0x27>
c001f296:	66 90                	xchg   ax,ax
c001f298:	31 c0                	xor    eax,eax
c001f29a:	e9 28 ff ff ff       	jmp    c001f1c7 <__udivdi3+0x27>
c001f29f:	90                   	nop

c001f2a0 <__umoddi3>:
c001f2a0:	55                   	push   ebp
c001f2a1:	57                   	push   edi
c001f2a2:	56                   	push   esi
c001f2a3:	53                   	push   ebx
c001f2a4:	83 ec 1c             	sub    esp,0x1c
c001f2a7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f2ab:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f2af:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f2b3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f2b7:	89 da                	mov    edx,ebx
c001f2b9:	85 c0                	test   eax,eax
c001f2bb:	75 37                	jne    c001f2f4 <__umoddi3+0x54>
c001f2bd:	39 df                	cmp    edi,ebx
c001f2bf:	76 13                	jbe    c001f2d4 <__umoddi3+0x34>
c001f2c1:	89 f0                	mov    eax,esi
c001f2c3:	f7 f7                	div    edi
c001f2c5:	89 d0                	mov    eax,edx
c001f2c7:	31 d2                	xor    edx,edx
c001f2c9:	83 c4 1c             	add    esp,0x1c
c001f2cc:	5b                   	pop    ebx
c001f2cd:	5e                   	pop    esi
c001f2ce:	5f                   	pop    edi
c001f2cf:	5d                   	pop    ebp
c001f2d0:	c3                   	ret    
c001f2d1:	8d 76 00             	lea    esi,[esi+0x0]
c001f2d4:	89 fd                	mov    ebp,edi
c001f2d6:	85 ff                	test   edi,edi
c001f2d8:	75 0b                	jne    c001f2e5 <__umoddi3+0x45>
c001f2da:	b8 01 00 00 00       	mov    eax,0x1
c001f2df:	31 d2                	xor    edx,edx
c001f2e1:	f7 f7                	div    edi
c001f2e3:	89 c5                	mov    ebp,eax
c001f2e5:	89 d8                	mov    eax,ebx
c001f2e7:	31 d2                	xor    edx,edx
c001f2e9:	f7 f5                	div    ebp
c001f2eb:	89 f0                	mov    eax,esi
c001f2ed:	f7 f5                	div    ebp
c001f2ef:	89 d0                	mov    eax,edx
c001f2f1:	eb d4                	jmp    c001f2c7 <__umoddi3+0x27>
c001f2f3:	90                   	nop
c001f2f4:	89 f1                	mov    ecx,esi
c001f2f6:	39 d8                	cmp    eax,ebx
c001f2f8:	76 0a                	jbe    c001f304 <__umoddi3+0x64>
c001f2fa:	89 f0                	mov    eax,esi
c001f2fc:	83 c4 1c             	add    esp,0x1c
c001f2ff:	5b                   	pop    ebx
c001f300:	5e                   	pop    esi
c001f301:	5f                   	pop    edi
c001f302:	5d                   	pop    ebp
c001f303:	c3                   	ret    
c001f304:	0f bd e8             	bsr    ebp,eax
c001f307:	83 f5 1f             	xor    ebp,0x1f
c001f30a:	75 1c                	jne    c001f328 <__umoddi3+0x88>
c001f30c:	39 d8                	cmp    eax,ebx
c001f30e:	72 04                	jb     c001f314 <__umoddi3+0x74>
c001f310:	39 f7                	cmp    edi,esi
c001f312:	77 08                	ja     c001f31c <__umoddi3+0x7c>
c001f314:	89 da                	mov    edx,ebx
c001f316:	29 fe                	sub    esi,edi
c001f318:	19 c2                	sbb    edx,eax
c001f31a:	89 f1                	mov    ecx,esi
c001f31c:	89 c8                	mov    eax,ecx
c001f31e:	83 c4 1c             	add    esp,0x1c
c001f321:	5b                   	pop    ebx
c001f322:	5e                   	pop    esi
c001f323:	5f                   	pop    edi
c001f324:	5d                   	pop    ebp
c001f325:	c3                   	ret    
c001f326:	66 90                	xchg   ax,ax
c001f328:	ba 20 00 00 00       	mov    edx,0x20
c001f32d:	29 ea                	sub    edx,ebp
c001f32f:	89 e9                	mov    ecx,ebp
c001f331:	d3 e0                	shl    eax,cl
c001f333:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f337:	89 f8                	mov    eax,edi
c001f339:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f33d:	88 d1                	mov    cl,dl
c001f33f:	d3 e8                	shr    eax,cl
c001f341:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f345:	09 c1                	or     ecx,eax
c001f347:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f34b:	89 e9                	mov    ecx,ebp
c001f34d:	d3 e7                	shl    edi,cl
c001f34f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f353:	89 d8                	mov    eax,ebx
c001f355:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f359:	88 d1                	mov    cl,dl
c001f35b:	d3 e8                	shr    eax,cl
c001f35d:	89 c7                	mov    edi,eax
c001f35f:	89 e9                	mov    ecx,ebp
c001f361:	d3 e3                	shl    ebx,cl
c001f363:	89 f0                	mov    eax,esi
c001f365:	88 d1                	mov    cl,dl
c001f367:	d3 e8                	shr    eax,cl
c001f369:	09 d8                	or     eax,ebx
c001f36b:	89 e9                	mov    ecx,ebp
c001f36d:	d3 e6                	shl    esi,cl
c001f36f:	89 f3                	mov    ebx,esi
c001f371:	89 fa                	mov    edx,edi
c001f373:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f377:	89 d1                	mov    ecx,edx
c001f379:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f37d:	89 c6                	mov    esi,eax
c001f37f:	89 d7                	mov    edi,edx
c001f381:	39 d1                	cmp    ecx,edx
c001f383:	72 27                	jb     c001f3ac <__umoddi3+0x10c>
c001f385:	74 21                	je     c001f3a8 <__umoddi3+0x108>
c001f387:	89 ca                	mov    edx,ecx
c001f389:	29 f3                	sub    ebx,esi
c001f38b:	19 fa                	sbb    edx,edi
c001f38d:	89 d0                	mov    eax,edx
c001f38f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f393:	d3 e0                	shl    eax,cl
c001f395:	89 e9                	mov    ecx,ebp
c001f397:	d3 eb                	shr    ebx,cl
c001f399:	09 d8                	or     eax,ebx
c001f39b:	d3 ea                	shr    edx,cl
c001f39d:	83 c4 1c             	add    esp,0x1c
c001f3a0:	5b                   	pop    ebx
c001f3a1:	5e                   	pop    esi
c001f3a2:	5f                   	pop    edi
c001f3a3:	5d                   	pop    ebp
c001f3a4:	c3                   	ret    
c001f3a5:	8d 76 00             	lea    esi,[esi+0x0]
c001f3a8:	39 c3                	cmp    ebx,eax
c001f3aa:	73 db                	jae    c001f387 <__umoddi3+0xe7>
c001f3ac:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f3b0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f3b4:	89 d7                	mov    edi,edx
c001f3b6:	89 c6                	mov    esi,eax
c001f3b8:	eb cd                	jmp    c001f387 <__umoddi3+0xe7>

Disassembly of section .init:

c001f3ba <_init>:
c001f3ba:	55                   	push   ebp
c001f3bb:	89 e5                	mov    ebp,esp
c001f3bd:	e8 32 0d fe ff       	call   c00000f4 <frame_dummy>
c001f3c2:	e8 e5 fa ff ff       	call   c001eeac <__do_global_ctors_aux>
c001f3c7:	5d                   	pop    ebp
c001f3c8:	c3                   	ret    

Disassembly of section .fini:

c001f3c9 <_fini>:
c001f3c9:	55                   	push   ebp
c001f3ca:	89 e5                	mov    ebp,esp
c001f3cc:	e8 b3 0c fe ff       	call   c0000084 <__do_global_dtors_aux>
c001f3d1:	5d                   	pop    ebp
c001f3d2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f3d4 <Computer::~Computer()>:
c001f3d4:	83 ec 0c             	sub    esp,0xc
c001f3d7:	ba f4 06 02 c0       	mov    edx,0xc00206f4
c001f3dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3e0:	89 10                	mov    DWORD PTR [eax],edx
c001f3e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3e6:	83 ec 0c             	sub    esp,0xc
c001f3e9:	50                   	push   eax
c001f3ea:	e8 4d d1 fe ff       	call   c000c53c <Device::~Device()>
c001f3ef:	83 c4 10             	add    esp,0x10
c001f3f2:	90                   	nop
c001f3f3:	83 c4 0c             	add    esp,0xc
c001f3f6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f3f8 <Computer::~Computer()>:
c001f3f8:	83 ec 0c             	sub    esp,0xc
c001f3fb:	83 ec 0c             	sub    esp,0xc
c001f3fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f402:	e8 cd ff ff ff       	call   c001f3d4 <Computer::~Computer()>
c001f407:	83 c4 10             	add    esp,0x10
c001f40a:	83 ec 08             	sub    esp,0x8
c001f40d:	68 70 01 00 00       	push   0x170
c001f412:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f416:	e8 fd b3 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001f41b:	83 c4 10             	add    esp,0x10
c001f41e:	83 c4 0c             	add    esp,0xc
c001f421:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f422 <idleCommon()>:
c001f422:	83 ec 0c             	sub    esp,0xc
c001f425:	fa                   	cli    
c001f426:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001f42c:	e8 f7 66 ff ff       	call   c0015b28 <schedule()>
c001f431:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001f436:	48                   	dec    eax
c001f437:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001f43c:	75 01                	jne    c001f43f <idleCommon()+0x1d>
c001f43e:	fb                   	sti    
c001f43f:	83 c4 0c             	add    esp,0xc
c001f442:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f444 <LinkedList<UnixFile>::~LinkedList()>:
c001f444:	90                   	nop
c001f445:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f446 <LinkedList<UnixFile>::LinkedList()>:
c001f446:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f44a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f450:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f454:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f45b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f45f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f466:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f46a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f470:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f474:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f47b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f47f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f486:	90                   	nop
c001f487:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f488 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f488:	83 ec 0c             	sub    esp,0xc
c001f48b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f490:	75 10                	jne    c001f4a2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f492:	83 ec 0c             	sub    esp,0xc
c001f495:	68 08 09 02 c0       	push   0xc0020908
c001f49a:	e8 ca 1d ff ff       	call   c0011269 <KePanic(char const*)>
c001f49f:	83 c4 10             	add    esp,0x10
c001f4a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4a6:	8b 00                	mov    eax,DWORD PTR [eax]
c001f4a8:	85 c0                	test   eax,eax
c001f4aa:	74 34                	je     c001f4e0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f4ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f4b3:	85 c0                	test   eax,eax
c001f4b5:	74 29                	je     c001f4e0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f4b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4bb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f4be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f4c2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f4c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f4cd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f4d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f4d7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f4de:	eb 65                	jmp    c001f545 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f4e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4e4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f4e6:	85 c0                	test   eax,eax
c001f4e8:	75 4b                	jne    c001f535 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f4ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f4f1:	85 c0                	test   eax,eax
c001f4f3:	75 40                	jne    c001f535 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f4f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f4fd:	89 10                	mov    DWORD PTR [eax],edx
c001f4ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f503:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f507:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f50a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f50e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f511:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f51c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f51f:	85 c0                	test   eax,eax
c001f521:	74 22                	je     c001f545 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f523:	83 ec 0c             	sub    esp,0xc
c001f526:	68 2a 09 02 c0       	push   0xc002092a
c001f52b:	e8 39 1d ff ff       	call   c0011269 <KePanic(char const*)>
c001f530:	83 c4 10             	add    esp,0x10
c001f533:	eb 10                	jmp    c001f545 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f535:	83 ec 0c             	sub    esp,0xc
c001f538:	68 34 09 02 c0       	push   0xc0020934
c001f53d:	e8 27 1d ff ff       	call   c0011269 <KePanic(char const*)>
c001f542:	83 c4 10             	add    esp,0x10
c001f545:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f549:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f54c:	8d 50 01             	lea    edx,[eax+0x1]
c001f54f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f553:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f556:	90                   	nop
c001f557:	83 c4 0c             	add    esp,0xc
c001f55a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f55c <LinkedList<UnixFile>::getFirstElement()>:
c001f55c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f560:	8b 00                	mov    eax,DWORD PTR [eax]
c001f562:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f564 <LinkedList<UnixFile>::removeFirst()>:
c001f564:	83 ec 0c             	sub    esp,0xc
c001f567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f56b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f56d:	85 c0                	test   eax,eax
c001f56f:	75 12                	jne    c001f583 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f571:	83 ec 0c             	sub    esp,0xc
c001f574:	68 40 09 02 c0       	push   0xc0020940
c001f579:	e8 eb 1c ff ff       	call   c0011269 <KePanic(char const*)>
c001f57e:	83 c4 10             	add    esp,0x10
c001f581:	eb 7e                	jmp    c001f601 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f583:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f587:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f58a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f58d:	85 c0                	test   eax,eax
c001f58f:	74 10                	je     c001f5a1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f591:	83 ec 0c             	sub    esp,0xc
c001f594:	68 8b 09 02 c0       	push   0xc002098b
c001f599:	e8 cb 1c ff ff       	call   c0011269 <KePanic(char const*)>
c001f59e:	83 c4 10             	add    esp,0x10
c001f5a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5a5:	8b 00                	mov    eax,DWORD PTR [eax]
c001f5a7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f5aa:	85 c0                	test   eax,eax
c001f5ac:	75 33                	jne    c001f5e1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f5ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5b2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f5b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5bc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f5c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5c7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f5ca:	83 f8 01             	cmp    eax,0x1
c001f5cd:	74 21                	je     c001f5f0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f5cf:	83 ec 0c             	sub    esp,0xc
c001f5d2:	68 64 09 02 c0       	push   0xc0020964
c001f5d7:	e8 8d 1c ff ff       	call   c0011269 <KePanic(char const*)>
c001f5dc:	83 c4 10             	add    esp,0x10
c001f5df:	eb 0f                	jmp    c001f5f0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f5e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5e5:	8b 00                	mov    eax,DWORD PTR [eax]
c001f5e7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f5ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5ee:	89 10                	mov    DWORD PTR [eax],edx
c001f5f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f5f7:	8d 50 ff             	lea    edx,[eax-0x1]
c001f5fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5fe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f601:	83 c4 0c             	add    esp,0xc
c001f604:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f606 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f60a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f60d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f60e <DriverlessDevice::~DriverlessDevice()>:
c001f60e:	ba 9c 14 02 c0       	mov    edx,0xc002149c
c001f613:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f617:	89 10                	mov    DWORD PTR [eax],edx
c001f619:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f61d:	50                   	push   eax
c001f61e:	e8 19 cf fe ff       	call   c000c53c <Device::~Device()>
c001f623:	83 c4 04             	add    esp,0x4
c001f626:	90                   	nop
c001f627:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f628 <DriverlessDevice::~DriverlessDevice()>:
c001f628:	83 ec 0c             	sub    esp,0xc
c001f62b:	83 ec 0c             	sub    esp,0xc
c001f62e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f632:	e8 d7 ff ff ff       	call   c001f60e <DriverlessDevice::~DriverlessDevice()>
c001f637:	83 c4 10             	add    esp,0x10
c001f63a:	83 ec 08             	sub    esp,0x8
c001f63d:	68 58 01 00 00       	push   0x158
c001f642:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f646:	e8 cd b1 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001f64b:	83 c4 10             	add    esp,0x10
c001f64e:	83 c4 0c             	add    esp,0xc
c001f651:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001f652 <LinkedList<Device>::addElement(Device*)>:
c001f652:	83 ec 0c             	sub    esp,0xc
c001f655:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f65a:	75 10                	jne    c001f66c <LinkedList<Device>::addElement(Device*)+0x1a>
c001f65c:	83 ec 0c             	sub    esp,0xc
c001f65f:	68 08 09 02 c0       	push   0xc0020908
c001f664:	e8 00 1c ff ff       	call   c0011269 <KePanic(char const*)>
c001f669:	83 c4 10             	add    esp,0x10
c001f66c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f670:	8b 00                	mov    eax,DWORD PTR [eax]
c001f672:	85 c0                	test   eax,eax
c001f674:	74 3a                	je     c001f6b0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f676:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f67a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f67d:	85 c0                	test   eax,eax
c001f67f:	74 2f                	je     c001f6b0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f681:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f685:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f688:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f68c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001f692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f696:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f69a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f69d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6a1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f6a4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f6ae:	eb 68                	jmp    c001f718 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f6b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6b4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f6b6:	85 c0                	test   eax,eax
c001f6b8:	75 4e                	jne    c001f708 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f6ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f6c1:	85 c0                	test   eax,eax
c001f6c3:	75 43                	jne    c001f708 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f6c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f6cd:	89 10                	mov    DWORD PTR [eax],edx
c001f6cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6d3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f6d7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f6da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f6e1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f6eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6ef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f6f2:	85 c0                	test   eax,eax
c001f6f4:	74 22                	je     c001f718 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f6f6:	83 ec 0c             	sub    esp,0xc
c001f6f9:	68 2a 09 02 c0       	push   0xc002092a
c001f6fe:	e8 66 1b ff ff       	call   c0011269 <KePanic(char const*)>
c001f703:	83 c4 10             	add    esp,0x10
c001f706:	eb 10                	jmp    c001f718 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f708:	83 ec 0c             	sub    esp,0xc
c001f70b:	68 34 09 02 c0       	push   0xc0020934
c001f710:	e8 54 1b ff ff       	call   c0011269 <KePanic(char const*)>
c001f715:	83 c4 10             	add    esp,0x10
c001f718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f71c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f71f:	8d 50 01             	lea    edx,[eax+0x1]
c001f722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f726:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f729:	90                   	nop
c001f72a:	83 c4 0c             	add    esp,0xc
c001f72d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001f72e <LinkedList<Device>::LinkedList()>:
c001f72e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f732:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f738:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f73c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f743:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f747:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f74e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f752:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f75c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f763:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f767:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f76e:	90                   	nop
c001f76f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001f770 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001f770:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f774:	8b 00                	mov    eax,DWORD PTR [eax]
c001f776:	85 c0                	test   eax,eax
c001f778:	75 0e                	jne    c001f788 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f77a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f77e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f781:	85 c0                	test   eax,eax
c001f783:	75 03                	jne    c001f788 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f785:	b0 01                	mov    al,0x1
c001f787:	c3                   	ret    
c001f788:	b0 00                	mov    al,0x0
c001f78a:	90                   	nop
c001f78b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001f78c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001f78c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f790:	8b 00                	mov    eax,DWORD PTR [eax]
c001f792:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001f794 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001f794:	83 ec 0c             	sub    esp,0xc
c001f797:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f79b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f79d:	85 c0                	test   eax,eax
c001f79f:	75 17                	jne    c001f7b8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001f7a1:	83 ec 0c             	sub    esp,0xc
c001f7a4:	68 40 09 02 c0       	push   0xc0020940
c001f7a9:	e8 bb 1a ff ff       	call   c0011269 <KePanic(char const*)>
c001f7ae:	83 c4 10             	add    esp,0x10
c001f7b1:	e9 96 00 00 00       	jmp    c001f84c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001f7b6:	66 90                	xchg   ax,ax
c001f7b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f7bf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f7c2:	85 c0                	test   eax,eax
c001f7c4:	0f 95 c0             	setne  al
c001f7c7:	0f b6 c0             	movzx  eax,al
c001f7ca:	85 c0                	test   eax,eax
c001f7cc:	74 12                	je     c001f7e0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001f7ce:	83 ec 0c             	sub    esp,0xc
c001f7d1:	68 8b 09 02 c0       	push   0xc002098b
c001f7d6:	e8 8e 1a ff ff       	call   c0011269 <KePanic(char const*)>
c001f7db:	83 c4 10             	add    esp,0x10
c001f7de:	66 90                	xchg   ax,ax
c001f7e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7e4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7e6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f7e9:	85 c0                	test   eax,eax
c001f7eb:	0f 94 c0             	sete   al
c001f7ee:	0f b6 c0             	movzx  eax,al
c001f7f1:	85 c0                	test   eax,eax
c001f7f3:	74 33                	je     c001f828 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001f7f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7f9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f7ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f803:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f80a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f80e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f811:	83 f8 01             	cmp    eax,0x1
c001f814:	74 22                	je     c001f838 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f816:	83 ec 0c             	sub    esp,0xc
c001f819:	68 64 09 02 c0       	push   0xc0020964
c001f81e:	e8 46 1a ff ff       	call   c0011269 <KePanic(char const*)>
c001f823:	83 c4 10             	add    esp,0x10
c001f826:	eb 10                	jmp    c001f838 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f82c:	8b 00                	mov    eax,DWORD PTR [eax]
c001f82e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001f831:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f835:	89 10                	mov    DWORD PTR [eax],edx
c001f837:	90                   	nop
c001f838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f83c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f83f:	8d 50 ff             	lea    edx,[eax-0x1]
c001f842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f846:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f849:	8d 76 00             	lea    esi,[esi+0x0]
c001f84c:	83 c4 0c             	add    esp,0xc
c001f84f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001f850 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001f850:	83 ec 0c             	sub    esp,0xc
c001f853:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f858:	75 12                	jne    c001f86c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001f85a:	83 ec 0c             	sub    esp,0xc
c001f85d:	68 08 09 02 c0       	push   0xc0020908
c001f862:	e8 02 1a ff ff       	call   c0011269 <KePanic(char const*)>
c001f867:	83 c4 10             	add    esp,0x10
c001f86a:	66 90                	xchg   ax,ax
c001f86c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f870:	8b 00                	mov    eax,DWORD PTR [eax]
c001f872:	85 c0                	test   eax,eax
c001f874:	74 36                	je     c001f8ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f87a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f87d:	85 c0                	test   eax,eax
c001f87f:	74 2b                	je     c001f8ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f881:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f885:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f888:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f88c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001f88f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f893:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f897:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f89a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f89e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8a1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f8a8:	eb 6a                	jmp    c001f914 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f8aa:	66 90                	xchg   ax,ax
c001f8ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8b0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8b2:	85 c0                	test   eax,eax
c001f8b4:	75 4e                	jne    c001f904 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f8b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8bd:	85 c0                	test   eax,eax
c001f8bf:	75 43                	jne    c001f904 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f8c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8c5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f8c9:	89 10                	mov    DWORD PTR [eax],edx
c001f8cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8cf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f8d3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f8d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8dd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f8e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8e8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f8eb:	85 c0                	test   eax,eax
c001f8ed:	74 25                	je     c001f914 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f8ef:	83 ec 0c             	sub    esp,0xc
c001f8f2:	68 2a 09 02 c0       	push   0xc002092a
c001f8f7:	e8 6d 19 ff ff       	call   c0011269 <KePanic(char const*)>
c001f8fc:	83 c4 10             	add    esp,0x10
c001f8ff:	eb 13                	jmp    c001f914 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f901:	8d 76 00             	lea    esi,[esi+0x0]
c001f904:	83 ec 0c             	sub    esp,0xc
c001f907:	68 34 09 02 c0       	push   0xc0020934
c001f90c:	e8 58 19 ff ff       	call   c0011269 <KePanic(char const*)>
c001f911:	83 c4 10             	add    esp,0x10
c001f914:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f918:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f91b:	8d 50 01             	lea    edx,[eax+0x1]
c001f91e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f922:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f925:	90                   	nop
c001f926:	83 c4 0c             	add    esp,0xc
c001f929:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001f92c <ACPI::~ACPI()>:
c001f92c:	83 ec 0c             	sub    esp,0xc
c001f92f:	ba 84 1a 02 c0       	mov    edx,0xc0021a84
c001f934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f938:	89 10                	mov    DWORD PTR [eax],edx
c001f93a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f93e:	83 ec 0c             	sub    esp,0xc
c001f941:	50                   	push   eax
c001f942:	e8 f5 cb fe ff       	call   c000c53c <Device::~Device()>
c001f947:	83 c4 10             	add    esp,0x10
c001f94a:	90                   	nop
c001f94b:	83 c4 0c             	add    esp,0xc
c001f94e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001f950 <ACPI::~ACPI()>:
c001f950:	83 ec 0c             	sub    esp,0xc
c001f953:	83 ec 0c             	sub    esp,0xc
c001f956:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f95a:	e8 cd ff ff ff       	call   c001f92c <ACPI::~ACPI()>
c001f95f:	83 c4 10             	add    esp,0x10
c001f962:	83 ec 08             	sub    esp,0x8
c001f965:	68 64 12 00 00       	push   0x1264
c001f96a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f96e:	e8 a5 ae fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001f973:	83 c4 10             	add    esp,0x10
c001f976:	83 c4 0c             	add    esp,0xc
c001f979:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001f97c <LinkedList<Device>::~LinkedList()>:
c001f97c:	90                   	nop
c001f97d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001f980 <LinkedList<Device>::isEmpty()>:
c001f980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f984:	8b 00                	mov    eax,DWORD PTR [eax]
c001f986:	85 c0                	test   eax,eax
c001f988:	75 0e                	jne    c001f998 <LinkedList<Device>::isEmpty()+0x18>
c001f98a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f98e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f991:	85 c0                	test   eax,eax
c001f993:	75 03                	jne    c001f998 <LinkedList<Device>::isEmpty()+0x18>
c001f995:	b0 01                	mov    al,0x1
c001f997:	c3                   	ret    
c001f998:	b0 00                	mov    al,0x0
c001f99a:	90                   	nop
c001f99b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001f99c <LinkedList<Device>::getFirstElement()>:
c001f99c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9a0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9a2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001f9a4 <LinkedList<Device>::removeFirst()>:
c001f9a4:	83 ec 0c             	sub    esp,0xc
c001f9a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9ab:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9ad:	85 c0                	test   eax,eax
c001f9af:	75 17                	jne    c001f9c8 <LinkedList<Device>::removeFirst()+0x24>
c001f9b1:	83 ec 0c             	sub    esp,0xc
c001f9b4:	68 40 09 02 c0       	push   0xc0020940
c001f9b9:	e8 ab 18 ff ff       	call   c0011269 <KePanic(char const*)>
c001f9be:	83 c4 10             	add    esp,0x10
c001f9c1:	e9 92 00 00 00       	jmp    c001fa58 <LinkedList<Device>::removeFirst()+0xb4>
c001f9c6:	66 90                	xchg   ax,ax
c001f9c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9cf:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001f9d5:	85 c0                	test   eax,eax
c001f9d7:	74 13                	je     c001f9ec <LinkedList<Device>::removeFirst()+0x48>
c001f9d9:	83 ec 0c             	sub    esp,0xc
c001f9dc:	68 8b 09 02 c0       	push   0xc002098b
c001f9e1:	e8 83 18 ff ff       	call   c0011269 <KePanic(char const*)>
c001f9e6:	83 c4 10             	add    esp,0x10
c001f9e9:	8d 76 00             	lea    esi,[esi+0x0]
c001f9ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9f0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9f2:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001f9f8:	85 c0                	test   eax,eax
c001f9fa:	75 34                	jne    c001fa30 <LinkedList<Device>::removeFirst()+0x8c>
c001f9fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa00:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fa06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa0a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fa11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa15:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa18:	83 f8 01             	cmp    eax,0x1
c001fa1b:	74 27                	je     c001fa44 <LinkedList<Device>::removeFirst()+0xa0>
c001fa1d:	83 ec 0c             	sub    esp,0xc
c001fa20:	68 64 09 02 c0       	push   0xc0020964
c001fa25:	e8 3f 18 ff ff       	call   c0011269 <KePanic(char const*)>
c001fa2a:	83 c4 10             	add    esp,0x10
c001fa2d:	eb 15                	jmp    c001fa44 <LinkedList<Device>::removeFirst()+0xa0>
c001fa2f:	90                   	nop
c001fa30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa34:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa36:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001fa3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa40:	89 10                	mov    DWORD PTR [eax],edx
c001fa42:	66 90                	xchg   ax,ax
c001fa44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa48:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa4b:	8d 50 ff             	lea    edx,[eax-0x1]
c001fa4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa52:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fa55:	8d 76 00             	lea    esi,[esi+0x0]
c001fa58:	83 c4 0c             	add    esp,0xc
c001fa5b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001fa5c <CPU::~CPU()>:
c001fa5c:	83 ec 0c             	sub    esp,0xc
c001fa5f:	ba 2c 1c 02 c0       	mov    edx,0xc0021c2c
c001fa64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa68:	89 10                	mov    DWORD PTR [eax],edx
c001fa6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa6e:	83 ec 0c             	sub    esp,0xc
c001fa71:	50                   	push   eax
c001fa72:	e8 c5 ca fe ff       	call   c000c53c <Device::~Device()>
c001fa77:	83 c4 10             	add    esp,0x10
c001fa7a:	90                   	nop
c001fa7b:	83 c4 0c             	add    esp,0xc
c001fa7e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001fa80 <CPU::~CPU()>:
c001fa80:	83 ec 0c             	sub    esp,0xc
c001fa83:	83 ec 0c             	sub    esp,0xc
c001fa86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa8a:	e8 cd ff ff ff       	call   c001fa5c <CPU::~CPU()>
c001fa8f:	83 c4 10             	add    esp,0x10
c001fa92:	83 ec 08             	sub    esp,0x8
c001fa95:	68 94 11 00 00       	push   0x1194
c001fa9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa9e:	e8 75 ad fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001faa3:	83 c4 10             	add    esp,0x10
c001faa6:	83 c4 0c             	add    esp,0xc
c001faa9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001faac <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001faac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fab0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fab3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001fab4 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001fab4:	90                   	nop
c001fab5:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001fab8 <ThreadControlBlock::ThreadControlBlock()>:
c001fab8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fabc:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fac3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fac7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001face:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fad2:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001fad9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fadd:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001fae4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fae8:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001faef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faf3:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001faf7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fafb:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001faff:	90                   	nop
c001fb00:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001fb04 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001fb04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb08:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb12:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb1d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb28:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb32:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb39:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb3d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb44:	90                   	nop
c001fb45:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001fb46 <PCI::~PCI()>:
c001fb46:	83 ec 0c             	sub    esp,0xc
c001fb49:	ba 0c 2b 02 c0       	mov    edx,0xc0022b0c
c001fb4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb52:	89 10                	mov    DWORD PTR [eax],edx
c001fb54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb58:	83 ec 0c             	sub    esp,0xc
c001fb5b:	50                   	push   eax
c001fb5c:	e8 73 c4 fe ff       	call   c000bfd4 <Bus::~Bus()>
c001fb61:	83 c4 10             	add    esp,0x10
c001fb64:	90                   	nop
c001fb65:	83 c4 0c             	add    esp,0xc
c001fb68:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001fb6a <PCI::~PCI()>:
c001fb6a:	83 ec 0c             	sub    esp,0xc
c001fb6d:	83 ec 0c             	sub    esp,0xc
c001fb70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb74:	e8 cd ff ff ff       	call   c001fb46 <PCI::~PCI()>
c001fb79:	83 c4 10             	add    esp,0x10
c001fb7c:	83 ec 08             	sub    esp,0x8
c001fb7f:	68 5c 01 00 00       	push   0x15c
c001fb84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb88:	e8 8b ac fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fb8d:	83 c4 10             	add    esp,0x10
c001fb90:	83 c4 0c             	add    esp,0xc
c001fb93:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001fb94 <IDE::~IDE()>:
c001fb94:	83 ec 0c             	sub    esp,0xc
c001fb97:	ba c0 2b 02 c0       	mov    edx,0xc0022bc0
c001fb9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fba0:	89 10                	mov    DWORD PTR [eax],edx
c001fba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fba6:	83 ec 0c             	sub    esp,0xc
c001fba9:	50                   	push   eax
c001fbaa:	e8 05 ce fe ff       	call   c000c9b4 <HardDiskController::~HardDiskController()>
c001fbaf:	83 c4 10             	add    esp,0x10
c001fbb2:	90                   	nop
c001fbb3:	83 c4 0c             	add    esp,0xc
c001fbb6:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001fbb8 <IDE::~IDE()>:
c001fbb8:	83 ec 0c             	sub    esp,0xc
c001fbbb:	83 ec 0c             	sub    esp,0xc
c001fbbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbc2:	e8 cd ff ff ff       	call   c001fb94 <IDE::~IDE()>
c001fbc7:	83 c4 10             	add    esp,0x10
c001fbca:	83 ec 08             	sub    esp,0x8
c001fbcd:	68 70 02 00 00       	push   0x270
c001fbd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbd6:	e8 3d ac fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fbdb:	83 c4 10             	add    esp,0x10
c001fbde:	83 c4 0c             	add    esp,0xc
c001fbe1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001fbe2 <SATABus::~SATABus()>:
c001fbe2:	83 ec 0c             	sub    esp,0xc
c001fbe5:	ba 10 2c 02 c0       	mov    edx,0xc0022c10
c001fbea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbee:	89 10                	mov    DWORD PTR [eax],edx
c001fbf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbf4:	83 ec 0c             	sub    esp,0xc
c001fbf7:	50                   	push   eax
c001fbf8:	e8 b7 cd fe ff       	call   c000c9b4 <HardDiskController::~HardDiskController()>
c001fbfd:	83 c4 10             	add    esp,0x10
c001fc00:	90                   	nop
c001fc01:	83 c4 0c             	add    esp,0xc
c001fc04:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001fc06 <SATABus::~SATABus()>:
c001fc06:	83 ec 0c             	sub    esp,0xc
c001fc09:	83 ec 0c             	sub    esp,0xc
c001fc0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc10:	e8 cd ff ff ff       	call   c001fbe2 <SATABus::~SATABus()>
c001fc15:	83 c4 10             	add    esp,0x10
c001fc18:	83 ec 08             	sub    esp,0x8
c001fc1b:	68 64 01 00 00       	push   0x164
c001fc20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc24:	e8 ef ab fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fc29:	83 c4 10             	add    esp,0x10
c001fc2c:	83 c4 0c             	add    esp,0xc
c001fc2f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001fc30 <ATA::~ATA()>:
c001fc30:	83 ec 0c             	sub    esp,0xc
c001fc33:	ba 50 2c 02 c0       	mov    edx,0xc0022c50
c001fc38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc3c:	89 10                	mov    DWORD PTR [eax],edx
c001fc3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc42:	83 ec 0c             	sub    esp,0xc
c001fc45:	50                   	push   eax
c001fc46:	e8 4b ce fe ff       	call   c000ca96 <PhysicalDisk::~PhysicalDisk()>
c001fc4b:	83 c4 10             	add    esp,0x10
c001fc4e:	90                   	nop
c001fc4f:	83 c4 0c             	add    esp,0xc
c001fc52:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001fc54 <ATA::~ATA()>:
c001fc54:	83 ec 0c             	sub    esp,0xc
c001fc57:	83 ec 0c             	sub    esp,0xc
c001fc5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc5e:	e8 cd ff ff ff       	call   c001fc30 <ATA::~ATA()>
c001fc63:	83 c4 10             	add    esp,0x10
c001fc66:	83 ec 08             	sub    esp,0x8
c001fc69:	68 7c 01 00 00       	push   0x17c
c001fc6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc72:	e8 a1 ab fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fc77:	83 c4 10             	add    esp,0x10
c001fc7a:	83 c4 0c             	add    esp,0xc
c001fc7d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001fc7e <ATAPI::~ATAPI()>:
c001fc7e:	83 ec 0c             	sub    esp,0xc
c001fc81:	ba 98 2c 02 c0       	mov    edx,0xc0022c98
c001fc86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc8a:	89 10                	mov    DWORD PTR [eax],edx
c001fc8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc90:	83 ec 0c             	sub    esp,0xc
c001fc93:	50                   	push   eax
c001fc94:	e8 fd cd fe ff       	call   c000ca96 <PhysicalDisk::~PhysicalDisk()>
c001fc99:	83 c4 10             	add    esp,0x10
c001fc9c:	90                   	nop
c001fc9d:	83 c4 0c             	add    esp,0xc
c001fca0:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001fca2 <ATAPI::~ATAPI()>:
c001fca2:	83 ec 0c             	sub    esp,0xc
c001fca5:	83 ec 0c             	sub    esp,0xc
c001fca8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcac:	e8 cd ff ff ff       	call   c001fc7e <ATAPI::~ATAPI()>
c001fcb1:	83 c4 10             	add    esp,0x10
c001fcb4:	83 ec 08             	sub    esp,0x8
c001fcb7:	68 84 01 00 00       	push   0x184
c001fcbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcc0:	e8 53 ab fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fcc5:	83 c4 10             	add    esp,0x10
c001fcc8:	83 c4 0c             	add    esp,0xc
c001fccb:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001fccc <SATA::~SATA()>:
c001fccc:	83 ec 0c             	sub    esp,0xc
c001fccf:	ba 4c 2d 02 c0       	mov    edx,0xc0022d4c
c001fcd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcd8:	89 10                	mov    DWORD PTR [eax],edx
c001fcda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcde:	83 ec 0c             	sub    esp,0xc
c001fce1:	50                   	push   eax
c001fce2:	e8 af cd fe ff       	call   c000ca96 <PhysicalDisk::~PhysicalDisk()>
c001fce7:	83 c4 10             	add    esp,0x10
c001fcea:	90                   	nop
c001fceb:	83 c4 0c             	add    esp,0xc
c001fcee:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001fcf0 <SATA::~SATA()>:
c001fcf0:	83 ec 0c             	sub    esp,0xc
c001fcf3:	83 ec 0c             	sub    esp,0xc
c001fcf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcfa:	e8 cd ff ff ff       	call   c001fccc <SATA::~SATA()>
c001fcff:	83 c4 10             	add    esp,0x10
c001fd02:	83 ec 08             	sub    esp,0x8
c001fd05:	68 7c 01 00 00       	push   0x17c
c001fd0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd0e:	e8 05 ab fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fd13:	83 c4 10             	add    esp,0x10
c001fd16:	83 c4 0c             	add    esp,0xc
c001fd19:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001fd1a <SATAPI::~SATAPI()>:
c001fd1a:	83 ec 0c             	sub    esp,0xc
c001fd1d:	ba 70 2e 02 c0       	mov    edx,0xc0022e70
c001fd22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd26:	89 10                	mov    DWORD PTR [eax],edx
c001fd28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd2c:	83 ec 0c             	sub    esp,0xc
c001fd2f:	50                   	push   eax
c001fd30:	e8 61 cd fe ff       	call   c000ca96 <PhysicalDisk::~PhysicalDisk()>
c001fd35:	83 c4 10             	add    esp,0x10
c001fd38:	90                   	nop
c001fd39:	83 c4 0c             	add    esp,0xc
c001fd3c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001fd3e <SATAPI::~SATAPI()>:
c001fd3e:	83 ec 0c             	sub    esp,0xc
c001fd41:	83 ec 0c             	sub    esp,0xc
c001fd44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd48:	e8 cd ff ff ff       	call   c001fd1a <SATAPI::~SATAPI()>
c001fd4d:	83 c4 10             	add    esp,0x10
c001fd50:	83 ec 08             	sub    esp,0x8
c001fd53:	68 84 01 00 00       	push   0x184
c001fd58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd5c:	e8 b7 aa fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fd61:	83 c4 10             	add    esp,0x10
c001fd64:	83 c4 0c             	add    esp,0xc
c001fd67:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001fd68 <IOAPIC::~IOAPIC()>:
c001fd68:	83 ec 0c             	sub    esp,0xc
c001fd6b:	ba b0 2e 02 c0       	mov    edx,0xc0022eb0
c001fd70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd74:	89 10                	mov    DWORD PTR [eax],edx
c001fd76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd7a:	83 ec 0c             	sub    esp,0xc
c001fd7d:	50                   	push   eax
c001fd7e:	e8 b9 c7 fe ff       	call   c000c53c <Device::~Device()>
c001fd83:	83 c4 10             	add    esp,0x10
c001fd86:	90                   	nop
c001fd87:	83 c4 0c             	add    esp,0xc
c001fd8a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001fd8c <IOAPIC::~IOAPIC()>:
c001fd8c:	83 ec 0c             	sub    esp,0xc
c001fd8f:	83 ec 0c             	sub    esp,0xc
c001fd92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd96:	e8 cd ff ff ff       	call   c001fd68 <IOAPIC::~IOAPIC()>
c001fd9b:	83 c4 10             	add    esp,0x10
c001fd9e:	83 ec 08             	sub    esp,0x8
c001fda1:	68 68 01 00 00       	push   0x168
c001fda6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdaa:	e8 69 aa fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fdaf:	83 c4 10             	add    esp,0x10
c001fdb2:	83 c4 0c             	add    esp,0xc
c001fdb5:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001fdb8 <APICTimer::~APICTimer()>:
c001fdb8:	83 ec 0c             	sub    esp,0xc
c001fdbb:	ba f8 2e 02 c0       	mov    edx,0xc0022ef8
c001fdc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdc4:	89 10                	mov    DWORD PTR [eax],edx
c001fdc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdca:	83 ec 0c             	sub    esp,0xc
c001fdcd:	50                   	push   eax
c001fdce:	e8 35 e2 fe ff       	call   c000e008 <Timer::~Timer()>
c001fdd3:	83 c4 10             	add    esp,0x10
c001fdd6:	90                   	nop
c001fdd7:	83 c4 0c             	add    esp,0xc
c001fdda:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001fddc <APICTimer::~APICTimer()>:
c001fddc:	83 ec 0c             	sub    esp,0xc
c001fddf:	83 ec 0c             	sub    esp,0xc
c001fde2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fde6:	e8 cd ff ff ff       	call   c001fdb8 <APICTimer::~APICTimer()>
c001fdeb:	83 c4 10             	add    esp,0x10
c001fdee:	83 ec 08             	sub    esp,0x8
c001fdf1:	68 60 01 00 00       	push   0x160
c001fdf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdfa:	e8 19 aa fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fdff:	83 c4 10             	add    esp,0x10
c001fe02:	83 c4 0c             	add    esp,0xc
c001fe05:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001fe08 <PIT::~PIT()>:
c001fe08:	83 ec 0c             	sub    esp,0xc
c001fe0b:	ba 48 2f 02 c0       	mov    edx,0xc0022f48
c001fe10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe14:	89 10                	mov    DWORD PTR [eax],edx
c001fe16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe1a:	83 ec 0c             	sub    esp,0xc
c001fe1d:	50                   	push   eax
c001fe1e:	e8 e5 e1 fe ff       	call   c000e008 <Timer::~Timer()>
c001fe23:	83 c4 10             	add    esp,0x10
c001fe26:	90                   	nop
c001fe27:	83 c4 0c             	add    esp,0xc
c001fe2a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001fe2c <PIT::~PIT()>:
c001fe2c:	83 ec 0c             	sub    esp,0xc
c001fe2f:	83 ec 0c             	sub    esp,0xc
c001fe32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe36:	e8 cd ff ff ff       	call   c001fe08 <PIT::~PIT()>
c001fe3b:	83 c4 10             	add    esp,0x10
c001fe3e:	83 ec 08             	sub    esp,0x8
c001fe41:	68 5c 01 00 00       	push   0x15c
c001fe46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe4a:	e8 c9 a9 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fe4f:	83 c4 10             	add    esp,0x10
c001fe52:	83 c4 0c             	add    esp,0xc
c001fe55:	c3                   	ret    

Disassembly of section userkernel:

c0024000 <KiDefaultSignalHandlerAbort(int)>:
c0024000:	57                   	push   edi
c0024001:	b9 07 00 00 00       	mov    ecx,0x7
c0024006:	56                   	push   esi
c0024007:	be 5d 1d 02 c0       	mov    esi,0xc0021d5d
c002400c:	83 ec 24             	sub    esp,0x24
c002400f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024013:	fc                   	cld    
c0024014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002401a:	50                   	push   eax
c002401b:	6a 00                	push   0x0
c002401d:	6a 38                	push   0x38
c002401f:	6a 01                	push   0x1
c0024021:	e8 2c 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0024026:	83 c4 34             	add    esp,0x34
c0024029:	5e                   	pop    esi
c002402a:	5f                   	pop    edi
c002402b:	c3                   	ret    

c002402c <KiDefaultSignalHandlerTerminate(int)>:
c002402c:	57                   	push   edi
c002402d:	b9 08 00 00 00       	mov    ecx,0x8
c0024032:	56                   	push   esi
c0024033:	be 79 1d 02 c0       	mov    esi,0xc0021d79
c0024038:	83 ec 24             	sub    esp,0x24
c002403b:	89 e7                	mov    edi,esp
c002403d:	fc                   	cld    
c002403e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024040:	54                   	push   esp
c0024041:	6a 00                	push   0x0
c0024043:	6a 37                	push   0x37
c0024045:	6a 01                	push   0x1
c0024047:	e8 06 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002404c:	83 c4 34             	add    esp,0x34
c002404f:	5e                   	pop    esi
c0024050:	5f                   	pop    edi
c0024051:	c3                   	ret    

c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0024052:	53                   	push   ebx
c0024053:	83 ec 10             	sub    esp,0x10
c0024056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002405a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002405e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024066:	cd 60                	int    0x60
c0024068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002406c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0024074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024078:	83 c4 10             	add    esp,0x10
c002407b:	5b                   	pop    ebx
c002407c:	c3                   	ret    

Disassembly of section align_previous:

c0025000 <DO_NOT_DELETE()>:
c0025000:	c3                   	ret    
