
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 ec 62 01 00       	call   c001630c <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 84 42 03 c0       	mov    eax,0xc0034284
c0000025:	3d 84 42 03 c0       	cmp    eax,0xc0034284
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 84 42 03 c0       	push   0xc0034284
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 84 42 03 c0       	mov    eax,0xc0034284
c0000051:	2d 84 42 03 c0       	sub    eax,0xc0034284
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 84 42 03 c0       	push   0xc0034284
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d a0 68 03 c0 00 	cmp    BYTE PTR ds:0xc00368a0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 0c ef 02 c0       	mov    ebx,0xc002ef0c
c0000097:	81 eb 08 ef 02 c0    	sub    ebx,0xc002ef08
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 08 ef 02 c0       	mov    esi,0xc002ef08
c00000a6:	a1 a4 68 03 c0       	mov    eax,ds:0xc00368a4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 a4 68 03 c0       	mov    ds:0xc00368a4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 a4 68 03 c0       	mov    eax,ds:0xc00368a4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 84 42 03 c0       	push   0xc0034284
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 a0 68 03 c0 01 	mov    BYTE PTR ds:0xc00368a0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 a8 68 03 c0       	push   0xc00368a8
c0000108:	68 84 42 03 c0       	push   0xc0034284
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 d7 40 02 00       	call   c0024384 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 04 8c 01 00       	call   c0018ec9 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 b5 40 02 00       	call   c0024384 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 c2 45 02 00       	call   c00248b0 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 c9 4c 02 00       	call   c0024fc0 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c4 a9 03 c0 	lgdtd  ds:0xc003a9c4
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 b7 fc 01 00       	jmp    c0020036 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 c0 68 03 c0       	mov    ds:0xc00368c0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 c0 68 03 c0    	mov    DWORD PTR ds:0xc00368c0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d c0 68 03 c0    	mov    ebx,DWORD PTR ds:0xc00368c0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 20 ef 02 c0 02 	test   BYTE PTR [edx-0x3ffd10e0],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 20 ef 02 c0 01 	test   BYTE PTR [edx-0x3ffd10e0],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 20 ef 02 c0 08 	test   BYTE PTR [edx-0x3ffd10e0],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 20 ef 02 c0 04 	test   BYTE PTR [ecx-0x3ffd10e0],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 20 ef 02 c0 01 	test   BYTE PTR [edx-0x3ffd10e0],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <LWIP_PLATFORM_HTONS>:
c0000be8:	83 ec 04             	sub    esp,0x4
c0000beb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000bef:	66 89 04 24          	mov    WORD PTR [esp],ax
c0000bf3:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0000bf7:	c1 e8 08             	shr    eax,0x8
c0000bfa:	89 c2                	mov    edx,eax
c0000bfc:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0000c00:	c1 e0 08             	shl    eax,0x8
c0000c03:	09 d0                	or     eax,edx
c0000c05:	83 c4 04             	add    esp,0x4
c0000c08:	c3                   	ret    
c0000c09:	8d 76 00             	lea    esi,[esi+0x0]

c0000c0c <LWIP_PLATFORM_HTONL>:
c0000c0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c10:	c1 e8 18             	shr    eax,0x18
c0000c13:	89 c2                	mov    edx,eax
c0000c15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c19:	c1 e8 08             	shr    eax,0x8
c0000c1c:	25 00 ff 00 00       	and    eax,0xff00
c0000c21:	09 c2                	or     edx,eax
c0000c23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c27:	c1 e0 08             	shl    eax,0x8
c0000c2a:	25 00 00 ff 00       	and    eax,0xff0000
c0000c2f:	09 c2                	or     edx,eax
c0000c31:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c35:	c1 e0 18             	shl    eax,0x18
c0000c38:	09 d0                	or     eax,edx
c0000c3a:	c3                   	ret    
c0000c3b:	90                   	nop

c0000c3c <lwip_socket_init>:
c0000c3c:	90                   	nop
c0000c3d:	c3                   	ret    
c0000c3e:	66 90                	xchg   ax,ax

c0000c40 <sys_mutex_new>:
c0000c40:	90                   	nop
c0000c41:	c3                   	ret    
c0000c42:	66 90                	xchg   ax,ax

c0000c44 <sys_mutex_lock>:
c0000c44:	90                   	nop
c0000c45:	c3                   	ret    
c0000c46:	66 90                	xchg   ax,ax

c0000c48 <sys_mutex_unlock>:
c0000c48:	90                   	nop
c0000c49:	c3                   	ret    
c0000c4a:	66 90                	xchg   ax,ax

c0000c4c <tcpip_callback_with_block>:
c0000c4c:	90                   	nop
c0000c4d:	c3                   	ret    
c0000c4e:	66 90                	xchg   ax,ax

c0000c50 <sys_sem_new>:
c0000c50:	83 ec 04             	sub    esp,0x4
c0000c53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000c57:	88 04 24             	mov    BYTE PTR [esp],al
c0000c5a:	b0 00                	mov    al,0x0
c0000c5c:	83 c4 04             	add    esp,0x4
c0000c5f:	c3                   	ret    

c0000c60 <sys_sem_free>:
c0000c60:	90                   	nop
c0000c61:	c3                   	ret    
c0000c62:	66 90                	xchg   ax,ax

c0000c64 <sys_sem_signal>:
c0000c64:	90                   	nop
c0000c65:	c3                   	ret    
c0000c66:	66 90                	xchg   ax,ax

c0000c68 <sys_arch_sem_wait>:
c0000c68:	b8 00 00 00 00       	mov    eax,0x0
c0000c6d:	c3                   	ret    
c0000c6e:	66 90                	xchg   ax,ax

c0000c70 <sys_mbox_new>:
c0000c70:	b0 00                	mov    al,0x0
c0000c72:	c3                   	ret    
c0000c73:	90                   	nop

c0000c74 <sys_mbox_free>:
c0000c74:	90                   	nop
c0000c75:	c3                   	ret    
c0000c76:	66 90                	xchg   ax,ax

c0000c78 <sys_mbox_post>:
c0000c78:	90                   	nop
c0000c79:	c3                   	ret    
c0000c7a:	66 90                	xchg   ax,ax

c0000c7c <sys_arch_mbox_fetch>:
c0000c7c:	b8 00 00 00 00       	mov    eax,0x0
c0000c81:	c3                   	ret    
c0000c82:	66 90                	xchg   ax,ax

c0000c84 <sys_arch_mbox_tryfetch>:
c0000c84:	b8 00 00 00 00       	mov    eax,0x0
c0000c89:	c3                   	ret    
c0000c8a:	66 90                	xchg   ax,ax

c0000c8c <sys_mbox_trypost>:
c0000c8c:	90                   	nop
c0000c8d:	c3                   	ret    
c0000c8e:	66 90                	xchg   ax,ax

c0000c90 <sys_thread_new>:
c0000c90:	b8 00 00 00 00       	mov    eax,0x0
c0000c95:	c3                   	ret    
c0000c96:	66 90                	xchg   ax,ax

c0000c98 <sys_init>:
c0000c98:	90                   	nop
c0000c99:	c3                   	ret    

c0000c9a <largebin_index>:
c0000c9a:	89 c2                	mov    edx,eax
c0000c9c:	c1 ea 08             	shr    edx,0x8
c0000c9f:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000ca5:	77 10                	ja     c0000cb7 <largebin_index+0x1d>
c0000ca7:	0f bd d2             	bsr    edx,edx
c0000caa:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000cad:	d3 e8                	shr    eax,cl
c0000caf:	83 e0 03             	and    eax,0x3
c0000cb2:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000cb6:	c3                   	ret    
c0000cb7:	b8 5f 00 00 00       	mov    eax,0x5f
c0000cbc:	c3                   	ret    

c0000cbd <malloc_init_state>:
c0000cbd:	53                   	push   ebx
c0000cbe:	8d 50 34             	lea    edx,[eax+0x34]
c0000cc1:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000cc7:	89 d1                	mov    ecx,edx
c0000cc9:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000ccc:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000ccf:	83 c2 08             	add    edx,0x8
c0000cd2:	39 da                	cmp    edx,ebx
c0000cd4:	75 f3                	jne    c0000cc9 <malloc_init_state+0xc>
c0000cd6:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd8:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000ce2:	83 e2 03             	and    edx,0x3
c0000ce5:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000cef:	83 ca 48             	or     edx,0x48
c0000cf2:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cfc:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000d06:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000d0d:	89 10                	mov    DWORD PTR [eax],edx
c0000d0f:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000d12:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000d1c:	5b                   	pop    ebx
c0000d1d:	c3                   	ret    

c0000d1e <malloc_consolidate>:
c0000d1e:	8b 10                	mov    edx,DWORD PTR [eax]
c0000d20:	85 d2                	test   edx,edx
c0000d22:	0f 84 d8 00 00 00    	je     c0000e00 <malloc_consolidate+0xe2>
c0000d28:	55                   	push   ebp
c0000d29:	83 e2 fd             	and    edx,0xfffffffd
c0000d2c:	57                   	push   edi
c0000d2d:	89 c5                	mov    ebp,eax
c0000d2f:	56                   	push   esi
c0000d30:	8d 78 34             	lea    edi,[eax+0x34]
c0000d33:	53                   	push   ebx
c0000d34:	83 ec 10             	sub    esp,0x10
c0000d37:	89 10                	mov    DWORD PTR [eax],edx
c0000d39:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000d3d:	c1 ea 03             	shr    edx,0x3
c0000d40:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000d44:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000d48:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d4b:	85 d2                	test   edx,edx
c0000d4d:	0f 84 98 00 00 00    	je     c0000deb <malloc_consolidate+0xcd>
c0000d53:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d5a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d5d:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d60:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d64:	89 f9                	mov    ecx,edi
c0000d66:	83 e1 fe             	and    ecx,0xfffffffe
c0000d69:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d6c:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d6f:	83 e3 fc             	and    ebx,0xfffffffc
c0000d72:	83 e7 01             	and    edi,0x1
c0000d75:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d78:	75 14                	jne    c0000d8e <malloc_consolidate+0x70>
c0000d7a:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d7c:	29 fa                	sub    edx,edi
c0000d7e:	01 f9                	add    ecx,edi
c0000d80:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d83:	89 fb                	mov    ebx,edi
c0000d85:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d88:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d8b:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d8e:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d91:	74 40                	je     c0000dd3 <malloc_consolidate+0xb5>
c0000d93:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d96:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d99:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d9d:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000da0:	83 e7 01             	and    edi,0x1
c0000da3:	75 0e                	jne    c0000db3 <malloc_consolidate+0x95>
c0000da5:	01 d9                	add    ecx,ebx
c0000da7:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000daa:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000dad:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000db0:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000db3:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000db6:	89 ce                	mov    esi,ecx
c0000db8:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000dbb:	83 ce 01             	or     esi,0x1
c0000dbe:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000dc1:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000dc4:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000dc7:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000dcb:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000dce:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000dd1:	eb 0c                	jmp    c0000ddf <malloc_consolidate+0xc1>
c0000dd3:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000dd6:	83 c9 01             	or     ecx,0x1
c0000dd9:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ddc:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ddf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000de3:	85 d2                	test   edx,edx
c0000de5:	0f 85 6f ff ff ff    	jne    c0000d5a <malloc_consolidate+0x3c>
c0000deb:	83 c5 04             	add    ebp,0x4
c0000dee:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000df2:	0f 85 50 ff ff ff    	jne    c0000d48 <malloc_consolidate+0x2a>
c0000df8:	83 c4 10             	add    esp,0x10
c0000dfb:	5b                   	pop    ebx
c0000dfc:	5e                   	pop    esi
c0000dfd:	5f                   	pop    edi
c0000dfe:	5d                   	pop    ebp
c0000dff:	c3                   	ret    
c0000e00:	e9 b8 fe ff ff       	jmp    c0000cbd <malloc_init_state>

c0000e05 <dlfree>:
c0000e05:	57                   	push   edi
c0000e06:	56                   	push   esi
c0000e07:	53                   	push   ebx
c0000e08:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000e0c:	85 db                	test   ebx,ebx
c0000e0e:	0f 84 e2 00 00 00    	je     c0000ef6 <dlfree+0xf1>
c0000e14:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000e17:	8b 0d e0 68 03 c0    	mov    ecx,DWORD PTR ds:0xc00368e0
c0000e1d:	89 f0                	mov    eax,esi
c0000e1f:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000e22:	83 e0 fc             	and    eax,0xfffffffc
c0000e25:	39 c1                	cmp    ecx,eax
c0000e27:	72 24                	jb     c0000e4d <dlfree+0x48>
c0000e29:	83 c9 03             	or     ecx,0x3
c0000e2c:	c1 e8 03             	shr    eax,0x3
c0000e2f:	89 0d e0 68 03 c0    	mov    DWORD PTR ds:0xc00368e0,ecx
c0000e35:	83 e8 02             	sub    eax,0x2
c0000e38:	8b 0c 85 e4 68 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc971c]
c0000e3f:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000e41:	89 14 85 e4 68 03 c0 	mov    DWORD PTR [eax*4-0x3ffc971c],edx
c0000e48:	e9 a9 00 00 00       	jmp    c0000ef6 <dlfree+0xf1>
c0000e4d:	83 e6 02             	and    esi,0x2
c0000e50:	0f 85 a0 00 00 00    	jne    c0000ef6 <dlfree+0xf1>
c0000e56:	83 c9 01             	or     ecx,0x1
c0000e59:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e5c:	89 0d e0 68 03 c0    	mov    DWORD PTR ds:0xc00368e0,ecx
c0000e62:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e65:	83 e1 fc             	and    ecx,0xfffffffc
c0000e68:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e6c:	75 13                	jne    c0000e81 <dlfree+0x7c>
c0000e6e:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e71:	29 da                	sub    edx,ebx
c0000e73:	01 d8                	add    eax,ebx
c0000e75:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e78:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e7b:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e7e:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e81:	39 35 0c 69 03 c0    	cmp    DWORD PTR ds:0xc003690c,esi
c0000e87:	74 40                	je     c0000ec9 <dlfree+0xc4>
c0000e89:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e8d:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e90:	80 e3 01             	and    bl,0x1
c0000e93:	75 0e                	jne    c0000ea3 <dlfree+0x9e>
c0000e95:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e98:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e9b:	01 c8                	add    eax,ecx
c0000e9d:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000ea0:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000ea3:	8b 0d 1c 69 03 c0    	mov    ecx,DWORD PTR ds:0xc003691c
c0000ea9:	c7 42 0c 14 69 03 c0 	mov    DWORD PTR [edx+0xc],0xc0036914
c0000eb0:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000eb3:	89 15 1c 69 03 c0    	mov    DWORD PTR ds:0xc003691c,edx
c0000eb9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000ebc:	89 c1                	mov    ecx,eax
c0000ebe:	83 c9 01             	or     ecx,0x1
c0000ec1:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ec4:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000ec7:	eb 10                	jmp    c0000ed9 <dlfree+0xd4>
c0000ec9:	01 c8                	add    eax,ecx
c0000ecb:	89 c1                	mov    ecx,eax
c0000ecd:	83 c9 01             	or     ecx,0x1
c0000ed0:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ed3:	89 15 0c 69 03 c0    	mov    DWORD PTR ds:0xc003690c,edx
c0000ed9:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000ede:	76 16                	jbe    c0000ef6 <dlfree+0xf1>
c0000ee0:	f6 05 e0 68 03 c0 02 	test   BYTE PTR ds:0xc00368e0,0x2
c0000ee7:	74 0d                	je     c0000ef6 <dlfree+0xf1>
c0000ee9:	5b                   	pop    ebx
c0000eea:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0000eef:	5e                   	pop    esi
c0000ef0:	5f                   	pop    edi
c0000ef1:	e9 28 fe ff ff       	jmp    c0000d1e <malloc_consolidate>
c0000ef6:	5b                   	pop    ebx
c0000ef7:	5e                   	pop    esi
c0000ef8:	5f                   	pop    edi
c0000ef9:	c3                   	ret    

c0000efa <sYSMALLOc>:
c0000efa:	55                   	push   ebp
c0000efb:	57                   	push   edi
c0000efc:	56                   	push   esi
c0000efd:	53                   	push   ebx
c0000efe:	89 d3                	mov    ebx,edx
c0000f00:	83 ec 2c             	sub    esp,0x2c
c0000f03:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f07:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000f0d:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000f10:	8d 42 ff             	lea    eax,[edx-0x1]
c0000f13:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000f17:	74 1f                	je     c0000f38 <sYSMALLOc+0x3e>
c0000f19:	89 d8                	mov    eax,ebx
c0000f1b:	e8 fe fd ff ff       	call   c0000d1e <malloc_consolidate>
c0000f20:	83 ec 0c             	sub    esp,0xc
c0000f23:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000f27:	83 e8 07             	sub    eax,0x7
c0000f2a:	50                   	push   eax
c0000f2b:	e8 2d 02 00 00       	call   c000115d <dlmalloc>
c0000f30:	83 c4 10             	add    esp,0x10
c0000f33:	e9 1d 02 00 00       	jmp    c0001155 <sYSMALLOc+0x25b>
c0000f38:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000f3b:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000f41:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000f44:	83 e0 fc             	and    eax,0xfffffffc
c0000f47:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f4f:	83 c0 10             	add    eax,0x10
c0000f52:	01 c1                	add    ecx,eax
c0000f54:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000f58:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f5f:	74 04                	je     c0000f65 <sYSMALLOc+0x6b>
c0000f61:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f65:	f7 da                	neg    edx
c0000f67:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
c0000f6b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0000f6f:	21 d1                	and    ecx,edx
c0000f71:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f75:	7f 07                	jg     c0000f7e <sYSMALLOc+0x84>
c0000f77:	31 c0                	xor    eax,eax
c0000f79:	e9 d7 01 00 00       	jmp    c0001155 <sYSMALLOc+0x25b>
c0000f7e:	83 ec 0c             	sub    esp,0xc
c0000f81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f85:	e8 fa 51 01 00       	call   c0016184 <sbrk>
c0000f8a:	83 c4 10             	add    esp,0x10
c0000f8d:	89 c6                	mov    esi,eax
c0000f8f:	83 f8 ff             	cmp    eax,0xffffffff
c0000f92:	74 e3                	je     c0000f77 <sYSMALLOc+0x7d>
c0000f94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f98:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f9b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f9f:	03 83 68 03 00 00    	add    eax,DWORD PTR [ebx+0x368]
c0000fa5:	39 f1                	cmp    ecx,esi
c0000fa7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000fab:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fb1:	75 13                	jne    c0000fc6 <sYSMALLOc+0xcc>
c0000fb3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fbb:	83 c8 01             	or     eax,0x1
c0000fbe:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000fc1:	e9 37 01 00 00       	jmp    c00010fd <sYSMALLOc+0x203>
c0000fc6:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000fcc:	89 d5                	mov    ebp,edx
c0000fce:	83 e5 01             	and    ebp,0x1
c0000fd1:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000fd6:	0f 95 c0             	setne  al
c0000fd9:	21 e8                	and    eax,ebp
c0000fdb:	39 f1                	cmp    ecx,esi
c0000fdd:	76 12                	jbe    c0000ff1 <sYSMALLOc+0xf7>
c0000fdf:	85 c0                	test   eax,eax
c0000fe1:	74 0e                	je     c0000ff1 <sYSMALLOc+0xf7>
c0000fe3:	83 e2 fe             	and    edx,0xfffffffe
c0000fe6:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fec:	e9 82 00 00 00       	jmp    c0001073 <sYSMALLOc+0x179>
c0000ff1:	85 ed                	test   ebp,ebp
c0000ff3:	74 7e                	je     c0001073 <sYSMALLOc+0x179>
c0000ff5:	85 c0                	test   eax,eax
c0000ff7:	74 0e                	je     c0001007 <sYSMALLOc+0x10d>
c0000ff9:	89 f0                	mov    eax,esi
c0000ffb:	29 c8                	sub    eax,ecx
c0000ffd:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0001001:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0001007:	89 f2                	mov    edx,esi
c0001009:	83 e2 07             	and    edx,0x7
c000100c:	74 0c                	je     c000101a <sYSMALLOc+0x120>
c000100e:	b8 08 00 00 00       	mov    eax,0x8
c0001013:	29 d0                	sub    eax,edx
c0001015:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0001018:	eb 04                	jmp    c000101e <sYSMALLOc+0x124>
c000101a:	89 f5                	mov    ebp,esi
c000101c:	31 c0                	xor    eax,eax
c000101e:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0001022:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001026:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000102a:	01 c1                	add    ecx,eax
c000102c:	83 ec 0c             	sub    esp,0xc
c000102f:	01 f1                	add    ecx,esi
c0001031:	01 ca                	add    edx,ecx
c0001033:	29 c8                	sub    eax,ecx
c0001035:	23 54 24 24          	and    edx,DWORD PTR [esp+0x24]
c0001039:	01 c2                	add    edx,eax
c000103b:	52                   	push   edx
c000103c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0001040:	e8 3f 51 01 00       	call   c0016184 <sbrk>
c0001045:	83 c4 10             	add    esp,0x10
c0001048:	83 f8 ff             	cmp    eax,0xffffffff
c000104b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000104f:	75 0f                	jne    c0001060 <sYSMALLOc+0x166>
c0001051:	83 ec 0c             	sub    esp,0xc
c0001054:	6a 00                	push   0x0
c0001056:	e8 29 51 01 00       	call   c0016184 <sbrk>
c000105b:	83 c4 10             	add    esp,0x10
c000105e:	eb 30                	jmp    c0001090 <sYSMALLOc+0x196>
c0001060:	39 c6                	cmp    esi,eax
c0001062:	76 33                	jbe    c0001097 <sYSMALLOc+0x19d>
c0001064:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001068:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000106f:	01 f0                	add    eax,esi
c0001071:	eb 1d                	jmp    c0001090 <sYSMALLOc+0x196>
c0001073:	83 ec 0c             	sub    esp,0xc
c0001076:	89 f5                	mov    ebp,esi
c0001078:	6a 00                	push   0x0
c000107a:	e8 05 51 01 00       	call   c0016184 <sbrk>
c000107f:	89 c2                	mov    edx,eax
c0001081:	29 f2                	sub    edx,esi
c0001083:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001087:	83 c4 10             	add    esp,0x10
c000108a:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001090:	31 d2                	xor    edx,edx
c0001092:	83 f8 ff             	cmp    eax,0xffffffff
c0001095:	74 66                	je     c00010fd <sYSMALLOc+0x203>
c0001097:	29 e8                	sub    eax,ebp
c0001099:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000109c:	01 d0                	add    eax,edx
c000109e:	83 c8 01             	or     eax,0x1
c00010a1:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00010a4:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010aa:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00010af:	74 4c                	je     c00010fd <sYSMALLOc+0x203>
c00010b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010b5:	83 e8 0c             	sub    eax,0xc
c00010b8:	83 e0 f8             	and    eax,0xfffffff8
c00010bb:	89 c2                	mov    edx,eax
c00010bd:	83 ca 01             	or     edx,0x1
c00010c0:	83 f8 0f             	cmp    eax,0xf
c00010c3:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c00010c6:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c00010ce:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c00010d6:	76 25                	jbe    c00010fd <sYSMALLOc+0x203>
c00010d8:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00010de:	83 ec 0c             	sub    esp,0xc
c00010e1:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010eb:	83 c7 08             	add    edi,0x8
c00010ee:	57                   	push   edi
c00010ef:	e8 11 fd ff ff       	call   c0000e05 <dlfree>
c00010f4:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010fa:	83 c4 10             	add    esp,0x10
c00010fd:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001103:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001109:	73 06                	jae    c0001111 <sYSMALLOc+0x217>
c000110b:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0001111:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0001117:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c000111d:	73 06                	jae    c0001125 <sYSMALLOc+0x22b>
c000111f:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001125:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001128:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000112b:	83 e2 fc             	and    edx,0xfffffffc
c000112e:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
c0001132:	0f 82 3f fe ff ff    	jb     c0000f77 <sYSMALLOc+0x7d>
c0001138:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000113c:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000113f:	29 fa                	sub    edx,edi
c0001141:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001144:	83 ca 01             	or     edx,0x1
c0001147:	89 fb                	mov    ebx,edi
c0001149:	83 c0 08             	add    eax,0x8
c000114c:	83 cb 01             	or     ebx,0x1
c000114f:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001152:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001155:	83 c4 2c             	add    esp,0x2c
c0001158:	5b                   	pop    ebx
c0001159:	5e                   	pop    esi
c000115a:	5f                   	pop    edi
c000115b:	5d                   	pop    ebp
c000115c:	c3                   	ret    

c000115d <dlmalloc>:
c000115d:	55                   	push   ebp
c000115e:	57                   	push   edi
c000115f:	56                   	push   esi
c0001160:	53                   	push   ebx
c0001161:	83 ec 1c             	sub    esp,0x1c
c0001164:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001168:	83 f8 df             	cmp    eax,0xffffffdf
c000116b:	0f 87 70 03 00 00    	ja     c00014e1 <dlmalloc+0x384>
c0001171:	83 c0 0b             	add    eax,0xb
c0001174:	be 10 00 00 00       	mov    esi,0x10
c0001179:	83 f8 0f             	cmp    eax,0xf
c000117c:	76 05                	jbe    c0001183 <dlmalloc+0x26>
c000117e:	83 e0 f8             	and    eax,0xfffffff8
c0001181:	89 c6                	mov    esi,eax
c0001183:	8b 3d e0 68 03 c0    	mov    edi,DWORD PTR ds:0xc00368e0
c0001189:	f7 c7 01 00 00 00    	test   edi,0x1
c000118f:	75 17                	jne    c00011a8 <dlmalloc+0x4b>
c0001191:	85 ff                	test   edi,edi
c0001193:	0f 85 05 03 00 00    	jne    c000149e <dlmalloc+0x341>
c0001199:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c000119e:	e8 7b fb ff ff       	call   c0000d1e <malloc_consolidate>
c00011a3:	e9 f6 02 00 00       	jmp    c000149e <dlmalloc+0x341>
c00011a8:	39 f7                	cmp    edi,esi
c00011aa:	72 1f                	jb     c00011cb <dlmalloc+0x6e>
c00011ac:	89 f2                	mov    edx,esi
c00011ae:	c1 ea 03             	shr    edx,0x3
c00011b1:	83 ea 02             	sub    edx,0x2
c00011b4:	8b 04 95 e4 68 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc971c]
c00011bb:	85 c0                	test   eax,eax
c00011bd:	74 0c                	je     c00011cb <dlmalloc+0x6e>
c00011bf:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00011c2:	89 0c 95 e4 68 03 c0 	mov    DWORD PTR [edx*4-0x3ffc971c],ecx
c00011c9:	eb 30                	jmp    c00011fb <dlmalloc+0x9e>
c00011cb:	89 f0                	mov    eax,esi
c00011cd:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d3:	77 2e                	ja     c0001203 <dlmalloc+0xa6>
c00011d5:	c1 e8 03             	shr    eax,0x3
c00011d8:	8d 14 c5 14 69 03 c0 	lea    edx,[eax*8-0x3ffc96ec]
c00011df:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011e3:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011e6:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011e9:	39 c3                	cmp    ebx,eax
c00011eb:	74 2e                	je     c000121b <dlmalloc+0xbe>
c00011ed:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011f0:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011f5:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011f8:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011fb:	83 c0 08             	add    eax,0x8
c00011fe:	e9 e0 02 00 00       	jmp    c00014e3 <dlmalloc+0x386>
c0001203:	e8 92 fa ff ff       	call   c0000c9a <largebin_index>
c0001208:	83 e7 02             	and    edi,0x2
c000120b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000120f:	74 0a                	je     c000121b <dlmalloc+0xbe>
c0001211:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001216:	e8 03 fb ff ff       	call   c0000d1e <malloc_consolidate>
c000121b:	8d 46 10             	lea    eax,[esi+0x10]
c000121e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001222:	8b 1d 20 69 03 c0    	mov    ebx,DWORD PTR ds:0xc0036920
c0001228:	81 fb 14 69 03 c0    	cmp    ebx,0xc0036914
c000122e:	0f 84 13 01 00 00    	je     c0001347 <dlmalloc+0x1ea>
c0001234:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001237:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000123a:	83 e7 fc             	and    edi,0xfffffffc
c000123d:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001243:	77 4c                	ja     c0001291 <dlmalloc+0x134>
c0001245:	3d 14 69 03 c0       	cmp    eax,0xc0036914
c000124a:	75 45                	jne    c0001291 <dlmalloc+0x134>
c000124c:	39 1d 10 69 03 c0    	cmp    DWORD PTR ds:0xc0036910,ebx
c0001252:	75 3d                	jne    c0001291 <dlmalloc+0x134>
c0001254:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001258:	73 37                	jae    c0001291 <dlmalloc+0x134>
c000125a:	8d 04 33             	lea    eax,[ebx+esi*1]
c000125d:	89 fa                	mov    edx,edi
c000125f:	a3 1c 69 03 c0       	mov    ds:0xc003691c,eax
c0001264:	a3 20 69 03 c0       	mov    ds:0xc0036920,eax
c0001269:	a3 10 69 03 c0       	mov    ds:0xc0036910,eax
c000126e:	29 f2                	sub    edx,esi
c0001270:	c7 40 08 14 69 03 c0 	mov    DWORD PTR [eax+0x8],0xc0036914
c0001277:	c7 40 0c 14 69 03 c0 	mov    DWORD PTR [eax+0xc],0xc0036914
c000127e:	83 ce 01             	or     esi,0x1
c0001281:	89 d1                	mov    ecx,edx
c0001283:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001286:	83 c9 01             	or     ecx,0x1
c0001289:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000128c:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000128f:	eb 15                	jmp    c00012a6 <dlmalloc+0x149>
c0001291:	a3 20 69 03 c0       	mov    ds:0xc0036920,eax
c0001296:	39 fe                	cmp    esi,edi
c0001298:	c7 40 08 14 69 03 c0 	mov    DWORD PTR [eax+0x8],0xc0036914
c000129f:	75 0d                	jne    c00012ae <dlmalloc+0x151>
c00012a1:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00012a6:	8d 43 08             	lea    eax,[ebx+0x8]
c00012a9:	e9 35 02 00 00       	jmp    c00014e3 <dlmalloc+0x386>
c00012ae:	89 f8                	mov    eax,edi
c00012b0:	81 ff ff 00 00 00    	cmp    edi,0xff
c00012b6:	77 19                	ja     c00012d1 <dlmalloc+0x174>
c00012b8:	c1 e8 03             	shr    eax,0x3
c00012bb:	8d 14 00             	lea    edx,[eax+eax*1]
c00012be:	83 c2 0d             	add    edx,0xd
c00012c1:	8d 2c 95 d8 68 03 c0 	lea    ebp,[edx*4-0x3ffc9728]
c00012c8:	8b 14 95 e0 68 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc9720]
c00012cf:	eb 46                	jmp    c0001317 <dlmalloc+0x1ba>
c00012d1:	e8 c4 f9 ff ff       	call   c0000c9a <largebin_index>
c00012d6:	8d 14 00             	lea    edx,[eax+eax*1]
c00012d9:	83 c2 0d             	add    edx,0xd
c00012dc:	8d 0c 95 e0 68 03 c0 	lea    ecx,[edx*4-0x3ffc9720]
c00012e3:	8b 14 95 e0 68 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc9720]
c00012ea:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012ed:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012f1:	89 d5                	mov    ebp,edx
c00012f3:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012f7:	74 1e                	je     c0001317 <dlmalloc+0x1ba>
c00012f9:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012fc:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012ff:	77 12                	ja     c0001313 <dlmalloc+0x1b6>
c0001301:	83 cf 01             	or     edi,0x1
c0001304:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001307:	76 05                	jbe    c000130e <dlmalloc+0x1b1>
c0001309:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000130c:	eb f6                	jmp    c0001304 <dlmalloc+0x1a7>
c000130e:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001311:	eb 04                	jmp    c0001317 <dlmalloc+0x1ba>
c0001313:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001317:	89 c7                	mov    edi,eax
c0001319:	88 c1                	mov    cl,al
c000131b:	c1 ff 05             	sar    edi,0x5
c000131e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001322:	bf 01 00 00 00       	mov    edi,0x1
c0001327:	d3 e7                	shl    edi,cl
c0001329:	89 f8                	mov    eax,edi
c000132b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000132f:	09 04 bd 14 6c 03 c0 	or     DWORD PTR [edi*4-0x3ffc93ec],eax
c0001336:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001339:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000133c:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000133f:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001342:	e9 db fe ff ff       	jmp    c0001222 <dlmalloc+0xc5>
c0001347:	81 fe ff 00 00 00    	cmp    esi,0xff
c000134d:	76 78                	jbe    c00013c7 <dlmalloc+0x26a>
c000134f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001353:	8d 04 c5 14 69 03 c0 	lea    eax,[eax*8-0x3ffc96ec]
c000135a:	8d 48 f8             	lea    ecx,[eax-0x8]
c000135d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001360:	39 ca                	cmp    edx,ecx
c0001362:	74 63                	je     c00013c7 <dlmalloc+0x26a>
c0001364:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001367:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000136a:	83 e3 fc             	and    ebx,0xfffffffc
c000136d:	39 de                	cmp    esi,ebx
c000136f:	77 52                	ja     c00013c3 <dlmalloc+0x266>
c0001371:	89 df                	mov    edi,ebx
c0001373:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001376:	29 f7                	sub    edi,esi
c0001378:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000137b:	01 d3                	add    ebx,edx
c000137d:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001380:	83 ff 0f             	cmp    edi,0xf
c0001383:	8d 42 08             	lea    eax,[edx+0x8]
c0001386:	77 09                	ja     c0001391 <dlmalloc+0x234>
c0001388:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000138c:	e9 52 01 00 00       	jmp    c00014e3 <dlmalloc+0x386>
c0001391:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001394:	83 ce 01             	or     esi,0x1
c0001397:	89 0d 1c 69 03 c0    	mov    DWORD PTR ds:0xc003691c,ecx
c000139d:	89 0d 20 69 03 c0    	mov    DWORD PTR ds:0xc0036920,ecx
c00013a3:	c7 41 08 14 69 03 c0 	mov    DWORD PTR [ecx+0x8],0xc0036914
c00013aa:	c7 41 0c 14 69 03 c0 	mov    DWORD PTR [ecx+0xc],0xc0036914
c00013b1:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c00013b4:	89 fa                	mov    edx,edi
c00013b6:	83 ca 01             	or     edx,0x1
c00013b9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00013bc:	89 3b                	mov    DWORD PTR [ebx],edi
c00013be:	e9 20 01 00 00       	jmp    c00014e3 <dlmalloc+0x386>
c00013c3:	89 c2                	mov    edx,eax
c00013c5:	eb 99                	jmp    c0001360 <dlmalloc+0x203>
c00013c7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00013cb:	b8 01 00 00 00       	mov    eax,0x1
c00013d0:	41                   	inc    ecx
c00013d1:	89 cb                	mov    ebx,ecx
c00013d3:	8d 14 cd 0c 69 03 c0 	lea    edx,[ecx*8-0x3ffc96f4]
c00013da:	c1 eb 05             	shr    ebx,0x5
c00013dd:	d3 e0                	shl    eax,cl
c00013df:	8b 3c 9d 14 6c 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc93ec]
c00013e6:	39 f8                	cmp    eax,edi
c00013e8:	77 04                	ja     c00013ee <dlmalloc+0x291>
c00013ea:	85 c0                	test   eax,eax
c00013ec:	75 26                	jne    c0001414 <dlmalloc+0x2b7>
c00013ee:	43                   	inc    ebx
c00013ef:	83 fb 02             	cmp    ebx,0x2
c00013f2:	0f 87 a6 00 00 00    	ja     c000149e <dlmalloc+0x341>
c00013f8:	8b 3c 9d 14 6c 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc93ec]
c00013ff:	85 ff                	test   edi,edi
c0001401:	74 eb                	je     c00013ee <dlmalloc+0x291>
c0001403:	89 d8                	mov    eax,ebx
c0001405:	c1 e0 06             	shl    eax,0x6
c0001408:	8d 14 85 0c 69 03 c0 	lea    edx,[eax*4-0x3ffc96f4]
c000140f:	b8 01 00 00 00       	mov    eax,0x1
c0001414:	85 f8                	test   eax,edi
c0001416:	75 07                	jne    c000141f <dlmalloc+0x2c2>
c0001418:	83 c2 08             	add    edx,0x8
c000141b:	01 c0                	add    eax,eax
c000141d:	eb f5                	jmp    c0001414 <dlmalloc+0x2b7>
c000141f:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001422:	39 ca                	cmp    edx,ecx
c0001424:	75 14                	jne    c000143a <dlmalloc+0x2dd>
c0001426:	89 c1                	mov    ecx,eax
c0001428:	83 c2 08             	add    edx,0x8
c000142b:	f7 d1                	not    ecx
c000142d:	01 c0                	add    eax,eax
c000142f:	21 cf                	and    edi,ecx
c0001431:	89 3c 9d 14 6c 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc93ec],edi
c0001438:	eb ac                	jmp    c00013e6 <dlmalloc+0x289>
c000143a:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000143d:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001440:	83 e0 fc             	and    eax,0xfffffffc
c0001443:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001446:	89 c3                	mov    ebx,eax
c0001448:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000144b:	29 f3                	sub    ebx,esi
c000144d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001450:	83 fb 0f             	cmp    ebx,0xf
c0001453:	8d 41 08             	lea    eax,[ecx+0x8]
c0001456:	77 09                	ja     c0001461 <dlmalloc+0x304>
c0001458:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c000145c:	e9 82 00 00 00       	jmp    c00014e3 <dlmalloc+0x386>
c0001461:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001464:	81 fe ff 00 00 00    	cmp    esi,0xff
c000146a:	89 3d 1c 69 03 c0    	mov    DWORD PTR ds:0xc003691c,edi
c0001470:	89 3d 20 69 03 c0    	mov    DWORD PTR ds:0xc0036920,edi
c0001476:	c7 47 08 14 69 03 c0 	mov    DWORD PTR [edi+0x8],0xc0036914
c000147d:	c7 47 0c 14 69 03 c0 	mov    DWORD PTR [edi+0xc],0xc0036914
c0001484:	77 06                	ja     c000148c <dlmalloc+0x32f>
c0001486:	89 3d 10 69 03 c0    	mov    DWORD PTR ds:0xc0036910,edi
c000148c:	83 ce 01             	or     esi,0x1
c000148f:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001492:	89 d9                	mov    ecx,ebx
c0001494:	83 c9 01             	or     ecx,0x1
c0001497:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000149a:	89 1a                	mov    DWORD PTR [edx],ebx
c000149c:	eb 45                	jmp    c00014e3 <dlmalloc+0x386>
c000149e:	a1 0c 69 03 c0       	mov    eax,ds:0xc003690c
c00014a3:	8d 4e 10             	lea    ecx,[esi+0x10]
c00014a6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00014a9:	83 e2 fc             	and    edx,0xfffffffc
c00014ac:	39 d1                	cmp    ecx,edx
c00014ae:	77 1e                	ja     c00014ce <dlmalloc+0x371>
c00014b0:	8d 0c 30             	lea    ecx,[eax+esi*1]
c00014b3:	89 f3                	mov    ebx,esi
c00014b5:	89 0d 0c 69 03 c0    	mov    DWORD PTR ds:0xc003690c,ecx
c00014bb:	83 cb 01             	or     ebx,0x1
c00014be:	29 f2                	sub    edx,esi
c00014c0:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014c3:	83 ca 01             	or     edx,0x1
c00014c6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00014c9:	e9 2d fd ff ff       	jmp    c00011fb <dlmalloc+0x9e>
c00014ce:	83 c4 1c             	add    esp,0x1c
c00014d1:	89 f0                	mov    eax,esi
c00014d3:	5b                   	pop    ebx
c00014d4:	ba e0 68 03 c0       	mov    edx,0xc00368e0
c00014d9:	5e                   	pop    esi
c00014da:	5f                   	pop    edi
c00014db:	5d                   	pop    ebp
c00014dc:	e9 19 fa ff ff       	jmp    c0000efa <sYSMALLOc>
c00014e1:	31 c0                	xor    eax,eax
c00014e3:	83 c4 1c             	add    esp,0x1c
c00014e6:	5b                   	pop    ebx
c00014e7:	5e                   	pop    esi
c00014e8:	5f                   	pop    edi
c00014e9:	5d                   	pop    ebp
c00014ea:	c3                   	ret    

c00014eb <iALLOc>:
c00014eb:	55                   	push   ebp
c00014ec:	89 c5                	mov    ebp,eax
c00014ee:	57                   	push   edi
c00014ef:	56                   	push   esi
c00014f0:	53                   	push   ebx
c00014f1:	83 ec 2c             	sub    esp,0x2c
c00014f4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014f8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001500:	83 3d e0 68 03 c0 00 	cmp    DWORD PTR ds:0xc00368e0,0x0
c0001507:	75 12                	jne    c000151b <iALLOc+0x30>
c0001509:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000150d:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001512:	e8 07 f8 ff ff       	call   c0000d1e <malloc_consolidate>
c0001517:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000151b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001520:	74 12                	je     c0001534 <iALLOc+0x49>
c0001522:	85 ed                	test   ebp,ebp
c0001524:	0f 84 64 01 00 00    	je     c000168e <iALLOc+0x1a3>
c000152a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001532:	eb 33                	jmp    c0001567 <iALLOc+0x7c>
c0001534:	85 ed                	test   ebp,ebp
c0001536:	75 14                	jne    c000154c <iALLOc+0x61>
c0001538:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001540:	83 c4 2c             	add    esp,0x2c
c0001543:	5b                   	pop    ebx
c0001544:	5e                   	pop    esi
c0001545:	5f                   	pop    edi
c0001546:	5d                   	pop    ebp
c0001547:	e9 11 fc ff ff       	jmp    c000115d <dlmalloc>
c000154c:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001553:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c000155b:	83 f8 0f             	cmp    eax,0xf
c000155e:	76 07                	jbe    c0001567 <iALLOc+0x7c>
c0001560:	83 e0 f8             	and    eax,0xfffffff8
c0001563:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001567:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000156c:	75 09                	jne    c0001577 <iALLOc+0x8c>
c000156e:	89 d0                	mov    eax,edx
c0001570:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001573:	31 f6                	xor    esi,esi
c0001575:	eb 3b                	jmp    c00015b2 <iALLOc+0xc7>
c0001577:	8b 02                	mov    eax,DWORD PTR [edx]
c0001579:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001581:	83 c0 0b             	add    eax,0xb
c0001584:	83 f8 0f             	cmp    eax,0xf
c0001587:	76 07                	jbe    c0001590 <iALLOc+0xa5>
c0001589:	83 e0 f8             	and    eax,0xfffffff8
c000158c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001590:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001594:	0f af f5             	imul   esi,ebp
c0001597:	eb 25                	jmp    c00015be <iALLOc+0xd3>
c0001599:	8b 18                	mov    ebx,DWORD PTR [eax]
c000159b:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000159e:	bb 10 00 00 00       	mov    ebx,0x10
c00015a3:	83 f9 0f             	cmp    ecx,0xf
c00015a6:	76 05                	jbe    c00015ad <iALLOc+0xc2>
c00015a8:	83 e1 f8             	and    ecx,0xfffffff8
c00015ab:	89 cb                	mov    ebx,ecx
c00015ad:	01 de                	add    esi,ebx
c00015af:	83 c0 04             	add    eax,0x4
c00015b2:	39 c7                	cmp    edi,eax
c00015b4:	75 e3                	jne    c0001599 <iALLOc+0xae>
c00015b6:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00015be:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00015c2:	8b 1d 34 6c 03 c0    	mov    ebx,DWORD PTR ds:0xc0036c34
c00015c8:	83 ec 0c             	sub    esp,0xc
c00015cb:	c7 05 34 6c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036c34,0x0
c00015d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00015d9:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00015dd:	50                   	push   eax
c00015de:	e8 7a fb ff ff       	call   c000115d <dlmalloc>
c00015e3:	83 c4 10             	add    esp,0x10
c00015e6:	89 1d 34 6c 03 c0    	mov    DWORD PTR ds:0xc0036c34,ebx
c00015ec:	85 c0                	test   eax,eax
c00015ee:	0f 84 92 00 00 00    	je     c0001686 <iALLOc+0x19b>
c00015f4:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015f7:	8d 78 f8             	lea    edi,[eax-0x8]
c00015fa:	83 e3 fc             	and    ebx,0xfffffffc
c00015fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001601:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001606:	74 1e                	je     c0001626 <iALLOc+0x13b>
c0001608:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000160c:	89 d9                	mov    ecx,ebx
c000160e:	52                   	push   edx
c000160f:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001613:	83 e9 04             	sub    ecx,0x4
c0001616:	51                   	push   ecx
c0001617:	6a 00                	push   0x0
c0001619:	50                   	push   eax
c000161a:	e8 d1 ee ff ff       	call   c00004f0 <memset>
c000161f:	83 c4 10             	add    esp,0x10
c0001622:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001626:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000162b:	75 14                	jne    c0001641 <iALLOc+0x156>
c000162d:	8d 04 37             	lea    eax,[edi+esi*1]
c0001630:	29 f3                	sub    ebx,esi
c0001632:	8d 48 08             	lea    ecx,[eax+0x8]
c0001635:	83 cb 01             	or     ebx,0x1
c0001638:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000163c:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000163f:	89 f3                	mov    ebx,esi
c0001641:	31 c0                	xor    eax,eax
c0001643:	4d                   	dec    ebp
c0001644:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001647:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000164b:	39 c5                	cmp    ebp,eax
c000164d:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001650:	74 2c                	je     c000167e <iALLOc+0x193>
c0001652:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001656:	85 c9                	test   ecx,ecx
c0001658:	75 15                	jne    c000166f <iALLOc+0x184>
c000165a:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000165d:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001660:	b9 10 00 00 00       	mov    ecx,0x10
c0001665:	83 fe 0f             	cmp    esi,0xf
c0001668:	76 05                	jbe    c000166f <iALLOc+0x184>
c000166a:	83 e6 f8             	and    esi,0xfffffff8
c000166d:	89 f1                	mov    ecx,esi
c000166f:	89 ce                	mov    esi,ecx
c0001671:	29 cb                	sub    ebx,ecx
c0001673:	83 ce 01             	or     esi,0x1
c0001676:	40                   	inc    eax
c0001677:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000167a:	01 cf                	add    edi,ecx
c000167c:	eb c6                	jmp    c0001644 <iALLOc+0x159>
c000167e:	83 cb 01             	or     ebx,0x1
c0001681:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001684:	eb 08                	jmp    c000168e <iALLOc+0x1a3>
c0001686:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000168e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001692:	83 c4 2c             	add    esp,0x2c
c0001695:	5b                   	pop    ebx
c0001696:	5e                   	pop    esi
c0001697:	5f                   	pop    edi
c0001698:	5d                   	pop    ebp
c0001699:	c3                   	ret    

c000169a <dlrealloc>:
c000169a:	55                   	push   ebp
c000169b:	57                   	push   edi
c000169c:	56                   	push   esi
c000169d:	53                   	push   ebx
c000169e:	83 ec 1c             	sub    esp,0x1c
c00016a1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00016a5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00016a9:	85 db                	test   ebx,ebx
c00016ab:	75 10                	jne    c00016bd <dlrealloc+0x23>
c00016ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00016b1:	83 c4 1c             	add    esp,0x1c
c00016b4:	5b                   	pop    ebx
c00016b5:	5e                   	pop    esi
c00016b6:	5f                   	pop    edi
c00016b7:	5d                   	pop    ebp
c00016b8:	e9 a0 fa ff ff       	jmp    c000115d <dlmalloc>
c00016bd:	83 f8 df             	cmp    eax,0xffffffdf
c00016c0:	76 07                	jbe    c00016c9 <dlrealloc+0x2f>
c00016c2:	31 db                	xor    ebx,ebx
c00016c4:	e9 6a 01 00 00       	jmp    c0001833 <dlrealloc+0x199>
c00016c9:	83 c0 0b             	add    eax,0xb
c00016cc:	bd 10 00 00 00       	mov    ebp,0x10
c00016d1:	83 f8 0f             	cmp    eax,0xf
c00016d4:	76 05                	jbe    c00016db <dlrealloc+0x41>
c00016d6:	83 e0 f8             	and    eax,0xfffffff8
c00016d9:	89 c5                	mov    ebp,eax
c00016db:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00016de:	8d 7b f8             	lea    edi,[ebx-0x8]
c00016e1:	89 c6                	mov    esi,eax
c00016e3:	83 e6 fc             	and    esi,0xfffffffc
c00016e6:	a8 02                	test   al,0x2
c00016e8:	75 d8                	jne    c00016c2 <dlrealloc+0x28>
c00016ea:	39 f5                	cmp    ebp,esi
c00016ec:	0f 86 04 01 00 00    	jbe    c00017f6 <dlrealloc+0x15c>
c00016f2:	8d 14 37             	lea    edx,[edi+esi*1]
c00016f5:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016f8:	39 15 0c 69 03 c0    	cmp    DWORD PTR ds:0xc003690c,edx
c00016fe:	75 33                	jne    c0001733 <dlrealloc+0x99>
c0001700:	83 e1 fc             	and    ecx,0xfffffffc
c0001703:	01 f1                	add    ecx,esi
c0001705:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001709:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000170c:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0001710:	77 49                	ja     c000175b <dlrealloc+0xc1>
c0001712:	01 ef                	add    edi,ebp
c0001714:	83 e0 01             	and    eax,0x1
c0001717:	09 e8                	or     eax,ebp
c0001719:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c000171c:	89 3d 0c 69 03 c0    	mov    DWORD PTR ds:0xc003690c,edi
c0001722:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001726:	29 e8                	sub    eax,ebp
c0001728:	83 c8 01             	or     eax,0x1
c000172b:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000172e:	e9 00 01 00 00       	jmp    c0001833 <dlrealloc+0x199>
c0001733:	89 c8                	mov    eax,ecx
c0001735:	83 e0 fe             	and    eax,0xfffffffe
c0001738:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000173d:	75 1c                	jne    c000175b <dlrealloc+0xc1>
c000173f:	83 e1 fc             	and    ecx,0xfffffffc
c0001742:	01 f1                	add    ecx,esi
c0001744:	39 cd                	cmp    ebp,ecx
c0001746:	77 13                	ja     c000175b <dlrealloc+0xc1>
c0001748:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c000174b:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000174e:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001751:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001754:	89 ce                	mov    esi,ecx
c0001756:	e9 9b 00 00 00       	jmp    c00017f6 <dlrealloc+0x15c>
c000175b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000175f:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001762:	83 ec 0c             	sub    esp,0xc
c0001765:	50                   	push   eax
c0001766:	e8 f2 f9 ff ff       	call   c000115d <dlmalloc>
c000176b:	83 c4 10             	add    esp,0x10
c000176e:	85 c0                	test   eax,eax
c0001770:	0f 84 4c ff ff ff    	je     c00016c2 <dlrealloc+0x28>
c0001776:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001779:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000177d:	39 ca                	cmp    edx,ecx
c000177f:	75 0a                	jne    c000178b <dlrealloc+0xf1>
c0001781:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001784:	83 e0 fc             	and    eax,0xfffffffc
c0001787:	01 c6                	add    esi,eax
c0001789:	eb 6b                	jmp    c00017f6 <dlrealloc+0x15c>
c000178b:	8d 4e fc             	lea    ecx,[esi-0x4]
c000178e:	83 f9 27             	cmp    ecx,0x27
c0001791:	76 08                	jbe    c000179b <dlrealloc+0x101>
c0001793:	89 de                	mov    esi,ebx
c0001795:	89 c7                	mov    edi,eax
c0001797:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001799:	eb 43                	jmp    c00017de <dlrealloc+0x144>
c000179b:	8b 13                	mov    edx,DWORD PTR [ebx]
c000179d:	83 f9 13             	cmp    ecx,0x13
c00017a0:	89 10                	mov    DWORD PTR [eax],edx
c00017a2:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00017a5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00017a8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00017ab:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00017ae:	76 2e                	jbe    c00017de <dlrealloc+0x144>
c00017b0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00017b3:	83 f9 1b             	cmp    ecx,0x1b
c00017b6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00017b9:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00017bc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00017bf:	76 1d                	jbe    c00017de <dlrealloc+0x144>
c00017c1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00017c4:	83 f9 23             	cmp    ecx,0x23
c00017c7:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00017ca:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00017cd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00017d0:	76 0c                	jbe    c00017de <dlrealloc+0x144>
c00017d2:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00017d5:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00017d8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00017db:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00017de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00017e2:	83 ec 0c             	sub    esp,0xc
c00017e5:	53                   	push   ebx
c00017e6:	e8 1a f6 ff ff       	call   c0000e05 <dlfree>
c00017eb:	83 c4 10             	add    esp,0x10
c00017ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00017f2:	89 c3                	mov    ebx,eax
c00017f4:	eb 3d                	jmp    c0001833 <dlrealloc+0x199>
c00017f6:	89 f2                	mov    edx,esi
c00017f8:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017fb:	29 ea                	sub    edx,ebp
c00017fd:	83 e1 01             	and    ecx,0x1
c0001800:	8d 04 37             	lea    eax,[edi+esi*1]
c0001803:	83 fa 0f             	cmp    edx,0xf
c0001806:	77 0b                	ja     c0001813 <dlrealloc+0x179>
c0001808:	09 ce                	or     esi,ecx
c000180a:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000180d:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001811:	eb 20                	jmp    c0001833 <dlrealloc+0x199>
c0001813:	01 ef                	add    edi,ebp
c0001815:	83 ec 0c             	sub    esp,0xc
c0001818:	09 cd                	or     ebp,ecx
c000181a:	83 ca 01             	or     edx,0x1
c000181d:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c0001820:	83 c7 08             	add    edi,0x8
c0001823:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001826:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000182a:	57                   	push   edi
c000182b:	e8 d5 f5 ff ff       	call   c0000e05 <dlfree>
c0001830:	83 c4 10             	add    esp,0x10
c0001833:	83 c4 1c             	add    esp,0x1c
c0001836:	89 d8                	mov    eax,ebx
c0001838:	5b                   	pop    ebx
c0001839:	5e                   	pop    esi
c000183a:	5f                   	pop    edi
c000183b:	5d                   	pop    ebp
c000183c:	c3                   	ret    

c000183d <dlmemalign>:
c000183d:	55                   	push   ebp
c000183e:	57                   	push   edi
c000183f:	56                   	push   esi
c0001840:	53                   	push   ebx
c0001841:	83 ec 0c             	sub    esp,0xc
c0001844:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001848:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000184c:	83 fa 08             	cmp    edx,0x8
c000184f:	77 10                	ja     c0001861 <dlmemalign+0x24>
c0001851:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001855:	83 c4 0c             	add    esp,0xc
c0001858:	5b                   	pop    ebx
c0001859:	5e                   	pop    esi
c000185a:	5f                   	pop    edi
c000185b:	5d                   	pop    ebp
c000185c:	e9 fc f8 ff ff       	jmp    c000115d <dlmalloc>
c0001861:	bf 10 00 00 00       	mov    edi,0x10
c0001866:	83 fa 0f             	cmp    edx,0xf
c0001869:	76 13                	jbe    c000187e <dlmemalign+0x41>
c000186b:	8d 4a ff             	lea    ecx,[edx-0x1]
c000186e:	85 d1                	test   ecx,edx
c0001870:	75 04                	jne    c0001876 <dlmemalign+0x39>
c0001872:	89 d7                	mov    edi,edx
c0001874:	eb 08                	jmp    c000187e <dlmemalign+0x41>
c0001876:	39 d7                	cmp    edi,edx
c0001878:	73 04                	jae    c000187e <dlmemalign+0x41>
c000187a:	01 ff                	add    edi,edi
c000187c:	eb f8                	jmp    c0001876 <dlmemalign+0x39>
c000187e:	83 f8 df             	cmp    eax,0xffffffdf
c0001881:	76 07                	jbe    c000188a <dlmemalign+0x4d>
c0001883:	31 c0                	xor    eax,eax
c0001885:	e9 ce 00 00 00       	jmp    c0001958 <dlmemalign+0x11b>
c000188a:	83 c0 0b             	add    eax,0xb
c000188d:	bd 10 00 00 00       	mov    ebp,0x10
c0001892:	83 f8 0f             	cmp    eax,0xf
c0001895:	76 05                	jbe    c000189c <dlmemalign+0x5f>
c0001897:	83 e0 f8             	and    eax,0xfffffff8
c000189a:	89 c5                	mov    ebp,eax
c000189c:	83 ec 0c             	sub    esp,0xc
c000189f:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00018a3:	50                   	push   eax
c00018a4:	e8 b4 f8 ff ff       	call   c000115d <dlmalloc>
c00018a9:	83 c4 10             	add    esp,0x10
c00018ac:	89 c1                	mov    ecx,eax
c00018ae:	85 c0                	test   eax,eax
c00018b0:	74 d1                	je     c0001883 <dlmemalign+0x46>
c00018b2:	31 d2                	xor    edx,edx
c00018b4:	8d 70 f8             	lea    esi,[eax-0x8]
c00018b7:	f7 f7                	div    edi
c00018b9:	85 d2                	test   edx,edx
c00018bb:	74 62                	je     c000191f <dlmemalign+0xe2>
c00018bd:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00018c1:	89 f8                	mov    eax,edi
c00018c3:	f7 d8                	neg    eax
c00018c5:	21 c3                	and    ebx,eax
c00018c7:	83 eb 08             	sub    ebx,0x8
c00018ca:	89 d8                	mov    eax,ebx
c00018cc:	29 f0                	sub    eax,esi
c00018ce:	83 f8 0f             	cmp    eax,0xf
c00018d1:	77 02                	ja     c00018d5 <dlmemalign+0x98>
c00018d3:	01 fb                	add    ebx,edi
c00018d5:	89 d8                	mov    eax,ebx
c00018d7:	29 f0                	sub    eax,esi
c00018d9:	89 c6                	mov    esi,eax
c00018db:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018de:	89 c2                	mov    edx,eax
c00018e0:	83 e2 fc             	and    edx,0xfffffffc
c00018e3:	29 f2                	sub    edx,esi
c00018e5:	a8 02                	test   al,0x2
c00018e7:	74 10                	je     c00018f9 <dlmemalign+0xbc>
c00018e9:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018ec:	83 ca 02             	or     edx,0x2
c00018ef:	8d 43 08             	lea    eax,[ebx+0x8]
c00018f2:	89 33                	mov    DWORD PTR [ebx],esi
c00018f4:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018f7:	eb 5f                	jmp    c0001958 <dlmemalign+0x11b>
c00018f9:	83 ec 0c             	sub    esp,0xc
c00018fc:	89 d0                	mov    eax,edx
c00018fe:	83 c8 01             	or     eax,0x1
c0001901:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001904:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001909:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000190c:	83 e0 01             	and    eax,0x1
c000190f:	09 f0                	or     eax,esi
c0001911:	89 de                	mov    esi,ebx
c0001913:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001916:	51                   	push   ecx
c0001917:	e8 e9 f4 ff ff       	call   c0000e05 <dlfree>
c000191c:	83 c4 10             	add    esp,0x10
c000191f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001922:	a8 02                	test   al,0x2
c0001924:	75 2f                	jne    c0001955 <dlmemalign+0x118>
c0001926:	83 e0 fc             	and    eax,0xfffffffc
c0001929:	8d 55 10             	lea    edx,[ebp+0x10]
c000192c:	39 c2                	cmp    edx,eax
c000192e:	73 25                	jae    c0001955 <dlmemalign+0x118>
c0001930:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001933:	83 ec 0c             	sub    esp,0xc
c0001936:	29 e8                	sub    eax,ebp
c0001938:	83 c2 08             	add    edx,0x8
c000193b:	83 c8 01             	or     eax,0x1
c000193e:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001941:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001944:	83 e0 01             	and    eax,0x1
c0001947:	09 c5                	or     ebp,eax
c0001949:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000194c:	52                   	push   edx
c000194d:	e8 b3 f4 ff ff       	call   c0000e05 <dlfree>
c0001952:	83 c4 10             	add    esp,0x10
c0001955:	8d 46 08             	lea    eax,[esi+0x8]
c0001958:	83 c4 0c             	add    esp,0xc
c000195b:	5b                   	pop    ebx
c000195c:	5e                   	pop    esi
c000195d:	5f                   	pop    edi
c000195e:	5d                   	pop    ebp
c000195f:	c3                   	ret    

c0001960 <dlcalloc>:
c0001960:	53                   	push   ebx
c0001961:	83 ec 14             	sub    esp,0x14
c0001964:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001968:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000196d:	50                   	push   eax
c000196e:	e8 ea f7 ff ff       	call   c000115d <dlmalloc>
c0001973:	83 c4 10             	add    esp,0x10
c0001976:	89 c3                	mov    ebx,eax
c0001978:	85 c0                	test   eax,eax
c000197a:	74 77                	je     c00019f3 <dlcalloc+0x93>
c000197c:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000197f:	89 d0                	mov    eax,edx
c0001981:	83 e0 fc             	and    eax,0xfffffffc
c0001984:	80 e2 02             	and    dl,0x2
c0001987:	75 5a                	jne    c00019e3 <dlcalloc+0x83>
c0001989:	83 e8 04             	sub    eax,0x4
c000198c:	83 f8 27             	cmp    eax,0x27
c000198f:	76 03                	jbe    c0001994 <dlcalloc+0x34>
c0001991:	51                   	push   ecx
c0001992:	eb 53                	jmp    c00019e7 <dlcalloc+0x87>
c0001994:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000199a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00019a1:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00019a8:	83 f8 13             	cmp    eax,0x13
c00019ab:	76 46                	jbe    c00019f3 <dlcalloc+0x93>
c00019ad:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00019b4:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00019bb:	83 f8 1b             	cmp    eax,0x1b
c00019be:	76 33                	jbe    c00019f3 <dlcalloc+0x93>
c00019c0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00019c7:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00019ce:	83 f8 23             	cmp    eax,0x23
c00019d1:	76 20                	jbe    c00019f3 <dlcalloc+0x93>
c00019d3:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019da:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019e1:	eb 10                	jmp    c00019f3 <dlcalloc+0x93>
c00019e3:	83 e8 08             	sub    eax,0x8
c00019e6:	52                   	push   edx
c00019e7:	50                   	push   eax
c00019e8:	6a 00                	push   0x0
c00019ea:	53                   	push   ebx
c00019eb:	e8 00 eb ff ff       	call   c00004f0 <memset>
c00019f0:	83 c4 10             	add    esp,0x10
c00019f3:	89 d8                	mov    eax,ebx
c00019f5:	83 c4 08             	add    esp,0x8
c00019f8:	5b                   	pop    ebx
c00019f9:	c3                   	ret    

c00019fa <dlcfree>:
c00019fa:	e9 06 f4 ff ff       	jmp    c0000e05 <dlfree>

c00019ff <dlindependent_calloc>:
c00019ff:	83 ec 28             	sub    esp,0x28
c0001a02:	b9 03 00 00 00       	mov    ecx,0x3
c0001a07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001a0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001a0f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001a13:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001a17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001a1b:	e8 cb fa ff ff       	call   c00014eb <iALLOc>
c0001a20:	83 c4 2c             	add    esp,0x2c
c0001a23:	c3                   	ret    

c0001a24 <dlindependent_comalloc>:
c0001a24:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a2c:	31 c9                	xor    ecx,ecx
c0001a2e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001a32:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a36:	e9 b0 fa ff ff       	jmp    c00014eb <iALLOc>

c0001a3b <dlvalloc>:
c0001a3b:	83 ec 0c             	sub    esp,0xc
c0001a3e:	83 3d e0 68 03 c0 00 	cmp    DWORD PTR ds:0xc00368e0,0x0
c0001a45:	75 0a                	jne    c0001a51 <dlvalloc+0x16>
c0001a47:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001a4c:	e8 cd f2 ff ff       	call   c0000d1e <malloc_consolidate>
c0001a51:	50                   	push   eax
c0001a52:	50                   	push   eax
c0001a53:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a57:	ff 35 3c 6c 03 c0    	push   DWORD PTR ds:0xc0036c3c
c0001a5d:	e8 db fd ff ff       	call   c000183d <dlmemalign>
c0001a62:	83 c4 1c             	add    esp,0x1c
c0001a65:	c3                   	ret    

c0001a66 <dlpvalloc>:
c0001a66:	83 ec 0c             	sub    esp,0xc
c0001a69:	83 3d e0 68 03 c0 00 	cmp    DWORD PTR ds:0xc00368e0,0x0
c0001a70:	75 0a                	jne    c0001a7c <dlpvalloc+0x16>
c0001a72:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001a77:	e8 a2 f2 ff ff       	call   c0000d1e <malloc_consolidate>
c0001a7c:	a1 3c 6c 03 c0       	mov    eax,ds:0xc0036c3c
c0001a81:	89 c1                	mov    ecx,eax
c0001a83:	52                   	push   edx
c0001a84:	f7 d9                	neg    ecx
c0001a86:	52                   	push   edx
c0001a87:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a8b:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a8f:	21 ca                	and    edx,ecx
c0001a91:	52                   	push   edx
c0001a92:	50                   	push   eax
c0001a93:	e8 a5 fd ff ff       	call   c000183d <dlmemalign>
c0001a98:	83 c4 1c             	add    esp,0x1c
c0001a9b:	c3                   	ret    

c0001a9c <dlmalloc_trim>:
c0001a9c:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001aa1:	e8 78 f2 ff ff       	call   c0000d1e <malloc_consolidate>
c0001aa6:	31 c0                	xor    eax,eax
c0001aa8:	c3                   	ret    

c0001aa9 <dlmalloc_usable_size>:
c0001aa9:	53                   	push   ebx
c0001aaa:	31 c0                	xor    eax,eax
c0001aac:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001ab0:	85 c9                	test   ecx,ecx
c0001ab2:	74 24                	je     c0001ad8 <dlmalloc_usable_size+0x2f>
c0001ab4:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001ab7:	f6 c2 02             	test   dl,0x2
c0001aba:	74 08                	je     c0001ac4 <dlmalloc_usable_size+0x1b>
c0001abc:	83 e2 fc             	and    edx,0xfffffffc
c0001abf:	8d 42 f8             	lea    eax,[edx-0x8]
c0001ac2:	eb 14                	jmp    c0001ad8 <dlmalloc_usable_size+0x2f>
c0001ac4:	89 d3                	mov    ebx,edx
c0001ac6:	31 c0                	xor    eax,eax
c0001ac8:	83 e3 fe             	and    ebx,0xfffffffe
c0001acb:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001ad0:	74 06                	je     c0001ad8 <dlmalloc_usable_size+0x2f>
c0001ad2:	83 e2 fc             	and    edx,0xfffffffc
c0001ad5:	8d 42 fc             	lea    eax,[edx-0x4]
c0001ad8:	5b                   	pop    ebx
c0001ad9:	c3                   	ret    

c0001ada <dlmallinfo>:
c0001ada:	55                   	push   ebp
c0001adb:	57                   	push   edi
c0001adc:	56                   	push   esi
c0001add:	53                   	push   ebx
c0001ade:	83 ec 08             	sub    esp,0x8
c0001ae1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ae5:	83 3d 0c 69 03 c0 00 	cmp    DWORD PTR ds:0xc003690c,0x0
c0001aec:	75 0a                	jne    c0001af8 <dlmallinfo+0x1e>
c0001aee:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001af3:	e8 26 f2 ff ff       	call   c0000d1e <malloc_consolidate>
c0001af8:	a1 0c 69 03 c0       	mov    eax,ds:0xc003690c
c0001afd:	31 ed                	xor    ebp,ebp
c0001aff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001b02:	31 c9                	xor    ecx,ecx
c0001b04:	83 e0 fc             	and    eax,0xfffffffc
c0001b07:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b0b:	31 c0                	xor    eax,eax
c0001b0d:	8b 14 85 e4 68 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc971c]
c0001b14:	85 d2                	test   edx,edx
c0001b16:	74 0e                	je     c0001b26 <dlmallinfo+0x4c>
c0001b18:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001b1b:	45                   	inc    ebp
c0001b1c:	83 e6 fc             	and    esi,0xfffffffc
c0001b1f:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001b22:	01 f1                	add    ecx,esi
c0001b24:	eb ee                	jmp    c0001b14 <dlmallinfo+0x3a>
c0001b26:	40                   	inc    eax
c0001b27:	83 f8 0a             	cmp    eax,0xa
c0001b2a:	75 e1                	jne    c0001b0d <dlmallinfo+0x33>
c0001b2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b30:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b37:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b3a:	b8 14 69 03 c0       	mov    eax,0xc0036914
c0001b3f:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b42:	39 f0                	cmp    eax,esi
c0001b44:	74 10                	je     c0001b56 <dlmallinfo+0x7c>
c0001b46:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b49:	ff 04 24             	inc    DWORD PTR [esp]
c0001b4c:	83 e7 fc             	and    edi,0xfffffffc
c0001b4f:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b52:	01 fa                	add    edx,edi
c0001b54:	eb ec                	jmp    c0001b42 <dlmallinfo+0x68>
c0001b56:	83 c0 08             	add    eax,0x8
c0001b59:	3d 0c 6c 03 c0       	cmp    eax,0xc0036c0c
c0001b5e:	75 df                	jne    c0001b3f <dlmallinfo+0x65>
c0001b60:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b63:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b66:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b69:	a1 48 6c 03 c0       	mov    eax,ds:0xc0036c48
c0001b6e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b71:	89 03                	mov    DWORD PTR [ebx],eax
c0001b73:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b76:	8b 35 30 6c 03 c0    	mov    esi,DWORD PTR ds:0xc0036c30
c0001b7c:	29 d0                	sub    eax,edx
c0001b7e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b81:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b84:	8b 35 44 6c 03 c0    	mov    esi,DWORD PTR ds:0xc0036c44
c0001b8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b8e:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b91:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b94:	8b 35 54 6c 03 c0    	mov    esi,DWORD PTR ds:0xc0036c54
c0001b9a:	89 d8                	mov    eax,ebx
c0001b9c:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b9f:	83 c4 08             	add    esp,0x8
c0001ba2:	5b                   	pop    ebx
c0001ba3:	5e                   	pop    esi
c0001ba4:	5f                   	pop    edi
c0001ba5:	5d                   	pop    ebp
c0001ba6:	c2 04 00             	ret    0x4

c0001ba9 <dlmalloc_stats>:
c0001ba9:	83 ec 30             	sub    esp,0x30
c0001bac:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001bb0:	50                   	push   eax
c0001bb1:	e8 24 ff ff ff       	call   c0001ada <dlmallinfo>
c0001bb6:	83 c4 30             	add    esp,0x30
c0001bb9:	c3                   	ret    

c0001bba <dlmallopt>:
c0001bba:	56                   	push   esi
c0001bbb:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001bc0:	53                   	push   ebx
c0001bc1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001bc5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001bc9:	e8 50 f1 ff ff       	call   c0000d1e <malloc_consolidate>
c0001bce:	8d 46 04             	lea    eax,[esi+0x4]
c0001bd1:	83 f8 05             	cmp    eax,0x5
c0001bd4:	77 67                	ja     c0001c3d <dlmallopt+0x83>
c0001bd6:	ff 24 85 24 f0 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd0fdc]
c0001bdd:	83 fb 50             	cmp    ebx,0x50
c0001be0:	77 5b                	ja     c0001c3d <dlmallopt+0x83>
c0001be2:	ba 08 00 00 00       	mov    edx,0x8
c0001be7:	85 db                	test   ebx,ebx
c0001be9:	74 12                	je     c0001bfd <dlmallopt+0x43>
c0001beb:	83 c3 0b             	add    ebx,0xb
c0001bee:	ba 10 00 00 00       	mov    edx,0x10
c0001bf3:	83 fb 0f             	cmp    ebx,0xf
c0001bf6:	76 05                	jbe    c0001bfd <dlmallopt+0x43>
c0001bf8:	89 da                	mov    edx,ebx
c0001bfa:	83 e2 f8             	and    edx,0xfffffff8
c0001bfd:	a1 e0 68 03 c0       	mov    eax,ds:0xc00368e0
c0001c02:	83 e0 03             	and    eax,0x3
c0001c05:	09 d0                	or     eax,edx
c0001c07:	a3 e0 68 03 c0       	mov    ds:0xc00368e0,eax
c0001c0c:	eb 31                	jmp    c0001c3f <dlmallopt+0x85>
c0001c0e:	89 1d 24 6c 03 c0    	mov    DWORD PTR ds:0xc0036c24,ebx
c0001c14:	eb 06                	jmp    c0001c1c <dlmallopt+0x62>
c0001c16:	89 1d 28 6c 03 c0    	mov    DWORD PTR ds:0xc0036c28,ebx
c0001c1c:	be 01 00 00 00       	mov    esi,0x1
c0001c21:	eb 1c                	jmp    c0001c3f <dlmallopt+0x85>
c0001c23:	89 1d 2c 6c 03 c0    	mov    DWORD PTR ds:0xc0036c2c,ebx
c0001c29:	eb f1                	jmp    c0001c1c <dlmallopt+0x62>
c0001c2b:	31 f6                	xor    esi,esi
c0001c2d:	85 db                	test   ebx,ebx
c0001c2f:	75 0e                	jne    c0001c3f <dlmallopt+0x85>
c0001c31:	c7 05 34 6c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036c34,0x0
c0001c3b:	eb df                	jmp    c0001c1c <dlmallopt+0x62>
c0001c3d:	31 f6                	xor    esi,esi
c0001c3f:	89 f0                	mov    eax,esi
c0001c41:	5b                   	pop    ebx
c0001c42:	5e                   	pop    esi
c0001c43:	c3                   	ret    

c0001c44 <isblank>:
c0001c44:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c49:	74 09                	je     c0001c54 <isblank+0x10>
c0001c4b:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c50:	75 0a                	jne    c0001c5c <isblank+0x18>
c0001c52:	66 90                	xchg   ax,ax
c0001c54:	b8 01 00 00 00       	mov    eax,0x1
c0001c59:	c3                   	ret    
c0001c5a:	66 90                	xchg   ax,ax
c0001c5c:	b8 00 00 00 00       	mov    eax,0x0
c0001c61:	c3                   	ret    
c0001c62:	66 90                	xchg   ax,ax

c0001c64 <iscntrl>:
c0001c64:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001c69:	7e 09                	jle    c0001c74 <iscntrl+0x10>
c0001c6b:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001c70:	75 0a                	jne    c0001c7c <iscntrl+0x18>
c0001c72:	66 90                	xchg   ax,ax
c0001c74:	b8 01 00 00 00       	mov    eax,0x1
c0001c79:	c3                   	ret    
c0001c7a:	66 90                	xchg   ax,ax
c0001c7c:	b8 00 00 00 00       	mov    eax,0x0
c0001c81:	c3                   	ret    
c0001c82:	66 90                	xchg   ax,ax

c0001c84 <isdigit>:
c0001c84:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001c89:	7e 0d                	jle    c0001c98 <isdigit+0x14>
c0001c8b:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001c90:	7f 06                	jg     c0001c98 <isdigit+0x14>
c0001c92:	b8 01 00 00 00       	mov    eax,0x1
c0001c97:	c3                   	ret    
c0001c98:	b8 00 00 00 00       	mov    eax,0x0
c0001c9d:	c3                   	ret    
c0001c9e:	66 90                	xchg   ax,ax

c0001ca0 <islower>:
c0001ca0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001ca5:	7e 0d                	jle    c0001cb4 <islower+0x14>
c0001ca7:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001cac:	7f 06                	jg     c0001cb4 <islower+0x14>
c0001cae:	b8 01 00 00 00       	mov    eax,0x1
c0001cb3:	c3                   	ret    
c0001cb4:	b8 00 00 00 00       	mov    eax,0x0
c0001cb9:	c3                   	ret    
c0001cba:	66 90                	xchg   ax,ax

c0001cbc <isspace>:
c0001cbc:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001cc1:	7c 19                	jl     c0001cdc <isspace+0x20>
c0001cc3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001cc8:	7e 0a                	jle    c0001cd4 <isspace+0x18>
c0001cca:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ccf:	75 0b                	jne    c0001cdc <isspace+0x20>
c0001cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0001cd4:	b8 01 00 00 00       	mov    eax,0x1
c0001cd9:	c3                   	ret    
c0001cda:	66 90                	xchg   ax,ax
c0001cdc:	b8 00 00 00 00       	mov    eax,0x0
c0001ce1:	c3                   	ret    
c0001ce2:	66 90                	xchg   ax,ax

c0001ce4 <isupper>:
c0001ce4:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ce9:	7e 0d                	jle    c0001cf8 <isupper+0x14>
c0001ceb:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001cf0:	7f 06                	jg     c0001cf8 <isupper+0x14>
c0001cf2:	b8 01 00 00 00       	mov    eax,0x1
c0001cf7:	c3                   	ret    
c0001cf8:	b8 00 00 00 00       	mov    eax,0x0
c0001cfd:	c3                   	ret    
c0001cfe:	66 90                	xchg   ax,ax

c0001d00 <isalpha>:
c0001d00:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d04:	e8 db ff ff ff       	call   c0001ce4 <isupper>
c0001d09:	83 c4 04             	add    esp,0x4
c0001d0c:	85 c0                	test   eax,eax
c0001d0e:	75 10                	jne    c0001d20 <isalpha+0x20>
c0001d10:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d14:	e8 87 ff ff ff       	call   c0001ca0 <islower>
c0001d19:	83 c4 04             	add    esp,0x4
c0001d1c:	85 c0                	test   eax,eax
c0001d1e:	74 08                	je     c0001d28 <isalpha+0x28>
c0001d20:	b8 01 00 00 00       	mov    eax,0x1
c0001d25:	c3                   	ret    
c0001d26:	66 90                	xchg   ax,ax
c0001d28:	b8 00 00 00 00       	mov    eax,0x0
c0001d2d:	c3                   	ret    
c0001d2e:	66 90                	xchg   ax,ax

c0001d30 <isalnum>:
c0001d30:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d34:	e8 c7 ff ff ff       	call   c0001d00 <isalpha>
c0001d39:	83 c4 04             	add    esp,0x4
c0001d3c:	85 c0                	test   eax,eax
c0001d3e:	75 10                	jne    c0001d50 <isalnum+0x20>
c0001d40:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d44:	e8 3b ff ff ff       	call   c0001c84 <isdigit>
c0001d49:	83 c4 04             	add    esp,0x4
c0001d4c:	85 c0                	test   eax,eax
c0001d4e:	74 08                	je     c0001d58 <isalnum+0x28>
c0001d50:	b8 01 00 00 00       	mov    eax,0x1
c0001d55:	c3                   	ret    
c0001d56:	66 90                	xchg   ax,ax
c0001d58:	b8 00 00 00 00       	mov    eax,0x0
c0001d5d:	c3                   	ret    
c0001d5e:	66 90                	xchg   ax,ax

c0001d60 <ispunct>:
c0001d60:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d64:	e8 c7 ff ff ff       	call   c0001d30 <isalnum>
c0001d69:	83 c4 04             	add    esp,0x4
c0001d6c:	85 c0                	test   eax,eax
c0001d6e:	75 28                	jne    c0001d98 <ispunct+0x38>
c0001d70:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d74:	e8 43 ff ff ff       	call   c0001cbc <isspace>
c0001d79:	83 c4 04             	add    esp,0x4
c0001d7c:	85 c0                	test   eax,eax
c0001d7e:	75 18                	jne    c0001d98 <ispunct+0x38>
c0001d80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d84:	e8 db fe ff ff       	call   c0001c64 <iscntrl>
c0001d89:	83 c4 04             	add    esp,0x4
c0001d8c:	85 c0                	test   eax,eax
c0001d8e:	75 08                	jne    c0001d98 <ispunct+0x38>
c0001d90:	b8 01 00 00 00       	mov    eax,0x1
c0001d95:	c3                   	ret    
c0001d96:	66 90                	xchg   ax,ax
c0001d98:	b8 00 00 00 00       	mov    eax,0x0
c0001d9d:	c3                   	ret    
c0001d9e:	66 90                	xchg   ax,ax

c0001da0 <isgraph>:
c0001da0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001da4:	e8 87 ff ff ff       	call   c0001d30 <isalnum>
c0001da9:	83 c4 04             	add    esp,0x4
c0001dac:	85 c0                	test   eax,eax
c0001dae:	75 10                	jne    c0001dc0 <isgraph+0x20>
c0001db0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001db4:	e8 a7 ff ff ff       	call   c0001d60 <ispunct>
c0001db9:	83 c4 04             	add    esp,0x4
c0001dbc:	85 c0                	test   eax,eax
c0001dbe:	74 08                	je     c0001dc8 <isgraph+0x28>
c0001dc0:	b8 01 00 00 00       	mov    eax,0x1
c0001dc5:	c3                   	ret    
c0001dc6:	66 90                	xchg   ax,ax
c0001dc8:	b8 00 00 00 00       	mov    eax,0x0
c0001dcd:	c3                   	ret    
c0001dce:	66 90                	xchg   ax,ax

c0001dd0 <isprint>:
c0001dd0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001dd4:	e8 c7 ff ff ff       	call   c0001da0 <isgraph>
c0001dd9:	83 c4 04             	add    esp,0x4
c0001ddc:	85 c0                	test   eax,eax
c0001dde:	75 08                	jne    c0001de8 <isprint+0x18>
c0001de0:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001de5:	75 09                	jne    c0001df0 <isprint+0x20>
c0001de7:	90                   	nop
c0001de8:	b8 01 00 00 00       	mov    eax,0x1
c0001ded:	c3                   	ret    
c0001dee:	66 90                	xchg   ax,ax
c0001df0:	b8 00 00 00 00       	mov    eax,0x0
c0001df5:	c3                   	ret    
c0001df6:	66 90                	xchg   ax,ax

c0001df8 <isxdigit>:
c0001df8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001dfc:	e8 83 fe ff ff       	call   c0001c84 <isdigit>
c0001e01:	83 c4 04             	add    esp,0x4
c0001e04:	85 c0                	test   eax,eax
c0001e06:	75 20                	jne    c0001e28 <isxdigit+0x30>
c0001e08:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001e0d:	7e 09                	jle    c0001e18 <isxdigit+0x20>
c0001e0f:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001e14:	7e 12                	jle    c0001e28 <isxdigit+0x30>
c0001e16:	66 90                	xchg   ax,ax
c0001e18:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001e1d:	7e 11                	jle    c0001e30 <isxdigit+0x38>
c0001e1f:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001e24:	7f 0a                	jg     c0001e30 <isxdigit+0x38>
c0001e26:	66 90                	xchg   ax,ax
c0001e28:	b8 01 00 00 00       	mov    eax,0x1
c0001e2d:	c3                   	ret    
c0001e2e:	66 90                	xchg   ax,ax
c0001e30:	b8 00 00 00 00       	mov    eax,0x0
c0001e35:	c3                   	ret    

c0001e36 <disk_status>:
c0001e36:	31 c0                	xor    eax,eax
c0001e38:	c3                   	ret    

c0001e39 <disk_initialize>:
c0001e39:	31 c0                	xor    eax,eax
c0001e3b:	c3                   	ret    

c0001e3c <disk_read>:
c0001e3c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001e41:	0f b6 04 85 20 03 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbfce0]
c0001e49:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e4d:	e9 16 67 02 00       	jmp    c0028568 <fatWrapperReadDisk>

c0001e52 <disk_write>:
c0001e52:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001e57:	0f b6 04 85 20 03 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbfce0]
c0001e5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e63:	e9 40 67 02 00       	jmp    c00285a8 <fatWrapperWriteDisk>

c0001e68 <disk_ioctl>:
c0001e68:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001e6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001e71:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001e76:	0f b6 04 85 20 03 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbfce0]
c0001e7e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e82:	e9 61 67 02 00       	jmp    c00285e8 <fatWrapperIoctl>

c0001e87 <ld_word>:
c0001e87:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e8b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e8e:	c1 e2 08             	shl    edx,0x8
c0001e91:	09 d0                	or     eax,edx
c0001e93:	c3                   	ret    

c0001e94 <ld_dword>:
c0001e94:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001e98:	89 d1                	mov    ecx,edx
c0001e9a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e9e:	c1 e1 08             	shl    ecx,0x8
c0001ea1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ea4:	09 ca                	or     edx,ecx
c0001ea6:	c1 e2 08             	shl    edx,0x8
c0001ea9:	09 d0                	or     eax,edx
c0001eab:	c3                   	ret    

c0001eac <st_word>:
c0001eac:	66 89 10             	mov    WORD PTR [eax],dx
c0001eaf:	c3                   	ret    

c0001eb0 <st_dword>:
c0001eb0:	89 10                	mov    DWORD PTR [eax],edx
c0001eb2:	c3                   	ret    

c0001eb3 <mem_cpy>:
c0001eb3:	85 c9                	test   ecx,ecx
c0001eb5:	74 10                	je     c0001ec7 <mem_cpy+0x14>
c0001eb7:	57                   	push   edi
c0001eb8:	01 c1                	add    ecx,eax
c0001eba:	56                   	push   esi
c0001ebb:	89 c7                	mov    edi,eax
c0001ebd:	89 d6                	mov    esi,edx
c0001ebf:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ec0:	39 f9                	cmp    ecx,edi
c0001ec2:	75 fb                	jne    c0001ebf <mem_cpy+0xc>
c0001ec4:	5e                   	pop    esi
c0001ec5:	5f                   	pop    edi
c0001ec6:	c3                   	ret    
c0001ec7:	c3                   	ret    

c0001ec8 <mem_set>:
c0001ec8:	01 c1                	add    ecx,eax
c0001eca:	40                   	inc    eax
c0001ecb:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001ece:	39 c8                	cmp    eax,ecx
c0001ed0:	75 f8                	jne    c0001eca <mem_set+0x2>
c0001ed2:	c3                   	ret    

c0001ed3 <mem_cmp>:
c0001ed3:	57                   	push   edi
c0001ed4:	56                   	push   esi
c0001ed5:	89 c6                	mov    esi,eax
c0001ed7:	53                   	push   ebx
c0001ed8:	46                   	inc    esi
c0001ed9:	42                   	inc    edx
c0001eda:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001ede:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001ee2:	29 fb                	sub    ebx,edi
c0001ee4:	89 cf                	mov    edi,ecx
c0001ee6:	29 f7                	sub    edi,esi
c0001ee8:	01 c7                	add    edi,eax
c0001eea:	74 04                	je     c0001ef0 <mem_cmp+0x1d>
c0001eec:	85 db                	test   ebx,ebx
c0001eee:	74 e8                	je     c0001ed8 <mem_cmp+0x5>
c0001ef0:	89 d8                	mov    eax,ebx
c0001ef2:	5b                   	pop    ebx
c0001ef3:	5e                   	pop    esi
c0001ef4:	5f                   	pop    edi
c0001ef5:	c3                   	ret    

c0001ef6 <chk_chr>:
c0001ef6:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001ef9:	85 c9                	test   ecx,ecx
c0001efb:	74 07                	je     c0001f04 <chk_chr+0xe>
c0001efd:	39 d1                	cmp    ecx,edx
c0001eff:	74 03                	je     c0001f04 <chk_chr+0xe>
c0001f01:	40                   	inc    eax
c0001f02:	eb f2                	jmp    c0001ef6 <chk_chr>
c0001f04:	89 c8                	mov    eax,ecx
c0001f06:	c3                   	ret    

c0001f07 <dbc_1st>:
c0001f07:	31 c0                	xor    eax,eax
c0001f09:	c3                   	ret    

c0001f0a <dbc_2nd>:
c0001f0a:	31 c0                	xor    eax,eax
c0001f0c:	c3                   	ret    

c0001f0d <tchar2uni>:
c0001f0d:	57                   	push   edi
c0001f0e:	56                   	push   esi
c0001f0f:	53                   	push   ebx
c0001f10:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001f12:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001f14:	8d 73 01             	lea    esi,[ebx+0x1]
c0001f17:	f6 c1 80             	test   cl,0x80
c0001f1a:	75 0a                	jne    c0001f26 <tchar2uni+0x19>
c0001f1c:	0f b6 d1             	movzx  edx,cl
c0001f1f:	89 f3                	mov    ebx,esi
c0001f21:	e9 b2 00 00 00       	jmp    c0001fd8 <tchar2uni+0xcb>
c0001f26:	89 ca                	mov    edx,ecx
c0001f28:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001f2e:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001f34:	89 ca                	mov    edx,ecx
c0001f36:	75 0a                	jne    c0001f42 <tchar2uni+0x35>
c0001f38:	83 e2 1f             	and    edx,0x1f
c0001f3b:	b9 01 00 00 00       	mov    ecx,0x1
c0001f40:	eb 37                	jmp    c0001f79 <tchar2uni+0x6c>
c0001f42:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001f48:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001f4e:	75 0c                	jne    c0001f5c <tchar2uni+0x4f>
c0001f50:	89 ca                	mov    edx,ecx
c0001f52:	b9 02 00 00 00       	mov    ecx,0x2
c0001f57:	83 e2 0f             	and    edx,0xf
c0001f5a:	eb 1d                	jmp    c0001f79 <tchar2uni+0x6c>
c0001f5c:	89 cf                	mov    edi,ecx
c0001f5e:	83 ca ff             	or     edx,0xffffffff
c0001f61:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001f67:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001f6d:	75 70                	jne    c0001fdf <tchar2uni+0xd2>
c0001f6f:	89 ca                	mov    edx,ecx
c0001f71:	b9 03 00 00 00       	mov    ecx,0x3
c0001f76:	83 e2 07             	and    edx,0x7
c0001f79:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001f7d:	46                   	inc    esi
c0001f7e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001f81:	89 cf                	mov    edi,ecx
c0001f83:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001f89:	83 c7 80             	add    edi,0xffffff80
c0001f8c:	75 4e                	jne    c0001fdc <tchar2uni+0xcf>
c0001f8e:	c1 e2 06             	shl    edx,0x6
c0001f91:	83 e1 3f             	and    ecx,0x3f
c0001f94:	09 ca                	or     edx,ecx
c0001f96:	39 de                	cmp    esi,ebx
c0001f98:	75 e3                	jne    c0001f7d <tchar2uni+0x70>
c0001f9a:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001f9d:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001fa3:	77 37                	ja     c0001fdc <tchar2uni+0xcf>
c0001fa5:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001fab:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001fb1:	76 29                	jbe    c0001fdc <tchar2uni+0xcf>
c0001fb3:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001fb9:	76 1d                	jbe    c0001fd8 <tchar2uni+0xcb>
c0001fbb:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001fc1:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001fc7:	c1 e1 06             	shl    ecx,0x6
c0001fca:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001fd0:	09 ca                	or     edx,ecx
c0001fd2:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001fd8:	89 18                	mov    DWORD PTR [eax],ebx
c0001fda:	eb 03                	jmp    c0001fdf <tchar2uni+0xd2>
c0001fdc:	83 ca ff             	or     edx,0xffffffff
c0001fdf:	5b                   	pop    ebx
c0001fe0:	89 d0                	mov    eax,edx
c0001fe2:	5e                   	pop    esi
c0001fe3:	5f                   	pop    edi
c0001fe4:	c3                   	ret    

c0001fe5 <put_utf>:
c0001fe5:	53                   	push   ebx
c0001fe6:	83 f8 7f             	cmp    eax,0x7f
c0001fe9:	89 c3                	mov    ebx,eax
c0001feb:	b0 00                	mov    al,0x0
c0001fed:	77 11                	ja     c0002000 <put_utf+0x1b>
c0001fef:	85 c9                	test   ecx,ecx
c0001ff1:	0f 84 e5 00 00 00    	je     c00020dc <put_utf+0xf7>
c0001ff7:	88 1a                	mov    BYTE PTR [edx],bl
c0001ff9:	b0 01                	mov    al,0x1
c0001ffb:	e9 dc 00 00 00       	jmp    c00020dc <put_utf+0xf7>
c0002000:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0002006:	77 23                	ja     c000202b <put_utf+0x46>
c0002008:	83 f9 01             	cmp    ecx,0x1
c000200b:	0f 86 cb 00 00 00    	jbe    c00020dc <put_utf+0xf7>
c0002011:	89 d8                	mov    eax,ebx
c0002013:	83 e3 3f             	and    ebx,0x3f
c0002016:	c1 e8 06             	shr    eax,0x6
c0002019:	83 cb 80             	or     ebx,0xffffff80
c000201c:	83 c8 c0             	or     eax,0xffffffc0
c000201f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0002022:	88 02                	mov    BYTE PTR [edx],al
c0002024:	b0 02                	mov    al,0x2
c0002026:	e9 b1 00 00 00       	jmp    c00020dc <put_utf+0xf7>
c000202b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0002031:	77 40                	ja     c0002073 <put_utf+0x8e>
c0002033:	83 f9 02             	cmp    ecx,0x2
c0002036:	0f 86 a0 00 00 00    	jbe    c00020dc <put_utf+0xf7>
c000203c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0002042:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0002048:	0f 86 8e 00 00 00    	jbe    c00020dc <put_utf+0xf7>
c000204e:	89 d8                	mov    eax,ebx
c0002050:	c1 e8 0c             	shr    eax,0xc
c0002053:	83 c8 e0             	or     eax,0xffffffe0
c0002056:	88 02                	mov    BYTE PTR [edx],al
c0002058:	89 d8                	mov    eax,ebx
c000205a:	83 e3 3f             	and    ebx,0x3f
c000205d:	c1 e8 06             	shr    eax,0x6
c0002060:	83 cb 80             	or     ebx,0xffffff80
c0002063:	83 e0 3f             	and    eax,0x3f
c0002066:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0002069:	83 c8 80             	or     eax,0xffffff80
c000206c:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000206f:	b0 03                	mov    al,0x3
c0002071:	eb 69                	jmp    c00020dc <put_utf+0xf7>
c0002073:	83 f9 03             	cmp    ecx,0x3
c0002076:	76 64                	jbe    c00020dc <put_utf+0xf7>
c0002078:	89 d9                	mov    ecx,ebx
c000207a:	0f b7 c3             	movzx  eax,bx
c000207d:	66 31 c9             	xor    cx,cx
c0002080:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0002086:	81 c1 00 00 00 28    	add    ecx,0x28000000
c000208c:	c1 e9 06             	shr    ecx,0x6
c000208f:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002095:	77 43                	ja     c00020da <put_utf+0xf5>
c0002097:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c000209d:	77 3b                	ja     c00020da <put_utf+0xf5>
c000209f:	09 cb                	or     ebx,ecx
c00020a1:	81 c3 00 00 01 00    	add    ebx,0x10000
c00020a7:	89 d8                	mov    eax,ebx
c00020a9:	c1 e8 12             	shr    eax,0x12
c00020ac:	83 c8 f0             	or     eax,0xfffffff0
c00020af:	88 02                	mov    BYTE PTR [edx],al
c00020b1:	89 d8                	mov    eax,ebx
c00020b3:	c1 e8 0c             	shr    eax,0xc
c00020b6:	83 e0 3f             	and    eax,0x3f
c00020b9:	83 c8 80             	or     eax,0xffffff80
c00020bc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00020bf:	89 d8                	mov    eax,ebx
c00020c1:	83 e3 3f             	and    ebx,0x3f
c00020c4:	c1 e8 06             	shr    eax,0x6
c00020c7:	83 cb 80             	or     ebx,0xffffff80
c00020ca:	83 e0 3f             	and    eax,0x3f
c00020cd:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c00020d0:	83 c8 80             	or     eax,0xffffff80
c00020d3:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c00020d6:	b0 04                	mov    al,0x4
c00020d8:	eb 02                	jmp    c00020dc <put_utf+0xf7>
c00020da:	31 c0                	xor    eax,eax
c00020dc:	5b                   	pop    ebx
c00020dd:	c3                   	ret    

c00020de <clst2sect>:
c00020de:	8d 4a fe             	lea    ecx,[edx-0x2]
c00020e1:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00020e4:	83 ea 02             	sub    edx,0x2
c00020e7:	39 ca                	cmp    edx,ecx
c00020e9:	76 0d                	jbe    c00020f8 <clst2sect+0x1a>
c00020eb:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00020ef:	0f af d1             	imul   edx,ecx
c00020f2:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c00020f5:	89 d0                	mov    eax,edx
c00020f7:	c3                   	ret    
c00020f8:	31 c0                	xor    eax,eax
c00020fa:	c3                   	ret    

c00020fb <pick_lfn>:
c00020fb:	55                   	push   ebp
c00020fc:	57                   	push   edi
c00020fd:	89 c7                	mov    edi,eax
c00020ff:	56                   	push   esi
c0002100:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002103:	53                   	push   ebx
c0002104:	89 d3                	mov    ebx,edx
c0002106:	e8 7c fd ff ff       	call   c0001e87 <ld_word>
c000210b:	66 85 c0             	test   ax,ax
c000210e:	74 04                	je     c0002114 <pick_lfn+0x19>
c0002110:	31 c0                	xor    eax,eax
c0002112:	eb 62                	jmp    c0002176 <pick_lfn+0x7b>
c0002114:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002117:	bd 01 00 00 00       	mov    ebp,0x1
c000211c:	83 e1 bf             	and    ecx,0xffffffbf
c000211f:	31 f6                	xor    esi,esi
c0002121:	49                   	dec    ecx
c0002122:	6b c9 0d             	imul   ecx,ecx,0xd
c0002125:	0f b6 86 80 f1 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffd0e80]
c000212c:	01 d8                	add    eax,ebx
c000212e:	e8 54 fd ff ff       	call   c0001e87 <ld_word>
c0002133:	66 85 ed             	test   bp,bp
c0002136:	74 11                	je     c0002149 <pick_lfn+0x4e>
c0002138:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000213e:	77 d0                	ja     c0002110 <pick_lfn+0x15>
c0002140:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c0002144:	89 c5                	mov    ebp,eax
c0002146:	41                   	inc    ecx
c0002147:	eb 0a                	jmp    c0002153 <pick_lfn+0x58>
c0002149:	0f b7 c0             	movzx  eax,ax
c000214c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002151:	75 bd                	jne    c0002110 <pick_lfn+0x15>
c0002153:	46                   	inc    esi
c0002154:	83 fe 0d             	cmp    esi,0xd
c0002157:	75 cc                	jne    c0002125 <pick_lfn+0x2a>
c0002159:	f6 03 40             	test   BYTE PTR [ebx],0x40
c000215c:	74 13                	je     c0002171 <pick_lfn+0x76>
c000215e:	66 85 ed             	test   bp,bp
c0002161:	74 0e                	je     c0002171 <pick_lfn+0x76>
c0002163:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002169:	77 a5                	ja     c0002110 <pick_lfn+0x15>
c000216b:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c0002171:	b8 01 00 00 00       	mov    eax,0x1
c0002176:	5b                   	pop    ebx
c0002177:	5e                   	pop    esi
c0002178:	5f                   	pop    edi
c0002179:	5d                   	pop    ebp
c000217a:	c3                   	ret    

c000217b <put_lfn>:
c000217b:	55                   	push   ebp
c000217c:	57                   	push   edi
c000217d:	89 d7                	mov    edi,edx
c000217f:	56                   	push   esi
c0002180:	31 f6                	xor    esi,esi
c0002182:	53                   	push   ebx
c0002183:	83 ec 0c             	sub    esp,0xc
c0002186:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000218a:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000218e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0002192:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0002198:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000219b:	8d 42 1a             	lea    eax,[edx+0x1a]
c000219e:	31 d2                	xor    edx,edx
c00021a0:	e8 07 fd ff ff       	call   c0001eac <st_word>
c00021a5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00021ac:	0f b6 d9             	movzx  ebx,cl
c00021af:	4b                   	dec    ebx
c00021b0:	6b db 0d             	imul   ebx,ebx,0xd
c00021b3:	0f b7 c6             	movzx  eax,si
c00021b6:	3d ff ff 00 00       	cmp    eax,0xffff
c00021bb:	74 09                	je     c00021c6 <put_lfn+0x4b>
c00021bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00021c1:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c00021c5:	43                   	inc    ebx
c00021c6:	0f b7 ee             	movzx  ebp,si
c00021c9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00021cc:	89 ea                	mov    edx,ebp
c00021ce:	0f b6 80 80 f1 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd0e80]
c00021d5:	01 f8                	add    eax,edi
c00021d7:	e8 d0 fc ff ff       	call   c0001eac <st_word>
c00021dc:	85 ed                	test   ebp,ebp
c00021de:	75 05                	jne    c00021e5 <put_lfn+0x6a>
c00021e0:	be ff ff 00 00       	mov    esi,0xffff
c00021e5:	ff 04 24             	inc    DWORD PTR [esp]
c00021e8:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c00021ec:	75 c5                	jne    c00021b3 <put_lfn+0x38>
c00021ee:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00021f4:	74 0b                	je     c0002201 <put_lfn+0x86>
c00021f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00021fa:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00021ff:	75 07                	jne    c0002208 <put_lfn+0x8d>
c0002201:	83 c9 40             	or     ecx,0x40
c0002204:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002208:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000220c:	88 07                	mov    BYTE PTR [edi],al
c000220e:	83 c4 0c             	add    esp,0xc
c0002211:	5b                   	pop    ebx
c0002212:	5e                   	pop    esi
c0002213:	5f                   	pop    edi
c0002214:	5d                   	pop    ebp
c0002215:	c3                   	ret    

c0002216 <gen_numname>:
c0002216:	57                   	push   edi
c0002217:	89 cf                	mov    edi,ecx
c0002219:	56                   	push   esi
c000221a:	b9 0b 00 00 00       	mov    ecx,0xb
c000221f:	53                   	push   ebx
c0002220:	89 c6                	mov    esi,eax
c0002222:	83 ec 10             	sub    esp,0x10
c0002225:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002229:	e8 85 fc ff ff       	call   c0001eb3 <mem_cpy>
c000222e:	83 fb 05             	cmp    ebx,0x5
c0002231:	76 30                	jbe    c0002263 <gen_numname+0x4d>
c0002233:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002236:	66 85 c0             	test   ax,ax
c0002239:	74 28                	je     c0002263 <gen_numname+0x4d>
c000223b:	83 c7 02             	add    edi,0x2
c000223e:	ba 10 00 00 00       	mov    edx,0x10
c0002243:	01 db                	add    ebx,ebx
c0002245:	89 c1                	mov    ecx,eax
c0002247:	c1 e0 10             	shl    eax,0x10
c000224a:	83 e1 01             	and    ecx,0x1
c000224d:	c1 e8 11             	shr    eax,0x11
c0002250:	01 cb                	add    ebx,ecx
c0002252:	0f ba e3 10          	bt     ebx,0x10
c0002256:	73 06                	jae    c000225e <gen_numname+0x48>
c0002258:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000225e:	4a                   	dec    edx
c000225f:	75 e2                	jne    c0002243 <gen_numname+0x2d>
c0002261:	eb d0                	jmp    c0002233 <gen_numname+0x1d>
c0002263:	b8 07 00 00 00       	mov    eax,0x7
c0002268:	89 d9                	mov    ecx,ebx
c000226a:	83 e1 0f             	and    ecx,0xf
c000226d:	8d 79 30             	lea    edi,[ecx+0x30]
c0002270:	89 fa                	mov    edx,edi
c0002272:	83 ff 39             	cmp    edi,0x39
c0002275:	76 03                	jbe    c000227a <gen_numname+0x64>
c0002277:	8d 51 37             	lea    edx,[ecx+0x37]
c000227a:	8d 48 ff             	lea    ecx,[eax-0x1]
c000227d:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002281:	89 da                	mov    edx,ebx
c0002283:	c1 ea 04             	shr    edx,0x4
c0002286:	83 fb 0f             	cmp    ebx,0xf
c0002289:	76 06                	jbe    c0002291 <gen_numname+0x7b>
c000228b:	89 c8                	mov    eax,ecx
c000228d:	89 d3                	mov    ebx,edx
c000228f:	eb d7                	jmp    c0002268 <gen_numname+0x52>
c0002291:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0002296:	31 d2                	xor    edx,edx
c0002298:	8d 58 fe             	lea    ebx,[eax-0x2]
c000229b:	8d 04 16             	lea    eax,[esi+edx*1]
c000229e:	39 ca                	cmp    edx,ecx
c00022a0:	73 19                	jae    c00022bb <gen_numname+0xa5>
c00022a2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00022a5:	83 f8 20             	cmp    eax,0x20
c00022a8:	74 11                	je     c00022bb <gen_numname+0xa5>
c00022aa:	e8 58 fc ff ff       	call   c0001f07 <dbc_1st>
c00022af:	85 c0                	test   eax,eax
c00022b1:	74 05                	je     c00022b8 <gen_numname+0xa2>
c00022b3:	39 d3                	cmp    ebx,edx
c00022b5:	74 04                	je     c00022bb <gen_numname+0xa5>
c00022b7:	42                   	inc    edx
c00022b8:	42                   	inc    edx
c00022b9:	eb e0                	jmp    c000229b <gen_numname+0x85>
c00022bb:	b0 20                	mov    al,0x20
c00022bd:	83 f9 07             	cmp    ecx,0x7
c00022c0:	77 05                	ja     c00022c7 <gen_numname+0xb1>
c00022c2:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00022c6:	41                   	inc    ecx
c00022c7:	42                   	inc    edx
c00022c8:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00022cc:	83 fa 07             	cmp    edx,0x7
c00022cf:	76 ea                	jbe    c00022bb <gen_numname+0xa5>
c00022d1:	83 c4 10             	add    esp,0x10
c00022d4:	5b                   	pop    ebx
c00022d5:	5e                   	pop    esi
c00022d6:	5f                   	pop    edi
c00022d7:	c3                   	ret    

c00022d8 <sum_sfn>:
c00022d8:	53                   	push   ebx
c00022d9:	31 c9                	xor    ecx,ecx
c00022db:	31 db                	xor    ebx,ebx
c00022dd:	0f b6 d1             	movzx  edx,cl
c00022e0:	c1 e1 07             	shl    ecx,0x7
c00022e3:	d1 ea                	shr    edx,1
c00022e5:	09 ca                	or     edx,ecx
c00022e7:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c00022ea:	43                   	inc    ebx
c00022eb:	01 ca                	add    edx,ecx
c00022ed:	83 fb 0b             	cmp    ebx,0xb
c00022f0:	88 d1                	mov    cl,dl
c00022f2:	75 e9                	jne    c00022dd <sum_sfn+0x5>
c00022f4:	88 d0                	mov    al,dl
c00022f6:	5b                   	pop    ebx
c00022f7:	c3                   	ret    

c00022f8 <get_ldnumber>:
c00022f8:	8b 10                	mov    edx,DWORD PTR [eax]
c00022fa:	85 d2                	test   edx,edx
c00022fc:	74 14                	je     c0002312 <get_ldnumber+0x1a>
c00022fe:	56                   	push   esi
c00022ff:	53                   	push   ebx
c0002300:	89 d3                	mov    ebx,edx
c0002302:	43                   	inc    ebx
c0002303:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002306:	80 f9 1f             	cmp    cl,0x1f
c0002309:	76 0d                	jbe    c0002318 <get_ldnumber+0x20>
c000230b:	80 f9 3a             	cmp    cl,0x3a
c000230e:	75 f2                	jne    c0002302 <get_ldnumber+0xa>
c0002310:	eb 0a                	jmp    c000231c <get_ldnumber+0x24>
c0002312:	83 c9 ff             	or     ecx,0xffffffff
c0002315:	89 c8                	mov    eax,ecx
c0002317:	c3                   	ret    
c0002318:	31 c9                	xor    ecx,ecx
c000231a:	eb 24                	jmp    c0002340 <get_ldnumber+0x48>
c000231c:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000231f:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002322:	80 f9 09             	cmp    cl,0x9
c0002325:	77 16                	ja     c000233d <get_ldnumber+0x45>
c0002327:	83 c2 02             	add    edx,0x2
c000232a:	83 c9 ff             	or     ecx,0xffffffff
c000232d:	39 d3                	cmp    ebx,edx
c000232f:	75 0f                	jne    c0002340 <get_ldnumber+0x48>
c0002331:	89 f2                	mov    edx,esi
c0002333:	89 18                	mov    DWORD PTR [eax],ebx
c0002335:	0f be ca             	movsx  ecx,dl
c0002338:	83 e9 30             	sub    ecx,0x30
c000233b:	eb 03                	jmp    c0002340 <get_ldnumber+0x48>
c000233d:	83 c9 ff             	or     ecx,0xffffffff
c0002340:	89 c8                	mov    eax,ecx
c0002342:	5b                   	pop    ebx
c0002343:	5e                   	pop    esi
c0002344:	c3                   	ret    

c0002345 <validate>:
c0002345:	56                   	push   esi
c0002346:	53                   	push   ebx
c0002347:	89 d6                	mov    esi,edx
c0002349:	51                   	push   ecx
c000234a:	85 c0                	test   eax,eax
c000234c:	75 09                	jne    c0002357 <validate+0x12>
c000234e:	b8 09 00 00 00       	mov    eax,0x9
c0002353:	31 c9                	xor    ecx,ecx
c0002355:	eb 2e                	jmp    c0002385 <validate+0x40>
c0002357:	89 c3                	mov    ebx,eax
c0002359:	8b 00                	mov    eax,DWORD PTR [eax]
c000235b:	85 c0                	test   eax,eax
c000235d:	74 ef                	je     c000234e <validate+0x9>
c000235f:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002362:	74 ea                	je     c000234e <validate+0x9>
c0002364:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0002367:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c000236b:	75 e1                	jne    c000234e <validate+0x9>
c000236d:	83 ec 0c             	sub    esp,0xc
c0002370:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002374:	50                   	push   eax
c0002375:	e8 bc fa ff ff       	call   c0001e36 <disk_status>
c000237a:	83 c4 10             	add    esp,0x10
c000237d:	a8 01                	test   al,0x1
c000237f:	75 cd                	jne    c000234e <validate+0x9>
c0002381:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002383:	31 c0                	xor    eax,eax
c0002385:	89 0e                	mov    DWORD PTR [esi],ecx
c0002387:	5a                   	pop    edx
c0002388:	5b                   	pop    ebx
c0002389:	5e                   	pop    esi
c000238a:	c3                   	ret    

c000238b <sync_window>:
c000238b:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c000238f:	74 58                	je     c00023e9 <sync_window+0x5e>
c0002391:	56                   	push   esi
c0002392:	53                   	push   ebx
c0002393:	8d 70 34             	lea    esi,[eax+0x34]
c0002396:	51                   	push   ecx
c0002397:	89 c3                	mov    ebx,eax
c0002399:	6a 01                	push   0x1
c000239b:	ff 70 30             	push   DWORD PTR [eax+0x30]
c000239e:	56                   	push   esi
c000239f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023a3:	50                   	push   eax
c00023a4:	e8 a9 fa ff ff       	call   c0001e52 <disk_write>
c00023a9:	83 c4 10             	add    esp,0x10
c00023ac:	ba 01 00 00 00       	mov    edx,0x1
c00023b1:	85 c0                	test   eax,eax
c00023b3:	75 2e                	jne    c00023e3 <sync_window+0x58>
c00023b5:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00023b8:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00023bb:	89 c1                	mov    ecx,eax
c00023bd:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c1:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c00023c4:	39 d1                	cmp    ecx,edx
c00023c6:	73 19                	jae    c00023e1 <sync_window+0x56>
c00023c8:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023cc:	75 13                	jne    c00023e1 <sync_window+0x56>
c00023ce:	6a 01                	push   0x1
c00023d0:	01 d0                	add    eax,edx
c00023d2:	50                   	push   eax
c00023d3:	56                   	push   esi
c00023d4:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023d8:	50                   	push   eax
c00023d9:	e8 74 fa ff ff       	call   c0001e52 <disk_write>
c00023de:	83 c4 10             	add    esp,0x10
c00023e1:	31 d2                	xor    edx,edx
c00023e3:	89 d0                	mov    eax,edx
c00023e5:	5a                   	pop    edx
c00023e6:	5b                   	pop    ebx
c00023e7:	5e                   	pop    esi
c00023e8:	c3                   	ret    
c00023e9:	31 d2                	xor    edx,edx
c00023eb:	89 d0                	mov    eax,edx
c00023ed:	c3                   	ret    

c00023ee <move_window>:
c00023ee:	57                   	push   edi
c00023ef:	56                   	push   esi
c00023f0:	31 f6                	xor    esi,esi
c00023f2:	53                   	push   ebx
c00023f3:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c00023f6:	74 32                	je     c000242a <move_window+0x3c>
c00023f8:	89 c3                	mov    ebx,eax
c00023fa:	89 d7                	mov    edi,edx
c00023fc:	e8 8a ff ff ff       	call   c000238b <sync_window>
c0002401:	89 c6                	mov    esi,eax
c0002403:	85 c0                	test   eax,eax
c0002405:	75 23                	jne    c000242a <move_window+0x3c>
c0002407:	6a 01                	push   0x1
c0002409:	8d 43 34             	lea    eax,[ebx+0x34]
c000240c:	57                   	push   edi
c000240d:	50                   	push   eax
c000240e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002412:	50                   	push   eax
c0002413:	e8 24 fa ff ff       	call   c0001e3c <disk_read>
c0002418:	83 c4 10             	add    esp,0x10
c000241b:	85 c0                	test   eax,eax
c000241d:	74 08                	je     c0002427 <move_window+0x39>
c000241f:	be 01 00 00 00       	mov    esi,0x1
c0002424:	83 cf ff             	or     edi,0xffffffff
c0002427:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000242a:	89 f0                	mov    eax,esi
c000242c:	5b                   	pop    ebx
c000242d:	5e                   	pop    esi
c000242e:	5f                   	pop    edi
c000242f:	c3                   	ret    

c0002430 <check_fs>:
c0002430:	53                   	push   ebx
c0002431:	89 c3                	mov    ebx,eax
c0002433:	83 ec 08             	sub    esp,0x8
c0002436:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000243a:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002441:	e8 a8 ff ff ff       	call   c00023ee <move_window>
c0002446:	ba 04 00 00 00       	mov    edx,0x4
c000244b:	85 c0                	test   eax,eax
c000244d:	75 68                	jne    c00024b7 <check_fs+0x87>
c000244f:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002455:	e8 2d fa ff ff       	call   c0001e87 <ld_word>
c000245a:	ba 03 00 00 00       	mov    edx,0x3
c000245f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002463:	75 52                	jne    c00024b7 <check_fs+0x87>
c0002465:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c0002468:	8d 50 18             	lea    edx,[eax+0x18]
c000246b:	80 fa 01             	cmp    dl,0x1
c000246e:	76 09                	jbe    c0002479 <check_fs+0x49>
c0002470:	ba 02 00 00 00       	mov    edx,0x2
c0002475:	3c eb                	cmp    al,0xeb
c0002477:	75 3e                	jne    c00024b7 <check_fs+0x87>
c0002479:	ba 88 2e 03 c0       	mov    edx,0xc0032e88
c000247e:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002481:	b9 03 00 00 00       	mov    ecx,0x3
c0002486:	e8 48 fa ff ff       	call   c0001ed3 <mem_cmp>
c000248b:	31 d2                	xor    edx,edx
c000248d:	85 c0                	test   eax,eax
c000248f:	74 26                	je     c00024b7 <check_fs+0x87>
c0002491:	ba 3c f0 02 c0       	mov    edx,0xc002f03c
c0002496:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000249c:	b9 05 00 00 00       	mov    ecx,0x5
c00024a1:	e8 2d fa ff ff       	call   c0001ed3 <mem_cmp>
c00024a6:	31 d2                	xor    edx,edx
c00024a8:	85 c0                	test   eax,eax
c00024aa:	74 0b                	je     c00024b7 <check_fs+0x87>
c00024ac:	31 d2                	xor    edx,edx
c00024ae:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c00024b2:	0f 95 c2             	setne  dl
c00024b5:	01 d2                	add    edx,edx
c00024b7:	89 d0                	mov    eax,edx
c00024b9:	83 c4 08             	add    esp,0x8
c00024bc:	5b                   	pop    ebx
c00024bd:	c3                   	ret    

c00024be <find_volume>:
c00024be:	55                   	push   ebp
c00024bf:	57                   	push   edi
c00024c0:	56                   	push   esi
c00024c1:	89 c6                	mov    esi,eax
c00024c3:	53                   	push   ebx
c00024c4:	89 d3                	mov    ebx,edx
c00024c6:	83 ec 2c             	sub    esp,0x2c
c00024c9:	31 d2                	xor    edx,edx
c00024cb:	e8 60 ff ff ff       	call   c0002430 <check_fs>
c00024d0:	83 f8 02             	cmp    eax,0x2
c00024d3:	74 06                	je     c00024db <find_volume+0x1d>
c00024d5:	77 62                	ja     c0002539 <find_volume+0x7b>
c00024d7:	85 db                	test   ebx,ebx
c00024d9:	74 5e                	je     c0002539 <find_volume+0x7b>
c00024db:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c00024df:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c00024e5:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c00024eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00024ef:	89 cf                	mov    edi,ecx
c00024f1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00024f5:	89 e8                	mov    eax,ebp
c00024f7:	83 c5 10             	add    ebp,0x10
c00024fa:	e8 95 f9 ff ff       	call   c0001e94 <ld_dword>
c00024ff:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002503:	89 01                	mov    DWORD PTR [ecx],eax
c0002505:	83 c1 04             	add    ecx,0x4
c0002508:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000250c:	75 e3                	jne    c00024f1 <find_volume+0x33>
c000250e:	31 ed                	xor    ebp,ebp
c0002510:	85 db                	test   ebx,ebx
c0002512:	74 03                	je     c0002517 <find_volume+0x59>
c0002514:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002517:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000251a:	b8 03 00 00 00       	mov    eax,0x3
c000251f:	85 d2                	test   edx,edx
c0002521:	74 0c                	je     c000252f <find_volume+0x71>
c0002523:	89 f0                	mov    eax,esi
c0002525:	e8 06 ff ff ff       	call   c0002430 <check_fs>
c000252a:	83 f8 01             	cmp    eax,0x1
c000252d:	76 0a                	jbe    c0002539 <find_volume+0x7b>
c000252f:	85 db                	test   ebx,ebx
c0002531:	75 06                	jne    c0002539 <find_volume+0x7b>
c0002533:	45                   	inc    ebp
c0002534:	83 fd 03             	cmp    ebp,0x3
c0002537:	76 de                	jbe    c0002517 <find_volume+0x59>
c0002539:	83 c4 2c             	add    esp,0x2c
c000253c:	5b                   	pop    ebx
c000253d:	5e                   	pop    esi
c000253e:	5f                   	pop    edi
c000253f:	5d                   	pop    ebp
c0002540:	c3                   	ret    

c0002541 <mount_volume>:
c0002541:	55                   	push   ebp
c0002542:	89 d5                	mov    ebp,edx
c0002544:	57                   	push   edi
c0002545:	89 cf                	mov    edi,ecx
c0002547:	56                   	push   esi
c0002548:	53                   	push   ebx
c0002549:	bb 0b 00 00 00       	mov    ebx,0xb
c000254e:	83 ec 1c             	sub    esp,0x1c
c0002551:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002557:	e8 9c fd ff ff       	call   c00022f8 <get_ldnumber>
c000255c:	85 c0                	test   eax,eax
c000255e:	0f 88 c4 02 00 00    	js     c0002828 <mount_volume+0x2e7>
c0002564:	8b 34 85 80 6c 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc9380]
c000256b:	89 c2                	mov    edx,eax
c000256d:	bb 0c 00 00 00       	mov    ebx,0xc
c0002572:	85 f6                	test   esi,esi
c0002574:	0f 84 ae 02 00 00    	je     c0002828 <mount_volume+0x2e7>
c000257a:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c000257d:	83 e7 fe             	and    edi,0xfffffffe
c0002580:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002583:	74 3a                	je     c00025bf <mount_volume+0x7e>
c0002585:	89 04 24             	mov    DWORD PTR [esp],eax
c0002588:	83 ec 0c             	sub    esp,0xc
c000258b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000258f:	50                   	push   eax
c0002590:	e8 a1 f8 ff ff       	call   c0001e36 <disk_status>
c0002595:	83 c4 10             	add    esp,0x10
c0002598:	a8 01                	test   al,0x1
c000259a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000259d:	75 20                	jne    c00025bf <mount_volume+0x7e>
c000259f:	31 db                	xor    ebx,ebx
c00025a1:	81 e7 fe 00 00 00    	and    edi,0xfe
c00025a7:	0f 84 7b 02 00 00    	je     c0002828 <mount_volume+0x2e7>
c00025ad:	a8 04                	test   al,0x4
c00025af:	0f 84 73 02 00 00    	je     c0002828 <mount_volume+0x2e7>
c00025b5:	bb 0a 00 00 00       	mov    ebx,0xa
c00025ba:	e9 69 02 00 00       	jmp    c0002828 <mount_volume+0x2e7>
c00025bf:	83 ec 0c             	sub    esp,0xc
c00025c2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00025c5:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c00025c8:	0f b6 c2             	movzx  eax,dl
c00025cb:	bb 03 00 00 00       	mov    ebx,0x3
c00025d0:	50                   	push   eax
c00025d1:	e8 63 f8 ff ff       	call   c0001e39 <disk_initialize>
c00025d6:	83 c4 10             	add    esp,0x10
c00025d9:	a8 01                	test   al,0x1
c00025db:	0f 85 47 02 00 00    	jne    c0002828 <mount_volume+0x2e7>
c00025e1:	81 e7 fe 00 00 00    	and    edi,0xfe
c00025e7:	74 04                	je     c00025ed <mount_volume+0xac>
c00025e9:	a8 04                	test   al,0x4
c00025eb:	75 c8                	jne    c00025b5 <mount_volume+0x74>
c00025ed:	31 d2                	xor    edx,edx
c00025ef:	89 f0                	mov    eax,esi
c00025f1:	bb 01 00 00 00       	mov    ebx,0x1
c00025f6:	e8 c3 fe ff ff       	call   c00024be <find_volume>
c00025fb:	83 f8 04             	cmp    eax,0x4
c00025fe:	0f 84 24 02 00 00    	je     c0002828 <mount_volume+0x2e7>
c0002604:	83 f8 01             	cmp    eax,0x1
c0002607:	76 0a                	jbe    c0002613 <mount_volume+0xd2>
c0002609:	bb 0d 00 00 00       	mov    ebx,0xd
c000260e:	e9 15 02 00 00       	jmp    c0002828 <mount_volume+0x2e7>
c0002613:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002616:	e8 6c f8 ff ff       	call   c0001e87 <ld_word>
c000261b:	66 3d 00 02          	cmp    ax,0x200
c000261f:	75 e8                	jne    c0002609 <mount_volume+0xc8>
c0002621:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002624:	e8 5e f8 ff ff       	call   c0001e87 <ld_word>
c0002629:	0f b7 c0             	movzx  eax,ax
c000262c:	89 04 24             	mov    DWORD PTR [esp],eax
c000262f:	85 c0                	test   eax,eax
c0002631:	75 0b                	jne    c000263e <mount_volume+0xfd>
c0002633:	8d 46 58             	lea    eax,[esi+0x58]
c0002636:	e8 59 f8 ff ff       	call   c0001e94 <ld_dword>
c000263b:	89 04 24             	mov    DWORD PTR [esp],eax
c000263e:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002641:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002645:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002648:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000264b:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c000264e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002652:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0002655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002659:	48                   	dec    eax
c000265a:	3c 01                	cmp    al,0x1
c000265c:	77 ab                	ja     c0002609 <mount_volume+0xc8>
c000265e:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c0002662:	89 c3                	mov    ebx,eax
c0002664:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c0002668:	66 85 c0             	test   ax,ax
c000266b:	74 9c                	je     c0002609 <mount_volume+0xc8>
c000266d:	8d 40 ff             	lea    eax,[eax-0x1]
c0002670:	85 d8                	test   eax,ebx
c0002672:	75 95                	jne    c0002609 <mount_volume+0xc8>
c0002674:	8d 46 45             	lea    eax,[esi+0x45]
c0002677:	e8 0b f8 ff ff       	call   c0001e87 <ld_word>
c000267c:	89 c7                	mov    edi,eax
c000267e:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002682:	a8 0f                	test   al,0xf
c0002684:	75 83                	jne    c0002609 <mount_volume+0xc8>
c0002686:	8d 46 47             	lea    eax,[esi+0x47]
c0002689:	e8 f9 f7 ff ff       	call   c0001e87 <ld_word>
c000268e:	0f b7 e8             	movzx  ebp,ax
c0002691:	85 ed                	test   ebp,ebp
c0002693:	75 0a                	jne    c000269f <mount_volume+0x15e>
c0002695:	8d 46 54             	lea    eax,[esi+0x54]
c0002698:	e8 f7 f7 ff ff       	call   c0001e94 <ld_dword>
c000269d:	89 c5                	mov    ebp,eax
c000269f:	8d 46 42             	lea    eax,[esi+0x42]
c00026a2:	e8 e0 f7 ff ff       	call   c0001e87 <ld_word>
c00026a7:	0f b7 c8             	movzx  ecx,ax
c00026aa:	85 c9                	test   ecx,ecx
c00026ac:	0f 84 57 ff ff ff    	je     c0002609 <mount_volume+0xc8>
c00026b2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00026b7:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c00026bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00026bf:	0f b7 c7             	movzx  eax,di
c00026c2:	c1 e8 04             	shr    eax,0x4
c00026c5:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00026c9:	01 c8                	add    eax,ecx
c00026cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00026cf:	39 c5                	cmp    ebp,eax
c00026d1:	0f 82 32 ff ff ff    	jb     c0002609 <mount_volume+0xc8>
c00026d7:	29 c5                	sub    ebp,eax
c00026d9:	31 d2                	xor    edx,edx
c00026db:	89 e8                	mov    eax,ebp
c00026dd:	f7 f3                	div    ebx
c00026df:	39 dd                	cmp    ebp,ebx
c00026e1:	0f 82 22 ff ff ff    	jb     c0002609 <mount_volume+0xc8>
c00026e7:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00026ec:	0f 87 17 ff ff ff    	ja     c0002609 <mount_volume+0xc8>
c00026f2:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00026f7:	0f 86 1c 01 00 00    	jbe    c0002819 <mount_volume+0x2d8>
c00026fd:	bb 03 00 00 00       	mov    ebx,0x3
c0002702:	8d 68 02             	lea    ebp,[eax+0x2]
c0002705:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002709:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000270d:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c0002711:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002714:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002717:	01 c8                	add    eax,ecx
c0002719:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000271c:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000271f:	83 fb 03             	cmp    ebx,0x3
c0002722:	75 23                	jne    c0002747 <mount_volume+0x206>
c0002724:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002727:	e8 5b f7 ff ff       	call   c0001e87 <ld_word>
c000272c:	09 c7                	or     edi,eax
c000272e:	66 85 ff             	test   di,di
c0002731:	0f 85 d2 fe ff ff    	jne    c0002609 <mount_volume+0xc8>
c0002737:	8d 46 60             	lea    eax,[esi+0x60]
c000273a:	c1 e5 02             	shl    ebp,0x2
c000273d:	e8 52 f7 ff ff       	call   c0001e94 <ld_dword>
c0002742:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002745:	eb 24                	jmp    c000276b <mount_volume+0x22a>
c0002747:	66 85 ff             	test   di,di
c000274a:	0f 84 b9 fe ff ff    	je     c0002609 <mount_volume+0xc8>
c0002750:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002754:	83 fb 02             	cmp    ebx,0x2
c0002757:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c000275a:	75 04                	jne    c0002760 <mount_volume+0x21f>
c000275c:	01 ed                	add    ebp,ebp
c000275e:	eb 0b                	jmp    c000276b <mount_volume+0x22a>
c0002760:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c0002764:	83 e5 01             	and    ebp,0x1
c0002767:	d1 e8                	shr    eax,1
c0002769:	01 c5                	add    ebp,eax
c000276b:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c0002771:	c1 ed 09             	shr    ebp,0x9
c0002774:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0002777:	0f 87 8c fe ff ff    	ja     c0002609 <mount_volume+0xc8>
c000277d:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002784:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000278b:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000278f:	83 fb 03             	cmp    ebx,0x3
c0002792:	75 6e                	jne    c0002802 <mount_volume+0x2c1>
c0002794:	8d 46 64             	lea    eax,[esi+0x64]
c0002797:	e8 eb f6 ff ff       	call   c0001e87 <ld_word>
c000279c:	66 48                	dec    ax
c000279e:	75 62                	jne    c0002802 <mount_volume+0x2c1>
c00027a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00027a4:	89 f0                	mov    eax,esi
c00027a6:	42                   	inc    edx
c00027a7:	e8 42 fc ff ff       	call   c00023ee <move_window>
c00027ac:	85 c0                	test   eax,eax
c00027ae:	75 52                	jne    c0002802 <mount_volume+0x2c1>
c00027b0:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c00027b4:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c00027ba:	e8 c8 f6 ff ff       	call   c0001e87 <ld_word>
c00027bf:	66 3d 55 aa          	cmp    ax,0xaa55
c00027c3:	75 3d                	jne    c0002802 <mount_volume+0x2c1>
c00027c5:	8d 46 34             	lea    eax,[esi+0x34]
c00027c8:	e8 c7 f6 ff ff       	call   c0001e94 <ld_dword>
c00027cd:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027d2:	75 2e                	jne    c0002802 <mount_volume+0x2c1>
c00027d4:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c00027da:	e8 b5 f6 ff ff       	call   c0001e94 <ld_dword>
c00027df:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027e4:	75 1c                	jne    c0002802 <mount_volume+0x2c1>
c00027e6:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c00027ec:	e8 a3 f6 ff ff       	call   c0001e94 <ld_dword>
c00027f1:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00027f4:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c00027fa:	e8 95 f6 ff ff       	call   c0001e94 <ld_dword>
c00027ff:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002802:	66 a1 60 6c 03 c0    	mov    ax,ds:0xc0036c60
c0002808:	88 1e                	mov    BYTE PTR [esi],bl
c000280a:	40                   	inc    eax
c000280b:	31 db                	xor    ebx,ebx
c000280d:	66 a3 60 6c 03 c0    	mov    ds:0xc0036c60,ax
c0002813:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002817:	eb 0f                	jmp    c0002828 <mount_volume+0x2e7>
c0002819:	3d f6 0f 00 00       	cmp    eax,0xff6
c000281e:	19 db                	sbb    ebx,ebx
c0002820:	83 c3 02             	add    ebx,0x2
c0002823:	e9 da fe ff ff       	jmp    c0002702 <mount_volume+0x1c1>
c0002828:	83 c4 1c             	add    esp,0x1c
c000282b:	89 d8                	mov    eax,ebx
c000282d:	5b                   	pop    ebx
c000282e:	5e                   	pop    esi
c000282f:	5f                   	pop    edi
c0002830:	5d                   	pop    ebp
c0002831:	c3                   	ret    

c0002832 <put_fat>:
c0002832:	55                   	push   ebp
c0002833:	bd 02 00 00 00       	mov    ebp,0x2
c0002838:	57                   	push   edi
c0002839:	56                   	push   esi
c000283a:	53                   	push   ebx
c000283b:	83 ec 1c             	sub    esp,0x1c
c000283e:	83 fa 01             	cmp    edx,0x1
c0002841:	0f 86 38 01 00 00    	jbe    c000297f <put_fat+0x14d>
c0002847:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000284a:	0f 86 2f 01 00 00    	jbe    c000297f <put_fat+0x14d>
c0002850:	89 c6                	mov    esi,eax
c0002852:	89 cf                	mov    edi,ecx
c0002854:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002857:	89 d3                	mov    ebx,edx
c0002859:	83 f8 02             	cmp    eax,0x2
c000285c:	0f 84 b1 00 00 00    	je     c0002913 <put_fat+0xe1>
c0002862:	83 f8 03             	cmp    eax,0x3
c0002865:	0f 84 d5 00 00 00    	je     c0002940 <put_fat+0x10e>
c000286b:	48                   	dec    eax
c000286c:	0f 85 0d 01 00 00    	jne    c000297f <put_fat+0x14d>
c0002872:	89 d1                	mov    ecx,edx
c0002874:	89 f0                	mov    eax,esi
c0002876:	d1 e9                	shr    ecx,1
c0002878:	01 d1                	add    ecx,edx
c000287a:	89 ca                	mov    edx,ecx
c000287c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002880:	c1 ea 09             	shr    edx,0x9
c0002883:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002886:	e8 63 fb ff ff       	call   c00023ee <move_window>
c000288b:	89 c5                	mov    ebp,eax
c000288d:	85 c0                	test   eax,eax
c000288f:	0f 85 ea 00 00 00    	jne    c000297f <put_fat+0x14d>
c0002895:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002899:	8d 46 34             	lea    eax,[esi+0x34]
c000289c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00028a0:	8d 41 01             	lea    eax,[ecx+0x1]
c00028a3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00028a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00028ad:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00028b1:	89 f8                	mov    eax,edi
c00028b3:	83 e3 01             	and    ebx,0x1
c00028b6:	74 11                	je     c00028c9 <put_fat+0x97>
c00028b8:	8a 11                	mov    dl,BYTE PTR [ecx]
c00028ba:	89 f8                	mov    eax,edi
c00028bc:	83 e2 0f             	and    edx,0xf
c00028bf:	c1 e0 04             	shl    eax,0x4
c00028c2:	25 f0 0f 00 00       	and    eax,0xff0
c00028c7:	09 d0                	or     eax,edx
c00028c9:	88 01                	mov    BYTE PTR [ecx],al
c00028cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028cf:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00028d3:	c1 ea 09             	shr    edx,0x9
c00028d6:	89 f0                	mov    eax,esi
c00028d8:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028db:	e8 0e fb ff ff       	call   c00023ee <move_window>
c00028e0:	89 c5                	mov    ebp,eax
c00028e2:	85 c0                	test   eax,eax
c00028e4:	0f 85 95 00 00 00    	jne    c000297f <put_fat+0x14d>
c00028ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00028ee:	25 ff 01 00 00       	and    eax,0x1ff
c00028f3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028f7:	85 db                	test   ebx,ebx
c00028f9:	74 07                	je     c0002902 <put_fat+0xd0>
c00028fb:	c1 ef 04             	shr    edi,0x4
c00028fe:	89 f9                	mov    ecx,edi
c0002900:	eb 0d                	jmp    c000290f <put_fat+0xdd>
c0002902:	8a 08                	mov    cl,BYTE PTR [eax]
c0002904:	c1 ef 08             	shr    edi,0x8
c0002907:	83 e1 f0             	and    ecx,0xfffffff0
c000290a:	83 e7 0f             	and    edi,0xf
c000290d:	09 f9                	or     ecx,edi
c000290f:	88 08                	mov    BYTE PTR [eax],cl
c0002911:	eb 27                	jmp    c000293a <put_fat+0x108>
c0002913:	c1 ea 08             	shr    edx,0x8
c0002916:	89 f0                	mov    eax,esi
c0002918:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000291b:	e8 ce fa ff ff       	call   c00023ee <move_window>
c0002920:	89 c5                	mov    ebp,eax
c0002922:	85 c0                	test   eax,eax
c0002924:	75 59                	jne    c000297f <put_fat+0x14d>
c0002926:	01 db                	add    ebx,ebx
c0002928:	0f b7 d7             	movzx  edx,di
c000292b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002931:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002935:	e8 72 f5 ff ff       	call   c0001eac <st_word>
c000293a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000293e:	eb 3f                	jmp    c000297f <put_fat+0x14d>
c0002940:	c1 ea 07             	shr    edx,0x7
c0002943:	89 f0                	mov    eax,esi
c0002945:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002948:	e8 a1 fa ff ff       	call   c00023ee <move_window>
c000294d:	89 c5                	mov    ebp,eax
c000294f:	85 c0                	test   eax,eax
c0002951:	75 2c                	jne    c000297f <put_fat+0x14d>
c0002953:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002959:	c1 e3 02             	shl    ebx,0x2
c000295c:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002962:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002966:	89 d8                	mov    eax,ebx
c0002968:	e8 27 f5 ff ff       	call   c0001e94 <ld_dword>
c000296d:	25 00 00 00 f0       	and    eax,0xf0000000
c0002972:	09 f8                	or     eax,edi
c0002974:	89 c2                	mov    edx,eax
c0002976:	89 d8                	mov    eax,ebx
c0002978:	e8 33 f5 ff ff       	call   c0001eb0 <st_dword>
c000297d:	eb bb                	jmp    c000293a <put_fat+0x108>
c000297f:	83 c4 1c             	add    esp,0x1c
c0002982:	89 e8                	mov    eax,ebp
c0002984:	5b                   	pop    ebx
c0002985:	5e                   	pop    esi
c0002986:	5f                   	pop    edi
c0002987:	5d                   	pop    ebp
c0002988:	c3                   	ret    

c0002989 <dir_clear>:
c0002989:	55                   	push   ebp
c000298a:	57                   	push   edi
c000298b:	56                   	push   esi
c000298c:	89 c6                	mov    esi,eax
c000298e:	53                   	push   ebx
c000298f:	83 ec 1c             	sub    esp,0x1c
c0002992:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002996:	e8 f0 f9 ff ff       	call   c000238b <sync_window>
c000299b:	85 c0                	test   eax,eax
c000299d:	0f 85 c0 00 00 00    	jne    c0002a63 <dir_clear+0xda>
c00029a3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029a7:	89 f0                	mov    eax,esi
c00029a9:	e8 30 f7 ff ff       	call   c00020de <clst2sect>
c00029ae:	31 d2                	xor    edx,edx
c00029b0:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c00029b3:	89 c5                	mov    ebp,eax
c00029b5:	b9 00 02 00 00       	mov    ecx,0x200
c00029ba:	8d 46 34             	lea    eax,[esi+0x34]
c00029bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029c1:	e8 02 f5 ff ff       	call   c0001ec8 <mem_set>
c00029c6:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c00029ca:	c1 e3 09             	shl    ebx,0x9
c00029cd:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c00029d3:	76 1b                	jbe    c00029f0 <dir_clear+0x67>
c00029d5:	bb 00 80 00 00       	mov    ebx,0x8000
c00029da:	eb 14                	jmp    c00029f0 <dir_clear+0x67>
c00029dc:	83 ec 0c             	sub    esp,0xc
c00029df:	53                   	push   ebx
c00029e0:	e8 eb 32 00 00       	call   c0005cd0 <ff_memalloc>
c00029e5:	83 c4 10             	add    esp,0x10
c00029e8:	89 c7                	mov    edi,eax
c00029ea:	85 c0                	test   eax,eax
c00029ec:	75 7c                	jne    c0002a6a <dir_clear+0xe1>
c00029ee:	d1 eb                	shr    ebx,1
c00029f0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c00029f6:	77 e4                	ja     c00029dc <dir_clear+0x53>
c00029f8:	31 db                	xor    ebx,ebx
c00029fa:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029fe:	39 d8                	cmp    eax,ebx
c0002a00:	76 53                	jbe    c0002a55 <dir_clear+0xcc>
c0002a02:	6a 01                	push   0x1
c0002a04:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002a07:	50                   	push   eax
c0002a08:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002a0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002a10:	50                   	push   eax
c0002a11:	e8 3c f4 ff ff       	call   c0001e52 <disk_write>
c0002a16:	83 c4 10             	add    esp,0x10
c0002a19:	85 c0                	test   eax,eax
c0002a1b:	75 38                	jne    c0002a55 <dir_clear+0xcc>
c0002a1d:	43                   	inc    ebx
c0002a1e:	eb da                	jmp    c00029fa <dir_clear+0x71>
c0002a20:	52                   	push   edx
c0002a21:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002a24:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002a28:	50                   	push   eax
c0002a29:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002a2d:	57                   	push   edi
c0002a2e:	50                   	push   eax
c0002a2f:	e8 1e f4 ff ff       	call   c0001e52 <disk_write>
c0002a34:	83 c4 10             	add    esp,0x10
c0002a37:	85 c0                	test   eax,eax
c0002a39:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a3d:	75 0a                	jne    c0002a49 <dir_clear+0xc0>
c0002a3f:	01 d3                	add    ebx,edx
c0002a41:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002a45:	39 d8                	cmp    eax,ebx
c0002a47:	77 d7                	ja     c0002a20 <dir_clear+0x97>
c0002a49:	83 ec 0c             	sub    esp,0xc
c0002a4c:	57                   	push   edi
c0002a4d:	e8 96 32 00 00       	call   c0005ce8 <ff_memfree>
c0002a52:	83 c4 10             	add    esp,0x10
c0002a55:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002a59:	39 d8                	cmp    eax,ebx
c0002a5b:	0f 95 c0             	setne  al
c0002a5e:	0f b6 c0             	movzx  eax,al
c0002a61:	eb 19                	jmp    c0002a7c <dir_clear+0xf3>
c0002a63:	b8 01 00 00 00       	mov    eax,0x1
c0002a68:	eb 12                	jmp    c0002a7c <dir_clear+0xf3>
c0002a6a:	89 d9                	mov    ecx,ebx
c0002a6c:	31 d2                	xor    edx,edx
c0002a6e:	e8 55 f4 ff ff       	call   c0001ec8 <mem_set>
c0002a73:	89 da                	mov    edx,ebx
c0002a75:	31 db                	xor    ebx,ebx
c0002a77:	c1 ea 09             	shr    edx,0x9
c0002a7a:	eb c5                	jmp    c0002a41 <dir_clear+0xb8>
c0002a7c:	83 c4 1c             	add    esp,0x1c
c0002a7f:	5b                   	pop    ebx
c0002a80:	5e                   	pop    esi
c0002a81:	5f                   	pop    edi
c0002a82:	5d                   	pop    ebp
c0002a83:	c3                   	ret    

c0002a84 <create_name>:
c0002a84:	55                   	push   ebp
c0002a85:	57                   	push   edi
c0002a86:	89 d7                	mov    edi,edx
c0002a88:	56                   	push   esi
c0002a89:	31 f6                	xor    esi,esi
c0002a8b:	53                   	push   ebx
c0002a8c:	83 ec 3c             	sub    esp,0x3c
c0002a8f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002a93:	8b 02                	mov    eax,DWORD PTR [edx]
c0002a95:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0002a9f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002aa2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002aa6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002aaa:	e8 5e f4 ff ff       	call   c0001f0d <tchar2uni>
c0002aaf:	89 c3                	mov    ebx,eax
c0002ab1:	83 f8 ff             	cmp    eax,0xffffffff
c0002ab4:	75 0a                	jne    c0002ac0 <create_name+0x3c>
c0002ab6:	b8 06 00 00 00       	mov    eax,0x6
c0002abb:	e9 93 02 00 00       	jmp    c0002d53 <create_name+0x2cf>
c0002ac0:	3d ff ff 00 00       	cmp    eax,0xffff
c0002ac5:	76 0c                	jbe    c0002ad3 <create_name+0x4f>
c0002ac7:	c1 e8 10             	shr    eax,0x10
c0002aca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ace:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002ad2:	46                   	inc    esi
c0002ad3:	0f b7 d3             	movzx  edx,bx
c0002ad6:	83 fa 1f             	cmp    edx,0x1f
c0002ad9:	76 4a                	jbe    c0002b25 <create_name+0xa1>
c0002adb:	83 fa 5c             	cmp    edx,0x5c
c0002ade:	74 30                	je     c0002b10 <create_name+0x8c>
c0002ae0:	83 fa 2f             	cmp    edx,0x2f
c0002ae3:	74 2b                	je     c0002b10 <create_name+0x8c>
c0002ae5:	83 fa 7f             	cmp    edx,0x7f
c0002ae8:	77 0e                	ja     c0002af8 <create_name+0x74>
c0002aea:	b8 42 f0 02 c0       	mov    eax,0xc002f042
c0002aef:	e8 02 f4 ff ff       	call   c0001ef6 <chk_chr>
c0002af4:	85 c0                	test   eax,eax
c0002af6:	75 be                	jne    c0002ab6 <create_name+0x32>
c0002af8:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002afe:	77 b6                	ja     c0002ab6 <create_name+0x32>
c0002b00:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b04:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002b08:	46                   	inc    esi
c0002b09:	eb 9b                	jmp    c0002aa6 <create_name+0x22>
c0002b0b:	40                   	inc    eax
c0002b0c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002b10:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002b14:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002b17:	83 fa 2f             	cmp    edx,0x2f
c0002b1a:	74 ef                	je     c0002b0b <create_name+0x87>
c0002b1c:	83 fa 5c             	cmp    edx,0x5c
c0002b1f:	74 ea                	je     c0002b0b <create_name+0x87>
c0002b21:	31 db                	xor    ebx,ebx
c0002b23:	eb 02                	jmp    c0002b27 <create_name+0xa3>
c0002b25:	b3 04                	mov    bl,0x4
c0002b27:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002b2b:	89 07                	mov    DWORD PTR [edi],eax
c0002b2d:	85 f6                	test   esi,esi
c0002b2f:	74 16                	je     c0002b47 <create_name+0xc3>
c0002b31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b35:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002b3a:	83 f8 20             	cmp    eax,0x20
c0002b3d:	74 05                	je     c0002b44 <create_name+0xc0>
c0002b3f:	83 f8 2e             	cmp    eax,0x2e
c0002b42:	75 03                	jne    c0002b47 <create_name+0xc3>
c0002b44:	4e                   	dec    esi
c0002b45:	eb e6                	jmp    c0002b2d <create_name+0xa9>
c0002b47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b4b:	31 ff                	xor    edi,edi
c0002b4d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002b53:	85 f6                	test   esi,esi
c0002b55:	0f 84 5b ff ff ff    	je     c0002ab6 <create_name+0x32>
c0002b5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b5f:	8d 57 01             	lea    edx,[edi+0x1]
c0002b62:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b66:	83 f8 20             	cmp    eax,0x20
c0002b69:	75 04                	jne    c0002b6f <create_name+0xeb>
c0002b6b:	89 d7                	mov    edi,edx
c0002b6d:	eb ec                	jmp    c0002b5b <create_name+0xd7>
c0002b6f:	85 ff                	test   edi,edi
c0002b71:	75 05                	jne    c0002b78 <create_name+0xf4>
c0002b73:	83 f8 2e             	cmp    eax,0x2e
c0002b76:	75 08                	jne    c0002b80 <create_name+0xfc>
c0002b78:	83 cb 03             	or     ebx,0x3
c0002b7b:	eb 03                	jmp    c0002b80 <create_name+0xfc>
c0002b7d:	4e                   	dec    esi
c0002b7e:	74 0c                	je     c0002b8c <create_name+0x108>
c0002b80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b84:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002b8a:	75 f1                	jne    c0002b7d <create_name+0xf9>
c0002b8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002b90:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b95:	83 c0 20             	add    eax,0x20
c0002b98:	ba 20 00 00 00       	mov    edx,0x20
c0002b9d:	31 ed                	xor    ebp,ebp
c0002b9f:	e8 24 f3 ff ff       	call   c0001ec8 <mem_set>
c0002ba4:	b9 08 00 00 00       	mov    ecx,0x8
c0002ba9:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002bae:	8d 47 01             	lea    eax,[edi+0x1]
c0002bb1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002bb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002bb9:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002bbd:	89 c7                	mov    edi,eax
c0002bbf:	85 c0                	test   eax,eax
c0002bc1:	0f 84 25 01 00 00    	je     c0002cec <create_name+0x268>
c0002bc7:	83 f8 20             	cmp    eax,0x20
c0002bca:	74 0f                	je     c0002bdb <create_name+0x157>
c0002bcc:	83 f8 2e             	cmp    eax,0x2e
c0002bcf:	75 13                	jne    c0002be4 <create_name+0x160>
c0002bd1:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002bd5:	0f 84 6a 01 00 00    	je     c0002d45 <create_name+0x2c1>
c0002bdb:	83 cb 03             	or     ebx,0x3
c0002bde:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002be2:	eb ca                	jmp    c0002bae <create_name+0x12a>
c0002be4:	39 cd                	cmp    ebp,ecx
c0002be6:	73 0b                	jae    c0002bf3 <create_name+0x16f>
c0002be8:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002bec:	75 3f                	jne    c0002c2d <create_name+0x1a9>
c0002bee:	e9 52 01 00 00       	jmp    c0002d45 <create_name+0x2c1>
c0002bf3:	83 f9 0b             	cmp    ecx,0xb
c0002bf6:	75 0d                	jne    c0002c05 <create_name+0x181>
c0002bf8:	83 cb 03             	or     ebx,0x3
c0002bfb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002c00:	e9 e7 00 00 00       	jmp    c0002cec <create_name+0x268>
c0002c05:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002c09:	74 0d                	je     c0002c18 <create_name+0x194>
c0002c0b:	83 cb 03             	or     ebx,0x3
c0002c0e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002c12:	0f 87 d4 00 00 00    	ja     c0002cec <create_name+0x268>
c0002c18:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c1d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002c21:	b9 0b 00 00 00       	mov    ecx,0xb
c0002c26:	bd 08 00 00 00       	mov    ebp,0x8
c0002c2b:	eb b1                	jmp    c0002bde <create_name+0x15a>
c0002c2d:	83 f8 7f             	cmp    eax,0x7f
c0002c30:	76 66                	jbe    c0002c98 <create_name+0x214>
c0002c32:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002c36:	89 d9                	mov    ecx,ebx
c0002c38:	83 c9 02             	or     ecx,0x2
c0002c3b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002c3f:	52                   	push   edx
c0002c40:	52                   	push   edx
c0002c41:	68 b5 01 00 00       	push   0x1b5
c0002c46:	50                   	push   eax
c0002c47:	e8 b4 30 00 00       	call   c0005d00 <ff_uni2oem>
c0002c4c:	83 c4 10             	add    esp,0x10
c0002c4f:	89 c7                	mov    edi,eax
c0002c51:	a8 80                	test   al,0x80
c0002c53:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002c57:	74 0c                	je     c0002c65 <create_name+0x1e1>
c0002c59:	83 e7 7f             	and    edi,0x7f
c0002c5c:	0f b6 bf 00 f1 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffd0f00]
c0002c63:	eb 2a                	jmp    c0002c8f <create_name+0x20b>
c0002c65:	0f b7 c0             	movzx  eax,ax
c0002c68:	3d ff 00 00 00       	cmp    eax,0xff
c0002c6d:	76 20                	jbe    c0002c8f <create_name+0x20b>
c0002c6f:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002c72:	39 ea                	cmp    edx,ebp
c0002c74:	77 0a                	ja     c0002c80 <create_name+0x1fc>
c0002c76:	83 cb 03             	or     ebx,0x3
c0002c79:	89 cd                	mov    ebp,ecx
c0002c7b:	e9 5e ff ff ff       	jmp    c0002bde <create_name+0x15a>
c0002c80:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002c84:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002c88:	45                   	inc    ebp
c0002c89:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c8d:	eb 4d                	jmp    c0002cdc <create_name+0x258>
c0002c8f:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c93:	66 85 ff             	test   di,di
c0002c96:	74 19                	je     c0002cb1 <create_name+0x22d>
c0002c98:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002c9c:	0f b7 d7             	movzx  edx,di
c0002c9f:	b8 4b f0 02 c0       	mov    eax,0xc002f04b
c0002ca4:	e8 4d f2 ff ff       	call   c0001ef6 <chk_chr>
c0002ca9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002cad:	85 c0                	test   eax,eax
c0002caf:	74 0a                	je     c0002cbb <create_name+0x237>
c0002cb1:	83 cb 03             	or     ebx,0x3
c0002cb4:	bf 5f 00 00 00       	mov    edi,0x5f
c0002cb9:	eb 21                	jmp    c0002cdc <create_name+0x258>
c0002cbb:	8d 47 bf             	lea    eax,[edi-0x41]
c0002cbe:	66 83 f8 19          	cmp    ax,0x19
c0002cc2:	77 07                	ja     c0002ccb <create_name+0x247>
c0002cc4:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002cc9:	eb 11                	jmp    c0002cdc <create_name+0x258>
c0002ccb:	8d 47 9f             	lea    eax,[edi-0x61]
c0002cce:	66 83 f8 19          	cmp    ax,0x19
c0002cd2:	77 08                	ja     c0002cdc <create_name+0x258>
c0002cd4:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002cd9:	83 ef 20             	sub    edi,0x20
c0002cdc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002ce0:	89 f8                	mov    eax,edi
c0002ce2:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002ce6:	45                   	inc    ebp
c0002ce7:	e9 f2 fe ff ff       	jmp    c0002bde <create_name+0x15a>
c0002cec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002cf0:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002cf4:	75 04                	jne    c0002cfa <create_name+0x276>
c0002cf6:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002cfa:	83 f9 08             	cmp    ecx,0x8
c0002cfd:	75 05                	jne    c0002d04 <create_name+0x280>
c0002cff:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d08:	83 e0 0c             	and    eax,0xc
c0002d0b:	83 f8 0c             	cmp    eax,0xc
c0002d0e:	74 0c                	je     c0002d1c <create_name+0x298>
c0002d10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d14:	83 e0 03             	and    eax,0x3
c0002d17:	83 f8 03             	cmp    eax,0x3
c0002d1a:	75 05                	jne    c0002d21 <create_name+0x29d>
c0002d1c:	83 cb 02             	or     ebx,0x2
c0002d1f:	eb 19                	jmp    c0002d3a <create_name+0x2b6>
c0002d21:	f6 c3 02             	test   bl,0x2
c0002d24:	75 14                	jne    c0002d3a <create_name+0x2b6>
c0002d26:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002d2b:	74 03                	je     c0002d30 <create_name+0x2ac>
c0002d2d:	83 cb 10             	or     ebx,0x10
c0002d30:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002d35:	74 03                	je     c0002d3a <create_name+0x2b6>
c0002d37:	83 cb 08             	or     ebx,0x8
c0002d3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002d3e:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002d41:	31 c0                	xor    eax,eax
c0002d43:	eb 0e                	jmp    c0002d53 <create_name+0x2cf>
c0002d45:	83 f9 0b             	cmp    ecx,0xb
c0002d48:	0f 85 ca fe ff ff    	jne    c0002c18 <create_name+0x194>
c0002d4e:	e9 a5 fe ff ff       	jmp    c0002bf8 <create_name+0x174>
c0002d53:	83 c4 3c             	add    esp,0x3c
c0002d56:	5b                   	pop    ebx
c0002d57:	5e                   	pop    esi
c0002d58:	5f                   	pop    edi
c0002d59:	5d                   	pop    ebp
c0002d5a:	c3                   	ret    

c0002d5b <cmp_lfn>:
c0002d5b:	55                   	push   ebp
c0002d5c:	57                   	push   edi
c0002d5d:	89 d7                	mov    edi,edx
c0002d5f:	56                   	push   esi
c0002d60:	53                   	push   ebx
c0002d61:	83 ec 1c             	sub    esp,0x1c
c0002d64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d68:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002d6b:	e8 17 f1 ff ff       	call   c0001e87 <ld_word>
c0002d70:	66 85 c0             	test   ax,ax
c0002d73:	74 07                	je     c0002d7c <cmp_lfn+0x21>
c0002d75:	31 c0                	xor    eax,eax
c0002d77:	e9 a1 00 00 00       	jmp    c0002e1d <cmp_lfn+0xc2>
c0002d7c:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002d7e:	bd 01 00 00 00       	mov    ebp,0x1
c0002d83:	83 e3 3f             	and    ebx,0x3f
c0002d86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002d8e:	4b                   	dec    ebx
c0002d8f:	6b db 0d             	imul   ebx,ebx,0xd
c0002d92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d96:	0f b6 80 80 f1 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd0e80]
c0002d9d:	01 f8                	add    eax,edi
c0002d9f:	e8 e3 f0 ff ff       	call   c0001e87 <ld_word>
c0002da4:	66 85 ed             	test   bp,bp
c0002da7:	89 c6                	mov    esi,eax
c0002da9:	74 3c                	je     c0002de7 <cmp_lfn+0x8c>
c0002dab:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002db1:	77 c2                	ja     c0002d75 <cmp_lfn+0x1a>
c0002db3:	83 ec 0c             	sub    esp,0xc
c0002db6:	0f b7 c0             	movzx  eax,ax
c0002db9:	50                   	push   eax
c0002dba:	e8 59 30 00 00       	call   c0005e18 <ff_wtoupper>
c0002dbf:	89 c5                	mov    ebp,eax
c0002dc1:	8d 43 01             	lea    eax,[ebx+0x1]
c0002dc4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002dc8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002dcc:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002dd0:	89 04 24             	mov    DWORD PTR [esp],eax
c0002dd3:	e8 40 30 00 00       	call   c0005e18 <ff_wtoupper>
c0002dd8:	83 c4 10             	add    esp,0x10
c0002ddb:	39 c5                	cmp    ebp,eax
c0002ddd:	75 96                	jne    c0002d75 <cmp_lfn+0x1a>
c0002ddf:	89 f5                	mov    ebp,esi
c0002de1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002de5:	eb 0b                	jmp    c0002df2 <cmp_lfn+0x97>
c0002de7:	0f b7 c8             	movzx  ecx,ax
c0002dea:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002df0:	75 83                	jne    c0002d75 <cmp_lfn+0x1a>
c0002df2:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002df6:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002dfb:	75 95                	jne    c0002d92 <cmp_lfn+0x37>
c0002dfd:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002e00:	74 16                	je     c0002e18 <cmp_lfn+0xbd>
c0002e02:	66 85 ed             	test   bp,bp
c0002e05:	74 11                	je     c0002e18 <cmp_lfn+0xbd>
c0002e07:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e0b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002e10:	0f 94 c0             	sete   al
c0002e13:	0f b6 c0             	movzx  eax,al
c0002e16:	eb 05                	jmp    c0002e1d <cmp_lfn+0xc2>
c0002e18:	b8 01 00 00 00       	mov    eax,0x1
c0002e1d:	83 c4 1c             	add    esp,0x1c
c0002e20:	5b                   	pop    ebx
c0002e21:	5e                   	pop    esi
c0002e22:	5f                   	pop    edi
c0002e23:	5d                   	pop    ebp
c0002e24:	c3                   	ret    

c0002e25 <sync_fs>:
c0002e25:	56                   	push   esi
c0002e26:	53                   	push   ebx
c0002e27:	53                   	push   ebx
c0002e28:	89 c3                	mov    ebx,eax
c0002e2a:	e8 5c f5 ff ff       	call   c000238b <sync_window>
c0002e2f:	85 c0                	test   eax,eax
c0002e31:	0f 85 9a 00 00 00    	jne    c0002ed1 <sync_fs+0xac>
c0002e37:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002e3a:	75 7b                	jne    c0002eb7 <sync_fs+0x92>
c0002e3c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002e40:	75 75                	jne    c0002eb7 <sync_fs+0x92>
c0002e42:	b9 00 02 00 00       	mov    ecx,0x200
c0002e47:	8d 73 34             	lea    esi,[ebx+0x34]
c0002e4a:	31 d2                	xor    edx,edx
c0002e4c:	89 f0                	mov    eax,esi
c0002e4e:	e8 75 f0 ff ff       	call   c0001ec8 <mem_set>
c0002e53:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002e59:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002e5e:	e8 49 f0 ff ff       	call   c0001eac <st_word>
c0002e63:	ba 52 52 61 41       	mov    edx,0x41615252
c0002e68:	89 f0                	mov    eax,esi
c0002e6a:	e8 41 f0 ff ff       	call   c0001eb0 <st_dword>
c0002e6f:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002e75:	ba 72 72 41 61       	mov    edx,0x61417272
c0002e7a:	e8 31 f0 ff ff       	call   c0001eb0 <st_dword>
c0002e7f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002e82:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002e88:	e8 23 f0 ff ff       	call   c0001eb0 <st_dword>
c0002e8d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e90:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002e96:	e8 15 f0 ff ff       	call   c0001eb0 <st_dword>
c0002e9b:	6a 01                	push   0x1
c0002e9d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002ea0:	40                   	inc    eax
c0002ea1:	50                   	push   eax
c0002ea2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002ea5:	56                   	push   esi
c0002ea6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002eaa:	50                   	push   eax
c0002eab:	e8 a2 ef ff ff       	call   c0001e52 <disk_write>
c0002eb0:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002eb4:	83 c4 10             	add    esp,0x10
c0002eb7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002ebb:	51                   	push   ecx
c0002ebc:	6a 00                	push   0x0
c0002ebe:	6a 00                	push   0x0
c0002ec0:	50                   	push   eax
c0002ec1:	e8 a2 ef ff ff       	call   c0001e68 <disk_ioctl>
c0002ec6:	83 c4 10             	add    esp,0x10
c0002ec9:	85 c0                	test   eax,eax
c0002ecb:	0f 95 c0             	setne  al
c0002ece:	0f b6 c0             	movzx  eax,al
c0002ed1:	5a                   	pop    edx
c0002ed2:	5b                   	pop    ebx
c0002ed3:	5e                   	pop    esi
c0002ed4:	c3                   	ret    

c0002ed5 <create_partition>:
c0002ed5:	55                   	push   ebp
c0002ed6:	0f b6 c0             	movzx  eax,al
c0002ed9:	57                   	push   edi
c0002eda:	56                   	push   esi
c0002edb:	53                   	push   ebx
c0002edc:	83 ec 40             	sub    esp,0x40
c0002edf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ee3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002ee7:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002eeb:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002eef:	50                   	push   eax
c0002ef0:	6a 01                	push   0x1
c0002ef2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002ef6:	e8 6d ef ff ff       	call   c0001e68 <disk_ioctl>
c0002efb:	83 c4 10             	add    esp,0x10
c0002efe:	85 c0                	test   eax,eax
c0002f00:	0f 85 6a 01 00 00    	jne    c0003070 <create_partition+0x19b>
c0002f06:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002f0a:	b9 05 00 00 00       	mov    ecx,0x5
c0002f0f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002f13:	be 08 00 00 00       	mov    esi,0x8
c0002f18:	89 f0                	mov    eax,esi
c0002f1a:	31 d2                	xor    edx,edx
c0002f1c:	0f b6 d8             	movzx  ebx,al
c0002f1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002f23:	f7 f3                	div    ebx
c0002f25:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002f2a:	76 0a                	jbe    c0002f36 <create_partition+0x61>
c0002f2c:	d1 e6                	shl    esi,1
c0002f2e:	49                   	dec    ecx
c0002f2f:	75 e7                	jne    c0002f18 <create_partition+0x43>
c0002f31:	be ff ff ff ff       	mov    esi,0xffffffff
c0002f36:	b9 00 02 00 00       	mov    ecx,0x200
c0002f3b:	31 d2                	xor    edx,edx
c0002f3d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002f41:	e8 82 ef ff ff       	call   c0001ec8 <mem_set>
c0002f46:	b9 64 00 00 00       	mov    ecx,0x64
c0002f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002f4f:	31 d2                	xor    edx,edx
c0002f51:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f59:	f7 f1                	div    ecx
c0002f5b:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002f60:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002f64:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002f68:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002f6e:	89 f0                	mov    eax,esi
c0002f70:	0f b6 c0             	movzx  eax,al
c0002f73:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002f77:	85 c9                	test   ecx,ecx
c0002f79:	75 34                	jne    c0002faf <create_partition+0xda>
c0002f7b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002f7f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002f84:	05 fe 01 00 00       	add    eax,0x1fe
c0002f89:	e8 1e ef ff ff       	call   c0001eac <st_word>
c0002f8e:	6a 01                	push   0x1
c0002f90:	6a 00                	push   0x0
c0002f92:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002f96:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002f9a:	e8 b3 ee ff ff       	call   c0001e52 <disk_write>
c0002f9f:	83 c4 10             	add    esp,0x10
c0002fa2:	85 c0                	test   eax,eax
c0002fa4:	0f 95 c0             	setne  al
c0002fa7:	0f b6 c0             	movzx  eax,al
c0002faa:	e9 c6 00 00 00       	jmp    c0003075 <create_partition+0x1a0>
c0002faf:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002fb3:	76 c6                	jbe    c0002f7b <create_partition+0xa6>
c0002fb5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002fb9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002fbd:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002fc0:	83 fe 64             	cmp    esi,0x64
c0002fc3:	77 0d                	ja     c0002fd2 <create_partition+0xfd>
c0002fc5:	74 07                	je     c0002fce <create_partition+0xf9>
c0002fc7:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002fcc:	eb 04                	jmp    c0002fd2 <create_partition+0xfd>
c0002fce:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002fd2:	31 c0                	xor    eax,eax
c0002fd4:	89 f2                	mov    edx,esi
c0002fd6:	01 ca                	add    edx,ecx
c0002fd8:	0f 92 c0             	setb   al
c0002fdb:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002fdf:	77 04                	ja     c0002fe5 <create_partition+0x110>
c0002fe1:	85 c0                	test   eax,eax
c0002fe3:	74 08                	je     c0002fed <create_partition+0x118>
c0002fe5:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002fe9:	29 ce                	sub    esi,ecx
c0002feb:	eb 04                	jmp    c0002ff1 <create_partition+0x11c>
c0002fed:	85 f6                	test   esi,esi
c0002fef:	74 8a                	je     c0002f7b <create_partition+0xa6>
c0002ff1:	89 ca                	mov    edx,ecx
c0002ff3:	89 d8                	mov    eax,ebx
c0002ff5:	bf 3f 00 00 00       	mov    edi,0x3f
c0002ffa:	e8 b1 ee ff ff       	call   c0001eb0 <st_dword>
c0002fff:	8d 43 04             	lea    eax,[ebx+0x4]
c0003002:	89 f2                	mov    edx,esi
c0003004:	83 c3 10             	add    ebx,0x10
c0003007:	e8 a4 ee ff ff       	call   c0001eb0 <st_dword>
c000300c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003010:	31 d2                	xor    edx,edx
c0003012:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0003015:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0003019:	89 c8                	mov    eax,ecx
c000301b:	01 f1                	add    ecx,esi
c000301d:	f7 f7                	div    edi
c000301f:	89 d5                	mov    ebp,edx
c0003021:	31 d2                	xor    edx,edx
c0003023:	45                   	inc    ebp
c0003024:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003028:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c000302b:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c000302e:	89 c2                	mov    edx,eax
c0003030:	8d 41 ff             	lea    eax,[ecx-0x1]
c0003033:	c1 ea 02             	shr    edx,0x2
c0003036:	83 e2 c0             	and    edx,0xffffffc0
c0003039:	09 ea                	or     edx,ebp
c000303b:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c000303e:	31 d2                	xor    edx,edx
c0003040:	f7 f7                	div    edi
c0003042:	89 d6                	mov    esi,edx
c0003044:	31 d2                	xor    edx,edx
c0003046:	46                   	inc    esi
c0003047:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c000304b:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c000304e:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0003051:	89 c7                	mov    edi,eax
c0003053:	c1 ef 02             	shr    edi,0x2
c0003056:	83 e7 c0             	and    edi,0xffffffc0
c0003059:	09 fe                	or     esi,edi
c000305b:	89 f2                	mov    edx,esi
c000305d:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0003060:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0003065:	0f 85 0c ff ff ff    	jne    c0002f77 <create_partition+0xa2>
c000306b:	e9 0b ff ff ff       	jmp    c0002f7b <create_partition+0xa6>
c0003070:	b8 01 00 00 00       	mov    eax,0x1
c0003075:	83 c4 3c             	add    esp,0x3c
c0003078:	5b                   	pop    ebx
c0003079:	5e                   	pop    esi
c000307a:	5f                   	pop    edi
c000307b:	5d                   	pop    ebp
c000307c:	c3                   	ret    

c000307d <get_fileinfo>:
c000307d:	55                   	push   ebp
c000307e:	57                   	push   edi
c000307f:	56                   	push   esi
c0003080:	53                   	push   ebx
c0003081:	83 ec 1c             	sub    esp,0x1c
c0003084:	8b 30                	mov    esi,DWORD PTR [eax]
c0003086:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c000308a:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000308e:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003092:	0f 84 d3 01 00 00    	je     c000326b <get_fileinfo+0x1ee>
c0003098:	89 d3                	mov    ebx,edx
c000309a:	89 c6                	mov    esi,eax
c000309c:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00030a0:	74 72                	je     c0003114 <get_fileinfo+0x97>
c00030a2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00030aa:	31 ed                	xor    ebp,ebp
c00030ac:	31 ff                	xor    edi,edi
c00030ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00030b2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00030b6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00030b9:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c00030bd:	89 c2                	mov    edx,eax
c00030bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030c3:	85 c0                	test   eax,eax
c00030c5:	74 41                	je     c0003108 <get_fileinfo+0x8b>
c00030c7:	0f b7 c5             	movzx  eax,bp
c00030ca:	85 c0                	test   eax,eax
c00030cc:	75 0d                	jne    c00030db <get_fileinfo+0x5e>
c00030ce:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c00030d4:	66 81 f9 ff 07       	cmp    cx,0x7ff
c00030d9:	76 22                	jbe    c00030fd <get_fileinfo+0x80>
c00030db:	c1 e0 10             	shl    eax,0x10
c00030de:	b9 ff 00 00 00       	mov    ecx,0xff
c00030e3:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00030e7:	29 f9                	sub    ecx,edi
c00030e9:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c00030ed:	e8 f3 ee ff ff       	call   c0001fe5 <put_utf>
c00030f2:	0f b6 c0             	movzx  eax,al
c00030f5:	85 c0                	test   eax,eax
c00030f7:	74 0d                	je     c0003106 <get_fileinfo+0x89>
c00030f9:	01 c7                	add    edi,eax
c00030fb:	31 d2                	xor    edx,edx
c00030fd:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c0003102:	89 d5                	mov    ebp,edx
c0003104:	eb a8                	jmp    c00030ae <get_fileinfo+0x31>
c0003106:	31 ff                	xor    edi,edi
c0003108:	66 85 ed             	test   bp,bp
c000310b:	74 02                	je     c000310f <get_fileinfo+0x92>
c000310d:	31 ff                	xor    edi,edi
c000310f:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003114:	31 ff                	xor    edi,edi
c0003116:	31 c9                	xor    ecx,ecx
c0003118:	83 f9 0a             	cmp    ecx,0xa
c000311b:	0f 87 ac 00 00 00    	ja     c00031cd <get_fileinfo+0x150>
c0003121:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003124:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003127:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000312b:	89 c2                	mov    edx,eax
c000312d:	83 f8 20             	cmp    eax,0x20
c0003130:	0f 84 90 00 00 00    	je     c00031c6 <get_fileinfo+0x149>
c0003136:	83 f8 05             	cmp    eax,0x5
c0003139:	75 05                	jne    c0003140 <get_fileinfo+0xc3>
c000313b:	ba e5 00 00 00       	mov    edx,0xe5
c0003140:	83 ff 0b             	cmp    edi,0xb
c0003143:	77 0b                	ja     c0003150 <get_fileinfo+0xd3>
c0003145:	83 fd 09             	cmp    ebp,0x9
c0003148:	75 06                	jne    c0003150 <get_fileinfo+0xd3>
c000314a:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c000314f:	47                   	inc    edi
c0003150:	0f b7 c2             	movzx  eax,dx
c0003153:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003157:	e8 ab ed ff ff       	call   c0001f07 <dbc_1st>
c000315c:	85 c0                	test   eax,eax
c000315e:	74 2f                	je     c000318f <get_fileinfo+0x112>
c0003160:	83 fd 08             	cmp    ebp,0x8
c0003163:	74 2a                	je     c000318f <get_fileinfo+0x112>
c0003165:	83 fd 0b             	cmp    ebp,0xb
c0003168:	74 25                	je     c000318f <get_fileinfo+0x112>
c000316a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000316d:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0003171:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003175:	e8 90 ed ff ff       	call   c0001f0a <dbc_2nd>
c000317a:	85 c0                	test   eax,eax
c000317c:	74 11                	je     c000318f <get_fileinfo+0x112>
c000317e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003182:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0003187:	c1 e0 08             	shl    eax,0x8
c000318a:	8d 69 02             	lea    ebp,[ecx+0x2]
c000318d:	09 c2                	or     edx,eax
c000318f:	0f b7 d2             	movzx  edx,dx
c0003192:	50                   	push   eax
c0003193:	50                   	push   eax
c0003194:	68 b5 01 00 00       	push   0x1b5
c0003199:	52                   	push   edx
c000319a:	e8 01 2c 00 00       	call   c0005da0 <ff_oem2uni>
c000319f:	83 c4 10             	add    esp,0x10
c00031a2:	0f b7 c0             	movzx  eax,ax
c00031a5:	85 c0                	test   eax,eax
c00031a7:	75 04                	jne    c00031ad <get_fileinfo+0x130>
c00031a9:	31 ff                	xor    edi,edi
c00031ab:	eb 20                	jmp    c00031cd <get_fileinfo+0x150>
c00031ad:	b9 0c 00 00 00       	mov    ecx,0xc
c00031b2:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c00031b6:	29 f9                	sub    ecx,edi
c00031b8:	e8 28 ee ff ff       	call   c0001fe5 <put_utf>
c00031bd:	0f b6 c0             	movzx  eax,al
c00031c0:	85 c0                	test   eax,eax
c00031c2:	74 e5                	je     c00031a9 <get_fileinfo+0x12c>
c00031c4:	01 c7                	add    edi,eax
c00031c6:	89 e9                	mov    ecx,ebp
c00031c8:	e9 4b ff ff ff       	jmp    c0003118 <get_fileinfo+0x9b>
c00031cd:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c00031d2:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c00031d6:	75 5f                	jne    c0003237 <get_fileinfo+0x1ba>
c00031d8:	85 ff                	test   edi,edi
c00031da:	75 0b                	jne    c00031e7 <get_fileinfo+0x16a>
c00031dc:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c00031e0:	ba 01 00 00 00       	mov    edx,0x1
c00031e5:	eb 3e                	jmp    c0003225 <get_fileinfo+0x1a8>
c00031e7:	bf 08 00 00 00       	mov    edi,0x8
c00031ec:	31 d2                	xor    edx,edx
c00031ee:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c00031f4:	84 c0                	test   al,al
c00031f6:	74 2d                	je     c0003225 <get_fileinfo+0x1a8>
c00031f8:	66 83 f8 2e          	cmp    ax,0x2e
c00031fc:	74 1b                	je     c0003219 <get_fileinfo+0x19c>
c00031fe:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003201:	66 83 f9 19          	cmp    cx,0x19
c0003205:	77 17                	ja     c000321e <get_fileinfo+0x1a1>
c0003207:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000320a:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000320d:	21 f9                	and    ecx,edi
c000320f:	80 e1 18             	and    cl,0x18
c0003212:	74 0a                	je     c000321e <get_fileinfo+0x1a1>
c0003214:	83 c0 20             	add    eax,0x20
c0003217:	eb 05                	jmp    c000321e <get_fileinfo+0x1a1>
c0003219:	bf 10 00 00 00       	mov    edi,0x10
c000321e:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003222:	42                   	inc    edx
c0003223:	eb c9                	jmp    c00031ee <get_fileinfo+0x171>
c0003225:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000322a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000322d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003231:	75 04                	jne    c0003237 <get_fileinfo+0x1ba>
c0003233:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003237:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000323a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000323d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003240:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003243:	83 c0 1c             	add    eax,0x1c
c0003246:	e8 49 ec ff ff       	call   c0001e94 <ld_dword>
c000324b:	89 03                	mov    DWORD PTR [ebx],eax
c000324d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003250:	83 c0 16             	add    eax,0x16
c0003253:	e8 2f ec ff ff       	call   c0001e87 <ld_word>
c0003258:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c000325c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000325f:	83 c0 18             	add    eax,0x18
c0003262:	e8 20 ec ff ff       	call   c0001e87 <ld_word>
c0003267:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000326b:	83 c4 1c             	add    esp,0x1c
c000326e:	5b                   	pop    ebx
c000326f:	5e                   	pop    esi
c0003270:	5f                   	pop    edi
c0003271:	5d                   	pop    ebp
c0003272:	c3                   	ret    

c0003273 <ld_clust.isra.0>:
c0003273:	56                   	push   esi
c0003274:	89 c6                	mov    esi,eax
c0003276:	53                   	push   ebx
c0003277:	8d 42 1a             	lea    eax,[edx+0x1a]
c000327a:	89 d3                	mov    ebx,edx
c000327c:	e8 06 ec ff ff       	call   c0001e87 <ld_word>
c0003281:	0f b7 c8             	movzx  ecx,ax
c0003284:	89 f0                	mov    eax,esi
c0003286:	3c 03                	cmp    al,0x3
c0003288:	75 0d                	jne    c0003297 <ld_clust.isra.0+0x24>
c000328a:	8d 43 14             	lea    eax,[ebx+0x14]
c000328d:	e8 f5 eb ff ff       	call   c0001e87 <ld_word>
c0003292:	c1 e0 10             	shl    eax,0x10
c0003295:	09 c1                	or     ecx,eax
c0003297:	89 c8                	mov    eax,ecx
c0003299:	5b                   	pop    ebx
c000329a:	5e                   	pop    esi
c000329b:	c3                   	ret    

c000329c <st_clust.isra.1>:
c000329c:	56                   	push   esi
c000329d:	89 c6                	mov    esi,eax
c000329f:	53                   	push   ebx
c00032a0:	89 d3                	mov    ebx,edx
c00032a2:	0f b7 d1             	movzx  edx,cx
c00032a5:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00032a8:	e8 ff eb ff ff       	call   c0001eac <st_word>
c00032ad:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00032b0:	75 0f                	jne    c00032c1 <st_clust.isra.1+0x25>
c00032b2:	c1 e9 10             	shr    ecx,0x10
c00032b5:	8d 43 14             	lea    eax,[ebx+0x14]
c00032b8:	89 ca                	mov    edx,ecx
c00032ba:	5b                   	pop    ebx
c00032bb:	5e                   	pop    esi
c00032bc:	e9 eb eb ff ff       	jmp    c0001eac <st_word>
c00032c1:	5b                   	pop    ebx
c00032c2:	5e                   	pop    esi
c00032c3:	c3                   	ret    

c00032c4 <get_fat.isra.2>:
c00032c4:	b9 01 00 00 00       	mov    ecx,0x1
c00032c9:	83 fa 01             	cmp    edx,0x1
c00032cc:	0f 86 f3 00 00 00    	jbe    c00033c5 <get_fat.isra.2+0x101>
c00032d2:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c00032d5:	0f 83 ea 00 00 00    	jae    c00033c5 <get_fat.isra.2+0x101>
c00032db:	55                   	push   ebp
c00032dc:	57                   	push   edi
c00032dd:	89 c7                	mov    edi,eax
c00032df:	56                   	push   esi
c00032e0:	89 d6                	mov    esi,edx
c00032e2:	53                   	push   ebx
c00032e3:	83 ec 0c             	sub    esp,0xc
c00032e6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00032e9:	83 f8 02             	cmp    eax,0x2
c00032ec:	74 78                	je     c0003366 <get_fat.isra.2+0xa2>
c00032ee:	83 f8 03             	cmp    eax,0x3
c00032f1:	0f 84 96 00 00 00    	je     c000338d <get_fat.isra.2+0xc9>
c00032f7:	48                   	dec    eax
c00032f8:	0f 85 bd 00 00 00    	jne    c00033bb <get_fat.isra.2+0xf7>
c00032fe:	89 d3                	mov    ebx,edx
c0003300:	89 f8                	mov    eax,edi
c0003302:	d1 eb                	shr    ebx,1
c0003304:	01 d3                	add    ebx,edx
c0003306:	89 da                	mov    edx,ebx
c0003308:	c1 ea 09             	shr    edx,0x9
c000330b:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000330e:	e8 db f0 ff ff       	call   c00023ee <move_window>
c0003313:	85 c0                	test   eax,eax
c0003315:	74 08                	je     c000331f <get_fat.isra.2+0x5b>
c0003317:	83 c9 ff             	or     ecx,0xffffffff
c000331a:	e9 9c 00 00 00       	jmp    c00033bb <get_fat.isra.2+0xf7>
c000331f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003322:	89 f8                	mov    eax,edi
c0003324:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000332a:	89 ea                	mov    edx,ebp
c000332c:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003330:	c1 ea 09             	shr    edx,0x9
c0003333:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003336:	e8 b3 f0 ff ff       	call   c00023ee <move_window>
c000333b:	85 c0                	test   eax,eax
c000333d:	75 d8                	jne    c0003317 <get_fat.isra.2+0x53>
c000333f:	0f b6 c3             	movzx  eax,bl
c0003342:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003348:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c000334d:	c1 e3 08             	shl    ebx,0x8
c0003350:	09 c3                	or     ebx,eax
c0003352:	89 d9                	mov    ecx,ebx
c0003354:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000335a:	83 e6 01             	and    esi,0x1
c000335d:	74 5c                	je     c00033bb <get_fat.isra.2+0xf7>
c000335f:	89 d9                	mov    ecx,ebx
c0003361:	c1 e9 04             	shr    ecx,0x4
c0003364:	eb 55                	jmp    c00033bb <get_fat.isra.2+0xf7>
c0003366:	c1 ea 08             	shr    edx,0x8
c0003369:	89 f8                	mov    eax,edi
c000336b:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000336e:	e8 7b f0 ff ff       	call   c00023ee <move_window>
c0003373:	85 c0                	test   eax,eax
c0003375:	75 a0                	jne    c0003317 <get_fat.isra.2+0x53>
c0003377:	01 f6                	add    esi,esi
c0003379:	81 e6 fe 01 00 00    	and    esi,0x1fe
c000337f:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c0003383:	e8 ff ea ff ff       	call   c0001e87 <ld_word>
c0003388:	0f b7 c8             	movzx  ecx,ax
c000338b:	eb 2e                	jmp    c00033bb <get_fat.isra.2+0xf7>
c000338d:	c1 ea 07             	shr    edx,0x7
c0003390:	89 f8                	mov    eax,edi
c0003392:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003395:	e8 54 f0 ff ff       	call   c00023ee <move_window>
c000339a:	85 c0                	test   eax,eax
c000339c:	0f 85 75 ff ff ff    	jne    c0003317 <get_fat.isra.2+0x53>
c00033a2:	c1 e6 02             	shl    esi,0x2
c00033a5:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00033ab:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00033af:	e8 e0 ea ff ff       	call   c0001e94 <ld_dword>
c00033b4:	25 ff ff ff 0f       	and    eax,0xfffffff
c00033b9:	89 c1                	mov    ecx,eax
c00033bb:	83 c4 0c             	add    esp,0xc
c00033be:	89 c8                	mov    eax,ecx
c00033c0:	5b                   	pop    ebx
c00033c1:	5e                   	pop    esi
c00033c2:	5f                   	pop    edi
c00033c3:	5d                   	pop    ebp
c00033c4:	c3                   	ret    
c00033c5:	89 c8                	mov    eax,ecx
c00033c7:	c3                   	ret    

c00033c8 <dir_sdi>:
c00033c8:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c00033ce:	0f 87 b6 00 00 00    	ja     c000348a <dir_sdi+0xc2>
c00033d4:	55                   	push   ebp
c00033d5:	57                   	push   edi
c00033d6:	56                   	push   esi
c00033d7:	53                   	push   ebx
c00033d8:	89 d3                	mov    ebx,edx
c00033da:	83 ec 1c             	sub    esp,0x1c
c00033dd:	f6 c2 1f             	test   dl,0x1f
c00033e0:	74 0a                	je     c00033ec <dir_sdi+0x24>
c00033e2:	b8 02 00 00 00       	mov    eax,0x2
c00033e7:	e9 96 00 00 00       	jmp    c0003482 <dir_sdi+0xba>
c00033ec:	89 c6                	mov    esi,eax
c00033ee:	8b 38                	mov    edi,DWORD PTR [eax]
c00033f0:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c00033f3:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00033f6:	85 c9                	test   ecx,ecx
c00033f8:	75 23                	jne    c000341d <dir_sdi+0x55>
c00033fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00033fd:	76 07                	jbe    c0003406 <dir_sdi+0x3e>
c00033ff:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003402:	85 c0                	test   eax,eax
c0003404:	75 15                	jne    c000341b <dir_sdi+0x53>
c0003406:	89 da                	mov    edx,ebx
c0003408:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000340c:	c1 ea 05             	shr    edx,0x5
c000340f:	39 c2                	cmp    edx,eax
c0003411:	73 cf                	jae    c00033e2 <dir_sdi+0x1a>
c0003413:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003416:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003419:	eb 3d                	jmp    c0003458 <dir_sdi+0x90>
c000341b:	89 c1                	mov    ecx,eax
c000341d:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003421:	c1 e5 09             	shl    ebp,0x9
c0003424:	89 ca                	mov    edx,ecx
c0003426:	39 eb                	cmp    ebx,ebp
c0003428:	72 1c                	jb     c0003446 <dir_sdi+0x7e>
c000342a:	8b 06                	mov    eax,DWORD PTR [esi]
c000342c:	e8 93 fe ff ff       	call   c00032c4 <get_fat.isra.2>
c0003431:	89 c1                	mov    ecx,eax
c0003433:	83 f8 ff             	cmp    eax,0xffffffff
c0003436:	74 45                	je     c000347d <dir_sdi+0xb5>
c0003438:	83 f8 01             	cmp    eax,0x1
c000343b:	76 a5                	jbe    c00033e2 <dir_sdi+0x1a>
c000343d:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003440:	76 a0                	jbe    c00033e2 <dir_sdi+0x1a>
c0003442:	29 eb                	sub    ebx,ebp
c0003444:	eb de                	jmp    c0003424 <dir_sdi+0x5c>
c0003446:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000344a:	89 f8                	mov    eax,edi
c000344c:	e8 8d ec ff ff       	call   c00020de <clst2sect>
c0003451:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003455:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003458:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c000345b:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c000345e:	85 d2                	test   edx,edx
c0003460:	74 80                	je     c00033e2 <dir_sdi+0x1a>
c0003462:	89 d8                	mov    eax,ebx
c0003464:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000346a:	c1 e8 09             	shr    eax,0x9
c000346d:	01 d0                	add    eax,edx
c000346f:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003472:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c0003476:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003479:	31 c0                	xor    eax,eax
c000347b:	eb 05                	jmp    c0003482 <dir_sdi+0xba>
c000347d:	b8 01 00 00 00       	mov    eax,0x1
c0003482:	83 c4 1c             	add    esp,0x1c
c0003485:	5b                   	pop    ebx
c0003486:	5e                   	pop    esi
c0003487:	5f                   	pop    edi
c0003488:	5d                   	pop    ebp
c0003489:	c3                   	ret    
c000348a:	b8 02 00 00 00       	mov    eax,0x2
c000348f:	c3                   	ret    

c0003490 <create_chain>:
c0003490:	55                   	push   ebp
c0003491:	89 c5                	mov    ebp,eax
c0003493:	57                   	push   edi
c0003494:	89 d7                	mov    edi,edx
c0003496:	56                   	push   esi
c0003497:	53                   	push   ebx
c0003498:	83 ec 1c             	sub    esp,0x1c
c000349b:	85 d2                	test   edx,edx
c000349d:	8b 30                	mov    esi,DWORD PTR [eax]
c000349f:	75 0e                	jne    c00034af <create_chain+0x1f>
c00034a1:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00034a4:	85 c9                	test   ecx,ecx
c00034a6:	74 34                	je     c00034dc <create_chain+0x4c>
c00034a8:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00034ab:	77 34                	ja     c00034e1 <create_chain+0x51>
c00034ad:	eb 2d                	jmp    c00034dc <create_chain+0x4c>
c00034af:	89 f0                	mov    eax,esi
c00034b1:	e8 0e fe ff ff       	call   c00032c4 <get_fat.isra.2>
c00034b6:	89 c3                	mov    ebx,eax
c00034b8:	83 f8 01             	cmp    eax,0x1
c00034bb:	77 0a                	ja     c00034c7 <create_chain+0x37>
c00034bd:	bb 01 00 00 00       	mov    ebx,0x1
c00034c2:	e9 fe 00 00 00       	jmp    c00035c5 <create_chain+0x135>
c00034c7:	83 f8 ff             	cmp    eax,0xffffffff
c00034ca:	0f 84 f2 00 00 00    	je     c00035c2 <create_chain+0x132>
c00034d0:	89 f9                	mov    ecx,edi
c00034d2:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c00034d5:	76 0a                	jbe    c00034e1 <create_chain+0x51>
c00034d7:	e9 e9 00 00 00       	jmp    c00035c5 <create_chain+0x135>
c00034dc:	b9 01 00 00 00       	mov    ecx,0x1
c00034e1:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c00034e5:	75 07                	jne    c00034ee <create_chain+0x5e>
c00034e7:	31 db                	xor    ebx,ebx
c00034e9:	e9 d7 00 00 00       	jmp    c00035c5 <create_chain+0x135>
c00034ee:	39 f9                	cmp    ecx,edi
c00034f0:	75 46                	jne    c0003538 <create_chain+0xa8>
c00034f2:	8d 59 01             	lea    ebx,[ecx+0x1]
c00034f5:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c00034f8:	77 05                	ja     c00034ff <create_chain+0x6f>
c00034fa:	bb 02 00 00 00       	mov    ebx,0x2
c00034ff:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003503:	89 da                	mov    edx,ebx
c0003505:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003508:	e8 b7 fd ff ff       	call   c00032c4 <get_fat.isra.2>
c000350d:	83 f8 01             	cmp    eax,0x1
c0003510:	74 ab                	je     c00034bd <create_chain+0x2d>
c0003512:	83 f8 ff             	cmp    eax,0xffffffff
c0003515:	0f 84 a7 00 00 00    	je     c00035c2 <create_chain+0x132>
c000351b:	85 c0                	test   eax,eax
c000351d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003521:	74 11                	je     c0003534 <create_chain+0xa4>
c0003523:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003526:	83 f8 01             	cmp    eax,0x1
c0003529:	76 0d                	jbe    c0003538 <create_chain+0xa8>
c000352b:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c000352e:	73 08                	jae    c0003538 <create_chain+0xa8>
c0003530:	89 c1                	mov    ecx,eax
c0003532:	eb 04                	jmp    c0003538 <create_chain+0xa8>
c0003534:	85 db                	test   ebx,ebx
c0003536:	75 3d                	jne    c0003575 <create_chain+0xe5>
c0003538:	89 cb                	mov    ebx,ecx
c000353a:	43                   	inc    ebx
c000353b:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c000353e:	77 0a                	ja     c000354a <create_chain+0xba>
c0003540:	83 f9 01             	cmp    ecx,0x1
c0003543:	76 a2                	jbe    c00034e7 <create_chain+0x57>
c0003545:	bb 02 00 00 00       	mov    ebx,0x2
c000354a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000354e:	89 da                	mov    edx,ebx
c0003550:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003553:	e8 6c fd ff ff       	call   c00032c4 <get_fat.isra.2>
c0003558:	85 c0                	test   eax,eax
c000355a:	74 19                	je     c0003575 <create_chain+0xe5>
c000355c:	83 f8 01             	cmp    eax,0x1
c000355f:	0f 84 58 ff ff ff    	je     c00034bd <create_chain+0x2d>
c0003565:	40                   	inc    eax
c0003566:	74 5a                	je     c00035c2 <create_chain+0x132>
c0003568:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000356c:	39 cb                	cmp    ebx,ecx
c000356e:	75 ca                	jne    c000353a <create_chain+0xaa>
c0003570:	e9 72 ff ff ff       	jmp    c00034e7 <create_chain+0x57>
c0003575:	83 c9 ff             	or     ecx,0xffffffff
c0003578:	89 da                	mov    edx,ebx
c000357a:	89 f0                	mov    eax,esi
c000357c:	e8 b1 f2 ff ff       	call   c0002832 <put_fat>
c0003581:	85 c0                	test   eax,eax
c0003583:	75 36                	jne    c00035bb <create_chain+0x12b>
c0003585:	85 ff                	test   edi,edi
c0003587:	75 16                	jne    c000359f <create_chain+0x10f>
c0003589:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000358c:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c000358f:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c0003592:	8d 57 fe             	lea    edx,[edi-0x2]
c0003595:	39 d0                	cmp    eax,edx
c0003597:	77 17                	ja     c00035b0 <create_chain+0x120>
c0003599:	48                   	dec    eax
c000359a:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000359d:	eb 11                	jmp    c00035b0 <create_chain+0x120>
c000359f:	89 d9                	mov    ecx,ebx
c00035a1:	89 fa                	mov    edx,edi
c00035a3:	89 f0                	mov    eax,esi
c00035a5:	e8 88 f2 ff ff       	call   c0002832 <put_fat>
c00035aa:	85 c0                	test   eax,eax
c00035ac:	74 db                	je     c0003589 <create_chain+0xf9>
c00035ae:	eb 0b                	jmp    c00035bb <create_chain+0x12b>
c00035b0:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c00035b3:	83 c8 01             	or     eax,0x1
c00035b6:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00035b9:	eb 0a                	jmp    c00035c5 <create_chain+0x135>
c00035bb:	48                   	dec    eax
c00035bc:	0f 85 fb fe ff ff    	jne    c00034bd <create_chain+0x2d>
c00035c2:	83 cb ff             	or     ebx,0xffffffff
c00035c5:	83 c4 1c             	add    esp,0x1c
c00035c8:	89 d8                	mov    eax,ebx
c00035ca:	5b                   	pop    ebx
c00035cb:	5e                   	pop    esi
c00035cc:	5f                   	pop    edi
c00035cd:	5d                   	pop    ebp
c00035ce:	c3                   	ret    

c00035cf <remove_chain>:
c00035cf:	55                   	push   ebp
c00035d0:	57                   	push   edi
c00035d1:	56                   	push   esi
c00035d2:	89 d6                	mov    esi,edx
c00035d4:	53                   	push   ebx
c00035d5:	83 ec 0c             	sub    esp,0xc
c00035d8:	83 fa 01             	cmp    edx,0x1
c00035db:	8b 18                	mov    ebx,DWORD PTR [eax]
c00035dd:	76 6a                	jbe    c0003649 <remove_chain+0x7a>
c00035df:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c00035e2:	76 65                	jbe    c0003649 <remove_chain+0x7a>
c00035e4:	89 c5                	mov    ebp,eax
c00035e6:	89 ca                	mov    edx,ecx
c00035e8:	85 c9                	test   ecx,ecx
c00035ea:	74 0e                	je     c00035fa <remove_chain+0x2b>
c00035ec:	83 c9 ff             	or     ecx,0xffffffff
c00035ef:	89 d8                	mov    eax,ebx
c00035f1:	e8 3c f2 ff ff       	call   c0002832 <put_fat>
c00035f6:	85 c0                	test   eax,eax
c00035f8:	75 5b                	jne    c0003655 <remove_chain+0x86>
c00035fa:	89 f2                	mov    edx,esi
c00035fc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00035ff:	e8 c0 fc ff ff       	call   c00032c4 <get_fat.isra.2>
c0003604:	89 c7                	mov    edi,eax
c0003606:	85 c0                	test   eax,eax
c0003608:	75 04                	jne    c000360e <remove_chain+0x3f>
c000360a:	31 c0                	xor    eax,eax
c000360c:	eb 47                	jmp    c0003655 <remove_chain+0x86>
c000360e:	83 f8 01             	cmp    eax,0x1
c0003611:	74 36                	je     c0003649 <remove_chain+0x7a>
c0003613:	83 f8 ff             	cmp    eax,0xffffffff
c0003616:	74 38                	je     c0003650 <remove_chain+0x81>
c0003618:	31 c9                	xor    ecx,ecx
c000361a:	89 f2                	mov    edx,esi
c000361c:	89 d8                	mov    eax,ebx
c000361e:	e8 0f f2 ff ff       	call   c0002832 <put_fat>
c0003623:	85 c0                	test   eax,eax
c0003625:	75 2e                	jne    c0003655 <remove_chain+0x86>
c0003627:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000362a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000362d:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003630:	39 c8                	cmp    eax,ecx
c0003632:	73 0d                	jae    c0003641 <remove_chain+0x72>
c0003634:	40                   	inc    eax
c0003635:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003638:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000363b:	83 c8 01             	or     eax,0x1
c000363e:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003641:	89 fe                	mov    esi,edi
c0003643:	39 fa                	cmp    edx,edi
c0003645:	77 b3                	ja     c00035fa <remove_chain+0x2b>
c0003647:	eb c1                	jmp    c000360a <remove_chain+0x3b>
c0003649:	b8 02 00 00 00       	mov    eax,0x2
c000364e:	eb 05                	jmp    c0003655 <remove_chain+0x86>
c0003650:	b8 01 00 00 00       	mov    eax,0x1
c0003655:	83 c4 0c             	add    esp,0xc
c0003658:	5b                   	pop    ebx
c0003659:	5e                   	pop    esi
c000365a:	5f                   	pop    edi
c000365b:	5d                   	pop    ebp
c000365c:	c3                   	ret    

c000365d <dir_next>:
c000365d:	55                   	push   ebp
c000365e:	57                   	push   edi
c000365f:	56                   	push   esi
c0003660:	53                   	push   ebx
c0003661:	83 ec 1c             	sub    esp,0x1c
c0003664:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003667:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003669:	83 c7 20             	add    edi,0x20
c000366c:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c0003672:	76 07                	jbe    c000367b <dir_next+0x1e>
c0003674:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000367b:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c000367e:	b9 04 00 00 00       	mov    ecx,0x4
c0003683:	85 f6                	test   esi,esi
c0003685:	0f 84 cd 00 00 00    	je     c0003758 <dir_next+0xfb>
c000368b:	89 c3                	mov    ebx,eax
c000368d:	89 d1                	mov    ecx,edx
c000368f:	89 f8                	mov    eax,edi
c0003691:	25 ff 01 00 00       	and    eax,0x1ff
c0003696:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000369a:	0f 85 a8 00 00 00    	jne    c0003748 <dir_next+0xeb>
c00036a0:	46                   	inc    esi
c00036a1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00036a4:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00036a7:	85 d2                	test   edx,edx
c00036a9:	75 22                	jne    c00036cd <dir_next+0x70>
c00036ab:	89 fa                	mov    edx,edi
c00036ad:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00036b1:	c1 ea 05             	shr    edx,0x5
c00036b4:	39 c2                	cmp    edx,eax
c00036b6:	0f 82 8c 00 00 00    	jb     c0003748 <dir_next+0xeb>
c00036bc:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00036c3:	b9 04 00 00 00       	mov    ecx,0x4
c00036c8:	e9 8b 00 00 00       	jmp    c0003758 <dir_next+0xfb>
c00036cd:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00036d1:	89 fe                	mov    esi,edi
c00036d3:	48                   	dec    eax
c00036d4:	c1 ee 09             	shr    esi,0x9
c00036d7:	85 f0                	test   eax,esi
c00036d9:	75 6d                	jne    c0003748 <dir_next+0xeb>
c00036db:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00036df:	89 e8                	mov    eax,ebp
c00036e1:	e8 de fb ff ff       	call   c00032c4 <get_fat.isra.2>
c00036e6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036ea:	89 c6                	mov    esi,eax
c00036ec:	83 f8 01             	cmp    eax,0x1
c00036ef:	77 07                	ja     c00036f8 <dir_next+0x9b>
c00036f1:	b9 02 00 00 00       	mov    ecx,0x2
c00036f6:	eb 60                	jmp    c0003758 <dir_next+0xfb>
c00036f8:	83 f8 ff             	cmp    eax,0xffffffff
c00036fb:	75 07                	jne    c0003704 <dir_next+0xa7>
c00036fd:	b9 01 00 00 00       	mov    ecx,0x1
c0003702:	eb 54                	jmp    c0003758 <dir_next+0xfb>
c0003704:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003707:	77 30                	ja     c0003739 <dir_next+0xdc>
c0003709:	85 c9                	test   ecx,ecx
c000370b:	74 af                	je     c00036bc <dir_next+0x5f>
c000370d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003710:	89 d8                	mov    eax,ebx
c0003712:	e8 79 fd ff ff       	call   c0003490 <create_chain>
c0003717:	b9 07 00 00 00       	mov    ecx,0x7
c000371c:	89 c6                	mov    esi,eax
c000371e:	85 c0                	test   eax,eax
c0003720:	74 36                	je     c0003758 <dir_next+0xfb>
c0003722:	83 f8 01             	cmp    eax,0x1
c0003725:	74 ca                	je     c00036f1 <dir_next+0x94>
c0003727:	83 f8 ff             	cmp    eax,0xffffffff
c000372a:	74 d1                	je     c00036fd <dir_next+0xa0>
c000372c:	89 c2                	mov    edx,eax
c000372e:	89 e8                	mov    eax,ebp
c0003730:	e8 54 f2 ff ff       	call   c0002989 <dir_clear>
c0003735:	85 c0                	test   eax,eax
c0003737:	75 c4                	jne    c00036fd <dir_next+0xa0>
c0003739:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000373c:	89 f2                	mov    edx,esi
c000373e:	89 e8                	mov    eax,ebp
c0003740:	e8 99 e9 ff ff       	call   c00020de <clst2sect>
c0003745:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003748:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000374c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000374f:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003753:	31 c9                	xor    ecx,ecx
c0003755:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003758:	83 c4 1c             	add    esp,0x1c
c000375b:	89 c8                	mov    eax,ecx
c000375d:	5b                   	pop    ebx
c000375e:	5e                   	pop    esi
c000375f:	5f                   	pop    edi
c0003760:	5d                   	pop    ebp
c0003761:	c3                   	ret    

c0003762 <dir_alloc>:
c0003762:	55                   	push   ebp
c0003763:	89 c5                	mov    ebp,eax
c0003765:	57                   	push   edi
c0003766:	89 d7                	mov    edi,edx
c0003768:	56                   	push   esi
c0003769:	31 d2                	xor    edx,edx
c000376b:	53                   	push   ebx
c000376c:	83 ec 0c             	sub    esp,0xc
c000376f:	8b 30                	mov    esi,DWORD PTR [eax]
c0003771:	e8 52 fc ff ff       	call   c00033c8 <dir_sdi>
c0003776:	85 c0                	test   eax,eax
c0003778:	75 3b                	jne    c00037b5 <dir_alloc+0x53>
c000377a:	31 db                	xor    ebx,ebx
c000377c:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000377f:	89 f0                	mov    eax,esi
c0003781:	e8 68 ec ff ff       	call   c00023ee <move_window>
c0003786:	85 c0                	test   eax,eax
c0003788:	75 2b                	jne    c00037b5 <dir_alloc+0x53>
c000378a:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c000378d:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003790:	85 d2                	test   edx,edx
c0003792:	74 08                	je     c000379c <dir_alloc+0x3a>
c0003794:	81 fa e5 00 00 00    	cmp    edx,0xe5
c000379a:	75 07                	jne    c00037a3 <dir_alloc+0x41>
c000379c:	43                   	inc    ebx
c000379d:	39 fb                	cmp    ebx,edi
c000379f:	75 04                	jne    c00037a5 <dir_alloc+0x43>
c00037a1:	eb 1c                	jmp    c00037bf <dir_alloc+0x5d>
c00037a3:	31 db                	xor    ebx,ebx
c00037a5:	ba 01 00 00 00       	mov    edx,0x1
c00037aa:	89 e8                	mov    eax,ebp
c00037ac:	e8 ac fe ff ff       	call   c000365d <dir_next>
c00037b1:	85 c0                	test   eax,eax
c00037b3:	74 c7                	je     c000377c <dir_alloc+0x1a>
c00037b5:	83 f8 04             	cmp    eax,0x4
c00037b8:	75 05                	jne    c00037bf <dir_alloc+0x5d>
c00037ba:	b8 07 00 00 00       	mov    eax,0x7
c00037bf:	83 c4 0c             	add    esp,0xc
c00037c2:	5b                   	pop    ebx
c00037c3:	5e                   	pop    esi
c00037c4:	5f                   	pop    edi
c00037c5:	5d                   	pop    ebp
c00037c6:	c3                   	ret    

c00037c7 <dir_read>:
c00037c7:	55                   	push   ebp
c00037c8:	57                   	push   edi
c00037c9:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037ce:	56                   	push   esi
c00037cf:	be 04 00 00 00       	mov    esi,0x4
c00037d4:	53                   	push   ebx
c00037d5:	89 c3                	mov    ebx,eax
c00037d7:	83 ec 1c             	sub    esp,0x1c
c00037da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00037de:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037e0:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00037e5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037e8:	85 d2                	test   edx,edx
c00037ea:	0f 84 e3 00 00 00    	je     c00038d3 <dir_read+0x10c>
c00037f0:	89 e8                	mov    eax,ebp
c00037f2:	e8 f7 eb ff ff       	call   c00023ee <move_window>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	85 c0                	test   eax,eax
c00037fb:	0f 85 dd 00 00 00    	jne    c00038de <dir_read+0x117>
c0003801:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003804:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003807:	88 04 24             	mov    BYTE PTR [esp],al
c000380a:	85 c0                	test   eax,eax
c000380c:	0f 84 c7 00 00 00    	je     c00038d9 <dir_read+0x112>
c0003812:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003815:	83 e1 3f             	and    ecx,0x3f
c0003818:	83 f8 2e             	cmp    eax,0x2e
c000381b:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000381e:	0f 84 95 00 00 00    	je     c00038b9 <dir_read+0xf2>
c0003824:	3d e5 00 00 00       	cmp    eax,0xe5
c0003829:	0f 84 8a 00 00 00    	je     c00038b9 <dir_read+0xf2>
c000382f:	0f b6 c9             	movzx  ecx,cl
c0003832:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003836:	83 e1 df             	and    ecx,0xffffffdf
c0003839:	83 f9 08             	cmp    ecx,0x8
c000383c:	0f 94 c1             	sete   cl
c000383f:	0f b6 c9             	movzx  ecx,cl
c0003842:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003846:	75 71                	jne    c00038b9 <dir_read+0xf2>
c0003848:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c000384d:	75 4a                	jne    c0003899 <dir_read+0xd2>
c000384f:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c0003853:	74 16                	je     c000386b <dir_read+0xa4>
c0003855:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003858:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c000385f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003863:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003866:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003869:	eb 0e                	jmp    c0003879 <dir_read+0xb2>
c000386b:	89 f9                	mov    ecx,edi
c000386d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003872:	0f b6 c9             	movzx  ecx,cl
c0003875:	39 c1                	cmp    ecx,eax
c0003877:	75 45                	jne    c00038be <dir_read+0xf7>
c0003879:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000387d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003882:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c0003885:	75 37                	jne    c00038be <dir_read+0xf7>
c0003887:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000388a:	e8 6c e8 ff ff       	call   c00020fb <pick_lfn>
c000388f:	85 c0                	test   eax,eax
c0003891:	74 2b                	je     c00038be <dir_read+0xf7>
c0003893:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0003896:	4f                   	dec    edi
c0003897:	eb 25                	jmp    c00038be <dir_read+0xf7>
c0003899:	89 f8                	mov    eax,edi
c000389b:	84 c0                	test   al,al
c000389d:	75 11                	jne    c00038b0 <dir_read+0xe9>
c000389f:	89 d0                	mov    eax,edx
c00038a1:	e8 32 ea ff ff       	call   c00022d8 <sum_sfn>
c00038a6:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00038aa:	75 04                	jne    c00038b0 <dir_read+0xe9>
c00038ac:	31 f6                	xor    esi,esi
c00038ae:	eb 35                	jmp    c00038e5 <dir_read+0x11e>
c00038b0:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038b7:	eb 2c                	jmp    c00038e5 <dir_read+0x11e>
c00038b9:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038be:	31 d2                	xor    edx,edx
c00038c0:	89 d8                	mov    eax,ebx
c00038c2:	e8 96 fd ff ff       	call   c000365d <dir_next>
c00038c7:	89 c6                	mov    esi,eax
c00038c9:	85 c0                	test   eax,eax
c00038cb:	0f 84 14 ff ff ff    	je     c00037e5 <dir_read+0x1e>
c00038d1:	eb 0b                	jmp    c00038de <dir_read+0x117>
c00038d3:	85 f6                	test   esi,esi
c00038d5:	74 d5                	je     c00038ac <dir_read+0xe5>
c00038d7:	eb 05                	jmp    c00038de <dir_read+0x117>
c00038d9:	be 04 00 00 00       	mov    esi,0x4
c00038de:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00038e5:	83 c4 1c             	add    esp,0x1c
c00038e8:	89 f0                	mov    eax,esi
c00038ea:	5b                   	pop    ebx
c00038eb:	5e                   	pop    esi
c00038ec:	5f                   	pop    edi
c00038ed:	5d                   	pop    ebp
c00038ee:	c3                   	ret    

c00038ef <dir_remove>:
c00038ef:	57                   	push   edi
c00038f0:	56                   	push   esi
c00038f1:	53                   	push   ebx
c00038f2:	89 c3                	mov    ebx,eax
c00038f4:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00038f7:	8b 30                	mov    esi,DWORD PTR [eax]
c00038f9:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00038fc:	83 fa ff             	cmp    edx,0xffffffff
c00038ff:	74 09                	je     c000390a <dir_remove+0x1b>
c0003901:	e8 c2 fa ff ff       	call   c00033c8 <dir_sdi>
c0003906:	85 c0                	test   eax,eax
c0003908:	75 34                	jne    c000393e <dir_remove+0x4f>
c000390a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000390d:	89 f0                	mov    eax,esi
c000390f:	e8 da ea ff ff       	call   c00023ee <move_window>
c0003914:	85 c0                	test   eax,eax
c0003916:	75 1c                	jne    c0003934 <dir_remove+0x45>
c0003918:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000391b:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000391e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003922:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003925:	73 17                	jae    c000393e <dir_remove+0x4f>
c0003927:	31 d2                	xor    edx,edx
c0003929:	89 d8                	mov    eax,ebx
c000392b:	e8 2d fd ff ff       	call   c000365d <dir_next>
c0003930:	85 c0                	test   eax,eax
c0003932:	74 d6                	je     c000390a <dir_remove+0x1b>
c0003934:	83 f8 04             	cmp    eax,0x4
c0003937:	75 05                	jne    c000393e <dir_remove+0x4f>
c0003939:	b8 02 00 00 00       	mov    eax,0x2
c000393e:	5b                   	pop    ebx
c000393f:	5e                   	pop    esi
c0003940:	5f                   	pop    edi
c0003941:	c3                   	ret    

c0003942 <dir_find>:
c0003942:	55                   	push   ebp
c0003943:	31 d2                	xor    edx,edx
c0003945:	57                   	push   edi
c0003946:	56                   	push   esi
c0003947:	53                   	push   ebx
c0003948:	89 c3                	mov    ebx,eax
c000394a:	83 ec 1c             	sub    esp,0x1c
c000394d:	8b 00                	mov    eax,DWORD PTR [eax]
c000394f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003953:	89 d8                	mov    eax,ebx
c0003955:	e8 6e fa ff ff       	call   c00033c8 <dir_sdi>
c000395a:	89 c6                	mov    esi,eax
c000395c:	85 c0                	test   eax,eax
c000395e:	0f 85 1d 01 00 00    	jne    c0003a81 <dir_find+0x13f>
c0003964:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000396b:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0003970:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003975:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003978:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000397c:	e8 6d ea ff ff       	call   c00023ee <move_window>
c0003981:	89 c6                	mov    esi,eax
c0003983:	85 c0                	test   eax,eax
c0003985:	0f 85 f6 00 00 00    	jne    c0003a81 <dir_find+0x13f>
c000398b:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c000398e:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c0003992:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0003996:	85 c9                	test   ecx,ecx
c0003998:	0f 84 de 00 00 00    	je     c0003a7c <dir_find+0x13a>
c000399e:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00039a1:	89 d0                	mov    eax,edx
c00039a3:	83 e0 3f             	and    eax,0x3f
c00039a6:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c00039ac:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00039af:	0f 84 a6 00 00 00    	je     c0003a5b <dir_find+0x119>
c00039b5:	80 e2 08             	and    dl,0x8
c00039b8:	0f b6 c0             	movzx  eax,al
c00039bb:	74 0b                	je     c00039c8 <dir_find+0x86>
c00039bd:	83 f8 0f             	cmp    eax,0xf
c00039c0:	0f 85 95 00 00 00    	jne    c0003a5b <dir_find+0x119>
c00039c6:	eb 05                	jmp    c00039cd <dir_find+0x8b>
c00039c8:	83 f8 0f             	cmp    eax,0xf
c00039cb:	75 62                	jne    c0003a2f <dir_find+0xed>
c00039cd:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c00039d1:	0f 85 90 00 00 00    	jne    c0003a67 <dir_find+0x125>
c00039d7:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c00039dc:	74 17                	je     c00039f5 <dir_find+0xb3>
c00039de:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c00039e1:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c00039e9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00039ed:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00039f0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039f3:	eb 13                	jmp    c0003a08 <dir_find+0xc6>
c00039f5:	89 f8                	mov    eax,edi
c00039f7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039fc:	0f b6 d0             	movzx  edx,al
c00039ff:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003a04:	39 c2                	cmp    edx,eax
c0003a06:	75 5f                	jne    c0003a67 <dir_find+0x125>
c0003a08:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003a0c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003a11:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003a14:	75 51                	jne    c0003a67 <dir_find+0x125>
c0003a16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a1a:	89 ea                	mov    edx,ebp
c0003a1c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003a1f:	e8 37 f3 ff ff       	call   c0002d5b <cmp_lfn>
c0003a24:	85 c0                	test   eax,eax
c0003a26:	74 3f                	je     c0003a67 <dir_find+0x125>
c0003a28:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0003a2c:	4f                   	dec    edi
c0003a2d:	eb 38                	jmp    c0003a67 <dir_find+0x125>
c0003a2f:	89 f8                	mov    eax,edi
c0003a31:	84 c0                	test   al,al
c0003a33:	75 0d                	jne    c0003a42 <dir_find+0x100>
c0003a35:	89 e8                	mov    eax,ebp
c0003a37:	e8 9c e8 ff ff       	call   c00022d8 <sum_sfn>
c0003a3c:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003a40:	74 3f                	je     c0003a81 <dir_find+0x13f>
c0003a42:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003a46:	75 13                	jne    c0003a5b <dir_find+0x119>
c0003a48:	8d 53 20             	lea    edx,[ebx+0x20]
c0003a4b:	b9 0b 00 00 00       	mov    ecx,0xb
c0003a50:	89 e8                	mov    eax,ebp
c0003a52:	e8 7c e4 ff ff       	call   c0001ed3 <mem_cmp>
c0003a57:	85 c0                	test   eax,eax
c0003a59:	74 26                	je     c0003a81 <dir_find+0x13f>
c0003a5b:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003a62:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003a67:	31 d2                	xor    edx,edx
c0003a69:	89 d8                	mov    eax,ebx
c0003a6b:	e8 ed fb ff ff       	call   c000365d <dir_next>
c0003a70:	89 c6                	mov    esi,eax
c0003a72:	85 c0                	test   eax,eax
c0003a74:	0f 84 fb fe ff ff    	je     c0003975 <dir_find+0x33>
c0003a7a:	eb 05                	jmp    c0003a81 <dir_find+0x13f>
c0003a7c:	be 04 00 00 00       	mov    esi,0x4
c0003a81:	83 c4 1c             	add    esp,0x1c
c0003a84:	89 f0                	mov    eax,esi
c0003a86:	5b                   	pop    ebx
c0003a87:	5e                   	pop    esi
c0003a88:	5f                   	pop    edi
c0003a89:	5d                   	pop    ebp
c0003a8a:	c3                   	ret    

c0003a8b <follow_path>:
c0003a8b:	56                   	push   esi
c0003a8c:	53                   	push   ebx
c0003a8d:	89 c3                	mov    ebx,eax
c0003a8f:	83 ec 14             	sub    esp,0x14
c0003a92:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a96:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a9c:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003a9f:	83 fa 5c             	cmp    edx,0x5c
c0003aa2:	75 07                	jne    c0003aab <follow_path+0x20>
c0003aa4:	40                   	inc    eax
c0003aa5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003aa9:	eb ed                	jmp    c0003a98 <follow_path+0xd>
c0003aab:	83 fa 2f             	cmp    edx,0x2f
c0003aae:	74 f4                	je     c0003aa4 <follow_path+0x19>
c0003ab0:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003ab7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003aba:	77 3e                	ja     c0003afa <follow_path+0x6f>
c0003abc:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003ac0:	31 d2                	xor    edx,edx
c0003ac2:	89 d8                	mov    eax,ebx
c0003ac4:	e8 ff f8 ff ff       	call   c00033c8 <dir_sdi>
c0003ac9:	eb 4f                	jmp    c0003b1a <follow_path+0x8f>
c0003acb:	89 d8                	mov    eax,ebx
c0003acd:	e8 70 fe ff ff       	call   c0003942 <dir_find>
c0003ad2:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003ad5:	85 c0                	test   eax,eax
c0003ad7:	75 32                	jne    c0003b0b <follow_path+0x80>
c0003ad9:	80 e2 04             	and    dl,0x4
c0003adc:	75 3c                	jne    c0003b1a <follow_path+0x8f>
c0003ade:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003ae2:	74 31                	je     c0003b15 <follow_path+0x8a>
c0003ae4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003ae7:	25 ff 01 00 00       	and    eax,0x1ff
c0003aec:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003af0:	8a 06                	mov    al,BYTE PTR [esi]
c0003af2:	e8 7c f7 ff ff       	call   c0003273 <ld_clust.isra.0>
c0003af7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003afa:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003afe:	89 d8                	mov    eax,ebx
c0003b00:	e8 7f ef ff ff       	call   c0002a84 <create_name>
c0003b05:	85 c0                	test   eax,eax
c0003b07:	74 c2                	je     c0003acb <follow_path+0x40>
c0003b09:	eb 0f                	jmp    c0003b1a <follow_path+0x8f>
c0003b0b:	83 f8 04             	cmp    eax,0x4
c0003b0e:	75 0a                	jne    c0003b1a <follow_path+0x8f>
c0003b10:	80 e2 04             	and    dl,0x4
c0003b13:	75 05                	jne    c0003b1a <follow_path+0x8f>
c0003b15:	b8 05 00 00 00       	mov    eax,0x5
c0003b1a:	83 c4 14             	add    esp,0x14
c0003b1d:	5b                   	pop    ebx
c0003b1e:	5e                   	pop    esi
c0003b1f:	c3                   	ret    

c0003b20 <dir_register>:
c0003b20:	55                   	push   ebp
c0003b21:	57                   	push   edi
c0003b22:	56                   	push   esi
c0003b23:	be 06 00 00 00       	mov    esi,0x6
c0003b28:	53                   	push   ebx
c0003b29:	83 ec 2c             	sub    esp,0x2c
c0003b2c:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003b2f:	80 e2 a0             	and    dl,0xa0
c0003b32:	0f 85 66 01 00 00    	jne    c0003c9e <dir_register+0x17e>
c0003b38:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b3a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003b42:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003b45:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003b49:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003b4e:	74 06                	je     c0003b56 <dir_register+0x36>
c0003b50:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003b54:	eb ef                	jmp    c0003b45 <dir_register+0x25>
c0003b56:	89 c3                	mov    ebx,eax
c0003b58:	b9 0c 00 00 00       	mov    ecx,0xc
c0003b5d:	8d 40 20             	lea    eax,[eax+0x20]
c0003b60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003b64:	89 c2                	mov    edx,eax
c0003b66:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003b6a:	e8 44 e3 ff ff       	call   c0001eb3 <mem_cpy>
c0003b6f:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003b74:	74 48                	je     c0003bbe <dir_register+0x9e>
c0003b76:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003b7a:	bd 01 00 00 00       	mov    ebp,0x1
c0003b7f:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003b82:	55                   	push   ebp
c0003b83:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003b87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b8b:	e8 86 e6 ff ff       	call   c0002216 <gen_numname>
c0003b90:	58                   	pop    eax
c0003b91:	89 d8                	mov    eax,ebx
c0003b93:	e8 aa fd ff ff       	call   c0003942 <dir_find>
c0003b98:	89 c6                	mov    esi,eax
c0003b9a:	85 c0                	test   eax,eax
c0003b9c:	75 10                	jne    c0003bae <dir_register+0x8e>
c0003b9e:	45                   	inc    ebp
c0003b9f:	83 fd 64             	cmp    ebp,0x64
c0003ba2:	75 db                	jne    c0003b7f <dir_register+0x5f>
c0003ba4:	be 07 00 00 00       	mov    esi,0x7
c0003ba9:	e9 f0 00 00 00       	jmp    c0003c9e <dir_register+0x17e>
c0003bae:	83 f8 04             	cmp    eax,0x4
c0003bb1:	0f 85 e7 00 00 00    	jne    c0003c9e <dir_register+0x17e>
c0003bb7:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003bbb:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003bbe:	bd 01 00 00 00       	mov    ebp,0x1
c0003bc3:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003bc8:	74 13                	je     c0003bdd <dir_register+0xbd>
c0003bca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003bce:	b9 0d 00 00 00       	mov    ecx,0xd
c0003bd3:	83 c0 0c             	add    eax,0xc
c0003bd6:	31 d2                	xor    edx,edx
c0003bd8:	f7 f1                	div    ecx
c0003bda:	8d 68 01             	lea    ebp,[eax+0x1]
c0003bdd:	89 ea                	mov    edx,ebp
c0003bdf:	89 d8                	mov    eax,ebx
c0003be1:	e8 7c fb ff ff       	call   c0003762 <dir_alloc>
c0003be6:	89 c6                	mov    esi,eax
c0003be8:	85 c0                	test   eax,eax
c0003bea:	0f 85 ae 00 00 00    	jne    c0003c9e <dir_register+0x17e>
c0003bf0:	4d                   	dec    ebp
c0003bf1:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003bf5:	74 67                	je     c0003c5e <dir_register+0x13e>
c0003bf7:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003bfa:	89 e8                	mov    eax,ebp
c0003bfc:	c1 e0 05             	shl    eax,0x5
c0003bff:	29 c2                	sub    edx,eax
c0003c01:	89 d8                	mov    eax,ebx
c0003c03:	e8 c0 f7 ff ff       	call   c00033c8 <dir_sdi>
c0003c08:	89 c6                	mov    esi,eax
c0003c0a:	85 c0                	test   eax,eax
c0003c0c:	0f 85 8c 00 00 00    	jne    c0003c9e <dir_register+0x17e>
c0003c12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003c16:	e8 bd e6 ff ff       	call   c00022d8 <sum_sfn>
c0003c1b:	0f b6 e8             	movzx  ebp,al
c0003c1e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	e8 c6 e7 ff ff       	call   c00023ee <move_window>
c0003c28:	89 c6                	mov    esi,eax
c0003c2a:	85 c0                	test   eax,eax
c0003c2c:	75 70                	jne    c0003c9e <dir_register+0x17e>
c0003c2e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003c33:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003c36:	83 ec 0c             	sub    esp,0xc
c0003c39:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003c3c:	55                   	push   ebp
c0003c3d:	e8 39 e5 ff ff       	call   c000217b <put_lfn>
c0003c42:	31 d2                	xor    edx,edx
c0003c44:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003c48:	89 d8                	mov    eax,ebx
c0003c4a:	e8 0e fa ff ff       	call   c000365d <dir_next>
c0003c4f:	83 c4 10             	add    esp,0x10
c0003c52:	89 c6                	mov    esi,eax
c0003c54:	85 c0                	test   eax,eax
c0003c56:	75 46                	jne    c0003c9e <dir_register+0x17e>
c0003c58:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003c5c:	75 c0                	jne    c0003c1e <dir_register+0xfe>
c0003c5e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003c61:	89 f8                	mov    eax,edi
c0003c63:	e8 86 e7 ff ff       	call   c00023ee <move_window>
c0003c68:	89 c6                	mov    esi,eax
c0003c6a:	85 c0                	test   eax,eax
c0003c6c:	75 30                	jne    c0003c9e <dir_register+0x17e>
c0003c6e:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c71:	b9 20 00 00 00       	mov    ecx,0x20
c0003c76:	31 d2                	xor    edx,edx
c0003c78:	e8 4b e2 ff ff       	call   c0001ec8 <mem_set>
c0003c7d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c80:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003c84:	b9 0b 00 00 00       	mov    ecx,0xb
c0003c89:	e8 25 e2 ff ff       	call   c0001eb3 <mem_cpy>
c0003c8e:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003c91:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003c94:	83 e0 18             	and    eax,0x18
c0003c97:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003c9a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003c9e:	83 c4 2c             	add    esp,0x2c
c0003ca1:	89 f0                	mov    eax,esi
c0003ca3:	5b                   	pop    ebx
c0003ca4:	5e                   	pop    esi
c0003ca5:	5f                   	pop    edi
c0003ca6:	5d                   	pop    ebp
c0003ca7:	c3                   	ret    

c0003ca8 <f_mount>:
c0003ca8:	53                   	push   ebx
c0003ca9:	83 ec 18             	sub    esp,0x18
c0003cac:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003cb0:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003cb4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003cb8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003cbc:	e8 37 e6 ff ff       	call   c00022f8 <get_ldnumber>
c0003cc1:	89 c2                	mov    edx,eax
c0003cc3:	b8 0b 00 00 00       	mov    eax,0xb
c0003cc8:	85 d2                	test   edx,edx
c0003cca:	78 39                	js     c0003d05 <f_mount+0x5d>
c0003ccc:	8b 04 95 80 6c 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc9380]
c0003cd3:	85 c0                	test   eax,eax
c0003cd5:	74 03                	je     c0003cda <f_mount+0x32>
c0003cd7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003cda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003cde:	85 c0                	test   eax,eax
c0003ce0:	74 03                	je     c0003ce5 <f_mount+0x3d>
c0003ce2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003ce5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003ce9:	89 04 95 80 6c 03 c0 	mov    DWORD PTR [edx*4-0x3ffc9380],eax
c0003cf0:	31 c0                	xor    eax,eax
c0003cf2:	84 db                	test   bl,bl
c0003cf4:	74 0f                	je     c0003d05 <f_mount+0x5d>
c0003cf6:	31 c9                	xor    ecx,ecx
c0003cf8:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003cfc:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003d00:	e8 3c e8 ff ff       	call   c0002541 <mount_volume>
c0003d05:	83 c4 18             	add    esp,0x18
c0003d08:	5b                   	pop    ebx
c0003d09:	c3                   	ret    

c0003d0a <f_open>:
c0003d0a:	55                   	push   ebp
c0003d0b:	b8 09 00 00 00       	mov    eax,0x9
c0003d10:	57                   	push   edi
c0003d11:	56                   	push   esi
c0003d12:	53                   	push   ebx
c0003d13:	83 ec 5c             	sub    esp,0x5c
c0003d16:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003d1a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003d1e:	85 db                	test   ebx,ebx
c0003d20:	0f 84 9f 02 00 00    	je     c0003fc5 <f_open+0x2bb>
c0003d26:	89 fd                	mov    ebp,edi
c0003d28:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003d2c:	83 e5 3f             	and    ebp,0x3f
c0003d2f:	89 e8                	mov    eax,ebp
c0003d31:	89 ee                	mov    esi,ebp
c0003d33:	0f b6 c8             	movzx  ecx,al
c0003d36:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003d3a:	e8 02 e8 ff ff       	call   c0002541 <mount_volume>
c0003d3f:	85 c0                	test   eax,eax
c0003d41:	0f 85 78 02 00 00    	jne    c0003fbf <f_open+0x2b5>
c0003d47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d4b:	83 ec 0c             	sub    esp,0xc
c0003d4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d52:	68 00 02 00 00       	push   0x200
c0003d57:	e8 74 1f 00 00       	call   c0005cd0 <ff_memalloc>
c0003d5c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003d60:	83 c4 10             	add    esp,0x10
c0003d63:	b8 11 00 00 00       	mov    eax,0x11
c0003d68:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003d6d:	0f 84 52 02 00 00    	je     c0003fc5 <f_open+0x2bb>
c0003d73:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d77:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003d7b:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003d7f:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003d82:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d86:	e8 00 fd ff ff       	call   c0003a8b <follow_path>
c0003d8b:	85 c0                	test   eax,eax
c0003d8d:	75 0c                	jne    c0003d9b <f_open+0x91>
c0003d8f:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003d94:	74 05                	je     c0003d9b <f_open+0x91>
c0003d96:	b8 06 00 00 00       	mov    eax,0x6
c0003d9b:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003da1:	0f 84 d5 00 00 00    	je     c0003e7c <f_open+0x172>
c0003da7:	85 c0                	test   eax,eax
c0003da9:	74 21                	je     c0003dcc <f_open+0xc2>
c0003dab:	83 f8 04             	cmp    eax,0x4
c0003dae:	0f 85 f0 01 00 00    	jne    c0003fa4 <f_open+0x29a>
c0003db4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003db8:	e8 63 fd ff ff       	call   c0003b20 <dir_register>
c0003dbd:	85 c0                	test   eax,eax
c0003dbf:	0f 85 df 01 00 00    	jne    c0003fa4 <f_open+0x29a>
c0003dc5:	83 cd 08             	or     ebp,0x8
c0003dc8:	89 ee                	mov    esi,ebp
c0003dca:	eb 2c                	jmp    c0003df8 <f_open+0xee>
c0003dcc:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003dd0:	b8 07 00 00 00       	mov    eax,0x7
c0003dd5:	80 e2 11             	and    dl,0x11
c0003dd8:	0f 85 c6 01 00 00    	jne    c0003fa4 <f_open+0x29a>
c0003dde:	b8 08 00 00 00       	mov    eax,0x8
c0003de3:	f7 c7 04 00 00 00    	test   edi,0x4
c0003de9:	0f 85 b5 01 00 00    	jne    c0003fa4 <f_open+0x29a>
c0003def:	83 e7 08             	and    edi,0x8
c0003df2:	0f 84 b1 00 00 00    	je     c0003ea9 <f_open+0x19f>
c0003df8:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e00:	89 ea                	mov    edx,ebp
c0003e02:	8a 00                	mov    al,BYTE PTR [eax]
c0003e04:	e8 6a f4 ff ff       	call   c0003273 <ld_clust.isra.0>
c0003e09:	ba 00 00 21 50       	mov    edx,0x50210000
c0003e0e:	89 c7                	mov    edi,eax
c0003e10:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003e13:	e8 98 e0 ff ff       	call   c0001eb0 <st_dword>
c0003e18:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003e1c:	31 c9                	xor    ecx,ecx
c0003e1e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003e22:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e26:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003e2a:	e8 6d f4 ff ff       	call   c000329c <st_clust.isra.1>
c0003e2f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003e33:	31 d2                	xor    edx,edx
c0003e35:	83 c0 1c             	add    eax,0x1c
c0003e38:	e8 73 e0 ff ff       	call   c0001eb0 <st_dword>
c0003e3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e41:	85 ff                	test   edi,edi
c0003e43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003e47:	74 60                	je     c0003ea9 <f_open+0x19f>
c0003e49:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e4d:	31 c9                	xor    ecx,ecx
c0003e4f:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003e52:	89 fa                	mov    edx,edi
c0003e54:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003e58:	e8 72 f7 ff ff       	call   c00035cf <remove_chain>
c0003e5d:	85 c0                	test   eax,eax
c0003e5f:	0f 85 3f 01 00 00    	jne    c0003fa4 <f_open+0x29a>
c0003e65:	89 ea                	mov    edx,ebp
c0003e67:	4f                   	dec    edi
c0003e68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e6c:	e8 7d e5 ff ff       	call   c00023ee <move_window>
c0003e71:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003e75:	85 c0                	test   eax,eax
c0003e77:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003e7a:	eb 27                	jmp    c0003ea3 <f_open+0x199>
c0003e7c:	85 c0                	test   eax,eax
c0003e7e:	0f 85 20 01 00 00    	jne    c0003fa4 <f_open+0x29a>
c0003e84:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003e88:	b8 04 00 00 00       	mov    eax,0x4
c0003e8d:	f6 c2 10             	test   dl,0x10
c0003e90:	0f 85 0e 01 00 00    	jne    c0003fa4 <f_open+0x29a>
c0003e96:	83 e7 02             	and    edi,0x2
c0003e99:	74 0e                	je     c0003ea9 <f_open+0x19f>
c0003e9b:	b8 07 00 00 00       	mov    eax,0x7
c0003ea0:	80 e2 01             	and    dl,0x1
c0003ea3:	0f 85 fb 00 00 00    	jne    c0003fa4 <f_open+0x29a>
c0003ea9:	f7 c6 08 00 00 00    	test   esi,0x8
c0003eaf:	74 03                	je     c0003eb4 <f_open+0x1aa>
c0003eb1:	83 ce 40             	or     esi,0x40
c0003eb4:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003eb8:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ebc:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003ebf:	89 fa                	mov    edx,edi
c0003ec1:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003ec4:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003ec7:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003eca:	e8 a4 f3 ff ff       	call   c0003273 <ld_clust.isra.0>
c0003ecf:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003ed2:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003ed5:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003ed8:	e8 b7 df ff ff       	call   c0001e94 <ld_dword>
c0003edd:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003edf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003ee2:	31 d2                	xor    edx,edx
c0003ee4:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003ee8:	b9 00 02 00 00       	mov    ecx,0x200
c0003eed:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003ef1:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003ef5:	89 f0                	mov    eax,esi
c0003ef7:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003efe:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003f01:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003f08:	89 f8                	mov    eax,edi
c0003f0a:	e8 b9 df ff ff       	call   c0001ec8 <mem_set>
c0003f0f:	83 e6 20             	and    esi,0x20
c0003f12:	75 07                	jne    c0003f1b <f_open+0x211>
c0003f14:	31 c0                	xor    eax,eax
c0003f16:	e9 89 00 00 00       	jmp    c0003fa4 <f_open+0x29a>
c0003f1b:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0003f1e:	85 ed                	test   ebp,ebp
c0003f20:	74 f2                	je     c0003f14 <f_open+0x20a>
c0003f22:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c0003f25:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f29:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003f2c:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003f30:	c1 e6 09             	shl    esi,0x9
c0003f33:	39 ee                	cmp    esi,ebp
c0003f35:	73 1c                	jae    c0003f53 <f_open+0x249>
c0003f37:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f39:	29 f5                	sub    ebp,esi
c0003f3b:	e8 84 f3 ff ff       	call   c00032c4 <get_fat.isra.2>
c0003f40:	89 c2                	mov    edx,eax
c0003f42:	83 f8 01             	cmp    eax,0x1
c0003f45:	76 10                	jbe    c0003f57 <f_open+0x24d>
c0003f47:	83 f8 ff             	cmp    eax,0xffffffff
c0003f4a:	75 e7                	jne    c0003f33 <f_open+0x229>
c0003f4c:	b8 01 00 00 00       	mov    eax,0x1
c0003f51:	eb 09                	jmp    c0003f5c <f_open+0x252>
c0003f53:	31 c0                	xor    eax,eax
c0003f55:	eb 05                	jmp    c0003f5c <f_open+0x252>
c0003f57:	b8 02 00 00 00       	mov    eax,0x2
c0003f5c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003f5f:	85 c0                	test   eax,eax
c0003f61:	75 41                	jne    c0003fa4 <f_open+0x29a>
c0003f63:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003f69:	74 a9                	je     c0003f14 <f_open+0x20a>
c0003f6b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003f6f:	89 f0                	mov    eax,esi
c0003f71:	e8 68 e1 ff ff       	call   c00020de <clst2sect>
c0003f76:	89 c2                	mov    edx,eax
c0003f78:	b8 02 00 00 00       	mov    eax,0x2
c0003f7d:	85 d2                	test   edx,edx
c0003f7f:	74 23                	je     c0003fa4 <f_open+0x29a>
c0003f81:	c1 ed 09             	shr    ebp,0x9
c0003f84:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003f88:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003f8b:	6a 01                	push   0x1
c0003f8d:	50                   	push   eax
c0003f8e:	57                   	push   edi
c0003f8f:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003f93:	50                   	push   eax
c0003f94:	e8 a3 de ff ff       	call   c0001e3c <disk_read>
c0003f99:	83 c4 10             	add    esp,0x10
c0003f9c:	85 c0                	test   eax,eax
c0003f9e:	0f 95 c0             	setne  al
c0003fa1:	0f b6 c0             	movzx  eax,al
c0003fa4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003fa8:	83 ec 0c             	sub    esp,0xc
c0003fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003faf:	e8 34 1d 00 00       	call   c0005ce8 <ff_memfree>
c0003fb4:	83 c4 10             	add    esp,0x10
c0003fb7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003fbb:	85 c0                	test   eax,eax
c0003fbd:	74 06                	je     c0003fc5 <f_open+0x2bb>
c0003fbf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003fc5:	83 c4 5c             	add    esp,0x5c
c0003fc8:	5b                   	pop    ebx
c0003fc9:	5e                   	pop    esi
c0003fca:	5f                   	pop    edi
c0003fcb:	5d                   	pop    ebp
c0003fcc:	c3                   	ret    

c0003fcd <f_read>:
c0003fcd:	55                   	push   ebp
c0003fce:	57                   	push   edi
c0003fcf:	56                   	push   esi
c0003fd0:	53                   	push   ebx
c0003fd1:	83 ec 2c             	sub    esp,0x2c
c0003fd4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003fd8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003fdc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003fe2:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003fe6:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003fea:	89 d8                	mov    eax,ebx
c0003fec:	e8 54 e3 ff ff       	call   c0002345 <validate>
c0003ff1:	89 c5                	mov    ebp,eax
c0003ff3:	85 c0                	test   eax,eax
c0003ff5:	0f 85 c7 01 00 00    	jne    c00041c2 <f_read+0x1f5>
c0003ffb:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003fff:	85 ed                	test   ebp,ebp
c0004001:	0f 85 bb 01 00 00    	jne    c00041c2 <f_read+0x1f5>
c0004007:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c000400b:	0f 84 ac 01 00 00    	je     c00041bd <f_read+0x1f0>
c0004011:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004014:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004017:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000401b:	39 f0                	cmp    eax,esi
c000401d:	0f 86 b0 00 00 00    	jbe    c00040d3 <f_read+0x106>
c0004023:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0004027:	e9 a7 00 00 00       	jmp    c00040d3 <f_read+0x106>
c000402c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000402f:	a9 ff 01 00 00       	test   eax,0x1ff
c0004034:	0f 85 56 01 00 00    	jne    c0004190 <f_read+0x1c3>
c000403a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000403e:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c0004042:	89 c2                	mov    edx,eax
c0004044:	4f                   	dec    edi
c0004045:	c1 ea 09             	shr    edx,0x9
c0004048:	21 d7                	and    edi,edx
c000404a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000404e:	0f 84 8f 00 00 00    	je     c00040e3 <f_read+0x116>
c0004054:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004058:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000405b:	89 c8                	mov    eax,ecx
c000405d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004061:	e8 78 e0 ff ff       	call   c00020de <clst2sect>
c0004066:	85 c0                	test   eax,eax
c0004068:	0f 84 8d 00 00 00    	je     c00040fb <f_read+0x12e>
c000406e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004072:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c000407a:	8d 3c 01             	lea    edi,[ecx+eax*1]
c000407d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004081:	0f 86 bf 00 00 00    	jbe    c0004146 <f_read+0x179>
c0004087:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000408b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000408f:	c1 ee 09             	shr    esi,0x9
c0004092:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004096:	01 f2                	add    edx,esi
c0004098:	39 c2                	cmp    edx,eax
c000409a:	76 06                	jbe    c00040a2 <f_read+0xd5>
c000409c:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040a0:	89 c6                	mov    esi,eax
c00040a2:	56                   	push   esi
c00040a3:	57                   	push   edi
c00040a4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040a8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040ac:	50                   	push   eax
c00040ad:	e8 8a dd ff ff       	call   c0001e3c <disk_read>
c00040b2:	83 c4 10             	add    esp,0x10
c00040b5:	85 c0                	test   eax,eax
c00040b7:	75 55                	jne    c000410e <f_read+0x141>
c00040b9:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040bd:	75 65                	jne    c0004124 <f_read+0x157>
c00040bf:	c1 e6 09             	shl    esi,0x9
c00040c2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00040c6:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c00040ca:	01 30                	add    DWORD PTR [eax],esi
c00040cc:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00040d0:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c00040d3:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00040d8:	0f 85 4e ff ff ff    	jne    c000402c <f_read+0x5f>
c00040de:	e9 df 00 00 00       	jmp    c00041c2 <f_read+0x1f5>
c00040e3:	85 c0                	test   eax,eax
c00040e5:	75 05                	jne    c00040ec <f_read+0x11f>
c00040e7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00040ea:	eb 0a                	jmp    c00040f6 <f_read+0x129>
c00040ec:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00040ef:	8b 03                	mov    eax,DWORD PTR [ebx]
c00040f1:	e8 ce f1 ff ff       	call   c00032c4 <get_fat.isra.2>
c00040f6:	83 f8 01             	cmp    eax,0x1
c00040f9:	77 0e                	ja     c0004109 <f_read+0x13c>
c00040fb:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00040ff:	bd 02 00 00 00       	mov    ebp,0x2
c0004104:	e9 b9 00 00 00       	jmp    c00041c2 <f_read+0x1f5>
c0004109:	83 f8 ff             	cmp    eax,0xffffffff
c000410c:	75 0e                	jne    c000411c <f_read+0x14f>
c000410e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004112:	bd 01 00 00 00       	mov    ebp,0x1
c0004117:	e9 a6 00 00 00       	jmp    c00041c2 <f_read+0x1f5>
c000411c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000411f:	e9 30 ff ff ff       	jmp    c0004054 <f_read+0x87>
c0004124:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004127:	29 f8                	sub    eax,edi
c0004129:	39 f0                	cmp    eax,esi
c000412b:	73 92                	jae    c00040bf <f_read+0xf2>
c000412d:	c1 e0 09             	shl    eax,0x9
c0004130:	8d 53 28             	lea    edx,[ebx+0x28]
c0004133:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004137:	b9 00 02 00 00       	mov    ecx,0x200
c000413c:	e8 72 dd ff ff       	call   c0001eb3 <mem_cpy>
c0004141:	e9 79 ff ff ff       	jmp    c00040bf <f_read+0xf2>
c0004146:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004149:	39 f8                	cmp    eax,edi
c000414b:	74 40                	je     c000418d <f_read+0x1c0>
c000414d:	8d 73 28             	lea    esi,[ebx+0x28]
c0004150:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004154:	74 1e                	je     c0004174 <f_read+0x1a7>
c0004156:	6a 01                	push   0x1
c0004158:	50                   	push   eax
c0004159:	56                   	push   esi
c000415a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000415e:	50                   	push   eax
c000415f:	e8 ee dc ff ff       	call   c0001e52 <disk_write>
c0004164:	83 c4 10             	add    esp,0x10
c0004167:	85 c0                	test   eax,eax
c0004169:	75 a3                	jne    c000410e <f_read+0x141>
c000416b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000416e:	83 e0 7f             	and    eax,0x7f
c0004171:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004174:	6a 01                	push   0x1
c0004176:	57                   	push   edi
c0004177:	56                   	push   esi
c0004178:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000417c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004180:	50                   	push   eax
c0004181:	e8 b6 dc ff ff       	call   c0001e3c <disk_read>
c0004186:	83 c4 10             	add    esp,0x10
c0004189:	85 c0                	test   eax,eax
c000418b:	75 81                	jne    c000410e <f_read+0x141>
c000418d:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0004190:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004193:	ba 00 02 00 00       	mov    edx,0x200
c0004198:	25 ff 01 00 00       	and    eax,0x1ff
c000419d:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00041a1:	29 c2                	sub    edx,eax
c00041a3:	39 d6                	cmp    esi,edx
c00041a5:	76 02                	jbe    c00041a9 <f_read+0x1dc>
c00041a7:	89 d6                	mov    esi,edx
c00041a9:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00041ad:	89 f1                	mov    ecx,esi
c00041af:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00041b3:	e8 fb dc ff ff       	call   c0001eb3 <mem_cpy>
c00041b8:	e9 05 ff ff ff       	jmp    c00040c2 <f_read+0xf5>
c00041bd:	bd 07 00 00 00       	mov    ebp,0x7
c00041c2:	83 c4 2c             	add    esp,0x2c
c00041c5:	89 e8                	mov    eax,ebp
c00041c7:	5b                   	pop    ebx
c00041c8:	5e                   	pop    esi
c00041c9:	5f                   	pop    edi
c00041ca:	5d                   	pop    ebp
c00041cb:	c3                   	ret    

c00041cc <f_write>:
c00041cc:	55                   	push   ebp
c00041cd:	57                   	push   edi
c00041ce:	56                   	push   esi
c00041cf:	53                   	push   ebx
c00041d0:	83 ec 2c             	sub    esp,0x2c
c00041d3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00041d7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00041db:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00041e1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00041e5:	89 d8                	mov    eax,ebx
c00041e7:	e8 59 e1 ff ff       	call   c0002345 <validate>
c00041ec:	89 c5                	mov    ebp,eax
c00041ee:	85 c0                	test   eax,eax
c00041f0:	0f 85 14 02 00 00    	jne    c000440a <f_write+0x23e>
c00041f6:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00041fa:	85 ed                	test   ebp,ebp
c00041fc:	0f 85 08 02 00 00    	jne    c000440a <f_write+0x23e>
c0004202:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004206:	0f 84 f9 01 00 00    	je     c0004405 <f_write+0x239>
c000420c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000420f:	89 c7                	mov    edi,eax
c0004211:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004215:	0f 83 ef 00 00 00    	jae    c000430a <f_write+0x13e>
c000421b:	f7 d0                	not    eax
c000421d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004221:	e9 e4 00 00 00       	jmp    c000430a <f_write+0x13e>
c0004226:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004229:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000422f:	0f 85 9a 01 00 00    	jne    c00043cf <f_write+0x203>
c0004235:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004239:	89 d1                	mov    ecx,edx
c000423b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000423f:	c1 e9 09             	shr    ecx,0x9
c0004242:	48                   	dec    eax
c0004243:	21 c8                	and    eax,ecx
c0004245:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004249:	0f 84 c8 00 00 00    	je     c0004317 <f_write+0x14b>
c000424f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004253:	0f 85 22 01 00 00    	jne    c000437b <f_write+0x1af>
c0004259:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000425d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004260:	89 c8                	mov    eax,ecx
c0004262:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004266:	e8 73 de ff ff       	call   c00020de <clst2sect>
c000426b:	85 c0                	test   eax,eax
c000426d:	0f 84 d2 00 00 00    	je     c0004345 <f_write+0x179>
c0004273:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0004277:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000427b:	01 c7                	add    edi,eax
c000427d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0004285:	0f 86 1c 01 00 00    	jbe    c00043a7 <f_write+0x1db>
c000428b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000428f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004293:	c1 ee 09             	shr    esi,0x9
c0004296:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000429a:	01 f2                	add    edx,esi
c000429c:	39 c2                	cmp    edx,eax
c000429e:	76 06                	jbe    c00042a6 <f_write+0xda>
c00042a0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00042a4:	89 c6                	mov    esi,eax
c00042a6:	56                   	push   esi
c00042a7:	57                   	push   edi
c00042a8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00042ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00042b0:	50                   	push   eax
c00042b1:	e8 9c db ff ff       	call   c0001e52 <disk_write>
c00042b6:	83 c4 10             	add    esp,0x10
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 85 97 00 00 00    	jne    c0004358 <f_write+0x18c>
c00042c1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00042c4:	29 fa                	sub    edx,edi
c00042c6:	39 f2                	cmp    edx,esi
c00042c8:	73 1d                	jae    c00042e7 <f_write+0x11b>
c00042ca:	8d 43 28             	lea    eax,[ebx+0x28]
c00042cd:	c1 e2 09             	shl    edx,0x9
c00042d0:	b9 00 02 00 00       	mov    ecx,0x200
c00042d5:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c00042d9:	e8 d5 db ff ff       	call   c0001eb3 <mem_cpy>
c00042de:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042e1:	83 e0 7f             	and    eax,0x7f
c00042e4:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042e7:	c1 e6 09             	shl    esi,0x9
c00042ea:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00042ee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00042f2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00042f6:	01 30                	add    DWORD PTR [eax],esi
c00042f8:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00042fb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00042fe:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004301:	39 f0                	cmp    eax,esi
c0004303:	73 02                	jae    c0004307 <f_write+0x13b>
c0004305:	89 f0                	mov    eax,esi
c0004307:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000430a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000430f:	0f 85 11 ff ff ff    	jne    c0004226 <f_write+0x5a>
c0004315:	eb 1b                	jmp    c0004332 <f_write+0x166>
c0004317:	85 d2                	test   edx,edx
c0004319:	75 09                	jne    c0004324 <f_write+0x158>
c000431b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000431e:	85 c0                	test   eax,eax
c0004320:	75 1e                	jne    c0004340 <f_write+0x174>
c0004322:	eb 03                	jmp    c0004327 <f_write+0x15b>
c0004324:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 62 f1 ff ff       	call   c0003490 <create_chain>
c000432e:	85 c0                	test   eax,eax
c0004330:	75 0e                	jne    c0004340 <f_write+0x174>
c0004332:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004335:	83 c8 40             	or     eax,0x40
c0004338:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000433b:	e9 ca 00 00 00       	jmp    c000440a <f_write+0x23e>
c0004340:	83 f8 01             	cmp    eax,0x1
c0004343:	75 0e                	jne    c0004353 <f_write+0x187>
c0004345:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004349:	bd 02 00 00 00       	mov    ebp,0x2
c000434e:	e9 b7 00 00 00       	jmp    c000440a <f_write+0x23e>
c0004353:	83 f8 ff             	cmp    eax,0xffffffff
c0004356:	75 0e                	jne    c0004366 <f_write+0x19a>
c0004358:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000435c:	bd 01 00 00 00       	mov    ebp,0x1
c0004361:	e9 a4 00 00 00       	jmp    c000440a <f_write+0x23e>
c0004366:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004369:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000436d:	0f 85 dc fe ff ff    	jne    c000424f <f_write+0x83>
c0004373:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004376:	e9 d4 fe ff ff       	jmp    c000424f <f_write+0x83>
c000437b:	6a 01                	push   0x1
c000437d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004380:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004383:	50                   	push   eax
c0004384:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004388:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000438c:	50                   	push   eax
c000438d:	e8 c0 da ff ff       	call   c0001e52 <disk_write>
c0004392:	83 c4 10             	add    esp,0x10
c0004395:	85 c0                	test   eax,eax
c0004397:	75 bf                	jne    c0004358 <f_write+0x18c>
c0004399:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000439c:	83 e0 7f             	and    eax,0x7f
c000439f:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043a2:	e9 b2 fe ff ff       	jmp    c0004259 <f_write+0x8d>
c00043a7:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00043aa:	74 20                	je     c00043cc <f_write+0x200>
c00043ac:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00043af:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00043b2:	76 18                	jbe    c00043cc <f_write+0x200>
c00043b4:	6a 01                	push   0x1
c00043b6:	8d 43 28             	lea    eax,[ebx+0x28]
c00043b9:	57                   	push   edi
c00043ba:	50                   	push   eax
c00043bb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00043bf:	50                   	push   eax
c00043c0:	e8 77 da ff ff       	call   c0001e3c <disk_read>
c00043c5:	83 c4 10             	add    esp,0x10
c00043c8:	85 c0                	test   eax,eax
c00043ca:	75 8c                	jne    c0004358 <f_write+0x18c>
c00043cc:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00043cf:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00043d2:	ba 00 02 00 00       	mov    edx,0x200
c00043d7:	25 ff 01 00 00       	and    eax,0x1ff
c00043dc:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043e0:	29 c2                	sub    edx,eax
c00043e2:	39 d6                	cmp    esi,edx
c00043e4:	76 02                	jbe    c00043e8 <f_write+0x21c>
c00043e6:	89 d6                	mov    esi,edx
c00043e8:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00043ec:	89 f1                	mov    ecx,esi
c00043ee:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00043f2:	e8 bc da ff ff       	call   c0001eb3 <mem_cpy>
c00043f7:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043fa:	83 c8 80             	or     eax,0xffffff80
c00043fd:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004400:	e9 e5 fe ff ff       	jmp    c00042ea <f_write+0x11e>
c0004405:	bd 07 00 00 00       	mov    ebp,0x7
c000440a:	83 c4 2c             	add    esp,0x2c
c000440d:	89 e8                	mov    eax,ebp
c000440f:	5b                   	pop    ebx
c0004410:	5e                   	pop    esi
c0004411:	5f                   	pop    edi
c0004412:	5d                   	pop    ebp
c0004413:	c3                   	ret    

c0004414 <f_sync>:
c0004414:	56                   	push   esi
c0004415:	53                   	push   ebx
c0004416:	83 ec 14             	sub    esp,0x14
c0004419:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000441d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004421:	89 d8                	mov    eax,ebx
c0004423:	e8 1d df ff ff       	call   c0002345 <validate>
c0004428:	85 c0                	test   eax,eax
c000442a:	0f 85 a3 00 00 00    	jne    c00044d3 <f_sync+0xbf>
c0004430:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004433:	f6 c2 40             	test   dl,0x40
c0004436:	0f 84 97 00 00 00    	je     c00044d3 <f_sync+0xbf>
c000443c:	80 e2 80             	and    dl,0x80
c000443f:	74 2e                	je     c000446f <f_sync+0x5b>
c0004441:	6a 01                	push   0x1
c0004443:	8d 43 28             	lea    eax,[ebx+0x28]
c0004446:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004449:	50                   	push   eax
c000444a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000444e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004452:	50                   	push   eax
c0004453:	e8 fa d9 ff ff       	call   c0001e52 <disk_write>
c0004458:	83 c4 10             	add    esp,0x10
c000445b:	89 c2                	mov    edx,eax
c000445d:	b8 01 00 00 00       	mov    eax,0x1
c0004462:	85 d2                	test   edx,edx
c0004464:	75 6d                	jne    c00044d3 <f_sync+0xbf>
c0004466:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004469:	83 e0 7f             	and    eax,0x7f
c000446c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000446f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004472:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004476:	e8 73 df ff ff       	call   c00023ee <move_window>
c000447b:	85 c0                	test   eax,eax
c000447d:	75 54                	jne    c00044d3 <f_sync+0xbf>
c000447f:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004482:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c0004485:	89 f2                	mov    edx,esi
c0004487:	83 c8 20             	or     eax,0x20
c000448a:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c000448d:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0004490:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004492:	e8 05 ee ff ff       	call   c000329c <st_clust.isra.1>
c0004497:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000449a:	8d 46 1c             	lea    eax,[esi+0x1c]
c000449d:	e8 0e da ff ff       	call   c0001eb0 <st_dword>
c00044a2:	8d 46 16             	lea    eax,[esi+0x16]
c00044a5:	ba 00 00 21 50       	mov    edx,0x50210000
c00044aa:	e8 01 da ff ff       	call   c0001eb0 <st_dword>
c00044af:	31 d2                	xor    edx,edx
c00044b1:	8d 46 12             	lea    eax,[esi+0x12]
c00044b4:	e8 f3 d9 ff ff       	call   c0001eac <st_word>
c00044b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00044bd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00044c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00044c5:	e8 5b e9 ff ff       	call   c0002e25 <sync_fs>
c00044ca:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00044cd:	83 e2 bf             	and    edx,0xffffffbf
c00044d0:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00044d3:	83 c4 14             	add    esp,0x14
c00044d6:	5b                   	pop    ebx
c00044d7:	5e                   	pop    esi
c00044d8:	c3                   	ret    

c00044d9 <f_close>:
c00044d9:	53                   	push   ebx
c00044da:	83 ec 24             	sub    esp,0x24
c00044dd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00044e1:	53                   	push   ebx
c00044e2:	e8 2d ff ff ff       	call   c0004414 <f_sync>
c00044e7:	83 c4 10             	add    esp,0x10
c00044ea:	85 c0                	test   eax,eax
c00044ec:	75 15                	jne    c0004503 <f_close+0x2a>
c00044ee:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00044f2:	89 d8                	mov    eax,ebx
c00044f4:	e8 4c de ff ff       	call   c0002345 <validate>
c00044f9:	85 c0                	test   eax,eax
c00044fb:	75 06                	jne    c0004503 <f_close+0x2a>
c00044fd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004503:	83 c4 18             	add    esp,0x18
c0004506:	5b                   	pop    ebx
c0004507:	c3                   	ret    

c0004508 <f_lseek>:
c0004508:	55                   	push   ebp
c0004509:	57                   	push   edi
c000450a:	56                   	push   esi
c000450b:	53                   	push   ebx
c000450c:	83 ec 2c             	sub    esp,0x2c
c000450f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004513:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004517:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000451b:	89 d8                	mov    eax,ebx
c000451d:	e8 23 de ff ff       	call   c0002345 <validate>
c0004522:	89 c5                	mov    ebp,eax
c0004524:	85 c0                	test   eax,eax
c0004526:	0f 85 83 01 00 00    	jne    c00046af <f_lseek+0x1a7>
c000452c:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004530:	85 ed                	test   ebp,ebp
c0004532:	0f 85 77 01 00 00    	jne    c00046af <f_lseek+0x1a7>
c0004538:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000453b:	39 f0                	cmp    eax,esi
c000453d:	73 08                	jae    c0004547 <f_lseek+0x3f>
c000453f:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004543:	75 02                	jne    c0004547 <f_lseek+0x3f>
c0004545:	89 c6                	mov    esi,eax
c0004547:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000454a:	85 f6                	test   esi,esi
c000454c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004553:	75 07                	jne    c000455c <f_lseek+0x54>
c0004555:	31 f6                	xor    esi,esi
c0004557:	e9 e2 00 00 00       	jmp    c000463e <f_lseek+0x136>
c000455c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004560:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c0004564:	c1 e7 09             	shl    edi,0x9
c0004567:	85 c9                	test   ecx,ecx
c0004569:	74 28                	je     c0004593 <f_lseek+0x8b>
c000456b:	49                   	dec    ecx
c000456c:	31 d2                	xor    edx,edx
c000456e:	8d 46 ff             	lea    eax,[esi-0x1]
c0004571:	f7 f7                	div    edi
c0004573:	31 d2                	xor    edx,edx
c0004575:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004579:	89 c8                	mov    eax,ecx
c000457b:	f7 f7                	div    edi
c000457d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004581:	72 10                	jb     c0004593 <f_lseek+0x8b>
c0004583:	89 f8                	mov    eax,edi
c0004585:	f7 d8                	neg    eax
c0004587:	21 c1                	and    ecx,eax
c0004589:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000458c:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c000458f:	29 ce                	sub    esi,ecx
c0004591:	eb 3c                	jmp    c00045cf <f_lseek+0xc7>
c0004593:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004596:	85 c0                	test   eax,eax
c0004598:	75 32                	jne    c00045cc <f_lseek+0xc4>
c000459a:	31 d2                	xor    edx,edx
c000459c:	89 d8                	mov    eax,ebx
c000459e:	e8 ed ee ff ff       	call   c0003490 <create_chain>
c00045a3:	83 f8 01             	cmp    eax,0x1
c00045a6:	75 0e                	jne    c00045b6 <f_lseek+0xae>
c00045a8:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00045ac:	bd 02 00 00 00       	mov    ebp,0x2
c00045b1:	e9 f9 00 00 00       	jmp    c00046af <f_lseek+0x1a7>
c00045b6:	83 f8 ff             	cmp    eax,0xffffffff
c00045b9:	75 0e                	jne    c00045c9 <f_lseek+0xc1>
c00045bb:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00045bf:	bd 01 00 00 00       	mov    ebp,0x1
c00045c4:	e9 e6 00 00 00       	jmp    c00046af <f_lseek+0x1a7>
c00045c9:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00045cc:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00045cf:	85 c0                	test   eax,eax
c00045d1:	74 82                	je     c0004555 <f_lseek+0x4d>
c00045d3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045d6:	39 fe                	cmp    esi,edi
c00045d8:	76 3d                	jbe    c0004617 <f_lseek+0x10f>
c00045da:	01 fa                	add    edx,edi
c00045dc:	29 fe                	sub    esi,edi
c00045de:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00045e1:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00045e5:	89 c2                	mov    edx,eax
c00045e7:	74 0d                	je     c00045f6 <f_lseek+0xee>
c00045e9:	89 d8                	mov    eax,ebx
c00045eb:	e8 a0 ee ff ff       	call   c0003490 <create_chain>
c00045f0:	85 c0                	test   eax,eax
c00045f2:	75 09                	jne    c00045fd <f_lseek+0xf5>
c00045f4:	eb 1f                	jmp    c0004615 <f_lseek+0x10d>
c00045f6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045f8:	e8 c7 ec ff ff       	call   c00032c4 <get_fat.isra.2>
c00045fd:	83 f8 ff             	cmp    eax,0xffffffff
c0004600:	74 b9                	je     c00045bb <f_lseek+0xb3>
c0004602:	83 f8 01             	cmp    eax,0x1
c0004605:	76 a1                	jbe    c00045a8 <f_lseek+0xa0>
c0004607:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000460b:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c000460e:	76 98                	jbe    c00045a8 <f_lseek+0xa0>
c0004610:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004613:	eb be                	jmp    c00045d3 <f_lseek+0xcb>
c0004615:	31 f6                	xor    esi,esi
c0004617:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000461a:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004620:	0f 84 2f ff ff ff    	je     c0004555 <f_lseek+0x4d>
c0004626:	89 c2                	mov    edx,eax
c0004628:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000462c:	e8 ad da ff ff       	call   c00020de <clst2sect>
c0004631:	85 c0                	test   eax,eax
c0004633:	0f 84 6f ff ff ff    	je     c00045a8 <f_lseek+0xa0>
c0004639:	c1 ee 09             	shr    esi,0x9
c000463c:	01 c6                	add    esi,eax
c000463e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004641:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004644:	76 0c                	jbe    c0004652 <f_lseek+0x14a>
c0004646:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004649:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000464c:	83 ca 40             	or     edx,0x40
c000464f:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004652:	a9 ff 01 00 00       	test   eax,0x1ff
c0004657:	74 56                	je     c00046af <f_lseek+0x1a7>
c0004659:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000465c:	39 f0                	cmp    eax,esi
c000465e:	74 4f                	je     c00046af <f_lseek+0x1a7>
c0004660:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004663:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004667:	74 26                	je     c000468f <f_lseek+0x187>
c0004669:	6a 01                	push   0x1
c000466b:	50                   	push   eax
c000466c:	57                   	push   edi
c000466d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004671:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004675:	50                   	push   eax
c0004676:	e8 d7 d7 ff ff       	call   c0001e52 <disk_write>
c000467b:	83 c4 10             	add    esp,0x10
c000467e:	85 c0                	test   eax,eax
c0004680:	0f 85 35 ff ff ff    	jne    c00045bb <f_lseek+0xb3>
c0004686:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004689:	83 e0 7f             	and    eax,0x7f
c000468c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000468f:	6a 01                	push   0x1
c0004691:	56                   	push   esi
c0004692:	57                   	push   edi
c0004693:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004697:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000469b:	50                   	push   eax
c000469c:	e8 9b d7 ff ff       	call   c0001e3c <disk_read>
c00046a1:	83 c4 10             	add    esp,0x10
c00046a4:	85 c0                	test   eax,eax
c00046a6:	0f 85 0f ff ff ff    	jne    c00045bb <f_lseek+0xb3>
c00046ac:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00046af:	83 c4 2c             	add    esp,0x2c
c00046b2:	89 e8                	mov    eax,ebp
c00046b4:	5b                   	pop    ebx
c00046b5:	5e                   	pop    esi
c00046b6:	5f                   	pop    edi
c00046b7:	5d                   	pop    ebp
c00046b8:	c3                   	ret    

c00046b9 <f_opendir>:
c00046b9:	56                   	push   esi
c00046ba:	b8 09 00 00 00       	mov    eax,0x9
c00046bf:	53                   	push   ebx
c00046c0:	83 ec 24             	sub    esp,0x24
c00046c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00046c7:	85 db                	test   ebx,ebx
c00046c9:	0f 84 af 00 00 00    	je     c000477e <f_opendir+0xc5>
c00046cf:	31 c9                	xor    ecx,ecx
c00046d1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046d5:	8d 44 24 34          	lea    eax,[esp+0x34]
c00046d9:	e8 63 de ff ff       	call   c0002541 <mount_volume>
c00046de:	85 c0                	test   eax,eax
c00046e0:	0f 85 92 00 00 00    	jne    c0004778 <f_opendir+0xbf>
c00046e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046ea:	83 ec 0c             	sub    esp,0xc
c00046ed:	89 03                	mov    DWORD PTR [ebx],eax
c00046ef:	68 00 02 00 00       	push   0x200
c00046f4:	e8 d7 15 00 00       	call   c0005cd0 <ff_memalloc>
c00046f9:	83 c4 10             	add    esp,0x10
c00046fc:	89 c6                	mov    esi,eax
c00046fe:	b8 11 00 00 00       	mov    eax,0x11
c0004703:	85 f6                	test   esi,esi
c0004705:	74 77                	je     c000477e <f_opendir+0xc5>
c0004707:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000470b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000470f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004712:	89 d8                	mov    eax,ebx
c0004714:	e8 72 f3 ff ff       	call   c0003a8b <follow_path>
c0004719:	85 c0                	test   eax,eax
c000471b:	75 37                	jne    c0004754 <f_opendir+0x9b>
c000471d:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004721:	75 1c                	jne    c000473f <f_opendir+0x86>
c0004723:	b8 05 00 00 00       	mov    eax,0x5
c0004728:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000472c:	74 26                	je     c0004754 <f_opendir+0x9b>
c000472e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004731:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004735:	8a 00                	mov    al,BYTE PTR [eax]
c0004737:	e8 37 eb ff ff       	call   c0003273 <ld_clust.isra.0>
c000473c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000473f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004743:	31 d2                	xor    edx,edx
c0004745:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004749:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000474d:	89 d8                	mov    eax,ebx
c000474f:	e8 74 ec ff ff       	call   c00033c8 <dir_sdi>
c0004754:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004758:	83 ec 0c             	sub    esp,0xc
c000475b:	56                   	push   esi
c000475c:	e8 87 15 00 00       	call   c0005ce8 <ff_memfree>
c0004761:	83 c4 10             	add    esp,0x10
c0004764:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004768:	83 f8 04             	cmp    eax,0x4
c000476b:	74 06                	je     c0004773 <f_opendir+0xba>
c000476d:	85 c0                	test   eax,eax
c000476f:	74 0d                	je     c000477e <f_opendir+0xc5>
c0004771:	eb 05                	jmp    c0004778 <f_opendir+0xbf>
c0004773:	b8 05 00 00 00       	mov    eax,0x5
c0004778:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000477e:	83 c4 24             	add    esp,0x24
c0004781:	5b                   	pop    ebx
c0004782:	5e                   	pop    esi
c0004783:	c3                   	ret    

c0004784 <f_closedir>:
c0004784:	53                   	push   ebx
c0004785:	83 ec 18             	sub    esp,0x18
c0004788:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000478c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004790:	89 d8                	mov    eax,ebx
c0004792:	e8 ae db ff ff       	call   c0002345 <validate>
c0004797:	85 c0                	test   eax,eax
c0004799:	75 06                	jne    c00047a1 <f_closedir+0x1d>
c000479b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00047a1:	83 c4 18             	add    esp,0x18
c00047a4:	5b                   	pop    ebx
c00047a5:	c3                   	ret    

c00047a6 <f_readdir>:
c00047a6:	57                   	push   edi
c00047a7:	56                   	push   esi
c00047a8:	53                   	push   ebx
c00047a9:	83 ec 20             	sub    esp,0x20
c00047ac:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00047b0:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00047b4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00047b8:	89 d8                	mov    eax,ebx
c00047ba:	e8 86 db ff ff       	call   c0002345 <validate>
c00047bf:	85 c0                	test   eax,eax
c00047c1:	75 6e                	jne    c0004831 <f_readdir+0x8b>
c00047c3:	85 ff                	test   edi,edi
c00047c5:	75 0b                	jne    c00047d2 <f_readdir+0x2c>
c00047c7:	31 d2                	xor    edx,edx
c00047c9:	89 d8                	mov    eax,ebx
c00047cb:	e8 f8 eb ff ff       	call   c00033c8 <dir_sdi>
c00047d0:	eb 5f                	jmp    c0004831 <f_readdir+0x8b>
c00047d2:	83 ec 0c             	sub    esp,0xc
c00047d5:	68 00 02 00 00       	push   0x200
c00047da:	e8 f1 14 00 00       	call   c0005cd0 <ff_memalloc>
c00047df:	83 c4 10             	add    esp,0x10
c00047e2:	89 c6                	mov    esi,eax
c00047e4:	b8 11 00 00 00       	mov    eax,0x11
c00047e9:	85 f6                	test   esi,esi
c00047eb:	74 44                	je     c0004831 <f_readdir+0x8b>
c00047ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00047f1:	31 d2                	xor    edx,edx
c00047f3:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047f6:	89 d8                	mov    eax,ebx
c00047f8:	e8 ca ef ff ff       	call   c00037c7 <dir_read>
c00047fd:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004802:	75 19                	jne    c000481d <f_readdir+0x77>
c0004804:	89 fa                	mov    edx,edi
c0004806:	89 d8                	mov    eax,ebx
c0004808:	e8 70 e8 ff ff       	call   c000307d <get_fileinfo>
c000480d:	31 d2                	xor    edx,edx
c000480f:	89 d8                	mov    eax,ebx
c0004811:	e8 47 ee ff ff       	call   c000365d <dir_next>
c0004816:	83 f8 04             	cmp    eax,0x4
c0004819:	75 02                	jne    c000481d <f_readdir+0x77>
c000481b:	31 c0                	xor    eax,eax
c000481d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004821:	83 ec 0c             	sub    esp,0xc
c0004824:	56                   	push   esi
c0004825:	e8 be 14 00 00       	call   c0005ce8 <ff_memfree>
c000482a:	83 c4 10             	add    esp,0x10
c000482d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004831:	83 c4 20             	add    esp,0x20
c0004834:	5b                   	pop    ebx
c0004835:	5e                   	pop    esi
c0004836:	5f                   	pop    edi
c0004837:	c3                   	ret    

c0004838 <f_stat>:
c0004838:	57                   	push   edi
c0004839:	31 c9                	xor    ecx,ecx
c000483b:	56                   	push   esi
c000483c:	53                   	push   ebx
c000483d:	83 ec 30             	sub    esp,0x30
c0004840:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004844:	89 e2                	mov    edx,esp
c0004846:	8d 44 24 40          	lea    eax,[esp+0x40]
c000484a:	e8 f2 dc ff ff       	call   c0002541 <mount_volume>
c000484f:	89 c3                	mov    ebx,eax
c0004851:	85 c0                	test   eax,eax
c0004853:	75 59                	jne    c00048ae <f_stat+0x76>
c0004855:	83 ec 0c             	sub    esp,0xc
c0004858:	bb 11 00 00 00       	mov    ebx,0x11
c000485d:	68 00 02 00 00       	push   0x200
c0004862:	e8 69 14 00 00       	call   c0005cd0 <ff_memalloc>
c0004867:	83 c4 10             	add    esp,0x10
c000486a:	89 c6                	mov    esi,eax
c000486c:	85 c0                	test   eax,eax
c000486e:	74 3e                	je     c00048ae <f_stat+0x76>
c0004870:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004873:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004877:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000487a:	89 e0                	mov    eax,esp
c000487c:	e8 0a f2 ff ff       	call   c0003a8b <follow_path>
c0004881:	89 c3                	mov    ebx,eax
c0004883:	85 c0                	test   eax,eax
c0004885:	75 1b                	jne    c00048a2 <f_stat+0x6a>
c0004887:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c000488c:	75 0f                	jne    c000489d <f_stat+0x65>
c000488e:	85 ff                	test   edi,edi
c0004890:	74 10                	je     c00048a2 <f_stat+0x6a>
c0004892:	89 fa                	mov    edx,edi
c0004894:	89 e0                	mov    eax,esp
c0004896:	e8 e2 e7 ff ff       	call   c000307d <get_fileinfo>
c000489b:	eb 05                	jmp    c00048a2 <f_stat+0x6a>
c000489d:	bb 06 00 00 00       	mov    ebx,0x6
c00048a2:	83 ec 0c             	sub    esp,0xc
c00048a5:	56                   	push   esi
c00048a6:	e8 3d 14 00 00       	call   c0005ce8 <ff_memfree>
c00048ab:	83 c4 10             	add    esp,0x10
c00048ae:	83 c4 30             	add    esp,0x30
c00048b1:	89 d8                	mov    eax,ebx
c00048b3:	5b                   	pop    ebx
c00048b4:	5e                   	pop    esi
c00048b5:	5f                   	pop    edi
c00048b6:	c3                   	ret    

c00048b7 <f_getfree>:
c00048b7:	55                   	push   ebp
c00048b8:	31 c9                	xor    ecx,ecx
c00048ba:	57                   	push   edi
c00048bb:	56                   	push   esi
c00048bc:	53                   	push   ebx
c00048bd:	83 ec 2c             	sub    esp,0x2c
c00048c0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00048c4:	8d 44 24 40          	lea    eax,[esp+0x40]
c00048c8:	e8 74 dc ff ff       	call   c0002541 <mount_volume>
c00048cd:	89 c7                	mov    edi,eax
c00048cf:	85 c0                	test   eax,eax
c00048d1:	0f 85 df 00 00 00    	jne    c00049b6 <f_getfree+0xff>
c00048d7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00048db:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00048df:	89 30                	mov    DWORD PTR [eax],esi
c00048e1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00048e4:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00048e7:	8d 55 fe             	lea    edx,[ebp-0x2]
c00048ea:	39 d0                	cmp    eax,edx
c00048ec:	77 0b                	ja     c00048f9 <f_getfree+0x42>
c00048ee:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00048f2:	89 01                	mov    DWORD PTR [ecx],eax
c00048f4:	e9 bd 00 00 00       	jmp    c00049b6 <f_getfree+0xff>
c00048f9:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c00048fc:	75 29                	jne    c0004927 <f_getfree+0x70>
c00048fe:	bd 02 00 00 00       	mov    ebp,0x2
c0004903:	31 db                	xor    ebx,ebx
c0004905:	89 ea                	mov    edx,ebp
c0004907:	89 f0                	mov    eax,esi
c0004909:	e8 b6 e9 ff ff       	call   c00032c4 <get_fat.isra.2>
c000490e:	83 f8 ff             	cmp    eax,0xffffffff
c0004911:	74 7d                	je     c0004990 <f_getfree+0xd9>
c0004913:	83 f8 01             	cmp    eax,0x1
c0004916:	74 7f                	je     c0004997 <f_getfree+0xe0>
c0004918:	83 d3 00             	adc    ebx,0x0
c000491b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000491f:	45                   	inc    ebp
c0004920:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004923:	77 e0                	ja     c0004905 <f_getfree+0x4e>
c0004925:	eb 79                	jmp    c00049a0 <f_getfree+0xe9>
c0004927:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c000492a:	31 db                	xor    ebx,ebx
c000492c:	31 f6                	xor    esi,esi
c000492e:	85 f6                	test   esi,esi
c0004930:	75 18                	jne    c000494a <f_getfree+0x93>
c0004932:	8d 42 01             	lea    eax,[edx+0x1]
c0004935:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004939:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000493d:	e8 ac da ff ff       	call   c00023ee <move_window>
c0004942:	85 c0                	test   eax,eax
c0004944:	75 58                	jne    c000499e <f_getfree+0xe7>
c0004946:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000494a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000494e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004952:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004956:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004959:	75 13                	jne    c000496e <f_getfree+0xb7>
c000495b:	e8 27 d5 ff ff       	call   c0001e87 <ld_word>
c0004960:	0f b7 c0             	movzx  eax,ax
c0004963:	83 f8 01             	cmp    eax,0x1
c0004966:	83 d3 00             	adc    ebx,0x0
c0004969:	83 c6 02             	add    esi,0x2
c000496c:	eb 13                	jmp    c0004981 <f_getfree+0xca>
c000496e:	e8 21 d5 ff ff       	call   c0001e94 <ld_dword>
c0004973:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004978:	83 f8 01             	cmp    eax,0x1
c000497b:	83 d3 00             	adc    ebx,0x0
c000497e:	83 c6 04             	add    esi,0x4
c0004981:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004987:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000498b:	4d                   	dec    ebp
c000498c:	75 a0                	jne    c000492e <f_getfree+0x77>
c000498e:	eb 10                	jmp    c00049a0 <f_getfree+0xe9>
c0004990:	bf 01 00 00 00       	mov    edi,0x1
c0004995:	eb 09                	jmp    c00049a0 <f_getfree+0xe9>
c0004997:	bf 02 00 00 00       	mov    edi,0x2
c000499c:	eb 02                	jmp    c00049a0 <f_getfree+0xe9>
c000499e:	89 c7                	mov    edi,eax
c00049a0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00049a4:	89 18                	mov    DWORD PTR [eax],ebx
c00049a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049aa:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c00049ad:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c00049b0:	83 ca 01             	or     edx,0x1
c00049b3:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c00049b6:	83 c4 2c             	add    esp,0x2c
c00049b9:	89 f8                	mov    eax,edi
c00049bb:	5b                   	pop    ebx
c00049bc:	5e                   	pop    esi
c00049bd:	5f                   	pop    edi
c00049be:	5d                   	pop    ebp
c00049bf:	c3                   	ret    

c00049c0 <f_truncate>:
c00049c0:	56                   	push   esi
c00049c1:	53                   	push   ebx
c00049c2:	83 ec 14             	sub    esp,0x14
c00049c5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00049c9:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049cd:	89 d8                	mov    eax,ebx
c00049cf:	e8 71 d9 ff ff       	call   c0002345 <validate>
c00049d4:	89 c6                	mov    esi,eax
c00049d6:	85 c0                	test   eax,eax
c00049d8:	0f 85 c4 00 00 00    	jne    c0004aa2 <f_truncate+0xe2>
c00049de:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00049e2:	85 f6                	test   esi,esi
c00049e4:	0f 85 b8 00 00 00    	jne    c0004aa2 <f_truncate+0xe2>
c00049ea:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00049ee:	0f 84 a9 00 00 00    	je     c0004a9d <f_truncate+0xdd>
c00049f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00049f7:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00049fa:	0f 83 a2 00 00 00    	jae    c0004aa2 <f_truncate+0xe2>
c0004a00:	85 c0                	test   eax,eax
c0004a02:	75 15                	jne    c0004a19 <f_truncate+0x59>
c0004a04:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004a07:	31 c9                	xor    ecx,ecx
c0004a09:	89 d8                	mov    eax,ebx
c0004a0b:	e8 bf eb ff ff       	call   c00035cf <remove_chain>
c0004a10:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004a17:	eb 35                	jmp    c0004a4e <f_truncate+0x8e>
c0004a19:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004a1c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004a1e:	e8 a1 e8 ff ff       	call   c00032c4 <get_fat.isra.2>
c0004a23:	89 c2                	mov    edx,eax
c0004a25:	b8 01 00 00 00       	mov    eax,0x1
c0004a2a:	83 fa ff             	cmp    edx,0xffffffff
c0004a2d:	74 1f                	je     c0004a4e <f_truncate+0x8e>
c0004a2f:	b8 02 00 00 00       	mov    eax,0x2
c0004a34:	83 fa 01             	cmp    edx,0x1
c0004a37:	74 15                	je     c0004a4e <f_truncate+0x8e>
c0004a39:	31 c0                	xor    eax,eax
c0004a3b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004a3f:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004a42:	76 0a                	jbe    c0004a4e <f_truncate+0x8e>
c0004a44:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004a47:	89 d8                	mov    eax,ebx
c0004a49:	e8 81 eb ff ff       	call   c00035cf <remove_chain>
c0004a4e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004a51:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004a54:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004a57:	83 ca 40             	or     edx,0x40
c0004a5a:	85 c0                	test   eax,eax
c0004a5c:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004a5f:	75 35                	jne    c0004a96 <f_truncate+0xd6>
c0004a61:	80 e2 80             	and    dl,0x80
c0004a64:	74 3c                	je     c0004aa2 <f_truncate+0xe2>
c0004a66:	6a 01                	push   0x1
c0004a68:	8d 43 28             	lea    eax,[ebx+0x28]
c0004a6b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004a6e:	50                   	push   eax
c0004a6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004a77:	50                   	push   eax
c0004a78:	e8 d5 d3 ff ff       	call   c0001e52 <disk_write>
c0004a7d:	83 c4 10             	add    esp,0x10
c0004a80:	85 c0                	test   eax,eax
c0004a82:	75 0d                	jne    c0004a91 <f_truncate+0xd1>
c0004a84:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004a87:	31 f6                	xor    esi,esi
c0004a89:	83 e0 7f             	and    eax,0x7f
c0004a8c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004a8f:	eb 11                	jmp    c0004aa2 <f_truncate+0xe2>
c0004a91:	b8 01 00 00 00       	mov    eax,0x1
c0004a96:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004a99:	89 c6                	mov    esi,eax
c0004a9b:	eb 05                	jmp    c0004aa2 <f_truncate+0xe2>
c0004a9d:	be 07 00 00 00       	mov    esi,0x7
c0004aa2:	89 f0                	mov    eax,esi
c0004aa4:	83 c4 14             	add    esp,0x14
c0004aa7:	5b                   	pop    ebx
c0004aa8:	5e                   	pop    esi
c0004aa9:	c3                   	ret    

c0004aaa <f_unlink>:
c0004aaa:	55                   	push   ebp
c0004aab:	b9 02 00 00 00       	mov    ecx,0x2
c0004ab0:	57                   	push   edi
c0004ab1:	56                   	push   esi
c0004ab2:	53                   	push   ebx
c0004ab3:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004ab9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004abd:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004ac4:	e8 78 da ff ff       	call   c0002541 <mount_volume>
c0004ac9:	85 c0                	test   eax,eax
c0004acb:	0f 85 f0 00 00 00    	jne    c0004bc1 <f_unlink+0x117>
c0004ad1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ad5:	83 ec 0c             	sub    esp,0xc
c0004ad8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004adc:	68 00 02 00 00       	push   0x200
c0004ae1:	e8 ea 11 00 00       	call   c0005cd0 <ff_memalloc>
c0004ae6:	83 c4 10             	add    esp,0x10
c0004ae9:	89 c3                	mov    ebx,eax
c0004aeb:	b8 11 00 00 00       	mov    eax,0x11
c0004af0:	85 db                	test   ebx,ebx
c0004af2:	0f 84 c9 00 00 00    	je     c0004bc1 <f_unlink+0x117>
c0004af8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004afc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004b03:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004b06:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b0a:	e8 7c ef ff ff       	call   c0003a8b <follow_path>
c0004b0f:	85 c0                	test   eax,eax
c0004b11:	0f 85 96 00 00 00    	jne    c0004bad <f_unlink+0x103>
c0004b17:	b8 06 00 00 00       	mov    eax,0x6
c0004b1c:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004b21:	0f 85 86 00 00 00    	jne    c0004bad <f_unlink+0x103>
c0004b27:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004b2c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004b32:	74 07                	je     c0004b3b <f_unlink+0x91>
c0004b34:	b8 07 00 00 00       	mov    eax,0x7
c0004b39:	eb 72                	jmp    c0004bad <f_unlink+0x103>
c0004b3b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004b3f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b43:	8a 07                	mov    al,BYTE PTR [edi]
c0004b45:	e8 29 e7 ff ff       	call   c0003273 <ld_clust.isra.0>
c0004b4a:	83 e5 10             	and    ebp,0x10
c0004b4d:	89 c6                	mov    esi,eax
c0004b4f:	75 0f                	jne    c0004b60 <f_unlink+0xb6>
c0004b51:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b55:	e8 95 ed ff ff       	call   c00038ef <dir_remove>
c0004b5a:	85 c0                	test   eax,eax
c0004b5c:	74 2f                	je     c0004b8d <f_unlink+0xe3>
c0004b5e:	eb 4d                	jmp    c0004bad <f_unlink+0x103>
c0004b60:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004b64:	31 d2                	xor    edx,edx
c0004b66:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004b6a:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004b6e:	e8 55 e8 ff ff       	call   c00033c8 <dir_sdi>
c0004b73:	85 c0                	test   eax,eax
c0004b75:	75 36                	jne    c0004bad <f_unlink+0x103>
c0004b77:	31 d2                	xor    edx,edx
c0004b79:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004b7d:	e8 45 ec ff ff       	call   c00037c7 <dir_read>
c0004b82:	85 c0                	test   eax,eax
c0004b84:	74 ae                	je     c0004b34 <f_unlink+0x8a>
c0004b86:	83 f8 04             	cmp    eax,0x4
c0004b89:	75 22                	jne    c0004bad <f_unlink+0x103>
c0004b8b:	eb c4                	jmp    c0004b51 <f_unlink+0xa7>
c0004b8d:	85 f6                	test   esi,esi
c0004b8f:	75 0b                	jne    c0004b9c <f_unlink+0xf2>
c0004b91:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b95:	e8 8b e2 ff ff       	call   c0002e25 <sync_fs>
c0004b9a:	eb 11                	jmp    c0004bad <f_unlink+0x103>
c0004b9c:	31 c9                	xor    ecx,ecx
c0004b9e:	89 f2                	mov    edx,esi
c0004ba0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ba4:	e8 26 ea ff ff       	call   c00035cf <remove_chain>
c0004ba9:	85 c0                	test   eax,eax
c0004bab:	74 e4                	je     c0004b91 <f_unlink+0xe7>
c0004bad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bb1:	83 ec 0c             	sub    esp,0xc
c0004bb4:	53                   	push   ebx
c0004bb5:	e8 2e 11 00 00       	call   c0005ce8 <ff_memfree>
c0004bba:	83 c4 10             	add    esp,0x10
c0004bbd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bc1:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004bc7:	5b                   	pop    ebx
c0004bc8:	5e                   	pop    esi
c0004bc9:	5f                   	pop    edi
c0004bca:	5d                   	pop    ebp
c0004bcb:	c3                   	ret    

c0004bcc <f_mkdir>:
c0004bcc:	57                   	push   edi
c0004bcd:	b9 02 00 00 00       	mov    ecx,0x2
c0004bd2:	56                   	push   esi
c0004bd3:	53                   	push   ebx
c0004bd4:	83 ec 50             	sub    esp,0x50
c0004bd7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004bdb:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004bdf:	e8 5d d9 ff ff       	call   c0002541 <mount_volume>
c0004be4:	89 c3                	mov    ebx,eax
c0004be6:	85 c0                	test   eax,eax
c0004be8:	0f 85 70 01 00 00    	jne    c0004d5e <f_mkdir+0x192>
c0004bee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bf2:	bb 11 00 00 00       	mov    ebx,0x11
c0004bf7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004bfb:	83 ec 0c             	sub    esp,0xc
c0004bfe:	68 00 02 00 00       	push   0x200
c0004c03:	e8 c8 10 00 00       	call   c0005cd0 <ff_memalloc>
c0004c08:	83 c4 10             	add    esp,0x10
c0004c0b:	89 c7                	mov    edi,eax
c0004c0d:	85 c0                	test   eax,eax
c0004c0f:	0f 84 49 01 00 00    	je     c0004d5e <f_mkdir+0x192>
c0004c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c19:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004c1d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004c20:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c24:	e8 62 ee ff ff       	call   c0003a8b <follow_path>
c0004c29:	89 c3                	mov    ebx,eax
c0004c2b:	85 c0                	test   eax,eax
c0004c2d:	74 3e                	je     c0004c6d <f_mkdir+0xa1>
c0004c2f:	83 f8 04             	cmp    eax,0x4
c0004c32:	75 3e                	jne    c0004c72 <f_mkdir+0xa6>
c0004c34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c38:	31 d2                	xor    edx,edx
c0004c3a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004c3e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004c42:	e8 49 e8 ff ff       	call   c0003490 <create_chain>
c0004c47:	89 c6                	mov    esi,eax
c0004c49:	85 c0                	test   eax,eax
c0004c4b:	74 0c                	je     c0004c59 <f_mkdir+0x8d>
c0004c4d:	bb 02 00 00 00       	mov    ebx,0x2
c0004c52:	83 f8 01             	cmp    eax,0x1
c0004c55:	74 07                	je     c0004c5e <f_mkdir+0x92>
c0004c57:	eb 2a                	jmp    c0004c83 <f_mkdir+0xb7>
c0004c59:	bb 07 00 00 00       	mov    ebx,0x7
c0004c5e:	31 c9                	xor    ecx,ecx
c0004c60:	89 f2                	mov    edx,esi
c0004c62:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004c66:	e8 64 e9 ff ff       	call   c00035cf <remove_chain>
c0004c6b:	eb 05                	jmp    c0004c72 <f_mkdir+0xa6>
c0004c6d:	bb 08 00 00 00       	mov    ebx,0x8
c0004c72:	83 ec 0c             	sub    esp,0xc
c0004c75:	57                   	push   edi
c0004c76:	e8 6d 10 00 00       	call   c0005ce8 <ff_memfree>
c0004c7b:	83 c4 10             	add    esp,0x10
c0004c7e:	e9 db 00 00 00       	jmp    c0004d5e <f_mkdir+0x192>
c0004c83:	bb 01 00 00 00       	mov    ebx,0x1
c0004c88:	83 f8 ff             	cmp    eax,0xffffffff
c0004c8b:	74 d1                	je     c0004c5e <f_mkdir+0x92>
c0004c8d:	89 f2                	mov    edx,esi
c0004c8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c93:	e8 f1 dc ff ff       	call   c0002989 <dir_clear>
c0004c98:	89 c3                	mov    ebx,eax
c0004c9a:	85 c0                	test   eax,eax
c0004c9c:	75 c0                	jne    c0004c5e <f_mkdir+0x92>
c0004c9e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004ca3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ca7:	ba 20 00 00 00       	mov    edx,0x20
c0004cac:	83 c0 34             	add    eax,0x34
c0004caf:	e8 14 d2 ff ff       	call   c0001ec8 <mem_set>
c0004cb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cb8:	ba 00 00 21 50       	mov    edx,0x50210000
c0004cbd:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004cc1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004cc5:	83 c0 4a             	add    eax,0x4a
c0004cc8:	e8 e3 d1 ff ff       	call   c0001eb0 <st_dword>
c0004ccd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cd1:	89 f1                	mov    ecx,esi
c0004cd3:	8d 50 34             	lea    edx,[eax+0x34]
c0004cd6:	e8 c1 e5 ff ff       	call   c000329c <st_clust.isra.1>
c0004cdb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cdf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ce4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ce7:	83 c0 54             	add    eax,0x54
c0004cea:	e8 c4 d1 ff ff       	call   c0001eb3 <mem_cpy>
c0004cef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cf3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004cf7:	8d 50 54             	lea    edx,[eax+0x54]
c0004cfa:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004cfe:	e8 99 e5 ff ff       	call   c000329c <st_clust.isra.1>
c0004d03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d07:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d0b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d0f:	e8 0c ee ff ff       	call   c0003b20 <dir_register>
c0004d14:	89 c3                	mov    ebx,eax
c0004d16:	85 c0                	test   eax,eax
c0004d18:	0f 85 40 ff ff ff    	jne    c0004c5e <f_mkdir+0x92>
c0004d1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d22:	ba 00 00 21 50       	mov    edx,0x50210000
c0004d27:	83 c0 16             	add    eax,0x16
c0004d2a:	e8 81 d1 ff ff       	call   c0001eb0 <st_dword>
c0004d2f:	89 f1                	mov    ecx,esi
c0004d31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004d35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d39:	e8 5e e5 ff ff       	call   c000329c <st_clust.isra.1>
c0004d3e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d42:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004d46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d4a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d52:	e8 ce e0 ff ff       	call   c0002e25 <sync_fs>
c0004d57:	89 c3                	mov    ebx,eax
c0004d59:	e9 14 ff ff ff       	jmp    c0004c72 <f_mkdir+0xa6>
c0004d5e:	83 c4 50             	add    esp,0x50
c0004d61:	89 d8                	mov    eax,ebx
c0004d63:	5b                   	pop    ebx
c0004d64:	5e                   	pop    esi
c0004d65:	5f                   	pop    edi
c0004d66:	c3                   	ret    

c0004d67 <f_rename>:
c0004d67:	57                   	push   edi
c0004d68:	56                   	push   esi
c0004d69:	53                   	push   ebx
c0004d6a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004d70:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004d77:	e8 7c d5 ff ff       	call   c00022f8 <get_ldnumber>
c0004d7c:	b9 02 00 00 00       	mov    ecx,0x2
c0004d81:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d85:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004d8c:	e8 b0 d7 ff ff       	call   c0002541 <mount_volume>
c0004d91:	85 c0                	test   eax,eax
c0004d93:	0f 85 7c 01 00 00    	jne    c0004f15 <f_rename+0x1ae>
c0004d99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d9d:	83 ec 0c             	sub    esp,0xc
c0004da0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004da4:	68 00 02 00 00       	push   0x200
c0004da9:	e8 22 0f 00 00       	call   c0005cd0 <ff_memalloc>
c0004dae:	83 c4 10             	add    esp,0x10
c0004db1:	89 c6                	mov    esi,eax
c0004db3:	b8 11 00 00 00       	mov    eax,0x11
c0004db8:	85 f6                	test   esi,esi
c0004dba:	0f 84 55 01 00 00    	je     c0004f15 <f_rename+0x1ae>
c0004dc0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dc4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004dcb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004dce:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004dd2:	e8 b4 ec ff ff       	call   c0003a8b <follow_path>
c0004dd7:	85 c0                	test   eax,eax
c0004dd9:	0f 85 22 01 00 00    	jne    c0004f01 <f_rename+0x19a>
c0004ddf:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004de3:	b8 06 00 00 00       	mov    eax,0x6
c0004de8:	80 e2 a0             	and    dl,0xa0
c0004deb:	0f 85 10 01 00 00    	jne    c0004f01 <f_rename+0x19a>
c0004df1:	b9 20 00 00 00       	mov    ecx,0x20
c0004df6:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004dfa:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004dfe:	e8 b0 d0 ff ff       	call   c0001eb3 <mem_cpy>
c0004e03:	b9 30 00 00 00       	mov    ecx,0x30
c0004e08:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004e0c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e10:	e8 9e d0 ff ff       	call   c0001eb3 <mem_cpy>
c0004e15:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004e1c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e20:	e8 66 ec ff ff       	call   c0003a8b <follow_path>
c0004e25:	85 c0                	test   eax,eax
c0004e27:	75 20                	jne    c0004e49 <f_rename+0xe2>
c0004e29:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004e2d:	b8 08 00 00 00       	mov    eax,0x8
c0004e32:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004e36:	0f 85 c5 00 00 00    	jne    c0004f01 <f_rename+0x19a>
c0004e3c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004e40:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004e47:	eb 03                	jmp    c0004e4c <f_rename+0xe5>
c0004e49:	83 f8 04             	cmp    eax,0x4
c0004e4c:	0f 85 af 00 00 00    	jne    c0004f01 <f_rename+0x19a>
c0004e52:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e56:	e8 c5 ec ff ff       	call   c0003b20 <dir_register>
c0004e5b:	85 c0                	test   eax,eax
c0004e5d:	0f 85 9e 00 00 00    	jne    c0004f01 <f_rename+0x19a>
c0004e63:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004e6a:	b9 13 00 00 00       	mov    ecx,0x13
c0004e6f:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004e72:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004e76:	e8 38 d0 ff ff       	call   c0001eb3 <mem_cpy>
c0004e7b:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004e7f:	a8 10                	test   al,0x10
c0004e81:	75 03                	jne    c0004e86 <f_rename+0x11f>
c0004e83:	83 c8 20             	or     eax,0x20
c0004e86:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004e89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e8d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e91:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004e95:	74 54                	je     c0004eeb <f_rename+0x184>
c0004e97:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004e9b:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004e9f:	74 4a                	je     c0004eeb <f_rename+0x184>
c0004ea1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ea5:	89 da                	mov    edx,ebx
c0004ea7:	8a 07                	mov    al,BYTE PTR [edi]
c0004ea9:	e8 c5 e3 ff ff       	call   c0003273 <ld_clust.isra.0>
c0004eae:	89 c2                	mov    edx,eax
c0004eb0:	89 f8                	mov    eax,edi
c0004eb2:	e8 27 d2 ff ff       	call   c00020de <clst2sect>
c0004eb7:	89 c2                	mov    edx,eax
c0004eb9:	b8 02 00 00 00       	mov    eax,0x2
c0004ebe:	85 d2                	test   edx,edx
c0004ec0:	74 3f                	je     c0004f01 <f_rename+0x19a>
c0004ec2:	89 f8                	mov    eax,edi
c0004ec4:	e8 25 d5 ff ff       	call   c00023ee <move_window>
c0004ec9:	85 c0                	test   eax,eax
c0004ecb:	75 34                	jne    c0004f01 <f_rename+0x19a>
c0004ecd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ed1:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004ed5:	75 14                	jne    c0004eeb <f_rename+0x184>
c0004ed7:	8d 50 54             	lea    edx,[eax+0x54]
c0004eda:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004ede:	e8 b9 e3 ff ff       	call   c000329c <st_clust.isra.1>
c0004ee3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ee7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004eeb:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004eef:	e8 fb e9 ff ff       	call   c00038ef <dir_remove>
c0004ef4:	85 c0                	test   eax,eax
c0004ef6:	75 09                	jne    c0004f01 <f_rename+0x19a>
c0004ef8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004efc:	e8 24 df ff ff       	call   c0002e25 <sync_fs>
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	83 ec 0c             	sub    esp,0xc
c0004f08:	56                   	push   esi
c0004f09:	e8 da 0d 00 00       	call   c0005ce8 <ff_memfree>
c0004f0e:	83 c4 10             	add    esp,0x10
c0004f11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f15:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004f1b:	5b                   	pop    ebx
c0004f1c:	5e                   	pop    esi
c0004f1d:	5f                   	pop    edi
c0004f1e:	c3                   	ret    

c0004f1f <f_chmod>:
c0004f1f:	57                   	push   edi
c0004f20:	b9 02 00 00 00       	mov    ecx,0x2
c0004f25:	56                   	push   esi
c0004f26:	53                   	push   ebx
c0004f27:	83 ec 50             	sub    esp,0x50
c0004f2a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004f2e:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004f32:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f36:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f3a:	e8 02 d6 ff ff       	call   c0002541 <mount_volume>
c0004f3f:	85 c0                	test   eax,eax
c0004f41:	0f 85 81 00 00 00    	jne    c0004fc8 <f_chmod+0xa9>
c0004f47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f4b:	83 ec 0c             	sub    esp,0xc
c0004f4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f52:	68 00 02 00 00       	push   0x200
c0004f57:	e8 74 0d 00 00       	call   c0005cd0 <ff_memalloc>
c0004f5c:	83 c4 10             	add    esp,0x10
c0004f5f:	89 c6                	mov    esi,eax
c0004f61:	b8 11 00 00 00       	mov    eax,0x11
c0004f66:	85 f6                	test   esi,esi
c0004f68:	74 5e                	je     c0004fc8 <f_chmod+0xa9>
c0004f6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f6e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f72:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f75:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f79:	e8 0d eb ff ff       	call   c0003a8b <follow_path>
c0004f7e:	85 c0                	test   eax,eax
c0004f80:	75 32                	jne    c0004fb4 <f_chmod+0x95>
c0004f82:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004f86:	b8 06 00 00 00       	mov    eax,0x6
c0004f8b:	80 e2 a0             	and    dl,0xa0
c0004f8e:	75 24                	jne    c0004fb4 <f_chmod+0x95>
c0004f90:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f94:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004f97:	31 d7                	xor    edi,edx
c0004f99:	21 fb                	and    ebx,edi
c0004f9b:	83 e3 27             	and    ebx,0x27
c0004f9e:	31 d3                	xor    ebx,edx
c0004fa0:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004fa3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fa7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004faf:	e8 71 de ff ff       	call   c0002e25 <sync_fs>
c0004fb4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fb8:	83 ec 0c             	sub    esp,0xc
c0004fbb:	56                   	push   esi
c0004fbc:	e8 27 0d 00 00       	call   c0005ce8 <ff_memfree>
c0004fc1:	83 c4 10             	add    esp,0x10
c0004fc4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fc8:	83 c4 50             	add    esp,0x50
c0004fcb:	5b                   	pop    ebx
c0004fcc:	5e                   	pop    esi
c0004fcd:	5f                   	pop    edi
c0004fce:	c3                   	ret    

c0004fcf <f_utime>:
c0004fcf:	56                   	push   esi
c0004fd0:	b9 02 00 00 00       	mov    ecx,0x2
c0004fd5:	53                   	push   ebx
c0004fd6:	83 ec 54             	sub    esp,0x54
c0004fd9:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004fdd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004fe1:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fe5:	e8 57 d5 ff ff       	call   c0002541 <mount_volume>
c0004fea:	85 c0                	test   eax,eax
c0004fec:	0f 85 87 00 00 00    	jne    c0005079 <f_utime+0xaa>
c0004ff2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ff6:	83 ec 0c             	sub    esp,0xc
c0004ff9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ffd:	68 00 02 00 00       	push   0x200
c0005002:	e8 c9 0c 00 00       	call   c0005cd0 <ff_memalloc>
c0005007:	83 c4 10             	add    esp,0x10
c000500a:	89 c3                	mov    ebx,eax
c000500c:	b8 11 00 00 00       	mov    eax,0x11
c0005011:	85 db                	test   ebx,ebx
c0005013:	74 64                	je     c0005079 <f_utime+0xaa>
c0005015:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005019:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000501d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005020:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005024:	e8 62 ea ff ff       	call   c0003a8b <follow_path>
c0005029:	85 c0                	test   eax,eax
c000502b:	75 38                	jne    c0005065 <f_utime+0x96>
c000502d:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0005031:	b8 06 00 00 00       	mov    eax,0x6
c0005036:	80 e2 a0             	and    dl,0xa0
c0005039:	75 2a                	jne    c0005065 <f_utime+0x96>
c000503b:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c000503f:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0005043:	c1 e2 10             	shl    edx,0x10
c0005046:	09 c2                	or     edx,eax
c0005048:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000504c:	83 c0 16             	add    eax,0x16
c000504f:	e8 5c ce ff ff       	call   c0001eb0 <st_dword>
c0005054:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005058:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000505c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005060:	e8 c0 dd ff ff       	call   c0002e25 <sync_fs>
c0005065:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005069:	83 ec 0c             	sub    esp,0xc
c000506c:	53                   	push   ebx
c000506d:	e8 76 0c 00 00       	call   c0005ce8 <ff_memfree>
c0005072:	83 c4 10             	add    esp,0x10
c0005075:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005079:	83 c4 54             	add    esp,0x54
c000507c:	5b                   	pop    ebx
c000507d:	5e                   	pop    esi
c000507e:	c3                   	ret    

c000507f <f_getlabel>:
c000507f:	55                   	push   ebp
c0005080:	31 c9                	xor    ecx,ecx
c0005082:	57                   	push   edi
c0005083:	56                   	push   esi
c0005084:	53                   	push   ebx
c0005085:	83 ec 5c             	sub    esp,0x5c
c0005088:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000508c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005090:	e8 ac d4 ff ff       	call   c0002541 <mount_volume>
c0005095:	89 c6                	mov    esi,eax
c0005097:	85 c0                	test   eax,eax
c0005099:	0f 85 27 01 00 00    	jne    c00051c6 <f_getlabel+0x147>
c000509f:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c00050a4:	0f 84 d0 00 00 00    	je     c000517a <f_getlabel+0xfb>
c00050aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050ae:	31 d2                	xor    edx,edx
c00050b0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00050b4:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00050bc:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050c0:	e8 03 e3 ff ff       	call   c00033c8 <dir_sdi>
c00050c5:	85 c0                	test   eax,eax
c00050c7:	0f 85 a1 00 00 00    	jne    c000516e <f_getlabel+0xef>
c00050cd:	ba 01 00 00 00       	mov    edx,0x1
c00050d2:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050d6:	e8 ec e6 ff ff       	call   c00037c7 <dir_read>
c00050db:	85 c0                	test   eax,eax
c00050dd:	0f 85 8b 00 00 00    	jne    c000516e <f_getlabel+0xef>
c00050e3:	31 db                	xor    ebx,ebx
c00050e5:	31 c9                	xor    ecx,ecx
c00050e7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00050eb:	8d 79 01             	lea    edi,[ecx+0x1]
c00050ee:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00050f3:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c00050f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00050fc:	e8 06 ce ff ff       	call   c0001f07 <dbc_1st>
c0005101:	85 c0                	test   eax,eax
c0005103:	74 16                	je     c000511b <f_getlabel+0x9c>
c0005105:	83 ff 0b             	cmp    edi,0xb
c0005108:	74 11                	je     c000511b <f_getlabel+0x9c>
c000510a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c000510f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005113:	8d 79 02             	lea    edi,[ecx+0x2]
c0005116:	c1 e0 08             	shl    eax,0x8
c0005119:	09 c2                	or     edx,eax
c000511b:	0f b7 d2             	movzx  edx,dx
c000511e:	50                   	push   eax
c000511f:	50                   	push   eax
c0005120:	68 b5 01 00 00       	push   0x1b5
c0005125:	52                   	push   edx
c0005126:	e8 75 0c 00 00       	call   c0005da0 <ff_oem2uni>
c000512b:	83 c4 10             	add    esp,0x10
c000512e:	0f b7 c0             	movzx  eax,ax
c0005131:	85 c0                	test   eax,eax
c0005133:	74 22                	je     c0005157 <f_getlabel+0xd8>
c0005135:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005139:	b9 04 00 00 00       	mov    ecx,0x4
c000513e:	01 da                	add    edx,ebx
c0005140:	e8 a0 ce ff ff       	call   c0001fe5 <put_utf>
c0005145:	0f b6 c0             	movzx  eax,al
c0005148:	85 c0                	test   eax,eax
c000514a:	74 0b                	je     c0005157 <f_getlabel+0xd8>
c000514c:	01 c3                	add    ebx,eax
c000514e:	83 ff 0b             	cmp    edi,0xb
c0005151:	74 06                	je     c0005159 <f_getlabel+0xda>
c0005153:	89 f9                	mov    ecx,edi
c0005155:	eb 90                	jmp    c00050e7 <f_getlabel+0x68>
c0005157:	31 db                	xor    ebx,ebx
c0005159:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c000515d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0005160:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0005164:	74 14                	je     c000517a <f_getlabel+0xfb>
c0005166:	4b                   	dec    ebx
c0005167:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c000516a:	74 f1                	je     c000515d <f_getlabel+0xde>
c000516c:	eb 0c                	jmp    c000517a <f_getlabel+0xfb>
c000516e:	83 f8 04             	cmp    eax,0x4
c0005171:	75 51                	jne    c00051c4 <f_getlabel+0x145>
c0005173:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005177:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000517a:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c000517f:	74 45                	je     c00051c6 <f_getlabel+0x147>
c0005181:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005185:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0005188:	e8 61 d2 ff ff       	call   c00023ee <move_window>
c000518d:	89 c6                	mov    esi,eax
c000518f:	85 c0                	test   eax,eax
c0005191:	75 33                	jne    c00051c6 <f_getlabel+0x147>
c0005193:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005197:	b8 43 00 00 00       	mov    eax,0x43
c000519c:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c000519f:	83 f9 03             	cmp    ecx,0x3
c00051a2:	74 0f                	je     c00051b3 <f_getlabel+0x134>
c00051a4:	31 c0                	xor    eax,eax
c00051a6:	83 f9 04             	cmp    ecx,0x4
c00051a9:	0f 94 c0             	sete   al
c00051ac:	48                   	dec    eax
c00051ad:	83 e0 c3             	and    eax,0xffffffc3
c00051b0:	83 c0 64             	add    eax,0x64
c00051b3:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c00051b7:	e8 d8 cc ff ff       	call   c0001e94 <ld_dword>
c00051bc:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00051c0:	89 07                	mov    DWORD PTR [edi],eax
c00051c2:	eb 02                	jmp    c00051c6 <f_getlabel+0x147>
c00051c4:	89 c6                	mov    esi,eax
c00051c6:	83 c4 5c             	add    esp,0x5c
c00051c9:	89 f0                	mov    eax,esi
c00051cb:	5b                   	pop    ebx
c00051cc:	5e                   	pop    esi
c00051cd:	5f                   	pop    edi
c00051ce:	5d                   	pop    ebp
c00051cf:	c3                   	ret    

c00051d0 <f_setlabel>:
c00051d0:	57                   	push   edi
c00051d1:	b9 02 00 00 00       	mov    ecx,0x2
c00051d6:	56                   	push   esi
c00051d7:	53                   	push   ebx
c00051d8:	83 ec 50             	sub    esp,0x50
c00051db:	8d 54 24 04          	lea    edx,[esp+0x4]
c00051df:	8d 44 24 60          	lea    eax,[esp+0x60]
c00051e3:	e8 59 d3 ff ff       	call   c0002541 <mount_volume>
c00051e8:	89 c6                	mov    esi,eax
c00051ea:	85 c0                	test   eax,eax
c00051ec:	0f 85 65 01 00 00    	jne    c0005357 <f_setlabel+0x187>
c00051f2:	b9 0b 00 00 00       	mov    ecx,0xb
c00051f7:	ba 20 00 00 00       	mov    edx,0x20
c00051fc:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005200:	31 db                	xor    ebx,ebx
c0005202:	e8 c1 cc ff ff       	call   c0001ec8 <mem_set>
c0005207:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000520b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000520e:	76 5d                	jbe    c000526d <f_setlabel+0x9d>
c0005210:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005214:	e8 f4 cc ff ff       	call   c0001f0d <tchar2uni>
c0005219:	3d ff ff 00 00       	cmp    eax,0xffff
c000521e:	76 0a                	jbe    c000522a <f_setlabel+0x5a>
c0005220:	be 06 00 00 00       	mov    esi,0x6
c0005225:	e9 2d 01 00 00       	jmp    c0005357 <f_setlabel+0x187>
c000522a:	83 ec 0c             	sub    esp,0xc
c000522d:	50                   	push   eax
c000522e:	e8 e5 0b 00 00       	call   c0005e18 <ff_wtoupper>
c0005233:	5a                   	pop    edx
c0005234:	59                   	pop    ecx
c0005235:	68 b5 01 00 00       	push   0x1b5
c000523a:	50                   	push   eax
c000523b:	e8 c0 0a 00 00       	call   c0005d00 <ff_uni2oem>
c0005240:	83 c4 10             	add    esp,0x10
c0005243:	0f b7 f0             	movzx  esi,ax
c0005246:	89 f7                	mov    edi,esi
c0005248:	85 f6                	test   esi,esi
c000524a:	74 d4                	je     c0005220 <f_setlabel+0x50>
c000524c:	89 f2                	mov    edx,esi
c000524e:	b8 d0 f0 02 c0       	mov    eax,0xc002f0d0
c0005253:	e8 9e cc ff ff       	call   c0001ef6 <chk_chr>
c0005258:	85 c0                	test   eax,eax
c000525a:	75 c4                	jne    c0005220 <f_setlabel+0x50>
c000525c:	81 fe ff 00 00 00    	cmp    esi,0xff
c0005262:	0f 87 c9 00 00 00    	ja     c0005331 <f_setlabel+0x161>
c0005268:	e9 e0 00 00 00       	jmp    c000534d <f_setlabel+0x17d>
c000526d:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005272:	74 ac                	je     c0005220 <f_setlabel+0x50>
c0005274:	85 db                	test   ebx,ebx
c0005276:	74 0e                	je     c0005286 <f_setlabel+0xb6>
c0005278:	8d 43 ff             	lea    eax,[ebx-0x1]
c000527b:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005280:	75 04                	jne    c0005286 <f_setlabel+0xb6>
c0005282:	89 c3                	mov    ebx,eax
c0005284:	eb ee                	jmp    c0005274 <f_setlabel+0xa4>
c0005286:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000528a:	31 d2                	xor    edx,edx
c000528c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005290:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005298:	8d 44 24 20          	lea    eax,[esp+0x20]
c000529c:	e8 27 e1 ff ff       	call   c00033c8 <dir_sdi>
c00052a1:	89 c6                	mov    esi,eax
c00052a3:	85 c0                	test   eax,eax
c00052a5:	0f 85 ac 00 00 00    	jne    c0005357 <f_setlabel+0x187>
c00052ab:	ba 01 00 00 00       	mov    edx,0x1
c00052b0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00052b4:	e8 0e e5 ff ff       	call   c00037c7 <dir_read>
c00052b9:	85 c0                	test   eax,eax
c00052bb:	75 18                	jne    c00052d5 <f_setlabel+0x105>
c00052bd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00052c1:	85 db                	test   ebx,ebx
c00052c3:	74 0b                	je     c00052d0 <f_setlabel+0x100>
c00052c5:	b9 0b 00 00 00       	mov    ecx,0xb
c00052ca:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00052ce:	eb 47                	jmp    c0005317 <f_setlabel+0x147>
c00052d0:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00052d3:	eb 47                	jmp    c000531c <f_setlabel+0x14c>
c00052d5:	83 f8 04             	cmp    eax,0x4
c00052d8:	75 53                	jne    c000532d <f_setlabel+0x15d>
c00052da:	85 db                	test   ebx,ebx
c00052dc:	74 79                	je     c0005357 <f_setlabel+0x187>
c00052de:	ba 01 00 00 00       	mov    edx,0x1
c00052e3:	8d 44 24 20          	lea    eax,[esp+0x20]
c00052e7:	e8 76 e4 ff ff       	call   c0003762 <dir_alloc>
c00052ec:	89 c6                	mov    esi,eax
c00052ee:	85 c0                	test   eax,eax
c00052f0:	75 65                	jne    c0005357 <f_setlabel+0x187>
c00052f2:	b9 20 00 00 00       	mov    ecx,0x20
c00052f7:	31 d2                	xor    edx,edx
c00052f9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00052fd:	e8 c6 cb ff ff       	call   c0001ec8 <mem_set>
c0005302:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005306:	b9 0b 00 00 00       	mov    ecx,0xb
c000530b:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000530f:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005313:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005317:	e8 97 cb ff ff       	call   c0001eb3 <mem_cpy>
c000531c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005320:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005324:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005328:	e8 f8 da ff ff       	call   c0002e25 <sync_fs>
c000532d:	89 c6                	mov    esi,eax
c000532f:	eb 26                	jmp    c0005357 <f_setlabel+0x187>
c0005331:	83 fb 09             	cmp    ebx,0x9
c0005334:	0f 87 e6 fe ff ff    	ja     c0005220 <f_setlabel+0x50>
c000533a:	89 f0                	mov    eax,esi
c000533c:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005340:	43                   	inc    ebx
c0005341:	89 f8                	mov    eax,edi
c0005343:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005347:	43                   	inc    ebx
c0005348:	e9 ba fe ff ff       	jmp    c0005207 <f_setlabel+0x37>
c000534d:	83 fb 0a             	cmp    ebx,0xa
c0005350:	76 ef                	jbe    c0005341 <f_setlabel+0x171>
c0005352:	e9 c9 fe ff ff       	jmp    c0005220 <f_setlabel+0x50>
c0005357:	83 c4 50             	add    esp,0x50
c000535a:	89 f0                	mov    eax,esi
c000535c:	5b                   	pop    ebx
c000535d:	5e                   	pop    esi
c000535e:	5f                   	pop    edi
c000535f:	c3                   	ret    

c0005360 <f_expand>:
c0005360:	55                   	push   ebp
c0005361:	57                   	push   edi
c0005362:	56                   	push   esi
c0005363:	53                   	push   ebx
c0005364:	83 ec 2c             	sub    esp,0x2c
c0005367:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000536b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000536f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005373:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005377:	89 d8                	mov    eax,ebx
c0005379:	e8 c7 cf ff ff       	call   c0002345 <validate>
c000537e:	89 c6                	mov    esi,eax
c0005380:	85 c0                	test   eax,eax
c0005382:	0f 85 3b 01 00 00    	jne    c00054c3 <f_expand+0x163>
c0005388:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c000538c:	85 f6                	test   esi,esi
c000538e:	0f 85 2f 01 00 00    	jne    c00054c3 <f_expand+0x163>
c0005394:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005399:	75 0a                	jne    c00053a5 <f_expand+0x45>
c000539b:	be 07 00 00 00       	mov    esi,0x7
c00053a0:	e9 1e 01 00 00       	jmp    c00054c3 <f_expand+0x163>
c00053a5:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00053a9:	75 f0                	jne    c000539b <f_expand+0x3b>
c00053ab:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00053af:	74 ea                	je     c000539b <f_expand+0x3b>
c00053b1:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00053b5:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00053b9:	c1 e1 09             	shl    ecx,0x9
c00053bc:	8d 41 ff             	lea    eax,[ecx-0x1]
c00053bf:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00053c3:	0f 95 c0             	setne  al
c00053c6:	31 d2                	xor    edx,edx
c00053c8:	0f b6 c0             	movzx  eax,al
c00053cb:	89 c7                	mov    edi,eax
c00053cd:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053d1:	f7 f1                	div    ecx
c00053d3:	01 f8                	add    eax,edi
c00053d5:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00053d8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00053dc:	83 ff 01             	cmp    edi,0x1
c00053df:	76 05                	jbe    c00053e6 <f_expand+0x86>
c00053e1:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00053e4:	77 05                	ja     c00053eb <f_expand+0x8b>
c00053e6:	bf 02 00 00 00       	mov    edi,0x2
c00053eb:	89 3c 24             	mov    DWORD PTR [esp],edi
c00053ee:	89 fd                	mov    ebp,edi
c00053f0:	31 c9                	xor    ecx,ecx
c00053f2:	89 ea                	mov    edx,ebp
c00053f4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00053f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00053fa:	45                   	inc    ebp
c00053fb:	e8 c4 de ff ff       	call   c00032c4 <get_fat.isra.2>
c0005400:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005404:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005408:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000540b:	77 05                	ja     c0005412 <f_expand+0xb2>
c000540d:	bd 02 00 00 00       	mov    ebp,0x2
c0005412:	83 f8 01             	cmp    eax,0x1
c0005415:	74 20                	je     c0005437 <f_expand+0xd7>
c0005417:	83 f8 ff             	cmp    eax,0xffffffff
c000541a:	74 25                	je     c0005441 <f_expand+0xe1>
c000541c:	85 c0                	test   eax,eax
c000541e:	75 09                	jne    c0005429 <f_expand+0xc9>
c0005420:	41                   	inc    ecx
c0005421:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005425:	75 07                	jne    c000542e <f_expand+0xce>
c0005427:	eb 1f                	jmp    c0005448 <f_expand+0xe8>
c0005429:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000542c:	31 c9                	xor    ecx,ecx
c000542e:	39 fd                	cmp    ebp,edi
c0005430:	75 c0                	jne    c00053f2 <f_expand+0x92>
c0005432:	e9 64 ff ff ff       	jmp    c000539b <f_expand+0x3b>
c0005437:	be 02 00 00 00       	mov    esi,0x2
c000543c:	e9 82 00 00 00       	jmp    c00054c3 <f_expand+0x163>
c0005441:	be 01 00 00 00       	mov    esi,0x1
c0005446:	eb 7b                	jmp    c00054c3 <f_expand+0x163>
c0005448:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000544d:	74 2b                	je     c000547a <f_expand+0x11a>
c000544f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005452:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005456:	85 ed                	test   ebp,ebp
c0005458:	74 24                	je     c000547e <f_expand+0x11e>
c000545a:	83 c9 ff             	or     ecx,0xffffffff
c000545d:	83 fd 01             	cmp    ebp,0x1
c0005460:	74 03                	je     c0005465 <f_expand+0x105>
c0005462:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005465:	89 fa                	mov    edx,edi
c0005467:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000546b:	e8 c2 d3 ff ff       	call   c0002832 <put_fat>
c0005470:	85 c0                	test   eax,eax
c0005472:	75 4d                	jne    c00054c1 <f_expand+0x161>
c0005474:	89 f8                	mov    eax,edi
c0005476:	4d                   	dec    ebp
c0005477:	47                   	inc    edi
c0005478:	eb dc                	jmp    c0005456 <f_expand+0xf6>
c000547a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000547d:	48                   	dec    eax
c000547e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005482:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005487:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000548a:	74 37                	je     c00054c3 <f_expand+0x163>
c000548c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000548f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005492:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005496:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005499:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000549c:	83 c8 40             	or     eax,0x40
c000549f:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00054a2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00054a5:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00054a8:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00054ab:	39 c8                	cmp    eax,ecx
c00054ad:	77 14                	ja     c00054c3 <f_expand+0x163>
c00054af:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00054b3:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00054b6:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00054b9:	83 c8 01             	or     eax,0x1
c00054bc:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00054bf:	eb 02                	jmp    c00054c3 <f_expand+0x163>
c00054c1:	89 c6                	mov    esi,eax
c00054c3:	83 c4 2c             	add    esp,0x2c
c00054c6:	89 f0                	mov    eax,esi
c00054c8:	5b                   	pop    ebx
c00054c9:	5e                   	pop    esi
c00054ca:	5f                   	pop    edi
c00054cb:	5d                   	pop    ebp
c00054cc:	c3                   	ret    

c00054cd <f_mkfs>:
c00054cd:	55                   	push   ebp
c00054ce:	57                   	push   edi
c00054cf:	56                   	push   esi
c00054d0:	be 0b 00 00 00       	mov    esi,0xb
c00054d5:	53                   	push   ebx
c00054d6:	83 ec 5c             	sub    esp,0x5c
c00054d9:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00054dd:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c00054e1:	8d 44 24 70          	lea    eax,[esp+0x70]
c00054e5:	e8 0e ce ff ff       	call   c00022f8 <get_ldnumber>
c00054ea:	85 c0                	test   eax,eax
c00054ec:	0f 88 d1 07 00 00    	js     c0005cc3 <f_mkfs+0x7f6>
c00054f2:	8b 14 85 80 6c 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9380]
c00054f9:	85 d2                	test   edx,edx
c00054fb:	74 03                	je     c0005500 <f_mkfs+0x33>
c00054fd:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005500:	85 db                	test   ebx,ebx
c0005502:	75 05                	jne    c0005509 <f_mkfs+0x3c>
c0005504:	bb c0 f0 02 c0       	mov    ebx,0xc002f0c0
c0005509:	83 ec 0c             	sub    esp,0xc
c000550c:	0f b6 c0             	movzx  eax,al
c000550f:	be 03 00 00 00       	mov    esi,0x3
c0005514:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005518:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000551c:	e8 18 c9 ff ff       	call   c0001e39 <disk_initialize>
c0005521:	83 c4 10             	add    esp,0x10
c0005524:	a8 01                	test   al,0x1
c0005526:	0f 85 97 07 00 00    	jne    c0005cc3 <f_mkfs+0x7f6>
c000552c:	be 0a 00 00 00       	mov    esi,0xa
c0005531:	a8 04                	test   al,0x4
c0005533:	0f 85 8a 07 00 00    	jne    c0005cc3 <f_mkfs+0x7f6>
c0005539:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000553c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005540:	85 c0                	test   eax,eax
c0005542:	75 20                	jne    c0005564 <f_mkfs+0x97>
c0005544:	51                   	push   ecx
c0005545:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005549:	50                   	push   eax
c000554a:	6a 03                	push   0x3
c000554c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005550:	e8 13 c9 ff ff       	call   c0001e68 <disk_ioctl>
c0005555:	83 c4 10             	add    esp,0x10
c0005558:	85 c0                	test   eax,eax
c000555a:	74 08                	je     c0005564 <f_mkfs+0x97>
c000555c:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c0005564:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0005568:	8d 42 ff             	lea    eax,[edx-0x1]
c000556b:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005570:	77 04                	ja     c0005576 <f_mkfs+0xa9>
c0005572:	85 c2                	test   edx,eax
c0005574:	74 08                	je     c000557e <f_mkfs+0xb1>
c0005576:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c000557e:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005581:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0005585:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005589:	48                   	dec    eax
c000558a:	3c 01                	cmp    al,0x1
c000558c:	76 05                	jbe    c0005593 <f_mkfs+0xc6>
c000558e:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005593:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005596:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000559a:	48                   	dec    eax
c000559b:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00055a0:	77 07                	ja     c00055a9 <f_mkfs+0xdc>
c00055a2:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00055a7:	74 08                	je     c00055b1 <f_mkfs+0xe4>
c00055a9:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c00055b1:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00055b4:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c00055ba:	77 07                	ja     c00055c3 <f_mkfs+0xf6>
c00055bc:	8d 47 ff             	lea    eax,[edi-0x1]
c00055bf:	85 f8                	test   eax,edi
c00055c1:	74 02                	je     c00055c5 <f_mkfs+0xf8>
c00055c3:	31 ff                	xor    edi,edi
c00055c5:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c00055cd:	77 0a                	ja     c00055d9 <f_mkfs+0x10c>
c00055cf:	be 11 00 00 00       	mov    esi,0x11
c00055d4:	e9 ea 06 00 00       	jmp    c0005cc3 <f_mkfs+0x7f6>
c00055d9:	8b 33                	mov    esi,DWORD PTR [ebx]
c00055db:	85 ed                	test   ebp,ebp
c00055dd:	89 eb                	mov    ebx,ebp
c00055df:	75 1e                	jne    c00055ff <f_mkfs+0x132>
c00055e1:	83 ec 0c             	sub    esp,0xc
c00055e4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00055eb:	25 00 fe ff ff       	and    eax,0xfffffe00
c00055f0:	50                   	push   eax
c00055f1:	e8 da 06 00 00       	call   c0005cd0 <ff_memalloc>
c00055f6:	83 c4 10             	add    esp,0x10
c00055f9:	89 c3                	mov    ebx,eax
c00055fb:	85 c0                	test   eax,eax
c00055fd:	74 d0                	je     c00055cf <f_mkfs+0x102>
c00055ff:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005607:	52                   	push   edx
c0005608:	8d 44 24 48          	lea    eax,[esp+0x48]
c000560c:	50                   	push   eax
c000560d:	6a 01                	push   0x1
c000560f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005613:	e8 50 c8 ff ff       	call   c0001e68 <disk_ioctl>
c0005618:	83 c4 10             	add    esp,0x10
c000561b:	85 c0                	test   eax,eax
c000561d:	0f 85 49 06 00 00    	jne    c0005c6c <f_mkfs+0x79f>
c0005623:	89 f0                	mov    eax,esi
c0005625:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000562d:	83 e0 08             	and    eax,0x8
c0005630:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005634:	75 18                	jne    c000564e <f_mkfs+0x181>
c0005636:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000563a:	83 f8 3f             	cmp    eax,0x3f
c000563d:	76 0f                	jbe    c000564e <f_mkfs+0x181>
c000563f:	83 e8 3f             	sub    eax,0x3f
c0005642:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000564a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000564e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005652:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005656:	83 f8 7f             	cmp    eax,0x7f
c0005659:	0f 86 5b 02 00 00    	jbe    c00058ba <f_mkfs+0x3ed>
c000565f:	b9 80 00 00 00       	mov    ecx,0x80
c0005664:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000566a:	77 05                	ja     c0005671 <f_mkfs+0x1a4>
c000566c:	c1 ef 09             	shr    edi,0x9
c000566f:	89 f9                	mov    ecx,edi
c0005671:	89 f0                	mov    eax,esi
c0005673:	89 f7                	mov    edi,esi
c0005675:	83 e0 01             	and    eax,0x1
c0005678:	83 e7 02             	and    edi,0x2
c000567b:	0f b6 c0             	movzx  eax,al
c000567e:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c0005682:	74 0a                	je     c000568e <f_mkfs+0x1c1>
c0005684:	85 c0                	test   eax,eax
c0005686:	0f 84 4f 01 00 00    	je     c00057db <f_mkfs+0x30e>
c000568c:	eb 37                	jmp    c00056c5 <f_mkfs+0x1f8>
c000568e:	be 13 00 00 00       	mov    esi,0x13
c0005693:	85 c0                	test   eax,eax
c0005695:	75 2e                	jne    c00056c5 <f_mkfs+0x1f8>
c0005697:	e9 e7 05 00 00       	jmp    c0005c83 <f_mkfs+0x7b6>
c000569c:	83 f8 02             	cmp    eax,0x2
c000569f:	0f 85 0d 02 00 00    	jne    c00058b2 <f_mkfs+0x3e5>
c00056a5:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00056ab:	0f 86 e4 01 00 00    	jbe    c0005895 <f_mkfs+0x3c8>
c00056b1:	85 c9                	test   ecx,ecx
c00056b3:	0f 85 dc 05 00 00    	jne    c0005c95 <f_mkfs+0x7c8>
c00056b9:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00056bc:	83 f9 40             	cmp    ecx,0x40
c00056bf:	0f 87 e0 05 00 00    	ja     c0005ca5 <f_mkfs+0x7d8>
c00056c5:	89 cf                	mov    edi,ecx
c00056c7:	85 c9                	test   ecx,ecx
c00056c9:	75 1c                	jne    c00056e7 <f_mkfs+0x21a>
c00056cb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00056cf:	b8 a0 f0 02 c0       	mov    eax,0xc002f0a0
c00056d4:	c1 ee 0c             	shr    esi,0xc
c00056d7:	bf 01 00 00 00       	mov    edi,0x1
c00056dc:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00056df:	85 d2                	test   edx,edx
c00056e1:	0f 85 63 01 00 00    	jne    c000584a <f_mkfs+0x37d>
c00056e7:	31 d2                	xor    edx,edx
c00056e9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056ed:	f7 f7                	div    edi
c00056ef:	3d f5 0f 00 00       	cmp    eax,0xff5
c00056f4:	0f 86 62 01 00 00    	jbe    c000585c <f_mkfs+0x38f>
c00056fa:	83 c0 02             	add    eax,0x2
c00056fd:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005702:	01 c0                	add    eax,eax
c0005704:	05 ff 01 00 00       	add    eax,0x1ff
c0005709:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005711:	c1 e8 09             	shr    eax,0x9
c0005714:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005718:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000571c:	c1 e0 05             	shl    eax,0x5
c000571f:	c1 e8 09             	shr    eax,0x9
c0005722:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005726:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000572b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000572f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005733:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005737:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000573b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000573f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005744:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005748:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000574c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0005750:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0005754:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005758:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c000575c:	f7 d8                	neg    eax
c000575e:	21 c6                	and    esi,eax
c0005760:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005765:	29 d6                	sub    esi,edx
c0005767:	83 f8 03             	cmp    eax,0x3
c000576a:	0f 85 ff 00 00 00    	jne    c000586f <f_mkfs+0x3a2>
c0005770:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005774:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005778:	89 f8                	mov    eax,edi
c000577a:	c1 e0 04             	shl    eax,0x4
c000577d:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0005781:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005785:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005789:	0f 82 2b 01 00 00    	jb     c00058ba <f_mkfs+0x3ed>
c000578f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005793:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005797:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c000579b:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00057a0:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00057a4:	29 d0                	sub    eax,edx
c00057a6:	31 d2                	xor    edx,edx
c00057a8:	f7 f7                	div    edi
c00057aa:	89 c6                	mov    esi,eax
c00057ac:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00057b1:	83 f8 03             	cmp    eax,0x3
c00057b4:	0f 85 e2 fe ff ff    	jne    c000569c <f_mkfs+0x1cf>
c00057ba:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00057c0:	0f 87 03 01 00 00    	ja     c00058c9 <f_mkfs+0x3fc>
c00057c6:	85 c9                	test   ecx,ecx
c00057c8:	0f 85 ec 00 00 00    	jne    c00058ba <f_mkfs+0x3ed>
c00057ce:	83 ff 01             	cmp    edi,0x1
c00057d1:	0f 86 e3 00 00 00    	jbe    c00058ba <f_mkfs+0x3ed>
c00057d7:	d1 ef                	shr    edi,1
c00057d9:	89 f9                	mov    ecx,edi
c00057db:	89 ce                	mov    esi,ecx
c00057dd:	85 c9                	test   ecx,ecx
c00057df:	75 25                	jne    c0005806 <f_mkfs+0x339>
c00057e1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00057e5:	b8 b0 f0 02 c0       	mov    eax,0xc002f0b0
c00057ea:	c1 ee 11             	shr    esi,0x11
c00057ed:	b9 01 00 00 00       	mov    ecx,0x1
c00057f2:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00057f5:	85 d2                	test   edx,edx
c00057f7:	74 0b                	je     c0005804 <f_mkfs+0x337>
c00057f9:	83 c0 02             	add    eax,0x2
c00057fc:	39 f2                	cmp    edx,esi
c00057fe:	77 04                	ja     c0005804 <f_mkfs+0x337>
c0005800:	01 c9                	add    ecx,ecx
c0005802:	eb ee                	jmp    c00057f2 <f_mkfs+0x325>
c0005804:	31 f6                	xor    esi,esi
c0005806:	31 d2                	xor    edx,edx
c0005808:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000580c:	f7 f1                	div    ecx
c000580e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005815:	2d f6 ff 00 00       	sub    eax,0xfff6
c000581a:	c1 ea 09             	shr    edx,0x9
c000581d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005822:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005826:	0f 87 8e 00 00 00    	ja     c00058ba <f_mkfs+0x3ed>
c000582c:	89 cf                	mov    edi,ecx
c000582e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005836:	89 f1                	mov    ecx,esi
c0005838:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005840:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005845:	e9 dc fe ff ff       	jmp    c0005726 <f_mkfs+0x259>
c000584a:	83 c0 02             	add    eax,0x2
c000584d:	39 f2                	cmp    edx,esi
c000584f:	0f 87 92 fe ff ff    	ja     c00056e7 <f_mkfs+0x21a>
c0005855:	01 ff                	add    edi,edi
c0005857:	e9 80 fe ff ff       	jmp    c00056dc <f_mkfs+0x20f>
c000585c:	8d 04 40             	lea    eax,[eax+eax*2]
c000585f:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005864:	40                   	inc    eax
c0005865:	d1 e8                	shr    eax,1
c0005867:	83 c0 03             	add    eax,0x3
c000586a:	e9 95 fe ff ff       	jmp    c0005704 <f_mkfs+0x237>
c000586f:	31 d2                	xor    edx,edx
c0005871:	89 f0                	mov    eax,esi
c0005873:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005877:	85 d2                	test   edx,edx
c0005879:	74 09                	je     c0005884 <f_mkfs+0x3b7>
c000587b:	4e                   	dec    esi
c000587c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005880:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005884:	89 f0                	mov    eax,esi
c0005886:	31 d2                	xor    edx,edx
c0005888:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000588c:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005890:	e9 e3 fe ff ff       	jmp    c0005778 <f_mkfs+0x2ab>
c0005895:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c000589b:	77 2c                	ja     c00058c9 <f_mkfs+0x3fc>
c000589d:	85 c9                	test   ecx,ecx
c000589f:	75 19                	jne    c00058ba <f_mkfs+0x3ed>
c00058a1:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00058a4:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00058aa:	0f 86 15 fe ff ff    	jbe    c00056c5 <f_mkfs+0x1f8>
c00058b0:	eb 08                	jmp    c00058ba <f_mkfs+0x3ed>
c00058b2:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00058b8:	76 0a                	jbe    c00058c4 <f_mkfs+0x3f7>
c00058ba:	be 0e 00 00 00       	mov    esi,0xe
c00058bf:	e9 bf 03 00 00       	jmp    c0005c83 <f_mkfs+0x7b6>
c00058c4:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00058c9:	31 d2                	xor    edx,edx
c00058cb:	b9 00 02 00 00       	mov    ecx,0x200
c00058d0:	89 d8                	mov    eax,ebx
c00058d2:	e8 f1 c5 ff ff       	call   c0001ec8 <mem_set>
c00058d7:	b9 0b 00 00 00       	mov    ecx,0xb
c00058dc:	ba 52 f0 02 c0       	mov    edx,0xc002f052
c00058e1:	89 d8                	mov    eax,ebx
c00058e3:	e8 cb c5 ff ff       	call   c0001eb3 <mem_cpy>
c00058e8:	8d 43 0b             	lea    eax,[ebx+0xb]
c00058eb:	ba 00 02 00 00       	mov    edx,0x200
c00058f0:	e8 b7 c5 ff ff       	call   c0001eac <st_word>
c00058f5:	89 f8                	mov    eax,edi
c00058f7:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c00058fc:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c00058ff:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005902:	e8 a5 c5 ff ff       	call   c0001eac <st_word>
c0005907:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000590b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000590e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005913:	83 f8 03             	cmp    eax,0x3
c0005916:	75 08                	jne    c0005920 <f_mkfs+0x453>
c0005918:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005920:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005924:	8d 43 11             	lea    eax,[ebx+0x11]
c0005927:	e8 80 c5 ff ff       	call   c0001eac <st_word>
c000592c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005930:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005936:	77 0a                	ja     c0005942 <f_mkfs+0x475>
c0005938:	8d 43 13             	lea    eax,[ebx+0x13]
c000593b:	e8 6c c5 ff ff       	call   c0001eac <st_word>
c0005940:	eb 08                	jmp    c000594a <f_mkfs+0x47d>
c0005942:	8d 43 20             	lea    eax,[ebx+0x20]
c0005945:	e8 66 c5 ff ff       	call   c0001eb0 <st_dword>
c000594a:	8d 43 18             	lea    eax,[ebx+0x18]
c000594d:	ba 3f 00 00 00       	mov    edx,0x3f
c0005952:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005956:	e8 51 c5 ff ff       	call   c0001eac <st_word>
c000595b:	8d 43 1a             	lea    eax,[ebx+0x1a]
c000595e:	ba ff 00 00 00       	mov    edx,0xff
c0005963:	e8 44 c5 ff ff       	call   c0001eac <st_word>
c0005968:	8d 43 1c             	lea    eax,[ebx+0x1c]
c000596b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000596f:	e8 3c c5 ff ff       	call   c0001eb0 <st_dword>
c0005974:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005979:	83 f8 03             	cmp    eax,0x3
c000597c:	75 57                	jne    c00059d5 <f_mkfs+0x508>
c000597e:	8d 43 43             	lea    eax,[ebx+0x43]
c0005981:	ba 00 00 21 50       	mov    edx,0x50210000
c0005986:	e8 25 c5 ff ff       	call   c0001eb0 <st_dword>
c000598b:	8d 43 24             	lea    eax,[ebx+0x24]
c000598e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005992:	e8 19 c5 ff ff       	call   c0001eb0 <st_dword>
c0005997:	8d 43 2c             	lea    eax,[ebx+0x2c]
c000599a:	ba 02 00 00 00       	mov    edx,0x2
c000599f:	e8 0c c5 ff ff       	call   c0001eb0 <st_dword>
c00059a4:	8d 43 30             	lea    eax,[ebx+0x30]
c00059a7:	ba 01 00 00 00       	mov    edx,0x1
c00059ac:	e8 fb c4 ff ff       	call   c0001eac <st_word>
c00059b1:	8d 43 32             	lea    eax,[ebx+0x32]
c00059b4:	ba 06 00 00 00       	mov    edx,0x6
c00059b9:	e8 ee c4 ff ff       	call   c0001eac <st_word>
c00059be:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c00059c2:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c00059c6:	8d 43 47             	lea    eax,[ebx+0x47]
c00059c9:	b9 13 00 00 00       	mov    ecx,0x13
c00059ce:	ba 5e f0 02 c0       	mov    edx,0xc002f05e
c00059d3:	eb 2f                	jmp    c0005a04 <f_mkfs+0x537>
c00059d5:	8d 43 27             	lea    eax,[ebx+0x27]
c00059d8:	ba 00 00 21 50       	mov    edx,0x50210000
c00059dd:	e8 ce c4 ff ff       	call   c0001eb0 <st_dword>
c00059e2:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c00059e7:	8d 43 16             	lea    eax,[ebx+0x16]
c00059ea:	e8 bd c4 ff ff       	call   c0001eac <st_word>
c00059ef:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c00059f3:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c00059f7:	8d 43 2b             	lea    eax,[ebx+0x2b]
c00059fa:	b9 13 00 00 00       	mov    ecx,0x13
c00059ff:	ba 72 f0 02 c0       	mov    edx,0xc002f072
c0005a04:	e8 aa c4 ff ff       	call   c0001eb3 <mem_cpy>
c0005a09:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005a0f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005a14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005a18:	e8 8f c4 ff ff       	call   c0001eac <st_word>
c0005a1d:	6a 01                	push   0x1
c0005a1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005a23:	53                   	push   ebx
c0005a24:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a28:	e8 25 c4 ff ff       	call   c0001e52 <disk_write>
c0005a2d:	83 c4 10             	add    esp,0x10
c0005a30:	85 c0                	test   eax,eax
c0005a32:	0f 85 34 02 00 00    	jne    c0005c6c <f_mkfs+0x79f>
c0005a38:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a3d:	83 f8 03             	cmp    eax,0x3
c0005a40:	0f 85 98 00 00 00    	jne    c0005ade <f_mkfs+0x611>
c0005a46:	6a 01                	push   0x1
c0005a48:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a4c:	83 c0 06             	add    eax,0x6
c0005a4f:	50                   	push   eax
c0005a50:	53                   	push   ebx
c0005a51:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a55:	e8 f8 c3 ff ff       	call   c0001e52 <disk_write>
c0005a5a:	b9 00 02 00 00       	mov    ecx,0x200
c0005a5f:	31 d2                	xor    edx,edx
c0005a61:	89 d8                	mov    eax,ebx
c0005a63:	e8 60 c4 ff ff       	call   c0001ec8 <mem_set>
c0005a68:	ba 52 52 61 41       	mov    edx,0x41615252
c0005a6d:	89 d8                	mov    eax,ebx
c0005a6f:	e8 3c c4 ff ff       	call   c0001eb0 <st_dword>
c0005a74:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005a7a:	ba 72 72 41 61       	mov    edx,0x61417272
c0005a7f:	e8 2c c4 ff ff       	call   c0001eb0 <st_dword>
c0005a84:	8d 56 ff             	lea    edx,[esi-0x1]
c0005a87:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005a8d:	e8 1e c4 ff ff       	call   c0001eb0 <st_dword>
c0005a92:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005a98:	ba 02 00 00 00       	mov    edx,0x2
c0005a9d:	e8 0e c4 ff ff       	call   c0001eb0 <st_dword>
c0005aa2:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005aa7:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005aad:	e8 fa c3 ff ff       	call   c0001eac <st_word>
c0005ab2:	6a 01                	push   0x1
c0005ab4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005ab8:	83 c0 07             	add    eax,0x7
c0005abb:	50                   	push   eax
c0005abc:	53                   	push   ebx
c0005abd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005ac1:	e8 8c c3 ff ff       	call   c0001e52 <disk_write>
c0005ac6:	83 c4 20             	add    esp,0x20
c0005ac9:	6a 01                	push   0x1
c0005acb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005acf:	40                   	inc    eax
c0005ad0:	50                   	push   eax
c0005ad1:	53                   	push   ebx
c0005ad2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ad6:	e8 77 c3 ff ff       	call   c0001e52 <disk_write>
c0005adb:	83 c4 10             	add    esp,0x10
c0005ade:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005ae2:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005ae6:	c1 e8 09             	shr    eax,0x9
c0005ae9:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005aef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005af3:	31 d2                	xor    edx,edx
c0005af5:	89 d8                	mov    eax,ebx
c0005af7:	e8 cc c3 ff ff       	call   c0001ec8 <mem_set>
c0005afc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b01:	31 c9                	xor    ecx,ecx
c0005b03:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005b0b:	83 f8 01             	cmp    eax,0x1
c0005b0e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005b12:	0f 94 c1             	sete   cl
c0005b15:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005b19:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005b1d:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005b25:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005b2d:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005b32:	75 21                	jne    c0005b55 <f_mkfs+0x688>
c0005b34:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005b39:	89 d8                	mov    eax,ebx
c0005b3b:	e8 70 c3 ff ff       	call   c0001eb0 <st_dword>
c0005b40:	8d 43 04             	lea    eax,[ebx+0x4]
c0005b43:	83 ca ff             	or     edx,0xffffffff
c0005b46:	e8 65 c3 ff ff       	call   c0001eb0 <st_dword>
c0005b4b:	8d 43 08             	lea    eax,[ebx+0x8]
c0005b4e:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005b53:	eb 06                	jmp    c0005b5b <f_mkfs+0x68e>
c0005b55:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005b59:	89 d8                	mov    eax,ebx
c0005b5b:	e8 50 c3 ff ff       	call   c0001eb0 <st_dword>
c0005b60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005b64:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005b68:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005b6c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b70:	39 ce                	cmp    esi,ecx
c0005b72:	76 02                	jbe    c0005b76 <f_mkfs+0x6a9>
c0005b74:	89 ce                	mov    esi,ecx
c0005b76:	56                   	push   esi
c0005b77:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b7b:	53                   	push   ebx
c0005b7c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b80:	e8 cd c2 ff ff       	call   c0001e52 <disk_write>
c0005b85:	83 c4 10             	add    esp,0x10
c0005b88:	85 c0                	test   eax,eax
c0005b8a:	0f 85 dc 00 00 00    	jne    c0005c6c <f_mkfs+0x79f>
c0005b90:	31 d2                	xor    edx,edx
c0005b92:	b9 00 02 00 00       	mov    ecx,0x200
c0005b97:	89 d8                	mov    eax,ebx
c0005b99:	e8 2a c3 ff ff       	call   c0001ec8 <mem_set>
c0005b9e:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005ba2:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005ba6:	75 c0                	jne    c0005b68 <f_mkfs+0x69b>
c0005ba8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005bac:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005bb4:	40                   	inc    eax
c0005bb5:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005bb9:	0f 87 6e ff ff ff    	ja     c0005b2d <f_mkfs+0x660>
c0005bbf:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005bc4:	83 f8 03             	cmp    eax,0x3
c0005bc7:	74 04                	je     c0005bcd <f_mkfs+0x700>
c0005bc9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005bcd:	89 fe                	mov    esi,edi
c0005bcf:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005bd3:	76 04                	jbe    c0005bd9 <f_mkfs+0x70c>
c0005bd5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005bd9:	56                   	push   esi
c0005bda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005bde:	53                   	push   ebx
c0005bdf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005be3:	e8 6a c2 ff ff       	call   c0001e52 <disk_write>
c0005be8:	83 c4 10             	add    esp,0x10
c0005beb:	85 c0                	test   eax,eax
c0005bed:	75 7d                	jne    c0005c6c <f_mkfs+0x79f>
c0005bef:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005bf3:	29 f7                	sub    edi,esi
c0005bf5:	75 d6                	jne    c0005bcd <f_mkfs+0x700>
c0005bf7:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005bfc:	b9 0c 00 00 00       	mov    ecx,0xc
c0005c01:	83 f8 03             	cmp    eax,0x3
c0005c04:	74 1e                	je     c0005c24 <f_mkfs+0x757>
c0005c06:	b9 06 00 00 00       	mov    ecx,0x6
c0005c0b:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005c13:	77 0f                	ja     c0005c24 <f_mkfs+0x757>
c0005c15:	b9 04 00 00 00       	mov    ecx,0x4
c0005c1a:	83 f8 02             	cmp    eax,0x2
c0005c1d:	74 05                	je     c0005c24 <f_mkfs+0x757>
c0005c1f:	b9 01 00 00 00       	mov    ecx,0x1
c0005c24:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005c29:	75 2a                	jne    c0005c55 <f_mkfs+0x788>
c0005c2b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005c2f:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005c37:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005c3b:	83 ec 0c             	sub    esp,0xc
c0005c3e:	53                   	push   ebx
c0005c3f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005c43:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c47:	e8 89 d2 ff ff       	call   c0002ed5 <create_partition>
c0005c4c:	83 c4 10             	add    esp,0x10
c0005c4f:	89 c6                	mov    esi,eax
c0005c51:	85 c0                	test   eax,eax
c0005c53:	75 2e                	jne    c0005c83 <f_mkfs+0x7b6>
c0005c55:	31 f6                	xor    esi,esi
c0005c57:	50                   	push   eax
c0005c58:	6a 00                	push   0x0
c0005c5a:	6a 00                	push   0x0
c0005c5c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c60:	e8 03 c2 ff ff       	call   c0001e68 <disk_ioctl>
c0005c65:	83 c4 10             	add    esp,0x10
c0005c68:	85 c0                	test   eax,eax
c0005c6a:	74 17                	je     c0005c83 <f_mkfs+0x7b6>
c0005c6c:	85 ed                	test   ebp,ebp
c0005c6e:	75 0c                	jne    c0005c7c <f_mkfs+0x7af>
c0005c70:	83 ec 0c             	sub    esp,0xc
c0005c73:	53                   	push   ebx
c0005c74:	e8 6f 00 00 00       	call   c0005ce8 <ff_memfree>
c0005c79:	83 c4 10             	add    esp,0x10
c0005c7c:	be 01 00 00 00       	mov    esi,0x1
c0005c81:	eb 40                	jmp    c0005cc3 <f_mkfs+0x7f6>
c0005c83:	85 ed                	test   ebp,ebp
c0005c85:	75 3c                	jne    c0005cc3 <f_mkfs+0x7f6>
c0005c87:	83 ec 0c             	sub    esp,0xc
c0005c8a:	53                   	push   ebx
c0005c8b:	e8 58 00 00 00       	call   c0005ce8 <ff_memfree>
c0005c90:	83 c4 10             	add    esp,0x10
c0005c93:	eb 2e                	jmp    c0005cc3 <f_mkfs+0x7f6>
c0005c95:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c9a:	0f 85 3b fb ff ff    	jne    c00057db <f_mkfs+0x30e>
c0005ca0:	e9 15 fc ff ff       	jmp    c00058ba <f_mkfs+0x3ed>
c0005ca5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005caa:	0f 85 31 fb ff ff    	jne    c00057e1 <f_mkfs+0x314>
c0005cb0:	89 cf                	mov    edi,ecx
c0005cb2:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005cb8:	0f 86 29 fa ff ff    	jbe    c00056e7 <f_mkfs+0x21a>
c0005cbe:	e9 f7 fb ff ff       	jmp    c00058ba <f_mkfs+0x3ed>
c0005cc3:	83 c4 5c             	add    esp,0x5c
c0005cc6:	89 f0                	mov    eax,esi
c0005cc8:	5b                   	pop    ebx
c0005cc9:	5e                   	pop    esi
c0005cca:	5f                   	pop    edi
c0005ccb:	5d                   	pop    ebp
c0005ccc:	c3                   	ret    
c0005ccd:	66 90                	xchg   ax,ax
c0005ccf:	90                   	nop

c0005cd0 <ff_memalloc>:
c0005cd0:	83 ec 0c             	sub    esp,0xc
c0005cd3:	83 ec 0c             	sub    esp,0xc
c0005cd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005cda:	e8 d3 05 01 00       	call   c00162b2 <malloc>
c0005cdf:	83 c4 10             	add    esp,0x10
c0005ce2:	83 c4 0c             	add    esp,0xc
c0005ce5:	c3                   	ret    
c0005ce6:	66 90                	xchg   ax,ax

c0005ce8 <ff_memfree>:
c0005ce8:	83 ec 0c             	sub    esp,0xc
c0005ceb:	83 ec 0c             	sub    esp,0xc
c0005cee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005cf2:	e8 cb 05 01 00       	call   c00162c2 <free>
c0005cf7:	83 c4 10             	add    esp,0x10
c0005cfa:	90                   	nop
c0005cfb:	83 c4 0c             	add    esp,0xc
c0005cfe:	c3                   	ret    
c0005cff:	90                   	nop

c0005d00 <ff_uni2oem>:
c0005d00:	83 ec 14             	sub    esp,0x14
c0005d03:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d07:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d0b:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005d12:	c7 44 24 0c a0 f4 02 c0 	mov    DWORD PTR [esp+0xc],0xc002f4a0
c0005d1a:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005d1f:	77 0b                	ja     c0005d2c <ff_uni2oem+0x2c>
c0005d21:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005d25:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005d2a:	eb 68                	jmp    c0005d94 <ff_uni2oem+0x94>
c0005d2c:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005d34:	77 5e                	ja     c0005d94 <ff_uni2oem+0x94>
c0005d36:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d3a:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d3f:	75 53                	jne    c0005d94 <ff_uni2oem+0x94>
c0005d41:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005d48:	eb 12                	jmp    c0005d5c <ff_uni2oem+0x5c>
c0005d4a:	66 90                	xchg   ax,ax
c0005d4c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d51:	83 c0 01             	add    eax,0x1
c0005d54:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005d59:	8d 76 00             	lea    esi,[esi+0x0]
c0005d5c:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005d61:	83 f8 7f             	cmp    eax,0x7f
c0005d64:	77 1e                	ja     c0005d84 <ff_uni2oem+0x84>
c0005d66:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005d6b:	01 c0                	add    eax,eax
c0005d6d:	89 c2                	mov    edx,eax
c0005d6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005d73:	01 d0                	add    eax,edx
c0005d75:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d78:	0f b7 c0             	movzx  eax,ax
c0005d7b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005d7f:	75 cb                	jne    c0005d4c <ff_uni2oem+0x4c>
c0005d81:	8d 76 00             	lea    esi,[esi+0x0]
c0005d84:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d89:	83 e8 80             	sub    eax,0xffffff80
c0005d8c:	0f b6 c0             	movzx  eax,al
c0005d8f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005d94:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d99:	83 c4 14             	add    esp,0x14
c0005d9c:	c3                   	ret    
c0005d9d:	8d 76 00             	lea    esi,[esi+0x0]

c0005da0 <ff_oem2uni>:
c0005da0:	83 ec 18             	sub    esp,0x18
c0005da3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005da7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005dab:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005db0:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005db4:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005dbb:	c7 44 24 10 a0 f4 02 c0 	mov    DWORD PTR [esp+0x10],0xc002f4a0
c0005dc3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005dc8:	83 f8 7f             	cmp    eax,0x7f
c0005dcb:	77 0b                	ja     c0005dd8 <ff_oem2uni+0x38>
c0005dcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005dd1:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005dd6:	eb 34                	jmp    c0005e0c <ff_oem2uni+0x6c>
c0005dd8:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005ddc:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005de1:	75 29                	jne    c0005e0c <ff_oem2uni+0x6c>
c0005de3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005de8:	3d ff 00 00 00       	cmp    eax,0xff
c0005ded:	77 1d                	ja     c0005e0c <ff_oem2uni+0x6c>
c0005def:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005df4:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005df9:	01 c0                	add    eax,eax
c0005dfb:	89 c2                	mov    edx,eax
c0005dfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005e01:	01 d0                	add    eax,edx
c0005e03:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e06:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005e0b:	90                   	nop
c0005e0c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005e11:	83 c4 18             	add    esp,0x18
c0005e14:	c3                   	ret    
c0005e15:	8d 76 00             	lea    esi,[esi+0x0]

c0005e18 <ff_wtoupper>:
c0005e18:	83 ec 10             	sub    esp,0x10
c0005e1b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005e23:	0f 87 ab 01 00 00    	ja     c0005fd4 <ff_wtoupper+0x1bc>
c0005e29:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005e2d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e32:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e37:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005e3c:	77 0a                	ja     c0005e48 <ff_wtoupper+0x30>
c0005e3e:	b8 a0 f2 02 c0       	mov    eax,0xc002f2a0
c0005e43:	eb 0b                	jmp    c0005e50 <ff_wtoupper+0x38>
c0005e45:	8d 76 00             	lea    esi,[esi+0x0]
c0005e48:	b8 e0 f1 02 c0       	mov    eax,0xc002f1e0
c0005e4d:	8d 76 00             	lea    esi,[esi+0x0]
c0005e50:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e58:	8d 50 02             	lea    edx,[eax+0x2]
c0005e5b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005e5f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e62:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005e67:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e6c:	85 c0                	test   eax,eax
c0005e6e:	0f 84 54 01 00 00    	je     c0005fc8 <ff_wtoupper+0x1b0>
c0005e74:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e79:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e7e:	39 c2                	cmp    edx,eax
c0005e80:	0f 82 42 01 00 00    	jb     c0005fc8 <ff_wtoupper+0x1b0>
c0005e86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e8a:	8d 50 02             	lea    edx,[eax+0x2]
c0005e8d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005e91:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e94:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e99:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005e9e:	c1 e8 08             	shr    eax,0x8
c0005ea1:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005ea6:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005eab:	0f b6 c0             	movzx  eax,al
c0005eae:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005eb3:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005eb8:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005ebd:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005ec2:	01 ca                	add    edx,ecx
c0005ec4:	39 d0                	cmp    eax,edx
c0005ec6:	0f 8d d8 00 00 00    	jge    c0005fa4 <ff_wtoupper+0x18c>
c0005ecc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ed1:	83 f8 08             	cmp    eax,0x8
c0005ed4:	0f 87 ea 00 00 00    	ja     c0005fc4 <ff_wtoupper+0x1ac>
c0005eda:	8b 04 85 a0 f1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0e60]
c0005ee1:	ff e0                	jmp    eax
c0005ee3:	90                   	nop
c0005ee4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005ee9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005eee:	29 c2                	sub    edx,eax
c0005ef0:	89 d0                	mov    eax,edx
c0005ef2:	01 c0                	add    eax,eax
c0005ef4:	89 c2                	mov    edx,eax
c0005ef6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005efa:	01 d0                	add    eax,edx
c0005efc:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005eff:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f04:	e9 97 00 00 00       	jmp    c0005fa0 <ff_wtoupper+0x188>
c0005f09:	8d 76 00             	lea    esi,[esi+0x0]
c0005f0c:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005f11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005f15:	89 d1                	mov    ecx,edx
c0005f17:	29 c1                	sub    ecx,eax
c0005f19:	89 c8                	mov    eax,ecx
c0005f1b:	83 e0 01             	and    eax,0x1
c0005f1e:	89 c2                	mov    edx,eax
c0005f20:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f25:	29 d0                	sub    eax,edx
c0005f27:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f2c:	eb 72                	jmp    c0005fa0 <ff_wtoupper+0x188>
c0005f2e:	66 90                	xchg   ax,ax
c0005f30:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f35:	83 e8 10             	sub    eax,0x10
c0005f38:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f3d:	eb 61                	jmp    c0005fa0 <ff_wtoupper+0x188>
c0005f3f:	90                   	nop
c0005f40:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f45:	83 e8 20             	sub    eax,0x20
c0005f48:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f4d:	eb 51                	jmp    c0005fa0 <ff_wtoupper+0x188>
c0005f4f:	90                   	nop
c0005f50:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f55:	83 e8 30             	sub    eax,0x30
c0005f58:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f5d:	eb 41                	jmp    c0005fa0 <ff_wtoupper+0x188>
c0005f5f:	90                   	nop
c0005f60:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f65:	83 e8 1a             	sub    eax,0x1a
c0005f68:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f6d:	eb 31                	jmp    c0005fa0 <ff_wtoupper+0x188>
c0005f6f:	90                   	nop
c0005f70:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f75:	83 c0 08             	add    eax,0x8
c0005f78:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f7d:	eb 21                	jmp    c0005fa0 <ff_wtoupper+0x188>
c0005f7f:	90                   	nop
c0005f80:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f85:	83 e8 50             	sub    eax,0x50
c0005f88:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f8d:	eb 11                	jmp    c0005fa0 <ff_wtoupper+0x188>
c0005f8f:	90                   	nop
c0005f90:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f95:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005f9a:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f9f:	90                   	nop
c0005fa0:	eb 22                	jmp    c0005fc4 <ff_wtoupper+0x1ac>
c0005fa2:	66 90                	xchg   ax,ax
c0005fa4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005fa9:	85 c0                	test   eax,eax
c0005fab:	0f 85 a3 fe ff ff    	jne    c0005e54 <ff_wtoupper+0x3c>
c0005fb1:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005fb6:	01 c0                	add    eax,eax
c0005fb8:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005fbc:	e9 93 fe ff ff       	jmp    c0005e54 <ff_wtoupper+0x3c>
c0005fc1:	8d 76 00             	lea    esi,[esi+0x0]
c0005fc4:	90                   	nop
c0005fc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005fc8:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005fcd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005fd1:	8d 76 00             	lea    esi,[esi+0x0]
c0005fd4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005fd8:	83 c4 10             	add    esp,0x10
c0005fdb:	c3                   	ret    

c0005fdc <utf2ucs>:
c0005fdc:	57                   	push   edi
c0005fdd:	31 c9                	xor    ecx,ecx
c0005fdf:	56                   	push   esi
c0005fe0:	89 d7                	mov    edi,edx
c0005fe2:	53                   	push   ebx
c0005fe3:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005fe7:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005feb:	89 de                	mov    esi,ebx
c0005fed:	c1 fe 08             	sar    esi,0x8
c0005ff0:	89 f2                	mov    edx,esi
c0005ff2:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005ff5:	41                   	inc    ecx
c0005ff6:	85 db                	test   ebx,ebx
c0005ff8:	75 e9                	jne    c0005fe3 <utf2ucs+0x7>
c0005ffa:	5b                   	pop    ebx
c0005ffb:	5e                   	pop    esi
c0005ffc:	5f                   	pop    edi
c0005ffd:	c3                   	ret    

c0005ffe <ucs2utfn>:
c0005ffe:	83 e1 fe             	and    ecx,0xfffffffe
c0006001:	01 d1                	add    ecx,edx
c0006003:	39 d1                	cmp    ecx,edx
c0006005:	75 04                	jne    c000600b <ucs2utfn+0xd>
c0006007:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000600a:	c3                   	ret    
c000600b:	57                   	push   edi
c000600c:	56                   	push   esi
c000600d:	53                   	push   ebx
c000600e:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0006011:	83 c2 02             	add    edx,0x2
c0006014:	89 de                	mov    esi,ebx
c0006016:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c000601a:	c1 e6 08             	shl    esi,0x8
c000601d:	09 f3                	or     ebx,esi
c000601f:	83 fb 3b             	cmp    ebx,0x3b
c0006022:	74 50                	je     c0006074 <ucs2utfn+0x76>
c0006024:	83 fb 7f             	cmp    ebx,0x7f
c0006027:	7f 05                	jg     c000602e <ucs2utfn+0x30>
c0006029:	88 18                	mov    BYTE PTR [eax],bl
c000602b:	40                   	inc    eax
c000602c:	eb 42                	jmp    c0006070 <ucs2utfn+0x72>
c000602e:	89 de                	mov    esi,ebx
c0006030:	89 df                	mov    edi,ebx
c0006032:	c1 fe 06             	sar    esi,0x6
c0006035:	83 e7 3f             	and    edi,0x3f
c0006038:	83 cf 80             	or     edi,0xffffff80
c000603b:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0006041:	7f 12                	jg     c0006055 <ucs2utfn+0x57>
c0006043:	83 ce c0             	or     esi,0xffffffc0
c0006046:	83 c0 02             	add    eax,0x2
c0006049:	89 f3                	mov    ebx,esi
c000604b:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c000604e:	89 fb                	mov    ebx,edi
c0006050:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0006053:	eb 1b                	jmp    c0006070 <ucs2utfn+0x72>
c0006055:	c1 fb 0c             	sar    ebx,0xc
c0006058:	83 e6 3f             	and    esi,0x3f
c000605b:	83 cb e0             	or     ebx,0xffffffe0
c000605e:	83 ce 80             	or     esi,0xffffff80
c0006061:	88 18                	mov    BYTE PTR [eax],bl
c0006063:	89 f3                	mov    ebx,esi
c0006065:	83 c0 03             	add    eax,0x3
c0006068:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c000606b:	89 fb                	mov    ebx,edi
c000606d:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0006070:	39 d1                	cmp    ecx,edx
c0006072:	75 9a                	jne    c000600e <ucs2utfn+0x10>
c0006074:	5b                   	pop    ebx
c0006075:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006078:	5e                   	pop    esi
c0006079:	5f                   	pop    edi
c000607a:	c3                   	ret    

c000607b <isjoliet>:
c000607b:	31 d2                	xor    edx,edx
c000607d:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0006080:	75 26                	jne    c00060a8 <isjoliet+0x2d>
c0006082:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0006086:	75 20                	jne    c00060a8 <isjoliet+0x2d>
c0006088:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c000608c:	ba 02 00 00 00       	mov    edx,0x2
c0006091:	83 f8 43             	cmp    eax,0x43
c0006094:	74 12                	je     c00060a8 <isjoliet+0x2d>
c0006096:	ba 03 00 00 00       	mov    edx,0x3
c000609b:	83 f8 45             	cmp    eax,0x45
c000609e:	74 08                	je     c00060a8 <isjoliet+0x2d>
c00060a0:	31 d2                	xor    edx,edx
c00060a2:	83 f8 40             	cmp    eax,0x40
c00060a5:	0f 94 c2             	sete   dl
c00060a8:	89 d0                	mov    eax,edx
c00060aa:	c3                   	ret    

c00060ab <htohl_32>:
c00060ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00060ad:	c3                   	ret    

c00060ae <iso_733>:
c00060ae:	eb fb                	jmp    c00060ab <htohl_32>

c00060b0 <bgrad_cache>:
c00060b0:	83 fa 0e             	cmp    edx,0xe
c00060b3:	77 16                	ja     c00060cb <bgrad_cache+0x1b>
c00060b5:	53                   	push   ebx
c00060b6:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c00060b9:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c00060bd:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c00060c0:	42                   	inc    edx
c00060c1:	83 fa 0f             	cmp    edx,0xf
c00060c4:	75 f3                	jne    c00060b9 <bgrad_cache+0x9>
c00060c6:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c00060c9:	5b                   	pop    ebx
c00060ca:	c3                   	ret    
c00060cb:	c3                   	ret    

c00060cc <ucscompare>:
c00060cc:	55                   	push   ebp
c00060cd:	57                   	push   edi
c00060ce:	89 c7                	mov    edi,eax
c00060d0:	56                   	push   esi
c00060d1:	89 d6                	mov    esi,edx
c00060d3:	53                   	push   ebx
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	83 ec 1c             	sub    esp,0x1c
c00060d9:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c00060dd:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c00060e2:	c1 e3 08             	shl    ebx,0x8
c00060e5:	09 c3                	or     ebx,eax
c00060e7:	39 ca                	cmp    edx,ecx
c00060e9:	7d 42                	jge    c000612d <ucscompare+0x61>
c00060eb:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c00060ef:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c00060f4:	c1 e0 08             	shl    eax,0x8
c00060f7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00060fb:	09 e8                	or     eax,ebp
c00060fd:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006101:	83 f8 3b             	cmp    eax,0x3b
c0006104:	74 27                	je     c000612d <ucscompare+0x61>
c0006106:	83 ec 0c             	sub    esp,0xc
c0006109:	50                   	push   eax
c000610a:	e8 41 a8 ff ff       	call   c0000950 <tolower>
c000610f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006112:	89 c5                	mov    ebp,eax
c0006114:	e8 37 a8 ff ff       	call   c0000950 <tolower>
c0006119:	83 c4 10             	add    esp,0x10
c000611c:	39 c5                	cmp    ebp,eax
c000611e:	75 20                	jne    c0006140 <ucscompare+0x74>
c0006120:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006124:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006128:	83 c2 02             	add    edx,0x2
c000612b:	eb ac                	jmp    c00060d9 <ucscompare+0xd>
c000612d:	85 db                	test   ebx,ebx
c000612f:	0f 95 c2             	setne  dl
c0006132:	31 c0                	xor    eax,eax
c0006134:	83 fb 2f             	cmp    ebx,0x2f
c0006137:	0f 95 c0             	setne  al
c000613a:	21 d0                	and    eax,edx
c000613c:	f7 d8                	neg    eax
c000613e:	eb 03                	jmp    c0006143 <ucscompare+0x77>
c0006140:	83 c8 ff             	or     eax,0xffffffff
c0006143:	83 c4 1c             	add    esp,0x1c
c0006146:	5b                   	pop    ebx
c0006147:	5e                   	pop    esi
c0006148:	5f                   	pop    edi
c0006149:	5d                   	pop    ebp
c000614a:	c3                   	ret    

c000614b <fncompare>:
c000614b:	55                   	push   ebp
c000614c:	57                   	push   edi
c000614d:	89 c7                	mov    edi,eax
c000614f:	56                   	push   esi
c0006150:	89 ce                	mov    esi,ecx
c0006152:	53                   	push   ebx
c0006153:	31 db                	xor    ebx,ebx
c0006155:	83 ec 1c             	sub    esp,0x1c
c0006158:	39 d3                	cmp    ebx,edx
c000615a:	7d 45                	jge    c00061a1 <fncompare+0x56>
c000615c:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0006160:	83 f8 3b             	cmp    eax,0x3b
c0006163:	74 3c                	je     c00061a1 <fncompare+0x56>
c0006165:	83 f8 2e             	cmp    eax,0x2e
c0006168:	75 0e                	jne    c0006178 <fncompare+0x2d>
c000616a:	8d 4a ff             	lea    ecx,[edx-0x1]
c000616d:	39 d9                	cmp    ecx,ebx
c000616f:	74 30                	je     c00061a1 <fncompare+0x56>
c0006171:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0006176:	74 29                	je     c00061a1 <fncompare+0x56>
c0006178:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000617c:	83 ec 0c             	sub    esp,0xc
c000617f:	50                   	push   eax
c0006180:	e8 cb a7 ff ff       	call   c0000950 <tolower>
c0006185:	89 c5                	mov    ebp,eax
c0006187:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c000618b:	89 04 24             	mov    DWORD PTR [esp],eax
c000618e:	e8 bd a7 ff ff       	call   c0000950 <tolower>
c0006193:	83 c4 10             	add    esp,0x10
c0006196:	39 c5                	cmp    ebp,eax
c0006198:	75 1e                	jne    c00061b8 <fncompare+0x6d>
c000619a:	43                   	inc    ebx
c000619b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000619f:	eb b7                	jmp    c0006158 <fncompare+0xd>
c00061a1:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00061a5:	85 d2                	test   edx,edx
c00061a7:	0f 95 c1             	setne  cl
c00061aa:	31 c0                	xor    eax,eax
c00061ac:	83 fa 2f             	cmp    edx,0x2f
c00061af:	0f 95 c0             	setne  al
c00061b2:	21 c8                	and    eax,ecx
c00061b4:	f7 d8                	neg    eax
c00061b6:	eb 03                	jmp    c00061bb <fncompare+0x70>
c00061b8:	83 c8 ff             	or     eax,0xffffffff
c00061bb:	83 c4 1c             	add    esp,0x1c
c00061be:	5b                   	pop    ebx
c00061bf:	5e                   	pop    esi
c00061c0:	5f                   	pop    edi
c00061c1:	5d                   	pop    ebp
c00061c2:	c3                   	ret    

c00061c3 <bclear_cache>:
c00061c3:	83 ec 18             	sub    esp,0x18
c00061c6:	68 a0 f5 02 c0       	push   0xc002f5a0
c00061cb:	e8 34 2d 02 00       	call   c0028f04 <iso_kprintf>
c00061d0:	83 c4 10             	add    esp,0x10
c00061d3:	31 c0                	xor    eax,eax
c00061d5:	8b 14 85 20 60 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9fe0]
c00061dc:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c00061e2:	8b 14 85 80 60 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9f80]
c00061e9:	40                   	inc    eax
c00061ea:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c00061f0:	83 f8 10             	cmp    eax,0x10
c00061f3:	75 e0                	jne    c00061d5 <bclear_cache+0x12>
c00061f5:	83 c4 0c             	add    esp,0xc
c00061f8:	c3                   	ret    

c00061f9 <bclear>:
c00061f9:	eb c8                	jmp    c00061c3 <bclear_cache>

c00061fb <iso_break_all>:
c00061fb:	83 ec 18             	sub    esp,0x18
c00061fe:	68 ae f5 02 c0       	push   0xc002f5ae
c0006203:	e8 fc 2c 02 00       	call   c0028f04 <iso_kprintf>
c0006208:	83 c4 10             	add    esp,0x10
c000620b:	31 c0                	xor    eax,eax
c000620d:	c7 80 b0 6d 03 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffc9250],0x1
c0006217:	05 94 00 00 00       	add    eax,0x94
c000621c:	3d 40 09 00 00       	cmp    eax,0x940
c0006221:	75 ea                	jne    c000620d <iso_break_all+0x12>
c0006223:	83 c4 0c             	add    esp,0xc
c0006226:	c3                   	ret    

c0006227 <isoReadDiscSector>:
c0006227:	83 ec 0c             	sub    esp,0xc
c000622a:	0f be 05 60 60 03 c0 	movsx  eax,BYTE PTR ds:0xc0036060
c0006231:	50                   	push   eax
c0006232:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006236:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000623a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000623e:	e8 65 2c 02 00       	call   c0028ea8 <isoReadDiscSectorHelper>
c0006243:	83 c4 1c             	add    esp,0x1c
c0006246:	c3                   	ret    

c0006247 <bread_cache>:
c0006247:	55                   	push   ebp
c0006248:	57                   	push   edi
c0006249:	89 d7                	mov    edi,edx
c000624b:	56                   	push   esi
c000624c:	ba 0f 00 00 00       	mov    edx,0xf
c0006251:	53                   	push   ebx
c0006252:	89 c6                	mov    esi,eax
c0006254:	83 ec 0c             	sub    esp,0xc
c0006257:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c000625a:	39 38                	cmp    DWORD PTR [eax],edi
c000625c:	74 3c                	je     c000629a <bread_cache+0x53>
c000625e:	4a                   	dec    edx
c000625f:	83 fa ff             	cmp    edx,0xffffffff
c0006262:	75 f3                	jne    c0006257 <bread_cache+0x10>
c0006264:	31 db                	xor    ebx,ebx
c0006266:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0006269:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c000626c:	74 08                	je     c0006276 <bread_cache+0x2f>
c000626e:	43                   	inc    ebx
c000626f:	83 fb 10             	cmp    ebx,0x10
c0006272:	75 f2                	jne    c0006266 <bread_cache+0x1f>
c0006274:	31 db                	xor    ebx,ebx
c0006276:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0006279:	50                   	push   eax
c000627a:	6a 01                	push   0x1
c000627c:	57                   	push   edi
c000627d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006280:	83 c0 04             	add    eax,0x4
c0006283:	50                   	push   eax
c0006284:	e8 9e ff ff ff       	call   c0006227 <isoReadDiscSector>
c0006289:	83 c4 10             	add    esp,0x10
c000628c:	83 c9 ff             	or     ecx,0xffffffff
c000628f:	85 c0                	test   eax,eax
c0006291:	78 13                	js     c00062a6 <bread_cache+0x5f>
c0006293:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006296:	89 da                	mov    edx,ebx
c0006298:	89 38                	mov    DWORD PTR [eax],edi
c000629a:	89 f0                	mov    eax,esi
c000629c:	e8 0f fe ff ff       	call   c00060b0 <bgrad_cache>
c00062a1:	b9 0f 00 00 00       	mov    ecx,0xf
c00062a6:	83 c4 0c             	add    esp,0xc
c00062a9:	89 c8                	mov    eax,ecx
c00062ab:	5b                   	pop    ebx
c00062ac:	5e                   	pop    esi
c00062ad:	5f                   	pop    edi
c00062ae:	5d                   	pop    ebp
c00062af:	c3                   	ret    

c00062b0 <biread>:
c00062b0:	89 c2                	mov    edx,eax
c00062b2:	b8 80 60 03 c0       	mov    eax,0xc0036080
c00062b7:	eb 8e                	jmp    c0006247 <bread_cache>

c00062b9 <bdread>:
c00062b9:	89 c2                	mov    edx,eax
c00062bb:	b8 20 60 03 c0       	mov    eax,0xc0036020
c00062c0:	eb 85                	jmp    c0006247 <bread_cache>

c00062c2 <strnicmp>:
c00062c2:	55                   	push   ebp
c00062c3:	57                   	push   edi
c00062c4:	31 ff                	xor    edi,edi
c00062c6:	56                   	push   esi
c00062c7:	53                   	push   ebx
c00062c8:	83 ec 0c             	sub    esp,0xc
c00062cb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00062cf:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c00062d3:	74 43                	je     c0006318 <strnicmp+0x56>
c00062d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00062d9:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c00062dd:	85 c0                	test   eax,eax
c00062df:	74 37                	je     c0006318 <strnicmp+0x56>
c00062e1:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c00062e5:	85 d2                	test   edx,edx
c00062e7:	74 2f                	je     c0006318 <strnicmp+0x56>
c00062e9:	39 d0                	cmp    eax,edx
c00062eb:	8d 6f 01             	lea    ebp,[edi+0x1]
c00062ee:	75 04                	jne    c00062f4 <strnicmp+0x32>
c00062f0:	89 ef                	mov    edi,ebp
c00062f2:	eb db                	jmp    c00062cf <strnicmp+0xd>
c00062f4:	83 ec 0c             	sub    esp,0xc
c00062f7:	50                   	push   eax
c00062f8:	e8 53 a6 ff ff       	call   c0000950 <tolower>
c00062fd:	89 c3                	mov    ebx,eax
c00062ff:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006303:	89 ef                	mov    edi,ebp
c0006305:	89 04 24             	mov    DWORD PTR [esp],eax
c0006308:	e8 43 a6 ff ff       	call   c0000950 <tolower>
c000630d:	83 c4 10             	add    esp,0x10
c0006310:	29 c3                	sub    ebx,eax
c0006312:	89 d8                	mov    eax,ebx
c0006314:	74 b9                	je     c00062cf <strnicmp+0xd>
c0006316:	eb 02                	jmp    c000631a <strnicmp+0x58>
c0006318:	31 c0                	xor    eax,eax
c000631a:	83 c4 0c             	add    esp,0xc
c000631d:	5b                   	pop    ebx
c000631e:	5e                   	pop    esi
c000631f:	5f                   	pop    edi
c0006320:	5d                   	pop    ebp
c0006321:	c3                   	ret    

c0006322 <find_object>:
c0006322:	55                   	push   ebp
c0006323:	57                   	push   edi
c0006324:	89 c7                	mov    edi,eax
c0006326:	56                   	push   esi
c0006327:	53                   	push   ebx
c0006328:	89 d3                	mov    ebx,edx
c000632a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006330:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006337:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000633b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000633f:	83 3d 94 76 03 c0 00 	cmp    DWORD PTR ds:0xc0037694,0x0
c0006346:	74 0b                	je     c0006353 <find_object+0x31>
c0006348:	89 fa                	mov    edx,edi
c000634a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000634e:	e8 89 fc ff ff       	call   c0005fdc <utf2ucs>
c0006353:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006356:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000635a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000635f:	7e 11                	jle    c0006372 <find_object+0x50>
c0006361:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006365:	e8 46 ff ff ff       	call   c00062b0 <biread>
c000636a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000636e:	85 c0                	test   eax,eax
c0006370:	79 07                	jns    c0006379 <find_object+0x57>
c0006372:	31 db                	xor    ebx,ebx
c0006374:	e9 56 01 00 00       	jmp    c00064cf <find_object+0x1ad>
c0006379:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0006381:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006385:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006389:	8b 04 85 80 60 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9f80]
c0006390:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c0006394:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0006397:	85 f6                	test   esi,esi
c0006399:	75 0e                	jne    c00063a9 <find_object+0x87>
c000639b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000639f:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00063a7:	eb b1                	jmp    c000635a <find_object+0x38>
c00063a9:	8b 2d 94 76 03 c0    	mov    ebp,DWORD PTR ds:0xc0037694
c00063af:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00063b3:	85 ed                	test   ebp,ebp
c00063b5:	89 c8                	mov    eax,ecx
c00063b7:	74 2b                	je     c00063e4 <find_object+0xc2>
c00063b9:	8d 43 21             	lea    eax,[ebx+0x21]
c00063bc:	8d 54 24 20          	lea    edx,[esp+0x20]
c00063c0:	e8 07 fd ff ff       	call   c00060cc <ucscompare>
c00063c5:	85 c0                	test   eax,eax
c00063c7:	0f 84 bf 00 00 00    	je     c000648c <find_object+0x16a>
c00063cd:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c00063d0:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c00063d4:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c00063dc:	0f 8e da 00 00 00    	jle    c00064bc <find_object+0x19a>
c00063e2:	eb b7                	jmp    c000639b <find_object+0x79>
c00063e4:	29 ce                	sub    esi,ecx
c00063e6:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c00063ea:	a8 01                	test   al,0x1
c00063ec:	74 05                	je     c00063f3 <find_object+0xd1>
c00063ee:	83 ee 21             	sub    esi,0x21
c00063f1:	eb 5a                	jmp    c000644d <find_object+0x12b>
c00063f3:	42                   	inc    edx
c00063f4:	83 ee 22             	sub    esi,0x22
c00063f7:	eb 54                	jmp    c000644d <find_object+0x12b>
c00063f9:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c00063fc:	48                   	dec    eax
c00063fd:	3c 01                	cmp    al,0x1
c00063ff:	77 51                	ja     c0006452 <find_object+0x130>
c0006401:	50                   	push   eax
c0006402:	6a 02                	push   0x2
c0006404:	68 bd f5 02 c0       	push   0xc002f5bd
c0006409:	52                   	push   edx
c000640a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000640e:	e8 cd a3 ff ff       	call   c00007e0 <strncmp>
c0006413:	83 c4 10             	add    esp,0x10
c0006416:	85 c0                	test   eax,eax
c0006418:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000641c:	75 27                	jne    c0006445 <find_object+0x123>
c000641e:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006422:	8d 68 fb             	lea    ebp,[eax-0x5]
c0006425:	50                   	push   eax
c0006426:	8d 42 05             	lea    eax,[edx+0x5]
c0006429:	55                   	push   ebp
c000642a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000642e:	50                   	push   eax
c000642f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006433:	50                   	push   eax
c0006434:	e8 47 a2 ff ff       	call   c0000680 <strncpy>
c0006439:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c000643e:	83 c4 10             	add    esp,0x10
c0006441:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006445:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006449:	29 c6                	sub    esi,eax
c000644b:	01 c2                	add    edx,eax
c000644d:	83 fe 03             	cmp    esi,0x3
c0006450:	7f a7                	jg     c00063f9 <find_object+0xd7>
c0006452:	85 ed                	test   ebp,ebp
c0006454:	7e 40                	jle    c0006496 <find_object+0x174>
c0006456:	51                   	push   ecx
c0006457:	51                   	push   ecx
c0006458:	6a 2f                	push   0x2f
c000645a:	57                   	push   edi
c000645b:	e8 40 a3 ff ff       	call   c00007a0 <strchr>
c0006460:	83 c4 10             	add    esp,0x10
c0006463:	85 c0                	test   eax,eax
c0006465:	74 04                	je     c000646b <find_object+0x149>
c0006467:	29 f8                	sub    eax,edi
c0006469:	eb 0c                	jmp    c0006477 <find_object+0x155>
c000646b:	83 ec 0c             	sub    esp,0xc
c000646e:	57                   	push   edi
c000646f:	e8 fc a0 ff ff       	call   c0000570 <strlen>
c0006474:	83 c4 10             	add    esp,0x10
c0006477:	52                   	push   edx
c0006478:	50                   	push   eax
c0006479:	57                   	push   edi
c000647a:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000647e:	50                   	push   eax
c000647f:	e8 3e fe ff ff       	call   c00062c2 <strnicmp>
c0006484:	83 c4 10             	add    esp,0x10
c0006487:	e9 39 ff ff ff       	jmp    c00063c5 <find_object+0xa3>
c000648c:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006490:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c0006494:	eb 1e                	jmp    c00064b4 <find_object+0x192>
c0006496:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c000649a:	8d 43 21             	lea    eax,[ebx+0x21]
c000649d:	89 f9                	mov    ecx,edi
c000649f:	e8 a7 fc ff ff       	call   c000614b <fncompare>
c00064a4:	85 c0                	test   eax,eax
c00064a6:	0f 85 21 ff ff ff    	jne    c00063cd <find_object+0xab>
c00064ac:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00064b0:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00064b4:	0f 85 13 ff ff ff    	jne    c00063cd <find_object+0xab>
c00064ba:	eb 13                	jmp    c00064cf <find_object+0x1ad>
c00064bc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00064c0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00064c4:	0f 8f b7 fe ff ff    	jg     c0006381 <find_object+0x5f>
c00064ca:	e9 cc fe ff ff       	jmp    c000639b <find_object+0x79>
c00064cf:	81 c4 2c 01 00 00    	add    esp,0x12c
c00064d5:	89 d8                	mov    eax,ebx
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	5f                   	pop    edi
c00064da:	5d                   	pop    ebp
c00064db:	c3                   	ret    

c00064dc <find_object_path>:
c00064dc:	55                   	push   ebp
c00064dd:	57                   	push   edi
c00064de:	89 d7                	mov    edi,edx
c00064e0:	56                   	push   esi
c00064e1:	89 c6                	mov    esi,eax
c00064e3:	53                   	push   ebx
c00064e4:	89 cb                	mov    ebx,ecx
c00064e6:	83 ec 0c             	sub    esp,0xc
c00064e9:	50                   	push   eax
c00064ea:	50                   	push   eax
c00064eb:	6a 2f                	push   0x2f
c00064ed:	56                   	push   esi
c00064ee:	e8 ad a2 ff ff       	call   c00007a0 <strchr>
c00064f3:	83 c4 10             	add    esp,0x10
c00064f6:	89 c5                	mov    ebp,eax
c00064f8:	85 c0                	test   eax,eax
c00064fa:	74 3a                	je     c0006536 <find_object_path+0x5a>
c00064fc:	39 ee                	cmp    esi,ebp
c00064fe:	74 31                	je     c0006531 <find_object_path+0x55>
c0006500:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006503:	e8 a6 fb ff ff       	call   c00060ae <iso_733>
c0006508:	89 c2                	mov    edx,eax
c000650a:	8d 43 02             	lea    eax,[ebx+0x2]
c000650d:	e8 9c fb ff ff       	call   c00060ae <iso_733>
c0006512:	83 ec 0c             	sub    esp,0xc
c0006515:	89 c1                	mov    ecx,eax
c0006517:	52                   	push   edx
c0006518:	89 f0                	mov    eax,esi
c000651a:	ba 01 00 00 00       	mov    edx,0x1
c000651f:	e8 fe fd ff ff       	call   c0006322 <find_object>
c0006524:	83 c4 10             	add    esp,0x10
c0006527:	89 c3                	mov    ebx,eax
c0006529:	85 c0                	test   eax,eax
c000652b:	75 04                	jne    c0006531 <find_object_path+0x55>
c000652d:	31 db                	xor    ebx,ebx
c000652f:	eb 36                	jmp    c0006567 <find_object_path+0x8b>
c0006531:	8d 75 01             	lea    esi,[ebp+0x1]
c0006534:	eb b3                	jmp    c00064e9 <find_object_path+0xd>
c0006536:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006539:	74 28                	je     c0006563 <find_object_path+0x87>
c000653b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000653e:	e8 6b fb ff ff       	call   c00060ae <iso_733>
c0006543:	89 c2                	mov    edx,eax
c0006545:	8d 43 02             	lea    eax,[ebx+0x2]
c0006548:	e8 61 fb ff ff       	call   c00060ae <iso_733>
c000654d:	83 ec 0c             	sub    esp,0xc
c0006550:	89 c1                	mov    ecx,eax
c0006552:	52                   	push   edx
c0006553:	89 f0                	mov    eax,esi
c0006555:	89 fa                	mov    edx,edi
c0006557:	e8 c6 fd ff ff       	call   c0006322 <find_object>
c000655c:	83 c4 10             	add    esp,0x10
c000655f:	89 c3                	mov    ebx,eax
c0006561:	eb 04                	jmp    c0006567 <find_object_path+0x8b>
c0006563:	85 ff                	test   edi,edi
c0006565:	74 c6                	je     c000652d <find_object_path+0x51>
c0006567:	83 c4 0c             	add    esp,0xc
c000656a:	89 d8                	mov    eax,ebx
c000656c:	5b                   	pop    ebx
c000656d:	5e                   	pop    esi
c000656e:	5f                   	pop    edi
c000656f:	5d                   	pop    ebp
c0006570:	c3                   	ret    

c0006571 <stricmp>:
c0006571:	57                   	push   edi
c0006572:	56                   	push   esi
c0006573:	31 f6                	xor    esi,esi
c0006575:	53                   	push   ebx
c0006576:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000657a:	83 ec 0c             	sub    esp,0xc
c000657d:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c0006581:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006585:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c0006589:	50                   	push   eax
c000658a:	e8 a1 a3 ff ff       	call   c0000930 <toupper>
c000658f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006592:	e8 b9 a3 ff ff       	call   c0000950 <tolower>
c0006597:	89 3c 24             	mov    DWORD PTR [esp],edi
c000659a:	89 c3                	mov    ebx,eax
c000659c:	e8 8f a3 ff ff       	call   c0000930 <toupper>
c00065a1:	89 04 24             	mov    DWORD PTR [esp],eax
c00065a4:	e8 a7 a3 ff ff       	call   c0000950 <tolower>
c00065a9:	83 c4 10             	add    esp,0x10
c00065ac:	39 c3                	cmp    ebx,eax
c00065ae:	75 05                	jne    c00065b5 <stricmp+0x44>
c00065b0:	46                   	inc    esi
c00065b1:	85 db                	test   ebx,ebx
c00065b3:	75 c1                	jne    c0006576 <stricmp+0x5>
c00065b5:	29 c3                	sub    ebx,eax
c00065b7:	89 d8                	mov    eax,ebx
c00065b9:	5b                   	pop    ebx
c00065ba:	5e                   	pop    esi
c00065bb:	5f                   	pop    edi
c00065bc:	c3                   	ret    

c00065bd <iso_open>:
c00065bd:	57                   	push   edi
c00065be:	31 c0                	xor    eax,eax
c00065c0:	56                   	push   esi
c00065c1:	b9 60 76 03 c0       	mov    ecx,0xc0037660
c00065c6:	53                   	push   ebx
c00065c7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00065cc:	0f 95 c0             	setne  al
c00065cf:	89 c2                	mov    edx,eax
c00065d1:	89 c6                	mov    esi,eax
c00065d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00065d7:	e8 00 ff ff ff       	call   c00064dc <find_object_path>
c00065dc:	83 ca ff             	or     edx,0xffffffff
c00065df:	85 c0                	test   eax,eax
c00065e1:	74 5e                	je     c0006641 <iso_open+0x84>
c00065e3:	89 c1                	mov    ecx,eax
c00065e5:	31 d2                	xor    edx,edx
c00065e7:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c00065ed:	83 bf 20 6d 03 c0 00 	cmp    DWORD PTR [edi-0x3ffc92e0],0x0
c00065f4:	75 42                	jne    c0006638 <iso_open+0x7b>
c00065f6:	8d 41 02             	lea    eax,[ecx+0x2]
c00065f9:	c7 87 20 6d 03 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffc92e0],0xffffffff
c0006603:	e8 a6 fa ff ff       	call   c00060ae <iso_733>
c0006608:	89 b7 24 6d 03 c0    	mov    DWORD PTR [edi-0x3ffc92dc],esi
c000660e:	89 87 20 6d 03 c0    	mov    DWORD PTR [edi-0x3ffc92e0],eax
c0006614:	c7 87 28 6d 03 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffc92d8],0x0
c000661e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006621:	e8 88 fa ff ff       	call   c00060ae <iso_733>
c0006626:	c7 87 b0 6d 03 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffc9250],0x0
c0006630:	89 87 2c 6d 03 c0    	mov    DWORD PTR [edi-0x3ffc92d4],eax
c0006636:	eb 09                	jmp    c0006641 <iso_open+0x84>
c0006638:	42                   	inc    edx
c0006639:	83 fa 10             	cmp    edx,0x10
c000663c:	75 a9                	jne    c00065e7 <iso_open+0x2a>
c000663e:	83 ca ff             	or     edx,0xffffffff
c0006641:	5b                   	pop    ebx
c0006642:	89 d0                	mov    eax,edx
c0006644:	5e                   	pop    esi
c0006645:	5f                   	pop    edi
c0006646:	c3                   	ret    

c0006647 <iso_close>:
c0006647:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000664b:	83 f8 0f             	cmp    eax,0xf
c000664e:	7f 10                	jg     c0006660 <iso_close+0x19>
c0006650:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c0006656:	c7 80 20 6d 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc92e0],0x0
c0006660:	e9 5e fb ff ff       	jmp    c00061c3 <bclear_cache>

c0006665 <iso_read>:
c0006665:	55                   	push   ebp
c0006666:	57                   	push   edi
c0006667:	56                   	push   esi
c0006668:	53                   	push   ebx
c0006669:	83 ec 1c             	sub    esp,0x1c
c000666c:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0006670:	83 fd 0f             	cmp    ebp,0xf
c0006673:	7e 0a                	jle    c000667f <iso_read+0x1a>
c0006675:	83 c8 ff             	or     eax,0xffffffff
c0006678:	89 c2                	mov    edx,eax
c000667a:	e9 f4 00 00 00       	jmp    c0006773 <iso_read+0x10e>
c000667f:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c0006685:	83 bd 20 6d 03 c0 00 	cmp    DWORD PTR [ebp-0x3ffc92e0],0x0
c000668c:	74 e7                	je     c0006675 <iso_read+0x10>
c000668e:	8b 95 b0 6d 03 c0    	mov    edx,DWORD PTR [ebp-0x3ffc9250]
c0006694:	85 d2                	test   edx,edx
c0006696:	75 dd                	jne    c0006675 <iso_read+0x10>
c0006698:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000669d:	0f 84 cd 00 00 00    	je     c0006770 <iso_read+0x10b>
c00066a3:	8b 85 28 6d 03 c0    	mov    eax,DWORD PTR [ebp-0x3ffc92d8]
c00066a9:	8b 8d 2c 6d 03 c0    	mov    ecx,DWORD PTR [ebp-0x3ffc92d4]
c00066af:	29 c1                	sub    ecx,eax
c00066b1:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00066b5:	76 04                	jbe    c00066bb <iso_read+0x56>
c00066b7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00066bb:	85 c9                	test   ecx,ecx
c00066bd:	0f 84 ad 00 00 00    	je     c0006770 <iso_read+0x10b>
c00066c3:	89 c6                	mov    esi,eax
c00066c5:	bb 00 08 00 00       	mov    ebx,0x800
c00066ca:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00066d0:	c1 e8 0b             	shr    eax,0xb
c00066d3:	29 f3                	sub    ebx,esi
c00066d5:	03 85 20 6d 03 c0    	add    eax,DWORD PTR [ebp-0x3ffc92e0]
c00066db:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00066e1:	7e 3f                	jle    c0006722 <iso_read+0xbd>
c00066e3:	81 fb 00 08 00 00    	cmp    ebx,0x800
c00066e9:	75 37                	jne    c0006722 <iso_read+0xbd>
c00066eb:	be 20 00 00 00       	mov    esi,0x20
c00066f0:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c00066f6:	7f 05                	jg     c00066fd <iso_read+0x98>
c00066f8:	89 ce                	mov    esi,ecx
c00066fa:	c1 fe 0b             	sar    esi,0xb
c00066fd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006701:	89 f3                	mov    ebx,esi
c0006703:	c1 e3 0b             	shl    ebx,0xb
c0006706:	52                   	push   edx
c0006707:	56                   	push   esi
c0006708:	50                   	push   eax
c0006709:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000670d:	e8 15 fb ff ff       	call   c0006227 <isoReadDiscSector>
c0006712:	83 c4 10             	add    esp,0x10
c0006715:	85 c0                	test   eax,eax
c0006717:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000671b:	7f 3e                	jg     c000675b <iso_read+0xf6>
c000671d:	e9 53 ff ff ff       	jmp    c0006675 <iso_read+0x10>
c0006722:	39 cb                	cmp    ebx,ecx
c0006724:	7e 02                	jle    c0006728 <iso_read+0xc3>
c0006726:	89 cb                	mov    ebx,ecx
c0006728:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000672c:	e8 88 fb ff ff       	call   c00062b9 <bdread>
c0006731:	85 c0                	test   eax,eax
c0006733:	0f 88 3c ff ff ff    	js     c0006675 <iso_read+0x10>
c0006739:	8b 0c 85 20 60 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc9fe0]
c0006740:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006744:	8b 85 28 6d 03 c0    	mov    eax,DWORD PTR [ebp-0x3ffc92d8]
c000674a:	25 ff 07 00 00       	and    eax,0x7ff
c000674f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c0006753:	89 d9                	mov    ecx,ebx
c0006755:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006757:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000675b:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c000675f:	01 9d 28 6d 03 c0    	add    DWORD PTR [ebp-0x3ffc92d8],ebx
c0006765:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c0006769:	01 da                	add    edx,ebx
c000676b:	e9 28 ff ff ff       	jmp    c0006698 <iso_read+0x33>
c0006770:	89 d0                	mov    eax,edx
c0006772:	99                   	cdq    
c0006773:	83 c4 1c             	add    esp,0x1c
c0006776:	5b                   	pop    ebx
c0006777:	5e                   	pop    esi
c0006778:	5f                   	pop    edi
c0006779:	5d                   	pop    ebp
c000677a:	c3                   	ret    

c000677b <iso_seek>:
c000677b:	55                   	push   ebp
c000677c:	83 c8 ff             	or     eax,0xffffffff
c000677f:	57                   	push   edi
c0006780:	89 c2                	mov    edx,eax
c0006782:	56                   	push   esi
c0006783:	53                   	push   ebx
c0006784:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006788:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000678c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006790:	83 fe 0f             	cmp    esi,0xf
c0006793:	7f 65                	jg     c00067fa <iso_seek+0x7f>
c0006795:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c000679b:	8d 8d 20 6d 03 c0    	lea    ecx,[ebp-0x3ffc92e0]
c00067a1:	83 bd 20 6d 03 c0 00 	cmp    DWORD PTR [ebp-0x3ffc92e0],0x0
c00067a8:	74 50                	je     c00067fa <iso_seek+0x7f>
c00067aa:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00067b1:	75 47                	jne    c00067fa <iso_seek+0x7f>
c00067b3:	83 fb 01             	cmp    ebx,0x1
c00067b6:	74 0e                	je     c00067c6 <iso_seek+0x4b>
c00067b8:	83 fb 02             	cmp    ebx,0x2
c00067bb:	74 0e                	je     c00067cb <iso_seek+0x50>
c00067bd:	85 db                	test   ebx,ebx
c00067bf:	75 39                	jne    c00067fa <iso_seek+0x7f>
c00067c1:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c00067c4:	eb 0d                	jmp    c00067d3 <iso_seek+0x58>
c00067c6:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c00067c9:	eb 08                	jmp    c00067d3 <iso_seek+0x58>
c00067cb:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c00067ce:	01 f8                	add    eax,edi
c00067d0:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00067d3:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c00067d9:	8b 88 2c 6d 03 c0    	mov    ecx,DWORD PTR [eax-0x3ffc92d4]
c00067df:	05 20 6d 03 c0       	add    eax,0xc0036d20
c00067e4:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c00067e7:	76 03                	jbe    c00067ec <iso_seek+0x71>
c00067e9:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00067ec:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c00067f2:	8b 82 28 6d 03 c0    	mov    eax,DWORD PTR [edx-0x3ffc92d8]
c00067f8:	31 d2                	xor    edx,edx
c00067fa:	5b                   	pop    ebx
c00067fb:	5e                   	pop    esi
c00067fc:	5f                   	pop    edi
c00067fd:	5d                   	pop    ebp
c00067fe:	c3                   	ret    

c00067ff <iso_tell>:
c00067ff:	83 c8 ff             	or     eax,0xffffffff
c0006802:	53                   	push   ebx
c0006803:	89 c2                	mov    edx,eax
c0006805:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006809:	83 f9 0f             	cmp    ecx,0xf
c000680c:	7f 20                	jg     c000682e <iso_tell+0x2f>
c000680e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006814:	83 bb 20 6d 03 c0 00 	cmp    DWORD PTR [ebx-0x3ffc92e0],0x0
c000681b:	74 11                	je     c000682e <iso_tell+0x2f>
c000681d:	83 bb b0 6d 03 c0 00 	cmp    DWORD PTR [ebx-0x3ffc9250],0x0
c0006824:	75 08                	jne    c000682e <iso_tell+0x2f>
c0006826:	8b 83 28 6d 03 c0    	mov    eax,DWORD PTR [ebx-0x3ffc92d8]
c000682c:	31 d2                	xor    edx,edx
c000682e:	5b                   	pop    ebx
c000682f:	c3                   	ret    

c0006830 <iso_total>:
c0006830:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006834:	83 c8 ff             	or     eax,0xffffffff
c0006837:	83 fa 0f             	cmp    edx,0xf
c000683a:	7f 1e                	jg     c000685a <iso_total+0x2a>
c000683c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006842:	83 ba 20 6d 03 c0 00 	cmp    DWORD PTR [edx-0x3ffc92e0],0x0
c0006849:	74 0f                	je     c000685a <iso_total+0x2a>
c000684b:	83 ba b0 6d 03 c0 00 	cmp    DWORD PTR [edx-0x3ffc9250],0x0
c0006852:	75 06                	jne    c000685a <iso_total+0x2a>
c0006854:	8b 82 2c 6d 03 c0    	mov    eax,DWORD PTR [edx-0x3ffc92d4]
c000685a:	c3                   	ret    

c000685b <fn_postprocess>:
c000685b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000685f:	89 d0                	mov    eax,edx
c0006861:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0006864:	83 f9 3b             	cmp    ecx,0x3b
c0006867:	74 07                	je     c0006870 <fn_postprocess+0x15>
c0006869:	85 c9                	test   ecx,ecx
c000686b:	74 03                	je     c0006870 <fn_postprocess+0x15>
c000686d:	40                   	inc    eax
c000686e:	eb f1                	jmp    c0006861 <fn_postprocess+0x6>
c0006870:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006873:	39 d0                	cmp    eax,edx
c0006875:	76 0a                	jbe    c0006881 <fn_postprocess+0x26>
c0006877:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c000687b:	75 04                	jne    c0006881 <fn_postprocess+0x26>
c000687d:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c0006881:	c3                   	ret    

c0006882 <iso_readdir>:
c0006882:	55                   	push   ebp
c0006883:	57                   	push   edi
c0006884:	56                   	push   esi
c0006885:	53                   	push   ebx
c0006886:	83 ec 1c             	sub    esp,0x1c
c0006889:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000688d:	83 fb 0f             	cmp    ebx,0xf
c0006890:	7f 28                	jg     c00068ba <iso_readdir+0x38>
c0006892:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006898:	8d b8 20 6d 03 c0    	lea    edi,[eax-0x3ffc92e0]
c000689e:	83 b8 20 6d 03 c0 00 	cmp    DWORD PTR [eax-0x3ffc92e0],0x0
c00068a5:	74 13                	je     c00068ba <iso_readdir+0x38>
c00068a7:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00068ab:	74 0d                	je     c00068ba <iso_readdir+0x38>
c00068ad:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c00068b4:	0f 84 b1 00 00 00    	je     c000696b <iso_readdir+0xe9>
c00068ba:	83 ec 0c             	sub    esp,0xc
c00068bd:	68 c0 f5 02 c0       	push   0xc002f5c0
c00068c2:	e8 3d 26 02 00       	call   c0028f04 <iso_kprintf>
c00068c7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00068ca:	e8 51 26 02 00       	call   c0028f20 <iso_kprintfd>
c00068cf:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c00068d5:	c7 04 24 c5 f5 02 c0 	mov    DWORD PTR [esp],0xc002f5c5
c00068dc:	e8 23 26 02 00       	call   c0028f04 <iso_kprintf>
c00068e1:	5d                   	pop    ebp
c00068e2:	ff b3 20 6d 03 c0    	push   DWORD PTR [ebx-0x3ffc92e0]
c00068e8:	e8 33 26 02 00       	call   c0028f20 <iso_kprintfd>
c00068ed:	c7 04 24 cb f5 02 c0 	mov    DWORD PTR [esp],0xc002f5cb
c00068f4:	e8 0b 26 02 00       	call   c0028f04 <iso_kprintf>
c00068f9:	58                   	pop    eax
c00068fa:	ff b3 24 6d 03 c0    	push   DWORD PTR [ebx-0x3ffc92dc]
c0006900:	e8 1b 26 02 00       	call   c0028f20 <iso_kprintfd>
c0006905:	c7 04 24 d1 f5 02 c0 	mov    DWORD PTR [esp],0xc002f5d1
c000690c:	e8 f3 25 02 00       	call   c0028f04 <iso_kprintf>
c0006911:	58                   	pop    eax
c0006912:	ff b3 b0 6d 03 c0    	push   DWORD PTR [ebx-0x3ffc9250]
c0006918:	e8 03 26 02 00       	call   c0028f20 <iso_kprintfd>
c000691d:	83 c4 10             	add    esp,0x10
c0006920:	eb 42                	jmp    c0006964 <iso_readdir+0xe2>
c0006922:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006925:	8b 34 85 80 60 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc9f80]
c000692c:	89 d1                	mov    ecx,edx
c000692e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006934:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006938:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000693b:	75 35                	jne    c0006972 <iso_readdir+0xf0>
c000693d:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006943:	81 c2 00 08 00 00    	add    edx,0x800
c0006949:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000694c:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000694f:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006952:	73 1e                	jae    c0006972 <iso_readdir+0xf0>
c0006954:	c1 ea 0b             	shr    edx,0xb
c0006957:	8b 07                	mov    eax,DWORD PTR [edi]
c0006959:	01 d0                	add    eax,edx
c000695b:	e8 50 f9 ff ff       	call   c00062b0 <biread>
c0006960:	85 c0                	test   eax,eax
c0006962:	79 be                	jns    c0006922 <iso_readdir+0xa0>
c0006964:	31 c0                	xor    eax,eax
c0006966:	e9 66 01 00 00       	jmp    c0006ad1 <iso_readdir+0x24f>
c000696b:	31 f6                	xor    esi,esi
c000696d:	83 c8 ff             	or     eax,0xffffffff
c0006970:	eb da                	jmp    c000694c <iso_readdir+0xca>
c0006972:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006978:	8b ba 28 6d 03 c0    	mov    edi,DWORD PTR [edx-0x3ffc92d8]
c000697e:	81 c2 20 6d 03 c0    	add    edx,0xc0036d20
c0006984:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006987:	73 db                	jae    c0006964 <iso_readdir+0xe2>
c0006989:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c000698d:	75 34                	jne    c00069c3 <iso_readdir+0x141>
c000698f:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006993:	75 2e                	jne    c00069c3 <iso_readdir+0x141>
c0006995:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006998:	8b 34 85 80 60 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc9f80]
c000699f:	01 f9                	add    ecx,edi
c00069a1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00069a4:	89 c8                	mov    eax,ecx
c00069a6:	25 ff 07 00 00       	and    eax,0x7ff
c00069ab:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c00069b0:	01 c8                	add    eax,ecx
c00069b2:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00069b5:	25 ff 07 00 00       	and    eax,0x7ff
c00069ba:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c00069be:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00069c1:	74 a1                	je     c0006964 <iso_readdir+0xe2>
c00069c3:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069c9:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c00069cd:	8d 56 21             	lea    edx,[esi+0x21]
c00069d0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00069d4:	8d a8 38 6d 03 c0    	lea    ebp,[eax-0x3ffc92c8]
c00069da:	83 3d 94 76 03 c0 00 	cmp    DWORD PTR ds:0xc0037694,0x0
c00069e1:	74 0c                	je     c00069ef <iso_readdir+0x16d>
c00069e3:	89 e8                	mov    eax,ebp
c00069e5:	e8 14 f6 ff ff       	call   c0005ffe <ucs2utfn>
c00069ea:	e9 a6 00 00 00       	jmp    c0006a95 <iso_readdir+0x213>
c00069ef:	57                   	push   edi
c00069f0:	51                   	push   ecx
c00069f1:	52                   	push   edx
c00069f2:	55                   	push   ebp
c00069f3:	e8 88 9c ff ff       	call   c0000680 <strncpy>
c00069f8:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c00069fc:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006a02:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006a05:	c6 84 01 38 6d 03 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffc92c8],0x0
c0006a0d:	e8 49 fe ff ff       	call   c000685b <fn_postprocess>
c0006a12:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006a16:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a19:	83 c4 10             	add    esp,0x10
c0006a1c:	29 d0                	sub    eax,edx
c0006a1e:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006a22:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006a26:	74 05                	je     c0006a2d <iso_readdir+0x1ab>
c0006a28:	83 e8 21             	sub    eax,0x21
c0006a2b:	eb 04                	jmp    c0006a31 <iso_readdir+0x1af>
c0006a2d:	47                   	inc    edi
c0006a2e:	83 e8 22             	sub    eax,0x22
c0006a31:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006a35:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006a3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a3f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006a44:	7e 4f                	jle    c0006a95 <iso_readdir+0x213>
c0006a46:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006a49:	48                   	dec    eax
c0006a4a:	3c 01                	cmp    al,0x1
c0006a4c:	77 47                	ja     c0006a95 <iso_readdir+0x213>
c0006a4e:	52                   	push   edx
c0006a4f:	6a 02                	push   0x2
c0006a51:	68 bd f5 02 c0       	push   0xc002f5bd
c0006a56:	57                   	push   edi
c0006a57:	e8 84 9d ff ff       	call   c00007e0 <strncmp>
c0006a5c:	83 c4 10             	add    esp,0x10
c0006a5f:	85 c0                	test   eax,eax
c0006a61:	75 26                	jne    c0006a89 <iso_readdir+0x207>
c0006a63:	50                   	push   eax
c0006a64:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006a68:	83 e8 05             	sub    eax,0x5
c0006a6b:	50                   	push   eax
c0006a6c:	8d 47 05             	lea    eax,[edi+0x5]
c0006a6f:	50                   	push   eax
c0006a70:	55                   	push   ebp
c0006a71:	e8 0a 9c ff ff       	call   c0000680 <strncpy>
c0006a76:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006a7a:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006a7e:	83 c4 10             	add    esp,0x10
c0006a81:	c6 84 08 33 6d 03 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffc92cd],0x0
c0006a89:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006a8d:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006a91:	01 c7                	add    edi,eax
c0006a93:	eb aa                	jmp    c0006a3f <iso_readdir+0x1bd>
c0006a95:	83 c8 ff             	or     eax,0xffffffff
c0006a98:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006a9c:	89 c2                	mov    edx,eax
c0006a9e:	75 0a                	jne    c0006aaa <iso_readdir+0x228>
c0006aa0:	8d 46 0a             	lea    eax,[esi+0xa]
c0006aa3:	e8 06 f6 ff ff       	call   c00060ae <iso_733>
c0006aa8:	31 d2                	xor    edx,edx
c0006aaa:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006ab0:	89 83 30 6d 03 c0    	mov    DWORD PTR [ebx-0x3ffc92d0],eax
c0006ab6:	89 93 34 6d 03 c0    	mov    DWORD PTR [ebx-0x3ffc92cc],edx
c0006abc:	81 c3 20 6d 03 c0    	add    ebx,0xc0036d20
c0006ac2:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006ac5:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006ac8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006acc:	05 30 6d 03 c0       	add    eax,0xc0036d30
c0006ad1:	83 c4 1c             	add    esp,0x1c
c0006ad4:	5b                   	pop    ebx
c0006ad5:	5e                   	pop    esi
c0006ad6:	5f                   	pop    edi
c0006ad7:	5d                   	pop    ebp
c0006ad8:	c3                   	ret    

c0006ad9 <iso_reset>:
c0006ad9:	83 ec 18             	sub    esp,0x18
c0006adc:	68 da f5 02 c0       	push   0xc002f5da
c0006ae1:	e8 1e 24 02 00       	call   c0028f04 <iso_kprintf>
c0006ae6:	e8 10 f7 ff ff       	call   c00061fb <iso_break_all>
c0006aeb:	e8 09 f7 ff ff       	call   c00061f9 <bclear>
c0006af0:	31 c0                	xor    eax,eax
c0006af2:	83 c4 1c             	add    esp,0x1c
c0006af5:	c3                   	ret    

c0006af6 <init_percd>:
c0006af6:	57                   	push   edi
c0006af7:	56                   	push   esi
c0006af8:	53                   	push   ebx
c0006af9:	bb 01 00 00 00       	mov    ebx,0x1
c0006afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b02:	a2 60 60 03 c0       	mov    ds:0xc0036060,al
c0006b07:	e8 cd ff ff ff       	call   c0006ad9 <iso_reset>
c0006b0c:	c7 05 94 76 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037694,0x0
c0006b16:	a1 8c 76 03 c0       	mov    eax,ds:0xc003768c
c0006b1b:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006b1f:	e8 8c f7 ff ff       	call   c00062b0 <biread>
c0006b24:	89 c6                	mov    esi,eax
c0006b26:	85 c0                	test   eax,eax
c0006b28:	0f 88 ba 00 00 00    	js     c0006be8 <init_percd+0xf2>
c0006b2e:	8b 04 85 80 60 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9f80]
c0006b35:	83 c0 04             	add    eax,0x4
c0006b38:	52                   	push   edx
c0006b39:	6a 06                	push   0x6
c0006b3b:	68 e5 f5 02 c0       	push   0xc002f5e5
c0006b40:	50                   	push   eax
c0006b41:	e8 3a 98 ff ff       	call   c0000380 <memcmp>
c0006b46:	83 c4 10             	add    esp,0x10
c0006b49:	85 c0                	test   eax,eax
c0006b4b:	74 08                	je     c0006b55 <init_percd+0x5f>
c0006b4d:	43                   	inc    ebx
c0006b4e:	83 fb 04             	cmp    ebx,0x4
c0006b51:	75 c3                	jne    c0006b16 <init_percd+0x20>
c0006b53:	eb 1a                	jmp    c0006b6f <init_percd+0x79>
c0006b55:	8b 04 b5 80 60 03 c0 	mov    eax,DWORD PTR [esi*4-0x3ffc9f80]
c0006b5c:	83 c0 5c             	add    eax,0x5c
c0006b5f:	e8 17 f5 ff ff       	call   c000607b <isjoliet>
c0006b64:	a3 94 76 03 c0       	mov    ds:0xc0037694,eax
c0006b69:	85 c0                	test   eax,eax
c0006b6b:	74 e0                	je     c0006b4d <init_percd+0x57>
c0006b6d:	eb 3e                	jmp    c0006bad <init_percd+0xb7>
c0006b6f:	83 3d 94 76 03 c0 00 	cmp    DWORD PTR ds:0xc0037694,0x0
c0006b76:	75 35                	jne    c0006bad <init_percd+0xb7>
c0006b78:	a1 8c 76 03 c0       	mov    eax,ds:0xc003768c
c0006b7d:	83 c0 10             	add    eax,0x10
c0006b80:	e8 2b f7 ff ff       	call   c00062b0 <biread>
c0006b85:	89 c6                	mov    esi,eax
c0006b87:	85 c0                	test   eax,eax
c0006b89:	78 5f                	js     c0006bea <init_percd+0xf4>
c0006b8b:	83 cb ff             	or     ebx,0xffffffff
c0006b8e:	50                   	push   eax
c0006b8f:	8b 04 b5 80 60 03 c0 	mov    eax,DWORD PTR [esi*4-0x3ffc9f80]
c0006b96:	6a 06                	push   0x6
c0006b98:	83 c0 04             	add    eax,0x4
c0006b9b:	68 ec f5 02 c0       	push   0xc002f5ec
c0006ba0:	50                   	push   eax
c0006ba1:	e8 da 97 ff ff       	call   c0000380 <memcmp>
c0006ba6:	83 c4 10             	add    esp,0x10
c0006ba9:	85 c0                	test   eax,eax
c0006bab:	75 3d                	jne    c0006bea <init_percd+0xf4>
c0006bad:	8b 34 b5 80 60 03 c0 	mov    esi,DWORD PTR [esi*4-0x3ffc9f80]
c0006bb4:	bf 60 76 03 c0       	mov    edi,0xc0037660
c0006bb9:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006bbf:	b9 22 00 00 00       	mov    ecx,0x22
c0006bc4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006bc6:	b8 62 76 03 c0       	mov    eax,0xc0037662
c0006bcb:	31 db                	xor    ebx,ebx
c0006bcd:	e8 dc f4 ff ff       	call   c00060ae <iso_733>
c0006bd2:	a3 88 76 03 c0       	mov    ds:0xc0037688,eax
c0006bd7:	b8 6a 76 03 c0       	mov    eax,0xc003766a
c0006bdc:	e8 cd f4 ff ff       	call   c00060ae <iso_733>
c0006be1:	a3 84 76 03 c0       	mov    ds:0xc0037684,eax
c0006be6:	eb 02                	jmp    c0006bea <init_percd+0xf4>
c0006be8:	89 c3                	mov    ebx,eax
c0006bea:	89 d8                	mov    eax,ebx
c0006bec:	5b                   	pop    ebx
c0006bed:	5e                   	pop    esi
c0006bee:	5f                   	pop    edi
c0006bef:	c3                   	ret    

c0006bf0 <iso_ioctl>:
c0006bf0:	83 ec 18             	sub    esp,0x18
c0006bf3:	68 f3 f5 02 c0       	push   0xc002f5f3
c0006bf8:	e8 07 23 02 00       	call   c0028f04 <iso_kprintf>
c0006bfd:	e8 d7 fe ff ff       	call   c0006ad9 <iso_reset>
c0006c02:	31 c0                	xor    eax,eax
c0006c04:	83 c4 1c             	add    esp,0x1c
c0006c07:	c3                   	ret    

c0006c08 <fs_iso9660_init>:
c0006c08:	53                   	push   ebx
c0006c09:	31 db                	xor    ebx,ebx
c0006c0b:	83 ec 14             	sub    esp,0x14
c0006c0e:	68 fe f5 02 c0       	push   0xc002f5fe
c0006c13:	e8 ec 22 02 00       	call   c0028f04 <iso_kprintf>
c0006c18:	83 c4 0c             	add    esp,0xc
c0006c1b:	68 40 09 00 00       	push   0x940
c0006c20:	6a 00                	push   0x0
c0006c22:	68 20 6d 03 c0       	push   0xc0036d20
c0006c27:	e8 c4 98 ff ff       	call   c00004f0 <memset>
c0006c2c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006c33:	c7 05 20 6d 03 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0036d20,0xffffffff
c0006c3d:	e8 70 f6 00 00       	call   c00162b2 <malloc>
c0006c42:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006c49:	a3 90 76 03 c0       	mov    ds:0xc0037690,eax
c0006c4e:	e8 5f f6 00 00       	call   c00162b2 <malloc>
c0006c53:	83 c4 10             	add    esp,0x10
c0006c56:	a3 00 6d 03 c0       	mov    ds:0xc0036d00,eax
c0006c5b:	83 ec 0c             	sub    esp,0xc
c0006c5e:	68 04 08 00 00       	push   0x804
c0006c63:	e8 4a f6 00 00       	call   c00162b2 <malloc>
c0006c68:	89 04 9d 80 60 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc9f80],eax
c0006c6f:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006c75:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006c7c:	e8 31 f6 00 00       	call   c00162b2 <malloc>
c0006c81:	83 c4 10             	add    esp,0x10
c0006c84:	89 04 9d 20 60 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc9fe0],eax
c0006c8b:	43                   	inc    ebx
c0006c8c:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006c92:	83 fb 10             	cmp    ebx,0x10
c0006c95:	75 c4                	jne    c0006c5b <fs_iso9660_init+0x53>
c0006c97:	31 c0                	xor    eax,eax
c0006c99:	83 c4 08             	add    esp,0x8
c0006c9c:	5b                   	pop    ebx
c0006c9d:	c3                   	ret    

c0006c9e <fs_iso9660_shutdown>:
c0006c9e:	53                   	push   ebx
c0006c9f:	31 db                	xor    ebx,ebx
c0006ca1:	83 ec 08             	sub    esp,0x8
c0006ca4:	83 ec 0c             	sub    esp,0xc
c0006ca7:	ff 34 9d 80 60 03 c0 	push   DWORD PTR [ebx*4-0x3ffc9f80]
c0006cae:	e8 0f f6 00 00       	call   c00162c2 <free>
c0006cb3:	58                   	pop    eax
c0006cb4:	ff 34 9d 20 60 03 c0 	push   DWORD PTR [ebx*4-0x3ffc9fe0]
c0006cbb:	43                   	inc    ebx
c0006cbc:	e8 01 f6 00 00       	call   c00162c2 <free>
c0006cc1:	83 c4 10             	add    esp,0x10
c0006cc4:	83 fb 10             	cmp    ebx,0x10
c0006cc7:	75 db                	jne    c0006ca4 <fs_iso9660_shutdown+0x6>
c0006cc9:	a1 90 76 03 c0       	mov    eax,ds:0xc0037690
c0006cce:	85 c0                	test   eax,eax
c0006cd0:	74 0c                	je     c0006cde <fs_iso9660_shutdown+0x40>
c0006cd2:	83 ec 0c             	sub    esp,0xc
c0006cd5:	50                   	push   eax
c0006cd6:	e8 e7 f5 00 00       	call   c00162c2 <free>
c0006cdb:	83 c4 10             	add    esp,0x10
c0006cde:	a1 00 6d 03 c0       	mov    eax,ds:0xc0036d00
c0006ce3:	85 c0                	test   eax,eax
c0006ce5:	74 0c                	je     c0006cf3 <fs_iso9660_shutdown+0x55>
c0006ce7:	83 ec 0c             	sub    esp,0xc
c0006cea:	50                   	push   eax
c0006ceb:	e8 d2 f5 00 00       	call   c00162c2 <free>
c0006cf0:	83 c4 10             	add    esp,0x10
c0006cf3:	c7 05 00 6d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036d00,0x0
c0006cfd:	c7 05 90 76 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037690,0x0
c0006d07:	31 c0                	xor    eax,eax
c0006d09:	83 c4 08             	add    esp,0x8
c0006d0c:	5b                   	pop    ebx
c0006d0d:	c3                   	ret    
c0006d0e:	66 90                	xchg   ax,ax

c0006d10 <lwip_init>:
c0006d10:	83 ec 0c             	sub    esp,0xc
c0006d13:	e8 44 2c 00 00       	call   c000995c <stats_init>
c0006d18:	e8 7b 9f ff ff       	call   c0000c98 <sys_init>
c0006d1d:	e8 ae 01 00 00       	call   c0006ed0 <mem_init>
c0006d22:	e8 01 0a 00 00       	call   c0007728 <memp_init>
c0006d27:	e8 e4 0c 00 00       	call   c0007a10 <netif_init>
c0006d2c:	e8 0b 9f ff ff       	call   c0000c3c <lwip_socket_init>
c0006d31:	e8 72 9d 00 00       	call   c0010aa8 <sys_timeouts_init>
c0006d36:	90                   	nop
c0006d37:	83 c4 0c             	add    esp,0xc
c0006d3a:	c3                   	ret    
c0006d3b:	90                   	nop

c0006d3c <plug_holes>:
c0006d3c:	83 ec 1c             	sub    esp,0x1c
c0006d3f:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006d44:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006d48:	73 16                	jae    c0006d60 <plug_holes+0x24>
c0006d4a:	83 ec 08             	sub    esp,0x8
c0006d4d:	68 0f f6 02 c0       	push   0xc002f60f
c0006d52:	68 26 f6 02 c0       	push   0xc002f626
c0006d57:	e8 38 8c 01 00       	call   c001f994 <CPrintf>
c0006d5c:	83 c4 10             	add    esp,0x10
c0006d5f:	90                   	nop
c0006d60:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0006d65:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006d69:	72 15                	jb     c0006d80 <plug_holes+0x44>
c0006d6b:	83 ec 08             	sub    esp,0x8
c0006d6e:	68 33 f6 02 c0       	push   0xc002f633
c0006d73:	68 26 f6 02 c0       	push   0xc002f626
c0006d78:	e8 17 8c 01 00       	call   c001f994 <CPrintf>
c0006d7d:	83 c4 10             	add    esp,0x10
c0006d80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006d84:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0006d87:	0f b6 c0             	movzx  eax,al
c0006d8a:	85 c0                	test   eax,eax
c0006d8c:	74 16                	je     c0006da4 <plug_holes+0x68>
c0006d8e:	83 ec 08             	sub    esp,0x8
c0006d91:	68 4d f6 02 c0       	push   0xc002f64d
c0006d96:	68 26 f6 02 c0       	push   0xc002f626
c0006d9b:	e8 f4 8b 01 00       	call   c001f994 <CPrintf>
c0006da0:	83 c4 10             	add    esp,0x10
c0006da3:	90                   	nop
c0006da4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006da8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006dab:	0f b7 c0             	movzx  eax,ax
c0006dae:	3d 40 06 00 00       	cmp    eax,0x640
c0006db3:	76 17                	jbe    c0006dcc <plug_holes+0x90>
c0006db5:	83 ec 08             	sub    esp,0x8
c0006db8:	68 e0 f6 02 c0       	push   0xc002f6e0
c0006dbd:	68 26 f6 02 c0       	push   0xc002f626
c0006dc2:	e8 cd 8b 01 00       	call   c001f994 <CPrintf>
c0006dc7:	83 c4 10             	add    esp,0x10
c0006dca:	66 90                	xchg   ax,ax
c0006dcc:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0006dd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006dd6:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006dd9:	0f b7 c0             	movzx  eax,ax
c0006ddc:	01 d0                	add    eax,edx
c0006dde:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006de2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006de6:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006dea:	74 64                	je     c0006e50 <plug_holes+0x114>
c0006dec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006df0:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0006df3:	0f b6 c0             	movzx  eax,al
c0006df6:	85 c0                	test   eax,eax
c0006df8:	75 56                	jne    c0006e50 <plug_holes+0x114>
c0006dfa:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0006dff:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006e03:	74 4b                	je     c0006e50 <plug_holes+0x114>
c0006e05:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0006e0a:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006e0e:	75 0c                	jne    c0006e1c <plug_holes+0xe0>
c0006e10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e14:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0006e19:	8d 76 00             	lea    esi,[esi+0x0]
c0006e1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e20:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006e23:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0006e27:	66 89 02             	mov    WORD PTR [edx],ax
c0006e2a:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006e2f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0006e33:	29 c2                	sub    edx,eax
c0006e35:	8b 0d a4 76 03 c0    	mov    ecx,DWORD PTR ds:0xc00376a4
c0006e3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e3f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006e42:	0f b7 c0             	movzx  eax,ax
c0006e45:	01 c1                	add    ecx,eax
c0006e47:	89 d0                	mov    eax,edx
c0006e49:	66 89 41 02          	mov    WORD PTR [ecx+0x2],ax
c0006e4d:	8d 76 00             	lea    esi,[esi+0x0]
c0006e50:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0006e56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e5a:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0006e5e:	0f b7 c0             	movzx  eax,ax
c0006e61:	01 d0                	add    eax,edx
c0006e63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006e67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e6b:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0006e6f:	74 57                	je     c0006ec8 <plug_holes+0x18c>
c0006e71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e75:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0006e78:	0f b6 c0             	movzx  eax,al
c0006e7b:	85 c0                	test   eax,eax
c0006e7d:	75 49                	jne    c0006ec8 <plug_holes+0x18c>
c0006e7f:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0006e84:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006e88:	75 0a                	jne    c0006e94 <plug_holes+0x158>
c0006e8a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e8e:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0006e93:	90                   	nop
c0006e94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e98:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006e9b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006e9f:	66 89 02             	mov    WORD PTR [edx],ax
c0006ea2:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006ea7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006eab:	29 c2                	sub    edx,eax
c0006ead:	8b 0d a4 76 03 c0    	mov    ecx,DWORD PTR ds:0xc00376a4
c0006eb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006eb7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006eba:	0f b7 c0             	movzx  eax,ax
c0006ebd:	01 c1                	add    ecx,eax
c0006ebf:	89 d0                	mov    eax,edx
c0006ec1:	66 89 41 02          	mov    WORD PTR [ecx+0x2],ax
c0006ec5:	8d 76 00             	lea    esi,[esi+0x0]
c0006ec8:	90                   	nop
c0006ec9:	83 c4 1c             	add    esp,0x1c
c0006ecc:	c3                   	ret    
c0006ecd:	8d 76 00             	lea    esi,[esi+0x0]

c0006ed0 <mem_init>:
c0006ed0:	83 ec 1c             	sub    esp,0x1c
c0006ed3:	c7 05 a4 76 03 c0 c0 60 03 c0 	mov    DWORD PTR ds:0xc00376a4,0xc00360c0
c0006edd:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006ee2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ee6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006eea:	66 c7 00 40 06       	mov    WORD PTR [eax],0x640
c0006eef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ef3:	66 c7 40 02 00 00    	mov    WORD PTR [eax+0x2],0x0
c0006ef9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006efd:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0006f01:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006f06:	05 40 06 00 00       	add    eax,0x640
c0006f0b:	a3 a0 76 03 c0       	mov    ds:0xc00376a0,eax
c0006f10:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0006f15:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c0006f19:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0006f1e:	66 c7 00 40 06       	mov    WORD PTR [eax],0x640
c0006f23:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0006f28:	66 c7 40 02 40 06    	mov    WORD PTR [eax+0x2],0x640
c0006f2e:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006f33:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0006f38:	66 c7 05 c8 67 03 c0 40 06 	mov    WORD PTR ds:0xc00367c8,0x640
c0006f41:	83 ec 0c             	sub    esp,0xc
c0006f44:	68 98 76 03 c0       	push   0xc0037698
c0006f49:	e8 f2 9c ff ff       	call   c0000c40 <sys_mutex_new>
c0006f4e:	83 c4 10             	add    esp,0x10
c0006f51:	0f be c0             	movsx  eax,al
c0006f54:	85 c0                	test   eax,eax
c0006f56:	74 18                	je     c0006f70 <mem_init+0xa0>
c0006f58:	83 ec 08             	sub    esp,0x8
c0006f5b:	68 68 f6 02 c0       	push   0xc002f668
c0006f60:	68 26 f6 02 c0       	push   0xc002f626
c0006f65:	e8 2a 8a 01 00       	call   c001f994 <CPrintf>
c0006f6a:	83 c4 10             	add    esp,0x10
c0006f6d:	8d 76 00             	lea    esi,[esi+0x0]
c0006f70:	90                   	nop
c0006f71:	83 c4 1c             	add    esp,0x1c
c0006f74:	c3                   	ret    
c0006f75:	8d 76 00             	lea    esi,[esi+0x0]

c0006f78 <mem_free>:
c0006f78:	83 ec 1c             	sub    esp,0x1c
c0006f7b:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0006f80:	0f 84 0e 01 00 00    	je     c0007094 <mem_free+0x11c>
c0006f86:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006f8b:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006f8f:	72 0b                	jb     c0006f9c <mem_free+0x24>
c0006f91:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0006f96:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006f9a:	72 18                	jb     c0006fb4 <mem_free+0x3c>
c0006f9c:	83 ec 08             	sub    esp,0x8
c0006f9f:	68 83 f6 02 c0       	push   0xc002f683
c0006fa4:	68 26 f6 02 c0       	push   0xc002f626
c0006fa9:	e8 e6 89 01 00       	call   c001f994 <CPrintf>
c0006fae:	83 c4 10             	add    esp,0x10
c0006fb1:	8d 76 00             	lea    esi,[esi+0x0]
c0006fb4:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006fb9:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006fbd:	72 0d                	jb     c0006fcc <mem_free+0x54>
c0006fbf:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0006fc4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006fc8:	72 22                	jb     c0006fec <mem_free+0x74>
c0006fca:	66 90                	xchg   ax,ax
c0006fcc:	e8 b3 89 01 00       	call   c001f984 <CLockScheduler>
c0006fd1:	66 a1 d0 67 03 c0    	mov    ax,ds:0xc00367d0
c0006fd7:	83 c0 01             	add    eax,0x1
c0006fda:	66 a3 d0 67 03 c0    	mov    ds:0xc00367d0,ax
c0006fe0:	e8 83 89 01 00       	call   c001f968 <CUnlockScheduler>
c0006fe5:	e9 ae 00 00 00       	jmp    c0007098 <mem_free+0x120>
c0006fea:	66 90                	xchg   ax,ax
c0006fec:	83 ec 0c             	sub    esp,0xc
c0006fef:	68 98 76 03 c0       	push   0xc0037698
c0006ff4:	e8 4b 9c ff ff       	call   c0000c44 <sys_mutex_lock>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007000:	83 e8 06             	sub    eax,0x6
c0007003:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007007:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000700b:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000700e:	0f b6 c0             	movzx  eax,al
c0007011:	85 c0                	test   eax,eax
c0007013:	75 17                	jne    c000702c <mem_free+0xb4>
c0007015:	83 ec 08             	sub    esp,0x8
c0007018:	68 9a f6 02 c0       	push   0xc002f69a
c000701d:	68 26 f6 02 c0       	push   0xc002f626
c0007022:	e8 6d 89 01 00       	call   c001f994 <CPrintf>
c0007027:	83 c4 10             	add    esp,0x10
c000702a:	66 90                	xchg   ax,ax
c000702c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007030:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007034:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0007039:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000703d:	73 09                	jae    c0007048 <mem_free+0xd0>
c000703f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007043:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0007048:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c000704e:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007054:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007058:	29 d1                	sub    ecx,edx
c000705a:	89 ca                	mov    edx,ecx
c000705c:	89 d1                	mov    ecx,edx
c000705e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007062:	66 8b 12             	mov    dx,WORD PTR [edx]
c0007065:	29 d1                	sub    ecx,edx
c0007067:	89 ca                	mov    edx,ecx
c0007069:	01 d0                	add    eax,edx
c000706b:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c0007071:	83 ec 0c             	sub    esp,0xc
c0007074:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007078:	e8 bf fc ff ff       	call   c0006d3c <plug_holes>
c000707d:	83 c4 10             	add    esp,0x10
c0007080:	83 ec 0c             	sub    esp,0xc
c0007083:	68 98 76 03 c0       	push   0xc0037698
c0007088:	e8 bb 9b ff ff       	call   c0000c48 <sys_mutex_unlock>
c000708d:	83 c4 10             	add    esp,0x10
c0007090:	eb 06                	jmp    c0007098 <mem_free+0x120>
c0007092:	66 90                	xchg   ax,ax
c0007094:	90                   	nop
c0007095:	8d 76 00             	lea    esi,[esi+0x0]
c0007098:	83 c4 1c             	add    esp,0x1c
c000709b:	c3                   	ret    

c000709c <mem_trim>:
c000709c:	83 ec 2c             	sub    esp,0x2c
c000709f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00070a3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00070a8:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00070ad:	83 f8 0b             	cmp    eax,0xb
c00070b0:	77 0a                	ja     c00070bc <mem_trim+0x20>
c00070b2:	66 c7 44 24 0c 0c 00 	mov    WORD PTR [esp+0xc],0xc
c00070b9:	8d 76 00             	lea    esi,[esi+0x0]
c00070bc:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00070c1:	3d 40 06 00 00       	cmp    eax,0x640
c00070c6:	76 0c                	jbe    c00070d4 <mem_trim+0x38>
c00070c8:	b8 00 00 00 00       	mov    eax,0x0
c00070cd:	e9 d2 02 00 00       	jmp    c00073a4 <mem_trim+0x308>
c00070d2:	66 90                	xchg   ax,ax
c00070d4:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c00070d9:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c00070dd:	72 0d                	jb     c00070ec <mem_trim+0x50>
c00070df:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00070e4:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c00070e8:	72 1a                	jb     c0007104 <mem_trim+0x68>
c00070ea:	66 90                	xchg   ax,ax
c00070ec:	83 ec 08             	sub    esp,0x8
c00070ef:	68 ae f6 02 c0       	push   0xc002f6ae
c00070f4:	68 26 f6 02 c0       	push   0xc002f626
c00070f9:	e8 96 88 01 00       	call   c001f994 <CPrintf>
c00070fe:	83 c4 10             	add    esp,0x10
c0007101:	8d 76 00             	lea    esi,[esi+0x0]
c0007104:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007109:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000710d:	72 0d                	jb     c000711c <mem_trim+0x80>
c000710f:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007114:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0007118:	72 26                	jb     c0007140 <mem_trim+0xa4>
c000711a:	66 90                	xchg   ax,ax
c000711c:	e8 63 88 01 00       	call   c001f984 <CLockScheduler>
c0007121:	66 a1 d0 67 03 c0    	mov    ax,ds:0xc00367d0
c0007127:	83 c0 01             	add    eax,0x1
c000712a:	66 a3 d0 67 03 c0    	mov    ds:0xc00367d0,ax
c0007130:	e8 33 88 01 00       	call   c001f968 <CUnlockScheduler>
c0007135:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007139:	e9 66 02 00 00       	jmp    c00073a4 <mem_trim+0x308>
c000713e:	66 90                	xchg   ax,ax
c0007140:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007144:	83 e8 06             	sub    eax,0x6
c0007147:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000714b:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007150:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007154:	29 c2                	sub    edx,eax
c0007156:	89 d0                	mov    eax,edx
c0007158:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000715d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007161:	66 8b 10             	mov    dx,WORD PTR [eax]
c0007164:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0007169:	89 d1                	mov    ecx,edx
c000716b:	29 c1                	sub    ecx,eax
c000716d:	89 c8                	mov    eax,ecx
c000716f:	83 e8 06             	sub    eax,0x6
c0007172:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0007177:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000717c:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0007181:	39 c2                	cmp    edx,eax
c0007183:	76 17                	jbe    c000719c <mem_trim+0x100>
c0007185:	83 ec 08             	sub    esp,0x8
c0007188:	68 0c f7 02 c0       	push   0xc002f70c
c000718d:	68 26 f6 02 c0       	push   0xc002f626
c0007192:	e8 fd 87 01 00       	call   c001f994 <CPrintf>
c0007197:	83 c4 10             	add    esp,0x10
c000719a:	66 90                	xchg   ax,ax
c000719c:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00071a1:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00071a6:	39 c2                	cmp    edx,eax
c00071a8:	76 0a                	jbe    c00071b4 <mem_trim+0x118>
c00071aa:	b8 00 00 00 00       	mov    eax,0x0
c00071af:	e9 f0 01 00 00       	jmp    c00073a4 <mem_trim+0x308>
c00071b4:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00071b9:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00071be:	39 c2                	cmp    edx,eax
c00071c0:	75 0a                	jne    c00071cc <mem_trim+0x130>
c00071c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00071c6:	e9 d9 01 00 00       	jmp    c00073a4 <mem_trim+0x308>
c00071cb:	90                   	nop
c00071cc:	83 ec 0c             	sub    esp,0xc
c00071cf:	68 98 76 03 c0       	push   0xc0037698
c00071d4:	e8 6b 9a ff ff       	call   c0000c44 <sys_mutex_lock>
c00071d9:	83 c4 10             	add    esp,0x10
c00071dc:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00071e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00071e6:	66 8b 00             	mov    ax,WORD PTR [eax]
c00071e9:	0f b7 c0             	movzx  eax,ax
c00071ec:	01 d0                	add    eax,edx
c00071ee:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00071f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00071f6:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00071f9:	0f b6 c0             	movzx  eax,al
c00071fc:	85 c0                	test   eax,eax
c00071fe:	0f 85 c4 00 00 00    	jne    c00072c8 <mem_trim+0x22c>
c0007204:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007208:	66 8b 00             	mov    ax,WORD PTR [eax]
c000720b:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0007210:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c0007215:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007219:	01 d0                	add    eax,edx
c000721b:	83 c0 06             	add    eax,0x6
c000721e:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c0007223:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0007228:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000722c:	75 12                	jne    c0007240 <mem_trim+0x1a4>
c000722e:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007234:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0007239:	01 d0                	add    eax,edx
c000723b:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0007240:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007246:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c000724b:	01 d0                	add    eax,edx
c000724d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007251:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007255:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007259:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000725d:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0007262:	66 89 02             	mov    WORD PTR [edx],ax
c0007265:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007269:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000726e:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007272:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000727a:	66 89 02             	mov    WORD PTR [edx],ax
c000727d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007281:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007284:	0f b7 c0             	movzx  eax,ax
c0007287:	3d 40 06 00 00       	cmp    eax,0x640
c000728c:	74 1a                	je     c00072a8 <mem_trim+0x20c>
c000728e:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007294:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007298:	66 8b 00             	mov    ax,WORD PTR [eax]
c000729b:	0f b7 c0             	movzx  eax,ax
c000729e:	01 c2                	add    edx,eax
c00072a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072a4:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00072a8:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00072ae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00072b2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00072b6:	29 d1                	sub    ecx,edx
c00072b8:	89 ca                	mov    edx,ecx
c00072ba:	01 d0                	add    eax,edx
c00072bc:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c00072c2:	e9 c9 00 00 00       	jmp    c0007390 <mem_trim+0x2f4>
c00072c7:	90                   	nop
c00072c8:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00072cd:	8d 50 12             	lea    edx,[eax+0x12]
c00072d0:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00072d5:	39 c2                	cmp    edx,eax
c00072d7:	0f 87 b3 00 00 00    	ja     c0007390 <mem_trim+0x2f4>
c00072dd:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c00072e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072e6:	01 d0                	add    eax,edx
c00072e8:	83 c0 06             	add    eax,0x6
c00072eb:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c00072f0:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00072f6:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00072fb:	01 d0                	add    eax,edx
c00072fd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007301:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0007306:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000730a:	73 0c                	jae    c0007318 <mem_trim+0x27c>
c000730c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007310:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0007315:	8d 76 00             	lea    esi,[esi+0x0]
c0007318:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000731c:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007320:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007324:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007327:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000732b:	66 89 02             	mov    WORD PTR [edx],ax
c000732e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007332:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0007337:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000733b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000733f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007343:	66 89 02             	mov    WORD PTR [edx],ax
c0007346:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000734a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000734d:	0f b7 c0             	movzx  eax,ax
c0007350:	3d 40 06 00 00       	cmp    eax,0x640
c0007355:	74 1d                	je     c0007374 <mem_trim+0x2d8>
c0007357:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000735d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007361:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007364:	0f b7 c0             	movzx  eax,ax
c0007367:	01 c2                	add    edx,eax
c0007369:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000736d:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007371:	8d 76 00             	lea    esi,[esi+0x0]
c0007374:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c000737a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000737e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007382:	29 d1                	sub    ecx,edx
c0007384:	89 ca                	mov    edx,ecx
c0007386:	01 d0                	add    eax,edx
c0007388:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c000738e:	66 90                	xchg   ax,ax
c0007390:	83 ec 0c             	sub    esp,0xc
c0007393:	68 98 76 03 c0       	push   0xc0037698
c0007398:	e8 ab 98 ff ff       	call   c0000c48 <sys_mutex_unlock>
c000739d:	83 c4 10             	add    esp,0x10
c00073a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00073a4:	83 c4 2c             	add    esp,0x2c
c00073a7:	c3                   	ret    

c00073a8 <mem_malloc>:
c00073a8:	53                   	push   ebx
c00073a9:	83 ec 28             	sub    esp,0x28
c00073ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00073b0:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00073b5:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00073ba:	85 c0                	test   eax,eax
c00073bc:	75 0a                	jne    c00073c8 <mem_malloc+0x20>
c00073be:	b8 00 00 00 00       	mov    eax,0x0
c00073c3:	e9 f4 02 00 00       	jmp    c00076bc <mem_malloc+0x314>
c00073c8:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00073cd:	83 f8 0b             	cmp    eax,0xb
c00073d0:	77 0a                	ja     c00073dc <mem_malloc+0x34>
c00073d2:	66 c7 44 24 0c 0c 00 	mov    WORD PTR [esp+0xc],0xc
c00073d9:	8d 76 00             	lea    esi,[esi+0x0]
c00073dc:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00073e1:	3d 40 06 00 00       	cmp    eax,0x640
c00073e6:	76 0c                	jbe    c00073f4 <mem_malloc+0x4c>
c00073e8:	b8 00 00 00 00       	mov    eax,0x0
c00073ed:	e9 ca 02 00 00       	jmp    c00076bc <mem_malloc+0x314>
c00073f2:	66 90                	xchg   ax,ax
c00073f4:	83 ec 0c             	sub    esp,0xc
c00073f7:	68 98 76 03 c0       	push   0xc0037698
c00073fc:	e8 43 98 ff ff       	call   c0000c44 <sys_mutex_lock>
c0007401:	83 c4 10             	add    esp,0x10
c0007404:	8b 15 9c 76 03 c0    	mov    edx,DWORD PTR ds:0xc003769c
c000740a:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c000740f:	29 c2                	sub    edx,eax
c0007411:	89 d0                	mov    eax,edx
c0007413:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0007418:	e9 5f 02 00 00       	jmp    c000767c <mem_malloc+0x2d4>
c000741d:	8d 76 00             	lea    esi,[esi+0x0]
c0007420:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007426:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000742b:	01 d0                	add    eax,edx
c000742d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007431:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007435:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007438:	0f b6 c0             	movzx  eax,al
c000743b:	85 c0                	test   eax,eax
c000743d:	0f 85 21 02 00 00    	jne    c0007664 <mem_malloc+0x2bc>
c0007443:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007447:	66 8b 00             	mov    ax,WORD PTR [eax]
c000744a:	0f b7 d0             	movzx  edx,ax
c000744d:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0007452:	29 c2                	sub    edx,eax
c0007454:	89 d0                	mov    eax,edx
c0007456:	8d 50 fa             	lea    edx,[eax-0x6]
c0007459:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000745e:	39 c2                	cmp    edx,eax
c0007460:	0f 82 fe 01 00 00    	jb     c0007664 <mem_malloc+0x2bc>
c0007466:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000746a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000746d:	0f b7 d0             	movzx  edx,ax
c0007470:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0007475:	29 c2                	sub    edx,eax
c0007477:	89 d0                	mov    eax,edx
c0007479:	8d 50 fa             	lea    edx,[eax-0x6]
c000747c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007481:	83 c0 12             	add    eax,0x12
c0007484:	39 c2                	cmp    edx,eax
c0007486:	0f 82 c4 00 00 00    	jb     c0007550 <mem_malloc+0x1a8>
c000748c:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c0007491:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007495:	01 d0                	add    eax,edx
c0007497:	83 c0 06             	add    eax,0x6
c000749a:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000749f:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00074a5:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c00074aa:	01 d0                	add    eax,edx
c00074ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00074b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074b4:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00074b8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074bc:	66 8b 00             	mov    ax,WORD PTR [eax]
c00074bf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00074c3:	66 89 02             	mov    WORD PTR [edx],ax
c00074c6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00074ca:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00074cf:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00074d3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00074d7:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00074dc:	66 89 02             	mov    WORD PTR [edx],ax
c00074df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074e3:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c00074e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074eb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00074ee:	0f b7 c0             	movzx  eax,ax
c00074f1:	3d 40 06 00 00       	cmp    eax,0x640
c00074f6:	74 1c                	je     c0007514 <mem_malloc+0x16c>
c00074f8:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00074fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007502:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007505:	0f b7 c0             	movzx  eax,ax
c0007508:	01 c2                	add    edx,eax
c000750a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000750f:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007513:	90                   	nop
c0007514:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c000751a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000751e:	01 d0                	add    eax,edx
c0007520:	83 c0 06             	add    eax,0x6
c0007523:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c0007529:	66 8b 15 cc 67 03 c0 	mov    dx,WORD PTR ds:0xc00367cc
c0007530:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c0007536:	0f b7 d2             	movzx  edx,dx
c0007539:	0f b7 c0             	movzx  eax,ax
c000753c:	39 c2                	cmp    edx,eax
c000753e:	73 60                	jae    c00075a0 <mem_malloc+0x1f8>
c0007540:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c0007546:	66 a3 cc 67 03 c0    	mov    ds:0xc00367cc,ax
c000754c:	eb 52                	jmp    c00075a0 <mem_malloc+0x1f8>
c000754e:	66 90                	xchg   ax,ax
c0007550:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007554:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c0007558:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c000755e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007562:	66 8b 12             	mov    dx,WORD PTR [edx]
c0007565:	8b 0d a4 76 03 c0    	mov    ecx,DWORD PTR ds:0xc00376a4
c000756b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000756f:	29 cb                	sub    ebx,ecx
c0007571:	89 d9                	mov    ecx,ebx
c0007573:	29 ca                	sub    edx,ecx
c0007575:	01 d0                	add    eax,edx
c0007577:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c000757d:	66 8b 15 cc 67 03 c0 	mov    dx,WORD PTR ds:0xc00367cc
c0007584:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c000758a:	0f b7 d2             	movzx  edx,dx
c000758d:	0f b7 c0             	movzx  eax,ax
c0007590:	39 c2                	cmp    edx,eax
c0007592:	73 0c                	jae    c00075a0 <mem_malloc+0x1f8>
c0007594:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c000759a:	66 a3 cc 67 03 c0    	mov    ds:0xc00367cc,ax
c00075a0:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c00075a5:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00075a9:	75 71                	jne    c000761c <mem_malloc+0x274>
c00075ab:	eb 1b                	jmp    c00075c8 <mem_malloc+0x220>
c00075ad:	8d 76 00             	lea    esi,[esi+0x0]
c00075b0:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00075b6:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c00075bb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00075be:	0f b7 c0             	movzx  eax,ax
c00075c1:	01 d0                	add    eax,edx
c00075c3:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c00075c8:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c00075cd:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00075d0:	0f b6 c0             	movzx  eax,al
c00075d3:	85 c0                	test   eax,eax
c00075d5:	74 11                	je     c00075e8 <mem_malloc+0x240>
c00075d7:	8b 15 9c 76 03 c0    	mov    edx,DWORD PTR ds:0xc003769c
c00075dd:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00075e2:	39 c2                	cmp    edx,eax
c00075e4:	75 ca                	jne    c00075b0 <mem_malloc+0x208>
c00075e6:	66 90                	xchg   ax,ax
c00075e8:	8b 15 9c 76 03 c0    	mov    edx,DWORD PTR ds:0xc003769c
c00075ee:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00075f3:	39 c2                	cmp    edx,eax
c00075f5:	74 25                	je     c000761c <mem_malloc+0x274>
c00075f7:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c00075fc:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00075ff:	0f b6 c0             	movzx  eax,al
c0007602:	85 c0                	test   eax,eax
c0007604:	74 16                	je     c000761c <mem_malloc+0x274>
c0007606:	83 ec 08             	sub    esp,0x8
c0007609:	68 c5 f6 02 c0       	push   0xc002f6c5
c000760e:	68 26 f6 02 c0       	push   0xc002f626
c0007613:	e8 7c 83 01 00       	call   c001f994 <CPrintf>
c0007618:	83 c4 10             	add    esp,0x10
c000761b:	90                   	nop
c000761c:	83 ec 0c             	sub    esp,0xc
c000761f:	68 98 76 03 c0       	push   0xc0037698
c0007624:	e8 1f 96 ff ff       	call   c0000c48 <sys_mutex_unlock>
c0007629:	83 c4 10             	add    esp,0x10
c000762c:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0007631:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007635:	01 d0                	add    eax,edx
c0007637:	8d 50 06             	lea    edx,[eax+0x6]
c000763a:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c000763f:	39 c2                	cmp    edx,eax
c0007641:	76 15                	jbe    c0007658 <mem_malloc+0x2b0>
c0007643:	83 ec 08             	sub    esp,0x8
c0007646:	68 2c f7 02 c0       	push   0xc002f72c
c000764b:	68 26 f6 02 c0       	push   0xc002f626
c0007650:	e8 3f 83 01 00       	call   c001f994 <CPrintf>
c0007655:	83 c4 10             	add    esp,0x10
c0007658:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000765c:	83 c0 06             	add    eax,0x6
c000765f:	eb 5b                	jmp    c00076bc <mem_malloc+0x314>
c0007661:	8d 76 00             	lea    esi,[esi+0x0]
c0007664:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000766a:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000766f:	01 d0                	add    eax,edx
c0007671:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007674:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0007679:	8d 76 00             	lea    esi,[esi+0x0]
c000767c:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0007681:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0007686:	b9 40 06 00 00       	mov    ecx,0x640
c000768b:	29 d1                	sub    ecx,edx
c000768d:	89 ca                	mov    edx,ecx
c000768f:	39 d0                	cmp    eax,edx
c0007691:	0f 8c 89 fd ff ff    	jl     c0007420 <mem_malloc+0x78>
c0007697:	66 a1 ce 67 03 c0    	mov    ax,ds:0xc00367ce
c000769d:	83 c0 01             	add    eax,0x1
c00076a0:	66 a3 ce 67 03 c0    	mov    ds:0xc00367ce,ax
c00076a6:	83 ec 0c             	sub    esp,0xc
c00076a9:	68 98 76 03 c0       	push   0xc0037698
c00076ae:	e8 95 95 ff ff       	call   c0000c48 <sys_mutex_unlock>
c00076b3:	83 c4 10             	add    esp,0x10
c00076b6:	b8 00 00 00 00       	mov    eax,0x0
c00076bb:	90                   	nop
c00076bc:	83 c4 28             	add    esp,0x28
c00076bf:	5b                   	pop    ebx
c00076c0:	c3                   	ret    
c00076c1:	8d 76 00             	lea    esi,[esi+0x0]

c00076c4 <mem_calloc>:
c00076c4:	83 ec 2c             	sub    esp,0x2c
c00076c7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00076cb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00076cf:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c00076d4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00076d9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00076dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00076e1:	0f af c2             	imul   eax,edx
c00076e4:	0f b7 c0             	movzx  eax,ax
c00076e7:	83 ec 0c             	sub    esp,0xc
c00076ea:	50                   	push   eax
c00076eb:	e8 b8 fc ff ff       	call   c00073a8 <mem_malloc>
c00076f0:	83 c4 10             	add    esp,0x10
c00076f3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076f7:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00076fc:	74 22                	je     c0007720 <mem_calloc+0x5c>
c00076fe:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0007703:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0007708:	0f af c2             	imul   eax,edx
c000770b:	83 ec 04             	sub    esp,0x4
c000770e:	50                   	push   eax
c000770f:	6a 00                	push   0x0
c0007711:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007715:	e8 d6 8d ff ff       	call   c00004f0 <memset>
c000771a:	83 c4 10             	add    esp,0x10
c000771d:	8d 76 00             	lea    esi,[esi+0x0]
c0007720:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007724:	83 c4 2c             	add    esp,0x2c
c0007727:	c3                   	ret    

c0007728 <memp_init>:
c0007728:	83 ec 10             	sub    esp,0x10
c000772b:	66 c7 44 24 0a 00 00 	mov    WORD PTR [esp+0xa],0x0
c0007732:	eb 78                	jmp    c00077ac <memp_init+0x84>
c0007734:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0007739:	89 d0                	mov    eax,edx
c000773b:	c1 e0 02             	shl    eax,0x2
c000773e:	01 d0                	add    eax,edx
c0007740:	01 c0                	add    eax,eax
c0007742:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007747:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c000774c:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0007751:	89 d0                	mov    eax,edx
c0007753:	c1 e0 02             	shl    eax,0x2
c0007756:	01 d0                	add    eax,edx
c0007758:	01 c0                	add    eax,eax
c000775a:	05 d6 67 03 c0       	add    eax,0xc00367d6
c000775f:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c0007764:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0007769:	89 d0                	mov    eax,edx
c000776b:	c1 e0 02             	shl    eax,0x2
c000776e:	01 d0                	add    eax,edx
c0007770:	01 c0                	add    eax,eax
c0007772:	05 d8 67 03 c0       	add    eax,0xc00367d8
c0007777:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c000777c:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007781:	0f b7 4c 24 0a       	movzx  ecx,WORD PTR [esp+0xa]
c0007786:	66 8b 94 00 7c f7 02 c0 	mov    dx,WORD PTR [eax+eax*1-0x3ffd0884]
c000778e:	89 c8                	mov    eax,ecx
c0007790:	c1 e0 02             	shl    eax,0x2
c0007793:	01 c8                	add    eax,ecx
c0007795:	01 c0                	add    eax,eax
c0007797:	05 d2 67 03 c0       	add    eax,0xc00367d2
c000779c:	66 89 10             	mov    WORD PTR [eax],dx
c000779f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00077a4:	83 c0 01             	add    eax,0x1
c00077a7:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00077ac:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00077b1:	83 f8 0d             	cmp    eax,0xd
c00077b4:	0f 86 7a ff ff ff    	jbe    c0007734 <memp_init+0xc>
c00077ba:	c7 44 24 0c c0 76 03 c0 	mov    DWORD PTR [esp+0xc],0xc00376c0
c00077c2:	66 c7 44 24 0a 00 00 	mov    WORD PTR [esp+0xa],0x0
c00077c9:	e9 8a 00 00 00       	jmp    c0007858 <memp_init+0x130>
c00077ce:	66 90                	xchg   ax,ax
c00077d0:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00077d5:	c7 04 85 60 a8 03 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffc57a0],0x0
c00077e0:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c00077e7:	eb 47                	jmp    c0007830 <memp_init+0x108>
c00077e9:	8d 76 00             	lea    esi,[esi+0x0]
c00077ec:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00077f1:	8b 14 85 60 a8 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc57a0]
c00077f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00077fc:	89 10                	mov    DWORD PTR [eax],edx
c00077fe:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007803:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007807:	89 14 85 60 a8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc57a0],edx
c000780e:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007813:	66 8b 84 00 98 f7 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd0868]
c000781b:	0f b7 c0             	movzx  eax,ax
c000781e:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0007822:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007826:	83 c0 01             	add    eax,0x1
c0007829:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000782e:	66 90                	xchg   ax,ax
c0007830:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007835:	66 8b 84 00 7c f7 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd0884]
c000783d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0007842:	0f b7 c0             	movzx  eax,ax
c0007845:	39 c2                	cmp    edx,eax
c0007847:	72 a3                	jb     c00077ec <memp_init+0xc4>
c0007849:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000784e:	83 c0 01             	add    eax,0x1
c0007851:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0007856:	66 90                	xchg   ax,ax
c0007858:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000785d:	83 f8 0d             	cmp    eax,0xd
c0007860:	0f 86 6a ff ff ff    	jbe    c00077d0 <memp_init+0xa8>
c0007866:	90                   	nop
c0007867:	83 c4 10             	add    esp,0x10
c000786a:	c3                   	ret    
c000786b:	90                   	nop

c000786c <memp_malloc>:
c000786c:	83 ec 1c             	sub    esp,0x1c
c000786f:	83 7c 24 20 0d       	cmp    DWORD PTR [esp+0x20],0xd
c0007874:	76 22                	jbe    c0007898 <memp_malloc+0x2c>
c0007876:	83 ec 08             	sub    esp,0x8
c0007879:	68 5c f7 02 c0       	push   0xc002f75c
c000787e:	68 26 f6 02 c0       	push   0xc002f626
c0007883:	e8 0c 81 01 00       	call   c001f994 <CPrintf>
c0007888:	83 c4 10             	add    esp,0x10
c000788b:	b8 00 00 00 00       	mov    eax,0x0
c0007890:	e9 ff 00 00 00       	jmp    c0007994 <memp_malloc+0x128>
c0007895:	8d 76 00             	lea    esi,[esi+0x0]
c0007898:	e8 e7 80 01 00       	call   c001f984 <CLockScheduler>
c000789d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00078a1:	8b 04 85 60 a8 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc57a0]
c00078a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00078ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00078b1:	0f 84 a1 00 00 00    	je     c0007958 <memp_malloc+0xec>
c00078b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00078bb:	8b 10                	mov    edx,DWORD PTR [eax]
c00078bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00078c1:	89 14 85 60 a8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc57a0],edx
c00078c8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00078cc:	89 d0                	mov    eax,edx
c00078ce:	c1 e0 02             	shl    eax,0x2
c00078d1:	01 d0                	add    eax,edx
c00078d3:	01 c0                	add    eax,eax
c00078d5:	05 d4 67 03 c0       	add    eax,0xc00367d4
c00078da:	66 8b 00             	mov    ax,WORD PTR [eax]
c00078dd:	83 c0 01             	add    eax,0x1
c00078e0:	89 c2                	mov    edx,eax
c00078e2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00078e6:	89 c8                	mov    eax,ecx
c00078e8:	c1 e0 02             	shl    eax,0x2
c00078eb:	01 c8                	add    eax,ecx
c00078ed:	01 c0                	add    eax,eax
c00078ef:	05 d4 67 03 c0       	add    eax,0xc00367d4
c00078f4:	66 89 10             	mov    WORD PTR [eax],dx
c00078f7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00078fb:	89 d0                	mov    eax,edx
c00078fd:	c1 e0 02             	shl    eax,0x2
c0007900:	01 d0                	add    eax,edx
c0007902:	01 c0                	add    eax,eax
c0007904:	05 d6 67 03 c0       	add    eax,0xc00367d6
c0007909:	66 8b 10             	mov    dx,WORD PTR [eax]
c000790c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007910:	89 c8                	mov    eax,ecx
c0007912:	c1 e0 02             	shl    eax,0x2
c0007915:	01 c8                	add    eax,ecx
c0007917:	01 c0                	add    eax,eax
c0007919:	05 d4 67 03 c0       	add    eax,0xc00367d4
c000791e:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007921:	0f b7 d2             	movzx  edx,dx
c0007924:	0f b7 c0             	movzx  eax,ax
c0007927:	39 c2                	cmp    edx,eax
c0007929:	73 5d                	jae    c0007988 <memp_malloc+0x11c>
c000792b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000792f:	89 d0                	mov    eax,edx
c0007931:	c1 e0 02             	shl    eax,0x2
c0007934:	01 d0                	add    eax,edx
c0007936:	01 c0                	add    eax,eax
c0007938:	05 d4 67 03 c0       	add    eax,0xc00367d4
c000793d:	66 8b 10             	mov    dx,WORD PTR [eax]
c0007940:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007944:	89 c8                	mov    eax,ecx
c0007946:	c1 e0 02             	shl    eax,0x2
c0007949:	01 c8                	add    eax,ecx
c000794b:	01 c0                	add    eax,eax
c000794d:	05 d6 67 03 c0       	add    eax,0xc00367d6
c0007952:	66 89 10             	mov    WORD PTR [eax],dx
c0007955:	eb 31                	jmp    c0007988 <memp_malloc+0x11c>
c0007957:	90                   	nop
c0007958:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000795c:	89 d0                	mov    eax,edx
c000795e:	c1 e0 02             	shl    eax,0x2
c0007961:	01 d0                	add    eax,edx
c0007963:	01 c0                	add    eax,eax
c0007965:	05 d8 67 03 c0       	add    eax,0xc00367d8
c000796a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000796d:	83 c0 01             	add    eax,0x1
c0007970:	89 c2                	mov    edx,eax
c0007972:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007976:	89 c8                	mov    eax,ecx
c0007978:	c1 e0 02             	shl    eax,0x2
c000797b:	01 c8                	add    eax,ecx
c000797d:	01 c0                	add    eax,eax
c000797f:	05 d8 67 03 c0       	add    eax,0xc00367d8
c0007984:	66 89 10             	mov    WORD PTR [eax],dx
c0007987:	90                   	nop
c0007988:	e8 db 7f 01 00       	call   c001f968 <CUnlockScheduler>
c000798d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007991:	8d 76 00             	lea    esi,[esi+0x0]
c0007994:	83 c4 1c             	add    esp,0x1c
c0007997:	c3                   	ret    

c0007998 <memp_free>:
c0007998:	83 ec 1c             	sub    esp,0x1c
c000799b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00079a0:	74 66                	je     c0007a08 <memp_free+0x70>
c00079a2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00079a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00079aa:	e8 d5 7f 01 00       	call   c001f984 <CLockScheduler>
c00079af:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00079b3:	89 d0                	mov    eax,edx
c00079b5:	c1 e0 02             	shl    eax,0x2
c00079b8:	01 d0                	add    eax,edx
c00079ba:	01 c0                	add    eax,eax
c00079bc:	05 d4 67 03 c0       	add    eax,0xc00367d4
c00079c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00079c4:	83 e8 01             	sub    eax,0x1
c00079c7:	89 c2                	mov    edx,eax
c00079c9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079cd:	89 c8                	mov    eax,ecx
c00079cf:	c1 e0 02             	shl    eax,0x2
c00079d2:	01 c8                	add    eax,ecx
c00079d4:	01 c0                	add    eax,eax
c00079d6:	05 d4 67 03 c0       	add    eax,0xc00367d4
c00079db:	66 89 10             	mov    WORD PTR [eax],dx
c00079de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00079e2:	8b 14 85 60 a8 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc57a0]
c00079e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079ed:	89 10                	mov    DWORD PTR [eax],edx
c00079ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00079f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00079f7:	89 14 85 60 a8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc57a0],edx
c00079fe:	e8 65 7f 01 00       	call   c001f968 <CUnlockScheduler>
c0007a03:	eb 07                	jmp    c0007a0c <memp_free+0x74>
c0007a05:	8d 76 00             	lea    esi,[esi+0x0]
c0007a08:	90                   	nop
c0007a09:	8d 76 00             	lea    esi,[esi+0x0]
c0007a0c:	83 c4 1c             	add    esp,0x1c
c0007a0f:	c3                   	ret    

c0007a10 <netif_init>:
c0007a10:	90                   	nop
c0007a11:	c3                   	ret    
c0007a12:	66 90                	xchg   ax,ax

c0007a14 <netif_find>:
c0007a14:	83 ec 10             	sub    esp,0x10
c0007a17:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007a1c:	75 0a                	jne    c0007a28 <netif_find+0x14>
c0007a1e:	b8 00 00 00 00       	mov    eax,0x0
c0007a23:	e9 80 00 00 00       	jmp    c0007aa8 <netif_find+0x94>
c0007a28:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007a2c:	83 c0 02             	add    eax,0x2
c0007a2f:	8a 00                	mov    al,BYTE PTR [eax]
c0007a31:	83 e8 30             	sub    eax,0x30
c0007a34:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0007a38:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0007a3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007a41:	eb 59                	jmp    c0007a9c <netif_find+0x88>
c0007a43:	90                   	nop
c0007a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a48:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0007a4b:	0f b6 54 24 0b       	movzx  edx,BYTE PTR [esp+0xb]
c0007a50:	0f b6 c0             	movzx  eax,al
c0007a53:	39 c2                	cmp    edx,eax
c0007a55:	75 39                	jne    c0007a90 <netif_find+0x7c>
c0007a57:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007a5b:	8a 10                	mov    dl,BYTE PTR [eax]
c0007a5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a61:	8a 40 2a             	mov    al,BYTE PTR [eax+0x2a]
c0007a64:	0f be d2             	movsx  edx,dl
c0007a67:	0f be c0             	movsx  eax,al
c0007a6a:	39 c2                	cmp    edx,eax
c0007a6c:	75 22                	jne    c0007a90 <netif_find+0x7c>
c0007a6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007a72:	83 c0 01             	add    eax,0x1
c0007a75:	8a 10                	mov    dl,BYTE PTR [eax]
c0007a77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a7b:	8a 40 2b             	mov    al,BYTE PTR [eax+0x2b]
c0007a7e:	0f be d2             	movsx  edx,dl
c0007a81:	0f be c0             	movsx  eax,al
c0007a84:	39 c2                	cmp    edx,eax
c0007a86:	75 08                	jne    c0007a90 <netif_find+0x7c>
c0007a88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a8c:	eb 1a                	jmp    c0007aa8 <netif_find+0x94>
c0007a8e:	66 90                	xchg   ax,ax
c0007a90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a94:	8b 00                	mov    eax,DWORD PTR [eax]
c0007a96:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007a9a:	66 90                	xchg   ax,ax
c0007a9c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007aa1:	75 a1                	jne    c0007a44 <netif_find+0x30>
c0007aa3:	b8 00 00 00 00       	mov    eax,0x0
c0007aa8:	83 c4 10             	add    esp,0x10
c0007aab:	c3                   	ret    

c0007aac <netif_set_ipaddr>:
c0007aac:	83 ec 1c             	sub    esp,0x1c
c0007aaf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007ab3:	8b 10                	mov    edx,DWORD PTR [eax]
c0007ab5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ab9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007abc:	39 c2                	cmp    edx,eax
c0007abe:	0f 84 bc 00 00 00    	je     c0007b80 <netif_set_ipaddr+0xd4>
c0007ac4:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0007ac9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007acd:	eb 45                	jmp    c0007b14 <netif_set_ipaddr+0x68>
c0007acf:	90                   	nop
c0007ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ad4:	8b 10                	mov    edx,DWORD PTR [eax]
c0007ad6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ada:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007add:	39 c2                	cmp    edx,eax
c0007adf:	75 27                	jne    c0007b08 <netif_set_ipaddr+0x5c>
c0007ae1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ae5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007ae8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007aec:	83 ec 0c             	sub    esp,0xc
c0007aef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007af3:	e8 7c 36 00 00       	call   c000b174 <tcp_abort>
c0007af8:	83 c4 10             	add    esp,0x10
c0007afb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007aff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007b03:	eb 0f                	jmp    c0007b14 <netif_set_ipaddr+0x68>
c0007b05:	8d 76 00             	lea    esi,[esi+0x0]
c0007b08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b0c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007b0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007b13:	90                   	nop
c0007b14:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007b19:	75 b5                	jne    c0007ad0 <netif_set_ipaddr+0x24>
c0007b1b:	a1 78 68 03 c0       	mov    eax,ds:0xc0036878
c0007b20:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007b24:	eb 52                	jmp    c0007b78 <netif_set_ipaddr+0xcc>
c0007b26:	66 90                	xchg   ax,ax
c0007b28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b2c:	85 c0                	test   eax,eax
c0007b2e:	74 3c                	je     c0007b6c <netif_set_ipaddr+0xc0>
c0007b30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b34:	8b 00                	mov    eax,DWORD PTR [eax]
c0007b36:	85 c0                	test   eax,eax
c0007b38:	74 32                	je     c0007b6c <netif_set_ipaddr+0xc0>
c0007b3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b3e:	8b 10                	mov    edx,DWORD PTR [eax]
c0007b40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007b44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007b47:	39 c2                	cmp    edx,eax
c0007b49:	75 21                	jne    c0007b6c <netif_set_ipaddr+0xc0>
c0007b4b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007b50:	74 0a                	je     c0007b5c <netif_set_ipaddr+0xb0>
c0007b52:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007b56:	8b 00                	mov    eax,DWORD PTR [eax]
c0007b58:	eb 0a                	jmp    c0007b64 <netif_set_ipaddr+0xb8>
c0007b5a:	66 90                	xchg   ax,ax
c0007b5c:	b8 00 00 00 00       	mov    eax,0x0
c0007b61:	8d 76 00             	lea    esi,[esi+0x0]
c0007b64:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007b68:	89 02                	mov    DWORD PTR [edx],eax
c0007b6a:	66 90                	xchg   ax,ax
c0007b6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b70:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007b73:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007b77:	90                   	nop
c0007b78:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007b7d:	75 a9                	jne    c0007b28 <netif_set_ipaddr+0x7c>
c0007b7f:	90                   	nop
c0007b80:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007b85:	74 09                	je     c0007b90 <netif_set_ipaddr+0xe4>
c0007b87:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007b8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0007b8d:	eb 09                	jmp    c0007b98 <netif_set_ipaddr+0xec>
c0007b8f:	90                   	nop
c0007b90:	b8 00 00 00 00       	mov    eax,0x0
c0007b95:	8d 76 00             	lea    esi,[esi+0x0]
c0007b98:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007b9c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0007b9f:	90                   	nop
c0007ba0:	83 c4 1c             	add    esp,0x1c
c0007ba3:	c3                   	ret    

c0007ba4 <netif_set_gw>:
c0007ba4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ba9:	74 09                	je     c0007bb4 <netif_set_gw+0x10>
c0007bab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007baf:	8b 00                	mov    eax,DWORD PTR [eax]
c0007bb1:	eb 09                	jmp    c0007bbc <netif_set_gw+0x18>
c0007bb3:	90                   	nop
c0007bb4:	b8 00 00 00 00       	mov    eax,0x0
c0007bb9:	8d 76 00             	lea    esi,[esi+0x0]
c0007bbc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007bc0:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0007bc3:	90                   	nop
c0007bc4:	c3                   	ret    
c0007bc5:	8d 76 00             	lea    esi,[esi+0x0]

c0007bc8 <netif_set_netmask>:
c0007bc8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007bcd:	74 09                	je     c0007bd8 <netif_set_netmask+0x10>
c0007bcf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bd3:	8b 00                	mov    eax,DWORD PTR [eax]
c0007bd5:	eb 09                	jmp    c0007be0 <netif_set_netmask+0x18>
c0007bd7:	90                   	nop
c0007bd8:	b8 00 00 00 00       	mov    eax,0x0
c0007bdd:	8d 76 00             	lea    esi,[esi+0x0]
c0007be0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007be4:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0007be7:	90                   	nop
c0007be8:	c3                   	ret    
c0007be9:	8d 76 00             	lea    esi,[esi+0x0]

c0007bec <netif_set_addr>:
c0007bec:	83 ec 0c             	sub    esp,0xc
c0007bef:	83 ec 08             	sub    esp,0x8
c0007bf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007bf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007bfa:	e8 ad fe ff ff       	call   c0007aac <netif_set_ipaddr>
c0007bff:	83 c4 10             	add    esp,0x10
c0007c02:	83 ec 08             	sub    esp,0x8
c0007c05:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007c09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007c0d:	e8 b6 ff ff ff       	call   c0007bc8 <netif_set_netmask>
c0007c12:	83 c4 10             	add    esp,0x10
c0007c15:	83 ec 08             	sub    esp,0x8
c0007c18:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007c1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007c20:	e8 7f ff ff ff       	call   c0007ba4 <netif_set_gw>
c0007c25:	83 c4 10             	add    esp,0x10
c0007c28:	90                   	nop
c0007c29:	83 c4 0c             	add    esp,0xc
c0007c2c:	c3                   	ret    
c0007c2d:	8d 76 00             	lea    esi,[esi+0x0]

c0007c30 <netif_add>:
c0007c30:	83 ec 0c             	sub    esp,0xc
c0007c33:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007c38:	75 16                	jne    c0007c50 <netif_add+0x20>
c0007c3a:	83 ec 08             	sub    esp,0x8
c0007c3d:	68 b4 f7 02 c0       	push   0xc002f7b4
c0007c42:	68 26 f6 02 c0       	push   0xc002f626
c0007c47:	e8 48 7d 01 00       	call   c001f994 <CPrintf>
c0007c4c:	83 c4 10             	add    esp,0x10
c0007c4f:	90                   	nop
c0007c50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007c54:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0007c5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007c5f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0007c66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007c6a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0007c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007c75:	c6 40 29 00          	mov    BYTE PTR [eax+0x29],0x0
c0007c79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007c7d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007c81:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0007c84:	a0 98 a8 03 c0       	mov    al,ds:0xc003a898
c0007c89:	8d 50 01             	lea    edx,[eax+0x1]
c0007c8c:	88 15 98 a8 03 c0    	mov    BYTE PTR ds:0xc003a898,dl
c0007c92:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007c96:	88 42 2c             	mov    BYTE PTR [edx+0x2c],al
c0007c99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007c9d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007ca1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0007ca4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ca8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007cac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007cb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007cb4:	e8 33 ff ff ff       	call   c0007bec <netif_set_addr>
c0007cb9:	83 c4 10             	add    esp,0x10
c0007cbc:	83 ec 0c             	sub    esp,0xc
c0007cbf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007cc3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007cc7:	ff d0                	call   eax
c0007cc9:	83 c4 10             	add    esp,0x10
c0007ccc:	0f be c0             	movsx  eax,al
c0007ccf:	85 c0                	test   eax,eax
c0007cd1:	74 09                	je     c0007cdc <netif_add+0xac>
c0007cd3:	b8 00 00 00 00       	mov    eax,0x0
c0007cd8:	eb 1e                	jmp    c0007cf8 <netif_add+0xc8>
c0007cda:	66 90                	xchg   ax,ax
c0007cdc:	8b 15 10 67 03 c0    	mov    edx,DWORD PTR ds:0xc0036710
c0007ce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ce6:	89 10                	mov    DWORD PTR [eax],edx
c0007ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007cec:	a3 10 67 03 c0       	mov    ds:0xc0036710,eax
c0007cf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007cf5:	8d 76 00             	lea    esi,[esi+0x0]
c0007cf8:	83 c4 0c             	add    esp,0xc
c0007cfb:	c3                   	ret    

c0007cfc <netif_set_default>:
c0007cfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d00:	a3 14 67 03 c0       	mov    ds:0xc0036714,eax
c0007d05:	90                   	nop
c0007d06:	c3                   	ret    
c0007d07:	90                   	nop

c0007d08 <netif_set_up>:
c0007d08:	83 ec 0c             	sub    esp,0xc
c0007d0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d0f:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007d12:	0f b6 c0             	movzx  eax,al
c0007d15:	83 e0 01             	and    eax,0x1
c0007d18:	75 4a                	jne    c0007d64 <netif_set_up+0x5c>
c0007d1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d1e:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007d21:	83 c8 01             	or     eax,0x1
c0007d24:	88 c2                	mov    dl,al
c0007d26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d2a:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d31:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007d34:	0f b6 c0             	movzx  eax,al
c0007d37:	83 e0 10             	and    eax,0x10
c0007d3a:	74 28                	je     c0007d64 <netif_set_up+0x5c>
c0007d3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d40:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007d43:	0f b6 c0             	movzx  eax,al
c0007d46:	83 e0 20             	and    eax,0x20
c0007d49:	74 19                	je     c0007d64 <netif_set_up+0x5c>
c0007d4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d4f:	83 c0 04             	add    eax,0x4
c0007d52:	83 ec 08             	sub    esp,0x8
c0007d55:	50                   	push   eax
c0007d56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d5a:	e8 bd a5 00 00       	call   c001231c <etharp_request>
c0007d5f:	83 c4 10             	add    esp,0x10
c0007d62:	66 90                	xchg   ax,ax
c0007d64:	90                   	nop
c0007d65:	83 c4 0c             	add    esp,0xc
c0007d68:	c3                   	ret    
c0007d69:	8d 76 00             	lea    esi,[esi+0x0]

c0007d6c <netif_set_down>:
c0007d6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d70:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007d73:	0f b6 c0             	movzx  eax,al
c0007d76:	83 e0 01             	and    eax,0x1
c0007d79:	74 15                	je     c0007d90 <netif_set_down+0x24>
c0007d7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d7f:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007d82:	83 e0 fe             	and    eax,0xfffffffe
c0007d85:	88 c2                	mov    dl,al
c0007d87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d8b:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007d8e:	66 90                	xchg   ax,ax
c0007d90:	90                   	nop
c0007d91:	c3                   	ret    
c0007d92:	66 90                	xchg   ax,ax

c0007d94 <netif_remove>:
c0007d94:	83 ec 10             	sub    esp,0x10
c0007d97:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007d9c:	0f 84 92 00 00 00    	je     c0007e34 <netif_remove+0xa0>
c0007da2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007da6:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007da9:	83 e0 01             	and    eax,0x1
c0007dac:	0f b6 c0             	movzx  eax,al
c0007daf:	85 c0                	test   eax,eax
c0007db1:	74 0d                	je     c0007dc0 <netif_remove+0x2c>
c0007db3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007db7:	e8 b0 ff ff ff       	call   c0007d6c <netif_set_down>
c0007dbc:	83 c4 04             	add    esp,0x4
c0007dbf:	90                   	nop
c0007dc0:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0007dc5:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0007dc9:	75 0d                	jne    c0007dd8 <netif_remove+0x44>
c0007dcb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007dcf:	8b 00                	mov    eax,DWORD PTR [eax]
c0007dd1:	a3 10 67 03 c0       	mov    ds:0xc0036710,eax
c0007dd6:	eb 44                	jmp    c0007e1c <netif_remove+0x88>
c0007dd8:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0007ddd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007de1:	eb 29                	jmp    c0007e0c <netif_remove+0x78>
c0007de3:	90                   	nop
c0007de4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007de8:	8b 00                	mov    eax,DWORD PTR [eax]
c0007dea:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0007dee:	75 10                	jne    c0007e00 <netif_remove+0x6c>
c0007df0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007df4:	8b 10                	mov    edx,DWORD PTR [eax]
c0007df6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007dfa:	89 10                	mov    DWORD PTR [eax],edx
c0007dfc:	eb 16                	jmp    c0007e14 <netif_remove+0x80>
c0007dfe:	66 90                	xchg   ax,ax
c0007e00:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e04:	8b 00                	mov    eax,DWORD PTR [eax]
c0007e06:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007e0a:	66 90                	xchg   ax,ax
c0007e0c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007e11:	75 d1                	jne    c0007de4 <netif_remove+0x50>
c0007e13:	90                   	nop
c0007e14:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007e19:	74 1d                	je     c0007e38 <netif_remove+0xa4>
c0007e1b:	90                   	nop
c0007e1c:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c0007e21:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0007e25:	75 15                	jne    c0007e3c <netif_remove+0xa8>
c0007e27:	6a 00                	push   0x0
c0007e29:	e8 ce fe ff ff       	call   c0007cfc <netif_set_default>
c0007e2e:	83 c4 04             	add    esp,0x4
c0007e31:	eb 09                	jmp    c0007e3c <netif_remove+0xa8>
c0007e33:	90                   	nop
c0007e34:	90                   	nop
c0007e35:	eb 05                	jmp    c0007e3c <netif_remove+0xa8>
c0007e37:	90                   	nop
c0007e38:	90                   	nop
c0007e39:	8d 76 00             	lea    esi,[esi+0x0]
c0007e3c:	83 c4 10             	add    esp,0x10
c0007e3f:	c3                   	ret    

c0007e40 <netif_set_link_up>:
c0007e40:	83 ec 0c             	sub    esp,0xc
c0007e43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e47:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007e4a:	0f b6 c0             	movzx  eax,al
c0007e4d:	83 e0 10             	and    eax,0x10
c0007e50:	75 4a                	jne    c0007e9c <netif_set_link_up+0x5c>
c0007e52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e56:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007e59:	83 c8 10             	or     eax,0x10
c0007e5c:	88 c2                	mov    dl,al
c0007e5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e62:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007e65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e69:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007e6c:	0f b6 c0             	movzx  eax,al
c0007e6f:	83 e0 01             	and    eax,0x1
c0007e72:	74 28                	je     c0007e9c <netif_set_link_up+0x5c>
c0007e74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e78:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007e7b:	0f b6 c0             	movzx  eax,al
c0007e7e:	83 e0 20             	and    eax,0x20
c0007e81:	74 19                	je     c0007e9c <netif_set_link_up+0x5c>
c0007e83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e87:	83 c0 04             	add    eax,0x4
c0007e8a:	83 ec 08             	sub    esp,0x8
c0007e8d:	50                   	push   eax
c0007e8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e92:	e8 85 a4 00 00       	call   c001231c <etharp_request>
c0007e97:	83 c4 10             	add    esp,0x10
c0007e9a:	66 90                	xchg   ax,ax
c0007e9c:	90                   	nop
c0007e9d:	83 c4 0c             	add    esp,0xc
c0007ea0:	c3                   	ret    
c0007ea1:	8d 76 00             	lea    esi,[esi+0x0]

c0007ea4 <netif_set_link_down>:
c0007ea4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ea8:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007eab:	0f b6 c0             	movzx  eax,al
c0007eae:	83 e0 10             	and    eax,0x10
c0007eb1:	74 15                	je     c0007ec8 <netif_set_link_down+0x24>
c0007eb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007eb7:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007eba:	83 e0 ef             	and    eax,0xffffffef
c0007ebd:	88 c2                	mov    dl,al
c0007ebf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ec3:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007ec6:	66 90                	xchg   ax,ax
c0007ec8:	90                   	nop
c0007ec9:	c3                   	ret    
c0007eca:	66 90                	xchg   ax,ax

c0007ecc <pbuf_free_ooseq>:
c0007ecc:	83 ec 1c             	sub    esp,0x1c
c0007ecf:	e8 b0 7a 01 00       	call   c001f984 <CLockScheduler>
c0007ed4:	c6 05 99 a8 03 c0 00 	mov    BYTE PTR ds:0xc003a899,0x0
c0007edb:	e8 88 7a 01 00       	call   c001f968 <CUnlockScheduler>
c0007ee0:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0007ee5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ee9:	eb 41                	jmp    c0007f2c <pbuf_free_ooseq+0x60>
c0007eeb:	90                   	nop
c0007eec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ef0:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c0007ef6:	85 c0                	test   eax,eax
c0007ef8:	74 26                	je     c0007f20 <pbuf_free_ooseq+0x54>
c0007efa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007efe:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c0007f04:	83 ec 0c             	sub    esp,0xc
c0007f07:	50                   	push   eax
c0007f08:	e8 03 20 00 00       	call   c0009f10 <tcp_segs_free>
c0007f0d:	83 c4 10             	add    esp,0x10
c0007f10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f14:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c0007f1e:	eb 14                	jmp    c0007f34 <pbuf_free_ooseq+0x68>
c0007f20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f24:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007f27:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007f2b:	90                   	nop
c0007f2c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007f31:	75 b9                	jne    c0007eec <pbuf_free_ooseq+0x20>
c0007f33:	90                   	nop
c0007f34:	83 c4 1c             	add    esp,0x1c
c0007f37:	c3                   	ret    

c0007f38 <pbuf_pool_is_empty>:
c0007f38:	83 ec 1c             	sub    esp,0x1c
c0007f3b:	e8 44 7a 01 00       	call   c001f984 <CLockScheduler>
c0007f40:	a0 99 a8 03 c0       	mov    al,ds:0xc003a899
c0007f45:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0007f49:	c6 05 99 a8 03 c0 01 	mov    BYTE PTR ds:0xc003a899,0x1
c0007f50:	e8 13 7a 01 00       	call   c001f968 <CUnlockScheduler>
c0007f55:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0007f5a:	85 c0                	test   eax,eax
c0007f5c:	75 2e                	jne    c0007f8c <pbuf_pool_is_empty+0x54>
c0007f5e:	83 ec 04             	sub    esp,0x4
c0007f61:	6a 00                	push   0x0
c0007f63:	6a 00                	push   0x0
c0007f65:	68 cc 7e 00 c0       	push   0xc0007ecc
c0007f6a:	e8 dd 8c ff ff       	call   c0000c4c <tcpip_callback_with_block>
c0007f6f:	83 c4 10             	add    esp,0x10
c0007f72:	0f be c0             	movsx  eax,al
c0007f75:	85 c0                	test   eax,eax
c0007f77:	74 13                	je     c0007f8c <pbuf_pool_is_empty+0x54>
c0007f79:	e8 06 7a 01 00       	call   c001f984 <CLockScheduler>
c0007f7e:	c6 05 99 a8 03 c0 00 	mov    BYTE PTR ds:0xc003a899,0x0
c0007f85:	e8 de 79 01 00       	call   c001f968 <CUnlockScheduler>
c0007f8a:	66 90                	xchg   ax,ax
c0007f8c:	90                   	nop
c0007f8d:	83 c4 1c             	add    esp,0x1c
c0007f90:	c3                   	ret    
c0007f91:	8d 76 00             	lea    esi,[esi+0x0]

c0007f94 <pbuf_alloced_custom>:
c0007f94:	83 ec 2c             	sub    esp,0x2c
c0007f97:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0007f9b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0007f9f:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c0007fa4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0007fa9:	66 c7 44 24 1e 00 00 	mov    WORD PTR [esp+0x1e],0x0
c0007fb0:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007fb5:	74 29                	je     c0007fe0 <pbuf_alloced_custom+0x4c>
c0007fb7:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0007fbc:	74 12                	je     c0007fd0 <pbuf_alloced_custom+0x3c>
c0007fbe:	83 7c 24 30 02       	cmp    DWORD PTR [esp+0x30],0x2
c0007fc3:	74 2b                	je     c0007ff0 <pbuf_alloced_custom+0x5c>
c0007fc5:	83 7c 24 30 03       	cmp    DWORD PTR [esp+0x30],0x3
c0007fca:	74 54                	je     c0008020 <pbuf_alloced_custom+0x8c>
c0007fcc:	eb 32                	jmp    c0008000 <pbuf_alloced_custom+0x6c>
c0007fce:	66 90                	xchg   ax,ax
c0007fd0:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0007fd5:	83 c0 14             	add    eax,0x14
c0007fd8:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0007fdd:	8d 76 00             	lea    esi,[esi+0x0]
c0007fe0:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0007fe5:	83 c0 14             	add    eax,0x14
c0007fe8:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0007fed:	8d 76 00             	lea    esi,[esi+0x0]
c0007ff0:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0007ff5:	83 c0 0e             	add    eax,0xe
c0007ff8:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0007ffd:	eb 25                	jmp    c0008024 <pbuf_alloced_custom+0x90>
c0007fff:	90                   	nop
c0008000:	83 ec 08             	sub    esp,0x8
c0008003:	68 cc f7 02 c0       	push   0xc002f7cc
c0008008:	68 26 f6 02 c0       	push   0xc002f626
c000800d:	e8 82 79 01 00       	call   c001f994 <CPrintf>
c0008012:	83 c4 10             	add    esp,0x10
c0008015:	b8 00 00 00 00       	mov    eax,0x0
c000801a:	e9 95 00 00 00       	jmp    c00080b4 <pbuf_alloced_custom+0x120>
c000801f:	90                   	nop
c0008020:	90                   	nop
c0008021:	8d 76 00             	lea    esi,[esi+0x0]
c0008024:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c0008029:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000802e:	01 c2                	add    edx,eax
c0008030:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008035:	39 c2                	cmp    edx,eax
c0008037:	7d 07                	jge    c0008040 <pbuf_alloced_custom+0xac>
c0008039:	b8 00 00 00 00       	mov    eax,0x0
c000803e:	eb 74                	jmp    c00080b4 <pbuf_alloced_custom+0x120>
c0008040:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008044:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000804a:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000804f:	74 17                	je     c0008068 <pbuf_alloced_custom+0xd4>
c0008051:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c0008056:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000805a:	01 c2                	add    edx,eax
c000805c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008060:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008063:	eb 0f                	jmp    c0008074 <pbuf_alloced_custom+0xe0>
c0008065:	8d 76 00             	lea    esi,[esi+0x0]
c0008068:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000806c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008073:	90                   	nop
c0008074:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008078:	c6 40 0d 02          	mov    BYTE PTR [eax+0xd],0x2
c000807c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0008080:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008084:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008088:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000808c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000808f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0008093:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0008097:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000809b:	88 c2                	mov    dl,al
c000809d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00080a1:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c00080a4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00080a8:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c00080ae:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00080b2:	66 90                	xchg   ax,ax
c00080b4:	83 c4 2c             	add    esp,0x2c
c00080b7:	c3                   	ret    

c00080b8 <pbuf_header>:
c00080b8:	83 ec 2c             	sub    esp,0x2c
c00080bb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00080bf:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00080c4:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00080c9:	75 15                	jne    c00080e0 <pbuf_header+0x28>
c00080cb:	83 ec 08             	sub    esp,0x8
c00080ce:	68 56 fa 02 c0       	push   0xc002fa56
c00080d3:	68 26 f6 02 c0       	push   0xc002f626
c00080d8:	e8 b7 78 01 00       	call   c001f994 <CPrintf>
c00080dd:	83 c4 10             	add    esp,0x10
c00080e0:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c00080e5:	85 c0                	test   eax,eax
c00080e7:	74 07                	je     c00080f0 <pbuf_header+0x38>
c00080e9:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00080ee:	75 08                	jne    c00080f8 <pbuf_header+0x40>
c00080f0:	b0 00                	mov    al,0x0
c00080f2:	e9 59 01 00 00       	jmp    c0008250 <pbuf_header+0x198>
c00080f7:	90                   	nop
c00080f8:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c00080fd:	85 c0                	test   eax,eax
c00080ff:	79 3b                	jns    c000813c <pbuf_header+0x84>
c0008101:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008105:	f7 d8                	neg    eax
c0008107:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000810c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008110:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008114:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c0008119:	0f b7 c0             	movzx  eax,ax
c000811c:	39 c2                	cmp    edx,eax
c000811e:	76 28                	jbe    c0008148 <pbuf_header+0x90>
c0008120:	83 ec 08             	sub    esp,0x8
c0008123:	68 a7 f9 02 c0       	push   0xc002f9a7
c0008128:	68 26 f6 02 c0       	push   0xc002f626
c000812d:	e8 62 78 01 00       	call   c001f994 <CPrintf>
c0008132:	83 c4 10             	add    esp,0x10
c0008135:	b0 01                	mov    al,0x1
c0008137:	e9 14 01 00 00       	jmp    c0008250 <pbuf_header+0x198>
c000813c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008140:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0008145:	8d 76 00             	lea    esi,[esi+0x0]
c0008148:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000814c:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c000814f:	0f b6 c0             	movzx  eax,al
c0008152:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c0008157:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000815b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000815e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008162:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0008167:	85 c0                	test   eax,eax
c0008169:	74 0d                	je     c0008178 <pbuf_header+0xc0>
c000816b:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0008170:	83 f8 03             	cmp    eax,0x3
c0008173:	75 3f                	jne    c00081b4 <pbuf_header+0xfc>
c0008175:	8d 76 00             	lea    esi,[esi+0x0]
c0008178:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000817c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000817f:	0f bf 54 24 0c       	movsx  edx,WORD PTR [esp+0xc]
c0008184:	f7 da                	neg    edx
c0008186:	01 c2                	add    edx,eax
c0008188:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000818c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000818f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008193:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008196:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000819a:	83 c2 10             	add    edx,0x10
c000819d:	39 d0                	cmp    eax,edx
c000819f:	73 7f                	jae    c0008220 <pbuf_header+0x168>
c00081a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00081a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00081a9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00081ac:	b0 01                	mov    al,0x1
c00081ae:	e9 9d 00 00 00       	jmp    c0008250 <pbuf_header+0x198>
c00081b3:	90                   	nop
c00081b4:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00081b9:	83 f8 02             	cmp    eax,0x2
c00081bc:	74 0a                	je     c00081c8 <pbuf_header+0x110>
c00081be:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00081c3:	83 f8 01             	cmp    eax,0x1
c00081c6:	75 3c                	jne    c0008204 <pbuf_header+0x14c>
c00081c8:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c00081cd:	85 c0                	test   eax,eax
c00081cf:	79 2f                	jns    c0008200 <pbuf_header+0x148>
c00081d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00081d5:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00081d9:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00081de:	0f b7 c0             	movzx  eax,ax
c00081e1:	39 c2                	cmp    edx,eax
c00081e3:	77 1b                	ja     c0008200 <pbuf_header+0x148>
c00081e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00081e9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00081ec:	0f bf 54 24 0c       	movsx  edx,WORD PTR [esp+0xc]
c00081f1:	f7 da                	neg    edx
c00081f3:	01 c2                	add    edx,eax
c00081f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00081f9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00081fc:	eb 22                	jmp    c0008220 <pbuf_header+0x168>
c00081fe:	66 90                	xchg   ax,ax
c0008200:	b0 01                	mov    al,0x1
c0008202:	eb 4c                	jmp    c0008250 <pbuf_header+0x198>
c0008204:	83 ec 08             	sub    esp,0x8
c0008207:	68 c5 f9 02 c0       	push   0xc002f9c5
c000820c:	68 26 f6 02 c0       	push   0xc002f626
c0008211:	e8 7e 77 01 00       	call   c001f994 <CPrintf>
c0008216:	83 c4 10             	add    esp,0x10
c0008219:	b0 01                	mov    al,0x1
c000821b:	eb 33                	jmp    c0008250 <pbuf_header+0x198>
c000821d:	8d 76 00             	lea    esi,[esi+0x0]
c0008220:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008224:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008228:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000822c:	01 d0                	add    eax,edx
c000822e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008232:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0008236:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000823a:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000823d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008241:	01 d0                	add    eax,edx
c0008243:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008247:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000824b:	b0 00                	mov    al,0x0
c000824d:	8d 76 00             	lea    esi,[esi+0x0]
c0008250:	83 c4 2c             	add    esp,0x2c
c0008253:	c3                   	ret    

c0008254 <pbuf_free>:
c0008254:	83 ec 1c             	sub    esp,0x1c
c0008257:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000825c:	75 26                	jne    c0008284 <pbuf_free+0x30>
c000825e:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008263:	75 17                	jne    c000827c <pbuf_free+0x28>
c0008265:	83 ec 08             	sub    esp,0x8
c0008268:	68 56 fa 02 c0       	push   0xc002fa56
c000826d:	68 26 f6 02 c0       	push   0xc002f626
c0008272:	e8 1d 77 01 00       	call   c001f994 <CPrintf>
c0008277:	83 c4 10             	add    esp,0x10
c000827a:	66 90                	xchg   ax,ax
c000827c:	b0 00                	mov    al,0x0
c000827e:	e9 a5 01 00 00       	jmp    c0008428 <pbuf_free+0x1d4>
c0008283:	90                   	nop
c0008284:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008288:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c000828b:	0f b6 c0             	movzx  eax,al
c000828e:	85 c0                	test   eax,eax
c0008290:	74 42                	je     c00082d4 <pbuf_free+0x80>
c0008292:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008296:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008299:	0f b6 c0             	movzx  eax,al
c000829c:	83 f8 01             	cmp    eax,0x1
c000829f:	74 33                	je     c00082d4 <pbuf_free+0x80>
c00082a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082a5:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00082a8:	0f b6 c0             	movzx  eax,al
c00082ab:	83 f8 02             	cmp    eax,0x2
c00082ae:	74 24                	je     c00082d4 <pbuf_free+0x80>
c00082b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082b4:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00082b7:	0f b6 c0             	movzx  eax,al
c00082ba:	83 f8 03             	cmp    eax,0x3
c00082bd:	74 15                	je     c00082d4 <pbuf_free+0x80>
c00082bf:	83 ec 08             	sub    esp,0x8
c00082c2:	68 d3 f9 02 c0       	push   0xc002f9d3
c00082c7:	68 26 f6 02 c0       	push   0xc002f626
c00082cc:	e8 c3 76 01 00       	call   c001f994 <CPrintf>
c00082d1:	83 c4 10             	add    esp,0x10
c00082d4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00082d9:	e9 3a 01 00 00       	jmp    c0008418 <pbuf_free+0x1c4>
c00082de:	66 90                	xchg   ax,ax
c00082e0:	e8 9f 76 01 00       	call   c001f984 <CLockScheduler>
c00082e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082e9:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c00082ed:	0f b7 c0             	movzx  eax,ax
c00082f0:	85 c0                	test   eax,eax
c00082f2:	75 18                	jne    c000830c <pbuf_free+0xb8>
c00082f4:	83 ec 08             	sub    esp,0x8
c00082f7:	68 e8 f9 02 c0       	push   0xc002f9e8
c00082fc:	68 26 f6 02 c0       	push   0xc002f626
c0008301:	e8 8e 76 01 00       	call   c001f994 <CPrintf>
c0008306:	83 c4 10             	add    esp,0x10
c0008309:	8d 76 00             	lea    esi,[esi+0x0]
c000830c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008310:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0008314:	83 e8 01             	sub    eax,0x1
c0008317:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000831b:	66 89 42 0e          	mov    WORD PTR [edx+0xe],ax
c000831f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008323:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0008327:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000832c:	e8 37 76 01 00       	call   c001f968 <CUnlockScheduler>
c0008331:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0008336:	85 c0                	test   eax,eax
c0008338:	0f 85 d2 00 00 00    	jne    c0008410 <pbuf_free+0x1bc>
c000833e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008342:	8b 00                	mov    eax,DWORD PTR [eax]
c0008344:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008348:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000834c:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c000834f:	0f b6 c0             	movzx  eax,al
c0008352:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008357:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000835b:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000835e:	0f b6 c0             	movzx  eax,al
c0008361:	83 e0 02             	and    eax,0x2
c0008364:	74 3a                	je     c00083a0 <pbuf_free+0x14c>
c0008366:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000836a:	89 04 24             	mov    DWORD PTR [esp],eax
c000836d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008370:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0008373:	85 c0                	test   eax,eax
c0008375:	75 15                	jne    c000838c <pbuf_free+0x138>
c0008377:	83 ec 08             	sub    esp,0x8
c000837a:	68 f0 f7 02 c0       	push   0xc002f7f0
c000837f:	68 26 f6 02 c0       	push   0xc002f626
c0008384:	e8 0b 76 01 00       	call   c001f994 <CPrintf>
c0008389:	83 c4 10             	add    esp,0x10
c000838c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000838f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0008392:	83 ec 0c             	sub    esp,0xc
c0008395:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0008399:	ff d0                	call   eax
c000839b:	83 c4 10             	add    esp,0x10
c000839e:	eb 58                	jmp    c00083f8 <pbuf_free+0x1a4>
c00083a0:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00083a5:	83 f8 03             	cmp    eax,0x3
c00083a8:	75 16                	jne    c00083c0 <pbuf_free+0x16c>
c00083aa:	83 ec 08             	sub    esp,0x8
c00083ad:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083b1:	6a 0d                	push   0xd
c00083b3:	e8 e0 f5 ff ff       	call   c0007998 <memp_free>
c00083b8:	83 c4 10             	add    esp,0x10
c00083bb:	eb 3b                	jmp    c00083f8 <pbuf_free+0x1a4>
c00083bd:	8d 76 00             	lea    esi,[esi+0x0]
c00083c0:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00083c5:	83 f8 01             	cmp    eax,0x1
c00083c8:	74 0a                	je     c00083d4 <pbuf_free+0x180>
c00083ca:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00083cf:	83 f8 02             	cmp    eax,0x2
c00083d2:	75 14                	jne    c00083e8 <pbuf_free+0x194>
c00083d4:	83 ec 08             	sub    esp,0x8
c00083d7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083db:	6a 0c                	push   0xc
c00083dd:	e8 b6 f5 ff ff       	call   c0007998 <memp_free>
c00083e2:	83 c4 10             	add    esp,0x10
c00083e5:	eb 11                	jmp    c00083f8 <pbuf_free+0x1a4>
c00083e7:	90                   	nop
c00083e8:	83 ec 0c             	sub    esp,0xc
c00083eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00083ef:	e8 84 eb ff ff       	call   c0006f78 <mem_free>
c00083f4:	83 c4 10             	add    esp,0x10
c00083f7:	90                   	nop
c00083f8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00083fc:	83 c0 01             	add    eax,0x1
c00083ff:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008403:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008407:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000840b:	eb 0b                	jmp    c0008418 <pbuf_free+0x1c4>
c000840d:	8d 76 00             	lea    esi,[esi+0x0]
c0008410:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0008418:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000841d:	0f 85 bd fe ff ff    	jne    c00082e0 <pbuf_free+0x8c>
c0008423:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008427:	90                   	nop
c0008428:	83 c4 1c             	add    esp,0x1c
c000842b:	c3                   	ret    

c000842c <pbuf_alloc>:
c000842c:	83 ec 3c             	sub    esp,0x3c
c000842f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0008433:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008438:	66 c7 44 24 26 00 00 	mov    WORD PTR [esp+0x26],0x0
c000843f:	83 7c 24 40 01       	cmp    DWORD PTR [esp+0x40],0x1
c0008444:	74 2a                	je     c0008470 <pbuf_alloc+0x44>
c0008446:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000844b:	74 13                	je     c0008460 <pbuf_alloc+0x34>
c000844d:	83 7c 24 40 02       	cmp    DWORD PTR [esp+0x40],0x2
c0008452:	74 2c                	je     c0008480 <pbuf_alloc+0x54>
c0008454:	83 7c 24 40 03       	cmp    DWORD PTR [esp+0x40],0x3
c0008459:	74 55                	je     c00084b0 <pbuf_alloc+0x84>
c000845b:	eb 33                	jmp    c0008490 <pbuf_alloc+0x64>
c000845d:	8d 76 00             	lea    esi,[esi+0x0]
c0008460:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0008465:	83 c0 14             	add    eax,0x14
c0008468:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c000846d:	8d 76 00             	lea    esi,[esi+0x0]
c0008470:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0008475:	83 c0 14             	add    eax,0x14
c0008478:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c000847d:	8d 76 00             	lea    esi,[esi+0x0]
c0008480:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0008485:	83 c0 0e             	add    eax,0xe
c0008488:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c000848d:	eb 25                	jmp    c00084b4 <pbuf_alloc+0x88>
c000848f:	90                   	nop
c0008490:	83 ec 08             	sub    esp,0x8
c0008493:	68 fe f9 02 c0       	push   0xc002f9fe
c0008498:	68 26 f6 02 c0       	push   0xc002f626
c000849d:	e8 f2 74 01 00       	call   c001f994 <CPrintf>
c00084a2:	83 c4 10             	add    esp,0x10
c00084a5:	b8 00 00 00 00       	mov    eax,0x0
c00084aa:	e9 71 03 00 00       	jmp    c0008820 <pbuf_alloc+0x3f4>
c00084af:	90                   	nop
c00084b0:	90                   	nop
c00084b1:	8d 76 00             	lea    esi,[esi+0x0]
c00084b4:	83 7c 24 48 02       	cmp    DWORD PTR [esp+0x48],0x2
c00084b9:	77 11                	ja     c00084cc <pbuf_alloc+0xa0>
c00084bb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00084c0:	0f 85 c6 02 00 00    	jne    c000878c <pbuf_alloc+0x360>
c00084c6:	e9 41 02 00 00       	jmp    c000870c <pbuf_alloc+0x2e0>
c00084cb:	90                   	nop
c00084cc:	83 7c 24 48 03       	cmp    DWORD PTR [esp+0x48],0x3
c00084d1:	0f 85 15 03 00 00    	jne    c00087ec <pbuf_alloc+0x3c0>
c00084d7:	83 ec 0c             	sub    esp,0xc
c00084da:	6a 0d                	push   0xd
c00084dc:	e8 8b f3 ff ff       	call   c000786c <memp_malloc>
c00084e1:	83 c4 10             	add    esp,0x10
c00084e4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00084e8:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00084ed:	75 11                	jne    c0008500 <pbuf_alloc+0xd4>
c00084ef:	e8 44 fa ff ff       	call   c0007f38 <pbuf_pool_is_empty>
c00084f4:	b8 00 00 00 00       	mov    eax,0x0
c00084f9:	e9 22 03 00 00       	jmp    c0008820 <pbuf_alloc+0x3f4>
c00084fe:	66 90                	xchg   ax,ax
c0008500:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0008504:	88 c2                	mov    dl,al
c0008506:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000850a:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c000850d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008511:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008517:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c000851c:	8d 50 10             	lea    edx,[eax+0x10]
c000851f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008523:	01 c2                	add    edx,eax
c0008525:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008529:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000852c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008530:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008534:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008538:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c000853d:	ba 4e 02 00 00       	mov    edx,0x24e
c0008542:	29 c2                	sub    edx,eax
c0008544:	89 d0                	mov    eax,edx
c0008546:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000854b:	39 d0                	cmp    eax,edx
c000854d:	7e 05                	jle    c0008554 <pbuf_alloc+0x128>
c000854f:	89 d0                	mov    eax,edx
c0008551:	8d 76 00             	lea    esi,[esi+0x0]
c0008554:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008558:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c000855c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008560:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008563:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008567:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000856b:	0f b7 c0             	movzx  eax,ax
c000856e:	01 c2                	add    edx,eax
c0008570:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008574:	05 5e 02 00 00       	add    eax,0x25e
c0008579:	39 c2                	cmp    edx,eax
c000857b:	76 17                	jbe    c0008594 <pbuf_alloc+0x168>
c000857d:	83 ec 08             	sub    esp,0x8
c0008580:	68 14 f8 02 c0       	push   0xc002f814
c0008585:	68 26 f6 02 c0       	push   0xc002f626
c000858a:	e8 05 74 01 00       	call   c001f994 <CPrintf>
c000858f:	83 c4 10             	add    esp,0x10
c0008592:	66 90                	xchg   ax,ax
c0008594:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c0008599:	ba 4e 02 00 00       	mov    edx,0x24e
c000859e:	29 c2                	sub    edx,eax
c00085a0:	89 d0                	mov    eax,edx
c00085a2:	85 c0                	test   eax,eax
c00085a4:	7f 16                	jg     c00085bc <pbuf_alloc+0x190>
c00085a6:	83 ec 08             	sub    esp,0x8
c00085a9:	68 48 f8 02 c0       	push   0xc002f848
c00085ae:	68 26 f6 02 c0       	push   0xc002f626
c00085b3:	e8 dc 73 01 00       	call   c001f994 <CPrintf>
c00085b8:	83 c4 10             	add    esp,0x10
c00085bb:	90                   	nop
c00085bc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00085c0:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c00085c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00085ca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00085ce:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00085d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00085d7:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00085db:	0f b7 c0             	movzx  eax,ax
c00085de:	29 c2                	sub    edx,eax
c00085e0:	89 d0                	mov    eax,edx
c00085e2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00085e6:	e9 11 01 00 00       	jmp    c00086fc <pbuf_alloc+0x2d0>
c00085eb:	90                   	nop
c00085ec:	83 ec 0c             	sub    esp,0xc
c00085ef:	6a 0d                	push   0xd
c00085f1:	e8 76 f2 ff ff       	call   c000786c <memp_malloc>
c00085f6:	83 c4 10             	add    esp,0x10
c00085f9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00085fd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0008602:	75 20                	jne    c0008624 <pbuf_alloc+0x1f8>
c0008604:	e8 2f f9 ff ff       	call   c0007f38 <pbuf_pool_is_empty>
c0008609:	83 ec 0c             	sub    esp,0xc
c000860c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008610:	e8 3f fc ff ff       	call   c0008254 <pbuf_free>
c0008615:	83 c4 10             	add    esp,0x10
c0008618:	b8 00 00 00 00       	mov    eax,0x0
c000861d:	e9 fe 01 00 00       	jmp    c0008820 <pbuf_alloc+0x3f4>
c0008622:	66 90                	xchg   ax,ax
c0008624:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0008628:	88 c2                	mov    dl,al
c000862a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000862e:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c0008631:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008635:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
c0008639:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000863d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008643:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008647:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000864b:	89 10                	mov    DWORD PTR [eax],edx
c000864d:	81 7c 24 20 fe ff 00 00 	cmp    DWORD PTR [esp+0x20],0xfffe
c0008655:	7e 15                	jle    c000866c <pbuf_alloc+0x240>
c0008657:	83 ec 08             	sub    esp,0x8
c000865a:	68 19 fa 02 c0       	push   0xc002fa19
c000865f:	68 26 f6 02 c0       	push   0xc002f626
c0008664:	e8 2b 73 01 00       	call   c001f994 <CPrintf>
c0008669:	83 c4 10             	add    esp,0x10
c000866c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008670:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008674:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008678:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000867c:	0f b7 d0             	movzx  edx,ax
c000867f:	81 fa 4e 02 00 00    	cmp    edx,0x24e
c0008685:	76 05                	jbe    c000868c <pbuf_alloc+0x260>
c0008687:	b8 4e 02 00 00       	mov    eax,0x24e
c000868c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008690:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0008694:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008698:	8d 50 10             	lea    edx,[eax+0x10]
c000869b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000869f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00086a2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00086a6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00086a9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00086ad:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00086b1:	0f b7 c0             	movzx  eax,ax
c00086b4:	01 c2                	add    edx,eax
c00086b6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00086ba:	05 5e 02 00 00       	add    eax,0x25e
c00086bf:	39 c2                	cmp    edx,eax
c00086c1:	76 15                	jbe    c00086d8 <pbuf_alloc+0x2ac>
c00086c3:	83 ec 08             	sub    esp,0x8
c00086c6:	68 14 f8 02 c0       	push   0xc002f814
c00086cb:	68 26 f6 02 c0       	push   0xc002f626
c00086d0:	e8 bf 72 01 00       	call   c001f994 <CPrintf>
c00086d5:	83 c4 10             	add    esp,0x10
c00086d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00086dc:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c00086e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00086e6:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00086ea:	0f b7 c0             	movzx  eax,ax
c00086ed:	29 44 24 20          	sub    DWORD PTR [esp+0x20],eax
c00086f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00086f5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00086f9:	8d 76 00             	lea    esi,[esi+0x0]
c00086fc:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008701:	0f 8f e5 fe ff ff    	jg     c00085ec <pbuf_alloc+0x1c0>
c0008707:	e9 fc 00 00 00       	jmp    c0008808 <pbuf_alloc+0x3dc>
c000870c:	66 8b 54 24 26       	mov    dx,WORD PTR [esp+0x26]
c0008711:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008715:	01 d0                	add    eax,edx
c0008717:	83 c0 10             	add    eax,0x10
c000871a:	0f b7 c0             	movzx  eax,ax
c000871d:	83 ec 0c             	sub    esp,0xc
c0008720:	50                   	push   eax
c0008721:	e8 82 ec ff ff       	call   c00073a8 <mem_malloc>
c0008726:	83 c4 10             	add    esp,0x10
c0008729:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000872d:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0008732:	75 0c                	jne    c0008740 <pbuf_alloc+0x314>
c0008734:	b8 00 00 00 00       	mov    eax,0x0
c0008739:	e9 e2 00 00 00       	jmp    c0008820 <pbuf_alloc+0x3f4>
c000873e:	66 90                	xchg   ax,ax
c0008740:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c0008745:	8d 50 10             	lea    edx,[eax+0x10]
c0008748:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000874c:	01 c2                	add    edx,eax
c000874e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008752:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008755:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008759:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000875d:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008761:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008765:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008768:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000876c:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0008770:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008774:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000877a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000877e:	88 c2                	mov    dl,al
c0008780:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008784:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c0008787:	eb 7f                	jmp    c0008808 <pbuf_alloc+0x3dc>
c0008789:	8d 76 00             	lea    esi,[esi+0x0]
c000878c:	83 ec 0c             	sub    esp,0xc
c000878f:	6a 0c                	push   0xc
c0008791:	e8 d6 f0 ff ff       	call   c000786c <memp_malloc>
c0008796:	83 c4 10             	add    esp,0x10
c0008799:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000879d:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00087a2:	75 08                	jne    c00087ac <pbuf_alloc+0x380>
c00087a4:	b8 00 00 00 00       	mov    eax,0x0
c00087a9:	eb 75                	jmp    c0008820 <pbuf_alloc+0x3f4>
c00087ab:	90                   	nop
c00087ac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087b0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00087b7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00087bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087bf:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c00087c3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087c7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00087ca:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00087ce:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c00087d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00087dc:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00087e0:	88 c2                	mov    dl,al
c00087e2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087e6:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c00087e9:	eb 1d                	jmp    c0008808 <pbuf_alloc+0x3dc>
c00087eb:	90                   	nop
c00087ec:	83 ec 08             	sub    esp,0x8
c00087ef:	68 2d fa 02 c0       	push   0xc002fa2d
c00087f4:	68 26 f6 02 c0       	push   0xc002f626
c00087f9:	e8 96 71 01 00       	call   c001f994 <CPrintf>
c00087fe:	83 c4 10             	add    esp,0x10
c0008801:	b8 00 00 00 00       	mov    eax,0x0
c0008806:	eb 18                	jmp    c0008820 <pbuf_alloc+0x3f4>
c0008808:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000880c:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c0008812:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008816:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
c000881a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000881e:	66 90                	xchg   ax,ax
c0008820:	83 c4 3c             	add    esp,0x3c
c0008823:	c3                   	ret    

c0008824 <pbuf_realloc>:
c0008824:	83 ec 2c             	sub    esp,0x2c
c0008827:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000882b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008830:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0008835:	75 15                	jne    c000884c <pbuf_realloc+0x28>
c0008837:	83 ec 08             	sub    esp,0x8
c000883a:	68 48 fa 02 c0       	push   0xc002fa48
c000883f:	68 26 f6 02 c0       	push   0xc002f626
c0008844:	e8 4b 71 01 00       	call   c001f994 <CPrintf>
c0008849:	83 c4 10             	add    esp,0x10
c000884c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008850:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008853:	0f b6 c0             	movzx  eax,al
c0008856:	83 f8 03             	cmp    eax,0x3
c0008859:	74 41                	je     c000889c <pbuf_realloc+0x78>
c000885b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000885f:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008862:	0f b6 c0             	movzx  eax,al
c0008865:	83 f8 01             	cmp    eax,0x1
c0008868:	74 32                	je     c000889c <pbuf_realloc+0x78>
c000886a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000886e:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008871:	0f b6 c0             	movzx  eax,al
c0008874:	85 c0                	test   eax,eax
c0008876:	74 24                	je     c000889c <pbuf_realloc+0x78>
c0008878:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000887c:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c000887f:	0f b6 c0             	movzx  eax,al
c0008882:	83 f8 02             	cmp    eax,0x2
c0008885:	74 15                	je     c000889c <pbuf_realloc+0x78>
c0008887:	83 ec 08             	sub    esp,0x8
c000888a:	68 60 fa 02 c0       	push   0xc002fa60
c000888f:	68 26 f6 02 c0       	push   0xc002f626
c0008894:	e8 fb 70 01 00       	call   c001f994 <CPrintf>
c0008899:	83 c4 10             	add    esp,0x10
c000889c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00088a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00088a3:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00088a8:	0f b7 c0             	movzx  eax,ax
c00088ab:	39 c2                	cmp    edx,eax
c00088ad:	0f 83 6d 01 00 00    	jae    c0008a20 <pbuf_realloc+0x1fc>
c00088b3:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00088b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00088bc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00088bf:	0f b7 c0             	movzx  eax,ax
c00088c2:	29 c2                	sub    edx,eax
c00088c4:	89 d0                	mov    eax,edx
c00088c6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00088ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00088ce:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00088d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00088d7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00088db:	eb 77                	jmp    c0008954 <pbuf_realloc+0x130>
c00088dd:	8d 76 00             	lea    esi,[esi+0x0]
c00088e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00088e4:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00088e8:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c00088ed:	89 d1                	mov    ecx,edx
c00088ef:	29 c1                	sub    ecx,eax
c00088f1:	89 c8                	mov    eax,ecx
c00088f3:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00088f8:	81 7c 24 14 fe ff 00 00 	cmp    DWORD PTR [esp+0x14],0xfffe
c0008900:	7e 16                	jle    c0008918 <pbuf_realloc+0xf4>
c0008902:	83 ec 08             	sub    esp,0x8
c0008905:	68 7b fa 02 c0       	push   0xc002fa7b
c000890a:	68 26 f6 02 c0       	push   0xc002f626
c000890f:	e8 80 70 01 00       	call   c001f994 <CPrintf>
c0008914:	83 c4 10             	add    esp,0x10
c0008917:	90                   	nop
c0008918:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000891c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000891f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008923:	01 d0                	add    eax,edx
c0008925:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008929:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000892d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008931:	8b 00                	mov    eax,DWORD PTR [eax]
c0008933:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008937:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000893c:	75 16                	jne    c0008954 <pbuf_realloc+0x130>
c000893e:	83 ec 08             	sub    esp,0x8
c0008941:	68 8c fa 02 c0       	push   0xc002fa8c
c0008946:	68 26 f6 02 c0       	push   0xc002f626
c000894b:	e8 44 70 01 00       	call   c001f994 <CPrintf>
c0008950:	83 c4 10             	add    esp,0x10
c0008953:	90                   	nop
c0008954:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008958:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000895c:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c0008961:	0f b7 c0             	movzx  eax,ax
c0008964:	39 c2                	cmp    edx,eax
c0008966:	0f 87 74 ff ff ff    	ja     c00088e0 <pbuf_realloc+0xbc>
c000896c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008970:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008973:	0f b6 c0             	movzx  eax,al
c0008976:	85 c0                	test   eax,eax
c0008978:	75 5e                	jne    c00089d8 <pbuf_realloc+0x1b4>
c000897a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000897e:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008982:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c0008987:	0f b7 c0             	movzx  eax,ax
c000898a:	39 c2                	cmp    edx,eax
c000898c:	74 4a                	je     c00089d8 <pbuf_realloc+0x1b4>
c000898e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008992:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008995:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0008999:	89 c2                	mov    edx,eax
c000899b:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00089a0:	01 d0                	add    eax,edx
c00089a2:	0f b7 c0             	movzx  eax,ax
c00089a5:	83 ec 08             	sub    esp,0x8
c00089a8:	50                   	push   eax
c00089a9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00089ad:	e8 ea e6 ff ff       	call   c000709c <mem_trim>
c00089b2:	83 c4 10             	add    esp,0x10
c00089b5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00089b9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00089be:	75 18                	jne    c00089d8 <pbuf_realloc+0x1b4>
c00089c0:	83 ec 08             	sub    esp,0x8
c00089c3:	68 a4 fa 02 c0       	push   0xc002faa4
c00089c8:	68 26 f6 02 c0       	push   0xc002f626
c00089cd:	e8 c2 6f 01 00       	call   c001f994 <CPrintf>
c00089d2:	83 c4 10             	add    esp,0x10
c00089d5:	8d 76 00             	lea    esi,[esi+0x0]
c00089d8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00089dc:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00089e1:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c00089e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089e9:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00089ed:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00089f1:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c00089f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00089fb:	85 c0                	test   eax,eax
c00089fd:	74 15                	je     c0008a14 <pbuf_realloc+0x1f0>
c00089ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a03:	8b 00                	mov    eax,DWORD PTR [eax]
c0008a05:	83 ec 0c             	sub    esp,0xc
c0008a08:	50                   	push   eax
c0008a09:	e8 46 f8 ff ff       	call   c0008254 <pbuf_free>
c0008a0e:	83 c4 10             	add    esp,0x10
c0008a11:	8d 76 00             	lea    esi,[esi+0x0]
c0008a14:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a18:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a1e:	eb 04                	jmp    c0008a24 <pbuf_realloc+0x200>
c0008a20:	90                   	nop
c0008a21:	8d 76 00             	lea    esi,[esi+0x0]
c0008a24:	83 c4 2c             	add    esp,0x2c
c0008a27:	c3                   	ret    

c0008a28 <pbuf_clen>:
c0008a28:	83 ec 10             	sub    esp,0x10
c0008a2b:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008a30:	eb 1a                	jmp    c0008a4c <pbuf_clen+0x24>
c0008a32:	66 90                	xchg   ax,ax
c0008a34:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008a38:	83 c0 01             	add    eax,0x1
c0008a3b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008a3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008a43:	8b 00                	mov    eax,DWORD PTR [eax]
c0008a45:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008a49:	8d 76 00             	lea    esi,[esi+0x0]
c0008a4c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a51:	75 e1                	jne    c0008a34 <pbuf_clen+0xc>
c0008a53:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008a57:	83 c4 10             	add    esp,0x10
c0008a5a:	c3                   	ret    
c0008a5b:	90                   	nop

c0008a5c <pbuf_ref>:
c0008a5c:	83 ec 0c             	sub    esp,0xc
c0008a5f:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0008a64:	74 1e                	je     c0008a84 <pbuf_ref+0x28>
c0008a66:	e8 19 6f 01 00       	call   c001f984 <CLockScheduler>
c0008a6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a6f:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0008a73:	83 c0 01             	add    eax,0x1
c0008a76:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008a7a:	66 89 42 0e          	mov    WORD PTR [edx+0xe],ax
c0008a7e:	e8 e5 6e 01 00       	call   c001f968 <CUnlockScheduler>
c0008a83:	90                   	nop
c0008a84:	90                   	nop
c0008a85:	83 c4 0c             	add    esp,0xc
c0008a88:	c3                   	ret    
c0008a89:	8d 76 00             	lea    esi,[esi+0x0]

c0008a8c <pbuf_cat>:
c0008a8c:	83 ec 1c             	sub    esp,0x1c
c0008a8f:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008a94:	74 0a                	je     c0008aa0 <pbuf_cat+0x14>
c0008a96:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008a9b:	75 1f                	jne    c0008abc <pbuf_cat+0x30>
c0008a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0008aa0:	83 ec 08             	sub    esp,0x8
c0008aa3:	68 7c f8 02 c0       	push   0xc002f87c
c0008aa8:	68 26 f6 02 c0       	push   0xc002f626
c0008aad:	e8 e2 6e 01 00       	call   c001f994 <CPrintf>
c0008ab2:	83 c4 10             	add    esp,0x10
c0008ab5:	e9 ae 00 00 00       	jmp    c0008b68 <pbuf_cat+0xdc>
c0008aba:	66 90                	xchg   ax,ax
c0008abc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ac0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008ac4:	eb 26                	jmp    c0008aec <pbuf_cat+0x60>
c0008ac6:	66 90                	xchg   ax,ax
c0008ac8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008acc:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008acf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008ad3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008ad6:	01 d0                	add    eax,edx
c0008ad8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008adc:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008ae0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008ae4:	8b 00                	mov    eax,DWORD PTR [eax]
c0008ae6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008aea:	66 90                	xchg   ax,ax
c0008aec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008af0:	8b 00                	mov    eax,DWORD PTR [eax]
c0008af2:	85 c0                	test   eax,eax
c0008af4:	75 d2                	jne    c0008ac8 <pbuf_cat+0x3c>
c0008af6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008afa:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008afd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b01:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008b05:	0f b7 d2             	movzx  edx,dx
c0008b08:	0f b7 c0             	movzx  eax,ax
c0008b0b:	39 c2                	cmp    edx,eax
c0008b0d:	74 15                	je     c0008b24 <pbuf_cat+0x98>
c0008b0f:	83 ec 08             	sub    esp,0x8
c0008b12:	68 b4 f8 02 c0       	push   0xc002f8b4
c0008b17:	68 26 f6 02 c0       	push   0xc002f626
c0008b1c:	e8 73 6e 01 00       	call   c001f994 <CPrintf>
c0008b21:	83 c4 10             	add    esp,0x10
c0008b24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b28:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b2a:	85 c0                	test   eax,eax
c0008b2c:	74 16                	je     c0008b44 <pbuf_cat+0xb8>
c0008b2e:	83 ec 08             	sub    esp,0x8
c0008b31:	68 c0 fa 02 c0       	push   0xc002fac0
c0008b36:	68 26 f6 02 c0       	push   0xc002f626
c0008b3b:	e8 54 6e 01 00       	call   c001f994 <CPrintf>
c0008b40:	83 c4 10             	add    esp,0x10
c0008b43:	90                   	nop
c0008b44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b48:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008b4b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008b4f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008b52:	01 d0                	add    eax,edx
c0008b54:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008b58:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008b5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b60:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008b64:	89 10                	mov    DWORD PTR [eax],edx
c0008b66:	66 90                	xchg   ax,ax
c0008b68:	83 c4 1c             	add    esp,0x1c
c0008b6b:	c3                   	ret    

c0008b6c <pbuf_chain>:
c0008b6c:	83 ec 0c             	sub    esp,0xc
c0008b6f:	83 ec 08             	sub    esp,0x8
c0008b72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b7a:	e8 0d ff ff ff       	call   c0008a8c <pbuf_cat>
c0008b7f:	83 c4 10             	add    esp,0x10
c0008b82:	83 ec 0c             	sub    esp,0xc
c0008b85:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008b89:	e8 ce fe ff ff       	call   c0008a5c <pbuf_ref>
c0008b8e:	83 c4 10             	add    esp,0x10
c0008b91:	90                   	nop
c0008b92:	83 c4 0c             	add    esp,0xc
c0008b95:	c3                   	ret    
c0008b96:	66 90                	xchg   ax,ax

c0008b98 <pbuf_dechain>:
c0008b98:	83 ec 1c             	sub    esp,0x1c
c0008b9b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0008ba0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ba4:	8b 00                	mov    eax,DWORD PTR [eax]
c0008ba6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008baa:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008baf:	0f 84 8b 00 00 00    	je     c0008c40 <pbuf_dechain+0xa8>
c0008bb5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008bb9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008bbc:	0f b7 d0             	movzx  edx,ax
c0008bbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008bc3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008bc6:	0f b7 c8             	movzx  ecx,ax
c0008bc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008bcd:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008bd1:	0f b7 c0             	movzx  eax,ax
c0008bd4:	29 c1                	sub    ecx,eax
c0008bd6:	89 c8                	mov    eax,ecx
c0008bd8:	39 c2                	cmp    edx,eax
c0008bda:	74 18                	je     c0008bf4 <pbuf_dechain+0x5c>
c0008bdc:	83 ec 08             	sub    esp,0x8
c0008bdf:	68 e4 f8 02 c0       	push   0xc002f8e4
c0008be4:	68 26 f6 02 c0       	push   0xc002f626
c0008be9:	e8 a6 6d 01 00       	call   c001f994 <CPrintf>
c0008bee:	83 c4 10             	add    esp,0x10
c0008bf1:	8d 76 00             	lea    esi,[esi+0x0]
c0008bf4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008bf8:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008bfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008bff:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008c03:	89 d1                	mov    ecx,edx
c0008c05:	29 c1                	sub    ecx,eax
c0008c07:	89 c8                	mov    eax,ecx
c0008c09:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008c0d:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008c11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c15:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c1f:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008c23:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008c27:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008c2b:	83 ec 0c             	sub    esp,0xc
c0008c2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c32:	e8 1d f6 ff ff       	call   c0008254 <pbuf_free>
c0008c37:	83 c4 10             	add    esp,0x10
c0008c3a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008c3e:	66 90                	xchg   ax,ax
c0008c40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c44:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008c47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c4b:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008c4f:	0f b7 d2             	movzx  edx,dx
c0008c52:	0f b7 c0             	movzx  eax,ax
c0008c55:	39 c2                	cmp    edx,eax
c0008c57:	74 17                	je     c0008c70 <pbuf_dechain+0xd8>
c0008c59:	83 ec 08             	sub    esp,0x8
c0008c5c:	68 d0 fa 02 c0       	push   0xc002fad0
c0008c61:	68 26 f6 02 c0       	push   0xc002f626
c0008c66:	e8 29 6d 01 00       	call   c001f994 <CPrintf>
c0008c6b:	83 c4 10             	add    esp,0x10
c0008c6e:	66 90                	xchg   ax,ax
c0008c70:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0008c75:	85 c0                	test   eax,eax
c0008c77:	75 07                	jne    c0008c80 <pbuf_dechain+0xe8>
c0008c79:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008c7d:	eb 09                	jmp    c0008c88 <pbuf_dechain+0xf0>
c0008c7f:	90                   	nop
c0008c80:	b8 00 00 00 00       	mov    eax,0x0
c0008c85:	8d 76 00             	lea    esi,[esi+0x0]
c0008c88:	83 c4 1c             	add    esp,0x1c
c0008c8b:	c3                   	ret    

c0008c8c <pbuf_copy>:
c0008c8c:	53                   	push   ebx
c0008c8d:	83 ec 18             	sub    esp,0x18
c0008c90:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0008c97:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c0008c9e:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008ca3:	74 1f                	je     c0008cc4 <pbuf_copy+0x38>
c0008ca5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008caa:	74 18                	je     c0008cc4 <pbuf_copy+0x38>
c0008cac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cb0:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008cb3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008cb7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008cba:	0f b7 d2             	movzx  edx,dx
c0008cbd:	0f b7 c0             	movzx  eax,ax
c0008cc0:	39 c2                	cmp    edx,eax
c0008cc2:	73 1c                	jae    c0008ce0 <pbuf_copy+0x54>
c0008cc4:	83 ec 08             	sub    esp,0x8
c0008cc7:	68 08 f9 02 c0       	push   0xc002f908
c0008ccc:	68 26 f6 02 c0       	push   0xc002f626
c0008cd1:	e8 be 6c 01 00       	call   c001f994 <CPrintf>
c0008cd6:	83 c4 10             	add    esp,0x10
c0008cd9:	b0 f2                	mov    al,0xf2
c0008cdb:	e9 0c 02 00 00       	jmp    c0008eec <pbuf_copy+0x260>
c0008ce0:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008ce5:	75 15                	jne    c0008cfc <pbuf_copy+0x70>
c0008ce7:	83 ec 08             	sub    esp,0x8
c0008cea:	68 e5 fa 02 c0       	push   0xc002fae5
c0008cef:	68 26 f6 02 c0       	push   0xc002f626
c0008cf4:	e8 9b 6c 01 00       	call   c001f994 <CPrintf>
c0008cf9:	83 c4 10             	add    esp,0x10
c0008cfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d00:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008d04:	0f b7 d0             	movzx  edx,ax
c0008d07:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0008d0c:	89 d1                	mov    ecx,edx
c0008d0e:	29 c1                	sub    ecx,eax
c0008d10:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008d14:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008d18:	0f b7 d0             	movzx  edx,ax
c0008d1b:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0008d20:	29 c2                	sub    edx,eax
c0008d22:	89 d0                	mov    eax,edx
c0008d24:	39 c1                	cmp    ecx,eax
c0008d26:	7c 1c                	jl     c0008d44 <pbuf_copy+0xb8>
c0008d28:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008d2c:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008d30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d34:	89 d3                	mov    ebx,edx
c0008d36:	29 c3                	sub    ebx,eax
c0008d38:	89 d8                	mov    eax,ebx
c0008d3a:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008d3f:	eb 1b                	jmp    c0008d5c <pbuf_copy+0xd0>
c0008d41:	8d 76 00             	lea    esi,[esi+0x0]
c0008d44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d48:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008d4c:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0008d51:	89 d3                	mov    ebx,edx
c0008d53:	29 c3                	sub    ebx,eax
c0008d55:	89 d8                	mov    eax,ebx
c0008d57:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008d5c:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008d61:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d65:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0008d68:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008d6d:	01 d1                	add    ecx,edx
c0008d6f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008d73:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0008d76:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0008d7b:	01 da                	add    edx,ebx
c0008d7d:	83 ec 04             	sub    esp,0x4
c0008d80:	50                   	push   eax
c0008d81:	51                   	push   ecx
c0008d82:	52                   	push   edx
c0008d83:	e8 f2 75 ff ff       	call   c000037a <memcpy>
c0008d88:	83 c4 10             	add    esp,0x10
c0008d8b:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0008d90:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008d95:	01 d0                	add    eax,edx
c0008d97:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0008d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008da0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008da5:	01 d0                	add    eax,edx
c0008da7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008dac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008db0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008db4:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0008db9:	0f b7 c0             	movzx  eax,ax
c0008dbc:	39 c2                	cmp    edx,eax
c0008dbe:	76 18                	jbe    c0008dd8 <pbuf_copy+0x14c>
c0008dc0:	83 ec 08             	sub    esp,0x8
c0008dc3:	68 f2 fa 02 c0       	push   0xc002faf2
c0008dc8:	68 26 f6 02 c0       	push   0xc002f626
c0008dcd:	e8 c2 6b 01 00       	call   c001f994 <CPrintf>
c0008dd2:	83 c4 10             	add    esp,0x10
c0008dd5:	8d 76 00             	lea    esi,[esi+0x0]
c0008dd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddc:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008de0:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0008de5:	0f b7 c0             	movzx  eax,ax
c0008de8:	39 c2                	cmp    edx,eax
c0008dea:	75 14                	jne    c0008e00 <pbuf_copy+0x174>
c0008dec:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0008df3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008df7:	8b 00                	mov    eax,DWORD PTR [eax]
c0008df9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008dfd:	8d 76 00             	lea    esi,[esi+0x0]
c0008e00:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008e04:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008e08:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008e0d:	0f b7 c0             	movzx  eax,ax
c0008e10:	39 c2                	cmp    edx,eax
c0008e12:	76 18                	jbe    c0008e2c <pbuf_copy+0x1a0>
c0008e14:	83 ec 08             	sub    esp,0x8
c0008e17:	68 09 fb 02 c0       	push   0xc002fb09
c0008e1c:	68 26 f6 02 c0       	push   0xc002f626
c0008e21:	e8 6e 6b 01 00       	call   c001f994 <CPrintf>
c0008e26:	83 c4 10             	add    esp,0x10
c0008e29:	8d 76 00             	lea    esi,[esi+0x0]
c0008e2c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008e30:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008e34:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008e39:	0f b7 c0             	movzx  eax,ax
c0008e3c:	39 c2                	cmp    edx,eax
c0008e3e:	72 14                	jb     c0008e54 <pbuf_copy+0x1c8>
c0008e40:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c0008e47:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008e4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e4d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008e51:	8d 76 00             	lea    esi,[esi+0x0]
c0008e54:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008e59:	74 3d                	je     c0008e98 <pbuf_copy+0x20c>
c0008e5b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008e5f:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008e63:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008e67:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008e6a:	0f b7 d2             	movzx  edx,dx
c0008e6d:	0f b7 c0             	movzx  eax,ax
c0008e70:	39 c2                	cmp    edx,eax
c0008e72:	75 24                	jne    c0008e98 <pbuf_copy+0x20c>
c0008e74:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008e78:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e7a:	85 c0                	test   eax,eax
c0008e7c:	74 1a                	je     c0008e98 <pbuf_copy+0x20c>
c0008e7e:	83 ec 08             	sub    esp,0x8
c0008e81:	68 38 f9 02 c0       	push   0xc002f938
c0008e86:	68 26 f6 02 c0       	push   0xc002f626
c0008e8b:	e8 04 6b 01 00       	call   c001f994 <CPrintf>
c0008e90:	83 c4 10             	add    esp,0x10
c0008e93:	b0 fa                	mov    al,0xfa
c0008e95:	eb 55                	jmp    c0008eec <pbuf_copy+0x260>
c0008e97:	90                   	nop
c0008e98:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008e9d:	74 3d                	je     c0008edc <pbuf_copy+0x250>
c0008e9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ea3:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008ea7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008eab:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008eae:	0f b7 d2             	movzx  edx,dx
c0008eb1:	0f b7 c0             	movzx  eax,ax
c0008eb4:	39 c2                	cmp    edx,eax
c0008eb6:	75 24                	jne    c0008edc <pbuf_copy+0x250>
c0008eb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ebc:	8b 00                	mov    eax,DWORD PTR [eax]
c0008ebe:	85 c0                	test   eax,eax
c0008ec0:	74 1a                	je     c0008edc <pbuf_copy+0x250>
c0008ec2:	83 ec 08             	sub    esp,0x8
c0008ec5:	68 38 f9 02 c0       	push   0xc002f938
c0008eca:	68 26 f6 02 c0       	push   0xc002f626
c0008ecf:	e8 c0 6a 01 00       	call   c001f994 <CPrintf>
c0008ed4:	83 c4 10             	add    esp,0x10
c0008ed7:	b0 fa                	mov    al,0xfa
c0008ed9:	eb 11                	jmp    c0008eec <pbuf_copy+0x260>
c0008edb:	90                   	nop
c0008edc:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008ee1:	0f 85 f9 fd ff ff    	jne    c0008ce0 <pbuf_copy+0x54>
c0008ee7:	b0 00                	mov    al,0x0
c0008ee9:	8d 76 00             	lea    esi,[esi+0x0]
c0008eec:	83 c4 18             	add    esp,0x18
c0008eef:	5b                   	pop    ebx
c0008ef0:	c3                   	ret    
c0008ef1:	8d 76 00             	lea    esi,[esi+0x0]

c0008ef4 <pbuf_copy_partial>:
c0008ef4:	53                   	push   ebx
c0008ef5:	83 ec 28             	sub    esp,0x28
c0008ef8:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008efc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008f00:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c0008f05:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008f0a:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008f11:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0008f16:	75 20                	jne    c0008f38 <pbuf_copy_partial+0x44>
c0008f18:	83 ec 08             	sub    esp,0x8
c0008f1b:	68 64 f9 02 c0       	push   0xc002f964
c0008f20:	68 26 f6 02 c0       	push   0xc002f626
c0008f25:	e8 6a 6a 01 00       	call   c001f994 <CPrintf>
c0008f2a:	83 c4 10             	add    esp,0x10
c0008f2d:	b8 00 00 00 00       	mov    eax,0x0
c0008f32:	e9 59 01 00 00       	jmp    c0009090 <pbuf_copy_partial+0x19c>
c0008f37:	90                   	nop
c0008f38:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0008f3d:	75 21                	jne    c0008f60 <pbuf_copy_partial+0x6c>
c0008f3f:	83 ec 08             	sub    esp,0x8
c0008f42:	68 84 f9 02 c0       	push   0xc002f984
c0008f47:	68 26 f6 02 c0       	push   0xc002f626
c0008f4c:	e8 43 6a 01 00       	call   c001f994 <CPrintf>
c0008f51:	83 c4 10             	add    esp,0x10
c0008f54:	b8 00 00 00 00       	mov    eax,0x0
c0008f59:	e9 32 01 00 00       	jmp    c0009090 <pbuf_copy_partial+0x19c>
c0008f5e:	66 90                	xchg   ax,ax
c0008f60:	66 c7 44 24 1a 00 00 	mov    WORD PTR [esp+0x1a],0x0
c0008f67:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0008f6c:	74 0a                	je     c0008f78 <pbuf_copy_partial+0x84>
c0008f6e:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0008f73:	75 0f                	jne    c0008f84 <pbuf_copy_partial+0x90>
c0008f75:	8d 76 00             	lea    esi,[esi+0x0]
c0008f78:	b8 00 00 00 00       	mov    eax,0x0
c0008f7d:	e9 0e 01 00 00       	jmp    c0009090 <pbuf_copy_partial+0x19c>
c0008f82:	66 90                	xchg   ax,ax
c0008f84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008f88:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008f8c:	e9 e3 00 00 00       	jmp    c0009074 <pbuf_copy_partial+0x180>
c0008f91:	8d 76 00             	lea    esi,[esi+0x0]
c0008f94:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008f99:	85 c0                	test   eax,eax
c0008f9b:	74 33                	je     c0008fd0 <pbuf_copy_partial+0xdc>
c0008f9d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fa1:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008fa5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0008faa:	0f b7 c0             	movzx  eax,ax
c0008fad:	39 c2                	cmp    edx,eax
c0008faf:	72 1f                	jb     c0008fd0 <pbuf_copy_partial+0xdc>
c0008fb1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fb5:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008fb9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008fbd:	89 d3                	mov    ebx,edx
c0008fbf:	29 c3                	sub    ebx,eax
c0008fc1:	89 d8                	mov    eax,ebx
c0008fc3:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008fc8:	e9 9b 00 00 00       	jmp    c0009068 <pbuf_copy_partial+0x174>
c0008fcd:	8d 76 00             	lea    esi,[esi+0x0]
c0008fd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fd4:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008fd8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008fdc:	89 d1                	mov    ecx,edx
c0008fde:	29 c1                	sub    ecx,eax
c0008fe0:	89 c8                	mov    eax,ecx
c0008fe2:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0008fe7:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0008fec:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0008ff1:	39 c2                	cmp    edx,eax
c0008ff3:	76 0b                	jbe    c0009000 <pbuf_copy_partial+0x10c>
c0008ff5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008ff9:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0008ffe:	66 90                	xchg   ax,ax
c0009000:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0009005:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009009:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000900c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0009011:	01 d1                	add    ecx,edx
c0009013:	0f b7 5c 24 1a       	movzx  ebx,WORD PTR [esp+0x1a]
c0009018:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000901c:	01 da                	add    edx,ebx
c000901e:	83 ec 04             	sub    esp,0x4
c0009021:	50                   	push   eax
c0009022:	51                   	push   ecx
c0009023:	52                   	push   edx
c0009024:	e8 51 73 ff ff       	call   c000037a <memcpy>
c0009029:	83 c4 10             	add    esp,0x10
c000902c:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0009031:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009035:	01 d0                	add    eax,edx
c0009037:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000903c:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c0009041:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009045:	01 d0                	add    eax,edx
c0009047:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000904c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009050:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009054:	89 d3                	mov    ebx,edx
c0009056:	29 c3                	sub    ebx,eax
c0009058:	89 d8                	mov    eax,ebx
c000905a:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000905f:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0009066:	66 90                	xchg   ax,ax
c0009068:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000906c:	8b 00                	mov    eax,DWORD PTR [eax]
c000906e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009072:	66 90                	xchg   ax,ax
c0009074:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0009079:	85 c0                	test   eax,eax
c000907b:	74 0b                	je     c0009088 <pbuf_copy_partial+0x194>
c000907d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009082:	0f 85 0c ff ff ff    	jne    c0008f94 <pbuf_copy_partial+0xa0>
c0009088:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000908d:	8d 76 00             	lea    esi,[esi+0x0]
c0009090:	83 c4 28             	add    esp,0x28
c0009093:	5b                   	pop    ebx
c0009094:	c3                   	ret    
c0009095:	8d 76 00             	lea    esi,[esi+0x0]

c0009098 <pbuf_take>:
c0009098:	83 ec 2c             	sub    esp,0x2c
c000909b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000909f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00090a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00090a8:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c00090ad:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00090b4:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00090b9:	75 1d                	jne    c00090d8 <pbuf_take+0x40>
c00090bb:	83 ec 08             	sub    esp,0x8
c00090be:	68 24 fb 02 c0       	push   0xc002fb24
c00090c3:	68 26 f6 02 c0       	push   0xc002f626
c00090c8:	e8 c7 68 01 00       	call   c001f994 <CPrintf>
c00090cd:	83 c4 10             	add    esp,0x10
c00090d0:	b0 00                	mov    al,0x0
c00090d2:	e9 3d 01 00 00       	jmp    c0009214 <pbuf_take+0x17c>
c00090d7:	90                   	nop
c00090d8:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00090dd:	75 1d                	jne    c00090fc <pbuf_take+0x64>
c00090df:	83 ec 08             	sub    esp,0x8
c00090e2:	68 3b fb 02 c0       	push   0xc002fb3b
c00090e7:	68 26 f6 02 c0       	push   0xc002f626
c00090ec:	e8 a3 68 01 00       	call   c001f994 <CPrintf>
c00090f1:	83 c4 10             	add    esp,0x10
c00090f4:	b0 00                	mov    al,0x0
c00090f6:	e9 19 01 00 00       	jmp    c0009214 <pbuf_take+0x17c>
c00090fb:	90                   	nop
c00090fc:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0009101:	74 1d                	je     c0009120 <pbuf_take+0x88>
c0009103:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0009108:	74 16                	je     c0009120 <pbuf_take+0x88>
c000910a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000910e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0009111:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0009116:	0f b7 c0             	movzx  eax,ax
c0009119:	39 c2                	cmp    edx,eax
c000911b:	76 0b                	jbe    c0009128 <pbuf_take+0x90>
c000911d:	8d 76 00             	lea    esi,[esi+0x0]
c0009120:	b0 f2                	mov    al,0xf2
c0009122:	e9 ed 00 00 00       	jmp    c0009214 <pbuf_take+0x17c>
c0009127:	90                   	nop
c0009128:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000912c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009130:	e9 9f 00 00 00       	jmp    c00091d4 <pbuf_take+0x13c>
c0009135:	8d 76 00             	lea    esi,[esi+0x0]
c0009138:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000913d:	75 15                	jne    c0009154 <pbuf_take+0xbc>
c000913f:	83 ec 08             	sub    esp,0x8
c0009142:	68 56 fb 02 c0       	push   0xc002fb56
c0009147:	68 26 f6 02 c0       	push   0xc002f626
c000914c:	e8 43 68 01 00       	call   c001f994 <CPrintf>
c0009151:	83 c4 10             	add    esp,0x10
c0009154:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009158:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000915d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009161:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009165:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c000916a:	0f b7 c0             	movzx  eax,ax
c000916d:	39 c2                	cmp    edx,eax
c000916f:	76 0f                	jbe    c0009180 <pbuf_take+0xe8>
c0009171:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009175:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009179:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000917e:	66 90                	xchg   ax,ax
c0009180:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c0009185:	0f b7 4c 24 16       	movzx  ecx,WORD PTR [esp+0x16]
c000918a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000918e:	01 c1                	add    ecx,eax
c0009190:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009194:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009197:	83 ec 04             	sub    esp,0x4
c000919a:	52                   	push   edx
c000919b:	51                   	push   ecx
c000919c:	50                   	push   eax
c000919d:	e8 d8 71 ff ff       	call   c000037a <memcpy>
c00091a2:	83 c4 10             	add    esp,0x10
c00091a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00091a9:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00091ae:	89 d1                	mov    ecx,edx
c00091b0:	29 c1                	sub    ecx,eax
c00091b2:	89 c8                	mov    eax,ecx
c00091b4:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c00091b9:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00091be:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00091c3:	01 d0                	add    eax,edx
c00091c5:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00091ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00091ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00091d0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091d4:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00091d9:	85 c0                	test   eax,eax
c00091db:	0f 85 57 ff ff ff    	jne    c0009138 <pbuf_take+0xa0>
c00091e1:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00091e6:	85 c0                	test   eax,eax
c00091e8:	75 0e                	jne    c00091f8 <pbuf_take+0x160>
c00091ea:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c00091ef:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00091f4:	39 c2                	cmp    edx,eax
c00091f6:	74 18                	je     c0009210 <pbuf_take+0x178>
c00091f8:	83 ec 08             	sub    esp,0x8
c00091fb:	68 6e fb 02 c0       	push   0xc002fb6e
c0009200:	68 26 f6 02 c0       	push   0xc002f626
c0009205:	e8 8a 67 01 00       	call   c001f994 <CPrintf>
c000920a:	83 c4 10             	add    esp,0x10
c000920d:	8d 76 00             	lea    esi,[esi+0x0]
c0009210:	b0 00                	mov    al,0x0
c0009212:	66 90                	xchg   ax,ax
c0009214:	83 c4 2c             	add    esp,0x2c
c0009217:	c3                   	ret    

c0009218 <pbuf_coalesce>:
c0009218:	83 ec 1c             	sub    esp,0x1c
c000921b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000921f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009221:	85 c0                	test   eax,eax
c0009223:	75 07                	jne    c000922c <pbuf_coalesce+0x14>
c0009225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009229:	eb 7d                	jmp    c00092a8 <pbuf_coalesce+0x90>
c000922b:	90                   	nop
c000922c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009230:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0009233:	0f b7 c0             	movzx  eax,ax
c0009236:	83 ec 04             	sub    esp,0x4
c0009239:	6a 00                	push   0x0
c000923b:	50                   	push   eax
c000923c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009240:	e8 e7 f1 ff ff       	call   c000842c <pbuf_alloc>
c0009245:	83 c4 10             	add    esp,0x10
c0009248:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000924c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009251:	75 09                	jne    c000925c <pbuf_coalesce+0x44>
c0009253:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009257:	eb 4f                	jmp    c00092a8 <pbuf_coalesce+0x90>
c0009259:	8d 76 00             	lea    esi,[esi+0x0]
c000925c:	83 ec 08             	sub    esp,0x8
c000925f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009263:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009267:	e8 20 fa ff ff       	call   c0008c8c <pbuf_copy>
c000926c:	83 c4 10             	add    esp,0x10
c000926f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009273:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c0009278:	85 c0                	test   eax,eax
c000927a:	74 18                	je     c0009294 <pbuf_coalesce+0x7c>
c000927c:	83 ec 08             	sub    esp,0x8
c000927f:	68 84 fb 02 c0       	push   0xc002fb84
c0009284:	68 26 f6 02 c0       	push   0xc002f626
c0009289:	e8 06 67 01 00       	call   c001f994 <CPrintf>
c000928e:	83 c4 10             	add    esp,0x10
c0009291:	8d 76 00             	lea    esi,[esi+0x0]
c0009294:	83 ec 0c             	sub    esp,0xc
c0009297:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000929b:	e8 b4 ef ff ff       	call   c0008254 <pbuf_free>
c00092a0:	83 c4 10             	add    esp,0x10
c00092a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00092a7:	90                   	nop
c00092a8:	83 c4 1c             	add    esp,0x1c
c00092ab:	c3                   	ret    

c00092ac <pbuf_get_at>:
c00092ac:	83 ec 14             	sub    esp,0x14
c00092af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092b3:	66 89 04 24          	mov    WORD PTR [esp],ax
c00092b7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00092ba:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00092bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00092c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00092c7:	eb 27                	jmp    c00092f0 <pbuf_get_at+0x44>
c00092c9:	8d 76 00             	lea    esi,[esi+0x0]
c00092cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00092d0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00092d4:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c00092d9:	89 d1                	mov    ecx,edx
c00092db:	29 c1                	sub    ecx,eax
c00092dd:	89 c8                	mov    eax,ecx
c00092df:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00092e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00092e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00092ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00092ee:	66 90                	xchg   ax,ax
c00092f0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00092f5:	74 15                	je     c000930c <pbuf_get_at+0x60>
c00092f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00092fb:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00092ff:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c0009304:	0f b7 c0             	movzx  eax,ax
c0009307:	39 c2                	cmp    edx,eax
c0009309:	73 c1                	jae    c00092cc <pbuf_get_at+0x20>
c000930b:	90                   	nop
c000930c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009311:	74 29                	je     c000933c <pbuf_get_at+0x90>
c0009313:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009317:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000931b:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c0009320:	0f b7 c0             	movzx  eax,ax
c0009323:	39 c2                	cmp    edx,eax
c0009325:	73 15                	jae    c000933c <pbuf_get_at+0x90>
c0009327:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000932b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000932e:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0009333:	01 d0                	add    eax,edx
c0009335:	8a 00                	mov    al,BYTE PTR [eax]
c0009337:	eb 07                	jmp    c0009340 <pbuf_get_at+0x94>
c0009339:	8d 76 00             	lea    esi,[esi+0x0]
c000933c:	b0 00                	mov    al,0x0
c000933e:	66 90                	xchg   ax,ax
c0009340:	83 c4 14             	add    esp,0x14
c0009343:	c3                   	ret    

c0009344 <pbuf_memcmp>:
c0009344:	83 ec 18             	sub    esp,0x18
c0009347:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000934b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000934f:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0009354:	66 89 04 24          	mov    WORD PTR [esp],ax
c0009358:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000935c:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009361:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009365:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009369:	eb 25                	jmp    c0009390 <pbuf_memcmp+0x4c>
c000936b:	90                   	nop
c000936c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009370:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009374:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0009379:	89 d1                	mov    ecx,edx
c000937b:	29 c1                	sub    ecx,eax
c000937d:	89 c8                	mov    eax,ecx
c000937f:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009388:	8b 00                	mov    eax,DWORD PTR [eax]
c000938a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000938e:	66 90                	xchg   ax,ax
c0009390:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0009395:	74 15                	je     c00093ac <pbuf_memcmp+0x68>
c0009397:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000939b:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000939f:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c00093a4:	0f b7 c0             	movzx  eax,ax
c00093a7:	39 c2                	cmp    edx,eax
c00093a9:	73 c1                	jae    c000936c <pbuf_memcmp+0x28>
c00093ab:	90                   	nop
c00093ac:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00093b1:	0f 84 8d 00 00 00    	je     c0009444 <pbuf_memcmp+0x100>
c00093b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093bb:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00093bf:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c00093c4:	0f b7 c0             	movzx  eax,ax
c00093c7:	39 c2                	cmp    edx,eax
c00093c9:	73 79                	jae    c0009444 <pbuf_memcmp+0x100>
c00093cb:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c00093d2:	eb 5c                	jmp    c0009430 <pbuf_memcmp+0xec>
c00093d4:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00093d9:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00093de:	01 d0                	add    eax,edx
c00093e0:	0f b7 c0             	movzx  eax,ax
c00093e3:	50                   	push   eax
c00093e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093e8:	e8 bf fe ff ff       	call   c00092ac <pbuf_get_at>
c00093ed:	83 c4 08             	add    esp,0x8
c00093f0:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00093f4:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c00093f9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00093fd:	01 d0                	add    eax,edx
c00093ff:	8a 00                	mov    al,BYTE PTR [eax]
c0009401:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009405:	0f b6 54 24 0d       	movzx  edx,BYTE PTR [esp+0xd]
c000940a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000940f:	39 c2                	cmp    edx,eax
c0009411:	74 0d                	je     c0009420 <pbuf_memcmp+0xdc>
c0009413:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0009418:	83 c0 01             	add    eax,0x1
c000941b:	eb 2f                	jmp    c000944c <pbuf_memcmp+0x108>
c000941d:	8d 76 00             	lea    esi,[esi+0x0]
c0009420:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0009425:	83 c0 01             	add    eax,0x1
c0009428:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000942d:	8d 76 00             	lea    esi,[esi+0x0]
c0009430:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0009435:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0009439:	39 c2                	cmp    edx,eax
c000943b:	72 97                	jb     c00093d4 <pbuf_memcmp+0x90>
c000943d:	b8 00 00 00 00       	mov    eax,0x0
c0009442:	eb 08                	jmp    c000944c <pbuf_memcmp+0x108>
c0009444:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009449:	8d 76 00             	lea    esi,[esi+0x0]
c000944c:	83 c4 18             	add    esp,0x18
c000944f:	c3                   	ret    

c0009450 <pbuf_memfind>:
c0009450:	83 ec 18             	sub    esp,0x18
c0009453:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009457:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000945b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0009460:	66 89 04 24          	mov    WORD PTR [esp],ax
c0009464:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009468:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000946b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000946f:	89 d1                	mov    ecx,edx
c0009471:	29 c1                	sub    ecx,eax
c0009473:	89 c8                	mov    eax,ecx
c0009475:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c000947a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000947e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0009481:	0f b7 c0             	movzx  eax,ax
c0009484:	0f b7 4c 24 04       	movzx  ecx,WORD PTR [esp+0x4]
c0009489:	0f b7 14 24          	movzx  edx,WORD PTR [esp]
c000948d:	01 ca                	add    edx,ecx
c000948f:	39 d0                	cmp    eax,edx
c0009491:	7c 65                	jl     c00094f8 <pbuf_memfind+0xa8>
c0009493:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009496:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000949b:	eb 4b                	jmp    c00094e8 <pbuf_memfind+0x98>
c000949d:	8d 76 00             	lea    esi,[esi+0x0]
c00094a0:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c00094a5:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c00094aa:	52                   	push   edx
c00094ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094af:	50                   	push   eax
c00094b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00094b4:	e8 8b fe ff ff       	call   c0009344 <pbuf_memcmp>
c00094b9:	83 c4 10             	add    esp,0x10
c00094bc:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00094c1:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00094c6:	85 c0                	test   eax,eax
c00094c8:	75 0a                	jne    c00094d4 <pbuf_memfind+0x84>
c00094ca:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00094cf:	eb 2f                	jmp    c0009500 <pbuf_memfind+0xb0>
c00094d1:	8d 76 00             	lea    esi,[esi+0x0]
c00094d4:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00094d9:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00094de:	01 d0                	add    eax,edx
c00094e0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00094e5:	8d 76 00             	lea    esi,[esi+0x0]
c00094e8:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c00094ed:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c00094f2:	39 c2                	cmp    edx,eax
c00094f4:	76 aa                	jbe    c00094a0 <pbuf_memfind+0x50>
c00094f6:	66 90                	xchg   ax,ax
c00094f8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00094fd:	8d 76 00             	lea    esi,[esi+0x0]
c0009500:	83 c4 18             	add    esp,0x18
c0009503:	c3                   	ret    

c0009504 <pbuf_strstr>:
c0009504:	83 ec 1c             	sub    esp,0x1c
c0009507:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000950c:	74 1e                	je     c000952c <pbuf_strstr+0x28>
c000950e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009512:	8a 00                	mov    al,BYTE PTR [eax]
c0009514:	0f be c0             	movsx  eax,al
c0009517:	85 c0                	test   eax,eax
c0009519:	74 11                	je     c000952c <pbuf_strstr+0x28>
c000951b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000951f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0009522:	0f b7 c0             	movzx  eax,ax
c0009525:	3d ff ff 00 00       	cmp    eax,0xffff
c000952a:	75 08                	jne    c0009534 <pbuf_strstr+0x30>
c000952c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009531:	eb 41                	jmp    c0009574 <pbuf_strstr+0x70>
c0009533:	90                   	nop
c0009534:	83 ec 0c             	sub    esp,0xc
c0009537:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000953b:	e8 30 70 ff ff       	call   c0000570 <strlen>
c0009540:	83 c4 10             	add    esp,0x10
c0009543:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009547:	81 7c 24 0c fe ff 00 00 	cmp    DWORD PTR [esp+0xc],0xfffe
c000954f:	76 07                	jbe    c0009558 <pbuf_strstr+0x54>
c0009551:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009556:	eb 1c                	jmp    c0009574 <pbuf_strstr+0x70>
c0009558:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000955c:	0f b7 c0             	movzx  eax,ax
c000955f:	6a 00                	push   0x0
c0009561:	50                   	push   eax
c0009562:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009566:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000956a:	e8 e1 fe ff ff       	call   c0009450 <pbuf_memfind>
c000956f:	83 c4 10             	add    esp,0x10
c0009572:	66 90                	xchg   ax,ax
c0009574:	83 c4 1c             	add    esp,0x1c
c0009577:	c3                   	ret    

c0009578 <raw_input>:
c0009578:	83 ec 2c             	sub    esp,0x2c
c000957b:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0009580:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009584:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009587:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000958b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000958f:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c0009592:	0f b6 c0             	movzx  eax,al
c0009595:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000959a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00095a2:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c00095a7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00095ab:	e9 b8 00 00 00       	jmp    c0009668 <raw_input+0xf0>
c00095b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00095b4:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c00095b7:	0f b6 d0             	movzx  edx,al
c00095ba:	0f bf 44 24 0e       	movsx  eax,WORD PTR [esp+0xe]
c00095bf:	39 c2                	cmp    edx,eax
c00095c1:	0f 85 8d 00 00 00    	jne    c0009654 <raw_input+0xdc>
c00095c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00095cb:	85 c0                	test   eax,eax
c00095cd:	74 19                	je     c00095e8 <raw_input+0x70>
c00095cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00095d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00095d5:	85 c0                	test   eax,eax
c00095d7:	74 0f                	je     c00095e8 <raw_input+0x70>
c00095d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00095dd:	8b 10                	mov    edx,DWORD PTR [eax]
c00095df:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c00095e4:	39 c2                	cmp    edx,eax
c00095e6:	75 6c                	jne    c0009654 <raw_input+0xdc>
c00095e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00095ec:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00095ef:	85 c0                	test   eax,eax
c00095f1:	74 61                	je     c0009654 <raw_input+0xdc>
c00095f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00095f7:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00095fa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00095fe:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c0009601:	68 90 68 03 c0       	push   0xc0036890
c0009606:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000960a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000960e:	52                   	push   edx
c000960f:	ff d0                	call   eax
c0009611:	83 c4 10             	add    esp,0x10
c0009614:	0f b6 c0             	movzx  eax,al
c0009617:	85 c0                	test   eax,eax
c0009619:	74 39                	je     c0009654 <raw_input+0xdc>
c000961b:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0009623:	c6 44 24 17 01       	mov    BYTE PTR [esp+0x17],0x1
c0009628:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000962d:	74 25                	je     c0009654 <raw_input+0xdc>
c000962f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009633:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0009636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000963a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000963d:	8b 15 9c a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a89c
c0009643:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009647:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000964a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000964e:	a3 9c a8 03 c0       	mov    ds:0xc003a89c,eax
c0009653:	90                   	nop
c0009654:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009658:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000965c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009660:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009663:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009667:	90                   	nop
c0009668:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000966d:	85 c0                	test   eax,eax
c000966f:	75 0b                	jne    c000967c <raw_input+0x104>
c0009671:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009676:	0f 85 34 ff ff ff    	jne    c00095b0 <raw_input+0x38>
c000967c:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0009680:	83 c4 2c             	add    esp,0x2c
c0009683:	c3                   	ret    

c0009684 <raw_bind>:
c0009684:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0009689:	74 09                	je     c0009694 <raw_bind+0x10>
c000968b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000968f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009691:	eb 09                	jmp    c000969c <raw_bind+0x18>
c0009693:	90                   	nop
c0009694:	b8 00 00 00 00       	mov    eax,0x0
c0009699:	8d 76 00             	lea    esi,[esi+0x0]
c000969c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00096a0:	89 02                	mov    DWORD PTR [edx],eax
c00096a2:	b0 00                	mov    al,0x0
c00096a4:	c3                   	ret    
c00096a5:	8d 76 00             	lea    esi,[esi+0x0]

c00096a8 <raw_connect>:
c00096a8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00096ad:	74 09                	je     c00096b8 <raw_connect+0x10>
c00096af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00096b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00096b5:	eb 09                	jmp    c00096c0 <raw_connect+0x18>
c00096b7:	90                   	nop
c00096b8:	b8 00 00 00 00       	mov    eax,0x0
c00096bd:	8d 76 00             	lea    esi,[esi+0x0]
c00096c0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00096c4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00096c7:	b0 00                	mov    al,0x0
c00096c9:	c3                   	ret    
c00096ca:	66 90                	xchg   ax,ax

c00096cc <raw_recv>:
c00096cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00096d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00096d4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00096d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00096db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00096df:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00096e2:	90                   	nop
c00096e3:	c3                   	ret    

c00096e4 <raw_sendto>:
c00096e4:	83 ec 1c             	sub    esp,0x1c
c00096e7:	83 ec 08             	sub    esp,0x8
c00096ea:	6a 14                	push   0x14
c00096ec:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00096f0:	e8 c3 e9 ff ff       	call   c00080b8 <pbuf_header>
c00096f5:	83 c4 10             	add    esp,0x10
c00096f8:	0f b6 c0             	movzx  eax,al
c00096fb:	85 c0                	test   eax,eax
c00096fd:	74 49                	je     c0009748 <raw_sendto+0x64>
c00096ff:	83 ec 04             	sub    esp,0x4
c0009702:	6a 00                	push   0x0
c0009704:	6a 00                	push   0x0
c0009706:	6a 01                	push   0x1
c0009708:	e8 1f ed ff ff       	call   c000842c <pbuf_alloc>
c000970d:	83 c4 10             	add    esp,0x10
c0009710:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009714:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0009719:	75 09                	jne    c0009724 <raw_sendto+0x40>
c000971b:	b0 ff                	mov    al,0xff
c000971d:	e9 2a 01 00 00       	jmp    c000984c <raw_sendto+0x168>
c0009722:	66 90                	xchg   ax,ax
c0009724:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009728:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000972b:	0f b7 c0             	movzx  eax,ax
c000972e:	85 c0                	test   eax,eax
c0009730:	74 52                	je     c0009784 <raw_sendto+0xa0>
c0009732:	83 ec 08             	sub    esp,0x8
c0009735:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000973d:	e8 2a f4 ff ff       	call   c0008b6c <pbuf_chain>
c0009742:	83 c4 10             	add    esp,0x10
c0009745:	eb 3d                	jmp    c0009784 <raw_sendto+0xa0>
c0009747:	90                   	nop
c0009748:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000974c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009750:	83 ec 08             	sub    esp,0x8
c0009753:	6a ec                	push   0xffffffec
c0009755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009759:	e8 5a e9 ff ff       	call   c00080b8 <pbuf_header>
c000975e:	83 c4 10             	add    esp,0x10
c0009761:	0f b6 c0             	movzx  eax,al
c0009764:	85 c0                	test   eax,eax
c0009766:	74 1c                	je     c0009784 <raw_sendto+0xa0>
c0009768:	83 ec 08             	sub    esp,0x8
c000976b:	68 98 fb 02 c0       	push   0xc002fb98
c0009770:	68 26 f6 02 c0       	push   0xc002f626
c0009775:	e8 1a 62 01 00       	call   c001f994 <CPrintf>
c000977a:	83 c4 10             	add    esp,0x10
c000977d:	b0 ff                	mov    al,0xff
c000977f:	e9 c8 00 00 00       	jmp    c000984c <raw_sendto+0x168>
c0009784:	83 ec 0c             	sub    esp,0xc
c0009787:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000978b:	e8 6c 9d 00 00       	call   c00134fc <ip_route>
c0009790:	83 c4 10             	add    esp,0x10
c0009793:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009797:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000979c:	75 22                	jne    c00097c0 <raw_sendto+0xdc>
c000979e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097a2:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c00097a6:	74 10                	je     c00097b8 <raw_sendto+0xd4>
c00097a8:	83 ec 0c             	sub    esp,0xc
c00097ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097af:	e8 a0 ea ff ff       	call   c0008254 <pbuf_free>
c00097b4:	83 c4 10             	add    esp,0x10
c00097b7:	90                   	nop
c00097b8:	b0 fc                	mov    al,0xfc
c00097ba:	e9 8d 00 00 00       	jmp    c000984c <raw_sendto+0x168>
c00097bf:	90                   	nop
c00097c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00097c4:	85 c0                	test   eax,eax
c00097c6:	74 0c                	je     c00097d4 <raw_sendto+0xf0>
c00097c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00097cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00097ce:	85 c0                	test   eax,eax
c00097d0:	75 12                	jne    c00097e4 <raw_sendto+0x100>
c00097d2:	66 90                	xchg   ax,ax
c00097d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097d8:	83 c0 04             	add    eax,0x4
c00097db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00097df:	eb 0b                	jmp    c00097ec <raw_sendto+0x108>
c00097e1:	8d 76 00             	lea    esi,[esi+0x0]
c00097e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00097e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00097ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00097f0:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c00097f3:	0f b6 c8             	movzx  ecx,al
c00097f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00097fa:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c00097fd:	0f b6 d0             	movzx  edx,al
c0009800:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009804:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c0009807:	0f b6 c0             	movzx  eax,al
c000980a:	83 ec 04             	sub    esp,0x4
c000980d:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0009811:	51                   	push   ecx
c0009812:	52                   	push   edx
c0009813:	50                   	push   eax
c0009814:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009818:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000981c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009820:	e8 af a1 00 00       	call   c00139d4 <ip_output_if>
c0009825:	83 c4 20             	add    esp,0x20
c0009828:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000982c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009830:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c0009834:	74 12                	je     c0009848 <raw_sendto+0x164>
c0009836:	83 ec 0c             	sub    esp,0xc
c0009839:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000983d:	e8 12 ea ff ff       	call   c0008254 <pbuf_free>
c0009842:	83 c4 10             	add    esp,0x10
c0009845:	8d 76 00             	lea    esi,[esi+0x0]
c0009848:	8a 44 24 03          	mov    al,BYTE PTR [esp+0x3]
c000984c:	83 c4 1c             	add    esp,0x1c
c000984f:	c3                   	ret    

c0009850 <raw_send>:
c0009850:	83 ec 0c             	sub    esp,0xc
c0009853:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009857:	83 c0 04             	add    eax,0x4
c000985a:	83 ec 04             	sub    esp,0x4
c000985d:	50                   	push   eax
c000985e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009862:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009866:	e8 79 fe ff ff       	call   c00096e4 <raw_sendto>
c000986b:	83 c4 10             	add    esp,0x10
c000986e:	83 c4 0c             	add    esp,0xc
c0009871:	c3                   	ret    
c0009872:	66 90                	xchg   ax,ax

c0009874 <raw_remove>:
c0009874:	83 ec 1c             	sub    esp,0x1c
c0009877:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c000987c:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0009880:	75 12                	jne    c0009894 <raw_remove+0x20>
c0009882:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c0009887:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000988a:	a3 9c a8 03 c0       	mov    ds:0xc003a89c,eax
c000988f:	eb 4b                	jmp    c00098dc <raw_remove+0x68>
c0009891:	8d 76 00             	lea    esi,[esi+0x0]
c0009894:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c0009899:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000989d:	eb 35                	jmp    c00098d4 <raw_remove+0x60>
c000989f:	90                   	nop
c00098a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098a4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00098a7:	85 c0                	test   eax,eax
c00098a9:	74 1d                	je     c00098c8 <raw_remove+0x54>
c00098ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098af:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00098b2:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00098b6:	75 10                	jne    c00098c8 <raw_remove+0x54>
c00098b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00098bc:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00098bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098c3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00098c6:	66 90                	xchg   ax,ax
c00098c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098cc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00098cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00098d3:	90                   	nop
c00098d4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00098d9:	75 c5                	jne    c00098a0 <raw_remove+0x2c>
c00098db:	90                   	nop
c00098dc:	83 ec 08             	sub    esp,0x8
c00098df:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00098e3:	6a 00                	push   0x0
c00098e5:	e8 ae e0 ff ff       	call   c0007998 <memp_free>
c00098ea:	83 c4 10             	add    esp,0x10
c00098ed:	90                   	nop
c00098ee:	83 c4 1c             	add    esp,0x1c
c00098f1:	c3                   	ret    
c00098f2:	66 90                	xchg   ax,ax

c00098f4 <raw_new>:
c00098f4:	83 ec 2c             	sub    esp,0x2c
c00098f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00098fb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00098ff:	83 ec 0c             	sub    esp,0xc
c0009902:	6a 00                	push   0x0
c0009904:	e8 63 df ff ff       	call   c000786c <memp_malloc>
c0009909:	83 c4 10             	add    esp,0x10
c000990c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009910:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009915:	74 3d                	je     c0009954 <raw_new+0x60>
c0009917:	83 ec 04             	sub    esp,0x4
c000991a:	6a 1c                	push   0x1c
c000991c:	6a 00                	push   0x0
c000991e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009922:	e8 c9 6b ff ff       	call   c00004f0 <memset>
c0009927:	83 c4 10             	add    esp,0x10
c000992a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000992e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009932:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c0009935:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009939:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c000993d:	8b 15 9c a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a89c
c0009943:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009947:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000994a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000994e:	a3 9c a8 03 c0       	mov    ds:0xc003a89c,eax
c0009953:	90                   	nop
c0009954:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009958:	83 c4 2c             	add    esp,0x2c
c000995b:	c3                   	ret    

c000995c <stats_init>:
c000995c:	90                   	nop
c000995d:	c3                   	ret    
c000995e:	66 90                	xchg   ax,ax

c0009960 <sys_msleep>:
c0009960:	83 ec 1c             	sub    esp,0x1c
c0009963:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0009968:	74 46                	je     c00099b0 <sys_msleep+0x50>
c000996a:	83 ec 08             	sub    esp,0x8
c000996d:	6a 00                	push   0x0
c000996f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009973:	50                   	push   eax
c0009974:	e8 d7 72 ff ff       	call   c0000c50 <sys_sem_new>
c0009979:	83 c4 10             	add    esp,0x10
c000997c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0009980:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0009985:	85 c0                	test   eax,eax
c0009987:	75 27                	jne    c00099b0 <sys_msleep+0x50>
c0009989:	83 ec 08             	sub    esp,0x8
c000998c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009990:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009994:	50                   	push   eax
c0009995:	e8 ce 72 ff ff       	call   c0000c68 <sys_arch_sem_wait>
c000999a:	83 c4 10             	add    esp,0x10
c000999d:	83 ec 0c             	sub    esp,0xc
c00099a0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00099a4:	50                   	push   eax
c00099a5:	e8 b6 72 ff ff       	call   c0000c60 <sys_sem_free>
c00099aa:	83 c4 10             	add    esp,0x10
c00099ad:	8d 76 00             	lea    esi,[esi+0x0]
c00099b0:	90                   	nop
c00099b1:	83 c4 1c             	add    esp,0x1c
c00099b4:	c3                   	ret    
c00099b5:	66 90                	xchg   ax,ax
c00099b7:	90                   	nop

c00099b8 <tcp_accept_null>:
c00099b8:	83 ec 04             	sub    esp,0x4
c00099bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00099bf:	88 04 24             	mov    BYTE PTR [esp],al
c00099c2:	b0 f6                	mov    al,0xf6
c00099c4:	83 c4 04             	add    esp,0x4
c00099c7:	c3                   	ret    

c00099c8 <tcp_listen_with_backlog>:
c00099c8:	83 ec 2c             	sub    esp,0x2c
c00099cb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00099cf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00099d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00099d7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00099da:	85 c0                	test   eax,eax
c00099dc:	74 22                	je     c0009a00 <tcp_listen_with_backlog+0x38>
c00099de:	83 ec 08             	sub    esp,0x8
c00099e1:	68 c0 fb 02 c0       	push   0xc002fbc0
c00099e6:	68 26 f6 02 c0       	push   0xc002f626
c00099eb:	e8 a4 5f 01 00       	call   c001f994 <CPrintf>
c00099f0:	83 c4 10             	add    esp,0x10
c00099f3:	b8 00 00 00 00       	mov    eax,0x0
c00099f8:	e9 77 01 00 00       	jmp    c0009b74 <tcp_listen_with_backlog+0x1ac>
c00099fd:	8d 76 00             	lea    esi,[esi+0x0]
c0009a00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a04:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009a07:	83 f8 01             	cmp    eax,0x1
c0009a0a:	75 0c                	jne    c0009a18 <tcp_listen_with_backlog+0x50>
c0009a0c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a10:	e9 5f 01 00 00       	jmp    c0009b74 <tcp_listen_with_backlog+0x1ac>
c0009a15:	8d 76 00             	lea    esi,[esi+0x0]
c0009a18:	83 ec 0c             	sub    esp,0xc
c0009a1b:	6a 03                	push   0x3
c0009a1d:	e8 4a de ff ff       	call   c000786c <memp_malloc>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009a29:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009a2e:	75 0c                	jne    c0009a3c <tcp_listen_with_backlog+0x74>
c0009a30:	b8 00 00 00 00       	mov    eax,0x0
c0009a35:	e9 3a 01 00 00       	jmp    c0009b74 <tcp_listen_with_backlog+0x1ac>
c0009a3a:	66 90                	xchg   ax,ax
c0009a3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a40:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0009a43:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009a47:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0009a4a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a4e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009a51:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009a55:	66 89 42 20          	mov    WORD PTR [edx+0x20],ax
c0009a59:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009a5d:	c7 40 10 01 00 00 00 	mov    DWORD PTR [eax+0x10],0x1
c0009a64:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a68:	8a 50 14             	mov    dl,BYTE PTR [eax+0x14]
c0009a6b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009a6f:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c0009a72:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a76:	8a 50 08             	mov    dl,BYTE PTR [eax+0x8]
c0009a79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009a7d:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0009a80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009a84:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c0009a87:	83 c8 02             	or     eax,0x2
c0009a8a:	88 c2                	mov    dl,al
c0009a8c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009a90:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0009a93:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a97:	8a 50 0a             	mov    dl,BYTE PTR [eax+0xa]
c0009a9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009a9e:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
c0009aa1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009aa5:	8a 50 09             	mov    dl,BYTE PTR [eax+0x9]
c0009aa8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009aac:	88 50 09             	mov    BYTE PTR [eax+0x9],dl
c0009aaf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ab3:	8b 10                	mov    edx,DWORD PTR [eax]
c0009ab5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009ab9:	89 10                	mov    DWORD PTR [eax],edx
c0009abb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009abf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009ac2:	0f b7 c0             	movzx  eax,ax
c0009ac5:	85 c0                	test   eax,eax
c0009ac7:	74 6f                	je     c0009b38 <tcp_listen_with_backlog+0x170>
c0009ac9:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c0009ace:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0009ad2:	75 10                	jne    c0009ae4 <tcp_listen_with_backlog+0x11c>
c0009ad4:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c0009ad9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009adc:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c0009ae1:	eb 49                	jmp    c0009b2c <tcp_listen_with_backlog+0x164>
c0009ae3:	90                   	nop
c0009ae4:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c0009ae9:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c0009aee:	eb 30                	jmp    c0009b20 <tcp_listen_with_backlog+0x158>
c0009af0:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009af5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009af8:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0009afc:	75 12                	jne    c0009b10 <tcp_listen_with_backlog+0x148>
c0009afe:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009b03:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009b07:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009b0a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009b0d:	eb 1d                	jmp    c0009b2c <tcp_listen_with_backlog+0x164>
c0009b0f:	90                   	nop
c0009b10:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009b15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b18:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c0009b1d:	8d 76 00             	lea    esi,[esi+0x0]
c0009b20:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009b25:	85 c0                	test   eax,eax
c0009b27:	75 c7                	jne    c0009af0 <tcp_listen_with_backlog+0x128>
c0009b29:	8d 76 00             	lea    esi,[esi+0x0]
c0009b2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b30:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0009b37:	90                   	nop
c0009b38:	83 ec 08             	sub    esp,0x8
c0009b3b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009b3f:	6a 02                	push   0x2
c0009b41:	e8 52 de ff ff       	call   c0007998 <memp_free>
c0009b46:	83 c4 10             	add    esp,0x10
c0009b49:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b4d:	c7 40 1c b8 99 00 c0 	mov    DWORD PTR [eax+0x1c],0xc00099b8
c0009b54:	8b 15 78 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036878
c0009b5a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b5e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009b61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b65:	a3 78 68 03 c0       	mov    ds:0xc0036878,eax
c0009b6a:	e8 a5 6e 00 00       	call   c0010a14 <tcp_timer_needed>
c0009b6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b73:	90                   	nop
c0009b74:	83 c4 2c             	add    esp,0x2c
c0009b77:	c3                   	ret    

c0009b78 <tcp_update_rcv_ann_wnd>:
c0009b78:	83 ec 1c             	sub    esp,0x1c
c0009b7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b7f:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0009b82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b86:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009b89:	0f b7 c0             	movzx  eax,ax
c0009b8c:	01 d0                	add    eax,edx
c0009b8e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009b92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b96:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0009b99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b9d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009ba0:	0f b7 c8             	movzx  ecx,ax
c0009ba3:	81 f9 30 04 00 00    	cmp    ecx,0x430
c0009ba9:	76 05                	jbe    c0009bb0 <tcp_update_rcv_ann_wnd+0x38>
c0009bab:	b8 30 04 00 00       	mov    eax,0x430
c0009bb0:	0f b7 c0             	movzx  eax,ax
c0009bb3:	01 c2                	add    edx,eax
c0009bb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009bb9:	29 d0                	sub    eax,edx
c0009bbb:	78 23                	js     c0009be0 <tcp_update_rcv_ann_wnd+0x68>
c0009bbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bc1:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009bc4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009bc8:	66 89 42 2e          	mov    WORD PTR [edx+0x2e],ax
c0009bcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bd0:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0009bd3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009bd7:	29 c2                	sub    edx,eax
c0009bd9:	89 d0                	mov    eax,edx
c0009bdb:	eb 73                	jmp    c0009c50 <tcp_update_rcv_ann_wnd+0xd8>
c0009bdd:	8d 76 00             	lea    esi,[esi+0x0]
c0009be0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009be4:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0009be7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009beb:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0009bee:	29 c2                	sub    edx,eax
c0009bf0:	89 d0                	mov    eax,edx
c0009bf2:	85 c0                	test   eax,eax
c0009bf4:	7e 0e                	jle    c0009c04 <tcp_update_rcv_ann_wnd+0x8c>
c0009bf6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bfa:	66 c7 40 2e 00 00    	mov    WORD PTR [eax+0x2e],0x0
c0009c00:	eb 46                	jmp    c0009c48 <tcp_update_rcv_ann_wnd+0xd0>
c0009c02:	66 90                	xchg   ax,ax
c0009c04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c08:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0009c0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c0f:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0009c12:	29 c2                	sub    edx,eax
c0009c14:	89 d0                	mov    eax,edx
c0009c16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c1a:	81 7c 24 08 ff ff 00 00 	cmp    DWORD PTR [esp+0x8],0xffff
c0009c22:	76 18                	jbe    c0009c3c <tcp_update_rcv_ann_wnd+0xc4>
c0009c24:	83 ec 08             	sub    esp,0x8
c0009c27:	68 f4 fd 02 c0       	push   0xc002fdf4
c0009c2c:	68 26 f6 02 c0       	push   0xc002f626
c0009c31:	e8 5e 5d 01 00       	call   c001f994 <CPrintf>
c0009c36:	83 c4 10             	add    esp,0x10
c0009c39:	8d 76 00             	lea    esi,[esi+0x0]
c0009c3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c40:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009c44:	66 89 42 2e          	mov    WORD PTR [edx+0x2e],ax
c0009c48:	b8 00 00 00 00       	mov    eax,0x0
c0009c4d:	8d 76 00             	lea    esi,[esi+0x0]
c0009c50:	83 c4 1c             	add    esp,0x1c
c0009c53:	c3                   	ret    

c0009c54 <tcp_recved>:
c0009c54:	83 ec 2c             	sub    esp,0x2c
c0009c57:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009c5b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009c60:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0009c65:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c69:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009c6c:	0f b7 c0             	movzx  eax,ax
c0009c6f:	b9 ff ff 00 00       	mov    ecx,0xffff
c0009c74:	29 c1                	sub    ecx,eax
c0009c76:	89 c8                	mov    eax,ecx
c0009c78:	39 c2                	cmp    edx,eax
c0009c7a:	7e 18                	jle    c0009c94 <tcp_recved+0x40>
c0009c7c:	83 ec 08             	sub    esp,0x8
c0009c7f:	68 e4 fb 02 c0       	push   0xc002fbe4
c0009c84:	68 26 f6 02 c0       	push   0xc002f626
c0009c89:	e8 06 5d 01 00       	call   c001f994 <CPrintf>
c0009c8e:	83 c4 10             	add    esp,0x10
c0009c91:	8d 76 00             	lea    esi,[esi+0x0]
c0009c94:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c98:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009c9b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c9f:	01 d0                	add    eax,edx
c0009ca1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009ca5:	66 89 42 2c          	mov    WORD PTR [edx+0x2c],ax
c0009ca9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cad:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009cb0:	0f b7 c0             	movzx  eax,ax
c0009cb3:	3d 60 08 00 00       	cmp    eax,0x860
c0009cb8:	76 0a                	jbe    c0009cc4 <tcp_recved+0x70>
c0009cba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cbe:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c0009cc4:	83 ec 0c             	sub    esp,0xc
c0009cc7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009ccb:	e8 a8 fe ff ff       	call   c0009b78 <tcp_update_rcv_ann_wnd>
c0009cd0:	83 c4 10             	add    esp,0x10
c0009cd3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd7:	81 7c 24 1c 17 02 00 00 	cmp    DWORD PTR [esp+0x1c],0x217
c0009cdf:	7e 23                	jle    c0009d04 <tcp_recved+0xb0>
c0009ce1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ce5:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0009ce8:	83 c8 02             	or     eax,0x2
c0009ceb:	88 c2                	mov    dl,al
c0009ced:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cf1:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c0009cf4:	83 ec 0c             	sub    esp,0xc
c0009cf7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009cfb:	e8 84 60 00 00       	call   c000fd84 <tcp_output>
c0009d00:	83 c4 10             	add    esp,0x10
c0009d03:	90                   	nop
c0009d04:	90                   	nop
c0009d05:	83 c4 2c             	add    esp,0x2c
c0009d08:	c3                   	ret    
c0009d09:	8d 76 00             	lea    esi,[esi+0x0]

c0009d0c <tcp_new_port>:
c0009d0c:	83 ec 10             	sub    esp,0x10
c0009d0f:	90                   	nop
c0009d10:	66 a1 c8 36 03 c0    	mov    ax,ds:0xc00336c8
c0009d16:	8d 50 01             	lea    edx,[eax+0x1]
c0009d19:	66 89 15 c8 36 03 c0 	mov    WORD PTR ds:0xc00336c8,dx
c0009d20:	0f b7 c0             	movzx  eax,ax
c0009d23:	3d ff ff 00 00       	cmp    eax,0xffff
c0009d28:	75 0a                	jne    c0009d34 <tcp_new_port+0x28>
c0009d2a:	66 c7 05 c8 36 03 c0 00 c0 	mov    WORD PTR ds:0xc00336c8,0xc000
c0009d33:	90                   	nop
c0009d34:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009d3c:	eb 4a                	jmp    c0009d88 <tcp_new_port+0x7c>
c0009d3e:	66 90                	xchg   ax,ax
c0009d40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009d44:	8b 04 85 00 ff 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0100]
c0009d4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0009d4d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009d51:	eb 29                	jmp    c0009d7c <tcp_new_port+0x70>
c0009d53:	90                   	nop
c0009d54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009d58:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0009d5b:	66 a1 c8 36 03 c0    	mov    ax,ds:0xc00336c8
c0009d61:	0f b7 d2             	movzx  edx,dx
c0009d64:	0f b7 c0             	movzx  eax,ax
c0009d67:	39 c2                	cmp    edx,eax
c0009d69:	75 05                	jne    c0009d70 <tcp_new_port+0x64>
c0009d6b:	eb a3                	jmp    c0009d10 <tcp_new_port+0x4>
c0009d6d:	8d 76 00             	lea    esi,[esi+0x0]
c0009d70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009d74:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009d77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009d7b:	90                   	nop
c0009d7c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0009d81:	75 d1                	jne    c0009d54 <tcp_new_port+0x48>
c0009d83:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0009d88:	83 7c 24 0c 03       	cmp    DWORD PTR [esp+0xc],0x3
c0009d8d:	7e b1                	jle    c0009d40 <tcp_new_port+0x34>
c0009d8f:	66 a1 c8 36 03 c0    	mov    ax,ds:0xc00336c8
c0009d95:	83 c4 10             	add    esp,0x10
c0009d98:	c3                   	ret    
c0009d99:	8d 76 00             	lea    esi,[esi+0x0]

c0009d9c <tcp_bind>:
c0009d9c:	83 ec 2c             	sub    esp,0x2c
c0009d9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009da3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009da8:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0009db0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009db4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009db7:	85 c0                	test   eax,eax
c0009db9:	74 1d                	je     c0009dd8 <tcp_bind+0x3c>
c0009dbb:	83 ec 08             	sub    esp,0x8
c0009dbe:	68 08 fc 02 c0       	push   0xc002fc08
c0009dc3:	68 26 f6 02 c0       	push   0xc002f626
c0009dc8:	e8 c7 5b 01 00       	call   c001f994 <CPrintf>
c0009dcd:	83 c4 10             	add    esp,0x10
c0009dd0:	b0 fa                	mov    al,0xfa
c0009dd2:	e9 f1 00 00 00       	jmp    c0009ec8 <tcp_bind+0x12c>
c0009dd7:	90                   	nop
c0009dd8:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0009ddd:	85 c0                	test   eax,eax
c0009ddf:	75 0b                	jne    c0009dec <tcp_bind+0x50>
c0009de1:	e8 26 ff ff ff       	call   c0009d0c <tcp_new_port>
c0009de6:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009deb:	90                   	nop
c0009dec:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009df4:	eb 7a                	jmp    c0009e70 <tcp_bind+0xd4>
c0009df6:	66 90                	xchg   ax,ax
c0009df8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009dfc:	8b 04 85 00 ff 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0100]
c0009e03:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e05:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e09:	eb 59                	jmp    c0009e64 <tcp_bind+0xc8>
c0009e0b:	90                   	nop
c0009e0c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e10:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009e13:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0009e18:	0f b7 c0             	movzx  eax,ax
c0009e1b:	39 c2                	cmp    edx,eax
c0009e1d:	75 39                	jne    c0009e58 <tcp_bind+0xbc>
c0009e1f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e23:	85 c0                	test   eax,eax
c0009e25:	74 2d                	je     c0009e54 <tcp_bind+0xb8>
c0009e27:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e2d:	85 c0                	test   eax,eax
c0009e2f:	74 23                	je     c0009e54 <tcp_bind+0xb8>
c0009e31:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0009e36:	74 1c                	je     c0009e54 <tcp_bind+0xb8>
c0009e38:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009e3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e3e:	85 c0                	test   eax,eax
c0009e40:	74 12                	je     c0009e54 <tcp_bind+0xb8>
c0009e42:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e46:	8b 10                	mov    edx,DWORD PTR [eax]
c0009e48:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009e4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e4e:	39 c2                	cmp    edx,eax
c0009e50:	75 06                	jne    c0009e58 <tcp_bind+0xbc>
c0009e52:	66 90                	xchg   ax,ax
c0009e54:	b0 f8                	mov    al,0xf8
c0009e56:	eb 70                	jmp    c0009ec8 <tcp_bind+0x12c>
c0009e58:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e5c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009e5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e63:	90                   	nop
c0009e64:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0009e69:	75 a1                	jne    c0009e0c <tcp_bind+0x70>
c0009e6b:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009e70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009e74:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c0009e78:	0f 8c 7a ff ff ff    	jl     c0009df8 <tcp_bind+0x5c>
c0009e7e:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0009e83:	74 17                	je     c0009e9c <tcp_bind+0x100>
c0009e85:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009e89:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e8b:	85 c0                	test   eax,eax
c0009e8d:	74 0d                	je     c0009e9c <tcp_bind+0x100>
c0009e8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e93:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e97:	8b 12                	mov    edx,DWORD PTR [edx]
c0009e99:	89 10                	mov    DWORD PTR [eax],edx
c0009e9b:	90                   	nop
c0009e9c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009ea0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ea4:	66 89 42 20          	mov    WORD PTR [edx+0x20],ax
c0009ea8:	8b 15 80 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036880
c0009eae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009eb2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009eb5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009eb9:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c0009ebe:	e8 51 6b 00 00       	call   c0010a14 <tcp_timer_needed>
c0009ec3:	b0 00                	mov    al,0x0
c0009ec5:	8d 76 00             	lea    esi,[esi+0x0]
c0009ec8:	83 c4 2c             	add    esp,0x2c
c0009ecb:	c3                   	ret    

c0009ecc <tcp_seg_free>:
c0009ecc:	83 ec 0c             	sub    esp,0xc
c0009ecf:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0009ed4:	74 32                	je     c0009f08 <tcp_seg_free+0x3c>
c0009ed6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009eda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009edd:	85 c0                	test   eax,eax
c0009edf:	74 13                	je     c0009ef4 <tcp_seg_free+0x28>
c0009ee1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ee5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009ee8:	83 ec 0c             	sub    esp,0xc
c0009eeb:	50                   	push   eax
c0009eec:	e8 63 e3 ff ff       	call   c0008254 <pbuf_free>
c0009ef1:	83 c4 10             	add    esp,0x10
c0009ef4:	83 ec 08             	sub    esp,0x8
c0009ef7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009efb:	6a 04                	push   0x4
c0009efd:	e8 96 da ff ff       	call   c0007998 <memp_free>
c0009f02:	83 c4 10             	add    esp,0x10
c0009f05:	8d 76 00             	lea    esi,[esi+0x0]
c0009f08:	90                   	nop
c0009f09:	83 c4 0c             	add    esp,0xc
c0009f0c:	c3                   	ret    
c0009f0d:	8d 76 00             	lea    esi,[esi+0x0]

c0009f10 <tcp_segs_free>:
c0009f10:	83 ec 1c             	sub    esp,0x1c
c0009f13:	eb 27                	jmp    c0009f3c <tcp_segs_free+0x2c>
c0009f15:	8d 76 00             	lea    esi,[esi+0x0]
c0009f18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009f22:	83 ec 0c             	sub    esp,0xc
c0009f25:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f29:	e8 9e ff ff ff       	call   c0009ecc <tcp_seg_free>
c0009f2e:	83 c4 10             	add    esp,0x10
c0009f31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f35:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009f39:	8d 76 00             	lea    esi,[esi+0x0]
c0009f3c:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0009f41:	75 d5                	jne    c0009f18 <tcp_segs_free+0x8>
c0009f43:	90                   	nop
c0009f44:	83 c4 1c             	add    esp,0x1c
c0009f47:	c3                   	ret    

c0009f48 <tcp_setprio>:
c0009f48:	83 ec 04             	sub    esp,0x4
c0009f4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f4f:	88 04 24             	mov    BYTE PTR [esp],al
c0009f52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009f56:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0009f59:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c0009f5c:	90                   	nop
c0009f5d:	83 c4 04             	add    esp,0x4
c0009f60:	c3                   	ret    
c0009f61:	8d 76 00             	lea    esi,[esi+0x0]

c0009f64 <tcp_seg_copy>:
c0009f64:	83 ec 1c             	sub    esp,0x1c
c0009f67:	83 ec 0c             	sub    esp,0xc
c0009f6a:	6a 04                	push   0x4
c0009f6c:	e8 fb d8 ff ff       	call   c000786c <memp_malloc>
c0009f71:	83 c4 10             	add    esp,0x10
c0009f74:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009f78:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009f7d:	75 09                	jne    c0009f88 <tcp_seg_copy+0x24>
c0009f7f:	b8 00 00 00 00       	mov    eax,0x0
c0009f84:	eb 2e                	jmp    c0009fb4 <tcp_seg_copy+0x50>
c0009f86:	66 90                	xchg   ax,ax
c0009f88:	83 ec 04             	sub    esp,0x4
c0009f8b:	6a 10                	push   0x10
c0009f8d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009f91:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009f95:	e8 e0 63 ff ff       	call   c000037a <memcpy>
c0009f9a:	83 c4 10             	add    esp,0x10
c0009f9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009fa1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009fa4:	83 ec 0c             	sub    esp,0xc
c0009fa7:	50                   	push   eax
c0009fa8:	e8 af ea ff ff       	call   c0008a5c <pbuf_ref>
c0009fad:	83 c4 10             	add    esp,0x10
c0009fb0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009fb4:	83 c4 1c             	add    esp,0x1c
c0009fb7:	c3                   	ret    

c0009fb8 <tcp_arg>:
c0009fb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009fbc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009fc0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0009fc3:	90                   	nop
c0009fc4:	c3                   	ret    
c0009fc5:	8d 76 00             	lea    esi,[esi+0x0]

c0009fc8 <tcp_recv>:
c0009fc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009fcc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009fd0:	89 90 8c 00 00 00    	mov    DWORD PTR [eax+0x8c],edx
c0009fd6:	90                   	nop
c0009fd7:	c3                   	ret    

c0009fd8 <tcp_sent>:
c0009fd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009fdc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009fe0:	89 90 88 00 00 00    	mov    DWORD PTR [eax+0x88],edx
c0009fe6:	90                   	nop
c0009fe7:	c3                   	ret    

c0009fe8 <tcp_err>:
c0009fe8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009fec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ff0:	89 90 98 00 00 00    	mov    DWORD PTR [eax+0x98],edx
c0009ff6:	90                   	nop
c0009ff7:	c3                   	ret    

c0009ff8 <tcp_accept>:
c0009ff8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a000:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000a003:	90                   	nop
c000a004:	c3                   	ret    
c000a005:	8d 76 00             	lea    esi,[esi+0x0]

c000a008 <tcp_poll>:
c000a008:	83 ec 04             	sub    esp,0x4
c000a00b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a00f:	88 04 24             	mov    BYTE PTR [esp],al
c000a012:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a016:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a01a:	89 90 94 00 00 00    	mov    DWORD PTR [eax+0x94],edx
c000a020:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a024:	8a 14 24             	mov    dl,BYTE PTR [esp]
c000a027:	88 50 39             	mov    BYTE PTR [eax+0x39],dl
c000a02a:	90                   	nop
c000a02b:	83 c4 04             	add    esp,0x4
c000a02e:	c3                   	ret    
c000a02f:	90                   	nop

c000a030 <tcp_pcb_purge>:
c000a030:	83 ec 0c             	sub    esp,0xc
c000a033:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a037:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a03a:	85 c0                	test   eax,eax
c000a03c:	0f 84 ca 00 00 00    	je     c000a10c <tcp_pcb_purge+0xdc>
c000a042:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a046:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a049:	83 f8 0a             	cmp    eax,0xa
c000a04c:	0f 84 ba 00 00 00    	je     c000a10c <tcp_pcb_purge+0xdc>
c000a052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a056:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a059:	83 f8 01             	cmp    eax,0x1
c000a05c:	0f 84 aa 00 00 00    	je     c000a10c <tcp_pcb_purge+0xdc>
c000a062:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a066:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000a06c:	85 c0                	test   eax,eax
c000a06e:	74 24                	je     c000a094 <tcp_pcb_purge+0x64>
c000a070:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a074:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000a07a:	83 ec 0c             	sub    esp,0xc
c000a07d:	50                   	push   eax
c000a07e:	e8 d1 e1 ff ff       	call   c0008254 <pbuf_free>
c000a083:	83 c4 10             	add    esp,0x10
c000a086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a08a:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000a094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a098:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a09e:	83 ec 0c             	sub    esp,0xc
c000a0a1:	50                   	push   eax
c000a0a2:	e8 69 fe ff ff       	call   c0009f10 <tcp_segs_free>
c000a0a7:	83 c4 10             	add    esp,0x10
c000a0aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a0ae:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c000a0b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a0bc:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000a0c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a0c6:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000a0c9:	83 ec 0c             	sub    esp,0xc
c000a0cc:	50                   	push   eax
c000a0cd:	e8 3e fe ff ff       	call   c0009f10 <tcp_segs_free>
c000a0d2:	83 c4 10             	add    esp,0x10
c000a0d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a0d9:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000a0dc:	83 ec 0c             	sub    esp,0xc
c000a0df:	50                   	push   eax
c000a0e0:	e8 2b fe ff ff       	call   c0009f10 <tcp_segs_free>
c000a0e5:	83 c4 10             	add    esp,0x10
c000a0e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a0ec:	c7 40 78 00 00 00 00 	mov    DWORD PTR [eax+0x78],0x0
c000a0f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a0f7:	8b 50 78             	mov    edx,DWORD PTR [eax+0x78]
c000a0fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a0fe:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000a101:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a105:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c000a10b:	90                   	nop
c000a10c:	90                   	nop
c000a10d:	83 c4 0c             	add    esp,0xc
c000a110:	c3                   	ret    
c000a111:	8d 76 00             	lea    esi,[esi+0x0]

c000a114 <tcp_slowtmr>:
c000a114:	57                   	push   edi
c000a115:	56                   	push   esi
c000a116:	53                   	push   ebx
c000a117:	83 ec 20             	sub    esp,0x20
c000a11a:	c6 44 24 15 00       	mov    BYTE PTR [esp+0x15],0x0
c000a11f:	a1 74 68 03 c0       	mov    eax,ds:0xc0036874
c000a124:	83 c0 01             	add    eax,0x1
c000a127:	a3 74 68 03 c0       	mov    ds:0xc0036874,eax
c000a12c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000a134:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000a139:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a13d:	e9 16 06 00 00       	jmp    c000a758 <tcp_slowtmr+0x644>
c000a142:	66 90                	xchg   ax,ax
c000a144:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a148:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a14b:	85 c0                	test   eax,eax
c000a14d:	75 15                	jne    c000a164 <tcp_slowtmr+0x50>
c000a14f:	83 ec 08             	sub    esp,0x8
c000a152:	68 30 fc 02 c0       	push   0xc002fc30
c000a157:	68 26 f6 02 c0       	push   0xc002f626
c000a15c:	e8 33 58 01 00       	call   c001f994 <CPrintf>
c000a161:	83 c4 10             	add    esp,0x10
c000a164:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a168:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a16b:	83 f8 01             	cmp    eax,0x1
c000a16e:	75 18                	jne    c000a188 <tcp_slowtmr+0x74>
c000a170:	83 ec 08             	sub    esp,0x8
c000a173:	68 5c fc 02 c0       	push   0xc002fc5c
c000a178:	68 26 f6 02 c0       	push   0xc002f626
c000a17d:	e8 12 58 01 00       	call   c001f994 <CPrintf>
c000a182:	83 c4 10             	add    esp,0x10
c000a185:	8d 76 00             	lea    esi,[esi+0x0]
c000a188:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a18c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a18f:	83 f8 0a             	cmp    eax,0xa
c000a192:	75 18                	jne    c000a1ac <tcp_slowtmr+0x98>
c000a194:	83 ec 08             	sub    esp,0x8
c000a197:	68 88 fc 02 c0       	push   0xc002fc88
c000a19c:	68 26 f6 02 c0       	push   0xc002f626
c000a1a1:	e8 ee 57 01 00       	call   c001f994 <CPrintf>
c000a1a6:	83 c4 10             	add    esp,0x10
c000a1a9:	8d 76 00             	lea    esi,[esi+0x0]
c000a1ac:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000a1b1:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c000a1b6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a1ba:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a1bd:	83 f8 02             	cmp    eax,0x2
c000a1c0:	75 22                	jne    c000a1e4 <tcp_slowtmr+0xd0>
c000a1c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a1c6:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a1c9:	0f b6 c0             	movzx  eax,al
c000a1cc:	83 f8 06             	cmp    eax,0x6
c000a1cf:	75 13                	jne    c000a1e4 <tcp_slowtmr+0xd0>
c000a1d1:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a1d5:	83 c0 01             	add    eax,0x1
c000a1d8:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a1dc:	e9 df 01 00 00       	jmp    c000a3c0 <tcp_slowtmr+0x2ac>
c000a1e1:	8d 76 00             	lea    esi,[esi+0x0]
c000a1e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a1e8:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a1eb:	0f b6 c0             	movzx  eax,al
c000a1ee:	83 f8 0c             	cmp    eax,0xc
c000a1f1:	75 11                	jne    c000a204 <tcp_slowtmr+0xf0>
c000a1f3:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a1f7:	83 c0 01             	add    eax,0x1
c000a1fa:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a1fe:	e9 bd 01 00 00       	jmp    c000a3c0 <tcp_slowtmr+0x2ac>
c000a203:	90                   	nop
c000a204:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a208:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a20e:	0f b6 c0             	movzx  eax,al
c000a211:	85 c0                	test   eax,eax
c000a213:	0f 84 8f 00 00 00    	je     c000a2a8 <tcp_slowtmr+0x194>
c000a219:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a21d:	8b 80 a0 00 00 00    	mov    eax,DWORD PTR [eax+0xa0]
c000a223:	8d 50 01             	lea    edx,[eax+0x1]
c000a226:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a22a:	89 90 a0 00 00 00    	mov    DWORD PTR [eax+0xa0],edx
c000a230:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a234:	8b 90 a0 00 00 00    	mov    edx,DWORD PTR [eax+0xa0]
c000a23a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a23e:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a244:	0f b6 c0             	movzx  eax,al
c000a247:	83 e8 01             	sub    eax,0x1
c000a24a:	8a 80 10 ff 02 c0    	mov    al,BYTE PTR [eax-0x3ffd00f0]
c000a250:	0f b6 c0             	movzx  eax,al
c000a253:	39 c2                	cmp    edx,eax
c000a255:	0f 82 65 01 00 00    	jb     c000a3c0 <tcp_slowtmr+0x2ac>
c000a25b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a25f:	c7 80 a0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xa0],0x0
c000a269:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a26d:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a273:	0f b6 c0             	movzx  eax,al
c000a276:	83 f8 06             	cmp    eax,0x6
c000a279:	77 19                	ja     c000a294 <tcp_slowtmr+0x180>
c000a27b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a27f:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a285:	83 c0 01             	add    eax,0x1
c000a288:	88 c2                	mov    dl,al
c000a28a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a28e:	88 90 a4 00 00 00    	mov    BYTE PTR [eax+0xa4],dl
c000a294:	83 ec 0c             	sub    esp,0xc
c000a297:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a29b:	e8 e8 63 00 00       	call   c0010688 <tcp_zero_window_probe>
c000a2a0:	83 c4 10             	add    esp,0x10
c000a2a3:	e9 18 01 00 00       	jmp    c000a3c0 <tcp_slowtmr+0x2ac>
c000a2a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a2ac:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000a2b0:	98                   	cwde   
c000a2b1:	85 c0                	test   eax,eax
c000a2b3:	78 13                	js     c000a2c8 <tcp_slowtmr+0x1b4>
c000a2b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a2b9:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000a2bd:	83 c0 01             	add    eax,0x1
c000a2c0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a2c4:	66 89 42 3a          	mov    WORD PTR [edx+0x3a],ax
c000a2c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a2cc:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000a2cf:	85 c0                	test   eax,eax
c000a2d1:	0f 84 e9 00 00 00    	je     c000a3c0 <tcp_slowtmr+0x2ac>
c000a2d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a2db:	66 8b 50 3a          	mov    dx,WORD PTR [eax+0x3a]
c000a2df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a2e3:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000a2e6:	0f bf d2             	movsx  edx,dx
c000a2e9:	98                   	cwde   
c000a2ea:	39 c2                	cmp    edx,eax
c000a2ec:	0f 8c ce 00 00 00    	jl     c000a3c0 <tcp_slowtmr+0x2ac>
c000a2f2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a2f6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a2f9:	83 f8 02             	cmp    eax,0x2
c000a2fc:	74 3a                	je     c000a338 <tcp_slowtmr+0x224>
c000a2fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a302:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000a305:	98                   	cwde   
c000a306:	c1 f8 03             	sar    eax,0x3
c000a309:	0f bf d0             	movsx  edx,ax
c000a30c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a310:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000a314:	98                   	cwde   
c000a315:	01 c2                	add    edx,eax
c000a317:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a31b:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a31e:	0f b6 c0             	movzx  eax,al
c000a321:	8a 80 18 ff 02 c0    	mov    al,BYTE PTR [eax-0x3ffd00e8]
c000a327:	0f b6 c0             	movzx  eax,al
c000a32a:	88 c1                	mov    cl,al
c000a32c:	d3 e2                	shl    edx,cl
c000a32e:	89 d0                	mov    eax,edx
c000a330:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a334:	66 89 42 4c          	mov    WORD PTR [edx+0x4c],ax
c000a338:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a33c:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000a342:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a346:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000a349:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a34d:	66 8b 52 56          	mov    dx,WORD PTR [edx+0x56]
c000a351:	0f b7 d8             	movzx  ebx,ax
c000a354:	0f b7 ca             	movzx  ecx,dx
c000a357:	39 cb                	cmp    ebx,ecx
c000a359:	76 05                	jbe    c000a360 <tcp_slowtmr+0x24c>
c000a35b:	89 d0                	mov    eax,edx
c000a35d:	8d 76 00             	lea    esi,[esi+0x0]
c000a360:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000a365:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000a36a:	d1 e8                	shr    eax,1
c000a36c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a370:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000a374:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a378:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c000a37b:	0f b7 d0             	movzx  edx,ax
c000a37e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a382:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a385:	0f b7 c0             	movzx  eax,ax
c000a388:	01 c0                	add    eax,eax
c000a38a:	39 c2                	cmp    edx,eax
c000a38c:	7d 12                	jge    c000a3a0 <tcp_slowtmr+0x28c>
c000a38e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a392:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a395:	d1 e0                	shl    eax,1
c000a397:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a39b:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000a39f:	90                   	nop
c000a3a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3a4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a3a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a3ab:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000a3af:	83 ec 0c             	sub    esp,0xc
c000a3b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a3b6:	e8 c9 5f 00 00       	call   c0010384 <tcp_rexmit_rto>
c000a3bb:	83 c4 10             	add    esp,0x10
c000a3be:	66 90                	xchg   ax,ax
c000a3c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3c4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a3c7:	83 f8 06             	cmp    eax,0x6
c000a3ca:	75 24                	jne    c000a3f0 <tcp_slowtmr+0x2dc>
c000a3cc:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a3d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3d6:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a3d9:	29 c2                	sub    edx,eax
c000a3db:	89 d0                	mov    eax,edx
c000a3dd:	83 f8 28             	cmp    eax,0x28
c000a3e0:	76 0e                	jbe    c000a3f0 <tcp_slowtmr+0x2dc>
c000a3e2:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a3e6:	83 c0 01             	add    eax,0x1
c000a3e9:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a3ed:	8d 76 00             	lea    esi,[esi+0x0]
c000a3f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3f4:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c000a3f7:	0f b6 c0             	movzx  eax,al
c000a3fa:	83 e0 08             	and    eax,0x8
c000a3fd:	0f 84 e1 00 00 00    	je     c000a4e4 <tcp_slowtmr+0x3d0>
c000a403:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a407:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a40a:	83 f8 04             	cmp    eax,0x4
c000a40d:	74 11                	je     c000a420 <tcp_slowtmr+0x30c>
c000a40f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a413:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a416:	83 f8 07             	cmp    eax,0x7
c000a419:	0f 85 c5 00 00 00    	jne    c000a4e4 <tcp_slowtmr+0x3d0>
c000a41f:	90                   	nop
c000a420:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a426:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a42a:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a42d:	89 d1                	mov    ecx,edx
c000a42f:	29 c1                	sub    ecx,eax
c000a431:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a435:	8b 80 9c 00 00 00    	mov    eax,DWORD PTR [eax+0x9c]
c000a43b:	05 b8 4c 0a 00       	add    eax,0xa4cb8
c000a440:	ba d3 4d 62 10       	mov    edx,0x10624dd3
c000a445:	f7 e2                	mul    edx
c000a447:	89 d0                	mov    eax,edx
c000a449:	c1 e8 05             	shr    eax,0x5
c000a44c:	39 c1                	cmp    ecx,eax
c000a44e:	76 18                	jbe    c000a468 <tcp_slowtmr+0x354>
c000a450:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a454:	83 c0 01             	add    eax,0x1
c000a457:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a45b:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c000a45f:	83 c0 01             	add    eax,0x1
c000a462:	88 44 24 16          	mov    BYTE PTR [esp+0x16],al
c000a466:	eb 7c                	jmp    c000a4e4 <tcp_slowtmr+0x3d0>
c000a468:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a46e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a472:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a475:	89 d3                	mov    ebx,edx
c000a477:	29 c3                	sub    ebx,eax
c000a479:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a47d:	8b 88 9c 00 00 00    	mov    ecx,DWORD PTR [eax+0x9c]
c000a483:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a487:	8a 80 a5 00 00 00    	mov    al,BYTE PTR [eax+0xa5]
c000a48d:	0f b6 d0             	movzx  edx,al
c000a490:	89 d0                	mov    eax,edx
c000a492:	c1 e0 03             	shl    eax,0x3
c000a495:	01 d0                	add    eax,edx
c000a497:	c1 e0 03             	shl    eax,0x3
c000a49a:	01 d0                	add    eax,edx
c000a49c:	c1 e0 02             	shl    eax,0x2
c000a49f:	01 d0                	add    eax,edx
c000a4a1:	c1 e0 05             	shl    eax,0x5
c000a4a4:	29 d0                	sub    eax,edx
c000a4a6:	c1 e0 03             	shl    eax,0x3
c000a4a9:	01 c8                	add    eax,ecx
c000a4ab:	ba d3 4d 62 10       	mov    edx,0x10624dd3
c000a4b0:	f7 e2                	mul    edx
c000a4b2:	89 d0                	mov    eax,edx
c000a4b4:	c1 e8 05             	shr    eax,0x5
c000a4b7:	39 c3                	cmp    ebx,eax
c000a4b9:	76 29                	jbe    c000a4e4 <tcp_slowtmr+0x3d0>
c000a4bb:	83 ec 0c             	sub    esp,0xc
c000a4be:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a4c2:	e8 f9 60 00 00       	call   c00105c0 <tcp_keepalive>
c000a4c7:	83 c4 10             	add    esp,0x10
c000a4ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4ce:	8a 80 a5 00 00 00    	mov    al,BYTE PTR [eax+0xa5]
c000a4d4:	83 c0 01             	add    eax,0x1
c000a4d7:	88 c2                	mov    dl,al
c000a4d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4dd:	88 90 a5 00 00 00    	mov    BYTE PTR [eax+0xa5],dl
c000a4e3:	90                   	nop
c000a4e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4e8:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a4ee:	85 c0                	test   eax,eax
c000a4f0:	74 4e                	je     c000a540 <tcp_slowtmr+0x42c>
c000a4f2:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a4f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4fc:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a4ff:	89 d1                	mov    ecx,edx
c000a501:	29 c1                	sub    ecx,eax
c000a503:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a507:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000a50a:	0f bf d0             	movsx  edx,ax
c000a50d:	89 d0                	mov    eax,edx
c000a50f:	01 c0                	add    eax,eax
c000a511:	01 d0                	add    eax,edx
c000a513:	01 c0                	add    eax,eax
c000a515:	39 c1                	cmp    ecx,eax
c000a517:	72 27                	jb     c000a540 <tcp_slowtmr+0x42c>
c000a519:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a51d:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a523:	83 ec 0c             	sub    esp,0xc
c000a526:	50                   	push   eax
c000a527:	e8 e4 f9 ff ff       	call   c0009f10 <tcp_segs_free>
c000a52c:	83 c4 10             	add    esp,0x10
c000a52f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a533:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c000a53d:	8d 76 00             	lea    esi,[esi+0x0]
c000a540:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a544:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a547:	83 f8 03             	cmp    eax,0x3
c000a54a:	75 24                	jne    c000a570 <tcp_slowtmr+0x45c>
c000a54c:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a552:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a556:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a559:	29 c2                	sub    edx,eax
c000a55b:	89 d0                	mov    eax,edx
c000a55d:	83 f8 28             	cmp    eax,0x28
c000a560:	76 0e                	jbe    c000a570 <tcp_slowtmr+0x45c>
c000a562:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a566:	83 c0 01             	add    eax,0x1
c000a569:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a56d:	8d 76 00             	lea    esi,[esi+0x0]
c000a570:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a574:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a577:	83 f8 09             	cmp    eax,0x9
c000a57a:	75 24                	jne    c000a5a0 <tcp_slowtmr+0x48c>
c000a57c:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a582:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a586:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a589:	29 c2                	sub    edx,eax
c000a58b:	89 d0                	mov    eax,edx
c000a58d:	3d f0 00 00 00       	cmp    eax,0xf0
c000a592:	76 0c                	jbe    c000a5a0 <tcp_slowtmr+0x48c>
c000a594:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a598:	83 c0 01             	add    eax,0x1
c000a59b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a59f:	90                   	nop
c000a5a0:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000a5a5:	85 c0                	test   eax,eax
c000a5a7:	0f 84 13 01 00 00    	je     c000a6c0 <tcp_slowtmr+0x5ac>
c000a5ad:	83 ec 0c             	sub    esp,0xc
c000a5b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a5b4:	e8 77 fa ff ff       	call   c000a030 <tcp_pcb_purge>
c000a5b9:	83 c4 10             	add    esp,0x10
c000a5bc:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000a5c1:	74 31                	je     c000a5f4 <tcp_slowtmr+0x4e0>
c000a5c3:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000a5c8:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a5cc:	75 16                	jne    c000a5e4 <tcp_slowtmr+0x4d0>
c000a5ce:	83 ec 08             	sub    esp,0x8
c000a5d1:	68 b8 fc 02 c0       	push   0xc002fcb8
c000a5d6:	68 26 f6 02 c0       	push   0xc002f626
c000a5db:	e8 b4 53 01 00       	call   c001f994 <CPrintf>
c000a5e0:	83 c4 10             	add    esp,0x10
c000a5e3:	90                   	nop
c000a5e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5e8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a5eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a5ef:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a5f2:	eb 2c                	jmp    c000a620 <tcp_slowtmr+0x50c>
c000a5f4:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000a5f9:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a5fd:	74 15                	je     c000a614 <tcp_slowtmr+0x500>
c000a5ff:	83 ec 08             	sub    esp,0x8
c000a602:	68 e4 fc 02 c0       	push   0xc002fce4
c000a607:	68 26 f6 02 c0       	push   0xc002f626
c000a60c:	e8 83 53 01 00       	call   c001f994 <CPrintf>
c000a611:	83 c4 10             	add    esp,0x10
c000a614:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a618:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a61b:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000a620:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a624:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000a62a:	85 c0                	test   eax,eax
c000a62c:	74 1e                	je     c000a64c <tcp_slowtmr+0x538>
c000a62e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a632:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000a638:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a63c:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000a63f:	83 ec 08             	sub    esp,0x8
c000a642:	6a f6                	push   0xfffffff6
c000a644:	52                   	push   edx
c000a645:	ff d0                	call   eax
c000a647:	83 c4 10             	add    esp,0x10
c000a64a:	66 90                	xchg   ax,ax
c000a64c:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000a651:	85 c0                	test   eax,eax
c000a653:	74 3f                	je     c000a694 <tcp_slowtmr+0x580>
c000a655:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a659:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000a65d:	0f b7 f0             	movzx  esi,ax
c000a660:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a664:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000a667:	0f b7 d8             	movzx  ebx,ax
c000a66a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a66e:	8d 78 04             	lea    edi,[eax+0x4]
c000a671:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a675:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a679:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a67c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a680:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000a683:	83 ec 08             	sub    esp,0x8
c000a686:	56                   	push   esi
c000a687:	53                   	push   ebx
c000a688:	57                   	push   edi
c000a689:	51                   	push   ecx
c000a68a:	52                   	push   edx
c000a68b:	50                   	push   eax
c000a68c:	e8 7f 5b 00 00       	call   c0010210 <tcp_rst>
c000a691:	83 c4 20             	add    esp,0x20
c000a694:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a698:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a69c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6a0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a6a3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a6a7:	83 ec 08             	sub    esp,0x8
c000a6aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ae:	6a 02                	push   0x2
c000a6b0:	e8 e3 d2 ff ff       	call   c0007998 <memp_free>
c000a6b5:	83 c4 10             	add    esp,0x10
c000a6b8:	e9 9b 00 00 00       	jmp    c000a758 <tcp_slowtmr+0x644>
c000a6bd:	8d 76 00             	lea    esi,[esi+0x0]
c000a6c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a6c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6cc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a6cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a6d3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a6d7:	8a 40 38             	mov    al,BYTE PTR [eax+0x38]
c000a6da:	83 c0 01             	add    eax,0x1
c000a6dd:	88 c2                	mov    dl,al
c000a6df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a6e3:	88 50 38             	mov    BYTE PTR [eax+0x38],dl
c000a6e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a6ea:	8a 50 38             	mov    dl,BYTE PTR [eax+0x38]
c000a6ed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a6f1:	8a 40 39             	mov    al,BYTE PTR [eax+0x39]
c000a6f4:	0f b6 d2             	movzx  edx,dl
c000a6f7:	0f b6 c0             	movzx  eax,al
c000a6fa:	39 c2                	cmp    edx,eax
c000a6fc:	72 5a                	jb     c000a758 <tcp_slowtmr+0x644>
c000a6fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a702:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000a706:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a70a:	8b 80 94 00 00 00    	mov    eax,DWORD PTR [eax+0x94]
c000a710:	85 c0                	test   eax,eax
c000a712:	74 24                	je     c000a738 <tcp_slowtmr+0x624>
c000a714:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a718:	8b 80 94 00 00 00    	mov    eax,DWORD PTR [eax+0x94]
c000a71e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a722:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000a725:	83 ec 08             	sub    esp,0x8
c000a728:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000a72c:	52                   	push   edx
c000a72d:	ff d0                	call   eax
c000a72f:	83 c4 10             	add    esp,0x10
c000a732:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000a736:	eb 08                	jmp    c000a740 <tcp_slowtmr+0x62c>
c000a738:	c6 44 24 15 00       	mov    BYTE PTR [esp+0x15],0x0
c000a73d:	8d 76 00             	lea    esi,[esi+0x0]
c000a740:	0f be 44 24 15       	movsx  eax,BYTE PTR [esp+0x15]
c000a745:	85 c0                	test   eax,eax
c000a747:	75 0f                	jne    c000a758 <tcp_slowtmr+0x644>
c000a749:	83 ec 0c             	sub    esp,0xc
c000a74c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a750:	e8 2f 56 00 00       	call   c000fd84 <tcp_output>
c000a755:	83 c4 10             	add    esp,0x10
c000a758:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000a75d:	0f 85 e1 f9 ff ff    	jne    c000a144 <tcp_slowtmr+0x30>
c000a763:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000a76b:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000a770:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a774:	e9 0b 01 00 00       	jmp    c000a884 <tcp_slowtmr+0x770>
c000a779:	8d 76 00             	lea    esi,[esi+0x0]
c000a77c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a780:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a783:	83 f8 0a             	cmp    eax,0xa
c000a786:	74 18                	je     c000a7a0 <tcp_slowtmr+0x68c>
c000a788:	83 ec 08             	sub    esp,0x8
c000a78b:	68 10 fd 02 c0       	push   0xc002fd10
c000a790:	68 26 f6 02 c0       	push   0xc002f626
c000a795:	e8 fa 51 01 00       	call   c001f994 <CPrintf>
c000a79a:	83 c4 10             	add    esp,0x10
c000a79d:	8d 76 00             	lea    esi,[esi+0x0]
c000a7a0:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000a7a5:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a7ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7af:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a7b2:	29 c2                	sub    edx,eax
c000a7b4:	89 d0                	mov    eax,edx
c000a7b6:	3d f0 00 00 00       	cmp    eax,0xf0
c000a7bb:	76 0b                	jbe    c000a7c8 <tcp_slowtmr+0x6b4>
c000a7bd:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a7c1:	83 c0 01             	add    eax,0x1
c000a7c4:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a7c8:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000a7cd:	85 c0                	test   eax,eax
c000a7cf:	0f 84 9b 00 00 00    	je     c000a870 <tcp_slowtmr+0x75c>
c000a7d5:	83 ec 0c             	sub    esp,0xc
c000a7d8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a7dc:	e8 4f f8 ff ff       	call   c000a030 <tcp_pcb_purge>
c000a7e1:	83 c4 10             	add    esp,0x10
c000a7e4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000a7e9:	74 31                	je     c000a81c <tcp_slowtmr+0x708>
c000a7eb:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000a7f0:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a7f4:	75 16                	jne    c000a80c <tcp_slowtmr+0x6f8>
c000a7f6:	83 ec 08             	sub    esp,0x8
c000a7f9:	68 40 fd 02 c0       	push   0xc002fd40
c000a7fe:	68 26 f6 02 c0       	push   0xc002f626
c000a803:	e8 8c 51 01 00       	call   c001f994 <CPrintf>
c000a808:	83 c4 10             	add    esp,0x10
c000a80b:	90                   	nop
c000a80c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a810:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a813:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a817:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a81a:	eb 2c                	jmp    c000a848 <tcp_slowtmr+0x734>
c000a81c:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000a821:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a825:	74 15                	je     c000a83c <tcp_slowtmr+0x728>
c000a827:	83 ec 08             	sub    esp,0x8
c000a82a:	68 68 fd 02 c0       	push   0xc002fd68
c000a82f:	68 26 f6 02 c0       	push   0xc002f626
c000a834:	e8 5b 51 01 00       	call   c001f994 <CPrintf>
c000a839:	83 c4 10             	add    esp,0x10
c000a83c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a840:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a843:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000a848:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a84c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a850:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a854:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a857:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a85b:	83 ec 08             	sub    esp,0x8
c000a85e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a862:	6a 02                	push   0x2
c000a864:	e8 2f d1 ff ff       	call   c0007998 <memp_free>
c000a869:	83 c4 10             	add    esp,0x10
c000a86c:	eb 16                	jmp    c000a884 <tcp_slowtmr+0x770>
c000a86e:	66 90                	xchg   ax,ax
c000a870:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a874:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a878:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a87c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a87f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a883:	90                   	nop
c000a884:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000a889:	0f 85 ed fe ff ff    	jne    c000a77c <tcp_slowtmr+0x668>
c000a88f:	90                   	nop
c000a890:	83 c4 20             	add    esp,0x20
c000a893:	5b                   	pop    ebx
c000a894:	5e                   	pop    esi
c000a895:	5f                   	pop    edi
c000a896:	c3                   	ret    
c000a897:	90                   	nop

c000a898 <tcp_pcb_remove>:
c000a898:	83 ec 0c             	sub    esp,0xc
c000a89b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a89f:	8b 00                	mov    eax,DWORD PTR [eax]
c000a8a1:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000a8a5:	75 11                	jne    c000a8b8 <tcp_pcb_remove+0x20>
c000a8a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8ab:	8b 00                	mov    eax,DWORD PTR [eax]
c000a8ad:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a8b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8b4:	89 10                	mov    DWORD PTR [eax],edx
c000a8b6:	eb 4c                	jmp    c000a904 <tcp_pcb_remove+0x6c>
c000a8b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8bc:	8b 00                	mov    eax,DWORD PTR [eax]
c000a8be:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000a8c3:	eb 33                	jmp    c000a8f8 <tcp_pcb_remove+0x60>
c000a8c5:	8d 76 00             	lea    esi,[esi+0x0]
c000a8c8:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000a8cd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a8d0:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000a8d4:	75 12                	jne    c000a8e8 <tcp_pcb_remove+0x50>
c000a8d6:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000a8db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a8df:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a8e2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a8e5:	eb 1d                	jmp    c000a904 <tcp_pcb_remove+0x6c>
c000a8e7:	90                   	nop
c000a8e8:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000a8ed:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a8f0:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000a8f5:	8d 76 00             	lea    esi,[esi+0x0]
c000a8f8:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000a8fd:	85 c0                	test   eax,eax
c000a8ff:	75 c7                	jne    c000a8c8 <tcp_pcb_remove+0x30>
c000a901:	8d 76 00             	lea    esi,[esi+0x0]
c000a904:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a908:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000a90f:	83 ec 0c             	sub    esp,0xc
c000a912:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000a916:	e8 15 f7 ff ff       	call   c000a030 <tcp_pcb_purge>
c000a91b:	83 c4 10             	add    esp,0x10
c000a91e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a922:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a925:	83 f8 0a             	cmp    eax,0xa
c000a928:	74 3e                	je     c000a968 <tcp_pcb_remove+0xd0>
c000a92a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a92e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a931:	83 f8 01             	cmp    eax,0x1
c000a934:	74 32                	je     c000a968 <tcp_pcb_remove+0xd0>
c000a936:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a93a:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000a93d:	0f b6 c0             	movzx  eax,al
c000a940:	83 e0 01             	and    eax,0x1
c000a943:	74 23                	je     c000a968 <tcp_pcb_remove+0xd0>
c000a945:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a949:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000a94c:	83 c8 02             	or     eax,0x2
c000a94f:	88 c2                	mov    dl,al
c000a951:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a955:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000a958:	83 ec 0c             	sub    esp,0xc
c000a95b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000a95f:	e8 20 54 00 00       	call   c000fd84 <tcp_output>
c000a964:	83 c4 10             	add    esp,0x10
c000a967:	90                   	nop
c000a968:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a96c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a96f:	83 f8 01             	cmp    eax,0x1
c000a972:	74 64                	je     c000a9d8 <tcp_pcb_remove+0x140>
c000a974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a978:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000a97b:	85 c0                	test   eax,eax
c000a97d:	74 15                	je     c000a994 <tcp_pcb_remove+0xfc>
c000a97f:	83 ec 08             	sub    esp,0x8
c000a982:	68 0e fe 02 c0       	push   0xc002fe0e
c000a987:	68 26 f6 02 c0       	push   0xc002f626
c000a98c:	e8 03 50 01 00       	call   c001f994 <CPrintf>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a998:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000a99b:	85 c0                	test   eax,eax
c000a99d:	74 15                	je     c000a9b4 <tcp_pcb_remove+0x11c>
c000a99f:	83 ec 08             	sub    esp,0x8
c000a9a2:	68 26 fe 02 c0       	push   0xc002fe26
c000a9a7:	68 26 f6 02 c0       	push   0xc002f626
c000a9ac:	e8 e3 4f 01 00       	call   c001f994 <CPrintf>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a9b8:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a9be:	85 c0                	test   eax,eax
c000a9c0:	74 16                	je     c000a9d8 <tcp_pcb_remove+0x140>
c000a9c2:	83 ec 08             	sub    esp,0x8
c000a9c5:	68 3f fe 02 c0       	push   0xc002fe3f
c000a9ca:	68 26 f6 02 c0       	push   0xc002f626
c000a9cf:	e8 c0 4f 01 00       	call   c001f994 <CPrintf>
c000a9d4:	83 c4 10             	add    esp,0x10
c000a9d7:	90                   	nop
c000a9d8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a9dc:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000a9e3:	90                   	nop
c000a9e4:	83 c4 0c             	add    esp,0xc
c000a9e7:	c3                   	ret    

c000a9e8 <tcp_close_shutdown>:
c000a9e8:	57                   	push   edi
c000a9e9:	56                   	push   esi
c000a9ea:	53                   	push   ebx
c000a9eb:	83 ec 20             	sub    esp,0x20
c000a9ee:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a9f2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a9f6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000a9fb:	85 c0                	test   eax,eax
c000a9fd:	0f 84 41 01 00 00    	je     c000ab44 <tcp_close_shutdown+0x15c>
c000aa03:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aa07:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aa0a:	83 f8 01             	cmp    eax,0x1
c000aa0d:	0f 84 31 01 00 00    	je     c000ab44 <tcp_close_shutdown+0x15c>
c000aa13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aa17:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000aa1d:	85 c0                	test   eax,eax
c000aa1f:	75 17                	jne    c000aa38 <tcp_close_shutdown+0x50>
c000aa21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aa25:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000aa28:	0f b7 c0             	movzx  eax,ax
c000aa2b:	3d 60 08 00 00       	cmp    eax,0x860
c000aa30:	0f 84 0e 01 00 00    	je     c000ab44 <tcp_close_shutdown+0x15c>
c000aa36:	66 90                	xchg   ax,ax
c000aa38:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aa3c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000aa3f:	0f b6 c0             	movzx  eax,al
c000aa42:	83 e0 10             	and    eax,0x10
c000aa45:	75 15                	jne    c000aa5c <tcp_close_shutdown+0x74>
c000aa47:	83 ec 08             	sub    esp,0x8
c000aa4a:	68 56 fe 02 c0       	push   0xc002fe56
c000aa4f:	68 26 f6 02 c0       	push   0xc002f626
c000aa54:	e8 3b 4f 01 00       	call   c001f994 <CPrintf>
c000aa59:	83 c4 10             	add    esp,0x10
c000aa5c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aa60:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000aa64:	0f b7 f0             	movzx  esi,ax
c000aa67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aa6b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000aa6e:	0f b7 d8             	movzx  ebx,ax
c000aa71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aa75:	8d 78 04             	lea    edi,[eax+0x4]
c000aa78:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000aa7c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aa80:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000aa83:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aa87:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000aa8a:	83 ec 08             	sub    esp,0x8
c000aa8d:	56                   	push   esi
c000aa8e:	53                   	push   ebx
c000aa8f:	57                   	push   edi
c000aa90:	51                   	push   ecx
c000aa91:	52                   	push   edx
c000aa92:	50                   	push   eax
c000aa93:	e8 78 57 00 00       	call   c0010210 <tcp_rst>
c000aa98:	83 c4 20             	add    esp,0x20
c000aa9b:	83 ec 0c             	sub    esp,0xc
c000aa9e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000aaa2:	e8 89 f5 ff ff       	call   c000a030 <tcp_pcb_purge>
c000aaa7:	83 c4 10             	add    esp,0x10
c000aaaa:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000aaaf:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000aab3:	75 0f                	jne    c000aac4 <tcp_close_shutdown+0xdc>
c000aab5:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000aaba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000aabd:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000aac2:	eb 48                	jmp    c000ab0c <tcp_close_shutdown+0x124>
c000aac4:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000aac9:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000aace:	eb 30                	jmp    c000ab00 <tcp_close_shutdown+0x118>
c000aad0:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000aad5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000aad8:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000aadc:	75 12                	jne    c000aaf0 <tcp_close_shutdown+0x108>
c000aade:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000aae3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000aae7:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000aaea:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000aaed:	eb 1d                	jmp    c000ab0c <tcp_close_shutdown+0x124>
c000aaef:	90                   	nop
c000aaf0:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000aaf5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000aaf8:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000aafd:	8d 76 00             	lea    esi,[esi+0x0]
c000ab00:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ab05:	85 c0                	test   eax,eax
c000ab07:	75 c7                	jne    c000aad0 <tcp_close_shutdown+0xe8>
c000ab09:	8d 76 00             	lea    esi,[esi+0x0]
c000ab0c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab10:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000ab17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab1b:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000ab22:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000ab28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab2c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ab2f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab33:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000ab38:	e8 d7 5e 00 00       	call   c0010a14 <tcp_timer_needed>
c000ab3d:	b0 00                	mov    al,0x0
c000ab3f:	e9 f4 01 00 00       	jmp    c000ad38 <tcp_close_shutdown+0x350>
c000ab44:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab48:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab4b:	83 f8 07             	cmp    eax,0x7
c000ab4e:	0f 87 a4 01 00 00    	ja     c000acf8 <tcp_close_shutdown+0x310>
c000ab54:	8b 04 85 e0 fe 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0120]
c000ab5b:	ff e0                	jmp    eax
c000ab5d:	8d 76 00             	lea    esi,[esi+0x0]
c000ab60:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ab65:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab69:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ab6c:	0f b7 c0             	movzx  eax,ax
c000ab6f:	85 c0                	test   eax,eax
c000ab71:	74 71                	je     c000abe4 <tcp_close_shutdown+0x1fc>
c000ab73:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000ab78:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ab7c:	75 12                	jne    c000ab90 <tcp_close_shutdown+0x1a8>
c000ab7e:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000ab83:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab86:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c000ab8b:	eb 4b                	jmp    c000abd8 <tcp_close_shutdown+0x1f0>
c000ab8d:	8d 76 00             	lea    esi,[esi+0x0]
c000ab90:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000ab95:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ab9a:	eb 30                	jmp    c000abcc <tcp_close_shutdown+0x1e4>
c000ab9c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000aba1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000aba4:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000aba8:	75 12                	jne    c000abbc <tcp_close_shutdown+0x1d4>
c000abaa:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000abaf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000abb3:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000abb6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000abb9:	eb 1d                	jmp    c000abd8 <tcp_close_shutdown+0x1f0>
c000abbb:	90                   	nop
c000abbc:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000abc1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000abc4:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000abc9:	8d 76 00             	lea    esi,[esi+0x0]
c000abcc:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000abd1:	85 c0                	test   eax,eax
c000abd3:	75 c7                	jne    c000ab9c <tcp_close_shutdown+0x1b4>
c000abd5:	8d 76 00             	lea    esi,[esi+0x0]
c000abd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000abdc:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000abe3:	90                   	nop
c000abe4:	83 ec 08             	sub    esp,0x8
c000abe7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000abeb:	6a 02                	push   0x2
c000abed:	e8 a6 cd ff ff       	call   c0007998 <memp_free>
c000abf2:	83 c4 10             	add    esp,0x10
c000abf5:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000abfd:	e9 12 01 00 00       	jmp    c000ad14 <tcp_close_shutdown+0x32c>
c000ac02:	66 90                	xchg   ax,ax
c000ac04:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ac09:	83 ec 08             	sub    esp,0x8
c000ac0c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ac10:	68 78 68 03 c0       	push   0xc0036878
c000ac15:	e8 7e fc ff ff       	call   c000a898 <tcp_pcb_remove>
c000ac1a:	83 c4 10             	add    esp,0x10
c000ac1d:	83 ec 08             	sub    esp,0x8
c000ac20:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ac24:	6a 03                	push   0x3
c000ac26:	e8 6d cd ff ff       	call   c0007998 <memp_free>
c000ac2b:	83 c4 10             	add    esp,0x10
c000ac2e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000ac36:	e9 d9 00 00 00       	jmp    c000ad14 <tcp_close_shutdown+0x32c>
c000ac3b:	90                   	nop
c000ac3c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ac41:	83 ec 08             	sub    esp,0x8
c000ac44:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ac48:	68 70 68 03 c0       	push   0xc0036870
c000ac4d:	e8 46 fc ff ff       	call   c000a898 <tcp_pcb_remove>
c000ac52:	83 c4 10             	add    esp,0x10
c000ac55:	83 ec 08             	sub    esp,0x8
c000ac58:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ac5c:	6a 02                	push   0x2
c000ac5e:	e8 35 cd ff ff       	call   c0007998 <memp_free>
c000ac63:	83 c4 10             	add    esp,0x10
c000ac66:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000ac6e:	e9 a1 00 00 00       	jmp    c000ad14 <tcp_close_shutdown+0x32c>
c000ac73:	90                   	nop
c000ac74:	83 ec 0c             	sub    esp,0xc
c000ac77:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac7b:	e8 54 4d 00 00       	call   c000f9d4 <tcp_send_fin>
c000ac80:	83 c4 10             	add    esp,0x10
c000ac83:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000ac87:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000ac8c:	85 c0                	test   eax,eax
c000ac8e:	75 78                	jne    c000ad08 <tcp_close_shutdown+0x320>
c000ac90:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ac94:	c7 40 10 05 00 00 00 	mov    DWORD PTR [eax+0x10],0x5
c000ac9b:	eb 6b                	jmp    c000ad08 <tcp_close_shutdown+0x320>
c000ac9d:	8d 76 00             	lea    esi,[esi+0x0]
c000aca0:	83 ec 0c             	sub    esp,0xc
c000aca3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000aca7:	e8 28 4d 00 00       	call   c000f9d4 <tcp_send_fin>
c000acac:	83 c4 10             	add    esp,0x10
c000acaf:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000acb3:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000acb8:	85 c0                	test   eax,eax
c000acba:	75 50                	jne    c000ad0c <tcp_close_shutdown+0x324>
c000acbc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000acc0:	c7 40 10 05 00 00 00 	mov    DWORD PTR [eax+0x10],0x5
c000acc7:	eb 43                	jmp    c000ad0c <tcp_close_shutdown+0x324>
c000acc9:	8d 76 00             	lea    esi,[esi+0x0]
c000accc:	83 ec 0c             	sub    esp,0xc
c000accf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000acd3:	e8 fc 4c 00 00       	call   c000f9d4 <tcp_send_fin>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000acdf:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000ace4:	85 c0                	test   eax,eax
c000ace6:	75 28                	jne    c000ad10 <tcp_close_shutdown+0x328>
c000ace8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000acec:	c7 40 10 09 00 00 00 	mov    DWORD PTR [eax+0x10],0x9
c000acf3:	eb 1b                	jmp    c000ad10 <tcp_close_shutdown+0x328>
c000acf5:	8d 76 00             	lea    esi,[esi+0x0]
c000acf8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000acfd:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000ad05:	eb 0d                	jmp    c000ad14 <tcp_close_shutdown+0x32c>
c000ad07:	90                   	nop
c000ad08:	90                   	nop
c000ad09:	eb 09                	jmp    c000ad14 <tcp_close_shutdown+0x32c>
c000ad0b:	90                   	nop
c000ad0c:	90                   	nop
c000ad0d:	eb 05                	jmp    c000ad14 <tcp_close_shutdown+0x32c>
c000ad0f:	90                   	nop
c000ad10:	90                   	nop
c000ad11:	8d 76 00             	lea    esi,[esi+0x0]
c000ad14:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000ad19:	74 19                	je     c000ad34 <tcp_close_shutdown+0x34c>
c000ad1b:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000ad20:	85 c0                	test   eax,eax
c000ad22:	75 10                	jne    c000ad34 <tcp_close_shutdown+0x34c>
c000ad24:	83 ec 0c             	sub    esp,0xc
c000ad27:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ad2b:	e8 54 50 00 00       	call   c000fd84 <tcp_output>
c000ad30:	83 c4 10             	add    esp,0x10
c000ad33:	90                   	nop
c000ad34:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000ad38:	83 c4 20             	add    esp,0x20
c000ad3b:	5b                   	pop    ebx
c000ad3c:	5e                   	pop    esi
c000ad3d:	5f                   	pop    edi
c000ad3e:	c3                   	ret    
c000ad3f:	90                   	nop

c000ad40 <tcp_close>:
c000ad40:	83 ec 0c             	sub    esp,0xc
c000ad43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad47:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ad4a:	83 f8 01             	cmp    eax,0x1
c000ad4d:	74 15                	je     c000ad64 <tcp_close+0x24>
c000ad4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad53:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ad56:	83 c8 10             	or     eax,0x10
c000ad59:	88 c2                	mov    dl,al
c000ad5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad5f:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ad62:	66 90                	xchg   ax,ax
c000ad64:	83 ec 08             	sub    esp,0x8
c000ad67:	6a 01                	push   0x1
c000ad69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ad6d:	e8 76 fc ff ff       	call   c000a9e8 <tcp_close_shutdown>
c000ad72:	83 c4 10             	add    esp,0x10
c000ad75:	83 c4 0c             	add    esp,0xc
c000ad78:	c3                   	ret    
c000ad79:	8d 76 00             	lea    esi,[esi+0x0]

c000ad7c <tcp_recv_null>:
c000ad7c:	83 ec 1c             	sub    esp,0x1c
c000ad7f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ad83:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ad87:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000ad8c:	74 2e                	je     c000adbc <tcp_recv_null+0x40>
c000ad8e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ad92:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ad95:	0f b7 c0             	movzx  eax,ax
c000ad98:	83 ec 08             	sub    esp,0x8
c000ad9b:	50                   	push   eax
c000ad9c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ada0:	e8 af ee ff ff       	call   c0009c54 <tcp_recved>
c000ada5:	83 c4 10             	add    esp,0x10
c000ada8:	83 ec 0c             	sub    esp,0xc
c000adab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000adaf:	e8 a0 d4 ff ff       	call   c0008254 <pbuf_free>
c000adb4:	83 c4 10             	add    esp,0x10
c000adb7:	eb 1f                	jmp    c000add8 <tcp_recv_null+0x5c>
c000adb9:	8d 76 00             	lea    esi,[esi+0x0]
c000adbc:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c000adc1:	85 c0                	test   eax,eax
c000adc3:	75 13                	jne    c000add8 <tcp_recv_null+0x5c>
c000adc5:	83 ec 0c             	sub    esp,0xc
c000adc8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000adcc:	e8 6f ff ff ff       	call   c000ad40 <tcp_close>
c000add1:	83 c4 10             	add    esp,0x10
c000add4:	eb 06                	jmp    c000addc <tcp_recv_null+0x60>
c000add6:	66 90                	xchg   ax,ax
c000add8:	b0 00                	mov    al,0x0
c000adda:	66 90                	xchg   ax,ax
c000addc:	83 c4 1c             	add    esp,0x1c
c000addf:	c3                   	ret    

c000ade0 <tcp_fasttmr>:
c000ade0:	83 ec 1c             	sub    esp,0x1c
c000ade3:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ade8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000adec:	e9 03 01 00 00       	jmp    c000aef4 <tcp_fasttmr+0x114>
c000adf1:	8d 76 00             	lea    esi,[esi+0x0]
c000adf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000adf8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000adfb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ae03:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000ae09:	85 c0                	test   eax,eax
c000ae0b:	0f 84 8f 00 00 00    	je     c000aea0 <tcp_fasttmr+0xc0>
c000ae11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ae15:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000ae1b:	85 c0                	test   eax,eax
c000ae1d:	74 31                	je     c000ae50 <tcp_fasttmr+0x70>
c000ae1f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ae23:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000ae29:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ae2d:	8b 8a 84 00 00 00    	mov    ecx,DWORD PTR [edx+0x84]
c000ae33:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ae37:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000ae3a:	6a 00                	push   0x0
c000ae3c:	51                   	push   ecx
c000ae3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae41:	52                   	push   edx
c000ae42:	ff d0                	call   eax
c000ae44:	83 c4 10             	add    esp,0x10
c000ae47:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ae4b:	eb 23                	jmp    c000ae70 <tcp_fasttmr+0x90>
c000ae4d:	8d 76 00             	lea    esi,[esi+0x0]
c000ae50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ae54:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000ae5a:	6a 00                	push   0x0
c000ae5c:	50                   	push   eax
c000ae5d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae61:	6a 00                	push   0x0
c000ae63:	e8 14 ff ff ff       	call   c000ad7c <tcp_recv_null>
c000ae68:	83 c4 10             	add    esp,0x10
c000ae6b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ae6f:	90                   	nop
c000ae70:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000ae75:	85 c0                	test   eax,eax
c000ae77:	75 13                	jne    c000ae8c <tcp_fasttmr+0xac>
c000ae79:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ae7d:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000ae87:	eb 17                	jmp    c000aea0 <tcp_fasttmr+0xc0>
c000ae89:	8d 76 00             	lea    esi,[esi+0x0]
c000ae8c:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000ae91:	83 f8 f6             	cmp    eax,0xfffffff6
c000ae94:	75 0a                	jne    c000aea0 <tcp_fasttmr+0xc0>
c000ae96:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ae9e:	66 90                	xchg   ax,ax
c000aea0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000aea5:	74 45                	je     c000aeec <tcp_fasttmr+0x10c>
c000aea7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aeab:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000aeae:	0f b6 c0             	movzx  eax,al
c000aeb1:	83 e0 01             	and    eax,0x1
c000aeb4:	74 36                	je     c000aeec <tcp_fasttmr+0x10c>
c000aeb6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aeba:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000aebd:	83 c8 02             	or     eax,0x2
c000aec0:	88 c2                	mov    dl,al
c000aec2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aec6:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000aec9:	83 ec 0c             	sub    esp,0xc
c000aecc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aed0:	e8 af 4e 00 00       	call   c000fd84 <tcp_output>
c000aed5:	83 c4 10             	add    esp,0x10
c000aed8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aedc:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000aedf:	83 e0 fc             	and    eax,0xfffffffc
c000aee2:	88 c2                	mov    dl,al
c000aee4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aee8:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000aeeb:	90                   	nop
c000aeec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aef0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aef4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000aef9:	0f 85 f5 fe ff ff    	jne    c000adf4 <tcp_fasttmr+0x14>
c000aeff:	90                   	nop
c000af00:	83 c4 1c             	add    esp,0x1c
c000af03:	c3                   	ret    

c000af04 <tcp_tmr>:
c000af04:	83 ec 0c             	sub    esp,0xc
c000af07:	e8 d4 fe ff ff       	call   c000ade0 <tcp_fasttmr>
c000af0c:	a0 a0 a8 03 c0       	mov    al,ds:0xc003a8a0
c000af11:	83 c0 01             	add    eax,0x1
c000af14:	a2 a0 a8 03 c0       	mov    ds:0xc003a8a0,al
c000af19:	a0 a0 a8 03 c0       	mov    al,ds:0xc003a8a0
c000af1e:	0f b6 c0             	movzx  eax,al
c000af21:	83 e0 01             	and    eax,0x1
c000af24:	74 06                	je     c000af2c <tcp_tmr+0x28>
c000af26:	e8 e9 f1 ff ff       	call   c000a114 <tcp_slowtmr>
c000af2b:	90                   	nop
c000af2c:	90                   	nop
c000af2d:	83 c4 0c             	add    esp,0xc
c000af30:	c3                   	ret    
c000af31:	8d 76 00             	lea    esi,[esi+0x0]

c000af34 <tcp_shutdown>:
c000af34:	83 ec 0c             	sub    esp,0xc
c000af37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af3b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000af3e:	83 f8 01             	cmp    eax,0x1
c000af41:	75 09                	jne    c000af4c <tcp_shutdown+0x18>
c000af43:	b0 f3                	mov    al,0xf3
c000af45:	e9 92 00 00 00       	jmp    c000afdc <tcp_shutdown+0xa8>
c000af4a:	66 90                	xchg   ax,ax
c000af4c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000af51:	74 49                	je     c000af9c <tcp_shutdown+0x68>
c000af53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af57:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000af5d:	85 c0                	test   eax,eax
c000af5f:	74 27                	je     c000af88 <tcp_shutdown+0x54>
c000af61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af65:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000af6b:	83 ec 0c             	sub    esp,0xc
c000af6e:	50                   	push   eax
c000af6f:	e8 e0 d2 ff ff       	call   c0008254 <pbuf_free>
c000af74:	83 c4 10             	add    esp,0x10
c000af77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af7b:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000af85:	8d 76 00             	lea    esi,[esi+0x0]
c000af88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af8c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000af8f:	83 c8 10             	or     eax,0x10
c000af92:	88 c2                	mov    dl,al
c000af94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af98:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000af9b:	90                   	nop
c000af9c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000afa1:	74 2d                	je     c000afd0 <tcp_shutdown+0x9c>
c000afa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afa7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000afaa:	83 f8 03             	cmp    eax,0x3
c000afad:	72 25                	jb     c000afd4 <tcp_shutdown+0xa0>
c000afaf:	83 f8 04             	cmp    eax,0x4
c000afb2:	76 08                	jbe    c000afbc <tcp_shutdown+0x88>
c000afb4:	83 f8 07             	cmp    eax,0x7
c000afb7:	75 1b                	jne    c000afd4 <tcp_shutdown+0xa0>
c000afb9:	8d 76 00             	lea    esi,[esi+0x0]
c000afbc:	83 ec 08             	sub    esp,0x8
c000afbf:	6a 00                	push   0x0
c000afc1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afc5:	e8 1e fa ff ff       	call   c000a9e8 <tcp_close_shutdown>
c000afca:	83 c4 10             	add    esp,0x10
c000afcd:	eb 0d                	jmp    c000afdc <tcp_shutdown+0xa8>
c000afcf:	90                   	nop
c000afd0:	90                   	nop
c000afd1:	eb 05                	jmp    c000afd8 <tcp_shutdown+0xa4>
c000afd3:	90                   	nop
c000afd4:	90                   	nop
c000afd5:	8d 76 00             	lea    esi,[esi+0x0]
c000afd8:	b0 00                	mov    al,0x0
c000afda:	66 90                	xchg   ax,ax
c000afdc:	83 c4 0c             	add    esp,0xc
c000afdf:	c3                   	ret    

c000afe0 <tcp_abandon>:
c000afe0:	83 ec 2c             	sub    esp,0x2c
c000afe3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000afe7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000afea:	83 f8 01             	cmp    eax,0x1
c000afed:	75 15                	jne    c000b004 <tcp_abandon+0x24>
c000afef:	83 ec 08             	sub    esp,0x8
c000aff2:	68 90 fd 02 c0       	push   0xc002fd90
c000aff7:	68 26 f6 02 c0       	push   0xc002f626
c000affc:	e8 93 49 01 00       	call   c001f994 <CPrintf>
c000b001:	83 c4 10             	add    esp,0x10
c000b004:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b008:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b00b:	83 f8 0a             	cmp    eax,0xa
c000b00e:	75 2c                	jne    c000b03c <tcp_abandon+0x5c>
c000b010:	83 ec 08             	sub    esp,0x8
c000b013:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b017:	68 84 68 03 c0       	push   0xc0036884
c000b01c:	e8 77 f8 ff ff       	call   c000a898 <tcp_pcb_remove>
c000b021:	83 c4 10             	add    esp,0x10
c000b024:	83 ec 08             	sub    esp,0x8
c000b027:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b02b:	6a 02                	push   0x2
c000b02d:	e8 66 c9 ff ff       	call   c0007998 <memp_free>
c000b032:	83 c4 10             	add    esp,0x10
c000b035:	e9 32 01 00 00       	jmp    c000b16c <tcp_abandon+0x18c>
c000b03a:	66 90                	xchg   ax,ax
c000b03c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b040:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000b043:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b047:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b04b:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b04e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b052:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b056:	8b 00                	mov    eax,DWORD PTR [eax]
c000b058:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b05c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b060:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b063:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b067:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b06b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b06e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000b073:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b077:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000b07b:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c000b080:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b084:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000b08a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b08e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b092:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000b095:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b099:	83 ec 08             	sub    esp,0x8
c000b09c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b0a0:	68 70 68 03 c0       	push   0xc0036870
c000b0a5:	e8 ee f7 ff ff       	call   c000a898 <tcp_pcb_remove>
c000b0aa:	83 c4 10             	add    esp,0x10
c000b0ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b0b1:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000b0b4:	85 c0                	test   eax,eax
c000b0b6:	74 14                	je     c000b0cc <tcp_abandon+0xec>
c000b0b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b0bc:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000b0bf:	83 ec 0c             	sub    esp,0xc
c000b0c2:	50                   	push   eax
c000b0c3:	e8 48 ee ff ff       	call   c0009f10 <tcp_segs_free>
c000b0c8:	83 c4 10             	add    esp,0x10
c000b0cb:	90                   	nop
c000b0cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b0d0:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000b0d3:	85 c0                	test   eax,eax
c000b0d5:	74 15                	je     c000b0ec <tcp_abandon+0x10c>
c000b0d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b0db:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000b0de:	83 ec 0c             	sub    esp,0xc
c000b0e1:	50                   	push   eax
c000b0e2:	e8 29 ee ff ff       	call   c0009f10 <tcp_segs_free>
c000b0e7:	83 c4 10             	add    esp,0x10
c000b0ea:	66 90                	xchg   ax,ax
c000b0ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b0f0:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000b0f6:	85 c0                	test   eax,eax
c000b0f8:	74 16                	je     c000b110 <tcp_abandon+0x130>
c000b0fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b0fe:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000b104:	83 ec 0c             	sub    esp,0xc
c000b107:	50                   	push   eax
c000b108:	e8 03 ee ff ff       	call   c0009f10 <tcp_segs_free>
c000b10d:	83 c4 10             	add    esp,0x10
c000b110:	83 ec 08             	sub    esp,0x8
c000b113:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b117:	6a 02                	push   0x2
c000b119:	e8 7a c8 ff ff       	call   c0007998 <memp_free>
c000b11e:	83 c4 10             	add    esp,0x10
c000b121:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000b126:	74 14                	je     c000b13c <tcp_abandon+0x15c>
c000b128:	83 ec 08             	sub    esp,0x8
c000b12b:	6a f6                	push   0xfffffff6
c000b12d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b131:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b135:	ff d0                	call   eax
c000b137:	83 c4 10             	add    esp,0x10
c000b13a:	66 90                	xchg   ax,ax
c000b13c:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000b141:	74 29                	je     c000b16c <tcp_abandon+0x18c>
c000b143:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c000b148:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c000b14d:	83 ec 08             	sub    esp,0x8
c000b150:	52                   	push   edx
c000b151:	50                   	push   eax
c000b152:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b156:	50                   	push   eax
c000b157:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b15b:	50                   	push   eax
c000b15c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b160:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b164:	e8 a7 50 00 00       	call   c0010210 <tcp_rst>
c000b169:	83 c4 20             	add    esp,0x20
c000b16c:	90                   	nop
c000b16d:	83 c4 2c             	add    esp,0x2c
c000b170:	c3                   	ret    
c000b171:	8d 76 00             	lea    esi,[esi+0x0]

c000b174 <tcp_abort>:
c000b174:	83 ec 0c             	sub    esp,0xc
c000b177:	83 ec 08             	sub    esp,0x8
c000b17a:	6a 01                	push   0x1
c000b17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b180:	e8 5b fe ff ff       	call   c000afe0 <tcp_abandon>
c000b185:	83 c4 10             	add    esp,0x10
c000b188:	90                   	nop
c000b189:	83 c4 0c             	add    esp,0xc
c000b18c:	c3                   	ret    
c000b18d:	8d 76 00             	lea    esi,[esi+0x0]

c000b190 <tcp_kill_prio>:
c000b190:	83 ec 2c             	sub    esp,0x2c
c000b193:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b197:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b19b:	c6 44 24 13 7f       	mov    BYTE PTR [esp+0x13],0x7f
c000b1a0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b1a8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b1b0:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000b1b5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b1b9:	eb 75                	jmp    c000b230 <tcp_kill_prio+0xa0>
c000b1bb:	90                   	nop
c000b1bc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b1c0:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b1c3:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c000b1c8:	0f b6 c0             	movzx  eax,al
c000b1cb:	39 c2                	cmp    edx,eax
c000b1cd:	72 55                	jb     c000b224 <tcp_kill_prio+0x94>
c000b1cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b1d3:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b1d6:	0f b6 54 24 13       	movzx  edx,BYTE PTR [esp+0x13]
c000b1db:	0f b6 c0             	movzx  eax,al
c000b1de:	39 c2                	cmp    edx,eax
c000b1e0:	72 42                	jb     c000b224 <tcp_kill_prio+0x94>
c000b1e2:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b1e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b1ec:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b1ef:	29 c2                	sub    edx,eax
c000b1f1:	89 d0                	mov    eax,edx
c000b1f3:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000b1f7:	77 2b                	ja     c000b224 <tcp_kill_prio+0x94>
c000b1f9:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b1ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b203:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b206:	29 c2                	sub    edx,eax
c000b208:	89 d0                	mov    eax,edx
c000b20a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b20e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b212:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b216:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b21a:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b21d:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b221:	8d 76 00             	lea    esi,[esi+0x0]
c000b224:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b228:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b22b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b22f:	90                   	nop
c000b230:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b235:	75 85                	jne    c000b1bc <tcp_kill_prio+0x2c>
c000b237:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b23c:	74 12                	je     c000b250 <tcp_kill_prio+0xc0>
c000b23e:	83 ec 0c             	sub    esp,0xc
c000b241:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b245:	e8 2a ff ff ff       	call   c000b174 <tcp_abort>
c000b24a:	83 c4 10             	add    esp,0x10
c000b24d:	8d 76 00             	lea    esi,[esi+0x0]
c000b250:	90                   	nop
c000b251:	83 c4 2c             	add    esp,0x2c
c000b254:	c3                   	ret    
c000b255:	8d 76 00             	lea    esi,[esi+0x0]

c000b258 <tcp_kill_timewait>:
c000b258:	83 ec 1c             	sub    esp,0x1c
c000b25b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000b263:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000b26b:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000b270:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b274:	eb 42                	jmp    c000b2b8 <tcp_kill_timewait+0x60>
c000b276:	66 90                	xchg   ax,ax
c000b278:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b27e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b282:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b285:	29 c2                	sub    edx,eax
c000b287:	89 d0                	mov    eax,edx
c000b289:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b28d:	77 1d                	ja     c000b2ac <tcp_kill_timewait+0x54>
c000b28f:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b295:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b299:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b29c:	29 c2                	sub    edx,eax
c000b29e:	89 d0                	mov    eax,edx
c000b2a0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b2a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b2a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b2ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b2b0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b2b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b2b7:	90                   	nop
c000b2b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000b2bd:	75 b9                	jne    c000b278 <tcp_kill_timewait+0x20>
c000b2bf:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000b2c4:	74 12                	je     c000b2d8 <tcp_kill_timewait+0x80>
c000b2c6:	83 ec 0c             	sub    esp,0xc
c000b2c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cd:	e8 a2 fe ff ff       	call   c000b174 <tcp_abort>
c000b2d2:	83 c4 10             	add    esp,0x10
c000b2d5:	8d 76 00             	lea    esi,[esi+0x0]
c000b2d8:	90                   	nop
c000b2d9:	83 c4 1c             	add    esp,0x1c
c000b2dc:	c3                   	ret    
c000b2dd:	8d 76 00             	lea    esi,[esi+0x0]

c000b2e0 <tcp_next_iss>:
c000b2e0:	8b 15 c4 36 03 c0    	mov    edx,DWORD PTR ds:0xc00336c4
c000b2e6:	a1 74 68 03 c0       	mov    eax,ds:0xc0036874
c000b2eb:	01 d0                	add    eax,edx
c000b2ed:	a3 c4 36 03 c0       	mov    ds:0xc00336c4,eax
c000b2f2:	a1 c4 36 03 c0       	mov    eax,ds:0xc00336c4
c000b2f7:	c3                   	ret    

c000b2f8 <tcp_alloc>:
c000b2f8:	83 ec 2c             	sub    esp,0x2c
c000b2fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b2ff:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b303:	83 ec 0c             	sub    esp,0xc
c000b306:	6a 02                	push   0x2
c000b308:	e8 5f c5 ff ff       	call   c000786c <memp_malloc>
c000b30d:	83 c4 10             	add    esp,0x10
c000b310:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b314:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b319:	75 6d                	jne    c000b388 <tcp_alloc+0x90>
c000b31b:	e8 38 ff ff ff       	call   c000b258 <tcp_kill_timewait>
c000b320:	83 ec 0c             	sub    esp,0xc
c000b323:	6a 02                	push   0x2
c000b325:	e8 42 c5 ff ff       	call   c000786c <memp_malloc>
c000b32a:	83 c4 10             	add    esp,0x10
c000b32d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b331:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b336:	75 38                	jne    c000b370 <tcp_alloc+0x78>
c000b338:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000b33d:	83 ec 0c             	sub    esp,0xc
c000b340:	50                   	push   eax
c000b341:	e8 4a fe ff ff       	call   c000b190 <tcp_kill_prio>
c000b346:	83 c4 10             	add    esp,0x10
c000b349:	83 ec 0c             	sub    esp,0xc
c000b34c:	6a 02                	push   0x2
c000b34e:	e8 19 c5 ff ff       	call   c000786c <memp_malloc>
c000b353:	83 c4 10             	add    esp,0x10
c000b356:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b35a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b35f:	74 0f                	je     c000b370 <tcp_alloc+0x78>
c000b361:	66 a1 ec 67 03 c0    	mov    ax,ds:0xc00367ec
c000b367:	83 e8 01             	sub    eax,0x1
c000b36a:	66 a3 ec 67 03 c0    	mov    ds:0xc00367ec,ax
c000b370:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b375:	74 11                	je     c000b388 <tcp_alloc+0x90>
c000b377:	66 a1 ec 67 03 c0    	mov    ax,ds:0xc00367ec
c000b37d:	83 e8 01             	sub    eax,0x1
c000b380:	66 a3 ec 67 03 c0    	mov    ds:0xc00367ec,ax
c000b386:	66 90                	xchg   ax,ax
c000b388:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b38d:	0f 84 09 01 00 00    	je     c000b49c <tcp_alloc+0x1a4>
c000b393:	83 ec 04             	sub    esp,0x4
c000b396:	68 a8 00 00 00       	push   0xa8
c000b39b:	6a 00                	push   0x0
c000b39d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b3a1:	e8 4a 51 ff ff       	call   c00004f0 <memset>
c000b3a6:	83 c4 10             	add    esp,0x10
c000b3a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b3ad:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000b3b1:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c000b3b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b3b8:	66 c7 40 72 00 01    	mov    WORD PTR [eax+0x72],0x100
c000b3be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b3c2:	66 c7 40 74 00 00    	mov    WORD PTR [eax+0x74],0x0
c000b3c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b3cc:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c000b3d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b3d6:	66 c7 40 2e 60 08    	mov    WORD PTR [eax+0x2e],0x860
c000b3dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b3e0:	c6 40 09 00          	mov    BYTE PTR [eax+0x9],0x0
c000b3e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b3e8:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c000b3ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b3f0:	66 c7 40 3c 18 02    	mov    WORD PTR [eax+0x3c],0x218
c000b3f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b3fa:	66 c7 40 4c 06 00    	mov    WORD PTR [eax+0x4c],0x6
c000b400:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b404:	66 c7 40 48 00 00    	mov    WORD PTR [eax+0x48],0x0
c000b40a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b40e:	66 c7 40 4a 06 00    	mov    WORD PTR [eax+0x4a],0x6
c000b414:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b418:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000b41e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b422:	66 c7 40 56 01 00    	mov    WORD PTR [eax+0x56],0x1
c000b428:	e8 b3 fe ff ff       	call   c000b2e0 <tcp_next_iss>
c000b42d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b431:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b435:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b439:	89 50 68             	mov    DWORD PTR [eax+0x68],edx
c000b43c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b440:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b444:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c000b447:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b44b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b44f:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000b452:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b456:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b45a:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000b45d:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b463:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b467:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000b46a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b46e:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000b472:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b476:	c7 80 8c 00 00 00 7c ad 00 c0 	mov    DWORD PTR [eax+0x8c],0xc000ad7c
c000b480:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b484:	c7 80 9c 00 00 00 00 dd 6d 00 	mov    DWORD PTR [eax+0x9c],0x6ddd00
c000b48e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b492:	c6 80 a5 00 00 00 00 	mov    BYTE PTR [eax+0xa5],0x0
c000b499:	8d 76 00             	lea    esi,[esi+0x0]
c000b49c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4a0:	83 c4 2c             	add    esp,0x2c
c000b4a3:	c3                   	ret    

c000b4a4 <tcp_new>:
c000b4a4:	83 ec 0c             	sub    esp,0xc
c000b4a7:	83 ec 0c             	sub    esp,0xc
c000b4aa:	6a 40                	push   0x40
c000b4ac:	e8 47 fe ff ff       	call   c000b2f8 <tcp_alloc>
c000b4b1:	83 c4 10             	add    esp,0x10
c000b4b4:	83 c4 0c             	add    esp,0xc
c000b4b7:	c3                   	ret    

c000b4b8 <tcp_eff_send_mss>:
c000b4b8:	53                   	push   ebx
c000b4b9:	83 ec 28             	sub    esp,0x28
c000b4bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b4c0:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b4c5:	83 ec 0c             	sub    esp,0xc
c000b4c8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b4cc:	e8 2b 80 00 00       	call   c00134fc <ip_route>
c000b4d1:	83 c4 10             	add    esp,0x10
c000b4d4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b4d8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b4dd:	74 3d                	je     c000b51c <tcp_eff_send_mss+0x64>
c000b4df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4e3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b4e6:	0f b7 c0             	movzx  eax,ax
c000b4e9:	85 c0                	test   eax,eax
c000b4eb:	74 2f                	je     c000b51c <tcp_eff_send_mss+0x64>
c000b4ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4f1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b4f4:	83 e8 28             	sub    eax,0x28
c000b4f7:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000b4fc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b500:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000b505:	0f b7 d8             	movzx  ebx,ax
c000b508:	0f b7 ca             	movzx  ecx,dx
c000b50b:	39 cb                	cmp    ebx,ecx
c000b50d:	76 05                	jbe    c000b514 <tcp_eff_send_mss+0x5c>
c000b50f:	89 d0                	mov    eax,edx
c000b511:	8d 76 00             	lea    esi,[esi+0x0]
c000b514:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b519:	8d 76 00             	lea    esi,[esi+0x0]
c000b51c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b520:	83 c4 28             	add    esp,0x28
c000b523:	5b                   	pop    ebx
c000b524:	c3                   	ret    
c000b525:	8d 76 00             	lea    esi,[esi+0x0]

c000b528 <tcp_connect>:
c000b528:	83 ec 2c             	sub    esp,0x2c
c000b52b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b52f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b534:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b538:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b53b:	85 c0                	test   eax,eax
c000b53d:	74 1d                	je     c000b55c <tcp_connect+0x34>
c000b53f:	83 ec 08             	sub    esp,0x8
c000b542:	68 c4 fd 02 c0       	push   0xc002fdc4
c000b547:	68 26 f6 02 c0       	push   0xc002f626
c000b54c:	e8 43 44 01 00       	call   c001f994 <CPrintf>
c000b551:	83 c4 10             	add    esp,0x10
c000b554:	b0 f7                	mov    al,0xf7
c000b556:	e9 39 02 00 00       	jmp    c000b794 <tcp_connect+0x26c>
c000b55b:	90                   	nop
c000b55c:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000b561:	74 25                	je     c000b588 <tcp_connect+0x60>
c000b563:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b567:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b56b:	8b 12                	mov    edx,DWORD PTR [edx]
c000b56d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b570:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b574:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b578:	66 89 42 22          	mov    WORD PTR [edx+0x22],ax
c000b57c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b580:	85 c0                	test   eax,eax
c000b582:	74 18                	je     c000b59c <tcp_connect+0x74>
c000b584:	eb 0a                	jmp    c000b590 <tcp_connect+0x68>
c000b586:	66 90                	xchg   ax,ax
c000b588:	b0 fa                	mov    al,0xfa
c000b58a:	e9 05 02 00 00       	jmp    c000b794 <tcp_connect+0x26c>
c000b58f:	90                   	nop
c000b590:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b594:	8b 00                	mov    eax,DWORD PTR [eax]
c000b596:	85 c0                	test   eax,eax
c000b598:	75 3a                	jne    c000b5d4 <tcp_connect+0xac>
c000b59a:	66 90                	xchg   ax,ax
c000b59c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5a0:	83 c0 04             	add    eax,0x4
c000b5a3:	83 ec 0c             	sub    esp,0xc
c000b5a6:	50                   	push   eax
c000b5a7:	e8 50 7f 00 00       	call   c00134fc <ip_route>
c000b5ac:	83 c4 10             	add    esp,0x10
c000b5af:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b5b3:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b5b8:	75 0a                	jne    c000b5c4 <tcp_connect+0x9c>
c000b5ba:	b0 fc                	mov    al,0xfc
c000b5bc:	e9 d3 01 00 00       	jmp    c000b794 <tcp_connect+0x26c>
c000b5c1:	8d 76 00             	lea    esi,[esi+0x0]
c000b5c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b5c8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b5cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5cf:	89 10                	mov    DWORD PTR [eax],edx
c000b5d1:	8d 76 00             	lea    esi,[esi+0x0]
c000b5d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5d8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b5db:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000b5e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5e4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b5e7:	0f b7 c0             	movzx  eax,ax
c000b5ea:	85 c0                	test   eax,eax
c000b5ec:	75 0e                	jne    c000b5fc <tcp_connect+0xd4>
c000b5ee:	e8 19 e7 ff ff       	call   c0009d0c <tcp_new_port>
c000b5f3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b5f7:	66 89 42 20          	mov    WORD PTR [edx+0x20],ax
c000b5fb:	90                   	nop
c000b5fc:	e8 df fc ff ff       	call   c000b2e0 <tcp_next_iss>
c000b601:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b605:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b609:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c000b610:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b614:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b618:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c000b61b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b61f:	8d 50 ff             	lea    edx,[eax-0x1]
c000b622:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b626:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000b629:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b62d:	8d 50 ff             	lea    edx,[eax-0x1]
c000b630:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b634:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000b637:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b63b:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c000b641:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b645:	66 c7 40 2e 60 08    	mov    WORD PTR [eax+0x2e],0x860
c000b64b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b64f:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000b652:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b656:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000b659:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b65d:	66 c7 40 60 60 08    	mov    WORD PTR [eax+0x60],0x860
c000b663:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b667:	66 c7 40 3c 18 02    	mov    WORD PTR [eax+0x3c],0x218
c000b66d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b671:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b674:	0f b7 c0             	movzx  eax,ax
c000b677:	83 ec 08             	sub    esp,0x8
c000b67a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b67e:	50                   	push   eax
c000b67f:	e8 34 fe ff ff       	call   c000b4b8 <tcp_eff_send_mss>
c000b684:	83 c4 10             	add    esp,0x10
c000b687:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b68b:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000b68f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b693:	66 c7 40 56 01 00    	mov    WORD PTR [eax+0x56],0x1
c000b699:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b69d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b6a0:	89 c2                	mov    edx,eax
c000b6a2:	c1 e2 02             	shl    edx,0x2
c000b6a5:	01 d0                	add    eax,edx
c000b6a7:	d1 e0                	shl    eax,1
c000b6a9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b6ad:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000b6b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6b5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000b6b9:	89 90 90 00 00 00    	mov    DWORD PTR [eax+0x90],edx
c000b6bf:	83 ec 08             	sub    esp,0x8
c000b6c2:	6a 02                	push   0x2
c000b6c4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b6c8:	e8 1b 40 00 00       	call   c000f6e8 <tcp_enqueue_flags>
c000b6cd:	83 c4 10             	add    esp,0x10
c000b6d0:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b6d4:	0f be 44 24 13       	movsx  eax,BYTE PTR [esp+0x13]
c000b6d9:	85 c0                	test   eax,eax
c000b6db:	0f 85 af 00 00 00    	jne    c000b790 <tcp_connect+0x268>
c000b6e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6e5:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000b6ec:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c000b6f1:	85 c0                	test   eax,eax
c000b6f3:	74 6f                	je     c000b764 <tcp_connect+0x23c>
c000b6f5:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000b6fa:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000b6fe:	75 10                	jne    c000b710 <tcp_connect+0x1e8>
c000b700:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000b705:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b708:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c000b70d:	eb 49                	jmp    c000b758 <tcp_connect+0x230>
c000b70f:	90                   	nop
c000b710:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000b715:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000b71a:	eb 30                	jmp    c000b74c <tcp_connect+0x224>
c000b71c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b721:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b724:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000b728:	75 12                	jne    c000b73c <tcp_connect+0x214>
c000b72a:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b72f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b733:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000b736:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b739:	eb 1d                	jmp    c000b758 <tcp_connect+0x230>
c000b73b:	90                   	nop
c000b73c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b741:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b744:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000b749:	8d 76 00             	lea    esi,[esi+0x0]
c000b74c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b751:	85 c0                	test   eax,eax
c000b753:	75 c7                	jne    c000b71c <tcp_connect+0x1f4>
c000b755:	8d 76 00             	lea    esi,[esi+0x0]
c000b758:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b75c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000b763:	90                   	nop
c000b764:	8b 15 70 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036870
c000b76a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b76e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b771:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b775:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000b77a:	e8 95 52 00 00       	call   c0010a14 <tcp_timer_needed>
c000b77f:	83 ec 0c             	sub    esp,0xc
c000b782:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b786:	e8 f9 45 00 00       	call   c000fd84 <tcp_output>
c000b78b:	83 c4 10             	add    esp,0x10
c000b78e:	66 90                	xchg   ax,ax
c000b790:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c000b794:	83 c4 2c             	add    esp,0x2c
c000b797:	c3                   	ret    

c000b798 <tcp_debug_state_str>:
c000b798:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b79c:	8b 04 85 40 ff 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd00c0]
c000b7a3:	c3                   	ret    

c000b7a4 <tcp_timewait_input>:
c000b7a4:	53                   	push   ebx
c000b7a5:	83 ec 08             	sub    esp,0x8
c000b7a8:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000b7ad:	0f b6 c0             	movzx  eax,al
c000b7b0:	83 e0 04             	and    eax,0x4
c000b7b3:	74 07                	je     c000b7bc <tcp_timewait_input+0x18>
c000b7b5:	b0 00                	mov    al,0x0
c000b7b7:	e9 e8 00 00 00       	jmp    c000b8a4 <tcp_timewait_input+0x100>
c000b7bc:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000b7c1:	0f b6 c0             	movzx  eax,al
c000b7c4:	83 e0 02             	and    eax,0x2
c000b7c7:	0f 84 83 00 00 00    	je     c000b850 <tcp_timewait_input+0xac>
c000b7cd:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000b7d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7d7:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b7da:	29 c2                	sub    edx,eax
c000b7dc:	89 d0                	mov    eax,edx
c000b7de:	0f 88 88 00 00 00    	js     c000b86c <tcp_timewait_input+0xc8>
c000b7e4:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000b7ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7ee:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000b7f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7f5:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000b7f8:	0f b7 c0             	movzx  eax,ax
c000b7fb:	01 c8                	add    eax,ecx
c000b7fd:	29 c2                	sub    edx,eax
c000b7ff:	89 d0                	mov    eax,edx
c000b801:	85 c0                	test   eax,eax
c000b803:	7f 67                	jg     c000b86c <tcp_timewait_input+0xc8>
c000b805:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000b80a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000b80d:	0f b7 c8             	movzx  ecx,ax
c000b810:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000b815:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000b819:	0f b7 d0             	movzx  edx,ax
c000b81c:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000b822:	0f b7 d8             	movzx  ebx,ax
c000b825:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000b82a:	01 c3                	add    ebx,eax
c000b82c:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000b831:	83 ec 08             	sub    esp,0x8
c000b834:	51                   	push   ecx
c000b835:	52                   	push   edx
c000b836:	68 90 68 03 c0       	push   0xc0036890
c000b83b:	68 98 68 03 c0       	push   0xc0036898
c000b840:	53                   	push   ebx
c000b841:	50                   	push   eax
c000b842:	e8 c9 49 00 00       	call   c0010210 <tcp_rst>
c000b847:	83 c4 20             	add    esp,0x20
c000b84a:	b0 00                	mov    al,0x0
c000b84c:	eb 56                	jmp    c000b8a4 <tcp_timewait_input+0x100>
c000b84e:	66 90                	xchg   ax,ax
c000b850:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000b855:	0f b6 c0             	movzx  eax,al
c000b858:	83 e0 01             	and    eax,0x1
c000b85b:	74 0f                	je     c000b86c <tcp_timewait_input+0xc8>
c000b85d:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b863:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b867:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000b86a:	66 90                	xchg   ax,ax
c000b86c:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000b872:	0f b7 c0             	movzx  eax,ax
c000b875:	85 c0                	test   eax,eax
c000b877:	74 27                	je     c000b8a0 <tcp_timewait_input+0xfc>
c000b879:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b87d:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b880:	83 c8 02             	or     eax,0x2
c000b883:	88 c2                	mov    dl,al
c000b885:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b889:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b88c:	83 ec 0c             	sub    esp,0xc
c000b88f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b893:	e8 ec 44 00 00       	call   c000fd84 <tcp_output>
c000b898:	83 c4 10             	add    esp,0x10
c000b89b:	eb 07                	jmp    c000b8a4 <tcp_timewait_input+0x100>
c000b89d:	8d 76 00             	lea    esi,[esi+0x0]
c000b8a0:	b0 00                	mov    al,0x0
c000b8a2:	66 90                	xchg   ax,ax
c000b8a4:	83 c4 08             	add    esp,0x8
c000b8a7:	5b                   	pop    ebx
c000b8a8:	c3                   	ret    
c000b8a9:	8d 76 00             	lea    esi,[esi+0x0]

c000b8ac <tcp_oos_insert_segment>:
c000b8ac:	53                   	push   ebx
c000b8ad:	83 ec 18             	sub    esp,0x18
c000b8b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b8b4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b8b7:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000b8bb:	0f b7 c0             	movzx  eax,ax
c000b8be:	83 ec 0c             	sub    esp,0xc
c000b8c1:	50                   	push   eax
c000b8c2:	e8 21 53 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000b8c7:	83 c4 10             	add    esp,0x10
c000b8ca:	0f b7 c0             	movzx  eax,ax
c000b8cd:	83 e0 01             	and    eax,0x1
c000b8d0:	0f 84 8e 00 00 00    	je     c000b964 <tcp_oos_insert_segment+0xb8>
c000b8d6:	83 ec 0c             	sub    esp,0xc
c000b8d9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b8dd:	e8 2e e6 ff ff       	call   c0009f10 <tcp_segs_free>
c000b8e2:	83 c4 10             	add    esp,0x10
c000b8e5:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000b8ed:	e9 16 01 00 00       	jmp    c000ba08 <tcp_oos_insert_segment+0x15c>
c000b8f2:	66 90                	xchg   ax,ax
c000b8f4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b8f8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b8fb:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000b8ff:	0f b7 c0             	movzx  eax,ax
c000b902:	83 ec 0c             	sub    esp,0xc
c000b905:	50                   	push   eax
c000b906:	e8 dd 52 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000b90b:	83 c4 10             	add    esp,0x10
c000b90e:	0f b7 c0             	movzx  eax,ax
c000b911:	83 e0 01             	and    eax,0x1
c000b914:	74 2a                	je     c000b940 <tcp_oos_insert_segment+0x94>
c000b916:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b91a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b91d:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000b921:	83 ec 0c             	sub    esp,0xc
c000b924:	6a 01                	push   0x1
c000b926:	e8 bd 52 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000b92b:	83 c4 10             	add    esp,0x10
c000b92e:	89 c1                	mov    ecx,eax
c000b930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b934:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000b937:	89 d8                	mov    eax,ebx
c000b939:	09 c8                	or     eax,ecx
c000b93b:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000b93f:	90                   	nop
c000b940:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b944:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b948:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b94c:	8b 00                	mov    eax,DWORD PTR [eax]
c000b94e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b952:	83 ec 0c             	sub    esp,0xc
c000b955:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b959:	e8 6e e5 ff ff       	call   c0009ecc <tcp_seg_free>
c000b95e:	83 c4 10             	add    esp,0x10
c000b961:	8d 76 00             	lea    esi,[esi+0x0]
c000b964:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b969:	74 35                	je     c000b9a0 <tcp_oos_insert_segment+0xf4>
c000b96b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b96f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b972:	0f b7 d0             	movzx  edx,ax
c000b975:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000b97a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b97d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b981:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b984:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b987:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b98b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b98e:	0f b7 c0             	movzx  eax,ax
c000b991:	01 d0                	add    eax,edx
c000b993:	29 c1                	sub    ecx,eax
c000b995:	89 c8                	mov    eax,ecx
c000b997:	0f 89 57 ff ff ff    	jns    c000b8f4 <tcp_oos_insert_segment+0x48>
c000b99d:	8d 76 00             	lea    esi,[esi+0x0]
c000b9a0:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b9a5:	74 61                	je     c000ba08 <tcp_oos_insert_segment+0x15c>
c000b9a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b9ab:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b9ae:	0f b7 d0             	movzx  edx,ax
c000b9b1:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000b9b6:	01 c2                	add    edx,eax
c000b9b8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b9bc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b9bf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b9c2:	29 c2                	sub    edx,eax
c000b9c4:	89 d0                	mov    eax,edx
c000b9c6:	85 c0                	test   eax,eax
c000b9c8:	7e 3e                	jle    c000ba08 <tcp_oos_insert_segment+0x15c>
c000b9ca:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b9ce:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b9d1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b9d4:	89 c2                	mov    edx,eax
c000b9d6:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000b9db:	89 d3                	mov    ebx,edx
c000b9dd:	29 c3                	sub    ebx,eax
c000b9df:	89 d8                	mov    eax,ebx
c000b9e1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b9e5:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000b9e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b9ed:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b9f0:	0f b7 d0             	movzx  edx,ax
c000b9f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b9f7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b9fa:	83 ec 08             	sub    esp,0x8
c000b9fd:	52                   	push   edx
c000b9fe:	50                   	push   eax
c000b9ff:	e8 20 ce ff ff       	call   c0008824 <pbuf_realloc>
c000ba04:	83 c4 10             	add    esp,0x10
c000ba07:	90                   	nop
c000ba08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba0c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ba10:	89 10                	mov    DWORD PTR [eax],edx
c000ba12:	90                   	nop
c000ba13:	83 c4 18             	add    esp,0x18
c000ba16:	5b                   	pop    ebx
c000ba17:	c3                   	ret    

c000ba18 <tcp_receive>:
c000ba18:	57                   	push   edi
c000ba19:	56                   	push   esi
c000ba1a:	53                   	push   ebx
c000ba1b:	83 ec 30             	sub    esp,0x30
c000ba1e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ba26:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000ba2b:	0f b6 c0             	movzx  eax,al
c000ba2e:	83 e0 10             	and    eax,0x10
c000ba31:	0f 84 e5 07 00 00    	je     c000c21c <tcp_receive+0x804>
c000ba37:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ba3b:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000ba3e:	0f b7 d0             	movzx  edx,ax
c000ba41:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ba45:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000ba48:	01 d0                	add    eax,edx
c000ba4a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ba4e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ba52:	8b 50 64             	mov    edx,DWORD PTR [eax+0x64]
c000ba55:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ba5a:	29 c2                	sub    edx,eax
c000ba5c:	89 d0                	mov    eax,edx
c000ba5e:	78 50                	js     c000bab0 <tcp_receive+0x98>
c000ba60:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ba64:	8b 50 64             	mov    edx,DWORD PTR [eax+0x64]
c000ba67:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ba6c:	39 c2                	cmp    edx,eax
c000ba6e:	75 14                	jne    c000ba84 <tcp_receive+0x6c>
c000ba70:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ba74:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000ba77:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000ba7c:	29 c2                	sub    edx,eax
c000ba7e:	89 d0                	mov    eax,edx
c000ba80:	78 2e                	js     c000bab0 <tcp_receive+0x98>
c000ba82:	66 90                	xchg   ax,ax
c000ba84:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ba88:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000ba8b:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000ba90:	39 c2                	cmp    edx,eax
c000ba92:	75 74                	jne    c000bb08 <tcp_receive+0xf0>
c000ba94:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000ba99:	66 8b 50 0e          	mov    dx,WORD PTR [eax+0xe]
c000ba9d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000baa1:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000baa4:	0f b7 d2             	movzx  edx,dx
c000baa7:	0f b7 c0             	movzx  eax,ax
c000baaa:	39 c2                	cmp    edx,eax
c000baac:	76 5a                	jbe    c000bb08 <tcp_receive+0xf0>
c000baae:	66 90                	xchg   ax,ax
c000bab0:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000bab5:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000bab9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000babd:	66 89 42 60          	mov    WORD PTR [edx+0x60],ax
c000bac1:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000bac7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bacb:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000bace:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bad4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bad8:	89 50 68             	mov    DWORD PTR [eax+0x68],edx
c000badb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000badf:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bae2:	0f b7 c0             	movzx  eax,ax
c000bae5:	85 c0                	test   eax,eax
c000bae7:	74 1f                	je     c000bb08 <tcp_receive+0xf0>
c000bae9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000baed:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000baf3:	0f b6 c0             	movzx  eax,al
c000baf6:	85 c0                	test   eax,eax
c000baf8:	74 0e                	je     c000bb08 <tcp_receive+0xf0>
c000bafa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bafe:	c6 80 a4 00 00 00 00 	mov    BYTE PTR [eax+0xa4],0x0
c000bb05:	8d 76 00             	lea    esi,[esi+0x0]
c000bb08:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bb0e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb12:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bb15:	29 c2                	sub    edx,eax
c000bb17:	89 d0                	mov    eax,edx
c000bb19:	85 c0                	test   eax,eax
c000bb1b:	0f 8f ff 00 00 00    	jg     c000bc20 <tcp_receive+0x208>
c000bb21:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb25:	66 c7 40 70 00 00    	mov    WORD PTR [eax+0x70],0x0
c000bb2b:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000bb31:	0f b7 c0             	movzx  eax,ax
c000bb34:	85 c0                	test   eax,eax
c000bb36:	0f 85 cc 00 00 00    	jne    c000bc08 <tcp_receive+0x1f0>
c000bb3c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb40:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bb43:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb47:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bb4a:	0f b7 c0             	movzx  eax,ax
c000bb4d:	01 d0                	add    eax,edx
c000bb4f:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000bb53:	0f 85 af 00 00 00    	jne    c000bc08 <tcp_receive+0x1f0>
c000bb59:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb5d:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000bb61:	98                   	cwde   
c000bb62:	85 c0                	test   eax,eax
c000bb64:	0f 88 9e 00 00 00    	js     c000bc08 <tcp_receive+0x1f0>
c000bb6a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb6e:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000bb71:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bb76:	39 c2                	cmp    edx,eax
c000bb78:	0f 85 8a 00 00 00    	jne    c000bc08 <tcp_receive+0x1f0>
c000bb7e:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c000bb86:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb8a:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000bb8d:	83 c0 01             	add    eax,0x1
c000bb90:	88 c2                	mov    dl,al
c000bb92:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb96:	88 50 54             	mov    BYTE PTR [eax+0x54],dl
c000bb99:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb9d:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000bba0:	0f b6 c0             	movzx  eax,al
c000bba3:	83 f8 03             	cmp    eax,0x3
c000bba6:	76 40                	jbe    c000bbe8 <tcp_receive+0x1d0>
c000bba8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbac:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bbb0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbb4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bbb7:	01 d0                	add    eax,edx
c000bbb9:	89 c2                	mov    edx,eax
c000bbbb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbbf:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000bbc3:	0f b7 d2             	movzx  edx,dx
c000bbc6:	0f b7 c0             	movzx  eax,ax
c000bbc9:	39 c2                	cmp    edx,eax
c000bbcb:	76 3b                	jbe    c000bc08 <tcp_receive+0x1f0>
c000bbcd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbd1:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bbd5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbd9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bbdc:	01 d0                	add    eax,edx
c000bbde:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bbe2:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000bbe6:	eb 20                	jmp    c000bc08 <tcp_receive+0x1f0>
c000bbe8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbec:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000bbef:	0f b6 c0             	movzx  eax,al
c000bbf2:	83 f8 03             	cmp    eax,0x3
c000bbf5:	75 11                	jne    c000bc08 <tcp_receive+0x1f0>
c000bbf7:	83 ec 0c             	sub    esp,0xc
c000bbfa:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bbfe:	e8 d9 48 00 00       	call   c00104dc <tcp_rexmit_fast>
c000bc03:	83 c4 10             	add    esp,0x10
c000bc06:	66 90                	xchg   ax,ax
c000bc08:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000bc0d:	0f 85 99 04 00 00    	jne    c000c0ac <tcp_receive+0x694>
c000bc13:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc17:	c6 40 54 00          	mov    BYTE PTR [eax+0x54],0x0
c000bc1b:	e9 8c 04 00 00       	jmp    c000c0ac <tcp_receive+0x694>
c000bc20:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bc26:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc2a:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bc2d:	29 c2                	sub    edx,eax
c000bc2f:	89 d0                	mov    eax,edx
c000bc31:	83 e8 01             	sub    eax,0x1
c000bc34:	0f 88 4a 03 00 00    	js     c000bf84 <tcp_receive+0x56c>
c000bc3a:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bc40:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc44:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000bc47:	29 c2                	sub    edx,eax
c000bc49:	89 d0                	mov    eax,edx
c000bc4b:	85 c0                	test   eax,eax
c000bc4d:	0f 8f 31 03 00 00    	jg     c000bf84 <tcp_receive+0x56c>
c000bc53:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc57:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000bc5a:	0f b6 c0             	movzx  eax,al
c000bc5d:	83 e0 04             	and    eax,0x4
c000bc60:	74 22                	je     c000bc84 <tcp_receive+0x26c>
c000bc62:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc66:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000bc69:	83 e0 fb             	and    eax,0xfffffffb
c000bc6c:	88 c2                	mov    dl,al
c000bc6e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc72:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000bc75:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc79:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c000bc7c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bc80:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000bc84:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc88:	c6 40 4e 00          	mov    BYTE PTR [eax+0x4e],0x0
c000bc8c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc90:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000bc93:	98                   	cwde   
c000bc94:	c1 f8 03             	sar    eax,0x3
c000bc97:	89 c2                	mov    edx,eax
c000bc99:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc9d:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000bca1:	01 d0                	add    eax,edx
c000bca3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bca7:	66 89 42 4c          	mov    WORD PTR [edx+0x4c],ax
c000bcab:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bcb0:	89 c2                	mov    edx,eax
c000bcb2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcb6:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bcb9:	89 d7                	mov    edi,edx
c000bcbb:	29 c7                	sub    edi,eax
c000bcbd:	89 f8                	mov    eax,edi
c000bcbf:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bcc3:	66 89 42 70          	mov    WORD PTR [edx+0x70],ax
c000bcc7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bccb:	66 8b 50 72          	mov    dx,WORD PTR [eax+0x72]
c000bccf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcd3:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000bcd6:	01 d0                	add    eax,edx
c000bcd8:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bcdc:	66 89 42 72          	mov    WORD PTR [edx+0x72],ax
c000bce0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bce4:	c6 40 54 00          	mov    BYTE PTR [eax+0x54],0x0
c000bce8:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bcee:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcf2:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000bcf5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcf9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000bcfc:	83 f8 03             	cmp    eax,0x3
c000bcff:	0f 86 db 01 00 00    	jbe    c000bee0 <tcp_receive+0x4c8>
c000bd05:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd09:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bd0d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd11:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c000bd14:	0f b7 d2             	movzx  edx,dx
c000bd17:	0f b7 c0             	movzx  eax,ax
c000bd1a:	39 c2                	cmp    edx,eax
c000bd1c:	73 4a                	jae    c000bd68 <tcp_receive+0x350>
c000bd1e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd22:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bd26:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd2a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bd2d:	01 d0                	add    eax,edx
c000bd2f:	89 c2                	mov    edx,eax
c000bd31:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd35:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000bd39:	0f b7 d2             	movzx  edx,dx
c000bd3c:	0f b7 c0             	movzx  eax,ax
c000bd3f:	39 c2                	cmp    edx,eax
c000bd41:	0f 86 99 01 00 00    	jbe    c000bee0 <tcp_receive+0x4c8>
c000bd47:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd4b:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bd4f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd53:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bd56:	01 d0                	add    eax,edx
c000bd58:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bd5c:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000bd60:	e9 7b 01 00 00       	jmp    c000bee0 <tcp_receive+0x4c8>
c000bd65:	8d 76 00             	lea    esi,[esi+0x0]
c000bd68:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd6c:	66 8b 48 56          	mov    cx,WORD PTR [eax+0x56]
c000bd70:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd74:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bd77:	0f b7 d0             	movzx  edx,ax
c000bd7a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd7e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bd81:	0f b7 c0             	movzx  eax,ax
c000bd84:	0f af d0             	imul   edx,eax
c000bd87:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd8b:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000bd8f:	0f b7 d8             	movzx  ebx,ax
c000bd92:	89 d0                	mov    eax,edx
c000bd94:	89 c2                	mov    edx,eax
c000bd96:	c1 fa 1f             	sar    edx,0x1f
c000bd99:	f7 fb                	idiv   ebx
c000bd9b:	01 c8                	add    eax,ecx
c000bd9d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000bda2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bda6:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000bdaa:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c000bdaf:	0f b7 c0             	movzx  eax,ax
c000bdb2:	39 c2                	cmp    edx,eax
c000bdb4:	0f 86 26 01 00 00    	jbe    c000bee0 <tcp_receive+0x4c8>
c000bdba:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bdbe:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000bdc3:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000bdc7:	e9 14 01 00 00       	jmp    c000bee0 <tcp_receive+0x4c8>
c000bdcc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdd0:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bdd3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bdd7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bddb:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bdde:	8b 10                	mov    edx,DWORD PTR [eax]
c000bde0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bde4:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000bde7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdeb:	8b 58 74             	mov    ebx,DWORD PTR [eax+0x74]
c000bdee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bdf2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bdf5:	83 ec 0c             	sub    esp,0xc
c000bdf8:	50                   	push   eax
c000bdf9:	e8 2a cc ff ff       	call   c0008a28 <pbuf_clen>
c000bdfe:	83 c4 10             	add    esp,0x10
c000be01:	0f b6 c0             	movzx  eax,al
c000be04:	0f b7 d3             	movzx  edx,bx
c000be07:	0f b7 c0             	movzx  eax,ax
c000be0a:	39 c2                	cmp    edx,eax
c000be0c:	73 16                	jae    c000be24 <tcp_receive+0x40c>
c000be0e:	83 ec 08             	sub    esp,0x8
c000be11:	68 6c ff 02 c0       	push   0xc002ff6c
c000be16:	68 26 f6 02 c0       	push   0xc002f626
c000be1b:	e8 74 3b 01 00       	call   c001f994 <CPrintf>
c000be20:	83 c4 10             	add    esp,0x10
c000be23:	90                   	nop
c000be24:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be28:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000be2b:	0f b7 c0             	movzx  eax,ax
c000be2e:	85 c0                	test   eax,eax
c000be30:	74 36                	je     c000be68 <tcp_receive+0x450>
c000be32:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000be36:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000be39:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000be3d:	0f b7 c0             	movzx  eax,ax
c000be40:	83 ec 0c             	sub    esp,0xc
c000be43:	50                   	push   eax
c000be44:	e8 9f 4d ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000be49:	83 c4 10             	add    esp,0x10
c000be4c:	0f b7 c0             	movzx  eax,ax
c000be4f:	83 e0 01             	and    eax,0x1
c000be52:	74 14                	je     c000be68 <tcp_receive+0x450>
c000be54:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be58:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000be5b:	83 e8 01             	sub    eax,0x1
c000be5e:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000be62:	66 89 42 70          	mov    WORD PTR [edx+0x70],ax
c000be66:	66 90                	xchg   ax,ax
c000be68:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000be6c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000be6f:	83 ec 0c             	sub    esp,0xc
c000be72:	50                   	push   eax
c000be73:	e8 b0 cb ff ff       	call   c0008a28 <pbuf_clen>
c000be78:	83 c4 10             	add    esp,0x10
c000be7b:	88 c1                	mov    cl,al
c000be7d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be81:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000be84:	0f b6 c1             	movzx  eax,cl
c000be87:	89 d7                	mov    edi,edx
c000be89:	29 c7                	sub    edi,eax
c000be8b:	89 f8                	mov    eax,edi
c000be8d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000be91:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000be95:	83 ec 0c             	sub    esp,0xc
c000be98:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000be9c:	e8 2b e0 ff ff       	call   c0009ecc <tcp_seg_free>
c000bea1:	83 c4 10             	add    esp,0x10
c000bea4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bea8:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000beab:	0f b7 c0             	movzx  eax,ax
c000beae:	85 c0                	test   eax,eax
c000beb0:	74 2e                	je     c000bee0 <tcp_receive+0x4c8>
c000beb2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000beb6:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000beb9:	85 c0                	test   eax,eax
c000bebb:	75 23                	jne    c000bee0 <tcp_receive+0x4c8>
c000bebd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bec1:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000bec4:	85 c0                	test   eax,eax
c000bec6:	75 18                	jne    c000bee0 <tcp_receive+0x4c8>
c000bec8:	83 ec 08             	sub    esp,0x8
c000becb:	68 94 ff 02 c0       	push   0xc002ff94
c000bed0:	68 26 f6 02 c0       	push   0xc002f626
c000bed5:	e8 ba 3a 01 00       	call   c001f994 <CPrintf>
c000beda:	83 c4 10             	add    esp,0x10
c000bedd:	8d 76 00             	lea    esi,[esi+0x0]
c000bee0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bee4:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bee7:	85 c0                	test   eax,eax
c000bee9:	74 69                	je     c000bf54 <tcp_receive+0x53c>
c000beeb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000beef:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bef2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bef5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bef8:	83 ec 0c             	sub    esp,0xc
c000befb:	50                   	push   eax
c000befc:	e8 0b 4d ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 c3                	mov    ebx,eax
c000bf06:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf0a:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bf0d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bf10:	0f b7 f0             	movzx  esi,ax
c000bf13:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf17:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bf1a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bf1d:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000bf21:	0f b7 c0             	movzx  eax,ax
c000bf24:	83 ec 0c             	sub    esp,0xc
c000bf27:	50                   	push   eax
c000bf28:	e8 bb 4c ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000bf2d:	83 c4 10             	add    esp,0x10
c000bf30:	0f b7 c0             	movzx  eax,ax
c000bf33:	83 e0 03             	and    eax,0x3
c000bf36:	0f 95 c0             	setne  al
c000bf39:	0f b6 c0             	movzx  eax,al
c000bf3c:	01 f0                	add    eax,esi
c000bf3e:	8d 14 03             	lea    edx,[ebx+eax*1]
c000bf41:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bf46:	29 c2                	sub    edx,eax
c000bf48:	89 d0                	mov    eax,edx
c000bf4a:	85 c0                	test   eax,eax
c000bf4c:	0f 8e 7a fe ff ff    	jle    c000bdcc <tcp_receive+0x3b4>
c000bf52:	66 90                	xchg   ax,ax
c000bf54:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf58:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bf5b:	85 c0                	test   eax,eax
c000bf5d:	75 0d                	jne    c000bf6c <tcp_receive+0x554>
c000bf5f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf63:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000bf69:	eb 0d                	jmp    c000bf78 <tcp_receive+0x560>
c000bf6b:	90                   	nop
c000bf6c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf70:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000bf76:	66 90                	xchg   ax,ax
c000bf78:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf7c:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000bf80:	eb 0e                	jmp    c000bf90 <tcp_receive+0x578>
c000bf82:	66 90                	xchg   ax,ax
c000bf84:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf88:	66 c7 40 70 00 00    	mov    WORD PTR [eax+0x70],0x0
c000bf8e:	66 90                	xchg   ax,ax
c000bf90:	e9 17 01 00 00       	jmp    c000c0ac <tcp_receive+0x694>
c000bf95:	8d 76 00             	lea    esi,[esi+0x0]
c000bf98:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf9c:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000bf9f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bfa3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfa7:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000bfaa:	8b 10                	mov    edx,DWORD PTR [eax]
c000bfac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfb0:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000bfb3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfb7:	8b 58 74             	mov    ebx,DWORD PTR [eax+0x74]
c000bfba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bfbe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bfc1:	83 ec 0c             	sub    esp,0xc
c000bfc4:	50                   	push   eax
c000bfc5:	e8 5e ca ff ff       	call   c0008a28 <pbuf_clen>
c000bfca:	83 c4 10             	add    esp,0x10
c000bfcd:	0f b6 c0             	movzx  eax,al
c000bfd0:	0f b7 d3             	movzx  edx,bx
c000bfd3:	0f b7 c0             	movzx  eax,ax
c000bfd6:	39 c2                	cmp    edx,eax
c000bfd8:	73 16                	jae    c000bff0 <tcp_receive+0x5d8>
c000bfda:	83 ec 08             	sub    esp,0x8
c000bfdd:	68 6c ff 02 c0       	push   0xc002ff6c
c000bfe2:	68 26 f6 02 c0       	push   0xc002f626
c000bfe7:	e8 a8 39 01 00       	call   c001f994 <CPrintf>
c000bfec:	83 c4 10             	add    esp,0x10
c000bfef:	90                   	nop
c000bff0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bff4:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000bff7:	0f b7 c0             	movzx  eax,ax
c000bffa:	85 c0                	test   eax,eax
c000bffc:	74 36                	je     c000c034 <tcp_receive+0x61c>
c000bffe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c002:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c005:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c009:	0f b7 c0             	movzx  eax,ax
c000c00c:	83 ec 0c             	sub    esp,0xc
c000c00f:	50                   	push   eax
c000c010:	e8 d3 4b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c015:	83 c4 10             	add    esp,0x10
c000c018:	0f b7 c0             	movzx  eax,ax
c000c01b:	83 e0 01             	and    eax,0x1
c000c01e:	74 14                	je     c000c034 <tcp_receive+0x61c>
c000c020:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c024:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c027:	83 e8 01             	sub    eax,0x1
c000c02a:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c02e:	66 89 42 70          	mov    WORD PTR [edx+0x70],ax
c000c032:	66 90                	xchg   ax,ax
c000c034:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c038:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c03b:	83 ec 0c             	sub    esp,0xc
c000c03e:	50                   	push   eax
c000c03f:	e8 e4 c9 ff ff       	call   c0008a28 <pbuf_clen>
c000c044:	83 c4 10             	add    esp,0x10
c000c047:	88 c1                	mov    cl,al
c000c049:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c04d:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000c050:	0f b6 c1             	movzx  eax,cl
c000c053:	89 d6                	mov    esi,edx
c000c055:	29 c6                	sub    esi,eax
c000c057:	89 f0                	mov    eax,esi
c000c059:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c05d:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000c061:	83 ec 0c             	sub    esp,0xc
c000c064:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c068:	e8 5f de ff ff       	call   c0009ecc <tcp_seg_free>
c000c06d:	83 c4 10             	add    esp,0x10
c000c070:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c074:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000c077:	0f b7 c0             	movzx  eax,ax
c000c07a:	85 c0                	test   eax,eax
c000c07c:	74 2e                	je     c000c0ac <tcp_receive+0x694>
c000c07e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c082:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c085:	85 c0                	test   eax,eax
c000c087:	75 23                	jne    c000c0ac <tcp_receive+0x694>
c000c089:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c08d:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c090:	85 c0                	test   eax,eax
c000c092:	75 18                	jne    c000c0ac <tcp_receive+0x694>
c000c094:	83 ec 08             	sub    esp,0x8
c000c097:	68 94 ff 02 c0       	push   0xc002ff94
c000c09c:	68 26 f6 02 c0       	push   0xc002f626
c000c0a1:	e8 ee 38 01 00       	call   c001f994 <CPrintf>
c000c0a6:	83 c4 10             	add    esp,0x10
c000c0a9:	8d 76 00             	lea    esi,[esi+0x0]
c000c0ac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0b0:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c0b3:	85 c0                	test   eax,eax
c000c0b5:	74 7d                	je     c000c134 <tcp_receive+0x71c>
c000c0b7:	8b 1d b0 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8b0
c000c0bd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0c1:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c0c4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c0c7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c0ca:	83 ec 0c             	sub    esp,0xc
c000c0cd:	50                   	push   eax
c000c0ce:	e8 39 4b ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 c6                	mov    esi,eax
c000c0d8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0dc:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c0df:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c0e2:	0f b7 f8             	movzx  edi,ax
c000c0e5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0e9:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c0ec:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c0ef:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c0f3:	0f b7 c0             	movzx  eax,ax
c000c0f6:	83 ec 0c             	sub    esp,0xc
c000c0f9:	50                   	push   eax
c000c0fa:	e8 e9 4a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c0ff:	83 c4 10             	add    esp,0x10
c000c102:	0f b7 c0             	movzx  eax,ax
c000c105:	83 e0 03             	and    eax,0x3
c000c108:	0f 95 c0             	setne  al
c000c10b:	0f b6 c0             	movzx  eax,al
c000c10e:	01 f8                	add    eax,edi
c000c110:	01 f0                	add    eax,esi
c000c112:	29 c3                	sub    ebx,eax
c000c114:	89 d8                	mov    eax,ebx
c000c116:	78 1c                	js     c000c134 <tcp_receive+0x71c>
c000c118:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000c11e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c122:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000c125:	29 c2                	sub    edx,eax
c000c127:	89 d0                	mov    eax,edx
c000c129:	85 c0                	test   eax,eax
c000c12b:	0f 8e 67 fe ff ff    	jle    c000bf98 <tcp_receive+0x580>
c000c131:	8d 76 00             	lea    esi,[esi+0x0]
c000c134:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c138:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000c13b:	85 c0                	test   eax,eax
c000c13d:	0f 84 d9 00 00 00    	je     c000c21c <tcp_receive+0x804>
c000c143:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c147:	8b 50 44             	mov    edx,DWORD PTR [eax+0x44]
c000c14a:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000c14f:	29 c2                	sub    edx,eax
c000c151:	89 d0                	mov    eax,edx
c000c153:	0f 89 c3 00 00 00    	jns    c000c21c <tcp_receive+0x804>
c000c159:	a1 74 68 03 c0       	mov    eax,ds:0xc0036874
c000c15e:	89 c2                	mov    edx,eax
c000c160:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c164:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000c167:	89 d7                	mov    edi,edx
c000c169:	29 c7                	sub    edi,eax
c000c16b:	89 f8                	mov    eax,edi
c000c16d:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c172:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000c177:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c17b:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c17e:	98                   	cwde   
c000c17f:	c1 f8 03             	sar    eax,0x3
c000c182:	89 d6                	mov    esi,edx
c000c184:	29 c6                	sub    esi,eax
c000c186:	89 f0                	mov    eax,esi
c000c188:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c18d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c191:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c194:	89 c2                	mov    edx,eax
c000c196:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c19b:	01 d0                	add    eax,edx
c000c19d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c1a1:	66 89 42 48          	mov    WORD PTR [edx+0x48],ax
c000c1a5:	0f bf 44 24 1e       	movsx  eax,WORD PTR [esp+0x1e]
c000c1aa:	85 c0                	test   eax,eax
c000c1ac:	79 0e                	jns    c000c1bc <tcp_receive+0x7a4>
c000c1ae:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c1b3:	f7 d8                	neg    eax
c000c1b5:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c1ba:	66 90                	xchg   ax,ax
c000c1bc:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000c1c1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1c5:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c1c9:	98                   	cwde   
c000c1ca:	c1 f8 02             	sar    eax,0x2
c000c1cd:	89 d7                	mov    edi,edx
c000c1cf:	29 c7                	sub    edi,eax
c000c1d1:	89 f8                	mov    eax,edi
c000c1d3:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c1d8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1dc:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c1e0:	89 c2                	mov    edx,eax
c000c1e2:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c1e7:	01 d0                	add    eax,edx
c000c1e9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c1ed:	66 89 42 4a          	mov    WORD PTR [edx+0x4a],ax
c000c1f1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1f5:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c1f8:	98                   	cwde   
c000c1f9:	c1 f8 03             	sar    eax,0x3
c000c1fc:	89 c2                	mov    edx,eax
c000c1fe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c202:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c206:	01 d0                	add    eax,edx
c000c208:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c20c:	66 89 42 4c          	mov    WORD PTR [edx+0x4c],ax
c000c210:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c214:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c000c21b:	90                   	nop
c000c21c:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c222:	0f b7 c0             	movzx  eax,ax
c000c225:	85 c0                	test   eax,eax
c000c227:	0f 84 2f 0e 00 00    	je     c000d05c <tcp_receive+0x1644>
c000c22d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c231:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c234:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c239:	29 c2                	sub    edx,eax
c000c23b:	89 d0                	mov    eax,edx
c000c23d:	83 e8 01             	sub    eax,0x1
c000c240:	0f 88 c6 01 00 00    	js     c000c40c <tcp_receive+0x9f4>
c000c246:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c24a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c24d:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c253:	0f b7 c8             	movzx  ecx,ax
c000c256:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c25b:	01 c8                	add    eax,ecx
c000c25d:	29 c2                	sub    edx,eax
c000c25f:	89 d0                	mov    eax,edx
c000c261:	83 c0 01             	add    eax,0x1
c000c264:	85 c0                	test   eax,eax
c000c266:	0f 8f a0 01 00 00    	jg     c000c40c <tcp_receive+0x9f4>
c000c26c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c270:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c273:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c278:	29 c2                	sub    edx,eax
c000c27a:	89 d0                	mov    eax,edx
c000c27c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c280:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c285:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c289:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c28e:	85 c0                	test   eax,eax
c000c290:	75 16                	jne    c000c2a8 <tcp_receive+0x890>
c000c292:	83 ec 08             	sub    esp,0x8
c000c295:	68 91 01 03 c0       	push   0xc0030191
c000c29a:	68 26 f6 02 c0       	push   0xc002f626
c000c29f:	e8 f0 36 01 00       	call   c001f994 <CPrintf>
c000c2a4:	83 c4 10             	add    esp,0x10
c000c2a7:	90                   	nop
c000c2a8:	81 7c 24 20 fe 7f 00 00 	cmp    DWORD PTR [esp+0x20],0x7ffe
c000c2b0:	7e 16                	jle    c000c2c8 <tcp_receive+0x8b0>
c000c2b2:	83 ec 08             	sub    esp,0x8
c000c2b5:	68 a1 01 03 c0       	push   0xc00301a1
c000c2ba:	68 26 f6 02 c0       	push   0xc002f626
c000c2bf:	e8 d0 36 01 00       	call   c001f994 <CPrintf>
c000c2c4:	83 c4 10             	add    esp,0x10
c000c2c7:	90                   	nop
c000c2c8:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c2cd:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c2d1:	0f b7 c0             	movzx  eax,ax
c000c2d4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c2d8:	0f 8e b6 00 00 00    	jle    c000c394 <tcp_receive+0x97c>
c000c2de:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c2e3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c2e6:	0f b7 c0             	movzx  eax,ax
c000c2e9:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c2ed:	7e 15                	jle    c000c304 <tcp_receive+0x8ec>
c000c2ef:	83 ec 08             	sub    esp,0x8
c000c2f2:	68 b0 01 03 c0       	push   0xc00301b0
c000c2f7:	68 26 f6 02 c0       	push   0xc002f626
c000c2fc:	e8 93 36 01 00       	call   c001f994 <CPrintf>
c000c301:	83 c4 10             	add    esp,0x10
c000c304:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c309:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c30c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c310:	29 d0                	sub    eax,edx
c000c312:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c000c317:	eb 33                	jmp    c000c34c <tcp_receive+0x934>
c000c319:	8d 76 00             	lea    esi,[esi+0x0]
c000c31c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c320:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c324:	0f b7 c0             	movzx  eax,ax
c000c327:	29 44 24 20          	sub    DWORD PTR [esp+0x20],eax
c000c32b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c32f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c333:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000c337:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c33b:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c000c341:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c345:	8b 00                	mov    eax,DWORD PTR [eax]
c000c347:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c34b:	90                   	nop
c000c34c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c350:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c354:	0f b7 c0             	movzx  eax,ax
c000c357:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c35b:	7f bf                	jg     c000c31c <tcp_receive+0x904>
c000c35d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c361:	f7 d8                	neg    eax
c000c363:	98                   	cwde   
c000c364:	83 ec 08             	sub    esp,0x8
c000c367:	50                   	push   eax
c000c368:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c36c:	e8 47 bd ff ff       	call   c00080b8 <pbuf_header>
c000c371:	83 c4 10             	add    esp,0x10
c000c374:	0f b6 c0             	movzx  eax,al
c000c377:	85 c0                	test   eax,eax
c000c379:	74 51                	je     c000c3cc <tcp_receive+0x9b4>
c000c37b:	83 ec 08             	sub    esp,0x8
c000c37e:	68 c0 01 03 c0       	push   0xc00301c0
c000c383:	68 26 f6 02 c0       	push   0xc002f626
c000c388:	e8 07 36 01 00       	call   c001f994 <CPrintf>
c000c38d:	83 c4 10             	add    esp,0x10
c000c390:	eb 3a                	jmp    c000c3cc <tcp_receive+0x9b4>
c000c392:	66 90                	xchg   ax,ax
c000c394:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c398:	f7 d8                	neg    eax
c000c39a:	0f bf d0             	movsx  edx,ax
c000c39d:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c3a2:	83 ec 08             	sub    esp,0x8
c000c3a5:	52                   	push   edx
c000c3a6:	50                   	push   eax
c000c3a7:	e8 0c bd ff ff       	call   c00080b8 <pbuf_header>
c000c3ac:	83 c4 10             	add    esp,0x10
c000c3af:	0f b6 c0             	movzx  eax,al
c000c3b2:	85 c0                	test   eax,eax
c000c3b4:	74 16                	je     c000c3cc <tcp_receive+0x9b4>
c000c3b6:	83 ec 08             	sub    esp,0x8
c000c3b9:	68 c0 01 03 c0       	push   0xc00301c0
c000c3be:	68 26 f6 02 c0       	push   0xc002f626
c000c3c3:	e8 cc 35 01 00       	call   c001f994 <CPrintf>
c000c3c8:	83 c4 10             	add    esp,0x10
c000c3cb:	90                   	nop
c000c3cc:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c3d1:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c3d7:	89 d1                	mov    ecx,edx
c000c3d9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c3dd:	8b 52 28             	mov    edx,DWORD PTR [edx+0x28]
c000c3e0:	89 ce                	mov    esi,ecx
c000c3e2:	29 d6                	sub    esi,edx
c000c3e4:	89 f2                	mov    edx,esi
c000c3e6:	01 d0                	add    eax,edx
c000c3e8:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c3ee:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c3f2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c3f5:	a3 b4 a8 03 c0       	mov    ds:0xc003a8b4,eax
c000c3fa:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c3ff:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c405:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000c408:	eb 2a                	jmp    c000c434 <tcp_receive+0xa1c>
c000c40a:	66 90                	xchg   ax,ax
c000c40c:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c412:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c416:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c419:	29 c2                	sub    edx,eax
c000c41b:	89 d0                	mov    eax,edx
c000c41d:	79 15                	jns    c000c434 <tcp_receive+0xa1c>
c000c41f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c423:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000c426:	83 c8 02             	or     eax,0x2
c000c429:	88 c2                	mov    dl,al
c000c42b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c42f:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000c432:	66 90                	xchg   ax,ax
c000c434:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c43a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c43e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c441:	29 c2                	sub    edx,eax
c000c443:	89 d0                	mov    eax,edx
c000c445:	0f 88 fd 0b 00 00    	js     c000d048 <tcp_receive+0x1630>
c000c44b:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c451:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c455:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000c458:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c45c:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c45f:	0f b7 c0             	movzx  eax,ax
c000c462:	01 c8                	add    eax,ecx
c000c464:	29 c2                	sub    edx,eax
c000c466:	89 d0                	mov    eax,edx
c000c468:	83 c0 01             	add    eax,0x1
c000c46b:	85 c0                	test   eax,eax
c000c46d:	0f 8f d5 0b 00 00    	jg     c000d048 <tcp_receive+0x1630>
c000c473:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c477:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c47a:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c47f:	39 c2                	cmp    edx,eax
c000c481:	0f 85 1d 07 00 00    	jne    c000cba4 <tcp_receive+0x118c>
c000c487:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c48d:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c492:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c496:	0f b7 c0             	movzx  eax,ax
c000c499:	83 ec 0c             	sub    esp,0xc
c000c49c:	50                   	push   eax
c000c49d:	e8 46 47 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c4a2:	83 c4 10             	add    esp,0x10
c000c4a5:	0f b7 c0             	movzx  eax,ax
c000c4a8:	83 e0 03             	and    eax,0x3
c000c4ab:	0f 95 c0             	setne  al
c000c4ae:	0f b6 c0             	movzx  eax,al
c000c4b1:	01 d8                	add    eax,ebx
c000c4b3:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c4b9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4bd:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000c4c0:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c4c6:	0f b7 d2             	movzx  edx,dx
c000c4c9:	0f b7 c0             	movzx  eax,ax
c000c4cc:	39 c2                	cmp    edx,eax
c000c4ce:	0f 83 2c 01 00 00    	jae    c000c600 <tcp_receive+0xbe8>
c000c4d4:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c4d9:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c4dd:	0f b7 c0             	movzx  eax,ax
c000c4e0:	83 ec 0c             	sub    esp,0xc
c000c4e3:	50                   	push   eax
c000c4e4:	e8 ff 46 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c4e9:	83 c4 10             	add    esp,0x10
c000c4ec:	0f b7 c0             	movzx  eax,ax
c000c4ef:	83 e0 01             	and    eax,0x1
c000c4f2:	74 44                	je     c000c538 <tcp_receive+0xb20>
c000c4f4:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c4f9:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c4fd:	80 e4 c0             	and    ah,0xc0
c000c500:	89 c3                	mov    ebx,eax
c000c502:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c507:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c50b:	0f b7 c0             	movzx  eax,ax
c000c50e:	83 ec 0c             	sub    esp,0xc
c000c511:	50                   	push   eax
c000c512:	e8 d1 46 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c517:	83 c4 10             	add    esp,0x10
c000c51a:	0f b7 c0             	movzx  eax,ax
c000c51d:	83 e0 3e             	and    eax,0x3e
c000c520:	83 ec 0c             	sub    esp,0xc
c000c523:	50                   	push   eax
c000c524:	e8 bf 46 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c529:	83 c4 10             	add    esp,0x10
c000c52c:	09 d8                	or     eax,ebx
c000c52e:	8b 15 cc a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8cc
c000c534:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000c538:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c53c:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c53f:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c545:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c54a:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c54e:	0f b7 c0             	movzx  eax,ax
c000c551:	83 ec 0c             	sub    esp,0xc
c000c554:	50                   	push   eax
c000c555:	e8 8e 46 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c55a:	83 c4 10             	add    esp,0x10
c000c55d:	0f b7 c0             	movzx  eax,ax
c000c560:	83 e0 02             	and    eax,0x2
c000c563:	74 0f                	je     c000c574 <tcp_receive+0xb5c>
c000c565:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c56a:	83 e8 01             	sub    eax,0x1
c000c56d:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c573:	90                   	nop
c000c574:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c579:	0f b7 d0             	movzx  edx,ax
c000c57c:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c581:	83 ec 08             	sub    esp,0x8
c000c584:	52                   	push   edx
c000c585:	50                   	push   eax
c000c586:	e8 99 c2 ff ff       	call   c0008824 <pbuf_realloc>
c000c58b:	83 c4 10             	add    esp,0x10
c000c58e:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c594:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c599:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c59d:	0f b7 c0             	movzx  eax,ax
c000c5a0:	83 ec 0c             	sub    esp,0xc
c000c5a3:	50                   	push   eax
c000c5a4:	e8 3f 46 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c5a9:	83 c4 10             	add    esp,0x10
c000c5ac:	0f b7 c0             	movzx  eax,ax
c000c5af:	83 e0 03             	and    eax,0x3
c000c5b2:	0f 95 c0             	setne  al
c000c5b5:	0f b6 c0             	movzx  eax,al
c000c5b8:	01 d8                	add    eax,ebx
c000c5ba:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c5c0:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c5c6:	0f b7 d0             	movzx  edx,ax
c000c5c9:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c5ce:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000c5d1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c5d5:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c5d8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c5dc:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c5df:	0f b7 c0             	movzx  eax,ax
c000c5e2:	01 d0                	add    eax,edx
c000c5e4:	39 c1                	cmp    ecx,eax
c000c5e6:	74 18                	je     c000c600 <tcp_receive+0xbe8>
c000c5e8:	83 ec 08             	sub    esp,0x8
c000c5eb:	68 b4 ff 02 c0       	push   0xc002ffb4
c000c5f0:	68 26 f6 02 c0       	push   0xc002f626
c000c5f5:	e8 9a 33 01 00       	call   c001f994 <CPrintf>
c000c5fa:	83 c4 10             	add    esp,0x10
c000c5fd:	8d 76 00             	lea    esi,[esi+0x0]
c000c600:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c604:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c60a:	85 c0                	test   eax,eax
c000c60c:	0f 84 7e 02 00 00    	je     c000c890 <tcp_receive+0xe78>
c000c612:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c617:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c61b:	0f b7 c0             	movzx  eax,ax
c000c61e:	83 ec 0c             	sub    esp,0xc
c000c621:	50                   	push   eax
c000c622:	e8 c1 45 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c627:	83 c4 10             	add    esp,0x10
c000c62a:	0f b7 c0             	movzx  eax,ax
c000c62d:	83 e0 01             	and    eax,0x1
c000c630:	74 4a                	je     c000c67c <tcp_receive+0xc64>
c000c632:	eb 34                	jmp    c000c668 <tcp_receive+0xc50>
c000c634:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c638:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c63e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c642:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c646:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c64c:	8b 10                	mov    edx,DWORD PTR [eax]
c000c64e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c652:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000c658:	83 ec 0c             	sub    esp,0xc
c000c65b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c65f:	e8 68 d8 ff ff       	call   c0009ecc <tcp_seg_free>
c000c664:	83 c4 10             	add    esp,0x10
c000c667:	90                   	nop
c000c668:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c66c:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c672:	85 c0                	test   eax,eax
c000c674:	75 be                	jne    c000c634 <tcp_receive+0xc1c>
c000c676:	e9 15 02 00 00       	jmp    c000c890 <tcp_receive+0xe78>
c000c67b:	90                   	nop
c000c67c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c680:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c686:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c68a:	e9 bd 00 00 00       	jmp    c000c74c <tcp_receive+0xd34>
c000c68f:	90                   	nop
c000c690:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c694:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c697:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c69b:	0f b7 c0             	movzx  eax,ax
c000c69e:	83 ec 0c             	sub    esp,0xc
c000c6a1:	50                   	push   eax
c000c6a2:	e8 41 45 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c6a7:	83 c4 10             	add    esp,0x10
c000c6aa:	0f b7 c0             	movzx  eax,ax
c000c6ad:	83 e0 01             	and    eax,0x1
c000c6b0:	74 76                	je     c000c728 <tcp_receive+0xd10>
c000c6b2:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c6b7:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c6bb:	0f b7 c0             	movzx  eax,ax
c000c6be:	83 ec 0c             	sub    esp,0xc
c000c6c1:	50                   	push   eax
c000c6c2:	e8 21 45 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c6c7:	83 c4 10             	add    esp,0x10
c000c6ca:	0f b7 c0             	movzx  eax,ax
c000c6cd:	83 e0 02             	and    eax,0x2
c000c6d0:	75 56                	jne    c000c728 <tcp_receive+0xd10>
c000c6d2:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c6d7:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000c6db:	83 ec 0c             	sub    esp,0xc
c000c6de:	6a 01                	push   0x1
c000c6e0:	e8 03 45 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c6e5:	83 c4 10             	add    esp,0x10
c000c6e8:	8b 15 cc a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8cc
c000c6ee:	09 d8                	or     eax,ebx
c000c6f0:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000c6f4:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c6fa:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c6ff:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c703:	0f b7 c0             	movzx  eax,ax
c000c706:	83 ec 0c             	sub    esp,0xc
c000c709:	50                   	push   eax
c000c70a:	e8 d9 44 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c70f:	83 c4 10             	add    esp,0x10
c000c712:	0f b7 c0             	movzx  eax,ax
c000c715:	83 e0 03             	and    eax,0x3
c000c718:	0f 95 c0             	setne  al
c000c71b:	0f b6 c0             	movzx  eax,al
c000c71e:	01 d8                	add    eax,ebx
c000c720:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c726:	66 90                	xchg   ax,ax
c000c728:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c72c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c730:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c734:	8b 00                	mov    eax,DWORD PTR [eax]
c000c736:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c73a:	83 ec 0c             	sub    esp,0xc
c000c73d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c741:	e8 86 d7 ff ff       	call   c0009ecc <tcp_seg_free>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	8d 76 00             	lea    esi,[esi+0x0]
c000c74c:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000c751:	74 31                	je     c000c784 <tcp_receive+0xd6c>
c000c753:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c759:	0f b7 d0             	movzx  edx,ax
c000c75c:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c761:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000c764:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c768:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c76b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000c76e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c772:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c775:	0f b7 c0             	movzx  eax,ax
c000c778:	01 d0                	add    eax,edx
c000c77a:	29 c1                	sub    ecx,eax
c000c77c:	89 c8                	mov    eax,ecx
c000c77e:	0f 89 0c ff ff ff    	jns    c000c690 <tcp_receive+0xc78>
c000c784:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000c789:	0f 84 f1 00 00 00    	je     c000c880 <tcp_receive+0xe68>
c000c78f:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c795:	0f b7 d0             	movzx  edx,ax
c000c798:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c79d:	01 c2                	add    edx,eax
c000c79f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c7a3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c7a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c7a9:	29 c2                	sub    edx,eax
c000c7ab:	89 d0                	mov    eax,edx
c000c7ad:	85 c0                	test   eax,eax
c000c7af:	0f 8e cb 00 00 00    	jle    c000c880 <tcp_receive+0xe68>
c000c7b5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c7b9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c7bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c7bf:	89 c2                	mov    edx,eax
c000c7c1:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c7c6:	89 d7                	mov    edi,edx
c000c7c8:	29 c7                	sub    edi,eax
c000c7ca:	89 f8                	mov    eax,edi
c000c7cc:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c7d2:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c7d7:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c7db:	0f b7 c0             	movzx  eax,ax
c000c7de:	83 ec 0c             	sub    esp,0xc
c000c7e1:	50                   	push   eax
c000c7e2:	e8 01 44 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c7e7:	83 c4 10             	add    esp,0x10
c000c7ea:	0f b7 c0             	movzx  eax,ax
c000c7ed:	83 e0 02             	and    eax,0x2
c000c7f0:	74 0e                	je     c000c800 <tcp_receive+0xde8>
c000c7f2:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c7f7:	83 e8 01             	sub    eax,0x1
c000c7fa:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c800:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c805:	0f b7 d0             	movzx  edx,ax
c000c808:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c80d:	83 ec 08             	sub    esp,0x8
c000c810:	52                   	push   edx
c000c811:	50                   	push   eax
c000c812:	e8 0d c0 ff ff       	call   c0008824 <pbuf_realloc>
c000c817:	83 c4 10             	add    esp,0x10
c000c81a:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c820:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c825:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c829:	0f b7 c0             	movzx  eax,ax
c000c82c:	83 ec 0c             	sub    esp,0xc
c000c82f:	50                   	push   eax
c000c830:	e8 b3 43 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c835:	83 c4 10             	add    esp,0x10
c000c838:	0f b7 c0             	movzx  eax,ax
c000c83b:	83 e0 03             	and    eax,0x3
c000c83e:	0f 95 c0             	setne  al
c000c841:	0f b6 c0             	movzx  eax,al
c000c844:	01 d8                	add    eax,ebx
c000c846:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c84c:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c852:	0f b7 d0             	movzx  edx,ax
c000c855:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c85a:	01 c2                	add    edx,eax
c000c85c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c860:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c863:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c866:	39 c2                	cmp    edx,eax
c000c868:	74 16                	je     c000c880 <tcp_receive+0xe68>
c000c86a:	83 ec 08             	sub    esp,0x8
c000c86d:	68 ec ff 02 c0       	push   0xc002ffec
c000c872:	68 26 f6 02 c0       	push   0xc002f626
c000c877:	e8 18 31 01 00       	call   c001f994 <CPrintf>
c000c87c:	83 c4 10             	add    esp,0x10
c000c87f:	90                   	nop
c000c880:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c884:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c888:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000c88e:	66 90                	xchg   ax,ax
c000c890:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c896:	0f b7 d0             	movzx  edx,ax
c000c899:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c89e:	01 c2                	add    edx,eax
c000c8a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c8a4:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000c8a7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c8ab:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000c8ae:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c8b4:	0f b7 d2             	movzx  edx,dx
c000c8b7:	0f b7 c0             	movzx  eax,ax
c000c8ba:	39 c2                	cmp    edx,eax
c000c8bc:	73 16                	jae    c000c8d4 <tcp_receive+0xebc>
c000c8be:	83 ec 08             	sub    esp,0x8
c000c8c1:	68 28 00 03 c0       	push   0xc0030028
c000c8c6:	68 26 f6 02 c0       	push   0xc002f626
c000c8cb:	e8 c4 30 01 00       	call   c001f994 <CPrintf>
c000c8d0:	83 c4 10             	add    esp,0x10
c000c8d3:	90                   	nop
c000c8d4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c8d8:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000c8db:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c8e1:	89 d6                	mov    esi,edx
c000c8e3:	29 c6                	sub    esi,eax
c000c8e5:	89 f0                	mov    eax,esi
c000c8e7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c8eb:	66 89 42 2c          	mov    WORD PTR [edx+0x2c],ax
c000c8ef:	83 ec 0c             	sub    esp,0xc
c000c8f2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c8f6:	e8 7d d2 ff ff       	call   c0009b78 <tcp_update_rcv_ann_wnd>
c000c8fb:	83 c4 10             	add    esp,0x10
c000c8fe:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c903:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c906:	0f b7 c0             	movzx  eax,ax
c000c909:	85 c0                	test   eax,eax
c000c90b:	74 17                	je     c000c924 <tcp_receive+0xf0c>
c000c90d:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c912:	a3 a4 a8 03 c0       	mov    ds:0xc003a8a4,eax
c000c917:	c7 05 c4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8c4,0x0
c000c921:	8d 76 00             	lea    esi,[esi+0x0]
c000c924:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c929:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c92d:	0f b7 c0             	movzx  eax,ax
c000c930:	83 ec 0c             	sub    esp,0xc
c000c933:	50                   	push   eax
c000c934:	e8 af 42 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c939:	83 c4 10             	add    esp,0x10
c000c93c:	0f b7 c0             	movzx  eax,ax
c000c93f:	83 e0 01             	and    eax,0x1
c000c942:	0f 84 d8 01 00 00    	je     c000cb20 <tcp_receive+0x1108>
c000c948:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000c94d:	83 c8 20             	or     eax,0x20
c000c950:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000c955:	e9 c6 01 00 00       	jmp    c000cb20 <tcp_receive+0x1108>
c000c95a:	66 90                	xchg   ax,ax
c000c95c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c960:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c966:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c96a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c96e:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c974:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c977:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c97a:	a3 b4 a8 03 c0       	mov    ds:0xc003a8b4,eax
c000c97f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c983:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c986:	0f b7 d8             	movzx  ebx,ax
c000c989:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c98d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c990:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c994:	0f b7 c0             	movzx  eax,ax
c000c997:	83 ec 0c             	sub    esp,0xc
c000c99a:	50                   	push   eax
c000c99b:	e8 48 42 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c9a0:	83 c4 10             	add    esp,0x10
c000c9a3:	0f b7 c0             	movzx  eax,ax
c000c9a6:	83 e0 03             	and    eax,0x3
c000c9a9:	0f 95 c0             	setne  al
c000c9ac:	0f b6 c0             	movzx  eax,al
c000c9af:	8d 14 03             	lea    edx,[ebx+eax*1]
c000c9b2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c9b6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c9b9:	01 c2                	add    edx,eax
c000c9bb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c9bf:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000c9c2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c9c6:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c9c9:	0f b7 d8             	movzx  ebx,ax
c000c9cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c9d0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c9d3:	0f b7 f0             	movzx  esi,ax
c000c9d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c9da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c9dd:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c9e1:	0f b7 c0             	movzx  eax,ax
c000c9e4:	83 ec 0c             	sub    esp,0xc
c000c9e7:	50                   	push   eax
c000c9e8:	e8 fb 41 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c9ed:	83 c4 10             	add    esp,0x10
c000c9f0:	0f b7 c0             	movzx  eax,ax
c000c9f3:	83 e0 03             	and    eax,0x3
c000c9f6:	0f 95 c0             	setne  al
c000c9f9:	0f b6 c0             	movzx  eax,al
c000c9fc:	01 f0                	add    eax,esi
c000c9fe:	39 c3                	cmp    ebx,eax
c000ca00:	7d 16                	jge    c000ca18 <tcp_receive+0x1000>
c000ca02:	83 ec 08             	sub    esp,0x8
c000ca05:	68 48 00 03 c0       	push   0xc0030048
c000ca0a:	68 26 f6 02 c0       	push   0xc002f626
c000ca0f:	e8 80 2f 01 00       	call   c001f994 <CPrintf>
c000ca14:	83 c4 10             	add    esp,0x10
c000ca17:	90                   	nop
c000ca18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca1c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ca1f:	0f b7 d8             	movzx  ebx,ax
c000ca22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca26:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca29:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000ca2d:	0f b7 c0             	movzx  eax,ax
c000ca30:	83 ec 0c             	sub    esp,0xc
c000ca33:	50                   	push   eax
c000ca34:	e8 af 41 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ca39:	83 c4 10             	add    esp,0x10
c000ca3c:	0f b7 c0             	movzx  eax,ax
c000ca3f:	83 e0 03             	and    eax,0x3
c000ca42:	0f 95 c0             	setne  al
c000ca45:	0f b6 c0             	movzx  eax,al
c000ca48:	8d 14 03             	lea    edx,[ebx+eax*1]
c000ca4b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca4f:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000ca52:	29 d0                	sub    eax,edx
c000ca54:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000ca58:	66 89 42 2c          	mov    WORD PTR [edx+0x2c],ax
c000ca5c:	83 ec 0c             	sub    esp,0xc
c000ca5f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ca63:	e8 10 d1 ff ff       	call   c0009b78 <tcp_update_rcv_ann_wnd>
c000ca68:	83 c4 10             	add    esp,0x10
c000ca6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca6f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ca72:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ca75:	0f b7 c0             	movzx  eax,ax
c000ca78:	85 c0                	test   eax,eax
c000ca7a:	74 3c                	je     c000cab8 <tcp_receive+0x10a0>
c000ca7c:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000ca81:	85 c0                	test   eax,eax
c000ca83:	74 1b                	je     c000caa0 <tcp_receive+0x1088>
c000ca85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca89:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ca8c:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000ca91:	83 ec 08             	sub    esp,0x8
c000ca94:	52                   	push   edx
c000ca95:	50                   	push   eax
c000ca96:	e8 f1 bf ff ff       	call   c0008a8c <pbuf_cat>
c000ca9b:	83 c4 10             	add    esp,0x10
c000ca9e:	eb 0c                	jmp    c000caac <tcp_receive+0x1094>
c000caa0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000caa4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000caa7:	a3 a4 a8 03 c0       	mov    ds:0xc003a8a4,eax
c000caac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cab0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cab7:	90                   	nop
c000cab8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cabc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cabf:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cac3:	0f b7 c0             	movzx  eax,ax
c000cac6:	83 ec 0c             	sub    esp,0xc
c000cac9:	50                   	push   eax
c000caca:	e8 19 41 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000cacf:	83 c4 10             	add    esp,0x10
c000cad2:	0f b7 c0             	movzx  eax,ax
c000cad5:	83 e0 01             	and    eax,0x1
c000cad8:	74 26                	je     c000cb00 <tcp_receive+0x10e8>
c000cada:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000cadf:	83 c8 20             	or     eax,0x20
c000cae2:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000cae7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000caeb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000caee:	83 f8 04             	cmp    eax,0x4
c000caf1:	75 0d                	jne    c000cb00 <tcp_receive+0x10e8>
c000caf3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000caf7:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000cafe:	66 90                	xchg   ax,ax
c000cb00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb04:	8b 10                	mov    edx,DWORD PTR [eax]
c000cb06:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb0a:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cb10:	83 ec 0c             	sub    esp,0xc
c000cb13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb17:	e8 b0 d3 ff ff       	call   c0009ecc <tcp_seg_free>
c000cb1c:	83 c4 10             	add    esp,0x10
c000cb1f:	90                   	nop
c000cb20:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb24:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cb2a:	85 c0                	test   eax,eax
c000cb2c:	74 22                	je     c000cb50 <tcp_receive+0x1138>
c000cb2e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb32:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cb38:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cb3b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cb3e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb42:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000cb45:	39 c2                	cmp    edx,eax
c000cb47:	0f 84 0f fe ff ff    	je     c000c95c <tcp_receive+0xf44>
c000cb4d:	8d 76 00             	lea    esi,[esi+0x0]
c000cb50:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb54:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000cb57:	0f b6 c0             	movzx  eax,al
c000cb5a:	83 e0 01             	and    eax,0x1
c000cb5d:	74 2d                	je     c000cb8c <tcp_receive+0x1174>
c000cb5f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb63:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000cb66:	83 e0 fe             	and    eax,0xfffffffe
c000cb69:	88 c2                	mov    dl,al
c000cb6b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb6f:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000cb72:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb76:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000cb79:	83 c8 02             	or     eax,0x2
c000cb7c:	88 c2                	mov    dl,al
c000cb7e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb82:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000cb85:	e9 22 05 00 00       	jmp    c000d0ac <tcp_receive+0x1694>
c000cb8a:	66 90                	xchg   ax,ax
c000cb8c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb90:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000cb93:	83 c8 01             	or     eax,0x1
c000cb96:	88 c2                	mov    dl,al
c000cb98:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb9c:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000cb9f:	e9 08 05 00 00       	jmp    c000d0ac <tcp_receive+0x1694>
c000cba4:	83 ec 0c             	sub    esp,0xc
c000cba7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cbab:	e8 c4 2e 00 00       	call   c000fa74 <tcp_send_empty_ack>
c000cbb0:	83 c4 10             	add    esp,0x10
c000cbb3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cbb7:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cbbd:	85 c0                	test   eax,eax
c000cbbf:	75 23                	jne    c000cbe4 <tcp_receive+0x11cc>
c000cbc1:	83 ec 0c             	sub    esp,0xc
c000cbc4:	68 c0 a8 03 c0       	push   0xc003a8c0
c000cbc9:	e8 96 d3 ff ff       	call   c0009f64 <tcp_seg_copy>
c000cbce:	83 c4 10             	add    esp,0x10
c000cbd1:	89 c2                	mov    edx,eax
c000cbd3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cbd7:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cbdd:	e9 ca 04 00 00       	jmp    c000d0ac <tcp_receive+0x1694>
c000cbe2:	66 90                	xchg   ax,ax
c000cbe4:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000cbec:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cbf0:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cbf6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cbfa:	e9 21 04 00 00       	jmp    c000d020 <tcp_receive+0x1608>
c000cbff:	90                   	nop
c000cc00:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cc04:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cc07:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cc0a:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cc0f:	39 c2                	cmp    edx,eax
c000cc11:	75 75                	jne    c000cc88 <tcp_receive+0x1270>
c000cc13:	8b 15 c8 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8c8
c000cc19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cc1d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cc20:	0f b7 d2             	movzx  edx,dx
c000cc23:	0f b7 c0             	movzx  eax,ax
c000cc26:	39 c2                	cmp    edx,eax
c000cc28:	0f 86 02 04 00 00    	jbe    c000d030 <tcp_receive+0x1618>
c000cc2e:	83 ec 0c             	sub    esp,0xc
c000cc31:	68 c0 a8 03 c0       	push   0xc003a8c0
c000cc36:	e8 29 d3 ff ff       	call   c0009f64 <tcp_seg_copy>
c000cc3b:	83 c4 10             	add    esp,0x10
c000cc3e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc42:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000cc47:	0f 84 e7 03 00 00    	je     c000d034 <tcp_receive+0x161c>
c000cc4d:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000cc52:	74 0c                	je     c000cc60 <tcp_receive+0x1248>
c000cc54:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cc58:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc5c:	89 10                	mov    DWORD PTR [eax],edx
c000cc5e:	eb 10                	jmp    c000cc70 <tcp_receive+0x1258>
c000cc60:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc64:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc68:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cc6e:	66 90                	xchg   ax,ax
c000cc70:	83 ec 08             	sub    esp,0x8
c000cc73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc7b:	e8 2c ec ff ff       	call   c000b8ac <tcp_oos_insert_segment>
c000cc80:	83 c4 10             	add    esp,0x10
c000cc83:	e9 ac 03 00 00       	jmp    c000d034 <tcp_receive+0x161c>
c000cc88:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000cc8d:	75 61                	jne    c000ccf0 <tcp_receive+0x12d8>
c000cc8f:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000cc95:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cc99:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cc9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cc9f:	29 c2                	sub    edx,eax
c000cca1:	89 d0                	mov    eax,edx
c000cca3:	0f 89 27 01 00 00    	jns    c000cdd0 <tcp_receive+0x13b8>
c000cca9:	83 ec 0c             	sub    esp,0xc
c000ccac:	68 c0 a8 03 c0       	push   0xc003a8c0
c000ccb1:	e8 ae d2 ff ff       	call   c0009f64 <tcp_seg_copy>
c000ccb6:	83 c4 10             	add    esp,0x10
c000ccb9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ccbd:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000ccc2:	0f 84 70 03 00 00    	je     c000d038 <tcp_receive+0x1620>
c000ccc8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cccc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ccd0:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000ccd6:	83 ec 08             	sub    esp,0x8
c000ccd9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccdd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cce1:	e8 c6 eb ff ff       	call   c000b8ac <tcp_oos_insert_segment>
c000cce6:	83 c4 10             	add    esp,0x10
c000cce9:	e9 4a 03 00 00       	jmp    c000d038 <tcp_receive+0x1620>
c000ccee:	66 90                	xchg   ax,ax
c000ccf0:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000ccf6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ccfa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ccfd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cd00:	29 c2                	sub    edx,eax
c000cd02:	89 d0                	mov    eax,edx
c000cd04:	83 e8 01             	sub    eax,0x1
c000cd07:	0f 88 c3 00 00 00    	js     c000cdd0 <tcp_receive+0x13b8>
c000cd0d:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000cd13:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cd17:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cd1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cd1d:	29 c2                	sub    edx,eax
c000cd1f:	89 d0                	mov    eax,edx
c000cd21:	83 c0 01             	add    eax,0x1
c000cd24:	85 c0                	test   eax,eax
c000cd26:	0f 8f a4 00 00 00    	jg     c000cdd0 <tcp_receive+0x13b8>
c000cd2c:	83 ec 0c             	sub    esp,0xc
c000cd2f:	68 c0 a8 03 c0       	push   0xc003a8c0
c000cd34:	e8 2b d2 ff ff       	call   c0009f64 <tcp_seg_copy>
c000cd39:	83 c4 10             	add    esp,0x10
c000cd3c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd40:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000cd45:	0f 84 f1 02 00 00    	je     c000d03c <tcp_receive+0x1624>
c000cd4b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cd4f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cd52:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cd55:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cd59:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cd5c:	0f b7 c0             	movzx  eax,ax
c000cd5f:	01 c2                	add    edx,eax
c000cd61:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cd66:	29 c2                	sub    edx,eax
c000cd68:	89 d0                	mov    eax,edx
c000cd6a:	85 c0                	test   eax,eax
c000cd6c:	7e 3e                	jle    c000cdac <tcp_receive+0x1394>
c000cd6e:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cd73:	89 c2                	mov    edx,eax
c000cd75:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cd79:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cd7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cd7f:	89 d7                	mov    edi,edx
c000cd81:	29 c7                	sub    edi,eax
c000cd83:	89 f8                	mov    eax,edi
c000cd85:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cd89:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000cd8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cd91:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cd94:	0f b7 d0             	movzx  edx,ax
c000cd97:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cd9b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cd9e:	83 ec 08             	sub    esp,0x8
c000cda1:	52                   	push   edx
c000cda2:	50                   	push   eax
c000cda3:	e8 7c ba ff ff       	call   c0008824 <pbuf_realloc>
c000cda8:	83 c4 10             	add    esp,0x10
c000cdab:	90                   	nop
c000cdac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cdb0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cdb4:	89 10                	mov    DWORD PTR [eax],edx
c000cdb6:	83 ec 08             	sub    esp,0x8
c000cdb9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdbd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdc1:	e8 e6 ea ff ff       	call   c000b8ac <tcp_oos_insert_segment>
c000cdc6:	83 c4 10             	add    esp,0x10
c000cdc9:	e9 6e 02 00 00       	jmp    c000d03c <tcp_receive+0x1624>
c000cdce:	66 90                	xchg   ax,ax
c000cdd0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cdd4:	8b 00                	mov    eax,DWORD PTR [eax]
c000cdd6:	85 c0                	test   eax,eax
c000cdd8:	0f 85 2e 02 00 00    	jne    c000d00c <tcp_receive+0x15f4>
c000cdde:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000cde4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cde8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cdeb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cdee:	29 c2                	sub    edx,eax
c000cdf0:	89 d0                	mov    eax,edx
c000cdf2:	85 c0                	test   eax,eax
c000cdf4:	0f 8e 12 02 00 00    	jle    c000d00c <tcp_receive+0x15f4>
c000cdfa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cdfe:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ce01:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000ce05:	0f b7 c0             	movzx  eax,ax
c000ce08:	83 ec 0c             	sub    esp,0xc
c000ce0b:	50                   	push   eax
c000ce0c:	e8 d7 3d ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ce11:	83 c4 10             	add    esp,0x10
c000ce14:	0f b7 c0             	movzx  eax,ax
c000ce17:	83 e0 01             	and    eax,0x1
c000ce1a:	0f 85 20 02 00 00    	jne    c000d040 <tcp_receive+0x1628>
c000ce20:	83 ec 0c             	sub    esp,0xc
c000ce23:	68 c0 a8 03 c0       	push   0xc003a8c0
c000ce28:	e8 37 d1 ff ff       	call   c0009f64 <tcp_seg_copy>
c000ce2d:	83 c4 10             	add    esp,0x10
c000ce30:	89 c2                	mov    edx,eax
c000ce32:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ce36:	89 10                	mov    DWORD PTR [eax],edx
c000ce38:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ce3c:	8b 00                	mov    eax,DWORD PTR [eax]
c000ce3e:	85 c0                	test   eax,eax
c000ce40:	0f 84 fe 01 00 00    	je     c000d044 <tcp_receive+0x162c>
c000ce46:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ce4a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ce4d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ce50:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ce54:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ce57:	0f b7 c0             	movzx  eax,ax
c000ce5a:	01 c2                	add    edx,eax
c000ce5c:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ce61:	29 c2                	sub    edx,eax
c000ce63:	89 d0                	mov    eax,edx
c000ce65:	85 c0                	test   eax,eax
c000ce67:	7e 3f                	jle    c000cea8 <tcp_receive+0x1490>
c000ce69:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ce6e:	89 c2                	mov    edx,eax
c000ce70:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ce74:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ce77:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ce7a:	89 d6                	mov    esi,edx
c000ce7c:	29 c6                	sub    esi,eax
c000ce7e:	89 f0                	mov    eax,esi
c000ce80:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ce84:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000ce88:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ce8c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ce8f:	0f b7 d0             	movzx  edx,ax
c000ce92:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ce96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ce99:	83 ec 08             	sub    esp,0x8
c000ce9c:	52                   	push   edx
c000ce9d:	50                   	push   eax
c000ce9e:	e8 81 b9 ff ff       	call   c0008824 <pbuf_realloc>
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	66 90                	xchg   ax,ax
c000cea8:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000ceae:	0f b7 d0             	movzx  edx,ax
c000ceb1:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ceb6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000ceb9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cebd:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000cec0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cec4:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000cec7:	0f b7 c0             	movzx  eax,ax
c000ceca:	01 d0                	add    eax,edx
c000cecc:	39 c1                	cmp    ecx,eax
c000cece:	0f 86 70 01 00 00    	jbe    c000d044 <tcp_receive+0x162c>
c000ced4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ced8:	8b 00                	mov    eax,DWORD PTR [eax]
c000ceda:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cedd:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cee1:	0f b7 c0             	movzx  eax,ax
c000cee4:	83 ec 0c             	sub    esp,0xc
c000cee7:	50                   	push   eax
c000cee8:	e8 fb 3c ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ceed:	83 c4 10             	add    esp,0x10
c000cef0:	0f b7 c0             	movzx  eax,ax
c000cef3:	83 e0 01             	and    eax,0x1
c000cef6:	74 50                	je     c000cf48 <tcp_receive+0x1530>
c000cef8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cefc:	8b 00                	mov    eax,DWORD PTR [eax]
c000cefe:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cf01:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cf05:	80 e4 c0             	and    ah,0xc0
c000cf08:	89 c3                	mov    ebx,eax
c000cf0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf0e:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf10:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cf13:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cf17:	0f b7 c0             	movzx  eax,ax
c000cf1a:	83 ec 0c             	sub    esp,0xc
c000cf1d:	50                   	push   eax
c000cf1e:	e8 c5 3c ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000cf23:	83 c4 10             	add    esp,0x10
c000cf26:	0f b7 c0             	movzx  eax,ax
c000cf29:	83 e0 3e             	and    eax,0x3e
c000cf2c:	83 ec 0c             	sub    esp,0xc
c000cf2f:	50                   	push   eax
c000cf30:	e8 b3 3c ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000cf35:	83 c4 10             	add    esp,0x10
c000cf38:	09 d8                	or     eax,ebx
c000cf3a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000cf3e:	8b 12                	mov    edx,DWORD PTR [edx]
c000cf40:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000cf43:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000cf47:	90                   	nop
c000cf48:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cf4c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000cf4f:	89 c2                	mov    edx,eax
c000cf51:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cf55:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000cf58:	01 d0                	add    eax,edx
c000cf5a:	89 c3                	mov    ebx,eax
c000cf5c:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cf61:	89 c1                	mov    ecx,eax
c000cf63:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf67:	8b 10                	mov    edx,DWORD PTR [eax]
c000cf69:	89 d8                	mov    eax,ebx
c000cf6b:	29 c8                	sub    eax,ecx
c000cf6d:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000cf71:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf75:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf77:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cf7a:	0f b7 d0             	movzx  edx,ax
c000cf7d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf81:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf83:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cf86:	83 ec 08             	sub    esp,0x8
c000cf89:	52                   	push   edx
c000cf8a:	50                   	push   eax
c000cf8b:	e8 94 b8 ff ff       	call   c0008824 <pbuf_realloc>
c000cf90:	83 c4 10             	add    esp,0x10
c000cf93:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf97:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf99:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
c000cf9c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfa0:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfa2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cfa5:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cfa9:	0f b7 c0             	movzx  eax,ax
c000cfac:	83 ec 0c             	sub    esp,0xc
c000cfaf:	50                   	push   eax
c000cfb0:	e8 33 3c ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000cfb5:	83 c4 10             	add    esp,0x10
c000cfb8:	0f b7 c0             	movzx  eax,ax
c000cfbb:	83 e0 03             	and    eax,0x3
c000cfbe:	0f 95 c0             	setne  al
c000cfc1:	0f b6 c0             	movzx  eax,al
c000cfc4:	01 d8                	add    eax,ebx
c000cfc6:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000cfcc:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000cfd2:	0f b7 d0             	movzx  edx,ax
c000cfd5:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cfda:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000cfdd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cfe1:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000cfe4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cfe8:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000cfeb:	0f b7 c0             	movzx  eax,ax
c000cfee:	01 d0                	add    eax,edx
c000cff0:	39 c1                	cmp    ecx,eax
c000cff2:	74 50                	je     c000d044 <tcp_receive+0x162c>
c000cff4:	83 ec 08             	sub    esp,0x8
c000cff7:	68 b4 ff 02 c0       	push   0xc002ffb4
c000cffc:	68 26 f6 02 c0       	push   0xc002f626
c000d001:	e8 8e 29 01 00       	call   c001f994 <CPrintf>
c000d006:	83 c4 10             	add    esp,0x10
c000d009:	eb 39                	jmp    c000d044 <tcp_receive+0x162c>
c000d00b:	90                   	nop
c000d00c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d010:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d014:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d018:	8b 00                	mov    eax,DWORD PTR [eax]
c000d01a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d01e:	66 90                	xchg   ax,ax
c000d020:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000d025:	0f 85 d5 fb ff ff    	jne    c000cc00 <tcp_receive+0x11e8>
c000d02b:	eb 7f                	jmp    c000d0ac <tcp_receive+0x1694>
c000d02d:	8d 76 00             	lea    esi,[esi+0x0]
c000d030:	90                   	nop
c000d031:	eb 79                	jmp    c000d0ac <tcp_receive+0x1694>
c000d033:	90                   	nop
c000d034:	90                   	nop
c000d035:	eb 75                	jmp    c000d0ac <tcp_receive+0x1694>
c000d037:	90                   	nop
c000d038:	90                   	nop
c000d039:	eb 71                	jmp    c000d0ac <tcp_receive+0x1694>
c000d03b:	90                   	nop
c000d03c:	90                   	nop
c000d03d:	eb 6d                	jmp    c000d0ac <tcp_receive+0x1694>
c000d03f:	90                   	nop
c000d040:	90                   	nop
c000d041:	eb 69                	jmp    c000d0ac <tcp_receive+0x1694>
c000d043:	90                   	nop
c000d044:	90                   	nop
c000d045:	eb 65                	jmp    c000d0ac <tcp_receive+0x1694>
c000d047:	90                   	nop
c000d048:	83 ec 0c             	sub    esp,0xc
c000d04b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d04f:	e8 20 2a 00 00       	call   c000fa74 <tcp_send_empty_ack>
c000d054:	83 c4 10             	add    esp,0x10
c000d057:	eb 53                	jmp    c000d0ac <tcp_receive+0x1694>
c000d059:	8d 76 00             	lea    esi,[esi+0x0]
c000d05c:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d062:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d066:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d069:	29 c2                	sub    edx,eax
c000d06b:	89 d0                	mov    eax,edx
c000d06d:	78 25                	js     c000d094 <tcp_receive+0x167c>
c000d06f:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d075:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d079:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000d07c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d080:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d083:	0f b7 c0             	movzx  eax,ax
c000d086:	01 c8                	add    eax,ecx
c000d088:	29 c2                	sub    edx,eax
c000d08a:	89 d0                	mov    eax,edx
c000d08c:	83 c0 01             	add    eax,0x1
c000d08f:	85 c0                	test   eax,eax
c000d091:	7e 19                	jle    c000d0ac <tcp_receive+0x1694>
c000d093:	90                   	nop
c000d094:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d098:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d09b:	83 c8 02             	or     eax,0x2
c000d09e:	88 c2                	mov    dl,al
c000d0a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d0a4:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d0a7:	eb 03                	jmp    c000d0ac <tcp_receive+0x1694>
c000d0a9:	8d 76 00             	lea    esi,[esi+0x0]
c000d0ac:	90                   	nop
c000d0ad:	83 c4 30             	add    esp,0x30
c000d0b0:	5b                   	pop    ebx
c000d0b1:	5e                   	pop    esi
c000d0b2:	5f                   	pop    edi
c000d0b3:	c3                   	ret    

c000d0b4 <tcp_parseopt>:
c000d0b4:	83 ec 1c             	sub    esp,0x1c
c000d0b7:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d0bc:	83 c0 14             	add    eax,0x14
c000d0bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0c3:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d0c8:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d0cc:	0f b7 c0             	movzx  eax,ax
c000d0cf:	83 ec 0c             	sub    esp,0xc
c000d0d2:	50                   	push   eax
c000d0d3:	e8 10 3b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d0d8:	83 c4 10             	add    esp,0x10
c000d0db:	0f b7 c0             	movzx  eax,ax
c000d0de:	c1 e8 0c             	shr    eax,0xc
c000d0e1:	0f b7 c0             	movzx  eax,ax
c000d0e4:	83 f8 05             	cmp    eax,0x5
c000d0e7:	0f 86 6f 01 00 00    	jbe    c000d25c <tcp_parseopt+0x1a8>
c000d0ed:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d0f2:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d0f6:	0f b7 c0             	movzx  eax,ax
c000d0f9:	83 ec 0c             	sub    esp,0xc
c000d0fc:	50                   	push   eax
c000d0fd:	e8 e6 3a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d102:	83 c4 10             	add    esp,0x10
c000d105:	0f b7 c0             	movzx  eax,ax
c000d108:	c1 e8 0c             	shr    eax,0xc
c000d10b:	83 e8 05             	sub    eax,0x5
c000d10e:	c1 e0 02             	shl    eax,0x2
c000d111:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000d116:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c000d11d:	e9 1e 01 00 00       	jmp    c000d240 <tcp_parseopt+0x18c>
c000d122:	66 90                	xchg   ax,ax
c000d124:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c000d129:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d12d:	01 d0                	add    eax,edx
c000d12f:	8a 00                	mov    al,BYTE PTR [eax]
c000d131:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000d135:	0f b6 44 24 05       	movzx  eax,BYTE PTR [esp+0x5]
c000d13a:	83 f8 01             	cmp    eax,0x1
c000d13d:	74 15                	je     c000d154 <tcp_parseopt+0xa0>
c000d13f:	83 f8 02             	cmp    eax,0x2
c000d142:	74 24                	je     c000d168 <tcp_parseopt+0xb4>
c000d144:	85 c0                	test   eax,eax
c000d146:	0f 85 bc 00 00 00    	jne    c000d208 <tcp_parseopt+0x154>
c000d14c:	e9 0b 01 00 00       	jmp    c000d25c <tcp_parseopt+0x1a8>
c000d151:	8d 76 00             	lea    esi,[esi+0x0]
c000d154:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000d159:	83 c0 01             	add    eax,0x1
c000d15c:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d161:	e9 da 00 00 00       	jmp    c000d240 <tcp_parseopt+0x18c>
c000d166:	66 90                	xchg   ax,ax
c000d168:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d16d:	8d 50 01             	lea    edx,[eax+0x1]
c000d170:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d174:	01 d0                	add    eax,edx
c000d176:	8a 00                	mov    al,BYTE PTR [eax]
c000d178:	0f b6 c0             	movzx  eax,al
c000d17b:	83 f8 04             	cmp    eax,0x4
c000d17e:	0f 85 d0 00 00 00    	jne    c000d254 <tcp_parseopt+0x1a0>
c000d184:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d189:	8d 50 03             	lea    edx,[eax+0x3]
c000d18c:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000d191:	39 c2                	cmp    edx,eax
c000d193:	0f 8d bb 00 00 00    	jge    c000d254 <tcp_parseopt+0x1a0>
c000d199:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d19e:	8d 50 02             	lea    edx,[eax+0x2]
c000d1a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1a5:	01 d0                	add    eax,edx
c000d1a7:	8a 00                	mov    al,BYTE PTR [eax]
c000d1a9:	0f b6 c0             	movzx  eax,al
c000d1ac:	c1 e0 08             	shl    eax,0x8
c000d1af:	89 c2                	mov    edx,eax
c000d1b1:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d1b6:	8d 48 03             	lea    ecx,[eax+0x3]
c000d1b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1bd:	01 c8                	add    eax,ecx
c000d1bf:	8a 00                	mov    al,BYTE PTR [eax]
c000d1c1:	0f b6 c0             	movzx  eax,al
c000d1c4:	09 d0                	or     eax,edx
c000d1c6:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c000d1cb:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c000d1d0:	3d 18 02 00 00       	cmp    eax,0x218
c000d1d5:	77 11                	ja     c000d1e8 <tcp_parseopt+0x134>
c000d1d7:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c000d1dc:	85 c0                	test   eax,eax
c000d1de:	74 08                	je     c000d1e8 <tcp_parseopt+0x134>
c000d1e0:	66 8b 44 24 02       	mov    ax,WORD PTR [esp+0x2]
c000d1e5:	eb 09                	jmp    c000d1f0 <tcp_parseopt+0x13c>
c000d1e7:	90                   	nop
c000d1e8:	b8 18 02 00 00       	mov    eax,0x218
c000d1ed:	8d 76 00             	lea    esi,[esi+0x0]
c000d1f0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d1f4:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000d1f8:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000d1fd:	83 c0 04             	add    eax,0x4
c000d200:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d205:	eb 39                	jmp    c000d240 <tcp_parseopt+0x18c>
c000d207:	90                   	nop
c000d208:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d20d:	8d 50 01             	lea    edx,[eax+0x1]
c000d210:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d214:	01 d0                	add    eax,edx
c000d216:	8a 00                	mov    al,BYTE PTR [eax]
c000d218:	0f b6 c0             	movzx  eax,al
c000d21b:	85 c0                	test   eax,eax
c000d21d:	74 39                	je     c000d258 <tcp_parseopt+0x1a4>
c000d21f:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d224:	8d 50 01             	lea    edx,[eax+0x1]
c000d227:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d22b:	01 d0                	add    eax,edx
c000d22d:	8a 00                	mov    al,BYTE PTR [eax]
c000d22f:	0f b6 c0             	movzx  eax,al
c000d232:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c000d237:	01 d0                	add    eax,edx
c000d239:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d23e:	66 90                	xchg   ax,ax
c000d240:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c000d245:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000d24a:	39 c2                	cmp    edx,eax
c000d24c:	0f 82 d2 fe ff ff    	jb     c000d124 <tcp_parseopt+0x70>
c000d252:	eb 08                	jmp    c000d25c <tcp_parseopt+0x1a8>
c000d254:	90                   	nop
c000d255:	eb 05                	jmp    c000d25c <tcp_parseopt+0x1a8>
c000d257:	90                   	nop
c000d258:	90                   	nop
c000d259:	8d 76 00             	lea    esi,[esi+0x0]
c000d25c:	83 c4 1c             	add    esp,0x1c
c000d25f:	c3                   	ret    

c000d260 <tcp_listen_input>:
c000d260:	53                   	push   ebx
c000d261:	83 ec 18             	sub    esp,0x18
c000d264:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d269:	0f b6 c0             	movzx  eax,al
c000d26c:	83 e0 10             	and    eax,0x10
c000d26f:	74 4f                	je     c000d2c0 <tcp_listen_input+0x60>
c000d271:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d276:	66 8b 00             	mov    ax,WORD PTR [eax]
c000d279:	0f b7 c8             	movzx  ecx,ax
c000d27c:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d281:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000d285:	0f b7 d0             	movzx  edx,ax
c000d288:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000d28e:	0f b7 d8             	movzx  ebx,ax
c000d291:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d296:	01 c3                	add    ebx,eax
c000d298:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d29d:	83 c0 01             	add    eax,0x1
c000d2a0:	83 ec 08             	sub    esp,0x8
c000d2a3:	51                   	push   ecx
c000d2a4:	52                   	push   edx
c000d2a5:	68 90 68 03 c0       	push   0xc0036890
c000d2aa:	68 98 68 03 c0       	push   0xc0036898
c000d2af:	53                   	push   ebx
c000d2b0:	50                   	push   eax
c000d2b1:	e8 5a 2f 00 00       	call   c0010210 <tcp_rst>
c000d2b6:	83 c4 20             	add    esp,0x20
c000d2b9:	e9 a2 01 00 00       	jmp    c000d460 <tcp_listen_input+0x200>
c000d2be:	66 90                	xchg   ax,ax
c000d2c0:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d2c5:	0f b6 c0             	movzx  eax,al
c000d2c8:	83 e0 02             	and    eax,0x2
c000d2cb:	0f 84 8f 01 00 00    	je     c000d460 <tcp_listen_input+0x200>
c000d2d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2d5:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000d2d8:	0f b6 c0             	movzx  eax,al
c000d2db:	83 ec 0c             	sub    esp,0xc
c000d2de:	50                   	push   eax
c000d2df:	e8 14 e0 ff ff       	call   c000b2f8 <tcp_alloc>
c000d2e4:	83 c4 10             	add    esp,0x10
c000d2e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d2eb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d2f0:	75 16                	jne    c000d308 <tcp_listen_input+0xa8>
c000d2f2:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000d2f8:	83 c0 01             	add    eax,0x1
c000d2fb:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000d301:	b0 ff                	mov    al,0xff
c000d303:	e9 5c 01 00 00       	jmp    c000d464 <tcp_listen_input+0x204>
c000d308:	8b 15 98 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036898
c000d30e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d312:	89 10                	mov    DWORD PTR [eax],edx
c000d314:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d318:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d31b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d31f:	66 89 42 20          	mov    WORD PTR [edx+0x20],ax
c000d323:	8b 15 90 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036890
c000d329:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d32d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d330:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d335:	66 8b 00             	mov    ax,WORD PTR [eax]
c000d338:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d33c:	66 89 42 22          	mov    WORD PTR [edx+0x22],ax
c000d340:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d344:	c7 40 10 03 00 00 00 	mov    DWORD PTR [eax+0x10],0x3
c000d34b:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d350:	8d 50 01             	lea    edx,[eax+0x1]
c000d353:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d357:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d35a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d35e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d361:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d365:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000d368:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d36d:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000d371:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d375:	66 89 42 60          	mov    WORD PTR [edx+0x60],ax
c000d379:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d37d:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000d380:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d384:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000d388:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d38d:	8d 50 ff             	lea    edx,[eax-0x1]
c000d390:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d394:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000d397:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d39b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000d39e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d3a2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000d3a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3a9:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
c000d3ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d3b0:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000d3b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3b7:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c000d3ba:	83 e0 8c             	and    eax,0xffffff8c
c000d3bd:	88 c2                	mov    dl,al
c000d3bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d3c3:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c000d3c6:	8b 15 70 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036870
c000d3cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d3d0:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d3d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d3d7:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000d3dc:	e8 33 36 00 00       	call   c0010a14 <tcp_timer_needed>
c000d3e1:	83 ec 0c             	sub    esp,0xc
c000d3e4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d3e8:	e8 c7 fc ff ff       	call   c000d0b4 <tcp_parseopt>
c000d3ed:	83 c4 10             	add    esp,0x10
c000d3f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d3f4:	8d 50 04             	lea    edx,[eax+0x4]
c000d3f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d3fb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d3fe:	0f b7 c0             	movzx  eax,ax
c000d401:	83 ec 08             	sub    esp,0x8
c000d404:	52                   	push   edx
c000d405:	50                   	push   eax
c000d406:	e8 ad e0 ff ff       	call   c000b4b8 <tcp_eff_send_mss>
c000d40b:	83 c4 10             	add    esp,0x10
c000d40e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d412:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000d416:	83 ec 08             	sub    esp,0x8
c000d419:	6a 12                	push   0x12
c000d41b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d41f:	e8 c4 22 00 00       	call   c000f6e8 <tcp_enqueue_flags>
c000d424:	83 c4 10             	add    esp,0x10
c000d427:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000d42b:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000d430:	85 c0                	test   eax,eax
c000d432:	74 18                	je     c000d44c <tcp_listen_input+0x1ec>
c000d434:	83 ec 08             	sub    esp,0x8
c000d437:	6a 00                	push   0x0
c000d439:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d43d:	e8 9e db ff ff       	call   c000afe0 <tcp_abandon>
c000d442:	83 c4 10             	add    esp,0x10
c000d445:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000d449:	eb 19                	jmp    c000d464 <tcp_listen_input+0x204>
c000d44b:	90                   	nop
c000d44c:	83 ec 0c             	sub    esp,0xc
c000d44f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d453:	e8 2c 29 00 00       	call   c000fd84 <tcp_output>
c000d458:	83 c4 10             	add    esp,0x10
c000d45b:	eb 07                	jmp    c000d464 <tcp_listen_input+0x204>
c000d45d:	8d 76 00             	lea    esi,[esi+0x0]
c000d460:	b0 00                	mov    al,0x0
c000d462:	66 90                	xchg   ax,ax
c000d464:	83 c4 18             	add    esp,0x18
c000d467:	5b                   	pop    ebx
c000d468:	c3                   	ret    
c000d469:	8d 76 00             	lea    esi,[esi+0x0]

c000d46c <tcp_process>:
c000d46c:	53                   	push   ebx
c000d46d:	83 ec 18             	sub    esp,0x18
c000d470:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000d475:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c000d47a:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d47f:	0f b6 c0             	movzx  eax,al
c000d482:	83 e0 04             	and    eax,0x4
c000d485:	0f 84 bd 00 00 00    	je     c000d548 <tcp_process+0xdc>
c000d48b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d48f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d492:	83 f8 02             	cmp    eax,0x2
c000d495:	75 19                	jne    c000d4b0 <tcp_process+0x44>
c000d497:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d49b:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000d49e:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d4a3:	39 c2                	cmp    edx,eax
c000d4a5:	75 45                	jne    c000d4ec <tcp_process+0x80>
c000d4a7:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000d4ac:	eb 3e                	jmp    c000d4ec <tcp_process+0x80>
c000d4ae:	66 90                	xchg   ax,ax
c000d4b0:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d4b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4ba:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d4bd:	29 c2                	sub    edx,eax
c000d4bf:	89 d0                	mov    eax,edx
c000d4c1:	78 29                	js     c000d4ec <tcp_process+0x80>
c000d4c3:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d4c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4cd:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000d4d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4d4:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d4d7:	0f b7 c0             	movzx  eax,ax
c000d4da:	01 c8                	add    eax,ecx
c000d4dc:	29 c2                	sub    edx,eax
c000d4de:	89 d0                	mov    eax,edx
c000d4e0:	85 c0                	test   eax,eax
c000d4e2:	7f 08                	jg     c000d4ec <tcp_process+0x80>
c000d4e4:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000d4e9:	8d 76 00             	lea    esi,[esi+0x0]
c000d4ec:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000d4f1:	85 c0                	test   eax,eax
c000d4f3:	74 4b                	je     c000d540 <tcp_process+0xd4>
c000d4f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4f9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d4fc:	85 c0                	test   eax,eax
c000d4fe:	75 18                	jne    c000d518 <tcp_process+0xac>
c000d500:	83 ec 08             	sub    esp,0x8
c000d503:	68 70 00 03 c0       	push   0xc0030070
c000d508:	68 26 f6 02 c0       	push   0xc002f626
c000d50d:	e8 82 24 01 00       	call   c001f994 <CPrintf>
c000d512:	83 c4 10             	add    esp,0x10
c000d515:	8d 76 00             	lea    esi,[esi+0x0]
c000d518:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000d51d:	83 c8 08             	or     eax,0x8
c000d520:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000d525:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d529:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d52c:	83 e0 fe             	and    eax,0xfffffffe
c000d52f:	88 c2                	mov    dl,al
c000d531:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d535:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d538:	b0 f5                	mov    al,0xf5
c000d53a:	e9 bd 08 00 00       	jmp    c000ddfc <tcp_process+0x990>
c000d53f:	90                   	nop
c000d540:	b0 00                	mov    al,0x0
c000d542:	e9 b5 08 00 00       	jmp    c000ddfc <tcp_process+0x990>
c000d547:	90                   	nop
c000d548:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d54d:	0f b6 c0             	movzx  eax,al
c000d550:	83 e0 02             	and    eax,0x2
c000d553:	74 33                	je     c000d588 <tcp_process+0x11c>
c000d555:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d559:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d55c:	83 f8 02             	cmp    eax,0x2
c000d55f:	74 27                	je     c000d588 <tcp_process+0x11c>
c000d561:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d565:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d568:	83 f8 03             	cmp    eax,0x3
c000d56b:	74 1b                	je     c000d588 <tcp_process+0x11c>
c000d56d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d571:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d574:	83 c8 02             	or     eax,0x2
c000d577:	88 c2                	mov    dl,al
c000d579:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d57d:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d580:	b0 00                	mov    al,0x0
c000d582:	e9 75 08 00 00       	jmp    c000ddfc <tcp_process+0x990>
c000d587:	90                   	nop
c000d588:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d58c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d58f:	0f b6 c0             	movzx  eax,al
c000d592:	83 e0 10             	and    eax,0x10
c000d595:	75 0d                	jne    c000d5a4 <tcp_process+0x138>
c000d597:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000d59d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5a1:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000d5a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5a8:	c6 80 a5 00 00 00 00 	mov    BYTE PTR [eax+0xa5],0x0
c000d5af:	83 ec 0c             	sub    esp,0xc
c000d5b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d5b6:	e8 f9 fa ff ff       	call   c000d0b4 <tcp_parseopt>
c000d5bb:	83 c4 10             	add    esp,0x10
c000d5be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5c2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d5c5:	83 f8 09             	cmp    eax,0x9
c000d5c8:	0f 87 0a 08 00 00    	ja     c000ddd8 <tcp_process+0x96c>
c000d5ce:	8b 04 85 18 02 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfde8]
c000d5d5:	ff e0                	jmp    eax
c000d5d7:	90                   	nop
c000d5d8:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d5dd:	0f b6 c0             	movzx  eax,al
c000d5e0:	83 e0 10             	and    eax,0x10
c000d5e3:	0f 84 ff 01 00 00    	je     c000d7e8 <tcp_process+0x37c>
c000d5e9:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d5ee:	0f b6 c0             	movzx  eax,al
c000d5f1:	83 e0 02             	and    eax,0x2
c000d5f4:	0f 84 ee 01 00 00    	je     c000d7e8 <tcp_process+0x37c>
c000d5fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5fe:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d601:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d604:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d607:	83 ec 0c             	sub    esp,0xc
c000d60a:	50                   	push   eax
c000d60b:	e8 fc 35 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000d610:	83 c4 10             	add    esp,0x10
c000d613:	8d 50 01             	lea    edx,[eax+0x1]
c000d616:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d61b:	39 c2                	cmp    edx,eax
c000d61d:	0f 85 c5 01 00 00    	jne    c000d7e8 <tcp_process+0x37c>
c000d623:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d627:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000d62b:	83 c0 01             	add    eax,0x1
c000d62e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d632:	66 89 42 72          	mov    WORD PTR [edx+0x72],ax
c000d636:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d63b:	8d 50 01             	lea    edx,[eax+0x1]
c000d63e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d642:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d645:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d649:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d64c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d650:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000d653:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000d659:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d65d:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000d660:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d665:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000d669:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d66d:	66 89 42 60          	mov    WORD PTR [edx+0x60],ax
c000d671:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d676:	8d 50 ff             	lea    edx,[eax-0x1]
c000d679:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d67d:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000d680:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d684:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d68b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d68f:	8d 50 04             	lea    edx,[eax+0x4]
c000d692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d696:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d699:	0f b7 c0             	movzx  eax,ax
c000d69c:	83 ec 08             	sub    esp,0x8
c000d69f:	52                   	push   edx
c000d6a0:	50                   	push   eax
c000d6a1:	e8 12 de ff ff       	call   c000b4b8 <tcp_eff_send_mss>
c000d6a6:	83 c4 10             	add    esp,0x10
c000d6a9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d6ad:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000d6b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6b5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d6b8:	89 c2                	mov    edx,eax
c000d6ba:	c1 e2 02             	shl    edx,0x2
c000d6bd:	01 d0                	add    eax,edx
c000d6bf:	d1 e0                	shl    eax,1
c000d6c1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d6c5:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000d6c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6cd:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000d6d1:	0f b7 c0             	movzx  eax,ax
c000d6d4:	83 f8 01             	cmp    eax,0x1
c000d6d7:	75 0b                	jne    c000d6e4 <tcp_process+0x278>
c000d6d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6dd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d6e0:	d1 e0                	shl    eax,1
c000d6e2:	eb 08                	jmp    c000d6ec <tcp_process+0x280>
c000d6e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6e8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d6eb:	90                   	nop
c000d6ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d6f0:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000d6f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6f8:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000d6fb:	0f b7 c0             	movzx  eax,ax
c000d6fe:	85 c0                	test   eax,eax
c000d700:	75 16                	jne    c000d718 <tcp_process+0x2ac>
c000d702:	83 ec 08             	sub    esp,0x8
c000d705:	68 d3 01 03 c0       	push   0xc00301d3
c000d70a:	68 26 f6 02 c0       	push   0xc002f626
c000d70f:	e8 80 22 01 00       	call   c001f994 <CPrintf>
c000d714:	83 c4 10             	add    esp,0x10
c000d717:	90                   	nop
c000d718:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d71c:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000d71f:	83 e8 01             	sub    eax,0x1
c000d722:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d726:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000d72a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d72e:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d735:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d739:	8b 10                	mov    edx,DWORD PTR [eax]
c000d73b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d73f:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000d742:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d746:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d749:	85 c0                	test   eax,eax
c000d74b:	75 0f                	jne    c000d75c <tcp_process+0x2f0>
c000d74d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d751:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000d757:	eb 17                	jmp    c000d770 <tcp_process+0x304>
c000d759:	8d 76 00             	lea    esi,[esi+0x0]
c000d75c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d760:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000d766:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d76a:	c6 40 4e 00          	mov    BYTE PTR [eax+0x4e],0x0
c000d76e:	66 90                	xchg   ax,ax
c000d770:	83 ec 0c             	sub    esp,0xc
c000d773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d777:	e8 50 c7 ff ff       	call   c0009ecc <tcp_seg_free>
c000d77c:	83 c4 10             	add    esp,0x10
c000d77f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d783:	8b 80 90 00 00 00    	mov    eax,DWORD PTR [eax+0x90]
c000d789:	85 c0                	test   eax,eax
c000d78b:	74 27                	je     c000d7b4 <tcp_process+0x348>
c000d78d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d791:	8b 80 90 00 00 00    	mov    eax,DWORD PTR [eax+0x90]
c000d797:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d79b:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000d79e:	83 ec 04             	sub    esp,0x4
c000d7a1:	6a 00                	push   0x0
c000d7a3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d7a7:	52                   	push   edx
c000d7a8:	ff d0                	call   eax
c000d7aa:	83 c4 10             	add    esp,0x10
c000d7ad:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d7b1:	eb 09                	jmp    c000d7bc <tcp_process+0x350>
c000d7b3:	90                   	nop
c000d7b4:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c000d7b9:	8d 76 00             	lea    esi,[esi+0x0]
c000d7bc:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000d7c1:	83 f8 f6             	cmp    eax,0xfffffff6
c000d7c4:	75 0a                	jne    c000d7d0 <tcp_process+0x364>
c000d7c6:	b0 f6                	mov    al,0xf6
c000d7c8:	e9 2f 06 00 00       	jmp    c000ddfc <tcp_process+0x990>
c000d7cd:	8d 76 00             	lea    esi,[esi+0x0]
c000d7d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7d4:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d7d7:	83 c8 02             	or     eax,0x2
c000d7da:	88 c2                	mov    dl,al
c000d7dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7e0:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d7e3:	e9 f4 05 00 00       	jmp    c000dddc <tcp_process+0x970>
c000d7e8:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d7ed:	0f b6 c0             	movzx  eax,al
c000d7f0:	83 e0 10             	and    eax,0x10
c000d7f3:	0f 84 e3 05 00 00    	je     c000dddc <tcp_process+0x970>
c000d7f9:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d7fe:	66 8b 00             	mov    ax,WORD PTR [eax]
c000d801:	0f b7 c8             	movzx  ecx,ax
c000d804:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d809:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000d80d:	0f b7 d0             	movzx  edx,ax
c000d810:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000d816:	0f b7 d8             	movzx  ebx,ax
c000d819:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d81e:	01 c3                	add    ebx,eax
c000d820:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d825:	83 ec 08             	sub    esp,0x8
c000d828:	51                   	push   ecx
c000d829:	52                   	push   edx
c000d82a:	68 90 68 03 c0       	push   0xc0036890
c000d82f:	68 98 68 03 c0       	push   0xc0036898
c000d834:	53                   	push   ebx
c000d835:	50                   	push   eax
c000d836:	e8 d5 29 00 00       	call   c0010210 <tcp_rst>
c000d83b:	83 c4 20             	add    esp,0x20
c000d83e:	e9 99 05 00 00       	jmp    c000dddc <tcp_process+0x970>
c000d843:	90                   	nop
c000d844:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d849:	0f b6 c0             	movzx  eax,al
c000d84c:	83 e0 10             	and    eax,0x10
c000d84f:	0f 84 a7 01 00 00    	je     c000d9fc <tcp_process+0x590>
c000d855:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000d85b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d85f:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000d862:	29 c2                	sub    edx,eax
c000d864:	89 d0                	mov    eax,edx
c000d866:	83 e8 01             	sub    eax,0x1
c000d869:	0f 88 41 01 00 00    	js     c000d9b0 <tcp_process+0x544>
c000d86f:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000d875:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d879:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000d87c:	29 c2                	sub    edx,eax
c000d87e:	89 d0                	mov    eax,edx
c000d880:	85 c0                	test   eax,eax
c000d882:	0f 8f 28 01 00 00    	jg     c000d9b0 <tcp_process+0x544>
c000d888:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d88c:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d893:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d897:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000d89a:	85 c0                	test   eax,eax
c000d89c:	75 16                	jne    c000d8b4 <tcp_process+0x448>
c000d89e:	83 ec 08             	sub    esp,0x8
c000d8a1:	68 e9 01 03 c0       	push   0xc00301e9
c000d8a6:	68 26 f6 02 c0       	push   0xc002f626
c000d8ab:	e8 e4 20 01 00       	call   c001f994 <CPrintf>
c000d8b0:	83 c4 10             	add    esp,0x10
c000d8b3:	90                   	nop
c000d8b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8b8:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000d8bb:	85 c0                	test   eax,eax
c000d8bd:	74 25                	je     c000d8e4 <tcp_process+0x478>
c000d8bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8c3:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000d8c6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d8ca:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000d8cd:	83 ec 04             	sub    esp,0x4
c000d8d0:	6a 00                	push   0x0
c000d8d2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d8d6:	52                   	push   edx
c000d8d7:	ff d0                	call   eax
c000d8d9:	83 c4 10             	add    esp,0x10
c000d8dc:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d8e0:	eb 0a                	jmp    c000d8ec <tcp_process+0x480>
c000d8e2:	66 90                	xchg   ax,ax
c000d8e4:	c6 44 24 0e f2       	mov    BYTE PTR [esp+0xe],0xf2
c000d8e9:	8d 76 00             	lea    esi,[esi+0x0]
c000d8ec:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000d8f1:	85 c0                	test   eax,eax
c000d8f3:	74 23                	je     c000d918 <tcp_process+0x4ac>
c000d8f5:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000d8fa:	83 f8 f6             	cmp    eax,0xfffffff6
c000d8fd:	74 11                	je     c000d910 <tcp_process+0x4a4>
c000d8ff:	83 ec 0c             	sub    esp,0xc
c000d902:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d906:	e8 69 d8 ff ff       	call   c000b174 <tcp_abort>
c000d90b:	83 c4 10             	add    esp,0x10
c000d90e:	66 90                	xchg   ax,ax
c000d910:	b0 f6                	mov    al,0xf6
c000d912:	e9 e5 04 00 00       	jmp    c000ddfc <tcp_process+0x990>
c000d917:	90                   	nop
c000d918:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d91c:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000d920:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000d925:	83 ec 0c             	sub    esp,0xc
c000d928:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d92c:	e8 e7 e0 ff ff       	call   c000ba18 <tcp_receive>
c000d931:	83 c4 10             	add    esp,0x10
c000d934:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d938:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000d93b:	0f b7 c0             	movzx  eax,ax
c000d93e:	85 c0                	test   eax,eax
c000d940:	74 12                	je     c000d954 <tcp_process+0x4e8>
c000d942:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d946:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000d949:	83 e8 01             	sub    eax,0x1
c000d94c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d950:	66 89 42 70          	mov    WORD PTR [edx+0x70],ax
c000d954:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000d959:	83 f8 01             	cmp    eax,0x1
c000d95c:	75 0e                	jne    c000d96c <tcp_process+0x500>
c000d95e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d962:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d965:	d1 e0                	shl    eax,1
c000d967:	eb 0b                	jmp    c000d974 <tcp_process+0x508>
c000d969:	8d 76 00             	lea    esi,[esi+0x0]
c000d96c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d970:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d973:	90                   	nop
c000d974:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d978:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000d97c:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000d981:	0f b6 c0             	movzx  eax,al
c000d984:	83 e0 20             	and    eax,0x20
c000d987:	0f 84 ab 00 00 00    	je     c000da38 <tcp_process+0x5cc>
c000d98d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d991:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d994:	83 c8 02             	or     eax,0x2
c000d997:	88 c2                	mov    dl,al
c000d999:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d99d:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d9a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9a4:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000d9ab:	e9 88 00 00 00       	jmp    c000da38 <tcp_process+0x5cc>
c000d9b0:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d9b5:	66 8b 00             	mov    ax,WORD PTR [eax]
c000d9b8:	0f b7 c8             	movzx  ecx,ax
c000d9bb:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d9c0:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000d9c4:	0f b7 d0             	movzx  edx,ax
c000d9c7:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000d9cd:	0f b7 d8             	movzx  ebx,ax
c000d9d0:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d9d5:	01 c3                	add    ebx,eax
c000d9d7:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d9dc:	83 ec 08             	sub    esp,0x8
c000d9df:	51                   	push   ecx
c000d9e0:	52                   	push   edx
c000d9e1:	68 90 68 03 c0       	push   0xc0036890
c000d9e6:	68 98 68 03 c0       	push   0xc0036898
c000d9eb:	53                   	push   ebx
c000d9ec:	50                   	push   eax
c000d9ed:	e8 1e 28 00 00       	call   c0010210 <tcp_rst>
c000d9f2:	83 c4 20             	add    esp,0x20
c000d9f5:	e9 e6 03 00 00       	jmp    c000dde0 <tcp_process+0x974>
c000d9fa:	66 90                	xchg   ax,ax
c000d9fc:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000da01:	0f b6 c0             	movzx  eax,al
c000da04:	83 e0 02             	and    eax,0x2
c000da07:	0f 84 d3 03 00 00    	je     c000dde0 <tcp_process+0x974>
c000da0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da11:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000da14:	8d 50 ff             	lea    edx,[eax-0x1]
c000da17:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000da1c:	39 c2                	cmp    edx,eax
c000da1e:	0f 85 bc 03 00 00    	jne    c000dde0 <tcp_process+0x974>
c000da24:	83 ec 0c             	sub    esp,0xc
c000da27:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da2b:	e8 e4 29 00 00       	call   c0010414 <tcp_rexmit>
c000da30:	83 c4 10             	add    esp,0x10
c000da33:	e9 a8 03 00 00       	jmp    c000dde0 <tcp_process+0x974>
c000da38:	90                   	nop
c000da39:	e9 a2 03 00 00       	jmp    c000dde0 <tcp_process+0x974>
c000da3e:	66 90                	xchg   ax,ax
c000da40:	83 ec 0c             	sub    esp,0xc
c000da43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da47:	e8 cc df ff ff       	call   c000ba18 <tcp_receive>
c000da4c:	83 c4 10             	add    esp,0x10
c000da4f:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000da54:	0f b6 c0             	movzx  eax,al
c000da57:	83 e0 20             	and    eax,0x20
c000da5a:	0f 84 84 03 00 00    	je     c000dde4 <tcp_process+0x978>
c000da60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da64:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000da67:	83 c8 02             	or     eax,0x2
c000da6a:	88 c2                	mov    dl,al
c000da6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da70:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000da73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da77:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000da7e:	e9 61 03 00 00       	jmp    c000dde4 <tcp_process+0x978>
c000da83:	90                   	nop
c000da84:	83 ec 0c             	sub    esp,0xc
c000da87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da8b:	e8 88 df ff ff       	call   c000ba18 <tcp_receive>
c000da90:	83 c4 10             	add    esp,0x10
c000da93:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000da98:	0f b6 c0             	movzx  eax,al
c000da9b:	83 e0 20             	and    eax,0x20
c000da9e:	0f 84 08 01 00 00    	je     c000dbac <tcp_process+0x740>
c000daa4:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000daa9:	0f b6 c0             	movzx  eax,al
c000daac:	83 e0 10             	and    eax,0x10
c000daaf:	0f 84 d3 00 00 00    	je     c000db88 <tcp_process+0x71c>
c000dab5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dab9:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000dabc:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000dac1:	39 c2                	cmp    edx,eax
c000dac3:	0f 85 bf 00 00 00    	jne    c000db88 <tcp_process+0x71c>
c000dac9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dacd:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dad0:	83 c8 02             	or     eax,0x2
c000dad3:	88 c2                	mov    dl,al
c000dad5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dad9:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dadc:	83 ec 0c             	sub    esp,0xc
c000dadf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dae3:	e8 48 c5 ff ff       	call   c000a030 <tcp_pcb_purge>
c000dae8:	83 c4 10             	add    esp,0x10
c000daeb:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000daf0:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000daf4:	75 12                	jne    c000db08 <tcp_process+0x69c>
c000daf6:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dafb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dafe:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000db03:	eb 4b                	jmp    c000db50 <tcp_process+0x6e4>
c000db05:	8d 76 00             	lea    esi,[esi+0x0]
c000db08:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000db0d:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000db12:	eb 30                	jmp    c000db44 <tcp_process+0x6d8>
c000db14:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000db19:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000db1c:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000db20:	75 12                	jne    c000db34 <tcp_process+0x6c8>
c000db22:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000db27:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000db2b:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000db2e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000db31:	eb 1d                	jmp    c000db50 <tcp_process+0x6e4>
c000db33:	90                   	nop
c000db34:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000db39:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000db3c:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000db41:	8d 76 00             	lea    esi,[esi+0x0]
c000db44:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000db49:	85 c0                	test   eax,eax
c000db4b:	75 c7                	jne    c000db14 <tcp_process+0x6a8>
c000db4d:	8d 76 00             	lea    esi,[esi+0x0]
c000db50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db54:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000db5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db5f:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000db66:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000db6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db70:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000db73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db77:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000db7c:	e8 93 2e 00 00       	call   c0010a14 <tcp_timer_needed>
c000db81:	e9 62 02 00 00       	jmp    c000dde8 <tcp_process+0x97c>
c000db86:	66 90                	xchg   ax,ax
c000db88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db8c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000db8f:	83 c8 02             	or     eax,0x2
c000db92:	88 c2                	mov    dl,al
c000db94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db98:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000db9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db9f:	c7 40 10 08 00 00 00 	mov    DWORD PTR [eax+0x10],0x8
c000dba6:	e9 3d 02 00 00       	jmp    c000dde8 <tcp_process+0x97c>
c000dbab:	90                   	nop
c000dbac:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000dbb1:	0f b6 c0             	movzx  eax,al
c000dbb4:	83 e0 10             	and    eax,0x10
c000dbb7:	0f 84 2b 02 00 00    	je     c000dde8 <tcp_process+0x97c>
c000dbbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbc1:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000dbc4:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000dbc9:	39 c2                	cmp    edx,eax
c000dbcb:	0f 85 17 02 00 00    	jne    c000dde8 <tcp_process+0x97c>
c000dbd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbd5:	c7 40 10 06 00 00 00 	mov    DWORD PTR [eax+0x10],0x6
c000dbdc:	e9 07 02 00 00       	jmp    c000dde8 <tcp_process+0x97c>
c000dbe1:	8d 76 00             	lea    esi,[esi+0x0]
c000dbe4:	83 ec 0c             	sub    esp,0xc
c000dbe7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dbeb:	e8 28 de ff ff       	call   c000ba18 <tcp_receive>
c000dbf0:	83 c4 10             	add    esp,0x10
c000dbf3:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000dbf8:	0f b6 c0             	movzx  eax,al
c000dbfb:	83 e0 20             	and    eax,0x20
c000dbfe:	0f 84 e8 01 00 00    	je     c000ddec <tcp_process+0x980>
c000dc04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc08:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dc0b:	83 c8 02             	or     eax,0x2
c000dc0e:	88 c2                	mov    dl,al
c000dc10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc14:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dc17:	83 ec 0c             	sub    esp,0xc
c000dc1a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dc1e:	e8 0d c4 ff ff       	call   c000a030 <tcp_pcb_purge>
c000dc23:	83 c4 10             	add    esp,0x10
c000dc26:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dc2b:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dc2f:	75 0f                	jne    c000dc40 <tcp_process+0x7d4>
c000dc31:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dc36:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dc39:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000dc3e:	eb 48                	jmp    c000dc88 <tcp_process+0x81c>
c000dc40:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dc45:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dc4a:	eb 30                	jmp    c000dc7c <tcp_process+0x810>
c000dc4c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dc51:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dc54:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dc58:	75 12                	jne    c000dc6c <tcp_process+0x800>
c000dc5a:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dc5f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dc63:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000dc66:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dc69:	eb 1d                	jmp    c000dc88 <tcp_process+0x81c>
c000dc6b:	90                   	nop
c000dc6c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dc71:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dc74:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dc79:	8d 76 00             	lea    esi,[esi+0x0]
c000dc7c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dc81:	85 c0                	test   eax,eax
c000dc83:	75 c7                	jne    c000dc4c <tcp_process+0x7e0>
c000dc85:	8d 76 00             	lea    esi,[esi+0x0]
c000dc88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc8c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000dc93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc97:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000dc9e:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000dca4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dca8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dcab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcaf:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000dcb4:	e8 5b 2d 00 00       	call   c0010a14 <tcp_timer_needed>
c000dcb9:	e9 2e 01 00 00       	jmp    c000ddec <tcp_process+0x980>
c000dcbe:	66 90                	xchg   ax,ax
c000dcc0:	83 ec 0c             	sub    esp,0xc
c000dcc3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dcc7:	e8 4c dd ff ff       	call   c000ba18 <tcp_receive>
c000dccc:	83 c4 10             	add    esp,0x10
c000dccf:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000dcd4:	0f b6 c0             	movzx  eax,al
c000dcd7:	83 e0 10             	and    eax,0x10
c000dcda:	0f 84 10 01 00 00    	je     c000ddf0 <tcp_process+0x984>
c000dce0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dce4:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000dce7:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000dcec:	39 c2                	cmp    edx,eax
c000dcee:	0f 85 fc 00 00 00    	jne    c000ddf0 <tcp_process+0x984>
c000dcf4:	83 ec 0c             	sub    esp,0xc
c000dcf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dcfb:	e8 30 c3 ff ff       	call   c000a030 <tcp_pcb_purge>
c000dd00:	83 c4 10             	add    esp,0x10
c000dd03:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dd08:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dd0c:	75 12                	jne    c000dd20 <tcp_process+0x8b4>
c000dd0e:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dd13:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dd16:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000dd1b:	eb 4b                	jmp    c000dd68 <tcp_process+0x8fc>
c000dd1d:	8d 76 00             	lea    esi,[esi+0x0]
c000dd20:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dd25:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dd2a:	eb 30                	jmp    c000dd5c <tcp_process+0x8f0>
c000dd2c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dd31:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dd34:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dd38:	75 12                	jne    c000dd4c <tcp_process+0x8e0>
c000dd3a:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dd3f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dd43:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000dd46:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dd49:	eb 1d                	jmp    c000dd68 <tcp_process+0x8fc>
c000dd4b:	90                   	nop
c000dd4c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dd51:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dd54:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dd59:	8d 76 00             	lea    esi,[esi+0x0]
c000dd5c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dd61:	85 c0                	test   eax,eax
c000dd63:	75 c7                	jne    c000dd2c <tcp_process+0x8c0>
c000dd65:	8d 76 00             	lea    esi,[esi+0x0]
c000dd68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd6c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000dd73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd77:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000dd7e:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000dd84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd88:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dd8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd8f:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000dd94:	e8 7b 2c 00 00       	call   c0010a14 <tcp_timer_needed>
c000dd99:	eb 55                	jmp    c000ddf0 <tcp_process+0x984>
c000dd9b:	90                   	nop
c000dd9c:	83 ec 0c             	sub    esp,0xc
c000dd9f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dda3:	e8 70 dc ff ff       	call   c000ba18 <tcp_receive>
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000ddb0:	0f b6 c0             	movzx  eax,al
c000ddb3:	83 e0 10             	and    eax,0x10
c000ddb6:	74 3c                	je     c000ddf4 <tcp_process+0x988>
c000ddb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddbc:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000ddbf:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000ddc4:	39 c2                	cmp    edx,eax
c000ddc6:	75 2c                	jne    c000ddf4 <tcp_process+0x988>
c000ddc8:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000ddcd:	83 c8 10             	or     eax,0x10
c000ddd0:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000ddd5:	eb 1d                	jmp    c000ddf4 <tcp_process+0x988>
c000ddd7:	90                   	nop
c000ddd8:	90                   	nop
c000ddd9:	eb 1d                	jmp    c000ddf8 <tcp_process+0x98c>
c000dddb:	90                   	nop
c000dddc:	90                   	nop
c000dddd:	eb 19                	jmp    c000ddf8 <tcp_process+0x98c>
c000dddf:	90                   	nop
c000dde0:	90                   	nop
c000dde1:	eb 15                	jmp    c000ddf8 <tcp_process+0x98c>
c000dde3:	90                   	nop
c000dde4:	90                   	nop
c000dde5:	eb 11                	jmp    c000ddf8 <tcp_process+0x98c>
c000dde7:	90                   	nop
c000dde8:	90                   	nop
c000dde9:	eb 0d                	jmp    c000ddf8 <tcp_process+0x98c>
c000ddeb:	90                   	nop
c000ddec:	90                   	nop
c000dded:	eb 09                	jmp    c000ddf8 <tcp_process+0x98c>
c000ddef:	90                   	nop
c000ddf0:	90                   	nop
c000ddf1:	eb 05                	jmp    c000ddf8 <tcp_process+0x98c>
c000ddf3:	90                   	nop
c000ddf4:	90                   	nop
c000ddf5:	8d 76 00             	lea    esi,[esi+0x0]
c000ddf8:	b0 00                	mov    al,0x0
c000ddfa:	66 90                	xchg   ax,ax
c000ddfc:	83 c4 18             	add    esp,0x18
c000ddff:	5b                   	pop    ebx
c000de00:	c3                   	ret    
c000de01:	8d 76 00             	lea    esi,[esi+0x0]

c000de04 <tcp_input>:
c000de04:	53                   	push   ebx
c000de05:	83 ec 18             	sub    esp,0x18
c000de08:	66 a1 b2 67 03 c0    	mov    ax,ds:0xc00367b2
c000de0e:	83 c0 01             	add    eax,0x1
c000de11:	66 a3 b2 67 03 c0    	mov    ds:0xc00367b2,ax
c000de17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de1b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000de1e:	a3 b8 a8 03 c0       	mov    ds:0xc003a8b8,eax
c000de23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de27:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000de2a:	a1 b8 a8 03 c0       	mov    eax,ds:0xc003a8b8
c000de2f:	66 8b 00             	mov    ax,WORD PTR [eax]
c000de32:	0f b7 c0             	movzx  eax,ax
c000de35:	83 ec 0c             	sub    esp,0xc
c000de38:	50                   	push   eax
c000de39:	e8 aa 2d ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000de3e:	83 c4 10             	add    esp,0x10
c000de41:	0f b7 c0             	movzx  eax,ax
c000de44:	c1 e8 08             	shr    eax,0x8
c000de47:	0f b7 c0             	movzx  eax,ax
c000de4a:	83 e0 0f             	and    eax,0xf
c000de4d:	c1 e0 02             	shl    eax,0x2
c000de50:	01 d8                	add    eax,ebx
c000de52:	a3 bc a8 03 c0       	mov    ds:0xc003a8bc,eax
c000de57:	a1 b8 a8 03 c0       	mov    eax,ds:0xc003a8b8
c000de5c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000de5f:	0f b7 c0             	movzx  eax,ax
c000de62:	83 ec 0c             	sub    esp,0xc
c000de65:	50                   	push   eax
c000de66:	e8 7d 2d ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000de6b:	83 c4 10             	add    esp,0x10
c000de6e:	0f b7 c0             	movzx  eax,ax
c000de71:	c1 e8 08             	shr    eax,0x8
c000de74:	83 e0 0f             	and    eax,0xf
c000de77:	c1 e0 02             	shl    eax,0x2
c000de7a:	f7 d8                	neg    eax
c000de7c:	98                   	cwde   
c000de7d:	83 ec 08             	sub    esp,0x8
c000de80:	50                   	push   eax
c000de81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de85:	e8 2e a2 ff ff       	call   c00080b8 <pbuf_header>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	0f b6 c0             	movzx  eax,al
c000de90:	85 c0                	test   eax,eax
c000de92:	75 10                	jne    c000dea4 <tcp_input+0xa0>
c000de94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de98:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000de9b:	0f b7 c0             	movzx  eax,ax
c000de9e:	83 f8 13             	cmp    eax,0x13
c000dea1:	77 35                	ja     c000ded8 <tcp_input+0xd4>
c000dea3:	90                   	nop
c000dea4:	66 a1 ba 67 03 c0    	mov    ax,ds:0xc00367ba
c000deaa:	83 c0 01             	add    eax,0x1
c000dead:	66 a3 ba 67 03 c0    	mov    ds:0xc00367ba,ax
c000deb3:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000deb9:	83 c0 01             	add    eax,0x1
c000debc:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000dec2:	83 ec 0c             	sub    esp,0xc
c000dec5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dec9:	e8 86 a3 ff ff       	call   c0008254 <pbuf_free>
c000dece:	83 c4 10             	add    esp,0x10
c000ded1:	e9 fa 09 00 00       	jmp    c000e8d0 <tcp_input+0xacc>
c000ded6:	66 90                	xchg   ax,ax
c000ded8:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000dedd:	83 ec 08             	sub    esp,0x8
c000dee0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dee4:	50                   	push   eax
c000dee5:	e8 5e 5e 00 00       	call   c0013d48 <ip4_addr_isbroadcast>
c000deea:	83 c4 10             	add    esp,0x10
c000deed:	0f b6 c0             	movzx  eax,al
c000def0:	85 c0                	test   eax,eax
c000def2:	75 14                	jne    c000df08 <tcp_input+0x104>
c000def4:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000def9:	25 f0 00 00 00       	and    eax,0xf0
c000defe:	3d e0 00 00 00       	cmp    eax,0xe0
c000df03:	75 37                	jne    c000df3c <tcp_input+0x138>
c000df05:	8d 76 00             	lea    esi,[esi+0x0]
c000df08:	66 a1 c0 67 03 c0    	mov    ax,ds:0xc00367c0
c000df0e:	83 c0 01             	add    eax,0x1
c000df11:	66 a3 c0 67 03 c0    	mov    ds:0xc00367c0,ax
c000df17:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000df1d:	83 c0 01             	add    eax,0x1
c000df20:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000df26:	83 ec 0c             	sub    esp,0xc
c000df29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000df2d:	e8 22 a3 ff ff       	call   c0008254 <pbuf_free>
c000df32:	83 c4 10             	add    esp,0x10
c000df35:	e9 96 09 00 00       	jmp    c000e8d0 <tcp_input+0xacc>
c000df3a:	66 90                	xchg   ax,ax
c000df3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df40:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000df43:	0f b7 c0             	movzx  eax,ax
c000df46:	83 ec 0c             	sub    esp,0xc
c000df49:	50                   	push   eax
c000df4a:	6a 06                	push   0x6
c000df4c:	68 98 68 03 c0       	push   0xc0036898
c000df51:	68 90 68 03 c0       	push   0xc0036890
c000df56:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000df5a:	e8 11 51 00 00       	call   c0013070 <inet_chksum_pseudo>
c000df5f:	83 c4 20             	add    esp,0x20
c000df62:	0f b7 c0             	movzx  eax,ax
c000df65:	85 c0                	test   eax,eax
c000df67:	74 33                	je     c000df9c <tcp_input+0x198>
c000df69:	66 a1 b8 67 03 c0    	mov    ax,ds:0xc00367b8
c000df6f:	83 c0 01             	add    eax,0x1
c000df72:	66 a3 b8 67 03 c0    	mov    ds:0xc00367b8,ax
c000df78:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000df7e:	83 c0 01             	add    eax,0x1
c000df81:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000df87:	83 ec 0c             	sub    esp,0xc
c000df8a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000df8e:	e8 c1 a2 ff ff       	call   c0008254 <pbuf_free>
c000df93:	83 c4 10             	add    esp,0x10
c000df96:	e9 35 09 00 00       	jmp    c000e8d0 <tcp_input+0xacc>
c000df9b:	90                   	nop
c000df9c:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000dfa1:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000dfa5:	0f b7 c0             	movzx  eax,ax
c000dfa8:	83 ec 0c             	sub    esp,0xc
c000dfab:	50                   	push   eax
c000dfac:	e8 37 2c ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000dfb1:	83 c4 10             	add    esp,0x10
c000dfb4:	0f b7 c0             	movzx  eax,ax
c000dfb7:	c1 e8 0c             	shr    eax,0xc
c000dfba:	88 44 24 02          	mov    BYTE PTR [esp+0x2],al
c000dfbe:	0f b6 44 24 02       	movzx  eax,BYTE PTR [esp+0x2]
c000dfc3:	ba 00 00 00 00       	mov    edx,0x0
c000dfc8:	89 d1                	mov    ecx,edx
c000dfca:	29 c1                	sub    ecx,eax
c000dfcc:	89 c8                	mov    eax,ecx
c000dfce:	c1 e0 02             	shl    eax,0x2
c000dfd1:	98                   	cwde   
c000dfd2:	83 ec 08             	sub    esp,0x8
c000dfd5:	50                   	push   eax
c000dfd6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dfda:	e8 d9 a0 ff ff       	call   c00080b8 <pbuf_header>
c000dfdf:	83 c4 10             	add    esp,0x10
c000dfe2:	0f b6 c0             	movzx  eax,al
c000dfe5:	85 c0                	test   eax,eax
c000dfe7:	74 33                	je     c000e01c <tcp_input+0x218>
c000dfe9:	66 a1 ba 67 03 c0    	mov    ax,ds:0xc00367ba
c000dfef:	83 c0 01             	add    eax,0x1
c000dff2:	66 a3 ba 67 03 c0    	mov    ds:0xc00367ba,ax
c000dff8:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000dffe:	83 c0 01             	add    eax,0x1
c000e001:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e007:	83 ec 0c             	sub    esp,0xc
c000e00a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e00e:	e8 41 a2 ff ff       	call   c0008254 <pbuf_free>
c000e013:	83 c4 10             	add    esp,0x10
c000e016:	e9 b5 08 00 00       	jmp    c000e8d0 <tcp_input+0xacc>
c000e01b:	90                   	nop
c000e01c:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e021:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e024:	0f b7 c0             	movzx  eax,ax
c000e027:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e02d:	83 ec 0c             	sub    esp,0xc
c000e030:	50                   	push   eax
c000e031:	e8 b2 2b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e036:	83 c4 10             	add    esp,0x10
c000e039:	66 89 03             	mov    WORD PTR [ebx],ax
c000e03c:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e041:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e045:	0f b7 c0             	movzx  eax,ax
c000e048:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e04e:	83 ec 0c             	sub    esp,0xc
c000e051:	50                   	push   eax
c000e052:	e8 91 2b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e057:	83 c4 10             	add    esp,0x10
c000e05a:	66 89 43 02          	mov    WORD PTR [ebx+0x2],ax
c000e05e:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e063:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e066:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e06c:	83 ec 0c             	sub    esp,0xc
c000e06f:	50                   	push   eax
c000e070:	e8 97 2b ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000e075:	83 c4 10             	add    esp,0x10
c000e078:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e07b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e07e:	a3 b4 a8 03 c0       	mov    ds:0xc003a8b4,eax
c000e083:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e088:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e08b:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e091:	83 ec 0c             	sub    esp,0xc
c000e094:	50                   	push   eax
c000e095:	e8 72 2b ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000e09a:	83 c4 10             	add    esp,0x10
c000e09d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000e0a0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e0a3:	a3 b0 a8 03 c0       	mov    ds:0xc003a8b0,eax
c000e0a8:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e0ad:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000e0b1:	0f b7 c0             	movzx  eax,ax
c000e0b4:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e0ba:	83 ec 0c             	sub    esp,0xc
c000e0bd:	50                   	push   eax
c000e0be:	e8 25 2b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e0c3:	83 c4 10             	add    esp,0x10
c000e0c6:	66 89 43 0e          	mov    WORD PTR [ebx+0xe],ax
c000e0ca:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e0cf:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000e0d3:	0f b7 c0             	movzx  eax,ax
c000e0d6:	83 ec 0c             	sub    esp,0xc
c000e0d9:	50                   	push   eax
c000e0da:	e8 09 2b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e0df:	83 c4 10             	add    esp,0x10
c000e0e2:	83 e0 3f             	and    eax,0x3f
c000e0e5:	a2 ac a8 03 c0       	mov    ds:0xc003a8ac,al
c000e0ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0ee:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000e0f1:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000e0f6:	0f b6 c0             	movzx  eax,al
c000e0f9:	83 e0 03             	and    eax,0x3
c000e0fc:	0f 95 c0             	setne  al
c000e0ff:	0f b6 c0             	movzx  eax,al
c000e102:	01 d0                	add    eax,edx
c000e104:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000e10a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e112:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000e117:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e11b:	e9 50 01 00 00       	jmp    c000e270 <tcp_input+0x46c>
c000e120:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e124:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e127:	85 c0                	test   eax,eax
c000e129:	75 15                	jne    c000e140 <tcp_input+0x33c>
c000e12b:	83 ec 08             	sub    esp,0x8
c000e12e:	68 90 00 03 c0       	push   0xc0030090
c000e133:	68 26 f6 02 c0       	push   0xc002f626
c000e138:	e8 57 18 01 00       	call   c001f994 <CPrintf>
c000e13d:	83 c4 10             	add    esp,0x10
c000e140:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e144:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e147:	83 f8 0a             	cmp    eax,0xa
c000e14a:	75 18                	jne    c000e164 <tcp_input+0x360>
c000e14c:	83 ec 08             	sub    esp,0x8
c000e14f:	68 b8 00 03 c0       	push   0xc00300b8
c000e154:	68 26 f6 02 c0       	push   0xc002f626
c000e159:	e8 36 18 01 00       	call   c001f994 <CPrintf>
c000e15e:	83 c4 10             	add    esp,0x10
c000e161:	8d 76 00             	lea    esi,[esi+0x0]
c000e164:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e168:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e16b:	83 f8 01             	cmp    eax,0x1
c000e16e:	75 18                	jne    c000e188 <tcp_input+0x384>
c000e170:	83 ec 08             	sub    esp,0x8
c000e173:	68 e4 00 03 c0       	push   0xc00300e4
c000e178:	68 26 f6 02 c0       	push   0xc002f626
c000e17d:	e8 12 18 01 00       	call   c001f994 <CPrintf>
c000e182:	83 c4 10             	add    esp,0x10
c000e185:	8d 76 00             	lea    esi,[esi+0x0]
c000e188:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e18c:	66 8b 50 22          	mov    dx,WORD PTR [eax+0x22]
c000e190:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e195:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e198:	0f b7 d2             	movzx  edx,dx
c000e19b:	0f b7 c0             	movzx  eax,ax
c000e19e:	39 c2                	cmp    edx,eax
c000e1a0:	0f 85 b6 00 00 00    	jne    c000e25c <tcp_input+0x458>
c000e1a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e1aa:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e1ad:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e1b2:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e1b6:	0f b7 d2             	movzx  edx,dx
c000e1b9:	0f b7 c0             	movzx  eax,ax
c000e1bc:	39 c2                	cmp    edx,eax
c000e1be:	0f 85 98 00 00 00    	jne    c000e25c <tcp_input+0x458>
c000e1c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e1c8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e1cb:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c000e1d0:	39 c2                	cmp    edx,eax
c000e1d2:	0f 85 84 00 00 00    	jne    c000e25c <tcp_input+0x458>
c000e1d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e1dc:	8b 10                	mov    edx,DWORD PTR [eax]
c000e1de:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e1e3:	39 c2                	cmp    edx,eax
c000e1e5:	75 75                	jne    c000e25c <tcp_input+0x458>
c000e1e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e1eb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e1ee:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e1f2:	75 18                	jne    c000e20c <tcp_input+0x408>
c000e1f4:	83 ec 08             	sub    esp,0x8
c000e1f7:	68 0c 01 03 c0       	push   0xc003010c
c000e1fc:	68 26 f6 02 c0       	push   0xc002f626
c000e201:	e8 8e 17 01 00       	call   c001f994 <CPrintf>
c000e206:	83 c4 10             	add    esp,0x10
c000e209:	8d 76 00             	lea    esi,[esi+0x0]
c000e20c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e211:	74 25                	je     c000e238 <tcp_input+0x434>
c000e213:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e217:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e21a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e21e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e221:	8b 15 70 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036870
c000e227:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e22b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e22e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e232:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000e237:	90                   	nop
c000e238:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e23c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e23f:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e243:	75 3b                	jne    c000e280 <tcp_input+0x47c>
c000e245:	83 ec 08             	sub    esp,0x8
c000e248:	68 38 01 03 c0       	push   0xc0030138
c000e24d:	68 26 f6 02 c0       	push   0xc002f626
c000e252:	e8 3d 17 01 00       	call   c001f994 <CPrintf>
c000e257:	83 c4 10             	add    esp,0x10
c000e25a:	eb 24                	jmp    c000e280 <tcp_input+0x47c>
c000e25c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e260:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e264:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e268:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e26b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e26f:	90                   	nop
c000e270:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e275:	0f 85 a5 fe ff ff    	jne    c000e120 <tcp_input+0x31c>
c000e27b:	eb 07                	jmp    c000e284 <tcp_input+0x480>
c000e27d:	8d 76 00             	lea    esi,[esi+0x0]
c000e280:	90                   	nop
c000e281:	8d 76 00             	lea    esi,[esi+0x0]
c000e284:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e289:	0f 85 89 01 00 00    	jne    c000e418 <tcp_input+0x614>
c000e28f:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000e294:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e298:	e9 ab 00 00 00       	jmp    c000e348 <tcp_input+0x544>
c000e29d:	8d 76 00             	lea    esi,[esi+0x0]
c000e2a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2a4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e2a7:	83 f8 0a             	cmp    eax,0xa
c000e2aa:	74 18                	je     c000e2c4 <tcp_input+0x4c0>
c000e2ac:	83 ec 08             	sub    esp,0x8
c000e2af:	68 64 01 03 c0       	push   0xc0030164
c000e2b4:	68 26 f6 02 c0       	push   0xc002f626
c000e2b9:	e8 d6 16 01 00       	call   c001f994 <CPrintf>
c000e2be:	83 c4 10             	add    esp,0x10
c000e2c1:	8d 76 00             	lea    esi,[esi+0x0]
c000e2c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2c8:	66 8b 50 22          	mov    dx,WORD PTR [eax+0x22]
c000e2cc:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e2d1:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e2d4:	0f b7 d2             	movzx  edx,dx
c000e2d7:	0f b7 c0             	movzx  eax,ax
c000e2da:	39 c2                	cmp    edx,eax
c000e2dc:	75 5e                	jne    c000e33c <tcp_input+0x538>
c000e2de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2e2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e2e5:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e2ea:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e2ee:	0f b7 d2             	movzx  edx,dx
c000e2f1:	0f b7 c0             	movzx  eax,ax
c000e2f4:	39 c2                	cmp    edx,eax
c000e2f6:	75 44                	jne    c000e33c <tcp_input+0x538>
c000e2f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2fc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e2ff:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c000e304:	39 c2                	cmp    edx,eax
c000e306:	75 34                	jne    c000e33c <tcp_input+0x538>
c000e308:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e30c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e30e:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e313:	39 c2                	cmp    edx,eax
c000e315:	75 25                	jne    c000e33c <tcp_input+0x538>
c000e317:	83 ec 0c             	sub    esp,0xc
c000e31a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e31e:	e8 81 d4 ff ff       	call   c000b7a4 <tcp_timewait_input>
c000e323:	83 c4 10             	add    esp,0x10
c000e326:	83 ec 0c             	sub    esp,0xc
c000e329:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e32d:	e8 22 9f ff ff       	call   c0008254 <pbuf_free>
c000e332:	83 c4 10             	add    esp,0x10
c000e335:	e9 96 05 00 00       	jmp    c000e8d0 <tcp_input+0xacc>
c000e33a:	66 90                	xchg   ax,ax
c000e33c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e340:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e343:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e347:	90                   	nop
c000e348:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e34d:	0f 85 4d ff ff ff    	jne    c000e2a0 <tcp_input+0x49c>
c000e353:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e35b:	a1 78 68 03 c0       	mov    eax,ds:0xc0036878
c000e360:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e364:	eb 52                	jmp    c000e3b8 <tcp_input+0x5b4>
c000e366:	66 90                	xchg   ax,ax
c000e368:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e36c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e36f:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e374:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e378:	0f b7 d2             	movzx  edx,dx
c000e37b:	0f b7 c0             	movzx  eax,ax
c000e37e:	39 c2                	cmp    edx,eax
c000e380:	75 22                	jne    c000e3a4 <tcp_input+0x5a0>
c000e382:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e386:	8b 10                	mov    edx,DWORD PTR [eax]
c000e388:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e38d:	39 c2                	cmp    edx,eax
c000e38f:	74 2f                	je     c000e3c0 <tcp_input+0x5bc>
c000e391:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e395:	85 c0                	test   eax,eax
c000e397:	74 27                	je     c000e3c0 <tcp_input+0x5bc>
c000e399:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e39d:	8b 00                	mov    eax,DWORD PTR [eax]
c000e39f:	85 c0                	test   eax,eax
c000e3a1:	74 1d                	je     c000e3c0 <tcp_input+0x5bc>
c000e3a3:	90                   	nop
c000e3a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e3ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3b0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e3b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e3b7:	90                   	nop
c000e3b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000e3bd:	75 a9                	jne    c000e368 <tcp_input+0x564>
c000e3bf:	90                   	nop
c000e3c0:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000e3c5:	74 51                	je     c000e418 <tcp_input+0x614>
c000e3c7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e3cc:	74 26                	je     c000e3f4 <tcp_input+0x5f0>
c000e3ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3d2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e3d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3d9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e3dc:	8b 15 78 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036878
c000e3e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3e6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e3e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3ed:	a3 78 68 03 c0       	mov    ds:0xc0036878,eax
c000e3f2:	66 90                	xchg   ax,ax
c000e3f4:	83 ec 0c             	sub    esp,0xc
c000e3f7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e3fb:	e8 60 ee ff ff       	call   c000d260 <tcp_listen_input>
c000e400:	83 c4 10             	add    esp,0x10
c000e403:	83 ec 0c             	sub    esp,0xc
c000e406:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e40a:	e8 45 9e ff ff       	call   c0008254 <pbuf_free>
c000e40f:	83 c4 10             	add    esp,0x10
c000e412:	e9 b9 04 00 00       	jmp    c000e8d0 <tcp_input+0xacc>
c000e417:	90                   	nop
c000e418:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e41d:	0f 84 19 04 00 00    	je     c000e83c <tcp_input+0xa38>
c000e423:	c7 05 c0 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8c0,0x0
c000e42d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e431:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e434:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000e43a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e43e:	a3 c4 a8 03 c0       	mov    ds:0xc003a8c4,eax
c000e443:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e448:	a3 cc a8 03 c0       	mov    ds:0xc003a8cc,eax
c000e44d:	c7 05 a4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8a4,0x0
c000e457:	c6 05 a8 a8 03 c0 00 	mov    BYTE PTR ds:0xc003a8a8,0x0
c000e45e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e462:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e468:	85 c0                	test   eax,eax
c000e46a:	0f 84 b4 00 00 00    	je     c000e524 <tcp_input+0x720>
c000e470:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e474:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e47a:	85 c0                	test   eax,eax
c000e47c:	74 2e                	je     c000e4ac <tcp_input+0x6a8>
c000e47e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e482:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e488:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e48c:	8b 8a 84 00 00 00    	mov    ecx,DWORD PTR [edx+0x84]
c000e492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e496:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e499:	6a 00                	push   0x0
c000e49b:	51                   	push   ecx
c000e49c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e4a0:	52                   	push   edx
c000e4a1:	ff d0                	call   eax
c000e4a3:	83 c4 10             	add    esp,0x10
c000e4a6:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e4aa:	eb 20                	jmp    c000e4cc <tcp_input+0x6c8>
c000e4ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4b0:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e4b6:	6a 00                	push   0x0
c000e4b8:	50                   	push   eax
c000e4b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e4bd:	6a 00                	push   0x0
c000e4bf:	e8 b8 c8 ff ff       	call   c000ad7c <tcp_recv_null>
c000e4c4:	83 c4 10             	add    esp,0x10
c000e4c7:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e4cb:	90                   	nop
c000e4cc:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e4d1:	85 c0                	test   eax,eax
c000e4d3:	75 13                	jne    c000e4e8 <tcp_input+0x6e4>
c000e4d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4d9:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000e4e3:	eb 3f                	jmp    c000e524 <tcp_input+0x720>
c000e4e5:	8d 76 00             	lea    esi,[esi+0x0]
c000e4e8:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e4ed:	83 f8 f6             	cmp    eax,0xfffffff6
c000e4f0:	74 0e                	je     c000e500 <tcp_input+0x6fc>
c000e4f2:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000e4f8:	0f b7 c0             	movzx  eax,ax
c000e4fb:	85 c0                	test   eax,eax
c000e4fd:	74 25                	je     c000e524 <tcp_input+0x720>
c000e4ff:	90                   	nop
c000e500:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e506:	83 c0 01             	add    eax,0x1
c000e509:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e50f:	83 ec 0c             	sub    esp,0xc
c000e512:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e516:	e8 39 9d ff ff       	call   c0008254 <pbuf_free>
c000e51b:	83 c4 10             	add    esp,0x10
c000e51e:	e9 ad 03 00 00       	jmp    c000e8d0 <tcp_input+0xacc>
c000e523:	90                   	nop
c000e524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e528:	a3 88 68 03 c0       	mov    ds:0xc0036888,eax
c000e52d:	83 ec 0c             	sub    esp,0xc
c000e530:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e534:	e8 33 ef ff ff       	call   c000d46c <tcp_process>
c000e539:	83 c4 10             	add    esp,0x10
c000e53c:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e540:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e545:	83 f8 f6             	cmp    eax,0xfffffff6
c000e548:	0f 84 9a 02 00 00    	je     c000e7e8 <tcp_input+0x9e4>
c000e54e:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e553:	0f b6 c0             	movzx  eax,al
c000e556:	83 e0 08             	and    eax,0x8
c000e559:	74 59                	je     c000e5b4 <tcp_input+0x7b0>
c000e55b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e55f:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000e565:	85 c0                	test   eax,eax
c000e567:	74 1f                	je     c000e588 <tcp_input+0x784>
c000e569:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e56d:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000e573:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e577:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e57a:	83 ec 08             	sub    esp,0x8
c000e57d:	6a f5                	push   0xfffffff5
c000e57f:	52                   	push   edx
c000e580:	ff d0                	call   eax
c000e582:	83 c4 10             	add    esp,0x10
c000e585:	8d 76 00             	lea    esi,[esi+0x0]
c000e588:	83 ec 08             	sub    esp,0x8
c000e58b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e58f:	68 70 68 03 c0       	push   0xc0036870
c000e594:	e8 ff c2 ff ff       	call   c000a898 <tcp_pcb_remove>
c000e599:	83 c4 10             	add    esp,0x10
c000e59c:	83 ec 08             	sub    esp,0x8
c000e59f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e5a3:	6a 02                	push   0x2
c000e5a5:	e8 ee 93 ff ff       	call   c0007998 <memp_free>
c000e5aa:	83 c4 10             	add    esp,0x10
c000e5ad:	e9 46 02 00 00       	jmp    c000e7f8 <tcp_input+0x9f4>
c000e5b2:	66 90                	xchg   ax,ax
c000e5b4:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e5b9:	0f b6 c0             	movzx  eax,al
c000e5bc:	83 e0 10             	and    eax,0x10
c000e5bf:	74 2b                	je     c000e5ec <tcp_input+0x7e8>
c000e5c1:	83 ec 08             	sub    esp,0x8
c000e5c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e5c8:	68 70 68 03 c0       	push   0xc0036870
c000e5cd:	e8 c6 c2 ff ff       	call   c000a898 <tcp_pcb_remove>
c000e5d2:	83 c4 10             	add    esp,0x10
c000e5d5:	83 ec 08             	sub    esp,0x8
c000e5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e5dc:	6a 02                	push   0x2
c000e5de:	e8 b5 93 ff ff       	call   c0007998 <memp_free>
c000e5e3:	83 c4 10             	add    esp,0x10
c000e5e6:	e9 0d 02 00 00       	jmp    c000e7f8 <tcp_input+0x9f4>
c000e5eb:	90                   	nop
c000e5ec:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000e5f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5f5:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000e5f8:	0f b7 c0             	movzx  eax,ax
c000e5fb:	85 c0                	test   eax,eax
c000e5fd:	74 55                	je     c000e654 <tcp_input+0x850>
c000e5ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e603:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c000e609:	85 c0                	test   eax,eax
c000e60b:	74 2f                	je     c000e63c <tcp_input+0x838>
c000e60d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e611:	8b 90 88 00 00 00    	mov    edx,DWORD PTR [eax+0x88]
c000e617:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e61b:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000e61e:	0f b7 c8             	movzx  ecx,ax
c000e621:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e625:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000e628:	83 ec 04             	sub    esp,0x4
c000e62b:	51                   	push   ecx
c000e62c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e630:	50                   	push   eax
c000e631:	ff d2                	call   edx
c000e633:	83 c4 10             	add    esp,0x10
c000e636:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e63a:	eb 08                	jmp    c000e644 <tcp_input+0x840>
c000e63c:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000e641:	8d 76 00             	lea    esi,[esi+0x0]
c000e644:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e649:	83 f8 f6             	cmp    eax,0xfffffff6
c000e64c:	0f 84 9a 01 00 00    	je     c000e7ec <tcp_input+0x9e8>
c000e652:	66 90                	xchg   ax,ax
c000e654:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e659:	85 c0                	test   eax,eax
c000e65b:	0f 84 f3 00 00 00    	je     c000e754 <tcp_input+0x950>
c000e661:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e665:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e66b:	85 c0                	test   eax,eax
c000e66d:	74 15                	je     c000e684 <tcp_input+0x880>
c000e66f:	83 ec 08             	sub    esp,0x8
c000e672:	68 fd 01 03 c0       	push   0xc00301fd
c000e677:	68 26 f6 02 c0       	push   0xc002f626
c000e67c:	e8 13 13 01 00       	call   c001f994 <CPrintf>
c000e681:	83 c4 10             	add    esp,0x10
c000e684:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e688:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000e68b:	0f b6 c0             	movzx  eax,al
c000e68e:	83 e0 10             	and    eax,0x10
c000e691:	74 25                	je     c000e6b8 <tcp_input+0x8b4>
c000e693:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e698:	83 ec 0c             	sub    esp,0xc
c000e69b:	50                   	push   eax
c000e69c:	e8 b3 9b ff ff       	call   c0008254 <pbuf_free>
c000e6a1:	83 c4 10             	add    esp,0x10
c000e6a4:	83 ec 0c             	sub    esp,0xc
c000e6a7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e6ab:	e8 c4 ca ff ff       	call   c000b174 <tcp_abort>
c000e6b0:	83 c4 10             	add    esp,0x10
c000e6b3:	e9 40 01 00 00       	jmp    c000e7f8 <tcp_input+0x9f4>
c000e6b8:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000e6bd:	0f b6 c0             	movzx  eax,al
c000e6c0:	83 e0 08             	and    eax,0x8
c000e6c3:	74 13                	je     c000e6d8 <tcp_input+0x8d4>
c000e6c5:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e6ca:	8a 50 0d             	mov    dl,BYTE PTR [eax+0xd]
c000e6cd:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e6d2:	83 ca 01             	or     edx,0x1
c000e6d5:	88 50 0d             	mov    BYTE PTR [eax+0xd],dl
c000e6d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e6dc:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e6e2:	85 c0                	test   eax,eax
c000e6e4:	74 2a                	je     c000e710 <tcp_input+0x90c>
c000e6e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e6ea:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e6f0:	8b 0d a4 a8 03 c0    	mov    ecx,DWORD PTR ds:0xc003a8a4
c000e6f6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e6fa:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e6fd:	6a 00                	push   0x0
c000e6ff:	51                   	push   ecx
c000e700:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e704:	52                   	push   edx
c000e705:	ff d0                	call   eax
c000e707:	83 c4 10             	add    esp,0x10
c000e70a:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e70e:	eb 1c                	jmp    c000e72c <tcp_input+0x928>
c000e710:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e715:	6a 00                	push   0x0
c000e717:	50                   	push   eax
c000e718:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e71c:	6a 00                	push   0x0
c000e71e:	e8 59 c6 ff ff       	call   c000ad7c <tcp_recv_null>
c000e723:	83 c4 10             	add    esp,0x10
c000e726:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e72a:	66 90                	xchg   ax,ax
c000e72c:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e731:	83 f8 f6             	cmp    eax,0xfffffff6
c000e734:	0f 84 b6 00 00 00    	je     c000e7f0 <tcp_input+0x9ec>
c000e73a:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e73f:	85 c0                	test   eax,eax
c000e741:	74 11                	je     c000e754 <tcp_input+0x950>
c000e743:	8b 15 a4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8a4
c000e749:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e74d:	89 90 84 00 00 00    	mov    DWORD PTR [eax+0x84],edx
c000e753:	90                   	nop
c000e754:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e759:	0f b6 c0             	movzx  eax,al
c000e75c:	83 e0 20             	and    eax,0x20
c000e75f:	74 6b                	je     c000e7cc <tcp_input+0x9c8>
c000e761:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e765:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000e768:	0f b7 c0             	movzx  eax,ax
c000e76b:	3d 60 08 00 00       	cmp    eax,0x860
c000e770:	74 12                	je     c000e784 <tcp_input+0x980>
c000e772:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e776:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000e779:	83 c0 01             	add    eax,0x1
c000e77c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e780:	66 89 42 2c          	mov    WORD PTR [edx+0x2c],ax
c000e784:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e788:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e78e:	85 c0                	test   eax,eax
c000e790:	74 26                	je     c000e7b8 <tcp_input+0x9b4>
c000e792:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e796:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e79c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e7a0:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e7a3:	6a 00                	push   0x0
c000e7a5:	6a 00                	push   0x0
c000e7a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e7ab:	52                   	push   edx
c000e7ac:	ff d0                	call   eax
c000e7ae:	83 c4 10             	add    esp,0x10
c000e7b1:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e7b5:	eb 09                	jmp    c000e7c0 <tcp_input+0x9bc>
c000e7b7:	90                   	nop
c000e7b8:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000e7bd:	8d 76 00             	lea    esi,[esi+0x0]
c000e7c0:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e7c5:	83 f8 f6             	cmp    eax,0xfffffff6
c000e7c8:	74 2a                	je     c000e7f4 <tcp_input+0x9f0>
c000e7ca:	66 90                	xchg   ax,ax
c000e7cc:	c7 05 88 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036888,0x0
c000e7d6:	83 ec 0c             	sub    esp,0xc
c000e7d9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e7dd:	e8 a2 15 00 00       	call   c000fd84 <tcp_output>
c000e7e2:	83 c4 10             	add    esp,0x10
c000e7e5:	eb 11                	jmp    c000e7f8 <tcp_input+0x9f4>
c000e7e7:	90                   	nop
c000e7e8:	90                   	nop
c000e7e9:	eb 0d                	jmp    c000e7f8 <tcp_input+0x9f4>
c000e7eb:	90                   	nop
c000e7ec:	90                   	nop
c000e7ed:	eb 09                	jmp    c000e7f8 <tcp_input+0x9f4>
c000e7ef:	90                   	nop
c000e7f0:	90                   	nop
c000e7f1:	eb 05                	jmp    c000e7f8 <tcp_input+0x9f4>
c000e7f3:	90                   	nop
c000e7f4:	90                   	nop
c000e7f5:	8d 76 00             	lea    esi,[esi+0x0]
c000e7f8:	c7 05 88 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036888,0x0
c000e802:	c7 05 a4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8a4,0x0
c000e80c:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000e811:	85 c0                	test   eax,eax
c000e813:	0f 84 b7 00 00 00    	je     c000e8d0 <tcp_input+0xacc>
c000e819:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000e81e:	83 ec 0c             	sub    esp,0xc
c000e821:	50                   	push   eax
c000e822:	e8 2d 9a ff ff       	call   c0008254 <pbuf_free>
c000e827:	83 c4 10             	add    esp,0x10
c000e82a:	c7 05 c4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8c4,0x0
c000e834:	e9 97 00 00 00       	jmp    c000e8d0 <tcp_input+0xacc>
c000e839:	8d 76 00             	lea    esi,[esi+0x0]
c000e83c:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e841:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000e845:	0f b7 c0             	movzx  eax,ax
c000e848:	83 ec 0c             	sub    esp,0xc
c000e84b:	50                   	push   eax
c000e84c:	e8 97 23 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e851:	83 c4 10             	add    esp,0x10
c000e854:	0f b7 c0             	movzx  eax,ax
c000e857:	83 e0 04             	and    eax,0x4
c000e85a:	75 64                	jne    c000e8c0 <tcp_input+0xabc>
c000e85c:	66 a1 c0 67 03 c0    	mov    ax,ds:0xc00367c0
c000e862:	83 c0 01             	add    eax,0x1
c000e865:	66 a3 c0 67 03 c0    	mov    ds:0xc00367c0,ax
c000e86b:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e871:	83 c0 01             	add    eax,0x1
c000e874:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e87a:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e87f:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e882:	0f b7 c8             	movzx  ecx,ax
c000e885:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e88a:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e88e:	0f b7 d0             	movzx  edx,ax
c000e891:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000e897:	0f b7 d8             	movzx  ebx,ax
c000e89a:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000e89f:	01 c3                	add    ebx,eax
c000e8a1:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000e8a6:	83 ec 08             	sub    esp,0x8
c000e8a9:	51                   	push   ecx
c000e8aa:	52                   	push   edx
c000e8ab:	68 90 68 03 c0       	push   0xc0036890
c000e8b0:	68 98 68 03 c0       	push   0xc0036898
c000e8b5:	53                   	push   ebx
c000e8b6:	50                   	push   eax
c000e8b7:	e8 54 19 00 00       	call   c0010210 <tcp_rst>
c000e8bc:	83 c4 20             	add    esp,0x20
c000e8bf:	90                   	nop
c000e8c0:	83 ec 0c             	sub    esp,0xc
c000e8c3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e8c7:	e8 88 99 ff ff       	call   c0008254 <pbuf_free>
c000e8cc:	83 c4 10             	add    esp,0x10
c000e8cf:	90                   	nop
c000e8d0:	83 c4 18             	add    esp,0x18
c000e8d3:	5b                   	pop    ebx
c000e8d4:	c3                   	ret    
c000e8d5:	66 90                	xchg   ax,ax
c000e8d7:	90                   	nop

c000e8d8 <tcp_output_alloc_header>:
c000e8d8:	83 ec 2c             	sub    esp,0x2c
c000e8db:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e8df:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e8e3:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c000e8e8:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e8ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e8f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e8f5:	01 d0                	add    eax,edx
c000e8f7:	83 c0 14             	add    eax,0x14
c000e8fa:	0f b7 c0             	movzx  eax,ax
c000e8fd:	83 ec 04             	sub    esp,0x4
c000e900:	6a 00                	push   0x0
c000e902:	50                   	push   eax
c000e903:	6a 01                	push   0x1
c000e905:	e8 22 9b ff ff       	call   c000842c <pbuf_alloc>
c000e90a:	83 c4 10             	add    esp,0x10
c000e90d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e911:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000e916:	0f 84 10 01 00 00    	je     c000ea2c <tcp_output_alloc_header+0x154>
c000e91c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000e921:	8d 50 13             	lea    edx,[eax+0x13]
c000e924:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e928:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000e92c:	0f b7 c0             	movzx  eax,ax
c000e92f:	39 c2                	cmp    edx,eax
c000e931:	7c 15                	jl     c000e948 <tcp_output_alloc_header+0x70>
c000e933:	83 ec 08             	sub    esp,0x8
c000e936:	68 40 02 03 c0       	push   0xc0030240
c000e93b:	68 26 f6 02 c0       	push   0xc002f626
c000e940:	e8 4f 10 01 00       	call   c001f994 <CPrintf>
c000e945:	83 c4 10             	add    esp,0x10
c000e948:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e94c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e94f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e953:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e957:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000e95a:	0f b7 c0             	movzx  eax,ax
c000e95d:	83 ec 0c             	sub    esp,0xc
c000e960:	50                   	push   eax
c000e961:	e8 82 22 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e966:	83 c4 10             	add    esp,0x10
c000e969:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e96d:	66 89 02             	mov    WORD PTR [edx],ax
c000e970:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e974:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000e978:	0f b7 c0             	movzx  eax,ax
c000e97b:	83 ec 0c             	sub    esp,0xc
c000e97e:	50                   	push   eax
c000e97f:	e8 64 22 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e984:	83 c4 10             	add    esp,0x10
c000e987:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e98b:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000e98f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e993:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e997:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000e99a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e99e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e9a1:	83 ec 0c             	sub    esp,0xc
c000e9a4:	50                   	push   eax
c000e9a5:	e8 62 22 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000e9aa:	83 c4 10             	add    esp,0x10
c000e9ad:	89 c2                	mov    edx,eax
c000e9af:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e9b3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e9b6:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000e9bb:	c1 e8 02             	shr    eax,0x2
c000e9be:	83 c0 05             	add    eax,0x5
c000e9c1:	c1 e0 0c             	shl    eax,0xc
c000e9c4:	83 c8 10             	or     eax,0x10
c000e9c7:	0f b7 c0             	movzx  eax,ax
c000e9ca:	83 ec 0c             	sub    esp,0xc
c000e9cd:	50                   	push   eax
c000e9ce:	e8 15 22 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e9d3:	83 c4 10             	add    esp,0x10
c000e9d6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e9da:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000e9de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9e2:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000e9e6:	0f b7 c0             	movzx  eax,ax
c000e9e9:	83 ec 0c             	sub    esp,0xc
c000e9ec:	50                   	push   eax
c000e9ed:	e8 f6 21 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e9f2:	83 c4 10             	add    esp,0x10
c000e9f5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e9f9:	66 89 42 0e          	mov    WORD PTR [edx+0xe],ax
c000e9fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea01:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c000ea07:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea0b:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c000ea11:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea15:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000ea18:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea1c:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000ea20:	0f b7 c0             	movzx  eax,ax
c000ea23:	01 c2                	add    edx,eax
c000ea25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea29:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000ea2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ea30:	83 c4 2c             	add    esp,0x2c
c000ea33:	c3                   	ret    

c000ea34 <tcp_create_segment>:
c000ea34:	53                   	push   ebx
c000ea35:	83 ec 28             	sub    esp,0x28
c000ea38:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ea3c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ea40:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000ea44:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000ea48:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ea4d:	c1 e0 02             	shl    eax,0x2
c000ea50:	83 e0 04             	and    eax,0x4
c000ea53:	88 c2                	mov    dl,al
c000ea55:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ea5a:	83 e0 02             	and    eax,0x2
c000ea5d:	74 05                	je     c000ea64 <tcp_create_segment+0x30>
c000ea5f:	b0 0c                	mov    al,0xc
c000ea61:	eb 05                	jmp    c000ea68 <tcp_create_segment+0x34>
c000ea63:	90                   	nop
c000ea64:	b0 00                	mov    al,0x0
c000ea66:	66 90                	xchg   ax,ax
c000ea68:	01 d0                	add    eax,edx
c000ea6a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000ea6e:	83 ec 0c             	sub    esp,0xc
c000ea71:	6a 04                	push   0x4
c000ea73:	e8 f4 8d ff ff       	call   c000786c <memp_malloc>
c000ea78:	83 c4 10             	add    esp,0x10
c000ea7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ea7f:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ea84:	75 1a                	jne    c000eaa0 <tcp_create_segment+0x6c>
c000ea86:	83 ec 0c             	sub    esp,0xc
c000ea89:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ea8d:	e8 c2 97 ff ff       	call   c0008254 <pbuf_free>
c000ea92:	83 c4 10             	add    esp,0x10
c000ea95:	b8 00 00 00 00       	mov    eax,0x0
c000ea9a:	e9 31 01 00 00       	jmp    c000ebd0 <tcp_create_segment+0x19c>
c000ea9f:	90                   	nop
c000eaa0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eaa4:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c000eaa8:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
c000eaab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eaaf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000eab5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eab9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000eabd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000eac0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eac4:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000eac7:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000eacc:	89 d1                	mov    ecx,edx
c000eace:	29 c1                	sub    ecx,eax
c000ead0:	89 c8                	mov    eax,ecx
c000ead2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ead6:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000eada:	83 ec 08             	sub    esp,0x8
c000eadd:	6a 14                	push   0x14
c000eadf:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eae3:	e8 d0 95 ff ff       	call   c00080b8 <pbuf_header>
c000eae8:	83 c4 10             	add    esp,0x10
c000eaeb:	0f b6 c0             	movzx  eax,al
c000eaee:	85 c0                	test   eax,eax
c000eaf0:	74 2a                	je     c000eb1c <tcp_create_segment+0xe8>
c000eaf2:	66 a1 c4 67 03 c0    	mov    ax,ds:0xc00367c4
c000eaf8:	83 c0 01             	add    eax,0x1
c000eafb:	66 a3 c4 67 03 c0    	mov    ds:0xc00367c4,ax
c000eb01:	83 ec 0c             	sub    esp,0xc
c000eb04:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000eb08:	e8 bf b3 ff ff       	call   c0009ecc <tcp_seg_free>
c000eb0d:	83 c4 10             	add    esp,0x10
c000eb10:	b8 00 00 00 00       	mov    eax,0x0
c000eb15:	e9 b6 00 00 00       	jmp    c000ebd0 <tcp_create_segment+0x19c>
c000eb1a:	66 90                	xchg   ax,ax
c000eb1c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eb20:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000eb23:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000eb26:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eb2a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000eb2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eb31:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000eb34:	0f b7 c0             	movzx  eax,ax
c000eb37:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eb3b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000eb3e:	83 ec 0c             	sub    esp,0xc
c000eb41:	50                   	push   eax
c000eb42:	e8 a1 20 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000eb47:	83 c4 10             	add    esp,0x10
c000eb4a:	66 89 03             	mov    WORD PTR [ebx],ax
c000eb4d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eb51:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000eb55:	0f b7 c0             	movzx  eax,ax
c000eb58:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eb5c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000eb5f:	83 ec 0c             	sub    esp,0xc
c000eb62:	50                   	push   eax
c000eb63:	e8 80 20 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000eb68:	83 c4 10             	add    esp,0x10
c000eb6b:	66 89 43 02          	mov    WORD PTR [ebx+0x2],ax
c000eb6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eb73:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000eb76:	83 ec 0c             	sub    esp,0xc
c000eb79:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000eb7d:	e8 8a 20 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000eb82:	83 c4 10             	add    esp,0x10
c000eb85:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000eb88:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000eb8d:	c1 e8 02             	shr    eax,0x2
c000eb90:	0f b6 c0             	movzx  eax,al
c000eb93:	83 c0 05             	add    eax,0x5
c000eb96:	c1 e0 0c             	shl    eax,0xc
c000eb99:	89 c2                	mov    edx,eax
c000eb9b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000eba0:	09 d0                	or     eax,edx
c000eba2:	0f b7 c0             	movzx  eax,ax
c000eba5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eba9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000ebac:	83 ec 0c             	sub    esp,0xc
c000ebaf:	50                   	push   eax
c000ebb0:	e8 33 20 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ebb5:	83 c4 10             	add    esp,0x10
c000ebb8:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c000ebbc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ebc0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ebc3:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c000ebc9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ebcd:	8d 76 00             	lea    esi,[esi+0x0]
c000ebd0:	83 c4 28             	add    esp,0x28
c000ebd3:	5b                   	pop    ebx
c000ebd4:	c3                   	ret    
c000ebd5:	8d 76 00             	lea    esi,[esi+0x0]

c000ebd8 <tcp_pbuf_prealloc>:
c000ebd8:	53                   	push   ebx
c000ebd9:	83 ec 28             	sub    esp,0x28
c000ebdc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ebe0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ebe4:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000ebe8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000ebec:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c000ebf1:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000ebf6:	88 d8                	mov    al,bl
c000ebf8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ebfc:	88 c8                	mov    al,cl
c000ebfe:	88 04 24             	mov    BYTE PTR [esp],al
c000ec01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec05:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000ec0a:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000ec0f:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000ec14:	39 c2                	cmp    edx,eax
c000ec16:	73 64                	jae    c000ec7c <tcp_pbuf_prealloc+0xa4>
c000ec18:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ec1d:	83 e0 02             	and    eax,0x2
c000ec20:	75 2e                	jne    c000ec50 <tcp_pbuf_prealloc+0x78>
c000ec22:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ec26:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ec29:	0f b6 c0             	movzx  eax,al
c000ec2c:	83 e0 40             	and    eax,0x40
c000ec2f:	75 4b                	jne    c000ec7c <tcp_pbuf_prealloc+0xa4>
c000ec31:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000ec35:	85 c0                	test   eax,eax
c000ec37:	74 17                	je     c000ec50 <tcp_pbuf_prealloc+0x78>
c000ec39:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ec3d:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ec40:	85 c0                	test   eax,eax
c000ec42:	75 0c                	jne    c000ec50 <tcp_pbuf_prealloc+0x78>
c000ec44:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ec48:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000ec4b:	85 c0                	test   eax,eax
c000ec4d:	74 2d                	je     c000ec7c <tcp_pbuf_prealloc+0xa4>
c000ec4f:	90                   	nop
c000ec50:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000ec55:	8d 90 17 02 00 00    	lea    edx,[eax+0x217]
c000ec5b:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000ec60:	39 c2                	cmp    edx,eax
c000ec62:	7d 0c                	jge    c000ec70 <tcp_pbuf_prealloc+0x98>
c000ec64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec68:	05 18 02 00 00       	add    eax,0x218
c000ec6d:	eb 05                	jmp    c000ec74 <tcp_pbuf_prealloc+0x9c>
c000ec6f:	90                   	nop
c000ec70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ec74:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000ec79:	8d 76 00             	lea    esi,[esi+0x0]
c000ec7c:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000ec81:	83 ec 04             	sub    esp,0x4
c000ec84:	6a 00                	push   0x0
c000ec86:	50                   	push   eax
c000ec87:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ec8b:	e8 9c 97 ff ff       	call   c000842c <pbuf_alloc>
c000ec90:	83 c4 10             	add    esp,0x10
c000ec93:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ec97:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ec9c:	75 0a                	jne    c000eca8 <tcp_pbuf_prealloc+0xd0>
c000ec9e:	b8 00 00 00 00       	mov    eax,0x0
c000eca3:	eb 5b                	jmp    c000ed00 <tcp_pbuf_prealloc+0x128>
c000eca5:	8d 76 00             	lea    esi,[esi+0x0]
c000eca8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ecac:	8b 00                	mov    eax,DWORD PTR [eax]
c000ecae:	85 c0                	test   eax,eax
c000ecb0:	74 16                	je     c000ecc8 <tcp_pbuf_prealloc+0xf0>
c000ecb2:	83 ec 08             	sub    esp,0x8
c000ecb5:	68 c4 04 03 c0       	push   0xc00304c4
c000ecba:	68 26 f6 02 c0       	push   0xc002f626
c000ecbf:	e8 d0 0c 01 00       	call   c001f994 <CPrintf>
c000ecc4:	83 c4 10             	add    esp,0x10
c000ecc7:	90                   	nop
c000ecc8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eccc:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000ecd0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecd4:	89 d1                	mov    ecx,edx
c000ecd6:	29 c1                	sub    ecx,eax
c000ecd8:	89 c8                	mov    eax,ecx
c000ecda:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ecde:	66 89 02             	mov    WORD PTR [edx],ax
c000ece1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ece5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ece9:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000eced:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ecf1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ecf4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ecf8:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c000ecfc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed00:	83 c4 28             	add    esp,0x28
c000ed03:	5b                   	pop    ebx
c000ed04:	c3                   	ret    
c000ed05:	8d 76 00             	lea    esi,[esi+0x0]

c000ed08 <tcp_write_checks>:
c000ed08:	83 ec 1c             	sub    esp,0x1c
c000ed0b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ed0f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000ed14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ed18:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ed1b:	83 f8 04             	cmp    eax,0x4
c000ed1e:	74 2c                	je     c000ed4c <tcp_write_checks+0x44>
c000ed20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ed24:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ed27:	83 f8 07             	cmp    eax,0x7
c000ed2a:	74 20                	je     c000ed4c <tcp_write_checks+0x44>
c000ed2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ed30:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ed33:	83 f8 02             	cmp    eax,0x2
c000ed36:	74 14                	je     c000ed4c <tcp_write_checks+0x44>
c000ed38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ed3c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ed3f:	83 f8 03             	cmp    eax,0x3
c000ed42:	74 08                	je     c000ed4c <tcp_write_checks+0x44>
c000ed44:	b0 f3                	mov    al,0xf3
c000ed46:	e9 f9 00 00 00       	jmp    c000ee44 <tcp_write_checks+0x13c>
c000ed4b:	90                   	nop
c000ed4c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000ed51:	85 c0                	test   eax,eax
c000ed53:	75 07                	jne    c000ed5c <tcp_write_checks+0x54>
c000ed55:	b0 00                	mov    al,0x0
c000ed57:	e9 e8 00 00 00       	jmp    c000ee44 <tcp_write_checks+0x13c>
c000ed5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ed60:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000ed64:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000ed69:	0f b7 c0             	movzx  eax,ax
c000ed6c:	39 c2                	cmp    edx,eax
c000ed6e:	76 1c                	jbe    c000ed8c <tcp_write_checks+0x84>
c000ed70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ed74:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ed77:	83 c8 80             	or     eax,0xffffff80
c000ed7a:	88 c2                	mov    dl,al
c000ed7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ed80:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ed83:	b0 ff                	mov    al,0xff
c000ed85:	e9 ba 00 00 00       	jmp    c000ee44 <tcp_write_checks+0x13c>
c000ed8a:	66 90                	xchg   ax,ax
c000ed8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ed90:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000ed93:	0f b7 c0             	movzx  eax,ax
c000ed96:	83 f8 01             	cmp    eax,0x1
c000ed99:	77 11                	ja     c000edac <tcp_write_checks+0xa4>
c000ed9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ed9f:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000eda2:	0f b7 c0             	movzx  eax,ax
c000eda5:	3d fc ff 00 00       	cmp    eax,0xfffc
c000edaa:	76 28                	jbe    c000edd4 <tcp_write_checks+0xcc>
c000edac:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000edb2:	83 c0 01             	add    eax,0x1
c000edb5:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000edbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000edbf:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000edc2:	83 c8 80             	or     eax,0xffffff80
c000edc5:	88 c2                	mov    dl,al
c000edc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000edcb:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000edce:	b0 ff                	mov    al,0xff
c000edd0:	eb 72                	jmp    c000ee44 <tcp_write_checks+0x13c>
c000edd2:	66 90                	xchg   ax,ax
c000edd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000edd8:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000eddb:	0f b7 c0             	movzx  eax,ax
c000edde:	85 c0                	test   eax,eax
c000ede0:	74 2e                	je     c000ee10 <tcp_write_checks+0x108>
c000ede2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ede6:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000ede9:	85 c0                	test   eax,eax
c000edeb:	75 53                	jne    c000ee40 <tcp_write_checks+0x138>
c000eded:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000edf1:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000edf4:	85 c0                	test   eax,eax
c000edf6:	75 48                	jne    c000ee40 <tcp_write_checks+0x138>
c000edf8:	83 ec 08             	sub    esp,0x8
c000edfb:	68 70 02 03 c0       	push   0xc0030270
c000ee00:	68 26 f6 02 c0       	push   0xc002f626
c000ee05:	e8 8a 0b 01 00       	call   c001f994 <CPrintf>
c000ee0a:	83 c4 10             	add    esp,0x10
c000ee0d:	eb 31                	jmp    c000ee40 <tcp_write_checks+0x138>
c000ee0f:	90                   	nop
c000ee10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee14:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000ee17:	85 c0                	test   eax,eax
c000ee19:	75 0d                	jne    c000ee28 <tcp_write_checks+0x120>
c000ee1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee1f:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ee22:	85 c0                	test   eax,eax
c000ee24:	74 1a                	je     c000ee40 <tcp_write_checks+0x138>
c000ee26:	66 90                	xchg   ax,ax
c000ee28:	83 ec 08             	sub    esp,0x8
c000ee2b:	68 ac 02 03 c0       	push   0xc00302ac
c000ee30:	68 26 f6 02 c0       	push   0xc002f626
c000ee35:	e8 5a 0b 01 00       	call   c001f994 <CPrintf>
c000ee3a:	83 c4 10             	add    esp,0x10
c000ee3d:	8d 76 00             	lea    esi,[esi+0x0]
c000ee40:	b0 00                	mov    al,0x0
c000ee42:	66 90                	xchg   ax,ax
c000ee44:	83 c4 1c             	add    esp,0x1c
c000ee47:	c3                   	ret    

c000ee48 <tcp_write>:
c000ee48:	56                   	push   esi
c000ee49:	53                   	push   ebx
c000ee4a:	83 ec 54             	sub    esp,0x54
c000ee4d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000ee51:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000ee55:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000ee5a:	88 d0                	mov    al,dl
c000ee5c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000ee60:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000ee68:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000ee70:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c000ee78:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000ee80:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c000ee88:	66 c7 44 24 3a 00 00 	mov    WORD PTR [esp+0x3a],0x0
c000ee8f:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000ee94:	c6 44 24 2a 00       	mov    BYTE PTR [esp+0x2a],0x0
c000ee99:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000eea0:	66 c7 44 24 36 00 00 	mov    WORD PTR [esp+0x36],0x0
c000eea7:	83 7c 24 64 00       	cmp    DWORD PTR [esp+0x64],0x0
c000eeac:	75 1e                	jne    c000eecc <tcp_write+0x84>
c000eeae:	83 ec 08             	sub    esp,0x8
c000eeb1:	68 e0 02 03 c0       	push   0xc00302e0
c000eeb6:	68 26 f6 02 c0       	push   0xc002f626
c000eebb:	e8 d4 0a 01 00       	call   c001f994 <CPrintf>
c000eec0:	83 c4 10             	add    esp,0x10
c000eec3:	b0 f2                	mov    al,0xf2
c000eec5:	e9 16 08 00 00       	jmp    c000f6e0 <tcp_write+0x898>
c000eeca:	66 90                	xchg   ax,ax
c000eecc:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000eed1:	83 ec 08             	sub    esp,0x8
c000eed4:	50                   	push   eax
c000eed5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000eed9:	e8 2a fe ff ff       	call   c000ed08 <tcp_write_checks>
c000eede:	83 c4 10             	add    esp,0x10
c000eee1:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c000eee5:	0f be 44 24 29       	movsx  eax,BYTE PTR [esp+0x29]
c000eeea:	85 c0                	test   eax,eax
c000eeec:	74 0a                	je     c000eef8 <tcp_write+0xb0>
c000eeee:	8a 44 24 29          	mov    al,BYTE PTR [esp+0x29]
c000eef2:	e9 e9 07 00 00       	jmp    c000f6e0 <tcp_write+0x898>
c000eef7:	90                   	nop
c000eef8:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000eefc:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000eeff:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000ef04:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000ef08:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ef0b:	85 c0                	test   eax,eax
c000ef0d:	0f 84 79 02 00 00    	je     c000f18c <tcp_write+0x344>
c000ef13:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000ef17:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ef1a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ef1e:	eb 0c                	jmp    c000ef2c <tcp_write+0xe4>
c000ef20:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ef24:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef26:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ef2a:	66 90                	xchg   ax,ax
c000ef2c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ef30:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef32:	85 c0                	test   eax,eax
c000ef34:	75 ea                	jne    c000ef20 <tcp_write+0xd8>
c000ef36:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ef3a:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000ef3d:	0f b6 c0             	movzx  eax,al
c000ef40:	c1 e0 02             	shl    eax,0x2
c000ef43:	83 e0 04             	and    eax,0x4
c000ef46:	89 c2                	mov    edx,eax
c000ef48:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ef4c:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000ef4f:	0f b6 c0             	movzx  eax,al
c000ef52:	83 e0 02             	and    eax,0x2
c000ef55:	74 09                	je     c000ef60 <tcp_write+0x118>
c000ef57:	b8 0c 00 00 00       	mov    eax,0xc
c000ef5c:	eb 0a                	jmp    c000ef68 <tcp_write+0x120>
c000ef5e:	66 90                	xchg   ax,ax
c000ef60:	b8 00 00 00 00       	mov    eax,0x0
c000ef65:	8d 76 00             	lea    esi,[esi+0x0]
c000ef68:	01 d0                	add    eax,edx
c000ef6a:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c000ef6f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000ef73:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ef76:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000ef7a:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000ef7d:	66 8b 4c 24 26       	mov    cx,WORD PTR [esp+0x26]
c000ef82:	01 ca                	add    edx,ecx
c000ef84:	29 d0                	sub    eax,edx
c000ef86:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c000ef8b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000ef8f:	66 8b 40 76          	mov    ax,WORD PTR [eax+0x76]
c000ef93:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000ef98:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000ef9d:	0f b7 c0             	movzx  eax,ax
c000efa0:	85 c0                	test   eax,eax
c000efa2:	0f 84 84 00 00 00    	je     c000f02c <tcp_write+0x1e4>
c000efa8:	0f b7 54 24 36       	movzx  edx,WORD PTR [esp+0x36]
c000efad:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c000efb2:	39 c2                	cmp    edx,eax
c000efb4:	76 16                	jbe    c000efcc <tcp_write+0x184>
c000efb6:	83 ec 08             	sub    esp,0x8
c000efb9:	68 14 03 03 c0       	push   0xc0030314
c000efbe:	68 26 f6 02 c0       	push   0xc002f626
c000efc3:	e8 cc 09 01 00       	call   c001f994 <CPrintf>
c000efc8:	83 c4 10             	add    esp,0x10
c000efcb:	90                   	nop
c000efcc:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000efd0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000efd4:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000efd9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efdd:	0f b7 d8             	movzx  ebx,ax
c000efe0:	0f b7 ca             	movzx  ecx,dx
c000efe3:	39 cb                	cmp    ebx,ecx
c000efe5:	76 05                	jbe    c000efec <tcp_write+0x1a4>
c000efe7:	89 d0                	mov    eax,edx
c000efe9:	8d 76 00             	lea    esi,[esi+0x0]
c000efec:	66 89 44 24 36       	mov    WORD PTR [esp+0x36],ax
c000eff1:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000eff6:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000effb:	01 d0                	add    eax,edx
c000effd:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f002:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000f007:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f00c:	89 d6                	mov    esi,edx
c000f00e:	29 c6                	sub    esi,eax
c000f010:	89 f0                	mov    eax,esi
c000f012:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000f017:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000f01b:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f020:	89 d6                	mov    esi,edx
c000f022:	29 c6                	sub    esi,eax
c000f024:	89 f0                	mov    eax,esi
c000f026:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c000f02b:	90                   	nop
c000f02c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f031:	0f b7 c0             	movzx  eax,ax
c000f034:	85 c0                	test   eax,eax
c000f036:	74 24                	je     c000f05c <tcp_write+0x214>
c000f038:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f03d:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f042:	39 c2                	cmp    edx,eax
c000f044:	74 16                	je     c000f05c <tcp_write+0x214>
c000f046:	83 ec 08             	sub    esp,0x8
c000f049:	68 d8 04 03 c0       	push   0xc00304d8
c000f04e:	68 26 f6 02 c0       	push   0xc002f626
c000f053:	e8 3c 09 01 00       	call   c001f994 <CPrintf>
c000f058:	83 c4 10             	add    esp,0x10
c000f05b:	90                   	nop
c000f05c:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f061:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f066:	39 c2                	cmp    edx,eax
c000f068:	0f 83 ce 03 00 00    	jae    c000f43c <tcp_write+0x5f4>
c000f06e:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c000f073:	85 c0                	test   eax,eax
c000f075:	0f 84 c1 03 00 00    	je     c000f43c <tcp_write+0x5f4>
c000f07b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f07f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f082:	0f b7 c0             	movzx  eax,ax
c000f085:	85 c0                	test   eax,eax
c000f087:	0f 84 af 03 00 00    	je     c000f43c <tcp_write+0x5f4>
c000f08d:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000f092:	0f b7 44 24 3a       	movzx  eax,WORD PTR [esp+0x3a]
c000f097:	29 c2                	sub    edx,eax
c000f099:	89 d0                	mov    eax,edx
c000f09b:	0f b7 54 24 34       	movzx  edx,WORD PTR [esp+0x34]
c000f0a0:	39 d0                	cmp    eax,edx
c000f0a2:	7e 04                	jle    c000f0a8 <tcp_write+0x260>
c000f0a4:	89 d0                	mov    eax,edx
c000f0a6:	66 90                	xchg   ax,ax
c000f0a8:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c000f0ad:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f0b1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f0b5:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f0ba:	83 e0 01             	and    eax,0x1
c000f0bd:	74 61                	je     c000f120 <tcp_write+0x2d8>
c000f0bf:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c000f0c4:	0f b7 54 24 34       	movzx  edx,WORD PTR [esp+0x34]
c000f0c9:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c000f0ce:	83 ec 04             	sub    esp,0x4
c000f0d1:	6a 01                	push   0x1
c000f0d3:	51                   	push   ecx
c000f0d4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f0d8:	8d 4c 24 26          	lea    ecx,[esp+0x26]
c000f0dc:	51                   	push   ecx
c000f0dd:	52                   	push   edx
c000f0de:	50                   	push   eax
c000f0df:	6a 03                	push   0x3
c000f0e1:	e8 f2 fa ff ff       	call   c000ebd8 <tcp_pbuf_prealloc>
c000f0e6:	83 c4 20             	add    esp,0x20
c000f0e9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f0ed:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f0f2:	0f 84 44 05 00 00    	je     c000f63c <tcp_write+0x7f4>
c000f0f8:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000f0fd:	0f b7 4c 24 3a       	movzx  ecx,WORD PTR [esp+0x3a]
c000f102:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f106:	01 c1                	add    ecx,eax
c000f108:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f10c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f10f:	83 ec 04             	sub    esp,0x4
c000f112:	52                   	push   edx
c000f113:	51                   	push   ecx
c000f114:	50                   	push   eax
c000f115:	e8 60 12 ff ff       	call   c000037a <memcpy>
c000f11a:	83 c4 10             	add    esp,0x10
c000f11d:	eb 39                	jmp    c000f158 <tcp_write+0x310>
c000f11f:	90                   	nop
c000f120:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c000f125:	83 ec 04             	sub    esp,0x4
c000f128:	6a 01                	push   0x1
c000f12a:	50                   	push   eax
c000f12b:	6a 03                	push   0x3
c000f12d:	e8 fa 92 ff ff       	call   c000842c <pbuf_alloc>
c000f132:	83 c4 10             	add    esp,0x10
c000f135:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f139:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f13e:	0f 84 fc 04 00 00    	je     c000f640 <tcp_write+0x7f8>
c000f144:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f149:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f14d:	01 c2                	add    edx,eax
c000f14f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f153:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f156:	66 90                	xchg   ax,ax
c000f158:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f15d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f161:	01 d0                	add    eax,edx
c000f163:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f168:	83 ec 0c             	sub    esp,0xc
c000f16b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000f16f:	e8 b4 98 ff ff       	call   c0008a28 <pbuf_clen>
c000f174:	83 c4 10             	add    esp,0x10
c000f177:	0f b6 c0             	movzx  eax,al
c000f17a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f17e:	01 d0                	add    eax,edx
c000f180:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f185:	e9 b2 02 00 00       	jmp    c000f43c <tcp_write+0x5f4>
c000f18a:	66 90                	xchg   ax,ax
c000f18c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f190:	66 8b 40 76          	mov    ax,WORD PTR [eax+0x76]
c000f194:	0f b7 c0             	movzx  eax,ax
c000f197:	85 c0                	test   eax,eax
c000f199:	0f 84 9d 02 00 00    	je     c000f43c <tcp_write+0x5f4>
c000f19f:	83 ec 08             	sub    esp,0x8
c000f1a2:	68 34 03 03 c0       	push   0xc0030334
c000f1a7:	68 26 f6 02 c0       	push   0xc002f626
c000f1ac:	e8 e3 07 01 00       	call   c001f994 <CPrintf>
c000f1b1:	83 c4 10             	add    esp,0x10
c000f1b4:	e9 83 02 00 00       	jmp    c000f43c <tcp_write+0x5f4>
c000f1b9:	8d 76 00             	lea    esi,[esi+0x0]
c000f1bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f1c0:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c000f1c5:	89 d6                	mov    esi,edx
c000f1c7:	29 c6                	sub    esi,eax
c000f1c9:	89 f0                	mov    eax,esi
c000f1cb:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
c000f1d0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f1d4:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000f1d7:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f1dc:	89 d3                	mov    ebx,edx
c000f1de:	29 c3                	sub    ebx,eax
c000f1e0:	89 d8                	mov    eax,ebx
c000f1e2:	66 89 44 24 20       	mov    WORD PTR [esp+0x20],ax
c000f1e7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000f1eb:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c000f1f0:	0f b7 d8             	movzx  ebx,ax
c000f1f3:	0f b7 ca             	movzx  ecx,dx
c000f1f6:	39 cb                	cmp    ebx,ecx
c000f1f8:	76 02                	jbe    c000f1fc <tcp_write+0x3b4>
c000f1fa:	89 d0                	mov    eax,edx
c000f1fc:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000f201:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f206:	83 e0 01             	and    eax,0x1
c000f209:	0f 84 b1 00 00 00    	je     c000f2c0 <tcp_write+0x478>
c000f20f:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f214:	0f 94 c0             	sete   al
c000f217:	0f b6 f0             	movzx  esi,al
c000f21a:	0f b6 5c 24 08       	movzx  ebx,BYTE PTR [esp+0x8]
c000f21f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f223:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f226:	0f b7 c8             	movzx  ecx,ax
c000f229:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f22e:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000f233:	01 d0                	add    eax,edx
c000f235:	0f b7 c0             	movzx  eax,ax
c000f238:	83 ec 04             	sub    esp,0x4
c000f23b:	56                   	push   esi
c000f23c:	53                   	push   ebx
c000f23d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f241:	8d 54 24 26          	lea    edx,[esp+0x26]
c000f245:	52                   	push   edx
c000f246:	51                   	push   ecx
c000f247:	50                   	push   eax
c000f248:	6a 00                	push   0x0
c000f24a:	e8 89 f9 ff ff       	call   c000ebd8 <tcp_pbuf_prealloc>
c000f24f:	83 c4 20             	add    esp,0x20
c000f252:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f256:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000f25b:	0f 84 e3 03 00 00    	je     c000f644 <tcp_write+0x7fc>
c000f261:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f265:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000f269:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c000f26e:	0f b7 c0             	movzx  eax,ax
c000f271:	39 c2                	cmp    edx,eax
c000f273:	76 17                	jbe    c000f28c <tcp_write+0x444>
c000f275:	83 ec 08             	sub    esp,0x8
c000f278:	68 64 03 03 c0       	push   0xc0030364
c000f27d:	68 26 f6 02 c0       	push   0xc002f626
c000f282:	e8 0d 07 01 00       	call   c001f994 <CPrintf>
c000f287:	83 c4 10             	add    esp,0x10
c000f28a:	66 90                	xchg   ax,ax
c000f28c:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000f291:	0f b7 4c 24 3a       	movzx  ecx,WORD PTR [esp+0x3a]
c000f296:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000f29a:	01 d1                	add    ecx,edx
c000f29c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f2a0:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000f2a3:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000f2a8:	01 da                	add    edx,ebx
c000f2aa:	83 ec 04             	sub    esp,0x4
c000f2ad:	50                   	push   eax
c000f2ae:	51                   	push   ecx
c000f2af:	52                   	push   edx
c000f2b0:	e8 c5 10 ff ff       	call   c000037a <memcpy>
c000f2b5:	83 c4 10             	add    esp,0x10
c000f2b8:	e9 a7 00 00 00       	jmp    c000f364 <tcp_write+0x51c>
c000f2bd:	8d 76 00             	lea    esi,[esi+0x0]
c000f2c0:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f2c5:	0f b7 c0             	movzx  eax,ax
c000f2c8:	85 c0                	test   eax,eax
c000f2ca:	74 18                	je     c000f2e4 <tcp_write+0x49c>
c000f2cc:	83 ec 08             	sub    esp,0x8
c000f2cf:	68 f6 04 03 c0       	push   0xc00304f6
c000f2d4:	68 26 f6 02 c0       	push   0xc002f626
c000f2d9:	e8 b6 06 01 00       	call   c001f994 <CPrintf>
c000f2de:	83 c4 10             	add    esp,0x10
c000f2e1:	8d 76 00             	lea    esi,[esi+0x0]
c000f2e4:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000f2e9:	83 ec 04             	sub    esp,0x4
c000f2ec:	6a 01                	push   0x1
c000f2ee:	50                   	push   eax
c000f2ef:	6a 00                	push   0x0
c000f2f1:	e8 36 91 ff ff       	call   c000842c <pbuf_alloc>
c000f2f6:	83 c4 10             	add    esp,0x10
c000f2f9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f2fd:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f302:	0f 84 40 03 00 00    	je     c000f648 <tcp_write+0x800>
c000f308:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f30d:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f311:	01 c2                	add    edx,eax
c000f313:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f317:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f31a:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f31f:	83 ec 04             	sub    esp,0x4
c000f322:	6a 00                	push   0x0
c000f324:	50                   	push   eax
c000f325:	6a 00                	push   0x0
c000f327:	e8 00 91 ff ff       	call   c000842c <pbuf_alloc>
c000f32c:	83 c4 10             	add    esp,0x10
c000f32f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f333:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000f338:	75 16                	jne    c000f350 <tcp_write+0x508>
c000f33a:	83 ec 0c             	sub    esp,0xc
c000f33d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f341:	e8 0e 8f ff ff       	call   c0008254 <pbuf_free>
c000f346:	83 c4 10             	add    esp,0x10
c000f349:	e9 02 03 00 00       	jmp    c000f650 <tcp_write+0x808>
c000f34e:	66 90                	xchg   ax,ax
c000f350:	83 ec 08             	sub    esp,0x8
c000f353:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f357:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f35b:	e8 2c 97 ff ff       	call   c0008a8c <pbuf_cat>
c000f360:	83 c4 10             	add    esp,0x10
c000f363:	90                   	nop
c000f364:	83 ec 0c             	sub    esp,0xc
c000f367:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f36b:	e8 b8 96 ff ff       	call   c0008a28 <pbuf_clen>
c000f370:	83 c4 10             	add    esp,0x10
c000f373:	0f b6 c0             	movzx  eax,al
c000f376:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f37a:	01 d0                	add    eax,edx
c000f37c:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f381:	0f b7 44 24 38       	movzx  eax,WORD PTR [esp+0x38]
c000f386:	83 f8 02             	cmp    eax,0x2
c000f389:	77 0d                	ja     c000f398 <tcp_write+0x550>
c000f38b:	0f b7 44 24 38       	movzx  eax,WORD PTR [esp+0x38]
c000f390:	3d fc ff 00 00       	cmp    eax,0xfffc
c000f395:	76 15                	jbe    c000f3ac <tcp_write+0x564>
c000f397:	90                   	nop
c000f398:	83 ec 0c             	sub    esp,0xc
c000f39b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f39f:	e8 b0 8e ff ff       	call   c0008254 <pbuf_free>
c000f3a4:	83 c4 10             	add    esp,0x10
c000f3a7:	e9 a4 02 00 00       	jmp    c000f650 <tcp_write+0x808>
c000f3ac:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c000f3b1:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f3b5:	8b 4a 6c             	mov    ecx,DWORD PTR [edx+0x6c]
c000f3b8:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f3bd:	01 ca                	add    edx,ecx
c000f3bf:	83 ec 0c             	sub    esp,0xc
c000f3c2:	50                   	push   eax
c000f3c3:	52                   	push   edx
c000f3c4:	6a 00                	push   0x0
c000f3c6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000f3ca:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000f3ce:	e8 61 f6 ff ff       	call   c000ea34 <tcp_create_segment>
c000f3d3:	83 c4 20             	add    esp,0x20
c000f3d6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f3da:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000f3df:	0f 84 67 02 00 00    	je     c000f64c <tcp_write+0x804>
c000f3e5:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f3ea:	75 0c                	jne    c000f3f8 <tcp_write+0x5b0>
c000f3ec:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f3f0:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f3f4:	eb 2a                	jmp    c000f420 <tcp_write+0x5d8>
c000f3f6:	66 90                	xchg   ax,ax
c000f3f8:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000f3fd:	75 15                	jne    c000f414 <tcp_write+0x5cc>
c000f3ff:	83 ec 08             	sub    esp,0x8
c000f402:	68 04 05 03 c0       	push   0xc0030504
c000f407:	68 26 f6 02 c0       	push   0xc002f626
c000f40c:	e8 83 05 01 00       	call   c001f994 <CPrintf>
c000f411:	83 c4 10             	add    esp,0x10
c000f414:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f418:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f41c:	89 10                	mov    DWORD PTR [eax],edx
c000f41e:	66 90                	xchg   ax,ax
c000f420:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f424:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f428:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f42d:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000f432:	01 d0                	add    eax,edx
c000f434:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f439:	8d 76 00             	lea    esi,[esi+0x0]
c000f43c:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f441:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f446:	39 c2                	cmp    edx,eax
c000f448:	0f 82 6e fd ff ff    	jb     c000f1bc <tcp_write+0x374>
c000f44e:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c000f453:	85 c0                	test   eax,eax
c000f455:	0f 84 9d 00 00 00    	je     c000f4f8 <tcp_write+0x6b0>
c000f45b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f45f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f462:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f466:	eb 70                	jmp    c000f4d8 <tcp_write+0x690>
c000f468:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f46c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f46f:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f474:	01 d0                	add    eax,edx
c000f476:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f47a:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000f47e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f482:	8b 00                	mov    eax,DWORD PTR [eax]
c000f484:	85 c0                	test   eax,eax
c000f486:	75 44                	jne    c000f4cc <tcp_write+0x684>
c000f488:	0f b7 54 24 36       	movzx  edx,WORD PTR [esp+0x36]
c000f48d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f491:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000f494:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f498:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000f49c:	0f b7 c0             	movzx  eax,ax
c000f49f:	01 c8                	add    eax,ecx
c000f4a1:	83 ec 04             	sub    esp,0x4
c000f4a4:	52                   	push   edx
c000f4a5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f4a9:	50                   	push   eax
c000f4aa:	e8 cb 0e ff ff       	call   c000037a <memcpy>
c000f4af:	83 c4 10             	add    esp,0x10
c000f4b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4b6:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000f4ba:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f4bf:	01 d0                	add    eax,edx
c000f4c1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f4c5:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c000f4c9:	8d 76 00             	lea    esi,[esi+0x0]
c000f4cc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4d0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f4d6:	66 90                	xchg   ax,ax
c000f4d8:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000f4dd:	75 89                	jne    c000f468 <tcp_write+0x620>
c000f4df:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f4e3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f4e6:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f4eb:	01 d0                	add    eax,edx
c000f4ed:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000f4f1:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000f4f5:	8d 76 00             	lea    esi,[esi+0x0]
c000f4f8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f4fd:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f501:	66 89 42 76          	mov    WORD PTR [edx+0x76],ax
c000f505:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f50a:	74 4c                	je     c000f558 <tcp_write+0x710>
c000f50c:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000f511:	75 15                	jne    c000f528 <tcp_write+0x6e0>
c000f513:	83 ec 08             	sub    esp,0x8
c000f516:	68 a4 03 03 c0       	push   0xc00303a4
c000f51b:	68 26 f6 02 c0       	push   0xc002f626
c000f520:	e8 6f 04 01 00       	call   c001f994 <CPrintf>
c000f525:	83 c4 10             	add    esp,0x10
c000f528:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f52c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f52f:	83 ec 08             	sub    esp,0x8
c000f532:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000f536:	50                   	push   eax
c000f537:	e8 50 95 ff ff       	call   c0008a8c <pbuf_cat>
c000f53c:	83 c4 10             	add    esp,0x10
c000f53f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f543:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000f546:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f54a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f54d:	01 d0                	add    eax,edx
c000f54f:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000f553:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000f557:	90                   	nop
c000f558:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000f55d:	75 0d                	jne    c000f56c <tcp_write+0x724>
c000f55f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f563:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f567:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000f56a:	eb 0c                	jmp    c000f578 <tcp_write+0x730>
c000f56c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f570:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f574:	89 10                	mov    DWORD PTR [eax],edx
c000f576:	66 90                	xchg   ax,ax
c000f578:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f57c:	8b 50 6c             	mov    edx,DWORD PTR [eax+0x6c]
c000f57f:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f584:	01 c2                	add    edx,eax
c000f586:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f58a:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000f58d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f591:	66 8b 50 72          	mov    dx,WORD PTR [eax+0x72]
c000f595:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f599:	89 d6                	mov    esi,edx
c000f59b:	29 c6                	sub    esi,eax
c000f59d:	89 f0                	mov    eax,esi
c000f59f:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f5a3:	66 89 42 72          	mov    WORD PTR [edx+0x72],ax
c000f5a7:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f5ab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f5af:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000f5b3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f5b7:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f5ba:	0f b7 c0             	movzx  eax,ax
c000f5bd:	85 c0                	test   eax,eax
c000f5bf:	74 2b                	je     c000f5ec <tcp_write+0x7a4>
c000f5c1:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f5c5:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f5c8:	85 c0                	test   eax,eax
c000f5ca:	75 20                	jne    c000f5ec <tcp_write+0x7a4>
c000f5cc:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f5d0:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f5d3:	85 c0                	test   eax,eax
c000f5d5:	75 15                	jne    c000f5ec <tcp_write+0x7a4>
c000f5d7:	83 ec 08             	sub    esp,0x8
c000f5da:	68 15 05 03 c0       	push   0xc0030515
c000f5df:	68 26 f6 02 c0       	push   0xc002f626
c000f5e4:	e8 ab 03 01 00       	call   c001f994 <CPrintf>
c000f5e9:	83 c4 10             	add    esp,0x10
c000f5ec:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000f5f1:	74 41                	je     c000f634 <tcp_write+0x7ec>
c000f5f3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f5f7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f5fa:	85 c0                	test   eax,eax
c000f5fc:	74 36                	je     c000f634 <tcp_write+0x7ec>
c000f5fe:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f603:	83 e0 02             	and    eax,0x2
c000f606:	75 2c                	jne    c000f634 <tcp_write+0x7ec>
c000f608:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f60c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f60f:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000f613:	83 ec 0c             	sub    esp,0xc
c000f616:	6a 08                	push   0x8
c000f618:	e8 cb 15 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000f61d:	83 c4 10             	add    esp,0x10
c000f620:	89 c1                	mov    ecx,eax
c000f622:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f626:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000f629:	89 d8                	mov    eax,ebx
c000f62b:	09 c8                	or     eax,ecx
c000f62d:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000f631:	8d 76 00             	lea    esi,[esi+0x0]
c000f634:	b0 00                	mov    al,0x0
c000f636:	e9 a5 00 00 00       	jmp    c000f6e0 <tcp_write+0x898>
c000f63b:	90                   	nop
c000f63c:	90                   	nop
c000f63d:	eb 11                	jmp    c000f650 <tcp_write+0x808>
c000f63f:	90                   	nop
c000f640:	90                   	nop
c000f641:	eb 0d                	jmp    c000f650 <tcp_write+0x808>
c000f643:	90                   	nop
c000f644:	90                   	nop
c000f645:	eb 09                	jmp    c000f650 <tcp_write+0x808>
c000f647:	90                   	nop
c000f648:	90                   	nop
c000f649:	eb 05                	jmp    c000f650 <tcp_write+0x808>
c000f64b:	90                   	nop
c000f64c:	90                   	nop
c000f64d:	8d 76 00             	lea    esi,[esi+0x0]
c000f650:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f654:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f657:	83 c8 80             	or     eax,0xffffff80
c000f65a:	88 c2                	mov    dl,al
c000f65c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f660:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f663:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f669:	83 c0 01             	add    eax,0x1
c000f66c:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f672:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f677:	74 0f                	je     c000f688 <tcp_write+0x840>
c000f679:	83 ec 0c             	sub    esp,0xc
c000f67c:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000f680:	e8 cf 8b ff ff       	call   c0008254 <pbuf_free>
c000f685:	83 c4 10             	add    esp,0x10
c000f688:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f68d:	74 11                	je     c000f6a0 <tcp_write+0x858>
c000f68f:	83 ec 0c             	sub    esp,0xc
c000f692:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000f696:	e8 75 a8 ff ff       	call   c0009f10 <tcp_segs_free>
c000f69b:	83 c4 10             	add    esp,0x10
c000f69e:	66 90                	xchg   ax,ax
c000f6a0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f6a4:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f6a7:	0f b7 c0             	movzx  eax,ax
c000f6aa:	85 c0                	test   eax,eax
c000f6ac:	74 2e                	je     c000f6dc <tcp_write+0x894>
c000f6ae:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f6b2:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f6b5:	85 c0                	test   eax,eax
c000f6b7:	75 23                	jne    c000f6dc <tcp_write+0x894>
c000f6b9:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f6bd:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f6c0:	85 c0                	test   eax,eax
c000f6c2:	75 18                	jne    c000f6dc <tcp_write+0x894>
c000f6c4:	83 ec 08             	sub    esp,0x8
c000f6c7:	68 15 05 03 c0       	push   0xc0030515
c000f6cc:	68 26 f6 02 c0       	push   0xc002f626
c000f6d1:	e8 be 02 01 00       	call   c001f994 <CPrintf>
c000f6d6:	83 c4 10             	add    esp,0x10
c000f6d9:	8d 76 00             	lea    esi,[esi+0x0]
c000f6dc:	b0 ff                	mov    al,0xff
c000f6de:	66 90                	xchg   ax,ax
c000f6e0:	83 c4 54             	add    esp,0x54
c000f6e3:	5b                   	pop    ebx
c000f6e4:	5e                   	pop    esi
c000f6e5:	c3                   	ret    
c000f6e6:	66 90                	xchg   ax,ax

c000f6e8 <tcp_enqueue_flags>:
c000f6e8:	83 ec 3c             	sub    esp,0x3c
c000f6eb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f6ef:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000f6f3:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000f6f8:	c6 44 24 27 00       	mov    BYTE PTR [esp+0x27],0x0
c000f6fd:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f702:	83 e0 03             	and    eax,0x3
c000f705:	75 15                	jne    c000f71c <tcp_enqueue_flags+0x34>
c000f707:	83 ec 08             	sub    esp,0x8
c000f70a:	68 dc 03 03 c0       	push   0xc00303dc
c000f70f:	68 26 f6 02 c0       	push   0xc002f626
c000f714:	e8 7b 02 01 00       	call   c001f994 <CPrintf>
c000f719:	83 c4 10             	add    esp,0x10
c000f71c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f720:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f723:	0f b7 c0             	movzx  eax,ax
c000f726:	83 f8 01             	cmp    eax,0x1
c000f729:	77 11                	ja     c000f73c <tcp_enqueue_flags+0x54>
c000f72b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f72f:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f732:	0f b7 c0             	movzx  eax,ax
c000f735:	3d fc ff 00 00       	cmp    eax,0xfffc
c000f73a:	76 2c                	jbe    c000f768 <tcp_enqueue_flags+0x80>
c000f73c:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f742:	83 c0 01             	add    eax,0x1
c000f745:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f74b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f74f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f752:	83 c8 80             	or     eax,0xffffff80
c000f755:	88 c2                	mov    dl,al
c000f757:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f75b:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f75e:	b0 ff                	mov    al,0xff
c000f760:	e9 6b 02 00 00       	jmp    c000f9d0 <tcp_enqueue_flags+0x2e8>
c000f765:	8d 76 00             	lea    esi,[esi+0x0]
c000f768:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f76d:	83 e0 02             	and    eax,0x2
c000f770:	74 06                	je     c000f778 <tcp_enqueue_flags+0x90>
c000f772:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000f777:	90                   	nop
c000f778:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000f77d:	c1 e0 02             	shl    eax,0x2
c000f780:	83 e0 04             	and    eax,0x4
c000f783:	88 c2                	mov    dl,al
c000f785:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000f78a:	83 e0 02             	and    eax,0x2
c000f78d:	74 05                	je     c000f794 <tcp_enqueue_flags+0xac>
c000f78f:	b0 0c                	mov    al,0xc
c000f791:	eb 05                	jmp    c000f798 <tcp_enqueue_flags+0xb0>
c000f793:	90                   	nop
c000f794:	b0 00                	mov    al,0x0
c000f796:	66 90                	xchg   ax,ax
c000f798:	01 d0                	add    eax,edx
c000f79a:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c000f79e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f7a2:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000f7a6:	0f b7 c0             	movzx  eax,ax
c000f7a9:	85 c0                	test   eax,eax
c000f7ab:	75 17                	jne    c000f7c4 <tcp_enqueue_flags+0xdc>
c000f7ad:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f7b3:	83 c0 01             	add    eax,0x1
c000f7b6:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f7bc:	b0 ff                	mov    al,0xff
c000f7be:	e9 0d 02 00 00       	jmp    c000f9d0 <tcp_enqueue_flags+0x2e8>
c000f7c3:	90                   	nop
c000f7c4:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c000f7c9:	83 ec 04             	sub    esp,0x4
c000f7cc:	6a 00                	push   0x0
c000f7ce:	50                   	push   eax
c000f7cf:	6a 00                	push   0x0
c000f7d1:	e8 56 8c ff ff       	call   c000842c <pbuf_alloc>
c000f7d6:	83 c4 10             	add    esp,0x10
c000f7d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f7dd:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000f7e2:	75 2c                	jne    c000f810 <tcp_enqueue_flags+0x128>
c000f7e4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f7e8:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f7eb:	83 c8 80             	or     eax,0xffffff80
c000f7ee:	88 c2                	mov    dl,al
c000f7f0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f7f4:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f7f7:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f7fd:	83 c0 01             	add    eax,0x1
c000f800:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f806:	b0 ff                	mov    al,0xff
c000f808:	e9 c3 01 00 00       	jmp    c000f9d0 <tcp_enqueue_flags+0x2e8>
c000f80d:	8d 76 00             	lea    esi,[esi+0x0]
c000f810:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f814:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000f818:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c000f81d:	0f b7 d2             	movzx  edx,dx
c000f820:	0f b7 c0             	movzx  eax,ax
c000f823:	39 c2                	cmp    edx,eax
c000f825:	73 15                	jae    c000f83c <tcp_enqueue_flags+0x154>
c000f827:	83 ec 08             	sub    esp,0x8
c000f82a:	68 34 04 03 c0       	push   0xc0030434
c000f82f:	68 26 f6 02 c0       	push   0xc002f626
c000f834:	e8 5b 01 01 00       	call   c001f994 <CPrintf>
c000f839:	83 c4 10             	add    esp,0x10
c000f83c:	0f b6 4c 24 2f       	movzx  ecx,BYTE PTR [esp+0x2f]
c000f841:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f845:	8b 50 6c             	mov    edx,DWORD PTR [eax+0x6c]
c000f848:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f84d:	83 ec 0c             	sub    esp,0xc
c000f850:	51                   	push   ecx
c000f851:	52                   	push   edx
c000f852:	50                   	push   eax
c000f853:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000f857:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000f85b:	e8 d4 f1 ff ff       	call   c000ea34 <tcp_create_segment>
c000f860:	83 c4 20             	add    esp,0x20
c000f863:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f867:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000f86c:	75 2a                	jne    c000f898 <tcp_enqueue_flags+0x1b0>
c000f86e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f872:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f875:	83 c8 80             	or     eax,0xffffff80
c000f878:	88 c2                	mov    dl,al
c000f87a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f87e:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f881:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f887:	83 c0 01             	add    eax,0x1
c000f88a:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f890:	b0 ff                	mov    al,0xff
c000f892:	e9 39 01 00 00       	jmp    c000f9d0 <tcp_enqueue_flags+0x2e8>
c000f897:	90                   	nop
c000f898:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f89c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f89f:	0f b7 c0             	movzx  eax,ax
c000f8a2:	85 c0                	test   eax,eax
c000f8a4:	74 16                	je     c000f8bc <tcp_enqueue_flags+0x1d4>
c000f8a6:	83 ec 08             	sub    esp,0x8
c000f8a9:	68 70 04 03 c0       	push   0xc0030470
c000f8ae:	68 26 f6 02 c0       	push   0xc002f626
c000f8b3:	e8 dc 00 01 00       	call   c001f994 <CPrintf>
c000f8b8:	83 c4 10             	add    esp,0x10
c000f8bb:	90                   	nop
c000f8bc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f8c0:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f8c3:	85 c0                	test   eax,eax
c000f8c5:	75 0d                	jne    c000f8d4 <tcp_enqueue_flags+0x1ec>
c000f8c7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f8cb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f8cf:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000f8d2:	eb 30                	jmp    c000f904 <tcp_enqueue_flags+0x21c>
c000f8d4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f8d8:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f8db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f8df:	eb 0f                	jmp    c000f8f0 <tcp_enqueue_flags+0x208>
c000f8e1:	8d 76 00             	lea    esi,[esi+0x0]
c000f8e4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f8e8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f8ee:	66 90                	xchg   ax,ax
c000f8f0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f8f4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8f6:	85 c0                	test   eax,eax
c000f8f8:	75 ea                	jne    c000f8e4 <tcp_enqueue_flags+0x1fc>
c000f8fa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f8fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f902:	89 10                	mov    DWORD PTR [eax],edx
c000f904:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f908:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c000f90e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f913:	83 e0 02             	and    eax,0x2
c000f916:	75 0c                	jne    c000f924 <tcp_enqueue_flags+0x23c>
c000f918:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f91d:	83 e0 01             	and    eax,0x1
c000f920:	74 26                	je     c000f948 <tcp_enqueue_flags+0x260>
c000f922:	66 90                	xchg   ax,ax
c000f924:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f928:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
c000f92b:	8d 50 01             	lea    edx,[eax+0x1]
c000f92e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f932:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000f935:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f939:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000f93d:	83 e8 01             	sub    eax,0x1
c000f940:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f944:	66 89 42 72          	mov    WORD PTR [edx+0x72],ax
c000f948:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f94d:	83 e0 01             	and    eax,0x1
c000f950:	74 16                	je     c000f968 <tcp_enqueue_flags+0x280>
c000f952:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f956:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f959:	83 c8 20             	or     eax,0x20
c000f95c:	88 c2                	mov    dl,al
c000f95e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f962:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f965:	8d 76 00             	lea    esi,[esi+0x0]
c000f968:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f96c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f96f:	83 ec 0c             	sub    esp,0xc
c000f972:	50                   	push   eax
c000f973:	e8 b0 90 ff ff       	call   c0008a28 <pbuf_clen>
c000f978:	83 c4 10             	add    esp,0x10
c000f97b:	88 c1                	mov    cl,al
c000f97d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f981:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000f984:	0f b6 c1             	movzx  eax,cl
c000f987:	01 d0                	add    eax,edx
c000f989:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f98d:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000f991:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f995:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f998:	0f b7 c0             	movzx  eax,ax
c000f99b:	85 c0                	test   eax,eax
c000f99d:	74 2d                	je     c000f9cc <tcp_enqueue_flags+0x2e4>
c000f99f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9a3:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f9a6:	85 c0                	test   eax,eax
c000f9a8:	75 22                	jne    c000f9cc <tcp_enqueue_flags+0x2e4>
c000f9aa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9ae:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f9b1:	85 c0                	test   eax,eax
c000f9b3:	75 17                	jne    c000f9cc <tcp_enqueue_flags+0x2e4>
c000f9b5:	83 ec 08             	sub    esp,0x8
c000f9b8:	68 9c 04 03 c0       	push   0xc003049c
c000f9bd:	68 26 f6 02 c0       	push   0xc002f626
c000f9c2:	e8 cd ff 00 00       	call   c001f994 <CPrintf>
c000f9c7:	83 c4 10             	add    esp,0x10
c000f9ca:	66 90                	xchg   ax,ax
c000f9cc:	b0 00                	mov    al,0x0
c000f9ce:	66 90                	xchg   ax,ax
c000f9d0:	83 c4 3c             	add    esp,0x3c
c000f9d3:	c3                   	ret    

c000f9d4 <tcp_send_fin>:
c000f9d4:	53                   	push   ebx
c000f9d5:	83 ec 18             	sub    esp,0x18
c000f9d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f9dc:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f9df:	85 c0                	test   eax,eax
c000f9e1:	74 75                	je     c000fa58 <tcp_send_fin+0x84>
c000f9e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f9e7:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f9ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f9ee:	eb 0c                	jmp    c000f9fc <tcp_send_fin+0x28>
c000f9f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9f4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f9fa:	66 90                	xchg   ax,ax
c000f9fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa00:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa02:	85 c0                	test   eax,eax
c000fa04:	75 ea                	jne    c000f9f0 <tcp_send_fin+0x1c>
c000fa06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa0a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fa0d:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000fa11:	0f b7 c0             	movzx  eax,ax
c000fa14:	83 ec 0c             	sub    esp,0xc
c000fa17:	50                   	push   eax
c000fa18:	e8 cb 11 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000fa1d:	83 c4 10             	add    esp,0x10
c000fa20:	0f b7 c0             	movzx  eax,ax
c000fa23:	83 e0 07             	and    eax,0x7
c000fa26:	75 30                	jne    c000fa58 <tcp_send_fin+0x84>
c000fa28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa2c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fa2f:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000fa33:	83 ec 0c             	sub    esp,0xc
c000fa36:	6a 01                	push   0x1
c000fa38:	e8 ab 11 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000fa3d:	83 c4 10             	add    esp,0x10
c000fa40:	89 c1                	mov    ecx,eax
c000fa42:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa46:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000fa49:	89 d8                	mov    eax,ebx
c000fa4b:	09 c8                	or     eax,ecx
c000fa4d:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000fa51:	b0 00                	mov    al,0x0
c000fa53:	eb 17                	jmp    c000fa6c <tcp_send_fin+0x98>
c000fa55:	8d 76 00             	lea    esi,[esi+0x0]
c000fa58:	83 ec 08             	sub    esp,0x8
c000fa5b:	6a 01                	push   0x1
c000fa5d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fa61:	e8 82 fc ff ff       	call   c000f6e8 <tcp_enqueue_flags>
c000fa66:	83 c4 10             	add    esp,0x10
c000fa69:	8d 76 00             	lea    esi,[esi+0x0]
c000fa6c:	83 c4 18             	add    esp,0x18
c000fa6f:	5b                   	pop    ebx
c000fa70:	c3                   	ret    
c000fa71:	8d 76 00             	lea    esi,[esi+0x0]

c000fa74 <tcp_send_empty_ack>:
c000fa74:	53                   	push   ebx
c000fa75:	83 ec 18             	sub    esp,0x18
c000fa78:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fa7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa81:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000fa84:	83 ec 0c             	sub    esp,0xc
c000fa87:	50                   	push   eax
c000fa88:	e8 7f 11 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000fa8d:	83 c4 10             	add    esp,0x10
c000fa90:	89 c2                	mov    edx,eax
c000fa92:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fa97:	52                   	push   edx
c000fa98:	6a 00                	push   0x0
c000fa9a:	50                   	push   eax
c000fa9b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fa9f:	e8 34 ee ff ff       	call   c000e8d8 <tcp_output_alloc_header>
c000faa4:	83 c4 10             	add    esp,0x10
c000faa7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000faab:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fab0:	75 0a                	jne    c000fabc <tcp_send_empty_ack+0x48>
c000fab2:	b0 fe                	mov    al,0xfe
c000fab4:	e9 97 00 00 00       	jmp    c000fb50 <tcp_send_empty_ack+0xdc>
c000fab9:	8d 76 00             	lea    esi,[esi+0x0]
c000fabc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fac0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fac3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000fac7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000facb:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000face:	83 e0 fc             	and    eax,0xfffffffc
c000fad1:	88 c2                	mov    dl,al
c000fad3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fad7:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fada:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fade:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fae1:	0f b7 d0             	movzx  edx,ax
c000fae4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fae8:	8d 48 04             	lea    ecx,[eax+0x4]
c000faeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000faef:	83 ec 0c             	sub    esp,0xc
c000faf2:	52                   	push   edx
c000faf3:	6a 06                	push   0x6
c000faf5:	51                   	push   ecx
c000faf6:	50                   	push   eax
c000faf7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fafb:	e8 70 35 00 00       	call   c0013070 <inet_chksum_pseudo>
c000fb00:	83 c4 20             	add    esp,0x20
c000fb03:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000fb07:	66 89 42 10          	mov    WORD PTR [edx+0x10],ax
c000fb0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb0f:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c000fb12:	0f b6 c8             	movzx  ecx,al
c000fb15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb19:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000fb1c:	0f b6 d0             	movzx  edx,al
c000fb1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb23:	8d 58 04             	lea    ebx,[eax+0x4]
c000fb26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb2a:	83 ec 08             	sub    esp,0x8
c000fb2d:	6a 06                	push   0x6
c000fb2f:	51                   	push   ecx
c000fb30:	52                   	push   edx
c000fb31:	53                   	push   ebx
c000fb32:	50                   	push   eax
c000fb33:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fb37:	e8 68 41 00 00       	call   c0013ca4 <ip_output>
c000fb3c:	83 c4 20             	add    esp,0x20
c000fb3f:	83 ec 0c             	sub    esp,0xc
c000fb42:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fb46:	e8 09 87 ff ff       	call   c0008254 <pbuf_free>
c000fb4b:	83 c4 10             	add    esp,0x10
c000fb4e:	b0 00                	mov    al,0x0
c000fb50:	83 c4 18             	add    esp,0x18
c000fb53:	5b                   	pop    ebx
c000fb54:	c3                   	ret    
c000fb55:	8d 76 00             	lea    esi,[esi+0x0]

c000fb58 <tcp_output_segment>:
c000fb58:	56                   	push   esi
c000fb59:	53                   	push   ebx
c000fb5a:	83 ec 14             	sub    esp,0x14
c000fb5d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fb61:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000fb64:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fb68:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000fb6b:	83 ec 0c             	sub    esp,0xc
c000fb6e:	50                   	push   eax
c000fb6f:	e8 98 10 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000fb74:	83 c4 10             	add    esp,0x10
c000fb77:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000fb7a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fb7e:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000fb82:	0f b7 c0             	movzx  eax,ax
c000fb85:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fb89:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000fb8c:	83 ec 0c             	sub    esp,0xc
c000fb8f:	50                   	push   eax
c000fb90:	e8 53 10 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000fb95:	83 c4 10             	add    esp,0x10
c000fb98:	66 89 43 0e          	mov    WORD PTR [ebx+0xe],ax
c000fb9c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fba0:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000fba3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fba7:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000fbab:	0f b7 c0             	movzx  eax,ax
c000fbae:	01 c2                	add    edx,eax
c000fbb0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fbb4:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000fbb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbbb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fbbe:	83 c0 14             	add    eax,0x14
c000fbc1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fbc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbc9:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000fbcc:	0f b6 c0             	movzx  eax,al
c000fbcf:	83 e0 01             	and    eax,0x1
c000fbd2:	74 10                	je     c000fbe4 <tcp_output_segment+0x8c>
c000fbd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fbd8:	c7 00 02 04 02 18    	mov    DWORD PTR [eax],0x18020402
c000fbde:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c000fbe3:	90                   	nop
c000fbe4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fbe8:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000fbec:	98                   	cwde   
c000fbed:	83 f8 ff             	cmp    eax,0xffffffff
c000fbf0:	75 0a                	jne    c000fbfc <tcp_output_segment+0xa4>
c000fbf2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fbf6:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000fbfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc00:	85 c0                	test   eax,eax
c000fc02:	74 0c                	je     c000fc10 <tcp_output_segment+0xb8>
c000fc04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc08:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc0a:	85 c0                	test   eax,eax
c000fc0c:	75 32                	jne    c000fc40 <tcp_output_segment+0xe8>
c000fc0e:	66 90                	xchg   ax,ax
c000fc10:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc14:	83 c0 04             	add    eax,0x4
c000fc17:	83 ec 0c             	sub    esp,0xc
c000fc1a:	50                   	push   eax
c000fc1b:	e8 dc 38 00 00       	call   c00134fc <ip_route>
c000fc20:	83 c4 10             	add    esp,0x10
c000fc23:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fc27:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fc2c:	0f 84 46 01 00 00    	je     c000fd78 <tcp_output_segment+0x220>
c000fc32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fc36:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000fc39:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc3d:	89 10                	mov    DWORD PTR [eax],edx
c000fc3f:	90                   	nop
c000fc40:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc44:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fc47:	85 c0                	test   eax,eax
c000fc49:	75 2d                	jne    c000fc78 <tcp_output_segment+0x120>
c000fc4b:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000fc51:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc55:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000fc58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc5c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fc5f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fc62:	83 ec 0c             	sub    esp,0xc
c000fc65:	50                   	push   eax
c000fc66:	e8 a1 0f ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000fc6b:	83 c4 10             	add    esp,0x10
c000fc6e:	89 c2                	mov    edx,eax
c000fc70:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc74:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c000fc77:	90                   	nop
c000fc78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc7c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000fc7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc83:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fc86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fc89:	29 c2                	sub    edx,eax
c000fc8b:	89 d0                	mov    eax,edx
c000fc8d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000fc92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fc99:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000fc9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fca1:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000fca4:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000fca9:	89 d6                	mov    esi,edx
c000fcab:	29 c6                	sub    esi,eax
c000fcad:	89 f0                	mov    eax,esi
c000fcaf:	66 89 41 0a          	mov    WORD PTR [ecx+0xa],ax
c000fcb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fcb7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fcba:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000fcbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fcc1:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000fcc4:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000fcc9:	89 d6                	mov    esi,edx
c000fccb:	29 c6                	sub    esi,eax
c000fccd:	89 f0                	mov    eax,esi
c000fccf:	66 89 41 08          	mov    WORD PTR [ecx+0x8],ax
c000fcd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fcd7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fcda:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fcde:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000fce1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fce8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fceb:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c000fcf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fcf5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fcf8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fcfb:	0f b7 c8             	movzx  ecx,ax
c000fcfe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd02:	8d 70 04             	lea    esi,[eax+0x4]
c000fd05:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fd09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd0d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd10:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000fd14:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c000fd17:	83 ec 0c             	sub    esp,0xc
c000fd1a:	51                   	push   ecx
c000fd1b:	6a 06                	push   0x6
c000fd1d:	56                   	push   esi
c000fd1e:	52                   	push   edx
c000fd1f:	50                   	push   eax
c000fd20:	e8 4b 33 00 00       	call   c0013070 <inet_chksum_pseudo>
c000fd25:	83 c4 20             	add    esp,0x20
c000fd28:	66 89 43 10          	mov    WORD PTR [ebx+0x10],ax
c000fd2c:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c000fd32:	83 c0 01             	add    eax,0x1
c000fd35:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c000fd3b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd3f:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c000fd42:	0f b6 d8             	movzx  ebx,al
c000fd45:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd49:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000fd4c:	0f b6 c8             	movzx  ecx,al
c000fd4f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd53:	8d 70 04             	lea    esi,[eax+0x4]
c000fd56:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fd5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd61:	83 ec 08             	sub    esp,0x8
c000fd64:	6a 06                	push   0x6
c000fd66:	53                   	push   ebx
c000fd67:	51                   	push   ecx
c000fd68:	56                   	push   esi
c000fd69:	52                   	push   edx
c000fd6a:	50                   	push   eax
c000fd6b:	e8 34 3f 00 00       	call   c0013ca4 <ip_output>
c000fd70:	83 c4 20             	add    esp,0x20
c000fd73:	eb 07                	jmp    c000fd7c <tcp_output_segment+0x224>
c000fd75:	8d 76 00             	lea    esi,[esi+0x0]
c000fd78:	90                   	nop
c000fd79:	8d 76 00             	lea    esi,[esi+0x0]
c000fd7c:	83 c4 14             	add    esp,0x14
c000fd7f:	5b                   	pop    ebx
c000fd80:	5e                   	pop    esi
c000fd81:	c3                   	ret    
c000fd82:	66 90                	xchg   ax,ax

c000fd84 <tcp_output>:
c000fd84:	56                   	push   esi
c000fd85:	53                   	push   ebx
c000fd86:	83 ec 24             	sub    esp,0x24
c000fd89:	a1 88 68 03 c0       	mov    eax,ds:0xc0036888
c000fd8e:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000fd92:	75 08                	jne    c000fd9c <tcp_output+0x18>
c000fd94:	b0 00                	mov    al,0x0
c000fd96:	e9 6d 04 00 00       	jmp    c0010208 <tcp_output+0x484>
c000fd9b:	90                   	nop
c000fd9c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fda0:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000fda4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000fda8:	8b 52 60             	mov    edx,DWORD PTR [edx+0x60]
c000fdab:	0f b7 d8             	movzx  ebx,ax
c000fdae:	0f b7 ca             	movzx  ecx,dx
c000fdb1:	39 cb                	cmp    ebx,ecx
c000fdb3:	76 03                	jbe    c000fdb8 <tcp_output+0x34>
c000fdb5:	89 d0                	mov    eax,edx
c000fdb7:	90                   	nop
c000fdb8:	0f b7 c0             	movzx  eax,ax
c000fdbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fdbf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fdc3:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fdc6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fdca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fdce:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fdd1:	0f b6 c0             	movzx  eax,al
c000fdd4:	83 e0 02             	and    eax,0x2
c000fdd7:	74 4f                	je     c000fe28 <tcp_output+0xa4>
c000fdd9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000fdde:	74 34                	je     c000fe14 <tcp_output+0x90>
c000fde0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fde4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fde7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fdea:	83 ec 0c             	sub    esp,0xc
c000fded:	50                   	push   eax
c000fdee:	e8 19 0e ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000fdf3:	83 c4 10             	add    esp,0x10
c000fdf6:	89 c2                	mov    edx,eax
c000fdf8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fdfc:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000fdff:	29 c2                	sub    edx,eax
c000fe01:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fe05:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fe08:	0f b7 c0             	movzx  eax,ax
c000fe0b:	01 d0                	add    eax,edx
c000fe0d:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000fe11:	73 15                	jae    c000fe28 <tcp_output+0xa4>
c000fe13:	90                   	nop
c000fe14:	83 ec 0c             	sub    esp,0xc
c000fe17:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000fe1b:	e8 54 fc ff ff       	call   c000fa74 <tcp_send_empty_ack>
c000fe20:	83 c4 10             	add    esp,0x10
c000fe23:	e9 e0 03 00 00       	jmp    c0010208 <tcp_output+0x484>
c000fe28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fe2c:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000fe2f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fe33:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000fe38:	0f 84 ea 02 00 00    	je     c0010128 <tcp_output+0x3a4>
c000fe3e:	eb 0c                	jmp    c000fe4c <tcp_output+0xc8>
c000fe40:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fe44:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe46:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fe4a:	66 90                	xchg   ax,ax
c000fe4c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fe50:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe52:	85 c0                	test   eax,eax
c000fe54:	75 ea                	jne    c000fe40 <tcp_output+0xbc>
c000fe56:	e9 cd 02 00 00       	jmp    c0010128 <tcp_output+0x3a4>
c000fe5b:	90                   	nop
c000fe5c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fe60:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fe63:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000fe67:	0f b7 c0             	movzx  eax,ax
c000fe6a:	83 ec 0c             	sub    esp,0xc
c000fe6d:	50                   	push   eax
c000fe6e:	e8 75 0d ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000fe73:	83 c4 10             	add    esp,0x10
c000fe76:	0f b7 c0             	movzx  eax,ax
c000fe79:	83 e0 04             	and    eax,0x4
c000fe7c:	74 16                	je     c000fe94 <tcp_output+0x110>
c000fe7e:	83 ec 08             	sub    esp,0x8
c000fe81:	68 33 05 03 c0       	push   0xc0030533
c000fe86:	68 26 f6 02 c0       	push   0xc002f626
c000fe8b:	e8 04 fb 00 00       	call   c001f994 <CPrintf>
c000fe90:	83 c4 10             	add    esp,0x10
c000fe93:	90                   	nop
c000fe94:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fe98:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000fe9b:	85 c0                	test   eax,eax
c000fe9d:	74 45                	je     c000fee4 <tcp_output+0x160>
c000fe9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fea3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fea6:	0f b6 c0             	movzx  eax,al
c000fea9:	83 e0 44             	and    eax,0x44
c000feac:	75 36                	jne    c000fee4 <tcp_output+0x160>
c000feae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000feb2:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000feb5:	85 c0                	test   eax,eax
c000feb7:	74 33                	je     c000feec <tcp_output+0x168>
c000feb9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000febd:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fec0:	8b 00                	mov    eax,DWORD PTR [eax]
c000fec2:	85 c0                	test   eax,eax
c000fec4:	75 1e                	jne    c000fee4 <tcp_output+0x160>
c000fec6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000feca:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fecd:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000fed0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fed4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000fed7:	0f b7 d2             	movzx  edx,dx
c000feda:	0f b7 c0             	movzx  eax,ax
c000fedd:	39 c2                	cmp    edx,eax
c000fedf:	72 0b                	jb     c000feec <tcp_output+0x168>
c000fee1:	8d 76 00             	lea    esi,[esi+0x0]
c000fee4:	b8 01 00 00 00       	mov    eax,0x1
c000fee9:	eb 09                	jmp    c000fef4 <tcp_output+0x170>
c000feeb:	90                   	nop
c000feec:	b8 00 00 00 00       	mov    eax,0x0
c000fef1:	8d 76 00             	lea    esi,[esi+0x0]
c000fef4:	85 c0                	test   eax,eax
c000fef6:	75 18                	jne    c000ff10 <tcp_output+0x18c>
c000fef8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fefc:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000feff:	0f b6 c0             	movzx  eax,al
c000ff02:	25 a0 00 00 00       	and    eax,0xa0
c000ff07:	0f 84 5b 02 00 00    	je     c0010168 <tcp_output+0x3e4>
c000ff0d:	8d 76 00             	lea    esi,[esi+0x0]
c000ff10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ff14:	8b 10                	mov    edx,DWORD PTR [eax]
c000ff16:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff1a:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000ff1d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff21:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ff24:	83 f8 02             	cmp    eax,0x2
c000ff27:	74 3f                	je     c000ff68 <tcp_output+0x1e4>
c000ff29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ff2d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ff30:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000ff34:	83 ec 0c             	sub    esp,0xc
c000ff37:	6a 10                	push   0x10
c000ff39:	e8 aa 0c ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ff3e:	83 c4 10             	add    esp,0x10
c000ff41:	89 c1                	mov    ecx,eax
c000ff43:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ff47:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ff4a:	89 d8                	mov    eax,ebx
c000ff4c:	09 c8                	or     eax,ecx
c000ff4e:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000ff52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff56:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ff59:	83 e0 fc             	and    eax,0xfffffffc
c000ff5c:	88 c2                	mov    dl,al
c000ff5e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff62:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ff65:	8d 76 00             	lea    esi,[esi+0x0]
c000ff68:	83 ec 08             	sub    esp,0x8
c000ff6b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ff6f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ff73:	e8 e0 fb ff ff       	call   c000fb58 <tcp_output_segment>
c000ff78:	83 c4 10             	add    esp,0x10
c000ff7b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ff7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ff82:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff85:	83 ec 0c             	sub    esp,0xc
c000ff88:	50                   	push   eax
c000ff89:	e8 7e 0c ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000ff8e:	83 c4 10             	add    esp,0x10
c000ff91:	89 c3                	mov    ebx,eax
c000ff93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ff97:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ff9a:	0f b7 f0             	movzx  esi,ax
c000ff9d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ffa1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ffa4:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000ffa8:	0f b7 c0             	movzx  eax,ax
c000ffab:	83 ec 0c             	sub    esp,0xc
c000ffae:	50                   	push   eax
c000ffaf:	e8 34 0c ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ffb4:	83 c4 10             	add    esp,0x10
c000ffb7:	0f b7 c0             	movzx  eax,ax
c000ffba:	83 e0 03             	and    eax,0x3
c000ffbd:	0f 95 c0             	setne  al
c000ffc0:	0f b6 c0             	movzx  eax,al
c000ffc3:	01 f0                	add    eax,esi
c000ffc5:	01 d8                	add    eax,ebx
c000ffc7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ffcb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ffcf:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000ffd2:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000ffd6:	79 0c                	jns    c000ffe4 <tcp_output+0x260>
c000ffd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ffdc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ffe0:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c000ffe3:	90                   	nop
c000ffe4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ffe8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ffeb:	0f b7 d8             	movzx  ebx,ax
c000ffee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fff2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fff5:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000fff9:	0f b7 c0             	movzx  eax,ax
c000fffc:	83 ec 0c             	sub    esp,0xc
c000ffff:	50                   	push   eax
c0010000:	e8 e3 0b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010005:	83 c4 10             	add    esp,0x10
c0010008:	0f b7 c0             	movzx  eax,ax
c001000b:	83 e0 03             	and    eax,0x3
c001000e:	0f 95 c0             	setne  al
c0010011:	0f b6 c0             	movzx  eax,al
c0010014:	01 d8                	add    eax,ebx
c0010016:	85 c0                	test   eax,eax
c0010018:	0f 8e ee 00 00 00    	jle    c001010c <tcp_output+0x388>
c001001e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010022:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010028:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001002c:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c001002f:	85 c0                	test   eax,eax
c0010031:	75 19                	jne    c001004c <tcp_output+0x2c8>
c0010033:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010037:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001003b:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c001003e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010042:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010046:	e9 d1 00 00 00       	jmp    c001011c <tcp_output+0x398>
c001004b:	90                   	nop
c001004c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010050:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010053:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010056:	83 ec 0c             	sub    esp,0xc
c0010059:	50                   	push   eax
c001005a:	e8 ad 0b ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c001005f:	83 c4 10             	add    esp,0x10
c0010062:	89 c3                	mov    ebx,eax
c0010064:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010068:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001006b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001006e:	83 ec 0c             	sub    esp,0xc
c0010071:	50                   	push   eax
c0010072:	e8 95 0b ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010077:	83 c4 10             	add    esp,0x10
c001007a:	29 c3                	sub    ebx,eax
c001007c:	89 d8                	mov    eax,ebx
c001007e:	79 74                	jns    c00100f4 <tcp_output+0x370>
c0010080:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010084:	83 c0 7c             	add    eax,0x7c
c0010087:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001008b:	eb 0f                	jmp    c001009c <tcp_output+0x318>
c001008d:	8d 76 00             	lea    esi,[esi+0x0]
c0010090:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010094:	8b 00                	mov    eax,DWORD PTR [eax]
c0010096:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001009a:	66 90                	xchg   ax,ax
c001009c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00100a2:	85 c0                	test   eax,eax
c00100a4:	74 36                	je     c00100dc <tcp_output+0x358>
c00100a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00100ac:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00100af:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00100b2:	83 ec 0c             	sub    esp,0xc
c00100b5:	50                   	push   eax
c00100b6:	e8 51 0b ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c00100bb:	83 c4 10             	add    esp,0x10
c00100be:	89 c3                	mov    ebx,eax
c00100c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00100c4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00100c7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00100ca:	83 ec 0c             	sub    esp,0xc
c00100cd:	50                   	push   eax
c00100ce:	e8 39 0b ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c00100d3:	83 c4 10             	add    esp,0x10
c00100d6:	29 c3                	sub    ebx,eax
c00100d8:	89 d8                	mov    eax,ebx
c00100da:	78 b4                	js     c0010090 <tcp_output+0x30c>
c00100dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100e0:	8b 10                	mov    edx,DWORD PTR [eax]
c00100e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00100e6:	89 10                	mov    DWORD PTR [eax],edx
c00100e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00100f0:	89 10                	mov    DWORD PTR [eax],edx
c00100f2:	eb 28                	jmp    c001011c <tcp_output+0x398>
c00100f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00100f8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00100fc:	89 10                	mov    DWORD PTR [eax],edx
c00100fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010102:	8b 00                	mov    eax,DWORD PTR [eax]
c0010104:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010108:	eb 12                	jmp    c001011c <tcp_output+0x398>
c001010a:	66 90                	xchg   ax,ax
c001010c:	83 ec 0c             	sub    esp,0xc
c001010f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010113:	e8 b4 9d ff ff       	call   c0009ecc <tcp_seg_free>
c0010118:	83 c4 10             	add    esp,0x10
c001011b:	90                   	nop
c001011c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010120:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c0010123:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010127:	90                   	nop
c0010128:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001012d:	74 3d                	je     c001016c <tcp_output+0x3e8>
c001012f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010133:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010136:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010139:	83 ec 0c             	sub    esp,0xc
c001013c:	50                   	push   eax
c001013d:	e8 ca 0a ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010142:	83 c4 10             	add    esp,0x10
c0010145:	89 c2                	mov    edx,eax
c0010147:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001014b:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c001014e:	29 c2                	sub    edx,eax
c0010150:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010154:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010157:	0f b7 c0             	movzx  eax,ax
c001015a:	01 d0                	add    eax,edx
c001015c:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0010160:	0f 83 f6 fc ff ff    	jae    c000fe5c <tcp_output+0xd8>
c0010166:	eb 04                	jmp    c001016c <tcp_output+0x3e8>
c0010168:	90                   	nop
c0010169:	8d 76 00             	lea    esi,[esi+0x0]
c001016c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010170:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c0010173:	85 c0                	test   eax,eax
c0010175:	75 0d                	jne    c0010184 <tcp_output+0x400>
c0010177:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001017b:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c0010181:	8d 76 00             	lea    esi,[esi+0x0]
c0010184:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010189:	74 65                	je     c00101f0 <tcp_output+0x46c>
c001018b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001018f:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c0010195:	0f b6 c0             	movzx  eax,al
c0010198:	85 c0                	test   eax,eax
c001019a:	75 54                	jne    c00101f0 <tcp_output+0x46c>
c001019c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101a0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00101a3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00101a6:	83 ec 0c             	sub    esp,0xc
c00101a9:	50                   	push   eax
c00101aa:	e8 5d 0a ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c00101af:	83 c4 10             	add    esp,0x10
c00101b2:	89 c2                	mov    edx,eax
c00101b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101b8:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c00101bb:	29 c2                	sub    edx,eax
c00101bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101c1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00101c4:	0f b7 c0             	movzx  eax,ax
c00101c7:	01 c2                	add    edx,eax
c00101c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101cd:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c00101d0:	0f b7 c0             	movzx  eax,ax
c00101d3:	39 c2                	cmp    edx,eax
c00101d5:	76 19                	jbe    c00101f0 <tcp_output+0x46c>
c00101d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101db:	c7 80 a0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xa0],0x0
c00101e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101e9:	c6 80 a4 00 00 00 01 	mov    BYTE PTR [eax+0xa4],0x1
c00101f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101f4:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00101f7:	83 e0 7f             	and    eax,0x7f
c00101fa:	88 c2                	mov    dl,al
c00101fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010200:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c0010203:	b0 00                	mov    al,0x0
c0010205:	8d 76 00             	lea    esi,[esi+0x0]
c0010208:	83 c4 24             	add    esp,0x24
c001020b:	5b                   	pop    ebx
c001020c:	5e                   	pop    esi
c001020d:	c3                   	ret    
c001020e:	66 90                	xchg   ax,ax

c0010210 <tcp_rst>:
c0010210:	83 ec 2c             	sub    esp,0x2c
c0010213:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0010217:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001021b:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c0010220:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0010225:	83 ec 04             	sub    esp,0x4
c0010228:	6a 00                	push   0x0
c001022a:	6a 14                	push   0x14
c001022c:	6a 01                	push   0x1
c001022e:	e8 f9 81 ff ff       	call   c000842c <pbuf_alloc>
c0010233:	83 c4 10             	add    esp,0x10
c0010236:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001023a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001023f:	0f 84 37 01 00 00    	je     c001037c <tcp_rst+0x16c>
c0010245:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010249:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c001024d:	0f b7 c0             	movzx  eax,ax
c0010250:	83 f8 13             	cmp    eax,0x13
c0010253:	77 17                	ja     c001026c <tcp_rst+0x5c>
c0010255:	83 ec 08             	sub    esp,0x8
c0010258:	68 40 02 03 c0       	push   0xc0030240
c001025d:	68 26 f6 02 c0       	push   0xc002f626
c0010262:	e8 2d f7 00 00       	call   c001f994 <CPrintf>
c0010267:	83 c4 10             	add    esp,0x10
c001026a:	66 90                	xchg   ax,ax
c001026c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010270:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010273:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010277:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c001027c:	83 ec 0c             	sub    esp,0xc
c001027f:	50                   	push   eax
c0010280:	e8 63 09 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010285:	83 c4 10             	add    esp,0x10
c0010288:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001028c:	66 89 02             	mov    WORD PTR [edx],ax
c001028f:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0010294:	83 ec 0c             	sub    esp,0xc
c0010297:	50                   	push   eax
c0010298:	e8 4b 09 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001029d:	83 c4 10             	add    esp,0x10
c00102a0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00102a4:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00102a8:	83 ec 0c             	sub    esp,0xc
c00102ab:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00102af:	e8 58 09 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c00102b4:	83 c4 10             	add    esp,0x10
c00102b7:	89 c2                	mov    edx,eax
c00102b9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00102bd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00102c0:	83 ec 0c             	sub    esp,0xc
c00102c3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00102c7:	e8 40 09 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c00102cc:	83 c4 10             	add    esp,0x10
c00102cf:	89 c2                	mov    edx,eax
c00102d1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00102d5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00102d8:	83 ec 0c             	sub    esp,0xc
c00102db:	68 14 50 00 00       	push   0x5014
c00102e0:	e8 03 09 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00102e5:	83 c4 10             	add    esp,0x10
c00102e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00102ec:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c00102f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00102f4:	66 c7 40 0e 08 60    	mov    WORD PTR [eax+0xe],0x6008
c00102fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00102fe:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c0010304:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010308:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c001030e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010312:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010315:	0f b7 c0             	movzx  eax,ax
c0010318:	83 ec 0c             	sub    esp,0xc
c001031b:	50                   	push   eax
c001031c:	6a 06                	push   0x6
c001031e:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0010322:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0010326:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001032a:	e8 41 2d 00 00       	call   c0013070 <inet_chksum_pseudo>
c001032f:	83 c4 20             	add    esp,0x20
c0010332:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010336:	66 89 42 10          	mov    WORD PTR [edx+0x10],ax
c001033a:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c0010340:	83 c0 01             	add    eax,0x1
c0010343:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c0010349:	83 ec 08             	sub    esp,0x8
c001034c:	6a 06                	push   0x6
c001034e:	6a 00                	push   0x0
c0010350:	68 ff 00 00 00       	push   0xff
c0010355:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0010359:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001035d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010361:	e8 3e 39 00 00       	call   c0013ca4 <ip_output>
c0010366:	83 c4 20             	add    esp,0x20
c0010369:	83 ec 0c             	sub    esp,0xc
c001036c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010370:	e8 df 7e ff ff       	call   c0008254 <pbuf_free>
c0010375:	83 c4 10             	add    esp,0x10
c0010378:	eb 06                	jmp    c0010380 <tcp_rst+0x170>
c001037a:	66 90                	xchg   ax,ax
c001037c:	90                   	nop
c001037d:	8d 76 00             	lea    esi,[esi+0x0]
c0010380:	83 c4 2c             	add    esp,0x2c
c0010383:	c3                   	ret    

c0010384 <tcp_rexmit_rto>:
c0010384:	83 ec 1c             	sub    esp,0x1c
c0010387:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001038b:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c001038e:	85 c0                	test   eax,eax
c0010390:	74 7a                	je     c001040c <tcp_rexmit_rto+0x88>
c0010392:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010396:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010399:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001039d:	eb 0d                	jmp    c00103ac <tcp_rexmit_rto+0x28>
c001039f:	90                   	nop
c00103a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00103a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00103a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00103aa:	66 90                	xchg   ax,ax
c00103ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00103b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00103b2:	85 c0                	test   eax,eax
c00103b4:	75 ea                	jne    c00103a0 <tcp_rexmit_rto+0x1c>
c00103b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00103ba:	8b 50 78             	mov    edx,DWORD PTR [eax+0x78]
c00103bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00103c1:	89 10                	mov    DWORD PTR [eax],edx
c00103c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00103c7:	8b 50 7c             	mov    edx,DWORD PTR [eax+0x7c]
c00103ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00103ce:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c00103d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00103d5:	c7 40 7c 00 00 00 00 	mov    DWORD PTR [eax+0x7c],0x0
c00103dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00103e0:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c00103e3:	83 c0 01             	add    eax,0x1
c00103e6:	88 c2                	mov    dl,al
c00103e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00103ec:	88 50 4e             	mov    BYTE PTR [eax+0x4e],dl
c00103ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00103f3:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00103fa:	83 ec 0c             	sub    esp,0xc
c00103fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010401:	e8 7e f9 ff ff       	call   c000fd84 <tcp_output>
c0010406:	83 c4 10             	add    esp,0x10
c0010409:	eb 05                	jmp    c0010410 <tcp_rexmit_rto+0x8c>
c001040b:	90                   	nop
c001040c:	90                   	nop
c001040d:	8d 76 00             	lea    esi,[esi+0x0]
c0010410:	83 c4 1c             	add    esp,0x1c
c0010413:	c3                   	ret    

c0010414 <tcp_rexmit>:
c0010414:	53                   	push   ebx
c0010415:	83 ec 18             	sub    esp,0x18
c0010418:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001041c:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c001041f:	85 c0                	test   eax,eax
c0010421:	0f 84 a9 00 00 00    	je     c00104d0 <tcp_rexmit+0xbc>
c0010427:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001042b:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c001042e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010432:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010436:	8b 10                	mov    edx,DWORD PTR [eax]
c0010438:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001043c:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c001043f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010443:	83 c0 78             	add    eax,0x78
c0010446:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001044a:	eb 0c                	jmp    c0010458 <tcp_rexmit+0x44>
c001044c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010450:	8b 00                	mov    eax,DWORD PTR [eax]
c0010452:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010456:	66 90                	xchg   ax,ax
c0010458:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001045c:	8b 00                	mov    eax,DWORD PTR [eax]
c001045e:	85 c0                	test   eax,eax
c0010460:	74 36                	je     c0010498 <tcp_rexmit+0x84>
c0010462:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010466:	8b 00                	mov    eax,DWORD PTR [eax]
c0010468:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001046b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001046e:	83 ec 0c             	sub    esp,0xc
c0010471:	50                   	push   eax
c0010472:	e8 95 07 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010477:	83 c4 10             	add    esp,0x10
c001047a:	89 c3                	mov    ebx,eax
c001047c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010480:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010483:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010486:	83 ec 0c             	sub    esp,0xc
c0010489:	50                   	push   eax
c001048a:	e8 7d 07 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c001048f:	83 c4 10             	add    esp,0x10
c0010492:	29 c3                	sub    ebx,eax
c0010494:	89 d8                	mov    eax,ebx
c0010496:	78 b4                	js     c001044c <tcp_rexmit+0x38>
c0010498:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001049c:	8b 10                	mov    edx,DWORD PTR [eax]
c001049e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00104a2:	89 10                	mov    DWORD PTR [eax],edx
c00104a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00104a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104ac:	89 10                	mov    DWORD PTR [eax],edx
c00104ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104b2:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c00104b5:	83 c0 01             	add    eax,0x1
c00104b8:	88 c2                	mov    dl,al
c00104ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104be:	88 50 4e             	mov    BYTE PTR [eax+0x4e],dl
c00104c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104c5:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00104cc:	eb 06                	jmp    c00104d4 <tcp_rexmit+0xc0>
c00104ce:	66 90                	xchg   ax,ax
c00104d0:	90                   	nop
c00104d1:	8d 76 00             	lea    esi,[esi+0x0]
c00104d4:	83 c4 18             	add    esp,0x18
c00104d7:	5b                   	pop    ebx
c00104d8:	c3                   	ret    
c00104d9:	8d 76 00             	lea    esi,[esi+0x0]

c00104dc <tcp_rexmit_fast>:
c00104dc:	83 ec 0c             	sub    esp,0xc
c00104df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104e3:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00104e6:	85 c0                	test   eax,eax
c00104e8:	0f 84 ca 00 00 00    	je     c00105b8 <tcp_rexmit_fast+0xdc>
c00104ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f2:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00104f5:	0f b6 c0             	movzx  eax,al
c00104f8:	83 e0 04             	and    eax,0x4
c00104fb:	0f 85 b7 00 00 00    	jne    c00105b8 <tcp_rexmit_fast+0xdc>
c0010501:	83 ec 0c             	sub    esp,0xc
c0010504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010508:	e8 07 ff ff ff       	call   c0010414 <tcp_rexmit>
c001050d:	83 c4 10             	add    esp,0x10
c0010510:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010514:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c0010518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001051c:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c001051f:	0f b7 d2             	movzx  edx,dx
c0010522:	0f b7 c0             	movzx  eax,ax
c0010525:	39 c2                	cmp    edx,eax
c0010527:	76 17                	jbe    c0010540 <tcp_rexmit_fast+0x64>
c0010529:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001052d:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c0010530:	0f b7 c0             	movzx  eax,ax
c0010533:	d1 e8                	shr    eax,1
c0010535:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010539:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c001053d:	eb 19                	jmp    c0010558 <tcp_rexmit_fast+0x7c>
c001053f:	90                   	nop
c0010540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010544:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c0010548:	0f b7 c0             	movzx  eax,ax
c001054b:	d1 e8                	shr    eax,1
c001054d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010551:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c0010555:	8d 76 00             	lea    esi,[esi+0x0]
c0010558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001055c:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c001055f:	0f b7 d0             	movzx  edx,ax
c0010562:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010566:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010569:	0f b7 c0             	movzx  eax,ax
c001056c:	01 c0                	add    eax,eax
c001056e:	39 c2                	cmp    edx,eax
c0010570:	7d 12                	jge    c0010584 <tcp_rexmit_fast+0xa8>
c0010572:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010576:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010579:	d1 e0                	shl    eax,1
c001057b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001057f:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c0010583:	90                   	nop
c0010584:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010588:	8b 50 58             	mov    edx,DWORD PTR [eax+0x58]
c001058b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001058f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010592:	89 c1                	mov    ecx,eax
c0010594:	d1 e1                	shl    ecx,1
c0010596:	01 c8                	add    eax,ecx
c0010598:	01 d0                	add    eax,edx
c001059a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001059e:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c00105a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105a6:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00105a9:	83 c8 04             	or     eax,0x4
c00105ac:	88 c2                	mov    dl,al
c00105ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105b2:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c00105b5:	8d 76 00             	lea    esi,[esi+0x0]
c00105b8:	90                   	nop
c00105b9:	83 c4 0c             	add    esp,0xc
c00105bc:	c3                   	ret    
c00105bd:	8d 76 00             	lea    esi,[esi+0x0]

c00105c0 <tcp_keepalive>:
c00105c0:	83 ec 1c             	sub    esp,0x1c
c00105c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00105c7:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c00105ca:	83 e8 01             	sub    eax,0x1
c00105cd:	83 ec 0c             	sub    esp,0xc
c00105d0:	50                   	push   eax
c00105d1:	e8 36 06 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c00105d6:	83 c4 10             	add    esp,0x10
c00105d9:	50                   	push   eax
c00105da:	6a 00                	push   0x0
c00105dc:	6a 00                	push   0x0
c00105de:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00105e2:	e8 f1 e2 ff ff       	call   c000e8d8 <tcp_output_alloc_header>
c00105e7:	83 c4 10             	add    esp,0x10
c00105ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00105ee:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00105f3:	0f 84 87 00 00 00    	je     c0010680 <tcp_keepalive+0xc0>
c00105f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00105fd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010600:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010604:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010608:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001060b:	0f b7 d0             	movzx  edx,ax
c001060e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010612:	8d 48 04             	lea    ecx,[eax+0x4]
c0010615:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010619:	83 ec 0c             	sub    esp,0xc
c001061c:	52                   	push   edx
c001061d:	6a 06                	push   0x6
c001061f:	51                   	push   ecx
c0010620:	50                   	push   eax
c0010621:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010625:	e8 46 2a 00 00       	call   c0013070 <inet_chksum_pseudo>
c001062a:	83 c4 20             	add    esp,0x20
c001062d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010631:	66 89 42 10          	mov    WORD PTR [edx+0x10],ax
c0010635:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c001063b:	83 c0 01             	add    eax,0x1
c001063e:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c0010644:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010648:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c001064b:	0f b6 d0             	movzx  edx,al
c001064e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010652:	8d 48 04             	lea    ecx,[eax+0x4]
c0010655:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010659:	83 ec 08             	sub    esp,0x8
c001065c:	6a 06                	push   0x6
c001065e:	6a 00                	push   0x0
c0010660:	52                   	push   edx
c0010661:	51                   	push   ecx
c0010662:	50                   	push   eax
c0010663:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010667:	e8 38 36 00 00       	call   c0013ca4 <ip_output>
c001066c:	83 c4 20             	add    esp,0x20
c001066f:	83 ec 0c             	sub    esp,0xc
c0010672:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010676:	e8 d9 7b ff ff       	call   c0008254 <pbuf_free>
c001067b:	83 c4 10             	add    esp,0x10
c001067e:	eb 04                	jmp    c0010684 <tcp_keepalive+0xc4>
c0010680:	90                   	nop
c0010681:	8d 76 00             	lea    esi,[esi+0x0]
c0010684:	83 c4 1c             	add    esp,0x1c
c0010687:	c3                   	ret    

c0010688 <tcp_zero_window_probe>:
c0010688:	53                   	push   ebx
c0010689:	83 ec 28             	sub    esp,0x28
c001068c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010690:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010693:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010697:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001069c:	75 0e                	jne    c00106ac <tcp_zero_window_probe+0x24>
c001069e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00106a2:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c00106a5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00106a9:	8d 76 00             	lea    esi,[esi+0x0]
c00106ac:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00106b1:	0f 84 95 01 00 00    	je     c001084c <tcp_zero_window_probe+0x1c4>
c00106b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00106bb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00106be:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c00106c2:	0f b7 c0             	movzx  eax,ax
c00106c5:	83 ec 0c             	sub    esp,0xc
c00106c8:	50                   	push   eax
c00106c9:	e8 1a 05 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00106ce:	83 c4 10             	add    esp,0x10
c00106d1:	0f b7 c0             	movzx  eax,ax
c00106d4:	83 e0 01             	and    eax,0x1
c00106d7:	74 17                	je     c00106f0 <tcp_zero_window_probe+0x68>
c00106d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00106dd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00106e0:	0f b7 c0             	movzx  eax,ax
c00106e3:	85 c0                	test   eax,eax
c00106e5:	75 09                	jne    c00106f0 <tcp_zero_window_probe+0x68>
c00106e7:	b8 01 00 00 00       	mov    eax,0x1
c00106ec:	eb 0a                	jmp    c00106f8 <tcp_zero_window_probe+0x70>
c00106ee:	66 90                	xchg   ax,ax
c00106f0:	b8 00 00 00 00       	mov    eax,0x0
c00106f5:	8d 76 00             	lea    esi,[esi+0x0]
c00106f8:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00106fc:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0010701:	85 c0                	test   eax,eax
c0010703:	0f 94 c0             	sete   al
c0010706:	0f b6 c0             	movzx  eax,al
c0010709:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001070e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010712:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010715:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010718:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c001071d:	52                   	push   edx
c001071e:	50                   	push   eax
c001071f:	6a 00                	push   0x0
c0010721:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010725:	e8 ae e1 ff ff       	call   c000e8d8 <tcp_output_alloc_header>
c001072a:	83 c4 10             	add    esp,0x10
c001072d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010731:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010736:	0f 84 14 01 00 00    	je     c0010850 <tcp_zero_window_probe+0x1c8>
c001073c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010740:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010743:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010747:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001074c:	85 c0                	test   eax,eax
c001074e:	74 28                	je     c0010778 <tcp_zero_window_probe+0xf0>
c0010750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010754:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010758:	80 e4 c0             	and    ah,0xc0
c001075b:	89 c3                	mov    ebx,eax
c001075d:	83 ec 0c             	sub    esp,0xc
c0010760:	6a 11                	push   0x11
c0010762:	e8 81 04 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010767:	83 c4 10             	add    esp,0x10
c001076a:	09 d8                	or     eax,ebx
c001076c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010770:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c0010774:	eb 5a                	jmp    c00107d0 <tcp_zero_window_probe+0x148>
c0010776:	66 90                	xchg   ax,ax
c0010778:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001077c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001077f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010782:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010786:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001078a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001078d:	83 c0 14             	add    eax,0x14
c0010790:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010794:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010798:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c001079c:	0f b7 c0             	movzx  eax,ax
c001079f:	83 ec 0c             	sub    esp,0xc
c00107a2:	50                   	push   eax
c00107a3:	e8 40 04 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00107a8:	83 c4 10             	add    esp,0x10
c00107ab:	0f b7 c0             	movzx  eax,ax
c00107ae:	c1 e8 0c             	shr    eax,0xc
c00107b1:	c1 e0 02             	shl    eax,0x2
c00107b4:	0f b7 d0             	movzx  edx,ax
c00107b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00107bb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00107be:	52                   	push   edx
c00107bf:	6a 01                	push   0x1
c00107c1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00107c5:	50                   	push   eax
c00107c6:	e8 29 87 ff ff       	call   c0008ef4 <pbuf_copy_partial>
c00107cb:	83 c4 10             	add    esp,0x10
c00107ce:	66 90                	xchg   ax,ax
c00107d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00107d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00107d7:	0f b7 d0             	movzx  edx,ax
c00107da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00107de:	8d 48 04             	lea    ecx,[eax+0x4]
c00107e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00107e5:	83 ec 0c             	sub    esp,0xc
c00107e8:	52                   	push   edx
c00107e9:	6a 06                	push   0x6
c00107eb:	51                   	push   ecx
c00107ec:	50                   	push   eax
c00107ed:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00107f1:	e8 7a 28 00 00       	call   c0013070 <inet_chksum_pseudo>
c00107f6:	83 c4 20             	add    esp,0x20
c00107f9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00107fd:	66 89 42 10          	mov    WORD PTR [edx+0x10],ax
c0010801:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c0010807:	83 c0 01             	add    eax,0x1
c001080a:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c0010810:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010814:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c0010817:	0f b6 d0             	movzx  edx,al
c001081a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001081e:	8d 48 04             	lea    ecx,[eax+0x4]
c0010821:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010825:	83 ec 08             	sub    esp,0x8
c0010828:	6a 06                	push   0x6
c001082a:	6a 00                	push   0x0
c001082c:	52                   	push   edx
c001082d:	51                   	push   ecx
c001082e:	50                   	push   eax
c001082f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0010833:	e8 6c 34 00 00       	call   c0013ca4 <ip_output>
c0010838:	83 c4 20             	add    esp,0x20
c001083b:	83 ec 0c             	sub    esp,0xc
c001083e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010842:	e8 0d 7a ff ff       	call   c0008254 <pbuf_free>
c0010847:	83 c4 10             	add    esp,0x10
c001084a:	eb 08                	jmp    c0010854 <tcp_zero_window_probe+0x1cc>
c001084c:	90                   	nop
c001084d:	eb 05                	jmp    c0010854 <tcp_zero_window_probe+0x1cc>
c001084f:	90                   	nop
c0010850:	90                   	nop
c0010851:	8d 76 00             	lea    esi,[esi+0x0]
c0010854:	83 c4 28             	add    esp,0x28
c0010857:	5b                   	pop    ebx
c0010858:	c3                   	ret    
c0010859:	66 90                	xchg   ax,ax
c001085b:	90                   	nop

c001085c <sys_timeout>:
c001085c:	83 ec 1c             	sub    esp,0x1c
c001085f:	83 ec 0c             	sub    esp,0xc
c0010862:	6a 0b                	push   0xb
c0010864:	e8 03 70 ff ff       	call   c000786c <memp_malloc>
c0010869:	83 c4 10             	add    esp,0x10
c001086c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010870:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010875:	75 25                	jne    c001089c <sys_timeout+0x40>
c0010877:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001087c:	0f 85 3e 01 00 00    	jne    c00109c0 <sys_timeout+0x164>
c0010882:	83 ec 08             	sub    esp,0x8
c0010885:	68 4c 05 03 c0       	push   0xc003054c
c001088a:	68 26 f6 02 c0       	push   0xc002f626
c001088f:	e8 00 f1 00 00       	call   c001f994 <CPrintf>
c0010894:	83 c4 10             	add    esp,0x10
c0010897:	e9 24 01 00 00       	jmp    c00109c0 <sys_timeout+0x164>
c001089c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00108a0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00108a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00108aa:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00108ae:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00108b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00108b5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00108b9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00108bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00108c0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00108c4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00108c7:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c00108cc:	85 c0                	test   eax,eax
c00108ce:	75 10                	jne    c00108e0 <sys_timeout+0x84>
c00108d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00108d4:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c00108d9:	e9 e6 00 00 00       	jmp    c00109c4 <sys_timeout+0x168>
c00108de:	66 90                	xchg   ax,ax
c00108e0:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c00108e5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00108e8:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00108ec:	73 2e                	jae    c001091c <sys_timeout+0xc0>
c00108ee:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c00108f3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00108f6:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c00108fb:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c00108ff:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010902:	8b 15 d4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8d4
c0010908:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001090c:	89 10                	mov    DWORD PTR [eax],edx
c001090e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010912:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010917:	e9 a8 00 00 00       	jmp    c00109c4 <sys_timeout+0x168>
c001091c:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010921:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010925:	e9 86 00 00 00       	jmp    c00109b0 <sys_timeout+0x154>
c001092a:	66 90                	xchg   ax,ax
c001092c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010930:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010933:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010937:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001093a:	29 c2                	sub    edx,eax
c001093c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010940:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010943:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010947:	8b 00                	mov    eax,DWORD PTR [eax]
c0010949:	85 c0                	test   eax,eax
c001094b:	74 17                	je     c0010964 <sys_timeout+0x108>
c001094d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010951:	8b 00                	mov    eax,DWORD PTR [eax]
c0010953:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010956:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001095a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001095d:	39 c2                	cmp    edx,eax
c001095f:	76 43                	jbe    c00109a4 <sys_timeout+0x148>
c0010961:	8d 76 00             	lea    esi,[esi+0x0]
c0010964:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010968:	8b 00                	mov    eax,DWORD PTR [eax]
c001096a:	85 c0                	test   eax,eax
c001096c:	74 1e                	je     c001098c <sys_timeout+0x130>
c001096e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010972:	8b 00                	mov    eax,DWORD PTR [eax]
c0010974:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0010977:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001097b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001097e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010982:	8b 00                	mov    eax,DWORD PTR [eax]
c0010984:	29 d1                	sub    ecx,edx
c0010986:	89 ca                	mov    edx,ecx
c0010988:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001098b:	90                   	nop
c001098c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010990:	8b 10                	mov    edx,DWORD PTR [eax]
c0010992:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010996:	89 10                	mov    DWORD PTR [eax],edx
c0010998:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001099c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00109a0:	89 10                	mov    DWORD PTR [eax],edx
c00109a2:	eb 20                	jmp    c00109c4 <sys_timeout+0x168>
c00109a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00109a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00109aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00109ae:	66 90                	xchg   ax,ax
c00109b0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00109b5:	0f 85 71 ff ff ff    	jne    c001092c <sys_timeout+0xd0>
c00109bb:	eb 07                	jmp    c00109c4 <sys_timeout+0x168>
c00109bd:	8d 76 00             	lea    esi,[esi+0x0]
c00109c0:	90                   	nop
c00109c1:	8d 76 00             	lea    esi,[esi+0x0]
c00109c4:	83 c4 1c             	add    esp,0x1c
c00109c7:	c3                   	ret    

c00109c8 <tcpip_tcp_timer>:
c00109c8:	83 ec 0c             	sub    esp,0xc
c00109cb:	e8 34 a5 ff ff       	call   c000af04 <tcp_tmr>
c00109d0:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c00109d5:	85 c0                	test   eax,eax
c00109d7:	75 0b                	jne    c00109e4 <tcpip_tcp_timer+0x1c>
c00109d9:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c00109de:	85 c0                	test   eax,eax
c00109e0:	74 1e                	je     c0010a00 <tcpip_tcp_timer+0x38>
c00109e2:	66 90                	xchg   ax,ax
c00109e4:	83 ec 04             	sub    esp,0x4
c00109e7:	6a 00                	push   0x0
c00109e9:	68 c8 09 01 c0       	push   0xc00109c8
c00109ee:	68 fa 00 00 00       	push   0xfa
c00109f3:	e8 64 fe ff ff       	call   c001085c <sys_timeout>
c00109f8:	83 c4 10             	add    esp,0x10
c00109fb:	eb 0f                	jmp    c0010a0c <tcpip_tcp_timer+0x44>
c00109fd:	8d 76 00             	lea    esi,[esi+0x0]
c0010a00:	c7 05 d0 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8d0,0x0
c0010a0a:	66 90                	xchg   ax,ax
c0010a0c:	90                   	nop
c0010a0d:	83 c4 0c             	add    esp,0xc
c0010a10:	c3                   	ret    
c0010a11:	8d 76 00             	lea    esi,[esi+0x0]

c0010a14 <tcp_timer_needed>:
c0010a14:	83 ec 0c             	sub    esp,0xc
c0010a17:	a1 d0 a8 03 c0       	mov    eax,ds:0xc003a8d0
c0010a1c:	85 c0                	test   eax,eax
c0010a1e:	75 38                	jne    c0010a58 <tcp_timer_needed+0x44>
c0010a20:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0010a25:	85 c0                	test   eax,eax
c0010a27:	75 0b                	jne    c0010a34 <tcp_timer_needed+0x20>
c0010a29:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c0010a2e:	85 c0                	test   eax,eax
c0010a30:	74 26                	je     c0010a58 <tcp_timer_needed+0x44>
c0010a32:	66 90                	xchg   ax,ax
c0010a34:	c7 05 d0 a8 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003a8d0,0x1
c0010a3e:	83 ec 04             	sub    esp,0x4
c0010a41:	6a 00                	push   0x0
c0010a43:	68 c8 09 01 c0       	push   0xc00109c8
c0010a48:	68 fa 00 00 00       	push   0xfa
c0010a4d:	e8 0a fe ff ff       	call   c001085c <sys_timeout>
c0010a52:	83 c4 10             	add    esp,0x10
c0010a55:	8d 76 00             	lea    esi,[esi+0x0]
c0010a58:	90                   	nop
c0010a59:	83 c4 0c             	add    esp,0xc
c0010a5c:	c3                   	ret    
c0010a5d:	8d 76 00             	lea    esi,[esi+0x0]

c0010a60 <ip_reass_timer>:
c0010a60:	83 ec 0c             	sub    esp,0xc
c0010a63:	e8 f0 3a 00 00       	call   c0014558 <ip_reass_tmr>
c0010a68:	83 ec 04             	sub    esp,0x4
c0010a6b:	6a 00                	push   0x0
c0010a6d:	68 60 0a 01 c0       	push   0xc0010a60
c0010a72:	68 e8 03 00 00       	push   0x3e8
c0010a77:	e8 e0 fd ff ff       	call   c001085c <sys_timeout>
c0010a7c:	83 c4 10             	add    esp,0x10
c0010a7f:	90                   	nop
c0010a80:	83 c4 0c             	add    esp,0xc
c0010a83:	c3                   	ret    

c0010a84 <arp_timer>:
c0010a84:	83 ec 0c             	sub    esp,0xc
c0010a87:	e8 60 0d 00 00       	call   c00117ec <etharp_tmr>
c0010a8c:	83 ec 04             	sub    esp,0x4
c0010a8f:	6a 00                	push   0x0
c0010a91:	68 84 0a 01 c0       	push   0xc0010a84
c0010a96:	68 88 13 00 00       	push   0x1388
c0010a9b:	e8 bc fd ff ff       	call   c001085c <sys_timeout>
c0010aa0:	83 c4 10             	add    esp,0x10
c0010aa3:	90                   	nop
c0010aa4:	83 c4 0c             	add    esp,0xc
c0010aa7:	c3                   	ret    

c0010aa8 <sys_timeouts_init>:
c0010aa8:	83 ec 0c             	sub    esp,0xc
c0010aab:	83 ec 04             	sub    esp,0x4
c0010aae:	6a 00                	push   0x0
c0010ab0:	68 60 0a 01 c0       	push   0xc0010a60
c0010ab5:	68 e8 03 00 00       	push   0x3e8
c0010aba:	e8 9d fd ff ff       	call   c001085c <sys_timeout>
c0010abf:	83 c4 10             	add    esp,0x10
c0010ac2:	83 ec 04             	sub    esp,0x4
c0010ac5:	6a 00                	push   0x0
c0010ac7:	68 84 0a 01 c0       	push   0xc0010a84
c0010acc:	68 88 13 00 00       	push   0x1388
c0010ad1:	e8 86 fd ff ff       	call   c001085c <sys_timeout>
c0010ad6:	83 c4 10             	add    esp,0x10
c0010ad9:	90                   	nop
c0010ada:	83 c4 0c             	add    esp,0xc
c0010add:	c3                   	ret    
c0010ade:	66 90                	xchg   ax,ax

c0010ae0 <sys_untimeout>:
c0010ae0:	83 ec 1c             	sub    esp,0x1c
c0010ae3:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010ae8:	85 c0                	test   eax,eax
c0010aea:	0f 84 b4 00 00 00    	je     c0010ba4 <sys_untimeout+0xc4>
c0010af0:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010af5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010af9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010b01:	e9 8e 00 00 00       	jmp    c0010b94 <sys_untimeout+0xb4>
c0010b06:	66 90                	xchg   ax,ax
c0010b08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b0c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010b0f:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0010b13:	75 6b                	jne    c0010b80 <sys_untimeout+0xa0>
c0010b15:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b19:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010b1c:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0010b20:	75 5e                	jne    c0010b80 <sys_untimeout+0xa0>
c0010b22:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010b27:	75 0f                	jne    c0010b38 <sys_untimeout+0x58>
c0010b29:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b2f:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010b34:	eb 0e                	jmp    c0010b44 <sys_untimeout+0x64>
c0010b36:	66 90                	xchg   ax,ax
c0010b38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b3c:	8b 10                	mov    edx,DWORD PTR [eax]
c0010b3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010b42:	89 10                	mov    DWORD PTR [eax],edx
c0010b44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b48:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b4a:	85 c0                	test   eax,eax
c0010b4c:	74 1e                	je     c0010b6c <sys_untimeout+0x8c>
c0010b4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b52:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b54:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0010b57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b5b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010b5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b62:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b64:	01 ca                	add    edx,ecx
c0010b66:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b69:	8d 76 00             	lea    esi,[esi+0x0]
c0010b6c:	83 ec 08             	sub    esp,0x8
c0010b6f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010b73:	6a 0b                	push   0xb
c0010b75:	e8 1e 6e ff ff       	call   c0007998 <memp_free>
c0010b7a:	83 c4 10             	add    esp,0x10
c0010b7d:	eb 29                	jmp    c0010ba8 <sys_untimeout+0xc8>
c0010b7f:	90                   	nop
c0010b80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b84:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010b88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b8e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010b92:	66 90                	xchg   ax,ax
c0010b94:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010b99:	0f 85 69 ff ff ff    	jne    c0010b08 <sys_untimeout+0x28>
c0010b9f:	90                   	nop
c0010ba0:	eb 06                	jmp    c0010ba8 <sys_untimeout+0xc8>
c0010ba2:	66 90                	xchg   ax,ax
c0010ba4:	90                   	nop
c0010ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0010ba8:	83 c4 1c             	add    esp,0x1c
c0010bab:	c3                   	ret    

c0010bac <sys_timeouts_mbox_fetch>:
c0010bac:	83 ec 1c             	sub    esp,0x1c
c0010baf:	90                   	nop
c0010bb0:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010bb5:	85 c0                	test   eax,eax
c0010bb7:	75 1f                	jne    c0010bd8 <sys_timeouts_mbox_fetch+0x2c>
c0010bb9:	83 ec 04             	sub    esp,0x4
c0010bbc:	6a 00                	push   0x0
c0010bbe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010bc2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010bc6:	e8 b1 00 ff ff       	call   c0000c7c <sys_arch_mbox_fetch>
c0010bcb:	83 c4 10             	add    esp,0x10
c0010bce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010bd2:	e9 cd 00 00 00       	jmp    c0010ca4 <sys_timeouts_mbox_fetch+0xf8>
c0010bd7:	90                   	nop
c0010bd8:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010bdd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010be0:	85 c0                	test   eax,eax
c0010be2:	74 24                	je     c0010c08 <sys_timeouts_mbox_fetch+0x5c>
c0010be4:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010be9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bec:	83 ec 04             	sub    esp,0x4
c0010bef:	50                   	push   eax
c0010bf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010bf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010bf8:	e8 7f 00 ff ff       	call   c0000c7c <sys_arch_mbox_fetch>
c0010bfd:	83 c4 10             	add    esp,0x10
c0010c00:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010c04:	eb 0a                	jmp    c0010c10 <sys_timeouts_mbox_fetch+0x64>
c0010c06:	66 90                	xchg   ax,ax
c0010c08:	c7 44 24 0c ff ff ff ff 	mov    DWORD PTR [esp+0xc],0xffffffff
c0010c10:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c0010c15:	75 5d                	jne    c0010c74 <sys_timeouts_mbox_fetch+0xc8>
c0010c17:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010c1c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010c20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c24:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c26:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010c2b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c2f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010c32:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010c36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c3a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010c3d:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c40:	83 ec 08             	sub    esp,0x8
c0010c43:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010c47:	6a 0b                	push   0xb
c0010c49:	e8 4a 6d ff ff       	call   c0007998 <memp_free>
c0010c4e:	83 c4 10             	add    esp,0x10
c0010c51:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0010c56:	0f 84 54 ff ff ff    	je     c0010bb0 <sys_timeouts_mbox_fetch+0x4>
c0010c5c:	83 ec 0c             	sub    esp,0xc
c0010c5f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010c63:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010c67:	ff d0                	call   eax
c0010c69:	83 c4 10             	add    esp,0x10
c0010c6c:	e9 3f ff ff ff       	jmp    c0010bb0 <sys_timeouts_mbox_fetch+0x4>
c0010c71:	8d 76 00             	lea    esi,[esi+0x0]
c0010c74:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010c79:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c7c:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0010c80:	73 16                	jae    c0010c98 <sys_timeouts_mbox_fetch+0xec>
c0010c82:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010c87:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010c8a:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010c8f:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0010c93:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c96:	eb 0c                	jmp    c0010ca4 <sys_timeouts_mbox_fetch+0xf8>
c0010c98:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010c9d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010ca4:	90                   	nop
c0010ca5:	83 c4 1c             	add    esp,0x1c
c0010ca8:	c3                   	ret    
c0010ca9:	66 90                	xchg   ax,ax
c0010cab:	90                   	nop

c0010cac <udp_input>:
c0010cac:	53                   	push   ebx
c0010cad:	83 ec 28             	sub    esp,0x28
c0010cb0:	66 a1 9a 67 03 c0    	mov    ax,ds:0xc003679a
c0010cb6:	83 c0 01             	add    eax,0x1
c0010cb9:	66 a3 9a 67 03 c0    	mov    ds:0xc003679a,ax
c0010cbf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010cc3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010cca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010cce:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010cd1:	0f b7 d8             	movzx  ebx,ax
c0010cd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010cd8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0010cdb:	0f b7 c0             	movzx  eax,ax
c0010cde:	83 ec 0c             	sub    esp,0xc
c0010ce1:	50                   	push   eax
c0010ce2:	e8 01 ff fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010ce7:	83 c4 10             	add    esp,0x10
c0010cea:	0f b7 c0             	movzx  eax,ax
c0010ced:	c1 e8 08             	shr    eax,0x8
c0010cf0:	0f b7 c0             	movzx  eax,ax
c0010cf3:	83 e0 0f             	and    eax,0xf
c0010cf6:	83 c0 02             	add    eax,0x2
c0010cf9:	c1 e0 02             	shl    eax,0x2
c0010cfc:	39 c3                	cmp    ebx,eax
c0010cfe:	7c 3c                	jl     c0010d3c <udp_input+0x90>
c0010d00:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010d04:	66 8b 00             	mov    ax,WORD PTR [eax]
c0010d07:	0f b7 c0             	movzx  eax,ax
c0010d0a:	83 ec 0c             	sub    esp,0xc
c0010d0d:	50                   	push   eax
c0010d0e:	e8 d5 fe fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010d13:	83 c4 10             	add    esp,0x10
c0010d16:	0f b7 c0             	movzx  eax,ax
c0010d19:	c1 e8 08             	shr    eax,0x8
c0010d1c:	83 e0 0f             	and    eax,0xf
c0010d1f:	c1 e0 02             	shl    eax,0x2
c0010d22:	f7 d8                	neg    eax
c0010d24:	98                   	cwde   
c0010d25:	83 ec 08             	sub    esp,0x8
c0010d28:	50                   	push   eax
c0010d29:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010d2d:	e8 86 73 ff ff       	call   c00080b8 <pbuf_header>
c0010d32:	83 c4 10             	add    esp,0x10
c0010d35:	0f b6 c0             	movzx  eax,al
c0010d38:	85 c0                	test   eax,eax
c0010d3a:	74 34                	je     c0010d70 <udp_input+0xc4>
c0010d3c:	66 a1 a2 67 03 c0    	mov    ax,ds:0xc00367a2
c0010d42:	83 c0 01             	add    eax,0x1
c0010d45:	66 a3 a2 67 03 c0    	mov    ds:0xc00367a2,ax
c0010d4b:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c0010d51:	83 c0 01             	add    eax,0x1
c0010d54:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c0010d5a:	83 ec 0c             	sub    esp,0xc
c0010d5d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010d61:	e8 ee 74 ff ff       	call   c0008254 <pbuf_free>
c0010d66:	83 c4 10             	add    esp,0x10
c0010d69:	e9 aa 03 00 00       	jmp    c0011118 <udp_input+0x46c>
c0010d6e:	66 90                	xchg   ax,ax
c0010d70:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010d74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010d7b:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0010d80:	83 ec 08             	sub    esp,0x8
c0010d83:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010d87:	50                   	push   eax
c0010d88:	e8 bb 2f 00 00       	call   c0013d48 <ip4_addr_isbroadcast>
c0010d8d:	83 c4 10             	add    esp,0x10
c0010d90:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0010d94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010d98:	66 8b 00             	mov    ax,WORD PTR [eax]
c0010d9b:	0f b7 c0             	movzx  eax,ax
c0010d9e:	83 ec 0c             	sub    esp,0xc
c0010da1:	50                   	push   eax
c0010da2:	e8 41 fe fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010da7:	83 c4 10             	add    esp,0x10
c0010daa:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0010daf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010db3:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0010db7:	0f b7 c0             	movzx  eax,ax
c0010dba:	83 ec 0c             	sub    esp,0xc
c0010dbd:	50                   	push   eax
c0010dbe:	e8 25 fe fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010dc3:	83 c4 10             	add    esp,0x10
c0010dc6:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c0010dcb:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0010dd3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0010dd8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010de0:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0010de5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010de9:	e9 0a 01 00 00       	jmp    c0010ef8 <udp_input+0x24c>
c0010dee:	66 90                	xchg   ax,ax
c0010df0:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0010df5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010df9:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0010dfd:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c0010e02:	0f b7 c0             	movzx  eax,ax
c0010e05:	39 c2                	cmp    edx,eax
c0010e07:	75 57                	jne    c0010e60 <udp_input+0x1b4>
c0010e09:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c0010e0e:	85 c0                	test   eax,eax
c0010e10:	75 12                	jne    c0010e24 <udp_input+0x178>
c0010e12:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010e16:	85 c0                	test   eax,eax
c0010e18:	74 22                	je     c0010e3c <udp_input+0x190>
c0010e1a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010e1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0010e20:	85 c0                	test   eax,eax
c0010e22:	74 18                	je     c0010e3c <udp_input+0x190>
c0010e24:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010e28:	8b 10                	mov    edx,DWORD PTR [eax]
c0010e2a:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0010e2f:	39 c2                	cmp    edx,eax
c0010e31:	74 09                	je     c0010e3c <udp_input+0x190>
c0010e33:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c0010e38:	85 c0                	test   eax,eax
c0010e3a:	74 24                	je     c0010e60 <udp_input+0x1b4>
c0010e3c:	c6 44 24 13 01       	mov    BYTE PTR [esp+0x13],0x1
c0010e41:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010e46:	75 18                	jne    c0010e60 <udp_input+0x1b4>
c0010e48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010e4c:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c0010e4f:	0f b6 c0             	movzx  eax,al
c0010e52:	83 e0 04             	and    eax,0x4
c0010e55:	75 09                	jne    c0010e60 <udp_input+0x1b4>
c0010e57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010e5b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010e5f:	90                   	nop
c0010e60:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0010e65:	85 c0                	test   eax,eax
c0010e67:	74 7b                	je     c0010ee4 <udp_input+0x238>
c0010e69:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010e6d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0010e70:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c0010e75:	0f b7 c0             	movzx  eax,ax
c0010e78:	39 c2                	cmp    edx,eax
c0010e7a:	75 68                	jne    c0010ee4 <udp_input+0x238>
c0010e7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010e80:	83 c0 04             	add    eax,0x4
c0010e83:	74 1b                	je     c0010ea0 <udp_input+0x1f4>
c0010e85:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010e89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e8c:	85 c0                	test   eax,eax
c0010e8e:	74 10                	je     c0010ea0 <udp_input+0x1f4>
c0010e90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010e94:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010e97:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c0010e9c:	39 c2                	cmp    edx,eax
c0010e9e:	75 44                	jne    c0010ee4 <udp_input+0x238>
c0010ea0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0010ea5:	74 29                	je     c0010ed0 <udp_input+0x224>
c0010ea7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010eab:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010eae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010eb2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010eb5:	8b 15 8c 68 03 c0    	mov    edx,DWORD PTR ds:0xc003688c
c0010ebb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ebf:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010ec2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ec6:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c0010ecb:	eb 37                	jmp    c0010f04 <udp_input+0x258>
c0010ecd:	8d 76 00             	lea    esi,[esi+0x0]
c0010ed0:	66 a1 ae 67 03 c0    	mov    ax,ds:0xc00367ae
c0010ed6:	83 c0 01             	add    eax,0x1
c0010ed9:	66 a3 ae 67 03 c0    	mov    ds:0xc00367ae,ax
c0010edf:	eb 23                	jmp    c0010f04 <udp_input+0x258>
c0010ee1:	8d 76 00             	lea    esi,[esi+0x0]
c0010ee4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ee8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010eec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ef0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010ef3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010ef7:	90                   	nop
c0010ef8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010efd:	0f 85 ed fe ff ff    	jne    c0010df0 <udp_input+0x144>
c0010f03:	90                   	nop
c0010f04:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010f09:	75 09                	jne    c0010f14 <udp_input+0x268>
c0010f0b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010f0f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010f13:	90                   	nop
c0010f14:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010f19:	75 15                	jne    c0010f30 <udp_input+0x284>
c0010f1b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010f1f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010f22:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0010f27:	39 c2                	cmp    edx,eax
c0010f29:	0f 85 d9 01 00 00    	jne    c0011108 <udp_input+0x45c>
c0010f2f:	90                   	nop
c0010f30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010f34:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0010f38:	0f b7 c0             	movzx  eax,ax
c0010f3b:	85 c0                	test   eax,eax
c0010f3d:	74 61                	je     c0010fa0 <udp_input+0x2f4>
c0010f3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010f43:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010f46:	0f b7 c0             	movzx  eax,ax
c0010f49:	83 ec 0c             	sub    esp,0xc
c0010f4c:	50                   	push   eax
c0010f4d:	6a 11                	push   0x11
c0010f4f:	68 98 68 03 c0       	push   0xc0036898
c0010f54:	68 90 68 03 c0       	push   0xc0036890
c0010f59:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f5d:	e8 0e 21 00 00       	call   c0013070 <inet_chksum_pseudo>
c0010f62:	83 c4 20             	add    esp,0x20
c0010f65:	0f b7 c0             	movzx  eax,ax
c0010f68:	85 c0                	test   eax,eax
c0010f6a:	74 34                	je     c0010fa0 <udp_input+0x2f4>
c0010f6c:	66 a1 a0 67 03 c0    	mov    ax,ds:0xc00367a0
c0010f72:	83 c0 01             	add    eax,0x1
c0010f75:	66 a3 a0 67 03 c0    	mov    ds:0xc00367a0,ax
c0010f7b:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c0010f81:	83 c0 01             	add    eax,0x1
c0010f84:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c0010f8a:	83 ec 0c             	sub    esp,0xc
c0010f8d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010f91:	e8 be 72 ff ff       	call   c0008254 <pbuf_free>
c0010f96:	83 c4 10             	add    esp,0x10
c0010f99:	e9 7a 01 00 00       	jmp    c0011118 <udp_input+0x46c>
c0010f9e:	66 90                	xchg   ax,ax
c0010fa0:	83 ec 08             	sub    esp,0x8
c0010fa3:	6a f8                	push   0xfffffff8
c0010fa5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010fa9:	e8 0a 71 ff ff       	call   c00080b8 <pbuf_header>
c0010fae:	83 c4 10             	add    esp,0x10
c0010fb1:	0f b6 c0             	movzx  eax,al
c0010fb4:	85 c0                	test   eax,eax
c0010fb6:	74 38                	je     c0010ff0 <udp_input+0x344>
c0010fb8:	83 ec 08             	sub    esp,0x8
c0010fbb:	68 89 05 03 c0       	push   0xc0030589
c0010fc0:	68 26 f6 02 c0       	push   0xc002f626
c0010fc5:	e8 ca e9 00 00       	call   c001f994 <CPrintf>
c0010fca:	83 c4 10             	add    esp,0x10
c0010fcd:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c0010fd3:	83 c0 01             	add    eax,0x1
c0010fd6:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c0010fdc:	83 ec 0c             	sub    esp,0xc
c0010fdf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010fe3:	e8 6c 72 ff ff       	call   c0008254 <pbuf_free>
c0010fe8:	83 c4 10             	add    esp,0x10
c0010feb:	e9 28 01 00 00       	jmp    c0011118 <udp_input+0x46c>
c0010ff0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010ff5:	74 51                	je     c0011048 <udp_input+0x39c>
c0010ff7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ffb:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0010ffe:	85 c0                	test   eax,eax
c0011000:	74 32                	je     c0011034 <udp_input+0x388>
c0011002:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011006:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011009:	0f b7 4c 24 04       	movzx  ecx,WORD PTR [esp+0x4]
c001100e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011012:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0011015:	83 ec 0c             	sub    esp,0xc
c0011018:	51                   	push   ecx
c0011019:	68 90 68 03 c0       	push   0xc0036890
c001101e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011022:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011026:	52                   	push   edx
c0011027:	ff d0                	call   eax
c0011029:	83 c4 20             	add    esp,0x20
c001102c:	e9 e7 00 00 00       	jmp    c0011118 <udp_input+0x46c>
c0011031:	8d 76 00             	lea    esi,[esi+0x0]
c0011034:	83 ec 0c             	sub    esp,0xc
c0011037:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001103b:	e8 14 72 ff ff       	call   c0008254 <pbuf_free>
c0011040:	83 c4 10             	add    esp,0x10
c0011043:	e9 d0 00 00 00       	jmp    c0011118 <udp_input+0x46c>
c0011048:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c001104d:	85 c0                	test   eax,eax
c001104f:	0f 85 83 00 00 00    	jne    c00110d8 <udp_input+0x42c>
c0011055:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c001105a:	25 f0 00 00 00       	and    eax,0xf0
c001105f:	3d e0 00 00 00       	cmp    eax,0xe0
c0011064:	74 72                	je     c00110d8 <udp_input+0x42c>
c0011066:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001106a:	66 8b 00             	mov    ax,WORD PTR [eax]
c001106d:	0f b7 c0             	movzx  eax,ax
c0011070:	83 ec 0c             	sub    esp,0xc
c0011073:	50                   	push   eax
c0011074:	e8 6f fb fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0011079:	83 c4 10             	add    esp,0x10
c001107c:	0f b7 c0             	movzx  eax,ax
c001107f:	c1 e8 08             	shr    eax,0x8
c0011082:	0f b7 c0             	movzx  eax,ax
c0011085:	83 e0 0f             	and    eax,0xf
c0011088:	83 c0 02             	add    eax,0x2
c001108b:	c1 e0 02             	shl    eax,0x2
c001108e:	98                   	cwde   
c001108f:	83 ec 08             	sub    esp,0x8
c0011092:	50                   	push   eax
c0011093:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011097:	e8 1c 70 ff ff       	call   c00080b8 <pbuf_header>
c001109c:	83 c4 10             	add    esp,0x10
c001109f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00110a3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110a6:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00110aa:	74 18                	je     c00110c4 <udp_input+0x418>
c00110ac:	83 ec 08             	sub    esp,0x8
c00110af:	68 9d 05 03 c0       	push   0xc003059d
c00110b4:	68 26 f6 02 c0       	push   0xc002f626
c00110b9:	e8 d6 e8 00 00       	call   c001f994 <CPrintf>
c00110be:	83 c4 10             	add    esp,0x10
c00110c1:	8d 76 00             	lea    esi,[esi+0x0]
c00110c4:	83 ec 08             	sub    esp,0x8
c00110c7:	6a 03                	push   0x3
c00110c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00110cd:	e8 5e 1e 00 00       	call   c0012f30 <icmp_dest_unreach>
c00110d2:	83 c4 10             	add    esp,0x10
c00110d5:	8d 76 00             	lea    esi,[esi+0x0]
c00110d8:	66 a1 a8 67 03 c0    	mov    ax,ds:0xc00367a8
c00110de:	83 c0 01             	add    eax,0x1
c00110e1:	66 a3 a8 67 03 c0    	mov    ds:0xc00367a8,ax
c00110e7:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c00110ed:	83 c0 01             	add    eax,0x1
c00110f0:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c00110f6:	83 ec 0c             	sub    esp,0xc
c00110f9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00110fd:	e8 52 71 ff ff       	call   c0008254 <pbuf_free>
c0011102:	83 c4 10             	add    esp,0x10
c0011105:	eb 11                	jmp    c0011118 <udp_input+0x46c>
c0011107:	90                   	nop
c0011108:	83 ec 0c             	sub    esp,0xc
c001110b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001110f:	e8 40 71 ff ff       	call   c0008254 <pbuf_free>
c0011114:	83 c4 10             	add    esp,0x10
c0011117:	90                   	nop
c0011118:	90                   	nop
c0011119:	83 c4 28             	add    esp,0x28
c001111c:	5b                   	pop    ebx
c001111d:	c3                   	ret    
c001111e:	66 90                	xchg   ax,ax

c0011120 <udp_bind>:
c0011120:	83 ec 2c             	sub    esp,0x2c
c0011123:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011127:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001112c:	c6 44 24 1b 00       	mov    BYTE PTR [esp+0x1b],0x0
c0011131:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011136:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001113a:	e9 8d 00 00 00       	jmp    c00111cc <udp_bind+0xac>
c001113f:	90                   	nop
c0011140:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011144:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0011148:	75 26                	jne    c0011170 <udp_bind+0x50>
c001114a:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001114f:	85 c0                	test   eax,eax
c0011151:	74 15                	je     c0011168 <udp_bind+0x48>
c0011153:	83 ec 08             	sub    esp,0x8
c0011156:	68 b1 05 03 c0       	push   0xc00305b1
c001115b:	68 26 f6 02 c0       	push   0xc002f626
c0011160:	e8 2f e8 00 00       	call   c001f994 <CPrintf>
c0011165:	83 c4 10             	add    esp,0x10
c0011168:	c6 44 24 1b 01       	mov    BYTE PTR [esp+0x1b],0x1
c001116d:	eb 51                	jmp    c00111c0 <udp_bind+0xa0>
c001116f:	90                   	nop
c0011170:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011174:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011178:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c001117d:	0f b7 c0             	movzx  eax,ax
c0011180:	39 c2                	cmp    edx,eax
c0011182:	75 3c                	jne    c00111c0 <udp_bind+0xa0>
c0011184:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011188:	85 c0                	test   eax,eax
c001118a:	74 2c                	je     c00111b8 <udp_bind+0x98>
c001118c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011190:	8b 00                	mov    eax,DWORD PTR [eax]
c0011192:	85 c0                	test   eax,eax
c0011194:	74 22                	je     c00111b8 <udp_bind+0x98>
c0011196:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001119b:	74 1b                	je     c00111b8 <udp_bind+0x98>
c001119d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00111a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00111a3:	85 c0                	test   eax,eax
c00111a5:	74 11                	je     c00111b8 <udp_bind+0x98>
c00111a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111ab:	8b 10                	mov    edx,DWORD PTR [eax]
c00111ad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00111b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00111b3:	39 c2                	cmp    edx,eax
c00111b5:	75 09                	jne    c00111c0 <udp_bind+0xa0>
c00111b7:	90                   	nop
c00111b8:	b0 f8                	mov    al,0xf8
c00111ba:	e9 dd 00 00 00       	jmp    c001129c <udp_bind+0x17c>
c00111bf:	90                   	nop
c00111c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111c4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00111c7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00111cb:	90                   	nop
c00111cc:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00111d1:	0f 85 69 ff ff ff    	jne    c0011140 <udp_bind+0x20>
c00111d7:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00111dc:	74 0a                	je     c00111e8 <udp_bind+0xc8>
c00111de:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00111e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00111e4:	eb 0a                	jmp    c00111f0 <udp_bind+0xd0>
c00111e6:	66 90                	xchg   ax,ax
c00111e8:	b8 00 00 00 00       	mov    eax,0x0
c00111ed:	8d 76 00             	lea    esi,[esi+0x0]
c00111f0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00111f4:	89 02                	mov    DWORD PTR [edx],eax
c00111f6:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00111fb:	85 c0                	test   eax,eax
c00111fd:	75 6d                	jne    c001126c <udp_bind+0x14c>
c00111ff:	66 c7 44 24 0c 00 c0 	mov    WORD PTR [esp+0xc],0xc000
c0011206:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c001120b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001120f:	eb 3b                	jmp    c001124c <udp_bind+0x12c>
c0011211:	8d 76 00             	lea    esi,[esi+0x0]
c0011214:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011218:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c001121c:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0011221:	0f b7 c0             	movzx  eax,ax
c0011224:	39 c2                	cmp    edx,eax
c0011226:	75 18                	jne    c0011240 <udp_bind+0x120>
c0011228:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001122c:	83 c0 01             	add    eax,0x1
c001122f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011234:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011239:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001123d:	eb 0d                	jmp    c001124c <udp_bind+0x12c>
c001123f:	90                   	nop
c0011240:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011244:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011247:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001124b:	90                   	nop
c001124c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011251:	74 0d                	je     c0011260 <udp_bind+0x140>
c0011253:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0011258:	3d ff ff 00 00       	cmp    eax,0xffff
c001125d:	75 b5                	jne    c0011214 <udp_bind+0xf4>
c001125f:	90                   	nop
c0011260:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011265:	74 05                	je     c001126c <udp_bind+0x14c>
c0011267:	b0 f8                	mov    al,0xf8
c0011269:	eb 31                	jmp    c001129c <udp_bind+0x17c>
c001126b:	90                   	nop
c001126c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011270:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011274:	66 89 42 12          	mov    WORD PTR [edx+0x12],ax
c0011278:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001127d:	85 c0                	test   eax,eax
c001127f:	75 17                	jne    c0011298 <udp_bind+0x178>
c0011281:	8b 15 8c 68 03 c0    	mov    edx,DWORD PTR ds:0xc003688c
c0011287:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001128b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001128e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011292:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c0011297:	90                   	nop
c0011298:	b0 00                	mov    al,0x0
c001129a:	66 90                	xchg   ax,ax
c001129c:	83 c4 2c             	add    esp,0x2c
c001129f:	c3                   	ret    

c00112a0 <udp_sendto_if>:
c00112a0:	83 ec 2c             	sub    esp,0x2c
c00112a3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00112a7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00112ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00112b0:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c00112b4:	0f b7 c0             	movzx  eax,ax
c00112b7:	85 c0                	test   eax,eax
c00112b9:	75 39                	jne    c00112f4 <udp_sendto_if+0x54>
c00112bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00112bf:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c00112c3:	0f b7 d0             	movzx  edx,ax
c00112c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00112ca:	83 ec 04             	sub    esp,0x4
c00112cd:	52                   	push   edx
c00112ce:	50                   	push   eax
c00112cf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00112d3:	e8 48 fe ff ff       	call   c0011120 <udp_bind>
c00112d8:	83 c4 10             	add    esp,0x10
c00112db:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00112df:	0f be 44 24 15       	movsx  eax,BYTE PTR [esp+0x15]
c00112e4:	85 c0                	test   eax,eax
c00112e6:	74 0c                	je     c00112f4 <udp_sendto_if+0x54>
c00112e8:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c00112ec:	e9 2b 02 00 00       	jmp    c001151c <udp_sendto_if+0x27c>
c00112f1:	8d 76 00             	lea    esi,[esi+0x0]
c00112f4:	83 ec 08             	sub    esp,0x8
c00112f7:	6a 08                	push   0x8
c00112f9:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00112fd:	e8 b6 6d ff ff       	call   c00080b8 <pbuf_header>
c0011302:	83 c4 10             	add    esp,0x10
c0011305:	0f b6 c0             	movzx  eax,al
c0011308:	85 c0                	test   eax,eax
c001130a:	74 48                	je     c0011354 <udp_sendto_if+0xb4>
c001130c:	83 ec 04             	sub    esp,0x4
c001130f:	6a 00                	push   0x0
c0011311:	6a 08                	push   0x8
c0011313:	6a 01                	push   0x1
c0011315:	e8 12 71 ff ff       	call   c000842c <pbuf_alloc>
c001131a:	83 c4 10             	add    esp,0x10
c001131d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011321:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0011326:	75 08                	jne    c0011330 <udp_sendto_if+0x90>
c0011328:	b0 ff                	mov    al,0xff
c001132a:	e9 ed 01 00 00       	jmp    c001151c <udp_sendto_if+0x27c>
c001132f:	90                   	nop
c0011330:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011334:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011337:	0f b7 c0             	movzx  eax,ax
c001133a:	85 c0                	test   eax,eax
c001133c:	74 1e                	je     c001135c <udp_sendto_if+0xbc>
c001133e:	83 ec 08             	sub    esp,0x8
c0011341:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011345:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011349:	e8 1e 78 ff ff       	call   c0008b6c <pbuf_chain>
c001134e:	83 c4 10             	add    esp,0x10
c0011351:	eb 09                	jmp    c001135c <udp_sendto_if+0xbc>
c0011353:	90                   	nop
c0011354:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011358:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001135c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011360:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0011364:	0f b7 c0             	movzx  eax,ax
c0011367:	83 f8 07             	cmp    eax,0x7
c001136a:	77 18                	ja     c0011384 <udp_sendto_if+0xe4>
c001136c:	83 ec 08             	sub    esp,0x8
c001136f:	68 c0 05 03 c0       	push   0xc00305c0
c0011374:	68 26 f6 02 c0       	push   0xc002f626
c0011379:	e8 16 e6 00 00       	call   c001f994 <CPrintf>
c001137e:	83 c4 10             	add    esp,0x10
c0011381:	8d 76 00             	lea    esi,[esi+0x0]
c0011384:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011388:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001138b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001138f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011393:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011397:	0f b7 c0             	movzx  eax,ax
c001139a:	83 ec 0c             	sub    esp,0xc
c001139d:	50                   	push   eax
c001139e:	e8 45 f8 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00113a3:	83 c4 10             	add    esp,0x10
c00113a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00113aa:	66 89 02             	mov    WORD PTR [edx],ax
c00113ad:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00113b2:	83 ec 0c             	sub    esp,0xc
c00113b5:	50                   	push   eax
c00113b6:	e8 2d f8 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00113bb:	83 c4 10             	add    esp,0x10
c00113be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00113c2:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00113c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113ca:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c00113d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00113d4:	85 c0                	test   eax,eax
c00113d6:	74 0c                	je     c00113e4 <udp_sendto_if+0x144>
c00113d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00113dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00113de:	85 c0                	test   eax,eax
c00113e0:	75 12                	jne    c00113f4 <udp_sendto_if+0x154>
c00113e2:	66 90                	xchg   ax,ax
c00113e4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00113e8:	83 c0 04             	add    eax,0x4
c00113eb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00113ef:	eb 47                	jmp    c0011438 <udp_sendto_if+0x198>
c00113f1:	8d 76 00             	lea    esi,[esi+0x0]
c00113f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00113f8:	8b 10                	mov    edx,DWORD PTR [eax]
c00113fa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00113fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011401:	39 c2                	cmp    edx,eax
c0011403:	74 2b                	je     c0011430 <udp_sendto_if+0x190>
c0011405:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011409:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001140d:	74 19                	je     c0011428 <udp_sendto_if+0x188>
c001140f:	83 ec 0c             	sub    esp,0xc
c0011412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011416:	e8 39 6e ff ff       	call   c0008254 <pbuf_free>
c001141b:	83 c4 10             	add    esp,0x10
c001141e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011426:	66 90                	xchg   ax,ax
c0011428:	b0 fa                	mov    al,0xfa
c001142a:	e9 ed 00 00 00       	jmp    c001151c <udp_sendto_if+0x27c>
c001142f:	90                   	nop
c0011430:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011434:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011438:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001143c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001143f:	0f b7 c0             	movzx  eax,ax
c0011442:	83 ec 0c             	sub    esp,0xc
c0011445:	50                   	push   eax
c0011446:	e8 9d f7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001144b:	83 c4 10             	add    esp,0x10
c001144e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011452:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0011456:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001145a:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c001145d:	0f b6 c0             	movzx  eax,al
c0011460:	83 e0 01             	and    eax,0x1
c0011463:	75 4b                	jne    c00114b0 <udp_sendto_if+0x210>
c0011465:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011469:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001146c:	0f b7 c0             	movzx  eax,ax
c001146f:	83 ec 0c             	sub    esp,0xc
c0011472:	50                   	push   eax
c0011473:	6a 11                	push   0x11
c0011475:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011479:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001147d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011481:	e8 ea 1b 00 00       	call   c0013070 <inet_chksum_pseudo>
c0011486:	83 c4 20             	add    esp,0x20
c0011489:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001148e:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c0011493:	85 c0                	test   eax,eax
c0011495:	75 09                	jne    c00114a0 <udp_sendto_if+0x200>
c0011497:	66 c7 44 24 16 ff ff 	mov    WORD PTR [esp+0x16],0xffff
c001149e:	66 90                	xchg   ax,ax
c00114a0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00114a4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00114a9:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00114ad:	8d 76 00             	lea    esi,[esi+0x0]
c00114b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00114b4:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c00114b7:	0f b6 d0             	movzx  edx,al
c00114ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00114be:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c00114c1:	0f b6 c0             	movzx  eax,al
c00114c4:	83 ec 04             	sub    esp,0x4
c00114c7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00114cb:	6a 11                	push   0x11
c00114cd:	52                   	push   edx
c00114ce:	50                   	push   eax
c00114cf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00114d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00114d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00114db:	e8 f4 24 00 00       	call   c00139d4 <ip_output_if>
c00114e0:	83 c4 20             	add    esp,0x20
c00114e3:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00114e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00114eb:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00114ef:	74 17                	je     c0011508 <udp_sendto_if+0x268>
c00114f1:	83 ec 0c             	sub    esp,0xc
c00114f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00114f8:	e8 57 6d ff ff       	call   c0008254 <pbuf_free>
c00114fd:	83 c4 10             	add    esp,0x10
c0011500:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011508:	66 a1 98 67 03 c0    	mov    ax,ds:0xc0036798
c001150e:	83 c0 01             	add    eax,0x1
c0011511:	66 a3 98 67 03 c0    	mov    ds:0xc0036798,ax
c0011517:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c001151b:	90                   	nop
c001151c:	83 c4 2c             	add    esp,0x2c
c001151f:	c3                   	ret    

c0011520 <udp_sendto>:
c0011520:	83 ec 2c             	sub    esp,0x2c
c0011523:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011527:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001152c:	83 ec 0c             	sub    esp,0xc
c001152f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011533:	e8 c4 1f 00 00       	call   c00134fc <ip_route>
c0011538:	83 c4 10             	add    esp,0x10
c001153b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001153f:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011544:	75 16                	jne    c001155c <udp_sendto+0x3c>
c0011546:	66 a1 a6 67 03 c0    	mov    ax,ds:0xc00367a6
c001154c:	83 c0 01             	add    eax,0x1
c001154f:	66 a3 a6 67 03 c0    	mov    ds:0xc00367a6,ax
c0011555:	b0 fc                	mov    al,0xfc
c0011557:	eb 27                	jmp    c0011580 <udp_sendto+0x60>
c0011559:	8d 76 00             	lea    esi,[esi+0x0]
c001155c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0011561:	83 ec 0c             	sub    esp,0xc
c0011564:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011568:	50                   	push   eax
c0011569:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001156d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011571:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011575:	e8 26 fd ff ff       	call   c00112a0 <udp_sendto_if>
c001157a:	83 c4 20             	add    esp,0x20
c001157d:	8d 76 00             	lea    esi,[esi+0x0]
c0011580:	83 c4 2c             	add    esp,0x2c
c0011583:	c3                   	ret    

c0011584 <udp_send>:
c0011584:	83 ec 0c             	sub    esp,0xc
c0011587:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001158b:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001158e:	0f b7 c0             	movzx  eax,ax
c0011591:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011595:	83 c2 04             	add    edx,0x4
c0011598:	50                   	push   eax
c0011599:	52                   	push   edx
c001159a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001159e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115a2:	e8 79 ff ff ff       	call   c0011520 <udp_sendto>
c00115a7:	83 c4 10             	add    esp,0x10
c00115aa:	83 c4 0c             	add    esp,0xc
c00115ad:	c3                   	ret    
c00115ae:	66 90                	xchg   ax,ax

c00115b0 <udp_connect>:
c00115b0:	83 ec 2c             	sub    esp,0x2c
c00115b3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00115b7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00115bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115c0:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c00115c4:	0f b7 c0             	movzx  eax,ax
c00115c7:	85 c0                	test   eax,eax
c00115c9:	75 39                	jne    c0011604 <udp_connect+0x54>
c00115cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115cf:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c00115d3:	0f b7 d0             	movzx  edx,ax
c00115d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115da:	83 ec 04             	sub    esp,0x4
c00115dd:	52                   	push   edx
c00115de:	50                   	push   eax
c00115df:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00115e3:	e8 38 fb ff ff       	call   c0011120 <udp_bind>
c00115e8:	83 c4 10             	add    esp,0x10
c00115eb:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00115ef:	0f be 44 24 1b       	movsx  eax,BYTE PTR [esp+0x1b]
c00115f4:	85 c0                	test   eax,eax
c00115f6:	74 0c                	je     c0011604 <udp_connect+0x54>
c00115f8:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00115fc:	e9 8b 00 00 00       	jmp    c001168c <udp_connect+0xdc>
c0011601:	8d 76 00             	lea    esi,[esi+0x0]
c0011604:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0011609:	74 09                	je     c0011614 <udp_connect+0x64>
c001160b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001160f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011611:	eb 09                	jmp    c001161c <udp_connect+0x6c>
c0011613:	90                   	nop
c0011614:	b8 00 00 00 00       	mov    eax,0x0
c0011619:	8d 76 00             	lea    esi,[esi+0x0]
c001161c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011620:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011623:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011627:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001162b:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001162f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011633:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c0011636:	83 c8 04             	or     eax,0x4
c0011639:	88 c2                	mov    dl,al
c001163b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001163f:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c0011642:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011647:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001164b:	eb 1f                	jmp    c001166c <udp_connect+0xbc>
c001164d:	8d 76 00             	lea    esi,[esi+0x0]
c0011650:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011654:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0011658:	75 06                	jne    c0011660 <udp_connect+0xb0>
c001165a:	b0 00                	mov    al,0x0
c001165c:	eb 2e                	jmp    c001168c <udp_connect+0xdc>
c001165e:	66 90                	xchg   ax,ax
c0011660:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011664:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011667:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001166b:	90                   	nop
c001166c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011671:	75 dd                	jne    c0011650 <udp_connect+0xa0>
c0011673:	8b 15 8c 68 03 c0    	mov    edx,DWORD PTR ds:0xc003688c
c0011679:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001167d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011680:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011684:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c0011689:	b0 00                	mov    al,0x0
c001168b:	90                   	nop
c001168c:	83 c4 2c             	add    esp,0x2c
c001168f:	c3                   	ret    

c0011690 <udp_disconnect>:
c0011690:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011694:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001169b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001169f:	66 c7 40 14 00 00    	mov    WORD PTR [eax+0x14],0x0
c00116a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116a9:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c00116ac:	83 e0 fb             	and    eax,0xfffffffb
c00116af:	88 c2                	mov    dl,al
c00116b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116b5:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c00116b8:	90                   	nop
c00116b9:	c3                   	ret    
c00116ba:	66 90                	xchg   ax,ax

c00116bc <udp_recv>:
c00116bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00116c4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00116c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00116cf:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00116d2:	90                   	nop
c00116d3:	c3                   	ret    

c00116d4 <udp_remove>:
c00116d4:	83 ec 1c             	sub    esp,0x1c
c00116d7:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c00116dc:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00116e0:	75 12                	jne    c00116f4 <udp_remove+0x20>
c00116e2:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c00116e7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00116ea:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c00116ef:	eb 4b                	jmp    c001173c <udp_remove+0x68>
c00116f1:	8d 76 00             	lea    esi,[esi+0x0]
c00116f4:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c00116f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00116fd:	eb 35                	jmp    c0011734 <udp_remove+0x60>
c00116ff:	90                   	nop
c0011700:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011704:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011707:	85 c0                	test   eax,eax
c0011709:	74 1d                	je     c0011728 <udp_remove+0x54>
c001170b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001170f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011712:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0011716:	75 10                	jne    c0011728 <udp_remove+0x54>
c0011718:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001171c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001171f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011723:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011726:	66 90                	xchg   ax,ax
c0011728:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001172c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001172f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011733:	90                   	nop
c0011734:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0011739:	75 c5                	jne    c0011700 <udp_remove+0x2c>
c001173b:	90                   	nop
c001173c:	83 ec 08             	sub    esp,0x8
c001173f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011743:	6a 01                	push   0x1
c0011745:	e8 4e 62 ff ff       	call   c0007998 <memp_free>
c001174a:	83 c4 10             	add    esp,0x10
c001174d:	90                   	nop
c001174e:	83 c4 1c             	add    esp,0x1c
c0011751:	c3                   	ret    
c0011752:	66 90                	xchg   ax,ax

c0011754 <udp_new>:
c0011754:	83 ec 1c             	sub    esp,0x1c
c0011757:	83 ec 0c             	sub    esp,0xc
c001175a:	6a 01                	push   0x1
c001175c:	e8 0b 61 ff ff       	call   c000786c <memp_malloc>
c0011761:	83 c4 10             	add    esp,0x10
c0011764:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011768:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001176d:	74 1d                	je     c001178c <udp_new+0x38>
c001176f:	83 ec 04             	sub    esp,0x4
c0011772:	6a 20                	push   0x20
c0011774:	6a 00                	push   0x0
c0011776:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001177a:	e8 71 ed fe ff       	call   c00004f0 <memset>
c001177f:	83 c4 10             	add    esp,0x10
c0011782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011786:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c001178a:	66 90                	xchg   ax,ax
c001178c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011790:	83 c4 1c             	add    esp,0x1c
c0011793:	c3                   	ret    

c0011794 <free_entry>:
c0011794:	83 ec 0c             	sub    esp,0xc
c0011797:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001179b:	c1 e0 04             	shl    eax,0x4
c001179e:	05 00 a9 03 c0       	add    eax,0xc003a900
c00117a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00117a5:	85 c0                	test   eax,eax
c00117a7:	74 2f                	je     c00117d8 <free_entry+0x44>
c00117a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117ad:	c1 e0 04             	shl    eax,0x4
c00117b0:	05 00 a9 03 c0       	add    eax,0xc003a900
c00117b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00117b7:	83 ec 0c             	sub    esp,0xc
c00117ba:	50                   	push   eax
c00117bb:	e8 94 6a ff ff       	call   c0008254 <pbuf_free>
c00117c0:	83 c4 10             	add    esp,0x10
c00117c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117c7:	c1 e0 04             	shl    eax,0x4
c00117ca:	05 00 a9 03 c0       	add    eax,0xc003a900
c00117cf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00117d5:	8d 76 00             	lea    esi,[esi+0x0]
c00117d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117dc:	c1 e0 04             	shl    eax,0x4
c00117df:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00117e4:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00117e7:	90                   	nop
c00117e8:	83 c4 0c             	add    esp,0xc
c00117eb:	c3                   	ret    

c00117ec <etharp_tmr>:
c00117ec:	83 ec 1c             	sub    esp,0x1c
c00117ef:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00117f4:	e9 a7 00 00 00       	jmp    c00118a0 <etharp_tmr+0xb4>
c00117f9:	8d 76 00             	lea    esi,[esi+0x0]
c00117fc:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011801:	c1 e0 04             	shl    eax,0x4
c0011804:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011809:	8a 00                	mov    al,BYTE PTR [eax]
c001180b:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001180f:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c0011814:	85 c0                	test   eax,eax
c0011816:	74 7c                	je     c0011894 <etharp_tmr+0xa8>
c0011818:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001181d:	89 c2                	mov    edx,eax
c001181f:	c1 e2 04             	shl    edx,0x4
c0011822:	81 c2 0f a9 03 c0    	add    edx,0xc003a90f
c0011828:	8a 12                	mov    dl,BYTE PTR [edx]
c001182a:	83 c2 01             	add    edx,0x1
c001182d:	c1 e0 04             	shl    eax,0x4
c0011830:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011835:	88 10                	mov    BYTE PTR [eax],dl
c0011837:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001183c:	c1 e0 04             	shl    eax,0x4
c001183f:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011844:	8a 00                	mov    al,BYTE PTR [eax]
c0011846:	0f b6 c0             	movzx  eax,al
c0011849:	3d ef 00 00 00       	cmp    eax,0xef
c001184e:	77 30                	ja     c0011880 <etharp_tmr+0x94>
c0011850:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011855:	c1 e0 04             	shl    eax,0x4
c0011858:	05 0e a9 03 c0       	add    eax,0xc003a90e
c001185d:	8a 00                	mov    al,BYTE PTR [eax]
c001185f:	0f b6 c0             	movzx  eax,al
c0011862:	83 f8 01             	cmp    eax,0x1
c0011865:	75 2d                	jne    c0011894 <etharp_tmr+0xa8>
c0011867:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001186c:	c1 e0 04             	shl    eax,0x4
c001186f:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011874:	8a 00                	mov    al,BYTE PTR [eax]
c0011876:	0f b6 c0             	movzx  eax,al
c0011879:	83 f8 01             	cmp    eax,0x1
c001187c:	76 16                	jbe    c0011894 <etharp_tmr+0xa8>
c001187e:	66 90                	xchg   ax,ax
c0011880:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011885:	83 ec 0c             	sub    esp,0xc
c0011888:	50                   	push   eax
c0011889:	e8 06 ff ff ff       	call   c0011794 <free_entry>
c001188e:	83 c4 10             	add    esp,0x10
c0011891:	8d 76 00             	lea    esi,[esi+0x0]
c0011894:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011898:	83 c0 01             	add    eax,0x1
c001189b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001189f:	90                   	nop
c00118a0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00118a5:	83 f8 09             	cmp    eax,0x9
c00118a8:	0f 86 4e ff ff ff    	jbe    c00117fc <etharp_tmr+0x10>
c00118ae:	90                   	nop
c00118af:	83 c4 1c             	add    esp,0x1c
c00118b2:	c3                   	ret    
c00118b3:	90                   	nop

c00118b4 <find_entry>:
c00118b4:	83 ec 2c             	sub    esp,0x2c
c00118b7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00118bb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00118bf:	c6 44 24 1f 0a       	mov    BYTE PTR [esp+0x1f],0xa
c00118c4:	c6 44 24 1e 0a       	mov    BYTE PTR [esp+0x1e],0xa
c00118c9:	c6 44 24 1d 0a       	mov    BYTE PTR [esp+0x1d],0xa
c00118ce:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c00118d3:	c6 44 24 1b 00       	mov    BYTE PTR [esp+0x1b],0x0
c00118d8:	c6 44 24 1a 00       	mov    BYTE PTR [esp+0x1a],0x0
c00118dd:	c6 44 24 19 0a       	mov    BYTE PTR [esp+0x19],0xa
c00118e2:	c6 44 24 18 00       	mov    BYTE PTR [esp+0x18],0x0
c00118e7:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c00118ec:	e9 7f 01 00 00       	jmp    c0011a70 <find_entry+0x1bc>
c00118f1:	8d 76 00             	lea    esi,[esi+0x0]
c00118f4:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00118f9:	c1 e0 04             	shl    eax,0x4
c00118fc:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011901:	8a 00                	mov    al,BYTE PTR [eax]
c0011903:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0011907:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c001190c:	83 f8 0a             	cmp    eax,0xa
c001190f:	75 17                	jne    c0011928 <find_entry+0x74>
c0011911:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011916:	85 c0                	test   eax,eax
c0011918:	75 0e                	jne    c0011928 <find_entry+0x74>
c001191a:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001191e:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c0011922:	e9 3d 01 00 00       	jmp    c0011a64 <find_entry+0x1b0>
c0011927:	90                   	nop
c0011928:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c001192d:	85 c0                	test   eax,eax
c001192f:	0f 84 2f 01 00 00    	je     c0011a64 <find_entry+0x1b0>
c0011935:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c001193a:	83 f8 01             	cmp    eax,0x1
c001193d:	74 21                	je     c0011960 <find_entry+0xac>
c001193f:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011944:	83 f8 02             	cmp    eax,0x2
c0011947:	74 17                	je     c0011960 <find_entry+0xac>
c0011949:	83 ec 08             	sub    esp,0x8
c001194c:	68 f0 05 03 c0       	push   0xc00305f0
c0011951:	68 26 f6 02 c0       	push   0xc002f626
c0011956:	e8 39 e0 00 00       	call   c001f994 <CPrintf>
c001195b:	83 c4 10             	add    esp,0x10
c001195e:	66 90                	xchg   ax,ax
c0011960:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0011965:	74 25                	je     c001198c <find_entry+0xd8>
c0011967:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001196b:	8b 10                	mov    edx,DWORD PTR [eax]
c001196d:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011972:	c1 e0 04             	shl    eax,0x4
c0011975:	05 04 a9 03 c0       	add    eax,0xc003a904
c001197a:	8b 00                	mov    eax,DWORD PTR [eax]
c001197c:	39 c2                	cmp    edx,eax
c001197e:	75 0c                	jne    c001198c <find_entry+0xd8>
c0011980:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011984:	e9 53 02 00 00       	jmp    c0011bdc <find_entry+0x328>
c0011989:	8d 76 00             	lea    esi,[esi+0x0]
c001198c:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011991:	83 f8 01             	cmp    eax,0x1
c0011994:	0f 85 8a 00 00 00    	jne    c0011a24 <find_entry+0x170>
c001199a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001199f:	c1 e0 04             	shl    eax,0x4
c00119a2:	05 00 a9 03 c0       	add    eax,0xc003a900
c00119a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00119a9:	85 c0                	test   eax,eax
c00119ab:	74 3f                	je     c00119ec <find_entry+0x138>
c00119ad:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00119b2:	c1 e0 04             	shl    eax,0x4
c00119b5:	05 0f a9 03 c0       	add    eax,0xc003a90f
c00119ba:	8a 00                	mov    al,BYTE PTR [eax]
c00119bc:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00119c1:	0f b6 c0             	movzx  eax,al
c00119c4:	39 c2                	cmp    edx,eax
c00119c6:	0f 87 98 00 00 00    	ja     c0011a64 <find_entry+0x1b0>
c00119cc:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00119d0:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c00119d4:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00119d9:	c1 e0 04             	shl    eax,0x4
c00119dc:	05 0f a9 03 c0       	add    eax,0xc003a90f
c00119e1:	8a 00                	mov    al,BYTE PTR [eax]
c00119e3:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00119e7:	eb 7b                	jmp    c0011a64 <find_entry+0x1b0>
c00119e9:	8d 76 00             	lea    esi,[esi+0x0]
c00119ec:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00119f1:	c1 e0 04             	shl    eax,0x4
c00119f4:	05 0f a9 03 c0       	add    eax,0xc003a90f
c00119f9:	8a 00                	mov    al,BYTE PTR [eax]
c00119fb:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0011a00:	0f b6 c0             	movzx  eax,al
c0011a03:	39 c2                	cmp    edx,eax
c0011a05:	77 5d                	ja     c0011a64 <find_entry+0x1b0>
c0011a07:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011a0b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011a0f:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011a14:	c1 e0 04             	shl    eax,0x4
c0011a17:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011a1c:	8a 00                	mov    al,BYTE PTR [eax]
c0011a1e:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0011a22:	eb 40                	jmp    c0011a64 <find_entry+0x1b0>
c0011a24:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011a29:	83 f8 02             	cmp    eax,0x2
c0011a2c:	75 36                	jne    c0011a64 <find_entry+0x1b0>
c0011a2e:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011a33:	c1 e0 04             	shl    eax,0x4
c0011a36:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011a3b:	8a 00                	mov    al,BYTE PTR [eax]
c0011a3d:	0f b6 54 24 1a       	movzx  edx,BYTE PTR [esp+0x1a]
c0011a42:	0f b6 c0             	movzx  eax,al
c0011a45:	39 c2                	cmp    edx,eax
c0011a47:	77 1b                	ja     c0011a64 <find_entry+0x1b0>
c0011a49:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011a4d:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0011a51:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011a56:	c1 e0 04             	shl    eax,0x4
c0011a59:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011a5e:	8a 00                	mov    al,BYTE PTR [eax]
c0011a60:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0011a64:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011a68:	83 c0 01             	add    eax,0x1
c0011a6b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011a6f:	90                   	nop
c0011a70:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011a75:	83 f8 09             	cmp    eax,0x9
c0011a78:	0f 86 76 fe ff ff    	jbe    c00118f4 <find_entry+0x40>
c0011a7e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011a83:	83 e0 02             	and    eax,0x2
c0011a86:	75 14                	jne    c0011a9c <find_entry+0x1e8>
c0011a88:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011a8d:	83 f8 0a             	cmp    eax,0xa
c0011a90:	75 12                	jne    c0011aa4 <find_entry+0x1f0>
c0011a92:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011a97:	83 e0 01             	and    eax,0x1
c0011a9a:	75 08                	jne    c0011aa4 <find_entry+0x1f0>
c0011a9c:	b0 ff                	mov    al,0xff
c0011a9e:	e9 39 01 00 00       	jmp    c0011bdc <find_entry+0x328>
c0011aa3:	90                   	nop
c0011aa4:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011aa9:	83 f8 09             	cmp    eax,0x9
c0011aac:	7f 0e                	jg     c0011abc <find_entry+0x208>
c0011aae:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c0011ab2:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011ab6:	e9 a1 00 00 00       	jmp    c0011b5c <find_entry+0x2a8>
c0011abb:	90                   	nop
c0011abc:	0f be 44 24 1e       	movsx  eax,BYTE PTR [esp+0x1e]
c0011ac1:	83 f8 09             	cmp    eax,0x9
c0011ac4:	7f 32                	jg     c0011af8 <find_entry+0x244>
c0011ac6:	8a 44 24 1e          	mov    al,BYTE PTR [esp+0x1e]
c0011aca:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011ace:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011ad3:	c1 e0 04             	shl    eax,0x4
c0011ad6:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011adb:	8b 00                	mov    eax,DWORD PTR [eax]
c0011add:	85 c0                	test   eax,eax
c0011adf:	74 47                	je     c0011b28 <find_entry+0x274>
c0011ae1:	83 ec 08             	sub    esp,0x8
c0011ae4:	68 69 07 03 c0       	push   0xc0030769
c0011ae9:	68 26 f6 02 c0       	push   0xc002f626
c0011aee:	e8 a1 de 00 00       	call   c001f994 <CPrintf>
c0011af3:	83 c4 10             	add    esp,0x10
c0011af6:	eb 30                	jmp    c0011b28 <find_entry+0x274>
c0011af8:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011afd:	83 f8 09             	cmp    eax,0x9
c0011b00:	7f 0a                	jg     c0011b0c <find_entry+0x258>
c0011b02:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0011b06:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011b0a:	eb 1c                	jmp    c0011b28 <find_entry+0x274>
c0011b0c:	0f be 44 24 19       	movsx  eax,BYTE PTR [esp+0x19]
c0011b11:	83 f8 09             	cmp    eax,0x9
c0011b14:	7f 0a                	jg     c0011b20 <find_entry+0x26c>
c0011b16:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0011b1a:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011b1e:	eb 08                	jmp    c0011b28 <find_entry+0x274>
c0011b20:	b0 ff                	mov    al,0xff
c0011b22:	e9 b5 00 00 00       	jmp    c0011bdc <find_entry+0x328>
c0011b27:	90                   	nop
c0011b28:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011b2d:	83 f8 09             	cmp    eax,0x9
c0011b30:	76 16                	jbe    c0011b48 <find_entry+0x294>
c0011b32:	83 ec 08             	sub    esp,0x8
c0011b35:	68 80 07 03 c0       	push   0xc0030780
c0011b3a:	68 26 f6 02 c0       	push   0xc002f626
c0011b3f:	e8 50 de 00 00       	call   c001f994 <CPrintf>
c0011b44:	83 c4 10             	add    esp,0x10
c0011b47:	90                   	nop
c0011b48:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011b4d:	83 ec 0c             	sub    esp,0xc
c0011b50:	50                   	push   eax
c0011b51:	e8 3e fc ff ff       	call   c0011794 <free_entry>
c0011b56:	83 c4 10             	add    esp,0x10
c0011b59:	8d 76 00             	lea    esi,[esi+0x0]
c0011b5c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011b61:	83 f8 09             	cmp    eax,0x9
c0011b64:	76 16                	jbe    c0011b7c <find_entry+0x2c8>
c0011b66:	83 ec 08             	sub    esp,0x8
c0011b69:	68 80 07 03 c0       	push   0xc0030780
c0011b6e:	68 26 f6 02 c0       	push   0xc002f626
c0011b73:	e8 1c de 00 00       	call   c001f994 <CPrintf>
c0011b78:	83 c4 10             	add    esp,0x10
c0011b7b:	90                   	nop
c0011b7c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011b81:	c1 e0 04             	shl    eax,0x4
c0011b84:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011b89:	8a 00                	mov    al,BYTE PTR [eax]
c0011b8b:	0f b6 c0             	movzx  eax,al
c0011b8e:	85 c0                	test   eax,eax
c0011b90:	74 16                	je     c0011ba8 <find_entry+0x2f4>
c0011b92:	83 ec 08             	sub    esp,0x8
c0011b95:	68 30 06 03 c0       	push   0xc0030630
c0011b9a:	68 26 f6 02 c0       	push   0xc002f626
c0011b9f:	e8 f0 dd 00 00       	call   c001f994 <CPrintf>
c0011ba4:	83 c4 10             	add    esp,0x10
c0011ba7:	90                   	nop
c0011ba8:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0011bad:	74 19                	je     c0011bc8 <find_entry+0x314>
c0011baf:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c0011bb4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011bb8:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bba:	c1 e2 04             	shl    edx,0x4
c0011bbd:	81 c2 04 a9 03 c0    	add    edx,0xc003a904
c0011bc3:	89 02                	mov    DWORD PTR [edx],eax
c0011bc5:	8d 76 00             	lea    esi,[esi+0x0]
c0011bc8:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011bcd:	c1 e0 04             	shl    eax,0x4
c0011bd0:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011bd5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011bd8:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011bdc:	83 c4 2c             	add    esp,0x2c
c0011bdf:	c3                   	ret    

c0011be0 <etharp_send_ip>:
c0011be0:	83 ec 1c             	sub    esp,0x1c
c0011be3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011be7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011bea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011bee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011bf2:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0011bf5:	0f b6 c0             	movzx  eax,al
c0011bf8:	83 f8 06             	cmp    eax,0x6
c0011bfb:	74 17                	je     c0011c14 <etharp_send_ip+0x34>
c0011bfd:	83 ec 08             	sub    esp,0x8
c0011c00:	68 5c 06 03 c0       	push   0xc003065c
c0011c05:	68 26 f6 02 c0       	push   0xc002f626
c0011c0a:	e8 85 dd 00 00       	call   c001f994 <CPrintf>
c0011c0f:	83 c4 10             	add    esp,0x10
c0011c12:	66 90                	xchg   ax,ax
c0011c14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c18:	83 ec 04             	sub    esp,0x4
c0011c1b:	6a 06                	push   0x6
c0011c1d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011c21:	50                   	push   eax
c0011c22:	e8 53 e7 fe ff       	call   c000037a <memcpy>
c0011c27:	83 c4 10             	add    esp,0x10
c0011c2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c2e:	83 c0 06             	add    eax,0x6
c0011c31:	83 ec 04             	sub    esp,0x4
c0011c34:	6a 06                	push   0x6
c0011c36:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011c3a:	50                   	push   eax
c0011c3b:	e8 3a e7 fe ff       	call   c000037a <memcpy>
c0011c40:	83 c4 10             	add    esp,0x10
c0011c43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c47:	66 c7 40 0c 08 00    	mov    WORD PTR [eax+0xc],0x8
c0011c4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011c51:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011c54:	83 ec 08             	sub    esp,0x8
c0011c57:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011c5b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011c5f:	ff d0                	call   eax
c0011c61:	83 c4 10             	add    esp,0x10
c0011c64:	83 c4 1c             	add    esp,0x1c
c0011c67:	c3                   	ret    

c0011c68 <update_arp_entry>:
c0011c68:	83 ec 2c             	sub    esp,0x2c
c0011c6b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c6f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011c73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011c77:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0011c7a:	0f b6 c0             	movzx  eax,al
c0011c7d:	83 f8 06             	cmp    eax,0x6
c0011c80:	74 16                	je     c0011c98 <update_arp_entry+0x30>
c0011c82:	83 ec 08             	sub    esp,0x8
c0011c85:	68 a0 06 03 c0       	push   0xc00306a0
c0011c8a:	68 26 f6 02 c0       	push   0xc002f626
c0011c8f:	e8 00 dd 00 00       	call   c001f994 <CPrintf>
c0011c94:	83 c4 10             	add    esp,0x10
c0011c97:	90                   	nop
c0011c98:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0011c9d:	74 39                	je     c0011cd8 <update_arp_entry+0x70>
c0011c9f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ca3:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ca5:	85 c0                	test   eax,eax
c0011ca7:	74 2f                	je     c0011cd8 <update_arp_entry+0x70>
c0011ca9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011cad:	8b 00                	mov    eax,DWORD PTR [eax]
c0011caf:	83 ec 08             	sub    esp,0x8
c0011cb2:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011cb6:	50                   	push   eax
c0011cb7:	e8 8c 20 00 00       	call   c0013d48 <ip4_addr_isbroadcast>
c0011cbc:	83 c4 10             	add    esp,0x10
c0011cbf:	0f b6 c0             	movzx  eax,al
c0011cc2:	85 c0                	test   eax,eax
c0011cc4:	75 12                	jne    c0011cd8 <update_arp_entry+0x70>
c0011cc6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011cca:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ccc:	25 f0 00 00 00       	and    eax,0xf0
c0011cd1:	3d e0 00 00 00       	cmp    eax,0xe0
c0011cd6:	75 08                	jne    c0011ce0 <update_arp_entry+0x78>
c0011cd8:	b0 f2                	mov    al,0xf2
c0011cda:	e9 d9 00 00 00       	jmp    c0011db8 <update_arp_entry+0x150>
c0011cdf:	90                   	nop
c0011ce0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011ce5:	83 ec 08             	sub    esp,0x8
c0011ce8:	50                   	push   eax
c0011ce9:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011ced:	e8 c2 fb ff ff       	call   c00118b4 <find_entry>
c0011cf2:	83 c4 10             	add    esp,0x10
c0011cf5:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011cf9:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011cfe:	85 c0                	test   eax,eax
c0011d00:	79 0a                	jns    c0011d0c <update_arp_entry+0xa4>
c0011d02:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0011d06:	e9 ad 00 00 00       	jmp    c0011db8 <update_arp_entry+0x150>
c0011d0b:	90                   	nop
c0011d0c:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011d11:	c1 e0 04             	shl    eax,0x4
c0011d14:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011d19:	c6 00 02             	mov    BYTE PTR [eax],0x2
c0011d1c:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011d21:	c1 e0 04             	shl    eax,0x4
c0011d24:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011d29:	83 c0 08             	add    eax,0x8
c0011d2c:	83 ec 04             	sub    esp,0x4
c0011d2f:	6a 06                	push   0x6
c0011d31:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011d35:	50                   	push   eax
c0011d36:	e8 3f e6 fe ff       	call   c000037a <memcpy>
c0011d3b:	83 c4 10             	add    esp,0x10
c0011d3e:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011d43:	c1 e0 04             	shl    eax,0x4
c0011d46:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011d4b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011d4e:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011d53:	c1 e0 04             	shl    eax,0x4
c0011d56:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011d5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d5d:	85 c0                	test   eax,eax
c0011d5f:	74 53                	je     c0011db4 <update_arp_entry+0x14c>
c0011d61:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011d66:	c1 e0 04             	shl    eax,0x4
c0011d69:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011d6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d70:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011d74:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011d79:	c1 e0 04             	shl    eax,0x4
c0011d7c:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011d81:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011d87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d8b:	83 c0 23             	add    eax,0x23
c0011d8e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011d92:	50                   	push   eax
c0011d93:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d97:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011d9b:	e8 40 fe ff ff       	call   c0011be0 <etharp_send_ip>
c0011da0:	83 c4 10             	add    esp,0x10
c0011da3:	83 ec 0c             	sub    esp,0xc
c0011da6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011daa:	e8 a5 64 ff ff       	call   c0008254 <pbuf_free>
c0011daf:	83 c4 10             	add    esp,0x10
c0011db2:	66 90                	xchg   ax,ax
c0011db4:	b0 00                	mov    al,0x0
c0011db6:	66 90                	xchg   ax,ax
c0011db8:	83 c4 2c             	add    esp,0x2c
c0011dbb:	c3                   	ret    

c0011dbc <etharp_find_addr>:
c0011dbc:	83 ec 1c             	sub    esp,0x1c
c0011dbf:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0011dc4:	74 0a                	je     c0011dd0 <etharp_find_addr+0x14>
c0011dc6:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0011dcb:	75 1b                	jne    c0011de8 <etharp_find_addr+0x2c>
c0011dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0011dd0:	83 ec 08             	sub    esp,0x8
c0011dd3:	68 c8 06 03 c0       	push   0xc00306c8
c0011dd8:	68 26 f6 02 c0       	push   0xc002f626
c0011ddd:	e8 b2 db 00 00       	call   c001f994 <CPrintf>
c0011de2:	83 c4 10             	add    esp,0x10
c0011de5:	8d 76 00             	lea    esi,[esi+0x0]
c0011de8:	83 ec 08             	sub    esp,0x8
c0011deb:	6a 02                	push   0x2
c0011ded:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011df1:	e8 be fa ff ff       	call   c00118b4 <find_entry>
c0011df6:	83 c4 10             	add    esp,0x10
c0011df9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011dfd:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0011e02:	85 c0                	test   eax,eax
c0011e04:	78 4a                	js     c0011e50 <etharp_find_addr+0x94>
c0011e06:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0011e0b:	c1 e0 04             	shl    eax,0x4
c0011e0e:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011e13:	8a 00                	mov    al,BYTE PTR [eax]
c0011e15:	0f b6 c0             	movzx  eax,al
c0011e18:	83 f8 02             	cmp    eax,0x2
c0011e1b:	75 33                	jne    c0011e50 <etharp_find_addr+0x94>
c0011e1d:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0011e22:	c1 e0 04             	shl    eax,0x4
c0011e25:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011e2a:	8d 50 08             	lea    edx,[eax+0x8]
c0011e2d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011e31:	89 10                	mov    DWORD PTR [eax],edx
c0011e33:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0011e38:	c1 e0 04             	shl    eax,0x4
c0011e3b:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011e40:	8d 50 04             	lea    edx,[eax+0x4]
c0011e43:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e47:	89 10                	mov    DWORD PTR [eax],edx
c0011e49:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011e4d:	eb 05                	jmp    c0011e54 <etharp_find_addr+0x98>
c0011e4f:	90                   	nop
c0011e50:	b0 ff                	mov    al,0xff
c0011e52:	66 90                	xchg   ax,ax
c0011e54:	83 c4 1c             	add    esp,0x1c
c0011e57:	c3                   	ret    

c0011e58 <etharp_arp_input>:
c0011e58:	83 ec 2c             	sub    esp,0x2c
c0011e5b:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0011e60:	75 1a                	jne    c0011e7c <etharp_arp_input+0x24>
c0011e62:	83 ec 08             	sub    esp,0x8
c0011e65:	68 93 07 03 c0       	push   0xc0030793
c0011e6a:	68 26 f6 02 c0       	push   0xc002f626
c0011e6f:	e8 20 db 00 00       	call   c001f994 <CPrintf>
c0011e74:	83 c4 10             	add    esp,0x10
c0011e77:	e9 d0 02 00 00       	jmp    c001214c <etharp_arp_input+0x2f4>
c0011e7c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011e80:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0011e84:	0f b7 c0             	movzx  eax,ax
c0011e87:	83 f8 29             	cmp    eax,0x29
c0011e8a:	77 34                	ja     c0011ec0 <etharp_arp_input+0x68>
c0011e8c:	66 a1 42 67 03 c0    	mov    ax,ds:0xc0036742
c0011e92:	83 c0 01             	add    eax,0x1
c0011e95:	66 a3 42 67 03 c0    	mov    ds:0xc0036742,ax
c0011e9b:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c0011ea1:	83 c0 01             	add    eax,0x1
c0011ea4:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c0011eaa:	83 ec 0c             	sub    esp,0xc
c0011ead:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011eb1:	e8 9e 63 ff ff       	call   c0008254 <pbuf_free>
c0011eb6:	83 c4 10             	add    esp,0x10
c0011eb9:	e9 8e 02 00 00       	jmp    c001214c <etharp_arp_input+0x2f4>
c0011ebe:	66 90                	xchg   ax,ax
c0011ec0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011ec4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011ec7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011ecb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011ecf:	83 c0 0e             	add    eax,0xe
c0011ed2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011ed6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011eda:	66 8b 00             	mov    ax,WORD PTR [eax]
c0011edd:	0f b7 c0             	movzx  eax,ax
c0011ee0:	3d 00 01 00 00       	cmp    eax,0x100
c0011ee5:	75 31                	jne    c0011f18 <etharp_arp_input+0xc0>
c0011ee7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011eeb:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0011eee:	0f b6 c0             	movzx  eax,al
c0011ef1:	83 f8 06             	cmp    eax,0x6
c0011ef4:	75 22                	jne    c0011f18 <etharp_arp_input+0xc0>
c0011ef6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011efa:	8a 40 05             	mov    al,BYTE PTR [eax+0x5]
c0011efd:	0f b6 c0             	movzx  eax,al
c0011f00:	83 f8 04             	cmp    eax,0x4
c0011f03:	75 13                	jne    c0011f18 <etharp_arp_input+0xc0>
c0011f05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011f09:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0011f0d:	0f b7 c0             	movzx  eax,ax
c0011f10:	83 f8 08             	cmp    eax,0x8
c0011f13:	74 37                	je     c0011f4c <etharp_arp_input+0xf4>
c0011f15:	8d 76 00             	lea    esi,[esi+0x0]
c0011f18:	66 a1 48 67 03 c0    	mov    ax,ds:0xc0036748
c0011f1e:	83 c0 01             	add    eax,0x1
c0011f21:	66 a3 48 67 03 c0    	mov    ds:0xc0036748,ax
c0011f27:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c0011f2d:	83 c0 01             	add    eax,0x1
c0011f30:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c0011f36:	83 ec 0c             	sub    esp,0xc
c0011f39:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011f3d:	e8 12 63 ff ff       	call   c0008254 <pbuf_free>
c0011f42:	83 c4 10             	add    esp,0x10
c0011f45:	e9 02 02 00 00       	jmp    c001214c <etharp_arp_input+0x2f4>
c0011f4a:	66 90                	xchg   ax,ax
c0011f4c:	66 a1 3a 67 03 c0    	mov    ax,ds:0xc003673a
c0011f52:	83 c0 01             	add    eax,0x1
c0011f55:	66 a3 3a 67 03 c0    	mov    ds:0xc003673a,ax
c0011f5b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011f5f:	83 c0 0e             	add    eax,0xe
c0011f62:	83 ec 04             	sub    esp,0x4
c0011f65:	6a 04                	push   0x4
c0011f67:	50                   	push   eax
c0011f68:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0011f6c:	50                   	push   eax
c0011f6d:	e8 08 e4 fe ff       	call   c000037a <memcpy>
c0011f72:	83 c4 10             	add    esp,0x10
c0011f75:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011f79:	83 c0 18             	add    eax,0x18
c0011f7c:	83 ec 04             	sub    esp,0x4
c0011f7f:	6a 04                	push   0x4
c0011f81:	50                   	push   eax
c0011f82:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011f86:	50                   	push   eax
c0011f87:	e8 ee e3 fe ff       	call   c000037a <memcpy>
c0011f8c:	83 c4 10             	add    esp,0x10
c0011f8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f93:	83 c0 04             	add    eax,0x4
c0011f96:	74 0c                	je     c0011fa4 <etharp_arp_input+0x14c>
c0011f98:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011f9f:	85 c0                	test   eax,eax
c0011fa1:	75 09                	jne    c0011fac <etharp_arp_input+0x154>
c0011fa3:	90                   	nop
c0011fa4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011fa9:	eb 15                	jmp    c0011fc0 <etharp_arp_input+0x168>
c0011fab:	90                   	nop
c0011fac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011fb0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011fb4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011fb7:	39 c2                	cmp    edx,eax
c0011fb9:	0f 94 c0             	sete   al
c0011fbc:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011fc0:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c0011fc5:	85 c0                	test   eax,eax
c0011fc7:	74 07                	je     c0011fd0 <etharp_arp_input+0x178>
c0011fc9:	b8 01 00 00 00       	mov    eax,0x1
c0011fce:	eb 08                	jmp    c0011fd8 <etharp_arp_input+0x180>
c0011fd0:	b8 02 00 00 00       	mov    eax,0x2
c0011fd5:	8d 76 00             	lea    esi,[esi+0x0]
c0011fd8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011fdc:	83 c2 08             	add    edx,0x8
c0011fdf:	50                   	push   eax
c0011fe0:	52                   	push   edx
c0011fe1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011fe5:	50                   	push   eax
c0011fe6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011fea:	e8 79 fc ff ff       	call   c0011c68 <update_arp_entry>
c0011fef:	83 c4 10             	add    esp,0x10
c0011ff2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011ff6:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0011ffa:	0f b7 c0             	movzx  eax,ax
c0011ffd:	3d 00 01 00 00       	cmp    eax,0x100
c0012002:	74 10                	je     c0012014 <etharp_arp_input+0x1bc>
c0012004:	3d 00 02 00 00       	cmp    eax,0x200
c0012009:	0f 84 29 01 00 00    	je     c0012138 <etharp_arp_input+0x2e0>
c001200f:	e9 10 01 00 00       	jmp    c0012124 <etharp_arp_input+0x2cc>
c0012014:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c0012019:	85 c0                	test   eax,eax
c001201b:	0f 84 f7 00 00 00    	je     c0012118 <etharp_arp_input+0x2c0>
c0012021:	83 ec 0c             	sub    esp,0xc
c0012024:	6a 02                	push   0x2
c0012026:	e8 bd eb fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001202b:	83 c4 10             	add    esp,0x10
c001202e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012032:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0012036:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001203a:	8d 50 0e             	lea    edx,[eax+0xe]
c001203d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012041:	83 c0 18             	add    eax,0x18
c0012044:	83 ec 04             	sub    esp,0x4
c0012047:	6a 04                	push   0x4
c0012049:	52                   	push   edx
c001204a:	50                   	push   eax
c001204b:	e8 2a e3 fe ff       	call   c000037a <memcpy>
c0012050:	83 c4 10             	add    esp,0x10
c0012053:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012057:	8d 50 04             	lea    edx,[eax+0x4]
c001205a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001205e:	83 c0 0e             	add    eax,0xe
c0012061:	83 ec 04             	sub    esp,0x4
c0012064:	6a 04                	push   0x4
c0012066:	52                   	push   edx
c0012067:	50                   	push   eax
c0012068:	e8 0d e3 fe ff       	call   c000037a <memcpy>
c001206d:	83 c4 10             	add    esp,0x10
c0012070:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012074:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0012077:	0f b6 c0             	movzx  eax,al
c001207a:	83 f8 06             	cmp    eax,0x6
c001207d:	74 15                	je     c0012094 <etharp_arp_input+0x23c>
c001207f:	83 ec 08             	sub    esp,0x8
c0012082:	68 5c 06 03 c0       	push   0xc003065c
c0012087:	68 26 f6 02 c0       	push   0xc002f626
c001208c:	e8 03 d9 00 00       	call   c001f994 <CPrintf>
c0012091:	83 c4 10             	add    esp,0x10
c0012094:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012098:	8d 50 08             	lea    edx,[eax+0x8]
c001209b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001209f:	83 c0 12             	add    eax,0x12
c00120a2:	83 ec 04             	sub    esp,0x4
c00120a5:	6a 06                	push   0x6
c00120a7:	52                   	push   edx
c00120a8:	50                   	push   eax
c00120a9:	e8 cc e2 fe ff       	call   c000037a <memcpy>
c00120ae:	83 c4 10             	add    esp,0x10
c00120b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00120b5:	8d 50 08             	lea    edx,[eax+0x8]
c00120b8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00120bc:	83 ec 04             	sub    esp,0x4
c00120bf:	6a 06                	push   0x6
c00120c1:	52                   	push   edx
c00120c2:	50                   	push   eax
c00120c3:	e8 b2 e2 fe ff       	call   c000037a <memcpy>
c00120c8:	83 c4 10             	add    esp,0x10
c00120cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00120cf:	83 c0 08             	add    eax,0x8
c00120d2:	83 ec 04             	sub    esp,0x4
c00120d5:	6a 06                	push   0x6
c00120d7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00120db:	50                   	push   eax
c00120dc:	e8 99 e2 fe ff       	call   c000037a <memcpy>
c00120e1:	83 c4 10             	add    esp,0x10
c00120e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00120e8:	83 c0 06             	add    eax,0x6
c00120eb:	83 ec 04             	sub    esp,0x4
c00120ee:	6a 06                	push   0x6
c00120f0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00120f4:	50                   	push   eax
c00120f5:	e8 80 e2 fe ff       	call   c000037a <memcpy>
c00120fa:	83 c4 10             	add    esp,0x10
c00120fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012101:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0012104:	83 ec 08             	sub    esp,0x8
c0012107:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001210b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001210f:	ff d0                	call   eax
c0012111:	83 c4 10             	add    esp,0x10
c0012114:	eb 26                	jmp    c001213c <etharp_arp_input+0x2e4>
c0012116:	66 90                	xchg   ax,ax
c0012118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001211c:	83 c0 04             	add    eax,0x4
c001211f:	eb 1b                	jmp    c001213c <etharp_arp_input+0x2e4>
c0012121:	8d 76 00             	lea    esi,[esi+0x0]
c0012124:	66 a1 4c 67 03 c0    	mov    ax,ds:0xc003674c
c001212a:	83 c0 01             	add    eax,0x1
c001212d:	66 a3 4c 67 03 c0    	mov    ds:0xc003674c,ax
c0012133:	eb 07                	jmp    c001213c <etharp_arp_input+0x2e4>
c0012135:	8d 76 00             	lea    esi,[esi+0x0]
c0012138:	90                   	nop
c0012139:	8d 76 00             	lea    esi,[esi+0x0]
c001213c:	83 ec 0c             	sub    esp,0xc
c001213f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012143:	e8 0c 61 ff ff       	call   c0008254 <pbuf_free>
c0012148:	83 c4 10             	add    esp,0x10
c001214b:	90                   	nop
c001214c:	83 c4 2c             	add    esp,0x2c
c001214f:	c3                   	ret    

c0012150 <etharp_raw>:
c0012150:	83 ec 2c             	sub    esp,0x2c
c0012153:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0012157:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001215c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012161:	83 ec 04             	sub    esp,0x4
c0012164:	6a 00                	push   0x0
c0012166:	6a 2a                	push   0x2a
c0012168:	6a 03                	push   0x3
c001216a:	e8 bd 62 ff ff       	call   c000842c <pbuf_alloc>
c001216f:	83 c4 10             	add    esp,0x10
c0012172:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012176:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001217b:	75 17                	jne    c0012194 <etharp_raw+0x44>
c001217d:	66 a1 44 67 03 c0    	mov    ax,ds:0xc0036744
c0012183:	83 c0 01             	add    eax,0x1
c0012186:	66 a3 44 67 03 c0    	mov    ds:0xc0036744,ax
c001218c:	b0 ff                	mov    al,0xff
c001218e:	e9 85 01 00 00       	jmp    c0012318 <etharp_raw+0x1c8>
c0012193:	90                   	nop
c0012194:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012198:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c001219c:	0f b7 c0             	movzx  eax,ax
c001219f:	83 f8 29             	cmp    eax,0x29
c00121a2:	77 18                	ja     c00121bc <etharp_raw+0x6c>
c00121a4:	83 ec 08             	sub    esp,0x8
c00121a7:	68 ec 06 03 c0       	push   0xc00306ec
c00121ac:	68 26 f6 02 c0       	push   0xc002f626
c00121b1:	e8 de d7 00 00       	call   c001f994 <CPrintf>
c00121b6:	83 c4 10             	add    esp,0x10
c00121b9:	8d 76 00             	lea    esi,[esi+0x0]
c00121bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00121c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00121c3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00121c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00121cb:	83 c0 0e             	add    eax,0xe
c00121ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00121d2:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00121d7:	83 ec 0c             	sub    esp,0xc
c00121da:	50                   	push   eax
c00121db:	e8 08 ea fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00121e0:	83 c4 10             	add    esp,0x10
c00121e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00121e7:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00121eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121ef:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c00121f2:	0f b6 c0             	movzx  eax,al
c00121f5:	83 f8 06             	cmp    eax,0x6
c00121f8:	74 16                	je     c0012210 <etharp_raw+0xc0>
c00121fa:	83 ec 08             	sub    esp,0x8
c00121fd:	68 5c 06 03 c0       	push   0xc003065c
c0012202:	68 26 f6 02 c0       	push   0xc002f626
c0012207:	e8 88 d7 00 00       	call   c001f994 <CPrintf>
c001220c:	83 c4 10             	add    esp,0x10
c001220f:	90                   	nop
c0012210:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012214:	83 c0 08             	add    eax,0x8
c0012217:	83 ec 04             	sub    esp,0x4
c001221a:	6a 06                	push   0x6
c001221c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012220:	50                   	push   eax
c0012221:	e8 54 e1 fe ff       	call   c000037a <memcpy>
c0012226:	83 c4 10             	add    esp,0x10
c0012229:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001222d:	83 c0 12             	add    eax,0x12
c0012230:	83 ec 04             	sub    esp,0x4
c0012233:	6a 06                	push   0x6
c0012235:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012239:	50                   	push   eax
c001223a:	e8 3b e1 fe ff       	call   c000037a <memcpy>
c001223f:	83 c4 10             	add    esp,0x10
c0012242:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012246:	83 ec 04             	sub    esp,0x4
c0012249:	6a 06                	push   0x6
c001224b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001224f:	50                   	push   eax
c0012250:	e8 25 e1 fe ff       	call   c000037a <memcpy>
c0012255:	83 c4 10             	add    esp,0x10
c0012258:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001225c:	83 c0 06             	add    eax,0x6
c001225f:	83 ec 04             	sub    esp,0x4
c0012262:	6a 06                	push   0x6
c0012264:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012268:	50                   	push   eax
c0012269:	e8 0c e1 fe ff       	call   c000037a <memcpy>
c001226e:	83 c4 10             	add    esp,0x10
c0012271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012275:	83 c0 0e             	add    eax,0xe
c0012278:	83 ec 04             	sub    esp,0x4
c001227b:	6a 04                	push   0x4
c001227d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012281:	50                   	push   eax
c0012282:	e8 f3 e0 fe ff       	call   c000037a <memcpy>
c0012287:	83 c4 10             	add    esp,0x10
c001228a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001228e:	83 c0 18             	add    eax,0x18
c0012291:	83 ec 04             	sub    esp,0x4
c0012294:	6a 04                	push   0x4
c0012296:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001229a:	50                   	push   eax
c001229b:	e8 da e0 fe ff       	call   c000037a <memcpy>
c00122a0:	83 c4 10             	add    esp,0x10
c00122a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122a7:	66 c7 00 00 01       	mov    WORD PTR [eax],0x100
c00122ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122b0:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00122b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122ba:	c6 40 04 06          	mov    BYTE PTR [eax+0x4],0x6
c00122be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122c2:	c6 40 05 04          	mov    BYTE PTR [eax+0x5],0x4
c00122c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00122ca:	66 c7 40 0c 08 06    	mov    WORD PTR [eax+0xc],0x608
c00122d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122d4:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00122d7:	83 ec 08             	sub    esp,0x8
c00122da:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00122de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00122e2:	ff d0                	call   eax
c00122e4:	83 c4 10             	add    esp,0x10
c00122e7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00122eb:	66 a1 38 67 03 c0    	mov    ax,ds:0xc0036738
c00122f1:	83 c0 01             	add    eax,0x1
c00122f4:	66 a3 38 67 03 c0    	mov    ds:0xc0036738,ax
c00122fa:	83 ec 0c             	sub    esp,0xc
c00122fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012301:	e8 4e 5f ff ff       	call   c0008254 <pbuf_free>
c0012306:	83 c4 10             	add    esp,0x10
c0012309:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012311:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012315:	8d 76 00             	lea    esi,[esi+0x0]
c0012318:	83 c4 2c             	add    esp,0x2c
c001231b:	c3                   	ret    

c001231c <etharp_request>:
c001231c:	83 ec 0c             	sub    esp,0xc
c001231f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012323:	8d 48 04             	lea    ecx,[eax+0x4]
c0012326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001232a:	8d 50 23             	lea    edx,[eax+0x23]
c001232d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012331:	83 c0 23             	add    eax,0x23
c0012334:	6a 01                	push   0x1
c0012336:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001233a:	68 bc 07 03 c0       	push   0xc00307bc
c001233f:	51                   	push   ecx
c0012340:	52                   	push   edx
c0012341:	68 c4 07 03 c0       	push   0xc00307c4
c0012346:	50                   	push   eax
c0012347:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001234b:	e8 00 fe ff ff       	call   c0012150 <etharp_raw>
c0012350:	83 c4 20             	add    esp,0x20
c0012353:	83 c4 0c             	add    esp,0xc
c0012356:	c3                   	ret    
c0012357:	90                   	nop

c0012358 <etharp_query>:
c0012358:	83 ec 2c             	sub    esp,0x2c
c001235b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001235f:	83 c0 23             	add    eax,0x23
c0012362:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012366:	c6 44 24 1f ff       	mov    BYTE PTR [esp+0x1f],0xff
c001236b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001236f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012371:	83 ec 08             	sub    esp,0x8
c0012374:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012378:	50                   	push   eax
c0012379:	e8 ca 19 00 00       	call   c0013d48 <ip4_addr_isbroadcast>
c001237e:	83 c4 10             	add    esp,0x10
c0012381:	0f b6 c0             	movzx  eax,al
c0012384:	85 c0                	test   eax,eax
c0012386:	75 24                	jne    c00123ac <etharp_query+0x54>
c0012388:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001238c:	8b 00                	mov    eax,DWORD PTR [eax]
c001238e:	25 f0 00 00 00       	and    eax,0xf0
c0012393:	3d e0 00 00 00       	cmp    eax,0xe0
c0012398:	74 12                	je     c00123ac <etharp_query+0x54>
c001239a:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001239f:	74 0b                	je     c00123ac <etharp_query+0x54>
c00123a1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00123a7:	85 c0                	test   eax,eax
c00123a9:	75 09                	jne    c00123b4 <etharp_query+0x5c>
c00123ab:	90                   	nop
c00123ac:	b0 f2                	mov    al,0xf2
c00123ae:	e9 dd 02 00 00       	jmp    c0012690 <etharp_query+0x338>
c00123b3:	90                   	nop
c00123b4:	83 ec 08             	sub    esp,0x8
c00123b7:	6a 01                	push   0x1
c00123b9:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00123bd:	e8 f2 f4 ff ff       	call   c00118b4 <find_entry>
c00123c2:	83 c4 10             	add    esp,0x10
c00123c5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00123c9:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00123ce:	85 c0                	test   eax,eax
c00123d0:	79 22                	jns    c00123f4 <etharp_query+0x9c>
c00123d2:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00123d7:	74 0f                	je     c00123e8 <etharp_query+0x90>
c00123d9:	66 a1 44 67 03 c0    	mov    ax,ds:0xc0036744
c00123df:	83 c0 01             	add    eax,0x1
c00123e2:	66 a3 44 67 03 c0    	mov    ds:0xc0036744,ax
c00123e8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00123ec:	e9 9f 02 00 00       	jmp    c0012690 <etharp_query+0x338>
c00123f1:	8d 76 00             	lea    esi,[esi+0x0]
c00123f4:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00123f9:	c1 e0 04             	shl    eax,0x4
c00123fc:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012401:	8a 00                	mov    al,BYTE PTR [eax]
c0012403:	0f b6 c0             	movzx  eax,al
c0012406:	85 c0                	test   eax,eax
c0012408:	75 12                	jne    c001241c <etharp_query+0xc4>
c001240a:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001240f:	c1 e0 04             	shl    eax,0x4
c0012412:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012417:	c6 00 01             	mov    BYTE PTR [eax],0x1
c001241a:	66 90                	xchg   ax,ax
c001241c:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012421:	c1 e0 04             	shl    eax,0x4
c0012424:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012429:	8a 00                	mov    al,BYTE PTR [eax]
c001242b:	0f b6 c0             	movzx  eax,al
c001242e:	83 f8 01             	cmp    eax,0x1
c0012431:	74 2d                	je     c0012460 <etharp_query+0x108>
c0012433:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012438:	c1 e0 04             	shl    eax,0x4
c001243b:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012440:	8a 00                	mov    al,BYTE PTR [eax]
c0012442:	0f b6 c0             	movzx  eax,al
c0012445:	83 f8 02             	cmp    eax,0x2
c0012448:	74 16                	je     c0012460 <etharp_query+0x108>
c001244a:	83 ec 08             	sub    esp,0x8
c001244d:	68 20 07 03 c0       	push   0xc0030720
c0012452:	68 26 f6 02 c0       	push   0xc002f626
c0012457:	e8 38 d5 00 00       	call   c001f994 <CPrintf>
c001245c:	83 c4 10             	add    esp,0x10
c001245f:	90                   	nop
c0012460:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012465:	c1 e0 04             	shl    eax,0x4
c0012468:	05 0e a9 03 c0       	add    eax,0xc003a90e
c001246d:	8a 00                	mov    al,BYTE PTR [eax]
c001246f:	0f b6 c0             	movzx  eax,al
c0012472:	83 f8 01             	cmp    eax,0x1
c0012475:	74 09                	je     c0012480 <etharp_query+0x128>
c0012477:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c001247c:	75 2a                	jne    c00124a8 <etharp_query+0x150>
c001247e:	66 90                	xchg   ax,ax
c0012480:	83 ec 08             	sub    esp,0x8
c0012483:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012487:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001248b:	e8 8c fe ff ff       	call   c001231c <etharp_request>
c0012490:	83 c4 10             	add    esp,0x10
c0012493:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012497:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c001249c:	75 0a                	jne    c00124a8 <etharp_query+0x150>
c001249e:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00124a2:	e9 e9 01 00 00       	jmp    c0012690 <etharp_query+0x338>
c00124a7:	90                   	nop
c00124a8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00124ad:	75 15                	jne    c00124c4 <etharp_query+0x16c>
c00124af:	83 ec 08             	sub    esp,0x8
c00124b2:	68 9a fa 02 c0       	push   0xc002fa9a
c00124b7:	68 26 f6 02 c0       	push   0xc002f626
c00124bc:	e8 d3 d4 00 00       	call   c001f994 <CPrintf>
c00124c1:	83 c4 10             	add    esp,0x10
c00124c4:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00124c9:	c1 e0 04             	shl    eax,0x4
c00124cc:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00124d1:	8a 00                	mov    al,BYTE PTR [eax]
c00124d3:	0f b6 c0             	movzx  eax,al
c00124d6:	83 f8 02             	cmp    eax,0x2
c00124d9:	75 39                	jne    c0012514 <etharp_query+0x1bc>
c00124db:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00124df:	a2 e0 a8 03 c0       	mov    ds:0xc003a8e0,al
c00124e4:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00124e9:	c1 e0 04             	shl    eax,0x4
c00124ec:	05 00 a9 03 c0       	add    eax,0xc003a900
c00124f1:	83 c0 08             	add    eax,0x8
c00124f4:	50                   	push   eax
c00124f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00124f9:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00124fd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012501:	e8 da f6 ff ff       	call   c0011be0 <etharp_send_ip>
c0012506:	83 c4 10             	add    esp,0x10
c0012509:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001250d:	e9 7a 01 00 00       	jmp    c001268c <etharp_query+0x334>
c0012512:	66 90                	xchg   ax,ax
c0012514:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012519:	c1 e0 04             	shl    eax,0x4
c001251c:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012521:	8a 00                	mov    al,BYTE PTR [eax]
c0012523:	0f b6 c0             	movzx  eax,al
c0012526:	83 f8 01             	cmp    eax,0x1
c0012529:	0f 85 5d 01 00 00    	jne    c001268c <etharp_query+0x334>
c001252f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012537:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001253b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001253f:	eb 63                	jmp    c00125a4 <etharp_query+0x24c>
c0012541:	8d 76 00             	lea    esi,[esi+0x0]
c0012544:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012548:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c001254c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012550:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012553:	0f b7 d2             	movzx  edx,dx
c0012556:	0f b7 c0             	movzx  eax,ax
c0012559:	39 c2                	cmp    edx,eax
c001255b:	75 1f                	jne    c001257c <etharp_query+0x224>
c001255d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012561:	8b 00                	mov    eax,DWORD PTR [eax]
c0012563:	85 c0                	test   eax,eax
c0012565:	74 15                	je     c001257c <etharp_query+0x224>
c0012567:	83 ec 08             	sub    esp,0x8
c001256a:	68 a1 07 03 c0       	push   0xc00307a1
c001256f:	68 26 f6 02 c0       	push   0xc002f626
c0012574:	e8 1b d4 00 00       	call   c001f994 <CPrintf>
c0012579:	83 c4 10             	add    esp,0x10
c001257c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012580:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0012583:	0f b6 c0             	movzx  eax,al
c0012586:	83 f8 01             	cmp    eax,0x1
c0012589:	74 0d                	je     c0012598 <etharp_query+0x240>
c001258b:	c7 44 24 14 01 00 00 00 	mov    DWORD PTR [esp+0x14],0x1
c0012593:	eb 17                	jmp    c00125ac <etharp_query+0x254>
c0012595:	8d 76 00             	lea    esi,[esi+0x0]
c0012598:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001259c:	8b 00                	mov    eax,DWORD PTR [eax]
c001259e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00125a2:	66 90                	xchg   ax,ax
c00125a4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00125a9:	75 99                	jne    c0012544 <etharp_query+0x1ec>
c00125ab:	90                   	nop
c00125ac:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00125b1:	74 59                	je     c001260c <etharp_query+0x2b4>
c00125b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00125b7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00125ba:	0f b7 c0             	movzx  eax,ax
c00125bd:	83 ec 04             	sub    esp,0x4
c00125c0:	6a 00                	push   0x0
c00125c2:	50                   	push   eax
c00125c3:	6a 03                	push   0x3
c00125c5:	e8 62 5e ff ff       	call   c000842c <pbuf_alloc>
c00125ca:	83 c4 10             	add    esp,0x10
c00125cd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00125d1:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00125d6:	74 4c                	je     c0012624 <etharp_query+0x2cc>
c00125d8:	83 ec 08             	sub    esp,0x8
c00125db:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00125df:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00125e3:	e8 a4 66 ff ff       	call   c0008c8c <pbuf_copy>
c00125e8:	83 c4 10             	add    esp,0x10
c00125eb:	0f be c0             	movsx  eax,al
c00125ee:	85 c0                	test   eax,eax
c00125f0:	74 32                	je     c0012624 <etharp_query+0x2cc>
c00125f2:	83 ec 0c             	sub    esp,0xc
c00125f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00125f9:	e8 56 5c ff ff       	call   c0008254 <pbuf_free>
c00125fe:	83 c4 10             	add    esp,0x10
c0012601:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012609:	eb 19                	jmp    c0012624 <etharp_query+0x2cc>
c001260b:	90                   	nop
c001260c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012610:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012614:	83 ec 0c             	sub    esp,0xc
c0012617:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001261b:	e8 3c 64 ff ff       	call   c0008a5c <pbuf_ref>
c0012620:	83 c4 10             	add    esp,0x10
c0012623:	90                   	nop
c0012624:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012629:	74 4d                	je     c0012678 <etharp_query+0x320>
c001262b:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012630:	c1 e0 04             	shl    eax,0x4
c0012633:	05 00 a9 03 c0       	add    eax,0xc003a900
c0012638:	8b 00                	mov    eax,DWORD PTR [eax]
c001263a:	85 c0                	test   eax,eax
c001263c:	74 1e                	je     c001265c <etharp_query+0x304>
c001263e:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012643:	c1 e0 04             	shl    eax,0x4
c0012646:	05 00 a9 03 c0       	add    eax,0xc003a900
c001264b:	8b 00                	mov    eax,DWORD PTR [eax]
c001264d:	83 ec 0c             	sub    esp,0xc
c0012650:	50                   	push   eax
c0012651:	e8 fe 5b ff ff       	call   c0008254 <pbuf_free>
c0012656:	83 c4 10             	add    esp,0x10
c0012659:	8d 76 00             	lea    esi,[esi+0x0]
c001265c:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012661:	c1 e0 04             	shl    eax,0x4
c0012664:	8d 90 00 a9 03 c0    	lea    edx,[eax-0x3ffc5700]
c001266a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001266e:	89 02                	mov    DWORD PTR [edx],eax
c0012670:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012675:	eb 15                	jmp    c001268c <etharp_query+0x334>
c0012677:	90                   	nop
c0012678:	66 a1 44 67 03 c0    	mov    ax,ds:0xc0036744
c001267e:	83 c0 01             	add    eax,0x1
c0012681:	66 a3 44 67 03 c0    	mov    ds:0xc0036744,ax
c0012687:	c6 44 24 1f ff       	mov    BYTE PTR [esp+0x1f],0xff
c001268c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012690:	83 c4 2c             	add    esp,0x2c
c0012693:	c3                   	ret    

c0012694 <etharp_output>:
c0012694:	83 ec 1c             	sub    esp,0x1c
c0012697:	83 ec 08             	sub    esp,0x8
c001269a:	6a 0e                	push   0xe
c001269c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00126a0:	e8 13 5a ff ff       	call   c00080b8 <pbuf_header>
c00126a5:	83 c4 10             	add    esp,0x10
c00126a8:	0f b6 c0             	movzx  eax,al
c00126ab:	85 c0                	test   eax,eax
c00126ad:	74 19                	je     c00126c8 <etharp_output+0x34>
c00126af:	66 a1 2a 67 03 c0    	mov    ax,ds:0xc003672a
c00126b5:	83 c0 01             	add    eax,0x1
c00126b8:	66 a3 2a 67 03 c0    	mov    ds:0xc003672a,ax
c00126be:	b0 fe                	mov    al,0xfe
c00126c0:	e9 8b 01 00 00       	jmp    c0012850 <etharp_output+0x1bc>
c00126c5:	8d 76 00             	lea    esi,[esi+0x0]
c00126c8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00126d0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00126d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00126d6:	83 ec 08             	sub    esp,0x8
c00126d9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00126dd:	50                   	push   eax
c00126de:	e8 65 16 00 00       	call   c0013d48 <ip4_addr_isbroadcast>
c00126e3:	83 c4 10             	add    esp,0x10
c00126e6:	0f b6 c0             	movzx  eax,al
c00126e9:	85 c0                	test   eax,eax
c00126eb:	74 0f                	je     c00126fc <etharp_output+0x68>
c00126ed:	c7 44 24 0c c4 07 03 c0 	mov    DWORD PTR [esp+0xc],0xc00307c4
c00126f5:	e9 3a 01 00 00       	jmp    c0012834 <etharp_output+0x1a0>
c00126fa:	66 90                	xchg   ax,ax
c00126fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012700:	8b 00                	mov    eax,DWORD PTR [eax]
c0012702:	25 f0 00 00 00       	and    eax,0xf0
c0012707:	3d e0 00 00 00       	cmp    eax,0xe0
c001270c:	75 42                	jne    c0012750 <etharp_output+0xbc>
c001270e:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c0012713:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
c0012718:	c6 44 24 08 5e       	mov    BYTE PTR [esp+0x8],0x5e
c001271d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012721:	83 c0 01             	add    eax,0x1
c0012724:	8a 00                	mov    al,BYTE PTR [eax]
c0012726:	83 e0 7f             	and    eax,0x7f
c0012729:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001272d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012731:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0012734:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0012738:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001273c:	8a 40 03             	mov    al,BYTE PTR [eax+0x3]
c001273f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012743:	8d 44 24 06          	lea    eax,[esp+0x6]
c0012747:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001274b:	e9 e4 00 00 00       	jmp    c0012834 <etharp_output+0x1a0>
c0012750:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012754:	8b 10                	mov    edx,DWORD PTR [eax]
c0012756:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001275a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001275d:	31 c2                	xor    edx,eax
c001275f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012763:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012766:	21 d0                	and    eax,edx
c0012768:	74 3a                	je     c00127a4 <etharp_output+0x110>
c001276a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001276e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012770:	0f b7 c0             	movzx  eax,ax
c0012773:	3d a9 fe 00 00       	cmp    eax,0xfea9
c0012778:	74 2a                	je     c00127a4 <etharp_output+0x110>
c001277a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001277e:	83 c0 0c             	add    eax,0xc
c0012781:	74 19                	je     c001279c <etharp_output+0x108>
c0012783:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012787:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001278a:	85 c0                	test   eax,eax
c001278c:	74 0e                	je     c001279c <etharp_output+0x108>
c001278e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012792:	83 c0 0c             	add    eax,0xc
c0012795:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012799:	eb 09                	jmp    c00127a4 <etharp_output+0x110>
c001279b:	90                   	nop
c001279c:	b0 fc                	mov    al,0xfc
c001279e:	e9 ad 00 00 00       	jmp    c0012850 <etharp_output+0x1bc>
c00127a3:	90                   	nop
c00127a4:	a0 e0 a8 03 c0       	mov    al,ds:0xc003a8e0
c00127a9:	0f b6 c0             	movzx  eax,al
c00127ac:	c1 e0 04             	shl    eax,0x4
c00127af:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00127b4:	8a 00                	mov    al,BYTE PTR [eax]
c00127b6:	0f b6 c0             	movzx  eax,al
c00127b9:	83 f8 02             	cmp    eax,0x2
c00127bc:	75 5a                	jne    c0012818 <etharp_output+0x184>
c00127be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00127c2:	8b 10                	mov    edx,DWORD PTR [eax]
c00127c4:	a0 e0 a8 03 c0       	mov    al,ds:0xc003a8e0
c00127c9:	0f b6 c0             	movzx  eax,al
c00127cc:	c1 e0 04             	shl    eax,0x4
c00127cf:	05 04 a9 03 c0       	add    eax,0xc003a904
c00127d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00127d6:	39 c2                	cmp    edx,eax
c00127d8:	75 3e                	jne    c0012818 <etharp_output+0x184>
c00127da:	66 a1 4e 67 03 c0    	mov    ax,ds:0xc003674e
c00127e0:	83 c0 01             	add    eax,0x1
c00127e3:	66 a3 4e 67 03 c0    	mov    ds:0xc003674e,ax
c00127e9:	a0 e0 a8 03 c0       	mov    al,ds:0xc003a8e0
c00127ee:	0f b6 c0             	movzx  eax,al
c00127f1:	c1 e0 04             	shl    eax,0x4
c00127f4:	05 00 a9 03 c0       	add    eax,0xc003a900
c00127f9:	8d 50 08             	lea    edx,[eax+0x8]
c00127fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012800:	83 c0 23             	add    eax,0x23
c0012803:	52                   	push   edx
c0012804:	50                   	push   eax
c0012805:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012809:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001280d:	e8 ce f3 ff ff       	call   c0011be0 <etharp_send_ip>
c0012812:	83 c4 10             	add    esp,0x10
c0012815:	eb 39                	jmp    c0012850 <etharp_output+0x1bc>
c0012817:	90                   	nop
c0012818:	83 ec 04             	sub    esp,0x4
c001281b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001281f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012823:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012827:	e8 2c fb ff ff       	call   c0012358 <etharp_query>
c001282c:	83 c4 10             	add    esp,0x10
c001282f:	eb 1f                	jmp    c0012850 <etharp_output+0x1bc>
c0012831:	8d 76 00             	lea    esi,[esi+0x0]
c0012834:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012838:	83 c0 23             	add    eax,0x23
c001283b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001283f:	50                   	push   eax
c0012840:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012844:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012848:	e8 93 f3 ff ff       	call   c0011be0 <etharp_send_ip>
c001284d:	83 c4 10             	add    esp,0x10
c0012850:	83 c4 1c             	add    esp,0x1c
c0012853:	c3                   	ret    

c0012854 <ethernet_input>:
c0012854:	83 ec 1c             	sub    esp,0x1c
c0012857:	66 c7 44 24 0e 0e 00 	mov    WORD PTR [esp+0xe],0xe
c001285e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012862:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012866:	0f b7 c0             	movzx  eax,ax
c0012869:	83 f8 0e             	cmp    eax,0xe
c001286c:	77 26                	ja     c0012894 <ethernet_input+0x40>
c001286e:	66 a1 48 67 03 c0    	mov    ax,ds:0xc0036748
c0012874:	83 c0 01             	add    eax,0x1
c0012877:	66 a3 48 67 03 c0    	mov    ds:0xc0036748,ax
c001287d:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c0012883:	83 c0 01             	add    eax,0x1
c0012886:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c001288c:	e9 ef 00 00 00       	jmp    c0012980 <ethernet_input+0x12c>
c0012891:	8d 76 00             	lea    esi,[esi+0x0]
c0012894:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012898:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001289b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001289f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00128a3:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c00128a7:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00128ac:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00128b1:	83 f8 08             	cmp    eax,0x8
c00128b4:	74 0e                	je     c00128c4 <ethernet_input+0x70>
c00128b6:	3d 08 06 00 00       	cmp    eax,0x608
c00128bb:	74 6b                	je     c0012928 <ethernet_input+0xd4>
c00128bd:	e9 92 00 00 00       	jmp    c0012954 <ethernet_input+0x100>
c00128c2:	66 90                	xchg   ax,ax
c00128c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00128c8:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c00128cb:	0f b6 c0             	movzx  eax,al
c00128ce:	83 e0 20             	and    eax,0x20
c00128d1:	0f 84 a1 00 00 00    	je     c0012978 <ethernet_input+0x124>
c00128d7:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00128dc:	f7 d8                	neg    eax
c00128de:	98                   	cwde   
c00128df:	83 ec 08             	sub    esp,0x8
c00128e2:	50                   	push   eax
c00128e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00128e7:	e8 cc 57 ff ff       	call   c00080b8 <pbuf_header>
c00128ec:	83 c4 10             	add    esp,0x10
c00128ef:	0f b6 c0             	movzx  eax,al
c00128f2:	85 c0                	test   eax,eax
c00128f4:	74 1a                	je     c0012910 <ethernet_input+0xbc>
c00128f6:	83 ec 08             	sub    esp,0x8
c00128f9:	68 48 07 03 c0       	push   0xc0030748
c00128fe:	68 26 f6 02 c0       	push   0xc002f626
c0012903:	e8 8c d0 00 00       	call   c001f994 <CPrintf>
c0012908:	83 c4 10             	add    esp,0x10
c001290b:	eb 73                	jmp    c0012980 <ethernet_input+0x12c>
c001290d:	8d 76 00             	lea    esi,[esi+0x0]
c0012910:	83 ec 08             	sub    esp,0x8
c0012913:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012917:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001291b:	e8 70 0c 00 00       	call   c0013590 <ip_input>
c0012920:	83 c4 10             	add    esp,0x10
c0012923:	eb 4f                	jmp    c0012974 <ethernet_input+0x120>
c0012925:	8d 76 00             	lea    esi,[esi+0x0]
c0012928:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001292c:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c001292f:	0f b6 c0             	movzx  eax,al
c0012932:	83 e0 20             	and    eax,0x20
c0012935:	74 45                	je     c001297c <ethernet_input+0x128>
c0012937:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001293b:	83 c0 23             	add    eax,0x23
c001293e:	83 ec 04             	sub    esp,0x4
c0012941:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012945:	50                   	push   eax
c0012946:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001294a:	e8 09 f5 ff ff       	call   c0011e58 <etharp_arp_input>
c001294f:	83 c4 10             	add    esp,0x10
c0012952:	eb 20                	jmp    c0012974 <ethernet_input+0x120>
c0012954:	66 a1 48 67 03 c0    	mov    ax,ds:0xc0036748
c001295a:	83 c0 01             	add    eax,0x1
c001295d:	66 a3 48 67 03 c0    	mov    ds:0xc0036748,ax
c0012963:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c0012969:	83 c0 01             	add    eax,0x1
c001296c:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c0012972:	eb 0c                	jmp    c0012980 <ethernet_input+0x12c>
c0012974:	b0 00                	mov    al,0x0
c0012976:	eb 1c                	jmp    c0012994 <ethernet_input+0x140>
c0012978:	90                   	nop
c0012979:	eb 05                	jmp    c0012980 <ethernet_input+0x12c>
c001297b:	90                   	nop
c001297c:	90                   	nop
c001297d:	8d 76 00             	lea    esi,[esi+0x0]
c0012980:	83 ec 0c             	sub    esp,0xc
c0012983:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012987:	e8 c8 58 ff ff       	call   c0008254 <pbuf_free>
c001298c:	83 c4 10             	add    esp,0x10
c001298f:	b0 00                	mov    al,0x0
c0012991:	8d 76 00             	lea    esi,[esi+0x0]
c0012994:	83 c4 1c             	add    esp,0x1c
c0012997:	c3                   	ret    

c0012998 <icmp_input>:
c0012998:	83 ec 2c             	sub    esp,0x2c
c001299b:	66 a1 82 67 03 c0    	mov    ax,ds:0xc0036782
c00129a1:	83 c0 01             	add    eax,0x1
c00129a4:	66 a3 82 67 03 c0    	mov    ds:0xc0036782,ax
c00129aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00129b1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00129b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00129b9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00129bc:	0f b7 c0             	movzx  eax,ax
c00129bf:	83 ec 0c             	sub    esp,0xc
c00129c2:	50                   	push   eax
c00129c3:	e8 20 e2 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00129c8:	83 c4 10             	add    esp,0x10
c00129cb:	0f b7 c0             	movzx  eax,ax
c00129ce:	c1 e8 08             	shr    eax,0x8
c00129d1:	83 e0 0f             	and    eax,0xf
c00129d4:	c1 e0 02             	shl    eax,0x2
c00129d7:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00129dc:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00129e1:	f7 d8                	neg    eax
c00129e3:	98                   	cwde   
c00129e4:	83 ec 08             	sub    esp,0x8
c00129e7:	50                   	push   eax
c00129e8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00129ec:	e8 c7 56 ff ff       	call   c00080b8 <pbuf_header>
c00129f1:	83 c4 10             	add    esp,0x10
c00129f4:	0f b6 c0             	movzx  eax,al
c00129f7:	85 c0                	test   eax,eax
c00129f9:	0f 85 a9 03 00 00    	jne    c0012da8 <icmp_input+0x410>
c00129ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a03:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012a06:	0f b7 c0             	movzx  eax,ax
c0012a09:	83 f8 03             	cmp    eax,0x3
c0012a0c:	0f 86 96 03 00 00    	jbe    c0012da8 <icmp_input+0x410>
c0012a12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012a19:	8a 00                	mov    al,BYTE PTR [eax]
c0012a1b:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012a1f:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0012a24:	85 c0                	test   eax,eax
c0012a26:	0f 84 64 03 00 00    	je     c0012d90 <icmp_input+0x3f8>
c0012a2c:	83 f8 08             	cmp    eax,0x8
c0012a2f:	0f 85 3b 03 00 00    	jne    c0012d70 <icmp_input+0x3d8>
c0012a35:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0012a3d:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0012a42:	25 f0 00 00 00       	and    eax,0xf0
c0012a47:	3d e0 00 00 00       	cmp    eax,0xe0
c0012a4c:	75 0a                	jne    c0012a58 <icmp_input+0xc0>
c0012a4e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012a56:	66 90                	xchg   ax,ax
c0012a58:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0012a5d:	83 ec 08             	sub    esp,0x8
c0012a60:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a64:	50                   	push   eax
c0012a65:	e8 de 12 00 00       	call   c0013d48 <ip4_addr_isbroadcast>
c0012a6a:	83 c4 10             	add    esp,0x10
c0012a6d:	0f b6 c0             	movzx  eax,al
c0012a70:	85 c0                	test   eax,eax
c0012a72:	74 08                	je     c0012a7c <icmp_input+0xe4>
c0012a74:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012a7c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012a81:	75 25                	jne    c0012aa8 <icmp_input+0x110>
c0012a83:	66 a1 94 67 03 c0    	mov    ax,ds:0xc0036794
c0012a89:	83 c0 01             	add    eax,0x1
c0012a8c:	66 a3 94 67 03 c0    	mov    ds:0xc0036794,ax
c0012a92:	83 ec 0c             	sub    esp,0xc
c0012a95:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a99:	e8 b6 57 ff ff       	call   c0008254 <pbuf_free>
c0012a9e:	83 c4 10             	add    esp,0x10
c0012aa1:	e9 4e 03 00 00       	jmp    c0012df4 <icmp_input+0x45c>
c0012aa6:	66 90                	xchg   ax,ax
c0012aa8:	90                   	nop
c0012aa9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012aad:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012ab0:	0f b7 c0             	movzx  eax,ax
c0012ab3:	83 f8 07             	cmp    eax,0x7
c0012ab6:	0f 86 f0 02 00 00    	jbe    c0012dac <icmp_input+0x414>
c0012abc:	83 ec 0c             	sub    esp,0xc
c0012abf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012ac3:	e8 50 09 00 00       	call   c0013418 <inet_chksum_pbuf>
c0012ac8:	83 c4 10             	add    esp,0x10
c0012acb:	0f b7 c0             	movzx  eax,ax
c0012ace:	85 c0                	test   eax,eax
c0012ad0:	74 26                	je     c0012af8 <icmp_input+0x160>
c0012ad2:	83 ec 0c             	sub    esp,0xc
c0012ad5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012ad9:	e8 76 57 ff ff       	call   c0008254 <pbuf_free>
c0012ade:	83 c4 10             	add    esp,0x10
c0012ae1:	66 a1 88 67 03 c0    	mov    ax,ds:0xc0036788
c0012ae7:	83 c0 01             	add    eax,0x1
c0012aea:	66 a3 88 67 03 c0    	mov    ds:0xc0036788,ax
c0012af0:	e9 ff 02 00 00       	jmp    c0012df4 <icmp_input+0x45c>
c0012af5:	8d 76 00             	lea    esi,[esi+0x0]
c0012af8:	83 ec 08             	sub    esp,0x8
c0012afb:	6a 22                	push   0x22
c0012afd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012b01:	e8 b2 55 ff ff       	call   c00080b8 <pbuf_header>
c0012b06:	83 c4 10             	add    esp,0x10
c0012b09:	0f b6 c0             	movzx  eax,al
c0012b0c:	85 c0                	test   eax,eax
c0012b0e:	0f 84 24 01 00 00    	je     c0012c38 <icmp_input+0x2a0>
c0012b14:	0f bf 44 24 16       	movsx  eax,WORD PTR [esp+0x16]
c0012b19:	83 ec 08             	sub    esp,0x8
c0012b1c:	50                   	push   eax
c0012b1d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012b21:	e8 92 55 ff ff       	call   c00080b8 <pbuf_header>
c0012b26:	83 c4 10             	add    esp,0x10
c0012b29:	0f b6 c0             	movzx  eax,al
c0012b2c:	85 c0                	test   eax,eax
c0012b2e:	74 1c                	je     c0012b4c <icmp_input+0x1b4>
c0012b30:	83 ec 08             	sub    esp,0x8
c0012b33:	68 cc 07 03 c0       	push   0xc00307cc
c0012b38:	68 26 f6 02 c0       	push   0xc002f626
c0012b3d:	e8 52 ce 00 00       	call   c001f994 <CPrintf>
c0012b42:	83 c4 10             	add    esp,0x10
c0012b45:	e9 8a 02 00 00       	jmp    c0012dd4 <icmp_input+0x43c>
c0012b4a:	66 90                	xchg   ax,ax
c0012b4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b50:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012b53:	0f b7 c0             	movzx  eax,ax
c0012b56:	83 ec 04             	sub    esp,0x4
c0012b59:	6a 00                	push   0x0
c0012b5b:	50                   	push   eax
c0012b5c:	6a 02                	push   0x2
c0012b5e:	e8 c9 58 ff ff       	call   c000842c <pbuf_alloc>
c0012b63:	83 c4 10             	add    esp,0x10
c0012b66:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012b6a:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0012b6f:	0f 84 5b 02 00 00    	je     c0012dd0 <icmp_input+0x438>
c0012b75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b79:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012b7d:	0f b7 c0             	movzx  eax,ax
c0012b80:	0f bf 54 24 16       	movsx  edx,WORD PTR [esp+0x16]
c0012b85:	83 c2 08             	add    edx,0x8
c0012b88:	39 d0                	cmp    eax,edx
c0012b8a:	73 18                	jae    c0012ba4 <icmp_input+0x20c>
c0012b8c:	83 ec 08             	sub    esp,0x8
c0012b8f:	68 00 08 03 c0       	push   0xc0030800
c0012b94:	68 26 f6 02 c0       	push   0xc002f626
c0012b99:	e8 f6 cd 00 00       	call   c001f994 <CPrintf>
c0012b9e:	83 c4 10             	add    esp,0x10
c0012ba1:	8d 76 00             	lea    esi,[esi+0x0]
c0012ba4:	83 ec 08             	sub    esp,0x8
c0012ba7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012bab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012baf:	e8 d8 60 ff ff       	call   c0008c8c <pbuf_copy>
c0012bb4:	83 c4 10             	add    esp,0x10
c0012bb7:	0f be c0             	movsx  eax,al
c0012bba:	85 c0                	test   eax,eax
c0012bbc:	74 1a                	je     c0012bd8 <icmp_input+0x240>
c0012bbe:	83 ec 08             	sub    esp,0x8
c0012bc1:	68 38 08 03 c0       	push   0xc0030838
c0012bc6:	68 26 f6 02 c0       	push   0xc002f626
c0012bcb:	e8 c4 cd 00 00       	call   c001f994 <CPrintf>
c0012bd0:	83 c4 10             	add    esp,0x10
c0012bd3:	e9 fc 01 00 00       	jmp    c0012dd4 <icmp_input+0x43c>
c0012bd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bdc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012bdf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012be3:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012be8:	f7 d8                	neg    eax
c0012bea:	98                   	cwde   
c0012beb:	83 ec 08             	sub    esp,0x8
c0012bee:	50                   	push   eax
c0012bef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bf3:	e8 c0 54 ff ff       	call   c00080b8 <pbuf_header>
c0012bf8:	83 c4 10             	add    esp,0x10
c0012bfb:	0f b6 c0             	movzx  eax,al
c0012bfe:	85 c0                	test   eax,eax
c0012c00:	74 1a                	je     c0012c1c <icmp_input+0x284>
c0012c02:	83 ec 08             	sub    esp,0x8
c0012c05:	68 60 08 03 c0       	push   0xc0030860
c0012c0a:	68 26 f6 02 c0       	push   0xc002f626
c0012c0f:	e8 80 cd 00 00       	call   c001f994 <CPrintf>
c0012c14:	83 c4 10             	add    esp,0x10
c0012c17:	e9 b8 01 00 00       	jmp    c0012dd4 <icmp_input+0x43c>
c0012c1c:	83 ec 0c             	sub    esp,0xc
c0012c1f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012c23:	e8 2c 56 ff ff       	call   c0008254 <pbuf_free>
c0012c28:	83 c4 10             	add    esp,0x10
c0012c2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c2f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012c33:	eb 37                	jmp    c0012c6c <icmp_input+0x2d4>
c0012c35:	8d 76 00             	lea    esi,[esi+0x0]
c0012c38:	83 ec 08             	sub    esp,0x8
c0012c3b:	6a de                	push   0xffffffde
c0012c3d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012c41:	e8 72 54 ff ff       	call   c00080b8 <pbuf_header>
c0012c46:	83 c4 10             	add    esp,0x10
c0012c49:	0f b6 c0             	movzx  eax,al
c0012c4c:	85 c0                	test   eax,eax
c0012c4e:	74 1c                	je     c0012c6c <icmp_input+0x2d4>
c0012c50:	83 ec 08             	sub    esp,0x8
c0012c53:	68 60 08 03 c0       	push   0xc0030860
c0012c58:	68 26 f6 02 c0       	push   0xc002f626
c0012c5d:	e8 32 cd 00 00       	call   c001f994 <CPrintf>
c0012c62:	83 c4 10             	add    esp,0x10
c0012c65:	e9 6a 01 00 00       	jmp    c0012dd4 <icmp_input+0x43c>
c0012c6a:	66 90                	xchg   ax,ax
c0012c6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012c77:	8b 15 98 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036898
c0012c7d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012c81:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012c84:	8b 15 90 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036890
c0012c8a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012c8e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0012c91:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012c95:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012c98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012c9c:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012ca0:	0f b7 c0             	movzx  eax,ax
c0012ca3:	3d f6 ff 00 00       	cmp    eax,0xfff6
c0012ca8:	76 16                	jbe    c0012cc0 <icmp_input+0x328>
c0012caa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012cae:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012cb2:	83 c0 09             	add    eax,0x9
c0012cb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012cb9:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0012cbd:	eb 15                	jmp    c0012cd4 <icmp_input+0x33c>
c0012cbf:	90                   	nop
c0012cc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012cc4:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012cc8:	83 c0 08             	add    eax,0x8
c0012ccb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012ccf:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0012cd3:	90                   	nop
c0012cd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012cd8:	c6 40 08 ff          	mov    BYTE PTR [eax+0x8],0xff
c0012cdc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012ce0:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c0012ce6:	83 ec 08             	sub    esp,0x8
c0012ce9:	6a 14                	push   0x14
c0012ceb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012cef:	e8 fc 06 00 00       	call   c00133f0 <inet_chksum>
c0012cf4:	83 c4 10             	add    esp,0x10
c0012cf7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012cfb:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0012cff:	66 a1 80 67 03 c0    	mov    ax,ds:0xc0036780
c0012d05:	83 c0 01             	add    eax,0x1
c0012d08:	66 a3 80 67 03 c0    	mov    ds:0xc0036780,ax
c0012d0e:	0f bf 44 24 16       	movsx  eax,WORD PTR [esp+0x16]
c0012d13:	83 ec 08             	sub    esp,0x8
c0012d16:	50                   	push   eax
c0012d17:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012d1b:	e8 98 53 ff ff       	call   c00080b8 <pbuf_header>
c0012d20:	83 c4 10             	add    esp,0x10
c0012d23:	0f b6 c0             	movzx  eax,al
c0012d26:	85 c0                	test   eax,eax
c0012d28:	74 1a                	je     c0012d44 <icmp_input+0x3ac>
c0012d2a:	83 ec 08             	sub    esp,0x8
c0012d2d:	68 48 07 03 c0       	push   0xc0030748
c0012d32:	68 26 f6 02 c0       	push   0xc002f626
c0012d37:	e8 58 cc 00 00       	call   c001f994 <CPrintf>
c0012d3c:	83 c4 10             	add    esp,0x10
c0012d3f:	eb 53                	jmp    c0012d94 <icmp_input+0x3fc>
c0012d41:	8d 76 00             	lea    esi,[esi+0x0]
c0012d44:	83 ec 04             	sub    esp,0x4
c0012d47:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012d4b:	6a 01                	push   0x1
c0012d4d:	6a 00                	push   0x0
c0012d4f:	68 ff 00 00 00       	push   0xff
c0012d54:	6a 00                	push   0x0
c0012d56:	68 98 68 03 c0       	push   0xc0036898
c0012d5b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012d5f:	e8 70 0c 00 00       	call   c00139d4 <ip_output_if>
c0012d64:	83 c4 20             	add    esp,0x20
c0012d67:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012d6b:	eb 27                	jmp    c0012d94 <icmp_input+0x3fc>
c0012d6d:	8d 76 00             	lea    esi,[esi+0x0]
c0012d70:	66 a1 90 67 03 c0    	mov    ax,ds:0xc0036790
c0012d76:	83 c0 01             	add    eax,0x1
c0012d79:	66 a3 90 67 03 c0    	mov    ds:0xc0036790,ax
c0012d7f:	66 a1 86 67 03 c0    	mov    ax,ds:0xc0036786
c0012d85:	83 c0 01             	add    eax,0x1
c0012d88:	66 a3 86 67 03 c0    	mov    ds:0xc0036786,ax
c0012d8e:	eb 04                	jmp    c0012d94 <icmp_input+0x3fc>
c0012d90:	90                   	nop
c0012d91:	8d 76 00             	lea    esi,[esi+0x0]
c0012d94:	83 ec 0c             	sub    esp,0xc
c0012d97:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012d9b:	e8 b4 54 ff ff       	call   c0008254 <pbuf_free>
c0012da0:	83 c4 10             	add    esp,0x10
c0012da3:	eb 4f                	jmp    c0012df4 <icmp_input+0x45c>
c0012da5:	8d 76 00             	lea    esi,[esi+0x0]
c0012da8:	90                   	nop
c0012da9:	eb 05                	jmp    c0012db0 <icmp_input+0x418>
c0012dab:	90                   	nop
c0012dac:	90                   	nop
c0012dad:	8d 76 00             	lea    esi,[esi+0x0]
c0012db0:	83 ec 0c             	sub    esp,0xc
c0012db3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012db7:	e8 98 54 ff ff       	call   c0008254 <pbuf_free>
c0012dbc:	83 c4 10             	add    esp,0x10
c0012dbf:	66 a1 8a 67 03 c0    	mov    ax,ds:0xc003678a
c0012dc5:	83 c0 01             	add    eax,0x1
c0012dc8:	66 a3 8a 67 03 c0    	mov    ds:0xc003678a,ax
c0012dce:	eb 24                	jmp    c0012df4 <icmp_input+0x45c>
c0012dd0:	90                   	nop
c0012dd1:	8d 76 00             	lea    esi,[esi+0x0]
c0012dd4:	83 ec 0c             	sub    esp,0xc
c0012dd7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012ddb:	e8 74 54 ff ff       	call   c0008254 <pbuf_free>
c0012de0:	83 c4 10             	add    esp,0x10
c0012de3:	66 a1 94 67 03 c0    	mov    ax,ds:0xc0036794
c0012de9:	83 c0 01             	add    eax,0x1
c0012dec:	66 a3 94 67 03 c0    	mov    ds:0xc0036794,ax
c0012df2:	90                   	nop
c0012df3:	90                   	nop
c0012df4:	83 c4 2c             	add    esp,0x2c
c0012df7:	c3                   	ret    

c0012df8 <icmp_send_response>:
c0012df8:	83 ec 2c             	sub    esp,0x2c
c0012dfb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012dff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012e03:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0012e07:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0012e0b:	83 ec 04             	sub    esp,0x4
c0012e0e:	6a 00                	push   0x0
c0012e10:	6a 24                	push   0x24
c0012e12:	6a 01                	push   0x1
c0012e14:	e8 13 56 ff ff       	call   c000842c <pbuf_alloc>
c0012e19:	83 c4 10             	add    esp,0x10
c0012e1c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012e20:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0012e25:	0f 84 fd 00 00 00    	je     c0012f28 <icmp_send_response+0x130>
c0012e2b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012e2f:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012e33:	0f b7 c0             	movzx  eax,ax
c0012e36:	83 f8 23             	cmp    eax,0x23
c0012e39:	77 15                	ja     c0012e50 <icmp_send_response+0x58>
c0012e3b:	83 ec 08             	sub    esp,0x8
c0012e3e:	68 94 08 03 c0       	push   0xc0030894
c0012e43:	68 26 f6 02 c0       	push   0xc002f626
c0012e48:	e8 47 cb 00 00       	call   c001f994 <CPrintf>
c0012e4d:	83 c4 10             	add    esp,0x10
c0012e50:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012e54:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e57:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012e5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012e5f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e62:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012e66:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012e6a:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012e6e:	88 10                	mov    BYTE PTR [eax],dl
c0012e70:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012e74:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c0012e78:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012e7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012e7f:	66 c7 40 04 00 00    	mov    WORD PTR [eax+0x4],0x0
c0012e85:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012e89:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0012e8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012e93:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e96:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012e9a:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0012e9d:	83 c2 08             	add    edx,0x8
c0012ea0:	83 ec 04             	sub    esp,0x4
c0012ea3:	6a 1c                	push   0x1c
c0012ea5:	50                   	push   eax
c0012ea6:	52                   	push   edx
c0012ea7:	e8 ce d4 fe ff       	call   c000037a <memcpy>
c0012eac:	83 c4 10             	add    esp,0x10
c0012eaf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012eb3:	66 c7 40 02 00 00    	mov    WORD PTR [eax+0x2],0x0
c0012eb9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012ebd:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012ec1:	0f b7 c0             	movzx  eax,ax
c0012ec4:	83 ec 08             	sub    esp,0x8
c0012ec7:	50                   	push   eax
c0012ec8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012ecc:	e8 1f 05 00 00       	call   c00133f0 <inet_chksum>
c0012ed1:	83 c4 10             	add    esp,0x10
c0012ed4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012ed8:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0012edc:	66 a1 80 67 03 c0    	mov    ax,ds:0xc0036780
c0012ee2:	83 c0 01             	add    eax,0x1
c0012ee5:	66 a3 80 67 03 c0    	mov    ds:0xc0036780,ax
c0012eeb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012eef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012ef6:	83 ec 08             	sub    esp,0x8
c0012ef9:	6a 01                	push   0x1
c0012efb:	6a 00                	push   0x0
c0012efd:	68 ff 00 00 00       	push   0xff
c0012f02:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012f06:	50                   	push   eax
c0012f07:	6a 00                	push   0x0
c0012f09:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012f0d:	e8 92 0d 00 00       	call   c0013ca4 <ip_output>
c0012f12:	83 c4 20             	add    esp,0x20
c0012f15:	83 ec 0c             	sub    esp,0xc
c0012f18:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012f1c:	e8 33 53 ff ff       	call   c0008254 <pbuf_free>
c0012f21:	83 c4 10             	add    esp,0x10
c0012f24:	eb 06                	jmp    c0012f2c <icmp_send_response+0x134>
c0012f26:	66 90                	xchg   ax,ax
c0012f28:	90                   	nop
c0012f29:	8d 76 00             	lea    esi,[esi+0x0]
c0012f2c:	83 c4 2c             	add    esp,0x2c
c0012f2f:	c3                   	ret    

c0012f30 <icmp_dest_unreach>:
c0012f30:	83 ec 0c             	sub    esp,0xc
c0012f33:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f37:	0f b6 c0             	movzx  eax,al
c0012f3a:	83 ec 04             	sub    esp,0x4
c0012f3d:	50                   	push   eax
c0012f3e:	6a 03                	push   0x3
c0012f40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f44:	e8 af fe ff ff       	call   c0012df8 <icmp_send_response>
c0012f49:	83 c4 10             	add    esp,0x10
c0012f4c:	90                   	nop
c0012f4d:	83 c4 0c             	add    esp,0xc
c0012f50:	c3                   	ret    
c0012f51:	8d 76 00             	lea    esi,[esi+0x0]

c0012f54 <icmp_time_exceeded>:
c0012f54:	83 ec 0c             	sub    esp,0xc
c0012f57:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f5b:	0f b6 c0             	movzx  eax,al
c0012f5e:	83 ec 04             	sub    esp,0x4
c0012f61:	50                   	push   eax
c0012f62:	6a 0b                	push   0xb
c0012f64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f68:	e8 8b fe ff ff       	call   c0012df8 <icmp_send_response>
c0012f6d:	83 c4 10             	add    esp,0x10
c0012f70:	90                   	nop
c0012f71:	83 c4 0c             	add    esp,0xc
c0012f74:	c3                   	ret    
c0012f75:	66 90                	xchg   ax,ax
c0012f77:	90                   	nop

c0012f78 <lwip_standard_chksum>:
c0012f78:	83 ec 2c             	sub    esp,0x2c
c0012f7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f7f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012f83:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0012f8a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012f92:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f96:	83 e0 01             	and    eax,0x1
c0012f99:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012f9d:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0012fa2:	74 24                	je     c0012fc8 <lwip_standard_chksum+0x50>
c0012fa4:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0012fa9:	7e 1d                	jle    c0012fc8 <lwip_standard_chksum+0x50>
c0012fab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012faf:	8d 42 01             	lea    eax,[edx+0x1]
c0012fb2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012fb6:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0012fba:	83 c0 01             	add    eax,0x1
c0012fbd:	8a 12                	mov    dl,BYTE PTR [edx]
c0012fbf:	88 10                	mov    BYTE PTR [eax],dl
c0012fc1:	83 6c 24 34 01       	sub    DWORD PTR [esp+0x34],0x1
c0012fc6:	66 90                	xchg   ax,ax
c0012fc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012fcc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012fd0:	eb 1e                	jmp    c0012ff0 <lwip_standard_chksum+0x78>
c0012fd2:	66 90                	xchg   ax,ax
c0012fd4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012fd8:	8d 50 02             	lea    edx,[eax+0x2]
c0012fdb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0012fdf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0012fe2:	0f b7 c0             	movzx  eax,ax
c0012fe5:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0012fe9:	83 6c 24 34 02       	sub    DWORD PTR [esp+0x34],0x2
c0012fee:	66 90                	xchg   ax,ax
c0012ff0:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c0012ff5:	7f dd                	jg     c0012fd4 <lwip_standard_chksum+0x5c>
c0012ff7:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0012ffc:	7e 0e                	jle    c001300c <lwip_standard_chksum+0x94>
c0012ffe:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0013002:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013006:	8a 12                	mov    dl,BYTE PTR [edx]
c0013008:	88 10                	mov    BYTE PTR [eax],dl
c001300a:	66 90                	xchg   ax,ax
c001300c:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0013011:	0f b7 c0             	movzx  eax,ax
c0013014:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0013018:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001301c:	c1 e8 10             	shr    eax,0x10
c001301f:	89 c2                	mov    edx,eax
c0013021:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013025:	0f b7 c0             	movzx  eax,ax
c0013028:	01 d0                	add    eax,edx
c001302a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001302e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013032:	c1 e8 10             	shr    eax,0x10
c0013035:	89 c2                	mov    edx,eax
c0013037:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001303b:	0f b7 c0             	movzx  eax,ax
c001303e:	01 d0                	add    eax,edx
c0013040:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013044:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0013049:	74 1d                	je     c0013068 <lwip_standard_chksum+0xf0>
c001304b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001304f:	0f b7 c0             	movzx  eax,ax
c0013052:	83 ec 0c             	sub    esp,0xc
c0013055:	50                   	push   eax
c0013056:	e8 8d db fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001305b:	83 c4 10             	add    esp,0x10
c001305e:	0f b7 c0             	movzx  eax,ax
c0013061:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013065:	8d 76 00             	lea    esi,[esi+0x0]
c0013068:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001306c:	83 c4 2c             	add    esp,0x2c
c001306f:	c3                   	ret    

c0013070 <inet_chksum_pseudo>:
c0013070:	83 ec 2c             	sub    esp,0x2c
c0013073:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013077:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001307b:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001307f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0013084:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001308c:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013091:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013095:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013099:	e9 8a 00 00 00       	jmp    c0013128 <inet_chksum_pseudo+0xb8>
c001309e:	66 90                	xchg   ax,ax
c00130a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00130a4:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00130a8:	0f b7 d0             	movzx  edx,ax
c00130ab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00130af:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00130b2:	83 ec 08             	sub    esp,0x8
c00130b5:	52                   	push   edx
c00130b6:	50                   	push   eax
c00130b7:	e8 bc fe ff ff       	call   c0012f78 <lwip_standard_chksum>
c00130bc:	83 c4 10             	add    esp,0x10
c00130bf:	0f b7 c0             	movzx  eax,ax
c00130c2:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00130c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00130ca:	c1 e8 10             	shr    eax,0x10
c00130cd:	89 c2                	mov    edx,eax
c00130cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00130d3:	0f b7 c0             	movzx  eax,ax
c00130d6:	01 d0                	add    eax,edx
c00130d8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00130dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00130e0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00130e4:	83 e0 01             	and    eax,0x1
c00130e7:	0f b7 c0             	movzx  eax,ax
c00130ea:	85 c0                	test   eax,eax
c00130ec:	74 2e                	je     c001311c <inet_chksum_pseudo+0xac>
c00130ee:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00130f2:	ba 01 00 00 00       	mov    edx,0x1
c00130f7:	29 c2                	sub    edx,eax
c00130f9:	89 d0                	mov    eax,edx
c00130fb:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00130ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013103:	0f b7 c0             	movzx  eax,ax
c0013106:	83 ec 0c             	sub    esp,0xc
c0013109:	50                   	push   eax
c001310a:	e8 d9 da fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001310f:	83 c4 10             	add    esp,0x10
c0013112:	0f b7 c0             	movzx  eax,ax
c0013115:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013119:	8d 76 00             	lea    esi,[esi+0x0]
c001311c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013120:	8b 00                	mov    eax,DWORD PTR [eax]
c0013122:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013126:	66 90                	xchg   ax,ax
c0013128:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001312d:	0f 85 6d ff ff ff    	jne    c00130a0 <inet_chksum_pseudo+0x30>
c0013133:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0013138:	85 c0                	test   eax,eax
c001313a:	74 1c                	je     c0013158 <inet_chksum_pseudo+0xe8>
c001313c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013140:	0f b7 c0             	movzx  eax,ax
c0013143:	83 ec 0c             	sub    esp,0xc
c0013146:	50                   	push   eax
c0013147:	e8 9c da fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001314c:	83 c4 10             	add    esp,0x10
c001314f:	0f b7 c0             	movzx  eax,ax
c0013152:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013156:	66 90                	xchg   ax,ax
c0013158:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001315c:	8b 00                	mov    eax,DWORD PTR [eax]
c001315e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013162:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013166:	0f b7 c0             	movzx  eax,ax
c0013169:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c001316d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013171:	c1 e8 10             	shr    eax,0x10
c0013174:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013178:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001317c:	8b 00                	mov    eax,DWORD PTR [eax]
c001317e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013182:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013186:	0f b7 c0             	movzx  eax,ax
c0013189:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c001318d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013191:	c1 e8 10             	shr    eax,0x10
c0013194:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013198:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001319d:	83 ec 0c             	sub    esp,0xc
c00131a0:	50                   	push   eax
c00131a1:	e8 42 da fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00131a6:	83 c4 10             	add    esp,0x10
c00131a9:	0f b7 c0             	movzx  eax,ax
c00131ac:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00131b0:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00131b5:	83 ec 0c             	sub    esp,0xc
c00131b8:	50                   	push   eax
c00131b9:	e8 2a da fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00131be:	83 c4 10             	add    esp,0x10
c00131c1:	0f b7 c0             	movzx  eax,ax
c00131c4:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00131c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131cc:	c1 e8 10             	shr    eax,0x10
c00131cf:	89 c2                	mov    edx,eax
c00131d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131d5:	0f b7 c0             	movzx  eax,ax
c00131d8:	01 d0                	add    eax,edx
c00131da:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00131de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131e2:	c1 e8 10             	shr    eax,0x10
c00131e5:	89 c2                	mov    edx,eax
c00131e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131eb:	0f b7 c0             	movzx  eax,ax
c00131ee:	01 d0                	add    eax,edx
c00131f0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00131f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131f8:	f7 d0                	not    eax
c00131fa:	83 c4 2c             	add    esp,0x2c
c00131fd:	c3                   	ret    
c00131fe:	66 90                	xchg   ax,ax

c0013200 <inet_chksum_pseudo_partial>:
c0013200:	83 ec 2c             	sub    esp,0x2c
c0013203:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0013207:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001320b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001320f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013213:	66 89 54 24 08       	mov    WORD PTR [esp+0x8],dx
c0013218:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c001321d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013225:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001322a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001322e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013232:	e9 d9 00 00 00       	jmp    c0013310 <inet_chksum_pseudo_partial+0x110>
c0013237:	90                   	nop
c0013238:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001323c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013240:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c0013245:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c001324a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001324f:	39 c2                	cmp    edx,eax
c0013251:	76 09                	jbe    c001325c <inet_chksum_pseudo_partial+0x5c>
c0013253:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013257:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001325c:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c0013261:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013265:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013268:	83 ec 08             	sub    esp,0x8
c001326b:	52                   	push   edx
c001326c:	50                   	push   eax
c001326d:	e8 06 fd ff ff       	call   c0012f78 <lwip_standard_chksum>
c0013272:	83 c4 10             	add    esp,0x10
c0013275:	0f b7 c0             	movzx  eax,ax
c0013278:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c001327c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013280:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013284:	89 d1                	mov    ecx,edx
c0013286:	29 c1                	sub    ecx,eax
c0013288:	89 c8                	mov    eax,ecx
c001328a:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c001328f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013294:	3d fe 7f 00 00       	cmp    eax,0x7ffe
c0013299:	76 15                	jbe    c00132b0 <inet_chksum_pseudo_partial+0xb0>
c001329b:	83 ec 08             	sub    esp,0x8
c001329e:	68 c0 08 03 c0       	push   0xc00308c0
c00132a3:	68 26 f6 02 c0       	push   0xc002f626
c00132a8:	e8 e7 c6 00 00       	call   c001f994 <CPrintf>
c00132ad:	83 c4 10             	add    esp,0x10
c00132b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132b4:	c1 e8 10             	shr    eax,0x10
c00132b7:	89 c2                	mov    edx,eax
c00132b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132bd:	0f b7 c0             	movzx  eax,ax
c00132c0:	01 d0                	add    eax,edx
c00132c2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00132c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00132ca:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00132ce:	83 e0 01             	and    eax,0x1
c00132d1:	0f b7 c0             	movzx  eax,ax
c00132d4:	85 c0                	test   eax,eax
c00132d6:	74 2c                	je     c0013304 <inet_chksum_pseudo_partial+0x104>
c00132d8:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00132dc:	ba 01 00 00 00       	mov    edx,0x1
c00132e1:	29 c2                	sub    edx,eax
c00132e3:	89 d0                	mov    eax,edx
c00132e5:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00132e9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132ed:	0f b7 c0             	movzx  eax,ax
c00132f0:	83 ec 0c             	sub    esp,0xc
c00132f3:	50                   	push   eax
c00132f4:	e8 ef d8 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00132f9:	83 c4 10             	add    esp,0x10
c00132fc:	0f b7 c0             	movzx  eax,ax
c00132ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013303:	90                   	nop
c0013304:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013308:	8b 00                	mov    eax,DWORD PTR [eax]
c001330a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001330e:	66 90                	xchg   ax,ax
c0013310:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0013315:	74 0d                	je     c0013324 <inet_chksum_pseudo_partial+0x124>
c0013317:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001331c:	85 c0                	test   eax,eax
c001331e:	0f 85 14 ff ff ff    	jne    c0013238 <inet_chksum_pseudo_partial+0x38>
c0013324:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0013329:	85 c0                	test   eax,eax
c001332b:	74 1b                	je     c0013348 <inet_chksum_pseudo_partial+0x148>
c001332d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013331:	0f b7 c0             	movzx  eax,ax
c0013334:	83 ec 0c             	sub    esp,0xc
c0013337:	50                   	push   eax
c0013338:	e8 ab d8 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001333d:	83 c4 10             	add    esp,0x10
c0013340:	0f b7 c0             	movzx  eax,ax
c0013343:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013347:	90                   	nop
c0013348:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001334c:	8b 00                	mov    eax,DWORD PTR [eax]
c001334e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013352:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013356:	0f b7 c0             	movzx  eax,ax
c0013359:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c001335d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013361:	c1 e8 10             	shr    eax,0x10
c0013364:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013368:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001336c:	8b 00                	mov    eax,DWORD PTR [eax]
c001336e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013376:	0f b7 c0             	movzx  eax,ax
c0013379:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c001337d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013381:	c1 e8 10             	shr    eax,0x10
c0013384:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013388:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001338d:	83 ec 0c             	sub    esp,0xc
c0013390:	50                   	push   eax
c0013391:	e8 52 d8 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013396:	83 c4 10             	add    esp,0x10
c0013399:	0f b7 c0             	movzx  eax,ax
c001339c:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00133a0:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00133a5:	83 ec 0c             	sub    esp,0xc
c00133a8:	50                   	push   eax
c00133a9:	e8 3a d8 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00133ae:	83 c4 10             	add    esp,0x10
c00133b1:	0f b7 c0             	movzx  eax,ax
c00133b4:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00133b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133bc:	c1 e8 10             	shr    eax,0x10
c00133bf:	89 c2                	mov    edx,eax
c00133c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133c5:	0f b7 c0             	movzx  eax,ax
c00133c8:	01 d0                	add    eax,edx
c00133ca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00133ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133d2:	c1 e8 10             	shr    eax,0x10
c00133d5:	89 c2                	mov    edx,eax
c00133d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133db:	0f b7 c0             	movzx  eax,ax
c00133de:	01 d0                	add    eax,edx
c00133e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00133e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133e8:	f7 d0                	not    eax
c00133ea:	83 c4 2c             	add    esp,0x2c
c00133ed:	c3                   	ret    
c00133ee:	66 90                	xchg   ax,ax

c00133f0 <inet_chksum>:
c00133f0:	83 ec 1c             	sub    esp,0x1c
c00133f3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00133f7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00133fc:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0013401:	83 ec 08             	sub    esp,0x8
c0013404:	50                   	push   eax
c0013405:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013409:	e8 6a fb ff ff       	call   c0012f78 <lwip_standard_chksum>
c001340e:	83 c4 10             	add    esp,0x10
c0013411:	f7 d0                	not    eax
c0013413:	83 c4 1c             	add    esp,0x1c
c0013416:	c3                   	ret    
c0013417:	90                   	nop

c0013418 <inet_chksum_pbuf>:
c0013418:	83 ec 1c             	sub    esp,0x1c
c001341b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013423:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
c0013428:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001342c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013430:	e9 8b 00 00 00       	jmp    c00134c0 <inet_chksum_pbuf+0xa8>
c0013435:	8d 76 00             	lea    esi,[esi+0x0]
c0013438:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001343c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013440:	0f b7 d0             	movzx  edx,ax
c0013443:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013447:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001344a:	83 ec 08             	sub    esp,0x8
c001344d:	52                   	push   edx
c001344e:	50                   	push   eax
c001344f:	e8 24 fb ff ff       	call   c0012f78 <lwip_standard_chksum>
c0013454:	83 c4 10             	add    esp,0x10
c0013457:	0f b7 c0             	movzx  eax,ax
c001345a:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001345e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013462:	c1 e8 10             	shr    eax,0x10
c0013465:	89 c2                	mov    edx,eax
c0013467:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001346b:	0f b7 c0             	movzx  eax,ax
c001346e:	01 d0                	add    eax,edx
c0013470:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013474:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013478:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c001347c:	83 e0 01             	and    eax,0x1
c001347f:	0f b7 c0             	movzx  eax,ax
c0013482:	85 c0                	test   eax,eax
c0013484:	74 2e                	je     c00134b4 <inet_chksum_pbuf+0x9c>
c0013486:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001348a:	ba 01 00 00 00       	mov    edx,0x1
c001348f:	29 c2                	sub    edx,eax
c0013491:	89 d0                	mov    eax,edx
c0013493:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013497:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001349b:	0f b7 c0             	movzx  eax,ax
c001349e:	83 ec 0c             	sub    esp,0xc
c00134a1:	50                   	push   eax
c00134a2:	e8 41 d7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00134a7:	83 c4 10             	add    esp,0x10
c00134aa:	0f b7 c0             	movzx  eax,ax
c00134ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00134b1:	8d 76 00             	lea    esi,[esi+0x0]
c00134b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00134b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00134ba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00134be:	66 90                	xchg   ax,ax
c00134c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00134c5:	0f 85 6d ff ff ff    	jne    c0013438 <inet_chksum_pbuf+0x20>
c00134cb:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c00134d0:	85 c0                	test   eax,eax
c00134d2:	74 1c                	je     c00134f0 <inet_chksum_pbuf+0xd8>
c00134d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00134d8:	0f b7 c0             	movzx  eax,ax
c00134db:	83 ec 0c             	sub    esp,0xc
c00134de:	50                   	push   eax
c00134df:	e8 04 d7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00134e4:	83 c4 10             	add    esp,0x10
c00134e7:	0f b7 c0             	movzx  eax,ax
c00134ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00134ee:	66 90                	xchg   ax,ax
c00134f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00134f4:	f7 d0                	not    eax
c00134f6:	83 c4 1c             	add    esp,0x1c
c00134f9:	c3                   	ret    
c00134fa:	66 90                	xchg   ax,ax

c00134fc <ip_route>:
c00134fc:	83 ec 10             	sub    esp,0x10
c00134ff:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0013504:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013508:	eb 42                	jmp    c001354c <ip_route+0x50>
c001350a:	66 90                	xchg   ax,ax
c001350c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013510:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0013513:	83 e0 01             	and    eax,0x1
c0013516:	0f b6 c0             	movzx  eax,al
c0013519:	85 c0                	test   eax,eax
c001351b:	74 23                	je     c0013540 <ip_route+0x44>
c001351d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013521:	8b 10                	mov    edx,DWORD PTR [eax]
c0013523:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013527:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001352a:	31 c2                	xor    edx,eax
c001352c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013530:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013533:	21 d0                	and    eax,edx
c0013535:	75 09                	jne    c0013540 <ip_route+0x44>
c0013537:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001353b:	eb 4f                	jmp    c001358c <ip_route+0x90>
c001353d:	8d 76 00             	lea    esi,[esi+0x0]
c0013540:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013544:	8b 00                	mov    eax,DWORD PTR [eax]
c0013546:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001354a:	66 90                	xchg   ax,ax
c001354c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013551:	75 b9                	jne    c001350c <ip_route+0x10>
c0013553:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c0013558:	85 c0                	test   eax,eax
c001355a:	74 10                	je     c001356c <ip_route+0x70>
c001355c:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c0013561:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0013564:	0f b6 c0             	movzx  eax,al
c0013567:	83 e0 01             	and    eax,0x1
c001356a:	75 18                	jne    c0013584 <ip_route+0x88>
c001356c:	66 a1 76 67 03 c0    	mov    ax,ds:0xc0036776
c0013572:	83 c0 01             	add    eax,0x1
c0013575:	66 a3 76 67 03 c0    	mov    ds:0xc0036776,ax
c001357b:	b8 00 00 00 00       	mov    eax,0x0
c0013580:	eb 0a                	jmp    c001358c <ip_route+0x90>
c0013582:	66 90                	xchg   ax,ax
c0013584:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c0013589:	8d 76 00             	lea    esi,[esi+0x0]
c001358c:	83 c4 10             	add    esp,0x10
c001358f:	c3                   	ret    

c0013590 <ip_input>:
c0013590:	83 ec 1c             	sub    esp,0x1c
c0013593:	66 a1 6a 67 03 c0    	mov    ax,ds:0xc003676a
c0013599:	83 c0 01             	add    eax,0x1
c001359c:	66 a3 6a 67 03 c0    	mov    ds:0xc003676a,ax
c00135a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00135a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00135ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00135b1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00135b4:	0f b7 c0             	movzx  eax,ax
c00135b7:	83 ec 0c             	sub    esp,0xc
c00135ba:	50                   	push   eax
c00135bb:	e8 28 d6 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00135c0:	83 c4 10             	add    esp,0x10
c00135c3:	0f b7 c0             	movzx  eax,ax
c00135c6:	c1 e8 0c             	shr    eax,0xc
c00135c9:	0f b7 c0             	movzx  eax,ax
c00135cc:	83 f8 04             	cmp    eax,0x4
c00135cf:	74 37                	je     c0013608 <ip_input+0x78>
c00135d1:	83 ec 0c             	sub    esp,0xc
c00135d4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00135d8:	e8 77 4c ff ff       	call   c0008254 <pbuf_free>
c00135dd:	83 c4 10             	add    esp,0x10
c00135e0:	66 a1 7c 67 03 c0    	mov    ax,ds:0xc003677c
c00135e6:	83 c0 01             	add    eax,0x1
c00135e9:	66 a3 7c 67 03 c0    	mov    ds:0xc003677c,ax
c00135ef:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c00135f5:	83 c0 01             	add    eax,0x1
c00135f8:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c00135fe:	b0 00                	mov    al,0x0
c0013600:	e9 cb 03 00 00       	jmp    c00139d0 <ip_input+0x440>
c0013605:	8d 76 00             	lea    esi,[esi+0x0]
c0013608:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001360c:	66 8b 00             	mov    ax,WORD PTR [eax]
c001360f:	0f b7 c0             	movzx  eax,ax
c0013612:	83 ec 0c             	sub    esp,0xc
c0013615:	50                   	push   eax
c0013616:	e8 cd d5 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001361b:	83 c4 10             	add    esp,0x10
c001361e:	0f b7 c0             	movzx  eax,ax
c0013621:	c1 e8 08             	shr    eax,0x8
c0013624:	83 e0 0f             	and    eax,0xf
c0013627:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c001362c:	66 8b 44 24 02       	mov    ax,WORD PTR [esp+0x2]
c0013631:	c1 e0 02             	shl    eax,0x2
c0013634:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c0013639:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001363d:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0013641:	0f b7 c0             	movzx  eax,ax
c0013644:	83 ec 0c             	sub    esp,0xc
c0013647:	50                   	push   eax
c0013648:	e8 9b d5 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001364d:	83 c4 10             	add    esp,0x10
c0013650:	66 89 04 24          	mov    WORD PTR [esp],ax
c0013654:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013658:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c001365c:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c0013661:	0f b7 c0             	movzx  eax,ax
c0013664:	39 c2                	cmp    edx,eax
c0013666:	77 14                	ja     c001367c <ip_input+0xec>
c0013668:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001366c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001366f:	0f b7 14 24          	movzx  edx,WORD PTR [esp]
c0013673:	0f b7 c0             	movzx  eax,ax
c0013676:	39 c2                	cmp    edx,eax
c0013678:	76 36                	jbe    c00136b0 <ip_input+0x120>
c001367a:	66 90                	xchg   ax,ax
c001367c:	83 ec 0c             	sub    esp,0xc
c001367f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013683:	e8 cc 4b ff ff       	call   c0008254 <pbuf_free>
c0013688:	83 c4 10             	add    esp,0x10
c001368b:	66 a1 72 67 03 c0    	mov    ax,ds:0xc0036772
c0013691:	83 c0 01             	add    eax,0x1
c0013694:	66 a3 72 67 03 c0    	mov    ds:0xc0036772,ax
c001369a:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c00136a0:	83 c0 01             	add    eax,0x1
c00136a3:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c00136a9:	b0 00                	mov    al,0x0
c00136ab:	e9 20 03 00 00       	jmp    c00139d0 <ip_input+0x440>
c00136b0:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c00136b5:	83 ec 08             	sub    esp,0x8
c00136b8:	50                   	push   eax
c00136b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00136bd:	e8 2e fd ff ff       	call   c00133f0 <inet_chksum>
c00136c2:	83 c4 10             	add    esp,0x10
c00136c5:	0f b7 c0             	movzx  eax,ax
c00136c8:	85 c0                	test   eax,eax
c00136ca:	74 34                	je     c0013700 <ip_input+0x170>
c00136cc:	83 ec 0c             	sub    esp,0xc
c00136cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00136d3:	e8 7c 4b ff ff       	call   c0008254 <pbuf_free>
c00136d8:	83 c4 10             	add    esp,0x10
c00136db:	66 a1 70 67 03 c0    	mov    ax,ds:0xc0036770
c00136e1:	83 c0 01             	add    eax,0x1
c00136e4:	66 a3 70 67 03 c0    	mov    ds:0xc0036770,ax
c00136ea:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c00136f0:	83 c0 01             	add    eax,0x1
c00136f3:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c00136f9:	b0 00                	mov    al,0x0
c00136fb:	e9 d0 02 00 00       	jmp    c00139d0 <ip_input+0x440>
c0013700:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0013704:	83 ec 08             	sub    esp,0x8
c0013707:	50                   	push   eax
c0013708:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001370c:	e8 13 51 ff ff       	call   c0008824 <pbuf_realloc>
c0013711:	83 c4 10             	add    esp,0x10
c0013714:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013718:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001371b:	a3 98 68 03 c0       	mov    ds:0xc0036898,eax
c0013720:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013724:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013727:	a3 90 68 03 c0       	mov    ds:0xc0036890,eax
c001372c:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0013734:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013738:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001373c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013740:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0013743:	83 e0 01             	and    eax,0x1
c0013746:	0f b6 c0             	movzx  eax,al
c0013749:	85 c0                	test   eax,eax
c001374b:	74 43                	je     c0013790 <ip_input+0x200>
c001374d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013751:	83 c0 04             	add    eax,0x4
c0013754:	74 3a                	je     c0013790 <ip_input+0x200>
c0013756:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001375a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001375d:	85 c0                	test   eax,eax
c001375f:	74 2f                	je     c0013790 <ip_input+0x200>
c0013761:	8b 15 98 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036898
c0013767:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001376b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001376e:	39 c2                	cmp    edx,eax
c0013770:	74 66                	je     c00137d8 <ip_input+0x248>
c0013772:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0013777:	83 ec 08             	sub    esp,0x8
c001377a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001377e:	50                   	push   eax
c001377f:	e8 c4 05 00 00       	call   c0013d48 <ip4_addr_isbroadcast>
c0013784:	83 c4 10             	add    esp,0x10
c0013787:	0f b6 c0             	movzx  eax,al
c001378a:	85 c0                	test   eax,eax
c001378c:	75 4a                	jne    c00137d8 <ip_input+0x248>
c001378e:	66 90                	xchg   ax,ax
c0013790:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0013795:	74 15                	je     c00137ac <ip_input+0x21c>
c0013797:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001379f:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c00137a4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00137a8:	eb 0e                	jmp    c00137b8 <ip_input+0x228>
c00137aa:	66 90                	xchg   ax,ax
c00137ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00137b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00137b2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00137b6:	66 90                	xchg   ax,ax
c00137b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00137bc:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c00137c0:	75 0a                	jne    c00137cc <ip_input+0x23c>
c00137c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00137c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00137c8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00137cc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00137d1:	0f 85 65 ff ff ff    	jne    c001373c <ip_input+0x1ac>
c00137d7:	90                   	nop
c00137d8:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c00137dd:	83 ec 08             	sub    esp,0x8
c00137e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00137e4:	50                   	push   eax
c00137e5:	e8 5e 05 00 00       	call   c0013d48 <ip4_addr_isbroadcast>
c00137ea:	83 c4 10             	add    esp,0x10
c00137ed:	0f b6 c0             	movzx  eax,al
c00137f0:	85 c0                	test   eax,eax
c00137f2:	75 14                	jne    c0013808 <ip_input+0x278>
c00137f4:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c00137f9:	25 f0 00 00 00       	and    eax,0xf0
c00137fe:	3d e0 00 00 00       	cmp    eax,0xe0
c0013803:	75 2b                	jne    c0013830 <ip_input+0x2a0>
c0013805:	8d 76 00             	lea    esi,[esi+0x0]
c0013808:	83 ec 0c             	sub    esp,0xc
c001380b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001380f:	e8 40 4a ff ff       	call   c0008254 <pbuf_free>
c0013814:	83 c4 10             	add    esp,0x10
c0013817:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c001381d:	83 c0 01             	add    eax,0x1
c0013820:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c0013826:	b0 00                	mov    al,0x0
c0013828:	e9 a3 01 00 00       	jmp    c00139d0 <ip_input+0x440>
c001382d:	8d 76 00             	lea    esi,[esi+0x0]
c0013830:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013835:	75 19                	jne    c0013850 <ip_input+0x2c0>
c0013837:	83 ec 0c             	sub    esp,0xc
c001383a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001383e:	e8 11 4a ff ff       	call   c0008254 <pbuf_free>
c0013843:	83 c4 10             	add    esp,0x10
c0013846:	b0 00                	mov    al,0x0
c0013848:	e9 83 01 00 00       	jmp    c00139d0 <ip_input+0x440>
c001384d:	8d 76 00             	lea    esi,[esi+0x0]
c0013850:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013854:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0013858:	0f b7 c0             	movzx  eax,ax
c001385b:	25 3f ff 00 00       	and    eax,0xff3f
c0013860:	74 2e                	je     c0013890 <ip_input+0x300>
c0013862:	83 ec 0c             	sub    esp,0xc
c0013865:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013869:	e8 7a 13 00 00       	call   c0014be8 <ip_reass>
c001386e:	83 c4 10             	add    esp,0x10
c0013871:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013875:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c001387a:	75 08                	jne    c0013884 <ip_input+0x2f4>
c001387c:	b0 00                	mov    al,0x0
c001387e:	e9 4d 01 00 00       	jmp    c00139d0 <ip_input+0x440>
c0013883:	90                   	nop
c0013884:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013888:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001388b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001388f:	90                   	nop
c0013890:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013894:	a3 94 68 03 c0       	mov    ds:0xc0036894,eax
c0013899:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001389d:	a3 9c 68 03 c0       	mov    ds:0xc003689c,eax
c00138a2:	83 ec 08             	sub    esp,0x8
c00138a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138ad:	e8 c6 5c ff ff       	call   c0009578 <raw_input>
c00138b2:	83 c4 10             	add    esp,0x10
c00138b5:	0f b6 c0             	movzx  eax,al
c00138b8:	85 c0                	test   eax,eax
c00138ba:	0f 85 e0 00 00 00    	jne    c00139a0 <ip_input+0x410>
c00138c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00138c4:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c00138c7:	0f b6 c0             	movzx  eax,al
c00138ca:	83 f8 06             	cmp    eax,0x6
c00138cd:	74 25                	je     c00138f4 <ip_input+0x364>
c00138cf:	83 f8 11             	cmp    eax,0x11
c00138d2:	74 08                	je     c00138dc <ip_input+0x34c>
c00138d4:	83 f8 01             	cmp    eax,0x1
c00138d7:	74 33                	je     c001390c <ip_input+0x37c>
c00138d9:	eb 49                	jmp    c0013924 <ip_input+0x394>
c00138db:	90                   	nop
c00138dc:	83 ec 08             	sub    esp,0x8
c00138df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138e7:	e8 c0 d3 ff ff       	call   c0010cac <udp_input>
c00138ec:	83 c4 10             	add    esp,0x10
c00138ef:	e9 b0 00 00 00       	jmp    c00139a4 <ip_input+0x414>
c00138f4:	83 ec 08             	sub    esp,0x8
c00138f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138ff:	e8 00 a5 ff ff       	call   c000de04 <tcp_input>
c0013904:	83 c4 10             	add    esp,0x10
c0013907:	e9 98 00 00 00       	jmp    c00139a4 <ip_input+0x414>
c001390c:	83 ec 08             	sub    esp,0x8
c001390f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013913:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013917:	e8 7c f0 ff ff       	call   c0012998 <icmp_input>
c001391c:	83 c4 10             	add    esp,0x10
c001391f:	e9 80 00 00 00       	jmp    c00139a4 <ip_input+0x414>
c0013924:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0013929:	83 ec 08             	sub    esp,0x8
c001392c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013930:	50                   	push   eax
c0013931:	e8 12 04 00 00       	call   c0013d48 <ip4_addr_isbroadcast>
c0013936:	83 c4 10             	add    esp,0x10
c0013939:	0f b6 c0             	movzx  eax,al
c001393c:	85 c0                	test   eax,eax
c001393e:	75 30                	jne    c0013970 <ip_input+0x3e0>
c0013940:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0013945:	25 f0 00 00 00       	and    eax,0xf0
c001394a:	3d e0 00 00 00       	cmp    eax,0xe0
c001394f:	74 1f                	je     c0013970 <ip_input+0x3e0>
c0013951:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013955:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013959:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001395c:	83 ec 08             	sub    esp,0x8
c001395f:	6a 02                	push   0x2
c0013961:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013965:	e8 c6 f5 ff ff       	call   c0012f30 <icmp_dest_unreach>
c001396a:	83 c4 10             	add    esp,0x10
c001396d:	8d 76 00             	lea    esi,[esi+0x0]
c0013970:	83 ec 0c             	sub    esp,0xc
c0013973:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013977:	e8 d8 48 ff ff       	call   c0008254 <pbuf_free>
c001397c:	83 c4 10             	add    esp,0x10
c001397f:	66 a1 78 67 03 c0    	mov    ax,ds:0xc0036778
c0013985:	83 c0 01             	add    eax,0x1
c0013988:	66 a3 78 67 03 c0    	mov    ds:0xc0036778,ax
c001398e:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c0013994:	83 c0 01             	add    eax,0x1
c0013997:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c001399d:	eb 05                	jmp    c00139a4 <ip_input+0x414>
c001399f:	90                   	nop
c00139a0:	90                   	nop
c00139a1:	8d 76 00             	lea    esi,[esi+0x0]
c00139a4:	c7 05 94 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036894,0x0
c00139ae:	c7 05 9c 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003689c,0x0
c00139b8:	c7 05 90 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036890,0x0
c00139c2:	c7 05 98 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036898,0x0
c00139cc:	b0 00                	mov    al,0x0
c00139ce:	66 90                	xchg   ax,ax
c00139d0:	83 c4 1c             	add    esp,0x1c
c00139d3:	c3                   	ret    

c00139d4 <ip_output_if>:
c00139d4:	83 ec 2c             	sub    esp,0x2c
c00139d7:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00139db:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00139df:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00139e3:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00139e7:	88 54 24 08          	mov    BYTE PTR [esp+0x8],dl
c00139eb:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00139ef:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00139f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00139fb:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c00139ff:	0f b7 c0             	movzx  eax,ax
c0013a02:	83 f8 01             	cmp    eax,0x1
c0013a05:	74 15                	je     c0013a1c <ip_output_if+0x48>
c0013a07:	83 ec 08             	sub    esp,0x8
c0013a0a:	68 ca 08 03 c0       	push   0xc00308ca
c0013a0f:	68 26 f6 02 c0       	push   0xc002f626
c0013a14:	e8 7b bf 00 00       	call   c001f994 <CPrintf>
c0013a19:	83 c4 10             	add    esp,0x10
c0013a1c:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0013a21:	0f 84 ed 01 00 00    	je     c0013c14 <ip_output_if+0x240>
c0013a27:	66 c7 44 24 1a 14 00 	mov    WORD PTR [esp+0x1a],0x14
c0013a2e:	83 ec 08             	sub    esp,0x8
c0013a31:	6a 14                	push   0x14
c0013a33:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013a37:	e8 7c 46 ff ff       	call   c00080b8 <pbuf_header>
c0013a3c:	83 c4 10             	add    esp,0x10
c0013a3f:	0f b6 c0             	movzx  eax,al
c0013a42:	85 c0                	test   eax,eax
c0013a44:	74 16                	je     c0013a5c <ip_output_if+0x88>
c0013a46:	66 a1 7c 67 03 c0    	mov    ax,ds:0xc003677c
c0013a4c:	83 c0 01             	add    eax,0x1
c0013a4f:	66 a3 7c 67 03 c0    	mov    ds:0xc003677c,ax
c0013a55:	b0 fe                	mov    al,0xfe
c0013a57:	e9 44 02 00 00       	jmp    c0013ca0 <ip_output_if+0x2cc>
c0013a5c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013a60:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013a63:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013a67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013a6b:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013a6f:	0f b7 c0             	movzx  eax,ax
c0013a72:	83 f8 13             	cmp    eax,0x13
c0013a75:	77 15                	ja     c0013a8c <ip_output_if+0xb8>
c0013a77:	83 ec 08             	sub    esp,0x8
c0013a7a:	68 d8 08 03 c0       	push   0xc00308d8
c0013a7f:	68 26 f6 02 c0       	push   0xc002f626
c0013a84:	e8 0b bf 00 00       	call   c001f994 <CPrintf>
c0013a89:	83 c4 10             	add    esp,0x10
c0013a8c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013a90:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0013a94:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0013a97:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013a9b:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0013a9f:	88 50 09             	mov    BYTE PTR [eax+0x9],dl
c0013aa2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0013aa7:	c1 e0 08             	shl    eax,0x8
c0013aaa:	89 c2                	mov    edx,eax
c0013aac:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0013ab1:	09 d0                	or     eax,edx
c0013ab3:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013ab7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013abb:	8b 10                	mov    edx,DWORD PTR [eax]
c0013abd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ac1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0013ac4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ac8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013acb:	0f b7 c0             	movzx  eax,ax
c0013ace:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013ad2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ad6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013ad9:	c1 e8 10             	shr    eax,0x10
c0013adc:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013ae0:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c0013ae5:	c1 e8 02             	shr    eax,0x2
c0013ae8:	0f b7 c0             	movzx  eax,ax
c0013aeb:	c1 e0 08             	shl    eax,0x8
c0013aee:	80 cc 40             	or     ah,0x40
c0013af1:	89 c2                	mov    edx,eax
c0013af3:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0013af8:	09 d0                	or     eax,edx
c0013afa:	0f b7 c0             	movzx  eax,ax
c0013afd:	83 ec 0c             	sub    esp,0xc
c0013b00:	50                   	push   eax
c0013b01:	e8 e2 d0 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013b06:	83 c4 10             	add    esp,0x10
c0013b09:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013b0d:	66 89 02             	mov    WORD PTR [edx],ax
c0013b10:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b14:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013b17:	0f b7 c0             	movzx  eax,ax
c0013b1a:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013b1e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013b22:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013b25:	0f b7 c0             	movzx  eax,ax
c0013b28:	83 ec 0c             	sub    esp,0xc
c0013b2b:	50                   	push   eax
c0013b2c:	e8 b7 d0 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013b31:	83 c4 10             	add    esp,0x10
c0013b34:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013b38:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0013b3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b40:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0013b44:	0f b7 c0             	movzx  eax,ax
c0013b47:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013b4b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b4f:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0013b55:	66 a1 a0 a9 03 c0    	mov    ax,ds:0xc003a9a0
c0013b5b:	0f b7 c0             	movzx  eax,ax
c0013b5e:	83 ec 0c             	sub    esp,0xc
c0013b61:	50                   	push   eax
c0013b62:	e8 81 d0 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013b67:	83 c4 10             	add    esp,0x10
c0013b6a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013b6e:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0013b72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b76:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0013b7a:	0f b7 c0             	movzx  eax,ax
c0013b7d:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013b81:	66 a1 a0 a9 03 c0    	mov    ax,ds:0xc003a9a0
c0013b87:	83 c0 01             	add    eax,0x1
c0013b8a:	66 a3 a0 a9 03 c0    	mov    ds:0xc003a9a0,ax
c0013b90:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0013b95:	74 0d                	je     c0013ba4 <ip_output_if+0x1d0>
c0013b97:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013b9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b9d:	85 c0                	test   eax,eax
c0013b9f:	75 13                	jne    c0013bb4 <ip_output_if+0x1e0>
c0013ba1:	8d 76 00             	lea    esi,[esi+0x0]
c0013ba4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013ba8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0013bab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013baf:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013bb2:	eb 10                	jmp    c0013bc4 <ip_output_if+0x1f0>
c0013bb4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013bb8:	8b 10                	mov    edx,DWORD PTR [eax]
c0013bba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013bbe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013bc1:	8d 76 00             	lea    esi,[esi+0x0]
c0013bc4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013bc8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013bcb:	0f b7 c0             	movzx  eax,ax
c0013bce:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013bd2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013bd6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013bd9:	c1 e8 10             	shr    eax,0x10
c0013bdc:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013be0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013be4:	c1 e8 10             	shr    eax,0x10
c0013be7:	89 c2                	mov    edx,eax
c0013be9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013bed:	0f b7 c0             	movzx  eax,ax
c0013bf0:	01 d0                	add    eax,edx
c0013bf2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013bf6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013bfa:	c1 e8 10             	shr    eax,0x10
c0013bfd:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013c01:	f7 54 24 1c          	not    DWORD PTR [esp+0x1c]
c0013c05:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c09:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013c0d:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0013c11:	eb 21                	jmp    c0013c34 <ip_output_if+0x260>
c0013c13:	90                   	nop
c0013c14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013c1b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013c1f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c23:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013c26:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013c2a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013c2e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0013c32:	66 90                	xchg   ax,ax
c0013c34:	66 a1 68 67 03 c0    	mov    ax,ds:0xc0036768
c0013c3a:	83 c0 01             	add    eax,0x1
c0013c3d:	66 a3 68 67 03 c0    	mov    ds:0xc0036768,ax
c0013c43:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013c47:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013c4a:	0f b7 c0             	movzx  eax,ax
c0013c4d:	85 c0                	test   eax,eax
c0013c4f:	74 33                	je     c0013c84 <ip_output_if+0x2b0>
c0013c51:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c55:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0013c58:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013c5c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013c5f:	0f b7 d2             	movzx  edx,dx
c0013c62:	0f b7 c0             	movzx  eax,ax
c0013c65:	39 c2                	cmp    edx,eax
c0013c67:	76 1b                	jbe    c0013c84 <ip_output_if+0x2b0>
c0013c69:	83 ec 04             	sub    esp,0x4
c0013c6c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013c70:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0013c74:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013c78:	e8 2b 14 00 00       	call   c00150a8 <ip_frag>
c0013c7d:	83 c4 10             	add    esp,0x10
c0013c80:	eb 1e                	jmp    c0013ca0 <ip_output_if+0x2cc>
c0013c82:	66 90                	xchg   ax,ax
c0013c84:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013c88:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0013c8b:	83 ec 04             	sub    esp,0x4
c0013c8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013c92:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0013c96:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013c9a:	ff d0                	call   eax
c0013c9c:	83 c4 10             	add    esp,0x10
c0013c9f:	90                   	nop
c0013ca0:	83 c4 2c             	add    esp,0x2c
c0013ca3:	c3                   	ret    

c0013ca4 <ip_output>:
c0013ca4:	83 ec 2c             	sub    esp,0x2c
c0013ca7:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0013cab:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013caf:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0013cb3:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013cb7:	88 54 24 08          	mov    BYTE PTR [esp+0x8],dl
c0013cbb:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013cbf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013cc3:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0013cc7:	0f b7 c0             	movzx  eax,ax
c0013cca:	83 f8 01             	cmp    eax,0x1
c0013ccd:	74 15                	je     c0013ce4 <ip_output+0x40>
c0013ccf:	83 ec 08             	sub    esp,0x8
c0013cd2:	68 ca 08 03 c0       	push   0xc00308ca
c0013cd7:	68 26 f6 02 c0       	push   0xc002f626
c0013cdc:	e8 b3 bc 00 00       	call   c001f994 <CPrintf>
c0013ce1:	83 c4 10             	add    esp,0x10
c0013ce4:	83 ec 0c             	sub    esp,0xc
c0013ce7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0013ceb:	e8 0c f8 ff ff       	call   c00134fc <ip_route>
c0013cf0:	83 c4 10             	add    esp,0x10
c0013cf3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013cf7:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013cfc:	75 16                	jne    c0013d14 <ip_output+0x70>
c0013cfe:	66 a1 76 67 03 c0    	mov    ax,ds:0xc0036776
c0013d04:	83 c0 01             	add    eax,0x1
c0013d07:	66 a3 76 67 03 c0    	mov    ds:0xc0036776,ax
c0013d0d:	b0 fc                	mov    al,0xfc
c0013d0f:	eb 33                	jmp    c0013d44 <ip_output+0xa0>
c0013d11:	8d 76 00             	lea    esi,[esi+0x0]
c0013d14:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0013d19:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0013d1e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0013d23:	83 ec 04             	sub    esp,0x4
c0013d26:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013d2a:	51                   	push   ecx
c0013d2b:	52                   	push   edx
c0013d2c:	50                   	push   eax
c0013d2d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013d31:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013d35:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013d39:	e8 96 fc ff ff       	call   c00139d4 <ip_output_if>
c0013d3e:	83 c4 20             	add    esp,0x20
c0013d41:	8d 76 00             	lea    esi,[esi+0x0]
c0013d44:	83 c4 2c             	add    esp,0x2c
c0013d47:	c3                   	ret    

c0013d48 <ip4_addr_isbroadcast>:
c0013d48:	83 ec 10             	sub    esp,0x10
c0013d4b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d4f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013d53:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0013d58:	74 0a                	je     c0013d64 <ip4_addr_isbroadcast+0x1c>
c0013d5a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0013d5f:	75 07                	jne    c0013d68 <ip4_addr_isbroadcast+0x20>
c0013d61:	8d 76 00             	lea    esi,[esi+0x0]
c0013d64:	b0 01                	mov    al,0x1
c0013d66:	eb 64                	jmp    c0013dcc <ip4_addr_isbroadcast+0x84>
c0013d68:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d6c:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0013d6f:	0f b6 c0             	movzx  eax,al
c0013d72:	83 e0 02             	and    eax,0x2
c0013d75:	75 05                	jne    c0013d7c <ip4_addr_isbroadcast+0x34>
c0013d77:	b0 00                	mov    al,0x0
c0013d79:	eb 51                	jmp    c0013dcc <ip4_addr_isbroadcast+0x84>
c0013d7b:	90                   	nop
c0013d7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d80:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013d83:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0013d87:	75 07                	jne    c0013d90 <ip4_addr_isbroadcast+0x48>
c0013d89:	b0 00                	mov    al,0x0
c0013d8b:	eb 3f                	jmp    c0013dcc <ip4_addr_isbroadcast+0x84>
c0013d8d:	8d 76 00             	lea    esi,[esi+0x0]
c0013d90:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013d94:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d98:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013d9b:	31 c2                	xor    edx,eax
c0013d9d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013da1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013da4:	21 d0                	and    eax,edx
c0013da6:	75 20                	jne    c0013dc8 <ip4_addr_isbroadcast+0x80>
c0013da8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013dac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013daf:	f7 d0                	not    eax
c0013db1:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0013db5:	89 c2                	mov    edx,eax
c0013db7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013dbb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013dbe:	f7 d0                	not    eax
c0013dc0:	39 c2                	cmp    edx,eax
c0013dc2:	75 04                	jne    c0013dc8 <ip4_addr_isbroadcast+0x80>
c0013dc4:	b0 01                	mov    al,0x1
c0013dc6:	eb 04                	jmp    c0013dcc <ip4_addr_isbroadcast+0x84>
c0013dc8:	b0 00                	mov    al,0x0
c0013dca:	66 90                	xchg   ax,ax
c0013dcc:	83 c4 10             	add    esp,0x10
c0013dcf:	c3                   	ret    

c0013dd0 <ip4_addr_netmask_valid>:
c0013dd0:	83 ec 1c             	sub    esp,0x1c
c0013dd3:	83 ec 0c             	sub    esp,0xc
c0013dd6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013dda:	e8 2d ce fe ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0013ddf:	83 c4 10             	add    esp,0x10
c0013de2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013de6:	c7 44 24 0c 00 00 00 80 	mov    DWORD PTR [esp+0xc],0x80000000
c0013dee:	eb 10                	jmp    c0013e00 <ip4_addr_netmask_valid+0x30>
c0013df0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013df4:	23 44 24 0c          	and    eax,DWORD PTR [esp+0xc]
c0013df8:	74 12                	je     c0013e0c <ip4_addr_netmask_valid+0x3c>
c0013dfa:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
c0013dfe:	66 90                	xchg   ax,ax
c0013e00:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013e05:	75 e9                	jne    c0013df0 <ip4_addr_netmask_valid+0x20>
c0013e07:	eb 1b                	jmp    c0013e24 <ip4_addr_netmask_valid+0x54>
c0013e09:	8d 76 00             	lea    esi,[esi+0x0]
c0013e0c:	90                   	nop
c0013e0d:	eb 15                	jmp    c0013e24 <ip4_addr_netmask_valid+0x54>
c0013e0f:	90                   	nop
c0013e10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013e14:	23 44 24 0c          	and    eax,DWORD PTR [esp+0xc]
c0013e18:	74 06                	je     c0013e20 <ip4_addr_netmask_valid+0x50>
c0013e1a:	b0 00                	mov    al,0x0
c0013e1c:	eb 12                	jmp    c0013e30 <ip4_addr_netmask_valid+0x60>
c0013e1e:	66 90                	xchg   ax,ax
c0013e20:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
c0013e24:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013e29:	75 e5                	jne    c0013e10 <ip4_addr_netmask_valid+0x40>
c0013e2b:	b0 01                	mov    al,0x1
c0013e2d:	8d 76 00             	lea    esi,[esi+0x0]
c0013e30:	83 c4 1c             	add    esp,0x1c
c0013e33:	c3                   	ret    

c0013e34 <ipaddr_aton>:
c0013e34:	83 ec 2c             	sub    esp,0x2c
c0013e37:	8d 44 24 04          	lea    eax,[esp+0x4]
c0013e3b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013e3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e43:	8a 00                	mov    al,BYTE PTR [eax]
c0013e45:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0013e49:	8d 76 00             	lea    esi,[esi+0x0]
c0013e4c:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013e50:	0f b6 c0             	movzx  eax,al
c0013e53:	83 f8 2f             	cmp    eax,0x2f
c0013e56:	76 0c                	jbe    c0013e64 <ipaddr_aton+0x30>
c0013e58:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013e5c:	0f b6 c0             	movzx  eax,al
c0013e5f:	83 f8 39             	cmp    eax,0x39
c0013e62:	76 0c                	jbe    c0013e70 <ipaddr_aton+0x3c>
c0013e64:	b8 00 00 00 00       	mov    eax,0x0
c0013e69:	e9 f2 02 00 00       	jmp    c0014160 <ipaddr_aton+0x32c>
c0013e6e:	66 90                	xchg   ax,ax
c0013e70:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013e78:	c6 44 24 1b 0a       	mov    BYTE PTR [esp+0x1b],0xa
c0013e7d:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0013e82:	83 f8 30             	cmp    eax,0x30
c0013e85:	75 45                	jne    c0013ecc <ipaddr_aton+0x98>
c0013e87:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0013e8c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e90:	8a 00                	mov    al,BYTE PTR [eax]
c0013e92:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0013e96:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0013e9b:	83 f8 78             	cmp    eax,0x78
c0013e9e:	74 0c                	je     c0013eac <ipaddr_aton+0x78>
c0013ea0:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0013ea5:	83 f8 58             	cmp    eax,0x58
c0013ea8:	75 1a                	jne    c0013ec4 <ipaddr_aton+0x90>
c0013eaa:	66 90                	xchg   ax,ax
c0013eac:	c6 44 24 1b 10       	mov    BYTE PTR [esp+0x1b],0x10
c0013eb1:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0013eb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013eba:	8a 00                	mov    al,BYTE PTR [eax]
c0013ebc:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0013ec0:	eb 0a                	jmp    c0013ecc <ipaddr_aton+0x98>
c0013ec2:	66 90                	xchg   ax,ax
c0013ec4:	c6 44 24 1b 08       	mov    BYTE PTR [esp+0x1b],0x8
c0013ec9:	8d 76 00             	lea    esi,[esi+0x0]
c0013ecc:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013ed0:	0f b6 c0             	movzx  eax,al
c0013ed3:	83 f8 2f             	cmp    eax,0x2f
c0013ed6:	76 3c                	jbe    c0013f14 <ipaddr_aton+0xe0>
c0013ed8:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013edc:	0f b6 c0             	movzx  eax,al
c0013edf:	83 f8 39             	cmp    eax,0x39
c0013ee2:	77 30                	ja     c0013f14 <ipaddr_aton+0xe0>
c0013ee4:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0013ee9:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0013eee:	89 c2                	mov    edx,eax
c0013ef0:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0013ef5:	01 d0                	add    eax,edx
c0013ef7:	83 e8 30             	sub    eax,0x30
c0013efa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013efe:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0013f03:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f07:	8a 00                	mov    al,BYTE PTR [eax]
c0013f09:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0013f0d:	e9 ae 00 00 00       	jmp    c0013fc0 <ipaddr_aton+0x18c>
c0013f12:	66 90                	xchg   ax,ax
c0013f14:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0013f19:	83 f8 10             	cmp    eax,0x10
c0013f1c:	0f 85 a6 00 00 00    	jne    c0013fc8 <ipaddr_aton+0x194>
c0013f22:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013f26:	0f b6 c0             	movzx  eax,al
c0013f29:	83 f8 2f             	cmp    eax,0x2f
c0013f2c:	76 0e                	jbe    c0013f3c <ipaddr_aton+0x108>
c0013f2e:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013f32:	0f b6 c0             	movzx  eax,al
c0013f35:	83 f8 39             	cmp    eax,0x39
c0013f38:	76 32                	jbe    c0013f6c <ipaddr_aton+0x138>
c0013f3a:	66 90                	xchg   ax,ax
c0013f3c:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013f40:	0f b6 c0             	movzx  eax,al
c0013f43:	83 f8 60             	cmp    eax,0x60
c0013f46:	76 0c                	jbe    c0013f54 <ipaddr_aton+0x120>
c0013f48:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013f4c:	0f b6 c0             	movzx  eax,al
c0013f4f:	83 f8 66             	cmp    eax,0x66
c0013f52:	76 18                	jbe    c0013f6c <ipaddr_aton+0x138>
c0013f54:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013f58:	0f b6 c0             	movzx  eax,al
c0013f5b:	83 f8 40             	cmp    eax,0x40
c0013f5e:	76 68                	jbe    c0013fc8 <ipaddr_aton+0x194>
c0013f60:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013f64:	0f b6 c0             	movzx  eax,al
c0013f67:	83 f8 46             	cmp    eax,0x46
c0013f6a:	77 5c                	ja     c0013fc8 <ipaddr_aton+0x194>
c0013f6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f70:	c1 e0 04             	shl    eax,0x4
c0013f73:	89 c2                	mov    edx,eax
c0013f75:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0013f7a:	8d 48 0a             	lea    ecx,[eax+0xa]
c0013f7d:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013f81:	0f b6 c0             	movzx  eax,al
c0013f84:	83 f8 60             	cmp    eax,0x60
c0013f87:	76 13                	jbe    c0013f9c <ipaddr_aton+0x168>
c0013f89:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013f8d:	0f b6 c0             	movzx  eax,al
c0013f90:	83 f8 7a             	cmp    eax,0x7a
c0013f93:	77 07                	ja     c0013f9c <ipaddr_aton+0x168>
c0013f95:	b8 61 00 00 00       	mov    eax,0x61
c0013f9a:	eb 08                	jmp    c0013fa4 <ipaddr_aton+0x170>
c0013f9c:	b8 41 00 00 00       	mov    eax,0x41
c0013fa1:	8d 76 00             	lea    esi,[esi+0x0]
c0013fa4:	29 c1                	sub    ecx,eax
c0013fa6:	89 c8                	mov    eax,ecx
c0013fa8:	09 d0                	or     eax,edx
c0013faa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013fae:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0013fb3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013fb7:	8a 00                	mov    al,BYTE PTR [eax]
c0013fb9:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0013fbd:	8d 76 00             	lea    esi,[esi+0x0]
c0013fc0:	e9 07 ff ff ff       	jmp    c0013ecc <ipaddr_aton+0x98>
c0013fc5:	8d 76 00             	lea    esi,[esi+0x0]
c0013fc8:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0013fcd:	83 f8 2e             	cmp    eax,0x2e
c0013fd0:	75 42                	jne    c0014014 <ipaddr_aton+0x1e0>
c0013fd2:	8d 44 24 04          	lea    eax,[esp+0x4]
c0013fd6:	83 c0 0c             	add    eax,0xc
c0013fd9:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0013fdd:	72 0d                	jb     c0013fec <ipaddr_aton+0x1b8>
c0013fdf:	b8 00 00 00 00       	mov    eax,0x0
c0013fe4:	e9 77 01 00 00       	jmp    c0014160 <ipaddr_aton+0x32c>
c0013fe9:	8d 76 00             	lea    esi,[esi+0x0]
c0013fec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ff0:	8d 50 04             	lea    edx,[eax+0x4]
c0013ff3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0013ff7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013ffb:	89 10                	mov    DWORD PTR [eax],edx
c0013ffd:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0014002:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014006:	8a 00                	mov    al,BYTE PTR [eax]
c0014008:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001400c:	e9 3b fe ff ff       	jmp    c0013e4c <ipaddr_aton+0x18>
c0014011:	8d 76 00             	lea    esi,[esi+0x0]
c0014014:	90                   	nop
c0014015:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001401a:	85 c0                	test   eax,eax
c001401c:	74 46                	je     c0014064 <ipaddr_aton+0x230>
c001401e:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014023:	83 f8 20             	cmp    eax,0x20
c0014026:	74 3c                	je     c0014064 <ipaddr_aton+0x230>
c0014028:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001402d:	83 f8 0c             	cmp    eax,0xc
c0014030:	74 32                	je     c0014064 <ipaddr_aton+0x230>
c0014032:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014037:	83 f8 0a             	cmp    eax,0xa
c001403a:	74 28                	je     c0014064 <ipaddr_aton+0x230>
c001403c:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014041:	83 f8 0d             	cmp    eax,0xd
c0014044:	74 1e                	je     c0014064 <ipaddr_aton+0x230>
c0014046:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001404b:	83 f8 09             	cmp    eax,0x9
c001404e:	74 14                	je     c0014064 <ipaddr_aton+0x230>
c0014050:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014055:	83 f8 0b             	cmp    eax,0xb
c0014058:	74 0a                	je     c0014064 <ipaddr_aton+0x230>
c001405a:	b8 00 00 00 00       	mov    eax,0x0
c001405f:	e9 fc 00 00 00       	jmp    c0014160 <ipaddr_aton+0x32c>
c0014064:	8d 44 24 04          	lea    eax,[esp+0x4]
c0014068:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001406c:	29 c2                	sub    edx,eax
c001406e:	89 d0                	mov    eax,edx
c0014070:	c1 f8 02             	sar    eax,0x2
c0014073:	83 c0 01             	add    eax,0x1
c0014076:	83 f8 04             	cmp    eax,0x4
c0014079:	0f 87 9d 00 00 00    	ja     c001411c <ipaddr_aton+0x2e8>
c001407f:	8b 04 85 10 09 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf6f0]
c0014086:	ff e0                	jmp    eax
c0014088:	b8 00 00 00 00       	mov    eax,0x0
c001408d:	e9 ce 00 00 00       	jmp    c0014160 <ipaddr_aton+0x32c>
c0014092:	66 90                	xchg   ax,ax
c0014094:	81 7c 24 1c ff ff ff 00 	cmp    DWORD PTR [esp+0x1c],0xffffff
c001409c:	76 0a                	jbe    c00140a8 <ipaddr_aton+0x274>
c001409e:	b8 00 00 00 00       	mov    eax,0x0
c00140a3:	e9 b8 00 00 00       	jmp    c0014160 <ipaddr_aton+0x32c>
c00140a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00140ac:	c1 e0 18             	shl    eax,0x18
c00140af:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c00140b3:	e9 80 00 00 00       	jmp    c0014138 <ipaddr_aton+0x304>
c00140b8:	81 7c 24 1c ff ff 00 00 	cmp    DWORD PTR [esp+0x1c],0xffff
c00140c0:	76 0a                	jbe    c00140cc <ipaddr_aton+0x298>
c00140c2:	b8 00 00 00 00       	mov    eax,0x0
c00140c7:	e9 94 00 00 00       	jmp    c0014160 <ipaddr_aton+0x32c>
c00140cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00140d0:	c1 e0 18             	shl    eax,0x18
c00140d3:	89 c2                	mov    edx,eax
c00140d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00140d9:	c1 e0 10             	shl    eax,0x10
c00140dc:	09 d0                	or     eax,edx
c00140de:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c00140e2:	eb 54                	jmp    c0014138 <ipaddr_aton+0x304>
c00140e4:	81 7c 24 1c ff 00 00 00 	cmp    DWORD PTR [esp+0x1c],0xff
c00140ec:	76 0a                	jbe    c00140f8 <ipaddr_aton+0x2c4>
c00140ee:	b8 00 00 00 00       	mov    eax,0x0
c00140f3:	eb 6b                	jmp    c0014160 <ipaddr_aton+0x32c>
c00140f5:	8d 76 00             	lea    esi,[esi+0x0]
c00140f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00140fc:	c1 e0 18             	shl    eax,0x18
c00140ff:	89 c2                	mov    edx,eax
c0014101:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014105:	c1 e0 10             	shl    eax,0x10
c0014108:	09 c2                	or     edx,eax
c001410a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001410e:	c1 e0 08             	shl    eax,0x8
c0014111:	09 d0                	or     eax,edx
c0014113:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c0014117:	eb 1f                	jmp    c0014138 <ipaddr_aton+0x304>
c0014119:	8d 76 00             	lea    esi,[esi+0x0]
c001411c:	83 ec 08             	sub    esp,0x8
c001411f:	68 05 09 03 c0       	push   0xc0030905
c0014124:	68 26 f6 02 c0       	push   0xc002f626
c0014129:	e8 66 b8 00 00       	call   c001f994 <CPrintf>
c001412e:	83 c4 10             	add    esp,0x10
c0014131:	eb 05                	jmp    c0014138 <ipaddr_aton+0x304>
c0014133:	90                   	nop
c0014134:	90                   	nop
c0014135:	8d 76 00             	lea    esi,[esi+0x0]
c0014138:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001413d:	74 19                	je     c0014158 <ipaddr_aton+0x324>
c001413f:	83 ec 0c             	sub    esp,0xc
c0014142:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014146:	e8 c1 ca fe ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c001414b:	83 c4 10             	add    esp,0x10
c001414e:	89 c2                	mov    edx,eax
c0014150:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014154:	89 10                	mov    DWORD PTR [eax],edx
c0014156:	66 90                	xchg   ax,ax
c0014158:	b8 01 00 00 00       	mov    eax,0x1
c001415d:	8d 76 00             	lea    esi,[esi+0x0]
c0014160:	83 c4 2c             	add    esp,0x2c
c0014163:	c3                   	ret    

c0014164 <ipaddr_addr>:
c0014164:	83 ec 1c             	sub    esp,0x1c
c0014167:	83 ec 08             	sub    esp,0x8
c001416a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001416e:	50                   	push   eax
c001416f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014173:	e8 bc fc ff ff       	call   c0013e34 <ipaddr_aton>
c0014178:	83 c4 10             	add    esp,0x10
c001417b:	85 c0                	test   eax,eax
c001417d:	74 09                	je     c0014188 <ipaddr_addr+0x24>
c001417f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014183:	eb 0b                	jmp    c0014190 <ipaddr_addr+0x2c>
c0014185:	8d 76 00             	lea    esi,[esi+0x0]
c0014188:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001418d:	8d 76 00             	lea    esi,[esi+0x0]
c0014190:	83 c4 1c             	add    esp,0x1c
c0014193:	c3                   	ret    

c0014194 <ipaddr_ntoa_r>:
c0014194:	83 ec 20             	sub    esp,0x20
c0014197:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001419f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00141a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00141a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00141a9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00141ad:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00141b1:	8d 44 24 08          	lea    eax,[esp+0x8]
c00141b5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00141b9:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00141be:	e9 f9 00 00 00       	jmp    c00142bc <ipaddr_ntoa_r+0x128>
c00141c3:	90                   	nop
c00141c4:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c00141c9:	8d 76 00             	lea    esi,[esi+0x0]
c00141cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00141d0:	8a 00                	mov    al,BYTE PTR [eax]
c00141d2:	0f b6 c8             	movzx  ecx,al
c00141d5:	ba cd cc cc cc       	mov    edx,0xcccccccd
c00141da:	89 c8                	mov    eax,ecx
c00141dc:	f7 e2                	mul    edx
c00141de:	c1 ea 03             	shr    edx,0x3
c00141e1:	89 d0                	mov    eax,edx
c00141e3:	c1 e0 02             	shl    eax,0x2
c00141e6:	01 d0                	add    eax,edx
c00141e8:	01 c0                	add    eax,eax
c00141ea:	29 c1                	sub    ecx,eax
c00141ec:	89 c8                	mov    eax,ecx
c00141ee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00141f2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00141f6:	8a 00                	mov    al,BYTE PTR [eax]
c00141f8:	0f b6 c0             	movzx  eax,al
c00141fb:	ba cd cc cc cc       	mov    edx,0xcccccccd
c0014200:	f7 e2                	mul    edx
c0014202:	89 d0                	mov    eax,edx
c0014204:	c1 e8 03             	shr    eax,0x3
c0014207:	88 c2                	mov    dl,al
c0014209:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001420d:	88 10                	mov    BYTE PTR [eax],dl
c001420f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014213:	83 c0 30             	add    eax,0x30
c0014216:	88 c1                	mov    cl,al
c0014218:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c001421c:	8d 50 01             	lea    edx,[eax+0x1]
c001421f:	88 54 24 16          	mov    BYTE PTR [esp+0x16],dl
c0014223:	0f b6 c0             	movzx  eax,al
c0014226:	88 ca                	mov    dl,cl
c0014228:	88 54 04 05          	mov    BYTE PTR [esp+eax*1+0x5],dl
c001422c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014230:	8a 00                	mov    al,BYTE PTR [eax]
c0014232:	0f b6 c0             	movzx  eax,al
c0014235:	85 c0                	test   eax,eax
c0014237:	75 93                	jne    c00141cc <ipaddr_ntoa_r+0x38>
c0014239:	eb 35                	jmp    c0014270 <ipaddr_ntoa_r+0xdc>
c001423b:	90                   	nop
c001423c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014240:	8d 50 01             	lea    edx,[eax+0x1]
c0014243:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014247:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001424b:	7f 0b                	jg     c0014258 <ipaddr_ntoa_r+0xc4>
c001424d:	b8 00 00 00 00       	mov    eax,0x0
c0014252:	e9 85 00 00 00       	jmp    c00142dc <ipaddr_ntoa_r+0x148>
c0014257:	90                   	nop
c0014258:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c001425d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014261:	8d 48 01             	lea    ecx,[eax+0x1]
c0014264:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014268:	8a 54 14 05          	mov    dl,BYTE PTR [esp+edx*1+0x5]
c001426c:	88 10                	mov    BYTE PTR [eax],dl
c001426e:	66 90                	xchg   ax,ax
c0014270:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c0014274:	8d 50 ff             	lea    edx,[eax-0x1]
c0014277:	88 54 24 16          	mov    BYTE PTR [esp+0x16],dl
c001427b:	0f b6 c0             	movzx  eax,al
c001427e:	85 c0                	test   eax,eax
c0014280:	75 ba                	jne    c001423c <ipaddr_ntoa_r+0xa8>
c0014282:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014286:	8d 50 01             	lea    edx,[eax+0x1]
c0014289:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001428d:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0014291:	7f 09                	jg     c001429c <ipaddr_ntoa_r+0x108>
c0014293:	b8 00 00 00 00       	mov    eax,0x0
c0014298:	eb 42                	jmp    c00142dc <ipaddr_ntoa_r+0x148>
c001429a:	66 90                	xchg   ax,ax
c001429c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00142a0:	8d 50 01             	lea    edx,[eax+0x1]
c00142a3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00142a7:	c6 00 2e             	mov    BYTE PTR [eax],0x2e
c00142aa:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c00142af:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00142b3:	83 c0 01             	add    eax,0x1
c00142b6:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00142ba:	66 90                	xchg   ax,ax
c00142bc:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00142c1:	83 f8 03             	cmp    eax,0x3
c00142c4:	0f 86 fa fe ff ff    	jbe    c00141c4 <ipaddr_ntoa_r+0x30>
c00142ca:	83 6c 24 1c 01       	sub    DWORD PTR [esp+0x1c],0x1
c00142cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00142d3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00142d6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00142da:	66 90                	xchg   ax,ax
c00142dc:	83 c4 20             	add    esp,0x20
c00142df:	c3                   	ret    

c00142e0 <ipaddr_ntoa>:
c00142e0:	6a 10                	push   0x10
c00142e2:	68 a4 a9 03 c0       	push   0xc003a9a4
c00142e7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00142eb:	e8 a4 fe ff ff       	call   c0014194 <ipaddr_ntoa_r>
c00142f0:	83 c4 0c             	add    esp,0xc
c00142f3:	c3                   	ret    

c00142f4 <ip_reass_dequeue_datagram>:
c00142f4:	83 ec 0c             	sub    esp,0xc
c00142f7:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c00142fc:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0014300:	75 0e                	jne    c0014310 <ip_reass_dequeue_datagram+0x1c>
c0014302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014306:	8b 00                	mov    eax,DWORD PTR [eax]
c0014308:	a3 b8 a9 03 c0       	mov    ds:0xc003a9b8,eax
c001430d:	eb 29                	jmp    c0014338 <ip_reass_dequeue_datagram+0x44>
c001430f:	90                   	nop
c0014310:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014315:	75 15                	jne    c001432c <ip_reass_dequeue_datagram+0x38>
c0014317:	83 ec 08             	sub    esp,0x8
c001431a:	68 2c 09 03 c0       	push   0xc003092c
c001431f:	68 26 f6 02 c0       	push   0xc002f626
c0014324:	e8 6b b6 00 00       	call   c001f994 <CPrintf>
c0014329:	83 c4 10             	add    esp,0x10
c001432c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014330:	8b 10                	mov    edx,DWORD PTR [eax]
c0014332:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014336:	89 10                	mov    DWORD PTR [eax],edx
c0014338:	83 ec 08             	sub    esp,0x8
c001433b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001433f:	6a 05                	push   0x5
c0014341:	e8 52 36 ff ff       	call   c0007998 <memp_free>
c0014346:	83 c4 10             	add    esp,0x10
c0014349:	90                   	nop
c001434a:	83 c4 0c             	add    esp,0xc
c001434d:	c3                   	ret    
c001434e:	66 90                	xchg   ax,ax

c0014350 <ip_reass_free_complete_datagram>:
c0014350:	83 ec 2c             	sub    esp,0x2c
c0014353:	66 c7 44 24 1e 00 00 	mov    WORD PTR [esp+0x1e],0x0
c001435a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001435e:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0014362:	75 18                	jne    c001437c <ip_reass_free_complete_datagram+0x2c>
c0014364:	83 ec 08             	sub    esp,0x8
c0014367:	68 45 09 03 c0       	push   0xc0030945
c001436c:	68 26 f6 02 c0       	push   0xc002f626
c0014371:	e8 1e b6 00 00       	call   c001f994 <CPrintf>
c0014376:	83 c4 10             	add    esp,0x10
c0014379:	8d 76 00             	lea    esi,[esi+0x0]
c001437c:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0014381:	74 21                	je     c00143a4 <ip_reass_free_complete_datagram+0x54>
c0014383:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014387:	8b 00                	mov    eax,DWORD PTR [eax]
c0014389:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c001438d:	74 15                	je     c00143a4 <ip_reass_free_complete_datagram+0x54>
c001438f:	83 ec 08             	sub    esp,0x8
c0014392:	68 51 09 03 c0       	push   0xc0030951
c0014397:	68 26 f6 02 c0       	push   0xc002f626
c001439c:	e8 f3 b5 00 00       	call   c001f994 <CPrintf>
c00143a1:	83 c4 10             	add    esp,0x10
c00143a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00143a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00143ab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00143ae:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00143b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00143b6:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00143ba:	0f b7 c0             	movzx  eax,ax
c00143bd:	85 c0                	test   eax,eax
c00143bf:	0f 85 a3 00 00 00    	jne    c0014468 <ip_reass_free_complete_datagram+0x118>
c00143c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00143c9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00143cc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00143d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00143d4:	8b 10                	mov    edx,DWORD PTR [eax]
c00143d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00143da:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00143dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00143e1:	8d 50 08             	lea    edx,[eax+0x8]
c00143e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00143e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00143eb:	83 ec 04             	sub    esp,0x4
c00143ee:	6a 14                	push   0x14
c00143f0:	52                   	push   edx
c00143f1:	50                   	push   eax
c00143f2:	e8 83 bf fe ff       	call   c000037a <memcpy>
c00143f7:	83 c4 10             	add    esp,0x10
c00143fa:	83 ec 08             	sub    esp,0x8
c00143fd:	6a 01                	push   0x1
c00143ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014403:	e8 4c eb ff ff       	call   c0012f54 <icmp_time_exceeded>
c0014408:	83 c4 10             	add    esp,0x10
c001440b:	83 ec 0c             	sub    esp,0xc
c001440e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014412:	e8 11 46 ff ff       	call   c0008a28 <pbuf_clen>
c0014417:	83 c4 10             	add    esp,0x10
c001441a:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001441e:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c0014423:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0014428:	01 d0                	add    eax,edx
c001442a:	3d ff ff 00 00       	cmp    eax,0xffff
c001442f:	7e 17                	jle    c0014448 <ip_reass_free_complete_datagram+0xf8>
c0014431:	83 ec 08             	sub    esp,0x8
c0014434:	68 63 09 03 c0       	push   0xc0030963
c0014439:	68 26 f6 02 c0       	push   0xc002f626
c001443e:	e8 51 b5 00 00       	call   c001f994 <CPrintf>
c0014443:	83 c4 10             	add    esp,0x10
c0014446:	66 90                	xchg   ax,ax
c0014448:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c001444d:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c0014452:	01 d0                	add    eax,edx
c0014454:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0014459:	83 ec 0c             	sub    esp,0xc
c001445c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014460:	e8 ef 3d ff ff       	call   c0008254 <pbuf_free>
c0014465:	83 c4 10             	add    esp,0x10
c0014468:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001446c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001446f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014473:	eb 7b                	jmp    c00144f0 <ip_reass_free_complete_datagram+0x1a0>
c0014475:	8d 76 00             	lea    esi,[esi+0x0]
c0014478:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001447c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001447f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014483:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014487:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001448b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001448f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014491:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014495:	83 ec 0c             	sub    esp,0xc
c0014498:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001449c:	e8 87 45 ff ff       	call   c0008a28 <pbuf_clen>
c00144a1:	83 c4 10             	add    esp,0x10
c00144a4:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00144a8:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00144ad:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c00144b2:	01 d0                	add    eax,edx
c00144b4:	3d ff ff 00 00       	cmp    eax,0xffff
c00144b9:	7e 15                	jle    c00144d0 <ip_reass_free_complete_datagram+0x180>
c00144bb:	83 ec 08             	sub    esp,0x8
c00144be:	68 63 09 03 c0       	push   0xc0030963
c00144c3:	68 26 f6 02 c0       	push   0xc002f626
c00144c8:	e8 c7 b4 00 00       	call   c001f994 <CPrintf>
c00144cd:	83 c4 10             	add    esp,0x10
c00144d0:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c00144d5:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c00144da:	01 d0                	add    eax,edx
c00144dc:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00144e1:	83 ec 0c             	sub    esp,0xc
c00144e4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00144e8:	e8 67 3d ff ff       	call   c0008254 <pbuf_free>
c00144ed:	83 c4 10             	add    esp,0x10
c00144f0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00144f5:	75 81                	jne    c0014478 <ip_reass_free_complete_datagram+0x128>
c00144f7:	83 ec 08             	sub    esp,0x8
c00144fa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00144fe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014502:	e8 ed fd ff ff       	call   c00142f4 <ip_reass_dequeue_datagram>
c0014507:	83 c4 10             	add    esp,0x10
c001450a:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c0014510:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c0014515:	0f b7 c0             	movzx  eax,ax
c0014518:	39 c2                	cmp    edx,eax
c001451a:	76 18                	jbe    c0014534 <ip_reass_free_complete_datagram+0x1e4>
c001451c:	83 ec 08             	sub    esp,0x8
c001451f:	68 80 09 03 c0       	push   0xc0030980
c0014524:	68 26 f6 02 c0       	push   0xc002f626
c0014529:	e8 66 b4 00 00       	call   c001f994 <CPrintf>
c001452e:	83 c4 10             	add    esp,0x10
c0014531:	8d 76 00             	lea    esi,[esi+0x0]
c0014534:	66 8b 15 b4 a9 03 c0 	mov    dx,WORD PTR ds:0xc003a9b4
c001453b:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0014540:	89 d1                	mov    ecx,edx
c0014542:	29 c1                	sub    ecx,eax
c0014544:	89 c8                	mov    eax,ecx
c0014546:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c001454c:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0014551:	83 c4 2c             	add    esp,0x2c
c0014554:	c3                   	ret    
c0014555:	8d 76 00             	lea    esi,[esi+0x0]

c0014558 <ip_reass_tmr>:
c0014558:	83 ec 1c             	sub    esp,0x1c
c001455b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014563:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c0014568:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001456c:	eb 62                	jmp    c00145d0 <ip_reass_tmr+0x78>
c001456e:	66 90                	xchg   ax,ax
c0014570:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014574:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c0014577:	0f b6 c0             	movzx  eax,al
c001457a:	85 c0                	test   eax,eax
c001457c:	74 2a                	je     c00145a8 <ip_reass_tmr+0x50>
c001457e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014582:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c0014585:	83 e8 01             	sub    eax,0x1
c0014588:	88 c2                	mov    dl,al
c001458a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001458e:	88 50 1f             	mov    BYTE PTR [eax+0x1f],dl
c0014591:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014595:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014599:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001459d:	8b 00                	mov    eax,DWORD PTR [eax]
c001459f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00145a3:	eb 2b                	jmp    c00145d0 <ip_reass_tmr+0x78>
c00145a5:	8d 76 00             	lea    esi,[esi+0x0]
c00145a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00145ac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00145b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00145b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00145b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00145ba:	83 ec 08             	sub    esp,0x8
c00145bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00145c1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00145c5:	e8 86 fd ff ff       	call   c0014350 <ip_reass_free_complete_datagram>
c00145ca:	83 c4 10             	add    esp,0x10
c00145cd:	8d 76 00             	lea    esi,[esi+0x0]
c00145d0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00145d5:	75 99                	jne    c0014570 <ip_reass_tmr+0x18>
c00145d7:	90                   	nop
c00145d8:	83 c4 1c             	add    esp,0x1c
c00145db:	c3                   	ret    

c00145dc <ip_reass_remove_oldest_datagram>:
c00145dc:	83 ec 2c             	sub    esp,0x2c
c00145df:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00145e7:	90                   	nop
c00145e8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00145f0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00145f8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014600:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c0014605:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014609:	e9 9a 00 00 00       	jmp    c00146a8 <ip_reass_remove_oldest_datagram+0xcc>
c001460e:	66 90                	xchg   ax,ax
c0014610:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014614:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
c0014617:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001461b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001461e:	39 c2                	cmp    edx,eax
c0014620:	75 2e                	jne    c0014650 <ip_reass_remove_oldest_datagram+0x74>
c0014622:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014626:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0014629:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001462d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014630:	39 c2                	cmp    edx,eax
c0014632:	75 1c                	jne    c0014650 <ip_reass_remove_oldest_datagram+0x74>
c0014634:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014638:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001463b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001463f:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014643:	0f b7 d2             	movzx  edx,dx
c0014646:	0f b7 c0             	movzx  eax,ax
c0014649:	39 c2                	cmp    edx,eax
c001464b:	74 3b                	je     c0014688 <ip_reass_remove_oldest_datagram+0xac>
c001464d:	8d 76 00             	lea    esi,[esi+0x0]
c0014650:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0014655:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001465a:	75 0c                	jne    c0014668 <ip_reass_remove_oldest_datagram+0x8c>
c001465c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014660:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014664:	eb 22                	jmp    c0014688 <ip_reass_remove_oldest_datagram+0xac>
c0014666:	66 90                	xchg   ax,ax
c0014668:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001466c:	8a 50 1f             	mov    dl,BYTE PTR [eax+0x1f]
c001466f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014673:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c0014676:	0f b6 d2             	movzx  edx,dl
c0014679:	0f b6 c0             	movzx  eax,al
c001467c:	39 c2                	cmp    edx,eax
c001467e:	77 08                	ja     c0014688 <ip_reass_remove_oldest_datagram+0xac>
c0014680:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014684:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014688:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001468c:	8b 00                	mov    eax,DWORD PTR [eax]
c001468e:	85 c0                	test   eax,eax
c0014690:	74 0a                	je     c001469c <ip_reass_remove_oldest_datagram+0xc0>
c0014692:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014696:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001469a:	66 90                	xchg   ax,ax
c001469c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00146a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00146a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00146a6:	66 90                	xchg   ax,ax
c00146a8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00146ad:	0f 85 5d ff ff ff    	jne    c0014610 <ip_reass_remove_oldest_datagram+0x34>
c00146b3:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00146b8:	74 22                	je     c00146dc <ip_reass_remove_oldest_datagram+0x100>
c00146ba:	83 ec 08             	sub    esp,0x8
c00146bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146c1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00146c5:	e8 86 fc ff ff       	call   c0014350 <ip_reass_free_complete_datagram>
c00146ca:	83 c4 10             	add    esp,0x10
c00146cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00146d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00146d5:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c00146d9:	8d 76 00             	lea    esi,[esi+0x0]
c00146dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146e0:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00146e4:	7d 0e                	jge    c00146f4 <ip_reass_remove_oldest_datagram+0x118>
c00146e6:	83 7c 24 0c 01       	cmp    DWORD PTR [esp+0xc],0x1
c00146eb:	0f 8f f7 fe ff ff    	jg     c00145e8 <ip_reass_remove_oldest_datagram+0xc>
c00146f1:	8d 76 00             	lea    esi,[esi+0x0]
c00146f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146f8:	83 c4 2c             	add    esp,0x2c
c00146fb:	c3                   	ret    

c00146fc <ip_reass_enqueue_new_datagram>:
c00146fc:	83 ec 1c             	sub    esp,0x1c
c00146ff:	83 ec 0c             	sub    esp,0xc
c0014702:	6a 05                	push   0x5
c0014704:	e8 63 31 ff ff       	call   c000786c <memp_malloc>
c0014709:	83 c4 10             	add    esp,0x10
c001470c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014710:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014715:	75 4d                	jne    c0014764 <ip_reass_enqueue_new_datagram+0x68>
c0014717:	83 ec 08             	sub    esp,0x8
c001471a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001471e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014722:	e8 b5 fe ff ff       	call   c00145dc <ip_reass_remove_oldest_datagram>
c0014727:	83 c4 10             	add    esp,0x10
c001472a:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c001472e:	7f 14                	jg     c0014744 <ip_reass_enqueue_new_datagram+0x48>
c0014730:	83 ec 0c             	sub    esp,0xc
c0014733:	6a 05                	push   0x5
c0014735:	e8 32 31 ff ff       	call   c000786c <memp_malloc>
c001473a:	83 c4 10             	add    esp,0x10
c001473d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014741:	8d 76 00             	lea    esi,[esi+0x0]
c0014744:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014749:	75 19                	jne    c0014764 <ip_reass_enqueue_new_datagram+0x68>
c001474b:	66 a1 5c 67 03 c0    	mov    ax,ds:0xc003675c
c0014751:	83 c0 01             	add    eax,0x1
c0014754:	66 a3 5c 67 03 c0    	mov    ds:0xc003675c,ax
c001475a:	b8 00 00 00 00       	mov    eax,0x0
c001475f:	eb 53                	jmp    c00147b4 <ip_reass_enqueue_new_datagram+0xb8>
c0014761:	8d 76 00             	lea    esi,[esi+0x0]
c0014764:	83 ec 04             	sub    esp,0x4
c0014767:	6a 20                	push   0x20
c0014769:	6a 00                	push   0x0
c001476b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001476f:	e8 7c bd fe ff       	call   c00004f0 <memset>
c0014774:	83 c4 10             	add    esp,0x10
c0014777:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001477b:	c6 40 1f 03          	mov    BYTE PTR [eax+0x1f],0x3
c001477f:	8b 15 b8 a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9b8
c0014785:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014789:	89 10                	mov    DWORD PTR [eax],edx
c001478b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001478f:	a3 b8 a9 03 c0       	mov    ds:0xc003a9b8,eax
c0014794:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014798:	83 c0 08             	add    eax,0x8
c001479b:	83 ec 04             	sub    esp,0x4
c001479e:	6a 14                	push   0x14
c00147a0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00147a4:	50                   	push   eax
c00147a5:	e8 d0 bb fe ff       	call   c000037a <memcpy>
c00147aa:	83 c4 10             	add    esp,0x10
c00147ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00147b1:	8d 76 00             	lea    esi,[esi+0x0]
c00147b4:	83 c4 1c             	add    esp,0x1c
c00147b7:	c3                   	ret    

c00147b8 <ip_reass_chain_frag_into_datagram_and_validate>:
c00147b8:	53                   	push   ebx
c00147b9:	83 ec 28             	sub    esp,0x28
c00147bc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00147c4:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c00147cc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00147d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00147d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00147d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00147db:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c00147df:	0f b7 c0             	movzx  eax,ax
c00147e2:	83 ec 0c             	sub    esp,0xc
c00147e5:	50                   	push   eax
c00147e6:	e8 fd c3 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00147eb:	83 c4 10             	add    esp,0x10
c00147ee:	89 c3                	mov    ebx,eax
c00147f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00147f4:	66 8b 00             	mov    ax,WORD PTR [eax]
c00147f7:	0f b7 c0             	movzx  eax,ax
c00147fa:	83 ec 0c             	sub    esp,0xc
c00147fd:	50                   	push   eax
c00147fe:	e8 e5 c3 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014803:	83 c4 10             	add    esp,0x10
c0014806:	0f b7 c0             	movzx  eax,ax
c0014809:	c1 e8 08             	shr    eax,0x8
c001480c:	83 e0 0f             	and    eax,0xf
c001480f:	c1 e0 02             	shl    eax,0x2
c0014812:	89 d9                	mov    ecx,ebx
c0014814:	29 c1                	sub    ecx,eax
c0014816:	89 c8                	mov    eax,ecx
c0014818:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c001481d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014821:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014825:	0f b7 c0             	movzx  eax,ax
c0014828:	83 ec 0c             	sub    esp,0xc
c001482b:	50                   	push   eax
c001482c:	e8 b7 c3 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014831:	83 c4 10             	add    esp,0x10
c0014834:	25 ff 1f 00 00       	and    eax,0x1fff
c0014839:	c1 e0 03             	shl    eax,0x3
c001483c:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0014841:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014845:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014848:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001484c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014850:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014856:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001485a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001485e:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0014862:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014866:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001486b:	01 d0                	add    eax,edx
c001486d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014871:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0014875:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014879:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001487c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014880:	e9 13 01 00 00       	jmp    c0014998 <ip_reass_chain_frag_into_datagram_and_validate+0x1e0>
c0014885:	8d 76 00             	lea    esi,[esi+0x0]
c0014888:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001488c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001488f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014893:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014897:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c001489b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001489f:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00148a3:	0f b7 d2             	movzx  edx,dx
c00148a6:	0f b7 c0             	movzx  eax,ax
c00148a9:	39 c2                	cmp    edx,eax
c00148ab:	73 6f                	jae    c001491c <ip_reass_chain_frag_into_datagram_and_validate+0x164>
c00148ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00148b1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00148b5:	89 10                	mov    DWORD PTR [eax],edx
c00148b7:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00148bc:	74 4e                	je     c001490c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
c00148be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00148c2:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c00148c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00148ca:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00148ce:	0f b7 d2             	movzx  edx,dx
c00148d1:	0f b7 c0             	movzx  eax,ax
c00148d4:	39 c2                	cmp    edx,eax
c00148d6:	0f 82 bc 02 00 00    	jb     c0014b98 <ip_reass_chain_frag_into_datagram_and_validate+0x3e0>
c00148dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00148e0:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00148e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00148e8:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00148ec:	0f b7 d2             	movzx  edx,dx
c00148ef:	0f b7 c0             	movzx  eax,ax
c00148f2:	39 c2                	cmp    edx,eax
c00148f4:	0f 87 9e 02 00 00    	ja     c0014b98 <ip_reass_chain_frag_into_datagram_and_validate+0x3e0>
c00148fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00148fe:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014902:	89 10                	mov    DWORD PTR [eax],edx
c0014904:	e9 9b 00 00 00       	jmp    c00149a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
c0014909:	8d 76 00             	lea    esi,[esi+0x0]
c001490c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014910:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014914:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0014917:	e9 88 00 00 00       	jmp    c00149a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
c001491c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014920:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014924:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014928:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001492c:	0f b7 d2             	movzx  edx,dx
c001492f:	0f b7 c0             	movzx  eax,ax
c0014932:	39 c2                	cmp    edx,eax
c0014934:	0f 84 62 02 00 00    	je     c0014b9c <ip_reass_chain_frag_into_datagram_and_validate+0x3e4>
c001493a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001493e:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014942:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014946:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c001494a:	0f b7 d2             	movzx  edx,dx
c001494d:	0f b7 c0             	movzx  eax,ax
c0014950:	39 c2                	cmp    edx,eax
c0014952:	0f 82 48 02 00 00    	jb     c0014ba0 <ip_reass_chain_frag_into_datagram_and_validate+0x3e8>
c0014958:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001495d:	74 25                	je     c0014984 <ip_reass_chain_frag_into_datagram_and_validate+0x1cc>
c001495f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014963:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014967:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001496b:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001496f:	0f b7 d2             	movzx  edx,dx
c0014972:	0f b7 c0             	movzx  eax,ax
c0014975:	39 c2                	cmp    edx,eax
c0014977:	74 0b                	je     c0014984 <ip_reass_chain_frag_into_datagram_and_validate+0x1cc>
c0014979:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014981:	8d 76 00             	lea    esi,[esi+0x0]
c0014984:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014988:	8b 00                	mov    eax,DWORD PTR [eax]
c001498a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001498e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014992:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014996:	66 90                	xchg   ax,ax
c0014998:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001499d:	0f 85 e5 fe ff ff    	jne    c0014888 <ip_reass_chain_frag_into_datagram_and_validate+0xd0>
c00149a3:	90                   	nop
c00149a4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00149a9:	0f 85 95 00 00 00    	jne    c0014a44 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c00149af:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00149b4:	74 62                	je     c0014a18 <ip_reass_chain_frag_into_datagram_and_validate+0x260>
c00149b6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00149ba:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00149be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149c2:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00149c6:	0f b7 d2             	movzx  edx,dx
c00149c9:	0f b7 c0             	movzx  eax,ax
c00149cc:	39 c2                	cmp    edx,eax
c00149ce:	76 18                	jbe    c00149e8 <ip_reass_chain_frag_into_datagram_and_validate+0x230>
c00149d0:	83 ec 08             	sub    esp,0x8
c00149d3:	68 9b 09 03 c0       	push   0xc003099b
c00149d8:	68 26 f6 02 c0       	push   0xc002f626
c00149dd:	e8 b2 af 00 00       	call   c001f994 <CPrintf>
c00149e2:	83 c4 10             	add    esp,0x10
c00149e5:	8d 76 00             	lea    esi,[esi+0x0]
c00149e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00149ec:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00149f0:	89 10                	mov    DWORD PTR [eax],edx
c00149f2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00149f6:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00149fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149fe:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014a02:	0f b7 d2             	movzx  edx,dx
c0014a05:	0f b7 c0             	movzx  eax,ax
c0014a08:	39 c2                	cmp    edx,eax
c0014a0a:	74 38                	je     c0014a44 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014a0c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014a14:	eb 2e                	jmp    c0014a44 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014a16:	66 90                	xchg   ax,ax
c0014a18:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a1c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014a1f:	85 c0                	test   eax,eax
c0014a21:	74 15                	je     c0014a38 <ip_reass_chain_frag_into_datagram_and_validate+0x280>
c0014a23:	83 ec 08             	sub    esp,0x8
c0014a26:	68 dc 09 03 c0       	push   0xc00309dc
c0014a2b:	68 26 f6 02 c0       	push   0xc002f626
c0014a30:	e8 5f af 00 00       	call   c001f994 <CPrintf>
c0014a35:	83 c4 10             	add    esp,0x10
c0014a38:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a3c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014a40:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0014a43:	90                   	nop
c0014a44:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a48:	8a 40 1e             	mov    al,BYTE PTR [eax+0x1e]
c0014a4b:	0f b6 c0             	movzx  eax,al
c0014a4e:	83 e0 01             	and    eax,0x1
c0014a51:	0f 84 39 01 00 00    	je     c0014b90 <ip_reass_chain_frag_into_datagram_and_validate+0x3d8>
c0014a57:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014a5c:	0f 84 26 01 00 00    	je     c0014b88 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014a62:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a66:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014a69:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014a6c:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014a70:	0f b7 c0             	movzx  eax,ax
c0014a73:	85 c0                	test   eax,eax
c0014a75:	74 0d                	je     c0014a84 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>
c0014a77:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014a7f:	e9 04 01 00 00       	jmp    c0014b88 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014a84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a88:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014a8c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a90:	8b 00                	mov    eax,DWORD PTR [eax]
c0014a92:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014a96:	eb 44                	jmp    c0014adc <ip_reass_chain_frag_into_datagram_and_validate+0x324>
c0014a98:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014a9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014a9f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014aa3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014aa7:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014aab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014aaf:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014ab3:	0f b7 d2             	movzx  edx,dx
c0014ab6:	0f b7 c0             	movzx  eax,ax
c0014ab9:	39 c2                	cmp    edx,eax
c0014abb:	74 0b                	je     c0014ac8 <ip_reass_chain_frag_into_datagram_and_validate+0x310>
c0014abd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014ac5:	eb 1d                	jmp    c0014ae4 <ip_reass_chain_frag_into_datagram_and_validate+0x32c>
c0014ac7:	90                   	nop
c0014ac8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014acc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014ad0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014ad4:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ad6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014ada:	66 90                	xchg   ax,ax
c0014adc:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014ae1:	75 b5                	jne    c0014a98 <ip_reass_chain_frag_into_datagram_and_validate+0x2e0>
c0014ae3:	90                   	nop
c0014ae4:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014ae9:	0f 84 99 00 00 00    	je     c0014b88 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014aef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014af3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014af6:	85 c0                	test   eax,eax
c0014af8:	75 16                	jne    c0014b10 <ip_reass_chain_frag_into_datagram_and_validate+0x358>
c0014afa:	83 ec 08             	sub    esp,0x8
c0014afd:	68 b9 09 03 c0       	push   0xc00309b9
c0014b02:	68 26 f6 02 c0       	push   0xc002f626
c0014b07:	e8 88 ae 00 00       	call   c001f994 <CPrintf>
c0014b0c:	83 c4 10             	add    esp,0x10
c0014b0f:	90                   	nop
c0014b10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b14:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014b17:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014b1a:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0014b1e:	75 18                	jne    c0014b38 <ip_reass_chain_frag_into_datagram_and_validate+0x380>
c0014b20:	83 ec 08             	sub    esp,0x8
c0014b23:	68 b9 09 03 c0       	push   0xc00309b9
c0014b28:	68 26 f6 02 c0       	push   0xc002f626
c0014b2d:	e8 62 ae 00 00       	call   c001f994 <CPrintf>
c0014b32:	83 c4 10             	add    esp,0x10
c0014b35:	8d 76 00             	lea    esi,[esi+0x0]
c0014b38:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b3e:	85 c0                	test   eax,eax
c0014b40:	74 16                	je     c0014b58 <ip_reass_chain_frag_into_datagram_and_validate+0x3a0>
c0014b42:	83 ec 08             	sub    esp,0x8
c0014b45:	68 14 0a 03 c0       	push   0xc0030a14
c0014b4a:	68 26 f6 02 c0       	push   0xc002f626
c0014b4f:	e8 40 ae 00 00       	call   c001f994 <CPrintf>
c0014b54:	83 c4 10             	add    esp,0x10
c0014b57:	90                   	nop
c0014b58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b5c:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014b60:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b64:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014b67:	0f b7 d2             	movzx  edx,dx
c0014b6a:	0f b7 c0             	movzx  eax,ax
c0014b6d:	39 c2                	cmp    edx,eax
c0014b6f:	74 17                	je     c0014b88 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014b71:	83 ec 08             	sub    esp,0x8
c0014b74:	68 38 0a 03 c0       	push   0xc0030a38
c0014b79:	68 26 f6 02 c0       	push   0xc002f626
c0014b7e:	e8 11 ae 00 00       	call   c001f994 <CPrintf>
c0014b83:	83 c4 10             	add    esp,0x10
c0014b86:	66 90                	xchg   ax,ax
c0014b88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014b8c:	eb 52                	jmp    c0014be0 <ip_reass_chain_frag_into_datagram_and_validate+0x428>
c0014b8e:	66 90                	xchg   ax,ax
c0014b90:	b8 00 00 00 00       	mov    eax,0x0
c0014b95:	eb 49                	jmp    c0014be0 <ip_reass_chain_frag_into_datagram_and_validate+0x428>
c0014b97:	90                   	nop
c0014b98:	90                   	nop
c0014b99:	eb 09                	jmp    c0014ba4 <ip_reass_chain_frag_into_datagram_and_validate+0x3ec>
c0014b9b:	90                   	nop
c0014b9c:	90                   	nop
c0014b9d:	eb 05                	jmp    c0014ba4 <ip_reass_chain_frag_into_datagram_and_validate+0x3ec>
c0014b9f:	90                   	nop
c0014ba0:	90                   	nop
c0014ba1:	8d 76 00             	lea    esi,[esi+0x0]
c0014ba4:	83 ec 0c             	sub    esp,0xc
c0014ba7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014bab:	e8 78 3e ff ff       	call   c0008a28 <pbuf_clen>
c0014bb0:	83 c4 10             	add    esp,0x10
c0014bb3:	66 8b 15 b4 a9 03 c0 	mov    dx,WORD PTR ds:0xc003a9b4
c0014bba:	0f b6 c0             	movzx  eax,al
c0014bbd:	89 d3                	mov    ebx,edx
c0014bbf:	29 c3                	sub    ebx,eax
c0014bc1:	89 d8                	mov    eax,ebx
c0014bc3:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c0014bc9:	83 ec 0c             	sub    esp,0xc
c0014bcc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014bd0:	e8 7f 36 ff ff       	call   c0008254 <pbuf_free>
c0014bd5:	83 c4 10             	add    esp,0x10
c0014bd8:	b8 00 00 00 00       	mov    eax,0x0
c0014bdd:	8d 76 00             	lea    esi,[esi+0x0]
c0014be0:	83 c4 28             	add    esp,0x28
c0014be3:	5b                   	pop    ebx
c0014be4:	c3                   	ret    
c0014be5:	8d 76 00             	lea    esi,[esi+0x0]

c0014be8 <ip_reass>:
c0014be8:	53                   	push   ebx
c0014be9:	83 ec 28             	sub    esp,0x28
c0014bec:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014bf4:	66 a1 52 67 03 c0    	mov    ax,ds:0xc0036752
c0014bfa:	83 c0 01             	add    eax,0x1
c0014bfd:	66 a3 52 67 03 c0    	mov    ds:0xc0036752,ax
c0014c03:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c07:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014c0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014c0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c12:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014c15:	0f b7 c0             	movzx  eax,ax
c0014c18:	83 ec 0c             	sub    esp,0xc
c0014c1b:	50                   	push   eax
c0014c1c:	e8 c7 bf fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014c21:	83 c4 10             	add    esp,0x10
c0014c24:	0f b7 c0             	movzx  eax,ax
c0014c27:	c1 e8 08             	shr    eax,0x8
c0014c2a:	0f b7 c0             	movzx  eax,ax
c0014c2d:	83 e0 0f             	and    eax,0xf
c0014c30:	c1 e0 02             	shl    eax,0x2
c0014c33:	83 f8 14             	cmp    eax,0x14
c0014c36:	74 14                	je     c0014c4c <ip_reass+0x64>
c0014c38:	66 a1 64 67 03 c0    	mov    ax,ds:0xc0036764
c0014c3e:	83 c0 01             	add    eax,0x1
c0014c41:	66 a3 64 67 03 c0    	mov    ds:0xc0036764,ax
c0014c47:	e9 68 03 00 00       	jmp    c0014fb4 <ip_reass+0x3cc>
c0014c4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c50:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014c54:	0f b7 c0             	movzx  eax,ax
c0014c57:	83 ec 0c             	sub    esp,0xc
c0014c5a:	50                   	push   eax
c0014c5b:	e8 88 bf fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014c60:	83 c4 10             	add    esp,0x10
c0014c63:	25 ff 1f 00 00       	and    eax,0x1fff
c0014c68:	c1 e0 03             	shl    eax,0x3
c0014c6b:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0014c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c74:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0014c78:	0f b7 c0             	movzx  eax,ax
c0014c7b:	83 ec 0c             	sub    esp,0xc
c0014c7e:	50                   	push   eax
c0014c7f:	e8 64 bf fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014c84:	83 c4 10             	add    esp,0x10
c0014c87:	89 c3                	mov    ebx,eax
c0014c89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c8d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014c90:	0f b7 c0             	movzx  eax,ax
c0014c93:	83 ec 0c             	sub    esp,0xc
c0014c96:	50                   	push   eax
c0014c97:	e8 4c bf fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014c9c:	83 c4 10             	add    esp,0x10
c0014c9f:	0f b7 c0             	movzx  eax,ax
c0014ca2:	c1 e8 08             	shr    eax,0x8
c0014ca5:	83 e0 0f             	and    eax,0xf
c0014ca8:	c1 e0 02             	shl    eax,0x2
c0014cab:	89 d9                	mov    ecx,ebx
c0014cad:	29 c1                	sub    ecx,eax
c0014caf:	89 c8                	mov    eax,ecx
c0014cb1:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0014cb6:	83 ec 0c             	sub    esp,0xc
c0014cb9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014cbd:	e8 66 3d ff ff       	call   c0008a28 <pbuf_clen>
c0014cc2:	83 c4 10             	add    esp,0x10
c0014cc5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0014cc9:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c0014ccf:	0f b7 d0             	movzx  edx,ax
c0014cd2:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014cd7:	01 d0                	add    eax,edx
c0014cd9:	83 f8 0a             	cmp    eax,0xa
c0014cdc:	7e 42                	jle    c0014d20 <ip_reass+0x138>
c0014cde:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014ce3:	83 ec 08             	sub    esp,0x8
c0014ce6:	50                   	push   eax
c0014ce7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ceb:	e8 ec f8 ff ff       	call   c00145dc <ip_reass_remove_oldest_datagram>
c0014cf0:	83 c4 10             	add    esp,0x10
c0014cf3:	85 c0                	test   eax,eax
c0014cf5:	74 15                	je     c0014d0c <ip_reass+0x124>
c0014cf7:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c0014cfd:	0f b7 d0             	movzx  edx,ax
c0014d00:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014d05:	01 d0                	add    eax,edx
c0014d07:	83 f8 0a             	cmp    eax,0xa
c0014d0a:	7e 14                	jle    c0014d20 <ip_reass+0x138>
c0014d0c:	66 a1 5c 67 03 c0    	mov    ax,ds:0xc003675c
c0014d12:	83 c0 01             	add    eax,0x1
c0014d15:	66 a3 5c 67 03 c0    	mov    ds:0xc003675c,ax
c0014d1b:	e9 94 02 00 00       	jmp    c0014fb4 <ip_reass+0x3cc>
c0014d20:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c0014d25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d29:	eb 65                	jmp    c0014d90 <ip_reass+0x1a8>
c0014d2b:	90                   	nop
c0014d2c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d30:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
c0014d33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d37:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014d3a:	39 c2                	cmp    edx,eax
c0014d3c:	75 3e                	jne    c0014d7c <ip_reass+0x194>
c0014d3e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d42:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0014d45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014d4c:	39 c2                	cmp    edx,eax
c0014d4e:	75 2c                	jne    c0014d7c <ip_reass+0x194>
c0014d50:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d54:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0014d57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d5b:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014d5f:	0f b7 d2             	movzx  edx,dx
c0014d62:	0f b7 c0             	movzx  eax,ax
c0014d65:	39 c2                	cmp    edx,eax
c0014d67:	75 13                	jne    c0014d7c <ip_reass+0x194>
c0014d69:	66 a1 66 67 03 c0    	mov    ax,ds:0xc0036766
c0014d6f:	83 c0 01             	add    eax,0x1
c0014d72:	66 a3 66 67 03 c0    	mov    ds:0xc0036766,ax
c0014d78:	eb 1e                	jmp    c0014d98 <ip_reass+0x1b0>
c0014d7a:	66 90                	xchg   ax,ax
c0014d7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d80:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014d84:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d88:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d8e:	66 90                	xchg   ax,ax
c0014d90:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014d95:	75 95                	jne    c0014d2c <ip_reass+0x144>
c0014d97:	90                   	nop
c0014d98:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014d9d:	75 25                	jne    c0014dc4 <ip_reass+0x1dc>
c0014d9f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014da4:	83 ec 08             	sub    esp,0x8
c0014da7:	50                   	push   eax
c0014da8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014dac:	e8 4b f9 ff ff       	call   c00146fc <ip_reass_enqueue_new_datagram>
c0014db1:	83 c4 10             	add    esp,0x10
c0014db4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014db8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014dbd:	75 61                	jne    c0014e20 <ip_reass+0x238>
c0014dbf:	e9 f0 01 00 00       	jmp    c0014fb4 <ip_reass+0x3cc>
c0014dc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014dc8:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014dcc:	0f b7 c0             	movzx  eax,ax
c0014dcf:	83 ec 0c             	sub    esp,0xc
c0014dd2:	50                   	push   eax
c0014dd3:	e8 10 be fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014dd8:	83 c4 10             	add    esp,0x10
c0014ddb:	0f b7 c0             	movzx  eax,ax
c0014dde:	25 ff 1f 00 00       	and    eax,0x1fff
c0014de3:	75 3b                	jne    c0014e20 <ip_reass+0x238>
c0014de5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014de9:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0014ded:	0f b7 c0             	movzx  eax,ax
c0014df0:	83 ec 0c             	sub    esp,0xc
c0014df3:	50                   	push   eax
c0014df4:	e8 ef bd fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014df9:	83 c4 10             	add    esp,0x10
c0014dfc:	0f b7 c0             	movzx  eax,ax
c0014dff:	25 ff 1f 00 00       	and    eax,0x1fff
c0014e04:	74 1a                	je     c0014e20 <ip_reass+0x238>
c0014e06:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e0a:	83 c0 08             	add    eax,0x8
c0014e0d:	83 ec 04             	sub    esp,0x4
c0014e10:	6a 14                	push   0x14
c0014e12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014e16:	50                   	push   eax
c0014e17:	e8 5e b5 fe ff       	call   c000037a <memcpy>
c0014e1c:	83 c4 10             	add    esp,0x10
c0014e1f:	90                   	nop
c0014e20:	0f b6 54 24 0b       	movzx  edx,BYTE PTR [esp+0xb]
c0014e25:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c0014e2b:	01 d0                	add    eax,edx
c0014e2d:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c0014e33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e37:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014e3b:	0f b7 c0             	movzx  eax,ax
c0014e3e:	83 e0 20             	and    eax,0x20
c0014e41:	75 29                	jne    c0014e6c <ip_reass+0x284>
c0014e43:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e47:	8a 40 1e             	mov    al,BYTE PTR [eax+0x1e]
c0014e4a:	83 c8 01             	or     eax,0x1
c0014e4d:	88 c2                	mov    dl,al
c0014e4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e53:	88 50 1e             	mov    BYTE PTR [eax+0x1e],dl
c0014e56:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0014e5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014e5f:	01 d0                	add    eax,edx
c0014e61:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014e65:	66 89 42 1c          	mov    WORD PTR [edx+0x1c],ax
c0014e69:	8d 76 00             	lea    esi,[esi+0x0]
c0014e6c:	83 ec 08             	sub    esp,0x8
c0014e6f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0014e73:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014e77:	e8 3c f9 ff ff       	call   c00147b8 <ip_reass_chain_frag_into_datagram_and_validate>
c0014e7c:	83 c4 10             	add    esp,0x10
c0014e7f:	85 c0                	test   eax,eax
c0014e81:	0f 84 25 01 00 00    	je     c0014fac <ip_reass+0x3c4>
c0014e87:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e8b:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014e8e:	83 c0 14             	add    eax,0x14
c0014e91:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014e95:	66 89 42 1c          	mov    WORD PTR [edx+0x1c],ax
c0014e99:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e9d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014ea0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014ea3:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ea5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014ea9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ead:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014eb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014eb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014eb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ebb:	83 c0 08             	add    eax,0x8
c0014ebe:	83 ec 04             	sub    esp,0x4
c0014ec1:	6a 14                	push   0x14
c0014ec3:	50                   	push   eax
c0014ec4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ec8:	e8 ad b4 fe ff       	call   c000037a <memcpy>
c0014ecd:	83 c4 10             	add    esp,0x10
c0014ed0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ed4:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014ed7:	0f b7 c0             	movzx  eax,ax
c0014eda:	83 ec 0c             	sub    esp,0xc
c0014edd:	50                   	push   eax
c0014ede:	e8 05 bd fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014ee3:	83 c4 10             	add    esp,0x10
c0014ee6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014eea:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0014eee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ef2:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0014ef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014efc:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c0014f02:	83 ec 08             	sub    esp,0x8
c0014f05:	6a 14                	push   0x14
c0014f07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f0b:	e8 e0 e4 ff ff       	call   c00133f0 <inet_chksum>
c0014f10:	83 c4 10             	add    esp,0x10
c0014f13:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014f17:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0014f1b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f1f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014f22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014f26:	eb 3c                	jmp    c0014f64 <ip_reass+0x37c>
c0014f28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014f2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014f2f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014f33:	83 ec 08             	sub    esp,0x8
c0014f36:	6a ec                	push   0xffffffec
c0014f38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014f3c:	e8 77 31 ff ff       	call   c00080b8 <pbuf_header>
c0014f41:	83 c4 10             	add    esp,0x10
c0014f44:	83 ec 08             	sub    esp,0x8
c0014f47:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014f4b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014f4f:	e8 38 3b ff ff       	call   c0008a8c <pbuf_cat>
c0014f54:	83 c4 10             	add    esp,0x10
c0014f57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014f5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f5d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014f61:	8d 76 00             	lea    esi,[esi+0x0]
c0014f64:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0014f69:	75 bd                	jne    c0014f28 <ip_reass+0x340>
c0014f6b:	83 ec 08             	sub    esp,0x8
c0014f6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f72:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014f76:	e8 79 f3 ff ff       	call   c00142f4 <ip_reass_dequeue_datagram>
c0014f7b:	83 c4 10             	add    esp,0x10
c0014f7e:	83 ec 0c             	sub    esp,0xc
c0014f81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014f85:	e8 9e 3a ff ff       	call   c0008a28 <pbuf_clen>
c0014f8a:	83 c4 10             	add    esp,0x10
c0014f8d:	66 8b 15 b4 a9 03 c0 	mov    dx,WORD PTR ds:0xc003a9b4
c0014f94:	0f b6 c0             	movzx  eax,al
c0014f97:	89 d3                	mov    ebx,edx
c0014f99:	29 c3                	sub    ebx,eax
c0014f9b:	89 d8                	mov    eax,ebx
c0014f9d:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c0014fa3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014fa7:	eb 2f                	jmp    c0014fd8 <ip_reass+0x3f0>
c0014fa9:	8d 76 00             	lea    esi,[esi+0x0]
c0014fac:	b8 00 00 00 00       	mov    eax,0x0
c0014fb1:	eb 25                	jmp    c0014fd8 <ip_reass+0x3f0>
c0014fb3:	90                   	nop
c0014fb4:	66 a1 56 67 03 c0    	mov    ax,ds:0xc0036756
c0014fba:	83 c0 01             	add    eax,0x1
c0014fbd:	66 a3 56 67 03 c0    	mov    ds:0xc0036756,ax
c0014fc3:	83 ec 0c             	sub    esp,0xc
c0014fc6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014fca:	e8 85 32 ff ff       	call   c0008254 <pbuf_free>
c0014fcf:	83 c4 10             	add    esp,0x10
c0014fd2:	b8 00 00 00 00       	mov    eax,0x0
c0014fd7:	90                   	nop
c0014fd8:	83 c4 28             	add    esp,0x28
c0014fdb:	5b                   	pop    ebx
c0014fdc:	c3                   	ret    
c0014fdd:	8d 76 00             	lea    esi,[esi+0x0]

c0014fe0 <ip_frag_alloc_pbuf_custom_ref>:
c0014fe0:	83 ec 0c             	sub    esp,0xc
c0014fe3:	83 ec 0c             	sub    esp,0xc
c0014fe6:	6a 06                	push   0x6
c0014fe8:	e8 7f 28 ff ff       	call   c000786c <memp_malloc>
c0014fed:	83 c4 10             	add    esp,0x10
c0014ff0:	83 c4 0c             	add    esp,0xc
c0014ff3:	c3                   	ret    

c0014ff4 <ip_frag_free_pbuf_custom_ref>:
c0014ff4:	83 ec 0c             	sub    esp,0xc
c0014ff7:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014ffc:	75 16                	jne    c0015014 <ip_frag_free_pbuf_custom_ref+0x20>
c0014ffe:	83 ec 08             	sub    esp,0x8
c0015001:	68 56 fa 02 c0       	push   0xc002fa56
c0015006:	68 26 f6 02 c0       	push   0xc002f626
c001500b:	e8 84 a9 00 00       	call   c001f994 <CPrintf>
c0015010:	83 c4 10             	add    esp,0x10
c0015013:	90                   	nop
c0015014:	83 ec 08             	sub    esp,0x8
c0015017:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001501b:	6a 06                	push   0x6
c001501d:	e8 76 29 ff ff       	call   c0007998 <memp_free>
c0015022:	83 c4 10             	add    esp,0x10
c0015025:	90                   	nop
c0015026:	83 c4 0c             	add    esp,0xc
c0015029:	c3                   	ret    
c001502a:	66 90                	xchg   ax,ax

c001502c <ipfrag_free_pbuf_custom>:
c001502c:	83 ec 1c             	sub    esp,0x1c
c001502f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015033:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015037:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001503c:	75 16                	jne    c0015054 <ipfrag_free_pbuf_custom+0x28>
c001503e:	83 ec 08             	sub    esp,0x8
c0015041:	68 c6 09 03 c0       	push   0xc00309c6
c0015046:	68 26 f6 02 c0       	push   0xc002f626
c001504b:	e8 44 a9 00 00       	call   c001f994 <CPrintf>
c0015050:	83 c4 10             	add    esp,0x10
c0015053:	90                   	nop
c0015054:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015058:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001505c:	74 16                	je     c0015074 <ipfrag_free_pbuf_custom+0x48>
c001505e:	83 ec 08             	sub    esp,0x8
c0015061:	68 d2 09 03 c0       	push   0xc00309d2
c0015066:	68 26 f6 02 c0       	push   0xc002f626
c001506b:	e8 24 a9 00 00       	call   c001f994 <CPrintf>
c0015070:	83 c4 10             	add    esp,0x10
c0015073:	90                   	nop
c0015074:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015078:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001507b:	85 c0                	test   eax,eax
c001507d:	74 15                	je     c0015094 <ipfrag_free_pbuf_custom+0x68>
c001507f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015083:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015086:	83 ec 0c             	sub    esp,0xc
c0015089:	50                   	push   eax
c001508a:	e8 c5 31 ff ff       	call   c0008254 <pbuf_free>
c001508f:	83 c4 10             	add    esp,0x10
c0015092:	66 90                	xchg   ax,ax
c0015094:	83 ec 0c             	sub    esp,0xc
c0015097:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001509b:	e8 54 ff ff ff       	call   c0014ff4 <ip_frag_free_pbuf_custom_ref>
c00150a0:	83 c4 10             	add    esp,0x10
c00150a3:	90                   	nop
c00150a4:	83 c4 1c             	add    esp,0x1c
c00150a7:	c3                   	ret    

c00150a8 <ip_frag>:
c00150a8:	53                   	push   ebx
c00150a9:	83 ec 38             	sub    esp,0x38
c00150ac:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00150b0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00150b3:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
c00150b8:	66 c7 44 24 2a 14 00 	mov    WORD PTR [esp+0x2a],0x14
c00150bf:	66 c7 44 24 26 00 00 	mov    WORD PTR [esp+0x26],0x0
c00150c6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00150ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00150cd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00150d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00150d5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00150d9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00150dd:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00150e1:	0f b7 c0             	movzx  eax,ax
c00150e4:	83 ec 0c             	sub    esp,0xc
c00150e7:	50                   	push   eax
c00150e8:	e8 fb ba fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00150ed:	83 c4 10             	add    esp,0x10
c00150f0:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c00150f5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00150f9:	25 ff 1f 00 00       	and    eax,0x1fff
c00150fe:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0015103:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015107:	25 00 20 00 00       	and    eax,0x2000
c001510c:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0015111:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015115:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0015118:	83 e8 14             	sub    eax,0x14
c001511b:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0015120:	0f b7 44 24 22       	movzx  eax,WORD PTR [esp+0x22]
c0015125:	83 e8 14             	sub    eax,0x14
c0015128:	79 06                	jns    c0015130 <ip_frag+0x88>
c001512a:	83 c0 07             	add    eax,0x7
c001512d:	8d 76 00             	lea    esi,[esi+0x0]
c0015130:	c1 f8 03             	sar    eax,0x3
c0015133:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c0015138:	e9 03 03 00 00       	jmp    c0015440 <ip_frag+0x398>
c001513d:	8d 76 00             	lea    esi,[esi+0x0]
c0015140:	0f b7 44 24 22       	movzx  eax,WORD PTR [esp+0x22]
c0015145:	8d 50 ed             	lea    edx,[eax-0x13]
c0015148:	0f b7 44 24 2e       	movzx  eax,WORD PTR [esp+0x2e]
c001514d:	39 c2                	cmp    edx,eax
c001514f:	0f 9f c0             	setg   al
c0015152:	0f b6 c0             	movzx  eax,al
c0015155:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001515a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001515e:	25 ff 1f 00 00       	and    eax,0x1fff
c0015163:	89 c2                	mov    edx,eax
c0015165:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c001516a:	09 d0                	or     eax,edx
c001516c:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c0015171:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0015176:	85 c0                	test   eax,eax
c0015178:	75 0e                	jne    c0015188 <ip_frag+0xe0>
c001517a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001517e:	80 cc 20             	or     ah,0x20
c0015181:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c0015186:	66 90                	xchg   ax,ax
c0015188:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c001518d:	85 c0                	test   eax,eax
c001518f:	75 0b                	jne    c001519c <ip_frag+0xf4>
c0015191:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015195:	c1 e0 03             	shl    eax,0x3
c0015198:	eb 0a                	jmp    c00151a4 <ip_frag+0xfc>
c001519a:	66 90                	xchg   ax,ax
c001519c:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c00151a1:	8d 76 00             	lea    esi,[esi+0x0]
c00151a4:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c00151a9:	83 ec 04             	sub    esp,0x4
c00151ac:	6a 00                	push   0x0
c00151ae:	6a 14                	push   0x14
c00151b0:	6a 02                	push   0x2
c00151b2:	e8 75 32 ff ff       	call   c000842c <pbuf_alloc>
c00151b7:	83 c4 10             	add    esp,0x10
c00151ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00151be:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00151c3:	75 07                	jne    c00151cc <ip_frag+0x124>
c00151c5:	b0 ff                	mov    al,0xff
c00151c7:	e9 84 02 00 00       	jmp    c0015450 <ip_frag+0x3a8>
c00151cc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00151d0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00151d4:	0f b7 c0             	movzx  eax,ax
c00151d7:	83 f8 13             	cmp    eax,0x13
c00151da:	77 18                	ja     c00151f4 <ip_frag+0x14c>
c00151dc:	83 ec 08             	sub    esp,0x8
c00151df:	68 68 0a 03 c0       	push   0xc0030a68
c00151e4:	68 26 f6 02 c0       	push   0xc002f626
c00151e9:	e8 a6 a7 00 00       	call   c001f994 <CPrintf>
c00151ee:	83 c4 10             	add    esp,0x10
c00151f1:	8d 76 00             	lea    esi,[esi+0x0]
c00151f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00151f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00151fb:	83 ec 04             	sub    esp,0x4
c00151fe:	6a 14                	push   0x14
c0015200:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015204:	50                   	push   eax
c0015205:	e8 70 b1 fe ff       	call   c000037a <memcpy>
c001520a:	83 c4 10             	add    esp,0x10
c001520d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015211:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015214:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015218:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001521c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001521f:	0f b7 44 24 2a       	movzx  eax,WORD PTR [esp+0x2a]
c0015224:	01 c2                	add    edx,eax
c0015226:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001522a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001522d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015231:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0015235:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c001523a:	89 d1                	mov    ecx,edx
c001523c:	29 c1                	sub    ecx,eax
c001523e:	89 c8                	mov    eax,ecx
c0015240:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015244:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0015248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001524c:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c0015251:	e9 1a 01 00 00       	jmp    c0015370 <ip_frag+0x2c8>
c0015256:	66 90                	xchg   ax,ax
c0015258:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001525c:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0015260:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015264:	0f b7 d8             	movzx  ebx,ax
c0015267:	0f b7 ca             	movzx  ecx,dx
c001526a:	39 cb                	cmp    ebx,ecx
c001526c:	76 02                	jbe    c0015270 <ip_frag+0x1c8>
c001526e:	89 d0                	mov    eax,edx
c0015270:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c0015275:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c001527a:	85 c0                	test   eax,eax
c001527c:	75 12                	jne    c0015290 <ip_frag+0x1e8>
c001527e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015282:	8b 00                	mov    eax,DWORD PTR [eax]
c0015284:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0015288:	e9 e3 00 00 00       	jmp    c0015370 <ip_frag+0x2c8>
c001528d:	8d 76 00             	lea    esi,[esi+0x0]
c0015290:	e8 4b fd ff ff       	call   c0014fe0 <ip_frag_alloc_pbuf_custom_ref>
c0015295:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015299:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001529e:	75 18                	jne    c00152b8 <ip_frag+0x210>
c00152a0:	83 ec 0c             	sub    esp,0xc
c00152a3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00152a7:	e8 a8 2f ff ff       	call   c0008254 <pbuf_free>
c00152ac:	83 c4 10             	add    esp,0x10
c00152af:	b0 ff                	mov    al,0xff
c00152b1:	e9 9a 01 00 00       	jmp    c0015450 <ip_frag+0x3a8>
c00152b6:	66 90                	xchg   ax,ax
c00152b8:	0f b7 5c 24 26       	movzx  ebx,WORD PTR [esp+0x26]
c00152bd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00152c1:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00152c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00152c8:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c00152cd:	83 ec 08             	sub    esp,0x8
c00152d0:	53                   	push   ebx
c00152d1:	51                   	push   ecx
c00152d2:	52                   	push   edx
c00152d3:	6a 02                	push   0x2
c00152d5:	50                   	push   eax
c00152d6:	6a 03                	push   0x3
c00152d8:	e8 b7 2c ff ff       	call   c0007f94 <pbuf_alloced_custom>
c00152dd:	83 c4 20             	add    esp,0x20
c00152e0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00152e4:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00152e9:	75 25                	jne    c0015310 <ip_frag+0x268>
c00152eb:	83 ec 0c             	sub    esp,0xc
c00152ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00152f2:	e8 fd fc ff ff       	call   c0014ff4 <ip_frag_free_pbuf_custom_ref>
c00152f7:	83 c4 10             	add    esp,0x10
c00152fa:	83 ec 0c             	sub    esp,0xc
c00152fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015301:	e8 4e 2f ff ff       	call   c0008254 <pbuf_free>
c0015306:	83 c4 10             	add    esp,0x10
c0015309:	b0 ff                	mov    al,0xff
c001530b:	e9 40 01 00 00       	jmp    c0015450 <ip_frag+0x3a8>
c0015310:	83 ec 0c             	sub    esp,0xc
c0015313:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015317:	e8 40 37 ff ff       	call   c0008a5c <pbuf_ref>
c001531c:	83 c4 10             	add    esp,0x10
c001531f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015323:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015327:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001532a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001532e:	c7 40 10 2c 50 01 c0 	mov    DWORD PTR [eax+0x10],0xc001502c
c0015335:	83 ec 08             	sub    esp,0x8
c0015338:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001533c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015340:	e8 47 37 ff ff       	call   c0008a8c <pbuf_cat>
c0015345:	83 c4 10             	add    esp,0x10
c0015348:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001534c:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0015351:	89 d3                	mov    ebx,edx
c0015353:	29 c3                	sub    ebx,eax
c0015355:	89 d8                	mov    eax,ebx
c0015357:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c001535c:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c0015361:	85 c0                	test   eax,eax
c0015363:	74 0b                	je     c0015370 <ip_frag+0x2c8>
c0015365:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015369:	8b 00                	mov    eax,DWORD PTR [eax]
c001536b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001536f:	90                   	nop
c0015370:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c0015375:	85 c0                	test   eax,eax
c0015377:	0f 85 db fe ff ff    	jne    c0015258 <ip_frag+0x1b0>
c001537d:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0015382:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c0015387:	0f b7 44 24 28       	movzx  eax,WORD PTR [esp+0x28]
c001538c:	83 ec 0c             	sub    esp,0xc
c001538f:	50                   	push   eax
c0015390:	e8 53 b8 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0015395:	83 c4 10             	add    esp,0x10
c0015398:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001539c:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00153a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00153a4:	83 c0 14             	add    eax,0x14
c00153a7:	0f b7 c0             	movzx  eax,ax
c00153aa:	83 ec 0c             	sub    esp,0xc
c00153ad:	50                   	push   eax
c00153ae:	e8 35 b8 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00153b3:	83 c4 10             	add    esp,0x10
c00153b6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00153ba:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00153be:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00153c2:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c00153c8:	83 ec 08             	sub    esp,0x8
c00153cb:	6a 14                	push   0x14
c00153cd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00153d1:	e8 1a e0 ff ff       	call   c00133f0 <inet_chksum>
c00153d6:	83 c4 10             	add    esp,0x10
c00153d9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00153dd:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c00153e1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00153e5:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00153e8:	83 ec 04             	sub    esp,0x4
c00153eb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00153ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00153f3:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00153f7:	ff d0                	call   eax
c00153f9:	83 c4 10             	add    esp,0x10
c00153fc:	66 a1 50 67 03 c0    	mov    ax,ds:0xc0036750
c0015402:	83 c0 01             	add    eax,0x1
c0015405:	66 a3 50 67 03 c0    	mov    ds:0xc0036750,ax
c001540b:	83 ec 0c             	sub    esp,0xc
c001540e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015412:	e8 3d 2e ff ff       	call   c0008254 <pbuf_free>
c0015417:	83 c4 10             	add    esp,0x10
c001541a:	66 8b 54 24 2e       	mov    dx,WORD PTR [esp+0x2e]
c001541f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015423:	89 d1                	mov    ecx,edx
c0015425:	29 c1                	sub    ecx,eax
c0015427:	89 c8                	mov    eax,ecx
c0015429:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c001542e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015432:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015436:	01 d0                	add    eax,edx
c0015438:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001543d:	8d 76 00             	lea    esi,[esi+0x0]
c0015440:	0f b7 44 24 2e       	movzx  eax,WORD PTR [esp+0x2e]
c0015445:	85 c0                	test   eax,eax
c0015447:	0f 85 f3 fc ff ff    	jne    c0015140 <ip_frag+0x98>
c001544d:	b0 00                	mov    al,0x0
c001544f:	90                   	nop
c0015450:	83 c4 38             	add    esp,0x38
c0015453:	5b                   	pop    ebx
c0015454:	c3                   	ret    
c0015455:	90                   	nop

c0015456 <Computer::close(int, int, void*)>:
c0015456:	53                   	push   ebx
c0015457:	83 ec 08             	sub    esp,0x8
c001545a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001545e:	e8 c1 a3 00 00       	call   c001f824 <KeExecuteAtexit()>
c0015463:	83 ec 0c             	sub    esp,0xc
c0015466:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c001546c:	50                   	push   eax
c001546d:	e8 b8 5f 00 00       	call   c001b42a <Device::closeAll()>
c0015472:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0015478:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001547c:	8b 10                	mov    edx,DWORD PTR [eax]
c001547e:	51                   	push   ecx
c001547f:	68 0f 27 00 00       	push   0x270f
c0015484:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015488:	53                   	push   ebx
c0015489:	50                   	push   eax
c001548a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001548d:	83 c4 14             	add    esp,0x14
c0015490:	68 88 0a 03 c0       	push   0xc0030a88
c0015495:	e8 b1 ab 00 00       	call   c002004b <KePanic(char const*)>
c001549a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001549f:	83 c4 18             	add    esp,0x18
c00154a2:	5b                   	pop    ebx
c00154a3:	c3                   	ret    

c00154a4 <Krnl::firstTask()>:
c00154a4:	53                   	push   ebx
c00154a5:	83 ec 14             	sub    esp,0x14
c00154a8:	fb                   	sti    
c00154a9:	68 9e 0a 03 c0       	push   0xc0030a9e
c00154ae:	e8 50 a4 00 00       	call   c001f903 <KeSetBootMessage(char const*)>
c00154b3:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c00154ba:	e8 f3 0d 00 00       	call   c00162b2 <malloc>
c00154bf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00154c6:	89 c3                	mov    ebx,eax
c00154c8:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00154cd:	50                   	push   eax
c00154ce:	68 b7 0a 03 c0       	push   0xc0030ab7
c00154d3:	6a 01                	push   0x1
c00154d5:	53                   	push   ebx
c00154d6:	e8 01 f2 00 00       	call   c00246dc <Process::Process(bool, char const*, Process*, char**)>
c00154db:	83 c4 20             	add    esp,0x20
c00154de:	68 ff 00 00 00       	push   0xff
c00154e3:	6a 00                	push   0x0
c00154e5:	68 f9 5c 01 c0       	push   0xc0015cf9
c00154ea:	53                   	push   ebx
c00154eb:	e8 58 f4 00 00       	call   c0024948 <Process::createThread(void (*)(void*), void*, int)>
c00154f0:	8b 15 f8 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401f8
c00154f6:	6a 7a                	push   0x7a
c00154f8:	6a 00                	push   0x0
c00154fa:	68 30 54 02 c0       	push   0xc0025430
c00154ff:	52                   	push   edx
c0015500:	e8 43 f4 00 00       	call   c0024948 <Process::createThread(void (*)(void*), void*, int)>
c0015505:	83 c4 14             	add    esp,0x14
c0015508:	a3 b0 01 04 c0       	mov    ds:0xc00401b0,eax
c001550d:	68 b4 0b 03 c0       	push   0xc0030bb4
c0015512:	e8 ec a3 00 00       	call   c001f903 <KeSetBootMessage(char const*)>
c0015517:	c6 05 c1 a9 03 c0 01 	mov    BYTE PTR ds:0xc003a9c1,0x1
c001551e:	e8 e1 ac 00 00       	call   c0020204 <KeInitRand()>
c0015523:	e8 2b 03 01 00       	call   c0025853 <Vm::initialise8086()>
c0015528:	e8 f9 4a 00 00       	call   c001a026 <Fs::initVFS()>
c001552d:	c7 04 24 c4 0a 03 c0 	mov    DWORD PTR [esp],0xc0030ac4
c0015534:	e8 ca a3 00 00       	call   c001f903 <KeSetBootMessage(char const*)>
c0015539:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001553e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0015544:	8b 10                	mov    edx,DWORD PTR [eax]
c0015546:	6a 00                	push   0x0
c0015548:	6a 00                	push   0x0
c001554a:	6a 00                	push   0x0
c001554c:	50                   	push   eax
c001554d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015550:	83 c4 14             	add    esp,0x14
c0015553:	68 b4 0b 03 c0       	push   0xc0030bb4
c0015558:	e8 a6 a3 00 00       	call   c001f903 <KeSetBootMessage(char const*)>
c001555d:	e8 5e 42 00 00       	call   c00197c0 <KeInitialiseSymlinks()>
c0015562:	e8 47 a9 00 00       	call   c001feae <KeLoadSystemEnv()>
c0015567:	e8 a4 ab 00 00       	call   c0020110 <KeSetupPowerManager()>
c001556c:	83 c4 0c             	add    esp,0xc
c001556f:	6a 3a                	push   0x3a
c0015571:	68 de 0a 03 c0       	push   0xc0030ade
c0015576:	68 e7 0a 03 c0       	push   0xc0030ae7
c001557b:	e8 14 d3 00 00       	call   c0022894 <Reg::readIntWithDefault(char*, char*, int)>
c0015580:	89 04 24             	mov    DWORD PTR [esp],eax
c0015583:	e8 b8 56 00 00       	call   c001ac40 <User::loadClockSettings(int)>
c0015588:	c7 04 24 d8 0b 03 c0 	mov    DWORD PTR [esp],0xc0030bd8
c001558f:	e8 6f a3 00 00       	call   c001f903 <KeSetBootMessage(char const*)>
c0015594:	59                   	pop    ecx
c0015595:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001559a:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c00155a0:	53                   	push   ebx
c00155a1:	e8 38 5d 00 00       	call   c001b2de <Device::loadDriversForAll()>
c00155a6:	c7 04 24 ef 0a 03 c0 	mov    DWORD PTR [esp],0xc0030aef
c00155ad:	e8 51 a3 00 00       	call   c001f903 <KeSetBootMessage(char const*)>
c00155b2:	58                   	pop    eax
c00155b3:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c00155b9:	5a                   	pop    edx
c00155ba:	6a 01                	push   0x1
c00155bc:	68 00 0b 03 c0       	push   0xc0030b00
c00155c1:	e8 0b eb 00 00       	call   c00240d1 <Thr::loadDLL(char const*, bool)>
c00155c6:	59                   	pop    ecx
c00155c7:	5a                   	pop    edx
c00155c8:	53                   	push   ebx
c00155c9:	50                   	push   eax
c00155ca:	e8 54 ed 00 00       	call   c0024323 <Thr::executeDLL(unsigned long, void*)>
c00155cf:	83 c4 10             	add    esp,0x10
c00155d2:	83 ec 0c             	sub    esp,0xc
c00155d5:	6a 02                	push   0x2
c00155d7:	e8 d0 f7 00 00       	call   c0024dac <blockTask(TaskState)>
c00155dc:	83 c4 10             	add    esp,0x10
c00155df:	eb f1                	jmp    c00155d2 <Krnl::firstTask()+0x12e>
c00155e1:	90                   	nop

c00155e2 <Computer::Computer()>:
c00155e2:	83 ec 0c             	sub    esp,0xc
c00155e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00155e9:	83 ec 08             	sub    esp,0x8
c00155ec:	68 1c 0b 03 c0       	push   0xc0030b1c
c00155f1:	50                   	push   eax
c00155f2:	e8 2d 5d 00 00       	call   c001b324 <Device::Device(char const*)>
c00155f7:	83 c4 10             	add    esp,0x10
c00155fa:	ba 24 0c 03 c0       	mov    edx,0xc0030c24
c00155ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015603:	89 10                	mov    DWORD PTR [eax],edx
c0015605:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015609:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0015613:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015617:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0015621:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015625:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001562b:	83 ca 04             	or     edx,0x4
c001562e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0015634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015638:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001563e:	0f b6 d0             	movzx  edx,al
c0015641:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015645:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c001564c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015650:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0015656:	0f b6 d0             	movzx  edx,al
c0015659:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001565d:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0015662:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015666:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001566c:	8d 50 01             	lea    edx,[eax+0x1]
c001566f:	88 d1                	mov    cl,dl
c0015671:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015675:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001567b:	0f b6 d0             	movzx  edx,al
c001567e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015682:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0015686:	83 e1 3f             	and    ecx,0x3f
c0015689:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001568d:	90                   	nop
c001568e:	83 c4 0c             	add    esp,0xc
c0015691:	c3                   	ret    

c0015692 <Computer::setBootMessage(char const*)>:
c0015692:	c3                   	ret    
c0015693:	90                   	nop

c0015694 <Computer::detectFeatures()>:
c0015694:	55                   	push   ebp
c0015695:	57                   	push   edi
c0015696:	56                   	push   esi
c0015697:	53                   	push   ebx
c0015698:	83 ec 1c             	sub    esp,0x1c
c001569b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001569f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00156a5:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c00156ab:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00156b1:	e8 43 ab fe ff       	call   c00001f9 <detectCPUID>
c00156b6:	31 d2                	xor    edx,edx
c00156b8:	85 c0                	test   eax,eax
c00156ba:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00156c0:	0f 95 c2             	setne  dl
c00156c3:	83 e0 fd             	and    eax,0xfffffffd
c00156c6:	d1 e2                	shl    edx,1
c00156c8:	09 d0                	or     eax,edx
c00156ca:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00156d0:	a8 02                	test   al,0x2
c00156d2:	75 51                	jne    c0015725 <Computer::detectFeatures()+0x91>
c00156d4:	f6 05 d5 a9 03 c0 04 	test   BYTE PTR ds:0xc003a9d5,0x4
c00156db:	74 0f                	je     c00156ec <Computer::detectFeatures()+0x58>
c00156dd:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00156e3:	83 e0 fb             	and    eax,0xfffffffb
c00156e6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00156ec:	e8 15 88 01 00       	call   c002df06 <x87Detect>
c00156f1:	83 e0 01             	and    eax,0x1
c00156f4:	c1 e0 04             	shl    eax,0x4
c00156f7:	89 c2                	mov    edx,eax
c00156f9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00156ff:	83 e0 ef             	and    eax,0xffffffef
c0015702:	09 d0                	or     eax,edx
c0015704:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c001570a:	88 c2                	mov    dl,al
c001570c:	a8 10                	test   al,0x10
c001570e:	0f 85 33 01 00 00    	jne    c0015847 <Computer::detectFeatures()+0x1b3>
c0015714:	80 e2 80             	and    dl,0x80
c0015717:	0f 85 4c 01 00 00    	jne    c0015869 <Computer::detectFeatures()+0x1d5>
c001571d:	83 c4 1c             	add    esp,0x1c
c0015720:	5b                   	pop    ebx
c0015721:	5e                   	pop    esi
c0015722:	5f                   	pop    edi
c0015723:	5d                   	pop    ebp
c0015724:	c3                   	ret    
c0015725:	83 ec 0c             	sub    esp,0xc
c0015728:	6a 20                	push   0x20
c001572a:	e8 0d 96 00 00       	call   c001ed3c <CPU::cpuidCheckEDX(unsigned int)>
c001572f:	83 e0 01             	and    eax,0x1
c0015732:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0015739:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c001573f:	83 e0 f7             	and    eax,0xfffffff7
c0015742:	09 d0                	or     eax,edx
c0015744:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c001574a:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0015751:	e8 e6 95 00 00       	call   c001ed3c <CPU::cpuidCheckEDX(unsigned int)>
c0015756:	89 c2                	mov    edx,eax
c0015758:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c001575e:	83 e2 01             	and    edx,0x1
c0015761:	83 e0 fe             	and    eax,0xfffffffe
c0015764:	09 d0                	or     eax,edx
c0015766:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c001576c:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0015773:	e8 c4 95 00 00       	call   c001ed3c <CPU::cpuidCheckEDX(unsigned int)>
c0015778:	89 c2                	mov    edx,eax
c001577a:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0015780:	c1 e2 07             	shl    edx,0x7
c0015783:	83 e0 7f             	and    eax,0x7f
c0015786:	09 d0                	or     eax,edx
c0015788:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c001578e:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0015795:	e8 a2 95 00 00       	call   c001ed3c <CPU::cpuidCheckEDX(unsigned int)>
c001579a:	83 c4 10             	add    esp,0x10
c001579d:	83 e0 01             	and    eax,0x1
c00157a0:	c1 e0 05             	shl    eax,0x5
c00157a3:	89 c2                	mov    edx,eax
c00157a5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00157ab:	83 e0 df             	and    eax,0xffffffdf
c00157ae:	09 d0                	or     eax,edx
c00157b0:	f7 05 d4 a9 03 c0 01 04 00 00 	test   DWORD PTR ds:0xc003a9d4,0x401
c00157ba:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00157c0:	0f 84 c9 00 00 00    	je     c001588f <Computer::detectFeatures()+0x1fb>
c00157c6:	83 e0 fe             	and    eax,0xfffffffe
c00157c9:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00157cf:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00157d5:	89 c2                	mov    edx,eax
c00157d7:	83 e2 09             	and    edx,0x9
c00157da:	83 fa 01             	cmp    edx,0x1
c00157dd:	75 09                	jne    c00157e8 <Computer::detectFeatures()+0x154>
c00157df:	83 e0 fe             	and    eax,0xfffffffe
c00157e2:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00157e8:	83 ec 0c             	sub    esp,0xc
c00157eb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00157ef:	50                   	push   eax
c00157f0:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c00157f4:	55                   	push   ebp
c00157f5:	8d 7c 24 18          	lea    edi,[esp+0x18]
c00157f9:	57                   	push   edi
c00157fa:	8d 74 24 18          	lea    esi,[esp+0x18]
c00157fe:	56                   	push   esi
c00157ff:	68 00 00 00 80       	push   0x80000000
c0015804:	e8 af 94 00 00       	call   c001ecb8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0015809:	83 c4 20             	add    esp,0x20
c001580c:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0015813:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0015817:	0f 86 b7 fe ff ff    	jbe    c00156d4 <Computer::detectFeatures()+0x40>
c001581d:	83 ec 0c             	sub    esp,0xc
c0015820:	50                   	push   eax
c0015821:	55                   	push   ebp
c0015822:	57                   	push   edi
c0015823:	56                   	push   esi
c0015824:	68 01 00 00 80       	push   0x80000001
c0015829:	e8 8a 94 00 00       	call   c001ecb8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001582e:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0015834:	83 c4 20             	add    esp,0x20
c0015837:	25 bf ff fc ff       	and    eax,0xfffcffbf
c001583c:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0015842:	e9 8d fe ff ff       	jmp    c00156d4 <Computer::detectFeatures()+0x40>
c0015847:	e8 74 86 01 00       	call   c002dec0 <sseDetect>
c001584c:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0015852:	c1 e0 07             	shl    eax,0x7
c0015855:	83 e2 7f             	and    edx,0x7f
c0015858:	09 c2                	or     edx,eax
c001585a:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0015860:	80 e2 80             	and    dl,0x80
c0015863:	0f 84 b4 fe ff ff    	je     c001571d <Computer::detectFeatures()+0x89>
c0015869:	e8 e2 82 01 00       	call   c002db50 <avxDetect>
c001586e:	83 e0 01             	and    eax,0x1
c0015871:	c1 e0 05             	shl    eax,0x5
c0015874:	89 c2                	mov    edx,eax
c0015876:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c001587c:	83 e0 df             	and    eax,0xffffffdf
c001587f:	09 d0                	or     eax,edx
c0015881:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0015887:	83 c4 1c             	add    esp,0x1c
c001588a:	5b                   	pop    ebx
c001588b:	5e                   	pop    esi
c001588c:	5f                   	pop    edi
c001588d:	5d                   	pop    ebp
c001588e:	c3                   	ret    
c001588f:	83 ec 0c             	sub    esp,0xc
c0015892:	68 00 02 00 00       	push   0x200
c0015897:	e8 a0 94 00 00       	call   c001ed3c <CPU::cpuidCheckEDX(unsigned int)>
c001589c:	83 c4 10             	add    esp,0x10
c001589f:	89 c2                	mov    edx,eax
c00158a1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00158a7:	83 e2 01             	and    edx,0x1
c00158aa:	83 e0 fe             	and    eax,0xfffffffe
c00158ad:	09 d0                	or     eax,edx
c00158af:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00158b5:	e9 15 ff ff ff       	jmp    c00157cf <Computer::detectFeatures()+0x13b>

c00158ba <Computer::displayFeatures()>:
c00158ba:	c3                   	ret    
c00158bb:	90                   	nop

c00158bc <Computer::rdmsr(unsigned int)>:
c00158bc:	83 ec 0c             	sub    esp,0xc
c00158bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158c3:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00158ca:	74 0a                	je     c00158d6 <Computer::rdmsr(unsigned int)+0x1a>
c00158cc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00158d0:	0f 32                	rdmsr  
c00158d2:	83 c4 0c             	add    esp,0xc
c00158d5:	c3                   	ret    
c00158d6:	83 ec 0c             	sub    esp,0xc
c00158d9:	68 25 0b 03 c0       	push   0xc0030b25
c00158de:	e8 68 a7 00 00       	call   c002004b <KePanic(char const*)>
c00158e3:	83 c4 10             	add    esp,0x10
c00158e6:	eb e4                	jmp    c00158cc <Computer::rdmsr(unsigned int)+0x10>

c00158e8 <Computer::wrmsr(unsigned int, unsigned long long)>:
c00158e8:	57                   	push   edi
c00158e9:	56                   	push   esi
c00158ea:	83 ec 04             	sub    esp,0x4
c00158ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158f1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00158f5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00158f9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0015900:	74 10                	je     c0015912 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0015902:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015906:	89 f0                	mov    eax,esi
c0015908:	89 fa                	mov    edx,edi
c001590a:	0f 30                	wrmsr  
c001590c:	83 c4 04             	add    esp,0x4
c001590f:	5e                   	pop    esi
c0015910:	5f                   	pop    edi
c0015911:	c3                   	ret    
c0015912:	83 ec 0c             	sub    esp,0xc
c0015915:	68 2b 0b 03 c0       	push   0xc0030b2b
c001591a:	e8 2c a7 00 00       	call   c002004b <KePanic(char const*)>
c001591f:	83 c4 10             	add    esp,0x10
c0015922:	eb de                	jmp    c0015902 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0015924 <Computer::shutdown()>:
c0015924:	83 ec 0c             	sub    esp,0xc
c0015927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001592b:	8b 10                	mov    edx,DWORD PTR [eax]
c001592d:	6a 00                	push   0x0
c001592f:	6a 00                	push   0x0
c0015931:	6a 00                	push   0x0
c0015933:	50                   	push   eax
c0015934:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015937:	83 c4 1c             	add    esp,0x1c
c001593a:	c3                   	ret    
c001593b:	90                   	nop

c001593c <Computer::restart()>:
c001593c:	83 ec 0c             	sub    esp,0xc
c001593f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015943:	8b 10                	mov    edx,DWORD PTR [eax]
c0015945:	6a 00                	push   0x0
c0015947:	6a 00                	push   0x0
c0015949:	6a 01                	push   0x1
c001594b:	50                   	push   eax
c001594c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001594f:	83 c4 1c             	add    esp,0x1c
c0015952:	c3                   	ret    
c0015953:	90                   	nop

c0015954 <Computer::sleep()>:
c0015954:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015958:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001595e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015962:	e9 ed 8d 00 00       	jmp    c001e754 <ACPI::sleep()>
c0015967:	90                   	nop

c0015968 <Computer::nmiEnabled()>:
c0015968:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001596c:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0015972:	c3                   	ret    
c0015973:	90                   	nop

c0015974 <Computer::readCMOS(unsigned char)>:
c0015974:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015978:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001597c:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c0015983:	75 09                	jne    c001598e <Computer::readCMOS(unsigned char)+0x1a>
c0015985:	b2 80                	mov    dl,0x80
c0015987:	09 d0                	or     eax,edx
c0015989:	e6 70                	out    0x70,al
c001598b:	e4 71                	in     al,0x71
c001598d:	c3                   	ret    
c001598e:	31 d2                	xor    edx,edx
c0015990:	eb f5                	jmp    c0015987 <Computer::readCMOS(unsigned char)+0x13>

c0015992 <Computer::enableNMI(bool)>:
c0015992:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015996:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001599a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00159a0:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00159a8:	eb ca                	jmp    c0015974 <Computer::readCMOS(unsigned char)>

c00159aa <Computer::open(int, int, void*)>:
c00159aa:	56                   	push   esi
c00159ab:	53                   	push   ebx
c00159ac:	83 ec 10             	sub    esp,0x10
c00159af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00159b3:	f6 05 d4 a9 03 c0 04 	test   BYTE PTR ds:0xc003a9d4,0x4
c00159ba:	68 31 0b 03 c0       	push   0xc0030b31
c00159bf:	0f 94 05 e0 36 03 c0 	sete   BYTE PTR ds:0xc00336e0
c00159c6:	e8 38 9f 00 00       	call   c001f903 <KeSetBootMessage(char const*)>
c00159cb:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00159d2:	e8 db 08 00 00       	call   c00162b2 <malloc>
c00159d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00159da:	89 c6                	mov    esi,eax
c00159dc:	e8 e7 88 00 00       	call   c001e2c8 <ACPI::ACPI()>
c00159e1:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00159e7:	58                   	pop    eax
c00159e8:	5a                   	pop    edx
c00159e9:	56                   	push   esi
c00159ea:	53                   	push   ebx
c00159eb:	e8 d2 57 00 00       	call   c001b1c2 <Device::addChild(Device*)>
c00159f0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00159f3:	e8 9c fc ff ff       	call   c0015694 <Computer::detectFeatures()>
c00159f8:	59                   	pop    ecx
c00159f9:	5e                   	pop    esi
c00159fa:	6a 01                	push   0x1
c00159fc:	53                   	push   ebx
c00159fd:	e8 90 ff ff ff       	call   c0015992 <Computer::enableNMI(bool)>
c0015a02:	c7 04 24 49 0b 03 c0 	mov    DWORD PTR [esp],0xc0030b49
c0015a09:	e8 f5 9e 00 00       	call   c001f903 <KeSetBootMessage(char const*)>
c0015a0e:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0015a15:	e8 98 08 00 00       	call   c00162b2 <malloc>
c0015a1a:	89 04 24             	mov    DWORD PTR [esp],eax
c0015a1d:	89 c6                	mov    esi,eax
c0015a1f:	e8 d0 93 00 00       	call   c001edf4 <CPU::CPU()>
c0015a24:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0015a2a:	58                   	pop    eax
c0015a2b:	5a                   	pop    edx
c0015a2c:	56                   	push   esi
c0015a2d:	53                   	push   ebx
c0015a2e:	e8 8f 57 00 00       	call   c001b1c2 <Device::addChild(Device*)>
c0015a33:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015a39:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0015a3d:	8b 10                	mov    edx,DWORD PTR [eax]
c0015a3f:	51                   	push   ecx
c0015a40:	6a 00                	push   0x0
c0015a42:	6a 00                	push   0x0
c0015a44:	50                   	push   eax
c0015a45:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015a48:	83 c4 14             	add    esp,0x14
c0015a4b:	68 f8 0b 03 c0       	push   0xc0030bf8
c0015a50:	e8 ae 9e 00 00       	call   c001f903 <KeSetBootMessage(char const*)>
c0015a55:	e8 36 10 01 00       	call   c0026a90 <HalInitialiseCoprocessor()>
c0015a5a:	c7 04 24 63 0b 03 c0 	mov    DWORD PTR [esp],0xc0030b63
c0015a61:	e8 9d 9e 00 00       	call   c001f903 <KeSetBootMessage(char const*)>
c0015a66:	c7 04 24 a4 54 01 c0 	mov    DWORD PTR [esp],0xc00154a4
c0015a6d:	e8 02 f0 00 00       	call   c0024a74 <setupMultitasking(void (*)())>
c0015a72:	83 c4 14             	add    esp,0x14
c0015a75:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015a7a:	5b                   	pop    ebx
c0015a7b:	5e                   	pop    esi
c0015a7c:	c3                   	ret    
c0015a7d:	90                   	nop

c0015a7e <Computer::disableNMI()>:
c0015a7e:	6a 00                	push   0x0
c0015a80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015a84:	50                   	push   eax
c0015a85:	e8 08 ff ff ff       	call   c0015992 <Computer::enableNMI(bool)>
c0015a8a:	5a                   	pop    edx
c0015a8b:	59                   	pop    ecx
c0015a8c:	c3                   	ret    
c0015a8d:	90                   	nop

c0015a8e <Computer::writeCMOS(unsigned char, unsigned char)>:
c0015a8e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0015a92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015a96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015a9a:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c0015aa1:	75 0b                	jne    c0015aae <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c0015aa3:	b1 80                	mov    cl,0x80
c0015aa5:	09 c8                	or     eax,ecx
c0015aa7:	e6 70                	out    0x70,al
c0015aa9:	88 d0                	mov    al,dl
c0015aab:	e6 71                	out    0x71,al
c0015aad:	c3                   	ret    
c0015aae:	31 c9                	xor    ecx,ecx
c0015ab0:	eb f3                	jmp    c0015aa5 <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c0015ab2 <Computer::handleNMI()>:
c0015ab2:	56                   	push   esi
c0015ab3:	53                   	push   ebx
c0015ab4:	83 ec 10             	sub    esp,0x10
c0015ab7:	e4 92                	in     al,0x92
c0015ab9:	89 c6                	mov    esi,eax
c0015abb:	e4 61                	in     al,0x61
c0015abd:	68 7e 0b 03 c0       	push   0xc0030b7e
c0015ac2:	88 c3                	mov    bl,al
c0015ac4:	e8 78 36 00 00       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0015ac9:	83 c4 10             	add    esp,0x10
c0015acc:	83 e6 10             	and    esi,0x10
c0015acf:	75 10                	jne    c0015ae1 <Computer::handleNMI()+0x2f>
c0015ad1:	f6 c3 40             	test   bl,0x40
c0015ad4:	75 20                	jne    c0015af6 <Computer::handleNMI()+0x44>
c0015ad6:	80 e3 80             	and    bl,0x80
c0015ad9:	75 30                	jne    c0015b0b <Computer::handleNMI()+0x59>
c0015adb:	83 c4 04             	add    esp,0x4
c0015ade:	5b                   	pop    ebx
c0015adf:	5e                   	pop    esi
c0015ae0:	c3                   	ret    
c0015ae1:	83 ec 0c             	sub    esp,0xc
c0015ae4:	68 8f 0b 03 c0       	push   0xc0030b8f
c0015ae9:	e8 5d a5 00 00       	call   c002004b <KePanic(char const*)>
c0015aee:	83 c4 10             	add    esp,0x10
c0015af1:	f6 c3 40             	test   bl,0x40
c0015af4:	74 e0                	je     c0015ad6 <Computer::handleNMI()+0x24>
c0015af6:	83 ec 0c             	sub    esp,0xc
c0015af9:	68 9c 0b 03 c0       	push   0xc0030b9c
c0015afe:	e8 48 a5 00 00       	call   c002004b <KePanic(char const*)>
c0015b03:	83 c4 10             	add    esp,0x10
c0015b06:	80 e3 80             	and    bl,0x80
c0015b09:	74 d0                	je     c0015adb <Computer::handleNMI()+0x29>
c0015b0b:	c7 44 24 10 a6 0b 03 c0 	mov    DWORD PTR [esp+0x10],0xc0030ba6
c0015b13:	83 c4 04             	add    esp,0x4
c0015b16:	5b                   	pop    ebx
c0015b17:	5e                   	pop    esi
c0015b18:	e9 2e a5 00 00       	jmp    c002004b <KePanic(char const*)>
c0015b1d:	90                   	nop

c0015b1e <GDTEntry::setBase(unsigned int)>:
c0015b1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015b22:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015b26:	89 c1                	mov    ecx,eax
c0015b28:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0015b2c:	c1 e9 10             	shr    ecx,0x10
c0015b2f:	c1 e8 18             	shr    eax,0x18
c0015b32:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0015b35:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0015b38:	c3                   	ret    
c0015b39:	90                   	nop

c0015b3a <GDTEntry::setLimit(unsigned int)>:
c0015b3a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0015b3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015b42:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0015b45:	66 89 01             	mov    WORD PTR [ecx],ax
c0015b48:	83 e2 f0             	and    edx,0xfffffff0
c0015b4b:	c1 e8 10             	shr    eax,0x10
c0015b4e:	83 e0 0f             	and    eax,0xf
c0015b51:	09 d0                	or     eax,edx
c0015b53:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0015b56:	c3                   	ret    
c0015b57:	90                   	nop

c0015b58 <GDT::GDT()>:
c0015b58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015b5c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015b62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015b66:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015b6c:	90                   	nop
c0015b6d:	c3                   	ret    

c0015b6e <GDT::addEntry(GDTEntry)>:
c0015b6e:	53                   	push   ebx
c0015b6f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015b73:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015b77:	8b 02                	mov    eax,DWORD PTR [edx]
c0015b79:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015b7d:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0015b81:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0015b85:	8d 48 01             	lea    ecx,[eax+0x1]
c0015b88:	c1 e0 03             	shl    eax,0x3
c0015b8b:	89 0a                	mov    DWORD PTR [edx],ecx
c0015b8d:	5b                   	pop    ebx
c0015b8e:	c3                   	ret    
c0015b8f:	90                   	nop

c0015b90 <GDT::getNumberOfEntries()>:
c0015b90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015b94:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b96:	c3                   	ret    
c0015b97:	90                   	nop

c0015b98 <GDT::flush()>:
c0015b98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015b9c:	8b 10                	mov    edx,DWORD PTR [eax]
c0015b9e:	83 c0 04             	add    eax,0x4
c0015ba1:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0015ba8:	a3 c6 a9 03 c0       	mov    ds:0xc003a9c6,eax
c0015bad:	66 89 15 c4 a9 03 c0 	mov    WORD PTR ds:0xc003a9c4,dx
c0015bb4:	e9 a1 a7 fe ff       	jmp    c000035a <loadGDT>
c0015bb9:	90                   	nop

c0015bba <GDT::setup()>:
c0015bba:	57                   	push   edi
c0015bbb:	56                   	push   esi
c0015bbc:	53                   	push   ebx
c0015bbd:	83 ec 30             	sub    esp,0x30
c0015bc0:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0015bc4:	6a 00                	push   0x0
c0015bc6:	8d 74 24 14          	lea    esi,[esp+0x14]
c0015bca:	56                   	push   esi
c0015bcb:	e8 4e ff ff ff       	call   c0015b1e <GDTEntry::setBase(unsigned int)>
c0015bd0:	6a 00                	push   0x0
c0015bd2:	56                   	push   esi
c0015bd3:	e8 62 ff ff ff       	call   c0015b3a <GDTEntry::setLimit(unsigned int)>
c0015bd8:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0015be0:	6a 00                	push   0x0
c0015be2:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015be6:	56                   	push   esi
c0015be7:	e8 32 ff ff ff       	call   c0015b1e <GDTEntry::setBase(unsigned int)>
c0015bec:	68 ff ff ff 00       	push   0xffffff
c0015bf1:	56                   	push   esi
c0015bf2:	e8 43 ff ff ff       	call   c0015b3a <GDTEntry::setLimit(unsigned int)>
c0015bf7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0015bfb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015bff:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015c03:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0015c07:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0015c0c:	0d 00 9a c0 00       	or     eax,0xc09a00
c0015c11:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0015c15:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0015c19:	89 f8                	mov    eax,edi
c0015c1b:	89 fa                	mov    edx,edi
c0015c1d:	80 e4 f7             	and    ah,0xf7
c0015c20:	80 ce 60             	or     dh,0x60
c0015c23:	89 c7                	mov    edi,eax
c0015c25:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0015c29:	80 cc 60             	or     ah,0x60
c0015c2c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015c30:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015c34:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0015c38:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015c3c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0015c40:	83 c4 20             	add    esp,0x20
c0015c43:	6a 00                	push   0x0
c0015c45:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015c49:	50                   	push   eax
c0015c4a:	e8 cf fe ff ff       	call   c0015b1e <GDTEntry::setBase(unsigned int)>
c0015c4f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0015c53:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0015c57:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0015c5b:	83 e0 3f             	and    eax,0x3f
c0015c5e:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015c62:	6a 00                	push   0x0
c0015c64:	8d 44 24 34          	lea    eax,[esp+0x34]
c0015c68:	50                   	push   eax
c0015c69:	e8 b0 fe ff ff       	call   c0015b1e <GDTEntry::setBase(unsigned int)>
c0015c6e:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0015c72:	83 e0 3f             	and    eax,0x3f
c0015c75:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c0015c79:	83 c4 0c             	add    esp,0xc
c0015c7c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015c80:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015c84:	53                   	push   ebx
c0015c85:	e8 e4 fe ff ff       	call   c0015b6e <GDT::addEntry(GDTEntry)>
c0015c8a:	83 c4 0c             	add    esp,0xc
c0015c8d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015c91:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015c95:	53                   	push   ebx
c0015c96:	e8 d3 fe ff ff       	call   c0015b6e <GDT::addEntry(GDTEntry)>
c0015c9b:	83 c4 0c             	add    esp,0xc
c0015c9e:	57                   	push   edi
c0015c9f:	56                   	push   esi
c0015ca0:	53                   	push   ebx
c0015ca1:	e8 c8 fe ff ff       	call   c0015b6e <GDT::addEntry(GDTEntry)>
c0015ca6:	83 c4 0c             	add    esp,0xc
c0015ca9:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0015cad:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0015cb1:	53                   	push   ebx
c0015cb2:	e8 b7 fe ff ff       	call   c0015b6e <GDT::addEntry(GDTEntry)>
c0015cb7:	83 c4 0c             	add    esp,0xc
c0015cba:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015cbe:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015cc2:	53                   	push   ebx
c0015cc3:	e8 a6 fe ff ff       	call   c0015b6e <GDT::addEntry(GDTEntry)>
c0015cc8:	83 c4 0c             	add    esp,0xc
c0015ccb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015ccf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015cd3:	53                   	push   ebx
c0015cd4:	e8 95 fe ff ff       	call   c0015b6e <GDT::addEntry(GDTEntry)>
c0015cd9:	83 c4 0c             	add    esp,0xc
c0015cdc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015ce0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015ce4:	53                   	push   ebx
c0015ce5:	e8 84 fe ff ff       	call   c0015b6e <GDT::addEntry(GDTEntry)>
c0015cea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ced:	e8 a6 fe ff ff       	call   c0015b98 <GDT::flush()>
c0015cf2:	83 c4 40             	add    esp,0x40
c0015cf5:	5b                   	pop    ebx
c0015cf6:	5e                   	pop    esi
c0015cf7:	5f                   	pop    edi
c0015cf8:	c3                   	ret    

c0015cf9 <idleFunction(void*)>:
c0015cf9:	83 ec 0c             	sub    esp,0xc
c0015cfc:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0015d01:	48                   	dec    eax
c0015d02:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0015d07:	75 01                	jne    c0015d0a <idleFunction(void*)+0x11>
c0015d09:	fb                   	sti    
c0015d0a:	e8 4d 0a 01 00       	call   c002675c <HalSystemIdle()>
c0015d0f:	e8 ae 87 01 00       	call   c002e4c2 <idleCommon()>
c0015d14:	eb f4                	jmp    c0015d0a <idleFunction(void*)+0x11>
c0015d16:	66 90                	xchg   ax,ax

c0015d18 <IDTEntry::IDTEntry(bool)>:
c0015d18:	53                   	push   ebx
c0015d19:	83 ec 04             	sub    esp,0x4
c0015d1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d20:	88 04 24             	mov    BYTE PTR [esp],al
c0015d23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d27:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0015d2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d31:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0015d35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d39:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015d3c:	83 e2 f0             	and    edx,0xfffffff0
c0015d3f:	83 ca 0e             	or     edx,0xe
c0015d42:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015d45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d49:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015d4c:	83 e2 ef             	and    edx,0xffffffef
c0015d4f:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015d52:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0015d56:	85 c0                	test   eax,eax
c0015d58:	74 06                	je     c0015d60 <IDTEntry::IDTEntry(bool)+0x48>
c0015d5a:	b2 03                	mov    dl,0x3
c0015d5c:	eb 06                	jmp    c0015d64 <IDTEntry::IDTEntry(bool)+0x4c>
c0015d5e:	66 90                	xchg   ax,ax
c0015d60:	b2 00                	mov    dl,0x0
c0015d62:	66 90                	xchg   ax,ax
c0015d64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d68:	83 e2 03             	and    edx,0x3
c0015d6b:	89 d3                	mov    ebx,edx
c0015d6d:	c1 e3 05             	shl    ebx,0x5
c0015d70:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015d73:	83 e2 9f             	and    edx,0xffffff9f
c0015d76:	88 d1                	mov    cl,dl
c0015d78:	88 da                	mov    dl,bl
c0015d7a:	09 ca                	or     edx,ecx
c0015d7c:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015d7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d83:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015d86:	83 ca 80             	or     edx,0xffffff80
c0015d89:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015d8c:	90                   	nop
c0015d8d:	83 c4 04             	add    esp,0x4
c0015d90:	5b                   	pop    ebx
c0015d91:	c3                   	ret    

c0015d92 <IDTEntry::setOffset(unsigned int)>:
c0015d92:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015d96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015d9a:	66 89 02             	mov    WORD PTR [edx],ax
c0015d9d:	c1 e8 10             	shr    eax,0x10
c0015da0:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0015da4:	c3                   	ret    
c0015da5:	90                   	nop
c0015da6:	66 90                	xchg   ax,ax

c0015da8 <IDT::IDT()>:
c0015da8:	90                   	nop
c0015da9:	c3                   	ret    

c0015daa <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c0015daa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015dae:	83 c0 30             	add    eax,0x30
c0015db1:	c3                   	ret    

c0015db2 <IDT::addEntry(IDTEntry, int)>:
c0015db2:	53                   	push   ebx
c0015db3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015db7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015dbb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015dc3:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c0015dc6:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c0015dca:	5b                   	pop    ebx
c0015dcb:	c3                   	ret    

c0015dcc <IDT::addEntry(int, void (*)(), bool)>:
c0015dcc:	53                   	push   ebx
c0015dcd:	83 ec 10             	sub    esp,0x10
c0015dd0:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0015dd5:	50                   	push   eax
c0015dd6:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0015dda:	53                   	push   ebx
c0015ddb:	e8 38 ff ff ff       	call   c0015d18 <IDTEntry::IDTEntry(bool)>
c0015de0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015de4:	53                   	push   ebx
c0015de5:	e8 a8 ff ff ff       	call   c0015d92 <IDTEntry::setOffset(unsigned int)>
c0015dea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015dee:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015df2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015df6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015dfa:	e8 b3 ff ff ff       	call   c0015db2 <IDT::addEntry(IDTEntry, int)>
c0015dff:	83 c4 30             	add    esp,0x30
c0015e02:	5b                   	pop    ebx
c0015e03:	c3                   	ret    

c0015e04 <IDT::flush()>:
c0015e04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e08:	66 c7 05 cc a9 03 c0 ff 07 	mov    WORD PTR ds:0xc003a9cc,0x7ff
c0015e11:	a3 ce a9 03 c0       	mov    ds:0xc003a9ce,eax
c0015e16:	0f 01 1d cc a9 03 c0 	lidtd  ds:0xc003a9cc
c0015e1d:	c3                   	ret    

c0015e1e <IDT::setup()>:
c0015e1e:	57                   	push   edi
c0015e1f:	56                   	push   esi
c0015e20:	53                   	push   ebx
c0015e21:	83 ec 10             	sub    esp,0x10
c0015e24:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015e28:	6a 00                	push   0x0
c0015e2a:	68 c0 db 02 c0       	push   0xc002dbc0
c0015e2f:	6a 00                	push   0x0
c0015e31:	53                   	push   ebx
c0015e32:	e8 95 ff ff ff       	call   c0015dcc <IDT::addEntry(int, void (*)(), bool)>
c0015e37:	6a 00                	push   0x0
c0015e39:	68 d0 db 02 c0       	push   0xc002dbd0
c0015e3e:	6a 01                	push   0x1
c0015e40:	53                   	push   ebx
c0015e41:	e8 86 ff ff ff       	call   c0015dcc <IDT::addEntry(int, void (*)(), bool)>
c0015e46:	83 c4 20             	add    esp,0x20
c0015e49:	6a 00                	push   0x0
c0015e4b:	68 da db 02 c0       	push   0xc002dbda
c0015e50:	6a 02                	push   0x2
c0015e52:	53                   	push   ebx
c0015e53:	e8 74 ff ff ff       	call   c0015dcc <IDT::addEntry(int, void (*)(), bool)>
c0015e58:	6a 00                	push   0x0
c0015e5a:	68 e4 db 02 c0       	push   0xc002dbe4
c0015e5f:	6a 03                	push   0x3
c0015e61:	53                   	push   ebx
c0015e62:	e8 65 ff ff ff       	call   c0015dcc <IDT::addEntry(int, void (*)(), bool)>
c0015e67:	83 c4 20             	add    esp,0x20
c0015e6a:	6a 00                	push   0x0
c0015e6c:	68 ee db 02 c0       	push   0xc002dbee
c0015e71:	6a 04                	push   0x4
c0015e73:	53                   	push   ebx
c0015e74:	e8 53 ff ff ff       	call   c0015dcc <IDT::addEntry(int, void (*)(), bool)>
c0015e79:	6a 00                	push   0x0
c0015e7b:	68 f8 db 02 c0       	push   0xc002dbf8
c0015e80:	6a 05                	push   0x5
c0015e82:	53                   	push   ebx
c0015e83:	e8 44 ff ff ff       	call   c0015dcc <IDT::addEntry(int, void (*)(), bool)>
c0015e88:	83 c4 20             	add    esp,0x20
c0015e8b:	6a 00                	push   0x0
c0015e8d:	68 02 dc 02 c0       	push   0xc002dc02
c0015e92:	6a 06                	push   0x6
c0015e94:	53                   	push   ebx
c0015e95:	e8 32 ff ff ff       	call   c0015dcc <IDT::addEntry(int, void (*)(), bool)>
c0015e9a:	6a 00                	push   0x0
c0015e9c:	68 0c dc 02 c0       	push   0xc002dc0c
c0015ea1:	6a 07                	push   0x7
c0015ea3:	53                   	push   ebx
c0015ea4:	e8 23 ff ff ff       	call   c0015dcc <IDT::addEntry(int, void (*)(), bool)>
c0015ea9:	83 c4 20             	add    esp,0x20
c0015eac:	6a 00                	push   0x0
c0015eae:	68 16 dc 02 c0       	push   0xc002dc16
c0015eb3:	6a 08                	push   0x8
c0015eb5:	53                   	push   ebx
c0015eb6:	e8 11 ff ff ff       	call   c0015dcc <IDT::addEntry(int, void (*)(), bool)>
c0015ebb:	6a 00                	push   0x0
c0015ebd:	68 1e dc 02 c0       	push   0xc002dc1e
c0015ec2:	6a 09                	push   0x9
c0015ec4:	53                   	push   ebx
c0015ec5:	e8 02 ff ff ff       	call   c0015dcc <IDT::addEntry(int, void (*)(), bool)>
c0015eca:	83 c4 20             	add    esp,0x20
c0015ecd:	6a 00                	push   0x0
c0015ecf:	68 28 dc 02 c0       	push   0xc002dc28
c0015ed4:	6a 0a                	push   0xa
c0015ed6:	53                   	push   ebx
c0015ed7:	e8 f0 fe ff ff       	call   c0015dcc <IDT::addEntry(int, void (*)(), bool)>
c0015edc:	6a 00                	push   0x0
c0015ede:	68 30 dc 02 c0       	push   0xc002dc30
c0015ee3:	6a 0b                	push   0xb
c0015ee5:	53                   	push   ebx
c0015ee6:	e8 e1 fe ff ff       	call   c0015dcc <IDT::addEntry(int, void (*)(), bool)>
c0015eeb:	83 c4 20             	add    esp,0x20
c0015eee:	6a 00                	push   0x0
c0015ef0:	68 38 dc 02 c0       	push   0xc002dc38
c0015ef5:	6a 0c                	push   0xc
c0015ef7:	53                   	push   ebx
c0015ef8:	e8 cf fe ff ff       	call   c0015dcc <IDT::addEntry(int, void (*)(), bool)>
c0015efd:	6a 00                	push   0x0
c0015eff:	68 40 dc 02 c0       	push   0xc002dc40
c0015f04:	6a 0d                	push   0xd
c0015f06:	53                   	push   ebx
c0015f07:	e8 c0 fe ff ff       	call   c0015dcc <IDT::addEntry(int, void (*)(), bool)>
c0015f0c:	83 c4 20             	add    esp,0x20
c0015f0f:	6a 00                	push   0x0
c0015f11:	68 5a dc 02 c0       	push   0xc002dc5a
c0015f16:	6a 0e                	push   0xe
c0015f18:	53                   	push   ebx
c0015f19:	e8 ae fe ff ff       	call   c0015dcc <IDT::addEntry(int, void (*)(), bool)>
c0015f1e:	6a 00                	push   0x0
c0015f20:	68 62 dc 02 c0       	push   0xc002dc62
c0015f25:	6a 0f                	push   0xf
c0015f27:	53                   	push   ebx
c0015f28:	e8 9f fe ff ff       	call   c0015dcc <IDT::addEntry(int, void (*)(), bool)>
c0015f2d:	83 c4 20             	add    esp,0x20
c0015f30:	6a 00                	push   0x0
c0015f32:	68 6c dc 02 c0       	push   0xc002dc6c
c0015f37:	6a 10                	push   0x10
c0015f39:	53                   	push   ebx
c0015f3a:	e8 8d fe ff ff       	call   c0015dcc <IDT::addEntry(int, void (*)(), bool)>
c0015f3f:	6a 00                	push   0x0
c0015f41:	68 76 dc 02 c0       	push   0xc002dc76
c0015f46:	6a 11                	push   0x11
c0015f48:	53                   	push   ebx
c0015f49:	e8 7e fe ff ff       	call   c0015dcc <IDT::addEntry(int, void (*)(), bool)>
c0015f4e:	83 c4 20             	add    esp,0x20
c0015f51:	6a 00                	push   0x0
c0015f53:	68 80 dc 02 c0       	push   0xc002dc80
c0015f58:	6a 12                	push   0x12
c0015f5a:	53                   	push   ebx
c0015f5b:	e8 6c fe ff ff       	call   c0015dcc <IDT::addEntry(int, void (*)(), bool)>
c0015f60:	6a 01                	push   0x1
c0015f62:	68 1a dd 02 c0       	push   0xc002dd1a
c0015f67:	6a 60                	push   0x60
c0015f69:	53                   	push   ebx
c0015f6a:	e8 5d fe ff ff       	call   c0015dcc <IDT::addEntry(int, void (*)(), bool)>
c0015f6f:	83 c4 20             	add    esp,0x20
c0015f72:	6a 00                	push   0x0
c0015f74:	68 21 dd 02 c0       	push   0xc002dd21
c0015f79:	6a 20                	push   0x20
c0015f7b:	53                   	push   ebx
c0015f7c:	e8 4b fe ff ff       	call   c0015dcc <IDT::addEntry(int, void (*)(), bool)>
c0015f81:	6a 00                	push   0x0
c0015f83:	68 0c dd 02 c0       	push   0xc002dd0c
c0015f88:	6a 21                	push   0x21
c0015f8a:	53                   	push   ebx
c0015f8b:	e8 3c fe ff ff       	call   c0015dcc <IDT::addEntry(int, void (*)(), bool)>
c0015f90:	83 c4 20             	add    esp,0x20
c0015f93:	6a 00                	push   0x0
c0015f95:	68 13 dd 02 c0       	push   0xc002dd13
c0015f9a:	6a 22                	push   0x22
c0015f9c:	53                   	push   ebx
c0015f9d:	e8 2a fe ff ff       	call   c0015dcc <IDT::addEntry(int, void (*)(), bool)>
c0015fa2:	6a 00                	push   0x0
c0015fa4:	68 8a dc 02 c0       	push   0xc002dc8a
c0015fa9:	6a 23                	push   0x23
c0015fab:	53                   	push   ebx
c0015fac:	e8 1b fe ff ff       	call   c0015dcc <IDT::addEntry(int, void (*)(), bool)>
c0015fb1:	83 c4 20             	add    esp,0x20
c0015fb4:	6a 00                	push   0x0
c0015fb6:	68 94 dc 02 c0       	push   0xc002dc94
c0015fbb:	6a 24                	push   0x24
c0015fbd:	53                   	push   ebx
c0015fbe:	e8 09 fe ff ff       	call   c0015dcc <IDT::addEntry(int, void (*)(), bool)>
c0015fc3:	6a 00                	push   0x0
c0015fc5:	68 9e dc 02 c0       	push   0xc002dc9e
c0015fca:	6a 25                	push   0x25
c0015fcc:	53                   	push   ebx
c0015fcd:	e8 fa fd ff ff       	call   c0015dcc <IDT::addEntry(int, void (*)(), bool)>
c0015fd2:	83 c4 20             	add    esp,0x20
c0015fd5:	6a 00                	push   0x0
c0015fd7:	68 a8 dc 02 c0       	push   0xc002dca8
c0015fdc:	6a 26                	push   0x26
c0015fde:	53                   	push   ebx
c0015fdf:	e8 e8 fd ff ff       	call   c0015dcc <IDT::addEntry(int, void (*)(), bool)>
c0015fe4:	6a 00                	push   0x0
c0015fe6:	68 b2 dc 02 c0       	push   0xc002dcb2
c0015feb:	6a 27                	push   0x27
c0015fed:	53                   	push   ebx
c0015fee:	e8 d9 fd ff ff       	call   c0015dcc <IDT::addEntry(int, void (*)(), bool)>
c0015ff3:	83 c4 20             	add    esp,0x20
c0015ff6:	6a 00                	push   0x0
c0015ff8:	68 bc dc 02 c0       	push   0xc002dcbc
c0015ffd:	6a 28                	push   0x28
c0015fff:	53                   	push   ebx
c0016000:	e8 c7 fd ff ff       	call   c0015dcc <IDT::addEntry(int, void (*)(), bool)>
c0016005:	6a 00                	push   0x0
c0016007:	68 c6 dc 02 c0       	push   0xc002dcc6
c001600c:	6a 29                	push   0x29
c001600e:	53                   	push   ebx
c001600f:	e8 b8 fd ff ff       	call   c0015dcc <IDT::addEntry(int, void (*)(), bool)>
c0016014:	83 c4 20             	add    esp,0x20
c0016017:	6a 00                	push   0x0
c0016019:	68 d0 dc 02 c0       	push   0xc002dcd0
c001601e:	6a 2a                	push   0x2a
c0016020:	53                   	push   ebx
c0016021:	e8 a6 fd ff ff       	call   c0015dcc <IDT::addEntry(int, void (*)(), bool)>
c0016026:	6a 00                	push   0x0
c0016028:	68 da dc 02 c0       	push   0xc002dcda
c001602d:	6a 2b                	push   0x2b
c001602f:	53                   	push   ebx
c0016030:	e8 97 fd ff ff       	call   c0015dcc <IDT::addEntry(int, void (*)(), bool)>
c0016035:	83 c4 20             	add    esp,0x20
c0016038:	6a 00                	push   0x0
c001603a:	68 e4 dc 02 c0       	push   0xc002dce4
c001603f:	6a 2c                	push   0x2c
c0016041:	53                   	push   ebx
c0016042:	e8 85 fd ff ff       	call   c0015dcc <IDT::addEntry(int, void (*)(), bool)>
c0016047:	6a 00                	push   0x0
c0016049:	68 ee dc 02 c0       	push   0xc002dcee
c001604e:	6a 2d                	push   0x2d
c0016050:	53                   	push   ebx
c0016051:	e8 76 fd ff ff       	call   c0015dcc <IDT::addEntry(int, void (*)(), bool)>
c0016056:	83 c4 20             	add    esp,0x20
c0016059:	6a 00                	push   0x0
c001605b:	68 f8 dc 02 c0       	push   0xc002dcf8
c0016060:	6a 2e                	push   0x2e
c0016062:	53                   	push   ebx
c0016063:	e8 64 fd ff ff       	call   c0015dcc <IDT::addEntry(int, void (*)(), bool)>
c0016068:	6a 00                	push   0x0
c001606a:	68 02 dd 02 c0       	push   0xc002dd02
c001606f:	6a 2f                	push   0x2f
c0016071:	53                   	push   ebx
c0016072:	e8 55 fd ff ff       	call   c0015dcc <IDT::addEntry(int, void (*)(), bool)>
c0016077:	83 c4 20             	add    esp,0x20
c001607a:	6a 00                	push   0x0
c001607c:	68 5c de 02 c0       	push   0xc002de5c
c0016081:	6a 30                	push   0x30
c0016083:	53                   	push   ebx
c0016084:	e8 43 fd ff ff       	call   c0015dcc <IDT::addEntry(int, void (*)(), bool)>
c0016089:	6a 00                	push   0x0
c001608b:	68 66 de 02 c0       	push   0xc002de66
c0016090:	6a 31                	push   0x31
c0016092:	53                   	push   ebx
c0016093:	e8 34 fd ff ff       	call   c0015dcc <IDT::addEntry(int, void (*)(), bool)>
c0016098:	83 c4 20             	add    esp,0x20
c001609b:	6a 00                	push   0x0
c001609d:	68 70 de 02 c0       	push   0xc002de70
c00160a2:	6a 32                	push   0x32
c00160a4:	53                   	push   ebx
c00160a5:	e8 22 fd ff ff       	call   c0015dcc <IDT::addEntry(int, void (*)(), bool)>
c00160aa:	6a 00                	push   0x0
c00160ac:	68 7a de 02 c0       	push   0xc002de7a
c00160b1:	6a 33                	push   0x33
c00160b3:	53                   	push   ebx
c00160b4:	e8 13 fd ff ff       	call   c0015dcc <IDT::addEntry(int, void (*)(), bool)>
c00160b9:	83 c4 20             	add    esp,0x20
c00160bc:	6a 00                	push   0x0
c00160be:	68 84 de 02 c0       	push   0xc002de84
c00160c3:	6a 34                	push   0x34
c00160c5:	53                   	push   ebx
c00160c6:	e8 01 fd ff ff       	call   c0015dcc <IDT::addEntry(int, void (*)(), bool)>
c00160cb:	6a 00                	push   0x0
c00160cd:	68 8e de 02 c0       	push   0xc002de8e
c00160d2:	6a 35                	push   0x35
c00160d4:	53                   	push   ebx
c00160d5:	e8 f2 fc ff ff       	call   c0015dcc <IDT::addEntry(int, void (*)(), bool)>
c00160da:	83 c4 20             	add    esp,0x20
c00160dd:	6a 00                	push   0x0
c00160df:	68 98 de 02 c0       	push   0xc002de98
c00160e4:	6a 36                	push   0x36
c00160e6:	53                   	push   ebx
c00160e7:	e8 e0 fc ff ff       	call   c0015dcc <IDT::addEntry(int, void (*)(), bool)>
c00160ec:	6a 00                	push   0x0
c00160ee:	68 a2 de 02 c0       	push   0xc002dea2
c00160f3:	6a 37                	push   0x37
c00160f5:	53                   	push   ebx
c00160f6:	e8 d1 fc ff ff       	call   c0015dcc <IDT::addEntry(int, void (*)(), bool)>
c00160fb:	83 c4 1c             	add    esp,0x1c
c00160fe:	6a 03                	push   0x3
c0016100:	6a 02                	push   0x2
c0016102:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c0016108:	e8 13 25 00 00       	call   c0018620 <VAS::allocatePages(int, int)>
c001610d:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0016114:	89 c6                	mov    esi,eax
c0016116:	e8 97 01 00 00       	call   c00162b2 <malloc>
c001611b:	81 c6 00 20 00 00    	add    esi,0x2000
c0016121:	89 04 24             	mov    DWORD PTR [esp],eax
c0016124:	89 c7                	mov    edi,eax
c0016126:	e8 15 16 00 00       	call   c0017740 <TSS::TSS()>
c001612b:	83 c4 0c             	add    esp,0xc
c001612e:	68 16 dc 02 c0       	push   0xc002dc16
c0016133:	56                   	push   esi
c0016134:	57                   	push   edi
c0016135:	e8 4a 16 00 00       	call   c0017784 <TSS::setup(unsigned long, unsigned long)>
c001613a:	89 c6                	mov    esi,eax
c001613c:	58                   	pop    eax
c001613d:	5a                   	pop    edx
c001613e:	6a 00                	push   0x0
c0016140:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016144:	50                   	push   eax
c0016145:	e8 ce fb ff ff       	call   c0015d18 <IDTEntry::IDTEntry(bool)>
c001614a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001614e:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0016153:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c001615a:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0016160:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016164:	80 ce 05             	or     dh,0x5
c0016167:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c001616a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001616e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016172:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0016175:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016178:	e8 87 fc ff ff       	call   c0015e04 <IDT::flush()>
c001617d:	83 c4 20             	add    esp,0x20
c0016180:	5b                   	pop    ebx
c0016181:	5e                   	pop    esi
c0016182:	5f                   	pop    edi
c0016183:	c3                   	ret    

c0016184 <sbrk>:
c0016184:	55                   	push   ebp
c0016185:	57                   	push   edi
c0016186:	56                   	push   esi
c0016187:	53                   	push   ebx
c0016188:	83 ec 1c             	sub    esp,0x1c
c001618b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001618f:	85 c0                	test   eax,eax
c0016191:	74 61                	je     c00161f4 <sbrk+0x70>
c0016193:	78 66                	js     c00161fb <sbrk+0x77>
c0016195:	8b 15 cc 36 03 c0    	mov    edx,DWORD PTR ds:0xc00336cc
c001619b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001619f:	05 ff 0f 00 00       	add    eax,0xfff
c00161a4:	89 c5                	mov    ebp,eax
c00161a6:	78 6b                	js     c0016213 <sbrk+0x8f>
c00161a8:	c1 fd 0c             	sar    ebp,0xc
c00161ab:	bb 00 00 00 00       	mov    ebx,0x0
c00161b0:	8b 35 b0 aa 03 c0    	mov    esi,DWORD PTR ds:0xc003aab0
c00161b6:	8b 3d cc 36 03 c0    	mov    edi,DWORD PTR ds:0xc00336cc
c00161bc:	e8 fa 03 00 00       	call   c00165bb <Phys::allocatePage()>
c00161c1:	68 01 04 00 00       	push   0x401
c00161c6:	57                   	push   edi
c00161c7:	50                   	push   eax
c00161c8:	56                   	push   esi
c00161c9:	e8 4e 23 00 00       	call   c001851c <VAS::mapPage(unsigned long, unsigned long, int)>
c00161ce:	81 05 cc 36 03 c0 00 10 00 00 	add    DWORD PTR ds:0xc00336cc,0x1000
c00161d8:	83 c3 01             	add    ebx,0x1
c00161db:	83 c4 10             	add    esp,0x10
c00161de:	39 dd                	cmp    ebp,ebx
c00161e0:	75 ce                	jne    c00161b0 <sbrk+0x2c>
c00161e2:	0f 20 d8             	mov    eax,cr3
c00161e5:	0f 22 d8             	mov    cr3,eax
c00161e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00161ec:	83 c4 1c             	add    esp,0x1c
c00161ef:	5b                   	pop    ebx
c00161f0:	5e                   	pop    esi
c00161f1:	5f                   	pop    edi
c00161f2:	5d                   	pop    ebp
c00161f3:	c3                   	ret    
c00161f4:	a1 cc 36 03 c0       	mov    eax,ds:0xc00336cc
c00161f9:	eb f1                	jmp    c00161ec <sbrk+0x68>
c00161fb:	83 ec 08             	sub    esp,0x8
c00161fe:	50                   	push   eax
c00161ff:	68 48 0c 03 c0       	push   0xc0030c48
c0016204:	e8 38 2f 00 00       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0016209:	83 c4 10             	add    esp,0x10
c001620c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016211:	eb d9                	jmp    c00161ec <sbrk+0x68>
c0016213:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0016219:	eb 8d                	jmp    c00161a8 <sbrk+0x24>

c001621b <mmap>:
c001621b:	83 ec 18             	sub    esp,0x18
c001621e:	68 78 0c 03 c0       	push   0xc0030c78
c0016223:	e8 23 9e 00 00       	call   c002004b <KePanic(char const*)>
c0016228:	b8 00 00 00 00       	mov    eax,0x0
c001622d:	83 c4 1c             	add    esp,0x1c
c0016230:	c3                   	ret    

c0016231 <munmap>:
c0016231:	83 ec 18             	sub    esp,0x18
c0016234:	68 7d 0c 03 c0       	push   0xc0030c7d
c0016239:	e8 0d 9e 00 00       	call   c002004b <KePanic(char const*)>
c001623e:	b8 00 00 00 00       	mov    eax,0x0
c0016243:	83 c4 1c             	add    esp,0x1c
c0016246:	c3                   	ret    

c0016247 <liballoc_lock()>:
c0016247:	fa                   	cli    
c0016248:	83 05 d0 01 04 c0 01 	add    DWORD PTR ds:0xc00401d0,0x1
c001624f:	b8 00 00 00 00       	mov    eax,0x0
c0016254:	c3                   	ret    

c0016255 <liballoc_unlock()>:
c0016255:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001625a:	83 e8 01             	sub    eax,0x1
c001625d:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0016262:	75 01                	jne    c0016265 <liballoc_unlock()+0x10>
c0016264:	fb                   	sti    
c0016265:	b8 00 00 00 00       	mov    eax,0x0
c001626a:	c3                   	ret    

c001626b <liballoc_alloc(int)>:
c001626b:	83 ec 10             	sub    esp,0x10
c001626e:	6a 01                	push   0x1
c0016270:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016274:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c001627a:	e8 a1 23 00 00       	call   c0018620 <VAS::allocatePages(int, int)>
c001627f:	83 c4 1c             	add    esp,0x1c
c0016282:	c3                   	ret    

c0016283 <liballoc_free(void*, int)>:
c0016283:	83 ec 14             	sub    esp,0x14
c0016286:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001628a:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c0016290:	e8 cf 1f 00 00       	call   c0018264 <VAS::freeAllocatedPages(unsigned long)>
c0016295:	b8 00 00 00 00       	mov    eax,0x0
c001629a:	83 c4 1c             	add    esp,0x1c
c001629d:	c3                   	ret    

c001629e <realloc>:
c001629e:	83 ec 14             	sub    esp,0x14
c00162a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162a9:	e8 ec b3 fe ff       	call   c000169a <dlrealloc>
c00162ae:	83 c4 1c             	add    esp,0x1c
c00162b1:	c3                   	ret    

c00162b2 <malloc>:
c00162b2:	83 ec 18             	sub    esp,0x18
c00162b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162b9:	e8 9f ae fe ff       	call   c000115d <dlmalloc>
c00162be:	83 c4 1c             	add    esp,0x1c
c00162c1:	c3                   	ret    

c00162c2 <free>:
c00162c2:	83 ec 18             	sub    esp,0x18
c00162c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162c9:	e8 37 ab fe ff       	call   c0000e05 <dlfree>
c00162ce:	83 c4 1c             	add    esp,0x1c
c00162d1:	c3                   	ret    

c00162d2 <rfree>:
c00162d2:	83 ec 18             	sub    esp,0x18
c00162d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162d9:	e8 27 ab fe ff       	call   c0000e05 <dlfree>
c00162de:	83 c4 1c             	add    esp,0x1c
c00162e1:	c3                   	ret    

c00162e2 <calloc>:
c00162e2:	56                   	push   esi
c00162e3:	53                   	push   ebx
c00162e4:	83 ec 10             	sub    esp,0x10
c00162e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00162eb:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00162f0:	53                   	push   ebx
c00162f1:	e8 bc ff ff ff       	call   c00162b2 <malloc>
c00162f6:	89 c6                	mov    esi,eax
c00162f8:	83 c4 0c             	add    esp,0xc
c00162fb:	53                   	push   ebx
c00162fc:	6a 00                	push   0x0
c00162fe:	50                   	push   eax
c00162ff:	e8 ec a1 fe ff       	call   c00004f0 <memset>
c0016304:	89 f0                	mov    eax,esi
c0016306:	83 c4 14             	add    esp,0x14
c0016309:	5b                   	pop    ebx
c001630a:	5e                   	pop    esi
c001630b:	c3                   	ret    

c001630c <KeEntryPoint>:
c001630c:	57                   	push   edi
c001630d:	bf f9 03 00 00       	mov    edi,0x3f9
c0016312:	56                   	push   esi
c0016313:	89 fa                	mov    edx,edi
c0016315:	53                   	push   ebx
c0016316:	31 f6                	xor    esi,esi
c0016318:	83 ec 2c             	sub    esp,0x2c
c001631b:	a1 00 05 00 00       	mov    eax,ds:0x500
c0016320:	a3 d4 a9 03 c0       	mov    ds:0xc003a9d4,eax
c0016325:	89 f0                	mov    eax,esi
c0016327:	ee                   	out    dx,al
c0016328:	bb fb 03 00 00       	mov    ebx,0x3fb
c001632d:	b0 80                	mov    al,0x80
c001632f:	89 da                	mov    edx,ebx
c0016331:	ee                   	out    dx,al
c0016332:	b1 03                	mov    cl,0x3
c0016334:	ba f8 03 00 00       	mov    edx,0x3f8
c0016339:	88 c8                	mov    al,cl
c001633b:	ee                   	out    dx,al
c001633c:	89 f0                	mov    eax,esi
c001633e:	89 fa                	mov    edx,edi
c0016340:	ee                   	out    dx,al
c0016341:	88 c8                	mov    al,cl
c0016343:	89 da                	mov    edx,ebx
c0016345:	ee                   	out    dx,al
c0016346:	b0 c7                	mov    al,0xc7
c0016348:	ba fa 03 00 00       	mov    edx,0x3fa
c001634d:	ee                   	out    dx,al
c001634e:	b0 0b                	mov    al,0xb
c0016350:	ba fc 03 00 00       	mov    edx,0x3fc
c0016355:	ee                   	out    dx,al
c0016356:	68 84 0c 03 c0       	push   0xc0030c84
c001635b:	e8 e1 2d 00 00       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0016360:	e8 22 95 00 00       	call   c001f887 <KeDisplaySplashScreen()>
c0016365:	a1 24 05 00 00       	mov    eax,ds:0x524
c001636a:	05 ff 0f 00 00       	add    eax,0xfff
c001636f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016374:	89 04 24             	mov    DWORD PTR [esp],eax
c0016377:	e8 ad 03 00 00       	call   c0016729 <Phys::physicalMemorySetup(unsigned int)>
c001637c:	e8 66 1c 00 00       	call   c0017fe7 <Virt::virtualMemorySetup()>
c0016381:	e8 4b 94 00 00       	call   c001f7d1 <KeInitialiseAtexit()>
c0016386:	58                   	pop    eax
c0016387:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c001638b:	53                   	push   ebx
c001638c:	e8 53 1f 00 00       	call   c00182e4 <VAS::VAS()>
c0016391:	89 1d b0 aa 03 c0    	mov    DWORD PTR ds:0xc003aab0,ebx
c0016397:	e8 be 80 01 00       	call   c002e45a <_init>
c001639c:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c00163a3:	e8 0a ff ff ff       	call   c00162b2 <malloc>
c00163a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00163ab:	89 c6                	mov    esi,eax
c00163ad:	e8 30 f2 ff ff       	call   c00155e2 <Computer::Computer()>
c00163b2:	53                   	push   ebx
c00163b3:	89 35 bc a9 03 c0    	mov    DWORD PTR ds:0xc003a9bc,esi
c00163b9:	6a 00                	push   0x0
c00163bb:	6a 00                	push   0x0
c00163bd:	56                   	push   esi
c00163be:	e8 e7 f5 ff ff       	call   c00159aa <Computer::open(int, int, void*)>
c00163c3:	83 c4 14             	add    esp,0x14
c00163c6:	53                   	push   ebx
c00163c7:	e8 e2 1f 00 00       	call   c00183ae <VAS::~VAS()>
c00163cc:	83 c4 30             	add    esp,0x30
c00163cf:	5b                   	pop    ebx
c00163d0:	5e                   	pop    esi
c00163d1:	5f                   	pop    edi
c00163d2:	c3                   	ret    

c00163d3 <Phys::allocateDMA(unsigned long)>:
c00163d3:	55                   	push   ebp
c00163d4:	31 ed                	xor    ebp,ebp
c00163d6:	57                   	push   edi
c00163d7:	56                   	push   esi
c00163d8:	53                   	push   ebx
c00163d9:	31 db                	xor    ebx,ebx
c00163db:	83 ec 1c             	sub    esp,0x1c
c00163de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00163e2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00163ea:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c00163f0:	31 c0                	xor    eax,eax
c00163f2:	c1 ef 0c             	shr    edi,0xc
c00163f5:	eb 1b                	jmp    c0016412 <Phys::allocateDMA(unsigned long)+0x3f>
c00163f7:	85 c0                	test   eax,eax
c00163f9:	75 06                	jne    c0016401 <Phys::allocateDMA(unsigned long)+0x2e>
c00163fb:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00163ff:	89 dd                	mov    ebp,ebx
c0016401:	8d 70 01             	lea    esi,[eax+0x1]
c0016404:	39 f7                	cmp    edi,esi
c0016406:	74 37                	je     c001643f <Phys::allocateDMA(unsigned long)+0x6c>
c0016408:	89 f0                	mov    eax,esi
c001640a:	83 c3 01             	add    ebx,0x1
c001640d:	83 fb 0f             	cmp    ebx,0xf
c0016410:	7f 13                	jg     c0016425 <Phys::allocateDMA(unsigned long)+0x52>
c0016412:	80 bb f0 a9 03 c0 00 	cmp    BYTE PTR [ebx-0x3ffc5610],0x0
c0016419:	74 dc                	je     c00163f7 <Phys::allocateDMA(unsigned long)+0x24>
c001641b:	31 c0                	xor    eax,eax
c001641d:	83 c3 01             	add    ebx,0x1
c0016420:	83 fb 0f             	cmp    ebx,0xf
c0016423:	7e ed                	jle    c0016412 <Phys::allocateDMA(unsigned long)+0x3f>
c0016425:	83 ec 0c             	sub    esp,0xc
c0016428:	68 9c 0c 03 c0       	push   0xc0030c9c
c001642d:	e8 19 9c 00 00       	call   c002004b <KePanic(char const*)>
c0016432:	83 c4 10             	add    esp,0x10
c0016435:	31 c0                	xor    eax,eax
c0016437:	83 c4 1c             	add    esp,0x1c
c001643a:	5b                   	pop    ebx
c001643b:	5e                   	pop    esi
c001643c:	5f                   	pop    edi
c001643d:	5d                   	pop    ebp
c001643e:	c3                   	ret    
c001643f:	89 e9                	mov    ecx,ebp
c0016441:	c1 f9 04             	sar    ecx,0x4
c0016444:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016448:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c001644c:	89 ca                	mov    edx,ecx
c001644e:	83 ea 01             	sub    edx,0x1
c0016451:	79 03                	jns    c0016456 <Phys::allocateDMA(unsigned long)+0x83>
c0016453:	8d 51 0e             	lea    edx,[ecx+0xe]
c0016456:	c1 fa 04             	sar    edx,0x4
c0016459:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c001645d:	74 08                	je     c0016467 <Phys::allocateDMA(unsigned long)+0x94>
c001645f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0016463:	31 c0                	xor    eax,eax
c0016465:	eb b6                	jmp    c001641d <Phys::allocateDMA(unsigned long)+0x4a>
c0016467:	85 f6                	test   esi,esi
c0016469:	74 17                	je     c0016482 <Phys::allocateDMA(unsigned long)+0xaf>
c001646b:	8d 95 f0 a9 03 c0    	lea    edx,[ebp-0x3ffc5610]
c0016471:	8d 84 05 f1 a9 03 c0 	lea    eax,[ebp+eax*1-0x3ffc560f]
c0016478:	c6 02 01             	mov    BYTE PTR [edx],0x1
c001647b:	83 c2 01             	add    edx,0x1
c001647e:	39 d0                	cmp    eax,edx
c0016480:	75 f6                	jne    c0016478 <Phys::allocateDMA(unsigned long)+0xa5>
c0016482:	a1 e8 a9 03 c0       	mov    eax,ds:0xc003a9e8
c0016487:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001648b:	01 f8                	add    eax,edi
c001648d:	85 d2                	test   edx,edx
c001648f:	a3 e8 a9 03 c0       	mov    ds:0xc003a9e8,eax
c0016494:	74 17                	je     c00164ad <Phys::allocateDMA(unsigned long)+0xda>
c0016496:	83 ec 0c             	sub    esp,0xc
c0016499:	68 9c 0c 03 c0       	push   0xc0030c9c
c001649e:	e8 a8 9b 00 00       	call   c002004b <KePanic(char const*)>
c00164a3:	83 c4 10             	add    esp,0x10
c00164a6:	89 f0                	mov    eax,esi
c00164a8:	e9 5d ff ff ff       	jmp    c001640a <Phys::allocateDMA(unsigned long)+0x37>
c00164ad:	c1 e5 0c             	shl    ebp,0xc
c00164b0:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c00164b6:	e9 7c ff ff ff       	jmp    c0016437 <Phys::allocateDMA(unsigned long)+0x64>

c00164bb <Phys::freeDMA(unsigned long, unsigned long)>:
c00164bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00164bf:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c00164c5:	a1 e8 a9 03 c0       	mov    eax,ds:0xc003a9e8
c00164ca:	c1 ea 0c             	shr    edx,0xc
c00164cd:	29 d0                	sub    eax,edx
c00164cf:	a3 e8 a9 03 c0       	mov    ds:0xc003a9e8,eax
c00164d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00164d8:	05 00 00 ff 3d       	add    eax,0x3dff0000
c00164dd:	c1 e8 0c             	shr    eax,0xc
c00164e0:	85 d2                	test   edx,edx
c00164e2:	74 11                	je     c00164f5 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c00164e4:	05 f0 a9 03 c0       	add    eax,0xc003a9f0
c00164e9:	01 c2                	add    edx,eax
c00164eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00164ee:	83 c0 01             	add    eax,0x1
c00164f1:	39 d0                	cmp    eax,edx
c00164f3:	75 f6                	jne    c00164eb <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c00164f5:	c3                   	ret    

c00164f6 <Phys::setPageState(unsigned long, bool)>:
c00164f6:	57                   	push   edi
c00164f7:	56                   	push   esi
c00164f8:	8b 35 d0 36 03 c0    	mov    esi,DWORD PTR ds:0xc00336d0
c00164fe:	53                   	push   ebx
c00164ff:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0016504:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016508:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001650c:	0f b6 c0             	movzx  eax,al
c001650f:	89 ca                	mov    edx,ecx
c0016511:	83 e1 07             	and    ecx,0x7
c0016514:	c1 ea 03             	shr    edx,0x3
c0016517:	d3 c3                	rol    ebx,cl
c0016519:	01 d6                	add    esi,edx
c001651b:	d3 e0                	shl    eax,cl
c001651d:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0016520:	21 fb                	and    ebx,edi
c0016522:	88 1e                	mov    BYTE PTR [esi],bl
c0016524:	8b 1d d0 36 03 c0    	mov    ebx,DWORD PTR ds:0xc00336d0
c001652a:	01 da                	add    edx,ebx
c001652c:	8a 0a                	mov    cl,BYTE PTR [edx]
c001652e:	09 c8                	or     eax,ecx
c0016530:	88 02                	mov    BYTE PTR [edx],al
c0016532:	5b                   	pop    ebx
c0016533:	5e                   	pop    esi
c0016534:	5f                   	pop    edi
c0016535:	c3                   	ret    

c0016536 <Phys::getPageState(unsigned long)>:
c0016536:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001653a:	8b 15 d0 36 03 c0    	mov    edx,DWORD PTR ds:0xc00336d0
c0016540:	89 c8                	mov    eax,ecx
c0016542:	83 e1 07             	and    ecx,0x7
c0016545:	c1 e8 03             	shr    eax,0x3
c0016548:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c001654c:	d3 f8                	sar    eax,cl
c001654e:	83 e0 01             	and    eax,0x1
c0016551:	c3                   	ret    

c0016552 <Phys::freePage(unsigned long)>:
c0016552:	53                   	push   ebx
c0016553:	83 ec 08             	sub    esp,0x8
c0016556:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001655a:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0016560:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0016566:	76 41                	jbe    c00165a9 <Phys::freePage(unsigned long)+0x57>
c0016568:	c1 e8 0c             	shr    eax,0xc
c001656b:	50                   	push   eax
c001656c:	89 c3                	mov    ebx,eax
c001656e:	e8 c3 ff ff ff       	call   c0016536 <Phys::getPageState(unsigned long)>
c0016573:	5a                   	pop    edx
c0016574:	84 c0                	test   al,al
c0016576:	74 20                	je     c0016598 <Phys::freePage(unsigned long)+0x46>
c0016578:	83 ec 08             	sub    esp,0x8
c001657b:	a1 e8 a9 03 c0       	mov    eax,ds:0xc003a9e8
c0016580:	6a 00                	push   0x0
c0016582:	83 e8 01             	sub    eax,0x1
c0016585:	53                   	push   ebx
c0016586:	a3 e8 a9 03 c0       	mov    ds:0xc003a9e8,eax
c001658b:	e8 66 ff ff ff       	call   c00164f6 <Phys::setPageState(unsigned long, bool)>
c0016590:	83 c4 10             	add    esp,0x10
c0016593:	83 c4 08             	add    esp,0x8
c0016596:	5b                   	pop    ebx
c0016597:	c3                   	ret    
c0016598:	c7 44 24 10 41 0d 03 c0 	mov    DWORD PTR [esp+0x10],0xc0030d41
c00165a0:	83 c4 08             	add    esp,0x8
c00165a3:	5b                   	pop    ebx
c00165a4:	e9 a2 9a 00 00       	jmp    c002004b <KePanic(char const*)>
c00165a9:	68 00 10 00 00       	push   0x1000
c00165ae:	50                   	push   eax
c00165af:	e8 07 ff ff ff       	call   c00164bb <Phys::freeDMA(unsigned long, unsigned long)>
c00165b4:	59                   	pop    ecx
c00165b5:	5b                   	pop    ebx
c00165b6:	83 c4 08             	add    esp,0x8
c00165b9:	5b                   	pop    ebx
c00165ba:	c3                   	ret    

c00165bb <Phys::allocatePage()>:
c00165bb:	56                   	push   esi
c00165bc:	53                   	push   ebx
c00165bd:	83 ec 14             	sub    esp,0x14
c00165c0:	8b 35 dc a9 03 c0    	mov    esi,DWORD PTR ds:0xc003a9dc
c00165c6:	89 f3                	mov    ebx,esi
c00165c8:	eb 0a                	jmp    c00165d4 <Phys::allocatePage()+0x19>
c00165ca:	89 1d dc a9 03 c0    	mov    DWORD PTR ds:0xc003a9dc,ebx
c00165d0:	39 de                	cmp    esi,ebx
c00165d2:	74 26                	je     c00165fa <Phys::allocatePage()+0x3f>
c00165d4:	53                   	push   ebx
c00165d5:	e8 5c ff ff ff       	call   c0016536 <Phys::getPageState(unsigned long)>
c00165da:	5a                   	pop    edx
c00165db:	84 c0                	test   al,al
c00165dd:	74 67                	je     c0016646 <Phys::allocatePage()+0x8b>
c00165df:	83 c3 01             	add    ebx,0x1
c00165e2:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00165e8:	75 e0                	jne    c00165ca <Phys::allocatePage()+0xf>
c00165ea:	31 db                	xor    ebx,ebx
c00165ec:	c7 05 dc a9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a9dc,0x0
c00165f6:	39 de                	cmp    esi,ebx
c00165f8:	75 da                	jne    c00165d4 <Phys::allocatePage()+0x19>
c00165fa:	83 ec 0c             	sub    esp,0xc
c00165fd:	a0 00 aa 03 c0       	mov    al,ds:0xc003aa00
c0016602:	83 f0 01             	xor    eax,0x1
c0016605:	a2 00 aa 03 c0       	mov    ds:0xc003aa00,al
c001660a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001660f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016612:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0016618:	50                   	push   eax
c0016619:	e8 a8 27 00 00       	call   c0018dc6 <VAS::scanForEviction()>
c001661e:	83 c4 10             	add    esp,0x10
c0016621:	85 c0                	test   eax,eax
c0016623:	75 48                	jne    c001666d <Phys::allocatePage()+0xb2>
c0016625:	83 ec 0c             	sub    esp,0xc
c0016628:	68 c4 0c 03 c0       	push   0xc0030cc4
c001662d:	e8 19 9a 00 00       	call   c002004b <KePanic(char const*)>
c0016632:	83 c4 10             	add    esp,0x10
c0016635:	8b 1d dc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9dc
c001663b:	53                   	push   ebx
c001663c:	e8 f5 fe ff ff       	call   c0016536 <Phys::getPageState(unsigned long)>
c0016641:	5a                   	pop    edx
c0016642:	84 c0                	test   al,al
c0016644:	75 99                	jne    c00165df <Phys::allocatePage()+0x24>
c0016646:	6a 01                	push   0x1
c0016648:	53                   	push   ebx
c0016649:	e8 a8 fe ff ff       	call   c00164f6 <Phys::setPageState(unsigned long, bool)>
c001664e:	8b 15 e8 a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9e8
c0016654:	a1 dc a9 03 c0       	mov    eax,ds:0xc003a9dc
c0016659:	83 c2 01             	add    edx,0x1
c001665c:	59                   	pop    ecx
c001665d:	89 15 e8 a9 03 c0    	mov    DWORD PTR ds:0xc003a9e8,edx
c0016663:	c1 e0 0c             	shl    eax,0xc
c0016666:	5b                   	pop    ebx
c0016667:	83 c4 14             	add    esp,0x14
c001666a:	5b                   	pop    ebx
c001666b:	5e                   	pop    esi
c001666c:	c3                   	ret    
c001666d:	83 ec 08             	sub    esp,0x8
c0016670:	89 c2                	mov    edx,eax
c0016672:	6a 01                	push   0x1
c0016674:	c1 ea 0c             	shr    edx,0xc
c0016677:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001667b:	52                   	push   edx
c001667c:	e8 75 fe ff ff       	call   c00164f6 <Phys::setPageState(unsigned long, bool)>
c0016681:	83 c4 10             	add    esp,0x10
c0016684:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016688:	eb dd                	jmp    c0016667 <Phys::allocatePage()+0xac>

c001668a <Phys::allocateContiguousPages(int)>:
c001668a:	57                   	push   edi
c001668b:	56                   	push   esi
c001668c:	53                   	push   ebx
c001668d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016691:	fa                   	cli    
c0016692:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0016697:	31 db                	xor    ebx,ebx
c0016699:	83 c0 01             	add    eax,0x1
c001669c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00166a1:	85 db                	test   ebx,ebx
c00166a3:	75 11                	jne    c00166b6 <Phys::allocateContiguousPages(int)+0x2c>
c00166a5:	e8 11 ff ff ff       	call   c00165bb <Phys::allocatePage()>
c00166aa:	83 fe 01             	cmp    esi,0x1
c00166ad:	89 c7                	mov    edi,eax
c00166af:	74 21                	je     c00166d2 <Phys::allocateContiguousPages(int)+0x48>
c00166b1:	bb 01 00 00 00       	mov    ebx,0x1
c00166b6:	e8 00 ff ff ff       	call   c00165bb <Phys::allocatePage()>
c00166bb:	89 da                	mov    edx,ebx
c00166bd:	c1 e2 0c             	shl    edx,0xc
c00166c0:	01 fa                	add    edx,edi
c00166c2:	39 c2                	cmp    edx,eax
c00166c4:	74 22                	je     c00166e8 <Phys::allocateContiguousPages(int)+0x5e>
c00166c6:	bb 01 00 00 00       	mov    ebx,0x1
c00166cb:	89 c7                	mov    edi,eax
c00166cd:	83 fe 01             	cmp    esi,0x1
c00166d0:	75 e4                	jne    c00166b6 <Phys::allocateContiguousPages(int)+0x2c>
c00166d2:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00166d7:	83 e8 01             	sub    eax,0x1
c00166da:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00166df:	75 01                	jne    c00166e2 <Phys::allocateContiguousPages(int)+0x58>
c00166e1:	fb                   	sti    
c00166e2:	89 f8                	mov    eax,edi
c00166e4:	5b                   	pop    ebx
c00166e5:	5e                   	pop    esi
c00166e6:	5f                   	pop    edi
c00166e7:	c3                   	ret    
c00166e8:	83 c3 01             	add    ebx,0x1
c00166eb:	39 f3                	cmp    ebx,esi
c00166ed:	75 b2                	jne    c00166a1 <Phys::allocateContiguousPages(int)+0x17>
c00166ef:	eb e1                	jmp    c00166d2 <Phys::allocateContiguousPages(int)+0x48>

c00166f1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c00166f1:	56                   	push   esi
c00166f2:	53                   	push   ebx
c00166f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00166f7:	39 1d e0 a9 03 c0    	cmp    DWORD PTR ds:0xc003a9e0,ebx
c00166fd:	73 06                	jae    c0016705 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c00166ff:	89 1d e0 a9 03 c0    	mov    DWORD PTR ds:0xc003a9e0,ebx
c0016705:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016709:	c1 eb 0c             	shr    ebx,0xc
c001670c:	c1 e8 0c             	shr    eax,0xc
c001670f:	39 d8                	cmp    eax,ebx
c0016711:	73 13                	jae    c0016726 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0016713:	6a 00                	push   0x0
c0016715:	8d 70 01             	lea    esi,[eax+0x1]
c0016718:	50                   	push   eax
c0016719:	e8 d8 fd ff ff       	call   c00164f6 <Phys::setPageState(unsigned long, bool)>
c001671e:	5a                   	pop    edx
c001671f:	89 f0                	mov    eax,esi
c0016721:	59                   	pop    ecx
c0016722:	39 f3                	cmp    ebx,esi
c0016724:	75 ed                	jne    c0016713 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0016726:	5b                   	pop    ebx
c0016727:	5e                   	pop    esi
c0016728:	c3                   	ret    

c0016729 <Phys::physicalMemorySetup(unsigned int)>:
c0016729:	55                   	push   ebp
c001672a:	57                   	push   edi
c001672b:	56                   	push   esi
c001672c:	53                   	push   ebx
c001672d:	83 ec 40             	sub    esp,0x40
c0016730:	6a 10                	push   0x10
c0016732:	6a 00                	push   0x0
c0016734:	68 f0 a9 03 c0       	push   0xc003a9f0
c0016739:	e8 b2 9d fe ff       	call   c00004f0 <memset>
c001673e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0016742:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016747:	05 00 10 00 00       	add    eax,0x1000
c001674c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016750:	5b                   	pop    ebx
c0016751:	31 db                	xor    ebx,ebx
c0016753:	5e                   	pop    esi
c0016754:	50                   	push   eax
c0016755:	68 57 0d 03 c0       	push   0xc0030d57
c001675a:	e8 e2 29 00 00       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c001675f:	83 c4 10             	add    esp,0x10
c0016762:	83 ec 08             	sub    esp,0x8
c0016765:	6a 01                	push   0x1
c0016767:	53                   	push   ebx
c0016768:	83 c3 01             	add    ebx,0x1
c001676b:	e8 86 fd ff ff       	call   c00164f6 <Phys::setPageState(unsigned long, bool)>
c0016770:	83 c4 10             	add    esp,0x10
c0016773:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0016779:	75 e7                	jne    c0016762 <Phys::physicalMemorySetup(unsigned int)+0x39>
c001677b:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0016782:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0016789:	c1 e0 08             	shl    eax,0x8
c001678c:	09 c2                	or     edx,eax
c001678e:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0016792:	0f 84 98 01 00 00    	je     c0016930 <Phys::physicalMemorySetup(unsigned int)+0x207>
c0016798:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001679c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00167a4:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00167a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00167ad:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00167b5:	eb 1c                	jmp    c00167d3 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c00167b7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00167bb:	83 c3 18             	add    ebx,0x18
c00167be:	83 c6 01             	add    esi,0x1
c00167c1:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00167c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00167c9:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00167cd:	0f 84 6d 01 00 00    	je     c0016940 <Phys::physicalMemorySetup(unsigned int)+0x217>
c00167d3:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00167d6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00167d9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00167dc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00167e0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00167e4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00167e6:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00167e9:	01 f0                	add    eax,esi
c00167eb:	55                   	push   ebp
c00167ec:	11 fa                	adc    edx,edi
c00167ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00167f2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00167f6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00167fa:	51                   	push   ecx
c00167fb:	56                   	push   esi
c00167fc:	68 f4 0c 03 c0       	push   0xc0030cf4
c0016801:	e8 3b 29 00 00       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0016806:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001680a:	83 c4 10             	add    esp,0x10
c001680d:	09 f8                	or     eax,edi
c001680f:	0f 85 2b 01 00 00    	jne    c0016940 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0016815:	83 fd 01             	cmp    ebp,0x1
c0016818:	75 9d                	jne    c00167b7 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c001681a:	ba 00 00 08 00       	mov    edx,0x80000
c001681f:	89 c1                	mov    ecx,eax
c0016821:	39 f2                	cmp    edx,esi
c0016823:	19 f9                	sbb    ecx,edi
c0016825:	0f 82 ab 00 00 00    	jb     c00168d6 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c001682b:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c001682f:	89 c1                	mov    ecx,eax
c0016831:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0016835:	0f 83 9b 00 00 00    	jae    c00168d6 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c001683b:	ba 00 00 0a 00       	mov    edx,0xa0000
c0016840:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016844:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0016848:	39 fa                	cmp    edx,edi
c001684a:	19 e8                	sbb    eax,ebp
c001684c:	0f 82 b0 01 00 00    	jb     c0016a02 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c0016852:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016856:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001685a:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0016860:	ba ff 1f 00 00       	mov    edx,0x1fff
c0016865:	83 d5 ff             	adc    ebp,0xffffffff
c0016868:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001686c:	31 c0                	xor    eax,eax
c001686e:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0016872:	39 fa                	cmp    edx,edi
c0016874:	89 c1                	mov    ecx,eax
c0016876:	19 e9                	sbb    ecx,ebp
c0016878:	0f 83 39 ff ff ff    	jae    c00167b7 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c001687e:	be 00 00 08 00       	mov    esi,0x80000
c0016883:	83 ec 04             	sub    esp,0x4
c0016886:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001688a:	57                   	push   edi
c001688b:	56                   	push   esi
c001688c:	68 18 0d 03 c0       	push   0xc0030d18
c0016891:	e8 ab 28 00 00       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0016896:	5d                   	pop    ebp
c0016897:	58                   	pop    eax
c0016898:	57                   	push   edi
c0016899:	56                   	push   esi
c001689a:	e8 52 fe ff ff       	call   c00166f1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c001689f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00168a3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00168a7:	83 c4 0c             	add    esp,0xc
c00168aa:	0f ac d0 0c          	shrd   eax,edx,0xc
c00168ae:	8b 15 ec a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9ec
c00168b4:	01 d0                	add    eax,edx
c00168b6:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00168bd:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c00168c2:	52                   	push   edx
c00168c3:	50                   	push   eax
c00168c4:	68 7d 0d 03 c0       	push   0xc0030d7d
c00168c9:	e8 73 28 00 00       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c00168ce:	83 c4 10             	add    esp,0x10
c00168d1:	e9 e1 fe ff ff       	jmp    c00167b7 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00168d6:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00168da:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00168de:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00168e2:	39 ea                	cmp    edx,ebp
c00168e4:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00168e8:	0f 82 c9 fe ff ff    	jb     c00167b7 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00168ee:	ba ff 1f 00 00       	mov    edx,0x1fff
c00168f3:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00168f7:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00168fb:	0f 83 b6 fe ff ff    	jae    c00167b7 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0016901:	39 ee                	cmp    esi,ebp
c0016903:	89 f8                	mov    eax,edi
c0016905:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0016909:	0f 83 74 ff ff ff    	jae    c0016883 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c001690f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016913:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016917:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001691b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001691f:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0016923:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016927:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001692b:	e9 53 ff ff ff       	jmp    c0016883 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0016930:	83 ec 0c             	sub    esp,0xc
c0016933:	68 6f 0d 03 c0       	push   0xc0030d6f
c0016938:	e8 0e 97 00 00       	call   c002004b <KePanic(char const*)>
c001693d:	83 c4 10             	add    esp,0x10
c0016940:	83 ec 08             	sub    esp,0x8
c0016943:	bb 60 00 00 00       	mov    ebx,0x60
c0016948:	6a 00                	push   0x0
c001694a:	6a 06                	push   0x6
c001694c:	e8 a5 fb ff ff       	call   c00164f6 <Phys::setPageState(unsigned long, bool)>
c0016951:	58                   	pop    eax
c0016952:	5a                   	pop    edx
c0016953:	6a 00                	push   0x0
c0016955:	6a 07                	push   0x7
c0016957:	e8 9a fb ff ff       	call   c00164f6 <Phys::setPageState(unsigned long, bool)>
c001695c:	8b 0d ec a9 03 c0    	mov    ecx,DWORD PTR ds:0xc003a9ec
c0016962:	83 c4 10             	add    esp,0x10
c0016965:	83 c1 02             	add    ecx,0x2
c0016968:	89 0d ec a9 03 c0    	mov    DWORD PTR ds:0xc003a9ec,ecx
c001696e:	83 ec 08             	sub    esp,0x8
c0016971:	6a 00                	push   0x0
c0016973:	53                   	push   ebx
c0016974:	83 c3 01             	add    ebx,0x1
c0016977:	e8 7a fb ff ff       	call   c00164f6 <Phys::setPageState(unsigned long, bool)>
c001697c:	83 c4 10             	add    esp,0x10
c001697f:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0016985:	75 e7                	jne    c001696e <Phys::physicalMemorySetup(unsigned int)+0x245>
c0016987:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c001698c:	bb 40 01 00 00       	mov    ebx,0x140
c0016991:	83 c0 20             	add    eax,0x20
c0016994:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016999:	eb 26                	jmp    c00169c1 <Phys::physicalMemorySetup(unsigned int)+0x298>
c001699b:	83 ec 08             	sub    esp,0x8
c001699e:	6a 00                	push   0x0
c00169a0:	53                   	push   ebx
c00169a1:	83 c3 01             	add    ebx,0x1
c00169a4:	e8 4d fb ff ff       	call   c00164f6 <Phys::setPageState(unsigned long, bool)>
c00169a9:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c00169ae:	83 c4 10             	add    esp,0x10
c00169b1:	83 c0 01             	add    eax,0x1
c00169b4:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00169ba:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c00169bf:	74 07                	je     c00169c8 <Phys::physicalMemorySetup(unsigned int)+0x29f>
c00169c1:	3d ff 03 00 00       	cmp    eax,0x3ff
c00169c6:	7e d3                	jle    c001699b <Phys::physicalMemorySetup(unsigned int)+0x272>
c00169c8:	bb d0 01 00 00       	mov    ebx,0x1d0
c00169cd:	3d ff 07 00 00       	cmp    eax,0x7ff
c00169d2:	7f 26                	jg     c00169fa <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c00169d4:	83 ec 08             	sub    esp,0x8
c00169d7:	6a 00                	push   0x0
c00169d9:	53                   	push   ebx
c00169da:	83 c3 01             	add    ebx,0x1
c00169dd:	e8 14 fb ff ff       	call   c00164f6 <Phys::setPageState(unsigned long, bool)>
c00169e2:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c00169e7:	83 c4 10             	add    esp,0x10
c00169ea:	83 c0 01             	add    eax,0x1
c00169ed:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00169f3:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c00169f8:	75 d3                	jne    c00169cd <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c00169fa:	83 c4 3c             	add    esp,0x3c
c00169fd:	5b                   	pop    ebx
c00169fe:	5e                   	pop    esi
c00169ff:	5f                   	pop    edi
c0016a00:	5d                   	pop    ebp
c0016a01:	c3                   	ret    
c0016a02:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0016a0a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016a12:	e9 3b fe ff ff       	jmp    c0016852 <Phys::physicalMemorySetup(unsigned int)+0x129>
c0016a17:	90                   	nop

c0016a18 <Pipe::isAtty()>:
c0016a18:	31 c0                	xor    eax,eax
c0016a1a:	c3                   	ret    
c0016a1b:	90                   	nop

c0016a1c <Pipe::~Pipe()>:
c0016a1c:	83 ec 0c             	sub    esp,0xc
c0016a1f:	ba dc 0d 03 c0       	mov    edx,0xc0030ddc
c0016a24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a28:	89 10                	mov    DWORD PTR [eax],edx
c0016a2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a2e:	83 ec 0c             	sub    esp,0xc
c0016a31:	50                   	push   eax
c0016a32:	e8 69 11 00 00       	call   c0017ba0 <UnixFile::~UnixFile()>
c0016a37:	83 c4 10             	add    esp,0x10
c0016a3a:	90                   	nop
c0016a3b:	83 c4 0c             	add    esp,0xc
c0016a3e:	c3                   	ret    
c0016a3f:	90                   	nop

c0016a40 <Pipe::~Pipe()>:
c0016a40:	83 ec 0c             	sub    esp,0xc
c0016a43:	83 ec 0c             	sub    esp,0xc
c0016a46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a4a:	e8 cd ff ff ff       	call   c0016a1c <Pipe::~Pipe()>
c0016a4f:	83 c4 10             	add    esp,0x10
c0016a52:	83 ec 08             	sub    esp,0x8
c0016a55:	6a 20                	push   0x20
c0016a57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a5b:	e8 b4 25 00 00       	call   c0019014 <operator delete(void*, unsigned long)>
c0016a60:	83 c4 10             	add    esp,0x10
c0016a63:	83 c4 0c             	add    esp,0xc
c0016a66:	c3                   	ret    
c0016a67:	90                   	nop

c0016a68 <Pipe::write(unsigned long long, void*, int*)>:
c0016a68:	55                   	push   ebp
c0016a69:	57                   	push   edi
c0016a6a:	56                   	push   esi
c0016a6b:	53                   	push   ebx
c0016a6c:	83 ec 1c             	sub    esp,0x1c
c0016a6f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016a73:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016a77:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0016a7a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016a7e:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a81:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016a85:	89 d8                	mov    eax,ebx
c0016a87:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0016a8a:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0016a8e:	89 d6                	mov    esi,edx
c0016a90:	89 d7                	mov    edi,edx
c0016a92:	c1 ff 1f             	sar    edi,0x1f
c0016a95:	03 34 24             	add    esi,DWORD PTR [esp]
c0016a98:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0016a9c:	c1 f8 1f             	sar    eax,0x1f
c0016a9f:	39 f3                	cmp    ebx,esi
c0016aa1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016aa5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016aa9:	19 f8                	sbb    eax,edi
c0016aab:	b8 01 00 00 00       	mov    eax,0x1
c0016ab0:	72 6e                	jb     c0016b20 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0016ab2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016ab5:	01 d0                	add    eax,edx
c0016ab7:	99                   	cdq    
c0016ab8:	f7 fb                	idiv   ebx
c0016aba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016abe:	29 d3                	sub    ebx,edx
c0016ac0:	89 d7                	mov    edi,edx
c0016ac2:	89 de                	mov    esi,ebx
c0016ac4:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0016ac7:	c1 fb 1f             	sar    ebx,0x1f
c0016aca:	39 f2                	cmp    edx,esi
c0016acc:	19 d8                	sbb    eax,ebx
c0016ace:	b8 00 00 00 00       	mov    eax,0x0
c0016ad3:	72 04                	jb     c0016ad9 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0016ad5:	89 d0                	mov    eax,edx
c0016ad7:	29 f0                	sub    eax,esi
c0016ad9:	89 d3                	mov    ebx,edx
c0016adb:	29 c3                	sub    ebx,eax
c0016add:	74 0b                	je     c0016aea <Pipe::write(unsigned long long, void*, int*)+0x82>
c0016adf:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0016ae2:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016ae6:	89 d9                	mov    ecx,ebx
c0016ae8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016aea:	85 c0                	test   eax,eax
c0016aec:	74 0d                	je     c0016afb <Pipe::write(unsigned long long, void*, int*)+0x93>
c0016aee:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016af2:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0016af5:	89 de                	mov    esi,ebx
c0016af7:	89 c1                	mov    ecx,eax
c0016af9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016afb:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0016afe:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0016b03:	75 10                	jne    c0016b15 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0016b05:	83 ec 0c             	sub    esp,0xc
c0016b08:	68 99 0d 03 c0       	push   0xc0030d99
c0016b0d:	e8 39 95 00 00       	call   c002004b <KePanic(char const*)>
c0016b12:	83 c4 10             	add    esp,0x10
c0016b15:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016b19:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016b1c:	89 08                	mov    DWORD PTR [eax],ecx
c0016b1e:	31 c0                	xor    eax,eax
c0016b20:	83 c4 1c             	add    esp,0x1c
c0016b23:	5b                   	pop    ebx
c0016b24:	5e                   	pop    esi
c0016b25:	5f                   	pop    edi
c0016b26:	5d                   	pop    ebp
c0016b27:	c3                   	ret    

c0016b28 <Pipe::read(unsigned long long, void*, int*)>:
c0016b28:	55                   	push   ebp
c0016b29:	57                   	push   edi
c0016b2a:	56                   	push   esi
c0016b2b:	53                   	push   ebx
c0016b2c:	83 ec 1c             	sub    esp,0x1c
c0016b2f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0016b33:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016b37:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0016b3b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0016b3e:	89 c8                	mov    eax,ecx
c0016b40:	99                   	cdq    
c0016b41:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0016b45:	74 24                	je     c0016b6b <Pipe::read(unsigned long long, void*, int*)+0x43>
c0016b47:	39 f9                	cmp    ecx,edi
c0016b49:	89 d1                	mov    ecx,edx
c0016b4b:	19 f1                	sbb    ecx,esi
c0016b4d:	73 1c                	jae    c0016b6b <Pipe::read(unsigned long long, void*, int*)+0x43>
c0016b4f:	fa                   	cli    
c0016b50:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0016b56:	e8 3d e0 00 00       	call   c0024b98 <schedule()>
c0016b5b:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0016b60:	48                   	dec    eax
c0016b61:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0016b66:	75 d3                	jne    c0016b3b <Pipe::read(unsigned long long, void*, int*)+0x13>
c0016b68:	fb                   	sti    
c0016b69:	eb d0                	jmp    c0016b3b <Pipe::read(unsigned long long, void*, int*)+0x13>
c0016b6b:	39 f8                	cmp    eax,edi
c0016b6d:	89 d1                	mov    ecx,edx
c0016b6f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016b72:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016b76:	19 f1                	sbb    ecx,esi
c0016b78:	73 07                	jae    c0016b81 <Pipe::read(unsigned long long, void*, int*)+0x59>
c0016b7a:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b7d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016b81:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0016b84:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0016b87:	29 f7                	sub    edi,esi
c0016b89:	89 f8                	mov    eax,edi
c0016b8b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016b8f:	99                   	cdq    
c0016b90:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0016b93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016b97:	19 d0                	sbb    eax,edx
c0016b99:	73 07                	jae    c0016ba2 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0016b9b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016b9e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ba2:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c0016ba5:	89 ea                	mov    edx,ebp
c0016ba7:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0016bab:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016bb0:	74 0d                	je     c0016bbf <Pipe::read(unsigned long long, void*, int*)+0x97>
c0016bb2:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0016bb5:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0016bb9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016bbd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016bbf:	85 d2                	test   edx,edx
c0016bc1:	74 11                	je     c0016bd4 <Pipe::read(unsigned long long, void*, int*)+0xac>
c0016bc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016bc7:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0016bca:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016bce:	89 d1                	mov    ecx,edx
c0016bd0:	89 c7                	mov    edi,eax
c0016bd2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016bd4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016bd7:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0016bda:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0016bdd:	99                   	cdq    
c0016bde:	89 f7                	mov    edi,esi
c0016be0:	03 04 24             	add    eax,DWORD PTR [esp]
c0016be3:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0016be7:	c1 ff 1f             	sar    edi,0x1f
c0016bea:	57                   	push   edi
c0016beb:	56                   	push   esi
c0016bec:	52                   	push   edx
c0016bed:	50                   	push   eax
c0016bee:	e8 4d 77 01 00       	call   c002e340 <__umoddi3>
c0016bf3:	83 c4 10             	add    esp,0x10
c0016bf6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0016bf9:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0016bfe:	75 10                	jne    c0016c10 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0016c00:	83 ec 0c             	sub    esp,0xc
c0016c03:	68 b6 0d 03 c0       	push   0xc0030db6
c0016c08:	e8 3e 94 00 00       	call   c002004b <KePanic(char const*)>
c0016c0d:	83 c4 10             	add    esp,0x10
c0016c10:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016c14:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0016c17:	89 10                	mov    DWORD PTR [eax],edx
c0016c19:	83 c4 1c             	add    esp,0x1c
c0016c1c:	31 c0                	xor    eax,eax
c0016c1e:	5b                   	pop    ebx
c0016c1f:	5e                   	pop    esi
c0016c20:	5f                   	pop    edi
c0016c21:	5d                   	pop    ebp
c0016c22:	c3                   	ret    
c0016c23:	90                   	nop

c0016c24 <Pipe::Pipe(int)>:
c0016c24:	83 ec 0c             	sub    esp,0xc
c0016c27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c2b:	83 ec 08             	sub    esp,0x8
c0016c2e:	6a 00                	push   0x0
c0016c30:	50                   	push   eax
c0016c31:	e8 84 0d 00 00       	call   c00179ba <UnixFile::UnixFile(int)>
c0016c36:	83 c4 10             	add    esp,0x10
c0016c39:	ba dc 0d 03 c0       	mov    edx,0xc0030ddc
c0016c3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c42:	89 10                	mov    DWORD PTR [eax],edx
c0016c44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c48:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016c4c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016c4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c53:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0016c5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c5e:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0016c65:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016c69:	83 ec 0c             	sub    esp,0xc
c0016c6c:	50                   	push   eax
c0016c6d:	e8 40 f6 ff ff       	call   c00162b2 <malloc>
c0016c72:	83 c4 10             	add    esp,0x10
c0016c75:	89 c2                	mov    edx,eax
c0016c77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c7b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016c7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c82:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0016c86:	90                   	nop
c0016c87:	83 c4 0c             	add    esp,0xc
c0016c8a:	c3                   	ret    
c0016c8b:	90                   	nop

c0016c8c <VgaText::isAtty()>:
c0016c8c:	b0 01                	mov    al,0x1
c0016c8e:	c3                   	ret    
c0016c8f:	90                   	nop

c0016c90 <VgaText::~VgaText()>:
c0016c90:	83 ec 0c             	sub    esp,0xc
c0016c93:	ba 24 0e 03 c0       	mov    edx,0xc0030e24
c0016c98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c9c:	89 10                	mov    DWORD PTR [eax],edx
c0016c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ca2:	83 ec 0c             	sub    esp,0xc
c0016ca5:	50                   	push   eax
c0016ca6:	e8 f5 0e 00 00       	call   c0017ba0 <UnixFile::~UnixFile()>
c0016cab:	83 c4 10             	add    esp,0x10
c0016cae:	90                   	nop
c0016caf:	83 c4 0c             	add    esp,0xc
c0016cb2:	c3                   	ret    
c0016cb3:	90                   	nop

c0016cb4 <VgaText::~VgaText()>:
c0016cb4:	83 ec 0c             	sub    esp,0xc
c0016cb7:	83 ec 0c             	sub    esp,0xc
c0016cba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cbe:	e8 cd ff ff ff       	call   c0016c90 <VgaText::~VgaText()>
c0016cc3:	83 c4 10             	add    esp,0x10
c0016cc6:	83 ec 08             	sub    esp,0x8
c0016cc9:	68 84 01 00 00       	push   0x184
c0016cce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cd2:	e8 3d 23 00 00       	call   c0019014 <operator delete(void*, unsigned long)>
c0016cd7:	83 c4 10             	add    esp,0x10
c0016cda:	83 c4 0c             	add    esp,0xc
c0016cdd:	c3                   	ret    

c0016cde <VgaText::read(unsigned long long, void*, int*)>:
c0016cde:	83 ec 10             	sub    esp,0x10
c0016ce1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016ce5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016ce9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ced:	e8 ba 53 00 00       	call   c001c0ac <readKeyboard(VgaText*, char*, unsigned long)>
c0016cf2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016cf6:	89 02                	mov    DWORD PTR [edx],eax
c0016cf8:	31 c0                	xor    eax,eax
c0016cfa:	83 c4 1c             	add    esp,0x1c
c0016cfd:	c3                   	ret    

c0016cfe <setTerminalScrollLock(bool)>:
c0016cfe:	c3                   	ret    

c0016cff <doTerminalCycle()>:
c0016cff:	c3                   	ret    

c0016d00 <addToTerminalCycle(VgaText*)>:
c0016d00:	c3                   	ret    

c0016d01 <scrollTerminalScrollLock(int)>:
c0016d01:	c3                   	ret    

c0016d02 <VgaText::updateTitle()>:
c0016d02:	c3                   	ret    
c0016d03:	90                   	nop

c0016d04 <VgaText::load()>:
c0016d04:	c3                   	ret    
c0016d05:	90                   	nop

c0016d06 <VgaText::updateCursor()>:
c0016d06:	83 ec 14             	sub    esp,0x14
c0016d09:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016d0d:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0016d10:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0016d13:	e8 38 0c 01 00       	call   c0027950 <HalConsoleCursorUpdate(int, int)>
c0016d18:	83 c4 1c             	add    esp,0x1c
c0016d1b:	c3                   	ret    

c0016d1c <VgaText::doANSI_SGR(int)>:
c0016d1c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016d20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d24:	85 d2                	test   edx,edx
c0016d26:	75 0b                	jne    c0016d33 <VgaText::doANSI_SGR(int)+0x17>
c0016d28:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0016d2b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0016d2e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016d31:	eb 59                	jmp    c0016d8c <VgaText::doANSI_SGR(int)+0x70>
c0016d33:	83 fa 07             	cmp    edx,0x7
c0016d36:	75 0b                	jne    c0016d43 <VgaText::doANSI_SGR(int)+0x27>
c0016d38:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0016d3b:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0016d3e:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0016d41:	eb 49                	jmp    c0016d8c <VgaText::doANSI_SGR(int)+0x70>
c0016d43:	83 fa 1b             	cmp    edx,0x1b
c0016d46:	74 e0                	je     c0016d28 <VgaText::doANSI_SGR(int)+0xc>
c0016d48:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0016d4b:	83 f9 07             	cmp    ecx,0x7
c0016d4e:	77 09                	ja     c0016d59 <VgaText::doANSI_SGR(int)+0x3d>
c0016d50:	8b 14 8d 00 37 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffcc900]
c0016d57:	eb 20                	jmp    c0016d79 <VgaText::doANSI_SGR(int)+0x5d>
c0016d59:	8d 4a d8             	lea    ecx,[edx-0x28]
c0016d5c:	83 f9 07             	cmp    ecx,0x7
c0016d5f:	77 09                	ja     c0016d6a <VgaText::doANSI_SGR(int)+0x4e>
c0016d61:	8b 14 8d 00 37 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffcc900]
c0016d68:	eb 22                	jmp    c0016d8c <VgaText::doANSI_SGR(int)+0x70>
c0016d6a:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0016d6d:	83 f9 07             	cmp    ecx,0x7
c0016d70:	77 0b                	ja     c0016d7d <VgaText::doANSI_SGR(int)+0x61>
c0016d72:	8b 14 95 b8 35 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcca48]
c0016d79:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0016d7c:	c3                   	ret    
c0016d7d:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0016d80:	83 f9 07             	cmp    ecx,0x7
c0016d83:	77 0a                	ja     c0016d8f <VgaText::doANSI_SGR(int)+0x73>
c0016d85:	8b 14 95 90 35 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcca70]
c0016d8c:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0016d8f:	c3                   	ret    

c0016d90 <VgaText::setDefaultBgColour(VgaColour)>:
c0016d90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d94:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016d98:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016d9b:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0016d9e:	c3                   	ret    
c0016d9f:	90                   	nop

c0016da0 <VgaText::setDefaultFgColour(VgaColour)>:
c0016da0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016da4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016da8:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0016dab:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0016dae:	c3                   	ret    
c0016daf:	90                   	nop

c0016db0 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0016db0:	53                   	push   ebx
c0016db1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016db5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0016db9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016dbd:	51                   	push   ecx
c0016dbe:	e8 cd ff ff ff       	call   c0016d90 <VgaText::setDefaultBgColour(VgaColour)>
c0016dc3:	58                   	pop    eax
c0016dc4:	5a                   	pop    edx
c0016dc5:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0016dc9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016dcd:	5b                   	pop    ebx
c0016dce:	eb d0                	jmp    c0016da0 <VgaText::setDefaultFgColour(VgaColour)>

c0016dd0 <VgaText::setTitleTextColour(VgaColour)>:
c0016dd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016dd4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016dd8:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0016ddb:	c3                   	ret    

c0016ddc <VgaText::setTitleColour(VgaColour)>:
c0016ddc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016de0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016de4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016de7:	c3                   	ret    

c0016de8 <VgaText::setTitle(char*)>:
c0016de8:	c3                   	ret    
c0016de9:	90                   	nop

c0016dea <VgaText::combineColours(unsigned char, unsigned char)>:
c0016dea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016dee:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0016df3:	83 e0 0f             	and    eax,0xf
c0016df6:	c1 e2 04             	shl    edx,0x4
c0016df9:	09 d0                	or     eax,edx
c0016dfb:	c3                   	ret    

c0016dfc <VgaText::scrollScreen()>:
c0016dfc:	55                   	push   ebp
c0016dfd:	57                   	push   edi
c0016dfe:	56                   	push   esi
c0016dff:	be 01 00 00 00       	mov    esi,0x1
c0016e04:	53                   	push   ebx
c0016e05:	83 ec 0c             	sub    esp,0xc
c0016e08:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016e0c:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0016e0f:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0016e15:	31 ff                	xor    edi,edi
c0016e17:	01 e9                	add    ecx,ebp
c0016e19:	8a 01                	mov    al,BYTE PTR [ecx]
c0016e1b:	83 fe 18             	cmp    esi,0x18
c0016e1e:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0016e24:	75 20                	jne    c0016e46 <VgaText::scrollScreen()+0x4a>
c0016e26:	f7 c7 01 00 00 00    	test   edi,0x1
c0016e2c:	74 15                	je     c0016e43 <VgaText::scrollScreen()+0x47>
c0016e2e:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0016e32:	50                   	push   eax
c0016e33:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0016e37:	50                   	push   eax
c0016e38:	e8 ad ff ff ff       	call   c0016dea <VgaText::combineColours(unsigned char, unsigned char)>
c0016e3d:	5a                   	pop    edx
c0016e3e:	5a                   	pop    edx
c0016e3f:	88 01                	mov    BYTE PTR [ecx],al
c0016e41:	eb 03                	jmp    c0016e46 <VgaText::scrollScreen()+0x4a>
c0016e43:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0016e46:	47                   	inc    edi
c0016e47:	41                   	inc    ecx
c0016e48:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0016e4e:	75 c9                	jne    c0016e19 <VgaText::scrollScreen()+0x1d>
c0016e50:	46                   	inc    esi
c0016e51:	83 fe 19             	cmp    esi,0x19
c0016e54:	75 b9                	jne    c0016e0f <VgaText::scrollScreen()+0x13>
c0016e56:	39 1d 08 aa 03 c0    	cmp    DWORD PTR ds:0xc003aa08,ebx
c0016e5c:	75 1f                	jne    c0016e7d <VgaText::scrollScreen()+0x81>
c0016e5e:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0016e62:	74 05                	je     c0016e69 <VgaText::scrollScreen()+0x6d>
c0016e64:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0016e67:	eb 14                	jmp    c0016e7d <VgaText::scrollScreen()+0x81>
c0016e69:	50                   	push   eax
c0016e6a:	50                   	push   eax
c0016e6b:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0016e6f:	50                   	push   eax
c0016e70:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0016e74:	50                   	push   eax
c0016e75:	e8 6a 09 01 00       	call   c00277e4 <HalConsoleScroll(int, int)>
c0016e7a:	83 c4 10             	add    esp,0x10
c0016e7d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0016e81:	83 c4 0c             	add    esp,0xc
c0016e84:	5b                   	pop    ebx
c0016e85:	5e                   	pop    esi
c0016e86:	5f                   	pop    edi
c0016e87:	5d                   	pop    ebp
c0016e88:	e9 79 fe ff ff       	jmp    c0016d06 <VgaText::updateCursor()>
c0016e8d:	90                   	nop

c0016e8e <VgaText::combineCharAndColour(char, unsigned char)>:
c0016e8e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0016e93:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0016e98:	c1 e0 08             	shl    eax,0x8
c0016e9b:	09 d0                	or     eax,edx
c0016e9d:	c3                   	ret    

c0016e9e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0016e9e:	55                   	push   ebp
c0016e9f:	57                   	push   edi
c0016ea0:	56                   	push   esi
c0016ea1:	53                   	push   ebx
c0016ea2:	83 ec 1c             	sub    esp,0x1c
c0016ea5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016ea9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016ead:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016eb1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016eb5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016eb9:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016ebd:	0f b6 c3             	movzx  eax,bl
c0016ec0:	50                   	push   eax
c0016ec1:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016ec6:	50                   	push   eax
c0016ec7:	e8 1e ff ff ff       	call   c0016dea <VgaText::combineColours(unsigned char, unsigned char)>
c0016ecc:	5a                   	pop    edx
c0016ecd:	0f b6 c0             	movzx  eax,al
c0016ed0:	59                   	pop    ecx
c0016ed1:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0016ed6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016eda:	50                   	push   eax
c0016edb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016edf:	e8 aa ff ff ff       	call   c0016e8e <VgaText::combineCharAndColour(char, unsigned char)>
c0016ee4:	5a                   	pop    edx
c0016ee5:	6b d7 50             	imul   edx,edi,0x50
c0016ee8:	59                   	pop    ecx
c0016ee9:	01 f2                	add    edx,esi
c0016eeb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0016eee:	0f b7 d2             	movzx  edx,dx
c0016ef1:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0016ef5:	39 2d 08 aa 03 c0    	cmp    DWORD PTR ds:0xc003aa08,ebp
c0016efb:	75 28                	jne    c0016f25 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0016efd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f01:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0016f05:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0016f09:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0016f0d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016f11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f15:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016f19:	83 c4 1c             	add    esp,0x1c
c0016f1c:	5b                   	pop    ebx
c0016f1d:	5e                   	pop    esi
c0016f1e:	5f                   	pop    edi
c0016f1f:	5d                   	pop    ebp
c0016f20:	e9 c7 09 01 00       	jmp    c00278ec <HalConsoleWriteCharacter(char, int, int, int, int)>
c0016f25:	83 c4 1c             	add    esp,0x1c
c0016f28:	5b                   	pop    ebx
c0016f29:	5e                   	pop    esi
c0016f2a:	5f                   	pop    edi
c0016f2b:	5d                   	pop    ebp
c0016f2c:	c3                   	ret    
c0016f2d:	90                   	nop

c0016f2e <VgaText::getCursorX()>:
c0016f2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f32:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0016f35:	c3                   	ret    

c0016f36 <VgaText::getCursorY()>:
c0016f36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f3a:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0016f3d:	c3                   	ret    

c0016f3e <VgaText::setCursor(int, int)>:
c0016f3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f42:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016f46:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0016f49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016f4d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016f50:	e9 b1 fd ff ff       	jmp    c0016d06 <VgaText::updateCursor()>

c0016f55 <setActiveTerminal(VgaText*)>:
c0016f55:	53                   	push   ebx
c0016f56:	83 ec 08             	sub    esp,0x8
c0016f59:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016f5d:	85 db                	test   ebx,ebx
c0016f5f:	75 11                	jne    c0016f72 <setActiveTerminal(VgaText*)+0x1d>
c0016f61:	c7 44 24 10 f0 0d 03 c0 	mov    DWORD PTR [esp+0x10],0xc0030df0
c0016f69:	83 c4 08             	add    esp,0x8
c0016f6c:	5b                   	pop    ebx
c0016f6d:	e9 d9 90 00 00       	jmp    c002004b <KePanic(char const*)>
c0016f72:	a1 08 aa 03 c0       	mov    eax,ds:0xc003aa08
c0016f77:	85 c0                	test   eax,eax
c0016f79:	74 0c                	je     c0016f87 <setActiveTerminal(VgaText*)+0x32>
c0016f7b:	83 ec 0c             	sub    esp,0xc
c0016f7e:	50                   	push   eax
c0016f7f:	e8 82 fd ff ff       	call   c0016d06 <VgaText::updateCursor()>
c0016f84:	83 c4 10             	add    esp,0x10
c0016f87:	89 1d 08 aa 03 c0    	mov    DWORD PTR ds:0xc003aa08,ebx
c0016f8d:	50                   	push   eax
c0016f8e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0016f91:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0016f94:	53                   	push   ebx
c0016f95:	e8 a4 ff ff ff       	call   c0016f3e <VgaText::setCursor(int, int)>
c0016f9a:	83 c4 18             	add    esp,0x18
c0016f9d:	5b                   	pop    ebx
c0016f9e:	c3                   	ret    
c0016f9f:	90                   	nop

c0016fa0 <VgaText::clearScreen()>:
c0016fa0:	57                   	push   edi
c0016fa1:	56                   	push   esi
c0016fa2:	31 f6                	xor    esi,esi
c0016fa4:	53                   	push   ebx
c0016fa5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016fa9:	52                   	push   edx
c0016faa:	6a 00                	push   0x0
c0016fac:	6a 00                	push   0x0
c0016fae:	53                   	push   ebx
c0016faf:	e8 8a ff ff ff       	call   c0016f3e <VgaText::setCursor(int, int)>
c0016fb4:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0016fbb:	83 c4 10             	add    esp,0x10
c0016fbe:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0016fc1:	7e 20                	jle    c0016fe3 <VgaText::clearScreen()+0x43>
c0016fc3:	31 ff                	xor    edi,edi
c0016fc5:	50                   	push   eax
c0016fc6:	50                   	push   eax
c0016fc7:	56                   	push   esi
c0016fc8:	57                   	push   edi
c0016fc9:	47                   	inc    edi
c0016fca:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0016fcd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0016fd0:	6a 20                	push   0x20
c0016fd2:	53                   	push   ebx
c0016fd3:	e8 c6 fe ff ff       	call   c0016e9e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0016fd8:	83 c4 20             	add    esp,0x20
c0016fdb:	83 ff 50             	cmp    edi,0x50
c0016fde:	75 e5                	jne    c0016fc5 <VgaText::clearScreen()+0x25>
c0016fe0:	46                   	inc    esi
c0016fe1:	eb db                	jmp    c0016fbe <VgaText::clearScreen()+0x1e>
c0016fe3:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0016fea:	5b                   	pop    ebx
c0016feb:	5e                   	pop    esi
c0016fec:	5f                   	pop    edi
c0016fed:	c3                   	ret    

c0016fee <VgaText::setCursorX(int)>:
c0016fee:	83 ec 10             	sub    esp,0x10
c0016ff1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016ff5:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0016ff8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ffc:	50                   	push   eax
c0016ffd:	e8 3c ff ff ff       	call   c0016f3e <VgaText::setCursor(int, int)>
c0017002:	83 c4 1c             	add    esp,0x1c
c0017005:	c3                   	ret    

c0017006 <VgaText::setCursorY(int)>:
c0017006:	83 ec 10             	sub    esp,0x10
c0017009:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001700d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017011:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0017014:	50                   	push   eax
c0017015:	e8 24 ff ff ff       	call   c0016f3e <VgaText::setCursor(int, int)>
c001701a:	83 c4 1c             	add    esp,0x1c
c001701d:	c3                   	ret    

c001701e <VgaText::incrementCursor(bool)>:
c001701e:	56                   	push   esi
c001701f:	53                   	push   ebx
c0017020:	51                   	push   ecx
c0017021:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017025:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017029:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001702c:	40                   	inc    eax
c001702d:	83 f8 50             	cmp    eax,0x50
c0017030:	74 05                	je     c0017037 <VgaText::incrementCursor(bool)+0x19>
c0017032:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0017035:	eb 24                	jmp    c001705b <VgaText::incrementCursor(bool)+0x3d>
c0017037:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001703a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0017041:	8d 50 01             	lea    edx,[eax+0x1]
c0017044:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0017047:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001704a:	75 0f                	jne    c001705b <VgaText::incrementCursor(bool)+0x3d>
c001704c:	83 ec 0c             	sub    esp,0xc
c001704f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0017052:	53                   	push   ebx
c0017053:	e8 a4 fd ff ff       	call   c0016dfc <VgaText::scrollScreen()>
c0017058:	83 c4 10             	add    esp,0x10
c001705b:	89 f0                	mov    eax,esi
c001705d:	84 c0                	test   al,al
c001705f:	74 0c                	je     c001706d <VgaText::incrementCursor(bool)+0x4f>
c0017061:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017065:	5a                   	pop    edx
c0017066:	5b                   	pop    ebx
c0017067:	5e                   	pop    esi
c0017068:	e9 99 fc ff ff       	jmp    c0016d06 <VgaText::updateCursor()>
c001706d:	58                   	pop    eax
c001706e:	5b                   	pop    ebx
c001706f:	5e                   	pop    esi
c0017070:	c3                   	ret    
c0017071:	90                   	nop

c0017072 <VgaText::decrementCursor(bool)>:
c0017072:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017076:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001707a:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001707d:	85 c0                	test   eax,eax
c001707f:	74 04                	je     c0017085 <VgaText::decrementCursor(bool)+0x13>
c0017081:	48                   	dec    eax
c0017082:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0017085:	84 c9                	test   cl,cl
c0017087:	74 09                	je     c0017092 <VgaText::decrementCursor(bool)+0x20>
c0017089:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001708d:	e9 74 fc ff ff       	jmp    c0016d06 <VgaText::updateCursor()>
c0017092:	c3                   	ret    
c0017093:	90                   	nop

c0017094 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0017094:	53                   	push   ebx
c0017095:	83 ec 08             	sub    esp,0x8
c0017098:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c001709d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00170a1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00170a5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00170a9:	83 f8 07             	cmp    eax,0x7
c00170ac:	75 21                	jne    c00170cf <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00170ae:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00170b6:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00170be:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00170c6:	83 c4 08             	add    esp,0x8
c00170c9:	5b                   	pop    ebx
c00170ca:	e9 18 3b 00 00       	jmp    c001abe7 <Krnl::beep(int, int, bool)>
c00170cf:	83 f8 0d             	cmp    eax,0xd
c00170d2:	75 09                	jne    c00170dd <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00170d4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00170db:	eb 2d                	jmp    c001710a <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00170dd:	83 f8 0a             	cmp    eax,0xa
c00170e0:	75 31                	jne    c0017113 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00170e2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00170e5:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00170ec:	8d 50 01             	lea    edx,[eax+0x1]
c00170ef:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00170f2:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00170f5:	75 0f                	jne    c0017106 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00170f7:	83 ec 0c             	sub    esp,0xc
c00170fa:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00170fd:	53                   	push   ebx
c00170fe:	e8 f9 fc ff ff       	call   c0016dfc <VgaText::scrollScreen()>
c0017103:	83 c4 10             	add    esp,0x10
c0017106:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001710a:	83 c4 08             	add    esp,0x8
c001710d:	5b                   	pop    ebx
c001710e:	e9 f3 fb ff ff       	jmp    c0016d06 <VgaText::updateCursor()>
c0017113:	83 f8 08             	cmp    eax,0x8
c0017116:	75 25                	jne    c001713d <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0017118:	50                   	push   eax
c0017119:	50                   	push   eax
c001711a:	6a 01                	push   0x1
c001711c:	53                   	push   ebx
c001711d:	e8 50 ff ff ff       	call   c0017072 <VgaText::decrementCursor(bool)>
c0017122:	5a                   	pop    edx
c0017123:	59                   	pop    ecx
c0017124:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0017127:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001712a:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001712d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0017130:	6a 20                	push   0x20
c0017132:	53                   	push   ebx
c0017133:	e8 66 fd ff ff       	call   c0016e9e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0017138:	83 c4 28             	add    esp,0x28
c001713b:	5b                   	pop    ebx
c001713c:	c3                   	ret    
c001713d:	83 ec 08             	sub    esp,0x8
c0017140:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0017143:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0017146:	51                   	push   ecx
c0017147:	52                   	push   edx
c0017148:	50                   	push   eax
c0017149:	53                   	push   ebx
c001714a:	e8 4f fd ff ff       	call   c0016e9e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001714f:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0017153:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c001715b:	83 c4 28             	add    esp,0x28
c001715e:	5b                   	pop    ebx
c001715f:	e9 ba fe ff ff       	jmp    c001701e <VgaText::incrementCursor(bool)>

c0017164 <VgaText::putchar(char)>:
c0017164:	57                   	push   edi
c0017165:	56                   	push   esi
c0017166:	53                   	push   ebx
c0017167:	83 ec 10             	sub    esp,0x10
c001716a:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001716e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017172:	89 f8                	mov    eax,edi
c0017174:	0f be c0             	movsx  eax,al
c0017177:	83 f8 5b             	cmp    eax,0x5b
c001717a:	75 18                	jne    c0017194 <VgaText::putchar(char)+0x30>
c001717c:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0017180:	74 20                	je     c00171a2 <VgaText::putchar(char)+0x3e>
c0017182:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0017188:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c001718f:	e9 c1 00 00 00       	jmp    c0017255 <VgaText::putchar(char)+0xf1>
c0017194:	83 f8 1b             	cmp    eax,0x1b
c0017197:	75 09                	jne    c00171a2 <VgaText::putchar(char)+0x3e>
c0017199:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c001719d:	e9 b3 00 00 00       	jmp    c0017255 <VgaText::putchar(char)+0xf1>
c00171a2:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00171a5:	84 c9                	test   cl,cl
c00171a7:	0f 84 98 00 00 00    	je     c0017245 <VgaText::putchar(char)+0xe1>
c00171ad:	8d 77 c0             	lea    esi,[edi-0x40]
c00171b0:	89 f2                	mov    edx,esi
c00171b2:	80 fa 3e             	cmp    dl,0x3e
c00171b5:	77 78                	ja     c001722f <VgaText::putchar(char)+0xcb>
c00171b7:	83 f8 6d             	cmp    eax,0x6d
c00171ba:	75 47                	jne    c0017203 <VgaText::putchar(char)+0x9f>
c00171bc:	31 f6                	xor    esi,esi
c00171be:	31 d2                	xor    edx,edx
c00171c0:	31 c0                	xor    eax,eax
c00171c2:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00171c5:	7e 2d                	jle    c00171f4 <VgaText::putchar(char)+0x90>
c00171c7:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00171cc:	83 fa 3b             	cmp    edx,0x3b
c00171cf:	75 17                	jne    c00171e8 <VgaText::putchar(char)+0x84>
c00171d1:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00171d5:	50                   	push   eax
c00171d6:	53                   	push   ebx
c00171d7:	e8 40 fb ff ff       	call   c0016d1c <VgaText::doANSI_SGR(int)>
c00171dc:	59                   	pop    ecx
c00171dd:	31 d2                	xor    edx,edx
c00171df:	5f                   	pop    edi
c00171e0:	31 c0                	xor    eax,eax
c00171e2:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00171e6:	eb 09                	jmp    c00171f1 <VgaText::putchar(char)+0x8d>
c00171e8:	6b c0 0a             	imul   eax,eax,0xa
c00171eb:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00171ef:	88 ca                	mov    dl,cl
c00171f1:	46                   	inc    esi
c00171f2:	eb ce                	jmp    c00171c2 <VgaText::putchar(char)+0x5e>
c00171f4:	84 d2                	test   dl,dl
c00171f6:	74 2f                	je     c0017227 <VgaText::putchar(char)+0xc3>
c00171f8:	50                   	push   eax
c00171f9:	53                   	push   ebx
c00171fa:	e8 1d fb ff ff       	call   c0016d1c <VgaText::doANSI_SGR(int)>
c00171ff:	58                   	pop    eax
c0017200:	5a                   	pop    edx
c0017201:	eb 24                	jmp    c0017227 <VgaText::putchar(char)+0xc3>
c0017203:	83 f8 4a             	cmp    eax,0x4a
c0017206:	75 1f                	jne    c0017227 <VgaText::putchar(char)+0xc3>
c0017208:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c001720c:	75 19                	jne    c0017227 <VgaText::putchar(char)+0xc3>
c001720e:	83 ec 0c             	sub    esp,0xc
c0017211:	53                   	push   ebx
c0017212:	e8 89 fd ff ff       	call   c0016fa0 <VgaText::clearScreen()>
c0017217:	83 c4 0c             	add    esp,0xc
c001721a:	6a 00                	push   0x0
c001721c:	6a 00                	push   0x0
c001721e:	53                   	push   ebx
c001721f:	e8 1a fd ff ff       	call   c0016f3e <VgaText::setCursor(int, int)>
c0017224:	83 c4 10             	add    esp,0x10
c0017227:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c001722d:	eb 26                	jmp    c0017255 <VgaText::putchar(char)+0xf1>
c001722f:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0017232:	83 f8 0e             	cmp    eax,0xe
c0017235:	7f 1e                	jg     c0017255 <VgaText::putchar(char)+0xf1>
c0017237:	8d 48 01             	lea    ecx,[eax+0x1]
c001723a:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c001723d:	89 f9                	mov    ecx,edi
c001723f:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0017243:	eb 10                	jmp    c0017255 <VgaText::putchar(char)+0xf1>
c0017245:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0017248:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001724b:	50                   	push   eax
c001724c:	53                   	push   ebx
c001724d:	e8 42 fe ff ff       	call   c0017094 <VgaText::putchar(char, VgaColour, VgaColour)>
c0017252:	83 c4 10             	add    esp,0x10
c0017255:	83 c4 10             	add    esp,0x10
c0017258:	5b                   	pop    ebx
c0017259:	5e                   	pop    esi
c001725a:	5f                   	pop    edi
c001725b:	c3                   	ret    

c001725c <VgaText::putx(unsigned int)>:
c001725c:	57                   	push   edi
c001725d:	b9 11 00 00 00       	mov    ecx,0x11
c0017262:	56                   	push   esi
c0017263:	be fe 0d 03 c0       	mov    esi,0xc0030dfe
c0017268:	53                   	push   ebx
c0017269:	83 ec 20             	sub    esp,0x20
c001726c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0017270:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0017274:	fc                   	cld    
c0017275:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017277:	be 08 00 00 00       	mov    esi,0x8
c001727c:	50                   	push   eax
c001727d:	50                   	push   eax
c001727e:	89 d8                	mov    eax,ebx
c0017280:	c1 e3 04             	shl    ebx,0x4
c0017283:	c1 e8 1c             	shr    eax,0x1c
c0017286:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c001728b:	50                   	push   eax
c001728c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017290:	e8 cf fe ff ff       	call   c0017164 <VgaText::putchar(char)>
c0017295:	83 c4 10             	add    esp,0x10
c0017298:	4e                   	dec    esi
c0017299:	75 e1                	jne    c001727c <VgaText::putx(unsigned int)+0x20>
c001729b:	83 c4 20             	add    esp,0x20
c001729e:	5b                   	pop    ebx
c001729f:	5e                   	pop    esi
c00172a0:	5f                   	pop    edi
c00172a1:	c3                   	ret    

c00172a2 <VgaText::puts(char const*)>:
c00172a2:	53                   	push   ebx
c00172a3:	83 ec 08             	sub    esp,0x8
c00172a6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00172aa:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00172ad:	85 c0                	test   eax,eax
c00172af:	74 12                	je     c00172c3 <VgaText::puts(char const*)+0x21>
c00172b1:	43                   	inc    ebx
c00172b2:	51                   	push   ecx
c00172b3:	51                   	push   ecx
c00172b4:	50                   	push   eax
c00172b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00172b9:	e8 a6 fe ff ff       	call   c0017164 <VgaText::putchar(char)>
c00172be:	83 c4 10             	add    esp,0x10
c00172c1:	eb e7                	jmp    c00172aa <VgaText::puts(char const*)+0x8>
c00172c3:	83 c4 08             	add    esp,0x8
c00172c6:	5b                   	pop    ebx
c00172c7:	c3                   	ret    

c00172c8 <VgaText::write(unsigned long long, void*, int*)>:
c00172c8:	55                   	push   ebp
c00172c9:	57                   	push   edi
c00172ca:	56                   	push   esi
c00172cb:	53                   	push   ebx
c00172cc:	83 ec 0c             	sub    esp,0xc
c00172cf:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00172d3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00172d7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00172db:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c00172e2:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00172e5:	39 eb                	cmp    ebx,ebp
c00172e7:	74 13                	je     c00172fc <VgaText::write(unsigned long long, void*, int*)+0x34>
c00172e9:	43                   	inc    ebx
c00172ea:	50                   	push   eax
c00172eb:	50                   	push   eax
c00172ec:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00172f0:	50                   	push   eax
c00172f1:	56                   	push   esi
c00172f2:	e8 6d fe ff ff       	call   c0017164 <VgaText::putchar(char)>
c00172f7:	83 c4 10             	add    esp,0x10
c00172fa:	eb e9                	jmp    c00172e5 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00172fc:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0017303:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017307:	89 38                	mov    DWORD PTR [eax],edi
c0017309:	83 c4 0c             	add    esp,0xc
c001730c:	31 c0                	xor    eax,eax
c001730e:	5b                   	pop    ebx
c001730f:	5e                   	pop    esi
c0017310:	5f                   	pop    edi
c0017311:	5d                   	pop    ebp
c0017312:	c3                   	ret    
c0017313:	90                   	nop

c0017314 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0017314:	55                   	push   ebp
c0017315:	57                   	push   edi
c0017316:	56                   	push   esi
c0017317:	53                   	push   ebx
c0017318:	83 ec 0c             	sub    esp,0xc
c001731b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001731f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017324:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c001732b:	50                   	push   eax
c001732c:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017331:	50                   	push   eax
c0017332:	e8 b3 fa ff ff       	call   c0016dea <VgaText::combineColours(unsigned char, unsigned char)>
c0017337:	5a                   	pop    edx
c0017338:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c001733c:	59                   	pop    ecx
c001733d:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0017340:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0017344:	0f b7 f6             	movzx  esi,si
c0017347:	0f b6 e8             	movzx  ebp,al
c001734a:	01 f6                	add    esi,esi
c001734c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001734f:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0017352:	85 c0                	test   eax,eax
c0017354:	0f 84 ef 00 00 00    	je     c0017449 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c001735a:	83 f8 0d             	cmp    eax,0xd
c001735d:	75 0c                	jne    c001736b <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c001735f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0017366:	e9 d8 00 00 00       	jmp    c0017443 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c001736b:	83 f8 0a             	cmp    eax,0xa
c001736e:	75 44                	jne    c00173b4 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0017370:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017373:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001737a:	8d 48 01             	lea    ecx,[eax+0x1]
c001737d:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0017380:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0017383:	75 0f                	jne    c0017394 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0017385:	83 ec 0c             	sub    esp,0xc
c0017388:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001738b:	53                   	push   ebx
c001738c:	e8 6b fa ff ff       	call   c0016dfc <VgaText::scrollScreen()>
c0017391:	83 c4 10             	add    esp,0x10
c0017394:	83 ec 0c             	sub    esp,0xc
c0017397:	53                   	push   ebx
c0017398:	e8 69 f9 ff ff       	call   c0016d06 <VgaText::updateCursor()>
c001739d:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c00173a1:	83 c4 10             	add    esp,0x10
c00173a4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00173a7:	0f b7 f6             	movzx  esi,si
c00173aa:	01 f6                	add    esi,esi
c00173ac:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00173af:	e9 8f 00 00 00       	jmp    c0017443 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c00173b4:	83 f8 08             	cmp    eax,0x8
c00173b7:	75 34                	jne    c00173ed <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c00173b9:	51                   	push   ecx
c00173ba:	51                   	push   ecx
c00173bb:	6a 01                	push   0x1
c00173bd:	53                   	push   ebx
c00173be:	e8 af fc ff ff       	call   c0017072 <VgaText::decrementCursor(bool)>
c00173c3:	5e                   	pop    esi
c00173c4:	58                   	pop    eax
c00173c5:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00173c8:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00173cb:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00173ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00173d1:	6a 20                	push   0x20
c00173d3:	53                   	push   ebx
c00173d4:	e8 c5 fa ff ff       	call   c0016e9e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00173d9:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c00173dd:	83 c4 20             	add    esp,0x20
c00173e0:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00173e3:	0f b7 f6             	movzx  esi,si
c00173e6:	01 f6                	add    esi,esi
c00173e8:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00173eb:	eb 56                	jmp    c0017443 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c00173ed:	52                   	push   edx
c00173ee:	52                   	push   edx
c00173ef:	55                   	push   ebp
c00173f0:	50                   	push   eax
c00173f1:	e8 98 fa ff ff       	call   c0016e8e <VgaText::combineCharAndColour(char, unsigned char)>
c00173f6:	83 c4 10             	add    esp,0x10
c00173f9:	66 89 06             	mov    WORD PTR [esi],ax
c00173fc:	39 1d 08 aa 03 c0    	cmp    DWORD PTR ds:0xc003aa08,ebx
c0017402:	75 1d                	jne    c0017421 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0017404:	83 ec 0c             	sub    esp,0xc
c0017407:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001740a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001740d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017411:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017415:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0017418:	50                   	push   eax
c0017419:	e8 ce 04 01 00       	call   c00278ec <HalConsoleWriteCharacter(char, int, int, int, int)>
c001741e:	83 c4 20             	add    esp,0x20
c0017421:	83 c6 02             	add    esi,0x2
c0017424:	50                   	push   eax
c0017425:	50                   	push   eax
c0017426:	6a 00                	push   0x0
c0017428:	53                   	push   ebx
c0017429:	e8 f0 fb ff ff       	call   c001701e <VgaText::incrementCursor(bool)>
c001742e:	83 c4 10             	add    esp,0x10
c0017431:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0017435:	75 0c                	jne    c0017443 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0017437:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c001743b:	0f b7 f6             	movzx  esi,si
c001743e:	01 f6                	add    esi,esi
c0017440:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0017443:	47                   	inc    edi
c0017444:	e9 06 ff ff ff       	jmp    c001734f <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0017449:	83 ec 0c             	sub    esp,0xc
c001744c:	53                   	push   ebx
c001744d:	e8 b4 f8 ff ff       	call   c0016d06 <VgaText::updateCursor()>
c0017452:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0017459:	83 c4 1c             	add    esp,0x1c
c001745c:	5b                   	pop    ebx
c001745d:	5e                   	pop    esi
c001745e:	5f                   	pop    edi
c001745f:	5d                   	pop    ebp
c0017460:	c3                   	ret    
c0017461:	90                   	nop

c0017462 <VgaText::VgaText(char const*)>:
c0017462:	56                   	push   esi
c0017463:	53                   	push   ebx
c0017464:	83 ec 04             	sub    esp,0x4
c0017467:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001746b:	83 ec 08             	sub    esp,0x8
c001746e:	6a 00                	push   0x0
c0017470:	50                   	push   eax
c0017471:	e8 44 05 00 00       	call   c00179ba <UnixFile::UnixFile(int)>
c0017476:	83 c4 10             	add    esp,0x10
c0017479:	ba 24 0e 03 c0       	mov    edx,0xc0030e24
c001747e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017482:	89 10                	mov    DWORD PTR [eax],edx
c0017484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017488:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c001748f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017493:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c001749a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001749e:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00174a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174a6:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00174aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174ae:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00174b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174b9:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00174c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174c4:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00174cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174cf:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00174d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174da:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c00174e1:	83 ec 0c             	sub    esp,0xc
c00174e4:	6a 01                	push   0x1
c00174e6:	e8 1e 09 00 00       	call   c0017e09 <Virt::allocateKernelVirtualPages(int)>
c00174eb:	83 c4 10             	add    esp,0x10
c00174ee:	89 c2                	mov    edx,eax
c00174f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174f4:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00174f7:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c00174fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017501:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017504:	89 c6                	mov    esi,eax
c0017506:	e8 b0 f0 ff ff       	call   c00165bb <Phys::allocatePage()>
c001750b:	68 05 0c 00 00       	push   0xc05
c0017510:	56                   	push   esi
c0017511:	50                   	push   eax
c0017512:	53                   	push   ebx
c0017513:	e8 04 10 00 00       	call   c001851c <VAS::mapPage(unsigned long, unsigned long, int)>
c0017518:	83 c4 10             	add    esp,0x10
c001751b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001751f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017522:	83 ec 04             	sub    esp,0x4
c0017525:	68 a0 0f 00 00       	push   0xfa0
c001752a:	6a 00                	push   0x0
c001752c:	50                   	push   eax
c001752d:	e8 be 8f fe ff       	call   c00004f0 <memset>
c0017532:	83 c4 10             	add    esp,0x10
c0017535:	83 ec 04             	sub    esp,0x4
c0017538:	6a 00                	push   0x0
c001753a:	6a 07                	push   0x7
c001753c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017540:	e8 6b f8 ff ff       	call   c0016db0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017545:	83 c4 10             	add    esp,0x10
c0017548:	83 ec 04             	sub    esp,0x4
c001754b:	6a 00                	push   0x0
c001754d:	6a 00                	push   0x0
c001754f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017553:	e8 e6 f9 ff ff       	call   c0016f3e <VgaText::setCursor(int, int)>
c0017558:	83 c4 10             	add    esp,0x10
c001755b:	83 ec 0c             	sub    esp,0xc
c001755e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017562:	e8 39 fa ff ff       	call   c0016fa0 <VgaText::clearScreen()>
c0017567:	83 c4 10             	add    esp,0x10
c001756a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001756e:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0017572:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017576:	05 82 00 00 00       	add    eax,0x82
c001757b:	83 ec 04             	sub    esp,0x4
c001757e:	68 80 00 00 00       	push   0x80
c0017583:	6a 00                	push   0x0
c0017585:	50                   	push   eax
c0017586:	e8 65 8f fe ff       	call   c00004f0 <memset>
c001758b:	83 c4 10             	add    esp,0x10
c001758e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017592:	05 02 01 00 00       	add    eax,0x102
c0017597:	83 ec 04             	sub    esp,0x4
c001759a:	68 80 00 00 00       	push   0x80
c001759f:	6a 00                	push   0x0
c00175a1:	50                   	push   eax
c00175a2:	e8 49 8f fe ff       	call   c00004f0 <memset>
c00175a7:	83 c4 10             	add    esp,0x10
c00175aa:	90                   	nop
c00175ab:	83 c4 04             	add    esp,0x4
c00175ae:	5b                   	pop    ebx
c00175af:	5e                   	pop    esi
c00175b0:	c3                   	ret    
c00175b1:	90                   	nop

c00175b2 <VgaText::receiveKey(unsigned char)>:
c00175b2:	55                   	push   ebp
c00175b3:	57                   	push   edi
c00175b4:	56                   	push   esi
c00175b5:	53                   	push   ebx
c00175b6:	83 ec 2c             	sub    esp,0x2c
c00175b9:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00175bd:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00175c1:	89 ef                	mov    edi,ebp
c00175c3:	81 e7 ff 00 00 00    	and    edi,0xff
c00175c9:	0f 84 66 01 00 00    	je     c0017735 <VgaText::receiveKey(unsigned char)+0x183>
c00175cf:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c00175d5:	83 ff 08             	cmp    edi,0x8
c00175d8:	75 73                	jne    c001764d <VgaText::receiveKey(unsigned char)+0x9b>
c00175da:	83 ec 0c             	sub    esp,0xc
c00175dd:	56                   	push   esi
c00175de:	e8 8d 8f fe ff       	call   c0000570 <strlen>
c00175e3:	83 c4 10             	add    esp,0x10
c00175e6:	85 c0                	test   eax,eax
c00175e8:	0f 84 02 01 00 00    	je     c00176f0 <VgaText::receiveKey(unsigned char)+0x13e>
c00175ee:	50                   	push   eax
c00175ef:	50                   	push   eax
c00175f0:	6a 08                	push   0x8
c00175f2:	53                   	push   ebx
c00175f3:	e8 6c fb ff ff       	call   c0017164 <VgaText::putchar(char)>
c00175f8:	89 34 24             	mov    DWORD PTR [esp],esi
c00175fb:	e8 70 8f fe ff       	call   c0000570 <strlen>
c0017600:	83 c4 10             	add    esp,0x10
c0017603:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c001760b:	83 fa 0d             	cmp    edx,0xd
c001760e:	89 d0                	mov    eax,edx
c0017610:	0f 95 c1             	setne  cl
c0017613:	83 fa 1f             	cmp    edx,0x1f
c0017616:	0f 9e c2             	setle  dl
c0017619:	0f b6 d2             	movzx  edx,dl
c001761c:	85 ca                	test   edx,ecx
c001761e:	74 17                	je     c0017637 <VgaText::receiveKey(unsigned char)+0x85>
c0017620:	83 e8 08             	sub    eax,0x8
c0017623:	3c 02                	cmp    al,0x2
c0017625:	76 10                	jbe    c0017637 <VgaText::receiveKey(unsigned char)+0x85>
c0017627:	55                   	push   ebp
c0017628:	55                   	push   ebp
c0017629:	68 0f 0e 03 c0       	push   0xc0030e0f
c001762e:	53                   	push   ebx
c001762f:	e8 6e fc ff ff       	call   c00172a2 <VgaText::puts(char const*)>
c0017634:	83 c4 10             	add    esp,0x10
c0017637:	83 ec 0c             	sub    esp,0xc
c001763a:	56                   	push   esi
c001763b:	e8 30 8f fe ff       	call   c0000570 <strlen>
c0017640:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0017648:	e9 a0 00 00 00       	jmp    c00176ed <VgaText::receiveKey(unsigned char)+0x13b>
c001764d:	83 ec 0c             	sub    esp,0xc
c0017650:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0017656:	50                   	push   eax
c0017657:	e8 14 8f fe ff       	call   c0000570 <strlen>
c001765c:	89 34 24             	mov    DWORD PTR [esp],esi
c001765f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017663:	e8 08 8f fe ff       	call   c0000570 <strlen>
c0017668:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001766c:	83 c4 10             	add    esp,0x10
c001766f:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0017673:	3d 80 00 00 00       	cmp    eax,0x80
c0017678:	0f 87 b7 00 00 00    	ja     c0017735 <VgaText::receiveKey(unsigned char)+0x183>
c001767e:	8d 45 ff             	lea    eax,[ebp-0x1]
c0017681:	8d 55 f7             	lea    edx,[ebp-0x9]
c0017684:	3c 1e                	cmp    al,0x1e
c0017686:	0f 96 c0             	setbe  al
c0017689:	80 fa 01             	cmp    dl,0x1
c001768c:	0f 97 c2             	seta   dl
c001768f:	0f b6 d2             	movzx  edx,dl
c0017692:	85 c2                	test   edx,eax
c0017694:	74 2e                	je     c00176c4 <VgaText::receiveKey(unsigned char)+0x112>
c0017696:	83 ff 0d             	cmp    edi,0xd
c0017699:	74 29                	je     c00176c4 <VgaText::receiveKey(unsigned char)+0x112>
c001769b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001769e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00176a1:	68 15 0e 03 c0       	push   0xc0030e15
c00176a6:	53                   	push   ebx
c00176a7:	e8 68 fc ff ff       	call   c0017314 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00176ac:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00176af:	8d 45 40             	lea    eax,[ebp+0x40]
c00176b2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00176b5:	0f b6 c0             	movzx  eax,al
c00176b8:	50                   	push   eax
c00176b9:	53                   	push   ebx
c00176ba:	e8 d5 f9 ff ff       	call   c0017094 <VgaText::putchar(char, VgaColour, VgaColour)>
c00176bf:	83 c4 20             	add    esp,0x20
c00176c2:	eb 11                	jmp    c00176d5 <VgaText::receiveKey(unsigned char)+0x123>
c00176c4:	89 e8                	mov    eax,ebp
c00176c6:	51                   	push   ecx
c00176c7:	0f be c0             	movsx  eax,al
c00176ca:	51                   	push   ecx
c00176cb:	50                   	push   eax
c00176cc:	53                   	push   ebx
c00176cd:	e8 92 fa ff ff       	call   c0017164 <VgaText::putchar(char)>
c00176d2:	83 c4 10             	add    esp,0x10
c00176d5:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00176da:	89 e8                	mov    eax,ebp
c00176dc:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c00176e0:	52                   	push   edx
c00176e1:	52                   	push   edx
c00176e2:	8d 44 24 26          	lea    eax,[esp+0x26]
c00176e6:	50                   	push   eax
c00176e7:	56                   	push   esi
c00176e8:	e8 53 91 fe ff       	call   c0000840 <strcat>
c00176ed:	83 c4 10             	add    esp,0x10
c00176f0:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c00176f6:	b0 01                	mov    al,0x1
c00176f8:	83 ff 1c             	cmp    edi,0x1c
c00176fb:	77 0e                	ja     c001770b <VgaText::receiveKey(unsigned char)+0x159>
c00176fd:	b8 08 04 00 10       	mov    eax,0x10000408
c0017702:	89 f9                	mov    ecx,edi
c0017704:	d3 e8                	shr    eax,cl
c0017706:	f7 d0                	not    eax
c0017708:	83 e0 01             	and    eax,0x1
c001770b:	84 c0                	test   al,al
c001770d:	74 04                	je     c0017713 <VgaText::receiveKey(unsigned char)+0x161>
c001770f:	84 d2                	test   dl,dl
c0017711:	74 22                	je     c0017735 <VgaText::receiveKey(unsigned char)+0x183>
c0017713:	81 c3 02 01 00 00    	add    ebx,0x102
c0017719:	50                   	push   eax
c001771a:	50                   	push   eax
c001771b:	56                   	push   esi
c001771c:	53                   	push   ebx
c001771d:	e8 1e 91 fe ff       	call   c0000840 <strcat>
c0017722:	83 c4 0c             	add    esp,0xc
c0017725:	68 80 00 00 00       	push   0x80
c001772a:	6a 00                	push   0x0
c001772c:	56                   	push   esi
c001772d:	e8 be 8d fe ff       	call   c00004f0 <memset>
c0017732:	83 c4 10             	add    esp,0x10
c0017735:	83 c4 2c             	add    esp,0x2c
c0017738:	5b                   	pop    ebx
c0017739:	5e                   	pop    esi
c001773a:	5f                   	pop    edi
c001773b:	5d                   	pop    ebp
c001773c:	c3                   	ret    
c001773d:	90                   	nop

c001773e <VgaText::doUpdate()>:
c001773e:	c3                   	ret    
c001773f:	90                   	nop

c0017740 <TSS::TSS()>:
c0017740:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017744:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001774b:	90                   	nop
c001774c:	c3                   	ret    
c001774d:	90                   	nop
c001774e:	66 90                	xchg   ax,ax

c0017750 <TSS::setESP(unsigned long)>:
c0017750:	55                   	push   ebp
c0017751:	89 e5                	mov    ebp,esp
c0017753:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017756:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017759:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001775c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001775f:	90                   	nop
c0017760:	5d                   	pop    ebp
c0017761:	c3                   	ret    
c0017762:	66 90                	xchg   ax,ax

c0017764 <TSS::flush()>:
c0017764:	55                   	push   ebp
c0017765:	89 e5                	mov    ebp,esp
c0017767:	83 ec 10             	sub    esp,0x10
c001776a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001776d:	8b 00                	mov    eax,DWORD PTR [eax]
c001776f:	83 c8 03             	or     eax,0x3
c0017772:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0017776:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001777a:	66 89 d0             	mov    ax,dx
c001777d:	0f 00 d8             	ltr    ax
c0017780:	90                   	nop
c0017781:	c9                   	leave  
c0017782:	c3                   	ret    
c0017783:	90                   	nop

c0017784 <TSS::setup(unsigned long, unsigned long)>:
c0017784:	55                   	push   ebp
c0017785:	89 e5                	mov    ebp,esp
c0017787:	83 ec 18             	sub    esp,0x18
c001778a:	83 ec 0c             	sub    esp,0xc
c001778d:	6a 68                	push   0x68
c001778f:	e8 1e eb ff ff       	call   c00162b2 <malloc>
c0017794:	83 c4 10             	add    esp,0x10
c0017797:	89 c2                	mov    edx,eax
c0017799:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001779c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001779f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00177a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00177a5:	83 ec 04             	sub    esp,0x4
c00177a8:	6a 68                	push   0x68
c00177aa:	6a 00                	push   0x0
c00177ac:	50                   	push   eax
c00177ad:	e8 3e 8d fe ff       	call   c00004f0 <memset>
c00177b2:	83 c4 10             	add    esp,0x10
c00177b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00177b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00177bb:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00177c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00177c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00177c7:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00177cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00177d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00177d3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00177d6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00177d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00177dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00177df:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00177e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00177e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00177eb:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00177f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00177f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00177f7:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00177fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017800:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017803:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0017809:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001780c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001780f:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0017815:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017818:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001781b:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0017821:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017824:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017827:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001782a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001782d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017830:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017833:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017836:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017839:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001783c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001783f:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0017846:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017849:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001784c:	0f 20 da             	mov    edx,cr3
c001784f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0017852:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0017855:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0017858:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001785b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001785e:	83 ec 08             	sub    esp,0x8
c0017861:	50                   	push   eax
c0017862:	8d 45 ec             	lea    eax,[ebp-0x14]
c0017865:	50                   	push   eax
c0017866:	e8 b3 e2 ff ff       	call   c0015b1e <GDTEntry::setBase(unsigned int)>
c001786b:	83 c4 10             	add    esp,0x10
c001786e:	83 ec 08             	sub    esp,0x8
c0017871:	6a 68                	push   0x68
c0017873:	8d 45 ec             	lea    eax,[ebp-0x14]
c0017876:	50                   	push   eax
c0017877:	e8 be e2 ff ff       	call   c0015b3a <GDTEntry::setLimit(unsigned int)>
c001787c:	83 c4 10             	add    esp,0x10
c001787f:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0017883:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0017886:	83 e0 0f             	and    eax,0xf
c0017889:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001788c:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001788f:	83 c8 40             	or     eax,0x40
c0017892:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0017895:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001789a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00178a0:	05 78 01 00 00       	add    eax,0x178
c00178a5:	83 ec 04             	sub    esp,0x4
c00178a8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00178ab:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00178ae:	50                   	push   eax
c00178af:	e8 ba e2 ff ff       	call   c0015b6e <GDT::addEntry(GDTEntry)>
c00178b4:	83 c4 10             	add    esp,0x10
c00178b7:	89 c2                	mov    edx,eax
c00178b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178bc:	89 10                	mov    DWORD PTR [eax],edx
c00178be:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00178c3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00178c9:	05 78 01 00 00       	add    eax,0x178
c00178ce:	83 ec 0c             	sub    esp,0xc
c00178d1:	50                   	push   eax
c00178d2:	e8 c1 e2 ff ff       	call   c0015b98 <GDT::flush()>
c00178d7:	83 c4 10             	add    esp,0x10
c00178da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00178df:	c9                   	leave  
c00178e0:	c3                   	ret    
c00178e1:	90                   	nop

c00178e2 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00178e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00178e6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00178ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178ed:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00178f2:	75 08                	jne    c00178fc <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00178f4:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00178fa:	eb 38                	jmp    c0017934 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00178fc:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0017901:	75 17                	jne    c001791a <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0017903:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017908:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001790b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017911:	8b 10                	mov    edx,DWORD PTR [eax]
c0017913:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017917:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c001791a:	89 c1                	mov    ecx,eax
c001791c:	83 e1 fd             	and    ecx,0xfffffffd
c001791f:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0017925:	74 cd                	je     c00178f4 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0017927:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001792c:	83 e0 ef             	and    eax,0xffffffef
c001792f:	83 f8 08             	cmp    eax,0x8
c0017932:	76 c0                	jbe    c00178f4 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0017934:	31 c0                	xor    eax,eax
c0017936:	c3                   	ret    
c0017937:	90                   	nop

c0017938 <ReservedFilename::isAtty()>:
c0017938:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001793c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001793f:	31 c0                	xor    eax,eax
c0017941:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0017947:	74 09                	je     c0017952 <ReservedFilename::isAtty()+0x1a>
c0017949:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c001794f:	0f 94 c0             	sete   al
c0017952:	c3                   	ret    
c0017953:	90                   	nop

c0017954 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0017954:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017958:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001795c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001795f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017963:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0017968:	75 08                	jne    c0017972 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c001796a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0017970:	eb 3d                	jmp    c00179af <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0017972:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0017977:	75 17                	jne    c0017990 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0017979:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001797e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017981:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017987:	8b 10                	mov    edx,DWORD PTR [eax]
c0017989:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001798d:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0017990:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0017995:	75 04                	jne    c001799b <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0017997:	89 0a                	mov    DWORD PTR [edx],ecx
c0017999:	eb 14                	jmp    c00179af <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001799b:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00179a0:	74 c8                	je     c001796a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00179a2:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00179a7:	83 e0 ef             	and    eax,0xffffffef
c00179aa:	83 f8 08             	cmp    eax,0x8
c00179ad:	76 bb                	jbe    c001796a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00179af:	31 c0                	xor    eax,eax
c00179b1:	c3                   	ret    

c00179b2 <UnixFile::getFileDescriptor()>:
c00179b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00179b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179b9:	c3                   	ret    

c00179ba <UnixFile::UnixFile(int)>:
c00179ba:	53                   	push   ebx
c00179bb:	83 ec 28             	sub    esp,0x28
c00179be:	ba ec 0e 03 c0       	mov    edx,0xc0030eec
c00179c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00179c7:	89 10                	mov    DWORD PTR [eax],edx
c00179c9:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00179d1:	0f 8f 90 01 00 00    	jg     c0017b67 <UnixFile::UnixFile(int)+0x1ad>
c00179d7:	a1 40 37 03 c0       	mov    eax,ds:0xc0033740
c00179dc:	8d 50 01             	lea    edx,[eax+0x1]
c00179df:	89 15 40 37 03 c0    	mov    DWORD PTR ds:0xc0033740,edx
c00179e5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00179e9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00179ec:	83 ec 08             	sub    esp,0x8
c00179ef:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00179f3:	68 98 aa 03 c0       	push   0xc003aa98
c00179f8:	e8 2b 6b 01 00       	call   c002e528 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00179fd:	83 c4 10             	add    esp,0x10
c0017a00:	a0 94 aa 03 c0       	mov    al,ds:0xc003aa94
c0017a05:	83 f0 01             	xor    eax,0x1
c0017a08:	0f b6 c0             	movzx  eax,al
c0017a0b:	85 c0                	test   eax,eax
c0017a0d:	0f 84 55 01 00 00    	je     c0017b68 <UnixFile::UnixFile(int)+0x1ae>
c0017a13:	c6 05 94 aa 03 c0 01 	mov    BYTE PTR ds:0xc003aa94,0x1
c0017a1a:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0017a22:	83 ec 0c             	sub    esp,0xc
c0017a25:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017a29:	e8 84 e8 ff ff       	call   c00162b2 <malloc>
c0017a2e:	83 c4 10             	add    esp,0x10
c0017a31:	89 c3                	mov    ebx,eax
c0017a33:	83 ec 08             	sub    esp,0x8
c0017a36:	68 03 ff ff 0f       	push   0xfffff03
c0017a3b:	53                   	push   ebx
c0017a3c:	e8 2d 01 00 00       	call   c0017b6e <ReservedFilename::ReservedFilename(int)>
c0017a41:	83 c4 10             	add    esp,0x10
c0017a44:	89 1d 8c aa 03 c0    	mov    DWORD PTR ds:0xc003aa8c,ebx
c0017a4a:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0017a52:	83 ec 0c             	sub    esp,0xc
c0017a55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a59:	e8 54 e8 ff ff       	call   c00162b2 <malloc>
c0017a5e:	83 c4 10             	add    esp,0x10
c0017a61:	89 c3                	mov    ebx,eax
c0017a63:	83 ec 08             	sub    esp,0x8
c0017a66:	68 01 ff ff 0f       	push   0xfffff01
c0017a6b:	53                   	push   ebx
c0017a6c:	e8 fd 00 00 00       	call   c0017b6e <ReservedFilename::ReservedFilename(int)>
c0017a71:	83 c4 10             	add    esp,0x10
c0017a74:	89 1d 90 aa 03 c0    	mov    DWORD PTR ds:0xc003aa90,ebx
c0017a7a:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0017a82:	83 ec 0c             	sub    esp,0xc
c0017a85:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017a89:	e8 24 e8 ff ff       	call   c00162b2 <malloc>
c0017a8e:	83 c4 10             	add    esp,0x10
c0017a91:	89 c3                	mov    ebx,eax
c0017a93:	83 ec 08             	sub    esp,0x8
c0017a96:	68 00 ff ff 0f       	push   0xfffff00
c0017a9b:	53                   	push   ebx
c0017a9c:	e8 cd 00 00 00       	call   c0017b6e <ReservedFilename::ReservedFilename(int)>
c0017aa1:	83 c4 10             	add    esp,0x10
c0017aa4:	89 1d 84 aa 03 c0    	mov    DWORD PTR ds:0xc003aa84,ebx
c0017aaa:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0017ab2:	83 ec 0c             	sub    esp,0xc
c0017ab5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017ab9:	e8 f4 e7 ff ff       	call   c00162b2 <malloc>
c0017abe:	83 c4 10             	add    esp,0x10
c0017ac1:	89 c3                	mov    ebx,eax
c0017ac3:	83 ec 08             	sub    esp,0x8
c0017ac6:	68 02 ff ff 0f       	push   0xfffff02
c0017acb:	53                   	push   ebx
c0017acc:	e8 9d 00 00 00       	call   c0017b6e <ReservedFilename::ReservedFilename(int)>
c0017ad1:	83 c4 10             	add    esp,0x10
c0017ad4:	89 1d 88 aa 03 c0    	mov    DWORD PTR ds:0xc003aa88,ebx
c0017ada:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0017ae2:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0017ae7:	7f 7f                	jg     c0017b68 <UnixFile::UnixFile(int)+0x1ae>
c0017ae9:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0017af1:	83 ec 0c             	sub    esp,0xc
c0017af4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017af8:	e8 b5 e7 ff ff       	call   c00162b2 <malloc>
c0017afd:	83 c4 10             	add    esp,0x10
c0017b00:	89 c3                	mov    ebx,eax
c0017b02:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017b06:	05 10 ff ff 0f       	add    eax,0xfffff10
c0017b0b:	83 ec 08             	sub    esp,0x8
c0017b0e:	50                   	push   eax
c0017b0f:	53                   	push   ebx
c0017b10:	e8 59 00 00 00       	call   c0017b6e <ReservedFilename::ReservedFilename(int)>
c0017b15:	83 c4 10             	add    esp,0x10
c0017b18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017b1c:	89 1c 85 60 aa 03 c0 	mov    DWORD PTR [eax*4-0x3ffc55a0],ebx
c0017b23:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0017b2b:	83 ec 0c             	sub    esp,0xc
c0017b2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017b32:	e8 7b e7 ff ff       	call   c00162b2 <malloc>
c0017b37:	83 c4 10             	add    esp,0x10
c0017b3a:	89 c3                	mov    ebx,eax
c0017b3c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017b40:	05 20 ff ff 0f       	add    eax,0xfffff20
c0017b45:	83 ec 08             	sub    esp,0x8
c0017b48:	50                   	push   eax
c0017b49:	53                   	push   ebx
c0017b4a:	e8 1f 00 00 00       	call   c0017b6e <ReservedFilename::ReservedFilename(int)>
c0017b4f:	83 c4 10             	add    esp,0x10
c0017b52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017b56:	89 1c 85 20 aa 03 c0 	mov    DWORD PTR [eax*4-0x3ffc55e0],ebx
c0017b5d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0017b62:	e9 7b ff ff ff       	jmp    c0017ae2 <UnixFile::UnixFile(int)+0x128>
c0017b67:	90                   	nop
c0017b68:	83 c4 28             	add    esp,0x28
c0017b6b:	5b                   	pop    ebx
c0017b6c:	c3                   	ret    
c0017b6d:	90                   	nop

c0017b6e <ReservedFilename::ReservedFilename(int)>:
c0017b6e:	83 ec 0c             	sub    esp,0xc
c0017b71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b75:	83 ec 08             	sub    esp,0x8
c0017b78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017b7c:	50                   	push   eax
c0017b7d:	e8 38 fe ff ff       	call   c00179ba <UnixFile::UnixFile(int)>
c0017b82:	83 c4 10             	add    esp,0x10
c0017b85:	ba 08 0f 03 c0       	mov    edx,0xc0030f08
c0017b8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b8e:	89 10                	mov    DWORD PTR [eax],edx
c0017b90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b94:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017b98:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017b9b:	90                   	nop
c0017b9c:	83 c4 0c             	add    esp,0xc
c0017b9f:	c3                   	ret    

c0017ba0 <UnixFile::~UnixFile()>:
c0017ba0:	83 ec 1c             	sub    esp,0x1c
c0017ba3:	ba ec 0e 03 c0       	mov    edx,0xc0030eec
c0017ba8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bac:	89 10                	mov    DWORD PTR [eax],edx
c0017bae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bb2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017bb5:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0017bba:	7f 76                	jg     c0017c32 <UnixFile::~UnixFile()+0x92>
c0017bbc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017bc4:	83 ec 0c             	sub    esp,0xc
c0017bc7:	68 98 aa 03 c0       	push   0xc003aa98
c0017bcc:	e8 2b 6a 01 00       	call   c002e5fc <LinkedList<UnixFile>::getFirstElement()>
c0017bd1:	83 c4 10             	add    esp,0x10
c0017bd4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017bd8:	83 ec 0c             	sub    esp,0xc
c0017bdb:	68 98 aa 03 c0       	push   0xc003aa98
c0017be0:	e8 1f 6a 01 00       	call   c002e604 <LinkedList<UnixFile>::removeFirst()>
c0017be5:	83 c4 10             	add    esp,0x10
c0017be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017bec:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0017bf0:	74 43                	je     c0017c35 <UnixFile::~UnixFile()+0x95>
c0017bf2:	83 ec 08             	sub    esp,0x8
c0017bf5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017bf9:	68 98 aa 03 c0       	push   0xc003aa98
c0017bfe:	e8 25 69 01 00       	call   c002e528 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0017c03:	83 c4 10             	add    esp,0x10
c0017c06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017c0a:	8d 50 01             	lea    edx,[eax+0x1]
c0017c0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017c11:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0017c16:	0f 94 c0             	sete   al
c0017c19:	0f b6 c0             	movzx  eax,al
c0017c1c:	85 c0                	test   eax,eax
c0017c1e:	74 a4                	je     c0017bc4 <UnixFile::~UnixFile()+0x24>
c0017c20:	83 ec 0c             	sub    esp,0xc
c0017c23:	68 c4 0e 03 c0       	push   0xc0030ec4
c0017c28:	e8 1e 84 00 00       	call   c002004b <KePanic(char const*)>
c0017c2d:	83 c4 10             	add    esp,0x10
c0017c30:	eb 92                	jmp    c0017bc4 <UnixFile::~UnixFile()+0x24>
c0017c32:	90                   	nop
c0017c33:	eb 01                	jmp    c0017c36 <UnixFile::~UnixFile()+0x96>
c0017c35:	90                   	nop
c0017c36:	90                   	nop
c0017c37:	83 c4 1c             	add    esp,0x1c
c0017c3a:	c3                   	ret    
c0017c3b:	90                   	nop

c0017c3c <UnixFile::~UnixFile()>:
c0017c3c:	83 ec 0c             	sub    esp,0xc
c0017c3f:	83 ec 0c             	sub    esp,0xc
c0017c42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c46:	e8 55 ff ff ff       	call   c0017ba0 <UnixFile::~UnixFile()>
c0017c4b:	83 c4 10             	add    esp,0x10
c0017c4e:	83 ec 08             	sub    esp,0x8
c0017c51:	6a 0c                	push   0xc
c0017c53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c57:	e8 b8 13 00 00       	call   c0019014 <operator delete(void*, unsigned long)>
c0017c5c:	83 c4 10             	add    esp,0x10
c0017c5f:	83 c4 0c             	add    esp,0xc
c0017c62:	c3                   	ret    
c0017c63:	90                   	nop

c0017c64 <ReservedFilename::~ReservedFilename()>:
c0017c64:	83 ec 0c             	sub    esp,0xc
c0017c67:	ba 08 0f 03 c0       	mov    edx,0xc0030f08
c0017c6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c70:	89 10                	mov    DWORD PTR [eax],edx
c0017c72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c76:	83 ec 0c             	sub    esp,0xc
c0017c79:	50                   	push   eax
c0017c7a:	e8 21 ff ff ff       	call   c0017ba0 <UnixFile::~UnixFile()>
c0017c7f:	83 c4 10             	add    esp,0x10
c0017c82:	90                   	nop
c0017c83:	83 c4 0c             	add    esp,0xc
c0017c86:	c3                   	ret    
c0017c87:	90                   	nop

c0017c88 <ReservedFilename::~ReservedFilename()>:
c0017c88:	83 ec 0c             	sub    esp,0xc
c0017c8b:	83 ec 0c             	sub    esp,0xc
c0017c8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c92:	e8 cd ff ff ff       	call   c0017c64 <ReservedFilename::~ReservedFilename()>
c0017c97:	83 c4 10             	add    esp,0x10
c0017c9a:	83 ec 08             	sub    esp,0x8
c0017c9d:	6a 0c                	push   0xc
c0017c9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ca3:	e8 6c 13 00 00       	call   c0019014 <operator delete(void*, unsigned long)>
c0017ca8:	83 c4 10             	add    esp,0x10
c0017cab:	83 c4 0c             	add    esp,0xc
c0017cae:	c3                   	ret    

c0017caf <KeGetFileFromDescriptor(int)>:
c0017caf:	53                   	push   ebx
c0017cb0:	83 ec 08             	sub    esp,0x8
c0017cb3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017cb7:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0017cbd:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0017cc3:	7f 2c                	jg     c0017cf1 <KeGetFileFromDescriptor(int)+0x42>
c0017cc5:	83 ec 0c             	sub    esp,0xc
c0017cc8:	68 98 aa 03 c0       	push   0xc003aa98
c0017ccd:	e8 2a 69 01 00       	call   c002e5fc <LinkedList<UnixFile>::getFirstElement()>
c0017cd2:	83 c4 10             	add    esp,0x10
c0017cd5:	85 c0                	test   eax,eax
c0017cd7:	75 04                	jne    c0017cdd <KeGetFileFromDescriptor(int)+0x2e>
c0017cd9:	31 c0                	xor    eax,eax
c0017cdb:	eb 6e                	jmp    c0017d4b <KeGetFileFromDescriptor(int)+0x9c>
c0017cdd:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0017ce0:	74 69                	je     c0017d4b <KeGetFileFromDescriptor(int)+0x9c>
c0017ce2:	52                   	push   edx
c0017ce3:	52                   	push   edx
c0017ce4:	50                   	push   eax
c0017ce5:	68 98 aa 03 c0       	push   0xc003aa98
c0017cea:	e8 b7 69 01 00       	call   c002e6a6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0017cef:	eb e1                	jmp    c0017cd2 <KeGetFileFromDescriptor(int)+0x23>
c0017cf1:	a1 8c aa 03 c0       	mov    eax,ds:0xc003aa8c
c0017cf6:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0017cfc:	74 4d                	je     c0017d4b <KeGetFileFromDescriptor(int)+0x9c>
c0017cfe:	a1 90 aa 03 c0       	mov    eax,ds:0xc003aa90
c0017d03:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0017d09:	74 40                	je     c0017d4b <KeGetFileFromDescriptor(int)+0x9c>
c0017d0b:	a1 88 aa 03 c0       	mov    eax,ds:0xc003aa88
c0017d10:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0017d16:	74 33                	je     c0017d4b <KeGetFileFromDescriptor(int)+0x9c>
c0017d18:	a1 84 aa 03 c0       	mov    eax,ds:0xc003aa84
c0017d1d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0017d23:	74 26                	je     c0017d4b <KeGetFileFromDescriptor(int)+0x9c>
c0017d25:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0017d2b:	83 f8 08             	cmp    eax,0x8
c0017d2e:	77 09                	ja     c0017d39 <KeGetFileFromDescriptor(int)+0x8a>
c0017d30:	8b 04 85 60 aa 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc55a0]
c0017d37:	eb 12                	jmp    c0017d4b <KeGetFileFromDescriptor(int)+0x9c>
c0017d39:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0017d3f:	83 fb 08             	cmp    ebx,0x8
c0017d42:	77 95                	ja     c0017cd9 <KeGetFileFromDescriptor(int)+0x2a>
c0017d44:	8b 04 9d 20 aa 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc55e0]
c0017d4b:	83 c4 08             	add    esp,0x8
c0017d4e:	5b                   	pop    ebx
c0017d4f:	c3                   	ret    

c0017d50 <__static_initialization_and_destruction_0(int, int)>:
c0017d50:	83 ec 0c             	sub    esp,0xc
c0017d53:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017d58:	75 34                	jne    c0017d8e <__static_initialization_and_destruction_0(int, int)+0x3e>
c0017d5a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0017d62:	75 2a                	jne    c0017d8e <__static_initialization_and_destruction_0(int, int)+0x3e>
c0017d64:	83 ec 0c             	sub    esp,0xc
c0017d67:	68 98 aa 03 c0       	push   0xc003aa98
c0017d6c:	e8 75 67 01 00       	call   c002e4e6 <LinkedList<UnixFile>::LinkedList()>
c0017d71:	83 c4 10             	add    esp,0x10
c0017d74:	83 ec 04             	sub    esp,0x4
c0017d77:	68 c0 36 03 c0       	push   0xc00336c0
c0017d7c:	68 98 aa 03 c0       	push   0xc003aa98
c0017d81:	68 e4 e4 02 c0       	push   0xc002e4e4
c0017d86:	e8 39 12 00 00       	call   c0018fc4 <__cxa_atexit>
c0017d8b:	83 c4 10             	add    esp,0x10
c0017d8e:	90                   	nop
c0017d8f:	83 c4 0c             	add    esp,0xc
c0017d92:	c3                   	ret    

c0017d93 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0017d93:	83 ec 0c             	sub    esp,0xc
c0017d96:	83 ec 08             	sub    esp,0x8
c0017d99:	68 ff ff 00 00       	push   0xffff
c0017d9e:	6a 01                	push   0x1
c0017da0:	e8 ab ff ff ff       	call   c0017d50 <__static_initialization_and_destruction_0(int, int)>
c0017da5:	83 c4 10             	add    esp,0x10
c0017da8:	83 c4 0c             	add    esp,0xc
c0017dab:	c3                   	ret    

c0017dac <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0017dac:	53                   	push   ebx
c0017dad:	8b 15 48 37 03 c0    	mov    edx,DWORD PTR ds:0xc0033748
c0017db3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017db7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017dbb:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0017dc1:	89 d8                	mov    eax,ebx
c0017dc3:	d1 e8                	shr    eax,1
c0017dc5:	01 d0                	add    eax,edx
c0017dc7:	80 e3 01             	and    bl,0x1
c0017dca:	8a 10                	mov    dl,BYTE PTR [eax]
c0017dcc:	75 09                	jne    c0017dd7 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0017dce:	83 e2 f0             	and    edx,0xfffffff0
c0017dd1:	09 ca                	or     edx,ecx
c0017dd3:	88 10                	mov    BYTE PTR [eax],dl
c0017dd5:	5b                   	pop    ebx
c0017dd6:	c3                   	ret    
c0017dd7:	83 e2 0f             	and    edx,0xf
c0017dda:	0f b6 c9             	movzx  ecx,cl
c0017ddd:	c1 e1 04             	shl    ecx,0x4
c0017de0:	09 ca                	or     edx,ecx
c0017de2:	88 10                	mov    BYTE PTR [eax],dl
c0017de4:	5b                   	pop    ebx
c0017de5:	c3                   	ret    

c0017de6 <Virt::getPageState(unsigned long)>:
c0017de6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017dea:	8b 0d 48 37 03 c0    	mov    ecx,DWORD PTR ds:0xc0033748
c0017df0:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0017df6:	89 d0                	mov    eax,edx
c0017df8:	d1 e8                	shr    eax,1
c0017dfa:	80 e2 01             	and    dl,0x1
c0017dfd:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0017e00:	74 03                	je     c0017e05 <Virt::getPageState(unsigned long)+0x1f>
c0017e02:	c1 e8 04             	shr    eax,0x4
c0017e05:	83 e0 0f             	and    eax,0xf
c0017e08:	c3                   	ret    

c0017e09 <Virt::allocateKernelVirtualPages(int)>:
c0017e09:	55                   	push   ebp
c0017e0a:	31 ed                	xor    ebp,ebp
c0017e0c:	57                   	push   edi
c0017e0d:	31 ff                	xor    edi,edi
c0017e0f:	56                   	push   esi
c0017e10:	53                   	push   ebx
c0017e11:	31 db                	xor    ebx,ebx
c0017e13:	83 ec 0c             	sub    esp,0xc
c0017e16:	8b 35 44 37 03 c0    	mov    esi,DWORD PTR ds:0xc0033744
c0017e1c:	56                   	push   esi
c0017e1d:	e8 c4 ff ff ff       	call   c0017de6 <Virt::getPageState(unsigned long)>
c0017e22:	5a                   	pop    edx
c0017e23:	84 c0                	test   al,al
c0017e25:	75 41                	jne    c0017e68 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0017e27:	85 db                	test   ebx,ebx
c0017e29:	75 02                	jne    c0017e2d <Virt::allocateKernelVirtualPages(int)+0x24>
c0017e2b:	89 f5                	mov    ebp,esi
c0017e2d:	83 c3 01             	add    ebx,0x1
c0017e30:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0017e34:	74 5f                	je     c0017e95 <Virt::allocateKernelVirtualPages(int)+0x8c>
c0017e36:	83 c6 01             	add    esi,0x1
c0017e39:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0017e3f:	76 34                	jbe    c0017e75 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0017e41:	c7 05 44 37 03 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0033744,0xc8000
c0017e4b:	f7 c7 01 00 00 00    	test   edi,0x1
c0017e51:	75 2a                	jne    c0017e7d <Virt::allocateKernelVirtualPages(int)+0x74>
c0017e53:	be 00 80 0c 00       	mov    esi,0xc8000
c0017e58:	bf 01 00 00 00       	mov    edi,0x1
c0017e5d:	56                   	push   esi
c0017e5e:	e8 83 ff ff ff       	call   c0017de6 <Virt::getPageState(unsigned long)>
c0017e63:	5a                   	pop    edx
c0017e64:	84 c0                	test   al,al
c0017e66:	74 bf                	je     c0017e27 <Virt::allocateKernelVirtualPages(int)+0x1e>
c0017e68:	31 db                	xor    ebx,ebx
c0017e6a:	83 c6 01             	add    esi,0x1
c0017e6d:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0017e73:	77 cc                	ja     c0017e41 <Virt::allocateKernelVirtualPages(int)+0x38>
c0017e75:	89 35 44 37 03 c0    	mov    DWORD PTR ds:0xc0033744,esi
c0017e7b:	eb 9f                	jmp    c0017e1c <Virt::allocateKernelVirtualPages(int)+0x13>
c0017e7d:	83 ec 0c             	sub    esp,0xc
c0017e80:	68 1c 0f 03 c0       	push   0xc0030f1c
c0017e85:	e8 c1 81 00 00       	call   c002004b <KePanic(char const*)>
c0017e8a:	8b 35 44 37 03 c0    	mov    esi,DWORD PTR ds:0xc0033744
c0017e90:	83 c4 10             	add    esp,0x10
c0017e93:	eb 87                	jmp    c0017e1c <Virt::allocateKernelVirtualPages(int)+0x13>
c0017e95:	89 2d 44 37 03 c0    	mov    DWORD PTR ds:0xc0033744,ebp
c0017e9b:	83 fb 01             	cmp    ebx,0x1
c0017e9e:	74 6f                	je     c0017f0f <Virt::allocateKernelVirtualPages(int)+0x106>
c0017ea0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0017ea4:	85 c9                	test   ecx,ecx
c0017ea6:	74 49                	je     c0017ef1 <Virt::allocateKernelVirtualPages(int)+0xe8>
c0017ea8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0017eac:	89 e8                	mov    eax,ebp
c0017eae:	31 db                	xor    ebx,ebx
c0017eb0:	8d 79 ff             	lea    edi,[ecx-0x1]
c0017eb3:	eb 18                	jmp    c0017ecd <Virt::allocateKernelVirtualPages(int)+0xc4>
c0017eb5:	6a 01                	push   0x1
c0017eb7:	83 c3 01             	add    ebx,0x1
c0017eba:	50                   	push   eax
c0017ebb:	e8 ec fe ff ff       	call   c0017dac <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0017ec0:	58                   	pop    eax
c0017ec1:	5a                   	pop    edx
c0017ec2:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0017ec6:	74 29                	je     c0017ef1 <Virt::allocateKernelVirtualPages(int)+0xe8>
c0017ec8:	a1 44 37 03 c0       	mov    eax,ds:0xc0033744
c0017ecd:	8d 50 01             	lea    edx,[eax+0x1]
c0017ed0:	85 db                	test   ebx,ebx
c0017ed2:	89 15 44 37 03 c0    	mov    DWORD PTR ds:0xc0033744,edx
c0017ed8:	74 24                	je     c0017efe <Virt::allocateKernelVirtualPages(int)+0xf5>
c0017eda:	39 df                	cmp    edi,ebx
c0017edc:	75 d7                	jne    c0017eb5 <Virt::allocateKernelVirtualPages(int)+0xac>
c0017ede:	6a 03                	push   0x3
c0017ee0:	83 c3 01             	add    ebx,0x1
c0017ee3:	50                   	push   eax
c0017ee4:	e8 c3 fe ff ff       	call   c0017dac <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0017ee9:	59                   	pop    ecx
c0017eea:	5e                   	pop    esi
c0017eeb:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0017eef:	75 d7                	jne    c0017ec8 <Virt::allocateKernelVirtualPages(int)+0xbf>
c0017ef1:	83 c4 0c             	add    esp,0xc
c0017ef4:	89 e8                	mov    eax,ebp
c0017ef6:	5b                   	pop    ebx
c0017ef7:	c1 e0 0c             	shl    eax,0xc
c0017efa:	5e                   	pop    esi
c0017efb:	5f                   	pop    edi
c0017efc:	5d                   	pop    ebp
c0017efd:	c3                   	ret    
c0017efe:	6a 02                	push   0x2
c0017f00:	bb 01 00 00 00       	mov    ebx,0x1
c0017f05:	50                   	push   eax
c0017f06:	e8 a1 fe ff ff       	call   c0017dac <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0017f0b:	58                   	pop    eax
c0017f0c:	5a                   	pop    edx
c0017f0d:	eb b9                	jmp    c0017ec8 <Virt::allocateKernelVirtualPages(int)+0xbf>
c0017f0f:	6a 04                	push   0x4
c0017f11:	8d 45 01             	lea    eax,[ebp+0x1]
c0017f14:	55                   	push   ebp
c0017f15:	a3 44 37 03 c0       	mov    ds:0xc0033744,eax
c0017f1a:	e8 8d fe ff ff       	call   c0017dac <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0017f1f:	5b                   	pop    ebx
c0017f20:	89 e8                	mov    eax,ebp
c0017f22:	5e                   	pop    esi
c0017f23:	c1 e0 0c             	shl    eax,0xc
c0017f26:	83 c4 0c             	add    esp,0xc
c0017f29:	5b                   	pop    ebx
c0017f2a:	5e                   	pop    esi
c0017f2b:	5f                   	pop    edi
c0017f2c:	5d                   	pop    ebp
c0017f2d:	c3                   	ret    

c0017f2e <Virt::freeSwapfilePage(unsigned long)>:
c0017f2e:	53                   	push   ebx
c0017f2f:	8b 15 ac aa 03 c0    	mov    edx,DWORD PTR ds:0xc003aaac
c0017f35:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017f39:	b8 01 00 00 00       	mov    eax,0x1
c0017f3e:	89 cb                	mov    ebx,ecx
c0017f40:	d3 e0                	shl    eax,cl
c0017f42:	c1 eb 05             	shr    ebx,0x5
c0017f45:	f7 d0                	not    eax
c0017f47:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c0017f4a:	21 c1                	and    ecx,eax
c0017f4c:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0017f4f:	5b                   	pop    ebx
c0017f50:	c3                   	ret    

c0017f51 <Virt::swapIDToSector(unsigned long)>:
c0017f51:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017f55:	8b 15 4c 37 03 c0    	mov    edx,DWORD PTR ds:0xc003374c
c0017f5b:	8b 0d 54 37 03 c0    	mov    ecx,DWORD PTR ds:0xc0033754
c0017f61:	0f af c2             	imul   eax,edx
c0017f64:	01 c8                	add    eax,ecx
c0017f66:	c3                   	ret    

c0017f67 <Virt::allocateSwapfilePage()>:
c0017f67:	55                   	push   ebp
c0017f68:	31 d2                	xor    edx,edx
c0017f6a:	57                   	push   edi
c0017f6b:	56                   	push   esi
c0017f6c:	53                   	push   ebx
c0017f6d:	83 ec 0c             	sub    esp,0xc
c0017f70:	8b 0d 4c 37 03 c0    	mov    ecx,DWORD PTR ds:0xc003374c
c0017f76:	a1 50 37 03 c0       	mov    eax,ds:0xc0033750
c0017f7b:	f7 f1                	div    ecx
c0017f7d:	39 0d 50 37 03 c0    	cmp    DWORD PTR ds:0xc0033750,ecx
c0017f83:	72 2f                	jb     c0017fb4 <Virt::allocateSwapfilePage()+0x4d>
c0017f85:	8b 35 ac aa 03 c0    	mov    esi,DWORD PTR ds:0xc003aaac
c0017f8b:	8b 16                	mov    edx,DWORD PTR [esi]
c0017f8d:	f6 c2 01             	test   dl,0x1
c0017f90:	74 3e                	je     c0017fd0 <Virt::allocateSwapfilePage()+0x69>
c0017f92:	31 c9                	xor    ecx,ecx
c0017f94:	bf 01 00 00 00       	mov    edi,0x1
c0017f99:	eb 12                	jmp    c0017fad <Virt::allocateSwapfilePage()+0x46>
c0017f9b:	89 fd                	mov    ebp,edi
c0017f9d:	89 ca                	mov    edx,ecx
c0017f9f:	d3 e5                	shl    ebp,cl
c0017fa1:	c1 ea 05             	shr    edx,0x5
c0017fa4:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0017fa7:	8b 13                	mov    edx,DWORD PTR [ebx]
c0017fa9:	85 ea                	test   edx,ebp
c0017fab:	74 2c                	je     c0017fd9 <Virt::allocateSwapfilePage()+0x72>
c0017fad:	83 c1 01             	add    ecx,0x1
c0017fb0:	39 c8                	cmp    eax,ecx
c0017fb2:	77 e7                	ja     c0017f9b <Virt::allocateSwapfilePage()+0x34>
c0017fb4:	83 ec 0c             	sub    esp,0xc
c0017fb7:	68 b0 11 03 c0       	push   0xc00311b0
c0017fbc:	e8 8a 80 00 00       	call   c002004b <KePanic(char const*)>
c0017fc1:	83 c4 10             	add    esp,0x10
c0017fc4:	31 c9                	xor    ecx,ecx
c0017fc6:	83 c4 0c             	add    esp,0xc
c0017fc9:	89 c8                	mov    eax,ecx
c0017fcb:	5b                   	pop    ebx
c0017fcc:	5e                   	pop    esi
c0017fcd:	5f                   	pop    edi
c0017fce:	5d                   	pop    ebp
c0017fcf:	c3                   	ret    
c0017fd0:	89 f3                	mov    ebx,esi
c0017fd2:	bd 01 00 00 00       	mov    ebp,0x1
c0017fd7:	31 c9                	xor    ecx,ecx
c0017fd9:	09 ea                	or     edx,ebp
c0017fdb:	89 c8                	mov    eax,ecx
c0017fdd:	89 13                	mov    DWORD PTR [ebx],edx
c0017fdf:	83 c4 0c             	add    esp,0xc
c0017fe2:	5b                   	pop    ebx
c0017fe3:	5e                   	pop    esi
c0017fe4:	5f                   	pop    edi
c0017fe5:	5d                   	pop    ebp
c0017fe6:	c3                   	ret    

c0017fe7 <Virt::virtualMemorySetup()>:
c0017fe7:	53                   	push   ebx
c0017fe8:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0017fed:	6a 0f                	push   0xf
c0017fef:	53                   	push   ebx
c0017ff0:	83 c3 01             	add    ebx,0x1
c0017ff3:	e8 b4 fd ff ff       	call   c0017dac <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0017ff8:	58                   	pop    eax
c0017ff9:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0017fff:	5a                   	pop    edx
c0018000:	75 eb                	jne    c0017fed <Virt::virtualMemorySetup()+0x6>
c0018002:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0018007:	6a 00                	push   0x0
c0018009:	53                   	push   ebx
c001800a:	83 c3 01             	add    ebx,0x1
c001800d:	e8 9a fd ff ff       	call   c0017dac <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018012:	59                   	pop    ecx
c0018013:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0018019:	58                   	pop    eax
c001801a:	75 eb                	jne    c0018007 <Virt::virtualMemorySetup()+0x20>
c001801c:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0018021:	6a 0f                	push   0xf
c0018023:	53                   	push   ebx
c0018024:	83 c3 01             	add    ebx,0x1
c0018027:	e8 80 fd ff ff       	call   c0017dac <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001802c:	58                   	pop    eax
c001802d:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0018033:	5a                   	pop    edx
c0018034:	75 eb                	jne    c0018021 <Virt::virtualMemorySetup()+0x3a>
c0018036:	5b                   	pop    ebx
c0018037:	c3                   	ret    

c0018038 <Virt::setupPageSwapping(int)>:
c0018038:	53                   	push   ebx
c0018039:	83 ec 0c             	sub    esp,0xc
c001803c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018040:	a1 88 f3 03 c0       	mov    eax,ds:0xc003f388
c0018045:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001804b:	8b 10                	mov    edx,DWORD PTR [eax]
c001804d:	53                   	push   ebx
c001804e:	c1 e3 0b             	shl    ebx,0xb
c0018051:	68 c7 11 03 c0       	push   0xc00311c7
c0018056:	50                   	push   eax
c0018057:	ff 52 60             	call   DWORD PTR [edx+0x60]
c001805a:	89 1d 50 37 03 c0    	mov    DWORD PTR ds:0xc0033750,ebx
c0018060:	c6 05 58 37 03 c0 43 	mov    BYTE PTR ds:0xc0033758,0x43
c0018067:	c1 eb 08             	shr    ebx,0x8
c001806a:	a3 54 37 03 c0       	mov    ds:0xc0033754,eax
c001806f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018072:	c7 05 4c 37 03 c0 08 00 00 00 	mov    DWORD PTR ds:0xc003374c,0x8
c001807c:	e8 31 e2 ff ff       	call   c00162b2 <malloc>
c0018081:	83 c4 0c             	add    esp,0xc
c0018084:	89 c1                	mov    ecx,eax
c0018086:	a3 ac aa 03 c0       	mov    ds:0xc003aaac,eax
c001808b:	31 d2                	xor    edx,edx
c001808d:	a1 50 37 03 c0       	mov    eax,ds:0xc0033750
c0018092:	f7 35 4c 37 03 c0    	div    DWORD PTR ds:0xc003374c
c0018098:	c1 e8 05             	shr    eax,0x5
c001809b:	50                   	push   eax
c001809c:	6a 00                	push   0x0
c001809e:	51                   	push   ecx
c001809f:	e8 4c 84 fe ff       	call   c00004f0 <memset>
c00180a4:	83 c4 18             	add    esp,0x18
c00180a7:	5b                   	pop    ebx
c00180a8:	c3                   	ret    
c00180a9:	90                   	nop

c00180aa <VAS::setCPUSpecific(unsigned long)>:
c00180aa:	c3                   	ret    
c00180ab:	90                   	nop

c00180ac <VAS::VAS(VAS*)>:
c00180ac:	83 ec 0c             	sub    esp,0xc
c00180af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180b3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00180ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180be:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00180c5:	83 ec 0c             	sub    esp,0xc
c00180c8:	68 3c 0f 03 c0       	push   0xc0030f3c
c00180cd:	e8 79 7f 00 00       	call   c002004b <KePanic(char const*)>
c00180d2:	83 c4 10             	add    esp,0x10
c00180d5:	90                   	nop
c00180d6:	83 c4 0c             	add    esp,0xc
c00180d9:	c3                   	ret    

c00180da <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00180da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180de:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00180e3:	89 c2                	mov    edx,eax
c00180e5:	c1 e8 0a             	shr    eax,0xa
c00180e8:	c1 ea 16             	shr    edx,0x16
c00180eb:	83 f9 01             	cmp    ecx,0x1
c00180ee:	19 c9                	sbb    ecx,ecx
c00180f0:	c1 e2 0c             	shl    edx,0xc
c00180f3:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00180f9:	25 fc 0f 00 00       	and    eax,0xffc
c00180fe:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0018105:	01 d0                	add    eax,edx
c0018107:	c3                   	ret    

c0018108 <VAS::getPageTableEntry(unsigned long)>:
c0018108:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001810c:	89 ca                	mov    edx,ecx
c001810e:	c1 e9 0a             	shr    ecx,0xa
c0018111:	c1 ea 16             	shr    edx,0x16
c0018114:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c001811a:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0018120:	c1 e0 0c             	shl    eax,0xc
c0018123:	8d 04 08             	lea    eax,[eax+ecx*1]
c0018126:	c3                   	ret    

c0018127 <Virt::freeKernelVirtualPages(unsigned long)>:
c0018127:	55                   	push   ebp
c0018128:	57                   	push   edi
c0018129:	bf 01 00 00 00       	mov    edi,0x1
c001812e:	56                   	push   esi
c001812f:	53                   	push   ebx
c0018130:	83 ec 1c             	sub    esp,0x1c
c0018133:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018137:	c1 ee 0c             	shr    esi,0xc
c001813a:	eb 48                	jmp    c0018184 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c001813c:	83 ec 08             	sub    esp,0x8
c001813f:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c0018144:	55                   	push   ebp
c0018145:	50                   	push   eax
c0018146:	e8 bd ff ff ff       	call   c0018108 <VAS::getPageTableEntry(unsigned long)>
c001814b:	83 c4 10             	add    esp,0x10
c001814e:	8b 10                	mov    edx,DWORD PTR [eax]
c0018150:	f6 c6 04             	test   dh,0x4
c0018153:	75 70                	jne    c00181c5 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0018155:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001815b:	83 fb 04             	cmp    ebx,0x4
c001815e:	0f 84 8a 00 00 00    	je     c00181ee <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0018164:	83 fb 02             	cmp    ebx,0x2
c0018167:	0f 84 9a 00 00 00    	je     c0018207 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c001816d:	83 fb 03             	cmp    ebx,0x3
c0018170:	0f 84 be 00 00 00    	je     c0018234 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0018176:	83 fb 01             	cmp    ebx,0x1
c0018179:	0f 84 a2 00 00 00    	je     c0018221 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c001817f:	83 c6 01             	add    esi,0x1
c0018182:	31 ff                	xor    edi,edi
c0018184:	56                   	push   esi
c0018185:	89 f5                	mov    ebp,esi
c0018187:	e8 5a fc ff ff       	call   c0017de6 <Virt::getPageState(unsigned long)>
c001818c:	c1 e5 0c             	shl    ebp,0xc
c001818f:	0f b6 d8             	movzx  ebx,al
c0018192:	5a                   	pop    edx
c0018193:	85 db                	test   ebx,ebx
c0018195:	75 a5                	jne    c001813c <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0018197:	83 ec 0c             	sub    esp,0xc
c001819a:	68 de 11 03 c0       	push   0xc00311de
c001819f:	e8 a7 7e 00 00       	call   c002004b <KePanic(char const*)>
c00181a4:	5a                   	pop    edx
c00181a5:	59                   	pop    ecx
c00181a6:	55                   	push   ebp
c00181a7:	8b 2d b0 aa 03 c0    	mov    ebp,DWORD PTR ds:0xc003aab0
c00181ad:	55                   	push   ebp
c00181ae:	e8 55 ff ff ff       	call   c0018108 <VAS::getPageTableEntry(unsigned long)>
c00181b3:	83 c4 10             	add    esp,0x10
c00181b6:	8b 10                	mov    edx,DWORD PTR [eax]
c00181b8:	f6 c6 04             	test   dh,0x4
c00181bb:	75 08                	jne    c00181c5 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00181bd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00181c3:	eb ba                	jmp    c001817f <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00181c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00181c9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00181cf:	83 ec 0c             	sub    esp,0xc
c00181d2:	52                   	push   edx
c00181d3:	e8 7a e3 ff ff       	call   c0016552 <Phys::freePage(unsigned long)>
c00181d8:	83 c4 10             	add    esp,0x10
c00181db:	83 fb 04             	cmp    ebx,0x4
c00181de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00181e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00181e8:	0f 85 76 ff ff ff    	jne    c0018164 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00181ee:	83 e7 01             	and    edi,0x1
c00181f1:	75 46                	jne    c0018239 <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00181f3:	c7 44 24 30 60 0f 03 c0 	mov    DWORD PTR [esp+0x30],0xc0030f60
c00181fb:	83 c4 1c             	add    esp,0x1c
c00181fe:	5b                   	pop    ebx
c00181ff:	5e                   	pop    esi
c0018200:	5f                   	pop    edi
c0018201:	5d                   	pop    ebp
c0018202:	e9 44 7e 00 00       	jmp    c002004b <KePanic(char const*)>
c0018207:	83 e7 01             	and    edi,0x1
c001820a:	75 15                	jne    c0018221 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c001820c:	83 ec 0c             	sub    esp,0xc
c001820f:	68 fa 11 03 c0       	push   0xc00311fa
c0018214:	e8 32 7e 00 00       	call   c002004b <KePanic(char const*)>
c0018219:	83 c4 10             	add    esp,0x10
c001821c:	e9 5e ff ff ff       	jmp    c001817f <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0018221:	83 ec 08             	sub    esp,0x8
c0018224:	6a 00                	push   0x0
c0018226:	56                   	push   esi
c0018227:	e8 80 fb ff ff       	call   c0017dac <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001822c:	83 c4 10             	add    esp,0x10
c001822f:	e9 4b ff ff ff       	jmp    c001817f <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0018234:	83 e7 01             	and    edi,0x1
c0018237:	75 16                	jne    c001824f <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0018239:	83 ec 08             	sub    esp,0x8
c001823c:	6a 00                	push   0x0
c001823e:	56                   	push   esi
c001823f:	e8 68 fb ff ff       	call   c0017dac <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018244:	83 c4 10             	add    esp,0x10
c0018247:	83 c4 1c             	add    esp,0x1c
c001824a:	5b                   	pop    ebx
c001824b:	5e                   	pop    esi
c001824c:	5f                   	pop    edi
c001824d:	5d                   	pop    ebp
c001824e:	c3                   	ret    
c001824f:	c7 44 24 30 16 12 03 c0 	mov    DWORD PTR [esp+0x30],0xc0031216
c0018257:	83 c4 1c             	add    esp,0x1c
c001825a:	5b                   	pop    ebx
c001825b:	5e                   	pop    esi
c001825c:	5f                   	pop    edi
c001825d:	5d                   	pop    ebp
c001825e:	e9 e8 7d 00 00       	jmp    c002004b <KePanic(char const*)>
c0018263:	90                   	nop

c0018264 <VAS::freeAllocatedPages(unsigned long)>:
c0018264:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018268:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001826c:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0018270:	74 09                	je     c001827b <VAS::freeAllocatedPages(unsigned long)+0x17>
c0018272:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0018276:	e9 ac fe ff ff       	jmp    c0018127 <Virt::freeKernelVirtualPages(unsigned long)>
c001827b:	c7 44 24 04 84 0f 03 c0 	mov    DWORD PTR [esp+0x4],0xc0030f84
c0018283:	e9 b9 0e 00 00       	jmp    c0019141 <Dbg::kprintf(char const*, ...)>

c0018288 <VAS::virtualToPhysical(unsigned long)>:
c0018288:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001828c:	50                   	push   eax
c001828d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018291:	52                   	push   edx
c0018292:	e8 71 fe ff ff       	call   c0018108 <VAS::getPageTableEntry(unsigned long)>
c0018297:	59                   	pop    ecx
c0018298:	8b 00                	mov    eax,DWORD PTR [eax]
c001829a:	5a                   	pop    edx
c001829b:	25 00 f0 ff ff       	and    eax,0xfffff000
c00182a0:	c3                   	ret    
c00182a1:	90                   	nop

c00182a2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c00182a2:	55                   	push   ebp
c00182a3:	57                   	push   edi
c00182a4:	56                   	push   esi
c00182a5:	53                   	push   ebx
c00182a6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00182aa:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00182ae:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00182b2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00182b6:	85 db                	test   ebx,ebx
c00182b8:	7e 24                	jle    c00182de <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c00182ba:	c1 e3 0c             	shl    ebx,0xc
c00182bd:	01 f3                	add    ebx,esi
c00182bf:	56                   	push   esi
c00182c0:	81 c6 00 10 00 00    	add    esi,0x1000
c00182c6:	55                   	push   ebp
c00182c7:	e8 3c fe ff ff       	call   c0018108 <VAS::getPageTableEntry(unsigned long)>
c00182cc:	5a                   	pop    edx
c00182cd:	59                   	pop    ecx
c00182ce:	8b 08                	mov    ecx,DWORD PTR [eax]
c00182d0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00182d4:	21 f9                	and    ecx,edi
c00182d6:	09 d1                	or     ecx,edx
c00182d8:	39 f3                	cmp    ebx,esi
c00182da:	89 08                	mov    DWORD PTR [eax],ecx
c00182dc:	75 e1                	jne    c00182bf <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c00182de:	5b                   	pop    ebx
c00182df:	5e                   	pop    esi
c00182e0:	5f                   	pop    edi
c00182e1:	5d                   	pop    ebp
c00182e2:	c3                   	ret    
c00182e3:	90                   	nop

c00182e4 <VAS::VAS()>:
c00182e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00182e8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00182ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00182f3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00182fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00182fe:	a3 b0 aa 03 c0       	mov    ds:0xc003aab0,eax
c0018303:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018307:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c001830b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001830f:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0018312:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018316:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c001831d:	ba 7d 50 03 c0       	mov    edx,0xc003507d
c0018322:	b8 00 50 03 c0       	mov    eax,0xc0035000
c0018327:	29 c2                	sub    edx,eax
c0018329:	89 d0                	mov    eax,edx
c001832b:	05 ff 0f 00 00       	add    eax,0xfff
c0018330:	c1 e8 0c             	shr    eax,0xc
c0018333:	89 c2                	mov    edx,eax
c0018335:	b8 00 50 03 c0       	mov    eax,0xc0035000
c001833a:	6a 04                	push   0x4
c001833c:	6a ff                	push   0xffffffff
c001833e:	52                   	push   edx
c001833f:	50                   	push   eax
c0018340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018344:	e8 59 ff ff ff       	call   c00182a2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0018349:	83 c4 14             	add    esp,0x14
c001834c:	90                   	nop
c001834d:	c3                   	ret    

c001834e <VAS::setToWriteCombining(unsigned long, int)>:
c001834e:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018353:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018359:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0018360:	75 01                	jne    c0018363 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0018362:	c3                   	ret    
c0018363:	68 80 00 00 00       	push   0x80
c0018368:	6a ff                	push   0xffffffff
c001836a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001836e:	50                   	push   eax
c001836f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018373:	52                   	push   edx
c0018374:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018378:	51                   	push   ecx
c0018379:	e8 24 ff ff ff       	call   c00182a2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001837e:	83 c4 14             	add    esp,0x14
c0018381:	c3                   	ret    

c0018382 <VAS::mapOtherVASIn(bool, VAS*)>:
c0018382:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018386:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018389:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001838d:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0018390:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018395:	83 f8 01             	cmp    eax,0x1
c0018398:	19 c0                	sbb    eax,eax
c001839a:	83 ca 03             	or     edx,0x3
c001839d:	83 e0 fc             	and    eax,0xfffffffc
c00183a0:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00183a7:	0f 20 d8             	mov    eax,cr3
c00183aa:	0f 22 d8             	mov    cr3,eax
c00183ad:	c3                   	ret    

c00183ae <VAS::~VAS()>:
c00183ae:	83 ec 2c             	sub    esp,0x2c
c00183b1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00183b9:	fa                   	cli    
c00183ba:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00183bf:	83 c0 01             	add    eax,0x1
c00183c2:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00183c7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00183cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00183ce:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00183d1:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00183d7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00183db:	6a 01                	push   0x1
c00183dd:	50                   	push   eax
c00183de:	e8 9f ff ff ff       	call   c0018382 <VAS::mapOtherVASIn(bool, VAS*)>
c00183e3:	83 c4 0c             	add    esp,0xc
c00183e6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00183ee:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00183f6:	0f 8f d8 00 00 00    	jg     c00184d4 <VAS::~VAS()+0x126>
c00183fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018400:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018403:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018407:	c1 e2 02             	shl    edx,0x2
c001840a:	01 d0                	add    eax,edx
c001840c:	8b 00                	mov    eax,DWORD PTR [eax]
c001840e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018416:	83 e0 01             	and    eax,0x1
c0018419:	0f 84 ab 00 00 00    	je     c00184ca <VAS::~VAS()+0x11c>
c001841f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0018427:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c001842f:	7f 74                	jg     c00184a5 <VAS::~VAS()+0xf7>
c0018431:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018435:	c1 e0 0a             	shl    eax,0xa
c0018438:	89 c2                	mov    edx,eax
c001843a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001843e:	01 d0                	add    eax,edx
c0018440:	c1 e0 0c             	shl    eax,0xc
c0018443:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018447:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001844c:	8b 00                	mov    eax,DWORD PTR [eax]
c001844e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0018451:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0018457:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001845b:	6a 01                	push   0x1
c001845d:	50                   	push   eax
c001845e:	e8 77 fc ff ff       	call   c00180da <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0018463:	83 c4 0c             	add    esp,0xc
c0018466:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001846a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001846e:	8b 00                	mov    eax,DWORD PTR [eax]
c0018470:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018474:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018478:	25 01 04 00 00       	and    eax,0x401
c001847d:	3d 01 04 00 00       	cmp    eax,0x401
c0018482:	75 1a                	jne    c001849e <VAS::~VAS()+0xf0>
c0018484:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018488:	25 00 f0 ff ff       	and    eax,0xfffff000
c001848d:	83 ec 0c             	sub    esp,0xc
c0018490:	50                   	push   eax
c0018491:	e8 bc e0 ff ff       	call   c0016552 <Phys::freePage(unsigned long)>
c0018496:	83 c4 10             	add    esp,0x10
c0018499:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001849e:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c00184a3:	eb 82                	jmp    c0018427 <VAS::~VAS()+0x79>
c00184a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184a9:	25 00 04 00 00       	and    eax,0x400
c00184ae:	74 1a                	je     c00184ca <VAS::~VAS()+0x11c>
c00184b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184b4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00184b9:	83 ec 0c             	sub    esp,0xc
c00184bc:	50                   	push   eax
c00184bd:	e8 90 e0 ff ff       	call   c0016552 <Phys::freePage(unsigned long)>
c00184c2:	83 c4 10             	add    esp,0x10
c00184c5:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00184ca:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c00184cf:	e9 1a ff ff ff       	jmp    c00183ee <VAS::~VAS()+0x40>
c00184d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184d8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00184db:	83 ec 0c             	sub    esp,0xc
c00184de:	50                   	push   eax
c00184df:	e8 43 fc ff ff       	call   c0018127 <Virt::freeKernelVirtualPages(unsigned long)>
c00184e4:	83 c4 10             	add    esp,0x10
c00184e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184eb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00184ee:	83 ec 0c             	sub    esp,0xc
c00184f1:	50                   	push   eax
c00184f2:	e8 5b e0 ff ff       	call   c0016552 <Phys::freePage(unsigned long)>
c00184f7:	83 c4 10             	add    esp,0x10
c00184fa:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00184ff:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0018504:	83 e8 01             	sub    eax,0x1
c0018507:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001850c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0018511:	85 c0                	test   eax,eax
c0018513:	75 01                	jne    c0018516 <VAS::~VAS()+0x168>
c0018515:	fb                   	sti    
c0018516:	90                   	nop
c0018517:	83 c4 2c             	add    esp,0x2c
c001851a:	c3                   	ret    
c001851b:	90                   	nop

c001851c <VAS::mapPage(unsigned long, unsigned long, int)>:
c001851c:	55                   	push   ebp
c001851d:	57                   	push   edi
c001851e:	56                   	push   esi
c001851f:	53                   	push   ebx
c0018520:	83 ec 1c             	sub    esp,0x1c
c0018523:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0018527:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001852b:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0018531:	77 08                	ja     c001853b <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0018533:	0f 20 d8             	mov    eax,cr3
c0018536:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0018539:	75 49                	jne    c0018584 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c001853b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001853f:	09 d8                	or     eax,ebx
c0018541:	a9 ff 0f 00 00       	test   eax,0xfff
c0018546:	75 59                	jne    c00185a1 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0018548:	89 de                	mov    esi,ebx
c001854a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001854d:	c1 ee 16             	shr    esi,0x16
c0018550:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0018557:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001855b:	74 56                	je     c00185b3 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c001855d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018561:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018565:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c001856b:	c1 eb 0a             	shr    ebx,0xa
c001856e:	c1 e6 0c             	shl    esi,0xc
c0018571:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0018577:	09 d0                	or     eax,edx
c0018579:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c001857c:	83 c4 1c             	add    esp,0x1c
c001857f:	5b                   	pop    ebx
c0018580:	5e                   	pop    esi
c0018581:	5f                   	pop    edi
c0018582:	5d                   	pop    ebp
c0018583:	c3                   	ret    
c0018584:	83 ec 0c             	sub    esp,0xc
c0018587:	68 a8 0f 03 c0       	push   0xc0030fa8
c001858c:	e8 b0 0b 00 00       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0018591:	83 c4 10             	add    esp,0x10
c0018594:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018598:	09 d8                	or     eax,ebx
c001859a:	a9 ff 0f 00 00       	test   eax,0xfff
c001859f:	74 a7                	je     c0018548 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00185a1:	83 ec 0c             	sub    esp,0xc
c00185a4:	68 10 10 03 c0       	push   0xc0031010
c00185a9:	e8 9d 7a 00 00       	call   c002004b <KePanic(char const*)>
c00185ae:	83 c4 10             	add    esp,0x10
c00185b1:	eb 95                	jmp    c0018548 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00185b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00185b7:	e8 ff df ff ff       	call   c00165bb <Phys::allocatePage()>
c00185bc:	83 ec 0c             	sub    esp,0xc
c00185bf:	89 c5                	mov    ebp,eax
c00185c1:	8b 0d b0 aa 03 c0    	mov    ecx,DWORD PTR ds:0xc003aab0
c00185c7:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00185cb:	6a 01                	push   0x1
c00185cd:	e8 37 f8 ff ff       	call   c0017e09 <Virt::allocateKernelVirtualPages(int)>
c00185d2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00185d9:	6a 01                	push   0x1
c00185db:	50                   	push   eax
c00185dc:	55                   	push   ebp
c00185dd:	81 cd 07 04 00 00    	or     ebp,0x407
c00185e3:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00185e7:	51                   	push   ecx
c00185e8:	e8 29 01 00 00       	call   c0018716 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00185ed:	83 c4 1c             	add    esp,0x1c
c00185f0:	68 00 10 00 00       	push   0x1000
c00185f5:	6a 00                	push   0x0
c00185f7:	50                   	push   eax
c00185f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00185fc:	e8 ef 7e fe ff       	call   c00004f0 <memset>
c0018601:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0018605:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0018608:	e8 1a fb ff ff       	call   c0018127 <Virt::freeKernelVirtualPages(unsigned long)>
c001860d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018611:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018614:	83 c4 10             	add    esp,0x10
c0018617:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c001861a:	e9 3e ff ff ff       	jmp    c001855d <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c001861f:	90                   	nop

c0018620 <VAS::allocatePages(int, int)>:
c0018620:	55                   	push   ebp
c0018621:	57                   	push   edi
c0018622:	56                   	push   esi
c0018623:	53                   	push   ebx
c0018624:	83 ec 1c             	sub    esp,0x1c
c0018627:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001862b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001862f:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0018633:	75 71                	jne    c00186a6 <VAS::allocatePages(int, int)+0x86>
c0018635:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0018638:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001863c:	85 c0                	test   eax,eax
c001863e:	74 4d                	je     c001868d <VAS::allocatePages(int, int)+0x6d>
c0018640:	89 dd                	mov    ebp,ebx
c0018642:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018646:	c1 e5 0c             	shl    ebp,0xc
c0018649:	01 c5                	add    ebp,eax
c001864b:	85 db                	test   ebx,ebx
c001864d:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0018650:	7e 29                	jle    c001867b <VAS::allocatePages(int, int)+0x5b>
c0018652:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0018656:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001865a:	81 cf 00 04 00 00    	or     edi,0x400
c0018660:	e8 56 df ff ff       	call   c00165bb <Phys::allocatePage()>
c0018665:	57                   	push   edi
c0018666:	53                   	push   ebx
c0018667:	81 c3 00 10 00 00    	add    ebx,0x1000
c001866d:	50                   	push   eax
c001866e:	56                   	push   esi
c001866f:	e8 a8 fe ff ff       	call   c001851c <VAS::mapPage(unsigned long, unsigned long, int)>
c0018674:	83 c4 10             	add    esp,0x10
c0018677:	39 dd                	cmp    ebp,ebx
c0018679:	75 e5                	jne    c0018660 <VAS::allocatePages(int, int)+0x40>
c001867b:	0f 20 d8             	mov    eax,cr3
c001867e:	0f 22 d8             	mov    cr3,eax
c0018681:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018685:	83 c4 1c             	add    esp,0x1c
c0018688:	5b                   	pop    ebx
c0018689:	5e                   	pop    esi
c001868a:	5f                   	pop    edi
c001868b:	5d                   	pop    ebp
c001868c:	c3                   	ret    
c001868d:	83 ec 0c             	sub    esp,0xc
c0018690:	68 34 10 03 c0       	push   0xc0031034
c0018695:	e8 b1 79 00 00       	call   c002004b <KePanic(char const*)>
c001869a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001869d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00186a1:	83 c4 10             	add    esp,0x10
c00186a4:	eb 9a                	jmp    c0018640 <VAS::allocatePages(int, int)+0x20>
c00186a6:	83 ec 0c             	sub    esp,0xc
c00186a9:	53                   	push   ebx
c00186aa:	e8 5a f7 ff ff       	call   c0017e09 <Virt::allocateKernelVirtualPages(int)>
c00186af:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00186b3:	83 c4 10             	add    esp,0x10
c00186b6:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c00186bb:	77 37                	ja     c00186f4 <VAS::allocatePages(int, int)+0xd4>
c00186bd:	85 db                	test   ebx,ebx
c00186bf:	7e ba                	jle    c001867b <VAS::allocatePages(int, int)+0x5b>
c00186c1:	c1 e3 0c             	shl    ebx,0xc
c00186c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00186c8:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00186cc:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c00186cf:	81 cf 00 04 00 00    	or     edi,0x400
c00186d5:	89 c3                	mov    ebx,eax
c00186d7:	e8 df de ff ff       	call   c00165bb <Phys::allocatePage()>
c00186dc:	57                   	push   edi
c00186dd:	53                   	push   ebx
c00186de:	81 c3 00 10 00 00    	add    ebx,0x1000
c00186e4:	50                   	push   eax
c00186e5:	56                   	push   esi
c00186e6:	e8 31 fe ff ff       	call   c001851c <VAS::mapPage(unsigned long, unsigned long, int)>
c00186eb:	83 c4 10             	add    esp,0x10
c00186ee:	39 dd                	cmp    ebp,ebx
c00186f0:	75 e5                	jne    c00186d7 <VAS::allocatePages(int, int)+0xb7>
c00186f2:	eb 87                	jmp    c001867b <VAS::allocatePages(int, int)+0x5b>
c00186f4:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00186f9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00186ff:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0018706:	74 b5                	je     c00186bd <VAS::allocatePages(int, int)+0x9d>
c0018708:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001870c:	80 ce 01             	or     dh,0x1
c001870f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0018713:	eb a8                	jmp    c00186bd <VAS::allocatePages(int, int)+0x9d>
c0018715:	90                   	nop

c0018716 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0018716:	55                   	push   ebp
c0018717:	57                   	push   edi
c0018718:	56                   	push   esi
c0018719:	53                   	push   ebx
c001871a:	83 ec 0c             	sub    esp,0xc
c001871d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018721:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018725:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0018729:	85 db                	test   ebx,ebx
c001872b:	7e 2f                	jle    c001875c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c001872d:	c1 e3 0c             	shl    ebx,0xc
c0018730:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018734:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0018738:	01 d3                	add    ebx,edx
c001873a:	55                   	push   ebp
c001873b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001873f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018743:	29 c2                	sub    edx,eax
c0018745:	01 f2                	add    edx,esi
c0018747:	52                   	push   edx
c0018748:	56                   	push   esi
c0018749:	81 c6 00 10 00 00    	add    esi,0x1000
c001874f:	57                   	push   edi
c0018750:	e8 c7 fd ff ff       	call   c001851c <VAS::mapPage(unsigned long, unsigned long, int)>
c0018755:	83 c4 10             	add    esp,0x10
c0018758:	39 de                	cmp    esi,ebx
c001875a:	75 de                	jne    c001873a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c001875c:	0f 20 d8             	mov    eax,cr3
c001875f:	0f 22 d8             	mov    cr3,eax
c0018762:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018766:	83 c4 0c             	add    esp,0xc
c0018769:	5b                   	pop    ebx
c001876a:	5e                   	pop    esi
c001876b:	5f                   	pop    edi
c001876c:	5d                   	pop    ebp
c001876d:	c3                   	ret    

c001876e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c001876e:	55                   	push   ebp
c001876f:	57                   	push   edi
c0018770:	56                   	push   esi
c0018771:	53                   	push   ebx
c0018772:	83 ec 1c             	sub    esp,0x1c
c0018775:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018779:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001877d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018781:	09 f8                	or     eax,edi
c0018783:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0018787:	a9 ff 0f 00 00       	test   eax,0xfff
c001878c:	75 4f                	jne    c00187dd <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c001878e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0018792:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0018795:	c1 eb 16             	shr    ebx,0x16
c0018798:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c001879f:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c00187a3:	74 52                	je     c00187f7 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c00187a5:	0f b6 f2             	movzx  esi,dl
c00187a8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00187ac:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00187b0:	c1 e8 0a             	shr    eax,0xa
c00187b3:	83 fe 01             	cmp    esi,0x1
c00187b6:	19 d2                	sbb    edx,edx
c00187b8:	c1 e3 0c             	shl    ebx,0xc
c00187bb:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c00187c1:	25 fc 0f 00 00       	and    eax,0xffc
c00187c6:	01 d8                	add    eax,ebx
c00187c8:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00187cc:	09 d9                	or     ecx,ebx
c00187ce:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c00187d5:	83 c4 1c             	add    esp,0x1c
c00187d8:	5b                   	pop    ebx
c00187d9:	5e                   	pop    esi
c00187da:	5f                   	pop    edi
c00187db:	5d                   	pop    ebp
c00187dc:	c3                   	ret    
c00187dd:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00187e1:	83 ec 0c             	sub    esp,0xc
c00187e4:	68 60 10 03 c0       	push   0xc0031060
c00187e9:	e8 5d 78 00 00       	call   c002004b <KePanic(char const*)>
c00187ee:	83 c4 10             	add    esp,0x10
c00187f1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00187f5:	eb 97                	jmp    c001878e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c00187f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00187fb:	e8 bb dd ff ff       	call   c00165bb <Phys::allocatePage()>
c0018800:	83 ec 0c             	sub    esp,0xc
c0018803:	89 c5                	mov    ebp,eax
c0018805:	8b 0d b0 aa 03 c0    	mov    ecx,DWORD PTR ds:0xc003aab0
c001880b:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001880f:	6a 01                	push   0x1
c0018811:	e8 f3 f5 ff ff       	call   c0017e09 <Virt::allocateKernelVirtualPages(int)>
c0018816:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001881d:	6a 01                	push   0x1
c001881f:	50                   	push   eax
c0018820:	55                   	push   ebp
c0018821:	81 cd 07 04 00 00    	or     ebp,0x407
c0018827:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001882b:	51                   	push   ecx
c001882c:	e8 e5 fe ff ff       	call   c0018716 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018831:	83 c4 1c             	add    esp,0x1c
c0018834:	68 00 10 00 00       	push   0x1000
c0018839:	6a 00                	push   0x0
c001883b:	50                   	push   eax
c001883c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018840:	e8 ab 7c fe ff       	call   c00004f0 <memset>
c0018845:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0018849:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001884c:	e8 d6 f8 ff ff       	call   c0018127 <Virt::freeKernelVirtualPages(unsigned long)>
c0018851:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0018854:	83 c4 10             	add    esp,0x10
c0018857:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c001885a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001885e:	e9 42 ff ff ff       	jmp    c00187a5 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c0018863:	90                   	nop

c0018864 <VAS::VAS(bool)>:
c0018864:	53                   	push   ebx
c0018865:	83 ec 28             	sub    esp,0x28
c0018868:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001886c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018870:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018874:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001887b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001887f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018886:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001888a:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001888e:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0018891:	e8 25 dd ff ff       	call   c00165bb <Phys::allocatePage()>
c0018896:	89 c2                	mov    edx,eax
c0018898:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001889c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001889f:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c00188a5:	83 ec 0c             	sub    esp,0xc
c00188a8:	6a 01                	push   0x1
c00188aa:	e8 5a f5 ff ff       	call   c0017e09 <Virt::allocateKernelVirtualPages(int)>
c00188af:	83 c4 10             	add    esp,0x10
c00188b2:	89 c2                	mov    edx,eax
c00188b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00188b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00188bb:	83 ec 0c             	sub    esp,0xc
c00188be:	6a 03                	push   0x3
c00188c0:	6a 01                	push   0x1
c00188c2:	52                   	push   edx
c00188c3:	50                   	push   eax
c00188c4:	53                   	push   ebx
c00188c5:	e8 4c fe ff ff       	call   c0018716 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00188ca:	83 c4 20             	add    esp,0x20
c00188cd:	89 c2                	mov    edx,eax
c00188cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00188d3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00188d6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00188de:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c00188e6:	7f 1d                	jg     c0018905 <VAS::VAS(bool)+0xa1>
c00188e8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00188ec:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00188ef:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00188f3:	c1 e2 02             	shl    edx,0x2
c00188f6:	01 d0                	add    eax,edx
c00188f8:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00188fe:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0018903:	eb d9                	jmp    c00188de <VAS::VAS(bool)+0x7a>
c0018905:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c001890d:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0018915:	7f 7e                	jg     c0018995 <VAS::VAS(bool)+0x131>
c0018917:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001891b:	2d 00 02 00 00       	sub    eax,0x200
c0018920:	c1 e0 0c             	shl    eax,0xc
c0018923:	83 c8 05             	or     eax,0x5
c0018926:	89 c2                	mov    edx,eax
c0018928:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001892d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018933:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018939:	83 e0 10             	and    eax,0x10
c001893c:	0f b6 c0             	movzx  eax,al
c001893f:	85 c0                	test   eax,eax
c0018941:	74 07                	je     c001894a <VAS::VAS(bool)+0xe6>
c0018943:	b8 00 01 00 00       	mov    eax,0x100
c0018948:	eb 05                	jmp    c001894f <VAS::VAS(bool)+0xeb>
c001894a:	b8 00 00 00 00       	mov    eax,0x0
c001894f:	09 d0                	or     eax,edx
c0018951:	89 c1                	mov    ecx,eax
c0018953:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018957:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001895a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001895e:	c1 e2 02             	shl    edx,0x2
c0018961:	01 d0                	add    eax,edx
c0018963:	89 ca                	mov    edx,ecx
c0018965:	89 10                	mov    DWORD PTR [eax],edx
c0018967:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001896b:	2d 40 03 00 00       	sub    eax,0x340
c0018970:	83 f8 7f             	cmp    eax,0x7f
c0018973:	77 16                	ja     c001898b <VAS::VAS(bool)+0x127>
c0018975:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018979:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001897c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018980:	c1 e2 02             	shl    edx,0x2
c0018983:	01 d0                	add    eax,edx
c0018985:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001898b:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0018990:	e9 78 ff ff ff       	jmp    c001890d <VAS::VAS(bool)+0xa9>
c0018995:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001899a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00189a0:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c00189a6:	83 e0 10             	and    eax,0x10
c00189a9:	0f b6 c0             	movzx  eax,al
c00189ac:	85 c0                	test   eax,eax
c00189ae:	74 07                	je     c00189b7 <VAS::VAS(bool)+0x153>
c00189b0:	b8 03 41 00 00       	mov    eax,0x4103
c00189b5:	eb 05                	jmp    c00189bc <VAS::VAS(bool)+0x158>
c00189b7:	b8 03 40 00 00       	mov    eax,0x4003
c00189bc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00189c0:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00189c3:	81 c2 20 0c 00 00    	add    edx,0xc20
c00189c9:	89 02                	mov    DWORD PTR [edx],eax
c00189cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189cf:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00189d2:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00189d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00189dd:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c00189e3:	83 e0 10             	and    eax,0x10
c00189e6:	0f b6 c0             	movzx  eax,al
c00189e9:	85 c0                	test   eax,eax
c00189eb:	74 07                	je     c00189f4 <VAS::VAS(bool)+0x190>
c00189ed:	b8 00 01 00 00       	mov    eax,0x100
c00189f2:	eb 05                	jmp    c00189f9 <VAS::VAS(bool)+0x195>
c00189f4:	b8 00 00 00 00       	mov    eax,0x0
c00189f9:	09 c2                	or     edx,eax
c00189fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189ff:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018a02:	05 fc 0f 00 00       	add    eax,0xffc
c0018a07:	83 ca 03             	or     edx,0x3
c0018a0a:	89 10                	mov    DWORD PTR [eax],edx
c0018a0c:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018a11:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018a17:	83 ec 0c             	sub    esp,0xc
c0018a1a:	50                   	push   eax
c0018a1b:	e8 00 2a 00 00       	call   c001b420 <Device::getName()>
c0018a20:	83 c4 10             	add    esp,0x10
c0018a23:	83 ec 08             	sub    esp,0x8
c0018a26:	68 30 12 03 c0       	push   0xc0031230
c0018a2b:	50                   	push   eax
c0018a2c:	e8 1f 7d fe ff       	call   c0000750 <strcmp>
c0018a31:	83 c4 10             	add    esp,0x10
c0018a34:	85 c0                	test   eax,eax
c0018a36:	0f 94 c0             	sete   al
c0018a39:	0f b6 c0             	movzx  eax,al
c0018a3c:	85 c0                	test   eax,eax
c0018a3e:	74 68                	je     c0018aa8 <VAS::VAS(bool)+0x244>
c0018a40:	fa                   	cli    
c0018a41:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018a46:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018a4c:	05 7c 09 00 00       	add    eax,0x97c
c0018a51:	83 ec 0c             	sub    esp,0xc
c0018a54:	50                   	push   eax
c0018a55:	e8 50 d3 ff ff       	call   c0015daa <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0018a5a:	83 c4 10             	add    esp,0x10
c0018a5d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018a62:	89 c3                	mov    ebx,eax
c0018a64:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018a69:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018a6f:	05 7c 09 00 00       	add    eax,0x97c
c0018a74:	83 ec 0c             	sub    esp,0xc
c0018a77:	50                   	push   eax
c0018a78:	e8 2d d3 ff ff       	call   c0015daa <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0018a7d:	83 c4 10             	add    esp,0x10
c0018a80:	83 ec 08             	sub    esp,0x8
c0018a83:	50                   	push   eax
c0018a84:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018a88:	e8 7b f6 ff ff       	call   c0018108 <VAS::getPageTableEntry(unsigned long)>
c0018a8d:	83 c4 10             	add    esp,0x10
c0018a90:	8b 00                	mov    eax,DWORD PTR [eax]
c0018a92:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018a97:	6a 11                	push   0x11
c0018a99:	53                   	push   ebx
c0018a9a:	50                   	push   eax
c0018a9b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018a9f:	e8 78 fa ff ff       	call   c001851c <VAS::mapPage(unsigned long, unsigned long, int)>
c0018aa4:	83 c4 10             	add    esp,0x10
c0018aa7:	fb                   	sti    
c0018aa8:	90                   	nop
c0018aa9:	83 c4 28             	add    esp,0x28
c0018aac:	5b                   	pop    ebx
c0018aad:	c3                   	ret    

c0018aae <VAS::evict(unsigned long)>:
c0018aae:	55                   	push   ebp
c0018aaf:	57                   	push   edi
c0018ab0:	56                   	push   esi
c0018ab1:	53                   	push   ebx
c0018ab2:	83 ec 1c             	sub    esp,0x1c
c0018ab5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018ab9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018abd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018ac1:	e8 a1 f4 ff ff       	call   c0017f67 <Virt::allocateSwapfilePage()>
c0018ac6:	89 c7                	mov    edi,eax
c0018ac8:	a1 4c 37 03 c0       	mov    eax,ds:0xc003374c
c0018acd:	85 c0                	test   eax,eax
c0018acf:	7e 40                	jle    c0018b11 <VAS::evict(unsigned long)+0x63>
c0018ad1:	89 ee                	mov    esi,ebp
c0018ad3:	31 db                	xor    ebx,ebx
c0018ad5:	83 ec 0c             	sub    esp,0xc
c0018ad8:	57                   	push   edi
c0018ad9:	e8 73 f4 ff ff       	call   c0017f51 <Virt::swapIDToSector(unsigned long)>
c0018ade:	89 34 24             	mov    DWORD PTR [esp],esi
c0018ae1:	01 d8                	add    eax,ebx
c0018ae3:	6a 01                	push   0x1
c0018ae5:	31 d2                	xor    edx,edx
c0018ae7:	83 c3 01             	add    ebx,0x1
c0018aea:	52                   	push   edx
c0018aeb:	81 c6 00 02 00 00    	add    esi,0x200
c0018af1:	50                   	push   eax
c0018af2:	0f be 05 58 37 03 c0 	movsx  eax,BYTE PTR ds:0xc0033758
c0018af9:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0018b00:	50                   	push   eax
c0018b01:	e8 1a 3b 00 00       	call   c001c620 <LogicalDisk::write(unsigned long long, int, void*)>
c0018b06:	83 c4 20             	add    esp,0x20
c0018b09:	39 1d 4c 37 03 c0    	cmp    DWORD PTR ds:0xc003374c,ebx
c0018b0f:	7f c4                	jg     c0018ad5 <VAS::evict(unsigned long)+0x27>
c0018b11:	83 ec 08             	sub    esp,0x8
c0018b14:	c1 e7 0c             	shl    edi,0xc
c0018b17:	55                   	push   ebp
c0018b18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018b1c:	50                   	push   eax
c0018b1d:	e8 e6 f5 ff ff       	call   c0018108 <VAS::getPageTableEntry(unsigned long)>
c0018b22:	8b 10                	mov    edx,DWORD PTR [eax]
c0018b24:	89 d3                	mov    ebx,edx
c0018b26:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0018b2c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0018b32:	09 d7                	or     edi,edx
c0018b34:	89 38                	mov    DWORD PTR [eax],edi
c0018b36:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018b39:	8b 15 a8 aa 03 c0    	mov    edx,DWORD PTR ds:0xc003aaa8
c0018b3f:	83 c2 01             	add    edx,0x1
c0018b42:	89 15 a8 aa 03 c0    	mov    DWORD PTR ds:0xc003aaa8,edx
c0018b48:	e8 05 da ff ff       	call   c0016552 <Phys::freePage(unsigned long)>
c0018b4d:	0f 20 d8             	mov    eax,cr3
c0018b50:	0f 22 d8             	mov    cr3,eax
c0018b53:	8b 0d a8 aa 03 c0    	mov    ecx,DWORD PTR ds:0xc003aaa8
c0018b59:	51                   	push   ecx
c0018b5a:	55                   	push   ebp
c0018b5b:	53                   	push   ebx
c0018b5c:	68 84 10 03 c0       	push   0xc0031084
c0018b61:	e8 db 05 00 00       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0018b66:	a1 a4 aa 03 c0       	mov    eax,ds:0xc003aaa4
c0018b6b:	c7 44 24 50 3e 12 03 c0 	mov    DWORD PTR [esp+0x50],0xc003123e
c0018b73:	8d 50 01             	lea    edx,[eax+0x1]
c0018b76:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0018b7a:	89 15 a4 aa 03 c0    	mov    DWORD PTR ds:0xc003aaa4,edx
c0018b80:	83 c4 3c             	add    esp,0x3c
c0018b83:	5b                   	pop    ebx
c0018b84:	5e                   	pop    esi
c0018b85:	5f                   	pop    edi
c0018b86:	5d                   	pop    ebp
c0018b87:	e9 b5 05 00 00       	jmp    c0019141 <Dbg::kprintf(char const*, ...)>

c0018b8c <VAS::tryLoadBackOffDisk(unsigned long)>:
c0018b8c:	55                   	push   ebp
c0018b8d:	57                   	push   edi
c0018b8e:	56                   	push   esi
c0018b8f:	53                   	push   ebx
c0018b90:	81 ec 1c 10 00 00    	sub    esp,0x101c
c0018b96:	8b b4 24 34 10 00 00 	mov    esi,DWORD PTR [esp+0x1034]
c0018b9d:	89 f3                	mov    ebx,esi
c0018b9f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0018ba5:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c0018bab:	77 22                	ja     c0018bcf <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c0018bad:	83 ec 08             	sub    esp,0x8
c0018bb0:	56                   	push   esi
c0018bb1:	68 61 12 03 c0       	push   0xc0031261
c0018bb6:	e8 86 05 00 00       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0018bbb:	83 c4 10             	add    esp,0x10
c0018bbe:	85 db                	test   ebx,ebx
c0018bc0:	75 2a                	jne    c0018bec <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c0018bc2:	31 c0                	xor    eax,eax
c0018bc4:	81 c4 1c 10 00 00    	add    esp,0x101c
c0018bca:	5b                   	pop    ebx
c0018bcb:	5e                   	pop    esi
c0018bcc:	5f                   	pop    edi
c0018bcd:	5d                   	pop    ebp
c0018bce:	c3                   	ret    
c0018bcf:	83 ec 0c             	sub    esp,0xc
c0018bd2:	68 4f 12 03 c0       	push   0xc003124f
c0018bd7:	e8 6f 74 00 00       	call   c002004b <KePanic(char const*)>
c0018bdc:	5f                   	pop    edi
c0018bdd:	5d                   	pop    ebp
c0018bde:	56                   	push   esi
c0018bdf:	68 61 12 03 c0       	push   0xc0031261
c0018be4:	e8 58 05 00 00       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0018be9:	83 c4 10             	add    esp,0x10
c0018bec:	83 ec 08             	sub    esp,0x8
c0018bef:	53                   	push   ebx
c0018bf0:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c0018bf7:	51                   	push   ecx
c0018bf8:	e8 0b f5 ff ff       	call   c0018108 <VAS::getPageTableEntry(unsigned long)>
c0018bfd:	83 c4 10             	add    esp,0x10
c0018c00:	89 c2                	mov    edx,eax
c0018c02:	85 c0                	test   eax,eax
c0018c04:	74 bc                	je     c0018bc2 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c0018c06:	8b 28                	mov    ebp,DWORD PTR [eax]
c0018c08:	f7 c5 00 02 00 00    	test   ebp,0x200
c0018c0e:	0f 85 c0 00 00 00    	jne    c0018cd4 <VAS::tryLoadBackOffDisk(unsigned long)+0x148>
c0018c14:	89 e8                	mov    eax,ebp
c0018c16:	25 01 04 00 00       	and    eax,0x401
c0018c1b:	3d 00 04 00 00       	cmp    eax,0x400
c0018c20:	75 a0                	jne    c0018bc2 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c0018c22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018c26:	c1 ed 0c             	shr    ebp,0xc
c0018c29:	e8 8d d9 ff ff       	call   c00165bb <Phys::allocatePage()>
c0018c2e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018c32:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0018c34:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0018c3a:	09 c1                	or     ecx,eax
c0018c3c:	81 c9 01 08 00 00    	or     ecx,0x801
c0018c42:	89 0a                	mov    DWORD PTR [edx],ecx
c0018c44:	8b 15 4c 37 03 c0    	mov    edx,DWORD PTR ds:0xc003374c
c0018c4a:	85 d2                	test   edx,edx
c0018c4c:	7e 40                	jle    c0018c8e <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c0018c4e:	89 df                	mov    edi,ebx
c0018c50:	31 f6                	xor    esi,esi
c0018c52:	83 ec 0c             	sub    esp,0xc
c0018c55:	55                   	push   ebp
c0018c56:	e8 f6 f2 ff ff       	call   c0017f51 <Virt::swapIDToSector(unsigned long)>
c0018c5b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018c5e:	01 f0                	add    eax,esi
c0018c60:	6a 01                	push   0x1
c0018c62:	31 d2                	xor    edx,edx
c0018c64:	83 c6 01             	add    esi,0x1
c0018c67:	52                   	push   edx
c0018c68:	81 c7 00 02 00 00    	add    edi,0x200
c0018c6e:	50                   	push   eax
c0018c6f:	0f be 05 58 37 03 c0 	movsx  eax,BYTE PTR ds:0xc0033758
c0018c76:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0018c7d:	50                   	push   eax
c0018c7e:	e8 31 39 00 00       	call   c001c5b4 <LogicalDisk::read(unsigned long long, int, void*)>
c0018c83:	83 c4 20             	add    esp,0x20
c0018c86:	39 35 4c 37 03 c0    	cmp    DWORD PTR ds:0xc003374c,esi
c0018c8c:	7f c4                	jg     c0018c52 <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c0018c8e:	83 ec 04             	sub    esp,0x4
c0018c91:	a1 a8 aa 03 c0       	mov    eax,ds:0xc003aaa8
c0018c96:	83 e8 01             	sub    eax,0x1
c0018c99:	50                   	push   eax
c0018c9a:	a3 a8 aa 03 c0       	mov    ds:0xc003aaa8,eax
c0018c9f:	53                   	push   ebx
c0018ca0:	68 74 12 03 c0       	push   0xc0031274
c0018ca5:	e8 97 04 00 00       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0018caa:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018cad:	e8 7c f2 ff ff       	call   c0017f2e <Virt::freeSwapfilePage(unsigned long)>
c0018cb2:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0018cb7:	83 c4 10             	add    esp,0x10
c0018cba:	83 e8 01             	sub    eax,0x1
c0018cbd:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0018cc2:	85 c0                	test   eax,eax
c0018cc4:	75 01                	jne    c0018cc7 <VAS::tryLoadBackOffDisk(unsigned long)+0x13b>
c0018cc6:	fb                   	sti    
c0018cc7:	0f 20 d8             	mov    eax,cr3
c0018cca:	0f 22 d8             	mov    cr3,eax
c0018ccd:	b0 01                	mov    al,0x1
c0018ccf:	e9 f0 fe ff ff       	jmp    c0018bc4 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c0018cd4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018cd8:	bd 00 10 00 00       	mov    ebp,0x1000
c0018cdd:	83 ec 0c             	sub    esp,0xc
c0018ce0:	89 de                	mov    esi,ebx
c0018ce2:	68 b4 10 03 c0       	push   0xc00310b4
c0018ce7:	e8 55 04 00 00       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0018cec:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0018cf0:	e8 c6 d8 ff ff       	call   c00165bb <Phys::allocatePage()>
c0018cf5:	89 e9                	mov    ecx,ebp
c0018cf7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018cf9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018cfd:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0018cff:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c0018d05:	09 c8                	or     eax,ecx
c0018d07:	83 c8 02             	or     eax,0x2
c0018d0a:	89 02                	mov    DWORD PTR [edx],eax
c0018d0c:	0f 20 d8             	mov    eax,cr3
c0018d0f:	0f 22 d8             	mov    cr3,eax
c0018d12:	8d 74 24 20          	lea    esi,[esp+0x20]
c0018d16:	89 df                	mov    edi,ebx
c0018d18:	89 e9                	mov    ecx,ebp
c0018d1a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018d1c:	b0 01                	mov    al,0x1
c0018d1e:	83 c4 10             	add    esp,0x10
c0018d21:	e9 9e fe ff ff       	jmp    c0018bc4 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>

c0018d26 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c0018d26:	55                   	push   ebp
c0018d27:	57                   	push   edi
c0018d28:	56                   	push   esi
c0018d29:	53                   	push   ebx
c0018d2a:	83 ec 28             	sub    esp,0x28
c0018d2d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0018d31:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018d35:	50                   	push   eax
c0018d36:	e8 ce f0 ff ff       	call   c0017e09 <Virt::allocateKernelVirtualPages(int)>
c0018d3b:	83 c4 0c             	add    esp,0xc
c0018d3e:	89 c5                	mov    ebp,eax
c0018d40:	6a 07                	push   0x7
c0018d42:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018d46:	52                   	push   edx
c0018d47:	56                   	push   esi
c0018d48:	e8 d3 f8 ff ff       	call   c0018620 <VAS::allocatePages(int, int)>
c0018d4d:	83 c4 10             	add    esp,0x10
c0018d50:	89 c7                	mov    edi,eax
c0018d52:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0018d56:	85 c9                	test   ecx,ecx
c0018d58:	74 2f                	je     c0018d89 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0018d5a:	31 db                	xor    ebx,ebx
c0018d5c:	e8 5a d8 ff ff       	call   c00165bb <Phys::allocatePage()>
c0018d61:	83 c3 01             	add    ebx,0x1
c0018d64:	6a 03                	push   0x3
c0018d66:	55                   	push   ebp
c0018d67:	50                   	push   eax
c0018d68:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018d6c:	56                   	push   esi
c0018d6d:	e8 aa f7 ff ff       	call   c001851c <VAS::mapPage(unsigned long, unsigned long, int)>
c0018d72:	6a 07                	push   0x7
c0018d74:	57                   	push   edi
c0018d75:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018d79:	50                   	push   eax
c0018d7a:	56                   	push   esi
c0018d7b:	e8 9c f7 ff ff       	call   c001851c <VAS::mapPage(unsigned long, unsigned long, int)>
c0018d80:	83 c4 20             	add    esp,0x20
c0018d83:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c0018d87:	75 d3                	jne    c0018d5c <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0018d89:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018d8d:	89 28                	mov    DWORD PTR [eax],ebp
c0018d8f:	83 c4 1c             	add    esp,0x1c
c0018d92:	89 f8                	mov    eax,edi
c0018d94:	5b                   	pop    ebx
c0018d95:	5e                   	pop    esi
c0018d96:	5f                   	pop    edi
c0018d97:	5d                   	pop    ebp
c0018d98:	c3                   	ret    
c0018d99:	90                   	nop

c0018d9a <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c0018d9a:	53                   	push   ebx
c0018d9b:	83 ec 14             	sub    esp,0x14
c0018d9e:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0018da2:	68 d4 10 03 c0       	push   0xc00310d4
c0018da7:	e8 95 03 00 00       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0018dac:	c7 04 24 34 11 03 c0 	mov    DWORD PTR [esp],0xc0031134
c0018db3:	e8 89 03 00 00       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0018db8:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0018dbc:	83 c4 18             	add    esp,0x18
c0018dbf:	5b                   	pop    ebx
c0018dc0:	e9 62 f3 ff ff       	jmp    c0018127 <Virt::freeKernelVirtualPages(unsigned long)>
c0018dc5:	90                   	nop

c0018dc6 <VAS::scanForEviction()>:
c0018dc6:	57                   	push   edi
c0018dc7:	56                   	push   esi
c0018dc8:	31 f6                	xor    esi,esi
c0018dca:	53                   	push   ebx
c0018dcb:	83 ec 10             	sub    esp,0x10
c0018dce:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018dd2:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0018dd5:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0018ddb:	75 0e                	jne    c0018deb <VAS::scanForEviction()+0x25>
c0018ddd:	89 da                	mov    edx,ebx
c0018ddf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018de2:	c1 ea 16             	shr    edx,0x16
c0018de5:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0018de9:	74 57                	je     c0018e42 <VAS::scanForEviction()+0x7c>
c0018deb:	53                   	push   ebx
c0018dec:	57                   	push   edi
c0018ded:	e8 16 f3 ff ff       	call   c0018108 <VAS::getPageTableEntry(unsigned long)>
c0018df2:	5a                   	pop    edx
c0018df3:	8b 10                	mov    edx,DWORD PTR [eax]
c0018df5:	59                   	pop    ecx
c0018df6:	89 d1                	mov    ecx,edx
c0018df8:	c1 e9 0c             	shr    ecx,0xc
c0018dfb:	74 10                	je     c0018e0d <VAS::scanForEviction()+0x47>
c0018dfd:	89 d1                	mov    ecx,edx
c0018dff:	81 e1 01 08 00 00    	and    ecx,0x801
c0018e05:	81 f9 01 08 00 00    	cmp    ecx,0x801
c0018e0b:	74 40                	je     c0018e4d <VAS::scanForEviction()+0x87>
c0018e0d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0018e13:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0018e19:	76 2d                	jbe    c0018e48 <VAS::scanForEviction()+0x82>
c0018e1b:	83 c6 01             	add    esi,0x1
c0018e1e:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0018e25:	83 fe 03             	cmp    esi,0x3
c0018e28:	74 32                	je     c0018e5c <VAS::scanForEviction()+0x96>
c0018e2a:	31 db                	xor    ebx,ebx
c0018e2c:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0018e32:	75 b7                	jne    c0018deb <VAS::scanForEviction()+0x25>
c0018e34:	89 da                	mov    edx,ebx
c0018e36:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018e39:	c1 ea 16             	shr    edx,0x16
c0018e3c:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0018e40:	75 a9                	jne    c0018deb <VAS::scanForEviction()+0x25>
c0018e42:	81 c3 00 00 40 00    	add    ebx,0x400000
c0018e48:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0018e4b:	eb 88                	jmp    c0018dd5 <VAS::scanForEviction()+0xf>
c0018e4d:	f6 c2 20             	test   dl,0x20
c0018e50:	74 13                	je     c0018e65 <VAS::scanForEviction()+0x9f>
c0018e52:	83 e2 df             	and    edx,0xffffffdf
c0018e55:	89 10                	mov    DWORD PTR [eax],edx
c0018e57:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0018e5a:	eb b1                	jmp    c0018e0d <VAS::scanForEviction()+0x47>
c0018e5c:	83 c4 10             	add    esp,0x10
c0018e5f:	31 c0                	xor    eax,eax
c0018e61:	5b                   	pop    ebx
c0018e62:	5e                   	pop    esi
c0018e63:	5f                   	pop    edi
c0018e64:	c3                   	ret    
c0018e65:	83 ec 08             	sub    esp,0x8
c0018e68:	89 d0                	mov    eax,edx
c0018e6a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018e6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018e73:	53                   	push   ebx
c0018e74:	68 89 12 03 c0       	push   0xc0031289
c0018e79:	e8 c3 02 00 00       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0018e7e:	58                   	pop    eax
c0018e7f:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0018e82:	5a                   	pop    edx
c0018e83:	51                   	push   ecx
c0018e84:	57                   	push   edi
c0018e85:	e8 24 fc ff ff       	call   c0018aae <VAS::evict(unsigned long)>
c0018e8a:	5b                   	pop    ebx
c0018e8b:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0018e8e:	5e                   	pop    esi
c0018e8f:	50                   	push   eax
c0018e90:	68 9d 12 03 c0       	push   0xc003129d
c0018e95:	e8 a7 02 00 00       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0018e9a:	58                   	pop    eax
c0018e9b:	5a                   	pop    edx
c0018e9c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018ea0:	50                   	push   eax
c0018ea1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018ea5:	68 b0 12 03 c0       	push   0xc00312b0
c0018eaa:	e8 92 02 00 00       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0018eaf:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0018eb2:	83 c4 10             	add    esp,0x10
c0018eb5:	81 c1 00 10 00 00    	add    ecx,0x1000
c0018ebb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018ebf:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c0018ec2:	83 c4 10             	add    esp,0x10
c0018ec5:	5b                   	pop    ebx
c0018ec6:	5e                   	pop    esi
c0018ec7:	5f                   	pop    edi
c0018ec8:	c3                   	ret    

c0018ec9 <mapVASFirstTime>:
c0018ec9:	55                   	push   ebp
c0018eca:	57                   	push   edi
c0018ecb:	56                   	push   esi
c0018ecc:	53                   	push   ebx
c0018ecd:	83 ec 0c             	sub    esp,0xc
c0018ed0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ed5:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0018ed8:	83 fa 01             	cmp    edx,0x1
c0018edb:	0f 84 cb 00 00 00    	je     c0018fac <mapVASFirstTime+0xe3>
c0018ee1:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0018ee4:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c0018ee7:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0018eec:	c1 e5 15             	shl    ebp,0x15
c0018eef:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0018ef4:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c0018efa:	29 eb                	sub    ebx,ebp
c0018efc:	29 ef                	sub    edi,ebp
c0018efe:	e8 b8 d6 ff ff       	call   c00165bb <Phys::allocatePage()>
c0018f03:	83 ec 0c             	sub    esp,0xc
c0018f06:	68 03 04 00 00       	push   0x403
c0018f0b:	6a 01                	push   0x1
c0018f0d:	53                   	push   ebx
c0018f0e:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0018f14:	50                   	push   eax
c0018f15:	56                   	push   esi
c0018f16:	e8 fb f7 ff ff       	call   c0018716 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018f1b:	83 c4 20             	add    esp,0x20
c0018f1e:	39 fb                	cmp    ebx,edi
c0018f20:	75 dc                	jne    c0018efe <mapVASFirstTime+0x35>
c0018f22:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0018f27:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0018f2c:	29 eb                	sub    ebx,ebp
c0018f2e:	29 ef                	sub    edi,ebp
c0018f30:	e8 86 d6 ff ff       	call   c00165bb <Phys::allocatePage()>
c0018f35:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c0018f39:	83 fa 01             	cmp    edx,0x1
c0018f3c:	19 d2                	sbb    edx,edx
c0018f3e:	83 ec 0c             	sub    esp,0xc
c0018f41:	83 e2 04             	and    edx,0x4
c0018f44:	81 c2 03 04 00 00    	add    edx,0x403
c0018f4a:	52                   	push   edx
c0018f4b:	6a 01                	push   0x1
c0018f4d:	53                   	push   ebx
c0018f4e:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0018f54:	50                   	push   eax
c0018f55:	56                   	push   esi
c0018f56:	e8 bb f7 ff ff       	call   c0018716 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018f5b:	83 c4 20             	add    esp,0x20
c0018f5e:	39 df                	cmp    edi,ebx
c0018f60:	75 ce                	jne    c0018f30 <mapVASFirstTime+0x67>
c0018f62:	83 ec 0c             	sub    esp,0xc
c0018f65:	bb 7c 60 03 c0       	mov    ebx,0xc003607c
c0018f6a:	6a 04                	push   0x4
c0018f6c:	81 eb 00 50 03 c0    	sub    ebx,0xc0035000
c0018f72:	6a ff                	push   0xffffffff
c0018f74:	c1 eb 0c             	shr    ebx,0xc
c0018f77:	53                   	push   ebx
c0018f78:	68 00 50 03 c0       	push   0xc0035000
c0018f7d:	56                   	push   esi
c0018f7e:	e8 1f f3 ff ff       	call   c00182a2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0018f83:	83 c4 14             	add    esp,0x14
c0018f86:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c0018f8b:	6a 04                	push   0x4
c0018f8d:	6a ff                	push   0xffffffff
c0018f8f:	53                   	push   ebx
c0018f90:	68 00 50 03 c0       	push   0xc0035000
c0018f95:	50                   	push   eax
c0018f96:	e8 07 f3 ff ff       	call   c00182a2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0018f9b:	0f 20 d8             	mov    eax,cr3
c0018f9e:	0f 22 d8             	mov    cr3,eax
c0018fa1:	83 c4 20             	add    esp,0x20
c0018fa4:	83 c4 0c             	add    esp,0xc
c0018fa7:	5b                   	pop    ebx
c0018fa8:	5e                   	pop    esi
c0018fa9:	5f                   	pop    edi
c0018faa:	5d                   	pop    ebp
c0018fab:	c3                   	ret    
c0018fac:	83 ec 0c             	sub    esp,0xc
c0018faf:	68 bd 12 03 c0       	push   0xc00312bd
c0018fb4:	e8 88 01 00 00       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0018fb9:	83 c4 10             	add    esp,0x10
c0018fbc:	83 c4 0c             	add    esp,0xc
c0018fbf:	5b                   	pop    ebx
c0018fc0:	5e                   	pop    esi
c0018fc1:	5f                   	pop    edi
c0018fc2:	5d                   	pop    ebp
c0018fc3:	c3                   	ret    

c0018fc4 <__cxa_atexit>:
c0018fc4:	31 c0                	xor    eax,eax
c0018fc6:	c3                   	ret    

c0018fc7 <__cxa_finalize>:
c0018fc7:	c3                   	ret    

c0018fc8 <__stack_chk_fail>:
c0018fc8:	55                   	push   ebp
c0018fc9:	89 e5                	mov    ebp,esp
c0018fcb:	83 ec 10             	sub    esp,0x10
c0018fce:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0018fd1:	68 d6 12 03 c0       	push   0xc00312d6
c0018fd6:	e8 66 01 00 00       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0018fdb:	58                   	pop    eax
c0018fdc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018fdf:	5a                   	pop    edx
c0018fe0:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0018fe3:	68 d6 12 03 c0       	push   0xc00312d6
c0018fe8:	e8 54 01 00 00       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0018fed:	c7 04 24 de 12 03 c0 	mov    DWORD PTR [esp],0xc00312de
c0018ff4:	e8 52 70 00 00       	call   c002004b <KePanic(char const*)>
c0018ff9:	83 c4 10             	add    esp,0x10
c0018ffc:	c9                   	leave  
c0018ffd:	c3                   	ret    

c0018ffe <__cxa_pure_virtual>:
c0018ffe:	83 ec 18             	sub    esp,0x18
c0019001:	68 f6 12 03 c0       	push   0xc00312f6
c0019006:	e8 40 70 00 00       	call   c002004b <KePanic(char const*)>
c001900b:	83 c4 1c             	add    esp,0x1c
c001900e:	c3                   	ret    

c001900f <operator new[](unsigned long)>:
c001900f:	e9 9e d2 ff ff       	jmp    c00162b2 <malloc>

c0019014 <operator delete(void*, unsigned long)>:
c0019014:	e9 b9 d2 ff ff       	jmp    c00162d2 <rfree>

c0019019 <operator delete[](void*)>:
c0019019:	e9 b4 d2 ff ff       	jmp    c00162d2 <rfree>

c001901e <operator delete[](void*, unsigned long)>:
c001901e:	e9 af d2 ff ff       	jmp    c00162d2 <rfree>

c0019023 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0019023:	55                   	push   ebp
c0019024:	57                   	push   edi
c0019025:	56                   	push   esi
c0019026:	be ff 0d 03 c0       	mov    esi,0xc0030dff
c001902b:	53                   	push   ebx
c001902c:	83 ec 20             	sub    esp,0x20
c001902f:	a0 fe 0d 03 c0       	mov    al,ds:0xc0030dfe
c0019034:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0019038:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001903c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0019040:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0019044:	b8 10 00 00 00       	mov    eax,0x10
c0019049:	f7 c7 02 00 00 00    	test   edi,0x2
c001904f:	75 60                	jne    c00190b1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c0019051:	89 c1                	mov    ecx,eax
c0019053:	c1 e9 02             	shr    ecx,0x2
c0019056:	fc                   	cld    
c0019057:	31 d2                	xor    edx,edx
c0019059:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001905b:	a8 02                	test   al,0x2
c001905d:	74 0b                	je     c001906a <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c001905f:	66 8b 16             	mov    dx,WORD PTR [esi]
c0019062:	66 89 17             	mov    WORD PTR [edi],dx
c0019065:	ba 02 00 00 00       	mov    edx,0x2
c001906a:	a8 01                	test   al,0x1
c001906c:	74 06                	je     c0019074 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c001906e:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c0019071:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c0019074:	89 ee                	mov    esi,ebp
c0019076:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001907a:	eb 02                	jmp    c001907e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c001907c:	89 c6                	mov    esi,eax
c001907e:	31 d2                	xor    edx,edx
c0019080:	83 c1 01             	add    ecx,0x1
c0019083:	89 f0                	mov    eax,esi
c0019085:	f7 f3                	div    ebx
c0019087:	39 de                	cmp    esi,ebx
c0019089:	73 f1                	jae    c001907c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c001908b:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001908e:	eb 02                	jmp    c0019092 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c0019090:	89 c5                	mov    ebp,eax
c0019092:	31 d2                	xor    edx,edx
c0019094:	83 e9 01             	sub    ecx,0x1
c0019097:	89 e8                	mov    eax,ebp
c0019099:	f7 f3                	div    ebx
c001909b:	39 dd                	cmp    ebp,ebx
c001909d:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c00190a1:	88 11                	mov    BYTE PTR [ecx],dl
c00190a3:	73 eb                	jae    c0019090 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c00190a5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00190a9:	83 c4 20             	add    esp,0x20
c00190ac:	5b                   	pop    ebx
c00190ad:	5e                   	pop    esi
c00190ae:	5f                   	pop    edi
c00190af:	5d                   	pop    ebp
c00190b0:	c3                   	ret    
c00190b1:	66 8b 16             	mov    dx,WORD PTR [esi]
c00190b4:	83 c7 02             	add    edi,0x2
c00190b7:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c00190bb:	83 c6 02             	add    esi,0x2
c00190be:	83 e8 02             	sub    eax,0x2
c00190c1:	eb 8e                	jmp    c0019051 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c00190c3 <Dbg::logc(char)>:
c00190c3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00190c7:	f6 05 d4 a9 03 c0 10 	test   BYTE PTR ds:0xc003a9d4,0x10
c00190ce:	75 12                	jne    c00190e2 <Dbg::logc(char)+0x1f>
c00190d0:	ba fd 03 00 00       	mov    edx,0x3fd
c00190d5:	ec                   	in     al,dx
c00190d6:	a8 20                	test   al,0x20
c00190d8:	74 fb                	je     c00190d5 <Dbg::logc(char)+0x12>
c00190da:	ba f8 03 00 00       	mov    edx,0x3f8
c00190df:	88 c8                	mov    al,cl
c00190e1:	ee                   	out    dx,al
c00190e2:	c3                   	ret    

c00190e3 <Dbg::logs(char*)>:
c00190e3:	53                   	push   ebx
c00190e4:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00190e8:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00190eb:	85 c0                	test   eax,eax
c00190ed:	74 11                	je     c0019100 <Dbg::logs(char*)+0x1d>
c00190ef:	83 c3 01             	add    ebx,0x1
c00190f2:	50                   	push   eax
c00190f3:	e8 cb ff ff ff       	call   c00190c3 <Dbg::logc(char)>
c00190f8:	58                   	pop    eax
c00190f9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00190fc:	85 c0                	test   eax,eax
c00190fe:	75 ef                	jne    c00190ef <Dbg::logs(char*)+0xc>
c0019100:	5b                   	pop    ebx
c0019101:	c3                   	ret    

c0019102 <Dbg::logWriteInt(unsigned int)>:
c0019102:	83 ec 10             	sub    esp,0x10
c0019105:	6a 0a                	push   0xa
c0019107:	8d 44 24 08          	lea    eax,[esp+0x8]
c001910b:	50                   	push   eax
c001910c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019110:	50                   	push   eax
c0019111:	e8 0d ff ff ff       	call   c0019023 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0019116:	50                   	push   eax
c0019117:	e8 c7 ff ff ff       	call   c00190e3 <Dbg::logs(char*)>
c001911c:	83 c4 20             	add    esp,0x20
c001911f:	c3                   	ret    

c0019120 <Dbg::logWriteIntBase(unsigned int, int)>:
c0019120:	83 ec 10             	sub    esp,0x10
c0019123:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019127:	50                   	push   eax
c0019128:	8d 44 24 08          	lea    eax,[esp+0x8]
c001912c:	50                   	push   eax
c001912d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019131:	52                   	push   edx
c0019132:	e8 ec fe ff ff       	call   c0019023 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0019137:	50                   	push   eax
c0019138:	e8 a6 ff ff ff       	call   c00190e3 <Dbg::logs(char*)>
c001913d:	83 c4 20             	add    esp,0x20
c0019140:	c3                   	ret    

c0019141 <Dbg::kprintf(char const*, ...)>:
c0019141:	55                   	push   ebp
c0019142:	57                   	push   edi
c0019143:	56                   	push   esi
c0019144:	53                   	push   ebx
c0019145:	83 ec 0c             	sub    esp,0xc
c0019148:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001914c:	f6 05 d4 a9 03 c0 10 	test   BYTE PTR ds:0xc003a9d4,0x10
c0019153:	74 08                	je     c001915d <Dbg::kprintf(char const*, ...)+0x1c>
c0019155:	83 c4 0c             	add    esp,0xc
c0019158:	5b                   	pop    ebx
c0019159:	5e                   	pop    esi
c001915a:	5f                   	pop    edi
c001915b:	5d                   	pop    ebp
c001915c:	c3                   	ret    
c001915d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019161:	31 ff                	xor    edi,edi
c0019163:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019167:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001916a:	85 c0                	test   eax,eax
c001916c:	74 e7                	je     c0019155 <Dbg::kprintf(char const*, ...)+0x14>
c001916e:	8d 77 01             	lea    esi,[edi+0x1]
c0019171:	83 f8 25             	cmp    eax,0x25
c0019174:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0019177:	75 47                	jne    c00191c0 <Dbg::kprintf(char const*, ...)+0x7f>
c0019179:	83 c7 02             	add    edi,0x2
c001917c:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c001917f:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0019182:	83 e8 25             	sub    eax,0x25
c0019185:	0f b6 c0             	movzx  eax,al
c0019188:	83 f8 53             	cmp    eax,0x53
c001918b:	0f 87 ce 00 00 00    	ja     c001925f <Dbg::kprintf(char const*, ...)+0x11e>
c0019191:	ff 24 85 0c 13 03 c0 	jmp    DWORD PTR [eax*4-0x3ffcecf4]
c0019198:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001919c:	89 c8                	mov    eax,ecx
c001919e:	83 c1 04             	add    ecx,0x4
c00191a1:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00191a5:	8b 28                	mov    ebp,DWORD PTR [eax]
c00191a7:	55                   	push   ebp
c00191a8:	e8 55 ff ff ff       	call   c0019102 <Dbg::logWriteInt(unsigned int)>
c00191ad:	58                   	pop    eax
c00191ae:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00191b1:	85 c0                	test   eax,eax
c00191b3:	74 a0                	je     c0019155 <Dbg::kprintf(char const*, ...)+0x14>
c00191b5:	8d 77 01             	lea    esi,[edi+0x1]
c00191b8:	83 f8 25             	cmp    eax,0x25
c00191bb:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c00191be:	74 b9                	je     c0019179 <Dbg::kprintf(char const*, ...)+0x38>
c00191c0:	50                   	push   eax
c00191c1:	89 f7                	mov    edi,esi
c00191c3:	e8 fb fe ff ff       	call   c00190c3 <Dbg::logc(char)>
c00191c8:	89 ee                	mov    esi,ebp
c00191ca:	58                   	pop    eax
c00191cb:	eb e1                	jmp    c00191ae <Dbg::kprintf(char const*, ...)+0x6d>
c00191cd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00191d1:	89 c8                	mov    eax,ecx
c00191d3:	83 c1 04             	add    ecx,0x4
c00191d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00191d8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00191dc:	50                   	push   eax
c00191dd:	e8 01 ff ff ff       	call   c00190e3 <Dbg::logs(char*)>
c00191e2:	58                   	pop    eax
c00191e3:	eb c9                	jmp    c00191ae <Dbg::kprintf(char const*, ...)+0x6d>
c00191e5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00191e9:	89 d0                	mov    eax,edx
c00191eb:	83 c2 04             	add    edx,0x4
c00191ee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00191f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00191f4:	50                   	push   eax
c00191f5:	e8 08 ff ff ff       	call   c0019102 <Dbg::logWriteInt(unsigned int)>
c00191fa:	58                   	pop    eax
c00191fb:	eb b1                	jmp    c00191ae <Dbg::kprintf(char const*, ...)+0x6d>
c00191fd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019201:	89 d0                	mov    eax,edx
c0019203:	83 c2 04             	add    edx,0x4
c0019206:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0019209:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001920d:	50                   	push   eax
c001920e:	e8 b0 fe ff ff       	call   c00190c3 <Dbg::logc(char)>
c0019213:	58                   	pop    eax
c0019214:	eb 98                	jmp    c00191ae <Dbg::kprintf(char const*, ...)+0x6d>
c0019216:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001921a:	89 c8                	mov    eax,ecx
c001921c:	83 c1 04             	add    ecx,0x4
c001921f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0019223:	6a 10                	push   0x10
c0019225:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019227:	51                   	push   ecx
c0019228:	e8 f3 fe ff ff       	call   c0019120 <Dbg::logWriteIntBase(unsigned int, int)>
c001922d:	5d                   	pop    ebp
c001922e:	58                   	pop    eax
c001922f:	e9 7a ff ff ff       	jmp    c00191ae <Dbg::kprintf(char const*, ...)+0x6d>
c0019234:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019238:	89 d0                	mov    eax,edx
c001923a:	83 c2 08             	add    edx,0x8
c001923d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0019241:	6a 10                	push   0x10
c0019243:	8b 00                	mov    eax,DWORD PTR [eax]
c0019245:	50                   	push   eax
c0019246:	e8 d5 fe ff ff       	call   c0019120 <Dbg::logWriteIntBase(unsigned int, int)>
c001924b:	58                   	pop    eax
c001924c:	5a                   	pop    edx
c001924d:	e9 5c ff ff ff       	jmp    c00191ae <Dbg::kprintf(char const*, ...)+0x6d>
c0019252:	6a 25                	push   0x25
c0019254:	e8 6a fe ff ff       	call   c00190c3 <Dbg::logc(char)>
c0019259:	5a                   	pop    edx
c001925a:	e9 4f ff ff ff       	jmp    c00191ae <Dbg::kprintf(char const*, ...)+0x6d>
c001925f:	6a 25                	push   0x25
c0019261:	e8 5d fe ff ff       	call   c00190c3 <Dbg::logc(char)>
c0019266:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c001926a:	50                   	push   eax
c001926b:	e8 53 fe ff ff       	call   c00190c3 <Dbg::logc(char)>
c0019270:	5a                   	pop    edx
c0019271:	59                   	pop    ecx
c0019272:	e9 37 ff ff ff       	jmp    c00191ae <Dbg::kprintf(char const*, ...)+0x6d>
c0019277:	90                   	nop

c0019278 <KiUbsanPrintDetails(char const*, void*)>:
c0019278:	83 ec 1c             	sub    esp,0x1c
c001927b:	83 ec 08             	sub    esp,0x8
c001927e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019282:	68 5c 14 03 c0       	push   0xc003145c
c0019287:	e8 b5 fe ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c001928c:	83 c4 10             	add    esp,0x10
c001928f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019293:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019297:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001929b:	8b 00                	mov    eax,DWORD PTR [eax]
c001929d:	83 ec 08             	sub    esp,0x8
c00192a0:	50                   	push   eax
c00192a1:	68 70 14 03 c0       	push   0xc0031470
c00192a6:	e8 96 fe ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c00192ab:	83 c4 10             	add    esp,0x10
c00192ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00192b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00192b5:	83 ec 08             	sub    esp,0x8
c00192b8:	50                   	push   eax
c00192b9:	68 7a 14 03 c0       	push   0xc003147a
c00192be:	e8 7e fe ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c00192c3:	83 c4 10             	add    esp,0x10
c00192c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00192ca:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00192cd:	83 ec 08             	sub    esp,0x8
c00192d0:	50                   	push   eax
c00192d1:	68 84 14 03 c0       	push   0xc0031484
c00192d6:	e8 66 fe ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c00192db:	83 c4 10             	add    esp,0x10
c00192de:	90                   	nop
c00192df:	83 c4 1c             	add    esp,0x1c
c00192e2:	c3                   	ret    
c00192e3:	90                   	nop

c00192e4 <__ubsan_handle_type_mismatch_v1>:
c00192e4:	83 ec 0c             	sub    esp,0xc
c00192e7:	83 ec 08             	sub    esp,0x8
c00192ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00192ee:	68 c8 15 03 c0       	push   0xc00315c8
c00192f3:	e8 80 ff ff ff       	call   c0019278 <KiUbsanPrintDetails(char const*, void*)>
c00192f8:	83 c4 10             	add    esp,0x10
c00192fb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019300:	75 16                	jne    c0019318 <__ubsan_handle_type_mismatch_v1+0x34>
c0019302:	83 ec 0c             	sub    esp,0xc
c0019305:	68 8e 14 03 c0       	push   0xc003148e
c001930a:	e8 32 fe ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c001930f:	83 c4 10             	add    esp,0x10
c0019312:	e9 91 00 00 00       	jmp    c00193a8 <__ubsan_handle_type_mismatch_v1+0xc4>
c0019317:	90                   	nop
c0019318:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001931c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001931f:	85 c0                	test   eax,eax
c0019321:	74 29                	je     c001934c <__ubsan_handle_type_mismatch_v1+0x68>
c0019323:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019327:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001932a:	83 e8 01             	sub    eax,0x1
c001932d:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019331:	75 19                	jne    c001934c <__ubsan_handle_type_mismatch_v1+0x68>
c0019333:	83 ec 08             	sub    esp,0x8
c0019336:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001933a:	68 e8 15 03 c0       	push   0xc00315e8
c001933f:	e8 fd fd ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0019344:	83 c4 10             	add    esp,0x10
c0019347:	eb 5f                	jmp    c00193a8 <__ubsan_handle_type_mismatch_v1+0xc4>
c0019349:	8d 76 00             	lea    esi,[esi+0x0]
c001934c:	83 ec 0c             	sub    esp,0xc
c001934f:	68 a3 14 03 c0       	push   0xc00314a3
c0019354:	e8 e8 fd ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0019359:	83 c4 10             	add    esp,0x10
c001935c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019360:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0019363:	0f b6 c0             	movzx  eax,al
c0019366:	83 ec 08             	sub    esp,0x8
c0019369:	50                   	push   eax
c001936a:	68 bd 14 03 c0       	push   0xc00314bd
c001936f:	e8 cd fd ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0019374:	83 c4 10             	add    esp,0x10
c0019377:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001937b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001937e:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0019381:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019385:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019389:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c001938c:	0f b6 c0             	movzx  eax,al
c001938f:	8b 04 85 60 37 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcc8a0]
c0019396:	51                   	push   ecx
c0019397:	52                   	push   edx
c0019398:	50                   	push   eax
c0019399:	68 10 16 03 c0       	push   0xc0031610
c001939e:	e8 9e fd ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c00193a3:	83 c4 10             	add    esp,0x10
c00193a6:	66 90                	xchg   ax,ax
c00193a8:	83 ec 0c             	sub    esp,0xc
c00193ab:	68 c8 15 03 c0       	push   0xc00315c8
c00193b0:	e8 96 6c 00 00       	call   c002004b <KePanic(char const*)>
c00193b5:	83 c4 10             	add    esp,0x10
c00193b8:	90                   	nop
c00193b9:	83 c4 0c             	add    esp,0xc
c00193bc:	c3                   	ret    
c00193bd:	8d 76 00             	lea    esi,[esi+0x0]

c00193c0 <__ubsan_handle_pointer_overflow>:
c00193c0:	83 ec 0c             	sub    esp,0xc
c00193c3:	83 ec 08             	sub    esp,0x8
c00193c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00193ca:	68 58 16 03 c0       	push   0xc0031658
c00193cf:	e8 a4 fe ff ff       	call   c0019278 <KiUbsanPrintDetails(char const*, void*)>
c00193d4:	83 c4 10             	add    esp,0x10
c00193d7:	83 ec 0c             	sub    esp,0xc
c00193da:	68 58 16 03 c0       	push   0xc0031658
c00193df:	e8 67 6c 00 00       	call   c002004b <KePanic(char const*)>
c00193e4:	83 c4 10             	add    esp,0x10
c00193e7:	90                   	nop
c00193e8:	83 c4 0c             	add    esp,0xc
c00193eb:	c3                   	ret    

c00193ec <__ubsan_handle_out_of_bounds>:
c00193ec:	83 ec 0c             	sub    esp,0xc
c00193ef:	83 ec 08             	sub    esp,0x8
c00193f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00193f6:	68 c8 14 03 c0       	push   0xc00314c8
c00193fb:	e8 78 fe ff ff       	call   c0019278 <KiUbsanPrintDetails(char const*, void*)>
c0019400:	83 c4 10             	add    esp,0x10
c0019403:	83 ec 0c             	sub    esp,0xc
c0019406:	68 c8 14 03 c0       	push   0xc00314c8
c001940b:	e8 3b 6c 00 00       	call   c002004b <KePanic(char const*)>
c0019410:	83 c4 10             	add    esp,0x10
c0019413:	90                   	nop
c0019414:	83 c4 0c             	add    esp,0xc
c0019417:	c3                   	ret    

c0019418 <__ubsan_handle_add_overflow>:
c0019418:	83 ec 0c             	sub    esp,0xc
c001941b:	83 ec 08             	sub    esp,0x8
c001941e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019422:	68 e5 14 03 c0       	push   0xc00314e5
c0019427:	e8 4c fe ff ff       	call   c0019278 <KiUbsanPrintDetails(char const*, void*)>
c001942c:	83 c4 10             	add    esp,0x10
c001942f:	83 ec 0c             	sub    esp,0xc
c0019432:	68 e5 14 03 c0       	push   0xc00314e5
c0019437:	e8 0f 6c 00 00       	call   c002004b <KePanic(char const*)>
c001943c:	83 c4 10             	add    esp,0x10
c001943f:	90                   	nop
c0019440:	83 c4 0c             	add    esp,0xc
c0019443:	c3                   	ret    

c0019444 <__ubsan_handle_load_invalid_value>:
c0019444:	83 ec 0c             	sub    esp,0xc
c0019447:	83 ec 08             	sub    esp,0x8
c001944a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001944e:	68 78 16 03 c0       	push   0xc0031678
c0019453:	e8 20 fe ff ff       	call   c0019278 <KiUbsanPrintDetails(char const*, void*)>
c0019458:	83 c4 10             	add    esp,0x10
c001945b:	83 ec 0c             	sub    esp,0xc
c001945e:	68 78 16 03 c0       	push   0xc0031678
c0019463:	e8 e3 6b 00 00       	call   c002004b <KePanic(char const*)>
c0019468:	83 c4 10             	add    esp,0x10
c001946b:	90                   	nop
c001946c:	83 c4 0c             	add    esp,0xc
c001946f:	c3                   	ret    

c0019470 <__ubsan_handle_divrem_overflow>:
c0019470:	83 ec 0c             	sub    esp,0xc
c0019473:	83 ec 08             	sub    esp,0x8
c0019476:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001947a:	68 9c 16 03 c0       	push   0xc003169c
c001947f:	e8 f4 fd ff ff       	call   c0019278 <KiUbsanPrintDetails(char const*, void*)>
c0019484:	83 c4 10             	add    esp,0x10
c0019487:	83 ec 0c             	sub    esp,0xc
c001948a:	68 9c 16 03 c0       	push   0xc003169c
c001948f:	e8 b7 6b 00 00       	call   c002004b <KePanic(char const*)>
c0019494:	83 c4 10             	add    esp,0x10
c0019497:	90                   	nop
c0019498:	83 c4 0c             	add    esp,0xc
c001949b:	c3                   	ret    

c001949c <__ubsan_handle_mul_overflow>:
c001949c:	83 ec 0c             	sub    esp,0xc
c001949f:	83 ec 08             	sub    esp,0x8
c00194a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00194a6:	68 01 15 03 c0       	push   0xc0031501
c00194ab:	e8 c8 fd ff ff       	call   c0019278 <KiUbsanPrintDetails(char const*, void*)>
c00194b0:	83 c4 10             	add    esp,0x10
c00194b3:	83 ec 0c             	sub    esp,0xc
c00194b6:	68 01 15 03 c0       	push   0xc0031501
c00194bb:	e8 8b 6b 00 00       	call   c002004b <KePanic(char const*)>
c00194c0:	83 c4 10             	add    esp,0x10
c00194c3:	90                   	nop
c00194c4:	83 c4 0c             	add    esp,0xc
c00194c7:	c3                   	ret    

c00194c8 <__ubsan_handle_sub_overflow>:
c00194c8:	83 ec 0c             	sub    esp,0xc
c00194cb:	83 ec 08             	sub    esp,0x8
c00194ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00194d2:	68 1d 15 03 c0       	push   0xc003151d
c00194d7:	e8 9c fd ff ff       	call   c0019278 <KiUbsanPrintDetails(char const*, void*)>
c00194dc:	83 c4 10             	add    esp,0x10
c00194df:	83 ec 0c             	sub    esp,0xc
c00194e2:	68 1d 15 03 c0       	push   0xc003151d
c00194e7:	e8 5f 6b 00 00       	call   c002004b <KePanic(char const*)>
c00194ec:	83 c4 10             	add    esp,0x10
c00194ef:	90                   	nop
c00194f0:	83 c4 0c             	add    esp,0xc
c00194f3:	c3                   	ret    

c00194f4 <__ubsan_handle_shift_out_of_bounds>:
c00194f4:	83 ec 0c             	sub    esp,0xc
c00194f7:	83 ec 08             	sub    esp,0x8
c00194fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00194fe:	68 bc 16 03 c0       	push   0xc00316bc
c0019503:	e8 70 fd ff ff       	call   c0019278 <KiUbsanPrintDetails(char const*, void*)>
c0019508:	83 c4 10             	add    esp,0x10
c001950b:	83 ec 0c             	sub    esp,0xc
c001950e:	68 bc 16 03 c0       	push   0xc00316bc
c0019513:	e8 33 6b 00 00       	call   c002004b <KePanic(char const*)>
c0019518:	83 c4 10             	add    esp,0x10
c001951b:	90                   	nop
c001951c:	83 c4 0c             	add    esp,0xc
c001951f:	c3                   	ret    

c0019520 <__ubsan_handle_negate_overflow>:
c0019520:	83 ec 0c             	sub    esp,0xc
c0019523:	83 ec 08             	sub    esp,0x8
c0019526:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001952a:	68 e0 16 03 c0       	push   0xc00316e0
c001952f:	e8 44 fd ff ff       	call   c0019278 <KiUbsanPrintDetails(char const*, void*)>
c0019534:	83 c4 10             	add    esp,0x10
c0019537:	83 ec 0c             	sub    esp,0xc
c001953a:	68 e0 16 03 c0       	push   0xc00316e0
c001953f:	e8 07 6b 00 00       	call   c002004b <KePanic(char const*)>
c0019544:	83 c4 10             	add    esp,0x10
c0019547:	90                   	nop
c0019548:	83 c4 0c             	add    esp,0xc
c001954b:	c3                   	ret    

c001954c <KiIsHashInTable(unsigned short)>:
c001954c:	0f b7 d0             	movzx  edx,ax
c001954f:	83 e0 07             	and    eax,0x7
c0019552:	c1 fa 03             	sar    edx,0x3
c0019555:	88 c1                	mov    cl,al
c0019557:	0f b6 92 00 af 03 c0 	movzx  edx,BYTE PTR [edx-0x3ffc5100]
c001955e:	d3 fa                	sar    edx,cl
c0019560:	89 d0                	mov    eax,edx
c0019562:	83 e0 01             	and    eax,0x1
c0019565:	c3                   	ret    

c0019566 <KiSetHashInTable(unsigned short, bool)>:
c0019566:	56                   	push   esi
c0019567:	53                   	push   ebx
c0019568:	0f b7 d8             	movzx  ebx,ax
c001956b:	83 e0 07             	and    eax,0x7
c001956e:	c1 fb 03             	sar    ebx,0x3
c0019571:	89 c1                	mov    ecx,eax
c0019573:	0f b6 b3 00 af 03 c0 	movzx  esi,BYTE PTR [ebx-0x3ffc5100]
c001957a:	b8 01 00 00 00       	mov    eax,0x1
c001957f:	d3 e0                	shl    eax,cl
c0019581:	84 d2                	test   dl,dl
c0019583:	74 04                	je     c0019589 <KiSetHashInTable(unsigned short, bool)+0x23>
c0019585:	09 f0                	or     eax,esi
c0019587:	eb 04                	jmp    c001958d <KiSetHashInTable(unsigned short, bool)+0x27>
c0019589:	f7 d0                	not    eax
c001958b:	21 f0                	and    eax,esi
c001958d:	88 83 00 af 03 c0    	mov    BYTE PTR [ebx-0x3ffc5100],al
c0019593:	5b                   	pop    ebx
c0019594:	5e                   	pop    esi
c0019595:	c3                   	ret    

c0019596 <KiFlushSymlinkChanges()>:
c0019596:	57                   	push   edi
c0019597:	56                   	push   esi
c0019598:	53                   	push   ebx
c0019599:	83 ec 1c             	sub    esp,0x1c
c001959c:	68 14 01 00 00       	push   0x114
c00195a1:	e8 0c cd ff ff       	call   c00162b2 <malloc>
c00195a6:	83 c4 0c             	add    esp,0xc
c00195a9:	89 c3                	mov    ebx,eax
c00195ab:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c00195b1:	68 ff 16 03 c0       	push   0xc00316ff
c00195b6:	50                   	push   eax
c00195b7:	e8 8c 0d 00 00       	call   c001a348 <File::File(char const*, Process*)>
c00195bc:	83 c4 10             	add    esp,0x10
c00195bf:	85 db                	test   ebx,ebx
c00195c1:	75 10                	jne    c00195d3 <KiFlushSymlinkChanges()+0x3d>
c00195c3:	83 ec 0c             	sub    esp,0xc
c00195c6:	68 1d 17 03 c0       	push   0xc003171d
c00195cb:	e8 7b 6a 00 00       	call   c002004b <KePanic(char const*)>
c00195d0:	83 c4 10             	add    esp,0x10
c00195d3:	50                   	push   eax
c00195d4:	50                   	push   eax
c00195d5:	6a 06                	push   0x6
c00195d7:	53                   	push   ebx
c00195d8:	e8 89 0d 00 00       	call   c001a366 <File::open(FileOpenMode)>
c00195dd:	83 c4 10             	add    esp,0x10
c00195e0:	85 c0                	test   eax,eax
c00195e2:	74 10                	je     c00195f4 <KiFlushSymlinkChanges()+0x5e>
c00195e4:	83 ec 0c             	sub    esp,0xc
c00195e7:	68 37 17 03 c0       	push   0xc0031737
c00195ec:	e8 5a 6a 00 00       	call   c002004b <KePanic(char const*)>
c00195f1:	83 c4 10             	add    esp,0x10
c00195f4:	31 f6                	xor    esi,esi
c00195f6:	39 35 c0 aa 03 c0    	cmp    DWORD PTR ds:0xc003aac0,esi
c00195fc:	7e 70                	jle    c001966e <KiFlushSymlinkChanges()+0xd8>
c00195fe:	83 ec 0c             	sub    esp,0xc
c0019601:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019603:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0019607:	89 f0                	mov    eax,esi
c0019609:	57                   	push   edi
c001960a:	c1 e0 08             	shl    eax,0x8
c001960d:	05 00 ab 03 c0       	add    eax,0xc003ab00
c0019612:	50                   	push   eax
c0019613:	6a 00                	push   0x0
c0019615:	68 00 01 00 00       	push   0x100
c001961a:	53                   	push   ebx
c001961b:	ff 52 10             	call   DWORD PTR [edx+0x10]
c001961e:	83 c4 20             	add    esp,0x20
c0019621:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c0019629:	74 10                	je     c001963b <KiFlushSymlinkChanges()+0xa5>
c001962b:	83 ec 0c             	sub    esp,0xc
c001962e:	68 51 17 03 c0       	push   0xc0031751
c0019633:	e8 13 6a 00 00       	call   c002004b <KePanic(char const*)>
c0019638:	83 c4 10             	add    esp,0x10
c001963b:	83 ec 0c             	sub    esp,0xc
c001963e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019640:	8d 14 f5 e0 aa 03 c0 	lea    edx,[esi*8-0x3ffc5520]
c0019647:	57                   	push   edi
c0019648:	52                   	push   edx
c0019649:	6a 00                	push   0x0
c001964b:	6a 08                	push   0x8
c001964d:	53                   	push   ebx
c001964e:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0019651:	83 c4 20             	add    esp,0x20
c0019654:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0019659:	74 10                	je     c001966b <KiFlushSymlinkChanges()+0xd5>
c001965b:	83 ec 0c             	sub    esp,0xc
c001965e:	68 6b 17 03 c0       	push   0xc003176b
c0019663:	e8 e3 69 00 00       	call   c002004b <KePanic(char const*)>
c0019668:	83 c4 10             	add    esp,0x10
c001966b:	46                   	inc    esi
c001966c:	eb 88                	jmp    c00195f6 <KiFlushSymlinkChanges()+0x60>
c001966e:	83 ec 0c             	sub    esp,0xc
c0019671:	53                   	push   ebx
c0019672:	e8 4d 0d 00 00       	call   c001a3c4 <File::close()>
c0019677:	83 c4 10             	add    esp,0x10
c001967a:	85 db                	test   ebx,ebx
c001967c:	74 0c                	je     c001968a <KiFlushSymlinkChanges()+0xf4>
c001967e:	83 ec 0c             	sub    esp,0xc
c0019681:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019683:	53                   	push   ebx
c0019684:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019687:	83 c4 10             	add    esp,0x10
c001968a:	c7 05 c0 aa 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003aac0,0x0
c0019694:	83 c4 10             	add    esp,0x10
c0019697:	5b                   	pop    ebx
c0019698:	5e                   	pop    esi
c0019699:	5f                   	pop    edi
c001969a:	c3                   	ret    

c001969b <KiDeinitialiseSymlinks(void*)>:
c001969b:	e9 f6 fe ff ff       	jmp    c0019596 <KiFlushSymlinkChanges()>

c00196a0 <KiGetSymlinkHash(char const*)>:
c00196a0:	53                   	push   ebx
c00196a1:	89 c3                	mov    ebx,eax
c00196a3:	83 ec 14             	sub    esp,0x14
c00196a6:	50                   	push   eax
c00196a7:	e8 c4 6e fe ff       	call   c0000570 <strlen>
c00196ac:	5a                   	pop    edx
c00196ad:	59                   	pop    ecx
c00196ae:	50                   	push   eax
c00196af:	53                   	push   ebx
c00196b0:	e8 18 63 00 00       	call   c001f9cd <KeCalculateCRC32(unsigned char*, int)>
c00196b5:	83 c4 18             	add    esp,0x18
c00196b8:	89 c2                	mov    edx,eax
c00196ba:	5b                   	pop    ebx
c00196bb:	c1 ea 10             	shr    edx,0x10
c00196be:	31 d0                	xor    eax,edx
c00196c0:	c3                   	ret    

c00196c1 <KiCreateSymlinkID()>:
c00196c1:	55                   	push   ebp
c00196c2:	57                   	push   edi
c00196c3:	56                   	push   esi
c00196c4:	53                   	push   ebx
c00196c5:	31 db                	xor    ebx,ebx
c00196c7:	83 ec 1c             	sub    esp,0x1c
c00196ca:	e8 ca 6a 00 00       	call   c0020199 <KeRand()>
c00196cf:	43                   	inc    ebx
c00196d0:	8b 2d 00 cf 03 c0    	mov    ebp,DWORD PTR ds:0xc003cf00
c00196d6:	31 d2                	xor    edx,edx
c00196d8:	8d 4d 01             	lea    ecx,[ebp+0x1]
c00196db:	0f a4 c2 1f          	shld   edx,eax,0x1f
c00196df:	89 0d 00 cf 03 c0    	mov    DWORD PTR ds:0xc003cf00,ecx
c00196e5:	c1 e0 1f             	shl    eax,0x1f
c00196e8:	89 d7                	mov    edi,edx
c00196ea:	89 c6                	mov    esi,eax
c00196ec:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00196f0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00196f8:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c00196fe:	75 10                	jne    c0019710 <KiCreateSymlinkID()+0x4f>
c0019700:	83 ec 0c             	sub    esp,0xc
c0019703:	68 85 17 03 c0       	push   0xc0031785
c0019708:	e8 3e 69 00 00       	call   c002004b <KePanic(char const*)>
c001970d:	83 c4 10             	add    esp,0x10
c0019710:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0019714:	75 04                	jne    c001971a <KiCreateSymlinkID()+0x59>
c0019716:	39 f5                	cmp    ebp,esi
c0019718:	74 b0                	je     c00196ca <KiCreateSymlinkID()+0x9>
c001971a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001971e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019722:	31 f0                	xor    eax,esi
c0019724:	83 c4 1c             	add    esp,0x1c
c0019727:	31 fa                	xor    edx,edi
c0019729:	5b                   	pop    ebx
c001972a:	5e                   	pop    esi
c001972b:	5f                   	pop    edi
c001972c:	5d                   	pop    ebp
c001972d:	c3                   	ret    

c001972e <KeRegisterSymlink(char const*, unsigned long long)>:
c001972e:	53                   	push   ebx
c001972f:	83 ec 0c             	sub    esp,0xc
c0019732:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019736:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001973a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001973e:	a1 c0 aa 03 c0       	mov    eax,ds:0xc003aac0
c0019743:	68 00 01 00 00       	push   0x100
c0019748:	89 0c c5 e4 aa 03 c0 	mov    DWORD PTR [eax*8-0x3ffc551c],ecx
c001974f:	6a 00                	push   0x0
c0019751:	89 14 c5 e0 aa 03 c0 	mov    DWORD PTR [eax*8-0x3ffc5520],edx
c0019758:	c1 e0 08             	shl    eax,0x8
c001975b:	05 00 ab 03 c0       	add    eax,0xc003ab00
c0019760:	50                   	push   eax
c0019761:	e8 8a 6d fe ff       	call   c00004f0 <memset>
c0019766:	58                   	pop    eax
c0019767:	a1 c0 aa 03 c0       	mov    eax,ds:0xc003aac0
c001976c:	5a                   	pop    edx
c001976d:	c1 e0 08             	shl    eax,0x8
c0019770:	53                   	push   ebx
c0019771:	05 00 ab 03 c0       	add    eax,0xc003ab00
c0019776:	50                   	push   eax
c0019777:	e8 c4 6e fe ff       	call   c0000640 <strcpy>
c001977c:	89 d8                	mov    eax,ebx
c001977e:	e8 1d ff ff ff       	call   c00196a0 <KiGetSymlinkHash(char const*)>
c0019783:	59                   	pop    ecx
c0019784:	0f b7 d8             	movzx  ebx,ax
c0019787:	58                   	pop    eax
c0019788:	53                   	push   ebx
c0019789:	68 8e 17 03 c0       	push   0xc003178e
c001978e:	e8 ae f9 ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0019793:	89 d8                	mov    eax,ebx
c0019795:	ba 01 00 00 00       	mov    edx,0x1
c001979a:	e8 c7 fd ff ff       	call   c0019566 <KiSetHashInTable(unsigned short, bool)>
c001979f:	a1 c0 aa 03 c0       	mov    eax,ds:0xc003aac0
c00197a4:	83 c4 10             	add    esp,0x10
c00197a7:	40                   	inc    eax
c00197a8:	a3 c0 aa 03 c0       	mov    ds:0xc003aac0,eax
c00197ad:	83 f8 03             	cmp    eax,0x3
c00197b0:	7e 09                	jle    c00197bb <KeRegisterSymlink(char const*, unsigned long long)+0x8d>
c00197b2:	83 c4 08             	add    esp,0x8
c00197b5:	5b                   	pop    ebx
c00197b6:	e9 db fd ff ff       	jmp    c0019596 <KiFlushSymlinkChanges()>
c00197bb:	83 c4 08             	add    esp,0x8
c00197be:	5b                   	pop    ebx
c00197bf:	c3                   	ret    

c00197c0 <KeInitialiseSymlinks()>:
c00197c0:	57                   	push   edi
c00197c1:	56                   	push   esi
c00197c2:	53                   	push   ebx
c00197c3:	81 ec 14 01 00 00    	sub    esp,0x114
c00197c9:	c7 05 00 cf 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003cf00,0x0
c00197d3:	68 00 20 00 00       	push   0x2000
c00197d8:	c7 05 c0 aa 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003aac0,0x0
c00197e2:	6a 00                	push   0x0
c00197e4:	68 00 af 03 c0       	push   0xc003af00
c00197e9:	e8 02 6d fe ff       	call   c00004f0 <memset>
c00197ee:	59                   	pop    ecx
c00197ef:	5b                   	pop    ebx
c00197f0:	ff 35 00 cf 03 c0    	push   DWORD PTR ds:0xc003cf00
c00197f6:	68 a2 17 03 c0       	push   0xc00317a2
c00197fb:	e8 41 f9 ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0019800:	5e                   	pop    esi
c0019801:	5f                   	pop    edi
c0019802:	6a 00                	push   0x0
c0019804:	68 9b 96 01 c0       	push   0xc001969b
c0019809:	e8 e2 5f 00 00       	call   c001f7f0 <KeRegisterAtexit(void (*)(void*), void*)>
c001980e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0019815:	e8 98 ca ff ff       	call   c00162b2 <malloc>
c001981a:	83 c4 0c             	add    esp,0xc
c001981d:	89 c3                	mov    ebx,eax
c001981f:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019825:	68 ff 16 03 c0       	push   0xc00316ff
c001982a:	50                   	push   eax
c001982b:	e8 18 0b 00 00       	call   c001a348 <File::File(char const*, Process*)>
c0019830:	83 c4 10             	add    esp,0x10
c0019833:	85 db                	test   ebx,ebx
c0019835:	75 10                	jne    c0019847 <KeInitialiseSymlinks()+0x87>
c0019837:	83 ec 0c             	sub    esp,0xc
c001983a:	68 bf 17 03 c0       	push   0xc00317bf
c001983f:	e8 07 68 00 00       	call   c002004b <KePanic(char const*)>
c0019844:	83 c4 10             	add    esp,0x10
c0019847:	83 ec 0c             	sub    esp,0xc
c001984a:	53                   	push   ebx
c001984b:	e8 da 0d 00 00       	call   c001a62a <File::exists()>
c0019850:	83 c4 10             	add    esp,0x10
c0019853:	84 c0                	test   al,al
c0019855:	75 3a                	jne    c0019891 <KeInitialiseSymlinks()+0xd1>
c0019857:	52                   	push   edx
c0019858:	52                   	push   edx
c0019859:	6a 12                	push   0x12
c001985b:	53                   	push   ebx
c001985c:	e8 05 0b 00 00       	call   c001a366 <File::open(FileOpenMode)>
c0019861:	83 c4 10             	add    esp,0x10
c0019864:	85 c0                	test   eax,eax
c0019866:	74 10                	je     c0019878 <KeInitialiseSymlinks()+0xb8>
c0019868:	83 ec 0c             	sub    esp,0xc
c001986b:	68 dc 17 03 c0       	push   0xc00317dc
c0019870:	e8 d6 67 00 00       	call   c002004b <KePanic(char const*)>
c0019875:	83 c4 10             	add    esp,0x10
c0019878:	83 ec 0c             	sub    esp,0xc
c001987b:	53                   	push   ebx
c001987c:	e8 43 0b 00 00       	call   c001a3c4 <File::close()>
c0019881:	83 c4 10             	add    esp,0x10
c0019884:	85 db                	test   ebx,ebx
c0019886:	0f 84 9e 00 00 00    	je     c001992a <KeInitialiseSymlinks()+0x16a>
c001988c:	e9 8d 00 00 00       	jmp    c001991e <KeInitialiseSymlinks()+0x15e>
c0019891:	50                   	push   eax
c0019892:	50                   	push   eax
c0019893:	6a 01                	push   0x1
c0019895:	53                   	push   ebx
c0019896:	e8 cb 0a 00 00       	call   c001a366 <File::open(FileOpenMode)>
c001989b:	83 c4 10             	add    esp,0x10
c001989e:	85 c0                	test   eax,eax
c00198a0:	74 10                	je     c00198b2 <KeInitialiseSymlinks()+0xf2>
c00198a2:	83 ec 0c             	sub    esp,0xc
c00198a5:	68 f9 17 03 c0       	push   0xc00317f9
c00198aa:	e8 9c 67 00 00       	call   c002004b <KePanic(char const*)>
c00198af:	83 c4 10             	add    esp,0x10
c00198b2:	83 ec 0c             	sub    esp,0xc
c00198b5:	ff 05 00 cf 03 c0    	inc    DWORD PTR ds:0xc003cf00
c00198bb:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00198bf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00198c1:	57                   	push   edi
c00198c2:	8d 74 24 20          	lea    esi,[esp+0x20]
c00198c6:	56                   	push   esi
c00198c7:	6a 00                	push   0x0
c00198c9:	68 00 01 00 00       	push   0x100
c00198ce:	53                   	push   ebx
c00198cf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00198d2:	83 c4 20             	add    esp,0x20
c00198d5:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c00198dd:	75 33                	jne    c0019912 <KeInitialiseSymlinks()+0x152>
c00198df:	83 ec 0c             	sub    esp,0xc
c00198e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00198e4:	57                   	push   edi
c00198e5:	8d 54 24 18          	lea    edx,[esp+0x18]
c00198e9:	52                   	push   edx
c00198ea:	6a 00                	push   0x0
c00198ec:	6a 08                	push   0x8
c00198ee:	53                   	push   ebx
c00198ef:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00198f2:	83 c4 20             	add    esp,0x20
c00198f5:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c00198fa:	75 16                	jne    c0019912 <KeInitialiseSymlinks()+0x152>
c00198fc:	89 f0                	mov    eax,esi
c00198fe:	e8 9d fd ff ff       	call   c00196a0 <KiGetSymlinkHash(char const*)>
c0019903:	ba 01 00 00 00       	mov    edx,0x1
c0019908:	0f b7 c0             	movzx  eax,ax
c001990b:	e8 56 fc ff ff       	call   c0019566 <KiSetHashInTable(unsigned short, bool)>
c0019910:	eb a0                	jmp    c00198b2 <KeInitialiseSymlinks()+0xf2>
c0019912:	83 ec 0c             	sub    esp,0xc
c0019915:	53                   	push   ebx
c0019916:	e8 a9 0a 00 00       	call   c001a3c4 <File::close()>
c001991b:	83 c4 10             	add    esp,0x10
c001991e:	83 ec 0c             	sub    esp,0xc
c0019921:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019923:	53                   	push   ebx
c0019924:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019927:	83 c4 10             	add    esp,0x10
c001992a:	81 c4 10 01 00 00    	add    esp,0x110
c0019930:	5b                   	pop    ebx
c0019931:	5e                   	pop    esi
c0019932:	5f                   	pop    edi
c0019933:	c3                   	ret    

c0019934 <KiIsSymlinkRegistered(char const*)>:
c0019934:	55                   	push   ebp
c0019935:	57                   	push   edi
c0019936:	56                   	push   esi
c0019937:	53                   	push   ebx
c0019938:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001993e:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c0019945:	89 f0                	mov    eax,esi
c0019947:	e8 54 fd ff ff       	call   c00196a0 <KiGetSymlinkHash(char const*)>
c001994c:	0f b7 c0             	movzx  eax,ax
c001994f:	53                   	push   ebx
c0019950:	56                   	push   esi
c0019951:	50                   	push   eax
c0019952:	68 14 18 03 c0       	push   0xc0031814
c0019957:	e8 e5 f7 ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c001995c:	89 f0                	mov    eax,esi
c001995e:	e8 3d fd ff ff       	call   c00196a0 <KiGetSymlinkHash(char const*)>
c0019963:	0f b7 c0             	movzx  eax,ax
c0019966:	e8 e1 fb ff ff       	call   c001954c <KiIsHashInTable(unsigned short)>
c001996b:	83 c4 10             	add    esp,0x10
c001996e:	88 c1                	mov    cl,al
c0019970:	31 d2                	xor    edx,edx
c0019972:	31 c0                	xor    eax,eax
c0019974:	84 c9                	test   cl,cl
c0019976:	0f 84 31 01 00 00    	je     c0019aad <KiIsSymlinkRegistered(char const*)+0x179>
c001997c:	31 db                	xor    ebx,ebx
c001997e:	39 1d c0 aa 03 c0    	cmp    DWORD PTR ds:0xc003aac0,ebx
c0019984:	7e 30                	jle    c00199b6 <KiIsSymlinkRegistered(char const*)+0x82>
c0019986:	89 d8                	mov    eax,ebx
c0019988:	51                   	push   ecx
c0019989:	c1 e0 08             	shl    eax,0x8
c001998c:	51                   	push   ecx
c001998d:	05 00 ab 03 c0       	add    eax,0xc003ab00
c0019992:	50                   	push   eax
c0019993:	56                   	push   esi
c0019994:	e8 b7 6d fe ff       	call   c0000750 <strcmp>
c0019999:	83 c4 10             	add    esp,0x10
c001999c:	85 c0                	test   eax,eax
c001999e:	75 13                	jne    c00199b3 <KiIsSymlinkRegistered(char const*)+0x7f>
c00199a0:	8b 04 dd e0 aa 03 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffc5520]
c00199a7:	8b 14 dd e4 aa 03 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffc551c]
c00199ae:	e9 fa 00 00 00       	jmp    c0019aad <KiIsSymlinkRegistered(char const*)+0x179>
c00199b3:	43                   	inc    ebx
c00199b4:	eb c8                	jmp    c001997e <KiIsSymlinkRegistered(char const*)+0x4a>
c00199b6:	83 ec 0c             	sub    esp,0xc
c00199b9:	68 14 01 00 00       	push   0x114
c00199be:	e8 ef c8 ff ff       	call   c00162b2 <malloc>
c00199c3:	83 c4 0c             	add    esp,0xc
c00199c6:	89 c3                	mov    ebx,eax
c00199c8:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c00199ce:	68 ff 16 03 c0       	push   0xc00316ff
c00199d3:	50                   	push   eax
c00199d4:	e8 6f 09 00 00       	call   c001a348 <File::File(char const*, Process*)>
c00199d9:	83 c4 10             	add    esp,0x10
c00199dc:	85 db                	test   ebx,ebx
c00199de:	75 12                	jne    c00199f2 <KiIsSymlinkRegistered(char const*)+0xbe>
c00199e0:	83 ec 0c             	sub    esp,0xc
c00199e3:	68 29 18 03 c0       	push   0xc0031829
c00199e8:	e8 5e 66 00 00       	call   c002004b <KePanic(char const*)>
c00199ed:	83 c4 10             	add    esp,0x10
c00199f0:	eb 10                	jmp    c0019a02 <KiIsSymlinkRegistered(char const*)+0xce>
c00199f2:	83 ec 0c             	sub    esp,0xc
c00199f5:	53                   	push   ebx
c00199f6:	e8 2f 0c 00 00       	call   c001a62a <File::exists()>
c00199fb:	83 c4 10             	add    esp,0x10
c00199fe:	84 c0                	test   al,al
c0019a00:	74 de                	je     c00199e0 <KiIsSymlinkRegistered(char const*)+0xac>
c0019a02:	52                   	push   edx
c0019a03:	52                   	push   edx
c0019a04:	6a 01                	push   0x1
c0019a06:	53                   	push   ebx
c0019a07:	e8 5a 09 00 00       	call   c001a366 <File::open(FileOpenMode)>
c0019a0c:	83 c4 10             	add    esp,0x10
c0019a0f:	85 c0                	test   eax,eax
c0019a11:	74 10                	je     c0019a23 <KiIsSymlinkRegistered(char const*)+0xef>
c0019a13:	83 ec 0c             	sub    esp,0xc
c0019a16:	68 44 18 03 c0       	push   0xc0031844
c0019a1b:	e8 2b 66 00 00       	call   c002004b <KePanic(char const*)>
c0019a20:	83 c4 10             	add    esp,0x10
c0019a23:	83 ec 0c             	sub    esp,0xc
c0019a26:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a28:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0019a2c:	55                   	push   ebp
c0019a2d:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0019a31:	57                   	push   edi
c0019a32:	6a 00                	push   0x0
c0019a34:	68 00 01 00 00       	push   0x100
c0019a39:	53                   	push   ebx
c0019a3a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019a3d:	83 c4 20             	add    esp,0x20
c0019a40:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0019a48:	75 4b                	jne    c0019a95 <KiIsSymlinkRegistered(char const*)+0x161>
c0019a4a:	83 ec 0c             	sub    esp,0xc
c0019a4d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a4f:	55                   	push   ebp
c0019a50:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019a54:	52                   	push   edx
c0019a55:	6a 00                	push   0x0
c0019a57:	6a 08                	push   0x8
c0019a59:	53                   	push   ebx
c0019a5a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019a5d:	83 c4 20             	add    esp,0x20
c0019a60:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019a65:	75 2e                	jne    c0019a95 <KiIsSymlinkRegistered(char const*)+0x161>
c0019a67:	50                   	push   eax
c0019a68:	50                   	push   eax
c0019a69:	57                   	push   edi
c0019a6a:	56                   	push   esi
c0019a6b:	e8 e0 6c fe ff       	call   c0000750 <strcmp>
c0019a70:	83 c4 10             	add    esp,0x10
c0019a73:	85 c0                	test   eax,eax
c0019a75:	75 ac                	jne    c0019a23 <KiIsSymlinkRegistered(char const*)+0xef>
c0019a77:	83 ec 0c             	sub    esp,0xc
c0019a7a:	53                   	push   ebx
c0019a7b:	e8 44 09 00 00       	call   c001a3c4 <File::close()>
c0019a80:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a82:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a85:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019a88:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019a8c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019a90:	83 c4 10             	add    esp,0x10
c0019a93:	eb 18                	jmp    c0019aad <KiIsSymlinkRegistered(char const*)+0x179>
c0019a95:	83 ec 0c             	sub    esp,0xc
c0019a98:	53                   	push   ebx
c0019a99:	e8 26 09 00 00       	call   c001a3c4 <File::close()>
c0019a9e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019aa0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019aa3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019aa6:	83 c4 10             	add    esp,0x10
c0019aa9:	31 c0                	xor    eax,eax
c0019aab:	31 d2                	xor    edx,edx
c0019aad:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019ab3:	5b                   	pop    ebx
c0019ab4:	5e                   	pop    esi
c0019ab5:	5f                   	pop    edi
c0019ab6:	5d                   	pop    ebp
c0019ab7:	c3                   	ret    

c0019ab8 <KeDereferenceSymlink(char const*, char*)>:
c0019ab8:	55                   	push   ebp
c0019ab9:	57                   	push   edi
c0019aba:	56                   	push   esi
c0019abb:	53                   	push   ebx
c0019abc:	83 ec 48             	sub    esp,0x48
c0019abf:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0019ac3:	56                   	push   esi
c0019ac4:	e8 6b fe ff ff       	call   c0019934 <KiIsSymlinkRegistered(char const*)>
c0019ac9:	83 c4 10             	add    esp,0x10
c0019acc:	89 c7                	mov    edi,eax
c0019ace:	89 d0                	mov    eax,edx
c0019ad0:	09 f8                	or     eax,edi
c0019ad2:	75 07                	jne    c0019adb <KeDereferenceSymlink(char const*, char*)+0x23>
c0019ad4:	31 c0                	xor    eax,eax
c0019ad6:	e9 7c 01 00 00       	jmp    c0019c57 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0019adb:	83 ec 0c             	sub    esp,0xc
c0019ade:	89 d5                	mov    ebp,edx
c0019ae0:	68 14 01 00 00       	push   0x114
c0019ae5:	e8 c8 c7 ff ff       	call   c00162b2 <malloc>
c0019aea:	83 c4 0c             	add    esp,0xc
c0019aed:	89 c3                	mov    ebx,eax
c0019aef:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019af5:	56                   	push   esi
c0019af6:	50                   	push   eax
c0019af7:	e8 4c 08 00 00       	call   c001a348 <File::File(char const*, Process*)>
c0019afc:	83 c4 10             	add    esp,0x10
c0019aff:	85 db                	test   ebx,ebx
c0019b01:	0f 84 32 01 00 00    	je     c0019c39 <KeDereferenceSymlink(char const*, char*)+0x181>
c0019b07:	56                   	push   esi
c0019b08:	56                   	push   esi
c0019b09:	6a 01                	push   0x1
c0019b0b:	53                   	push   ebx
c0019b0c:	e8 55 08 00 00       	call   c001a366 <File::open(FileOpenMode)>
c0019b11:	83 c4 10             	add    esp,0x10
c0019b14:	85 c0                	test   eax,eax
c0019b16:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b18:	74 09                	je     c0019b23 <KeDereferenceSymlink(char const*, char*)+0x6b>
c0019b1a:	83 ec 0c             	sub    esp,0xc
c0019b1d:	53                   	push   ebx
c0019b1e:	e9 10 01 00 00       	jmp    c0019c33 <KeDereferenceSymlink(char const*, char*)+0x17b>
c0019b23:	83 ec 0c             	sub    esp,0xc
c0019b26:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019b2a:	56                   	push   esi
c0019b2b:	8d 54 24 37          	lea    edx,[esp+0x37]
c0019b2f:	52                   	push   edx
c0019b30:	6a 00                	push   0x0
c0019b32:	6a 08                	push   0x8
c0019b34:	53                   	push   ebx
c0019b35:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019b38:	83 c4 20             	add    esp,0x20
c0019b3b:	85 c0                	test   eax,eax
c0019b3d:	0f 85 e2 00 00 00    	jne    c0019c25 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019b43:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0019b48:	0f 85 d7 00 00 00    	jne    c0019c25 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019b4e:	83 ec 0c             	sub    esp,0xc
c0019b51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b53:	56                   	push   esi
c0019b54:	8d 54 24 20          	lea    edx,[esp+0x20]
c0019b58:	52                   	push   edx
c0019b59:	6a 00                	push   0x0
c0019b5b:	6a 08                	push   0x8
c0019b5d:	53                   	push   ebx
c0019b5e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019b61:	83 c4 20             	add    esp,0x20
c0019b64:	85 c0                	test   eax,eax
c0019b66:	0f 85 b9 00 00 00    	jne    c0019c25 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019b6c:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0019b71:	0f 85 ae 00 00 00    	jne    c0019c25 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019b77:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c0019b7b:	0f 85 53 ff ff ff    	jne    c0019ad4 <KeDereferenceSymlink(char const*, char*)+0x1c>
c0019b81:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c0019b85:	0f 85 49 ff ff ff    	jne    c0019ad4 <KeDereferenceSymlink(char const*, char*)+0x1c>
c0019b8b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0019b93:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019b9b:	51                   	push   ecx
c0019b9c:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0019ba0:	50                   	push   eax
c0019ba1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019ba5:	50                   	push   eax
c0019ba6:	53                   	push   ebx
c0019ba7:	e8 bc 0a 00 00       	call   c001a668 <File::stat(unsigned long long*, bool*)>
c0019bac:	83 c4 10             	add    esp,0x10
c0019baf:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0019bb4:	75 6f                	jne    c0019c25 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019bb6:	31 c9                	xor    ecx,ecx
c0019bb8:	bf 0f 00 00 00       	mov    edi,0xf
c0019bbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019bc1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019bc5:	39 c7                	cmp    edi,eax
c0019bc7:	89 cf                	mov    edi,ecx
c0019bc9:	19 d7                	sbb    edi,edx
c0019bcb:	73 58                	jae    c0019c25 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019bcd:	83 c0 f0             	add    eax,0xfffffff0
c0019bd0:	bf ff 00 00 00       	mov    edi,0xff
c0019bd5:	83 d2 ff             	adc    edx,0xffffffff
c0019bd8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019bdc:	39 c7                	cmp    edi,eax
c0019bde:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019be2:	19 d1                	sbb    ecx,edx
c0019be4:	72 53                	jb     c0019c39 <KeDereferenceSymlink(char const*, char*)+0x181>
c0019be6:	40                   	inc    eax
c0019be7:	52                   	push   edx
c0019be8:	50                   	push   eax
c0019be9:	6a 00                	push   0x0
c0019beb:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0019bef:	e8 fc 68 fe ff       	call   c00004f0 <memset>
c0019bf4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019bf6:	89 34 24             	mov    DWORD PTR [esp],esi
c0019bf9:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0019bfd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019c01:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019c05:	53                   	push   ebx
c0019c06:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019c09:	83 c4 20             	add    esp,0x20
c0019c0c:	85 c0                	test   eax,eax
c0019c0e:	75 15                	jne    c0019c25 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019c10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019c14:	89 c7                	mov    edi,eax
c0019c16:	c1 ff 1f             	sar    edi,0x1f
c0019c19:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0019c1d:	75 06                	jne    c0019c25 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019c1f:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0019c23:	74 19                	je     c0019c3e <KeDereferenceSymlink(char const*, char*)+0x186>
c0019c25:	83 ec 0c             	sub    esp,0xc
c0019c28:	53                   	push   ebx
c0019c29:	e8 96 07 00 00       	call   c001a3c4 <File::close()>
c0019c2e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c30:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c33:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019c36:	83 c4 10             	add    esp,0x10
c0019c39:	83 c8 ff             	or     eax,0xffffffff
c0019c3c:	eb 19                	jmp    c0019c57 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0019c3e:	83 ec 0c             	sub    esp,0xc
c0019c41:	53                   	push   ebx
c0019c42:	e8 7d 07 00 00       	call   c001a3c4 <File::close()>
c0019c47:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c49:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c4c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019c4f:	83 c4 10             	add    esp,0x10
c0019c52:	b8 01 00 00 00       	mov    eax,0x1
c0019c57:	83 c4 3c             	add    esp,0x3c
c0019c5a:	5b                   	pop    ebx
c0019c5b:	5e                   	pop    esi
c0019c5c:	5f                   	pop    edi
c0019c5d:	5d                   	pop    ebp
c0019c5e:	c3                   	ret    

c0019c5f <KeCreateSymlink(char const*, char const*)>:
c0019c5f:	55                   	push   ebp
c0019c60:	57                   	push   edi
c0019c61:	56                   	push   esi
c0019c62:	53                   	push   ebx
c0019c63:	83 ec 38             	sub    esp,0x38
c0019c66:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0019c6a:	68 14 01 00 00       	push   0x114
c0019c6f:	e8 3e c6 ff ff       	call   c00162b2 <malloc>
c0019c74:	6a 00                	push   0x0
c0019c76:	89 c3                	mov    ebx,eax
c0019c78:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019c7e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0019c82:	50                   	push   eax
c0019c83:	e8 e2 05 00 00       	call   c001a26a <File::File(char const*, Process*, bool)>
c0019c88:	83 c4 20             	add    esp,0x20
c0019c8b:	b8 01 00 00 00       	mov    eax,0x1
c0019c90:	85 db                	test   ebx,ebx
c0019c92:	0f 84 19 01 00 00    	je     c0019db1 <KeCreateSymlink(char const*, char const*)+0x152>
c0019c98:	52                   	push   edx
c0019c99:	52                   	push   edx
c0019c9a:	6a 12                	push   0x12
c0019c9c:	53                   	push   ebx
c0019c9d:	e8 c4 06 00 00       	call   c001a366 <File::open(FileOpenMode)>
c0019ca2:	83 c4 10             	add    esp,0x10
c0019ca5:	85 c0                	test   eax,eax
c0019ca7:	74 0b                	je     c0019cb4 <KeCreateSymlink(char const*, char const*)+0x55>
c0019ca9:	83 ec 0c             	sub    esp,0xc
c0019cac:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019cae:	53                   	push   ebx
c0019caf:	e9 f2 00 00 00       	jmp    c0019da6 <KeCreateSymlink(char const*, char const*)+0x147>
c0019cb4:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0019cb8:	be 91 18 03 c0       	mov    esi,0xc0031891
c0019cbd:	b9 09 00 00 00       	mov    ecx,0x9
c0019cc2:	fc                   	cld    
c0019cc3:	83 ec 0c             	sub    esp,0xc
c0019cc6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019cc8:	8d 74 24 10          	lea    esi,[esp+0x10]
c0019ccc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019cce:	56                   	push   esi
c0019ccf:	8d 54 24 27          	lea    edx,[esp+0x27]
c0019cd3:	52                   	push   edx
c0019cd4:	6a 00                	push   0x0
c0019cd6:	6a 08                	push   0x8
c0019cd8:	53                   	push   ebx
c0019cd9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0019cdc:	83 c4 20             	add    esp,0x20
c0019cdf:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019ce4:	0f 85 ae 00 00 00    	jne    c0019d98 <KeCreateSymlink(char const*, char const*)+0x139>
c0019cea:	85 c0                	test   eax,eax
c0019cec:	0f 85 a6 00 00 00    	jne    c0019d98 <KeCreateSymlink(char const*, char const*)+0x139>
c0019cf2:	e8 ca f9 ff ff       	call   c00196c1 <KiCreateSymlinkID()>
c0019cf7:	83 ec 0c             	sub    esp,0xc
c0019cfa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019cfe:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0019d02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d04:	56                   	push   esi
c0019d05:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019d09:	52                   	push   edx
c0019d0a:	6a 00                	push   0x0
c0019d0c:	6a 08                	push   0x8
c0019d0e:	53                   	push   ebx
c0019d0f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0019d12:	83 c4 20             	add    esp,0x20
c0019d15:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019d1a:	75 7c                	jne    c0019d98 <KeCreateSymlink(char const*, char const*)+0x139>
c0019d1c:	85 c0                	test   eax,eax
c0019d1e:	75 78                	jne    c0019d98 <KeCreateSymlink(char const*, char const*)+0x139>
c0019d20:	83 ec 0c             	sub    esp,0xc
c0019d23:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d25:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0019d28:	55                   	push   ebp
c0019d29:	e8 42 68 fe ff       	call   c0000570 <strlen>
c0019d2e:	89 34 24             	mov    DWORD PTR [esp],esi
c0019d31:	31 d2                	xor    edx,edx
c0019d33:	55                   	push   ebp
c0019d34:	52                   	push   edx
c0019d35:	50                   	push   eax
c0019d36:	53                   	push   ebx
c0019d37:	ff d7                	call   edi
c0019d39:	83 c4 14             	add    esp,0x14
c0019d3c:	89 c6                	mov    esi,eax
c0019d3e:	55                   	push   ebp
c0019d3f:	e8 2c 68 fe ff       	call   c0000570 <strlen>
c0019d44:	83 c4 10             	add    esp,0x10
c0019d47:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0019d4b:	75 4b                	jne    c0019d98 <KeCreateSymlink(char const*, char const*)+0x139>
c0019d4d:	85 f6                	test   esi,esi
c0019d4f:	75 47                	jne    c0019d98 <KeCreateSymlink(char const*, char const*)+0x139>
c0019d51:	50                   	push   eax
c0019d52:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019d56:	55                   	push   ebp
c0019d57:	68 5f 18 03 c0       	push   0xc003185f
c0019d5c:	e8 e0 f3 ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0019d61:	83 c4 0c             	add    esp,0xc
c0019d64:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019d68:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019d6c:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0019d70:	e8 b9 f9 ff ff       	call   c001972e <KeRegisterSymlink(char const*, unsigned long long)>
c0019d75:	c7 04 24 84 18 03 c0 	mov    DWORD PTR [esp],0xc0031884
c0019d7c:	e8 c0 f3 ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0019d81:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d84:	e8 3b 06 00 00       	call   c001a3c4 <File::close()>
c0019d89:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d8b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d8e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019d91:	83 c4 10             	add    esp,0x10
c0019d94:	31 c0                	xor    eax,eax
c0019d96:	eb 19                	jmp    c0019db1 <KeCreateSymlink(char const*, char const*)+0x152>
c0019d98:	83 ec 0c             	sub    esp,0xc
c0019d9b:	53                   	push   ebx
c0019d9c:	e8 23 06 00 00       	call   c001a3c4 <File::close()>
c0019da1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019da3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019da6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019da9:	83 c4 10             	add    esp,0x10
c0019dac:	b8 01 00 00 00       	mov    eax,0x1
c0019db1:	83 c4 2c             	add    esp,0x2c
c0019db4:	5b                   	pop    ebx
c0019db5:	5e                   	pop    esi
c0019db6:	5f                   	pop    edi
c0019db7:	5d                   	pop    ebp
c0019db8:	c3                   	ret    
c0019db9:	90                   	nop

c0019dba <File::read(unsigned long long, void*, int*)>:
c0019dba:	53                   	push   ebx
c0019dbb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019dbf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0019dc3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0019dca:	83 f8 19             	cmp    eax,0x19
c0019dcd:	77 35                	ja     c0019e04 <File::read(unsigned long long, void*, int*)+0x4a>
c0019dcf:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0019dd6:	85 c0                	test   eax,eax
c0019dd8:	74 2a                	je     c0019e04 <File::read(unsigned long long, void*, int*)+0x4a>
c0019dda:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0019de0:	85 c0                	test   eax,eax
c0019de2:	74 20                	je     c0019e04 <File::read(unsigned long long, void*, int*)+0x4a>
c0019de4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0019de8:	74 21                	je     c0019e0b <File::read(unsigned long long, void*, int*)+0x51>
c0019dea:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019dec:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0019df0:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0019df6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019dfa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019dfe:	5b                   	pop    ebx
c0019dff:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0019e02:	ff e0                	jmp    eax
c0019e04:	b8 0b 00 00 00       	mov    eax,0xb
c0019e09:	eb 05                	jmp    c0019e10 <File::read(unsigned long long, void*, int*)+0x56>
c0019e0b:	b8 05 00 00 00       	mov    eax,0x5
c0019e10:	5b                   	pop    ebx
c0019e11:	c3                   	ret    

c0019e12 <File::write(unsigned long long, void*, int*)>:
c0019e12:	53                   	push   ebx
c0019e13:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019e17:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0019e1b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0019e22:	83 f8 19             	cmp    eax,0x19
c0019e25:	77 35                	ja     c0019e5c <File::write(unsigned long long, void*, int*)+0x4a>
c0019e27:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0019e2e:	85 c0                	test   eax,eax
c0019e30:	74 2a                	je     c0019e5c <File::write(unsigned long long, void*, int*)+0x4a>
c0019e32:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0019e38:	85 c0                	test   eax,eax
c0019e3a:	74 20                	je     c0019e5c <File::write(unsigned long long, void*, int*)+0x4a>
c0019e3c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0019e40:	74 21                	je     c0019e63 <File::write(unsigned long long, void*, int*)+0x51>
c0019e42:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019e44:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0019e48:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0019e4e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019e52:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019e56:	5b                   	pop    ebx
c0019e57:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0019e5a:	ff e0                	jmp    eax
c0019e5c:	b8 0b 00 00 00       	mov    eax,0xb
c0019e61:	eb 05                	jmp    c0019e68 <File::write(unsigned long long, void*, int*)+0x56>
c0019e63:	b8 05 00 00 00       	mov    eax,0x5
c0019e68:	5b                   	pop    ebx
c0019e69:	c3                   	ret    

c0019e6a <Directory::read(unsigned long long, void*, int*)>:
c0019e6a:	53                   	push   ebx
c0019e6b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019e6f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0019e73:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0019e7a:	83 f8 19             	cmp    eax,0x19
c0019e7d:	77 35                	ja     c0019eb4 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0019e7f:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0019e86:	85 c0                	test   eax,eax
c0019e88:	74 2a                	je     c0019eb4 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0019e8a:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0019e90:	85 c0                	test   eax,eax
c0019e92:	74 20                	je     c0019eb4 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0019e94:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0019e98:	74 21                	je     c0019ebb <Directory::read(unsigned long long, void*, int*)+0x51>
c0019e9a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019e9c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0019ea0:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0019ea6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019eaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019eae:	5b                   	pop    ebx
c0019eaf:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0019eb2:	ff e0                	jmp    eax
c0019eb4:	b8 0b 00 00 00       	mov    eax,0xb
c0019eb9:	eb 05                	jmp    c0019ec0 <Directory::read(unsigned long long, void*, int*)+0x56>
c0019ebb:	b8 05 00 00 00       	mov    eax,0x5
c0019ec0:	5b                   	pop    ebx
c0019ec1:	c3                   	ret    

c0019ec2 <Directory::write(unsigned long long, void*, int*)>:
c0019ec2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ec6:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0019ecd:	b8 0b 00 00 00       	mov    eax,0xb
c0019ed2:	83 fa 19             	cmp    edx,0x19
c0019ed5:	77 18                	ja     c0019eef <Directory::write(unsigned long long, void*, int*)+0x2d>
c0019ed7:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c0019ede:	85 d2                	test   edx,edx
c0019ee0:	74 0d                	je     c0019eef <Directory::write(unsigned long long, void*, int*)+0x2d>
c0019ee2:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0019ee9:	19 c0                	sbb    eax,eax
c0019eeb:	83 e0 0a             	and    eax,0xa
c0019eee:	40                   	inc    eax
c0019eef:	c3                   	ret    

c0019ef0 <File::isAtty()>:
c0019ef0:	31 c0                	xor    eax,eax
c0019ef2:	c3                   	ret    
c0019ef3:	90                   	nop

c0019ef4 <Directory::isAtty()>:
c0019ef4:	31 c0                	xor    eax,eax
c0019ef6:	c3                   	ret    
c0019ef7:	90                   	nop

c0019ef8 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0019ef8:	b8 0a 00 00 00       	mov    eax,0xa
c0019efd:	c3                   	ret    

c0019efe <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0019efe:	b8 0a 00 00 00       	mov    eax,0xa
c0019f03:	c3                   	ret    

c0019f04 <Filesystem::allocateSwapfile(char const*, int)>:
c0019f04:	31 c0                	xor    eax,eax
c0019f06:	31 d2                	xor    edx,edx
c0019f08:	c3                   	ret    
c0019f09:	90                   	nop

c0019f0a <File::~File()>:
c0019f0a:	83 ec 0c             	sub    esp,0xc
c0019f0d:	ba 50 19 03 c0       	mov    edx,0xc0031950
c0019f12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f16:	89 10                	mov    DWORD PTR [eax],edx
c0019f18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f1c:	83 ec 0c             	sub    esp,0xc
c0019f1f:	50                   	push   eax
c0019f20:	e8 7b dc ff ff       	call   c0017ba0 <UnixFile::~UnixFile()>
c0019f25:	83 c4 10             	add    esp,0x10
c0019f28:	90                   	nop
c0019f29:	83 c4 0c             	add    esp,0xc
c0019f2c:	c3                   	ret    
c0019f2d:	90                   	nop

c0019f2e <File::~File()>:
c0019f2e:	83 ec 0c             	sub    esp,0xc
c0019f31:	83 ec 0c             	sub    esp,0xc
c0019f34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f38:	e8 cd ff ff ff       	call   c0019f0a <File::~File()>
c0019f3d:	83 c4 10             	add    esp,0x10
c0019f40:	83 ec 08             	sub    esp,0x8
c0019f43:	68 14 01 00 00       	push   0x114
c0019f48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f4c:	e8 c3 f0 ff ff       	call   c0019014 <operator delete(void*, unsigned long)>
c0019f51:	83 c4 10             	add    esp,0x10
c0019f54:	83 c4 0c             	add    esp,0xc
c0019f57:	c3                   	ret    

c0019f58 <Directory::~Directory()>:
c0019f58:	83 ec 0c             	sub    esp,0xc
c0019f5b:	ba 6c 19 03 c0       	mov    edx,0xc003196c
c0019f60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f64:	89 10                	mov    DWORD PTR [eax],edx
c0019f66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f6a:	83 ec 0c             	sub    esp,0xc
c0019f6d:	50                   	push   eax
c0019f6e:	e8 2d dc ff ff       	call   c0017ba0 <UnixFile::~UnixFile()>
c0019f73:	83 c4 10             	add    esp,0x10
c0019f76:	90                   	nop
c0019f77:	83 c4 0c             	add    esp,0xc
c0019f7a:	c3                   	ret    
c0019f7b:	90                   	nop

c0019f7c <Directory::~Directory()>:
c0019f7c:	83 ec 0c             	sub    esp,0xc
c0019f7f:	83 ec 0c             	sub    esp,0xc
c0019f82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f86:	e8 cd ff ff ff       	call   c0019f58 <Directory::~Directory()>
c0019f8b:	83 c4 10             	add    esp,0x10
c0019f8e:	83 ec 08             	sub    esp,0x8
c0019f91:	68 14 01 00 00       	push   0x114
c0019f96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f9a:	e8 75 f0 ff ff       	call   c0019014 <operator delete(void*, unsigned long)>
c0019f9f:	83 c4 10             	add    esp,0x10
c0019fa2:	83 c4 0c             	add    esp,0xc
c0019fa5:	c3                   	ret    

c0019fa6 <Filesystem::Filesystem()>:
c0019fa6:	ba e4 18 03 c0       	mov    edx,0xc00318e4
c0019fab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019faf:	89 10                	mov    DWORD PTR [eax],edx
c0019fb1:	8b 15 04 cf 03 c0    	mov    edx,DWORD PTR ds:0xc003cf04
c0019fb7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019fbb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0019fbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019fc2:	a3 04 cf 03 c0       	mov    ds:0xc003cf04,eax
c0019fc7:	90                   	nop
c0019fc8:	c3                   	ret    
c0019fc9:	90                   	nop

c0019fca <Filesystem::~Filesystem()>:
c0019fca:	ba e4 18 03 c0       	mov    edx,0xc00318e4
c0019fcf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019fd3:	89 10                	mov    DWORD PTR [eax],edx
c0019fd5:	90                   	nop
c0019fd6:	c3                   	ret    
c0019fd7:	90                   	nop

c0019fd8 <Filesystem::~Filesystem()>:
c0019fd8:	83 ec 0c             	sub    esp,0xc
c0019fdb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019fdf:	e8 e6 ff ff ff       	call   c0019fca <Filesystem::~Filesystem()>
c0019fe4:	83 c4 04             	add    esp,0x4
c0019fe7:	83 ec 08             	sub    esp,0x8
c0019fea:	6a 08                	push   0x8
c0019fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ff0:	e8 1f f0 ff ff       	call   c0019014 <operator delete(void*, unsigned long)>
c0019ff5:	83 c4 10             	add    esp,0x10
c0019ff8:	83 c4 0c             	add    esp,0xc
c0019ffb:	c3                   	ret    

c0019ffc <Fs::getcwd(Process*, char*, int)>:
c0019ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a000:	31 c0                	xor    eax,eax
c001a002:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001a005:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001a009:	7d 15                	jge    c001a020 <Fs::getcwd(Process*, char*, int)+0x24>
c001a00b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001a00f:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c001a016:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001a019:	84 c9                	test   cl,cl
c001a01b:	74 06                	je     c001a023 <Fs::getcwd(Process*, char*, int)+0x27>
c001a01d:	40                   	inc    eax
c001a01e:	eb e2                	jmp    c001a002 <Fs::getcwd(Process*, char*, int)+0x6>
c001a020:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001a023:	31 c0                	xor    eax,eax
c001a025:	c3                   	ret    

c001a026 <Fs::initVFS()>:
c001a026:	83 ec 18             	sub    esp,0x18
c001a029:	6a 08                	push   0x8
c001a02b:	e8 82 c2 ff ff       	call   c00162b2 <malloc>
c001a030:	89 04 24             	mov    DWORD PTR [esp],eax
c001a033:	e8 cc e6 00 00       	call   c0028704 <FAT::FAT()>
c001a038:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001a03f:	e8 6e c2 ff ff       	call   c00162b2 <malloc>
c001a044:	89 04 24             	mov    DWORD PTR [esp],eax
c001a047:	e8 e4 f5 00 00       	call   c0029630 <ISO9660::ISO9660()>
c001a04c:	83 c4 1c             	add    esp,0x1c
c001a04f:	c3                   	ret    

c001a050 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c001a050:	55                   	push   ebp
c001a051:	57                   	push   edi
c001a052:	56                   	push   esi
c001a053:	53                   	push   ebx
c001a054:	81 ec 10 04 00 00    	sub    esp,0x410
c001a05a:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c001a061:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c001a068:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c001a070:	68 00 04 00 00       	push   0x400
c001a075:	6a 00                	push   0x0
c001a077:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001a07b:	57                   	push   edi
c001a07c:	e8 6f 64 fe ff       	call   c00004f0 <memset>
c001a081:	83 c4 10             	add    esp,0x10
c001a084:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c001a088:	75 0b                	jne    c001a095 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c001a08a:	50                   	push   eax
c001a08b:	50                   	push   eax
c001a08c:	55                   	push   ebp
c001a08d:	57                   	push   edi
c001a08e:	e8 ad 65 fe ff       	call   c0000640 <strcpy>
c001a093:	eb 51                	jmp    c001a0e6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c001a095:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c001a099:	83 f8 5c             	cmp    eax,0x5c
c001a09c:	74 05                	je     c001a0a3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c001a09e:	83 f8 2f             	cmp    eax,0x2f
c001a0a1:	75 1e                	jne    c001a0c1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c001a0a3:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001a0aa:	8a 00                	mov    al,BYTE PTR [eax]
c001a0ac:	3c 60                	cmp    al,0x60
c001a0ae:	7e 03                	jle    c001a0b3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c001a0b0:	83 e8 20             	sub    eax,0x20
c001a0b3:	88 04 24             	mov    BYTE PTR [esp],al
c001a0b6:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001a0bd:	50                   	push   eax
c001a0be:	50                   	push   eax
c001a0bf:	eb 1e                	jmp    c001a0df <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c001a0c1:	50                   	push   eax
c001a0c2:	50                   	push   eax
c001a0c3:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c001a0ca:	57                   	push   edi
c001a0cb:	e8 70 65 fe ff       	call   c0000640 <strcpy>
c001a0d0:	58                   	pop    eax
c001a0d1:	5a                   	pop    edx
c001a0d2:	68 a5 29 03 c0       	push   0xc00329a5
c001a0d7:	57                   	push   edi
c001a0d8:	e8 63 67 fe ff       	call   c0000840 <strcat>
c001a0dd:	59                   	pop    ecx
c001a0de:	58                   	pop    eax
c001a0df:	55                   	push   ebp
c001a0e0:	57                   	push   edi
c001a0e1:	e8 5a 67 fe ff       	call   c0000840 <strcat>
c001a0e6:	83 c4 10             	add    esp,0x10
c001a0e9:	8a 04 24             	mov    al,BYTE PTR [esp]
c001a0ec:	3c 60                	cmp    al,0x60
c001a0ee:	7e 03                	jle    c001a0f3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c001a0f0:	83 e8 20             	sub    eax,0x20
c001a0f3:	88 04 24             	mov    BYTE PTR [esp],al
c001a0f6:	88 06                	mov    BYTE PTR [esi],al
c001a0f8:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001a0ff:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c001a105:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c001a109:	bf 03 00 00 00       	mov    edi,0x3
c001a10e:	b8 03 00 00 00       	mov    eax,0x3
c001a113:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c001a117:	89 e9                	mov    ecx,ebp
c001a119:	85 ed                	test   ebp,ebp
c001a11b:	0f 84 97 00 00 00    	je     c001a1b8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c001a121:	8d 57 01             	lea    edx,[edi+0x1]
c001a124:	83 fd 5c             	cmp    ebp,0x5c
c001a127:	74 05                	je     c001a12e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c001a129:	83 fd 2f             	cmp    ebp,0x2f
c001a12c:	75 12                	jne    c001a140 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a12e:	89 c5                	mov    ebp,eax
c001a130:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c001a135:	74 09                	je     c001a140 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a137:	40                   	inc    eax
c001a138:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c001a13c:	89 d7                	mov    edi,edx
c001a13e:	eb d3                	jmp    c001a113 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c001a140:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c001a145:	0f be e9             	movsx  ebp,cl
c001a148:	75 5e                	jne    c001a1a8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c001a14a:	83 fd 2e             	cmp    ebp,0x2e
c001a14d:	75 59                	jne    c001a1a8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c001a14f:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c001a153:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c001a158:	74 18                	je     c001a172 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c001a15a:	83 fd 2e             	cmp    ebp,0x2e
c001a15d:	74 53                	je     c001a1b2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c001a15f:	89 fa                	mov    edx,edi
c001a161:	42                   	inc    edx
c001a162:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c001a166:	83 f9 2f             	cmp    ecx,0x2f
c001a169:	74 f6                	je     c001a161 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c001a16b:	83 f9 5c             	cmp    ecx,0x5c
c001a16e:	74 f1                	je     c001a161 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c001a170:	eb ca                	jmp    c001a13c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a172:	83 fd 2e             	cmp    ebp,0x2e
c001a175:	74 3b                	je     c001a1b2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c001a177:	83 f8 03             	cmp    eax,0x3
c001a17a:	74 c0                	je     c001a13c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a17c:	42                   	inc    edx
c001a17d:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c001a181:	83 f9 5c             	cmp    ecx,0x5c
c001a184:	74 f6                	je     c001a17c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c001a186:	83 f9 2f             	cmp    ecx,0x2f
c001a189:	74 f1                	je     c001a17c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c001a18b:	48                   	dec    eax
c001a18c:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c001a190:	75 06                	jne    c001a198 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c001a192:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001a196:	eb f3                	jmp    c001a18b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c001a198:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c001a19c:	74 07                	je     c001a1a5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c001a19e:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001a1a2:	48                   	dec    eax
c001a1a3:	eb f3                	jmp    c001a198 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c001a1a5:	40                   	inc    eax
c001a1a6:	eb 94                	jmp    c001a13c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a1a8:	83 fd 5c             	cmp    ebp,0x5c
c001a1ab:	74 8f                	je     c001a13c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a1ad:	83 fd 2f             	cmp    ebp,0x2f
c001a1b0:	74 8a                	je     c001a13c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a1b2:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c001a1b5:	40                   	inc    eax
c001a1b6:	eb 84                	jmp    c001a13c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a1b8:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001a1bc:	83 ec 0c             	sub    esp,0xc
c001a1bf:	56                   	push   esi
c001a1c0:	e8 ab 63 fe ff       	call   c0000570 <strlen>
c001a1c5:	83 c4 10             	add    esp,0x10
c001a1c8:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c001a1cd:	74 17                	je     c001a1e6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c001a1cf:	83 ec 0c             	sub    esp,0xc
c001a1d2:	56                   	push   esi
c001a1d3:	e8 98 63 fe ff       	call   c0000570 <strlen>
c001a1d8:	83 c4 10             	add    esp,0x10
c001a1db:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c001a1e0:	74 04                	je     c001a1e6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c001a1e2:	31 ff                	xor    edi,edi
c001a1e4:	eb 5c                	jmp    c001a242 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c001a1e6:	83 ec 0c             	sub    esp,0xc
c001a1e9:	56                   	push   esi
c001a1ea:	e8 81 63 fe ff       	call   c0000570 <strlen>
c001a1ef:	83 c4 10             	add    esp,0x10
c001a1f2:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c001a1f7:	74 e9                	je     c001a1e2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c001a1f9:	83 ec 0c             	sub    esp,0xc
c001a1fc:	56                   	push   esi
c001a1fd:	e8 6e 63 fe ff       	call   c0000570 <strlen>
c001a202:	83 c4 10             	add    esp,0x10
c001a205:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c001a20a:	eb b0                	jmp    c001a1bc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c001a20c:	52                   	push   edx
c001a20d:	52                   	push   edx
c001a20e:	56                   	push   esi
c001a20f:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c001a213:	55                   	push   ebp
c001a214:	e8 27 64 fe ff       	call   c0000640 <strcpy>
c001a219:	59                   	pop    ecx
c001a21a:	58                   	pop    eax
c001a21b:	56                   	push   esi
c001a21c:	55                   	push   ebp
c001a21d:	e8 96 f8 ff ff       	call   c0019ab8 <KeDereferenceSymlink(char const*, char*)>
c001a222:	83 c4 10             	add    esp,0x10
c001a225:	48                   	dec    eax
c001a226:	75 37                	jne    c001a25f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c001a228:	50                   	push   eax
c001a229:	56                   	push   esi
c001a22a:	55                   	push   ebp
c001a22b:	68 9a 18 03 c0       	push   0xc003189a
c001a230:	e8 0c ef ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c001a235:	83 c4 10             	add    esp,0x10
c001a238:	8d 47 01             	lea    eax,[edi+0x1]
c001a23b:	83 ff 14             	cmp    edi,0x14
c001a23e:	74 08                	je     c001a248 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f8>
c001a240:	89 c7                	mov    edi,eax
c001a242:	85 db                	test   ebx,ebx
c001a244:	75 c6                	jne    c001a20c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c001a246:	eb 17                	jmp    c001a25f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c001a248:	83 ec 0c             	sub    esp,0xc
c001a24b:	bf 15 00 00 00       	mov    edi,0x15
c001a250:	68 b5 18 03 c0       	push   0xc00318b5
c001a255:	e8 f1 5d 00 00       	call   c002004b <KePanic(char const*)>
c001a25a:	83 c4 10             	add    esp,0x10
c001a25d:	eb e3                	jmp    c001a242 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c001a25f:	81 c4 0c 04 00 00    	add    esp,0x40c
c001a265:	5b                   	pop    ebx
c001a266:	5e                   	pop    esi
c001a267:	5f                   	pop    edi
c001a268:	5d                   	pop    ebp
c001a269:	c3                   	ret    

c001a26a <File::File(char const*, Process*, bool)>:
c001a26a:	83 ec 1c             	sub    esp,0x1c
c001a26d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a271:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a275:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a279:	83 ec 08             	sub    esp,0x8
c001a27c:	6a 00                	push   0x0
c001a27e:	50                   	push   eax
c001a27f:	e8 36 d7 ff ff       	call   c00179ba <UnixFile::UnixFile(int)>
c001a284:	83 c4 10             	add    esp,0x10
c001a287:	ba 50 19 03 c0       	mov    edx,0xc0031950
c001a28c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a290:	89 10                	mov    DWORD PTR [eax],edx
c001a292:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a297:	85 c0                	test   eax,eax
c001a299:	74 0f                	je     c001a2aa <File::File(char const*, Process*, bool)+0x40>
c001a29b:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001a2a0:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001a2a4:	74 04                	je     c001a2aa <File::File(char const*, Process*, bool)+0x40>
c001a2a6:	b0 01                	mov    al,0x1
c001a2a8:	eb 02                	jmp    c001a2ac <File::File(char const*, Process*, bool)+0x42>
c001a2aa:	b0 00                	mov    al,0x0
c001a2ac:	0f b6 c0             	movzx  eax,al
c001a2af:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a2b3:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c001a2b9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a2bd:	83 c2 0d             	add    edx,0xd
c001a2c0:	50                   	push   eax
c001a2c1:	51                   	push   ecx
c001a2c2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a2c6:	52                   	push   edx
c001a2c7:	e8 84 fd ff ff       	call   c001a050 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001a2cc:	83 c4 10             	add    esp,0x10
c001a2cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a2d3:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001a2d6:	83 e8 41             	sub    eax,0x41
c001a2d9:	88 c2                	mov    dl,al
c001a2db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a2df:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001a2e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a2e9:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001a2ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a2f1:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a2f7:	0f b6 c0             	movzx  eax,al
c001a2fa:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a301:	85 c0                	test   eax,eax
c001a303:	74 3e                	je     c001a343 <File::File(char const*, Process*, bool)+0xd9>
c001a305:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a309:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a30f:	0f b6 c0             	movzx  eax,al
c001a312:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a319:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a31f:	85 c0                	test   eax,eax
c001a321:	75 20                	jne    c001a343 <File::File(char const*, Process*, bool)+0xd9>
c001a323:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a327:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a32d:	0f b6 c0             	movzx  eax,al
c001a330:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a337:	83 ec 0c             	sub    esp,0xc
c001a33a:	50                   	push   eax
c001a33b:	e8 b2 21 00 00       	call   c001c4f2 <LogicalDisk::mount()>
c001a340:	83 c4 10             	add    esp,0x10
c001a343:	90                   	nop
c001a344:	83 c4 1c             	add    esp,0x1c
c001a347:	c3                   	ret    

c001a348 <File::File(char const*, Process*)>:
c001a348:	83 ec 0c             	sub    esp,0xc
c001a34b:	6a 01                	push   0x1
c001a34d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a359:	e8 0c ff ff ff       	call   c001a26a <File::File(char const*, Process*, bool)>
c001a35e:	83 c4 10             	add    esp,0x10
c001a361:	90                   	nop
c001a362:	83 c4 0c             	add    esp,0xc
c001a365:	c3                   	ret    

c001a366 <File::open(FileOpenMode)>:
c001a366:	53                   	push   ebx
c001a367:	b8 0b 00 00 00       	mov    eax,0xb
c001a36c:	83 ec 08             	sub    esp,0x8
c001a36f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a373:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001a37a:	83 fa 19             	cmp    edx,0x19
c001a37d:	77 40                	ja     c001a3bf <File::open(FileOpenMode)+0x59>
c001a37f:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a386:	85 d2                	test   edx,edx
c001a388:	74 35                	je     c001a3bf <File::open(FileOpenMode)+0x59>
c001a38a:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a390:	85 d2                	test   edx,edx
c001a392:	74 2b                	je     c001a3bf <File::open(FileOpenMode)+0x59>
c001a394:	b8 06 00 00 00       	mov    eax,0x6
c001a399:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001a39d:	75 20                	jne    c001a3bf <File::open(FileOpenMode)+0x59>
c001a39f:	8b 02                	mov    eax,DWORD PTR [edx]
c001a3a1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001a3a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a3ab:	51                   	push   ecx
c001a3ac:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001a3af:	51                   	push   ecx
c001a3b0:	52                   	push   edx
c001a3b1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001a3b4:	83 c4 10             	add    esp,0x10
c001a3b7:	85 c0                	test   eax,eax
c001a3b9:	75 04                	jne    c001a3bf <File::open(FileOpenMode)+0x59>
c001a3bb:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001a3bf:	83 c4 08             	add    esp,0x8
c001a3c2:	5b                   	pop    ebx
c001a3c3:	c3                   	ret    

c001a3c4 <File::close()>:
c001a3c4:	53                   	push   ebx
c001a3c5:	b8 0b 00 00 00       	mov    eax,0xb
c001a3ca:	83 ec 08             	sub    esp,0x8
c001a3cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a3d1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a3d8:	83 f9 19             	cmp    ecx,0x19
c001a3db:	77 41                	ja     c001a41e <File::close()+0x5a>
c001a3dd:	8b 1c 8d 80 f3 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a3e4:	85 db                	test   ebx,ebx
c001a3e6:	74 36                	je     c001a41e <File::close()+0x5a>
c001a3e8:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c001a3ef:	74 2d                	je     c001a41e <File::close()+0x5a>
c001a3f1:	b8 05 00 00 00       	mov    eax,0x5
c001a3f6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a3fa:	74 22                	je     c001a41e <File::close()+0x5a>
c001a3fc:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c001a400:	8b 04 8d 80 f3 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffc0c80]
c001a407:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a40d:	53                   	push   ebx
c001a40e:	53                   	push   ebx
c001a40f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a411:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001a417:	50                   	push   eax
c001a418:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c001a41b:	83 c4 10             	add    esp,0x10
c001a41e:	83 c4 08             	add    esp,0x8
c001a421:	5b                   	pop    ebx
c001a422:	c3                   	ret    
c001a423:	90                   	nop

c001a424 <File::seek(unsigned long long)>:
c001a424:	56                   	push   esi
c001a425:	53                   	push   ebx
c001a426:	b8 0b 00 00 00       	mov    eax,0xb
c001a42b:	51                   	push   ecx
c001a42c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a430:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a434:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001a43b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a43f:	83 fa 19             	cmp    edx,0x19
c001a442:	77 31                	ja     c001a475 <File::seek(unsigned long long)+0x51>
c001a444:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a44b:	85 d2                	test   edx,edx
c001a44d:	74 26                	je     c001a475 <File::seek(unsigned long long)+0x51>
c001a44f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a455:	85 d2                	test   edx,edx
c001a457:	74 1c                	je     c001a475 <File::seek(unsigned long long)+0x51>
c001a459:	b8 05 00 00 00       	mov    eax,0x5
c001a45e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001a462:	74 11                	je     c001a475 <File::seek(unsigned long long)+0x51>
c001a464:	8b 02                	mov    eax,DWORD PTR [edx]
c001a466:	53                   	push   ebx
c001a467:	51                   	push   ecx
c001a468:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001a46e:	52                   	push   edx
c001a46f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001a472:	83 c4 10             	add    esp,0x10
c001a475:	5a                   	pop    edx
c001a476:	5b                   	pop    ebx
c001a477:	5e                   	pop    esi
c001a478:	c3                   	ret    
c001a479:	90                   	nop

c001a47a <File::truncate(unsigned long long)>:
c001a47a:	56                   	push   esi
c001a47b:	53                   	push   ebx
c001a47c:	b8 0b 00 00 00       	mov    eax,0xb
c001a481:	51                   	push   ecx
c001a482:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a486:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a48a:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001a491:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a495:	83 fa 19             	cmp    edx,0x19
c001a498:	77 31                	ja     c001a4cb <File::truncate(unsigned long long)+0x51>
c001a49a:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a4a1:	85 d2                	test   edx,edx
c001a4a3:	74 26                	je     c001a4cb <File::truncate(unsigned long long)+0x51>
c001a4a5:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a4ab:	85 d2                	test   edx,edx
c001a4ad:	74 1c                	je     c001a4cb <File::truncate(unsigned long long)+0x51>
c001a4af:	b8 05 00 00 00       	mov    eax,0x5
c001a4b4:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001a4b8:	74 11                	je     c001a4cb <File::truncate(unsigned long long)+0x51>
c001a4ba:	8b 02                	mov    eax,DWORD PTR [edx]
c001a4bc:	53                   	push   ebx
c001a4bd:	51                   	push   ecx
c001a4be:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001a4c4:	52                   	push   edx
c001a4c5:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001a4c8:	83 c4 10             	add    esp,0x10
c001a4cb:	5a                   	pop    edx
c001a4cc:	5b                   	pop    ebx
c001a4cd:	5e                   	pop    esi
c001a4ce:	c3                   	ret    
c001a4cf:	90                   	nop

c001a4d0 <File::tell(unsigned long long*)>:
c001a4d0:	83 ec 0c             	sub    esp,0xc
c001a4d3:	b8 0b 00 00 00       	mov    eax,0xb
c001a4d8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a4dc:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001a4e3:	83 fa 19             	cmp    edx,0x19
c001a4e6:	77 34                	ja     c001a51c <File::tell(unsigned long long*)+0x4c>
c001a4e8:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a4ef:	85 d2                	test   edx,edx
c001a4f1:	74 29                	je     c001a51c <File::tell(unsigned long long*)+0x4c>
c001a4f3:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a4f9:	85 d2                	test   edx,edx
c001a4fb:	74 1f                	je     c001a51c <File::tell(unsigned long long*)+0x4c>
c001a4fd:	b8 05 00 00 00       	mov    eax,0x5
c001a502:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001a506:	74 14                	je     c001a51c <File::tell(unsigned long long*)+0x4c>
c001a508:	50                   	push   eax
c001a509:	8b 02                	mov    eax,DWORD PTR [edx]
c001a50b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a50f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001a515:	52                   	push   edx
c001a516:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a519:	83 c4 10             	add    esp,0x10
c001a51c:	83 c4 0c             	add    esp,0xc
c001a51f:	c3                   	ret    

c001a520 <File::rewind()>:
c001a520:	83 ec 10             	sub    esp,0x10
c001a523:	6a 00                	push   0x0
c001a525:	6a 00                	push   0x0
c001a527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a52b:	e8 f4 fe ff ff       	call   c001a424 <File::seek(unsigned long long)>
c001a530:	83 c4 1c             	add    esp,0x1c
c001a533:	c3                   	ret    

c001a534 <File::unlink()>:
c001a534:	83 ec 0c             	sub    esp,0xc
c001a537:	b8 0b 00 00 00       	mov    eax,0xb
c001a53c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a540:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a547:	83 f9 19             	cmp    ecx,0x19
c001a54a:	77 2f                	ja     c001a57b <File::unlink()+0x47>
c001a54c:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a553:	85 c9                	test   ecx,ecx
c001a555:	74 24                	je     c001a57b <File::unlink()+0x47>
c001a557:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a55d:	85 c9                	test   ecx,ecx
c001a55f:	74 1a                	je     c001a57b <File::unlink()+0x47>
c001a561:	b8 06 00 00 00       	mov    eax,0x6
c001a566:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a56a:	75 0f                	jne    c001a57b <File::unlink()+0x47>
c001a56c:	83 c2 0d             	add    edx,0xd
c001a56f:	50                   	push   eax
c001a570:	50                   	push   eax
c001a571:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a573:	52                   	push   edx
c001a574:	51                   	push   ecx
c001a575:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001a578:	83 c4 10             	add    esp,0x10
c001a57b:	83 c4 0c             	add    esp,0xc
c001a57e:	c3                   	ret    
c001a57f:	90                   	nop

c001a580 <File::rename(char const*)>:
c001a580:	83 ec 0c             	sub    esp,0xc
c001a583:	b8 0b 00 00 00       	mov    eax,0xb
c001a588:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a58c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a593:	83 f9 19             	cmp    ecx,0x19
c001a596:	77 32                	ja     c001a5ca <File::rename(char const*)+0x4a>
c001a598:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a59f:	85 c9                	test   ecx,ecx
c001a5a1:	74 27                	je     c001a5ca <File::rename(char const*)+0x4a>
c001a5a3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a5a9:	85 c9                	test   ecx,ecx
c001a5ab:	74 1d                	je     c001a5ca <File::rename(char const*)+0x4a>
c001a5ad:	b8 06 00 00 00       	mov    eax,0x6
c001a5b2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a5b6:	75 12                	jne    c001a5ca <File::rename(char const*)+0x4a>
c001a5b8:	83 c2 0d             	add    edx,0xd
c001a5bb:	50                   	push   eax
c001a5bc:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a5be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a5c2:	52                   	push   edx
c001a5c3:	51                   	push   ecx
c001a5c4:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001a5c7:	83 c4 10             	add    esp,0x10
c001a5ca:	83 c4 0c             	add    esp,0xc
c001a5cd:	c3                   	ret    

c001a5ce <File::chfatattr(unsigned char, unsigned char)>:
c001a5ce:	57                   	push   edi
c001a5cf:	b8 0b 00 00 00       	mov    eax,0xb
c001a5d4:	56                   	push   esi
c001a5d5:	53                   	push   ebx
c001a5d6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a5da:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a5de:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a5e5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a5e9:	83 f9 19             	cmp    ecx,0x19
c001a5ec:	77 37                	ja     c001a625 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a5ee:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a5f5:	85 c9                	test   ecx,ecx
c001a5f7:	74 2c                	je     c001a625 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a5f9:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a5ff:	85 c9                	test   ecx,ecx
c001a601:	74 22                	je     c001a625 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a603:	b8 06 00 00 00       	mov    eax,0x6
c001a608:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a60c:	75 17                	jne    c001a625 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a60e:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a610:	89 f0                	mov    eax,esi
c001a612:	83 c2 0d             	add    edx,0xd
c001a615:	0f b6 f0             	movzx  esi,al
c001a618:	0f b6 db             	movzx  ebx,bl
c001a61b:	56                   	push   esi
c001a61c:	53                   	push   ebx
c001a61d:	52                   	push   edx
c001a61e:	51                   	push   ecx
c001a61f:	ff 57 38             	call   DWORD PTR [edi+0x38]
c001a622:	83 c4 10             	add    esp,0x10
c001a625:	5b                   	pop    ebx
c001a626:	5e                   	pop    esi
c001a627:	5f                   	pop    edi
c001a628:	c3                   	ret    
c001a629:	90                   	nop

c001a62a <File::exists()>:
c001a62a:	83 ec 0c             	sub    esp,0xc
c001a62d:	31 c0                	xor    eax,eax
c001a62f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a633:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a63a:	83 f9 19             	cmp    ecx,0x19
c001a63d:	77 24                	ja     c001a663 <File::exists()+0x39>
c001a63f:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a646:	85 c9                	test   ecx,ecx
c001a648:	74 19                	je     c001a663 <File::exists()+0x39>
c001a64a:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a650:	85 c9                	test   ecx,ecx
c001a652:	74 0f                	je     c001a663 <File::exists()+0x39>
c001a654:	83 c2 0d             	add    edx,0xd
c001a657:	50                   	push   eax
c001a658:	50                   	push   eax
c001a659:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a65b:	52                   	push   edx
c001a65c:	51                   	push   ecx
c001a65d:	ff 50 48             	call   DWORD PTR [eax+0x48]
c001a660:	83 c4 10             	add    esp,0x10
c001a663:	83 c4 0c             	add    esp,0xc
c001a666:	c3                   	ret    
c001a667:	90                   	nop

c001a668 <File::stat(unsigned long long*, bool*)>:
c001a668:	56                   	push   esi
c001a669:	53                   	push   ebx
c001a66a:	50                   	push   eax
c001a66b:	b8 0b 00 00 00       	mov    eax,0xb
c001a670:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a674:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a678:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a67f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a683:	83 f9 19             	cmp    ecx,0x19
c001a686:	77 3d                	ja     c001a6c5 <File::stat(unsigned long long*, bool*)+0x5d>
c001a688:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a68f:	85 c9                	test   ecx,ecx
c001a691:	74 32                	je     c001a6c5 <File::stat(unsigned long long*, bool*)+0x5d>
c001a693:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a699:	85 c9                	test   ecx,ecx
c001a69b:	74 28                	je     c001a6c5 <File::stat(unsigned long long*, bool*)+0x5d>
c001a69d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a69f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a6a3:	74 13                	je     c001a6b8 <File::stat(unsigned long long*, bool*)+0x50>
c001a6a5:	83 ec 04             	sub    esp,0x4
c001a6a8:	56                   	push   esi
c001a6a9:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001a6af:	51                   	push   ecx
c001a6b0:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001a6b3:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001a6b6:	eb 0a                	jmp    c001a6c2 <File::stat(unsigned long long*, bool*)+0x5a>
c001a6b8:	53                   	push   ebx
c001a6b9:	83 c2 0d             	add    edx,0xd
c001a6bc:	56                   	push   esi
c001a6bd:	52                   	push   edx
c001a6be:	51                   	push   ecx
c001a6bf:	ff 50 34             	call   DWORD PTR [eax+0x34]
c001a6c2:	83 c4 10             	add    esp,0x10
c001a6c5:	5a                   	pop    edx
c001a6c6:	5b                   	pop    ebx
c001a6c7:	5e                   	pop    esi
c001a6c8:	c3                   	ret    

c001a6c9 <Fs::setcwd(Process*, char*)>:
c001a6c9:	55                   	push   ebp
c001a6ca:	57                   	push   edi
c001a6cb:	56                   	push   esi
c001a6cc:	53                   	push   ebx
c001a6cd:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a6d3:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c001a6da:	6a 00                	push   0x0
c001a6dc:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c001a6e2:	57                   	push   edi
c001a6e3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a6ea:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001a6ee:	56                   	push   esi
c001a6ef:	e8 5c f9 ff ff       	call   c001a050 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001a6f4:	89 34 24             	mov    DWORD PTR [esp],esi
c001a6f7:	e8 74 5e fe ff       	call   c0000570 <strlen>
c001a6fc:	83 c4 10             	add    esp,0x10
c001a6ff:	83 f8 02             	cmp    eax,0x2
c001a702:	77 15                	ja     c001a719 <Fs::setcwd(Process*, char*)+0x50>
c001a704:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c001a709:	83 eb 41             	sub    ebx,0x41
c001a70c:	8b 04 9d 80 f3 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc0c80]
c001a713:	85 c0                	test   eax,eax
c001a715:	75 1c                	jne    c001a733 <Fs::setcwd(Process*, char*)+0x6a>
c001a717:	eb 2f                	jmp    c001a748 <Fs::setcwd(Process*, char*)+0x7f>
c001a719:	83 ec 0c             	sub    esp,0xc
c001a71c:	56                   	push   esi
c001a71d:	e8 4e 5e fe ff       	call   c0000570 <strlen>
c001a722:	83 c4 10             	add    esp,0x10
c001a725:	83 f8 03             	cmp    eax,0x3
c001a728:	75 57                	jne    c001a781 <Fs::setcwd(Process*, char*)+0xb8>
c001a72a:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c001a72f:	75 50                	jne    c001a781 <Fs::setcwd(Process*, char*)+0xb8>
c001a731:	eb d1                	jmp    c001a704 <Fs::setcwd(Process*, char*)+0x3b>
c001a733:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c001a73a:	75 0c                	jne    c001a748 <Fs::setcwd(Process*, char*)+0x7f>
c001a73c:	83 ec 0c             	sub    esp,0xc
c001a73f:	50                   	push   eax
c001a740:	e8 ad 1d 00 00       	call   c001c4f2 <LogicalDisk::mount()>
c001a745:	83 c4 10             	add    esp,0x10
c001a748:	b8 03 00 00 00       	mov    eax,0x3
c001a74d:	83 fb 19             	cmp    ebx,0x19
c001a750:	0f 87 c6 00 00 00    	ja     c001a81c <Fs::setcwd(Process*, char*)+0x153>
c001a756:	8b 14 9d 80 f3 03 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffc0c80]
c001a75d:	b8 05 00 00 00       	mov    eax,0x5
c001a762:	85 d2                	test   edx,edx
c001a764:	0f 84 b2 00 00 00    	je     c001a81c <Fs::setcwd(Process*, char*)+0x153>
c001a76a:	b8 06 00 00 00       	mov    eax,0x6
c001a76f:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c001a776:	0f 85 92 00 00 00    	jne    c001a80e <Fs::setcwd(Process*, char*)+0x145>
c001a77c:	e9 9b 00 00 00       	jmp    c001a81c <Fs::setcwd(Process*, char*)+0x153>
c001a781:	83 ec 0c             	sub    esp,0xc
c001a784:	68 14 01 00 00       	push   0x114
c001a789:	e8 24 bb ff ff       	call   c00162b2 <malloc>
c001a78e:	83 c4 0c             	add    esp,0xc
c001a791:	89 c3                	mov    ebx,eax
c001a793:	55                   	push   ebp
c001a794:	56                   	push   esi
c001a795:	50                   	push   eax
c001a796:	e8 ad fb ff ff       	call   c001a348 <File::File(char const*, Process*)>
c001a79b:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001a7a0:	83 c4 0c             	add    esp,0xc
c001a7a3:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001a7a7:	50                   	push   eax
c001a7a8:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a7ac:	50                   	push   eax
c001a7ad:	53                   	push   ebx
c001a7ae:	e8 b5 fe ff ff       	call   c001a668 <File::stat(unsigned long long*, bool*)>
c001a7b3:	83 c4 10             	add    esp,0x10
c001a7b6:	83 f8 02             	cmp    eax,0x2
c001a7b9:	74 27                	je     c001a7e2 <Fs::setcwd(Process*, char*)+0x119>
c001a7bb:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001a7c0:	75 1c                	jne    c001a7de <Fs::setcwd(Process*, char*)+0x115>
c001a7c2:	b8 02 00 00 00       	mov    eax,0x2
c001a7c7:	85 db                	test   ebx,ebx
c001a7c9:	74 51                	je     c001a81c <Fs::setcwd(Process*, char*)+0x153>
c001a7cb:	83 ec 0c             	sub    esp,0xc
c001a7ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a7d0:	53                   	push   ebx
c001a7d1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a7d4:	83 c4 10             	add    esp,0x10
c001a7d7:	b8 02 00 00 00       	mov    eax,0x2
c001a7dc:	eb 3e                	jmp    c001a81c <Fs::setcwd(Process*, char*)+0x153>
c001a7de:	85 c0                	test   eax,eax
c001a7e0:	74 1c                	je     c001a7fe <Fs::setcwd(Process*, char*)+0x135>
c001a7e2:	b8 01 00 00 00       	mov    eax,0x1
c001a7e7:	85 db                	test   ebx,ebx
c001a7e9:	74 31                	je     c001a81c <Fs::setcwd(Process*, char*)+0x153>
c001a7eb:	83 ec 0c             	sub    esp,0xc
c001a7ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a7f0:	53                   	push   ebx
c001a7f1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a7f4:	83 c4 10             	add    esp,0x10
c001a7f7:	b8 01 00 00 00       	mov    eax,0x1
c001a7fc:	eb 1e                	jmp    c001a81c <Fs::setcwd(Process*, char*)+0x153>
c001a7fe:	85 db                	test   ebx,ebx
c001a800:	74 0c                	je     c001a80e <Fs::setcwd(Process*, char*)+0x145>
c001a802:	83 ec 0c             	sub    esp,0xc
c001a805:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a807:	53                   	push   ebx
c001a808:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a80b:	83 c4 10             	add    esp,0x10
c001a80e:	50                   	push   eax
c001a80f:	50                   	push   eax
c001a810:	56                   	push   esi
c001a811:	57                   	push   edi
c001a812:	e8 29 5e fe ff       	call   c0000640 <strcpy>
c001a817:	83 c4 10             	add    esp,0x10
c001a81a:	31 c0                	xor    eax,eax
c001a81c:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a822:	5b                   	pop    ebx
c001a823:	5e                   	pop    esi
c001a824:	5f                   	pop    edi
c001a825:	5d                   	pop    ebp
c001a826:	c3                   	ret    
c001a827:	90                   	nop

c001a828 <Directory::Directory(char const*, Process*)>:
c001a828:	83 ec 0c             	sub    esp,0xc
c001a82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a82f:	83 ec 08             	sub    esp,0x8
c001a832:	6a 00                	push   0x0
c001a834:	50                   	push   eax
c001a835:	e8 80 d1 ff ff       	call   c00179ba <UnixFile::UnixFile(int)>
c001a83a:	83 c4 10             	add    esp,0x10
c001a83d:	ba 6c 19 03 c0       	mov    edx,0xc003196c
c001a842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a846:	89 10                	mov    DWORD PTR [eax],edx
c001a848:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001a84d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a851:	0f 95 c0             	setne  al
c001a854:	0f b6 c0             	movzx  eax,al
c001a857:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a85b:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c001a861:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a865:	83 c2 0d             	add    edx,0xd
c001a868:	50                   	push   eax
c001a869:	51                   	push   ecx
c001a86a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a86e:	52                   	push   edx
c001a86f:	e8 dc f7 ff ff       	call   c001a050 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001a874:	83 c4 10             	add    esp,0x10
c001a877:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a87b:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001a87e:	83 e8 41             	sub    eax,0x41
c001a881:	88 c2                	mov    dl,al
c001a883:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a887:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001a88d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a891:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001a895:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a899:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a89f:	0f b6 c0             	movzx  eax,al
c001a8a2:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a8a9:	85 c0                	test   eax,eax
c001a8ab:	74 3e                	je     c001a8eb <Directory::Directory(char const*, Process*)+0xc3>
c001a8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8b1:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a8b7:	0f b6 c0             	movzx  eax,al
c001a8ba:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a8c1:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a8c7:	85 c0                	test   eax,eax
c001a8c9:	75 20                	jne    c001a8eb <Directory::Directory(char const*, Process*)+0xc3>
c001a8cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8cf:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a8d5:	0f b6 c0             	movzx  eax,al
c001a8d8:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a8df:	83 ec 0c             	sub    esp,0xc
c001a8e2:	50                   	push   eax
c001a8e3:	e8 0a 1c 00 00       	call   c001c4f2 <LogicalDisk::mount()>
c001a8e8:	83 c4 10             	add    esp,0x10
c001a8eb:	90                   	nop
c001a8ec:	83 c4 0c             	add    esp,0xc
c001a8ef:	c3                   	ret    

c001a8f0 <Directory::open()>:
c001a8f0:	53                   	push   ebx
c001a8f1:	b8 0b 00 00 00       	mov    eax,0xb
c001a8f6:	83 ec 08             	sub    esp,0x8
c001a8f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a8fd:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001a904:	83 fa 19             	cmp    edx,0x19
c001a907:	77 3d                	ja     c001a946 <Directory::open()+0x56>
c001a909:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a910:	85 d2                	test   edx,edx
c001a912:	74 32                	je     c001a946 <Directory::open()+0x56>
c001a914:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a91a:	85 d2                	test   edx,edx
c001a91c:	74 28                	je     c001a946 <Directory::open()+0x56>
c001a91e:	b8 06 00 00 00       	mov    eax,0x6
c001a923:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001a927:	75 1d                	jne    c001a946 <Directory::open()+0x56>
c001a929:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001a92f:	50                   	push   eax
c001a930:	8b 02                	mov    eax,DWORD PTR [edx]
c001a932:	51                   	push   ecx
c001a933:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001a936:	51                   	push   ecx
c001a937:	52                   	push   edx
c001a938:	ff 50 50             	call   DWORD PTR [eax+0x50]
c001a93b:	83 c4 10             	add    esp,0x10
c001a93e:	85 c0                	test   eax,eax
c001a940:	75 04                	jne    c001a946 <Directory::open()+0x56>
c001a942:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001a946:	83 c4 08             	add    esp,0x8
c001a949:	5b                   	pop    ebx
c001a94a:	c3                   	ret    
c001a94b:	90                   	nop

c001a94c <Directory::close()>:
c001a94c:	53                   	push   ebx
c001a94d:	b8 0b 00 00 00       	mov    eax,0xb
c001a952:	83 ec 08             	sub    esp,0x8
c001a955:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a959:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a960:	83 f9 19             	cmp    ecx,0x19
c001a963:	77 41                	ja     c001a9a6 <Directory::close()+0x5a>
c001a965:	8b 1c 8d 80 f3 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a96c:	85 db                	test   ebx,ebx
c001a96e:	74 36                	je     c001a9a6 <Directory::close()+0x5a>
c001a970:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c001a977:	74 2d                	je     c001a9a6 <Directory::close()+0x5a>
c001a979:	b8 05 00 00 00       	mov    eax,0x5
c001a97e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a982:	74 22                	je     c001a9a6 <Directory::close()+0x5a>
c001a984:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c001a988:	8b 04 8d 80 f3 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffc0c80]
c001a98f:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a995:	53                   	push   ebx
c001a996:	53                   	push   ebx
c001a997:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a999:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001a99f:	50                   	push   eax
c001a9a0:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c001a9a3:	83 c4 10             	add    esp,0x10
c001a9a6:	83 c4 08             	add    esp,0x8
c001a9a9:	5b                   	pop    ebx
c001a9aa:	c3                   	ret    
c001a9ab:	90                   	nop

c001a9ac <Directory::unlink()>:
c001a9ac:	83 ec 0c             	sub    esp,0xc
c001a9af:	b8 0b 00 00 00       	mov    eax,0xb
c001a9b4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a9b8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a9bf:	83 f9 19             	cmp    ecx,0x19
c001a9c2:	77 2f                	ja     c001a9f3 <Directory::unlink()+0x47>
c001a9c4:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a9cb:	85 c9                	test   ecx,ecx
c001a9cd:	74 24                	je     c001a9f3 <Directory::unlink()+0x47>
c001a9cf:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a9d5:	85 c9                	test   ecx,ecx
c001a9d7:	74 1a                	je     c001a9f3 <Directory::unlink()+0x47>
c001a9d9:	b8 06 00 00 00       	mov    eax,0x6
c001a9de:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a9e2:	75 0f                	jne    c001a9f3 <Directory::unlink()+0x47>
c001a9e4:	83 c2 0d             	add    edx,0xd
c001a9e7:	50                   	push   eax
c001a9e8:	50                   	push   eax
c001a9e9:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a9eb:	52                   	push   edx
c001a9ec:	51                   	push   ecx
c001a9ed:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001a9f0:	83 c4 10             	add    esp,0x10
c001a9f3:	83 c4 0c             	add    esp,0xc
c001a9f6:	c3                   	ret    
c001a9f7:	90                   	nop

c001a9f8 <Directory::rename(char const*)>:
c001a9f8:	83 ec 0c             	sub    esp,0xc
c001a9fb:	b8 0b 00 00 00       	mov    eax,0xb
c001aa00:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aa04:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001aa0b:	83 f9 19             	cmp    ecx,0x19
c001aa0e:	77 32                	ja     c001aa42 <Directory::rename(char const*)+0x4a>
c001aa10:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001aa17:	85 c9                	test   ecx,ecx
c001aa19:	74 27                	je     c001aa42 <Directory::rename(char const*)+0x4a>
c001aa1b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001aa21:	85 c9                	test   ecx,ecx
c001aa23:	74 1d                	je     c001aa42 <Directory::rename(char const*)+0x4a>
c001aa25:	b8 06 00 00 00       	mov    eax,0x6
c001aa2a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001aa2e:	75 12                	jne    c001aa42 <Directory::rename(char const*)+0x4a>
c001aa30:	83 c2 0d             	add    edx,0xd
c001aa33:	50                   	push   eax
c001aa34:	8b 01                	mov    eax,DWORD PTR [ecx]
c001aa36:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001aa3a:	52                   	push   edx
c001aa3b:	51                   	push   ecx
c001aa3c:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001aa3f:	83 c4 10             	add    esp,0x10
c001aa42:	83 c4 0c             	add    esp,0xc
c001aa45:	c3                   	ret    

c001aa46 <Directory::exists()>:
c001aa46:	83 ec 0c             	sub    esp,0xc
c001aa49:	31 c0                	xor    eax,eax
c001aa4b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aa4f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001aa56:	83 f9 19             	cmp    ecx,0x19
c001aa59:	77 24                	ja     c001aa7f <Directory::exists()+0x39>
c001aa5b:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001aa62:	85 c9                	test   ecx,ecx
c001aa64:	74 19                	je     c001aa7f <Directory::exists()+0x39>
c001aa66:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001aa6c:	85 c9                	test   ecx,ecx
c001aa6e:	74 0f                	je     c001aa7f <Directory::exists()+0x39>
c001aa70:	83 c2 0d             	add    edx,0xd
c001aa73:	50                   	push   eax
c001aa74:	50                   	push   eax
c001aa75:	8b 01                	mov    eax,DWORD PTR [ecx]
c001aa77:	52                   	push   edx
c001aa78:	51                   	push   ecx
c001aa79:	ff 50 48             	call   DWORD PTR [eax+0x48]
c001aa7c:	83 c4 10             	add    esp,0x10
c001aa7f:	83 c4 0c             	add    esp,0xc
c001aa82:	c3                   	ret    
c001aa83:	90                   	nop

c001aa84 <Directory::read(dirent*)>:
c001aa84:	83 ec 1c             	sub    esp,0x1c
c001aa87:	b8 0b 00 00 00       	mov    eax,0xb
c001aa8c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001aa90:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001aa97:	83 f9 19             	cmp    ecx,0x19
c001aa9a:	77 30                	ja     c001aacc <Directory::read(dirent*)+0x48>
c001aa9c:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001aaa3:	85 c9                	test   ecx,ecx
c001aaa5:	74 25                	je     c001aacc <Directory::read(dirent*)+0x48>
c001aaa7:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c001aaae:	74 1c                	je     c001aacc <Directory::read(dirent*)+0x48>
c001aab0:	83 ec 0c             	sub    esp,0xc
c001aab3:	8b 02                	mov    eax,DWORD PTR [edx]
c001aab5:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001aab9:	51                   	push   ecx
c001aaba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001aabe:	6a 00                	push   0x0
c001aac0:	68 10 01 00 00       	push   0x110
c001aac5:	52                   	push   edx
c001aac6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001aac9:	83 c4 20             	add    esp,0x20
c001aacc:	83 c4 1c             	add    esp,0x1c
c001aacf:	c3                   	ret    

c001aad0 <Directory::create()>:
c001aad0:	83 ec 0c             	sub    esp,0xc
c001aad3:	b8 0b 00 00 00       	mov    eax,0xb
c001aad8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aadc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001aae3:	83 f9 19             	cmp    ecx,0x19
c001aae6:	77 2f                	ja     c001ab17 <Directory::create()+0x47>
c001aae8:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001aaef:	85 c9                	test   ecx,ecx
c001aaf1:	74 24                	je     c001ab17 <Directory::create()+0x47>
c001aaf3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001aaf9:	85 c9                	test   ecx,ecx
c001aafb:	74 1a                	je     c001ab17 <Directory::create()+0x47>
c001aafd:	b8 06 00 00 00       	mov    eax,0x6
c001ab02:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001ab06:	75 0f                	jne    c001ab17 <Directory::create()+0x47>
c001ab08:	83 c2 0d             	add    edx,0xd
c001ab0b:	50                   	push   eax
c001ab0c:	50                   	push   eax
c001ab0d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ab0f:	52                   	push   edx
c001ab10:	51                   	push   ecx
c001ab11:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001ab14:	83 c4 10             	add    esp,0x10
c001ab17:	83 c4 0c             	add    esp,0xc
c001ab1a:	c3                   	ret    
c001ab1b:	90                   	nop

c001ab1c <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c001ab1c:	b8 0a 00 00 00       	mov    eax,0xa
c001ab21:	c3                   	ret    
c001ab22:	66 90                	xchg   ax,ax

c001ab24 <Bus::Bus(char const*)>:
c001ab24:	83 ec 0c             	sub    esp,0xc
c001ab27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab2b:	83 ec 08             	sub    esp,0x8
c001ab2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ab32:	50                   	push   eax
c001ab33:	e8 ec 07 00 00       	call   c001b324 <Device::Device(char const*)>
c001ab38:	83 c4 10             	add    esp,0x10
c001ab3b:	ba 88 19 03 c0       	mov    edx,0xc0031988
c001ab40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab44:	89 10                	mov    DWORD PTR [eax],edx
c001ab46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab4a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c001ab54:	90                   	nop
c001ab55:	83 c4 0c             	add    esp,0xc
c001ab58:	c3                   	ret    
c001ab59:	90                   	nop
c001ab5a:	66 90                	xchg   ax,ax

c001ab5c <Bus::~Bus()>:
c001ab5c:	83 ec 0c             	sub    esp,0xc
c001ab5f:	ba 88 19 03 c0       	mov    edx,0xc0031988
c001ab64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab68:	89 10                	mov    DWORD PTR [eax],edx
c001ab6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab6e:	83 ec 0c             	sub    esp,0xc
c001ab71:	50                   	push   eax
c001ab72:	e8 4d 05 00 00       	call   c001b0c4 <Device::~Device()>
c001ab77:	83 c4 10             	add    esp,0x10
c001ab7a:	90                   	nop
c001ab7b:	83 c4 0c             	add    esp,0xc
c001ab7e:	c3                   	ret    
c001ab7f:	90                   	nop

c001ab80 <Bus::~Bus()>:
c001ab80:	83 ec 0c             	sub    esp,0xc
c001ab83:	83 ec 0c             	sub    esp,0xc
c001ab86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ab8a:	e8 cd ff ff ff       	call   c001ab5c <Bus::~Bus()>
c001ab8f:	83 c4 10             	add    esp,0x10
c001ab92:	83 ec 08             	sub    esp,0x8
c001ab95:	68 58 01 00 00       	push   0x158
c001ab9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ab9e:	e8 71 e4 ff ff       	call   c0019014 <operator delete(void*, unsigned long)>
c001aba3:	83 c4 10             	add    esp,0x10
c001aba6:	83 c4 0c             	add    esp,0xc
c001aba9:	c3                   	ret    

c001abaa <beepThread(void*)>:
c001abaa:	83 ec 0c             	sub    esp,0xc
c001abad:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001abb2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001abb6:	48                   	dec    eax
c001abb7:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001abbc:	75 01                	jne    c001abbf <beepThread(void*)+0x15>
c001abbe:	fb                   	sti    
c001abbf:	83 ec 0c             	sub    esp,0xc
c001abc2:	6b c2 0a             	imul   eax,edx,0xa
c001abc5:	50                   	push   eax
c001abc6:	e8 fd a2 00 00       	call   c0024ec8 <milliTenthSleep(unsigned int)>
c001abcb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001abd2:	e8 4c c2 00 00       	call   c0026e23 <HalMakeBeep(int)>
c001abd7:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c001abdf:	83 c4 1c             	add    esp,0x1c
c001abe2:	e9 c5 a1 00 00       	jmp    c0024dac <blockTask(TaskState)>

c001abe7 <Krnl::beep(int, int, bool)>:
c001abe7:	56                   	push   esi
c001abe8:	53                   	push   ebx
c001abe9:	83 ec 10             	sub    esp,0x10
c001abec:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001abf0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001abf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001abf8:	e8 26 c2 00 00       	call   c0026e23 <HalMakeBeep(int)>
c001abfd:	83 c4 10             	add    esp,0x10
c001ac00:	89 f0                	mov    eax,esi
c001ac02:	84 c0                	test   al,al
c001ac04:	74 1e                	je     c001ac24 <Krnl::beep(int, int, bool)+0x3d>
c001ac06:	83 ec 0c             	sub    esp,0xc
c001ac09:	6b db 0a             	imul   ebx,ebx,0xa
c001ac0c:	53                   	push   ebx
c001ac0d:	e8 b6 a2 00 00       	call   c0024ec8 <milliTenthSleep(unsigned int)>
c001ac12:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001ac1a:	83 c4 14             	add    esp,0x14
c001ac1d:	5b                   	pop    ebx
c001ac1e:	5e                   	pop    esi
c001ac1f:	e9 ff c1 00 00       	jmp    c0026e23 <HalMakeBeep(int)>
c001ac24:	68 e6 00 00 00       	push   0xe6
c001ac29:	53                   	push   ebx
c001ac2a:	68 aa ab 01 c0       	push   0xc001abaa
c001ac2f:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c001ac35:	e8 0e 9d 00 00       	call   c0024948 <Process::createThread(void (*)(void*), void*, int)>
c001ac3a:	83 c4 14             	add    esp,0x14
c001ac3d:	5b                   	pop    ebx
c001ac3e:	5e                   	pop    esi
c001ac3f:	c3                   	ret    

c001ac40 <User::loadClockSettings(int)>:
c001ac40:	53                   	push   ebx
c001ac41:	83 ec 14             	sub    esp,0x14
c001ac44:	68 14 01 00 00       	push   0x114
c001ac49:	e8 64 b6 ff ff       	call   c00162b2 <malloc>
c001ac4e:	83 c4 0c             	add    esp,0xc
c001ac51:	89 c3                	mov    ebx,eax
c001ac53:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c001ac59:	68 ac 19 03 c0       	push   0xc00319ac
c001ac5e:	50                   	push   eax
c001ac5f:	e8 e4 f6 ff ff       	call   c001a348 <File::File(char const*, Process*)>
c001ac64:	58                   	pop    eax
c001ac65:	5a                   	pop    edx
c001ac66:	6a 01                	push   0x1
c001ac68:	53                   	push   ebx
c001ac69:	e8 f8 f6 ff ff       	call   c001a366 <File::open(FileOpenMode)>
c001ac6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ac71:	e8 4e f7 ff ff       	call   c001a3c4 <File::close()>
c001ac76:	83 c4 10             	add    esp,0x10
c001ac79:	85 db                	test   ebx,ebx
c001ac7b:	74 0f                	je     c001ac8c <User::loadClockSettings(int)+0x4c>
c001ac7d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ac7f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001ac83:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ac86:	83 c4 08             	add    esp,0x8
c001ac89:	5b                   	pop    ebx
c001ac8a:	ff e0                	jmp    eax
c001ac8c:	83 c4 08             	add    esp,0x8
c001ac8f:	5b                   	pop    ebx
c001ac90:	c3                   	ret    
c001ac91:	90                   	nop

c001ac92 <Clock::Clock(char const*)>:
c001ac92:	83 ec 0c             	sub    esp,0xc
c001ac95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac99:	83 ec 08             	sub    esp,0x8
c001ac9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aca0:	50                   	push   eax
c001aca1:	e8 7e 06 00 00       	call   c001b324 <Device::Device(char const*)>
c001aca6:	83 c4 10             	add    esp,0x10
c001aca9:	ba d4 19 03 c0       	mov    edx,0xc00319d4
c001acae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acb2:	89 10                	mov    DWORD PTR [eax],edx
c001acb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acb8:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c001acc2:	90                   	nop
c001acc3:	83 c4 0c             	add    esp,0xc
c001acc6:	c3                   	ret    
c001acc7:	90                   	nop

c001acc8 <Clock::~Clock()>:
c001acc8:	83 ec 0c             	sub    esp,0xc
c001accb:	ba d4 19 03 c0       	mov    edx,0xc00319d4
c001acd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acd4:	89 10                	mov    DWORD PTR [eax],edx
c001acd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acda:	83 ec 0c             	sub    esp,0xc
c001acdd:	50                   	push   eax
c001acde:	e8 e1 03 00 00       	call   c001b0c4 <Device::~Device()>
c001ace3:	83 c4 10             	add    esp,0x10
c001ace6:	90                   	nop
c001ace7:	83 c4 0c             	add    esp,0xc
c001acea:	c3                   	ret    
c001aceb:	90                   	nop

c001acec <Clock::~Clock()>:
c001acec:	83 ec 0c             	sub    esp,0xc
c001acef:	83 ec 0c             	sub    esp,0xc
c001acf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001acf6:	e8 cd ff ff ff       	call   c001acc8 <Clock::~Clock()>
c001acfb:	83 c4 10             	add    esp,0x10
c001acfe:	83 ec 08             	sub    esp,0x8
c001ad01:	68 58 01 00 00       	push   0x158
c001ad06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad0a:	e8 05 e3 ff ff       	call   c0019014 <operator delete(void*, unsigned long)>
c001ad0f:	83 c4 10             	add    esp,0x10
c001ad12:	83 c4 0c             	add    esp,0xc
c001ad15:	c3                   	ret    

c001ad16 <Clock::timeInSecondsLocal()>:
c001ad16:	53                   	push   ebx
c001ad17:	83 ec 14             	sub    esp,0x14
c001ad1a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ad1e:	8b 10                	mov    edx,DWORD PTR [eax]
c001ad20:	50                   	push   eax
c001ad21:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001ad24:	0f b6 0d 08 cf 03 c0 	movzx  ecx,BYTE PTR ds:0xc003cf08
c001ad2b:	03 0d 0c cf 03 c0    	add    ecx,DWORD PTR ds:0xc003cf0c
c001ad31:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001ad37:	89 cb                	mov    ebx,ecx
c001ad39:	c1 fb 1f             	sar    ebx,0x1f
c001ad3c:	01 c8                	add    eax,ecx
c001ad3e:	11 da                	adc    edx,ebx
c001ad40:	83 c4 10             	add    esp,0x10
c001ad43:	31 c9                	xor    ecx,ecx
c001ad45:	80 3d 09 cf 03 c0 00 	cmp    BYTE PTR ds:0xc003cf09,0x0
c001ad4c:	74 05                	je     c001ad53 <Clock::timeInSecondsLocal()+0x3d>
c001ad4e:	b9 08 07 00 00       	mov    ecx,0x708
c001ad53:	31 db                	xor    ebx,ebx
c001ad55:	01 c8                	add    eax,ecx
c001ad57:	11 da                	adc    edx,ebx
c001ad59:	83 c4 08             	add    esp,0x8
c001ad5c:	5b                   	pop    ebx
c001ad5d:	c3                   	ret    

c001ad5e <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001ad5e:	57                   	push   edi
c001ad5f:	56                   	push   esi
c001ad60:	53                   	push   ebx
c001ad61:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ad65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ad69:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ad6b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ad6f:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c001ad72:	0f b6 05 08 cf 03 c0 	movzx  eax,BYTE PTR ds:0xc003cf08
c001ad79:	03 05 0c cf 03 c0    	add    eax,DWORD PTR ds:0xc003cf0c
c001ad7f:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c001ad85:	99                   	cdq    
c001ad86:	29 c6                	sub    esi,eax
c001ad88:	19 d7                	sbb    edi,edx
c001ad8a:	89 f0                	mov    eax,esi
c001ad8c:	89 fa                	mov    edx,edi
c001ad8e:	31 f6                	xor    esi,esi
c001ad90:	80 3d 09 cf 03 c0 00 	cmp    BYTE PTR ds:0xc003cf09,0x0
c001ad97:	74 05                	je     c001ad9e <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c001ad99:	be 08 07 00 00       	mov    esi,0x708
c001ad9e:	31 ff                	xor    edi,edi
c001ada0:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001ada4:	29 f0                	sub    eax,esi
c001ada6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001adaa:	19 fa                	sbb    edx,edi
c001adac:	89 d8                	mov    eax,ebx
c001adae:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001adb2:	5b                   	pop    ebx
c001adb3:	5e                   	pop    esi
c001adb4:	5f                   	pop    edi
c001adb5:	ff e0                	jmp    eax

c001adb7 <datetimeToSeconds(datetime_t)>:
c001adb7:	55                   	push   ebp
c001adb8:	57                   	push   edi
c001adb9:	56                   	push   esi
c001adba:	53                   	push   ebx
c001adbb:	83 ec 0c             	sub    esp,0xc
c001adbe:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001adc2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001adc6:	89 d6                	mov    esi,edx
c001adc8:	0f b6 c7             	movzx  eax,bh
c001adcb:	c1 ee 10             	shr    esi,0x10
c001adce:	6b e8 3c             	imul   ebp,eax,0x3c
c001add1:	81 ee 6c 07 00 00    	sub    esi,0x76c
c001add7:	0f b6 ce             	movzx  ecx,dh
c001adda:	89 df                	mov    edi,ebx
c001addc:	49                   	dec    ecx
c001addd:	c1 ef 10             	shr    edi,0x10
c001ade0:	0f b6 db             	movzx  ebx,bl
c001ade3:	89 f8                	mov    eax,edi
c001ade5:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c001adeb:	0f b6 f8             	movzx  edi,al
c001adee:	0f b6 d2             	movzx  edx,dl
c001adf1:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c001adf5:	01 d8                	add    eax,ebx
c001adf7:	0f b7 de             	movzx  ebx,si
c001adfa:	89 04 24             	mov    DWORD PTR [esp],eax
c001adfd:	c1 f8 1f             	sar    eax,0x1f
c001ae00:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ae04:	0f b6 c1             	movzx  eax,cl
c001ae07:	8b 0c 85 20 1a 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffce5e0]
c001ae0e:	83 f8 01             	cmp    eax,0x1
c001ae11:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001ae15:	76 27                	jbe    c001ae3e <datetimeToSeconds(datetime_t)+0x87>
c001ae17:	83 e6 03             	and    esi,0x3
c001ae1a:	75 22                	jne    c001ae3e <datetimeToSeconds(datetime_t)+0x87>
c001ae1c:	31 d2                	xor    edx,edx
c001ae1e:	be 64 00 00 00       	mov    esi,0x64
c001ae23:	89 d8                	mov    eax,ebx
c001ae25:	f7 f6                	div    esi
c001ae27:	85 d2                	test   edx,edx
c001ae29:	75 12                	jne    c001ae3d <datetimeToSeconds(datetime_t)+0x86>
c001ae2b:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001ae31:	be 90 01 00 00       	mov    esi,0x190
c001ae36:	99                   	cdq    
c001ae37:	f7 fe                	idiv   esi
c001ae39:	85 d2                	test   edx,edx
c001ae3b:	75 01                	jne    c001ae3e <datetimeToSeconds(datetime_t)+0x87>
c001ae3d:	41                   	inc    ecx
c001ae3e:	83 fb 46             	cmp    ebx,0x46
c001ae41:	76 48                	jbe    c001ae8b <datetimeToSeconds(datetime_t)+0xd4>
c001ae43:	be 46 00 00 00       	mov    esi,0x46
c001ae48:	bf 64 00 00 00       	mov    edi,0x64
c001ae4d:	bd 90 01 00 00       	mov    ebp,0x190
c001ae52:	b8 6d 01 00 00       	mov    eax,0x16d
c001ae57:	f7 c6 03 00 00 00    	test   esi,0x3
c001ae5d:	75 23                	jne    c001ae82 <datetimeToSeconds(datetime_t)+0xcb>
c001ae5f:	89 f0                	mov    eax,esi
c001ae61:	99                   	cdq    
c001ae62:	f7 ff                	idiv   edi
c001ae64:	b8 6e 01 00 00       	mov    eax,0x16e
c001ae69:	85 d2                	test   edx,edx
c001ae6b:	75 15                	jne    c001ae82 <datetimeToSeconds(datetime_t)+0xcb>
c001ae6d:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001ae73:	99                   	cdq    
c001ae74:	f7 fd                	idiv   ebp
c001ae76:	83 fa 01             	cmp    edx,0x1
c001ae79:	19 c0                	sbb    eax,eax
c001ae7b:	f7 d0                	not    eax
c001ae7d:	05 6e 01 00 00       	add    eax,0x16e
c001ae82:	01 c1                	add    ecx,eax
c001ae84:	46                   	inc    esi
c001ae85:	39 de                	cmp    esi,ebx
c001ae87:	7c c9                	jl     c001ae52 <datetimeToSeconds(datetime_t)+0x9b>
c001ae89:	eb 34                	jmp    c001aebf <datetimeToSeconds(datetime_t)+0x108>
c001ae8b:	74 32                	je     c001aebf <datetimeToSeconds(datetime_t)+0x108>
c001ae8d:	b8 45 00 00 00       	mov    eax,0x45
c001ae92:	89 c2                	mov    edx,eax
c001ae94:	83 e2 03             	and    edx,0x3
c001ae97:	39 d8                	cmp    eax,ebx
c001ae99:	7e 0f                	jle    c001aeaa <datetimeToSeconds(datetime_t)+0xf3>
c001ae9b:	83 fa 01             	cmp    edx,0x1
c001ae9e:	19 d2                	sbb    edx,edx
c001aea0:	48                   	dec    eax
c001aea1:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c001aea8:	eb e8                	jmp    c001ae92 <datetimeToSeconds(datetime_t)+0xdb>
c001aeaa:	b8 6d 01 00 00       	mov    eax,0x16d
c001aeaf:	85 d2                	test   edx,edx
c001aeb1:	75 0a                	jne    c001aebd <datetimeToSeconds(datetime_t)+0x106>
c001aeb3:	83 fb 01             	cmp    ebx,0x1
c001aeb6:	19 c0                	sbb    eax,eax
c001aeb8:	05 6e 01 00 00       	add    eax,0x16e
c001aebd:	29 c1                	sub    ecx,eax
c001aebf:	b8 80 51 01 00       	mov    eax,0x15180
c001aec4:	f7 e9                	imul   ecx
c001aec6:	03 04 24             	add    eax,DWORD PTR [esp]
c001aec9:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c001aecd:	83 c4 0c             	add    esp,0xc
c001aed0:	5b                   	pop    ebx
c001aed1:	5e                   	pop    esi
c001aed2:	5f                   	pop    edi
c001aed3:	5d                   	pop    ebp
c001aed4:	c3                   	ret    
c001aed5:	90                   	nop

c001aed6 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c001aed6:	57                   	push   edi
c001aed7:	56                   	push   esi
c001aed8:	53                   	push   ebx
c001aed9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001aedd:	8b 06                	mov    eax,DWORD PTR [esi]
c001aedf:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001aee2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001aee6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001aeea:	e8 c8 fe ff ff       	call   c001adb7 <datetimeToSeconds(datetime_t)>
c001aeef:	59                   	pop    ecx
c001aef0:	0f b6 0d 08 cf 03 c0 	movzx  ecx,BYTE PTR ds:0xc003cf08
c001aef7:	5b                   	pop    ebx
c001aef8:	03 0d 0c cf 03 c0    	add    ecx,DWORD PTR ds:0xc003cf0c
c001aefe:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001af04:	89 cb                	mov    ebx,ecx
c001af06:	c1 fb 1f             	sar    ebx,0x1f
c001af09:	29 c8                	sub    eax,ecx
c001af0b:	19 da                	sbb    edx,ebx
c001af0d:	31 c9                	xor    ecx,ecx
c001af0f:	80 3d 09 cf 03 c0 00 	cmp    BYTE PTR ds:0xc003cf09,0x0
c001af16:	74 05                	je     c001af1d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001af18:	b9 08 07 00 00       	mov    ecx,0x708
c001af1d:	31 db                	xor    ebx,ebx
c001af1f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001af23:	29 c8                	sub    eax,ecx
c001af25:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001af29:	19 da                	sbb    edx,ebx
c001af2b:	89 f8                	mov    eax,edi
c001af2d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001af31:	5b                   	pop    ebx
c001af32:	5e                   	pop    esi
c001af33:	5f                   	pop    edi
c001af34:	ff e0                	jmp    eax

c001af36 <secondsToDatetime(unsigned long long)>:
c001af36:	55                   	push   ebp
c001af37:	57                   	push   edi
c001af38:	56                   	push   esi
c001af39:	53                   	push   ebx
c001af3a:	83 ec 1c             	sub    esp,0x1c
c001af3d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001af41:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001af45:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001af49:	6a 00                	push   0x0
c001af4b:	68 80 51 01 00       	push   0x15180
c001af50:	55                   	push   ebp
c001af51:	57                   	push   edi
c001af52:	e8 e9 32 01 00       	call   c002e240 <__udivdi3>
c001af57:	83 c4 10             	add    esp,0x10
c001af5a:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001af60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001af64:	6a 00                	push   0x0
c001af66:	68 80 51 01 00       	push   0x15180
c001af6b:	55                   	push   ebp
c001af6c:	57                   	push   edi
c001af6d:	bf 10 0e 00 00       	mov    edi,0xe10
c001af72:	e8 c9 33 01 00       	call   c002e340 <__umoddi3>
c001af77:	83 c4 10             	add    esp,0x10
c001af7a:	99                   	cdq    
c001af7b:	f7 ff                	idiv   edi
c001af7d:	bf 3c 00 00 00       	mov    edi,0x3c
c001af82:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001af85:	89 d0                	mov    eax,edx
c001af87:	99                   	cdq    
c001af88:	f7 ff                	idiv   edi
c001af8a:	85 db                	test   ebx,ebx
c001af8c:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c001af8f:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001af92:	79 11                	jns    c001afa5 <secondsToDatetime(unsigned long long)+0x6f>
c001af94:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001af98:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c001af9e:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001afa3:	eb 07                	jmp    c001afac <secondsToDatetime(unsigned long long)+0x76>
c001afa5:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001afaa:	89 d8                	mov    eax,ebx
c001afac:	bf b4 05 00 00       	mov    edi,0x5b4
c001afb1:	99                   	cdq    
c001afb2:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c001afb7:	f7 f9                	idiv   ecx
c001afb9:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c001afbe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001afc2:	31 d2                	xor    edx,edx
c001afc4:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001afcc:	01 c3                	add    ebx,eax
c001afce:	89 d8                	mov    eax,ebx
c001afd0:	f7 f1                	div    ecx
c001afd2:	31 d2                	xor    edx,edx
c001afd4:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001afd7:	89 d8                	mov    eax,ebx
c001afd9:	f7 f7                	div    edi
c001afdb:	31 d2                	xor    edx,edx
c001afdd:	29 c1                	sub    ecx,eax
c001afdf:	89 d8                	mov    eax,ebx
c001afe1:	f7 f5                	div    ebp
c001afe3:	bd 6d 01 00 00       	mov    ebp,0x16d
c001afe8:	29 c1                	sub    ecx,eax
c001afea:	31 d2                	xor    edx,edx
c001afec:	89 c8                	mov    eax,ecx
c001afee:	f7 f5                	div    ebp
c001aff0:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001aff5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aff9:	31 d2                	xor    edx,edx
c001affb:	89 c8                	mov    eax,ecx
c001affd:	f7 f5                	div    ebp
c001afff:	31 d2                	xor    edx,edx
c001b001:	01 c3                	add    ebx,eax
c001b003:	89 c8                	mov    eax,ecx
c001b005:	f7 f7                	div    edi
c001b007:	bf 99 00 00 00       	mov    edi,0x99
c001b00c:	29 c3                	sub    ebx,eax
c001b00e:	31 d2                	xor    edx,edx
c001b010:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001b018:	29 c3                	sub    ebx,eax
c001b01a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001b01d:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001b020:	bb 05 00 00 00       	mov    ebx,0x5
c001b025:	83 c1 02             	add    ecx,0x2
c001b028:	89 c8                	mov    eax,ecx
c001b02a:	f7 f7                	div    edi
c001b02c:	31 d2                	xor    edx,edx
c001b02e:	89 c7                	mov    edi,eax
c001b030:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001b036:	83 c0 02             	add    eax,0x2
c001b039:	f7 f3                	div    ebx
c001b03b:	89 eb                	mov    ebx,ebp
c001b03d:	29 c3                	sub    ebx,eax
c001b03f:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001b045:	88 1e                	mov    BYTE PTR [esi],bl
c001b047:	19 c0                	sbb    eax,eax
c001b049:	31 d2                	xor    edx,edx
c001b04b:	83 e0 0c             	and    eax,0xc
c001b04e:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001b052:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001b05a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001b05e:	83 f9 01             	cmp    ecx,0x1
c001b061:	0f 96 c2             	setbe  dl
c001b064:	41                   	inc    ecx
c001b065:	01 d0                	add    eax,edx
c001b067:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001b06a:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001b06e:	83 c4 1c             	add    esp,0x1c
c001b071:	89 f0                	mov    eax,esi
c001b073:	5b                   	pop    ebx
c001b074:	5e                   	pop    esi
c001b075:	5f                   	pop    edi
c001b076:	5d                   	pop    ebp
c001b077:	c2 04 00             	ret    0x4

c001b07a <Clock::timeInDatetimeLocal()>:
c001b07a:	53                   	push   ebx
c001b07b:	83 ec 14             	sub    esp,0x14
c001b07e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b082:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b086:	e8 8b fc ff ff       	call   c001ad16 <Clock::timeInSecondsLocal()>
c001b08b:	83 c4 0c             	add    esp,0xc
c001b08e:	52                   	push   edx
c001b08f:	50                   	push   eax
c001b090:	53                   	push   ebx
c001b091:	e8 a0 fe ff ff       	call   c001af36 <secondsToDatetime(unsigned long long)>
c001b096:	89 d8                	mov    eax,ebx
c001b098:	83 c4 14             	add    esp,0x14
c001b09b:	5b                   	pop    ebx
c001b09c:	c2 04 00             	ret    0x4
c001b09f:	90                   	nop

c001b0a0 <Device::hibernate()>:
c001b0a0:	c3                   	ret    
c001b0a1:	90                   	nop

c001b0a2 <Device::wake()>:
c001b0a2:	c3                   	ret    
c001b0a3:	90                   	nop

c001b0a4 <Device::detect()>:
c001b0a4:	c3                   	ret    
c001b0a5:	90                   	nop

c001b0a6 <Device::disableLegacy()>:
c001b0a6:	c3                   	ret    
c001b0a7:	90                   	nop

c001b0a8 <Device::powerSaving(PowerSavingLevel)>:
c001b0a8:	c3                   	ret    
c001b0a9:	90                   	nop

c001b0aa <DriverlessDevice::close(int, int, void*)>:
c001b0aa:	31 c0                	xor    eax,eax
c001b0ac:	c3                   	ret    
c001b0ad:	90                   	nop

c001b0ae <DriverlessDevice::detect()>:
c001b0ae:	c3                   	ret    
c001b0af:	90                   	nop

c001b0b0 <DriverlessDevice::open(int, int, void*)>:
c001b0b0:	83 ec 18             	sub    esp,0x18
c001b0b3:	68 50 1a 03 c0       	push   0xc0031a50
c001b0b8:	e8 8e 4f 00 00       	call   c002004b <KePanic(char const*)>
c001b0bd:	83 c8 ff             	or     eax,0xffffffff
c001b0c0:	83 c4 1c             	add    esp,0x1c
c001b0c3:	c3                   	ret    

c001b0c4 <Device::~Device()>:
c001b0c4:	ba bc 1a 03 c0       	mov    edx,0xc0031abc
c001b0c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b0cd:	89 10                	mov    DWORD PTR [eax],edx
c001b0cf:	90                   	nop
c001b0d0:	c3                   	ret    
c001b0d1:	90                   	nop

c001b0d2 <Device::~Device()>:
c001b0d2:	83 ec 0c             	sub    esp,0xc
c001b0d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b0d9:	e8 e6 ff ff ff       	call   c001b0c4 <Device::~Device()>
c001b0de:	83 c4 04             	add    esp,0x4
c001b0e1:	83 ec 08             	sub    esp,0x8
c001b0e4:	68 58 01 00 00       	push   0x158
c001b0e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b0ed:	e8 22 df ff ff       	call   c0019014 <operator delete(void*, unsigned long)>
c001b0f2:	83 c4 10             	add    esp,0x10
c001b0f5:	83 c4 0c             	add    esp,0xc
c001b0f8:	c3                   	ret    
c001b0f9:	90                   	nop

c001b0fa <Device::findAndLoadDriver()>:
c001b0fa:	c7 44 24 04 6e 1a 03 c0 	mov    DWORD PTR [esp+0x4],0xc0031a6e
c001b102:	e9 3a e0 ff ff       	jmp    c0019141 <Dbg::kprintf(char const*, ...)>
c001b107:	90                   	nop

c001b108 <Device::preOpenPCI(PCIDeviceInfo)>:
c001b108:	57                   	push   edi
c001b109:	b9 09 00 00 00       	mov    ecx,0x9
c001b10e:	56                   	push   esi
c001b10f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b113:	8d 74 24 10          	lea    esi,[esp+0x10]
c001b117:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001b121:	81 c7 18 01 00 00    	add    edi,0x118
c001b127:	fc                   	cld    
c001b128:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b12a:	5e                   	pop    esi
c001b12b:	5f                   	pop    edi
c001b12c:	c3                   	ret    
c001b12d:	90                   	nop

c001b12e <Device::preOpenACPI(void*, char*, char*)>:
c001b12e:	57                   	push   edi
c001b12f:	b9 1e 00 00 00       	mov    ecx,0x1e
c001b134:	56                   	push   esi
c001b135:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b139:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b13d:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c001b147:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c001b14d:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c001b153:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b157:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b159:	b9 0e 00 00 00       	mov    ecx,0xe
c001b15e:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c001b164:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b168:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b16a:	5e                   	pop    esi
c001b16b:	5f                   	pop    edi
c001b16c:	c3                   	ret    
c001b16d:	90                   	nop

c001b16e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001b16e:	53                   	push   ebx
c001b16f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b173:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b177:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b17b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b17f:	0f b6 c0             	movzx  eax,al
c001b182:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b186:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b18a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b18e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b192:	5b                   	pop    ebx
c001b193:	e9 c0 05 00 00       	jmp    c001b758 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c001b198 <Device::getParent()>:
c001b198:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b19c:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c001b1a2:	c3                   	ret    
c001b1a3:	90                   	nop

c001b1a4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001b1a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b1a8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b1ac:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c001b1b1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b1b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b1b9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b1bd:	e9 fe 06 00 00       	jmp    c001b8c0 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c001b1c2 <Device::addChild(Device*)>:
c001b1c2:	53                   	push   ebx
c001b1c3:	83 ec 08             	sub    esp,0x8
c001b1c6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b1ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b1ce:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001b1d4:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001b1da:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b1dc:	85 d2                	test   edx,edx
c001b1de:	74 04                	je     c001b1e4 <Device::addChild(Device*)+0x22>
c001b1e0:	89 d3                	mov    ebx,edx
c001b1e2:	eb f6                	jmp    c001b1da <Device::addChild(Device*)+0x18>
c001b1e4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001b1e7:	83 ec 0c             	sub    esp,0xc
c001b1ea:	6a 08                	push   0x8
c001b1ec:	e8 c1 b0 ff ff       	call   c00162b2 <malloc>
c001b1f1:	89 03                	mov    DWORD PTR [ebx],eax
c001b1f3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b1f9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b200:	83 c4 18             	add    esp,0x18
c001b203:	5b                   	pop    ebx
c001b204:	c3                   	ret    
c001b205:	90                   	nop

c001b206 <Device::removeAllChildren()>:
c001b206:	56                   	push   esi
c001b207:	53                   	push   ebx
c001b208:	52                   	push   edx
c001b209:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b20d:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c001b213:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b216:	74 17                	je     c001b22f <Device::removeAllChildren()+0x29>
c001b218:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001b21b:	85 c0                	test   eax,eax
c001b21d:	74 0c                	je     c001b22b <Device::removeAllChildren()+0x25>
c001b21f:	83 ec 0c             	sub    esp,0xc
c001b222:	8b 10                	mov    edx,DWORD PTR [eax]
c001b224:	50                   	push   eax
c001b225:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001b228:	83 c4 10             	add    esp,0x10
c001b22b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b22d:	eb e4                	jmp    c001b213 <Device::removeAllChildren()+0xd>
c001b22f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b235:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b23b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b241:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b248:	58                   	pop    eax
c001b249:	5b                   	pop    ebx
c001b24a:	5e                   	pop    esi
c001b24b:	c3                   	ret    

c001b24c <Device::hibernateAll()>:
c001b24c:	53                   	push   ebx
c001b24d:	83 ec 14             	sub    esp,0x14
c001b250:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b254:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b256:	53                   	push   ebx
c001b257:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b25a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b260:	83 c4 10             	add    esp,0x10
c001b263:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b266:	74 0f                	je     c001b277 <Device::hibernateAll()+0x2b>
c001b268:	83 ec 0c             	sub    esp,0xc
c001b26b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b26e:	e8 d9 ff ff ff       	call   c001b24c <Device::hibernateAll()>
c001b273:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b275:	eb e9                	jmp    c001b260 <Device::hibernateAll()+0x14>
c001b277:	83 c4 08             	add    esp,0x8
c001b27a:	5b                   	pop    ebx
c001b27b:	c3                   	ret    

c001b27c <Device::wakeAll()>:
c001b27c:	53                   	push   ebx
c001b27d:	83 ec 14             	sub    esp,0x14
c001b280:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b284:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b286:	53                   	push   ebx
c001b287:	ff 50 14             	call   DWORD PTR [eax+0x14]
c001b28a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b290:	83 c4 10             	add    esp,0x10
c001b293:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b296:	74 0f                	je     c001b2a7 <Device::wakeAll()+0x2b>
c001b298:	83 ec 0c             	sub    esp,0xc
c001b29b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b29e:	e8 d9 ff ff ff       	call   c001b27c <Device::wakeAll()>
c001b2a3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b2a5:	eb e9                	jmp    c001b290 <Device::wakeAll()+0x14>
c001b2a7:	83 c4 08             	add    esp,0x8
c001b2aa:	5b                   	pop    ebx
c001b2ab:	c3                   	ret    

c001b2ac <Device::detectAll()>:
c001b2ac:	53                   	push   ebx
c001b2ad:	83 ec 14             	sub    esp,0x14
c001b2b0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b2b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b2b6:	53                   	push   ebx
c001b2b7:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001b2ba:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b2c0:	83 c4 10             	add    esp,0x10
c001b2c3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b2c6:	74 0f                	je     c001b2d7 <Device::detectAll()+0x2b>
c001b2c8:	83 ec 0c             	sub    esp,0xc
c001b2cb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b2ce:	e8 d9 ff ff ff       	call   c001b2ac <Device::detectAll()>
c001b2d3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b2d5:	eb e9                	jmp    c001b2c0 <Device::detectAll()+0x14>
c001b2d7:	83 c4 08             	add    esp,0x8
c001b2da:	5b                   	pop    ebx
c001b2db:	c3                   	ret    

c001b2dc <Device::disableLegacyAll()>:
c001b2dc:	c3                   	ret    
c001b2dd:	90                   	nop

c001b2de <Device::loadDriversForAll()>:
c001b2de:	c3                   	ret    
c001b2df:	90                   	nop

c001b2e0 <Device::powerSavingAll(PowerSavingLevel)>:
c001b2e0:	56                   	push   esi
c001b2e1:	53                   	push   ebx
c001b2e2:	83 ec 0c             	sub    esp,0xc
c001b2e5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b2e9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b2ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b2ef:	56                   	push   esi
c001b2f0:	53                   	push   ebx
c001b2f1:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001b2f4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b2fa:	83 c4 10             	add    esp,0x10
c001b2fd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b300:	74 0f                	je     c001b311 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001b302:	52                   	push   edx
c001b303:	52                   	push   edx
c001b304:	56                   	push   esi
c001b305:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b308:	e8 d3 ff ff ff       	call   c001b2e0 <Device::powerSavingAll(PowerSavingLevel)>
c001b30d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b30f:	eb e9                	jmp    c001b2fa <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001b311:	58                   	pop    eax
c001b312:	5b                   	pop    ebx
c001b313:	5e                   	pop    esi
c001b314:	c3                   	ret    
c001b315:	90                   	nop

c001b316 <Device::setName(char const*)>:
c001b316:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001b31e:	e9 1d 53 fe ff       	jmp    c0000640 <strcpy>
c001b323:	90                   	nop

c001b324 <Device::Device(char const*)>:
c001b324:	83 ec 1c             	sub    esp,0x1c
c001b327:	ba bc 1a 03 c0       	mov    edx,0xc0031abc
c001b32c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b330:	89 10                	mov    DWORD PTR [eax],edx
c001b332:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b336:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001b340:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b344:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001b34e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b352:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b35c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b360:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001b36a:	83 ec 08             	sub    esp,0x8
c001b36d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b371:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b375:	e8 9c ff ff ff       	call   c001b316 <Device::setName(char const*)>
c001b37a:	83 c4 10             	add    esp,0x10
c001b37d:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c001b385:	83 ec 0c             	sub    esp,0xc
c001b388:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b38c:	e8 21 af ff ff       	call   c00162b2 <malloc>
c001b391:	83 c4 10             	add    esp,0x10
c001b394:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b39a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b3a1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b3a5:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c001b3ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3af:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001b3b5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b3bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3bf:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001b3c5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b3cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3d0:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c001b3d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3db:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c001b3e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3e6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b3f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3f4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001b3fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b402:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001b40c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b410:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c001b41a:	90                   	nop
c001b41b:	83 c4 1c             	add    esp,0x1c
c001b41e:	c3                   	ret    
c001b41f:	90                   	nop

c001b420 <Device::getName()>:
c001b420:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b424:	05 d0 00 00 00       	add    eax,0xd0
c001b429:	c3                   	ret    

c001b42a <Device::closeAll()>:
c001b42a:	53                   	push   ebx
c001b42b:	83 ec 08             	sub    esp,0x8
c001b42e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b432:	53                   	push   ebx
c001b433:	e8 e8 ff ff ff       	call   c001b420 <Device::getName()>
c001b438:	52                   	push   edx
c001b439:	50                   	push   eax
c001b43a:	68 a8 1a 03 c0       	push   0xc0031aa8
c001b43f:	e8 fd dc ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c001b444:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b446:	6a 00                	push   0x0
c001b448:	6a 00                	push   0x0
c001b44a:	6a 00                	push   0x0
c001b44c:	53                   	push   ebx
c001b44d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b450:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b456:	83 c4 20             	add    esp,0x20
c001b459:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b45c:	74 12                	je     c001b470 <Device::closeAll()+0x46>
c001b45e:	83 ec 0c             	sub    esp,0xc
c001b461:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b464:	e8 c1 ff ff ff       	call   c001b42a <Device::closeAll()>
c001b469:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b46b:	83 c4 10             	add    esp,0x10
c001b46e:	eb e9                	jmp    c001b459 <Device::closeAll()+0x2f>
c001b470:	83 c4 08             	add    esp,0x8
c001b473:	5b                   	pop    ebx
c001b474:	c3                   	ret    
c001b475:	90                   	nop

c001b476 <DriverlessDevice::DriverlessDevice(char const*)>:
c001b476:	83 ec 0c             	sub    esp,0xc
c001b479:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b47d:	83 ec 08             	sub    esp,0x8
c001b480:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b484:	50                   	push   eax
c001b485:	e8 9a fe ff ff       	call   c001b324 <Device::Device(char const*)>
c001b48a:	83 c4 10             	add    esp,0x10
c001b48d:	ba e8 1a 03 c0       	mov    edx,0xc0031ae8
c001b492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b496:	89 10                	mov    DWORD PTR [eax],edx
c001b498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b49c:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c001b4a6:	90                   	nop
c001b4a7:	83 c4 0c             	add    esp,0xc
c001b4aa:	c3                   	ret    
c001b4ab:	90                   	nop

c001b4ac <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001b4ac:	57                   	push   edi
c001b4ad:	56                   	push   esi
c001b4ae:	53                   	push   ebx
c001b4af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b4b3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b4b7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b4bb:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001b4c1:	75 0c                	jne    c001b4cf <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001b4c3:	52                   	push   edx
c001b4c4:	52                   	push   edx
c001b4c5:	53                   	push   ebx
c001b4c6:	56                   	push   esi
c001b4c7:	e8 26 32 01 00       	call   c002e6f2 <LinkedList<Device>::addElement(Device*)>
c001b4cc:	83 c4 10             	add    esp,0x10
c001b4cf:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b4d5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b4d8:	74 12                	je     c001b4ec <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001b4da:	50                   	push   eax
c001b4db:	57                   	push   edi
c001b4dc:	56                   	push   esi
c001b4dd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b4e0:	e8 c7 ff ff ff       	call   c001b4ac <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001b4e5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b4e7:	83 c4 10             	add    esp,0x10
c001b4ea:	eb e9                	jmp    c001b4d5 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001b4ec:	5b                   	pop    ebx
c001b4ed:	5e                   	pop    esi
c001b4ee:	5f                   	pop    edi
c001b4ef:	c3                   	ret    

c001b4f0 <getDevicesOfType(DeviceType)>:
c001b4f0:	53                   	push   ebx
c001b4f1:	83 ec 14             	sub    esp,0x14
c001b4f4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b4f8:	53                   	push   ebx
c001b4f9:	e8 d0 32 01 00       	call   c002e7ce <LinkedList<Device>::LinkedList()>
c001b4fe:	83 c4 0c             	add    esp,0xc
c001b501:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b505:	53                   	push   ebx
c001b506:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c001b50c:	e8 9b ff ff ff       	call   c001b4ac <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001b511:	89 d8                	mov    eax,ebx
c001b513:	83 c4 18             	add    esp,0x18
c001b516:	5b                   	pop    ebx
c001b517:	c2 04 00             	ret    0x4
c001b51a:	66 90                	xchg   ax,ax

c001b51c <HardDiskController::HardDiskController(char const*)>:
c001b51c:	83 ec 0c             	sub    esp,0xc
c001b51f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b523:	83 ec 08             	sub    esp,0x8
c001b526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b52a:	50                   	push   eax
c001b52b:	e8 f4 fd ff ff       	call   c001b324 <Device::Device(char const*)>
c001b530:	83 c4 10             	add    esp,0x10
c001b533:	ba 14 1b 03 c0       	mov    edx,0xc0031b14
c001b538:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b53c:	89 10                	mov    DWORD PTR [eax],edx
c001b53e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b542:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c001b54c:	90                   	nop
c001b54d:	83 c4 0c             	add    esp,0xc
c001b550:	c3                   	ret    
c001b551:	90                   	nop
c001b552:	66 90                	xchg   ax,ax

c001b554 <HardDiskController::~HardDiskController()>:
c001b554:	83 ec 0c             	sub    esp,0xc
c001b557:	ba 14 1b 03 c0       	mov    edx,0xc0031b14
c001b55c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b560:	89 10                	mov    DWORD PTR [eax],edx
c001b562:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b566:	83 ec 0c             	sub    esp,0xc
c001b569:	50                   	push   eax
c001b56a:	e8 55 fb ff ff       	call   c001b0c4 <Device::~Device()>
c001b56f:	83 c4 10             	add    esp,0x10
c001b572:	90                   	nop
c001b573:	83 c4 0c             	add    esp,0xc
c001b576:	c3                   	ret    
c001b577:	90                   	nop

c001b578 <HardDiskController::~HardDiskController()>:
c001b578:	83 ec 0c             	sub    esp,0xc
c001b57b:	83 ec 0c             	sub    esp,0xc
c001b57e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b582:	e8 cd ff ff ff       	call   c001b554 <HardDiskController::~HardDiskController()>
c001b587:	83 c4 10             	add    esp,0x10
c001b58a:	83 ec 08             	sub    esp,0x8
c001b58d:	68 58 01 00 00       	push   0x158
c001b592:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b596:	e8 79 da ff ff       	call   c0019014 <operator delete(void*, unsigned long)>
c001b59b:	83 c4 10             	add    esp,0x10
c001b59e:	83 c4 0c             	add    esp,0xc
c001b5a1:	c3                   	ret    

c001b5a2 <PhysicalDisk::eject()>:
c001b5a2:	83 c8 ff             	or     eax,0xffffffff
c001b5a5:	c3                   	ret    

c001b5a6 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001b5a6:	83 ec 0c             	sub    esp,0xc
c001b5a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5ad:	83 ec 08             	sub    esp,0x8
c001b5b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b5b4:	50                   	push   eax
c001b5b5:	e8 6a fd ff ff       	call   c001b324 <Device::Device(char const*)>
c001b5ba:	83 c4 10             	add    esp,0x10
c001b5bd:	ba 40 1b 03 c0       	mov    edx,0xc0031b40
c001b5c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5c6:	89 10                	mov    DWORD PTR [eax],edx
c001b5c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5cc:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001b5d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5d7:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001b5de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5e2:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c001b5ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5f0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b5f4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b5fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5fe:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001b608:	90                   	nop
c001b609:	83 c4 0c             	add    esp,0xc
c001b60c:	c3                   	ret    
c001b60d:	90                   	nop

c001b60e <PhysicalDisk::startCache()>:
c001b60e:	56                   	push   esi
c001b60f:	53                   	push   ebx
c001b610:	83 ec 10             	sub    esp,0x10
c001b613:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b617:	6a 44                	push   0x44
c001b619:	e8 94 ac ff ff       	call   c00162b2 <malloc>
c001b61e:	89 c6                	mov    esi,eax
c001b620:	58                   	pop    eax
c001b621:	5a                   	pop    edx
c001b622:	53                   	push   ebx
c001b623:	56                   	push   esi
c001b624:	e8 6f 17 00 00       	call   c001cd98 <VCache::VCache(PhysicalDisk*)>
c001b629:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001b62f:	83 c4 14             	add    esp,0x14
c001b632:	5b                   	pop    ebx
c001b633:	5e                   	pop    esi
c001b634:	c3                   	ret    
c001b635:	90                   	nop

c001b636 <PhysicalDisk::~PhysicalDisk()>:
c001b636:	83 ec 0c             	sub    esp,0xc
c001b639:	ba 40 1b 03 c0       	mov    edx,0xc0031b40
c001b63e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b642:	89 10                	mov    DWORD PTR [eax],edx
c001b644:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b648:	83 ec 0c             	sub    esp,0xc
c001b64b:	50                   	push   eax
c001b64c:	e8 73 fa ff ff       	call   c001b0c4 <Device::~Device()>
c001b651:	83 c4 10             	add    esp,0x10
c001b654:	90                   	nop
c001b655:	83 c4 0c             	add    esp,0xc
c001b658:	c3                   	ret    
c001b659:	90                   	nop

c001b65a <PhysicalDisk::~PhysicalDisk()>:
c001b65a:	83 ec 0c             	sub    esp,0xc
c001b65d:	83 ec 0c             	sub    esp,0xc
c001b660:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b664:	e8 cd ff ff ff       	call   c001b636 <PhysicalDisk::~PhysicalDisk()>
c001b669:	83 c4 10             	add    esp,0x10
c001b66c:	83 ec 08             	sub    esp,0x8
c001b66f:	68 6c 01 00 00       	push   0x16c
c001b674:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b678:	e8 97 d9 ff ff       	call   c0019014 <operator delete(void*, unsigned long)>
c001b67d:	83 c4 10             	add    esp,0x10
c001b680:	83 c4 0c             	add    esp,0xc
c001b683:	c3                   	ret    

c001b684 <int_handler>:
c001b684:	55                   	push   ebp
c001b685:	57                   	push   edi
c001b686:	56                   	push   esi
c001b687:	53                   	push   ebx
c001b688:	83 ec 0c             	sub    esp,0xc
c001b68b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b68f:	80 3d 88 f9 03 c0 00 	cmp    BYTE PTR ds:0xc003f988,0x0
c001b696:	74 0b                	je     c001b6a3 <int_handler+0x1f>
c001b698:	fa                   	cli    
c001b699:	f4                   	hlt    
c001b69a:	80 3d 88 f9 03 c0 00 	cmp    BYTE PTR ds:0xc003f988,0x0
c001b6a1:	75 f5                	jne    c001b698 <int_handler+0x14>
c001b6a3:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c001b6a6:	8d 46 e0             	lea    eax,[esi-0x20]
c001b6a9:	83 f8 17             	cmp    eax,0x17
c001b6ac:	76 40                	jbe    c001b6ee <int_handler+0x6a>
c001b6ae:	c1 e6 04             	shl    esi,0x4
c001b6b1:	31 db                	xor    ebx,ebx
c001b6b3:	8d ae 20 df 03 c0    	lea    ebp,[esi-0x3ffc20e0]
c001b6b9:	81 c6 20 cf 03 c0    	add    esi,0xc003cf20
c001b6bf:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001b6c3:	85 c0                	test   eax,eax
c001b6c5:	74 13                	je     c001b6da <int_handler+0x56>
c001b6c7:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c001b6ca:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c001b6ce:	74 2c                	je     c001b6fc <int_handler+0x78>
c001b6d0:	83 ec 08             	sub    esp,0x8
c001b6d3:	52                   	push   edx
c001b6d4:	57                   	push   edi
c001b6d5:	ff d0                	call   eax
c001b6d7:	83 c4 10             	add    esp,0x10
c001b6da:	83 c3 01             	add    ebx,0x1
c001b6dd:	83 fb 04             	cmp    ebx,0x4
c001b6e0:	75 dd                	jne    c001b6bf <int_handler+0x3b>
c001b6e2:	83 c4 0c             	add    esp,0xc
c001b6e5:	31 c0                	xor    eax,eax
c001b6e7:	5b                   	pop    ebx
c001b6e8:	31 d2                	xor    edx,edx
c001b6ea:	5e                   	pop    esi
c001b6eb:	5f                   	pop    edi
c001b6ec:	5d                   	pop    ebp
c001b6ed:	c3                   	ret    
c001b6ee:	83 ec 0c             	sub    esp,0xc
c001b6f1:	50                   	push   eax
c001b6f2:	e8 69 b7 00 00       	call   c0026e60 <HalEndOfInterrupt(int)>
c001b6f7:	83 c4 10             	add    esp,0x10
c001b6fa:	eb b2                	jmp    c001b6ae <int_handler+0x2a>
c001b6fc:	83 ec 08             	sub    esp,0x8
c001b6ff:	52                   	push   edx
c001b700:	57                   	push   edi
c001b701:	ff d0                	call   eax
c001b703:	83 c4 10             	add    esp,0x10
c001b706:	83 c4 0c             	add    esp,0xc
c001b709:	5b                   	pop    ebx
c001b70a:	5e                   	pop    esi
c001b70b:	5f                   	pop    edi
c001b70c:	5d                   	pop    ebp
c001b70d:	c3                   	ret    

c001b70e <installISRHandler(int, void (*)(regs*, void*), void*)>:
c001b70e:	56                   	push   esi
c001b70f:	31 c0                	xor    eax,eax
c001b711:	53                   	push   ebx
c001b712:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b716:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b71a:	89 ca                	mov    edx,ecx
c001b71c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b720:	c1 e2 04             	shl    edx,0x4
c001b723:	83 bc 82 20 df 03 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffc20e0],0x0
c001b72b:	74 17                	je     c001b744 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001b72d:	83 c0 01             	add    eax,0x1
c001b730:	83 f8 04             	cmp    eax,0x4
c001b733:	75 ee                	jne    c001b723 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001b735:	c7 44 24 0c 70 1b 03 c0 	mov    DWORD PTR [esp+0xc],0xc0031b70
c001b73d:	5b                   	pop    ebx
c001b73e:	5e                   	pop    esi
c001b73f:	e9 07 49 00 00       	jmp    c002004b <KePanic(char const*)>
c001b744:	8d 04 88             	lea    eax,[eax+ecx*4]
c001b747:	89 1c 85 20 df 03 c0 	mov    DWORD PTR [eax*4-0x3ffc20e0],ebx
c001b74e:	89 34 85 20 cf 03 c0 	mov    DWORD PTR [eax*4-0x3ffc30e0],esi
c001b755:	5b                   	pop    ebx
c001b756:	5e                   	pop    esi
c001b757:	c3                   	ret    

c001b758 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001b758:	57                   	push   edi
c001b759:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c001b75f:	56                   	push   esi
c001b760:	53                   	push   ebx
c001b761:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b765:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b769:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001b770:	74 54                	je     c001b7c6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c001b772:	89 c7                	mov    edi,eax
c001b774:	84 c0                	test   al,al
c001b776:	74 1d                	je     c001b795 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c001b778:	83 fe 0f             	cmp    esi,0xf
c001b77b:	0f 8f d5 00 00 00    	jg     c001b856 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c001b781:	0f b6 b6 88 37 03 c0 	movzx  esi,BYTE PTR [esi-0x3ffcc878]
c001b788:	0f b7 bc 36 c0 f6 03 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffc0940]
c001b790:	d1 ef                	shr    edi,1
c001b792:	83 e7 01             	and    edi,0x1
c001b795:	83 ec 08             	sub    esp,0x8
c001b798:	a1 c0 0b 04 c0       	mov    eax,ds:0xc0040bc0
c001b79d:	31 db                	xor    ebx,ebx
c001b79f:	50                   	push   eax
c001b7a0:	68 7d 1b 03 c0       	push   0xc0031b7d
c001b7a5:	e8 97 d9 ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c001b7aa:	83 c4 10             	add    esp,0x10
c001b7ad:	a1 c0 0b 04 c0       	mov    eax,ds:0xc0040bc0
c001b7b2:	85 c0                	test   eax,eax
c001b7b4:	7f 55                	jg     c001b80b <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c001b7b6:	83 ec 0c             	sub    esp,0xc
c001b7b9:	68 94 1b 03 c0       	push   0xc0031b94
c001b7be:	e8 88 48 00 00       	call   c002004b <KePanic(char const*)>
c001b7c3:	83 c4 10             	add    esp,0x10
c001b7c6:	8d 7e 20             	lea    edi,[esi+0x20]
c001b7c9:	89 f8                	mov    eax,edi
c001b7cb:	31 d2                	xor    edx,edx
c001b7cd:	c1 e0 04             	shl    eax,0x4
c001b7d0:	8b 8c 90 20 df 03 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffc20e0]
c001b7d7:	85 c9                	test   ecx,ecx
c001b7d9:	0f 84 8e 00 00 00    	je     c001b86d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c001b7df:	83 c2 01             	add    edx,0x1
c001b7e2:	83 fa 04             	cmp    edx,0x4
c001b7e5:	75 e9                	jne    c001b7d0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c001b7e7:	83 ec 0c             	sub    esp,0xc
c001b7ea:	68 e8 1b 03 c0       	push   0xc0031be8
c001b7ef:	e8 57 48 00 00       	call   c002004b <KePanic(char const*)>
c001b7f4:	83 c4 10             	add    esp,0x10
c001b7f7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b7fc:	5b                   	pop    ebx
c001b7fd:	5e                   	pop    esi
c001b7fe:	5f                   	pop    edi
c001b7ff:	c3                   	ret    
c001b800:	83 c3 01             	add    ebx,0x1
c001b803:	39 1d c0 0b 04 c0    	cmp    DWORD PTR ds:0xc0040bc0,ebx
c001b809:	7e ab                	jle    c001b7b6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c001b80b:	83 ec 08             	sub    esp,0x8
c001b80e:	8b 04 9d e0 0b 04 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffbf420]
c001b815:	56                   	push   esi
c001b816:	50                   	push   eax
c001b817:	e8 24 1e 01 00       	call   c002d640 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001b81c:	83 c4 10             	add    esp,0x10
c001b81f:	84 c0                	test   al,al
c001b821:	74 dd                	je     c001b800 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c001b823:	83 ec 04             	sub    esp,0x4
c001b826:	89 f8                	mov    eax,edi
c001b828:	8b 1c 9d e0 0b 04 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffbf420]
c001b82f:	0f b6 f8             	movzx  edi,al
c001b832:	57                   	push   edi
c001b833:	8d 7e 20             	lea    edi,[esi+0x20]
c001b836:	6a 00                	push   0x0
c001b838:	89 f8                	mov    eax,edi
c001b83a:	0f b6 c0             	movzx  eax,al
c001b83d:	50                   	push   eax
c001b83e:	89 f0                	mov    eax,esi
c001b840:	6a 00                	push   0x0
c001b842:	0f b6 c0             	movzx  eax,al
c001b845:	6a 00                	push   0x0
c001b847:	50                   	push   eax
c001b848:	53                   	push   ebx
c001b849:	e8 5e 1f 01 00       	call   c002d7ac <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001b84e:	83 c4 20             	add    esp,0x20
c001b851:	e9 73 ff ff ff       	jmp    c001b7c9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c001b856:	83 ec 0c             	sub    esp,0xc
c001b859:	31 ff                	xor    edi,edi
c001b85b:	68 b0 1b 03 c0       	push   0xc0031bb0
c001b860:	e8 e6 47 00 00       	call   c002004b <KePanic(char const*)>
c001b865:	83 c4 10             	add    esp,0x10
c001b868:	e9 28 ff ff ff       	jmp    c001b795 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c001b86d:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b870:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b874:	89 14 85 20 df 03 c0 	mov    DWORD PTR [eax*4-0x3ffc20e0],edx
c001b87b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b87f:	5b                   	pop    ebx
c001b880:	89 14 85 20 cf 03 c0 	mov    DWORD PTR [eax*4-0x3ffc30e0],edx
c001b887:	89 f0                	mov    eax,esi
c001b889:	5e                   	pop    esi
c001b88a:	5f                   	pop    edi
c001b88b:	c3                   	ret    

c001b88c <uninstallISRHandler(int, void (*)(regs*, void*))>:
c001b88c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b890:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b894:	c1 e0 04             	shl    eax,0x4
c001b897:	8d 50 10             	lea    edx,[eax+0x10]
c001b89a:	39 88 20 df 03 c0    	cmp    DWORD PTR [eax-0x3ffc20e0],ecx
c001b8a0:	74 08                	je     c001b8aa <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001b8a2:	83 c0 04             	add    eax,0x4
c001b8a5:	39 d0                	cmp    eax,edx
c001b8a7:	75 f1                	jne    c001b89a <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001b8a9:	c3                   	ret    
c001b8aa:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001b8b4:	c7 80 20 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e0],0x0
c001b8be:	eb e2                	jmp    c001b8a2 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001b8c0 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001b8c0:	53                   	push   ebx
c001b8c1:	83 ec 08             	sub    esp,0x8
c001b8c4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b8c8:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001b8cd:	74 0e                	je     c001b8dd <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001b8cf:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001b8d4:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c001b8db:	75 37                	jne    c001b914 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c001b8dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8e1:	83 c0 20             	add    eax,0x20
c001b8e4:	c1 e0 04             	shl    eax,0x4
c001b8e7:	8d 50 10             	lea    edx,[eax+0x10]
c001b8ea:	39 98 20 df 03 c0    	cmp    DWORD PTR [eax-0x3ffc20e0],ebx
c001b8f0:	74 0c                	je     c001b8fe <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c001b8f2:	83 c0 04             	add    eax,0x4
c001b8f5:	39 d0                	cmp    eax,edx
c001b8f7:	75 f1                	jne    c001b8ea <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c001b8f9:	83 c4 08             	add    esp,0x8
c001b8fc:	5b                   	pop    ebx
c001b8fd:	c3                   	ret    
c001b8fe:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001b908:	c7 80 20 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e0],0x0
c001b912:	eb de                	jmp    c001b8f2 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c001b914:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c001b919:	7f 11                	jg     c001b92c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c001b91b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b91f:	0f b6 80 88 37 03 c0 	movzx  eax,BYTE PTR [eax-0x3ffcc878]
c001b926:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b92a:	eb b1                	jmp    c001b8dd <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001b92c:	83 ec 0c             	sub    esp,0xc
c001b92f:	68 a1 1b 03 c0       	push   0xc0031ba1
c001b934:	e8 12 47 00 00       	call   c002004b <KePanic(char const*)>
c001b939:	83 c4 10             	add    esp,0x10
c001b93c:	eb 9f                	jmp    c001b8dd <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c001b93e <setupINTS()>:
c001b93e:	31 c0                	xor    eax,eax
c001b940:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001b94a:	c7 80 20 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e0],0x0
c001b954:	c7 80 24 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20dc],0x0
c001b95e:	c7 80 24 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30dc],0x0
c001b968:	c7 80 28 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20d8],0x0
c001b972:	c7 80 28 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30d8],0x0
c001b97c:	c7 80 2c df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20d4],0x0
c001b986:	c7 80 2c cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30d4],0x0
c001b990:	83 c0 10             	add    eax,0x10
c001b993:	3d 00 10 00 00       	cmp    eax,0x1000
c001b998:	75 a6                	jne    c001b940 <setupINTS()+0x2>
c001b99a:	c3                   	ret    

c001b99b <convertLegacyIRQNumber(int)>:
c001b99b:	83 ec 0c             	sub    esp,0xc
c001b99e:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c001b9a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9a8:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001b9af:	74 0c                	je     c001b9bd <convertLegacyIRQNumber(int)+0x22>
c001b9b1:	83 f8 0f             	cmp    eax,0xf
c001b9b4:	7f 0b                	jg     c001b9c1 <convertLegacyIRQNumber(int)+0x26>
c001b9b6:	0f b6 80 88 37 03 c0 	movzx  eax,BYTE PTR [eax-0x3ffcc878]
c001b9bd:	83 c4 0c             	add    esp,0xc
c001b9c0:	c3                   	ret    
c001b9c1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b9c5:	83 ec 0c             	sub    esp,0xc
c001b9c8:	68 b0 1b 03 c0       	push   0xc0031bb0
c001b9cd:	e8 79 46 00 00       	call   c002004b <KePanic(char const*)>
c001b9d2:	83 c4 10             	add    esp,0x10
c001b9d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9d9:	83 c4 0c             	add    esp,0xc
c001b9dc:	c3                   	ret    
c001b9dd:	90                   	nop

c001b9de <startGUI(void*)>:
c001b9de:	55                   	push   ebp
c001b9df:	89 e5                	mov    ebp,esp
c001b9e1:	53                   	push   ebx
c001b9e2:	83 ec 04             	sub    esp,0x4
c001b9e5:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001b9ea:	83 e8 01             	sub    eax,0x1
c001b9ed:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001b9f2:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001b9f7:	85 c0                	test   eax,eax
c001b9f9:	75 01                	jne    c001b9fc <startGUI(void*)+0x1e>
c001b9fb:	fb                   	sti    
c001b9fc:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001ba02:	83 ec 08             	sub    esp,0x8
c001ba05:	6a 01                	push   0x1
c001ba07:	68 0d 1c 03 c0       	push   0xc0031c0d
c001ba0c:	e8 c0 86 00 00       	call   c00240d1 <Thr::loadDLL(char const*, bool)>
c001ba11:	83 c4 10             	add    esp,0x10
c001ba14:	83 ec 08             	sub    esp,0x8
c001ba17:	53                   	push   ebx
c001ba18:	50                   	push   eax
c001ba19:	e8 05 89 00 00       	call   c0024323 <Thr::executeDLL(unsigned long, void*)>
c001ba1e:	83 c4 10             	add    esp,0x10
c001ba21:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001ba27:	83 ec 08             	sub    esp,0x8
c001ba2a:	6a 01                	push   0x1
c001ba2c:	68 27 1c 03 c0       	push   0xc0031c27
c001ba31:	e8 9b 86 00 00       	call   c00240d1 <Thr::loadDLL(char const*, bool)>
c001ba36:	83 c4 10             	add    esp,0x10
c001ba39:	83 ec 08             	sub    esp,0x8
c001ba3c:	53                   	push   ebx
c001ba3d:	50                   	push   eax
c001ba3e:	e8 e0 88 00 00       	call   c0024323 <Thr::executeDLL(unsigned long, void*)>
c001ba43:	83 c4 10             	add    esp,0x10
c001ba46:	eb fe                	jmp    c001ba46 <startGUI(void*)+0x68>

c001ba48 <startGUIVESA(void*)>:
c001ba48:	55                   	push   ebp
c001ba49:	89 e5                	mov    ebp,esp
c001ba4b:	53                   	push   ebx
c001ba4c:	83 ec 04             	sub    esp,0x4
c001ba4f:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001ba54:	83 e8 01             	sub    eax,0x1
c001ba57:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001ba5c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001ba61:	85 c0                	test   eax,eax
c001ba63:	75 01                	jne    c001ba66 <startGUIVESA(void*)+0x1e>
c001ba65:	fb                   	sti    
c001ba66:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001ba6c:	83 ec 08             	sub    esp,0x8
c001ba6f:	6a 01                	push   0x1
c001ba71:	68 45 1c 03 c0       	push   0xc0031c45
c001ba76:	e8 56 86 00 00       	call   c00240d1 <Thr::loadDLL(char const*, bool)>
c001ba7b:	83 c4 10             	add    esp,0x10
c001ba7e:	83 ec 08             	sub    esp,0x8
c001ba81:	53                   	push   ebx
c001ba82:	50                   	push   eax
c001ba83:	e8 9b 88 00 00       	call   c0024323 <Thr::executeDLL(unsigned long, void*)>
c001ba88:	83 c4 10             	add    esp,0x10
c001ba8b:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001ba91:	83 ec 08             	sub    esp,0x8
c001ba94:	6a 01                	push   0x1
c001ba96:	68 27 1c 03 c0       	push   0xc0031c27
c001ba9b:	e8 31 86 00 00       	call   c00240d1 <Thr::loadDLL(char const*, bool)>
c001baa0:	83 c4 10             	add    esp,0x10
c001baa3:	83 ec 08             	sub    esp,0x8
c001baa6:	53                   	push   ebx
c001baa7:	50                   	push   eax
c001baa8:	e8 76 88 00 00       	call   c0024323 <Thr::executeDLL(unsigned long, void*)>
c001baad:	83 c4 10             	add    esp,0x10
c001bab0:	eb fe                	jmp    c001bab0 <startGUIVESA(void*)+0x68>

c001bab2 <sendKeyToTerminal(unsigned char)>:
c001bab2:	55                   	push   ebp
c001bab3:	89 e5                	mov    ebp,esp
c001bab5:	83 ec 28             	sub    esp,0x28
c001bab8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001babb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001babe:	a1 08 aa 03 c0       	mov    eax,ds:0xc003aa08
c001bac3:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c001bac7:	83 ec 08             	sub    esp,0x8
c001baca:	52                   	push   edx
c001bacb:	50                   	push   eax
c001bacc:	e8 e1 ba ff ff       	call   c00175b2 <VgaText::receiveKey(unsigned char)>
c001bad1:	83 c4 10             	add    esp,0x10
c001bad4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bad8:	83 f8 0a             	cmp    eax,0xa
c001badb:	74 16                	je     c001baf3 <sendKeyToTerminal(unsigned char)+0x41>
c001badd:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bae1:	83 f8 03             	cmp    eax,0x3
c001bae4:	74 0d                	je     c001baf3 <sendKeyToTerminal(unsigned char)+0x41>
c001bae6:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001baea:	83 f8 1c             	cmp    eax,0x1c
c001baed:	0f 85 97 00 00 00    	jne    c001bb8a <sendKeyToTerminal(unsigned char)+0xd8>
c001baf3:	fa                   	cli    
c001baf4:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001baf9:	83 c0 01             	add    eax,0x1
c001bafc:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bb01:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001bb06:	83 c0 01             	add    eax,0x1
c001bb09:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c001bb0e:	a1 20 ef 03 c0       	mov    eax,ds:0xc003ef20
c001bb13:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001bb16:	c7 05 20 ef 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003ef20,0x0
c001bb20:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001bb24:	74 1f                	je     c001bb45 <sendKeyToTerminal(unsigned char)+0x93>
c001bb26:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001bb29:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001bb2c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bb2f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bb32:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001bb35:	83 ec 0c             	sub    esp,0xc
c001bb38:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001bb3b:	e8 70 95 00 00       	call   c00250b0 <unblockTask(ThreadControlBlock*)>
c001bb40:	83 c4 10             	add    esp,0x10
c001bb43:	eb db                	jmp    c001bb20 <sendKeyToTerminal(unsigned char)+0x6e>
c001bb45:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001bb4a:	83 e8 01             	sub    eax,0x1
c001bb4d:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c001bb52:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001bb57:	85 c0                	test   eax,eax
c001bb59:	75 18                	jne    c001bb73 <sendKeyToTerminal(unsigned char)+0xc1>
c001bb5b:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c001bb60:	85 c0                	test   eax,eax
c001bb62:	74 0f                	je     c001bb73 <sendKeyToTerminal(unsigned char)+0xc1>
c001bb64:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c001bb6e:	e8 25 90 00 00       	call   c0024b98 <schedule()>
c001bb73:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bb78:	83 e8 01             	sub    eax,0x1
c001bb7b:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bb80:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bb85:	85 c0                	test   eax,eax
c001bb87:	75 01                	jne    c001bb8a <sendKeyToTerminal(unsigned char)+0xd8>
c001bb89:	fb                   	sti    
c001bb8a:	90                   	nop
c001bb8b:	c9                   	leave  
c001bb8c:	c3                   	ret    

c001bb8d <sendKeyboardToken(KeyboardToken)>:
c001bb8d:	55                   	push   ebp
c001bb8e:	89 e5                	mov    ebp,esp
c001bb90:	83 ec 18             	sub    esp,0x18
c001bb93:	e8 03 45 00 00       	call   c002009b <KeUserIOReceived()>
c001bb98:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c001bb9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bb9e:	0f b7 c0             	movzx  eax,ax
c001bba1:	83 f2 01             	xor    edx,0x1
c001bba4:	88 90 40 ef 03 c0    	mov    BYTE PTR [eax-0x3ffc10c0],dl
c001bbaa:	a1 28 ef 03 c0       	mov    eax,ds:0xc003ef28
c001bbaf:	85 c0                	test   eax,eax
c001bbb1:	74 24                	je     c001bbd7 <sendKeyboardToken(KeyboardToken)+0x4a>
c001bbb3:	8b 0d 28 ef 03 c0    	mov    ecx,DWORD PTR ds:0xc003ef28
c001bbb9:	83 ec 04             	sub    esp,0x4
c001bbbc:	68 40 ef 03 c0       	push   0xc003ef40
c001bbc1:	83 ec 08             	sub    esp,0x8
c001bbc4:	89 e2                	mov    edx,esp
c001bbc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bbc9:	89 02                	mov    DWORD PTR [edx],eax
c001bbcb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001bbce:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001bbd2:	ff d1                	call   ecx
c001bbd4:	83 c4 10             	add    esp,0x10
c001bbd7:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001bbdb:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001bbde:	a0 48 f3 03 c0       	mov    al,ds:0xc003f348
c001bbe3:	0f b6 d2             	movzx  edx,dl
c001bbe6:	0f b6 c0             	movzx  eax,al
c001bbe9:	39 c2                	cmp    edx,eax
c001bbeb:	74 1c                	je     c001bc09 <sendKeyboardToken(KeyboardToken)+0x7c>
c001bbed:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001bbf0:	a2 48 f3 03 c0       	mov    ds:0xc003f348,al
c001bbf5:	a0 48 f3 03 c0       	mov    al,ds:0xc003f348
c001bbfa:	0f b6 c0             	movzx  eax,al
c001bbfd:	83 ec 0c             	sub    esp,0xc
c001bc00:	50                   	push   eax
c001bc01:	e8 f8 b0 ff ff       	call   c0016cfe <setTerminalScrollLock(bool)>
c001bc06:	83 c4 10             	add    esp,0x10
c001bc09:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001bc0c:	0f b6 c0             	movzx  eax,al
c001bc0f:	85 c0                	test   eax,eax
c001bc11:	0f 84 da 00 00 00    	je     c001bcf1 <sendKeyboardToken(KeyboardToken)+0x164>
c001bc17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bc1a:	0f b7 c0             	movzx  eax,ax
c001bc1d:	3d 18 03 00 00       	cmp    eax,0x318
c001bc22:	75 06                	jne    c001bc2a <sendKeyboardToken(KeyboardToken)+0x9d>
c001bc24:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001bc2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bc2d:	0f b7 c0             	movzx  eax,ax
c001bc30:	3d 19 03 00 00       	cmp    eax,0x319
c001bc35:	75 06                	jne    c001bc3d <sendKeyboardToken(KeyboardToken)+0xb0>
c001bc37:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c001bc3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bc40:	0f b7 c0             	movzx  eax,ax
c001bc43:	3d 1a 03 00 00       	cmp    eax,0x31a
c001bc48:	75 06                	jne    c001bc50 <sendKeyboardToken(KeyboardToken)+0xc3>
c001bc4a:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001bc50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bc53:	0f b7 c0             	movzx  eax,ax
c001bc56:	3d 1b 03 00 00       	cmp    eax,0x31b
c001bc5b:	75 06                	jne    c001bc63 <sendKeyboardToken(KeyboardToken)+0xd6>
c001bc5d:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c001bc63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bc66:	0f b7 c0             	movzx  eax,ax
c001bc69:	3d 1c 03 00 00       	cmp    eax,0x31c
c001bc6e:	75 06                	jne    c001bc76 <sendKeyboardToken(KeyboardToken)+0xe9>
c001bc70:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c001bc76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bc79:	0f b7 c0             	movzx  eax,ax
c001bc7c:	3d 1d 03 00 00       	cmp    eax,0x31d
c001bc81:	75 06                	jne    c001bc89 <sendKeyboardToken(KeyboardToken)+0xfc>
c001bc83:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001bc89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bc8c:	0f b7 c0             	movzx  eax,ax
c001bc8f:	3d 1e 03 00 00       	cmp    eax,0x31e
c001bc94:	75 06                	jne    c001bc9c <sendKeyboardToken(KeyboardToken)+0x10f>
c001bc96:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c001bc9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bc9f:	0f b7 c0             	movzx  eax,ax
c001bca2:	3d 1f 03 00 00       	cmp    eax,0x31f
c001bca7:	75 06                	jne    c001bcaf <sendKeyboardToken(KeyboardToken)+0x122>
c001bca9:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001bcaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bcb2:	0f b7 c0             	movzx  eax,ax
c001bcb5:	3d 20 03 00 00       	cmp    eax,0x320
c001bcba:	75 06                	jne    c001bcc2 <sendKeyboardToken(KeyboardToken)+0x135>
c001bcbc:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001bcc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bcc5:	0f b7 c0             	movzx  eax,ax
c001bcc8:	3d 21 03 00 00       	cmp    eax,0x321
c001bccd:	75 06                	jne    c001bcd5 <sendKeyboardToken(KeyboardToken)+0x148>
c001bccf:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001bcd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bcd8:	0f b7 c0             	movzx  eax,ax
c001bcdb:	3d 22 03 00 00       	cmp    eax,0x322
c001bce0:	0f 85 f1 00 00 00    	jne    c001bdd7 <sendKeyboardToken(KeyboardToken)+0x24a>
c001bce6:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001bcec:	e9 e6 00 00 00       	jmp    c001bdd7 <sendKeyboardToken(KeyboardToken)+0x24a>
c001bcf1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bcf4:	0f b7 c0             	movzx  eax,ax
c001bcf7:	3d 18 03 00 00       	cmp    eax,0x318
c001bcfc:	75 0a                	jne    c001bd08 <sendKeyboardToken(KeyboardToken)+0x17b>
c001bcfe:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001bd04:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bd08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd0b:	0f b7 c0             	movzx  eax,ax
c001bd0e:	3d 19 03 00 00       	cmp    eax,0x319
c001bd13:	75 0a                	jne    c001bd1f <sendKeyboardToken(KeyboardToken)+0x192>
c001bd15:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001bd1b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bd1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd22:	0f b7 c0             	movzx  eax,ax
c001bd25:	3d 1a 03 00 00       	cmp    eax,0x31a
c001bd2a:	75 0a                	jne    c001bd36 <sendKeyboardToken(KeyboardToken)+0x1a9>
c001bd2c:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001bd32:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bd36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd39:	0f b7 c0             	movzx  eax,ax
c001bd3c:	3d 1b 03 00 00       	cmp    eax,0x31b
c001bd41:	75 0a                	jne    c001bd4d <sendKeyboardToken(KeyboardToken)+0x1c0>
c001bd43:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001bd49:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bd4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd50:	0f b7 c0             	movzx  eax,ax
c001bd53:	3d 1c 03 00 00       	cmp    eax,0x31c
c001bd58:	75 0a                	jne    c001bd64 <sendKeyboardToken(KeyboardToken)+0x1d7>
c001bd5a:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001bd60:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bd64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd67:	0f b7 c0             	movzx  eax,ax
c001bd6a:	3d 1d 03 00 00       	cmp    eax,0x31d
c001bd6f:	75 0a                	jne    c001bd7b <sendKeyboardToken(KeyboardToken)+0x1ee>
c001bd71:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001bd77:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bd7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd7e:	0f b7 c0             	movzx  eax,ax
c001bd81:	3d 1e 03 00 00       	cmp    eax,0x31e
c001bd86:	75 0a                	jne    c001bd92 <sendKeyboardToken(KeyboardToken)+0x205>
c001bd88:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001bd8e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bd92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd95:	0f b7 c0             	movzx  eax,ax
c001bd98:	3d 1f 03 00 00       	cmp    eax,0x31f
c001bd9d:	75 0a                	jne    c001bda9 <sendKeyboardToken(KeyboardToken)+0x21c>
c001bd9f:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c001bda5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bda9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdac:	0f b7 c0             	movzx  eax,ax
c001bdaf:	3d 20 03 00 00       	cmp    eax,0x320
c001bdb4:	75 0a                	jne    c001bdc0 <sendKeyboardToken(KeyboardToken)+0x233>
c001bdb6:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001bdbc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bdc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdc3:	0f b7 c0             	movzx  eax,ax
c001bdc6:	3d 21 03 00 00       	cmp    eax,0x321
c001bdcb:	75 0a                	jne    c001bdd7 <sendKeyboardToken(KeyboardToken)+0x24a>
c001bdcd:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001bdd3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bdd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdda:	0f b7 c0             	movzx  eax,ax
c001bddd:	3d 00 02 00 00       	cmp    eax,0x200
c001bde2:	75 2f                	jne    c001be13 <sendKeyboardToken(KeyboardToken)+0x286>
c001bde4:	a0 40 f3 03 c0       	mov    al,ds:0xc003f340
c001bde9:	83 f0 01             	xor    eax,0x1
c001bdec:	0f b6 c0             	movzx  eax,al
c001bdef:	85 c0                	test   eax,eax
c001bdf1:	74 20                	je     c001be13 <sendKeyboardToken(KeyboardToken)+0x286>
c001bdf3:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001bdf8:	6a 01                	push   0x1
c001bdfa:	6a 00                	push   0x0
c001bdfc:	68 de b9 01 c0       	push   0xc001b9de
c001be01:	50                   	push   eax
c001be02:	e8 41 8b 00 00       	call   c0024948 <Process::createThread(void (*)(void*), void*, int)>
c001be07:	83 c4 10             	add    esp,0x10
c001be0a:	c6 05 40 f3 03 c0 01 	mov    BYTE PTR ds:0xc003f340,0x1
c001be11:	eb 3a                	jmp    c001be4d <sendKeyboardToken(KeyboardToken)+0x2c0>
c001be13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be16:	0f b7 c0             	movzx  eax,ax
c001be19:	3d 01 02 00 00       	cmp    eax,0x201
c001be1e:	75 2d                	jne    c001be4d <sendKeyboardToken(KeyboardToken)+0x2c0>
c001be20:	a0 40 f3 03 c0       	mov    al,ds:0xc003f340
c001be25:	83 f0 01             	xor    eax,0x1
c001be28:	0f b6 c0             	movzx  eax,al
c001be2b:	85 c0                	test   eax,eax
c001be2d:	74 1e                	je     c001be4d <sendKeyboardToken(KeyboardToken)+0x2c0>
c001be2f:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001be34:	6a 01                	push   0x1
c001be36:	6a 00                	push   0x0
c001be38:	68 48 ba 01 c0       	push   0xc001ba48
c001be3d:	50                   	push   eax
c001be3e:	e8 05 8b 00 00       	call   c0024948 <Process::createThread(void (*)(void*), void*, int)>
c001be43:	83 c4 10             	add    esp,0x10
c001be46:	c6 05 40 f3 03 c0 01 	mov    BYTE PTR ds:0xc003f340,0x1
c001be4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be50:	0f b7 c0             	movzx  eax,ax
c001be53:	3d 25 03 00 00       	cmp    eax,0x325
c001be58:	75 06                	jne    c001be60 <sendKeyboardToken(KeyboardToken)+0x2d3>
c001be5a:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001be60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be63:	0f b7 c0             	movzx  eax,ax
c001be66:	3d 24 03 00 00       	cmp    eax,0x324
c001be6b:	75 06                	jne    c001be73 <sendKeyboardToken(KeyboardToken)+0x2e6>
c001be6d:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001be73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be76:	0f b7 c0             	movzx  eax,ax
c001be79:	3d 23 03 00 00       	cmp    eax,0x323
c001be7e:	75 06                	jne    c001be86 <sendKeyboardToken(KeyboardToken)+0x2f9>
c001be80:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001be86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be89:	0f b7 c0             	movzx  eax,ax
c001be8c:	3d 26 03 00 00       	cmp    eax,0x326
c001be91:	75 06                	jne    c001be99 <sendKeyboardToken(KeyboardToken)+0x30c>
c001be93:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001be99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be9c:	0f b7 c0             	movzx  eax,ax
c001be9f:	3d 27 03 00 00       	cmp    eax,0x327
c001bea4:	75 06                	jne    c001beac <sendKeyboardToken(KeyboardToken)+0x31f>
c001bea6:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001beac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001beaf:	0f b7 c0             	movzx  eax,ax
c001beb2:	3d 22 03 00 00       	cmp    eax,0x322
c001beb7:	75 06                	jne    c001bebf <sendKeyboardToken(KeyboardToken)+0x332>
c001beb9:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001bebf:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001bec3:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001bec6:	83 f0 01             	xor    eax,0x1
c001bec9:	0f b6 c0             	movzx  eax,al
c001becc:	85 c0                	test   eax,eax
c001bece:	74 7c                	je     c001bf4c <sendKeyboardToken(KeyboardToken)+0x3bf>
c001bed0:	a0 41 f0 03 c0       	mov    al,ds:0xc003f041
c001bed5:	0f b6 c0             	movzx  eax,al
c001bed8:	85 c0                	test   eax,eax
c001beda:	74 43                	je     c001bf1f <sendKeyboardToken(KeyboardToken)+0x392>
c001bedc:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001bee0:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001bee4:	85 c0                	test   eax,eax
c001bee6:	74 2b                	je     c001bf13 <sendKeyboardToken(KeyboardToken)+0x386>
c001bee8:	8b 15 44 f3 03 c0    	mov    edx,DWORD PTR ds:0xc003f344
c001beee:	89 d0                	mov    eax,edx
c001bef0:	c1 e0 02             	shl    eax,0x2
c001bef3:	01 d0                	add    eax,edx
c001bef5:	01 c0                	add    eax,eax
c001bef7:	a3 44 f3 03 c0       	mov    ds:0xc003f344,eax
c001befc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001beff:	0f b7 c0             	movzx  eax,ax
c001bf02:	8d 50 d0             	lea    edx,[eax-0x30]
c001bf05:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001bf0a:	01 d0                	add    eax,edx
c001bf0c:	a3 44 f3 03 c0       	mov    ds:0xc003f344,eax
c001bf11:	eb 71                	jmp    c001bf84 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001bf13:	c7 05 44 f3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f344,0x0
c001bf1d:	eb 65                	jmp    c001bf84 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001bf1f:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001bf24:	85 c0                	test   eax,eax
c001bf26:	74 18                	je     c001bf40 <sendKeyboardToken(KeyboardToken)+0x3b3>
c001bf28:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001bf2d:	0f b6 c0             	movzx  eax,al
c001bf30:	83 ec 0c             	sub    esp,0xc
c001bf33:	50                   	push   eax
c001bf34:	e8 79 fb ff ff       	call   c001bab2 <sendKeyToTerminal(unsigned char)>
c001bf39:	83 c4 10             	add    esp,0x10
c001bf3c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001bf40:	c7 05 44 f3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f344,0x0
c001bf4a:	eb 38                	jmp    c001bf84 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001bf4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf4f:	0f b7 c0             	movzx  eax,ax
c001bf52:	3d 01 01 00 00       	cmp    eax,0x101
c001bf57:	75 2b                	jne    c001bf84 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001bf59:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001bf5e:	85 c0                	test   eax,eax
c001bf60:	74 18                	je     c001bf7a <sendKeyboardToken(KeyboardToken)+0x3ed>
c001bf62:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001bf67:	0f b6 c0             	movzx  eax,al
c001bf6a:	83 ec 0c             	sub    esp,0xc
c001bf6d:	50                   	push   eax
c001bf6e:	e8 3f fb ff ff       	call   c001bab2 <sendKeyToTerminal(unsigned char)>
c001bf73:	83 c4 10             	add    esp,0x10
c001bf76:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001bf7a:	c7 05 44 f3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f344,0x0
c001bf84:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001bf87:	83 f0 01             	xor    eax,0x1
c001bf8a:	0f b6 c0             	movzx  eax,al
c001bf8d:	85 c0                	test   eax,eax
c001bf8f:	74 5a                	je     c001bfeb <sendKeyboardToken(KeyboardToken)+0x45e>
c001bf91:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001bf94:	83 f0 01             	xor    eax,0x1
c001bf97:	0f b6 c0             	movzx  eax,al
c001bf9a:	85 c0                	test   eax,eax
c001bf9c:	74 4d                	je     c001bfeb <sendKeyboardToken(KeyboardToken)+0x45e>
c001bf9e:	a0 40 f0 03 c0       	mov    al,ds:0xc003f040
c001bfa3:	83 f0 01             	xor    eax,0x1
c001bfa6:	0f b6 c0             	movzx  eax,al
c001bfa9:	85 c0                	test   eax,eax
c001bfab:	74 3e                	je     c001bfeb <sendKeyboardToken(KeyboardToken)+0x45e>
c001bfad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bfb0:	0f b7 c0             	movzx  eax,ax
c001bfb3:	83 f8 1f             	cmp    eax,0x1f
c001bfb6:	76 0b                	jbe    c001bfc3 <sendKeyboardToken(KeyboardToken)+0x436>
c001bfb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bfbb:	0f b7 c0             	movzx  eax,ax
c001bfbe:	83 f8 7e             	cmp    eax,0x7e
c001bfc1:	76 16                	jbe    c001bfd9 <sendKeyboardToken(KeyboardToken)+0x44c>
c001bfc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bfc6:	0f b7 c0             	movzx  eax,ax
c001bfc9:	83 f8 0a             	cmp    eax,0xa
c001bfcc:	74 0b                	je     c001bfd9 <sendKeyboardToken(KeyboardToken)+0x44c>
c001bfce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bfd1:	0f b7 c0             	movzx  eax,ax
c001bfd4:	83 f8 08             	cmp    eax,0x8
c001bfd7:	75 12                	jne    c001bfeb <sendKeyboardToken(KeyboardToken)+0x45e>
c001bfd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bfdc:	0f b6 c0             	movzx  eax,al
c001bfdf:	83 ec 0c             	sub    esp,0xc
c001bfe2:	50                   	push   eax
c001bfe3:	e8 ca fa ff ff       	call   c001bab2 <sendKeyToTerminal(unsigned char)>
c001bfe8:	83 c4 10             	add    esp,0x10
c001bfeb:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001bfee:	83 f0 01             	xor    eax,0x1
c001bff1:	0f b6 c0             	movzx  eax,al
c001bff4:	85 c0                	test   eax,eax
c001bff6:	74 5d                	je     c001c055 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001bff8:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001bffb:	83 f0 01             	xor    eax,0x1
c001bffe:	0f b6 c0             	movzx  eax,al
c001c001:	85 c0                	test   eax,eax
c001c003:	74 50                	je     c001c055 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c005:	a0 40 f0 03 c0       	mov    al,ds:0xc003f040
c001c00a:	0f b6 c0             	movzx  eax,al
c001c00d:	85 c0                	test   eax,eax
c001c00f:	74 44                	je     c001c055 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c011:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c014:	0f b7 c0             	movzx  eax,ax
c001c017:	83 f8 3f             	cmp    eax,0x3f
c001c01a:	76 39                	jbe    c001c055 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c01c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c01f:	0f b7 c0             	movzx  eax,ax
c001c022:	83 f8 7f             	cmp    eax,0x7f
c001c025:	77 2e                	ja     c001c055 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c027:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c02a:	88 c2                	mov    dl,al
c001c02c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c02f:	0f b7 c0             	movzx  eax,ax
c001c032:	83 f8 5f             	cmp    eax,0x5f
c001c035:	76 04                	jbe    c001c03b <sendKeyboardToken(KeyboardToken)+0x4ae>
c001c037:	b0 20                	mov    al,0x20
c001c039:	eb 02                	jmp    c001c03d <sendKeyboardToken(KeyboardToken)+0x4b0>
c001c03b:	b0 00                	mov    al,0x0
c001c03d:	89 d1                	mov    ecx,edx
c001c03f:	29 c1                	sub    ecx,eax
c001c041:	89 c8                	mov    eax,ecx
c001c043:	83 e8 40             	sub    eax,0x40
c001c046:	0f b6 c0             	movzx  eax,al
c001c049:	83 ec 0c             	sub    esp,0xc
c001c04c:	50                   	push   eax
c001c04d:	e8 60 fa ff ff       	call   c001bab2 <sendKeyToTerminal(unsigned char)>
c001c052:	83 c4 10             	add    esp,0x10
c001c055:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c058:	0f b7 c0             	movzx  eax,ax
c001c05b:	3d 00 03 00 00       	cmp    eax,0x300
c001c060:	75 12                	jne    c001c074 <sendKeyboardToken(KeyboardToken)+0x4e7>
c001c062:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c065:	83 f0 01             	xor    eax,0x1
c001c068:	0f b6 c0             	movzx  eax,al
c001c06b:	85 c0                	test   eax,eax
c001c06d:	74 05                	je     c001c074 <sendKeyboardToken(KeyboardToken)+0x4e7>
c001c06f:	e8 8b ac ff ff       	call   c0016cff <doTerminalCycle()>
c001c074:	90                   	nop
c001c075:	c9                   	leave  
c001c076:	c3                   	ret    

c001c077 <clearInternalKeybuffer(VgaText*)>:
c001c077:	55                   	push   ebp
c001c078:	89 e5                	mov    ebp,esp
c001c07a:	83 ec 08             	sub    esp,0x8
c001c07d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c080:	05 02 01 00 00       	add    eax,0x102
c001c085:	83 ec 0c             	sub    esp,0xc
c001c088:	50                   	push   eax
c001c089:	e8 e2 44 fe ff       	call   c0000570 <strlen>
c001c08e:	83 c4 10             	add    esp,0x10
c001c091:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c094:	81 c2 02 01 00 00    	add    edx,0x102
c001c09a:	83 ec 04             	sub    esp,0x4
c001c09d:	50                   	push   eax
c001c09e:	6a 00                	push   0x0
c001c0a0:	52                   	push   edx
c001c0a1:	e8 4a 44 fe ff       	call   c00004f0 <memset>
c001c0a6:	83 c4 10             	add    esp,0x10
c001c0a9:	90                   	nop
c001c0aa:	c9                   	leave  
c001c0ab:	c3                   	ret    

c001c0ac <readKeyboard(VgaText*, char*, unsigned long)>:
c001c0ac:	55                   	push   ebp
c001c0ad:	89 e5                	mov    ebp,esp
c001c0af:	83 ec 18             	sub    esp,0x18
c001c0b2:	a1 28 ef 03 c0       	mov    eax,ds:0xc003ef28
c001c0b7:	85 c0                	test   eax,eax
c001c0b9:	74 2a                	je     c001c0e5 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c001c0bb:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c001c0c1:	8b 0d 28 ef 03 c0    	mov    ecx,DWORD PTR ds:0xc003ef28
c001c0c7:	83 ec 04             	sub    esp,0x4
c001c0ca:	68 40 ef 03 c0       	push   0xc003ef40
c001c0cf:	83 ec 08             	sub    esp,0x8
c001c0d2:	89 e2                	mov    edx,esp
c001c0d4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001c0d7:	89 02                	mov    DWORD PTR [edx],eax
c001c0d9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001c0dc:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001c0e0:	ff d1                	call   ecx
c001c0e2:	83 c4 10             	add    esp,0x10
c001c0e5:	fb                   	sti    
c001c0e6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001c0ed:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001c0f1:	0f 84 0d 01 00 00    	je     c001c204 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c001c0f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0fa:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c001c100:	0f be c0             	movsx  eax,al
c001c103:	85 c0                	test   eax,eax
c001c105:	75 2c                	jne    c001c133 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c001c107:	fa                   	cli    
c001c108:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c10d:	83 c0 01             	add    eax,0x1
c001c110:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001c115:	e8 7e 8a 00 00       	call   c0024b98 <schedule()>
c001c11a:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c11f:	83 e8 01             	sub    eax,0x1
c001c122:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001c127:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c12c:	85 c0                	test   eax,eax
c001c12e:	75 c7                	jne    c001c0f7 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001c130:	fb                   	sti    
c001c131:	eb c4                	jmp    c001c0f7 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001c133:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001c136:	8d 50 01             	lea    edx,[eax+0x1]
c001c139:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c13c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c13f:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c001c145:	88 10                	mov    BYTE PTR [eax],dl
c001c147:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c14a:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c001c150:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001c153:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c157:	83 f8 03             	cmp    eax,0x3
c001c15a:	75 1e                	jne    c001c17a <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c001c15c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001c161:	8b 00                	mov    eax,DWORD PTR [eax]
c001c163:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001c166:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c001c16c:	83 ec 08             	sub    esp,0x8
c001c16f:	6a 02                	push   0x2
c001c171:	50                   	push   eax
c001c172:	e8 77 43 00 00       	call   c00204ee <KeRaiseSignal(SigHandlerBlock*, int)>
c001c177:	83 c4 10             	add    esp,0x10
c001c17a:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c17e:	83 f8 1c             	cmp    eax,0x1c
c001c181:	75 1e                	jne    c001c1a1 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c001c183:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001c188:	8b 00                	mov    eax,DWORD PTR [eax]
c001c18a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001c18d:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c001c193:	83 ec 08             	sub    esp,0x8
c001c196:	6a 09                	push   0x9
c001c198:	50                   	push   eax
c001c199:	e8 50 43 00 00       	call   c00204ee <KeRaiseSignal(SigHandlerBlock*, int)>
c001c19e:	83 c4 10             	add    esp,0x10
c001c1a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c1a4:	05 02 01 00 00       	add    eax,0x102
c001c1a9:	83 ec 0c             	sub    esp,0xc
c001c1ac:	50                   	push   eax
c001c1ad:	e8 be 43 fe ff       	call   c0000570 <strlen>
c001c1b2:	83 c4 10             	add    esp,0x10
c001c1b5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c1b8:	81 c2 02 01 00 00    	add    edx,0x102
c001c1be:	8d 4a 01             	lea    ecx,[edx+0x1]
c001c1c1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c1c4:	81 c2 02 01 00 00    	add    edx,0x102
c001c1ca:	83 ec 04             	sub    esp,0x4
c001c1cd:	50                   	push   eax
c001c1ce:	51                   	push   ecx
c001c1cf:	52                   	push   edx
c001c1d0:	e8 fb 41 fe ff       	call   c00003d0 <memmove>
c001c1d5:	83 c4 10             	add    esp,0x10
c001c1d8:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c001c1dc:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c001c1e0:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c1e4:	83 f8 0a             	cmp    eax,0xa
c001c1e7:	74 16                	je     c001c1ff <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c001c1e9:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c1ed:	83 f8 03             	cmp    eax,0x3
c001c1f0:	74 0d                	je     c001c1ff <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c001c1f2:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c1f6:	83 f8 1c             	cmp    eax,0x1c
c001c1f9:	0f 85 ee fe ff ff    	jne    c001c0ed <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c001c1ff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001c202:	eb 03                	jmp    c001c207 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c001c204:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001c207:	c9                   	leave  
c001c208:	c3                   	ret    
c001c209:	90                   	nop

c001c20a <Keyboard::Keyboard(char const*)>:
c001c20a:	83 ec 0c             	sub    esp,0xc
c001c20d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c211:	83 ec 08             	sub    esp,0x8
c001c214:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c218:	50                   	push   eax
c001c219:	e8 06 f1 ff ff       	call   c001b324 <Device::Device(char const*)>
c001c21e:	83 c4 10             	add    esp,0x10
c001c221:	ba 68 1c 03 c0       	mov    edx,0xc0031c68
c001c226:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c22a:	89 10                	mov    DWORD PTR [eax],edx
c001c22c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c230:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c001c23a:	c6 05 24 ef 03 c0 01 	mov    BYTE PTR ds:0xc003ef24,0x1
c001c241:	90                   	nop
c001c242:	83 c4 0c             	add    esp,0xc
c001c245:	c3                   	ret    

c001c246 <Keyboard::~Keyboard()>:
c001c246:	83 ec 0c             	sub    esp,0xc
c001c249:	ba 68 1c 03 c0       	mov    edx,0xc0031c68
c001c24e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c252:	89 10                	mov    DWORD PTR [eax],edx
c001c254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c258:	83 ec 0c             	sub    esp,0xc
c001c25b:	50                   	push   eax
c001c25c:	e8 63 ee ff ff       	call   c001b0c4 <Device::~Device()>
c001c261:	83 c4 10             	add    esp,0x10
c001c264:	90                   	nop
c001c265:	83 c4 0c             	add    esp,0xc
c001c268:	c3                   	ret    
c001c269:	90                   	nop

c001c26a <Keyboard::~Keyboard()>:
c001c26a:	83 ec 0c             	sub    esp,0xc
c001c26d:	83 ec 0c             	sub    esp,0xc
c001c270:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c274:	e8 cd ff ff ff       	call   c001c246 <Keyboard::~Keyboard()>
c001c279:	83 c4 10             	add    esp,0x10
c001c27c:	83 ec 08             	sub    esp,0x8
c001c27f:	68 5c 01 00 00       	push   0x15c
c001c284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c288:	e8 87 cd ff ff       	call   c0019014 <operator delete(void*, unsigned long)>
c001c28d:	83 c4 10             	add    esp,0x10
c001c290:	83 c4 0c             	add    esp,0xc
c001c293:	c3                   	ret    

c001c294 <LogicalDisk::close(int, int, void*)>:
c001c294:	83 c8 ff             	or     eax,0xffffffff
c001c297:	c3                   	ret    

c001c298 <LogicalDisk::~LogicalDisk()>:
c001c298:	83 ec 0c             	sub    esp,0xc
c001c29b:	ba e0 1c 03 c0       	mov    edx,0xc0031ce0
c001c2a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2a4:	89 10                	mov    DWORD PTR [eax],edx
c001c2a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2aa:	83 ec 0c             	sub    esp,0xc
c001c2ad:	50                   	push   eax
c001c2ae:	e8 11 ee ff ff       	call   c001b0c4 <Device::~Device()>
c001c2b3:	83 c4 10             	add    esp,0x10
c001c2b6:	90                   	nop
c001c2b7:	83 c4 0c             	add    esp,0xc
c001c2ba:	c3                   	ret    
c001c2bb:	90                   	nop

c001c2bc <LogicalDisk::~LogicalDisk()>:
c001c2bc:	83 ec 0c             	sub    esp,0xc
c001c2bf:	83 ec 0c             	sub    esp,0xc
c001c2c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c2c6:	e8 cd ff ff ff       	call   c001c298 <LogicalDisk::~LogicalDisk()>
c001c2cb:	83 c4 10             	add    esp,0x10
c001c2ce:	83 ec 08             	sub    esp,0x8
c001c2d1:	68 78 01 00 00       	push   0x178
c001c2d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c2da:	e8 35 cd ff ff       	call   c0019014 <operator delete(void*, unsigned long)>
c001c2df:	83 c4 10             	add    esp,0x10
c001c2e2:	83 c4 0c             	add    esp,0xc
c001c2e5:	c3                   	ret    

c001c2e6 <LogicalDisk::open(int, int, void*)>:
c001c2e6:	83 ec 18             	sub    esp,0x18
c001c2e9:	68 94 1c 03 c0       	push   0xc0031c94
c001c2ee:	e8 58 3d 00 00       	call   c002004b <KePanic(char const*)>
c001c2f3:	83 c8 ff             	or     eax,0xffffffff
c001c2f6:	83 c4 1c             	add    esp,0x1c
c001c2f9:	c3                   	ret    

c001c2fa <LogicalDisk::absoluteToRelative(unsigned long long)>:
c001c2fa:	53                   	push   ebx
c001c2fb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c2ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c303:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c307:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c001c30d:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001c313:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c001c319:	77 10                	ja     c001c32b <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c001c31b:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001c321:	89 d3                	mov    ebx,edx
c001c323:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c001c329:	72 05                	jb     c001c330 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c001c32b:	83 c8 ff             	or     eax,0xffffffff
c001c32e:	89 c2                	mov    edx,eax
c001c330:	5b                   	pop    ebx
c001c331:	c3                   	ret    

c001c332 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001c332:	56                   	push   esi
c001c333:	83 c8 ff             	or     eax,0xffffffff
c001c336:	53                   	push   ebx
c001c337:	89 c2                	mov    edx,eax
c001c339:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c33d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001c341:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c345:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001c34b:	77 27                	ja     c001c374 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001c34d:	89 d8                	mov    eax,ebx
c001c34f:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001c355:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c001c35b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c360:	89 c2                	mov    edx,eax
c001c362:	73 10                	jae    c001c374 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001c364:	89 c8                	mov    eax,ecx
c001c366:	89 da                	mov    edx,ebx
c001c368:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001c36e:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001c374:	5b                   	pop    ebx
c001c375:	5e                   	pop    esi
c001c376:	c3                   	ret    
c001c377:	90                   	nop

c001c378 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001c378:	83 ec 1c             	sub    esp,0x1c
c001c37b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c37f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c383:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c38b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c38f:	89 04 24             	mov    DWORD PTR [esp],eax
c001c392:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c396:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c39a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c39e:	83 ec 08             	sub    esp,0x8
c001c3a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c3a5:	50                   	push   eax
c001c3a6:	e8 79 ef ff ff       	call   c001b324 <Device::Device(char const*)>
c001c3ab:	83 c4 10             	add    esp,0x10
c001c3ae:	ba e0 1c 03 c0       	mov    edx,0xc0031ce0
c001c3b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c3b7:	89 10                	mov    DWORD PTR [eax],edx
c001c3b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c3bd:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001c3c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c3c8:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001c3cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c3d3:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001c3da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c3de:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001c3e8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c3ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c3f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c3f4:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001c3fa:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001c400:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c404:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c407:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c40b:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001c411:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c001c417:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c41b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c41f:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c001c425:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c429:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c001c433:	90                   	nop
c001c434:	83 c4 1c             	add    esp,0x1c
c001c437:	c3                   	ret    

c001c438 <LogicalDisk::assignDriveLetter()>:
c001c438:	55                   	push   ebp
c001c439:	57                   	push   edi
c001c43a:	56                   	push   esi
c001c43b:	53                   	push   ebx
c001c43c:	83 ec 14             	sub    esp,0x14
c001c43f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c443:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001c449:	b0 41                	mov    al,0x41
c001c44b:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c001c451:	84 d2                	test   dl,dl
c001c453:	75 02                	jne    c001c457 <LogicalDisk::assignDriveLetter()+0x1f>
c001c455:	b0 43                	mov    al,0x43
c001c457:	8b 3d 60 f3 03 c0    	mov    edi,DWORD PTR ds:0xc003f360
c001c45d:	0f b6 ca             	movzx  ecx,dl
c001c460:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001c464:	0f be e8             	movsx  ebp,al
c001c467:	8b 3d 64 f3 03 c0    	mov    edi,DWORD PTR ds:0xc003f364
c001c46d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c471:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001c475:	3c 43                	cmp    al,0x43
c001c477:	75 10                	jne    c001c489 <LogicalDisk::assignDriveLetter()+0x51>
c001c479:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001c480:	75 5a                	jne    c001c4dc <LogicalDisk::assignDriveLetter()+0xa4>
c001c482:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c487:	75 53                	jne    c001c4dc <LogicalDisk::assignDriveLetter()+0xa4>
c001c489:	8d 75 bf             	lea    esi,[ebp-0x41]
c001c48c:	ba 01 00 00 00       	mov    edx,0x1
c001c491:	89 34 24             	mov    DWORD PTR [esp],esi
c001c494:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c001c497:	d3 e2                	shl    edx,cl
c001c499:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c49d:	89 d7                	mov    edi,edx
c001c49f:	89 d6                	mov    esi,edx
c001c4a1:	c1 ff 1f             	sar    edi,0x1f
c001c4a4:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c001c4a8:	21 f9                	and    ecx,edi
c001c4aa:	09 d1                	or     ecx,edx
c001c4ac:	75 2e                	jne    c001c4dc <LogicalDisk::assignDriveLetter()+0xa4>
c001c4ae:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001c4b2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c4b6:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001c4bc:	09 f2                	or     edx,esi
c001c4be:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001c4c1:	89 15 60 f3 03 c0    	mov    DWORD PTR ds:0xc003f360,edx
c001c4c7:	89 1c b5 80 f3 03 c0 	mov    DWORD PTR [esi*4-0x3ffc0c80],ebx
c001c4ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c4d2:	09 fa                	or     edx,edi
c001c4d4:	89 15 64 f3 03 c0    	mov    DWORD PTR ds:0xc003f364,edx
c001c4da:	eb 0d                	jmp    c001c4e9 <LogicalDisk::assignDriveLetter()+0xb1>
c001c4dc:	8d 50 01             	lea    edx,[eax+0x1]
c001c4df:	45                   	inc    ebp
c001c4e0:	88 d0                	mov    al,dl
c001c4e2:	80 fa 5b             	cmp    dl,0x5b
c001c4e5:	75 8e                	jne    c001c475 <LogicalDisk::assignDriveLetter()+0x3d>
c001c4e7:	31 c0                	xor    eax,eax
c001c4e9:	83 c4 14             	add    esp,0x14
c001c4ec:	5b                   	pop    ebx
c001c4ed:	5e                   	pop    esi
c001c4ee:	5f                   	pop    edi
c001c4ef:	5d                   	pop    ebp
c001c4f0:	c3                   	ret    
c001c4f1:	90                   	nop

c001c4f2 <LogicalDisk::mount()>:
c001c4f2:	56                   	push   esi
c001c4f3:	53                   	push   ebx
c001c4f4:	53                   	push   ebx
c001c4f5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c4f9:	8b 1d 04 cf 03 c0    	mov    ebx,DWORD PTR ds:0xc003cf04
c001c4ff:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c001c509:	85 db                	test   ebx,ebx
c001c50b:	74 27                	je     c001c534 <LogicalDisk::mount()+0x42>
c001c50d:	51                   	push   ecx
c001c50e:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001c515:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c517:	83 e8 41             	sub    eax,0x41
c001c51a:	50                   	push   eax
c001c51b:	56                   	push   esi
c001c51c:	53                   	push   ebx
c001c51d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001c520:	83 c4 10             	add    esp,0x10
c001c523:	84 c0                	test   al,al
c001c525:	74 08                	je     c001c52f <LogicalDisk::mount()+0x3d>
c001c527:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c001c52d:	eb 07                	jmp    c001c536 <LogicalDisk::mount()+0x44>
c001c52f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001c532:	eb d5                	jmp    c001c509 <LogicalDisk::mount()+0x17>
c001c534:	31 c0                	xor    eax,eax
c001c536:	5a                   	pop    edx
c001c537:	5b                   	pop    ebx
c001c538:	5e                   	pop    esi
c001c539:	c3                   	ret    

c001c53a <LogicalDisk::unmount()>:
c001c53a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c53e:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c001c548:	c3                   	ret    
c001c549:	90                   	nop

c001c54a <LogicalDisk::eject()>:
c001c54a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c54e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c554:	8b 10                	mov    edx,DWORD PTR [eax]
c001c556:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c55a:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001c55d:	90                   	nop

c001c55e <LogicalDisk::unassignDriveLetter()>:
c001c55e:	57                   	push   edi
c001c55f:	56                   	push   esi
c001c560:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c564:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001c56b:	85 c9                	test   ecx,ecx
c001c56d:	75 0f                	jne    c001c57e <LogicalDisk::unassignDriveLetter()+0x20>
c001c56f:	c7 44 24 0c b8 1c 03 c0 	mov    DWORD PTR [esp+0xc],0xc0031cb8
c001c577:	5e                   	pop    esi
c001c578:	5f                   	pop    edi
c001c579:	e9 cd 3a 00 00       	jmp    c002004b <KePanic(char const*)>
c001c57e:	83 e9 41             	sub    ecx,0x41
c001c581:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001c588:	b8 01 00 00 00       	mov    eax,0x1
c001c58d:	c7 04 8d 80 f3 03 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffc0c80],0x0
c001c598:	d3 e0                	shl    eax,cl
c001c59a:	89 c7                	mov    edi,eax
c001c59c:	f7 d0                	not    eax
c001c59e:	c1 ff 1f             	sar    edi,0x1f
c001c5a1:	21 05 60 f3 03 c0    	and    DWORD PTR ds:0xc003f360,eax
c001c5a7:	89 fe                	mov    esi,edi
c001c5a9:	f7 d6                	not    esi
c001c5ab:	21 35 64 f3 03 c0    	and    DWORD PTR ds:0xc003f364,esi
c001c5b1:	5e                   	pop    esi
c001c5b2:	5f                   	pop    edi
c001c5b3:	c3                   	ret    

c001c5b4 <LogicalDisk::read(unsigned long long, int, void*)>:
c001c5b4:	57                   	push   edi
c001c5b5:	56                   	push   esi
c001c5b6:	53                   	push   ebx
c001c5b7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c5bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c5bf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c5c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c5c7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001c5cd:	77 41                	ja     c001c610 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001c5cf:	99                   	cdq    
c001c5d0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001c5d6:	01 c8                	add    eax,ecx
c001c5d8:	11 da                	adc    edx,ebx
c001c5da:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001c5e0:	19 d7                	sbb    edi,edx
c001c5e2:	72 33                	jb     c001c617 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001c5e4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001c5ea:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001c5f0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c5f4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001c5f8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001c5fe:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c604:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c608:	5b                   	pop    ebx
c001c609:	5e                   	pop    esi
c001c60a:	5f                   	pop    edi
c001c60b:	e9 c8 0a 00 00       	jmp    c001d0d8 <VCache::read(unsigned long long, int, void*)>
c001c610:	b8 05 00 00 00       	mov    eax,0x5
c001c615:	eb 05                	jmp    c001c61c <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001c617:	b8 07 00 00 00       	mov    eax,0x7
c001c61c:	5b                   	pop    ebx
c001c61d:	5e                   	pop    esi
c001c61e:	5f                   	pop    edi
c001c61f:	c3                   	ret    

c001c620 <LogicalDisk::write(unsigned long long, int, void*)>:
c001c620:	57                   	push   edi
c001c621:	56                   	push   esi
c001c622:	53                   	push   ebx
c001c623:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c627:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c62b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c62f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c633:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001c639:	77 41                	ja     c001c67c <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001c63b:	99                   	cdq    
c001c63c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001c642:	01 c8                	add    eax,ecx
c001c644:	11 da                	adc    edx,ebx
c001c646:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001c64c:	19 d7                	sbb    edi,edx
c001c64e:	72 33                	jb     c001c683 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001c650:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001c656:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001c65c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c660:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001c664:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001c66a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c670:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c674:	5b                   	pop    ebx
c001c675:	5e                   	pop    esi
c001c676:	5f                   	pop    edi
c001c677:	e9 68 09 00 00       	jmp    c001cfe4 <VCache::write(unsigned long long, int, void*)>
c001c67c:	b8 05 00 00 00       	mov    eax,0x5
c001c681:	eb 05                	jmp    c001c688 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001c683:	b8 07 00 00 00       	mov    eax,0x7
c001c688:	5b                   	pop    ebx
c001c689:	5e                   	pop    esi
c001c68a:	5f                   	pop    edi
c001c68b:	c3                   	ret    

c001c68c <Mouse::Mouse(char const*)>:
c001c68c:	83 ec 0c             	sub    esp,0xc
c001c68f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c693:	83 ec 08             	sub    esp,0x8
c001c696:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c69a:	50                   	push   eax
c001c69b:	e8 84 ec ff ff       	call   c001b324 <Device::Device(char const*)>
c001c6a0:	83 c4 10             	add    esp,0x10
c001c6a3:	ba 0c 1d 03 c0       	mov    edx,0xc0031d0c
c001c6a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6ac:	89 10                	mov    DWORD PTR [eax],edx
c001c6ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6b2:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001c6bc:	90                   	nop
c001c6bd:	83 c4 0c             	add    esp,0xc
c001c6c0:	c3                   	ret    
c001c6c1:	90                   	nop
c001c6c2:	66 90                	xchg   ax,ax

c001c6c4 <Mouse::~Mouse()>:
c001c6c4:	83 ec 0c             	sub    esp,0xc
c001c6c7:	ba 0c 1d 03 c0       	mov    edx,0xc0031d0c
c001c6cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6d0:	89 10                	mov    DWORD PTR [eax],edx
c001c6d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6d6:	83 ec 0c             	sub    esp,0xc
c001c6d9:	50                   	push   eax
c001c6da:	e8 e5 e9 ff ff       	call   c001b0c4 <Device::~Device()>
c001c6df:	83 c4 10             	add    esp,0x10
c001c6e2:	90                   	nop
c001c6e3:	83 c4 0c             	add    esp,0xc
c001c6e6:	c3                   	ret    
c001c6e7:	90                   	nop

c001c6e8 <Mouse::~Mouse()>:
c001c6e8:	83 ec 0c             	sub    esp,0xc
c001c6eb:	83 ec 0c             	sub    esp,0xc
c001c6ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6f2:	e8 cd ff ff ff       	call   c001c6c4 <Mouse::~Mouse()>
c001c6f7:	83 c4 10             	add    esp,0x10
c001c6fa:	83 ec 08             	sub    esp,0x8
c001c6fd:	68 58 01 00 00       	push   0x158
c001c702:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c706:	e8 09 c9 ff ff       	call   c0019014 <operator delete(void*, unsigned long)>
c001c70b:	83 c4 10             	add    esp,0x10
c001c70e:	83 c4 0c             	add    esp,0xc
c001c711:	c3                   	ret    

c001c712 <NIC::getMAC()>:
c001c712:	31 c0                	xor    eax,eax
c001c714:	31 d2                	xor    edx,edx
c001c716:	c3                   	ret    
c001c717:	90                   	nop

c001c718 <NIC::write(int, unsigned char*, int*)>:
c001c718:	b8 01 00 00 00       	mov    eax,0x1
c001c71d:	c3                   	ret    

c001c71e <NIC::NIC(char const*)>:
c001c71e:	83 ec 0c             	sub    esp,0xc
c001c721:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c725:	83 ec 08             	sub    esp,0x8
c001c728:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c72c:	50                   	push   eax
c001c72d:	e8 f2 eb ff ff       	call   c001b324 <Device::Device(char const*)>
c001c732:	83 c4 10             	add    esp,0x10
c001c735:	ba 38 1d 03 c0       	mov    edx,0xc0031d38
c001c73a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c73e:	89 10                	mov    DWORD PTR [eax],edx
c001c740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c744:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c001c74e:	90                   	nop
c001c74f:	83 c4 0c             	add    esp,0xc
c001c752:	c3                   	ret    
c001c753:	90                   	nop

c001c754 <NIC::~NIC()>:
c001c754:	83 ec 0c             	sub    esp,0xc
c001c757:	ba 38 1d 03 c0       	mov    edx,0xc0031d38
c001c75c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c760:	89 10                	mov    DWORD PTR [eax],edx
c001c762:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c766:	83 ec 0c             	sub    esp,0xc
c001c769:	50                   	push   eax
c001c76a:	e8 55 e9 ff ff       	call   c001b0c4 <Device::~Device()>
c001c76f:	83 c4 10             	add    esp,0x10
c001c772:	90                   	nop
c001c773:	83 c4 0c             	add    esp,0xc
c001c776:	c3                   	ret    
c001c777:	90                   	nop

c001c778 <NIC::~NIC()>:
c001c778:	83 ec 0c             	sub    esp,0xc
c001c77b:	83 ec 0c             	sub    esp,0xc
c001c77e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c782:	e8 cd ff ff ff       	call   c001c754 <NIC::~NIC()>
c001c787:	83 c4 10             	add    esp,0x10
c001c78a:	83 ec 08             	sub    esp,0x8
c001c78d:	68 58 01 00 00       	push   0x158
c001c792:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c796:	e8 79 c8 ff ff       	call   c0019014 <operator delete(void*, unsigned long)>
c001c79b:	83 c4 10             	add    esp,0x10
c001c79e:	83 c4 0c             	add    esp,0xc
c001c7a1:	c3                   	ret    

c001c7a2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001c7a2:	55                   	push   ebp
c001c7a3:	57                   	push   edi
c001c7a4:	56                   	push   esi
c001c7a5:	53                   	push   ebx
c001c7a6:	81 ec 28 01 00 00    	sub    esp,0x128
c001c7ac:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001c7b3:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001c7ba:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001c7c1:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001c7c8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c7cc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001c7d0:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c7d7:	e8 44 ec ff ff       	call   c001b420 <Device::getName()>
c001c7dc:	5a                   	pop    edx
c001c7dd:	59                   	pop    ecx
c001c7de:	50                   	push   eax
c001c7df:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001c7e3:	55                   	push   ebp
c001c7e4:	e8 57 3e fe ff       	call   c0000640 <strcpy>
c001c7e9:	5b                   	pop    ebx
c001c7ea:	58                   	pop    eax
c001c7eb:	68 64 1d 03 c0       	push   0xc0031d64
c001c7f0:	55                   	push   ebp
c001c7f1:	e8 4a 40 fe ff       	call   c0000840 <strcat>
c001c7f6:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c001c7fd:	e8 b0 9a ff ff       	call   c00162b2 <malloc>
c001c802:	83 c4 0c             	add    esp,0xc
c001c805:	89 c3                	mov    ebx,eax
c001c807:	57                   	push   edi
c001c808:	56                   	push   esi
c001c809:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c80d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c811:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001c818:	55                   	push   ebp
c001c819:	50                   	push   eax
c001c81a:	e8 59 fb ff ff       	call   c001c378 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001c81f:	83 c4 14             	add    esp,0x14
c001c822:	53                   	push   ebx
c001c823:	e8 10 fc ff ff       	call   c001c438 <LogicalDisk::assignDriveLetter()>
c001c828:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c82b:	e8 c2 fc ff ff       	call   c001c4f2 <LogicalDisk::mount()>
c001c830:	58                   	pop    eax
c001c831:	5a                   	pop    edx
c001c832:	53                   	push   ebx
c001c833:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c83a:	e8 83 e9 ff ff       	call   c001b1c2 <Device::addChild(Device*)>
c001c83f:	81 c4 2c 01 00 00    	add    esp,0x12c
c001c845:	5b                   	pop    ebx
c001c846:	5e                   	pop    esi
c001c847:	5f                   	pop    edi
c001c848:	5d                   	pop    ebp
c001c849:	c3                   	ret    

c001c84a <createPartitionsForDisk(PhysicalDisk*)>:
c001c84a:	55                   	push   ebp
c001c84b:	57                   	push   edi
c001c84c:	56                   	push   esi
c001c84d:	53                   	push   ebx
c001c84e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001c854:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001c85b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c861:	3d 00 02 00 00       	cmp    eax,0x200
c001c866:	74 27                	je     c001c88f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001c868:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001c86e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001c874:	83 ec 10             	sub    esp,0x10
c001c877:	0f a4 f7 0a          	shld   edi,esi,0xa
c001c87b:	99                   	cdq    
c001c87c:	c1 e6 0a             	shl    esi,0xa
c001c87f:	52                   	push   edx
c001c880:	89 fd                	mov    ebp,edi
c001c882:	50                   	push   eax
c001c883:	55                   	push   ebp
c001c884:	56                   	push   esi
c001c885:	e8 b6 19 01 00       	call   c002e240 <__udivdi3>
c001c88a:	e9 b9 00 00 00       	jmp    c001c948 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c001c88f:	83 ec 0c             	sub    esp,0xc
c001c892:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c894:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001c898:	56                   	push   esi
c001c899:	6a 01                	push   0x1
c001c89b:	6a 00                	push   0x0
c001c89d:	6a 00                	push   0x0
c001c89f:	53                   	push   ebx
c001c8a0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001c8a3:	83 c4 20             	add    esp,0x20
c001c8a6:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001c8ae:	75 0a                	jne    c001c8ba <createPartitionsForDisk(PhysicalDisk*)+0x70>
c001c8b0:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001c8b8:	74 2c                	je     c001c8e6 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001c8ba:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001c8c0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001c8c6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c8cc:	83 ec 10             	sub    esp,0x10
c001c8cf:	0f a4 c2 0a          	shld   edx,eax,0xa
c001c8d3:	89 f7                	mov    edi,esi
c001c8d5:	c1 e0 0a             	shl    eax,0xa
c001c8d8:	c1 ff 1f             	sar    edi,0x1f
c001c8db:	57                   	push   edi
c001c8dc:	56                   	push   esi
c001c8dd:	52                   	push   edx
c001c8de:	50                   	push   eax
c001c8df:	e8 5c 19 01 00       	call   c002e240 <__udivdi3>
c001c8e4:	eb 62                	jmp    c001c948 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c001c8e6:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001c8ed:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c001c8f4:	89 cf                	mov    edi,ecx
c001c8f6:	83 e2 7f             	and    edx,0x7f
c001c8f9:	83 e7 7f             	and    edi,0x7f
c001c8fc:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001c903:	8d 0c 17             	lea    ecx,[edi+edx*1]
c001c906:	83 e0 7f             	and    eax,0x7f
c001c909:	8d 14 01             	lea    edx,[ecx+eax*1]
c001c90c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001c913:	83 e0 7f             	and    eax,0x7f
c001c916:	01 d0                	add    eax,edx
c001c918:	89 c5                	mov    ebp,eax
c001c91a:	84 c0                	test   al,al
c001c91c:	74 41                	je     c001c95f <createPartitionsForDisk(PhysicalDisk*)+0x115>
c001c91e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001c924:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001c92a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c930:	83 ec 10             	sub    esp,0x10
c001c933:	0f a4 c2 0a          	shld   edx,eax,0xa
c001c937:	89 f7                	mov    edi,esi
c001c939:	c1 e0 0a             	shl    eax,0xa
c001c93c:	c1 ff 1f             	sar    edi,0x1f
c001c93f:	57                   	push   edi
c001c940:	56                   	push   esi
c001c941:	52                   	push   edx
c001c942:	50                   	push   eax
c001c943:	e8 f8 18 01 00       	call   c002e240 <__udivdi3>
c001c948:	83 c4 14             	add    esp,0x14
c001c94b:	52                   	push   edx
c001c94c:	50                   	push   eax
c001c94d:	6a 00                	push   0x0
c001c94f:	6a 00                	push   0x0
c001c951:	53                   	push   ebx
c001c952:	e8 4b fe ff ff       	call   c001c7a2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001c957:	83 c4 20             	add    esp,0x20
c001c95a:	e9 73 01 00 00       	jmp    c001cad2 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c001c95f:	89 f0                	mov    eax,esi
c001c961:	31 c9                	xor    ecx,ecx
c001c963:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001c96a:	75 02                	jne    c001c96e <createPartitionsForDisk(PhysicalDisk*)+0x124>
c001c96c:	89 cd                	mov    ebp,ecx
c001c96e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001c975:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c001c97c:	c1 e2 08             	shl    edx,0x8
c001c97f:	c1 e6 10             	shl    esi,0x10
c001c982:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c001c98a:	09 f2                	or     edx,esi
c001c98c:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c001c994:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c001c99b:	83 c0 10             	add    eax,0x10
c001c99e:	09 f2                	or     edx,esi
c001c9a0:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c001c9a7:	c1 e6 18             	shl    esi,0x18
c001c9aa:	09 f2                	or     edx,esi
c001c9ac:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c001c9b3:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c001c9b7:	c1 e6 10             	shl    esi,0x10
c001c9ba:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001c9c1:	c1 e2 08             	shl    edx,0x8
c001c9c4:	09 f2                	or     edx,esi
c001c9c6:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c001c9cd:	09 f2                	or     edx,esi
c001c9cf:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c001c9d6:	c1 e6 18             	shl    esi,0x18
c001c9d9:	09 f2                	or     edx,esi
c001c9db:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c001c9df:	41                   	inc    ecx
c001c9e0:	83 f9 04             	cmp    ecx,0x4
c001c9e3:	0f 85 7a ff ff ff    	jne    c001c963 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c001c9e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9ed:	83 f0 01             	xor    eax,0x1
c001c9f0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001c9f4:	75 4f                	jne    c001ca45 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001c9f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c9fa:	83 f0 01             	xor    eax,0x1
c001c9fd:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001ca01:	75 42                	jne    c001ca45 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001ca03:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ca0b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ca13:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001ca19:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001ca1f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001ca25:	0f a4 c2 0a          	shld   edx,eax,0xa
c001ca29:	89 f7                	mov    edi,esi
c001ca2b:	c1 e0 0a             	shl    eax,0xa
c001ca2e:	c1 ff 1f             	sar    edi,0x1f
c001ca31:	57                   	push   edi
c001ca32:	56                   	push   esi
c001ca33:	52                   	push   edx
c001ca34:	50                   	push   eax
c001ca35:	e8 06 18 01 00       	call   c002e240 <__udivdi3>
c001ca3a:	83 c4 10             	add    esp,0x10
c001ca3d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ca41:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ca45:	89 e8                	mov    eax,ebp
c001ca47:	0f b6 e8             	movzx  ebp,al
c001ca4a:	85 ed                	test   ebp,ebp
c001ca4c:	74 50                	je     c001ca9e <createPartitionsForDisk(PhysicalDisk*)+0x254>
c001ca4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ca52:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ca56:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ca5a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ca5e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ca62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ca66:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001ca6a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001ca6e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ca72:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001ca76:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca7a:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c001ca7e:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c001ca82:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001ca86:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001ca8a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ca8e:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001ca92:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c001ca96:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c001ca9a:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c001ca9e:	31 ed                	xor    ebp,ebp
c001caa0:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001caa4:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001caa8:	89 f8                	mov    eax,edi
c001caaa:	09 f0                	or     eax,esi
c001caac:	74 1e                	je     c001cacc <createPartitionsForDisk(PhysicalDisk*)+0x282>
c001caae:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001cab2:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001cab6:	89 d1                	mov    ecx,edx
c001cab8:	09 c1                	or     ecx,eax
c001caba:	74 10                	je     c001cacc <createPartitionsForDisk(PhysicalDisk*)+0x282>
c001cabc:	83 ec 0c             	sub    esp,0xc
c001cabf:	57                   	push   edi
c001cac0:	56                   	push   esi
c001cac1:	52                   	push   edx
c001cac2:	50                   	push   eax
c001cac3:	53                   	push   ebx
c001cac4:	e8 d9 fc ff ff       	call   c001c7a2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001cac9:	83 c4 20             	add    esp,0x20
c001cacc:	45                   	inc    ebp
c001cacd:	83 fd 04             	cmp    ebp,0x4
c001cad0:	75 ce                	jne    c001caa0 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c001cad2:	81 c4 5c 02 00 00    	add    esp,0x25c
c001cad8:	5b                   	pop    ebx
c001cad9:	5e                   	pop    esi
c001cada:	5f                   	pop    edi
c001cadb:	5d                   	pop    ebp
c001cadc:	c3                   	ret    
c001cadd:	66 90                	xchg   ax,ax
c001cadf:	90                   	nop

c001cae0 <Serial::Serial(char const*)>:
c001cae0:	83 ec 0c             	sub    esp,0xc
c001cae3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cae7:	83 ec 08             	sub    esp,0x8
c001caea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001caee:	50                   	push   eax
c001caef:	e8 30 e8 ff ff       	call   c001b324 <Device::Device(char const*)>
c001caf4:	83 c4 10             	add    esp,0x10
c001caf7:	ba 78 1d 03 c0       	mov    edx,0xc0031d78
c001cafc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb00:	89 10                	mov    DWORD PTR [eax],edx
c001cb02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb06:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c001cb10:	90                   	nop
c001cb11:	83 c4 0c             	add    esp,0xc
c001cb14:	c3                   	ret    
c001cb15:	90                   	nop
c001cb16:	66 90                	xchg   ax,ax

c001cb18 <Serial::~Serial()>:
c001cb18:	83 ec 0c             	sub    esp,0xc
c001cb1b:	ba 78 1d 03 c0       	mov    edx,0xc0031d78
c001cb20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb24:	89 10                	mov    DWORD PTR [eax],edx
c001cb26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb2a:	83 ec 0c             	sub    esp,0xc
c001cb2d:	50                   	push   eax
c001cb2e:	e8 91 e5 ff ff       	call   c001b0c4 <Device::~Device()>
c001cb33:	83 c4 10             	add    esp,0x10
c001cb36:	90                   	nop
c001cb37:	83 c4 0c             	add    esp,0xc
c001cb3a:	c3                   	ret    
c001cb3b:	90                   	nop

c001cb3c <Serial::~Serial()>:
c001cb3c:	83 ec 0c             	sub    esp,0xc
c001cb3f:	83 ec 0c             	sub    esp,0xc
c001cb42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb46:	e8 cd ff ff ff       	call   c001cb18 <Serial::~Serial()>
c001cb4b:	83 c4 10             	add    esp,0x10
c001cb4e:	83 ec 08             	sub    esp,0x8
c001cb51:	68 58 01 00 00       	push   0x158
c001cb56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb5a:	e8 b5 c4 ff ff       	call   c0019014 <operator delete(void*, unsigned long)>
c001cb5f:	83 c4 10             	add    esp,0x10
c001cb62:	83 c4 0c             	add    esp,0xc
c001cb65:	c3                   	ret    
c001cb66:	66 90                	xchg   ax,ax

c001cb68 <Timer::Timer(char const*)>:
c001cb68:	83 ec 0c             	sub    esp,0xc
c001cb6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb6f:	83 ec 08             	sub    esp,0x8
c001cb72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb76:	50                   	push   eax
c001cb77:	e8 a8 e7 ff ff       	call   c001b324 <Device::Device(char const*)>
c001cb7c:	83 c4 10             	add    esp,0x10
c001cb7f:	ba bc 1d 03 c0       	mov    edx,0xc0031dbc
c001cb84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb88:	89 10                	mov    DWORD PTR [eax],edx
c001cb8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb8e:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001cb98:	90                   	nop
c001cb99:	83 c4 0c             	add    esp,0xc
c001cb9c:	c3                   	ret    
c001cb9d:	90                   	nop
c001cb9e:	66 90                	xchg   ax,ax

c001cba0 <Timer::~Timer()>:
c001cba0:	83 ec 0c             	sub    esp,0xc
c001cba3:	ba bc 1d 03 c0       	mov    edx,0xc0031dbc
c001cba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbac:	89 10                	mov    DWORD PTR [eax],edx
c001cbae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbb2:	83 ec 0c             	sub    esp,0xc
c001cbb5:	50                   	push   eax
c001cbb6:	e8 09 e5 ff ff       	call   c001b0c4 <Device::~Device()>
c001cbbb:	83 c4 10             	add    esp,0x10
c001cbbe:	90                   	nop
c001cbbf:	83 c4 0c             	add    esp,0xc
c001cbc2:	c3                   	ret    
c001cbc3:	90                   	nop

c001cbc4 <Timer::~Timer()>:
c001cbc4:	83 ec 0c             	sub    esp,0xc
c001cbc7:	83 ec 0c             	sub    esp,0xc
c001cbca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbce:	e8 cd ff ff ff       	call   c001cba0 <Timer::~Timer()>
c001cbd3:	83 c4 10             	add    esp,0x10
c001cbd6:	83 ec 08             	sub    esp,0x8
c001cbd9:	68 5c 01 00 00       	push   0x15c
c001cbde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbe2:	e8 2d c4 ff ff       	call   c0019014 <operator delete(void*, unsigned long)>
c001cbe7:	83 c4 10             	add    esp,0x10
c001cbea:	83 c4 0c             	add    esp,0xc
c001cbed:	c3                   	ret    

c001cbee <Timer::read()>:
c001cbee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbf2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cbf8:	c3                   	ret    

c001cbf9 <setupTimer(int)>:
c001cbf9:	53                   	push   ebx
c001cbfa:	83 ec 14             	sub    esp,0x14
c001cbfd:	68 5c 01 00 00       	push   0x15c
c001cc02:	e8 ab 96 ff ff       	call   c00162b2 <malloc>
c001cc07:	89 04 24             	mov    DWORD PTR [esp],eax
c001cc0a:	89 c3                	mov    ebx,eax
c001cc0c:	e8 b7 0e 01 00       	call   c002dac8 <PIT::PIT()>
c001cc11:	58                   	pop    eax
c001cc12:	5a                   	pop    edx
c001cc13:	53                   	push   ebx
c001cc14:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c001cc1a:	e8 a3 e5 ff ff       	call   c001b1c2 <Device::addChild(Device*)>
c001cc1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cc21:	6a 00                	push   0x0
c001cc23:	6a 00                	push   0x0
c001cc25:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cc29:	53                   	push   ebx
c001cc2a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cc2d:	89 d8                	mov    eax,ebx
c001cc2f:	83 c4 28             	add    esp,0x28
c001cc32:	5b                   	pop    ebx
c001cc33:	c3                   	ret    

c001cc34 <timerHandler(unsigned int)>:
c001cc34:	57                   	push   edi
c001cc35:	56                   	push   esi
c001cc36:	53                   	push   ebx
c001cc37:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001cc3b:	01 3d ec f3 03 c0    	add    DWORD PTR ds:0xc003f3ec,edi
c001cc41:	80 3d c1 a9 03 c0 00 	cmp    BYTE PTR ds:0xc003a9c1,0x0
c001cc48:	0f 84 46 01 00 00    	je     c001cd94 <timerHandler(unsigned int)+0x160>
c001cc4e:	fa                   	cli    
c001cc4f:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c001cc55:	83 ec 0c             	sub    esp,0xc
c001cc58:	ff 05 cc 01 04 c0    	inc    DWORD PTR ds:0xc00401cc
c001cc5e:	68 e0 01 04 c0       	push   0xc00401e0
c001cc63:	e8 a8 1b 01 00       	call   c002e810 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001cc68:	83 c4 10             	add    esp,0x10
c001cc6b:	84 c0                	test   al,al
c001cc6d:	0f 85 a1 00 00 00    	jne    c001cd14 <timerHandler(unsigned int)+0xe0>
c001cc73:	83 ec 0c             	sub    esp,0xc
c001cc76:	68 e0 01 04 c0       	push   0xc00401e0
c001cc7b:	e8 ac 1b 01 00       	call   c002e82c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cc80:	83 c4 10             	add    esp,0x10
c001cc83:	89 c6                	mov    esi,eax
c001cc85:	8d 76 00             	lea    esi,[esi+0x0]
c001cc88:	83 ec 0c             	sub    esp,0xc
c001cc8b:	68 e0 01 04 c0       	push   0xc00401e0
c001cc90:	e8 97 1b 01 00       	call   c002e82c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cc95:	c7 04 24 e0 01 04 c0 	mov    DWORD PTR [esp],0xc00401e0
c001cc9c:	89 c3                	mov    ebx,eax
c001cc9e:	e8 91 1b 01 00       	call   c002e834 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001cca3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001cca6:	83 c4 10             	add    esp,0x10
c001cca9:	3b 05 ec f3 03 c0    	cmp    eax,DWORD PTR ds:0xc003f3ec
c001ccaf:	77 23                	ja     c001ccd4 <timerHandler(unsigned int)+0xa0>
c001ccb1:	83 ec 0c             	sub    esp,0xc
c001ccb4:	53                   	push   ebx
c001ccb5:	e8 f6 83 00 00       	call   c00250b0 <unblockTask(ThreadControlBlock*)>
c001ccba:	83 c4 10             	add    esp,0x10
c001ccbd:	39 de                	cmp    esi,ebx
c001ccbf:	75 27                	jne    c001cce8 <timerHandler(unsigned int)+0xb4>
c001ccc1:	83 ec 0c             	sub    esp,0xc
c001ccc4:	68 e0 01 04 c0       	push   0xc00401e0
c001ccc9:	e8 5e 1b 01 00       	call   c002e82c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ccce:	89 c6                	mov    esi,eax
c001ccd0:	eb 12                	jmp    c001cce4 <timerHandler(unsigned int)+0xb0>
c001ccd2:	66 90                	xchg   ax,ax
c001ccd4:	50                   	push   eax
c001ccd5:	50                   	push   eax
c001ccd6:	53                   	push   ebx
c001ccd7:	68 e0 01 04 c0       	push   0xc00401e0
c001ccdc:	e8 0f 1c 01 00       	call   c002e8f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001cce1:	8d 76 00             	lea    esi,[esi+0x0]
c001cce4:	83 c4 10             	add    esp,0x10
c001cce7:	90                   	nop
c001cce8:	83 ec 0c             	sub    esp,0xc
c001cceb:	68 e0 01 04 c0       	push   0xc00401e0
c001ccf0:	e8 1b 1b 01 00       	call   c002e810 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001ccf5:	83 c4 10             	add    esp,0x10
c001ccf8:	84 c0                	test   al,al
c001ccfa:	75 18                	jne    c001cd14 <timerHandler(unsigned int)+0xe0>
c001ccfc:	83 ec 0c             	sub    esp,0xc
c001ccff:	68 e0 01 04 c0       	push   0xc00401e0
c001cd04:	e8 23 1b 01 00       	call   c002e82c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cd09:	83 c4 10             	add    esp,0x10
c001cd0c:	39 f0                	cmp    eax,esi
c001cd0e:	0f 85 74 ff ff ff    	jne    c001cc88 <timerHandler(unsigned int)+0x54>
c001cd14:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd19:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c001cd1d:	74 3d                	je     c001cd5c <timerHandler(unsigned int)+0x128>
c001cd1f:	80 3d c0 a9 03 c0 00 	cmp    BYTE PTR ds:0xc003a9c0,0x0
c001cd26:	74 34                	je     c001cd5c <timerHandler(unsigned int)+0x128>
c001cd28:	fa                   	cli    
c001cd29:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c001cd2f:	8b 15 ec f3 03 c0    	mov    edx,DWORD PTR ds:0xc003f3ec
c001cd35:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd3a:	29 78 34             	sub    DWORD PTR [eax+0x34],edi
c001cd3d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd42:	39 50 34             	cmp    DWORD PTR [eax+0x34],edx
c001cd45:	77 05                	ja     c001cd4c <timerHandler(unsigned int)+0x118>
c001cd47:	e8 4c 7e 00 00       	call   c0024b98 <schedule()>
c001cd4c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001cd51:	48                   	dec    eax
c001cd52:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001cd57:	75 03                	jne    c001cd5c <timerHandler(unsigned int)+0x128>
c001cd59:	fb                   	sti    
c001cd5a:	66 90                	xchg   ax,ax
c001cd5c:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001cd61:	48                   	dec    eax
c001cd62:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c001cd67:	75 1b                	jne    c001cd84 <timerHandler(unsigned int)+0x150>
c001cd69:	83 3d c8 01 04 c0 00 	cmp    DWORD PTR ds:0xc00401c8,0x0
c001cd70:	74 12                	je     c001cd84 <timerHandler(unsigned int)+0x150>
c001cd72:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c001cd7c:	e8 17 7e 00 00       	call   c0024b98 <schedule()>
c001cd81:	8d 76 00             	lea    esi,[esi+0x0]
c001cd84:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001cd89:	48                   	dec    eax
c001cd8a:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001cd8f:	75 03                	jne    c001cd94 <timerHandler(unsigned int)+0x160>
c001cd91:	fb                   	sti    
c001cd92:	66 90                	xchg   ax,ax
c001cd94:	5b                   	pop    ebx
c001cd95:	5e                   	pop    esi
c001cd96:	5f                   	pop    edi
c001cd97:	c3                   	ret    

c001cd98 <VCache::VCache(PhysicalDisk*)>:
c001cd98:	53                   	push   ebx
c001cd99:	83 ec 18             	sub    esp,0x18
c001cd9c:	ba ec 1d 03 c0       	mov    edx,0xc0031dec
c001cda1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cda5:	89 10                	mov    DWORD PTR [eax],edx
c001cda7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cdab:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001cdb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cdb6:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001cdbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cdc1:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001cdc8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001cdcf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cdd3:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001cdda:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001cde1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cde5:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001cdec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cdf0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001cdf4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cdf8:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c001cdff:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c001ce06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce0a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001ce0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce12:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c001ce16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce1a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001ce1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce22:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001ce29:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c001ce31:	83 ec 0c             	sub    esp,0xc
c001ce34:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ce38:	e8 75 94 ff ff       	call   c00162b2 <malloc>
c001ce3d:	83 c4 10             	add    esp,0x10
c001ce40:	89 c3                	mov    ebx,eax
c001ce42:	83 ec 0c             	sub    esp,0xc
c001ce45:	53                   	push   ebx
c001ce46:	e8 a1 7a 00 00       	call   c00248ec <Mutex::Mutex()>
c001ce4b:	83 c4 10             	add    esp,0x10
c001ce4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce52:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001ce55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce59:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ce5d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ce60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce64:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001ce6b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ce6f:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001ce75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce79:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001ce7c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ce80:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001ce86:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ce8c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001ce90:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001ce93:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001ce96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce9a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001ce9e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cea2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001cea8:	05 00 02 00 00       	add    eax,0x200
c001cead:	c1 e0 03             	shl    eax,0x3
c001ceb0:	83 ec 0c             	sub    esp,0xc
c001ceb3:	50                   	push   eax
c001ceb4:	e8 f9 93 ff ff       	call   c00162b2 <malloc>
c001ceb9:	83 c4 10             	add    esp,0x10
c001cebc:	89 c2                	mov    edx,eax
c001cebe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cec2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001cec5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cec9:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001ced0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ced4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001ced8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cedc:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001cee2:	89 d0                	mov    eax,edx
c001cee4:	c1 e0 02             	shl    eax,0x2
c001cee7:	01 d0                	add    eax,edx
c001cee9:	c1 e0 04             	shl    eax,0x4
c001ceec:	83 ec 0c             	sub    esp,0xc
c001ceef:	50                   	push   eax
c001cef0:	e8 bd 93 ff ff       	call   c00162b2 <malloc>
c001cef5:	83 c4 10             	add    esp,0x10
c001cef8:	89 c2                	mov    edx,eax
c001cefa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cefe:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001cf01:	90                   	nop
c001cf02:	83 c4 18             	add    esp,0x18
c001cf05:	5b                   	pop    ebx
c001cf06:	c3                   	ret    
c001cf07:	90                   	nop

c001cf08 <VCache::invalidateReadBuffer()>:
c001cf08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf0c:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c001cf12:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001cf16:	c3                   	ret    
c001cf17:	90                   	nop

c001cf18 <VCache::writeWriteBuffer()>:
c001cf18:	53                   	push   ebx
c001cf19:	83 ec 08             	sub    esp,0x8
c001cf1c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cf20:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001cf24:	74 1e                	je     c001cf44 <VCache::writeWriteBuffer()+0x2c>
c001cf26:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001cf29:	83 ec 0c             	sub    esp,0xc
c001cf2c:	8b 10                	mov    edx,DWORD PTR [eax]
c001cf2e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001cf31:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001cf34:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001cf37:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001cf3a:	50                   	push   eax
c001cf3b:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001cf3e:	83 c4 20             	add    esp,0x20
c001cf41:	8d 76 00             	lea    esi,[esi+0x0]
c001cf44:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001cf4b:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001cf52:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001cf56:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001cf5d:	83 c4 08             	add    esp,0x8
c001cf60:	5b                   	pop    ebx
c001cf61:	c3                   	ret    
c001cf62:	66 90                	xchg   ax,ax

c001cf64 <VCache::~VCache()>:
c001cf64:	83 ec 0c             	sub    esp,0xc
c001cf67:	ba ec 1d 03 c0       	mov    edx,0xc0031dec
c001cf6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf70:	89 10                	mov    DWORD PTR [eax],edx
c001cf72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf76:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001cf79:	0f b6 c0             	movzx  eax,al
c001cf7c:	85 c0                	test   eax,eax
c001cf7e:	74 10                	je     c001cf90 <VCache::~VCache()+0x2c>
c001cf80:	83 ec 0c             	sub    esp,0xc
c001cf83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf87:	e8 8c ff ff ff       	call   c001cf18 <VCache::writeWriteBuffer()>
c001cf8c:	83 c4 10             	add    esp,0x10
c001cf8f:	90                   	nop
c001cf90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf94:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001cf97:	83 ec 0c             	sub    esp,0xc
c001cf9a:	50                   	push   eax
c001cf9b:	e8 22 93 ff ff       	call   c00162c2 <free>
c001cfa0:	83 c4 10             	add    esp,0x10
c001cfa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfa7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001cfaa:	83 ec 0c             	sub    esp,0xc
c001cfad:	50                   	push   eax
c001cfae:	e8 0f 93 ff ff       	call   c00162c2 <free>
c001cfb3:	83 c4 10             	add    esp,0x10
c001cfb6:	90                   	nop
c001cfb7:	83 c4 0c             	add    esp,0xc
c001cfba:	c3                   	ret    
c001cfbb:	90                   	nop

c001cfbc <VCache::~VCache()>:
c001cfbc:	83 ec 0c             	sub    esp,0xc
c001cfbf:	83 ec 0c             	sub    esp,0xc
c001cfc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cfc6:	e8 99 ff ff ff       	call   c001cf64 <VCache::~VCache()>
c001cfcb:	83 c4 10             	add    esp,0x10
c001cfce:	83 ec 08             	sub    esp,0x8
c001cfd1:	6a 44                	push   0x44
c001cfd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cfd7:	e8 38 c0 ff ff       	call   c0019014 <operator delete(void*, unsigned long)>
c001cfdc:	83 c4 10             	add    esp,0x10
c001cfdf:	83 c4 0c             	add    esp,0xc
c001cfe2:	c3                   	ret    
c001cfe3:	90                   	nop

c001cfe4 <VCache::write(unsigned long long, int, void*)>:
c001cfe4:	55                   	push   ebp
c001cfe5:	57                   	push   edi
c001cfe6:	56                   	push   esi
c001cfe7:	53                   	push   ebx
c001cfe8:	83 ec 1c             	sub    esp,0x1c
c001cfeb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001cfef:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001cff3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001cff7:	e8 04 79 00 00       	call   c0024900 <KeDisablePreemption()>
c001cffc:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001d000:	74 0e                	je     c001d010 <VCache::write(unsigned long long, int, void*)+0x2c>
c001d002:	83 ec 0c             	sub    esp,0xc
c001d005:	53                   	push   ebx
c001d006:	e8 fd fe ff ff       	call   c001cf08 <VCache::invalidateReadBuffer()>
c001d00b:	83 c4 10             	add    esp,0x10
c001d00e:	66 90                	xchg   ax,ax
c001d010:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d014:	74 5e                	je     c001d074 <VCache::write(unsigned long long, int, void*)+0x90>
c001d016:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c001d019:	89 e8                	mov    eax,ebp
c001d01b:	99                   	cdq    
c001d01c:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001d01f:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001d022:	89 c1                	mov    ecx,eax
c001d024:	89 d0                	mov    eax,edx
c001d026:	31 f1                	xor    ecx,esi
c001d028:	31 f8                	xor    eax,edi
c001d02a:	09 c1                	or     ecx,eax
c001d02c:	75 3a                	jne    c001d068 <VCache::write(unsigned long long, int, void*)+0x84>
c001d02e:	83 7c 24 3c 01       	cmp    DWORD PTR [esp+0x3c],0x1
c001d033:	75 33                	jne    c001d068 <VCache::write(unsigned long long, int, void*)+0x84>
c001d035:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d038:	89 ef                	mov    edi,ebp
c001d03a:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d040:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001d044:	0f af f9             	imul   edi,ecx
c001d047:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c001d04a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d04c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001d04f:	40                   	inc    eax
c001d050:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001d053:	83 f8 50             	cmp    eax,0x50
c001d056:	75 70                	jne    c001d0c8 <VCache::write(unsigned long long, int, void*)+0xe4>
c001d058:	83 ec 0c             	sub    esp,0xc
c001d05b:	53                   	push   ebx
c001d05c:	e8 b7 fe ff ff       	call   c001cf18 <VCache::writeWriteBuffer()>
c001d061:	83 c4 10             	add    esp,0x10
c001d064:	eb 62                	jmp    c001d0c8 <VCache::write(unsigned long long, int, void*)+0xe4>
c001d066:	66 90                	xchg   ax,ax
c001d068:	83 ec 0c             	sub    esp,0xc
c001d06b:	53                   	push   ebx
c001d06c:	e8 a7 fe ff ff       	call   c001cf18 <VCache::writeWriteBuffer()>
c001d071:	83 c4 10             	add    esp,0x10
c001d074:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d077:	83 7c 24 3c 4f       	cmp    DWORD PTR [esp+0x3c],0x4f
c001d07c:	7f 22                	jg     c001d0a0 <VCache::write(unsigned long long, int, void*)+0xbc>
c001d07e:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001d081:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001d084:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d088:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001d08c:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c001d08f:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c001d092:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d098:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001d09c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d09e:	eb 28                	jmp    c001d0c8 <VCache::write(unsigned long long, int, void*)+0xe4>
c001d0a0:	83 ec 0c             	sub    esp,0xc
c001d0a3:	8b 10                	mov    edx,DWORD PTR [eax]
c001d0a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d0a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d0ad:	57                   	push   edi
c001d0ae:	56                   	push   esi
c001d0af:	50                   	push   eax
c001d0b0:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001d0b3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d0b7:	83 c4 20             	add    esp,0x20
c001d0ba:	e8 69 78 00 00       	call   c0024928 <KeRestorePreemption()>
c001d0bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d0c3:	eb 0b                	jmp    c001d0d0 <VCache::write(unsigned long long, int, void*)+0xec>
c001d0c5:	8d 76 00             	lea    esi,[esi+0x0]
c001d0c8:	e8 5b 78 00 00       	call   c0024928 <KeRestorePreemption()>
c001d0cd:	31 c0                	xor    eax,eax
c001d0cf:	90                   	nop
c001d0d0:	83 c4 1c             	add    esp,0x1c
c001d0d3:	5b                   	pop    ebx
c001d0d4:	5e                   	pop    esi
c001d0d5:	5f                   	pop    edi
c001d0d6:	5d                   	pop    ebp
c001d0d7:	c3                   	ret    

c001d0d8 <VCache::read(unsigned long long, int, void*)>:
c001d0d8:	55                   	push   ebp
c001d0d9:	57                   	push   edi
c001d0da:	56                   	push   esi
c001d0db:	53                   	push   ebx
c001d0dc:	83 ec 1c             	sub    esp,0x1c
c001d0df:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d0e3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d0e7:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d0eb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d0ef:	e8 0c 78 00 00       	call   c0024900 <KeDisablePreemption()>
c001d0f4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d0f8:	74 0e                	je     c001d108 <VCache::read(unsigned long long, int, void*)+0x30>
c001d0fa:	83 ec 0c             	sub    esp,0xc
c001d0fd:	53                   	push   ebx
c001d0fe:	e8 15 fe ff ff       	call   c001cf18 <VCache::writeWriteBuffer()>
c001d103:	83 c4 10             	add    esp,0x10
c001d106:	66 90                	xchg   ax,ax
c001d108:	83 fd 01             	cmp    ebp,0x1
c001d10b:	0f 85 97 00 00 00    	jne    c001d1a8 <VCache::read(unsigned long long, int, void*)+0xd0>
c001d111:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d114:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d118:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c001d11f:	0f 85 83 00 00 00    	jne    c001d1a8 <VCache::read(unsigned long long, int, void*)+0xd0>
c001d125:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c001d128:	89 e9                	mov    ecx,ebp
c001d12a:	f7 d9                	neg    ecx
c001d12c:	89 c8                	mov    eax,ecx
c001d12e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d132:	c1 f8 1f             	sar    eax,0x1f
c001d135:	21 f1                	and    ecx,esi
c001d137:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d13b:	89 c8                	mov    eax,ecx
c001d13d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d141:	21 f9                	and    ecx,edi
c001d143:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001d147:	89 ca                	mov    edx,ecx
c001d149:	74 31                	je     c001d17c <VCache::read(unsigned long long, int, void*)+0xa4>
c001d14b:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c001d14e:	75 2c                	jne    c001d17c <VCache::read(unsigned long long, int, void*)+0xa4>
c001d150:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c001d153:	75 27                	jne    c001d17c <VCache::read(unsigned long long, int, void*)+0xa4>
c001d155:	8d 76 00             	lea    esi,[esi+0x0]
c001d158:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d15b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001d15f:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d165:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d168:	48                   	dec    eax
c001d169:	21 c6                	and    esi,eax
c001d16b:	0f af f1             	imul   esi,ecx
c001d16e:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c001d171:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d173:	e8 b0 77 00 00       	call   c0024928 <KeRestorePreemption()>
c001d178:	31 c0                	xor    eax,eax
c001d17a:	eb 58                	jmp    c001d1d4 <VCache::read(unsigned long long, int, void*)+0xfc>
c001d17c:	83 ec 0c             	sub    esp,0xc
c001d17f:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c001d183:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d187:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c001d18a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c001d18d:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001d18f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001d192:	55                   	push   ebp
c001d193:	52                   	push   edx
c001d194:	50                   	push   eax
c001d195:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d199:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c001d19c:	83 c4 20             	add    esp,0x20
c001d19f:	85 c0                	test   eax,eax
c001d1a1:	75 31                	jne    c001d1d4 <VCache::read(unsigned long long, int, void*)+0xfc>
c001d1a3:	eb b3                	jmp    c001d158 <VCache::read(unsigned long long, int, void*)+0x80>
c001d1a5:	8d 76 00             	lea    esi,[esi+0x0]
c001d1a8:	83 ec 0c             	sub    esp,0xc
c001d1ab:	53                   	push   ebx
c001d1ac:	e8 57 fd ff ff       	call   c001cf08 <VCache::invalidateReadBuffer()>
c001d1b1:	5a                   	pop    edx
c001d1b2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d1b5:	8b 10                	mov    edx,DWORD PTR [eax]
c001d1b7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d1bb:	55                   	push   ebp
c001d1bc:	57                   	push   edi
c001d1bd:	56                   	push   esi
c001d1be:	50                   	push   eax
c001d1bf:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001d1c2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d1c6:	83 c4 20             	add    esp,0x20
c001d1c9:	e8 5a 77 00 00       	call   c0024928 <KeRestorePreemption()>
c001d1ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d1d2:	66 90                	xchg   ax,ax
c001d1d4:	83 c4 1c             	add    esp,0x1c
c001d1d7:	5b                   	pop    ebx
c001d1d8:	5e                   	pop    esi
c001d1d9:	5f                   	pop    edi
c001d1da:	5d                   	pop    ebp
c001d1db:	c3                   	ret    

c001d1dc <Video::putrect(int, int, int, int, unsigned int)>:
c001d1dc:	55                   	push   ebp
c001d1dd:	57                   	push   edi
c001d1de:	56                   	push   esi
c001d1df:	53                   	push   ebx
c001d1e0:	83 ec 1c             	sub    esp,0x1c
c001d1e3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d1e7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d1eb:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001d1ef:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001d1f3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d1f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d1fb:	01 df                	add    edi,ebx
c001d1fd:	39 fb                	cmp    ebx,edi
c001d1ff:	7d 1f                	jge    c001d220 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c001d201:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d205:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001d209:	7d 12                	jge    c001d21d <Video::putrect(int, int, int, int, unsigned int)+0x41>
c001d20b:	8b 16                	mov    edx,DWORD PTR [esi]
c001d20d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d211:	53                   	push   ebx
c001d212:	55                   	push   ebp
c001d213:	45                   	inc    ebp
c001d214:	56                   	push   esi
c001d215:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001d218:	83 c4 10             	add    esp,0x10
c001d21b:	eb e8                	jmp    c001d205 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c001d21d:	43                   	inc    ebx
c001d21e:	eb dd                	jmp    c001d1fd <Video::putrect(int, int, int, int, unsigned int)+0x21>
c001d220:	83 c4 1c             	add    esp,0x1c
c001d223:	5b                   	pop    ebx
c001d224:	5e                   	pop    esi
c001d225:	5f                   	pop    edi
c001d226:	5d                   	pop    ebp
c001d227:	c3                   	ret    

c001d228 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001d228:	55                   	push   ebp
c001d229:	57                   	push   edi
c001d22a:	31 ff                	xor    edi,edi
c001d22c:	56                   	push   esi
c001d22d:	53                   	push   ebx
c001d22e:	83 ec 1c             	sub    esp,0x1c
c001d231:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001d235:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001d239:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c001d240:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001d245:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d249:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001d24d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d251:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001d254:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d258:	01 f9                	add    ecx,edi
c001d25a:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c001d25e:	7d 2f                	jge    c001d28f <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c001d260:	31 f6                	xor    esi,esi
c001d262:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d266:	01 f2                	add    edx,esi
c001d268:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001d26c:	7d 1a                	jge    c001d288 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c001d26e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d271:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001d274:	46                   	inc    esi
c001d275:	51                   	push   ecx
c001d276:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001d27a:	52                   	push   edx
c001d27b:	55                   	push   ebp
c001d27c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d27f:	83 c4 10             	add    esp,0x10
c001d282:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d286:	eb da                	jmp    c001d262 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001d288:	47                   	inc    edi
c001d289:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001d28d:	eb c5                	jmp    c001d254 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c001d28f:	83 c4 1c             	add    esp,0x1c
c001d292:	5b                   	pop    ebx
c001d293:	5e                   	pop    esi
c001d294:	5f                   	pop    edi
c001d295:	5d                   	pop    ebp
c001d296:	c3                   	ret    
c001d297:	90                   	nop

c001d298 <Video::blit(unsigned int*, int, int, int, int)>:
c001d298:	55                   	push   ebp
c001d299:	57                   	push   edi
c001d29a:	56                   	push   esi
c001d29b:	53                   	push   ebx
c001d29c:	83 ec 1c             	sub    esp,0x1c
c001d29f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001d2a3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d2a7:	85 c0                	test   eax,eax
c001d2a9:	79 02                	jns    c001d2ad <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001d2ab:	31 c0                	xor    eax,eax
c001d2ad:	c1 e0 02             	shl    eax,0x2
c001d2b0:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d2b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d2b8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d2bc:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001d2c0:	39 d8                	cmp    eax,ebx
c001d2c2:	7e 49                	jle    c001d30d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001d2c4:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001d2ca:	7c 41                	jl     c001d30d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001d2cc:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d2d0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d2d4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d2d8:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c001d2dc:	39 f9                	cmp    ecx,edi
c001d2de:	7e 22                	jle    c001d302 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001d2e0:	83 c5 04             	add    ebp,0x4
c001d2e3:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001d2e9:	7c 14                	jl     c001d2ff <Video::blit(unsigned int*, int, int, int, int)+0x67>
c001d2eb:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001d2ed:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c001d2f0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d2f4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d2f8:	56                   	push   esi
c001d2f9:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001d2fc:	83 c4 10             	add    esp,0x10
c001d2ff:	47                   	inc    edi
c001d300:	eb d2                	jmp    c001d2d4 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001d302:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d306:	43                   	inc    ebx
c001d307:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001d30b:	eb ab                	jmp    c001d2b8 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c001d30d:	83 c4 1c             	add    esp,0x1c
c001d310:	5b                   	pop    ebx
c001d311:	5e                   	pop    esi
c001d312:	5f                   	pop    edi
c001d313:	5d                   	pop    ebp
c001d314:	c3                   	ret    
c001d315:	90                   	nop

c001d316 <Video::clearScreen(unsigned int)>:
c001d316:	57                   	push   edi
c001d317:	56                   	push   esi
c001d318:	53                   	push   ebx
c001d319:	31 db                	xor    ebx,ebx
c001d31b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d31f:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001d325:	7e 1f                	jle    c001d346 <Video::clearScreen(unsigned int)+0x30>
c001d327:	31 ff                	xor    edi,edi
c001d329:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001d32f:	7e 12                	jle    c001d343 <Video::clearScreen(unsigned int)+0x2d>
c001d331:	8b 06                	mov    eax,DWORD PTR [esi]
c001d333:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d337:	53                   	push   ebx
c001d338:	57                   	push   edi
c001d339:	47                   	inc    edi
c001d33a:	56                   	push   esi
c001d33b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d33e:	83 c4 10             	add    esp,0x10
c001d341:	eb e6                	jmp    c001d329 <Video::clearScreen(unsigned int)+0x13>
c001d343:	43                   	inc    ebx
c001d344:	eb d9                	jmp    c001d31f <Video::clearScreen(unsigned int)+0x9>
c001d346:	5b                   	pop    ebx
c001d347:	5e                   	pop    esi
c001d348:	5f                   	pop    edi
c001d349:	c3                   	ret    

c001d34a <Video::putpixel(int, int, unsigned int)>:
c001d34a:	c7 44 24 04 f4 1d 03 c0 	mov    DWORD PTR [esp+0x4],0xc0031df4
c001d352:	e9 f4 2c 00 00       	jmp    c002004b <KePanic(char const*)>
c001d357:	90                   	nop

c001d358 <Video::readPixelApprox(int, int)>:
c001d358:	83 ec 18             	sub    esp,0x18
c001d35b:	68 15 1e 03 c0       	push   0xc0031e15
c001d360:	e8 e6 2c 00 00       	call   c002004b <KePanic(char const*)>
c001d365:	31 c0                	xor    eax,eax
c001d367:	83 c4 1c             	add    esp,0x1c
c001d36a:	c3                   	ret    
c001d36b:	90                   	nop

c001d36c <Video::Video(char const*)>:
c001d36c:	83 ec 0c             	sub    esp,0xc
c001d36f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d373:	83 ec 08             	sub    esp,0x8
c001d376:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d37a:	50                   	push   eax
c001d37b:	e8 a4 df ff ff       	call   c001b324 <Device::Device(char const*)>
c001d380:	83 c4 10             	add    esp,0x10
c001d383:	ba a0 1e 03 c0       	mov    edx,0xc0031ea0
c001d388:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d38c:	89 10                	mov    DWORD PTR [eax],edx
c001d38e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d392:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001d39c:	90                   	nop
c001d39d:	83 c4 0c             	add    esp,0xc
c001d3a0:	c3                   	ret    
c001d3a1:	90                   	nop

c001d3a2 <Video::~Video()>:
c001d3a2:	83 ec 0c             	sub    esp,0xc
c001d3a5:	ba a0 1e 03 c0       	mov    edx,0xc0031ea0
c001d3aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3ae:	89 10                	mov    DWORD PTR [eax],edx
c001d3b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3b4:	83 ec 0c             	sub    esp,0xc
c001d3b7:	50                   	push   eax
c001d3b8:	e8 07 dd ff ff       	call   c001b0c4 <Device::~Device()>
c001d3bd:	83 c4 10             	add    esp,0x10
c001d3c0:	90                   	nop
c001d3c1:	83 c4 0c             	add    esp,0xc
c001d3c4:	c3                   	ret    
c001d3c5:	90                   	nop

c001d3c6 <Video::~Video()>:
c001d3c6:	83 ec 0c             	sub    esp,0xc
c001d3c9:	83 ec 0c             	sub    esp,0xc
c001d3cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3d0:	e8 cd ff ff ff       	call   c001d3a2 <Video::~Video()>
c001d3d5:	83 c4 10             	add    esp,0x10
c001d3d8:	83 ec 08             	sub    esp,0x8
c001d3db:	68 64 01 00 00       	push   0x164
c001d3e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3e4:	e8 2b bc ff ff       	call   c0019014 <operator delete(void*, unsigned long)>
c001d3e9:	83 c4 10             	add    esp,0x10
c001d3ec:	83 c4 0c             	add    esp,0xc
c001d3ef:	c3                   	ret    

c001d3f0 <Video::isMonochrome()>:
c001d3f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d3f4:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001d3fa:	c3                   	ret    
c001d3fb:	90                   	nop

c001d3fc <Video::getWidth()>:
c001d3fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d400:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d406:	c3                   	ret    
c001d407:	90                   	nop

c001d408 <Video::getHeight()>:
c001d408:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d40c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d412:	c3                   	ret    
c001d413:	90                   	nop

c001d414 <Video::drawCursor(int, int, unsigned int*, int)>:
c001d414:	55                   	push   ebp
c001d415:	57                   	push   edi
c001d416:	56                   	push   esi
c001d417:	53                   	push   ebx
c001d418:	83 ec 2c             	sub    esp,0x2c
c001d41b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d41f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001d423:	83 f8 01             	cmp    eax,0x1
c001d426:	19 c9                	sbb    ecx,ecx
c001d428:	31 db                	xor    ebx,ebx
c001d42a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001d42e:	89 cd                	mov    ebp,ecx
c001d430:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001d438:	f7 d5                	not    ebp
c001d43a:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c001d440:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d444:	01 d8                	add    eax,ebx
c001d446:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d44a:	56                   	push   esi
c001d44b:	e8 b8 ff ff ff       	call   c001d408 <Video::getHeight()>
c001d450:	59                   	pop    ecx
c001d451:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001d455:	7e 70                	jle    c001d4c7 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c001d457:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d45b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001d45f:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001d462:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d466:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d46a:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001d471:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d475:	89 f8                	mov    eax,edi
c001d477:	83 c0 20             	add    eax,0x20
c001d47a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d47e:	56                   	push   esi
c001d47f:	e8 78 ff ff ff       	call   c001d3fc <Video::getWidth()>
c001d484:	5a                   	pop    edx
c001d485:	39 c7                	cmp    edi,eax
c001d487:	7d 34                	jge    c001d4bd <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c001d489:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001d48e:	74 05                	je     c001d495 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c001d490:	8b 06                	mov    eax,DWORD PTR [esi]
c001d492:	55                   	push   ebp
c001d493:	eb 0d                	jmp    c001d4a2 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c001d495:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001d49a:	74 12                	je     c001d4ae <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c001d49c:	8b 06                	mov    eax,DWORD PTR [esi]
c001d49e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d4a2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d4a6:	57                   	push   edi
c001d4a7:	56                   	push   esi
c001d4a8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d4ab:	83 c4 10             	add    esp,0x10
c001d4ae:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001d4b2:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001d4b6:	47                   	inc    edi
c001d4b7:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001d4bb:	75 c1                	jne    c001d47e <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c001d4bd:	43                   	inc    ebx
c001d4be:	83 fb 20             	cmp    ebx,0x20
c001d4c1:	0f 85 79 ff ff ff    	jne    c001d440 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c001d4c7:	83 c4 2c             	add    esp,0x2c
c001d4ca:	5b                   	pop    ebx
c001d4cb:	5e                   	pop    esi
c001d4cc:	5f                   	pop    edi
c001d4cd:	5d                   	pop    ebp
c001d4ce:	c3                   	ret    
c001d4cf:	90                   	nop

c001d4d0 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001d4d0:	55                   	push   ebp
c001d4d1:	57                   	push   edi
c001d4d2:	56                   	push   esi
c001d4d3:	53                   	push   ebx
c001d4d4:	83 ec 38             	sub    esp,0x38
c001d4d7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001d4db:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c001d4df:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c001d4e3:	c1 e0 08             	shl    eax,0x8
c001d4e6:	01 d0                	add    eax,edx
c001d4e8:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001d4ec:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d4f0:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c001d4f4:	c1 e0 08             	shl    eax,0x8
c001d4f7:	01 d0                	add    eax,edx
c001d4f9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d4fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d501:	0f af 44 24 18       	imul   eax,DWORD PTR [esp+0x18]
c001d506:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d50a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d50e:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001d515:	50                   	push   eax
c001d516:	e8 97 8d ff ff       	call   c00162b2 <malloc>
c001d51b:	83 c4 10             	add    esp,0x10
c001d51e:	89 c6                	mov    esi,eax
c001d520:	85 c0                	test   eax,eax
c001d522:	75 10                	jne    c001d534 <Video::tgaParse(unsigned char*, int, int*, int*)+0x64>
c001d524:	83 ec 0c             	sub    esp,0xc
c001d527:	68 40 1e 03 c0       	push   0xc0031e40
c001d52c:	e8 1a 2b 00 00       	call   c002004b <KePanic(char const*)>
c001d531:	83 c4 10             	add    esp,0x10
c001d534:	0f b6 4b 01          	movzx  ecx,BYTE PTR [ebx+0x1]
c001d538:	ba 12 00 00 00       	mov    edx,0x12
c001d53d:	89 c8                	mov    eax,ecx
c001d53f:	85 c9                	test   ecx,ecx
c001d541:	74 11                	je     c001d554 <Video::tgaParse(unsigned char*, int, int*, int*)+0x84>
c001d543:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c001d547:	0f b7 7b 05          	movzx  edi,WORD PTR [ebx+0x5]
c001d54b:	c1 fa 03             	sar    edx,0x3
c001d54e:	0f af d7             	imul   edx,edi
c001d551:	83 c2 12             	add    edx,0x12
c001d554:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d559:	74 07                	je     c001d562 <Video::tgaParse(unsigned char*, int, int*, int*)+0x92>
c001d55b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001d560:	75 12                	jne    c001d574 <Video::tgaParse(unsigned char*, int, int*, int*)+0xa4>
c001d562:	83 ec 0c             	sub    esp,0xc
c001d565:	68 50 1e 03 c0       	push   0xc0031e50
c001d56a:	e8 d2 bb ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c001d56f:	e9 f3 01 00 00       	jmp    c001d767 <Video::tgaParse(unsigned char*, int, int*, int*)+0x297>
c001d574:	0f b6 7b 02          	movzx  edi,BYTE PTR [ebx+0x2]
c001d578:	83 ff 02             	cmp    edi,0x2
c001d57b:	74 0e                	je     c001d58b <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c001d57d:	83 ff 0a             	cmp    edi,0xa
c001d580:	0f 84 99 00 00 00    	je     c001d61f <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c001d586:	e9 c7 01 00 00       	jmp    c001d752 <Video::tgaParse(unsigned char*, int, int*, int*)+0x282>
c001d58b:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001d590:	75 0e                	jne    c001d5a0 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c001d592:	84 c0                	test   al,al
c001d594:	75 0a                	jne    c001d5a0 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c001d596:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001d599:	83 e8 18             	sub    eax,0x18
c001d59c:	a8 f7                	test   al,0xf7
c001d59e:	74 0d                	je     c001d5ad <Video::tgaParse(unsigned char*, int, int*, int*)+0xdd>
c001d5a0:	83 ec 0c             	sub    esp,0xc
c001d5a3:	68 65 1e 03 c0       	push   0xc0031e65
c001d5a8:	e9 ad 01 00 00       	jmp    c001d75a <Video::tgaParse(unsigned char*, int, int*, int*)+0x28a>
c001d5ad:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001d5b5:	31 ff                	xor    edi,edi
c001d5b7:	89 fd                	mov    ebp,edi
c001d5b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d5c1:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001d5c5:	75 0c                	jne    c001d5d3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c001d5c7:	0f b6 4c 13 03       	movzx  ecx,BYTE PTR [ebx+edx*1+0x3]
c001d5cc:	c1 e1 18             	shl    ecx,0x18
c001d5cf:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001d5d3:	45                   	inc    ebp
c001d5d4:	0f b6 44 13 02       	movzx  eax,BYTE PTR [ebx+edx*1+0x2]
c001d5d9:	c1 e0 10             	shl    eax,0x10
c001d5dc:	89 c1                	mov    ecx,eax
c001d5de:	0f b6 44 13 01       	movzx  eax,BYTE PTR [ebx+edx*1+0x1]
c001d5e3:	c1 e0 08             	shl    eax,0x8
c001d5e6:	09 c8                	or     eax,ecx
c001d5e8:	0f b6 0c 13          	movzx  ecx,BYTE PTR [ebx+edx*1]
c001d5ec:	09 c8                	or     eax,ecx
c001d5ee:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001d5f2:	89 44 ae fc          	mov    DWORD PTR [esi+ebp*4-0x4],eax
c001d5f6:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001d5fa:	c1 f8 03             	sar    eax,0x3
c001d5fd:	01 c2                	add    edx,eax
c001d5ff:	89 e8                	mov    eax,ebp
c001d601:	29 f8                	sub    eax,edi
c001d603:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001d607:	7f b0                	jg     c001d5b9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c001d609:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c001d60d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d611:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001d615:	0f 8e 53 01 00 00    	jle    c001d76e <Video::tgaParse(unsigned char*, int, int*, int*)+0x29e>
c001d61b:	89 ef                	mov    edi,ebp
c001d61d:	eb 98                	jmp    c001d5b7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe7>
c001d61f:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001d624:	75 0e                	jne    c001d634 <Video::tgaParse(unsigned char*, int, int*, int*)+0x164>
c001d626:	85 c9                	test   ecx,ecx
c001d628:	75 0a                	jne    c001d634 <Video::tgaParse(unsigned char*, int, int*, int*)+0x164>
c001d62a:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001d62d:	83 e8 18             	sub    eax,0x18
c001d630:	a8 f7                	test   al,0xf7
c001d632:	74 0d                	je     c001d641 <Video::tgaParse(unsigned char*, int, int*, int*)+0x171>
c001d634:	83 ec 0c             	sub    esp,0xc
c001d637:	68 73 1e 03 c0       	push   0xc0031e73
c001d63c:	e9 19 01 00 00       	jmp    c001d75a <Video::tgaParse(unsigned char*, int, int*, int*)+0x28a>
c001d641:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001d649:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d651:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001d655:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c001d659:	0f 8e 0f 01 00 00    	jle    c001d76e <Video::tgaParse(unsigned char*, int, int*, int*)+0x29e>
c001d65f:	3b 54 24 48          	cmp    edx,DWORD PTR [esp+0x48]
c001d663:	0f 8d 05 01 00 00    	jge    c001d76e <Video::tgaParse(unsigned char*, int, int*, int*)+0x29e>
c001d669:	0f b6 2c 13          	movzx  ebp,BYTE PTR [ebx+edx*1]
c001d66d:	8d 42 01             	lea    eax,[edx+0x1]
c001d670:	83 fd 7f             	cmp    ebp,0x7f
c001d673:	7f 12                	jg     c001d687 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1b7>
c001d675:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001d679:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c001d67c:	31 c9                	xor    ecx,ecx
c001d67e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c001d682:	e9 bd 00 00 00       	jmp    c001d744 <Video::tgaParse(unsigned char*, int, int*, int*)+0x274>
c001d687:	89 ef                	mov    edi,ebp
c001d689:	31 ed                	xor    ebp,ebp
c001d68b:	83 e7 7f             	and    edi,0x7f
c001d68e:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001d692:	8d 4f 01             	lea    ecx,[edi+0x1]
c001d695:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001d699:	75 08                	jne    c001d6a3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1d3>
c001d69b:	0f b6 6c 13 04       	movzx  ebp,BYTE PTR [ebx+edx*1+0x4]
c001d6a0:	c1 e5 18             	shl    ebp,0x18
c001d6a3:	0f b6 4c 13 03       	movzx  ecx,BYTE PTR [ebx+edx*1+0x3]
c001d6a8:	0f b6 54 13 02       	movzx  edx,BYTE PTR [ebx+edx*1+0x2]
c001d6ad:	c1 e1 10             	shl    ecx,0x10
c001d6b0:	c1 e2 08             	shl    edx,0x8
c001d6b3:	09 d1                	or     ecx,edx
c001d6b5:	0f b6 14 03          	movzx  edx,BYTE PTR [ebx+eax*1]
c001d6b9:	09 ca                	or     edx,ecx
c001d6bb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001d6bf:	09 ea                	or     edx,ebp
c001d6c1:	8d 0c 8e             	lea    ecx,[esi+ecx*4]
c001d6c4:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c001d6c8:	01 fd                	add    ebp,edi
c001d6ca:	8d 6c ae 04          	lea    ebp,[esi+ebp*4+0x4]
c001d6ce:	89 11                	mov    DWORD PTR [ecx],edx
c001d6d0:	83 c1 04             	add    ecx,0x4
c001d6d3:	39 cd                	cmp    ebp,ecx
c001d6d5:	75 f7                	jne    c001d6ce <Video::tgaParse(unsigned char*, int, int*, int*)+0x1fe>
c001d6d7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001d6db:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c001d6df:	8d 7c 0f 01          	lea    edi,[edi+ecx*1+0x1]
c001d6e3:	c1 fa 03             	sar    edx,0x3
c001d6e6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001d6ea:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001d6ee:	01 4c 24 10          	add    DWORD PTR [esp+0x10],ecx
c001d6f2:	01 d0                	add    eax,edx
c001d6f4:	89 c2                	mov    edx,eax
c001d6f6:	e9 56 ff ff ff       	jmp    c001d651 <Video::tgaParse(unsigned char*, int, int*, int*)+0x181>
c001d6fb:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d703:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001d707:	75 0c                	jne    c001d715 <Video::tgaParse(unsigned char*, int, int*, int*)+0x245>
c001d709:	0f b6 7c 03 03       	movzx  edi,BYTE PTR [ebx+eax*1+0x3]
c001d70e:	c1 e7 18             	shl    edi,0x18
c001d711:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001d715:	0f b6 54 03 02       	movzx  edx,BYTE PTR [ebx+eax*1+0x2]
c001d71a:	c1 e2 10             	shl    edx,0x10
c001d71d:	89 d7                	mov    edi,edx
c001d71f:	0f b6 54 03 01       	movzx  edx,BYTE PTR [ebx+eax*1+0x1]
c001d724:	c1 e2 08             	shl    edx,0x8
c001d727:	09 fa                	or     edx,edi
c001d729:	0f b6 3c 03          	movzx  edi,BYTE PTR [ebx+eax*1]
c001d72d:	09 fa                	or     edx,edi
c001d72f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d733:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c001d737:	89 14 8f             	mov    DWORD PTR [edi+ecx*4],edx
c001d73a:	41                   	inc    ecx
c001d73b:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c001d73f:	c1 fa 03             	sar    edx,0x3
c001d742:	01 d0                	add    eax,edx
c001d744:	39 e9                	cmp    ecx,ebp
c001d746:	7c b3                	jl     c001d6fb <Video::tgaParse(unsigned char*, int, int*, int*)+0x22b>
c001d748:	01 6c 24 04          	add    DWORD PTR [esp+0x4],ebp
c001d74c:	01 6c 24 10          	add    DWORD PTR [esp+0x10],ebp
c001d750:	eb a2                	jmp    c001d6f4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x224>
c001d752:	50                   	push   eax
c001d753:	50                   	push   eax
c001d754:	57                   	push   edi
c001d755:	68 82 1e 03 c0       	push   0xc0031e82
c001d75a:	e8 e2 b9 ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c001d75f:	89 34 24             	mov    DWORD PTR [esp],esi
c001d762:	e8 5b 8b ff ff       	call   c00162c2 <free>
c001d767:	83 c4 10             	add    esp,0x10
c001d76a:	31 f6                	xor    esi,esi
c001d76c:	eb 14                	jmp    c001d782 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b2>
c001d76e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d772:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d776:	89 18                	mov    DWORD PTR [eax],ebx
c001d778:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d77c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d780:	89 18                	mov    DWORD PTR [eax],ebx
c001d782:	83 c4 2c             	add    esp,0x2c
c001d785:	89 f0                	mov    eax,esi
c001d787:	5b                   	pop    ebx
c001d788:	5e                   	pop    esi
c001d789:	5f                   	pop    edi
c001d78a:	5d                   	pop    ebp
c001d78b:	c3                   	ret    

c001d78c <Video::putTGA(int, int, unsigned char*, int)>:
c001d78c:	55                   	push   ebp
c001d78d:	57                   	push   edi
c001d78e:	56                   	push   esi
c001d78f:	53                   	push   ebx
c001d790:	83 ec 28             	sub    esp,0x28
c001d793:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001d797:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d79b:	50                   	push   eax
c001d79c:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d7a0:	50                   	push   eax
c001d7a1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001d7a5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001d7a9:	56                   	push   esi
c001d7aa:	e8 21 fd ff ff       	call   c001d4d0 <Video::tgaParse(unsigned char*, int, int*, int*)>
c001d7af:	83 c4 20             	add    esp,0x20
c001d7b2:	85 c0                	test   eax,eax
c001d7b4:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d7b8:	74 35                	je     c001d7ef <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001d7ba:	89 c7                	mov    edi,eax
c001d7bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d7c0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001d7c4:	39 d8                	cmp    eax,ebx
c001d7c6:	7e 27                	jle    c001d7ef <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001d7c8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d7cc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d7d0:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001d7d4:	39 e8                	cmp    eax,ebp
c001d7d6:	7e 14                	jle    c001d7ec <Video::putTGA(int, int, unsigned char*, int)+0x60>
c001d7d8:	8b 06                	mov    eax,DWORD PTR [esi]
c001d7da:	83 c7 04             	add    edi,0x4
c001d7dd:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c001d7e0:	53                   	push   ebx
c001d7e1:	55                   	push   ebp
c001d7e2:	45                   	inc    ebp
c001d7e3:	56                   	push   esi
c001d7e4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d7e7:	83 c4 10             	add    esp,0x10
c001d7ea:	eb e0                	jmp    c001d7cc <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001d7ec:	43                   	inc    ebx
c001d7ed:	eb cd                	jmp    c001d7bc <Video::putTGA(int, int, unsigned char*, int)+0x30>
c001d7ef:	83 c4 1c             	add    esp,0x1c
c001d7f2:	5b                   	pop    ebx
c001d7f3:	5e                   	pop    esi
c001d7f4:	5f                   	pop    edi
c001d7f5:	5d                   	pop    ebp
c001d7f6:	c3                   	ret    
c001d7f7:	90                   	nop

c001d7f8 <ACPI::close(int, int, void*)>:
c001d7f8:	83 ec 1c             	sub    esp,0x1c
c001d7fb:	83 ec 0c             	sub    esp,0xc
c001d7fe:	68 e4 1e 03 c0       	push   0xc0031ee4
c001d803:	e8 39 b9 ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c001d808:	83 c4 10             	add    esp,0x10
c001d80b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001d813:	74 1b                	je     c001d830 <ACPI::close(int, int, void*)+0x38>
c001d815:	83 ec 0c             	sub    esp,0xc
c001d818:	68 f3 1e 03 c0       	push   0xc0031ef3
c001d81d:	e8 1f b9 ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c001d822:	83 c4 10             	add    esp,0x10
c001d825:	b8 00 00 00 00       	mov    eax,0x0
c001d82a:	e9 01 01 00 00       	jmp    c001d930 <ACPI::close(int, int, void*)+0x138>
c001d82f:	90                   	nop
c001d830:	83 ec 0c             	sub    esp,0xc
c001d833:	68 04 1f 03 c0       	push   0xc0031f04
c001d838:	e8 04 b9 ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c001d83d:	83 c4 10             	add    esp,0x10
c001d840:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001d845:	75 45                	jne    c001d88c <ACPI::close(int, int, void*)+0x94>
c001d847:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001d84c:	83 ec 08             	sub    esp,0x8
c001d84f:	50                   	push   eax
c001d850:	68 13 1f 03 c0       	push   0xc0031f13
c001d855:	e8 e7 b8 ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c001d85a:	83 c4 10             	add    esp,0x10
c001d85d:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001d862:	85 c0                	test   eax,eax
c001d864:	74 0a                	je     c001d870 <ACPI::close(int, int, void*)+0x78>
c001d866:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001d86b:	ff d0                	call   eax
c001d86d:	8d 76 00             	lea    esi,[esi+0x0]
c001d870:	83 ec 0c             	sub    esp,0xc
c001d873:	68 e4 20 03 c0       	push   0xc00320e4
c001d878:	e8 ce 27 00 00       	call   c002004b <KePanic(char const*)>
c001d87d:	83 c4 10             	add    esp,0x10
c001d880:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001d885:	e9 a6 00 00 00       	jmp    c001d930 <ACPI::close(int, int, void*)+0x138>
c001d88a:	66 90                	xchg   ax,ax
c001d88c:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001d891:	0f 85 81 00 00 00    	jne    c001d918 <ACPI::close(int, int, void*)+0x120>
c001d897:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001d89c:	83 ec 08             	sub    esp,0x8
c001d89f:	50                   	push   eax
c001d8a0:	68 31 1f 03 c0       	push   0xc0031f31
c001d8a5:	e8 97 b8 ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c001d8aa:	83 c4 10             	add    esp,0x10
c001d8ad:	a1 04 f4 03 c0       	mov    eax,ds:0xc003f404
c001d8b2:	85 c0                	test   eax,eax
c001d8b4:	74 0a                	je     c001d8c0 <ACPI::close(int, int, void*)+0xc8>
c001d8b6:	a1 04 f4 03 c0       	mov    eax,ds:0xc003f404
c001d8bb:	ff d0                	call   eax
c001d8bd:	8d 76 00             	lea    esi,[esi+0x0]
c001d8c0:	83 ec 0c             	sub    esp,0xc
c001d8c3:	68 4c 1f 03 c0       	push   0xc0031f4c
c001d8c8:	e8 74 b8 ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c001d8cd:	83 c4 10             	add    esp,0x10
c001d8d0:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001d8d5:	8d 76 00             	lea    esi,[esi+0x0]
c001d8d8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d8dd:	83 e0 02             	and    eax,0x2
c001d8e0:	74 1e                	je     c001d900 <ACPI::close(int, int, void*)+0x108>
c001d8e2:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001d8e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d8ed:	89 c2                	mov    edx,eax
c001d8ef:	ec                   	in     al,dx
c001d8f0:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001d8f4:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001d8f8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d8fc:	eb da                	jmp    c001d8d8 <ACPI::close(int, int, void*)+0xe0>
c001d8fe:	66 90                	xchg   ax,ax
c001d900:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001d907:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001d90c:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001d910:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d914:	ee                   	out    dx,al
c001d915:	8d 76 00             	lea    esi,[esi+0x0]
c001d918:	83 ec 0c             	sub    esp,0xc
c001d91b:	68 5e 1f 03 c0       	push   0xc0031f5e
c001d920:	e8 1c b8 ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c001d925:	83 c4 10             	add    esp,0x10
c001d928:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001d92d:	8d 76 00             	lea    esi,[esi+0x0]
c001d930:	83 c4 1c             	add    esp,0x1c
c001d933:	c3                   	ret    

c001d934 <findRSDP()>:
c001d934:	83 ec 1c             	sub    esp,0x1c
c001d937:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001d93c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001d942:	83 e0 04             	and    eax,0x4
c001d945:	0f b6 c0             	movzx  eax,al
c001d948:	85 c0                	test   eax,eax
c001d94a:	75 08                	jne    c001d954 <findRSDP()+0x20>
c001d94c:	b8 00 00 00 00       	mov    eax,0x0
c001d951:	eb 75                	jmp    c001d9c8 <findRSDP()+0x94>
c001d953:	90                   	nop
c001d954:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c001d959:	3d ff 07 00 00       	cmp    eax,0x7ff
c001d95e:	7f 1c                	jg     c001d97c <findRSDP()+0x48>
c001d960:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001d965:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001d96b:	83 e2 fb             	and    edx,0xfffffffb
c001d96e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001d974:	b8 00 00 00 00       	mov    eax,0x0
c001d979:	eb 4d                	jmp    c001d9c8 <findRSDP()+0x94>
c001d97b:	90                   	nop
c001d97c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001d984:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001d98c:	77 32                	ja     c001d9c0 <findRSDP()+0x8c>
c001d98e:	83 ec 04             	sub    esp,0x4
c001d991:	6a 08                	push   0x8
c001d993:	68 6d 1f 03 c0       	push   0xc0031f6d
c001d998:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d99c:	e8 df 29 fe ff       	call   c0000380 <memcmp>
c001d9a1:	83 c4 10             	add    esp,0x10
c001d9a4:	85 c0                	test   eax,eax
c001d9a6:	0f 94 c0             	sete   al
c001d9a9:	0f b6 c0             	movzx  eax,al
c001d9ac:	85 c0                	test   eax,eax
c001d9ae:	74 08                	je     c001d9b8 <findRSDP()+0x84>
c001d9b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d9b4:	eb 12                	jmp    c001d9c8 <findRSDP()+0x94>
c001d9b6:	66 90                	xchg   ax,ax
c001d9b8:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001d9bd:	eb c5                	jmp    c001d984 <findRSDP()+0x50>
c001d9bf:	90                   	nop
c001d9c0:	b8 00 00 00 00       	mov    eax,0x0
c001d9c5:	8d 76 00             	lea    esi,[esi+0x0]
c001d9c8:	83 c4 1c             	add    esp,0x1c
c001d9cb:	c3                   	ret    

c001d9cc <loadACPITables(unsigned char*)>:
c001d9cc:	57                   	push   edi
c001d9cd:	56                   	push   esi
c001d9ce:	53                   	push   ebx
c001d9cf:	83 ec 60             	sub    esp,0x60
c001d9d2:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001d9d7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001d9dd:	83 e0 04             	and    eax,0x4
c001d9e0:	0f b6 c0             	movzx  eax,al
c001d9e3:	85 c0                	test   eax,eax
c001d9e5:	0f 84 41 02 00 00    	je     c001dc2c <loadACPITables(unsigned char*)+0x260>
c001d9eb:	a0 20 f6 03 c0       	mov    al,ds:0xc003f620
c001d9f0:	0f b6 c0             	movzx  eax,al
c001d9f3:	85 c0                	test   eax,eax
c001d9f5:	74 79                	je     c001da70 <loadACPITables(unsigned char*)+0xa4>
c001d9f7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001d9fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001d9ff:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001da03:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001da06:	83 e8 24             	sub    eax,0x24
c001da09:	c1 e8 03             	shr    eax,0x3
c001da0c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001da10:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001da18:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001da1c:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c001da20:	0f 8d ba 00 00 00    	jge    c001dae0 <loadACPITables(unsigned char*)+0x114>
c001da26:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001da2a:	83 c0 24             	add    eax,0x24
c001da2d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001da31:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001da35:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001da39:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001da3d:	c1 e0 03             	shl    eax,0x3
c001da40:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c001da44:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001da48:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001da4b:	8b 00                	mov    eax,DWORD PTR [eax]
c001da4d:	89 c1                	mov    ecx,eax
c001da4f:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001da54:	8d 50 01             	lea    edx,[eax+0x1]
c001da57:	89 15 0c f4 03 c0    	mov    DWORD PTR ds:0xc003f40c,edx
c001da5d:	89 ca                	mov    edx,ecx
c001da5f:	89 14 c5 24 f4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc0bdc],edx
c001da66:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c001da6b:	eb ab                	jmp    c001da18 <loadACPITables(unsigned char*)+0x4c>
c001da6d:	8d 76 00             	lea    esi,[esi+0x0]
c001da70:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001da74:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001da78:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001da7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001da7f:	83 e8 24             	sub    eax,0x24
c001da82:	c1 e8 02             	shr    eax,0x2
c001da85:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001da89:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001da91:	8d 76 00             	lea    esi,[esi+0x0]
c001da94:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001da98:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c001da9c:	7d 42                	jge    c001dae0 <loadACPITables(unsigned char*)+0x114>
c001da9e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001daa2:	83 c0 24             	add    eax,0x24
c001daa5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001daa9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001daad:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001dab1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001dab5:	c1 e0 02             	shl    eax,0x2
c001dab8:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001dabc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dac0:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dac2:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001dac7:	8d 50 01             	lea    edx,[eax+0x1]
c001daca:	89 15 0c f4 03 c0    	mov    DWORD PTR ds:0xc003f40c,edx
c001dad0:	89 ca                	mov    edx,ecx
c001dad2:	89 14 c5 24 f4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc0bdc],edx
c001dad9:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c001dade:	eb b4                	jmp    c001da94 <loadACPITables(unsigned char*)+0xc8>
c001dae0:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c001dae8:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001daed:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001daf1:	0f 8d 39 01 00 00    	jge    c001dc30 <loadACPITables(unsigned char*)+0x264>
c001daf7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dafb:	8b 04 c5 24 f4 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc0bdc]
c001db02:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001db06:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db0a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001db0e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db12:	25 ff 0f 00 00       	and    eax,0xfff
c001db17:	89 c6                	mov    esi,eax
c001db19:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001db1f:	83 ec 0c             	sub    esp,0xc
c001db22:	6a 01                	push   0x1
c001db24:	e8 e0 a2 ff ff       	call   c0017e09 <Virt::allocateKernelVirtualPages(int)>
c001db29:	83 c4 10             	add    esp,0x10
c001db2c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001db30:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001db36:	83 ec 0c             	sub    esp,0xc
c001db39:	6a 01                	push   0x1
c001db3b:	6a 01                	push   0x1
c001db3d:	50                   	push   eax
c001db3e:	52                   	push   edx
c001db3f:	53                   	push   ebx
c001db40:	e8 d1 ab ff ff       	call   c0018716 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001db45:	83 c4 20             	add    esp,0x20
c001db48:	09 f0                	or     eax,esi
c001db4a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001db4e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001db52:	c1 e0 03             	shl    eax,0x3
c001db55:	05 20 f4 03 c0       	add    eax,0xc003f420
c001db5a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001db5e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db62:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001db66:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c001db6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001db72:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001db76:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001db7a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001db7e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001db82:	89 c6                	mov    esi,eax
c001db84:	89 d7                	mov    edi,edx
c001db86:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001db88:	89 c8                	mov    eax,ecx
c001db8a:	89 fa                	mov    edx,edi
c001db8c:	89 f3                	mov    ebx,esi
c001db8e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001db92:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001db96:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001db9a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dba1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001dba5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001dba9:	05 00 10 00 00       	add    eax,0x1000
c001dbae:	c1 e8 0c             	shr    eax,0xc
c001dbb1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001dbb5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbb9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001dbbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbc1:	25 ff 0f 00 00       	and    eax,0xfff
c001dbc6:	89 c6                	mov    esi,eax
c001dbc8:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001dbce:	83 ec 0c             	sub    esp,0xc
c001dbd1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001dbd5:	e8 2f a2 ff ff       	call   c0017e09 <Virt::allocateKernelVirtualPages(int)>
c001dbda:	83 c4 10             	add    esp,0x10
c001dbdd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001dbe1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001dbe7:	83 ec 0c             	sub    esp,0xc
c001dbea:	6a 01                	push   0x1
c001dbec:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dbf0:	50                   	push   eax
c001dbf1:	52                   	push   edx
c001dbf2:	53                   	push   ebx
c001dbf3:	e8 1e ab ff ff       	call   c0018716 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001dbf8:	83 c4 20             	add    esp,0x20
c001dbfb:	09 f0                	or     eax,esi
c001dbfd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001dc01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc05:	83 ec 0c             	sub    esp,0xc
c001dc08:	50                   	push   eax
c001dc09:	e8 19 a5 ff ff       	call   c0018127 <Virt::freeKernelVirtualPages(unsigned long)>
c001dc0e:	83 c4 10             	add    esp,0x10
c001dc11:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dc15:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dc19:	89 14 c5 24 f4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc0bdc],edx
c001dc20:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c001dc25:	e9 be fe ff ff       	jmp    c001dae8 <loadACPITables(unsigned char*)+0x11c>
c001dc2a:	66 90                	xchg   ax,ax
c001dc2c:	90                   	nop
c001dc2d:	8d 76 00             	lea    esi,[esi+0x0]
c001dc30:	83 c4 60             	add    esp,0x60
c001dc33:	5b                   	pop    ebx
c001dc34:	5e                   	pop    esi
c001dc35:	5f                   	pop    edi
c001dc36:	c3                   	ret    
c001dc37:	90                   	nop

c001dc38 <findRSDT(unsigned char*)>:
c001dc38:	57                   	push   edi
c001dc39:	56                   	push   esi
c001dc3a:	53                   	push   ebx
c001dc3b:	83 ec 50             	sub    esp,0x50
c001dc3e:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001dc43:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001dc49:	83 e0 04             	and    eax,0x4
c001dc4c:	0f b6 c0             	movzx  eax,al
c001dc4f:	85 c0                	test   eax,eax
c001dc51:	75 0d                	jne    c001dc60 <findRSDT(unsigned char*)+0x28>
c001dc53:	b8 00 00 00 00       	mov    eax,0x0
c001dc58:	e9 2b 01 00 00       	jmp    c001dd88 <findRSDT(unsigned char*)+0x150>
c001dc5d:	8d 76 00             	lea    esi,[esi+0x0]
c001dc60:	89 e0                	mov    eax,esp
c001dc62:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001dc66:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001dc6a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001dc6e:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c001dc76:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001dc7a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001dc7e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001dc82:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dc86:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001dc8a:	89 c6                	mov    esi,eax
c001dc8c:	89 d7                	mov    edi,edx
c001dc8e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dc90:	89 c8                	mov    eax,ecx
c001dc92:	89 fa                	mov    edx,edi
c001dc94:	89 f3                	mov    ebx,esi
c001dc96:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001dc9a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001dc9e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001dca2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dca6:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c001dcaa:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c001dcb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dcb6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dcba:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001dcbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcc2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001dcc6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001dcca:	25 ff 0f 00 00       	and    eax,0xfff
c001dccf:	89 c6                	mov    esi,eax
c001dcd1:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001dcd7:	83 ec 0c             	sub    esp,0xc
c001dcda:	6a 02                	push   0x2
c001dcdc:	e8 28 a1 ff ff       	call   c0017e09 <Virt::allocateKernelVirtualPages(int)>
c001dce1:	83 c4 10             	add    esp,0x10
c001dce4:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001dce8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001dcee:	83 ec 0c             	sub    esp,0xc
c001dcf1:	6a 01                	push   0x1
c001dcf3:	6a 02                	push   0x2
c001dcf5:	50                   	push   eax
c001dcf6:	52                   	push   edx
c001dcf7:	53                   	push   ebx
c001dcf8:	e8 19 aa ff ff       	call   c0018716 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001dcfd:	83 c4 20             	add    esp,0x20
c001dd00:	09 f0                	or     eax,esi
c001dd02:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001dd06:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001dd0a:	25 ff 0f 00 00       	and    eax,0xfff
c001dd0f:	89 c6                	mov    esi,eax
c001dd11:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001dd17:	83 ec 0c             	sub    esp,0xc
c001dd1a:	6a 02                	push   0x2
c001dd1c:	e8 e8 a0 ff ff       	call   c0017e09 <Virt::allocateKernelVirtualPages(int)>
c001dd21:	83 c4 10             	add    esp,0x10
c001dd24:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001dd28:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001dd2e:	83 ec 0c             	sub    esp,0xc
c001dd31:	6a 01                	push   0x1
c001dd33:	6a 02                	push   0x2
c001dd35:	50                   	push   eax
c001dd36:	52                   	push   edx
c001dd37:	53                   	push   ebx
c001dd38:	e8 d9 a9 ff ff       	call   c0018716 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001dd3d:	83 c4 20             	add    esp,0x20
c001dd40:	09 f0                	or     eax,esi
c001dd42:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001dd46:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c001dd4b:	85 c0                	test   eax,eax
c001dd4d:	75 11                	jne    c001dd60 <findRSDT(unsigned char*)+0x128>
c001dd4f:	c6 05 20 f6 03 c0 00 	mov    BYTE PTR ds:0xc003f620,0x0
c001dd56:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001dd5a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001dd5e:	eb 24                	jmp    c001dd84 <findRSDT(unsigned char*)+0x14c>
c001dd60:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c001dd65:	83 f8 02             	cmp    eax,0x2
c001dd68:	75 12                	jne    c001dd7c <findRSDT(unsigned char*)+0x144>
c001dd6a:	c6 05 20 f6 03 c0 01 	mov    BYTE PTR ds:0xc003f620,0x1
c001dd71:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001dd75:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001dd79:	eb 09                	jmp    c001dd84 <findRSDT(unsigned char*)+0x14c>
c001dd7b:	90                   	nop
c001dd7c:	b8 00 00 00 00       	mov    eax,0x0
c001dd81:	eb 05                	jmp    c001dd88 <findRSDT(unsigned char*)+0x150>
c001dd83:	90                   	nop
c001dd84:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001dd88:	83 c4 50             	add    esp,0x50
c001dd8b:	5b                   	pop    ebx
c001dd8c:	5e                   	pop    esi
c001dd8d:	5f                   	pop    edi
c001dd8e:	c3                   	ret    
c001dd8f:	90                   	nop

c001dd90 <findDataTable(unsigned char*, char*)>:
c001dd90:	83 ec 1c             	sub    esp,0x1c
c001dd93:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001dd98:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001dd9e:	83 e0 04             	and    eax,0x4
c001dda1:	0f b6 c0             	movzx  eax,al
c001dda4:	85 c0                	test   eax,eax
c001dda6:	75 08                	jne    c001ddb0 <findDataTable(unsigned char*, char*)+0x20>
c001dda8:	b8 00 00 00 00       	mov    eax,0x0
c001ddad:	eb 5d                	jmp    c001de0c <findDataTable(unsigned char*, char*)+0x7c>
c001ddaf:	90                   	nop
c001ddb0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ddb8:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001ddbd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001ddc1:	7d 41                	jge    c001de04 <findDataTable(unsigned char*, char*)+0x74>
c001ddc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ddc7:	c1 e0 03             	shl    eax,0x3
c001ddca:	05 20 f4 03 c0       	add    eax,0xc003f420
c001ddcf:	83 ec 04             	sub    esp,0x4
c001ddd2:	6a 04                	push   0x4
c001ddd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ddd8:	50                   	push   eax
c001ddd9:	e8 a2 25 fe ff       	call   c0000380 <memcmp>
c001ddde:	83 c4 10             	add    esp,0x10
c001dde1:	85 c0                	test   eax,eax
c001dde3:	0f 94 c0             	sete   al
c001dde6:	0f b6 c0             	movzx  eax,al
c001dde9:	85 c0                	test   eax,eax
c001ddeb:	74 0f                	je     c001ddfc <findDataTable(unsigned char*, char*)+0x6c>
c001dded:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ddf1:	8b 04 c5 24 f4 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc0bdc]
c001ddf8:	eb 12                	jmp    c001de0c <findDataTable(unsigned char*, char*)+0x7c>
c001ddfa:	66 90                	xchg   ax,ax
c001ddfc:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001de01:	eb b5                	jmp    c001ddb8 <findDataTable(unsigned char*, char*)+0x28>
c001de03:	90                   	nop
c001de04:	b8 00 00 00 00       	mov    eax,0x0
c001de09:	8d 76 00             	lea    esi,[esi+0x0]
c001de0c:	83 c4 1c             	add    esp,0x1c
c001de0f:	c3                   	ret    

c001de10 <scanMADT()>:
c001de10:	53                   	push   ebx
c001de11:	83 ec 38             	sub    esp,0x38
c001de14:	a1 d4 a9 03 c0       	mov    eax,ds:0xc003a9d4
c001de19:	25 00 04 00 00       	and    eax,0x400
c001de1e:	74 14                	je     c001de34 <scanMADT()+0x24>
c001de20:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001de25:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001de2b:	83 e2 fb             	and    edx,0xfffffffb
c001de2e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001de34:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001de39:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001de3f:	83 e0 04             	and    eax,0x4
c001de42:	0f b6 c0             	movzx  eax,al
c001de45:	85 c0                	test   eax,eax
c001de47:	0f 84 6b 04 00 00    	je     c001e2b8 <scanMADT()+0x4a8>
c001de4d:	e8 e2 fa ff ff       	call   c001d934 <findRSDP()>
c001de52:	a3 2c f6 03 c0       	mov    ds:0xc003f62c,eax
c001de57:	a1 2c f6 03 c0       	mov    eax,ds:0xc003f62c
c001de5c:	85 c0                	test   eax,eax
c001de5e:	75 1c                	jne    c001de7c <scanMADT()+0x6c>
c001de60:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001de65:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001de6b:	83 e2 fb             	and    edx,0xfffffffb
c001de6e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001de74:	e9 47 04 00 00       	jmp    c001e2c0 <scanMADT()+0x4b0>
c001de79:	8d 76 00             	lea    esi,[esi+0x0]
c001de7c:	a1 2c f6 03 c0       	mov    eax,ds:0xc003f62c
c001de81:	83 ec 0c             	sub    esp,0xc
c001de84:	50                   	push   eax
c001de85:	e8 ae fd ff ff       	call   c001dc38 <findRSDT(unsigned char*)>
c001de8a:	83 c4 10             	add    esp,0x10
c001de8d:	a3 28 f6 03 c0       	mov    ds:0xc003f628,eax
c001de92:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001de97:	85 c0                	test   eax,eax
c001de99:	75 19                	jne    c001deb4 <scanMADT()+0xa4>
c001de9b:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001dea0:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001dea6:	83 e2 fb             	and    edx,0xfffffffb
c001dea9:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001deaf:	e9 0c 04 00 00       	jmp    c001e2c0 <scanMADT()+0x4b0>
c001deb4:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001deb9:	83 ec 0c             	sub    esp,0xc
c001debc:	50                   	push   eax
c001debd:	e8 0a fb ff ff       	call   c001d9cc <loadACPITables(unsigned char*)>
c001dec2:	83 c4 10             	add    esp,0x10
c001dec5:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001deca:	83 ec 08             	sub    esp,0x8
c001decd:	68 76 1f 03 c0       	push   0xc0031f76
c001ded2:	50                   	push   eax
c001ded3:	e8 b8 fe ff ff       	call   c001dd90 <findDataTable(unsigned char*, char*)>
c001ded8:	83 c4 10             	add    esp,0x10
c001dedb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001dedf:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c001dee4:	75 1a                	jne    c001df00 <scanMADT()+0xf0>
c001dee6:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001deeb:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001def1:	83 e2 fe             	and    edx,0xfffffffe
c001def4:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001defa:	e9 c1 03 00 00       	jmp    c001e2c0 <scanMADT()+0x4b0>
c001deff:	90                   	nop
c001df00:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001df08:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001df0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001df0f:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001df13:	0f 87 a7 03 00 00    	ja     c001e2c0 <scanMADT()+0x4b0>
c001df19:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c001df21:	0f 87 99 03 00 00    	ja     c001e2c0 <scanMADT()+0x4b0>
c001df27:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001df2b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001df2f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001df33:	8d 50 01             	lea    edx,[eax+0x1]
c001df36:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001df3a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001df3e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001df42:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001df46:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001df4a:	8d 50 01             	lea    edx,[eax+0x1]
c001df4d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001df51:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001df55:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001df59:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001df5d:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c001df62:	83 f8 02             	cmp    eax,0x2
c001df65:	0f 86 51 03 00 00    	jbe    c001e2bc <scanMADT()+0x4ac>
c001df6b:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001df70:	85 c0                	test   eax,eax
c001df72:	75 58                	jne    c001dfcc <scanMADT()+0x1bc>
c001df74:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001df78:	8d 50 01             	lea    edx,[eax+0x1]
c001df7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001df7f:	8a 15 20 f8 03 c0    	mov    dl,BYTE PTR ds:0xc003f820
c001df85:	0f b6 d2             	movzx  edx,dl
c001df88:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001df8c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001df90:	88 82 60 f8 03 c0    	mov    BYTE PTR [edx-0x3ffc07a0],al
c001df96:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001df9a:	8d 50 01             	lea    edx,[eax+0x1]
c001df9d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001dfa1:	8a 15 20 f8 03 c0    	mov    dl,BYTE PTR ds:0xc003f820
c001dfa7:	8d 4a 01             	lea    ecx,[edx+0x1]
c001dfaa:	88 0d 20 f8 03 c0    	mov    BYTE PTR ds:0xc003f820,cl
c001dfb0:	0f b6 d2             	movzx  edx,dl
c001dfb3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001dfb7:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001dfbb:	88 82 40 f8 03 c0    	mov    BYTE PTR [edx-0x3ffc07c0],al
c001dfc1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001dfc6:	e9 d9 02 00 00       	jmp    c001e2a4 <scanMADT()+0x494>
c001dfcb:	90                   	nop
c001dfcc:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001dfd1:	83 f8 01             	cmp    eax,0x1
c001dfd4:	0f 85 1a 01 00 00    	jne    c001e0f4 <scanMADT()+0x2e4>
c001dfda:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001dfde:	8d 50 01             	lea    edx,[eax+0x1]
c001dfe1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001dfe5:	8a 15 e0 f6 03 c0    	mov    dl,BYTE PTR ds:0xc003f6e0
c001dfeb:	0f b6 d2             	movzx  edx,dl
c001dfee:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001dff2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001dff6:	88 82 00 f7 03 c0    	mov    BYTE PTR [edx-0x3ffc0900],al
c001dffc:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c001e001:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e005:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e009:	01 d0                	add    eax,edx
c001e00b:	83 c0 2c             	add    eax,0x2c
c001e00e:	8a 00                	mov    al,BYTE PTR [eax]
c001e010:	0f b6 d0             	movzx  edx,al
c001e013:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e017:	8d 48 01             	lea    ecx,[eax+0x1]
c001e01a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e01e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e022:	0f b6 c0             	movzx  eax,al
c001e025:	c1 e0 08             	shl    eax,0x8
c001e028:	89 d1                	mov    ecx,edx
c001e02a:	09 c1                	or     ecx,eax
c001e02c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e030:	8d 50 02             	lea    edx,[eax+0x2]
c001e033:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e037:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e03b:	0f b6 c0             	movzx  eax,al
c001e03e:	c1 e0 10             	shl    eax,0x10
c001e041:	09 c1                	or     ecx,eax
c001e043:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e047:	8d 50 03             	lea    edx,[eax+0x3]
c001e04a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e04e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e052:	0f b6 c0             	movzx  eax,al
c001e055:	c1 e0 18             	shl    eax,0x18
c001e058:	09 c1                	or     ecx,eax
c001e05a:	89 ca                	mov    edx,ecx
c001e05c:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c001e061:	0f b6 c0             	movzx  eax,al
c001e064:	89 14 85 20 f7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc08e0],edx
c001e06b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e070:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e074:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e078:	01 d0                	add    eax,edx
c001e07a:	83 c0 2c             	add    eax,0x2c
c001e07d:	8a 00                	mov    al,BYTE PTR [eax]
c001e07f:	0f b6 d0             	movzx  edx,al
c001e082:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e086:	8d 48 01             	lea    ecx,[eax+0x1]
c001e089:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e08d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e091:	0f b6 c0             	movzx  eax,al
c001e094:	c1 e0 08             	shl    eax,0x8
c001e097:	89 d1                	mov    ecx,edx
c001e099:	09 c1                	or     ecx,eax
c001e09b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e09f:	8d 50 02             	lea    edx,[eax+0x2]
c001e0a2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e0a6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e0aa:	0f b6 c0             	movzx  eax,al
c001e0ad:	c1 e0 10             	shl    eax,0x10
c001e0b0:	09 c1                	or     ecx,eax
c001e0b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e0b6:	8d 50 03             	lea    edx,[eax+0x3]
c001e0b9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e0bd:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e0c1:	0f b6 c0             	movzx  eax,al
c001e0c4:	c1 e0 18             	shl    eax,0x18
c001e0c7:	09 c1                	or     ecx,eax
c001e0c9:	89 ca                	mov    edx,ecx
c001e0cb:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c001e0d0:	0f b6 c0             	movzx  eax,al
c001e0d3:	89 14 85 a0 f7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc0860],edx
c001e0da:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e0df:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c001e0e4:	83 c0 01             	add    eax,0x1
c001e0e7:	a2 e0 f6 03 c0       	mov    ds:0xc003f6e0,al
c001e0ec:	e9 b3 01 00 00       	jmp    c001e2a4 <scanMADT()+0x494>
c001e0f1:	8d 76 00             	lea    esi,[esi+0x0]
c001e0f4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e0f9:	83 f8 02             	cmp    eax,0x2
c001e0fc:	0f 85 ea 00 00 00    	jne    c001e1ec <scanMADT()+0x3dc>
c001e102:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e106:	8d 50 01             	lea    edx,[eax+0x1]
c001e109:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e10d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e111:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e115:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001e119:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e11d:	8d 50 01             	lea    edx,[eax+0x1]
c001e120:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e124:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e128:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e12c:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001e130:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e134:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e138:	01 d0                	add    eax,edx
c001e13a:	83 c0 2c             	add    eax,0x2c
c001e13d:	8a 00                	mov    al,BYTE PTR [eax]
c001e13f:	0f b6 d0             	movzx  edx,al
c001e142:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e146:	8d 48 01             	lea    ecx,[eax+0x1]
c001e149:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e14d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e151:	0f b6 c0             	movzx  eax,al
c001e154:	c1 e0 08             	shl    eax,0x8
c001e157:	89 d1                	mov    ecx,edx
c001e159:	09 c1                	or     ecx,eax
c001e15b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e15f:	8d 50 02             	lea    edx,[eax+0x2]
c001e162:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e166:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e16a:	0f b6 c0             	movzx  eax,al
c001e16d:	c1 e0 10             	shl    eax,0x10
c001e170:	09 c1                	or     ecx,eax
c001e172:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e176:	8d 50 03             	lea    edx,[eax+0x3]
c001e179:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e17d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e181:	0f b6 c0             	movzx  eax,al
c001e184:	c1 e0 18             	shl    eax,0x18
c001e187:	09 c8                	or     eax,ecx
c001e189:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e18d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e192:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e196:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e19a:	01 d0                	add    eax,edx
c001e19c:	83 c0 2c             	add    eax,0x2c
c001e19f:	8a 00                	mov    al,BYTE PTR [eax]
c001e1a1:	0f b6 c0             	movzx  eax,al
c001e1a4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e1a8:	8d 4a 01             	lea    ecx,[edx+0x1]
c001e1ab:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e1af:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c001e1b3:	0f b6 d2             	movzx  edx,dl
c001e1b6:	c1 e2 08             	shl    edx,0x8
c001e1b9:	09 d0                	or     eax,edx
c001e1bb:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001e1c0:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001e1c5:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001e1ca:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e1ce:	88 90 88 37 03 c0    	mov    BYTE PTR [eax-0x3ffcc878],dl
c001e1d4:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c001e1d9:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001e1de:	66 89 84 12 c0 f6 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffc0940],ax
c001e1e6:	e9 b9 00 00 00       	jmp    c001e2a4 <scanMADT()+0x494>
c001e1eb:	90                   	nop
c001e1ec:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e1f1:	83 f8 04             	cmp    eax,0x4
c001e1f4:	0f 85 9a 00 00 00    	jne    c001e294 <scanMADT()+0x484>
c001e1fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e1fe:	8d 50 01             	lea    edx,[eax+0x1]
c001e201:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e205:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e209:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e20d:	0f b6 c0             	movzx  eax,al
c001e210:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e214:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e218:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e21c:	01 d0                	add    eax,edx
c001e21e:	83 c0 2c             	add    eax,0x2c
c001e221:	8a 00                	mov    al,BYTE PTR [eax]
c001e223:	0f b6 d0             	movzx  edx,al
c001e226:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e22a:	8d 48 01             	lea    ecx,[eax+0x1]
c001e22d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e231:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e235:	0f b6 c0             	movzx  eax,al
c001e238:	c1 e0 08             	shl    eax,0x8
c001e23b:	09 d0                	or     eax,edx
c001e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e241:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001e246:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e24a:	8d 50 01             	lea    edx,[eax+0x1]
c001e24d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e251:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e255:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e259:	0f b6 c0             	movzx  eax,al
c001e25c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e264:	c1 e0 08             	shl    eax,0x8
c001e267:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001e26b:	89 c1                	mov    ecx,eax
c001e26d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e271:	c1 e0 18             	shl    eax,0x18
c001e274:	89 c3                	mov    ebx,eax
c001e276:	a1 30 f6 03 c0       	mov    eax,ds:0xc003f630
c001e27b:	8d 50 01             	lea    edx,[eax+0x1]
c001e27e:	89 15 30 f6 03 c0    	mov    DWORD PTR ds:0xc003f630,edx
c001e284:	09 d9                	or     ecx,ebx
c001e286:	89 ca                	mov    edx,ecx
c001e288:	89 14 85 40 f6 03 c0 	mov    DWORD PTR [eax*4-0x3ffc09c0],edx
c001e28f:	eb 13                	jmp    c001e2a4 <scanMADT()+0x494>
c001e291:	8d 76 00             	lea    esi,[esi+0x0]
c001e294:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e299:	83 f8 05             	cmp    eax,0x5
c001e29c:	75 06                	jne    c001e2a4 <scanMADT()+0x494>
c001e29e:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001e2a3:	90                   	nop
c001e2a4:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c001e2a9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e2ad:	01 d0                	add    eax,edx
c001e2af:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001e2b3:	e9 50 fc ff ff       	jmp    c001df08 <scanMADT()+0xf8>
c001e2b8:	90                   	nop
c001e2b9:	eb 05                	jmp    c001e2c0 <scanMADT()+0x4b0>
c001e2bb:	90                   	nop
c001e2bc:	90                   	nop
c001e2bd:	8d 76 00             	lea    esi,[esi+0x0]
c001e2c0:	83 c4 38             	add    esp,0x38
c001e2c3:	5b                   	pop    ebx
c001e2c4:	c3                   	ret    
c001e2c5:	90                   	nop
c001e2c6:	66 90                	xchg   ax,ax

c001e2c8 <ACPI::ACPI()>:
c001e2c8:	83 ec 0c             	sub    esp,0xc
c001e2cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2cf:	83 ec 08             	sub    esp,0x8
c001e2d2:	68 7b 1f 03 c0       	push   0xc0031f7b
c001e2d7:	50                   	push   eax
c001e2d8:	e8 47 d0 ff ff       	call   c001b324 <Device::Device(char const*)>
c001e2dd:	83 c4 10             	add    esp,0x10
c001e2e0:	ba 88 21 03 c0       	mov    edx,0xc0032188
c001e2e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2e9:	89 10                	mov    DWORD PTR [eax],edx
c001e2eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2ef:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e2f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2fa:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001e304:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e308:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c001e312:	e8 f9 fa ff ff       	call   c001de10 <scanMADT()>
c001e317:	90                   	nop
c001e318:	83 c4 0c             	add    esp,0xc
c001e31b:	c3                   	ret    

c001e31c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001e31c:	83 ec 2c             	sub    esp,0x2c
c001e31f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001e323:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e327:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001e32b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001e32f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001e334:	88 d0                	mov    al,dl
c001e336:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001e33a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e33f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001e347:	90                   	nop
c001e348:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e34c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e352:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001e356:	0f 8d b0 00 00 00    	jge    c001e40c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c001e35c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e360:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e364:	83 c2 2a             	add    edx,0x2a
c001e367:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001e36b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e370:	0f b7 c0             	movzx  eax,ax
c001e373:	39 c2                	cmp    edx,eax
c001e375:	0f 85 85 00 00 00    	jne    c001e400 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c001e37b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e37f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e383:	83 c2 2a             	add    edx,0x2a
c001e386:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001e38a:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001e38f:	0f b6 c0             	movzx  eax,al
c001e392:	39 c2                	cmp    edx,eax
c001e394:	75 6a                	jne    c001e400 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c001e396:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001e39b:	85 c0                	test   eax,eax
c001e39d:	74 3d                	je     c001e3dc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c001e39f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e3a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e3a7:	83 c2 2a             	add    edx,0x2a
c001e3aa:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c001e3ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e3b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e3b5:	39 c2                	cmp    edx,eax
c001e3b7:	74 13                	je     c001e3cc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c001e3b9:	83 ec 0c             	sub    esp,0xc
c001e3bc:	68 08 21 03 c0       	push   0xc0032108
c001e3c1:	e8 85 1c 00 00       	call   c002004b <KePanic(char const*)>
c001e3c6:	83 c4 10             	add    esp,0x10
c001e3c9:	8d 76 00             	lea    esi,[esi+0x0]
c001e3cc:	83 ec 0c             	sub    esp,0xc
c001e3cf:	68 80 1f 03 c0       	push   0xc0031f80
c001e3d4:	e8 72 1c 00 00       	call   c002004b <KePanic(char const*)>
c001e3d9:	83 c4 10             	add    esp,0x10
c001e3dc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e3e0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e3e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e3e8:	83 c2 2a             	add    edx,0x2a
c001e3eb:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001e3ef:	8b 02                	mov    eax,DWORD PTR [edx]
c001e3f1:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001e3f4:	89 01                	mov    DWORD PTR [ecx],eax
c001e3f6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e3f9:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e3fe:	66 90                	xchg   ax,ax
c001e400:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c001e405:	e9 3e ff ff ff       	jmp    c001e348 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c001e40a:	66 90                	xchg   ax,ax
c001e40c:	90                   	nop
c001e40d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e411:	83 c4 2c             	add    esp,0x2c
c001e414:	c2 04 00             	ret    0x4
c001e417:	90                   	nop

c001e418 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c001e418:	83 ec 1c             	sub    esp,0x1c
c001e41b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e41f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001e423:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e427:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001e42c:	88 c8                	mov    al,cl
c001e42e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001e432:	88 d0                	mov    al,dl
c001e434:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001e438:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e43c:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e442:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e446:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001e449:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c001e44d:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c001e451:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e455:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e45b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e45f:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001e462:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e466:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c001e46b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e46f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e475:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001e479:	83 c0 01             	add    eax,0x1
c001e47c:	88 c1                	mov    cl,al
c001e47e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e482:	83 c2 2a             	add    edx,0x2a
c001e485:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001e489:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e48d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e493:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e497:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001e49a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e49e:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001e4a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e4a6:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e4ac:	8d 50 01             	lea    edx,[eax+0x1]
c001e4af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e4b3:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c001e4b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e4bd:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e4c3:	3d 00 02 00 00       	cmp    eax,0x200
c001e4c8:	75 12                	jne    c001e4dc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c001e4ca:	83 ec 0c             	sub    esp,0xc
c001e4cd:	68 8f 1f 03 c0       	push   0xc0031f8f
c001e4d2:	e8 74 1b 00 00       	call   c002004b <KePanic(char const*)>
c001e4d7:	83 c4 10             	add    esp,0x10
c001e4da:	66 90                	xchg   ax,ax
c001e4dc:	90                   	nop
c001e4dd:	83 c4 1c             	add    esp,0x1c
c001e4e0:	c3                   	ret    
c001e4e1:	90                   	nop
c001e4e2:	66 90                	xchg   ax,ax

c001e4e4 <ACPI::setScreenBrightnessLevel(void*, int)>:
c001e4e4:	b8 00 00 00 00       	mov    eax,0x0
c001e4e9:	c3                   	ret    
c001e4ea:	66 90                	xchg   ax,ax

c001e4ec <ACPI::detectPCI()>:
c001e4ec:	53                   	push   ebx
c001e4ed:	83 ec 28             	sub    esp,0x28
c001e4f0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e4f5:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c001e4fa:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e4ff:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e505:	83 e0 04             	and    eax,0x4
c001e508:	0f b6 c0             	movzx  eax,al
c001e50b:	85 c0                	test   eax,eax
c001e50d:	74 2d                	je     c001e53c <ACPI::detectPCI()+0x50>
c001e50f:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e514:	83 ec 08             	sub    esp,0x8
c001e517:	68 ac 1f 03 c0       	push   0xc0031fac
c001e51c:	50                   	push   eax
c001e51d:	e8 6e f8 ff ff       	call   c001dd90 <findDataTable(unsigned char*, char*)>
c001e522:	83 c4 10             	add    esp,0x10
c001e525:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e529:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001e52e:	74 0c                	je     c001e53c <ACPI::detectPCI()+0x50>
c001e530:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e535:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001e53a:	66 90                	xchg   ax,ax
c001e53c:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c001e544:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e548:	8a 00                	mov    al,BYTE PTR [eax]
c001e54a:	0f b6 c0             	movzx  eax,al
c001e54d:	83 f8 01             	cmp    eax,0x1
c001e550:	75 0e                	jne    c001e560 <ACPI::detectPCI()+0x74>
c001e552:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e557:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001e55c:	eb 2e                	jmp    c001e58c <ACPI::detectPCI()+0xa0>
c001e55e:	66 90                	xchg   ax,ax
c001e560:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e564:	8a 00                	mov    al,BYTE PTR [eax]
c001e566:	0f b6 c0             	movzx  eax,al
c001e569:	83 f8 02             	cmp    eax,0x2
c001e56c:	75 1e                	jne    c001e58c <ACPI::detectPCI()+0xa0>
c001e56e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e573:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001e578:	85 c0                	test   eax,eax
c001e57a:	74 10                	je     c001e58c <ACPI::detectPCI()+0xa0>
c001e57c:	83 ec 0c             	sub    esp,0xc
c001e57f:	68 38 21 03 c0       	push   0xc0032138
c001e584:	e8 c2 1a 00 00       	call   c002004b <KePanic(char const*)>
c001e589:	83 c4 10             	add    esp,0x10
c001e58c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001e590:	83 f0 01             	xor    eax,0x1
c001e593:	0f b6 c0             	movzx  eax,al
c001e596:	85 c0                	test   eax,eax
c001e598:	74 46                	je     c001e5e0 <ACPI::detectPCI()+0xf4>
c001e59a:	e8 91 1b fe ff       	call   c0000130 <manualPCIProbe>
c001e59f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e5a3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e5a8:	75 0e                	jne    c001e5b8 <ACPI::detectPCI()+0xcc>
c001e5aa:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e5af:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001e5b4:	eb 2a                	jmp    c001e5e0 <ACPI::detectPCI()+0xf4>
c001e5b6:	66 90                	xchg   ax,ax
c001e5b8:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c001e5bd:	75 21                	jne    c001e5e0 <ACPI::detectPCI()+0xf4>
c001e5bf:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e5c4:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001e5c9:	85 c0                	test   eax,eax
c001e5cb:	74 13                	je     c001e5e0 <ACPI::detectPCI()+0xf4>
c001e5cd:	83 ec 0c             	sub    esp,0xc
c001e5d0:	68 38 21 03 c0       	push   0xc0032138
c001e5d5:	e8 71 1a 00 00       	call   c002004b <KePanic(char const*)>
c001e5da:	83 c4 10             	add    esp,0x10
c001e5dd:	8d 76 00             	lea    esi,[esi+0x0]
c001e5e0:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001e5e5:	85 c0                	test   eax,eax
c001e5e7:	0f 84 87 00 00 00    	je     c001e674 <ACPI::detectPCI()+0x188>
c001e5ed:	83 ec 0c             	sub    esp,0xc
c001e5f0:	68 b1 1f 03 c0       	push   0xc0031fb1
c001e5f5:	e8 09 13 00 00       	call   c001f903 <KeSetBootMessage(char const*)>
c001e5fa:	83 c4 10             	add    esp,0x10
c001e5fd:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c001e605:	83 ec 0c             	sub    esp,0xc
c001e608:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e60c:	e8 a1 7c ff ff       	call   c00162b2 <malloc>
c001e611:	83 c4 10             	add    esp,0x10
c001e614:	89 c3                	mov    ebx,eax
c001e616:	83 ec 0c             	sub    esp,0xc
c001e619:	53                   	push   ebx
c001e61a:	e8 51 b6 00 00       	call   c0029c70 <PCI::PCI()>
c001e61f:	83 c4 10             	add    esp,0x10
c001e622:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001e626:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e62a:	83 ec 08             	sub    esp,0x8
c001e62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e631:	50                   	push   eax
c001e632:	e8 8b cb ff ff       	call   c001b1c2 <Device::addChild(Device*)>
c001e637:	83 c4 10             	add    esp,0x10
c001e63a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e63e:	8b 00                	mov    eax,DWORD PTR [eax]
c001e640:	83 c0 08             	add    eax,0x8
c001e643:	8b 00                	mov    eax,DWORD PTR [eax]
c001e645:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c001e64a:	85 d2                	test   edx,edx
c001e64c:	74 0a                	je     c001e658 <ACPI::detectPCI()+0x16c>
c001e64e:	ba 01 00 00 00       	mov    edx,0x1
c001e653:	eb 0b                	jmp    c001e660 <ACPI::detectPCI()+0x174>
c001e655:	8d 76 00             	lea    esi,[esi+0x0]
c001e658:	ba 02 00 00 00       	mov    edx,0x2
c001e65d:	8d 76 00             	lea    esi,[esi+0x0]
c001e660:	6a 00                	push   0x0
c001e662:	6a 00                	push   0x0
c001e664:	52                   	push   edx
c001e665:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e669:	ff d0                	call   eax
c001e66b:	83 c4 10             	add    esp,0x10
c001e66e:	e9 91 00 00 00       	jmp    c001e704 <ACPI::detectPCI()+0x218>
c001e673:	90                   	nop
c001e674:	83 ec 0c             	sub    esp,0xc
c001e677:	68 c9 1f 03 c0       	push   0xc0031fc9
c001e67c:	e8 82 12 00 00       	call   c001f903 <KeSetBootMessage(char const*)>
c001e681:	83 c4 10             	add    esp,0x10
c001e684:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c001e68b:	83 ec 0c             	sub    esp,0xc
c001e68e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e692:	e8 1b 7c ff ff       	call   c00162b2 <malloc>
c001e697:	83 c4 10             	add    esp,0x10
c001e69a:	89 c3                	mov    ebx,eax
c001e69c:	83 ec 0c             	sub    esp,0xc
c001e69f:	53                   	push   ebx
c001e6a0:	e8 65 c1 00 00       	call   c002a80a <IDE::IDE()>
c001e6a5:	83 c4 10             	add    esp,0x10
c001e6a8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001e6ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e6b0:	83 ec 08             	sub    esp,0x8
c001e6b3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e6b7:	50                   	push   eax
c001e6b8:	e8 05 cb ff ff       	call   c001b1c2 <Device::addChild(Device*)>
c001e6bd:	83 c4 10             	add    esp,0x10
c001e6c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e6c4:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c001e6ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e6d2:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c001e6db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e6df:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c001e6e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e6ec:	8b 00                	mov    eax,DWORD PTR [eax]
c001e6ee:	83 c0 08             	add    eax,0x8
c001e6f1:	8b 00                	mov    eax,DWORD PTR [eax]
c001e6f3:	6a 00                	push   0x0
c001e6f5:	6a 00                	push   0x0
c001e6f7:	6a 00                	push   0x0
c001e6f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e6fd:	ff d0                	call   eax
c001e6ff:	83 c4 10             	add    esp,0x10
c001e702:	66 90                	xchg   ax,ax
c001e704:	90                   	nop
c001e705:	83 c4 28             	add    esp,0x28
c001e708:	5b                   	pop    ebx
c001e709:	c3                   	ret    
c001e70a:	66 90                	xchg   ax,ax

c001e70c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001e70c:	83 ec 1c             	sub    esp,0x1c
c001e70f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e713:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001e716:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e71a:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e71f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001e724:	83 ec 08             	sub    esp,0x8
c001e727:	52                   	push   edx
c001e728:	50                   	push   eax
c001e729:	e8 46 72 ff ff       	call   c0015974 <Computer::readCMOS(unsigned char)>
c001e72e:	83 c4 10             	add    esp,0x10
c001e731:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001e735:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e73a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001e73f:	83 ec 04             	sub    esp,0x4
c001e742:	6a 01                	push   0x1
c001e744:	52                   	push   edx
c001e745:	50                   	push   eax
c001e746:	e8 43 73 ff ff       	call   c0015a8e <Computer::writeCMOS(unsigned char, unsigned char)>
c001e74b:	83 c4 10             	add    esp,0x10
c001e74e:	90                   	nop
c001e74f:	83 c4 1c             	add    esp,0x1c
c001e752:	c3                   	ret    
c001e753:	90                   	nop

c001e754 <ACPI::sleep()>:
c001e754:	83 ec 0c             	sub    esp,0xc
c001e757:	a1 00 f4 03 c0       	mov    eax,ds:0xc003f400
c001e75c:	85 c0                	test   eax,eax
c001e75e:	74 08                	je     c001e768 <ACPI::sleep()+0x14>
c001e760:	a1 00 f4 03 c0       	mov    eax,ds:0xc003f400
c001e765:	ff d0                	call   eax
c001e767:	90                   	nop
c001e768:	90                   	nop
c001e769:	83 c4 0c             	add    esp,0xc
c001e76c:	c3                   	ret    
c001e76d:	90                   	nop
c001e76e:	66 90                	xchg   ax,ax

c001e770 <ACPI::open(int, int, void*)>:
c001e770:	57                   	push   edi
c001e771:	56                   	push   esi
c001e772:	53                   	push   ebx
c001e773:	81 ec 70 01 00 00    	sub    esp,0x170
c001e779:	83 ec 0c             	sub    esp,0xc
c001e77c:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c001e783:	e8 64 fd ff ff       	call   c001e4ec <ACPI::detectPCI()>
c001e788:	83 c4 10             	add    esp,0x10
c001e78b:	83 ec 0c             	sub    esp,0xc
c001e78e:	68 60 21 03 c0       	push   0xc0032160
c001e793:	e8 6b 11 00 00       	call   c001f903 <KeSetBootMessage(char const*)>
c001e798:	83 c4 10             	add    esp,0x10
c001e79b:	b8 4c 05 00 00       	mov    eax,0x54c
c001e7a0:	8a 00                	mov    al,BYTE PTR [eax]
c001e7a2:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c001e7a9:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c001e7b1:	83 f8 01             	cmp    eax,0x1
c001e7b4:	75 12                	jne    c001e7c8 <ACPI::open(int, int, void*)+0x58>
c001e7b6:	83 ec 0c             	sub    esp,0xc
c001e7b9:	68 de 1f 03 c0       	push   0xc0031fde
c001e7be:	e8 94 4e 00 00       	call   c0023657 <Thr::loadKernelSymbolTable(char const*)>
c001e7c3:	83 c4 10             	add    esp,0x10
c001e7c6:	eb 34                	jmp    c001e7fc <ACPI::open(int, int, void*)+0x8c>
c001e7c8:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c001e7d0:	3d bb 00 00 00       	cmp    eax,0xbb
c001e7d5:	75 15                	jne    c001e7ec <ACPI::open(int, int, void*)+0x7c>
c001e7d7:	83 ec 0c             	sub    esp,0xc
c001e7da:	68 fc 1f 03 c0       	push   0xc0031ffc
c001e7df:	e8 73 4e 00 00       	call   c0023657 <Thr::loadKernelSymbolTable(char const*)>
c001e7e4:	83 c4 10             	add    esp,0x10
c001e7e7:	eb 13                	jmp    c001e7fc <ACPI::open(int, int, void*)+0x8c>
c001e7e9:	8d 76 00             	lea    esi,[esi+0x0]
c001e7ec:	83 ec 0c             	sub    esp,0xc
c001e7ef:	68 1a 20 03 c0       	push   0xc003201a
c001e7f4:	e8 52 18 00 00       	call   c002004b <KePanic(char const*)>
c001e7f9:	83 c4 10             	add    esp,0x10
c001e7fc:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c001e804:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c001e80f:	83 ec 0c             	sub    esp,0xc
c001e812:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001e819:	e8 94 7a ff ff       	call   c00162b2 <malloc>
c001e81e:	83 c4 10             	add    esp,0x10
c001e821:	89 c3                	mov    ebx,eax
c001e823:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001e828:	83 ec 04             	sub    esp,0x4
c001e82b:	50                   	push   eax
c001e82c:	68 34 20 03 c0       	push   0xc0032034
c001e831:	53                   	push   ebx
c001e832:	e8 11 bb ff ff       	call   c001a348 <File::File(char const*, Process*)>
c001e837:	83 c4 10             	add    esp,0x10
c001e83a:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c001e841:	83 ec 08             	sub    esp,0x8
c001e844:	6a 01                	push   0x1
c001e846:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001e84d:	e8 14 bb ff ff       	call   c001a366 <File::open(FileOpenMode)>
c001e852:	83 c4 10             	add    esp,0x10
c001e855:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c001e85c:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c001e864:	75 16                	jne    c001e87c <ACPI::open(int, int, void*)+0x10c>
c001e866:	83 ec 0c             	sub    esp,0xc
c001e869:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001e870:	e8 4f bb ff ff       	call   c001a3c4 <File::close()>
c001e875:	83 c4 10             	add    esp,0x10
c001e878:	eb 0a                	jmp    c001e884 <ACPI::open(int, int, void*)+0x114>
c001e87a:	66 90                	xchg   ax,ax
c001e87c:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c001e884:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c001e88c:	74 1e                	je     c001e8ac <ACPI::open(int, int, void*)+0x13c>
c001e88e:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c001e895:	8b 00                	mov    eax,DWORD PTR [eax]
c001e897:	83 c0 08             	add    eax,0x8
c001e89a:	8b 00                	mov    eax,DWORD PTR [eax]
c001e89c:	83 ec 0c             	sub    esp,0xc
c001e89f:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001e8a6:	ff d0                	call   eax
c001e8a8:	83 c4 10             	add    esp,0x10
c001e8ab:	90                   	nop
c001e8ac:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c001e8b3:	83 f0 01             	xor    eax,0x1
c001e8b6:	0f b6 c0             	movzx  eax,al
c001e8b9:	85 c0                	test   eax,eax
c001e8bb:	74 43                	je     c001e900 <ACPI::open(int, int, void*)+0x190>
c001e8bd:	83 ec 0c             	sub    esp,0xc
c001e8c0:	68 52 20 03 c0       	push   0xc0032052
c001e8c5:	e8 39 10 00 00       	call   c001f903 <KeSetBootMessage(char const*)>
c001e8ca:	83 c4 10             	add    esp,0x10
c001e8cd:	83 ec 04             	sub    esp,0x4
c001e8d0:	6a 0c                	push   0xc
c001e8d2:	68 6d 20 03 c0       	push   0xc003206d
c001e8d7:	68 7e 20 03 c0       	push   0xc003207e
c001e8dc:	e8 b3 3f 00 00       	call   c0022894 <Reg::readIntWithDefault(char*, char*, int)>
c001e8e1:	83 c4 10             	add    esp,0x10
c001e8e4:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c001e8eb:	83 ec 0c             	sub    esp,0xc
c001e8ee:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c001e8f5:	e8 3e 97 ff ff       	call   c0018038 <Virt::setupPageSwapping(int)>
c001e8fa:	83 c4 10             	add    esp,0x10
c001e8fd:	8d 76 00             	lea    esi,[esi+0x0]
c001e900:	83 ec 0c             	sub    esp,0xc
c001e903:	68 c4 0a 03 c0       	push   0xc0030ac4
c001e908:	e8 f6 0f 00 00       	call   c001f903 <KeSetBootMessage(char const*)>
c001e90d:	83 c4 10             	add    esp,0x10
c001e910:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c001e917:	83 ec 08             	sub    esp,0x8
c001e91a:	6a 13                	push   0x13
c001e91c:	50                   	push   eax
c001e91d:	e8 ce cb ff ff       	call   c001b4f0 <getDevicesOfType(DeviceType)>
c001e922:	83 c4 0c             	add    esp,0xc
c001e925:	8d 76 00             	lea    esi,[esi+0x0]
c001e928:	83 ec 0c             	sub    esp,0xc
c001e92b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001e932:	50                   	push   eax
c001e933:	e8 e8 00 01 00       	call   c002ea20 <LinkedList<Device>::isEmpty()>
c001e938:	83 c4 10             	add    esp,0x10
c001e93b:	83 f0 01             	xor    eax,0x1
c001e93e:	0f b6 c0             	movzx  eax,al
c001e941:	85 c0                	test   eax,eax
c001e943:	0f 84 47 01 00 00    	je     c001ea90 <ACPI::open(int, int, void*)+0x320>
c001e949:	83 ec 0c             	sub    esp,0xc
c001e94c:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001e953:	50                   	push   eax
c001e954:	e8 e3 00 01 00       	call   c002ea3c <LinkedList<Device>::getFirstElement()>
c001e959:	83 c4 10             	add    esp,0x10
c001e95c:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c001e963:	83 ec 0c             	sub    esp,0xc
c001e966:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001e96d:	50                   	push   eax
c001e96e:	e8 d1 00 01 00       	call   c002ea44 <LinkedList<Device>::removeFirst()>
c001e973:	83 c4 10             	add    esp,0x10
c001e976:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c001e97d:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c001e984:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c001e98b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001e98f:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c001e995:	ba 09 00 00 00       	mov    edx,0x9
c001e99a:	fc                   	cld    
c001e99b:	89 c7                	mov    edi,eax
c001e99d:	89 de                	mov    esi,ebx
c001e99f:	89 d1                	mov    ecx,edx
c001e9a1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e9a3:	83 ec 08             	sub    esp,0x8
c001e9a6:	8d 44 24 38          	lea    eax,[esp+0x38]
c001e9aa:	50                   	push   eax
c001e9ab:	83 ec 24             	sub    esp,0x24
c001e9ae:	89 e0                	mov    eax,esp
c001e9b0:	89 c3                	mov    ebx,eax
c001e9b2:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e9b6:	ba 09 00 00 00       	mov    edx,0x9
c001e9bb:	89 df                	mov    edi,ebx
c001e9bd:	89 c6                	mov    esi,eax
c001e9bf:	89 d1                	mov    ecx,edx
c001e9c1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e9c3:	e8 92 b7 00 00       	call   c002a15a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c001e9c8:	83 c4 30             	add    esp,0x30
c001e9cb:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c001e9d2:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c001e9da:	0f 84 48 ff ff ff    	je     c001e928 <ACPI::open(int, int, void*)+0x1b8>
c001e9e0:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c001e9eb:	83 ec 0c             	sub    esp,0xc
c001e9ee:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001e9f5:	e8 b8 78 ff ff       	call   c00162b2 <malloc>
c001e9fa:	83 c4 10             	add    esp,0x10
c001e9fd:	89 c3                	mov    ebx,eax
c001e9ff:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001ea04:	83 ec 04             	sub    esp,0x4
c001ea07:	50                   	push   eax
c001ea08:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001ea0f:	53                   	push   ebx
c001ea10:	e8 33 b9 ff ff       	call   c001a348 <File::File(char const*, Process*)>
c001ea15:	83 c4 10             	add    esp,0x10
c001ea18:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c001ea1f:	83 ec 0c             	sub    esp,0xc
c001ea22:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001ea29:	e8 fc bb ff ff       	call   c001a62a <File::exists()>
c001ea2e:	83 c4 10             	add    esp,0x10
c001ea31:	0f b6 c0             	movzx  eax,al
c001ea34:	85 c0                	test   eax,eax
c001ea36:	74 28                	je     c001ea60 <ACPI::open(int, int, void*)+0x2f0>
c001ea38:	83 ec 08             	sub    esp,0x8
c001ea3b:	6a 01                	push   0x1
c001ea3d:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c001ea44:	e8 88 56 00 00       	call   c00240d1 <Thr::loadDLL(char const*, bool)>
c001ea49:	83 c4 10             	add    esp,0x10
c001ea4c:	83 ec 08             	sub    esp,0x8
c001ea4f:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c001ea56:	50                   	push   eax
c001ea57:	e8 c7 58 00 00       	call   c0024323 <Thr::executeDLL(unsigned long, void*)>
c001ea5c:	83 c4 10             	add    esp,0x10
c001ea5f:	90                   	nop
c001ea60:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c001ea68:	0f 84 ba fe ff ff    	je     c001e928 <ACPI::open(int, int, void*)+0x1b8>
c001ea6e:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c001ea75:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea77:	83 c0 08             	add    eax,0x8
c001ea7a:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea7c:	83 ec 0c             	sub    esp,0xc
c001ea7f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001ea86:	ff d0                	call   eax
c001ea88:	83 c4 10             	add    esp,0x10
c001ea8b:	e9 98 fe ff ff       	jmp    c001e928 <ACPI::open(int, int, void*)+0x1b8>
c001ea90:	83 ec 0c             	sub    esp,0xc
c001ea93:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001ea9a:	50                   	push   eax
c001ea9b:	e8 7c ff 00 00       	call   c002ea1c <LinkedList<Device>::~LinkedList()>
c001eaa0:	83 c4 10             	add    esp,0x10
c001eaa3:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001eaa9:	83 ec 08             	sub    esp,0x8
c001eaac:	6a 01                	push   0x1
c001eaae:	68 85 20 03 c0       	push   0xc0032085
c001eab3:	e8 19 56 00 00       	call   c00240d1 <Thr::loadDLL(char const*, bool)>
c001eab8:	83 c4 10             	add    esp,0x10
c001eabb:	83 ec 08             	sub    esp,0x8
c001eabe:	53                   	push   ebx
c001eabf:	50                   	push   eax
c001eac0:	e8 5e 58 00 00       	call   c0024323 <Thr::executeDLL(unsigned long, void*)>
c001eac5:	83 c4 10             	add    esp,0x10
c001eac8:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001eacd:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001ead3:	83 e0 04             	and    eax,0x4
c001ead6:	0f b6 c0             	movzx  eax,al
c001ead9:	85 c0                	test   eax,eax
c001eadb:	0f 84 1b 01 00 00    	je     c001ebfc <ACPI::open(int, int, void*)+0x48c>
c001eae1:	83 ec 0c             	sub    esp,0xc
c001eae4:	68 a2 20 03 c0       	push   0xc00320a2
c001eae9:	e8 15 0e 00 00       	call   c001f903 <KeSetBootMessage(char const*)>
c001eaee:	83 c4 10             	add    esp,0x10
c001eaf1:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c001eafc:	83 ec 0c             	sub    esp,0xc
c001eaff:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c001eb06:	e8 a7 77 ff ff       	call   c00162b2 <malloc>
c001eb0b:	83 c4 10             	add    esp,0x10
c001eb0e:	89 c3                	mov    ebx,eax
c001eb10:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001eb15:	83 ec 04             	sub    esp,0x4
c001eb18:	50                   	push   eax
c001eb19:	68 bf 20 03 c0       	push   0xc00320bf
c001eb1e:	53                   	push   ebx
c001eb1f:	e8 24 b8 ff ff       	call   c001a348 <File::File(char const*, Process*)>
c001eb24:	83 c4 10             	add    esp,0x10
c001eb27:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c001eb2e:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001eb36:	74 20                	je     c001eb58 <ACPI::open(int, int, void*)+0x3e8>
c001eb38:	83 ec 0c             	sub    esp,0xc
c001eb3b:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001eb42:	e8 e3 ba ff ff       	call   c001a62a <File::exists()>
c001eb47:	83 c4 10             	add    esp,0x10
c001eb4a:	0f b6 c0             	movzx  eax,al
c001eb4d:	85 c0                	test   eax,eax
c001eb4f:	74 07                	je     c001eb58 <ACPI::open(int, int, void*)+0x3e8>
c001eb51:	b0 01                	mov    al,0x1
c001eb53:	eb 07                	jmp    c001eb5c <ACPI::open(int, int, void*)+0x3ec>
c001eb55:	8d 76 00             	lea    esi,[esi+0x0]
c001eb58:	b0 00                	mov    al,0x0
c001eb5a:	66 90                	xchg   ax,ax
c001eb5c:	0f b6 c0             	movzx  eax,al
c001eb5f:	85 c0                	test   eax,eax
c001eb61:	74 25                	je     c001eb88 <ACPI::open(int, int, void*)+0x418>
c001eb63:	83 ec 08             	sub    esp,0x8
c001eb66:	6a 01                	push   0x1
c001eb68:	68 bf 20 03 c0       	push   0xc00320bf
c001eb6d:	e8 5f 55 00 00       	call   c00240d1 <Thr::loadDLL(char const*, bool)>
c001eb72:	83 c4 10             	add    esp,0x10
c001eb75:	83 ec 08             	sub    esp,0x8
c001eb78:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c001eb7f:	50                   	push   eax
c001eb80:	e8 9e 57 00 00       	call   c0024323 <Thr::executeDLL(unsigned long, void*)>
c001eb85:	83 c4 10             	add    esp,0x10
c001eb88:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001eb90:	74 2a                	je     c001ebbc <ACPI::open(int, int, void*)+0x44c>
c001eb92:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001eb9a:	74 20                	je     c001ebbc <ACPI::open(int, int, void*)+0x44c>
c001eb9c:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c001eba3:	8b 00                	mov    eax,DWORD PTR [eax]
c001eba5:	83 c0 08             	add    eax,0x8
c001eba8:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebaa:	83 ec 0c             	sub    esp,0xc
c001ebad:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001ebb4:	ff d0                	call   eax
c001ebb6:	83 c4 10             	add    esp,0x10
c001ebb9:	8d 76 00             	lea    esi,[esi+0x0]
c001ebbc:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001ebc1:	83 ec 08             	sub    esp,0x8
c001ebc4:	68 dc 20 03 c0       	push   0xc00320dc
c001ebc9:	50                   	push   eax
c001ebca:	e8 c1 f1 ff ff       	call   c001dd90 <findDataTable(unsigned char*, char*)>
c001ebcf:	83 c4 10             	add    esp,0x10
c001ebd2:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c001ebd9:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001ebe1:	74 19                	je     c001ebfc <ACPI::open(int, int, void*)+0x48c>
c001ebe3:	83 ec 08             	sub    esp,0x8
c001ebe6:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001ebed:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c001ebf4:	e8 13 fb ff ff       	call   c001e70c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001ebf9:	83 c4 10             	add    esp,0x10
c001ebfc:	b8 00 00 00 00       	mov    eax,0x0
c001ec01:	81 c4 70 01 00 00    	add    esp,0x170
c001ec07:	5b                   	pop    ebx
c001ec08:	5e                   	pop    esi
c001ec09:	5f                   	pop    edi
c001ec0a:	c3                   	ret    
c001ec0b:	90                   	nop

c001ec0c <CPU::close(int, int, void*)>:
c001ec0c:	31 c0                	xor    eax,eax
c001ec0e:	c3                   	ret    
c001ec0f:	90                   	nop

c001ec10 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c001ec10:	60                   	pusha  
c001ec11:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ec15:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ec19:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ec1d:	9c                   	pushf  
c001ec1e:	fa                   	cli    
c001ec1f:	0f 09                	wbinvd 
c001ec21:	0f 30                	wrmsr  
c001ec23:	9d                   	popf   
c001ec24:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ec28:	89 02                	mov    DWORD PTR [edx],eax
c001ec2a:	61                   	popa   
c001ec2b:	c3                   	ret    

c001ec2c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c001ec2c:	60                   	pusha  
c001ec2d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ec31:	9c                   	pushf  
c001ec32:	fa                   	cli    
c001ec33:	0f 09                	wbinvd 
c001ec35:	31 c0                	xor    eax,eax
c001ec37:	31 d2                	xor    edx,edx
c001ec39:	0f 32                	rdmsr  
c001ec3b:	9d                   	popf   
c001ec3c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ec40:	89 02                	mov    DWORD PTR [edx],eax
c001ec42:	61                   	popa   
c001ec43:	c3                   	ret    

c001ec44 <CPU::AMD_K6_writeback(int, int, int)>:
c001ec44:	56                   	push   esi
c001ec45:	53                   	push   ebx
c001ec46:	83 ec 10             	sub    esp,0x10
c001ec49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec4d:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001ec52:	75 5d                	jne    c001ecb1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001ec54:	83 f8 08             	cmp    eax,0x8
c001ec57:	75 09                	jne    c001ec62 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001ec59:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001ec5e:	7e 13                	jle    c001ec73 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001ec60:	eb 30                	jmp    c001ec92 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001ec62:	83 f8 06             	cmp    eax,0x6
c001ec65:	7c 4a                	jl     c001ecb1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001ec67:	83 f8 07             	cmp    eax,0x7
c001ec6a:	7e 07                	jle    c001ec73 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001ec6c:	83 f8 09             	cmp    eax,0x9
c001ec6f:	74 21                	je     c001ec92 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001ec71:	eb 3e                	jmp    c001ecb1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001ec73:	89 e6                	mov    esi,esp
c001ec75:	8b 1d e0 a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9e0
c001ec7b:	56                   	push   esi
c001ec7c:	c1 eb 15             	shr    ebx,0x15
c001ec7f:	68 82 00 00 c0       	push   0xc0000082
c001ec84:	83 e3 7e             	and    ebx,0x7e
c001ec87:	e8 a0 ff ff ff       	call   c001ec2c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001ec8c:	56                   	push   esi
c001ec8d:	6a 00                	push   0x0
c001ec8f:	53                   	push   ebx
c001ec90:	eb 12                	jmp    c001eca4 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001ec92:	89 e3                	mov    ebx,esp
c001ec94:	53                   	push   ebx
c001ec95:	68 82 00 00 c0       	push   0xc0000082
c001ec9a:	e8 8d ff ff ff       	call   c001ec2c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001ec9f:	53                   	push   ebx
c001eca0:	6a 00                	push   0x0
c001eca2:	6a 00                	push   0x0
c001eca4:	68 82 00 00 c0       	push   0xc0000082
c001eca9:	e8 62 ff ff ff       	call   c001ec10 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001ecae:	83 c4 18             	add    esp,0x18
c001ecb1:	83 c4 10             	add    esp,0x10
c001ecb4:	5b                   	pop    ebx
c001ecb5:	5e                   	pop    esi
c001ecb6:	c3                   	ret    
c001ecb7:	90                   	nop

c001ecb8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001ecb8:	55                   	push   ebp
c001ecb9:	57                   	push   edi
c001ecba:	56                   	push   esi
c001ecbb:	53                   	push   ebx
c001ecbc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ecc0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ecc4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ecc8:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001eccc:	39 05 98 37 03 c0    	cmp    DWORD PTR ds:0xc0033798,eax
c001ecd2:	75 23                	jne    c001ecf7 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001ecd4:	a1 8c f8 03 c0       	mov    eax,ds:0xc003f88c
c001ecd9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ecdd:	89 06                	mov    DWORD PTR [esi],eax
c001ecdf:	a1 88 f8 03 c0       	mov    eax,ds:0xc003f888
c001ece4:	89 07                	mov    DWORD PTR [edi],eax
c001ece6:	a1 84 f8 03 c0       	mov    eax,ds:0xc003f884
c001eceb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001ecee:	a1 80 f8 03 c0       	mov    eax,ds:0xc003f880
c001ecf3:	89 02                	mov    DWORD PTR [edx],eax
c001ecf5:	eb 3f                	jmp    c001ed36 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001ecf7:	31 c9                	xor    ecx,ecx
c001ecf9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ecfd:	0f a2                	cpuid  
c001ecff:	89 06                	mov    DWORD PTR [esi],eax
c001ed01:	89 1f                	mov    DWORD PTR [edi],ebx
c001ed03:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ed07:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001ed0a:	89 10                	mov    DWORD PTR [eax],edx
c001ed0c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ed10:	a3 98 37 03 c0       	mov    ds:0xc0033798,eax
c001ed15:	8b 06                	mov    eax,DWORD PTR [esi]
c001ed17:	a3 8c f8 03 c0       	mov    ds:0xc003f88c,eax
c001ed1c:	8b 07                	mov    eax,DWORD PTR [edi]
c001ed1e:	a3 88 f8 03 c0       	mov    ds:0xc003f888,eax
c001ed23:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ed26:	a3 84 f8 03 c0       	mov    ds:0xc003f884,eax
c001ed2b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ed2f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed31:	a3 80 f8 03 c0       	mov    ds:0xc003f880,eax
c001ed36:	5b                   	pop    ebx
c001ed37:	5e                   	pop    esi
c001ed38:	5f                   	pop    edi
c001ed39:	5d                   	pop    ebp
c001ed3a:	c3                   	ret    
c001ed3b:	90                   	nop

c001ed3c <CPU::cpuidCheckEDX(unsigned int)>:
c001ed3c:	83 ec 10             	sub    esp,0x10
c001ed3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ed43:	50                   	push   eax
c001ed44:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ed48:	50                   	push   eax
c001ed49:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ed4d:	50                   	push   eax
c001ed4e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ed52:	50                   	push   eax
c001ed53:	6a 01                	push   0x1
c001ed55:	e8 5e ff ff ff       	call   c001ecb8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001ed5a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ed5e:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001ed62:	0f 95 c0             	setne  al
c001ed65:	83 c4 24             	add    esp,0x24
c001ed68:	c3                   	ret    
c001ed69:	90                   	nop

c001ed6a <CPU::cpuidCheckECX(unsigned int)>:
c001ed6a:	83 ec 10             	sub    esp,0x10
c001ed6d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ed71:	50                   	push   eax
c001ed72:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ed76:	50                   	push   eax
c001ed77:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ed7b:	50                   	push   eax
c001ed7c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ed80:	50                   	push   eax
c001ed81:	6a 01                	push   0x1
c001ed83:	e8 30 ff ff ff       	call   c001ecb8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001ed88:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ed8c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001ed90:	0f 95 c0             	setne  al
c001ed93:	83 c4 24             	add    esp,0x24
c001ed96:	c3                   	ret    
c001ed97:	90                   	nop

c001ed98 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001ed98:	83 ec 10             	sub    esp,0x10
c001ed9b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ed9f:	50                   	push   eax
c001eda0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eda4:	50                   	push   eax
c001eda5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eda9:	50                   	push   eax
c001edaa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001edae:	50                   	push   eax
c001edaf:	6a 07                	push   0x7
c001edb1:	e8 02 ff ff ff       	call   c001ecb8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001edb6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001edba:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001edbe:	0f 95 c0             	setne  al
c001edc1:	83 c4 24             	add    esp,0x24
c001edc4:	c3                   	ret    
c001edc5:	90                   	nop

c001edc6 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001edc6:	83 ec 10             	sub    esp,0x10
c001edc9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001edcd:	50                   	push   eax
c001edce:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001edd2:	50                   	push   eax
c001edd3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001edd7:	50                   	push   eax
c001edd8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eddc:	50                   	push   eax
c001eddd:	6a 07                	push   0x7
c001eddf:	e8 d4 fe ff ff       	call   c001ecb8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001ede4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ede8:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001edec:	0f 95 c0             	setne  al
c001edef:	83 c4 24             	add    esp,0x24
c001edf2:	c3                   	ret    
c001edf3:	90                   	nop

c001edf4 <CPU::CPU()>:
c001edf4:	83 ec 0c             	sub    esp,0xc
c001edf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edfb:	83 ec 08             	sub    esp,0x8
c001edfe:	68 9d 22 03 c0       	push   0xc003229d
c001ee03:	50                   	push   eax
c001ee04:	e8 1b c5 ff ff       	call   c001b324 <Device::Device(char const*)>
c001ee09:	83 c4 10             	add    esp,0x10
c001ee0c:	ba 30 23 03 c0       	mov    edx,0xc0032330
c001ee11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee15:	89 10                	mov    DWORD PTR [eax],edx
c001ee17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee1b:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001ee25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee29:	05 78 01 00 00       	add    eax,0x178
c001ee2e:	83 ec 0c             	sub    esp,0xc
c001ee31:	50                   	push   eax
c001ee32:	e8 21 6d ff ff       	call   c0015b58 <GDT::GDT()>
c001ee37:	83 c4 10             	add    esp,0x10
c001ee3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee3e:	05 7c 09 00 00       	add    eax,0x97c
c001ee43:	83 ec 0c             	sub    esp,0xc
c001ee46:	50                   	push   eax
c001ee47:	e8 5c 6f ff ff       	call   c0015da8 <IDT::IDT()>
c001ee4c:	83 c4 10             	add    esp,0x10
c001ee4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee53:	05 7c 11 00 00       	add    eax,0x117c
c001ee58:	83 ec 0c             	sub    esp,0xc
c001ee5b:	50                   	push   eax
c001ee5c:	e8 df 88 ff ff       	call   c0017740 <TSS::TSS()>
c001ee61:	83 c4 10             	add    esp,0x10
c001ee64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee68:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c001ee6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee73:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001ee7d:	90                   	nop
c001ee7e:	83 c4 0c             	add    esp,0xc
c001ee81:	c3                   	ret    

c001ee82 <CPU::displayFeatures()>:
c001ee82:	c3                   	ret    
c001ee83:	90                   	nop

c001ee84 <CPU::detectFeatures()>:
c001ee84:	55                   	push   ebp
c001ee85:	57                   	push   edi
c001ee86:	56                   	push   esi
c001ee87:	53                   	push   ebx
c001ee88:	83 ec 30             	sub    esp,0x30
c001ee8b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001ee8f:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c001ee99:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c001eea0:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001eea6:	6a 0d                	push   0xd
c001eea8:	6a 00                	push   0x0
c001eeaa:	55                   	push   ebp
c001eeab:	e8 40 16 fe ff       	call   c00004f0 <memset>
c001eeb0:	83 c4 10             	add    esp,0x10
c001eeb3:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001eeb8:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c001eebf:	0f 84 db 05 00 00    	je     c001f4a0 <CPU::detectFeatures()+0x61c>
c001eec5:	83 ec 0c             	sub    esp,0xc
c001eec8:	89 ef                	mov    edi,ebp
c001eeca:	6a 10                	push   0x10
c001eecc:	e8 6b fe ff ff       	call   c001ed3c <CPU::cpuidCheckEDX(unsigned int)>
c001eed1:	83 e0 01             	and    eax,0x1
c001eed4:	8d 14 00             	lea    edx,[eax+eax*1]
c001eed7:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001eedd:	83 e0 fd             	and    eax,0xfffffffd
c001eee0:	09 d0                	or     eax,edx
c001eee2:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001eee8:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001eeef:	e8 48 fe ff ff       	call   c001ed3c <CPU::cpuidCheckEDX(unsigned int)>
c001eef4:	83 e0 01             	and    eax,0x1
c001eef7:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001eefe:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001ef04:	83 e0 fb             	and    eax,0xfffffffb
c001ef07:	09 d0                	or     eax,edx
c001ef09:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001ef0f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001ef16:	e8 21 fe ff ff       	call   c001ed3c <CPU::cpuidCheckEDX(unsigned int)>
c001ef1b:	83 e0 01             	and    eax,0x1
c001ef1e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001ef25:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001ef2b:	83 e0 f7             	and    eax,0xfffffff7
c001ef2e:	09 d0                	or     eax,edx
c001ef30:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001ef36:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001ef3d:	e8 fa fd ff ff       	call   c001ed3c <CPU::cpuidCheckEDX(unsigned int)>
c001ef42:	83 e0 01             	and    eax,0x1
c001ef45:	c1 e0 04             	shl    eax,0x4
c001ef48:	89 c2                	mov    edx,eax
c001ef4a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001ef50:	83 e0 ef             	and    eax,0xffffffef
c001ef53:	09 d0                	or     eax,edx
c001ef55:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001ef5b:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001ef62:	e8 d5 fd ff ff       	call   c001ed3c <CPU::cpuidCheckEDX(unsigned int)>
c001ef67:	83 e0 01             	and    eax,0x1
c001ef6a:	c1 e0 05             	shl    eax,0x5
c001ef6d:	89 c2                	mov    edx,eax
c001ef6f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001ef75:	83 e0 df             	and    eax,0xffffffdf
c001ef78:	09 d0                	or     eax,edx
c001ef7a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001ef80:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001ef87:	e8 b0 fd ff ff       	call   c001ed3c <CPU::cpuidCheckEDX(unsigned int)>
c001ef8c:	83 e0 01             	and    eax,0x1
c001ef8f:	8d 14 00             	lea    edx,[eax+eax*1]
c001ef92:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001ef98:	83 e0 fd             	and    eax,0xfffffffd
c001ef9b:	09 d0                	or     eax,edx
c001ef9d:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001efa3:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001efaa:	e8 8d fd ff ff       	call   c001ed3c <CPU::cpuidCheckEDX(unsigned int)>
c001efaf:	83 e0 01             	and    eax,0x1
c001efb2:	c1 e0 06             	shl    eax,0x6
c001efb5:	89 c2                	mov    edx,eax
c001efb7:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001efbd:	83 e0 bf             	and    eax,0xffffffbf
c001efc0:	09 d0                	or     eax,edx
c001efc2:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001efc8:	58                   	pop    eax
c001efc9:	8d 44 24 28          	lea    eax,[esp+0x28]
c001efcd:	50                   	push   eax
c001efce:	8d 44 24 28          	lea    eax,[esp+0x28]
c001efd2:	50                   	push   eax
c001efd3:	8d 74 24 28          	lea    esi,[esp+0x28]
c001efd7:	56                   	push   esi
c001efd8:	8d 44 24 28          	lea    eax,[esp+0x28]
c001efdc:	50                   	push   eax
c001efdd:	6a 00                	push   0x0
c001efdf:	e8 d4 fc ff ff       	call   c001ecb8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001efe4:	b8 04 00 00 00       	mov    eax,0x4
c001efe9:	89 c1                	mov    ecx,eax
c001efeb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001efed:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c001eff3:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001eff7:	89 c1                	mov    ecx,eax
c001eff9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001effb:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c001f001:	8d 74 24 38          	lea    esi,[esp+0x38]
c001f005:	89 c1                	mov    ecx,eax
c001f007:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f009:	83 c4 18             	add    esp,0x18
c001f00c:	68 ac 21 03 c0       	push   0xc00321ac
c001f011:	55                   	push   ebp
c001f012:	e8 39 17 fe ff       	call   c0000750 <strcmp>
c001f017:	83 c4 10             	add    esp,0x10
c001f01a:	85 c0                	test   eax,eax
c001f01c:	75 0f                	jne    c001f02d <CPU::detectFeatures()+0x1a9>
c001f01e:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001f028:	e9 22 02 00 00       	jmp    c001f24f <CPU::detectFeatures()+0x3cb>
c001f02d:	50                   	push   eax
c001f02e:	50                   	push   eax
c001f02f:	68 b9 21 03 c0       	push   0xc00321b9
c001f034:	55                   	push   ebp
c001f035:	e8 16 17 fe ff       	call   c0000750 <strcmp>
c001f03a:	83 c4 10             	add    esp,0x10
c001f03d:	85 c0                	test   eax,eax
c001f03f:	74 dd                	je     c001f01e <CPU::detectFeatures()+0x19a>
c001f041:	50                   	push   eax
c001f042:	50                   	push   eax
c001f043:	68 c6 21 03 c0       	push   0xc00321c6
c001f048:	55                   	push   ebp
c001f049:	e8 02 17 fe ff       	call   c0000750 <strcmp>
c001f04e:	83 c4 10             	add    esp,0x10
c001f051:	85 c0                	test   eax,eax
c001f053:	74 2a                	je     c001f07f <CPU::detectFeatures()+0x1fb>
c001f055:	50                   	push   eax
c001f056:	50                   	push   eax
c001f057:	68 d3 21 03 c0       	push   0xc00321d3
c001f05c:	55                   	push   ebp
c001f05d:	e8 ee 16 fe ff       	call   c0000750 <strcmp>
c001f062:	83 c4 10             	add    esp,0x10
c001f065:	85 c0                	test   eax,eax
c001f067:	74 16                	je     c001f07f <CPU::detectFeatures()+0x1fb>
c001f069:	50                   	push   eax
c001f06a:	50                   	push   eax
c001f06b:	68 e0 21 03 c0       	push   0xc00321e0
c001f070:	55                   	push   ebp
c001f071:	e8 da 16 fe ff       	call   c0000750 <strcmp>
c001f076:	83 c4 10             	add    esp,0x10
c001f079:	85 c0                	test   eax,eax
c001f07b:	74 48                	je     c001f0c5 <CPU::detectFeatures()+0x241>
c001f07d:	eb 0f                	jmp    c001f08e <CPU::detectFeatures()+0x20a>
c001f07f:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001f089:	e9 c1 01 00 00       	jmp    c001f24f <CPU::detectFeatures()+0x3cb>
c001f08e:	50                   	push   eax
c001f08f:	50                   	push   eax
c001f090:	68 ed 21 03 c0       	push   0xc00321ed
c001f095:	55                   	push   ebp
c001f096:	e8 b5 16 fe ff       	call   c0000750 <strcmp>
c001f09b:	83 c4 10             	add    esp,0x10
c001f09e:	85 c0                	test   eax,eax
c001f0a0:	74 23                	je     c001f0c5 <CPU::detectFeatures()+0x241>
c001f0a2:	57                   	push   edi
c001f0a3:	57                   	push   edi
c001f0a4:	68 fa 21 03 c0       	push   0xc00321fa
c001f0a9:	55                   	push   ebp
c001f0aa:	e8 a1 16 fe ff       	call   c0000750 <strcmp>
c001f0af:	83 c4 10             	add    esp,0x10
c001f0b2:	85 c0                	test   eax,eax
c001f0b4:	75 1e                	jne    c001f0d4 <CPU::detectFeatures()+0x250>
c001f0b6:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001f0c0:	e9 8a 01 00 00       	jmp    c001f24f <CPU::detectFeatures()+0x3cb>
c001f0c5:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001f0cf:	e9 7b 01 00 00       	jmp    c001f24f <CPU::detectFeatures()+0x3cb>
c001f0d4:	56                   	push   esi
c001f0d5:	56                   	push   esi
c001f0d6:	68 07 22 03 c0       	push   0xc0032207
c001f0db:	55                   	push   ebp
c001f0dc:	e8 6f 16 fe ff       	call   c0000750 <strcmp>
c001f0e1:	83 c4 10             	add    esp,0x10
c001f0e4:	85 c0                	test   eax,eax
c001f0e6:	75 0f                	jne    c001f0f7 <CPU::detectFeatures()+0x273>
c001f0e8:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001f0f2:	e9 58 01 00 00       	jmp    c001f24f <CPU::detectFeatures()+0x3cb>
c001f0f7:	51                   	push   ecx
c001f0f8:	51                   	push   ecx
c001f0f9:	68 c6 21 03 c0       	push   0xc00321c6
c001f0fe:	55                   	push   ebp
c001f0ff:	e8 4c 16 fe ff       	call   c0000750 <strcmp>
c001f104:	83 c4 10             	add    esp,0x10
c001f107:	85 c0                	test   eax,eax
c001f109:	75 0f                	jne    c001f11a <CPU::detectFeatures()+0x296>
c001f10b:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001f115:	e9 35 01 00 00       	jmp    c001f24f <CPU::detectFeatures()+0x3cb>
c001f11a:	52                   	push   edx
c001f11b:	52                   	push   edx
c001f11c:	68 14 22 03 c0       	push   0xc0032214
c001f121:	55                   	push   ebp
c001f122:	e8 29 16 fe ff       	call   c0000750 <strcmp>
c001f127:	83 c4 10             	add    esp,0x10
c001f12a:	85 c0                	test   eax,eax
c001f12c:	75 0f                	jne    c001f13d <CPU::detectFeatures()+0x2b9>
c001f12e:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001f138:	e9 12 01 00 00       	jmp    c001f24f <CPU::detectFeatures()+0x3cb>
c001f13d:	50                   	push   eax
c001f13e:	50                   	push   eax
c001f13f:	68 21 22 03 c0       	push   0xc0032221
c001f144:	55                   	push   ebp
c001f145:	e8 06 16 fe ff       	call   c0000750 <strcmp>
c001f14a:	83 c4 10             	add    esp,0x10
c001f14d:	85 c0                	test   eax,eax
c001f14f:	75 0f                	jne    c001f160 <CPU::detectFeatures()+0x2dc>
c001f151:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001f15b:	e9 ef 00 00 00       	jmp    c001f24f <CPU::detectFeatures()+0x3cb>
c001f160:	50                   	push   eax
c001f161:	50                   	push   eax
c001f162:	68 2e 22 03 c0       	push   0xc003222e
c001f167:	55                   	push   ebp
c001f168:	e8 e3 15 fe ff       	call   c0000750 <strcmp>
c001f16d:	83 c4 10             	add    esp,0x10
c001f170:	85 c0                	test   eax,eax
c001f172:	75 0f                	jne    c001f183 <CPU::detectFeatures()+0x2ff>
c001f174:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001f17e:	e9 cc 00 00 00       	jmp    c001f24f <CPU::detectFeatures()+0x3cb>
c001f183:	50                   	push   eax
c001f184:	50                   	push   eax
c001f185:	68 3b 22 03 c0       	push   0xc003223b
c001f18a:	55                   	push   ebp
c001f18b:	e8 c0 15 fe ff       	call   c0000750 <strcmp>
c001f190:	83 c4 10             	add    esp,0x10
c001f193:	85 c0                	test   eax,eax
c001f195:	75 0f                	jne    c001f1a6 <CPU::detectFeatures()+0x322>
c001f197:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001f1a1:	e9 a9 00 00 00       	jmp    c001f24f <CPU::detectFeatures()+0x3cb>
c001f1a6:	50                   	push   eax
c001f1a7:	50                   	push   eax
c001f1a8:	68 48 22 03 c0       	push   0xc0032248
c001f1ad:	55                   	push   ebp
c001f1ae:	e8 9d 15 fe ff       	call   c0000750 <strcmp>
c001f1b3:	83 c4 10             	add    esp,0x10
c001f1b6:	85 c0                	test   eax,eax
c001f1b8:	75 0f                	jne    c001f1c9 <CPU::detectFeatures()+0x345>
c001f1ba:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001f1c4:	e9 86 00 00 00       	jmp    c001f24f <CPU::detectFeatures()+0x3cb>
c001f1c9:	50                   	push   eax
c001f1ca:	50                   	push   eax
c001f1cb:	68 55 22 03 c0       	push   0xc0032255
c001f1d0:	55                   	push   ebp
c001f1d1:	e8 7a 15 fe ff       	call   c0000750 <strcmp>
c001f1d6:	83 c4 10             	add    esp,0x10
c001f1d9:	85 c0                	test   eax,eax
c001f1db:	75 0c                	jne    c001f1e9 <CPU::detectFeatures()+0x365>
c001f1dd:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001f1e7:	eb 66                	jmp    c001f24f <CPU::detectFeatures()+0x3cb>
c001f1e9:	50                   	push   eax
c001f1ea:	50                   	push   eax
c001f1eb:	68 62 22 03 c0       	push   0xc0032262
c001f1f0:	55                   	push   ebp
c001f1f1:	e8 5a 15 fe ff       	call   c0000750 <strcmp>
c001f1f6:	83 c4 10             	add    esp,0x10
c001f1f9:	85 c0                	test   eax,eax
c001f1fb:	75 0c                	jne    c001f209 <CPU::detectFeatures()+0x385>
c001f1fd:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001f207:	eb 46                	jmp    c001f24f <CPU::detectFeatures()+0x3cb>
c001f209:	57                   	push   edi
c001f20a:	57                   	push   edi
c001f20b:	68 6f 22 03 c0       	push   0xc003226f
c001f210:	55                   	push   ebp
c001f211:	e8 3a 15 fe ff       	call   c0000750 <strcmp>
c001f216:	83 c4 10             	add    esp,0x10
c001f219:	85 c0                	test   eax,eax
c001f21b:	74 e0                	je     c001f1fd <CPU::detectFeatures()+0x379>
c001f21d:	56                   	push   esi
c001f21e:	56                   	push   esi
c001f21f:	68 7c 22 03 c0       	push   0xc003227c
c001f224:	55                   	push   ebp
c001f225:	e8 26 15 fe ff       	call   c0000750 <strcmp>
c001f22a:	83 c4 10             	add    esp,0x10
c001f22d:	85 c0                	test   eax,eax
c001f22f:	74 cc                	je     c001f1fd <CPU::detectFeatures()+0x379>
c001f231:	51                   	push   ecx
c001f232:	51                   	push   ecx
c001f233:	68 89 22 03 c0       	push   0xc0032289
c001f238:	55                   	push   ebp
c001f239:	e8 12 15 fe ff       	call   c0000750 <strcmp>
c001f23e:	83 c4 10             	add    esp,0x10
c001f241:	85 c0                	test   eax,eax
c001f243:	74 b8                	je     c001f1fd <CPU::detectFeatures()+0x379>
c001f245:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001f24f:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001f254:	0f 86 be 00 00 00    	jbe    c001f318 <CPU::detectFeatures()+0x494>
c001f25a:	83 ec 0c             	sub    esp,0xc
c001f25d:	68 80 00 00 00       	push   0x80
c001f262:	e8 31 fb ff ff       	call   c001ed98 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f267:	83 e0 01             	and    eax,0x1
c001f26a:	c1 e0 06             	shl    eax,0x6
c001f26d:	89 c2                	mov    edx,eax
c001f26f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f275:	83 e0 bf             	and    eax,0xffffffbf
c001f278:	09 d0                	or     eax,edx
c001f27a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f280:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001f287:	e8 0c fb ff ff       	call   c001ed98 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f28c:	83 e0 01             	and    eax,0x1
c001f28f:	c1 e0 04             	shl    eax,0x4
c001f292:	89 c2                	mov    edx,eax
c001f294:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f29a:	83 e0 ef             	and    eax,0xffffffef
c001f29d:	09 d0                	or     eax,edx
c001f29f:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f2a5:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001f2ac:	e8 e7 fa ff ff       	call   c001ed98 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f2b1:	89 c2                	mov    edx,eax
c001f2b3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f2b9:	c1 e2 07             	shl    edx,0x7
c001f2bc:	83 e0 7f             	and    eax,0x7f
c001f2bf:	09 d0                	or     eax,edx
c001f2c1:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f2c7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001f2ce:	e8 f3 fa ff ff       	call   c001edc6 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001f2d3:	83 e0 01             	and    eax,0x1
c001f2d6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001f2dd:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f2e3:	83 e0 f7             	and    eax,0xfffffff7
c001f2e6:	09 d0                	or     eax,edx
c001f2e8:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f2ee:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001f2f5:	e8 cc fa ff ff       	call   c001edc6 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001f2fa:	83 c4 10             	add    esp,0x10
c001f2fd:	83 e0 01             	and    eax,0x1
c001f300:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001f307:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f30d:	83 e0 fb             	and    eax,0xfffffffb
c001f310:	09 d0                	or     eax,edx
c001f312:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f318:	83 ec 0c             	sub    esp,0xc
c001f31b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f31f:	50                   	push   eax
c001f320:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f324:	50                   	push   eax
c001f325:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001f329:	57                   	push   edi
c001f32a:	8d 74 24 28          	lea    esi,[esp+0x28]
c001f32e:	56                   	push   esi
c001f32f:	6a 01                	push   0x1
c001f331:	e8 82 f9 ff ff       	call   c001ecb8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f336:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001f33a:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001f340:	89 c1                	mov    ecx,eax
c001f342:	83 e2 f0             	and    edx,0xfffffff0
c001f345:	83 e1 0f             	and    ecx,0xf
c001f348:	09 ca                	or     edx,ecx
c001f34a:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001f350:	89 c2                	mov    edx,eax
c001f352:	c1 ea 04             	shr    edx,0x4
c001f355:	83 e2 0f             	and    edx,0xf
c001f358:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001f35c:	89 d1                	mov    ecx,edx
c001f35e:	83 c4 20             	add    esp,0x20
c001f361:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001f367:	c1 e1 06             	shl    ecx,0x6
c001f36a:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c001f370:	09 ca                	or     edx,ecx
c001f372:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001f379:	89 c2                	mov    edx,eax
c001f37b:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c001f381:	c1 ea 08             	shr    edx,0x8
c001f384:	83 e1 3f             	and    ecx,0x3f
c001f387:	83 e2 0f             	and    edx,0xf
c001f38a:	89 d5                	mov    ebp,edx
c001f38c:	83 e5 03             	and    ebp,0x3
c001f38f:	c1 e5 06             	shl    ebp,0x6
c001f392:	09 e9                	or     ecx,ebp
c001f394:	89 d5                	mov    ebp,edx
c001f396:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c001f39c:	c1 ed 02             	shr    ebp,0x2
c001f39f:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c001f3a5:	83 e1 c0             	and    ecx,0xffffffc0
c001f3a8:	09 e9                	or     ecx,ebp
c001f3aa:	89 c5                	mov    ebp,eax
c001f3ac:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001f3b2:	c1 ed 08             	shr    ebp,0x8
c001f3b5:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c001f3bb:	83 e5 30             	and    ebp,0x30
c001f3be:	83 e1 cf             	and    ecx,0xffffffcf
c001f3c1:	09 e9                	or     ecx,ebp
c001f3c3:	83 fa 06             	cmp    edx,0x6
c001f3c6:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c001f3cc:	74 05                	je     c001f3d3 <CPU::detectFeatures()+0x54f>
c001f3ce:	83 fa 0f             	cmp    edx,0xf
c001f3d1:	75 64                	jne    c001f437 <CPU::detectFeatures()+0x5b3>
c001f3d3:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001f3d9:	89 c1                	mov    ecx,eax
c001f3db:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c001f3e1:	c1 e9 10             	shr    ecx,0x10
c001f3e4:	c1 e1 04             	shl    ecx,0x4
c001f3e7:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c001f3eb:	0f b6 c9             	movzx  ecx,cl
c001f3ee:	c1 e1 06             	shl    ecx,0x6
c001f3f1:	09 e9                	or     ecx,ebp
c001f3f3:	83 fa 0f             	cmp    edx,0xf
c001f3f6:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c001f3fd:	75 38                	jne    c001f437 <CPU::detectFeatures()+0x5b3>
c001f3ff:	c1 e8 14             	shr    eax,0x14
c001f402:	83 c0 0f             	add    eax,0xf
c001f405:	0f b6 c0             	movzx  eax,al
c001f408:	89 c2                	mov    edx,eax
c001f40a:	c1 e8 02             	shr    eax,0x2
c001f40d:	83 e2 03             	and    edx,0x3
c001f410:	89 d1                	mov    ecx,edx
c001f412:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001f418:	c1 e1 06             	shl    ecx,0x6
c001f41b:	83 e2 3f             	and    edx,0x3f
c001f41e:	09 ca                	or     edx,ecx
c001f420:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001f426:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001f42c:	83 e2 c0             	and    edx,0xffffffc0
c001f42f:	09 d0                	or     eax,edx
c001f431:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c001f437:	83 ec 0c             	sub    esp,0xc
c001f43a:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f440:	83 c8 07             	or     eax,0x7
c001f443:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f449:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f44d:	50                   	push   eax
c001f44e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001f452:	55                   	push   ebp
c001f453:	57                   	push   edi
c001f454:	56                   	push   esi
c001f455:	68 00 00 00 80       	push   0x80000000
c001f45a:	e8 59 f8 ff ff       	call   c001ecb8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f45f:	83 c4 20             	add    esp,0x20
c001f462:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001f46a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f46e:	76 1e                	jbe    c001f48e <CPU::detectFeatures()+0x60a>
c001f470:	83 ec 0c             	sub    esp,0xc
c001f473:	50                   	push   eax
c001f474:	55                   	push   ebp
c001f475:	57                   	push   edi
c001f476:	56                   	push   esi
c001f477:	68 01 00 00 80       	push   0x80000001
c001f47c:	e8 37 f8 ff ff       	call   c001ecb8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f481:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c001f48b:	83 c4 20             	add    esp,0x20
c001f48e:	52                   	push   edx
c001f48f:	52                   	push   edx
c001f490:	68 95 22 03 c0       	push   0xc0032295
c001f495:	53                   	push   ebx
c001f496:	e8 7b be ff ff       	call   c001b316 <Device::setName(char const*)>
c001f49b:	83 c4 10             	add    esp,0x10
c001f49e:	eb 69                	jmp    c001f509 <CPU::detectFeatures()+0x685>
c001f4a0:	50                   	push   eax
c001f4a1:	50                   	push   eax
c001f4a2:	68 fa 21 03 c0       	push   0xc00321fa
c001f4a7:	55                   	push   ebp
c001f4a8:	e8 93 11 fe ff       	call   c0000640 <strcpy>
c001f4ad:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001f4b7:	e8 07 0d fe ff       	call   c00001c3 <is486>
c001f4bc:	83 c4 10             	add    esp,0x10
c001f4bf:	85 c0                	test   eax,eax
c001f4c1:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f4c7:	74 1f                	je     c001f4e8 <CPU::detectFeatures()+0x664>
c001f4c9:	83 c8 07             	or     eax,0x7
c001f4cc:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f4d2:	0f 20 c0             	mov    eax,cr0
c001f4d5:	83 e0 14             	and    eax,0x14
c001f4d8:	83 f8 04             	cmp    eax,0x4
c001f4db:	75 10                	jne    c001f4ed <CPU::detectFeatures()+0x669>
c001f4dd:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f4e3:	83 e0 fd             	and    eax,0xfffffffd
c001f4e6:	eb 1b                	jmp    c001f503 <CPU::detectFeatures()+0x67f>
c001f4e8:	83 e0 f8             	and    eax,0xfffffff8
c001f4eb:	eb df                	jmp    c001f4cc <CPU::detectFeatures()+0x648>
c001f4ed:	e8 ac 0c fe ff       	call   c000019e <hasLegacyFPU>
c001f4f2:	83 e0 01             	and    eax,0x1
c001f4f5:	8d 14 00             	lea    edx,[eax+eax*1]
c001f4f8:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f4fe:	83 e0 fd             	and    eax,0xfffffffd
c001f501:	09 d0                	or     eax,edx
c001f503:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f509:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c001f510:	74 17                	je     c001f529 <CPU::detectFeatures()+0x6a5>
c001f512:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c001f518:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c001f51e:	83 c8 10             	or     eax,0x10
c001f521:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c001f527:	eb 20                	jmp    c001f549 <CPU::detectFeatures()+0x6c5>
c001f529:	e8 70 0c fe ff       	call   c000019e <hasLegacyFPU>
c001f52e:	83 e0 01             	and    eax,0x1
c001f531:	8d 14 00             	lea    edx,[eax+eax*1]
c001f534:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f53a:	83 e0 fd             	and    eax,0xfffffffd
c001f53d:	09 d0                	or     eax,edx
c001f53f:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f545:	a8 02                	test   al,0x2
c001f547:	75 c9                	jne    c001f512 <CPU::detectFeatures()+0x68e>
c001f549:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c001f550:	83 c4 2c             	add    esp,0x2c
c001f553:	5b                   	pop    ebx
c001f554:	5e                   	pop    esi
c001f555:	5f                   	pop    edi
c001f556:	5d                   	pop    ebp
c001f557:	c3                   	ret    

c001f558 <CPU::setupSMEP()>:
c001f558:	0f 20 e0             	mov    eax,cr4
c001f55b:	0d 00 00 10 00       	or     eax,0x100000
c001f560:	0f 22 e0             	mov    cr4,eax
c001f563:	c3                   	ret    

c001f564 <CPU::setupUMIP()>:
c001f564:	0f 20 e0             	mov    eax,cr4
c001f567:	80 cc 08             	or     ah,0x8
c001f56a:	0f 22 e0             	mov    cr4,eax
c001f56d:	c3                   	ret    

c001f56e <CPU::setupTSC()>:
c001f56e:	0f 20 e0             	mov    eax,cr4
c001f571:	83 c8 04             	or     eax,0x4
c001f574:	0f 22 e0             	mov    cr4,eax
c001f577:	c3                   	ret    

c001f578 <CPU::setupLargePages()>:
c001f578:	0f 20 e0             	mov    eax,cr4
c001f57b:	83 c8 10             	or     eax,0x10
c001f57e:	0f 22 e0             	mov    cr4,eax
c001f581:	c3                   	ret    

c001f582 <CPU::setupPAT()>:
c001f582:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001f587:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c001f58e:	74 2c                	je     c001f5bc <CPU::setupPAT()+0x3a>
c001f590:	53                   	push   ebx
c001f591:	83 ec 10             	sub    esp,0x10
c001f594:	68 77 02 00 00       	push   0x277
c001f599:	50                   	push   eax
c001f59a:	e8 1d 63 ff ff       	call   c00158bc <Computer::rdmsr(unsigned int)>
c001f59f:	83 e2 f8             	and    edx,0xfffffff8
c001f5a2:	83 ca 01             	or     edx,0x1
c001f5a5:	52                   	push   edx
c001f5a6:	50                   	push   eax
c001f5a7:	68 77 02 00 00       	push   0x277
c001f5ac:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c001f5b2:	e8 31 63 ff ff       	call   c00158e8 <Computer::wrmsr(unsigned int, unsigned long long)>
c001f5b7:	83 c4 28             	add    esp,0x28
c001f5ba:	5b                   	pop    ebx
c001f5bb:	c3                   	ret    
c001f5bc:	c3                   	ret    
c001f5bd:	90                   	nop

c001f5be <CPU::setupMTRR()>:
c001f5be:	c3                   	ret    
c001f5bf:	90                   	nop

c001f5c0 <CPU::setupGlobalPages()>:
c001f5c0:	0f 20 e0             	mov    eax,cr4
c001f5c3:	0c 80                	or     al,0x80
c001f5c5:	0f 22 e0             	mov    cr4,eax
c001f5c8:	c3                   	ret    
c001f5c9:	90                   	nop

c001f5ca <CPU::allowUsermodeDataAccess()>:
c001f5ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f5ce:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001f5d5:	74 03                	je     c001f5da <CPU::allowUsermodeDataAccess()+0x10>
c001f5d7:	0f 01 cb             	stac   
c001f5da:	c3                   	ret    
c001f5db:	90                   	nop

c001f5dc <CPU::prohibitUsermodeDataAccess()>:
c001f5dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f5e0:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001f5e7:	74 03                	je     c001f5ec <CPU::prohibitUsermodeDataAccess()+0x10>
c001f5e9:	0f 01 ca             	clac   
c001f5ec:	c3                   	ret    
c001f5ed:	90                   	nop

c001f5ee <CPU::setupSMAP()>:
c001f5ee:	0f 20 e0             	mov    eax,cr4
c001f5f1:	0d 00 00 20 00       	or     eax,0x200000
c001f5f6:	0f 22 e0             	mov    cr4,eax
c001f5f9:	eb e1                	jmp    c001f5dc <CPU::prohibitUsermodeDataAccess()>
c001f5fb:	90                   	nop

c001f5fc <CPU::setupFeatures()>:
c001f5fc:	53                   	push   ebx
c001f5fd:	83 ec 08             	sub    esp,0x8
c001f600:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f604:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c001f60b:	74 18                	je     c001f625 <CPU::setupFeatures()+0x29>
c001f60d:	83 ec 0c             	sub    esp,0xc
c001f610:	68 a1 22 03 c0       	push   0xc00322a1
c001f615:	e8 27 9b ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c001f61a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f61d:	e8 42 ff ff ff       	call   c001f564 <CPU::setupUMIP()>
c001f622:	83 c4 10             	add    esp,0x10
c001f625:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c001f62c:	74 18                	je     c001f646 <CPU::setupFeatures()+0x4a>
c001f62e:	83 ec 0c             	sub    esp,0xc
c001f631:	68 ab 22 03 c0       	push   0xc00322ab
c001f636:	e8 06 9b ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c001f63b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f63e:	e8 2b ff ff ff       	call   c001f56e <CPU::setupTSC()>
c001f643:	83 c4 10             	add    esp,0x10
c001f646:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c001f64d:	74 18                	je     c001f667 <CPU::setupFeatures()+0x6b>
c001f64f:	83 ec 0c             	sub    esp,0xc
c001f652:	68 b4 22 03 c0       	push   0xc00322b4
c001f657:	e8 e5 9a ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c001f65c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f65f:	e8 14 ff ff ff       	call   c001f578 <CPU::setupLargePages()>
c001f664:	83 c4 10             	add    esp,0x10
c001f667:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c001f66e:	74 18                	je     c001f688 <CPU::setupFeatures()+0x8c>
c001f670:	83 ec 0c             	sub    esp,0xc
c001f673:	68 bd 22 03 c0       	push   0xc00322bd
c001f678:	e8 c4 9a ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c001f67d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f680:	e8 3b ff ff ff       	call   c001f5c0 <CPU::setupGlobalPages()>
c001f685:	83 c4 10             	add    esp,0x10
c001f688:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c001f68f:	74 18                	je     c001f6a9 <CPU::setupFeatures()+0xad>
c001f691:	83 ec 0c             	sub    esp,0xc
c001f694:	68 cf 22 03 c0       	push   0xc00322cf
c001f699:	e8 a3 9a ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c001f69e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f6a1:	e8 dc fe ff ff       	call   c001f582 <CPU::setupPAT()>
c001f6a6:	83 c4 10             	add    esp,0x10
c001f6a9:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c001f6b0:	74 11                	je     c001f6c3 <CPU::setupFeatures()+0xc7>
c001f6b2:	c7 44 24 10 d8 22 03 c0 	mov    DWORD PTR [esp+0x10],0xc00322d8
c001f6ba:	83 c4 08             	add    esp,0x8
c001f6bd:	5b                   	pop    ebx
c001f6be:	e9 7e 9a ff ff       	jmp    c0019141 <Dbg::kprintf(char const*, ...)>
c001f6c3:	83 c4 08             	add    esp,0x8
c001f6c6:	5b                   	pop    ebx
c001f6c7:	c3                   	ret    

c001f6c8 <CPU::open(int, int, void*)>:
c001f6c8:	55                   	push   ebp
c001f6c9:	57                   	push   edi
c001f6ca:	56                   	push   esi
c001f6cb:	53                   	push   ebx
c001f6cc:	83 ec 18             	sub    esp,0x18
c001f6cf:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001f6d3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f6d7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001f6db:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001f6e1:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c001f6e7:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c001f6ed:	50                   	push   eax
c001f6ee:	e8 c7 64 ff ff       	call   c0015bba <GDT::setup()>
c001f6f3:	83 c4 0c             	add    esp,0xc
c001f6f6:	6a 00                	push   0x0
c001f6f8:	68 ef be ad de       	push   0xdeadbeef
c001f6fd:	55                   	push   ebp
c001f6fe:	e8 81 80 ff ff       	call   c0017784 <TSS::setup(unsigned long, unsigned long)>
c001f703:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001f706:	e8 59 80 ff ff       	call   c0017764 <TSS::flush()>
c001f70b:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001f711:	89 04 24             	mov    DWORD PTR [esp],eax
c001f714:	e8 05 67 ff ff       	call   c0015e1e <IDT::setup()>
c001f719:	b8 00 04 00 00       	mov    eax,0x400
c001f71e:	0f 23 f8             	mov    db7,eax
c001f721:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001f72b:	e8 8b 6e ff ff       	call   c00165bb <Phys::allocatePage()>
c001f730:	83 c4 10             	add    esp,0x10
c001f733:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f739:	85 f6                	test   esi,esi
c001f73b:	89 38                	mov    DWORD PTR [eax],edi
c001f73d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001f743:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001f746:	74 10                	je     c001f758 <CPU::open(int, int, void*)+0x90>
c001f748:	50                   	push   eax
c001f749:	50                   	push   eax
c001f74a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f750:	56                   	push   esi
c001f751:	e8 54 89 ff ff       	call   c00180aa <VAS::setCPUSpecific(unsigned long)>
c001f756:	eb 0d                	jmp    c001f765 <CPU::open(int, int, void*)+0x9d>
c001f758:	83 ec 0c             	sub    esp,0xc
c001f75b:	68 e2 22 03 c0       	push   0xc00322e2
c001f760:	e8 e6 08 00 00       	call   c002004b <KePanic(char const*)>
c001f765:	83 c4 10             	add    esp,0x10
c001f768:	83 ec 0c             	sub    esp,0xc
c001f76b:	68 f0 22 03 c0       	push   0xc00322f0
c001f770:	e8 8e 01 00 00       	call   c001f903 <KeSetBootMessage(char const*)>
c001f775:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f778:	e8 07 f7 ff ff       	call   c001ee84 <CPU::detectFeatures()>
c001f77d:	c7 04 24 13 23 03 c0 	mov    DWORD PTR [esp],0xc0032313
c001f784:	e8 7a 01 00 00       	call   c001f903 <KeSetBootMessage(char const*)>
c001f789:	e8 df 74 00 00       	call   c0026c6d <HalInitialise()>
c001f78e:	a1 d4 a9 03 c0       	mov    eax,ds:0xc003a9d4
c001f793:	83 e0 10             	and    eax,0x10
c001f796:	83 f8 01             	cmp    eax,0x1
c001f799:	19 c0                	sbb    eax,eax
c001f79b:	83 e0 46             	and    eax,0x46
c001f79e:	83 c0 1e             	add    eax,0x1e
c001f7a1:	89 04 24             	mov    DWORD PTR [esp],eax
c001f7a4:	e8 50 d4 ff ff       	call   c001cbf9 <setupTimer(int)>
c001f7a9:	83 c4 10             	add    esp,0x10
c001f7ac:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001f7b2:	f6 05 d4 a9 03 c0 20 	test   BYTE PTR ds:0xc003a9d4,0x20
c001f7b9:	74 0c                	je     c001f7c7 <CPU::open(int, int, void*)+0xff>
c001f7bb:	83 ec 0c             	sub    esp,0xc
c001f7be:	53                   	push   ebx
c001f7bf:	e8 38 fe ff ff       	call   c001f5fc <CPU::setupFeatures()>
c001f7c4:	83 c4 10             	add    esp,0x10
c001f7c7:	83 c4 0c             	add    esp,0xc
c001f7ca:	31 c0                	xor    eax,eax
c001f7cc:	5b                   	pop    ebx
c001f7cd:	5e                   	pop    esi
c001f7ce:	5f                   	pop    edi
c001f7cf:	5d                   	pop    ebp
c001f7d0:	c3                   	ret    

c001f7d1 <KeInitialiseAtexit()>:
c001f7d1:	83 ec 10             	sub    esp,0x10
c001f7d4:	c7 05 a0 f8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f8a0,0x0
c001f7de:	6a 60                	push   0x60
c001f7e0:	6a 00                	push   0x0
c001f7e2:	68 20 f9 03 c0       	push   0xc003f920
c001f7e7:	e8 04 0d fe ff       	call   c00004f0 <memset>
c001f7ec:	83 c4 1c             	add    esp,0x1c
c001f7ef:	c3                   	ret    

c001f7f0 <KeRegisterAtexit(void (*)(void*), void*)>:
c001f7f0:	a1 a0 f8 03 c0       	mov    eax,ds:0xc003f8a0
c001f7f5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f7f9:	89 14 85 20 f9 03 c0 	mov    DWORD PTR [eax*4-0x3ffc06e0],edx
c001f800:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f804:	89 14 85 c0 f8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc0740],edx
c001f80b:	40                   	inc    eax
c001f80c:	a3 a0 f8 03 c0       	mov    ds:0xc003f8a0,eax
c001f811:	83 f8 17             	cmp    eax,0x17
c001f814:	7e 0d                	jle    c001f823 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c001f816:	c7 44 24 04 54 23 03 c0 	mov    DWORD PTR [esp+0x4],0xc0032354
c001f81e:	e9 28 08 00 00       	jmp    c002004b <KePanic(char const*)>
c001f823:	c3                   	ret    

c001f824 <KeExecuteAtexit()>:
c001f824:	53                   	push   ebx
c001f825:	31 db                	xor    ebx,ebx
c001f827:	83 ec 08             	sub    esp,0x8
c001f82a:	39 1d a0 f8 03 c0    	cmp    DWORD PTR ds:0xc003f8a0,ebx
c001f830:	7e 50                	jle    c001f882 <KeExecuteAtexit()+0x5e>
c001f832:	8b 04 9d 20 f9 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc06e0]
c001f839:	85 c0                	test   eax,eax
c001f83b:	74 42                	je     c001f87f <KeExecuteAtexit()+0x5b>
c001f83d:	51                   	push   ecx
c001f83e:	50                   	push   eax
c001f83f:	53                   	push   ebx
c001f840:	68 6d 23 03 c0       	push   0xc003236d
c001f845:	e8 f7 98 ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c001f84a:	58                   	pop    eax
c001f84b:	ff 34 9d c0 f8 03 c0 	push   DWORD PTR [ebx*4-0x3ffc0740]
c001f852:	ff 14 9d 20 f9 03 c0 	call   DWORD PTR [ebx*4-0x3ffc06e0]
c001f859:	c7 04 24 8f 23 03 c0 	mov    DWORD PTR [esp],0xc003238f
c001f860:	e8 dc 98 ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c001f865:	c7 04 24 3b 35 03 c0 	mov    DWORD PTR [esp],0xc003353b
c001f86c:	c7 04 9d 20 f9 03 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffc06e0],0x0
c001f877:	e8 c5 98 ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c001f87c:	83 c4 10             	add    esp,0x10
c001f87f:	43                   	inc    ebx
c001f880:	eb a8                	jmp    c001f82a <KeExecuteAtexit()+0x6>
c001f882:	83 c4 08             	add    esp,0x8
c001f885:	5b                   	pop    ebx
c001f886:	c3                   	ret    

c001f887 <KeDisplaySplashScreen()>:
c001f887:	55                   	push   ebp
c001f888:	bd 05 00 00 00       	mov    ebp,0x5
c001f88d:	57                   	push   edi
c001f88e:	bf 0a 00 00 00       	mov    edi,0xa
c001f893:	56                   	push   esi
c001f894:	31 f6                	xor    esi,esi
c001f896:	53                   	push   ebx
c001f897:	31 db                	xor    ebx,ebx
c001f899:	83 ec 0c             	sub    esp,0xc
c001f89c:	0f b6 96 a0 37 03 c0 	movzx  edx,BYTE PTR [esi-0x3ffcc860]
c001f8a3:	89 d0                	mov    eax,edx
c001f8a5:	85 d2                	test   edx,edx
c001f8a7:	74 52                	je     c001f8fb <KeDisplaySplashScreen()+0x74>
c001f8a9:	80 bb d6 37 03 c0 db 	cmp    BYTE PTR [ebx-0x3ffcc82a],0xdb
c001f8b0:	75 13                	jne    c001f8c5 <KeDisplaySplashScreen()+0x3e>
c001f8b2:	0f b6 8b d5 37 03 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffcc82b]
c001f8b9:	83 e1 fe             	and    ecx,0xfffffffe
c001f8bc:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c001f8c2:	75 01                	jne    c001f8c5 <KeDisplaySplashScreen()+0x3e>
c001f8c4:	47                   	inc    edi
c001f8c5:	83 fa 0d             	cmp    edx,0xd
c001f8c8:	74 28                	je     c001f8f2 <KeDisplaySplashScreen()+0x6b>
c001f8ca:	83 fa 0a             	cmp    edx,0xa
c001f8cd:	75 0a                	jne    c001f8d9 <KeDisplaySplashScreen()+0x52>
c001f8cf:	45                   	inc    ebp
c001f8d0:	bf 0a 00 00 00       	mov    edi,0xa
c001f8d5:	31 db                	xor    ebx,ebx
c001f8d7:	eb 19                	jmp    c001f8f2 <KeDisplaySplashScreen()+0x6b>
c001f8d9:	83 ec 0c             	sub    esp,0xc
c001f8dc:	8d 14 1f             	lea    edx,[edi+ebx*1]
c001f8df:	55                   	push   ebp
c001f8e0:	0f be c0             	movsx  eax,al
c001f8e3:	52                   	push   edx
c001f8e4:	43                   	inc    ebx
c001f8e5:	6a 00                	push   0x0
c001f8e7:	6a 0e                	push   0xe
c001f8e9:	50                   	push   eax
c001f8ea:	e8 fd 7f 00 00       	call   c00278ec <HalConsoleWriteCharacter(char, int, int, int, int)>
c001f8ef:	83 c4 20             	add    esp,0x20
c001f8f2:	46                   	inc    esi
c001f8f3:	81 fe 42 01 00 00    	cmp    esi,0x142
c001f8f9:	75 a1                	jne    c001f89c <KeDisplaySplashScreen()+0x15>
c001f8fb:	83 c4 0c             	add    esp,0xc
c001f8fe:	5b                   	pop    ebx
c001f8ff:	5e                   	pop    esi
c001f900:	5f                   	pop    edi
c001f901:	5d                   	pop    ebp
c001f902:	c3                   	ret    

c001f903 <KeSetBootMessage(char const*)>:
c001f903:	57                   	push   edi
c001f904:	56                   	push   esi
c001f905:	53                   	push   ebx
c001f906:	81 ec a4 00 00 00    	sub    esp,0xa4
c001f90c:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c001f913:	68 9e 00 00 00       	push   0x9e
c001f918:	6a 00                	push   0x0
c001f91a:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001f91e:	56                   	push   esi
c001f91f:	e8 cc 0b fe ff       	call   c00004f0 <memset>
c001f924:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f927:	e8 44 0c fe ff       	call   c0000570 <strlen>
c001f92c:	ba 50 00 00 00       	mov    edx,0x50
c001f931:	83 c4 10             	add    esp,0x10
c001f934:	29 c2                	sub    edx,eax
c001f936:	31 c9                	xor    ecx,ecx
c001f938:	83 e2 fe             	and    edx,0xfffffffe
c001f93b:	01 f2                	add    edx,esi
c001f93d:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c001f942:	84 c0                	test   al,al
c001f944:	74 0a                	je     c001f950 <KeSetBootMessage(char const*)+0x4d>
c001f946:	80 cc 0f             	or     ah,0xf
c001f949:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c001f94d:	41                   	inc    ecx
c001f94e:	eb ed                	jmp    c001f93d <KeSetBootMessage(char const*)+0x3a>
c001f950:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c001f955:	b9 9e 00 00 00       	mov    ecx,0x9e
c001f95a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f95c:	81 c4 a0 00 00 00    	add    esp,0xa0
c001f962:	5b                   	pop    ebx
c001f963:	5e                   	pop    esi
c001f964:	5f                   	pop    edi
c001f965:	c3                   	ret    
c001f966:	66 90                	xchg   ax,ax

c001f968 <CUnlockScheduler>:
c001f968:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001f96d:	83 e8 01             	sub    eax,0x1
c001f970:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001f975:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001f97a:	85 c0                	test   eax,eax
c001f97c:	75 02                	jne    c001f980 <CUnlockScheduler+0x18>
c001f97e:	fb                   	sti    
c001f97f:	90                   	nop
c001f980:	90                   	nop
c001f981:	c3                   	ret    
c001f982:	66 90                	xchg   ax,ax

c001f984 <CLockScheduler>:
c001f984:	fa                   	cli    
c001f985:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001f98a:	83 c0 01             	add    eax,0x1
c001f98d:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001f992:	90                   	nop
c001f993:	c3                   	ret    

c001f994 <CPrintf>:
c001f994:	83 ec 0c             	sub    esp,0xc
c001f997:	83 ec 08             	sub    esp,0x8
c001f99a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f99e:	68 30 f6 02 c0       	push   0xc002f630
c001f9a3:	e8 99 97 ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c001f9a8:	83 c4 10             	add    esp,0x10
c001f9ab:	90                   	nop
c001f9ac:	83 c4 0c             	add    esp,0xc
c001f9af:	c3                   	ret    

c001f9b0 <Krnl::handlePowerButton()>:
c001f9b0:	83 ec 0c             	sub    esp,0xc
c001f9b3:	e8 ee 06 00 00       	call   c00200a6 <KeHandlePowerButton()>
c001f9b8:	90                   	nop
c001f9b9:	83 c4 0c             	add    esp,0xc
c001f9bc:	c3                   	ret    
c001f9bd:	8d 76 00             	lea    esi,[esi+0x0]

c001f9c0 <Krnl::handleSleepButton()>:
c001f9c0:	83 ec 0c             	sub    esp,0xc
c001f9c3:	e8 13 07 00 00       	call   c00200db <KeHandleSleepButton()>
c001f9c8:	90                   	nop
c001f9c9:	83 c4 0c             	add    esp,0xc
c001f9cc:	c3                   	ret    

c001f9cd <KeCalculateCRC32(unsigned char*, int)>:
c001f9cd:	53                   	push   ebx
c001f9ce:	83 c8 ff             	or     eax,0xffffffff
c001f9d1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f9d5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f9d9:	01 cb                	add    ebx,ecx
c001f9db:	39 d9                	cmp    ecx,ebx
c001f9dd:	74 15                	je     c001f9f4 <KeCalculateCRC32(unsigned char*, int)+0x27>
c001f9df:	41                   	inc    ecx
c001f9e0:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c001f9e3:	31 c2                	xor    edx,eax
c001f9e5:	c1 e8 08             	shr    eax,0x8
c001f9e8:	0f b6 d2             	movzx  edx,dl
c001f9eb:	33 04 95 00 39 03 c0 	xor    eax,DWORD PTR [edx*4-0x3ffcc700]
c001f9f2:	eb e7                	jmp    c001f9db <KeCalculateCRC32(unsigned char*, int)+0xe>
c001f9f4:	f7 d0                	not    eax
c001f9f6:	5b                   	pop    ebx
c001f9f7:	c3                   	ret    

c001f9f8 <EnvVarContainer::getEnv(char const*)>:
c001f9f8:	57                   	push   edi
c001f9f9:	56                   	push   esi
c001f9fa:	53                   	push   ebx
c001f9fb:	31 db                	xor    ebx,ebx
c001f9fd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fa01:	39 1e                	cmp    DWORD PTR [esi],ebx
c001fa03:	7e 2b                	jle    c001fa30 <EnvVarContainer::getEnv(char const*)+0x38>
c001fa05:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001fa0c:	50                   	push   eax
c001fa0d:	50                   	push   eax
c001fa0e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001fa11:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001fa14:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001fa18:	e8 33 0d fe ff       	call   c0000750 <strcmp>
c001fa1d:	83 c4 10             	add    esp,0x10
c001fa20:	85 c0                	test   eax,eax
c001fa22:	75 09                	jne    c001fa2d <EnvVarContainer::getEnv(char const*)+0x35>
c001fa24:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001fa27:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001fa2b:	eb 05                	jmp    c001fa32 <EnvVarContainer::getEnv(char const*)+0x3a>
c001fa2d:	43                   	inc    ebx
c001fa2e:	eb d1                	jmp    c001fa01 <EnvVarContainer::getEnv(char const*)+0x9>
c001fa30:	31 c0                	xor    eax,eax
c001fa32:	5b                   	pop    ebx
c001fa33:	5e                   	pop    esi
c001fa34:	5f                   	pop    edi
c001fa35:	c3                   	ret    

c001fa36 <EnvVarContainer::setEnv(char const*, char const*)>:
c001fa36:	55                   	push   ebp
c001fa37:	57                   	push   edi
c001fa38:	56                   	push   esi
c001fa39:	53                   	push   ebx
c001fa3a:	83 ec 28             	sub    esp,0x28
c001fa3d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001fa41:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001fa45:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001fa49:	56                   	push   esi
c001fa4a:	e8 21 0b fe ff       	call   c0000570 <strlen>
c001fa4f:	40                   	inc    eax
c001fa50:	89 04 24             	mov    DWORD PTR [esp],eax
c001fa53:	e8 5a 68 ff ff       	call   c00162b2 <malloc>
c001fa58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fa5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fa5f:	e8 0c 0b fe ff       	call   c0000570 <strlen>
c001fa64:	40                   	inc    eax
c001fa65:	89 04 24             	mov    DWORD PTR [esp],eax
c001fa68:	e8 45 68 ff ff       	call   c00162b2 <malloc>
c001fa6d:	89 34 24             	mov    DWORD PTR [esp],esi
c001fa70:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fa74:	e8 f7 0a fe ff       	call   c0000570 <strlen>
c001fa79:	83 c4 0c             	add    esp,0xc
c001fa7c:	40                   	inc    eax
c001fa7d:	50                   	push   eax
c001fa7e:	6a 00                	push   0x0
c001fa80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fa84:	e8 67 0a fe ff       	call   c00004f0 <memset>
c001fa89:	89 34 24             	mov    DWORD PTR [esp],esi
c001fa8c:	e8 df 0a fe ff       	call   c0000570 <strlen>
c001fa91:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001fa95:	8d 48 01             	lea    ecx,[eax+0x1]
c001fa98:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fa9a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fa9d:	89 de                	mov    esi,ebx
c001fa9f:	e8 cc 0a fe ff       	call   c0000570 <strlen>
c001faa4:	83 c4 0c             	add    esp,0xc
c001faa7:	40                   	inc    eax
c001faa8:	50                   	push   eax
c001faa9:	6a 00                	push   0x0
c001faab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001faaf:	e8 3c 0a fe ff       	call   c00004f0 <memset>
c001fab4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fab7:	e8 b4 0a fe ff       	call   c0000570 <strlen>
c001fabc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001fac0:	8d 48 01             	lea    ecx,[eax+0x1]
c001fac3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fac5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001fac8:	40                   	inc    eax
c001fac9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001facc:	c1 e0 03             	shl    eax,0x3
c001facf:	5a                   	pop    edx
c001fad0:	59                   	pop    ecx
c001fad1:	50                   	push   eax
c001fad2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001fad5:	e8 c4 67 ff ff       	call   c001629e <realloc>
c001fada:	8d 74 24 18          	lea    esi,[esp+0x18]
c001fade:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001fae1:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001fae4:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001fae8:	b9 08 00 00 00       	mov    ecx,0x8
c001faed:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001faef:	83 c4 2c             	add    esp,0x2c
c001faf2:	5b                   	pop    ebx
c001faf3:	5e                   	pop    esi
c001faf4:	5f                   	pop    edi
c001faf5:	5d                   	pop    ebp
c001faf6:	c3                   	ret    
c001faf7:	90                   	nop

c001faf8 <EnvVarContainer::deleteEnv(char const*)>:
c001faf8:	c3                   	ret    
c001faf9:	90                   	nop

c001fafa <EnvVarContainer::loadFrom(char const*, char const*)>:
c001fafa:	55                   	push   ebp
c001fafb:	57                   	push   edi
c001fafc:	56                   	push   esi
c001fafd:	53                   	push   ebx
c001fafe:	81 ec 38 01 00 00    	sub    esp,0x138
c001fb04:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001fb0b:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001fb12:	68 14 01 00 00       	push   0x114
c001fb17:	e8 96 67 ff ff       	call   c00162b2 <malloc>
c001fb1c:	83 c4 0c             	add    esp,0xc
c001fb1f:	89 c3                	mov    ebx,eax
c001fb21:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fb24:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001fb2b:	50                   	push   eax
c001fb2c:	e8 17 a8 ff ff       	call   c001a348 <File::File(char const*, Process*)>
c001fb31:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fb34:	e8 f1 aa ff ff       	call   c001a62a <File::exists()>
c001fb39:	83 c4 10             	add    esp,0x10
c001fb3c:	84 c0                	test   al,al
c001fb3e:	75 31                	jne    c001fb71 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001fb40:	50                   	push   eax
c001fb41:	50                   	push   eax
c001fb42:	6a 12                	push   0x12
c001fb44:	53                   	push   ebx
c001fb45:	e8 1c a8 ff ff       	call   c001a366 <File::open(FileOpenMode)>
c001fb4a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001fb4c:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001fb4f:	89 34 24             	mov    DWORD PTR [esp],esi
c001fb52:	e8 19 0a fe ff       	call   c0000570 <strlen>
c001fb57:	5a                   	pop    edx
c001fb58:	31 d2                	xor    edx,edx
c001fb5a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001fb5e:	51                   	push   ecx
c001fb5f:	56                   	push   esi
c001fb60:	52                   	push   edx
c001fb61:	50                   	push   eax
c001fb62:	53                   	push   ebx
c001fb63:	ff d7                	call   edi
c001fb65:	83 c4 14             	add    esp,0x14
c001fb68:	53                   	push   ebx
c001fb69:	e8 56 a8 ff ff       	call   c001a3c4 <File::close()>
c001fb6e:	83 c4 10             	add    esp,0x10
c001fb71:	56                   	push   esi
c001fb72:	31 f6                	xor    esi,esi
c001fb74:	68 00 01 00 00       	push   0x100
c001fb79:	6a 00                	push   0x0
c001fb7b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001fb7f:	50                   	push   eax
c001fb80:	e8 6b 09 fe ff       	call   c00004f0 <memset>
c001fb85:	5f                   	pop    edi
c001fb86:	58                   	pop    eax
c001fb87:	6a 01                	push   0x1
c001fb89:	53                   	push   ebx
c001fb8a:	e8 d7 a7 ff ff       	call   c001a366 <File::open(FileOpenMode)>
c001fb8f:	83 c4 10             	add    esp,0x10
c001fb92:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001fb9a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001fba2:	83 ec 0c             	sub    esp,0xc
c001fba5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001fba7:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001fbab:	51                   	push   ecx
c001fbac:	8d 54 24 23          	lea    edx,[esp+0x23]
c001fbb0:	52                   	push   edx
c001fbb1:	6a 00                	push   0x0
c001fbb3:	6a 01                	push   0x1
c001fbb5:	53                   	push   ebx
c001fbb6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001fbb9:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c001fbbe:	83 c4 20             	add    esp,0x20
c001fbc1:	89 c2                	mov    edx,eax
c001fbc3:	85 c0                	test   eax,eax
c001fbc5:	0f 84 36 01 00 00    	je     c001fd01 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c001fbcb:	83 f8 0d             	cmp    eax,0xd
c001fbce:	0f 84 22 01 00 00    	je     c001fcf6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001fbd4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fbd9:	0f 84 f0 00 00 00    	je     c001fccf <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c001fbdf:	83 f8 0a             	cmp    eax,0xa
c001fbe2:	74 13                	je     c001fbf7 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c001fbe4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fbe9:	74 0c                	je     c001fbf7 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c001fbeb:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001fbf1:	0f 8e f6 00 00 00    	jle    c001fced <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c001fbf7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fbfb:	83 ec 0c             	sub    esp,0xc
c001fbfe:	8d 78 01             	lea    edi,[eax+0x1]
c001fc01:	57                   	push   edi
c001fc02:	e8 ab 66 ff ff       	call   c00162b2 <malloc>
c001fc07:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001fc0b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001fc0f:	8d 56 04             	lea    edx,[esi+0x4]
c001fc12:	89 14 24             	mov    DWORD PTR [esp],edx
c001fc15:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001fc19:	e8 94 66 ff ff       	call   c00162b2 <malloc>
c001fc1e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001fc22:	83 c4 0c             	add    esp,0xc
c001fc25:	57                   	push   edi
c001fc26:	6a 00                	push   0x0
c001fc28:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001fc2c:	e8 bf 08 fe ff       	call   c00004f0 <memset>
c001fc31:	8d 74 24 30          	lea    esi,[esp+0x30]
c001fc35:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001fc39:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001fc3d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fc3f:	83 c4 0c             	add    esp,0xc
c001fc42:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001fc46:	52                   	push   edx
c001fc47:	6a 00                	push   0x0
c001fc49:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001fc4d:	e8 9e 08 fe ff       	call   c00004f0 <memset>
c001fc52:	8d 74 24 30          	lea    esi,[esp+0x30]
c001fc56:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001fc5a:	89 34 24             	mov    DWORD PTR [esp],esi
c001fc5d:	e8 0e 09 fe ff       	call   c0000570 <strlen>
c001fc62:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001fc66:	89 c1                	mov    ecx,eax
c001fc68:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fc6a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001fc6d:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001fc70:	40                   	inc    eax
c001fc71:	83 c4 10             	add    esp,0x10
c001fc74:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001fc77:	85 d2                	test   edx,edx
c001fc79:	75 0c                	jne    c001fc87 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c001fc7b:	83 ec 0c             	sub    esp,0xc
c001fc7e:	6a 08                	push   0x8
c001fc80:	e8 2d 66 ff ff       	call   c00162b2 <malloc>
c001fc85:	eb 0c                	jmp    c001fc93 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c001fc87:	c1 e0 03             	shl    eax,0x3
c001fc8a:	51                   	push   ecx
c001fc8b:	51                   	push   ecx
c001fc8c:	50                   	push   eax
c001fc8d:	52                   	push   edx
c001fc8e:	e8 0b 66 ff ff       	call   c001629e <realloc>
c001fc93:	83 c4 10             	add    esp,0x10
c001fc96:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001fc99:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001fc9c:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001fc9f:	8d 74 24 18          	lea    esi,[esp+0x18]
c001fca3:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001fca7:	b9 08 00 00 00       	mov    ecx,0x8
c001fcac:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fcae:	31 f6                	xor    esi,esi
c001fcb0:	50                   	push   eax
c001fcb1:	68 00 01 00 00       	push   0x100
c001fcb6:	6a 00                	push   0x0
c001fcb8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001fcbc:	50                   	push   eax
c001fcbd:	e8 2e 08 fe ff       	call   c00004f0 <memset>
c001fcc2:	83 c4 10             	add    esp,0x10
c001fcc5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001fccd:	eb 27                	jmp    c001fcf6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001fccf:	83 f8 3d             	cmp    eax,0x3d
c001fcd2:	74 1e                	je     c001fcf2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c001fcd4:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001fcda:	7f 07                	jg     c001fce3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c001fcdc:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c001fce0:	46                   	inc    esi
c001fce1:	eb 13                	jmp    c001fcf6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001fce3:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001fceb:	eb 09                	jmp    c001fcf6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001fced:	83 f8 3d             	cmp    eax,0x3d
c001fcf0:	75 ea                	jne    c001fcdc <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c001fcf2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001fcf6:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fcfb:	0f 85 99 fe ff ff    	jne    c001fb9a <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c001fd01:	83 ec 0c             	sub    esp,0xc
c001fd04:	53                   	push   ebx
c001fd05:	e8 ba a6 ff ff       	call   c001a3c4 <File::close()>
c001fd0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001fd0c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fd0f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001fd12:	81 c4 3c 01 00 00    	add    esp,0x13c
c001fd18:	5b                   	pop    ebx
c001fd19:	5e                   	pop    esi
c001fd1a:	5f                   	pop    edi
c001fd1b:	5d                   	pop    ebp
c001fd1c:	c3                   	ret    
c001fd1d:	90                   	nop

c001fd1e <EnvVarContainer::__loadSystem()>:
c001fd1e:	83 ec 10             	sub    esp,0x10
c001fd21:	68 00 3d 03 c0       	push   0xc0033d00
c001fd26:	68 94 23 03 c0       	push   0xc0032394
c001fd2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd2f:	e8 c6 fd ff ff       	call   c001fafa <EnvVarContainer::loadFrom(char const*, char const*)>
c001fd34:	83 c4 1c             	add    esp,0x1c
c001fd37:	c3                   	ret    

c001fd38 <EnvVarContainer::__loadUser()>:
c001fd38:	c3                   	ret    
c001fd39:	90                   	nop

c001fd3a <EnvVarContainer::EnvVarContainer(Process*)>:
c001fd3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd3e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fd44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd48:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fd4c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fd4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd53:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fd5a:	90                   	nop
c001fd5b:	c3                   	ret    

c001fd5c <EnvVarContainer::~EnvVarContainer()>:
c001fd5c:	83 ec 0c             	sub    esp,0xc
c001fd5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd63:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd66:	85 c0                	test   eax,eax
c001fd68:	74 1d                	je     c001fd87 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001fd6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd6e:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd70:	85 c0                	test   eax,eax
c001fd72:	74 13                	je     c001fd87 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001fd74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd7b:	83 ec 0c             	sub    esp,0xc
c001fd7e:	50                   	push   eax
c001fd7f:	e8 3e 65 ff ff       	call   c00162c2 <free>
c001fd84:	83 c4 10             	add    esp,0x10
c001fd87:	90                   	nop
c001fd88:	83 c4 0c             	add    esp,0xc
c001fd8b:	c3                   	ret    

c001fd8c <KeGetEnv(Process*, char const*)>:
c001fd8c:	53                   	push   ebx
c001fd8d:	83 ec 08             	sub    esp,0x8
c001fd90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd94:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fd98:	39 05 f8 01 04 c0    	cmp    DWORD PTR ds:0xc00401f8,eax
c001fd9e:	74 04                	je     c001fda4 <KeGetEnv(Process*, char const*)+0x18>
c001fda0:	85 c0                	test   eax,eax
c001fda2:	75 0b                	jne    c001fdaf <KeGetEnv(Process*, char const*)+0x23>
c001fda4:	a1 80 f9 03 c0       	mov    eax,ds:0xc003f980
c001fda9:	85 c0                	test   eax,eax
c001fdab:	75 19                	jne    c001fdc6 <KeGetEnv(Process*, char const*)+0x3a>
c001fdad:	eb 27                	jmp    c001fdd6 <KeGetEnv(Process*, char const*)+0x4a>
c001fdaf:	52                   	push   edx
c001fdb0:	52                   	push   edx
c001fdb1:	53                   	push   ebx
c001fdb2:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c001fdb8:	e8 3b fc ff ff       	call   c001f9f8 <EnvVarContainer::getEnv(char const*)>
c001fdbd:	83 c4 10             	add    esp,0x10
c001fdc0:	85 c0                	test   eax,eax
c001fdc2:	75 28                	jne    c001fdec <KeGetEnv(Process*, char const*)+0x60>
c001fdc4:	eb de                	jmp    c001fda4 <KeGetEnv(Process*, char const*)+0x18>
c001fdc6:	52                   	push   edx
c001fdc7:	52                   	push   edx
c001fdc8:	53                   	push   ebx
c001fdc9:	50                   	push   eax
c001fdca:	e8 29 fc ff ff       	call   c001f9f8 <EnvVarContainer::getEnv(char const*)>
c001fdcf:	83 c4 10             	add    esp,0x10
c001fdd2:	85 c0                	test   eax,eax
c001fdd4:	75 16                	jne    c001fdec <KeGetEnv(Process*, char const*)+0x60>
c001fdd6:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001fdda:	a1 84 f9 03 c0       	mov    eax,ds:0xc003f984
c001fddf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001fde3:	83 c4 08             	add    esp,0x8
c001fde6:	5b                   	pop    ebx
c001fde7:	e9 0c fc ff ff       	jmp    c001f9f8 <EnvVarContainer::getEnv(char const*)>
c001fdec:	83 c4 08             	add    esp,0x8
c001fdef:	5b                   	pop    ebx
c001fdf0:	c3                   	ret    

c001fdf1 <KeSetEnvSystem(char const*, char const*)>:
c001fdf1:	83 ec 10             	sub    esp,0x10
c001fdf4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fdf8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fdfc:	ff 35 84 f9 03 c0    	push   DWORD PTR ds:0xc003f984
c001fe02:	e8 2f fc ff ff       	call   c001fa36 <EnvVarContainer::setEnv(char const*, char const*)>
c001fe07:	83 c4 1c             	add    esp,0x1c
c001fe0a:	c3                   	ret    

c001fe0b <KeSetEnvUser(char const*, char const*)>:
c001fe0b:	a1 80 f9 03 c0       	mov    eax,ds:0xc003f980
c001fe10:	85 c0                	test   eax,eax
c001fe12:	74 15                	je     c001fe29 <KeSetEnvUser(char const*, char const*)+0x1e>
c001fe14:	83 ec 10             	sub    esp,0x10
c001fe17:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fe1b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fe1f:	50                   	push   eax
c001fe20:	e8 11 fc ff ff       	call   c001fa36 <EnvVarContainer::setEnv(char const*, char const*)>
c001fe25:	83 c4 1c             	add    esp,0x1c
c001fe28:	c3                   	ret    
c001fe29:	c3                   	ret    

c001fe2a <KeSetEnvProcess(Process*, char const*, char const*)>:
c001fe2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe2e:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c001fe34:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fe38:	e9 f9 fb ff ff       	jmp    c001fa36 <EnvVarContainer::setEnv(char const*, char const*)>

c001fe3d <KeDeleteEnvSystem(char const*)>:
c001fe3d:	c3                   	ret    

c001fe3e <KeDeleteEnvUser(char const*)>:
c001fe3e:	c3                   	ret    

c001fe3f <KeDeleteEnvProcess(Process*, char const*)>:
c001fe3f:	c3                   	ret    

c001fe40 <KeNewProcessEnv(Process*)>:
c001fe40:	83 ec 28             	sub    esp,0x28
c001fe43:	6a 0c                	push   0xc
c001fe45:	e8 68 64 ff ff       	call   c00162b2 <malloc>
c001fe4a:	5a                   	pop    edx
c001fe4b:	59                   	pop    ecx
c001fe4c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001fe50:	50                   	push   eax
c001fe51:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fe55:	e8 e0 fe ff ff       	call   c001fd3a <EnvVarContainer::EnvVarContainer(Process*)>
c001fe5a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fe5e:	83 c4 2c             	add    esp,0x2c
c001fe61:	c3                   	ret    

c001fe62 <KeCopyProcessEnv(Process*, Process*)>:
c001fe62:	57                   	push   edi
c001fe63:	56                   	push   esi
c001fe64:	53                   	push   ebx
c001fe65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe69:	83 ec 0c             	sub    esp,0xc
c001fe6c:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c001fe72:	6a 0c                	push   0xc
c001fe74:	e8 39 64 ff ff       	call   c00162b2 <malloc>
c001fe79:	89 c3                	mov    ebx,eax
c001fe7b:	58                   	pop    eax
c001fe7c:	5a                   	pop    edx
c001fe7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe81:	53                   	push   ebx
c001fe82:	e8 b3 fe ff ff       	call   c001fd3a <EnvVarContainer::EnvVarContainer(Process*)>
c001fe87:	8b 07                	mov    eax,DWORD PTR [edi]
c001fe89:	89 03                	mov    DWORD PTR [ebx],eax
c001fe8b:	c1 e0 03             	shl    eax,0x3
c001fe8e:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe91:	e8 1c 64 ff ff       	call   c00162b2 <malloc>
c001fe96:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001fe99:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001fe9b:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001fe9e:	c1 e1 03             	shl    ecx,0x3
c001fea1:	89 c7                	mov    edi,eax
c001fea3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fea5:	83 c4 10             	add    esp,0x10
c001fea8:	89 d8                	mov    eax,ebx
c001feaa:	5b                   	pop    ebx
c001feab:	5e                   	pop    esi
c001feac:	5f                   	pop    edi
c001fead:	c3                   	ret    

c001feae <KeLoadSystemEnv()>:
c001feae:	53                   	push   ebx
c001feaf:	83 ec 14             	sub    esp,0x14
c001feb2:	6a 0c                	push   0xc
c001feb4:	e8 f9 63 ff ff       	call   c00162b2 <malloc>
c001feb9:	89 c3                	mov    ebx,eax
c001febb:	58                   	pop    eax
c001febc:	5a                   	pop    edx
c001febd:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c001fec3:	53                   	push   ebx
c001fec4:	e8 71 fe ff ff       	call   c001fd3a <EnvVarContainer::EnvVarContainer(Process*)>
c001fec9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fecc:	89 1d 84 f9 03 c0    	mov    DWORD PTR ds:0xc003f984,ebx
c001fed2:	e8 47 fe ff ff       	call   c001fd1e <EnvVarContainer::__loadSystem()>
c001fed7:	83 c4 18             	add    esp,0x18
c001feda:	5b                   	pop    ebx
c001fedb:	c3                   	ret    

c001fedc <KeLoadUserEnv()>:
c001fedc:	53                   	push   ebx
c001fedd:	83 ec 14             	sub    esp,0x14
c001fee0:	6a 0c                	push   0xc
c001fee2:	e8 cb 63 ff ff       	call   c00162b2 <malloc>
c001fee7:	89 c3                	mov    ebx,eax
c001fee9:	58                   	pop    eax
c001feea:	5a                   	pop    edx
c001feeb:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c001fef1:	53                   	push   ebx
c001fef2:	e8 43 fe ff ff       	call   c001fd3a <EnvVarContainer::EnvVarContainer(Process*)>
c001fef7:	89 1d 80 f9 03 c0    	mov    DWORD PTR ds:0xc003f980,ebx
c001fefd:	83 c4 18             	add    esp,0x18
c001ff00:	5b                   	pop    ebx
c001ff01:	c3                   	ret    

c001ff02 <KeFlushEnv()>:
c001ff02:	c3                   	ret    

c001ff03 <KeGetProcessTotalEnvCount(Process*)>:
c001ff03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff07:	8b 15 80 f9 03 c0    	mov    edx,DWORD PTR ds:0xc003f980
c001ff0d:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001ff13:	a1 84 f9 03 c0       	mov    eax,ds:0xc003f984
c001ff18:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff1a:	03 01                	add    eax,DWORD PTR [ecx]
c001ff1c:	85 d2                	test   edx,edx
c001ff1e:	74 02                	je     c001ff22 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c001ff20:	03 02                	add    eax,DWORD PTR [edx]
c001ff22:	c3                   	ret    

c001ff23 <KeGetProcessEnvPair(Process*, int)>:
c001ff23:	57                   	push   edi
c001ff24:	56                   	push   esi
c001ff25:	8b 35 80 f9 03 c0    	mov    esi,DWORD PTR ds:0xc003f980
c001ff2b:	53                   	push   ebx
c001ff2c:	85 f6                	test   esi,esi
c001ff2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ff32:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ff36:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001ff3c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ff40:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ff42:	75 16                	jne    c001ff5a <KeGetProcessEnvPair(Process*, int)+0x37>
c001ff44:	39 c2                	cmp    edx,eax
c001ff46:	7c 16                	jl     c001ff5e <KeGetProcessEnvPair(Process*, int)+0x3b>
c001ff48:	8b 0d 84 f9 03 c0    	mov    ecx,DWORD PTR ds:0xc003f984
c001ff4e:	8b 31                	mov    esi,DWORD PTR [ecx]
c001ff50:	01 c6                	add    esi,eax
c001ff52:	39 d6                	cmp    esi,edx
c001ff54:	7e 3c                	jle    c001ff92 <KeGetProcessEnvPair(Process*, int)+0x6f>
c001ff56:	29 c2                	sub    edx,eax
c001ff58:	eb 04                	jmp    c001ff5e <KeGetProcessEnvPair(Process*, int)+0x3b>
c001ff5a:	39 c2                	cmp    edx,eax
c001ff5c:	7d 05                	jge    c001ff63 <KeGetProcessEnvPair(Process*, int)+0x40>
c001ff5e:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001ff61:	eb 20                	jmp    c001ff83 <KeGetProcessEnvPair(Process*, int)+0x60>
c001ff63:	8b 3e                	mov    edi,DWORD PTR [esi]
c001ff65:	8d 0c 07             	lea    ecx,[edi+eax*1]
c001ff68:	39 d1                	cmp    ecx,edx
c001ff6a:	7e 04                	jle    c001ff70 <KeGetProcessEnvPair(Process*, int)+0x4d>
c001ff6c:	29 c2                	sub    edx,eax
c001ff6e:	eb 10                	jmp    c001ff80 <KeGetProcessEnvPair(Process*, int)+0x5d>
c001ff70:	8b 35 84 f9 03 c0    	mov    esi,DWORD PTR ds:0xc003f984
c001ff76:	03 0e                	add    ecx,DWORD PTR [esi]
c001ff78:	39 d1                	cmp    ecx,edx
c001ff7a:	7e 16                	jle    c001ff92 <KeGetProcessEnvPair(Process*, int)+0x6f>
c001ff7c:	29 c2                	sub    edx,eax
c001ff7e:	29 fa                	sub    edx,edi
c001ff80:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001ff83:	8d 14 d0             	lea    edx,[eax+edx*8]
c001ff86:	8b 02                	mov    eax,DWORD PTR [edx]
c001ff88:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001ff8b:	89 03                	mov    DWORD PTR [ebx],eax
c001ff8d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001ff90:	eb 1d                	jmp    c001ffaf <KeGetProcessEnvPair(Process*, int)+0x8c>
c001ff92:	83 ec 0c             	sub    esp,0xc
c001ff95:	68 b6 23 03 c0       	push   0xc00323b6
c001ff9a:	e8 ac 00 00 00       	call   c002004b <KePanic(char const*)>
c001ff9f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001ffa5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ffac:	83 c4 10             	add    esp,0x10
c001ffaf:	89 d8                	mov    eax,ebx
c001ffb1:	5b                   	pop    ebx
c001ffb2:	5e                   	pop    esi
c001ffb3:	5f                   	pop    edi
c001ffb4:	c2 04 00             	ret    0x4

c001ffb7 <CPU::current()>:
c001ffb7:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001ffbc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ffc2:	c3                   	ret    

c001ffc3 <operator new(unsigned long)>:
c001ffc3:	e9 ea 62 ff ff       	jmp    c00162b2 <malloc>

c001ffc8 <operator delete(void*)>:
c001ffc8:	e9 05 63 ff ff       	jmp    c00162d2 <rfree>

c001ffcd <disableIRQs()>:
c001ffcd:	fa                   	cli    
c001ffce:	c3                   	ret    

c001ffcf <enableIRQs()>:
c001ffcf:	fb                   	sti    
c001ffd0:	c3                   	ret    

c001ffd1 <lockScheduler()>:
c001ffd1:	fa                   	cli    
c001ffd2:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c001ffd8:	c3                   	ret    

c001ffd9 <unlockScheduler()>:
c001ffd9:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001ffde:	48                   	dec    eax
c001ffdf:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001ffe4:	75 01                	jne    c001ffe7 <unlockScheduler()+0xe>
c001ffe6:	fb                   	sti    
c001ffe7:	c3                   	ret    

c001ffe8 <lockStuff()>:
c001ffe8:	fa                   	cli    
c001ffe9:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c001ffef:	ff 05 cc 01 04 c0    	inc    DWORD PTR ds:0xc00401cc
c001fff5:	c3                   	ret    

c001fff6 <unlockStuff()>:
c001fff6:	83 ec 0c             	sub    esp,0xc
c001fff9:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001fffe:	48                   	dec    eax
c001ffff:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020004:	75 18                	jne    c002001e <unlockStuff()+0x28>
c0020006:	83 3d c8 01 04 c0 00 	cmp    DWORD PTR ds:0xc00401c8,0x0
c002000d:	74 0f                	je     c002001e <unlockStuff()+0x28>
c002000f:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020019:	e8 7a 4b 00 00       	call   c0024b98 <schedule()>
c002001e:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020023:	48                   	dec    eax
c0020024:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020029:	75 01                	jne    c002002c <unlockStuff()+0x36>
c002002b:	fb                   	sti    
c002002c:	83 c4 0c             	add    esp,0xc
c002002f:	c3                   	ret    

c0020030 <Virt::getAKernelVAS()>:
c0020030:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c0020035:	c3                   	ret    

c0020036 <__not_memcpy>:
c0020036:	57                   	push   edi
c0020037:	56                   	push   esi
c0020038:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002003c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020040:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020044:	89 c7                	mov    edi,eax
c0020046:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020048:	5e                   	pop    esi
c0020049:	5f                   	pop    edi
c002004a:	c3                   	ret    

c002004b <KePanic(char const*)>:
c002004b:	c6 05 88 f9 03 c0 01 	mov    BYTE PTR ds:0xc003f988,0x1
c0020052:	e9 e7 6a 00 00       	jmp    c0026b3e <HalPanic(char const*)>

c0020057 <KePowerThread(void*)>:
c0020057:	83 ec 0c             	sub    esp,0xc
c002005a:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002005f:	48                   	dec    eax
c0020060:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020065:	75 01                	jne    c0020068 <KePowerThread(void*)+0x11>
c0020067:	fb                   	sti    
c0020068:	83 ec 0c             	sub    esp,0xc
c002006b:	c6 05 a0 f9 03 c0 00 	mov    BYTE PTR ds:0xc003f9a0,0x0
c0020072:	6a 0a                	push   0xa
c0020074:	e8 63 4e 00 00       	call   c0024edc <sleep(unsigned int)>
c0020079:	83 05 e4 f9 03 c0 0a 	add    DWORD PTR ds:0xc003f9e4,0xa
c0020080:	83 c4 10             	add    esp,0x10
c0020083:	eb e3                	jmp    c0020068 <KePowerThread(void*)+0x11>

c0020085 <KeChangePowerSettings(PowerSettings)>:
c0020085:	57                   	push   edi
c0020086:	b9 09 00 00 00       	mov    ecx,0x9
c002008b:	56                   	push   esi
c002008c:	bf c0 f9 03 c0       	mov    edi,0xc003f9c0
c0020091:	fc                   	cld    
c0020092:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0020096:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020098:	5e                   	pop    esi
c0020099:	5f                   	pop    edi
c002009a:	c3                   	ret    

c002009b <KeUserIOReceived()>:
c002009b:	c7 05 e4 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9e4,0x0
c00200a5:	c3                   	ret    

c00200a6 <KeHandlePowerButton()>:
c00200a6:	83 ec 0c             	sub    esp,0xc
c00200a9:	a1 c0 f9 03 c0       	mov    eax,ds:0xc003f9c0
c00200ae:	83 f8 02             	cmp    eax,0x2
c00200b1:	75 10                	jne    c00200c3 <KeHandlePowerButton()+0x1d>
c00200b3:	83 ec 0c             	sub    esp,0xc
c00200b6:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00200bc:	e8 63 58 ff ff       	call   c0015924 <Computer::shutdown()>
c00200c1:	eb 11                	jmp    c00200d4 <KeHandlePowerButton()+0x2e>
c00200c3:	48                   	dec    eax
c00200c4:	75 11                	jne    c00200d7 <KeHandlePowerButton()+0x31>
c00200c6:	83 ec 0c             	sub    esp,0xc
c00200c9:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00200cf:	e8 80 58 ff ff       	call   c0015954 <Computer::sleep()>
c00200d4:	83 c4 10             	add    esp,0x10
c00200d7:	83 c4 0c             	add    esp,0xc
c00200da:	c3                   	ret    

c00200db <KeHandleSleepButton()>:
c00200db:	83 ec 0c             	sub    esp,0xc
c00200de:	a1 c4 f9 03 c0       	mov    eax,ds:0xc003f9c4
c00200e3:	83 f8 02             	cmp    eax,0x2
c00200e6:	75 10                	jne    c00200f8 <KeHandleSleepButton()+0x1d>
c00200e8:	83 ec 0c             	sub    esp,0xc
c00200eb:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00200f1:	e8 2e 58 ff ff       	call   c0015924 <Computer::shutdown()>
c00200f6:	eb 11                	jmp    c0020109 <KeHandleSleepButton()+0x2e>
c00200f8:	48                   	dec    eax
c00200f9:	75 11                	jne    c002010c <KeHandleSleepButton()+0x31>
c00200fb:	83 ec 0c             	sub    esp,0xc
c00200fe:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0020104:	e8 4b 58 ff ff       	call   c0015954 <Computer::sleep()>
c0020109:	83 c4 10             	add    esp,0x10
c002010c:	83 c4 0c             	add    esp,0xc
c002010f:	c3                   	ret    

c0020110 <KeSetupPowerManager()>:
c0020110:	83 ec 0c             	sub    esp,0xc
c0020113:	c7 05 e4 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9e4,0x0
c002011d:	68 f0 00 00 00       	push   0xf0
c0020122:	c6 05 a0 f9 03 c0 00 	mov    BYTE PTR ds:0xc003f9a0,0x0
c0020129:	6a 00                	push   0x0
c002012b:	68 57 00 02 c0       	push   0xc0020057
c0020130:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0020136:	e8 0d 48 00 00       	call   c0024948 <Process::createThread(void (*)(void*), void*, int)>
c002013b:	c7 05 c0 f9 03 c0 02 00 00 00 	mov    DWORD PTR ds:0xc003f9c0,0x2
c0020145:	c7 05 c4 f9 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003f9c4,0x1
c002014f:	c7 05 c8 f9 03 c0 03 00 00 00 	mov    DWORD PTR ds:0xc003f9c8,0x3
c0020159:	c7 05 cc f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9cc,0x0
c0020163:	c7 05 d8 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9d8,0x0
c002016d:	c7 05 d0 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9d0,0x0
c0020177:	c7 05 dc f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9dc,0x0
c0020181:	c7 05 d4 f9 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc003f9d4,0x3c
c002018b:	c7 05 e0 f9 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc003f9e0,0x3c
c0020195:	83 c4 1c             	add    esp,0x1c
c0020198:	c3                   	ret    

c0020199 <KeRand()>:
c0020199:	69 05 e8 f9 03 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc003f9e8,0x2875
c00201a3:	69 0d ec f9 03 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc003f9ec,0xa2e7b175
c00201ad:	53                   	push   ebx
c00201ae:	01 c1                	add    ecx,eax
c00201b0:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00201b5:	f7 25 e8 f9 03 c0    	mul    DWORD PTR ds:0xc003f9e8
c00201bb:	01 ca                	add    edx,ecx
c00201bd:	05 ef 04 b5 00       	add    eax,0xb504ef
c00201c2:	83 d2 00             	adc    edx,0x0
c00201c5:	a3 e8 f9 03 c0       	mov    ds:0xc003f9e8,eax
c00201ca:	0f b7 da             	movzx  ebx,dx
c00201cd:	89 da                	mov    edx,ebx
c00201cf:	89 1d ec f9 03 c0    	mov    DWORD PTR ds:0xc003f9ec,ebx
c00201d5:	0f ac d0 0e          	shrd   eax,edx,0xe
c00201d9:	5b                   	pop    ebx
c00201da:	c3                   	ret    

c00201db <KeSeedRand(unsigned int)>:
c00201db:	53                   	push   ebx
c00201dc:	83 ec 08             	sub    esp,0x8
c00201df:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00201e3:	e8 75 6c 00 00       	call   c0026e5d <HalGetRand()>
c00201e8:	c7 05 ec f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9ec,0x0
c00201f2:	31 d8                	xor    eax,ebx
c00201f4:	a3 e8 f9 03 c0       	mov    ds:0xc003f9e8,eax
c00201f9:	e8 9b ff ff ff       	call   c0020199 <KeRand()>
c00201fe:	83 c4 08             	add    esp,0x8
c0020201:	5b                   	pop    ebx
c0020202:	eb 95                	jmp    c0020199 <KeRand()>

c0020204 <KeInitRand()>:
c0020204:	83 ec 0c             	sub    esp,0xc
c0020207:	e8 46 6a 00 00       	call   c0026c52 <HalQueryPerformanceCounter()>
c002020c:	0f 20 da             	mov    edx,cr3
c002020f:	0f 22 da             	mov    cr3,edx
c0020212:	0f 20 da             	mov    edx,cr3
c0020215:	0f 22 da             	mov    cr3,edx
c0020218:	0f 20 da             	mov    edx,cr3
c002021b:	0f 22 da             	mov    cr3,edx
c002021e:	0f 20 da             	mov    edx,cr3
c0020221:	0f 22 da             	mov    cr3,edx
c0020224:	83 ec 0c             	sub    esp,0xc
c0020227:	35 03 8a 95 38       	xor    eax,0x38958a03
c002022c:	50                   	push   eax
c002022d:	e8 a9 ff ff ff       	call   c00201db <KeSeedRand(unsigned int)>
c0020232:	83 c4 1c             	add    esp,0x1c
c0020235:	c3                   	ret    
c0020236:	66 90                	xchg   ax,ax

c0020238 <KeResolveCompatibilitySymbol(char*)>:
c0020238:	83 ec 0c             	sub    esp,0xc
c002023b:	83 ec 08             	sub    esp,0x8
c002023e:	68 d0 23 03 c0       	push   0xc00323d0
c0020243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020247:	e8 04 05 fe ff       	call   c0000750 <strcmp>
c002024c:	83 c4 10             	add    esp,0x10
c002024f:	85 c0                	test   eax,eax
c0020251:	0f 94 c0             	sete   al
c0020254:	0f b6 c0             	movzx  eax,al
c0020257:	85 c0                	test   eax,eax
c0020259:	74 0d                	je     c0020268 <KeResolveCompatibilitySymbol(char*)+0x30>
c002025b:	b8 bc a9 03 c0       	mov    eax,0xc003a9bc
c0020260:	e9 8b 01 00 00       	jmp    c00203f0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020265:	8d 76 00             	lea    esi,[esi+0x0]
c0020268:	83 ec 08             	sub    esp,0x8
c002026b:	68 d9 23 03 c0       	push   0xc00323d9
c0020270:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020274:	e8 d7 04 fe ff       	call   c0000750 <strcmp>
c0020279:	83 c4 10             	add    esp,0x10
c002027c:	85 c0                	test   eax,eax
c002027e:	0f 94 c0             	sete   al
c0020281:	0f b6 c0             	movzx  eax,al
c0020284:	85 c0                	test   eax,eax
c0020286:	74 0c                	je     c0020294 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0020288:	b8 40 e2 02 c0       	mov    eax,0xc002e240
c002028d:	e9 5e 01 00 00       	jmp    c00203f0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020292:	66 90                	xchg   ax,ax
c0020294:	83 ec 08             	sub    esp,0x8
c0020297:	68 e3 23 03 c0       	push   0xc00323e3
c002029c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202a0:	e8 ab 04 fe ff       	call   c0000750 <strcmp>
c00202a5:	83 c4 10             	add    esp,0x10
c00202a8:	85 c0                	test   eax,eax
c00202aa:	0f 94 c0             	sete   al
c00202ad:	0f b6 c0             	movzx  eax,al
c00202b0:	85 c0                	test   eax,eax
c00202b2:	74 0c                	je     c00202c0 <KeResolveCompatibilitySymbol(char*)+0x88>
c00202b4:	b8 74 df 02 c0       	mov    eax,0xc002df74
c00202b9:	e9 32 01 00 00       	jmp    c00203f0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00202be:	66 90                	xchg   ax,ax
c00202c0:	83 ec 08             	sub    esp,0x8
c00202c3:	68 ec 23 03 c0       	push   0xc00323ec
c00202c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202cc:	e8 7f 04 fe ff       	call   c0000750 <strcmp>
c00202d1:	83 c4 10             	add    esp,0x10
c00202d4:	85 c0                	test   eax,eax
c00202d6:	0f 94 c0             	sete   al
c00202d9:	0f b6 c0             	movzx  eax,al
c00202dc:	85 c0                	test   eax,eax
c00202de:	74 0c                	je     c00202ec <KeResolveCompatibilitySymbol(char*)+0xb4>
c00202e0:	b8 4b 00 02 c0       	mov    eax,0xc002004b
c00202e5:	e9 06 01 00 00       	jmp    c00203f0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00202ea:	66 90                	xchg   ax,ax
c00202ec:	83 ec 08             	sub    esp,0x8
c00202ef:	68 ff 23 03 c0       	push   0xc00323ff
c00202f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202f8:	e8 53 04 fe ff       	call   c0000750 <strcmp>
c00202fd:	83 c4 10             	add    esp,0x10
c0020300:	85 c0                	test   eax,eax
c0020302:	0f 94 c0             	sete   al
c0020305:	0f b6 c0             	movzx  eax,al
c0020308:	85 c0                	test   eax,eax
c002030a:	74 0c                	je     c0020318 <KeResolveCompatibilitySymbol(char*)+0xe0>
c002030c:	b8 03 f9 01 c0       	mov    eax,0xc001f903
c0020311:	e9 da 00 00 00       	jmp    c00203f0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020316:	66 90                	xchg   ax,ax
c0020318:	83 ec 08             	sub    esp,0x8
c002031b:	68 1c 24 03 c0       	push   0xc003241c
c0020320:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020324:	e8 27 04 fe ff       	call   c0000750 <strcmp>
c0020329:	83 c4 10             	add    esp,0x10
c002032c:	85 c0                	test   eax,eax
c002032e:	0f 94 c0             	sete   al
c0020331:	0f b6 c0             	movzx  eax,al
c0020334:	85 c0                	test   eax,eax
c0020336:	74 0c                	je     c0020344 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0020338:	b8 40 e3 02 c0       	mov    eax,0xc002e340
c002033d:	e9 ae 00 00 00       	jmp    c00203f0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020342:	66 90                	xchg   ax,ax
c0020344:	83 ec 08             	sub    esp,0x8
c0020347:	68 26 24 03 c0       	push   0xc0032426
c002034c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020350:	e8 fb 03 fe ff       	call   c0000750 <strcmp>
c0020355:	83 c4 10             	add    esp,0x10
c0020358:	85 c0                	test   eax,eax
c002035a:	0f 94 c0             	sete   al
c002035d:	0f b6 c0             	movzx  eax,al
c0020360:	85 c0                	test   eax,eax
c0020362:	74 0c                	je     c0020370 <KeResolveCompatibilitySymbol(char*)+0x138>
c0020364:	b8 c0 e0 02 c0       	mov    eax,0xc002e0c0
c0020369:	e9 82 00 00 00       	jmp    c00203f0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c002036e:	66 90                	xchg   ax,ax
c0020370:	83 ec 08             	sub    esp,0x8
c0020373:	68 2f 24 03 c0       	push   0xc003242f
c0020378:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002037c:	e8 cf 03 fe ff       	call   c0000750 <strcmp>
c0020381:	83 c4 10             	add    esp,0x10
c0020384:	85 c0                	test   eax,eax
c0020386:	0f 94 c0             	sete   al
c0020389:	0f b6 c0             	movzx  eax,al
c002038c:	85 c0                	test   eax,eax
c002038e:	74 08                	je     c0020398 <KeResolveCompatibilitySymbol(char*)+0x160>
c0020390:	b8 c0 a9 03 c0       	mov    eax,0xc003a9c0
c0020395:	eb 59                	jmp    c00203f0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020397:	90                   	nop
c0020398:	83 ec 08             	sub    esp,0x8
c002039b:	68 47 24 03 c0       	push   0xc0032447
c00203a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203a4:	e8 a7 03 fe ff       	call   c0000750 <strcmp>
c00203a9:	83 c4 10             	add    esp,0x10
c00203ac:	85 c0                	test   eax,eax
c00203ae:	0f 94 c0             	sete   al
c00203b1:	0f b6 c0             	movzx  eax,al
c00203b4:	85 c0                	test   eax,eax
c00203b6:	74 08                	je     c00203c0 <KeResolveCompatibilitySymbol(char*)+0x188>
c00203b8:	b8 c0 a9 03 c0       	mov    eax,0xc003a9c0
c00203bd:	eb 31                	jmp    c00203f0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00203bf:	90                   	nop
c00203c0:	83 ec 08             	sub    esp,0x8
c00203c3:	68 54 24 03 c0       	push   0xc0032454
c00203c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203cc:	e8 7f 03 fe ff       	call   c0000750 <strcmp>
c00203d1:	83 c4 10             	add    esp,0x10
c00203d4:	85 c0                	test   eax,eax
c00203d6:	0f 94 c0             	sete   al
c00203d9:	0f b6 c0             	movzx  eax,al
c00203dc:	85 c0                	test   eax,eax
c00203de:	74 08                	je     c00203e8 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c00203e0:	b8 c1 a9 03 c0       	mov    eax,0xc003a9c1
c00203e5:	eb 09                	jmp    c00203f0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00203e7:	90                   	nop
c00203e8:	b8 00 00 00 00       	mov    eax,0x0
c00203ed:	8d 76 00             	lea    esi,[esi+0x0]
c00203f0:	83 c4 0c             	add    esp,0xc
c00203f3:	c3                   	ret    

c00203f4 <KiSigKill(int)>:
c00203f4:	83 ec 0c             	sub    esp,0xc
c00203f7:	6a 00                	push   0x0
c00203f9:	6a 00                	push   0x0
c00203fb:	6a ff                	push   0xffffffff
c00203fd:	6a 01                	push   0x1
c00203ff:	e8 4e 4c 01 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020404:	83 c4 1c             	add    esp,0x1c
c0020407:	c3                   	ret    

c0020408 <KiDefaultSignalHandlerIgnore(int)>:
c0020408:	c3                   	ret    

c0020409 <KiDefaultSignalHandlerPause(int)>:
c0020409:	57                   	push   edi
c002040a:	b9 07 00 00 00       	mov    ecx,0x7
c002040f:	56                   	push   esi
c0020410:	be 9d 24 03 c0       	mov    esi,0xc003249d
c0020415:	83 ec 24             	sub    esp,0x24
c0020418:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002041c:	fc                   	cld    
c002041d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002041f:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020423:	50                   	push   eax
c0020424:	6a 00                	push   0x0
c0020426:	6a 00                	push   0x0
c0020428:	6a 27                	push   0x27
c002042a:	e8 23 4c 01 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002042f:	83 c4 34             	add    esp,0x34
c0020432:	5e                   	pop    esi
c0020433:	5f                   	pop    edi
c0020434:	c3                   	ret    

c0020435 <KiDefaultSignalHandlerResume(int)>:
c0020435:	57                   	push   edi
c0020436:	b9 1d 00 00 00       	mov    ecx,0x1d
c002043b:	56                   	push   esi
c002043c:	be b9 24 03 c0       	mov    esi,0xc00324b9
c0020441:	83 ec 24             	sub    esp,0x24
c0020444:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0020448:	fc                   	cld    
c0020449:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002044b:	8d 44 24 03          	lea    eax,[esp+0x3]
c002044f:	50                   	push   eax
c0020450:	6a 00                	push   0x0
c0020452:	6a 00                	push   0x0
c0020454:	6a 27                	push   0x27
c0020456:	e8 f7 4b 01 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002045b:	83 c4 34             	add    esp,0x34
c002045e:	5e                   	pop    esi
c002045f:	5f                   	pop    edi
c0020460:	c3                   	ret    

c0020461 <KeDeinitSignals(SigHandlerBlock*)>:
c0020461:	e9 5c 5e ff ff       	jmp    c00162c2 <free>

c0020466 <KeInitSignals()>:
c0020466:	53                   	push   ebx
c0020467:	83 ec 14             	sub    esp,0x14
c002046a:	68 c8 00 00 00       	push   0xc8
c002046f:	e8 3e 5e ff ff       	call   c00162b2 <malloc>
c0020474:	83 c4 0c             	add    esp,0xc
c0020477:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0020481:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c002048b:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0020492:	89 c3                	mov    ebx,eax
c0020494:	6a 20                	push   0x20
c0020496:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c002049c:	6a 00                	push   0x0
c002049e:	50                   	push   eax
c002049f:	e8 4c 00 fe ff       	call   c00004f0 <memset>
c00204a4:	83 c4 0c             	add    esp,0xc
c00204a7:	6a 44                	push   0x44
c00204a9:	6a 00                	push   0x0
c00204ab:	53                   	push   ebx
c00204ac:	e8 3f 00 fe ff       	call   c00004f0 <memset>
c00204b1:	89 d8                	mov    eax,ebx
c00204b3:	83 c4 18             	add    esp,0x18
c00204b6:	5b                   	pop    ebx
c00204b7:	c3                   	ret    

c00204b8 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c00204b8:	53                   	push   ebx
c00204b9:	b8 01 00 00 00       	mov    eax,0x1
c00204be:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00204c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00204c6:	83 f9 10             	cmp    ecx,0x10
c00204c9:	7f 21                	jg     c00204ec <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c00204cb:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c00204ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204d2:	89 03                	mov    DWORD PTR [ebx],eax
c00204d4:	b8 01 00 00 00       	mov    eax,0x1
c00204d9:	d3 e0                	shl    eax,cl
c00204db:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00204df:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00204e2:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c00204ea:	31 c0                	xor    eax,eax
c00204ec:	5b                   	pop    ebx
c00204ed:	c3                   	ret    

c00204ee <KeRaiseSignal(SigHandlerBlock*, int)>:
c00204ee:	55                   	push   ebp
c00204ef:	57                   	push   edi
c00204f0:	bf 08 00 00 00       	mov    edi,0x8
c00204f5:	56                   	push   esi
c00204f6:	53                   	push   ebx
c00204f7:	83 ec 18             	sub    esp,0x18
c00204fa:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00204fe:	68 d6 24 03 c0       	push   0xc00324d6
c0020503:	e8 39 8c ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0020508:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c002050f:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0020515:	83 c4 10             	add    esp,0x10
c0020518:	31 c9                	xor    ecx,ecx
c002051a:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c002051e:	99                   	cdq    
c002051f:	f7 ff                	idiv   edi
c0020521:	8d 42 24             	lea    eax,[edx+0x24]
c0020524:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0020528:	85 f6                	test   esi,esi
c002052a:	75 1a                	jne    c0020546 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c002052c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0020530:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0020534:	50                   	push   eax
c0020535:	50                   	push   eax
c0020536:	52                   	push   edx
c0020537:	68 e7 24 03 c0       	push   0xc00324e7
c002053c:	e8 00 8c ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0020541:	83 c4 10             	add    esp,0x10
c0020544:	eb 1b                	jmp    c0020561 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0020546:	41                   	inc    ecx
c0020547:	83 f9 08             	cmp    ecx,0x8
c002054a:	75 ce                	jne    c002051a <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c002054c:	83 ec 0c             	sub    esp,0xc
c002054f:	be 01 00 00 00       	mov    esi,0x1
c0020554:	68 08 25 03 c0       	push   0xc0032508
c0020559:	e8 e3 8b ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c002055e:	83 c4 10             	add    esp,0x10
c0020561:	83 c4 0c             	add    esp,0xc
c0020564:	89 f0                	mov    eax,esi
c0020566:	5b                   	pop    ebx
c0020567:	5e                   	pop    esi
c0020568:	5f                   	pop    edi
c0020569:	5d                   	pop    ebp
c002056a:	c3                   	ret    

c002056b <KeCheckSignal(SigHandlerBlock*, int*)>:
c002056b:	55                   	push   ebp
c002056c:	57                   	push   edi
c002056d:	56                   	push   esi
c002056e:	53                   	push   ebx
c002056f:	51                   	push   ecx
c0020570:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020574:	85 db                	test   ebx,ebx
c0020576:	0f 84 bc 00 00 00    	je     c0020638 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c002057c:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0020583:	0f 84 af 00 00 00    	je     c0020638 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020589:	31 c9                	xor    ecx,ecx
c002058b:	bf 08 00 00 00       	mov    edi,0x8
c0020590:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0020596:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0020599:	99                   	cdq    
c002059a:	f7 ff                	idiv   edi
c002059c:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c00205a3:	85 ed                	test   ebp,ebp
c00205a5:	0f 84 9e 00 00 00    	je     c0020649 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c00205ab:	89 e9                	mov    ecx,ebp
c00205ad:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c00205b3:	bf 01 00 00 00       	mov    edi,0x1
c00205b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00205bb:	d3 e7                	shl    edi,cl
c00205bd:	31 c9                	xor    ecx,ecx
c00205bf:	b8 01 00 00 00       	mov    eax,0x1
c00205c4:	d3 e0                	shl    eax,cl
c00205c6:	85 04 24             	test   DWORD PTR [esp],eax
c00205c9:	74 06                	je     c00205d1 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c00205cb:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c00205cf:	75 67                	jne    c0020638 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00205d1:	41                   	inc    ecx
c00205d2:	83 f9 11             	cmp    ecx,0x11
c00205d5:	75 e8                	jne    c00205bf <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c00205d7:	46                   	inc    esi
c00205d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00205db:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00205e1:	09 f8                	or     eax,edi
c00205e3:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c00205ee:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c00205f4:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c00205fb:	31 c0                	xor    eax,eax
c00205fd:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0020605:	74 09                	je     c0020610 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0020607:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c002060e:	eb 06                	jmp    c0020616 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0020610:	40                   	inc    eax
c0020611:	83 f8 08             	cmp    eax,0x8
c0020614:	75 e7                	jne    c00205fd <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0020616:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0020619:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002061d:	83 fd 09             	cmp    ebp,0x9
c0020620:	89 2a                	mov    DWORD PTR [edx],ebp
c0020622:	75 07                	jne    c002062b <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0020624:	b8 f4 03 02 c0       	mov    eax,0xc00203f4
c0020629:	eb 31                	jmp    c002065c <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c002062b:	83 f8 01             	cmp    eax,0x1
c002062e:	75 0c                	jne    c002063c <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0020630:	f7 d7                	not    edi
c0020632:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0020638:	31 c0                	xor    eax,eax
c002063a:	eb 20                	jmp    c002065c <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c002063c:	85 c0                	test   eax,eax
c002063e:	75 1c                	jne    c002065c <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020640:	8b 04 ad 60 3d 03 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffcc2a0]
c0020647:	eb 13                	jmp    c002065c <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020649:	46                   	inc    esi
c002064a:	41                   	inc    ecx
c002064b:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0020651:	83 f9 08             	cmp    ecx,0x8
c0020654:	0f 85 36 ff ff ff    	jne    c0020590 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c002065a:	eb dc                	jmp    c0020638 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c002065c:	5a                   	pop    edx
c002065d:	5b                   	pop    ebx
c002065e:	5e                   	pop    esi
c002065f:	5f                   	pop    edi
c0020660:	5d                   	pop    ebp
c0020661:	c3                   	ret    

c0020662 <KiCheckSignalZ>:
c0020662:	83 ec 10             	sub    esp,0x10
c0020665:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020669:	50                   	push   eax
c002066a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002066f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020672:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0020678:	e8 ee fe ff ff       	call   c002056b <KeCheckSignal(SigHandlerBlock*, int*)>
c002067d:	5a                   	pop    edx
c002067e:	31 d2                	xor    edx,edx
c0020680:	59                   	pop    ecx
c0020681:	85 c0                	test   eax,eax
c0020683:	74 19                	je     c002069e <KiCheckSignalZ+0x3c>
c0020685:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c002068b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c002068e:	89 02                	mov    DWORD PTR [edx],eax
c0020690:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0020697:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002069b:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c002069e:	89 d0                	mov    eax,edx
c00206a0:	83 c4 10             	add    esp,0x10
c00206a3:	c3                   	ret    

c00206a4 <KeCompleteSignal(SigHandlerBlock*, int)>:
c00206a4:	56                   	push   esi
c00206a5:	53                   	push   ebx
c00206a6:	bb 01 00 00 00       	mov    ebx,0x1
c00206ab:	52                   	push   edx
c00206ac:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00206b0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00206b4:	d3 e3                	shl    ebx,cl
c00206b6:	83 f9 10             	cmp    ecx,0x10
c00206b9:	7f 08                	jg     c00206c3 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c00206bb:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c00206c1:	75 10                	jne    c00206d3 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c00206c3:	83 ec 0c             	sub    esp,0xc
c00206c6:	68 19 25 03 c0       	push   0xc0032519
c00206cb:	e8 7b f9 ff ff       	call   c002004b <KePanic(char const*)>
c00206d0:	83 c4 10             	add    esp,0x10
c00206d3:	f7 d3                	not    ebx
c00206d5:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c00206db:	58                   	pop    eax
c00206dc:	5b                   	pop    ebx
c00206dd:	5e                   	pop    esi
c00206de:	c3                   	ret    

c00206df <KiFinishSignalZ>:
c00206df:	53                   	push   ebx
c00206e0:	83 ec 10             	sub    esp,0x10
c00206e3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00206e7:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c00206ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00206ef:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00206f2:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00206f8:	e8 a7 ff ff ff       	call   c00206a4 <KeCompleteSignal(SigHandlerBlock*, int)>
c00206fd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0020703:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002070a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0020711:	83 c4 18             	add    esp,0x18
c0020714:	5b                   	pop    ebx
c0020715:	c3                   	ret    

c0020716 <SysSeekDir(regs*)>:
c0020716:	31 c0                	xor    eax,eax
c0020718:	31 d2                	xor    edx,edx
c002071a:	c3                   	ret    

c002071b <SysTellDir(regs*)>:
c002071b:	31 c0                	xor    eax,eax
c002071d:	31 d2                	xor    edx,edx
c002071f:	c3                   	ret    

c0020720 <SysVerify(regs*)>:
c0020720:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020724:	31 d2                	xor    edx,edx
c0020726:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020729:	c3                   	ret    

c002072a <SysGetArgc(regs*)>:
c002072a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002072f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020732:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0020738:	89 c2                	mov    edx,eax
c002073a:	c1 fa 1f             	sar    edx,0x1f
c002073d:	c3                   	ret    

c002073e <SysTTYName(regs*)>:
c002073e:	b8 01 00 00 00       	mov    eax,0x1
c0020743:	31 d2                	xor    edx,edx
c0020745:	c3                   	ret    

c0020746 <SysFormatDisk(regs*)>:
c0020746:	56                   	push   esi
c0020747:	53                   	push   ebx
c0020748:	83 ec 04             	sub    esp,0x4
c002074b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002074f:	8b 1d 04 cf 03 c0    	mov    ebx,DWORD PTR ds:0xc003cf04
c0020755:	eb 28                	jmp    c002077f <SysFormatDisk(regs*)+0x39>
c0020757:	83 ec 0c             	sub    esp,0xc
c002075a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c002075d:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0020760:	8b 13                	mov    edx,DWORD PTR [ebx]
c0020762:	51                   	push   ecx
c0020763:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0020766:	51                   	push   ecx
c0020767:	50                   	push   eax
c0020768:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c002076f:	50                   	push   eax
c0020770:	53                   	push   ebx
c0020771:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0020774:	83 c4 20             	add    esp,0x20
c0020777:	83 f8 08             	cmp    eax,0x8
c002077a:	75 14                	jne    c0020790 <SysFormatDisk(regs*)+0x4a>
c002077c:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c002077f:	85 db                	test   ebx,ebx
c0020781:	75 d4                	jne    c0020757 <SysFormatDisk(regs*)+0x11>
c0020783:	83 c4 04             	add    esp,0x4
c0020786:	b8 03 00 00 00       	mov    eax,0x3
c002078b:	31 d2                	xor    edx,edx
c002078d:	5b                   	pop    ebx
c002078e:	5e                   	pop    esi
c002078f:	c3                   	ret    
c0020790:	85 c0                	test   eax,eax
c0020792:	74 1f                	je     c00207b3 <SysFormatDisk(regs*)+0x6d>
c0020794:	83 f8 09             	cmp    eax,0x9
c0020797:	74 0d                	je     c00207a6 <SysFormatDisk(regs*)+0x60>
c0020799:	83 c4 04             	add    esp,0x4
c002079c:	b8 02 00 00 00       	mov    eax,0x2
c00207a1:	31 d2                	xor    edx,edx
c00207a3:	5b                   	pop    ebx
c00207a4:	5e                   	pop    esi
c00207a5:	c3                   	ret    
c00207a6:	83 c4 04             	add    esp,0x4
c00207a9:	b8 01 00 00 00       	mov    eax,0x1
c00207ae:	31 d2                	xor    edx,edx
c00207b0:	5b                   	pop    ebx
c00207b1:	5e                   	pop    esi
c00207b2:	c3                   	ret    
c00207b3:	83 c4 04             	add    esp,0x4
c00207b6:	31 c0                	xor    eax,eax
c00207b8:	31 d2                	xor    edx,edx
c00207ba:	5b                   	pop    ebx
c00207bb:	5e                   	pop    esi
c00207bc:	c3                   	ret    

c00207bd <SysSetDiskVolumeLabel(regs*)>:
c00207bd:	56                   	push   esi
c00207be:	53                   	push   ebx
c00207bf:	83 ec 04             	sub    esp,0x4
c00207c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00207c6:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00207c9:	83 f8 19             	cmp    eax,0x19
c00207cc:	77 33                	ja     c0020801 <SysSetDiskVolumeLabel(regs*)+0x44>
c00207ce:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c00207d5:	85 c9                	test   ecx,ecx
c00207d7:	74 28                	je     c0020801 <SysSetDiskVolumeLabel(regs*)+0x44>
c00207d9:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00207dc:	85 db                	test   ebx,ebx
c00207de:	74 21                	je     c0020801 <SysSetDiskVolumeLabel(regs*)+0x44>
c00207e0:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c00207e6:	85 d2                	test   edx,edx
c00207e8:	74 17                	je     c0020801 <SysSetDiskVolumeLabel(regs*)+0x44>
c00207ea:	8b 32                	mov    esi,DWORD PTR [edx]
c00207ec:	53                   	push   ebx
c00207ed:	50                   	push   eax
c00207ee:	51                   	push   ecx
c00207ef:	52                   	push   edx
c00207f0:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c00207f3:	83 c4 10             	add    esp,0x10
c00207f6:	89 c2                	mov    edx,eax
c00207f8:	83 c4 04             	add    esp,0x4
c00207fb:	c1 fa 1f             	sar    edx,0x1f
c00207fe:	5b                   	pop    ebx
c00207ff:	5e                   	pop    esi
c0020800:	c3                   	ret    
c0020801:	83 c4 04             	add    esp,0x4
c0020804:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0020809:	ba ff ff ff ff       	mov    edx,0xffffffff
c002080e:	5b                   	pop    ebx
c002080f:	5e                   	pop    esi
c0020810:	c3                   	ret    

c0020811 <SysGetDiskVolumeLabel(regs*)>:
c0020811:	57                   	push   edi
c0020812:	56                   	push   esi
c0020813:	53                   	push   ebx
c0020814:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020818:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c002081b:	83 fa 19             	cmp    edx,0x19
c002081e:	77 3c                	ja     c002085c <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020820:	8b 0c 95 80 f3 03 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffc0c80]
c0020827:	85 c9                	test   ecx,ecx
c0020829:	74 31                	je     c002085c <SysGetDiskVolumeLabel(regs*)+0x4b>
c002082b:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c002082e:	85 db                	test   ebx,ebx
c0020830:	74 2a                	je     c002085c <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020832:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0020835:	85 f6                	test   esi,esi
c0020837:	74 23                	je     c002085c <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020839:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c002083f:	85 c0                	test   eax,eax
c0020841:	74 19                	je     c002085c <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020843:	83 ec 0c             	sub    esp,0xc
c0020846:	8b 38                	mov    edi,DWORD PTR [eax]
c0020848:	56                   	push   esi
c0020849:	53                   	push   ebx
c002084a:	52                   	push   edx
c002084b:	51                   	push   ecx
c002084c:	50                   	push   eax
c002084d:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0020850:	83 c4 20             	add    esp,0x20
c0020853:	89 c2                	mov    edx,eax
c0020855:	5b                   	pop    ebx
c0020856:	c1 fa 1f             	sar    edx,0x1f
c0020859:	5e                   	pop    esi
c002085a:	5f                   	pop    edi
c002085b:	c3                   	ret    
c002085c:	5b                   	pop    ebx
c002085d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0020862:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020867:	5e                   	pop    esi
c0020868:	5f                   	pop    edi
c0020869:	c3                   	ret    

c002086a <SysShutdown(regs*)>:
c002086a:	83 ec 0c             	sub    esp,0xc
c002086d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020871:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020874:	85 c0                	test   eax,eax
c0020876:	74 18                	je     c0020890 <SysShutdown(regs*)+0x26>
c0020878:	83 f8 01             	cmp    eax,0x1
c002087b:	74 38                	je     c00208b5 <SysShutdown(regs*)+0x4b>
c002087d:	83 f8 02             	cmp    eax,0x2
c0020880:	74 24                	je     c00208a6 <SysShutdown(regs*)+0x3c>
c0020882:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0020887:	ba ff ff ff ff       	mov    edx,0xffffffff
c002088c:	83 c4 0c             	add    esp,0xc
c002088f:	c3                   	ret    
c0020890:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0020895:	8b 10                	mov    edx,DWORD PTR [eax]
c0020897:	6a 00                	push   0x0
c0020899:	6a 00                	push   0x0
c002089b:	6a 00                	push   0x0
c002089d:	50                   	push   eax
c002089e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00208a1:	83 c4 10             	add    esp,0x10
c00208a4:	eb dc                	jmp    c0020882 <SysShutdown(regs*)+0x18>
c00208a6:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00208ab:	8b 10                	mov    edx,DWORD PTR [eax]
c00208ad:	6a 00                	push   0x0
c00208af:	6a 00                	push   0x0
c00208b1:	6a 01                	push   0x1
c00208b3:	eb e8                	jmp    c002089d <SysShutdown(regs*)+0x33>
c00208b5:	a1 00 f4 03 c0       	mov    eax,ds:0xc003f400
c00208ba:	85 c0                	test   eax,eax
c00208bc:	74 02                	je     c00208c0 <SysShutdown(regs*)+0x56>
c00208be:	ff d0                	call   eax
c00208c0:	31 c0                	xor    eax,eax
c00208c2:	31 d2                	xor    edx,edx
c00208c4:	83 c4 0c             	add    esp,0xc
c00208c7:	c3                   	ret    

c00208c8 <SysRealpath(regs*)>:
c00208c8:	83 ec 0c             	sub    esp,0xc
c00208cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208cf:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00208d2:	85 d2                	test   edx,edx
c00208d4:	74 07                	je     c00208dd <SysRealpath(regs*)+0x15>
c00208d6:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00208d9:	85 c0                	test   eax,eax
c00208db:	75 0b                	jne    c00208e8 <SysRealpath(regs*)+0x20>
c00208dd:	b8 01 00 00 00       	mov    eax,0x1
c00208e2:	31 d2                	xor    edx,edx
c00208e4:	83 c4 0c             	add    esp,0xc
c00208e7:	c3                   	ret    
c00208e8:	6a 00                	push   0x0
c00208ea:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00208f0:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00208f3:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00208f9:	51                   	push   ecx
c00208fa:	52                   	push   edx
c00208fb:	50                   	push   eax
c00208fc:	e8 4f 97 ff ff       	call   c001a050 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0020901:	83 c4 10             	add    esp,0x10
c0020904:	31 c0                	xor    eax,eax
c0020906:	31 d2                	xor    edx,edx
c0020908:	83 c4 0c             	add    esp,0xc
c002090b:	c3                   	ret    

c002090c <SysReadDir(regs*)>:
c002090c:	53                   	push   ebx
c002090d:	83 ec 18             	sub    esp,0x18
c0020910:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0020914:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0020917:	83 f8 02             	cmp    eax,0x2
c002091a:	76 61                	jbe    c002097d <SysReadDir(regs*)+0x71>
c002091c:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0020923:	77 49                	ja     c002096e <SysReadDir(regs*)+0x62>
c0020925:	83 ec 0c             	sub    esp,0xc
c0020928:	50                   	push   eax
c0020929:	e8 81 73 ff ff       	call   c0017caf <KeGetFileFromDescriptor(int)>
c002092e:	83 c4 10             	add    esp,0x10
c0020931:	85 c0                	test   eax,eax
c0020933:	74 39                	je     c002096e <SysReadDir(regs*)+0x62>
c0020935:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002093d:	83 ec 0c             	sub    esp,0xc
c0020940:	8b 10                	mov    edx,DWORD PTR [eax]
c0020942:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0020946:	51                   	push   ecx
c0020947:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c002094a:	51                   	push   ecx
c002094b:	6a 00                	push   0x0
c002094d:	68 10 01 00 00       	push   0x110
c0020952:	50                   	push   eax
c0020953:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0020956:	83 c4 20             	add    esp,0x20
c0020959:	85 c0                	test   eax,eax
c002095b:	74 29                	je     c0020986 <SysReadDir(regs*)+0x7a>
c002095d:	83 f8 07             	cmp    eax,0x7
c0020960:	74 1b                	je     c002097d <SysReadDir(regs*)+0x71>
c0020962:	b8 02 00 00 00       	mov    eax,0x2
c0020967:	31 d2                	xor    edx,edx
c0020969:	83 c4 18             	add    esp,0x18
c002096c:	5b                   	pop    ebx
c002096d:	c3                   	ret    
c002096e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0020973:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020978:	83 c4 18             	add    esp,0x18
c002097b:	5b                   	pop    ebx
c002097c:	c3                   	ret    
c002097d:	b8 01 00 00 00       	mov    eax,0x1
c0020982:	31 d2                	xor    edx,edx
c0020984:	eb e3                	jmp    c0020969 <SysReadDir(regs*)+0x5d>
c0020986:	31 c0                	xor    eax,eax
c0020988:	31 d2                	xor    edx,edx
c002098a:	eb dd                	jmp    c0020969 <SysReadDir(regs*)+0x5d>

c002098c <SysIsATTY(regs*)>:
c002098c:	83 ec 0c             	sub    esp,0xc
c002098f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020993:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020996:	83 f8 02             	cmp    eax,0x2
c0020999:	76 07                	jbe    c00209a2 <SysIsATTY(regs*)+0x16>
c002099b:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00209a0:	75 26                	jne    c00209c8 <SysIsATTY(regs*)+0x3c>
c00209a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00209a7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00209aa:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00209b0:	85 c0                	test   eax,eax
c00209b2:	74 24                	je     c00209d8 <SysIsATTY(regs*)+0x4c>
c00209b4:	83 ec 0c             	sub    esp,0xc
c00209b7:	8b 10                	mov    edx,DWORD PTR [eax]
c00209b9:	50                   	push   eax
c00209ba:	ff 12                	call   DWORD PTR [edx]
c00209bc:	31 d2                	xor    edx,edx
c00209be:	0f b6 c0             	movzx  eax,al
c00209c1:	83 c4 10             	add    esp,0x10
c00209c4:	83 c4 0c             	add    esp,0xc
c00209c7:	c3                   	ret    
c00209c8:	83 ec 0c             	sub    esp,0xc
c00209cb:	50                   	push   eax
c00209cc:	e8 de 72 ff ff       	call   c0017caf <KeGetFileFromDescriptor(int)>
c00209d1:	83 c4 10             	add    esp,0x10
c00209d4:	85 c0                	test   eax,eax
c00209d6:	75 dc                	jne    c00209b4 <SysIsATTY(regs*)+0x28>
c00209d8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00209dd:	ba ff ff ff ff       	mov    edx,0xffffffff
c00209e2:	83 c4 0c             	add    esp,0xc
c00209e5:	c3                   	ret    

c00209e6 <SysSeek(regs*)>:
c00209e6:	53                   	push   ebx
c00209e7:	83 ec 08             	sub    esp,0x8
c00209ea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00209ee:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00209f1:	8d 50 fd             	lea    edx,[eax-0x3]
c00209f4:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00209fa:	77 32                	ja     c0020a2e <SysSeek(regs*)+0x48>
c00209fc:	83 ec 0c             	sub    esp,0xc
c00209ff:	50                   	push   eax
c0020a00:	e8 aa 72 ff ff       	call   c0017caf <KeGetFileFromDescriptor(int)>
c0020a05:	83 c4 0c             	add    esp,0xc
c0020a08:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0020a0b:	31 db                	xor    ebx,ebx
c0020a0d:	53                   	push   ebx
c0020a0e:	51                   	push   ecx
c0020a0f:	50                   	push   eax
c0020a10:	e8 0f 9a ff ff       	call   c001a424 <File::seek(unsigned long long)>
c0020a15:	83 c4 10             	add    esp,0x10
c0020a18:	85 c0                	test   eax,eax
c0020a1a:	0f 95 c0             	setne  al
c0020a1d:	31 d2                	xor    edx,edx
c0020a1f:	0f b6 c0             	movzx  eax,al
c0020a22:	f7 d8                	neg    eax
c0020a24:	83 d2 00             	adc    edx,0x0
c0020a27:	83 c4 08             	add    esp,0x8
c0020a2a:	f7 da                	neg    edx
c0020a2c:	5b                   	pop    ebx
c0020a2d:	c3                   	ret    
c0020a2e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0020a33:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020a38:	83 c4 08             	add    esp,0x8
c0020a3b:	5b                   	pop    ebx
c0020a3c:	c3                   	ret    

c0020a3d <SysTell(regs*)>:
c0020a3d:	53                   	push   ebx
c0020a3e:	83 ec 08             	sub    esp,0x8
c0020a41:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020a45:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0020a48:	83 f8 02             	cmp    eax,0x2
c0020a4b:	76 4e                	jbe    c0020a9b <SysTell(regs*)+0x5e>
c0020a4d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0020a52:	76 19                	jbe    c0020a6d <SysTell(regs*)+0x30>
c0020a54:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0020a57:	31 d2                	xor    edx,edx
c0020a59:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020a5f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020a66:	31 c0                	xor    eax,eax
c0020a68:	83 c4 08             	add    esp,0x8
c0020a6b:	5b                   	pop    ebx
c0020a6c:	c3                   	ret    
c0020a6d:	83 ec 0c             	sub    esp,0xc
c0020a70:	50                   	push   eax
c0020a71:	e8 39 72 ff ff       	call   c0017caf <KeGetFileFromDescriptor(int)>
c0020a76:	5a                   	pop    edx
c0020a77:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0020a7a:	59                   	pop    ecx
c0020a7b:	53                   	push   ebx
c0020a7c:	50                   	push   eax
c0020a7d:	e8 4e 9a ff ff       	call   c001a4d0 <File::tell(unsigned long long*)>
c0020a82:	83 c4 10             	add    esp,0x10
c0020a85:	85 c0                	test   eax,eax
c0020a87:	0f 95 c0             	setne  al
c0020a8a:	31 d2                	xor    edx,edx
c0020a8c:	0f b6 c0             	movzx  eax,al
c0020a8f:	f7 d8                	neg    eax
c0020a91:	83 d2 00             	adc    edx,0x0
c0020a94:	83 c4 08             	add    esp,0x8
c0020a97:	f7 da                	neg    edx
c0020a99:	5b                   	pop    ebx
c0020a9a:	c3                   	ret    
c0020a9b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0020aa0:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020aa5:	83 c4 08             	add    esp,0x8
c0020aa8:	5b                   	pop    ebx
c0020aa9:	c3                   	ret    

c0020aaa <SysSize(regs*)>:
c0020aaa:	53                   	push   ebx
c0020aab:	83 ec 18             	sub    esp,0x18
c0020aae:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0020ab2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0020ab5:	83 f8 02             	cmp    eax,0x2
c0020ab8:	76 54                	jbe    c0020b0e <SysSize(regs*)+0x64>
c0020aba:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0020abf:	76 19                	jbe    c0020ada <SysSize(regs*)+0x30>
c0020ac1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0020ac4:	31 d2                	xor    edx,edx
c0020ac6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020acc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020ad3:	31 c0                	xor    eax,eax
c0020ad5:	83 c4 18             	add    esp,0x18
c0020ad8:	5b                   	pop    ebx
c0020ad9:	c3                   	ret    
c0020ada:	83 ec 0c             	sub    esp,0xc
c0020add:	50                   	push   eax
c0020ade:	e8 cc 71 ff ff       	call   c0017caf <KeGetFileFromDescriptor(int)>
c0020ae3:	83 c4 0c             	add    esp,0xc
c0020ae6:	8d 54 24 13          	lea    edx,[esp+0x13]
c0020aea:	52                   	push   edx
c0020aeb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0020aee:	52                   	push   edx
c0020aef:	50                   	push   eax
c0020af0:	e8 73 9b ff ff       	call   c001a668 <File::stat(unsigned long long*, bool*)>
c0020af5:	83 c4 10             	add    esp,0x10
c0020af8:	85 c0                	test   eax,eax
c0020afa:	0f 95 c0             	setne  al
c0020afd:	31 d2                	xor    edx,edx
c0020aff:	0f b6 c0             	movzx  eax,al
c0020b02:	f7 d8                	neg    eax
c0020b04:	83 d2 00             	adc    edx,0x0
c0020b07:	83 c4 18             	add    esp,0x18
c0020b0a:	f7 da                	neg    edx
c0020b0c:	5b                   	pop    ebx
c0020b0d:	c3                   	ret    
c0020b0e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0020b13:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020b18:	83 c4 18             	add    esp,0x18
c0020b1b:	5b                   	pop    ebx
c0020b1c:	c3                   	ret    

c0020b1d <SysSizeFromFilename(regs*)>:
c0020b1d:	55                   	push   ebp
c0020b1e:	57                   	push   edi
c0020b1f:	56                   	push   esi
c0020b20:	53                   	push   ebx
c0020b21:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0020b27:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0020b2e:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0020b31:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0020b34:	85 f6                	test   esi,esi
c0020b36:	74 34                	je     c0020b6c <SysSizeFromFilename(regs*)+0x4f>
c0020b38:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0020b3e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0020b41:	83 f8 02             	cmp    eax,0x2
c0020b44:	76 2d                	jbe    c0020b73 <SysSizeFromFilename(regs*)+0x56>
c0020b46:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0020b4b:	76 3b                	jbe    c0020b88 <SysSizeFromFilename(regs*)+0x6b>
c0020b4d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0020b50:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020b56:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020b5d:	81 c4 5c 02 00 00    	add    esp,0x25c
c0020b63:	31 c0                	xor    eax,eax
c0020b65:	5b                   	pop    ebx
c0020b66:	31 d2                	xor    edx,edx
c0020b68:	5e                   	pop    esi
c0020b69:	5f                   	pop    edi
c0020b6a:	5d                   	pop    ebp
c0020b6b:	c3                   	ret    
c0020b6c:	89 f8                	mov    eax,edi
c0020b6e:	83 f8 02             	cmp    eax,0x2
c0020b71:	77 d3                	ja     c0020b46 <SysSizeFromFilename(regs*)+0x29>
c0020b73:	81 c4 5c 02 00 00    	add    esp,0x25c
c0020b79:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0020b7e:	5b                   	pop    ebx
c0020b7f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020b84:	5e                   	pop    esi
c0020b85:	5f                   	pop    edi
c0020b86:	5d                   	pop    ebp
c0020b87:	c3                   	ret    
c0020b88:	83 ec 0c             	sub    esp,0xc
c0020b8b:	68 14 01 00 00       	push   0x114
c0020b90:	e8 1d 57 ff ff       	call   c00162b2 <malloc>
c0020b95:	6a 01                	push   0x1
c0020b97:	89 c5                	mov    ebp,eax
c0020b99:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020b9e:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0020ba1:	51                   	push   ecx
c0020ba2:	57                   	push   edi
c0020ba3:	55                   	push   ebp
c0020ba4:	e8 c1 96 ff ff       	call   c001a26a <File::File(char const*, Process*, bool)>
c0020ba9:	83 c4 1c             	add    esp,0x1c
c0020bac:	8d 44 24 23          	lea    eax,[esp+0x23]
c0020bb0:	50                   	push   eax
c0020bb1:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0020bb4:	53                   	push   ebx
c0020bb5:	55                   	push   ebp
c0020bb6:	e8 ad 9a ff ff       	call   c001a668 <File::stat(unsigned long long*, bool*)>
c0020bbb:	83 c4 10             	add    esp,0x10
c0020bbe:	85 ed                	test   ebp,ebp
c0020bc0:	74 15                	je     c0020bd7 <SysSizeFromFilename(regs*)+0xba>
c0020bc2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020bc6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0020bc9:	83 ec 0c             	sub    esp,0xc
c0020bcc:	55                   	push   ebp
c0020bcd:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0020bd0:	83 c4 10             	add    esp,0x10
c0020bd3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020bd7:	85 c0                	test   eax,eax
c0020bd9:	75 98                	jne    c0020b73 <SysSizeFromFilename(regs*)+0x56>
c0020bdb:	6a 00                	push   0x0
c0020bdd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020be2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020be5:	05 0c 01 00 00       	add    eax,0x10c
c0020bea:	50                   	push   eax
c0020beb:	57                   	push   edi
c0020bec:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c0020bf3:	53                   	push   ebx
c0020bf4:	e8 57 94 ff ff       	call   c001a050 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0020bf9:	58                   	pop    eax
c0020bfa:	5a                   	pop    edx
c0020bfb:	8d 44 24 28          	lea    eax,[esp+0x28]
c0020bff:	50                   	push   eax
c0020c00:	53                   	push   ebx
c0020c01:	e8 b2 8e ff ff       	call   c0019ab8 <KeDereferenceSymlink(char const*, char*)>
c0020c06:	83 c4 10             	add    esp,0x10
c0020c09:	83 f8 01             	cmp    eax,0x1
c0020c0c:	74 1a                	je     c0020c28 <SysSizeFromFilename(regs*)+0x10b>
c0020c0e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0020c13:	74 26                	je     c0020c3b <SysSizeFromFilename(regs*)+0x11e>
c0020c15:	85 f6                	test   esi,esi
c0020c17:	0f 84 40 ff ff ff    	je     c0020b5d <SysSizeFromFilename(regs*)+0x40>
c0020c1d:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0020c23:	e9 35 ff ff ff       	jmp    c0020b5d <SysSizeFromFilename(regs*)+0x40>
c0020c28:	85 f6                	test   esi,esi
c0020c2a:	0f 84 2d ff ff ff    	je     c0020b5d <SysSizeFromFilename(regs*)+0x40>
c0020c30:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0020c36:	e9 22 ff ff ff       	jmp    c0020b5d <SysSizeFromFilename(regs*)+0x40>
c0020c3b:	85 f6                	test   esi,esi
c0020c3d:	0f 84 1a ff ff ff    	je     c0020b5d <SysSizeFromFilename(regs*)+0x40>
c0020c43:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0020c49:	e9 0f ff ff ff       	jmp    c0020b5d <SysSizeFromFilename(regs*)+0x40>

c0020c4e <SysSizeFromFilenameNoSymlink(regs*)>:
c0020c4e:	55                   	push   ebp
c0020c4f:	57                   	push   edi
c0020c50:	56                   	push   esi
c0020c51:	53                   	push   ebx
c0020c52:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0020c58:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0020c5f:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0020c62:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0020c65:	85 f6                	test   esi,esi
c0020c67:	74 34                	je     c0020c9d <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c0020c69:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0020c6f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0020c72:	83 f8 02             	cmp    eax,0x2
c0020c75:	76 2d                	jbe    c0020ca4 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0020c77:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0020c7c:	76 3b                	jbe    c0020cb9 <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c0020c7e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0020c81:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020c87:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020c8e:	81 c4 5c 02 00 00    	add    esp,0x25c
c0020c94:	31 c0                	xor    eax,eax
c0020c96:	5b                   	pop    ebx
c0020c97:	31 d2                	xor    edx,edx
c0020c99:	5e                   	pop    esi
c0020c9a:	5f                   	pop    edi
c0020c9b:	5d                   	pop    ebp
c0020c9c:	c3                   	ret    
c0020c9d:	89 f8                	mov    eax,edi
c0020c9f:	83 f8 02             	cmp    eax,0x2
c0020ca2:	77 d3                	ja     c0020c77 <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c0020ca4:	81 c4 5c 02 00 00    	add    esp,0x25c
c0020caa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0020caf:	5b                   	pop    ebx
c0020cb0:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020cb5:	5e                   	pop    esi
c0020cb6:	5f                   	pop    edi
c0020cb7:	5d                   	pop    ebp
c0020cb8:	c3                   	ret    
c0020cb9:	83 ec 0c             	sub    esp,0xc
c0020cbc:	68 14 01 00 00       	push   0x114
c0020cc1:	e8 ec 55 ff ff       	call   c00162b2 <malloc>
c0020cc6:	6a 00                	push   0x0
c0020cc8:	89 c5                	mov    ebp,eax
c0020cca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020ccf:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0020cd2:	51                   	push   ecx
c0020cd3:	57                   	push   edi
c0020cd4:	55                   	push   ebp
c0020cd5:	e8 90 95 ff ff       	call   c001a26a <File::File(char const*, Process*, bool)>
c0020cda:	83 c4 1c             	add    esp,0x1c
c0020cdd:	8d 44 24 23          	lea    eax,[esp+0x23]
c0020ce1:	50                   	push   eax
c0020ce2:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0020ce5:	53                   	push   ebx
c0020ce6:	55                   	push   ebp
c0020ce7:	e8 7c 99 ff ff       	call   c001a668 <File::stat(unsigned long long*, bool*)>
c0020cec:	83 c4 10             	add    esp,0x10
c0020cef:	85 ed                	test   ebp,ebp
c0020cf1:	74 15                	je     c0020d08 <SysSizeFromFilenameNoSymlink(regs*)+0xba>
c0020cf3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020cf7:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0020cfa:	83 ec 0c             	sub    esp,0xc
c0020cfd:	55                   	push   ebp
c0020cfe:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0020d01:	83 c4 10             	add    esp,0x10
c0020d04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d08:	85 c0                	test   eax,eax
c0020d0a:	75 98                	jne    c0020ca4 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0020d0c:	6a 00                	push   0x0
c0020d0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020d13:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020d16:	05 0c 01 00 00       	add    eax,0x10c
c0020d1b:	50                   	push   eax
c0020d1c:	57                   	push   edi
c0020d1d:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c0020d24:	53                   	push   ebx
c0020d25:	e8 26 93 ff ff       	call   c001a050 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0020d2a:	58                   	pop    eax
c0020d2b:	5a                   	pop    edx
c0020d2c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0020d30:	50                   	push   eax
c0020d31:	53                   	push   ebx
c0020d32:	e8 81 8d ff ff       	call   c0019ab8 <KeDereferenceSymlink(char const*, char*)>
c0020d37:	83 c4 10             	add    esp,0x10
c0020d3a:	83 f8 01             	cmp    eax,0x1
c0020d3d:	74 1a                	je     c0020d59 <SysSizeFromFilenameNoSymlink(regs*)+0x10b>
c0020d3f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0020d44:	74 26                	je     c0020d6c <SysSizeFromFilenameNoSymlink(regs*)+0x11e>
c0020d46:	85 f6                	test   esi,esi
c0020d48:	0f 84 40 ff ff ff    	je     c0020c8e <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0020d4e:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0020d54:	e9 35 ff ff ff       	jmp    c0020c8e <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0020d59:	85 f6                	test   esi,esi
c0020d5b:	0f 84 2d ff ff ff    	je     c0020c8e <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0020d61:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0020d67:	e9 22 ff ff ff       	jmp    c0020c8e <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0020d6c:	85 f6                	test   esi,esi
c0020d6e:	0f 84 1a ff ff ff    	je     c0020c8e <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0020d74:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0020d7a:	e9 0f ff ff ff       	jmp    c0020c8e <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c0020d7f <SysClose(regs*)>:
c0020d7f:	53                   	push   ebx
c0020d80:	83 ec 08             	sub    esp,0x8
c0020d83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d87:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020d8a:	83 f8 02             	cmp    eax,0x2
c0020d8d:	76 41                	jbe    c0020dd0 <SysClose(regs*)+0x51>
c0020d8f:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0020d95:	83 fa 01             	cmp    edx,0x1
c0020d98:	76 2d                	jbe    c0020dc7 <SysClose(regs*)+0x48>
c0020d9a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0020d9f:	77 2f                	ja     c0020dd0 <SysClose(regs*)+0x51>
c0020da1:	83 ec 0c             	sub    esp,0xc
c0020da4:	50                   	push   eax
c0020da5:	e8 05 6f ff ff       	call   c0017caf <KeGetFileFromDescriptor(int)>
c0020daa:	89 c3                	mov    ebx,eax
c0020dac:	89 04 24             	mov    DWORD PTR [esp],eax
c0020daf:	e8 10 96 ff ff       	call   c001a3c4 <File::close()>
c0020db4:	83 c4 10             	add    esp,0x10
c0020db7:	85 db                	test   ebx,ebx
c0020db9:	74 0c                	je     c0020dc7 <SysClose(regs*)+0x48>
c0020dbb:	83 ec 0c             	sub    esp,0xc
c0020dbe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020dc0:	53                   	push   ebx
c0020dc1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0020dc4:	83 c4 10             	add    esp,0x10
c0020dc7:	31 c0                	xor    eax,eax
c0020dc9:	31 d2                	xor    edx,edx
c0020dcb:	83 c4 08             	add    esp,0x8
c0020dce:	5b                   	pop    ebx
c0020dcf:	c3                   	ret    
c0020dd0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0020dd5:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020dda:	83 c4 08             	add    esp,0x8
c0020ddd:	5b                   	pop    ebx
c0020dde:	c3                   	ret    

c0020ddf <SysOpenDir(regs*)>:
c0020ddf:	56                   	push   esi
c0020de0:	53                   	push   ebx
c0020de1:	83 ec 04             	sub    esp,0x4
c0020de4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020de8:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0020deb:	85 c9                	test   ecx,ecx
c0020ded:	74 5d                	je     c0020e4c <SysOpenDir(regs*)+0x6d>
c0020def:	83 ec 0c             	sub    esp,0xc
c0020df2:	68 14 01 00 00       	push   0x114
c0020df7:	e8 b6 54 ff ff       	call   c00162b2 <malloc>
c0020dfc:	83 c4 0c             	add    esp,0xc
c0020dff:	89 c6                	mov    esi,eax
c0020e01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020e06:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020e09:	50                   	push   eax
c0020e0a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0020e0d:	52                   	push   edx
c0020e0e:	56                   	push   esi
c0020e0f:	e8 14 9a ff ff       	call   c001a828 <Directory::Directory(char const*, Process*)>
c0020e14:	83 c4 10             	add    esp,0x10
c0020e17:	85 f6                	test   esi,esi
c0020e19:	74 31                	je     c0020e4c <SysOpenDir(regs*)+0x6d>
c0020e1b:	83 ec 0c             	sub    esp,0xc
c0020e1e:	56                   	push   esi
c0020e1f:	e8 cc 9a ff ff       	call   c001a8f0 <Directory::open()>
c0020e24:	83 c4 10             	add    esp,0x10
c0020e27:	85 c0                	test   eax,eax
c0020e29:	75 21                	jne    c0020e4c <SysOpenDir(regs*)+0x6d>
c0020e2b:	83 ec 0c             	sub    esp,0xc
c0020e2e:	56                   	push   esi
c0020e2f:	e8 7e 6b ff ff       	call   c00179b2 <UnixFile::getFileDescriptor()>
c0020e34:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0020e37:	83 c4 10             	add    esp,0x10
c0020e3a:	89 02                	mov    DWORD PTR [edx],eax
c0020e3c:	c1 f8 1f             	sar    eax,0x1f
c0020e3f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0020e42:	83 c4 04             	add    esp,0x4
c0020e45:	31 c0                	xor    eax,eax
c0020e47:	31 d2                	xor    edx,edx
c0020e49:	5b                   	pop    ebx
c0020e4a:	5e                   	pop    esi
c0020e4b:	c3                   	ret    
c0020e4c:	83 c4 04             	add    esp,0x4
c0020e4f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0020e54:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020e59:	5b                   	pop    ebx
c0020e5a:	5e                   	pop    esi
c0020e5b:	c3                   	ret    

c0020e5c <SysMakeDir(regs*)>:
c0020e5c:	56                   	push   esi
c0020e5d:	53                   	push   ebx
c0020e5e:	83 ec 10             	sub    esp,0x10
c0020e61:	68 14 01 00 00       	push   0x114
c0020e66:	e8 47 54 ff ff       	call   c00162b2 <malloc>
c0020e6b:	83 c4 0c             	add    esp,0xc
c0020e6e:	89 c3                	mov    ebx,eax
c0020e70:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020e75:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020e78:	50                   	push   eax
c0020e79:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020e7d:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0020e80:	52                   	push   edx
c0020e81:	53                   	push   ebx
c0020e82:	e8 a1 99 ff ff       	call   c001a828 <Directory::Directory(char const*, Process*)>
c0020e87:	83 c4 10             	add    esp,0x10
c0020e8a:	85 db                	test   ebx,ebx
c0020e8c:	74 2c                	je     c0020eba <SysMakeDir(regs*)+0x5e>
c0020e8e:	83 ec 0c             	sub    esp,0xc
c0020e91:	53                   	push   ebx
c0020e92:	e8 39 9c ff ff       	call   c001aad0 <Directory::create()>
c0020e97:	89 c6                	mov    esi,eax
c0020e99:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020e9b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020e9e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0020ea1:	83 c4 10             	add    esp,0x10
c0020ea4:	31 c0                	xor    eax,eax
c0020ea6:	85 f6                	test   esi,esi
c0020ea8:	0f 95 c0             	setne  al
c0020eab:	31 d2                	xor    edx,edx
c0020ead:	f7 d8                	neg    eax
c0020eaf:	83 d2 00             	adc    edx,0x0
c0020eb2:	83 c4 04             	add    esp,0x4
c0020eb5:	f7 da                	neg    edx
c0020eb7:	5b                   	pop    ebx
c0020eb8:	5e                   	pop    esi
c0020eb9:	c3                   	ret    
c0020eba:	83 c4 04             	add    esp,0x4
c0020ebd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0020ec2:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020ec7:	5b                   	pop    ebx
c0020ec8:	5e                   	pop    esi
c0020ec9:	c3                   	ret    

c0020eca <SysCloseDir(regs*)>:
c0020eca:	53                   	push   ebx
c0020ecb:	83 ec 08             	sub    esp,0x8
c0020ece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ed2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020ed5:	8d 50 fd             	lea    edx,[eax-0x3]
c0020ed8:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0020ede:	77 2f                	ja     c0020f0f <SysCloseDir(regs*)+0x45>
c0020ee0:	83 ec 0c             	sub    esp,0xc
c0020ee3:	50                   	push   eax
c0020ee4:	e8 c6 6d ff ff       	call   c0017caf <KeGetFileFromDescriptor(int)>
c0020ee9:	89 c3                	mov    ebx,eax
c0020eeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0020eee:	e8 59 9a ff ff       	call   c001a94c <Directory::close()>
c0020ef3:	83 c4 10             	add    esp,0x10
c0020ef6:	85 db                	test   ebx,ebx
c0020ef8:	74 0c                	je     c0020f06 <SysCloseDir(regs*)+0x3c>
c0020efa:	83 ec 0c             	sub    esp,0xc
c0020efd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020eff:	53                   	push   ebx
c0020f00:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0020f03:	83 c4 10             	add    esp,0x10
c0020f06:	31 c0                	xor    eax,eax
c0020f08:	31 d2                	xor    edx,edx
c0020f0a:	83 c4 08             	add    esp,0x8
c0020f0d:	5b                   	pop    ebx
c0020f0e:	c3                   	ret    
c0020f0f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0020f14:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020f19:	83 c4 08             	add    esp,0x8
c0020f1c:	5b                   	pop    ebx
c0020f1d:	c3                   	ret    

c0020f1e <SysWait(regs*)>:
c0020f1e:	83 ec 10             	sub    esp,0x10
c0020f21:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f25:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0020f28:	52                   	push   edx
c0020f29:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0020f2c:	51                   	push   ecx
c0020f2d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020f30:	50                   	push   eax
c0020f31:	e8 ae 3e 00 00       	call   c0024de4 <waitTask(int, int*, int)>
c0020f36:	83 c4 1c             	add    esp,0x1c
c0020f39:	89 c2                	mov    edx,eax
c0020f3b:	c1 fa 1f             	sar    edx,0x1f
c0020f3e:	c3                   	ret    

c0020f3f <SysNotImpl(regs*)>:
c0020f3f:	83 ec 18             	sub    esp,0x18
c0020f42:	68 2a 25 03 c0       	push   0xc003252a
c0020f47:	e8 ff f0 ff ff       	call   c002004b <KePanic(char const*)>
c0020f4c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0020f51:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020f56:	83 c4 1c             	add    esp,0x1c
c0020f59:	c3                   	ret    

c0020f5a <SysPanic(regs*)>:
c0020f5a:	83 ec 18             	sub    esp,0x18
c0020f5d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020f61:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0020f64:	50                   	push   eax
c0020f65:	e8 e1 f0 ff ff       	call   c002004b <KePanic(char const*)>
c0020f6a:	b8 01 00 00 00       	mov    eax,0x1
c0020f6f:	31 d2                	xor    edx,edx
c0020f71:	83 c4 1c             	add    esp,0x1c
c0020f74:	c3                   	ret    

c0020f75 <SysRmdir(regs*)>:
c0020f75:	56                   	push   esi
c0020f76:	53                   	push   ebx
c0020f77:	83 ec 20             	sub    esp,0x20
c0020f7a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020f7e:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0020f81:	68 14 01 00 00       	push   0x114
c0020f86:	e8 27 53 ff ff       	call   c00162b2 <malloc>
c0020f8b:	6a 00                	push   0x0
c0020f8d:	89 c3                	mov    ebx,eax
c0020f8f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020f94:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020f97:	50                   	push   eax
c0020f98:	56                   	push   esi
c0020f99:	53                   	push   ebx
c0020f9a:	e8 cb 92 ff ff       	call   c001a26a <File::File(char const*, Process*, bool)>
c0020f9f:	83 c4 14             	add    esp,0x14
c0020fa2:	53                   	push   ebx
c0020fa3:	e8 8c 95 ff ff       	call   c001a534 <File::unlink()>
c0020fa8:	83 c4 10             	add    esp,0x10
c0020fab:	85 db                	test   ebx,ebx
c0020fad:	74 14                	je     c0020fc3 <SysRmdir(regs*)+0x4e>
c0020faf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020fb3:	8b 13                	mov    edx,DWORD PTR [ebx]
c0020fb5:	83 ec 0c             	sub    esp,0xc
c0020fb8:	53                   	push   ebx
c0020fb9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0020fbc:	83 c4 10             	add    esp,0x10
c0020fbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020fc3:	85 c0                	test   eax,eax
c0020fc5:	0f 95 c0             	setne  al
c0020fc8:	31 d2                	xor    edx,edx
c0020fca:	0f b6 c0             	movzx  eax,al
c0020fcd:	f7 d8                	neg    eax
c0020fcf:	83 d2 00             	adc    edx,0x0
c0020fd2:	83 c4 14             	add    esp,0x14
c0020fd5:	f7 da                	neg    edx
c0020fd7:	5b                   	pop    ebx
c0020fd8:	5e                   	pop    esi
c0020fd9:	c3                   	ret    

c0020fda <SysUnlink(regs*)>:
c0020fda:	56                   	push   esi
c0020fdb:	53                   	push   ebx
c0020fdc:	83 ec 20             	sub    esp,0x20
c0020fdf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020fe3:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0020fe6:	68 14 01 00 00       	push   0x114
c0020feb:	e8 c2 52 ff ff       	call   c00162b2 <malloc>
c0020ff0:	6a 00                	push   0x0
c0020ff2:	89 c3                	mov    ebx,eax
c0020ff4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020ff9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020ffc:	50                   	push   eax
c0020ffd:	56                   	push   esi
c0020ffe:	53                   	push   ebx
c0020fff:	e8 66 92 ff ff       	call   c001a26a <File::File(char const*, Process*, bool)>
c0021004:	83 c4 14             	add    esp,0x14
c0021007:	53                   	push   ebx
c0021008:	e8 27 95 ff ff       	call   c001a534 <File::unlink()>
c002100d:	83 c4 10             	add    esp,0x10
c0021010:	85 db                	test   ebx,ebx
c0021012:	74 14                	je     c0021028 <SysUnlink(regs*)+0x4e>
c0021014:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021018:	8b 13                	mov    edx,DWORD PTR [ebx]
c002101a:	83 ec 0c             	sub    esp,0xc
c002101d:	53                   	push   ebx
c002101e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0021021:	83 c4 10             	add    esp,0x10
c0021024:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021028:	85 c0                	test   eax,eax
c002102a:	0f 95 c0             	setne  al
c002102d:	31 d2                	xor    edx,edx
c002102f:	0f b6 c0             	movzx  eax,al
c0021032:	f7 d8                	neg    eax
c0021034:	83 d2 00             	adc    edx,0x0
c0021037:	83 c4 14             	add    esp,0x14
c002103a:	f7 da                	neg    edx
c002103c:	5b                   	pop    ebx
c002103d:	5e                   	pop    esi
c002103e:	c3                   	ret    

c002103f <SysGetArgv(regs*)>:
c002103f:	83 ec 0c             	sub    esp,0xc
c0021042:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021046:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0021049:	85 c0                	test   eax,eax
c002104b:	78 2c                	js     c0021079 <SysGetArgv(regs*)+0x3a>
c002104d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0021053:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0021056:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c002105c:	7d 1b                	jge    c0021079 <SysGetArgv(regs*)+0x3a>
c002105e:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0021065:	85 c0                	test   eax,eax
c0021067:	74 18                	je     c0021081 <SysGetArgv(regs*)+0x42>
c0021069:	83 ec 08             	sub    esp,0x8
c002106c:	50                   	push   eax
c002106d:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0021070:	50                   	push   eax
c0021071:	e8 ca f5 fd ff       	call   c0000640 <strcpy>
c0021076:	83 c4 10             	add    esp,0x10
c0021079:	31 c0                	xor    eax,eax
c002107b:	31 d2                	xor    edx,edx
c002107d:	83 c4 0c             	add    esp,0xc
c0021080:	c3                   	ret    
c0021081:	b8 01 00 00 00       	mov    eax,0x1
c0021086:	31 d2                	xor    edx,edx
c0021088:	83 c4 0c             	add    esp,0xc
c002108b:	c3                   	ret    

c002108c <SysUSleep(regs*)>:
c002108c:	83 ec 1c             	sub    esp,0x1c
c002108f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0021093:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0021096:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0021099:	6a 00                	push   0x0
c002109b:	6a 64                	push   0x64
c002109d:	52                   	push   edx
c002109e:	50                   	push   eax
c002109f:	e8 9c d1 00 00       	call   c002e240 <__udivdi3>
c00210a4:	83 c4 14             	add    esp,0x14
c00210a7:	50                   	push   eax
c00210a8:	e8 1b 3e 00 00       	call   c0024ec8 <milliTenthSleep(unsigned int)>
c00210ad:	31 c0                	xor    eax,eax
c00210af:	31 d2                	xor    edx,edx
c00210b1:	83 c4 1c             	add    esp,0x1c
c00210b4:	c3                   	ret    

c00210b5 <SysSpawn(regs*)>:
c00210b5:	56                   	push   esi
c00210b6:	53                   	push   ebx
c00210b7:	83 ec 04             	sub    esp,0x4
c00210ba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00210be:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00210c1:	85 f6                	test   esi,esi
c00210c3:	75 0a                	jne    c00210cf <SysSpawn(regs*)+0x1a>
c00210c5:	83 c4 04             	add    esp,0x4
c00210c8:	31 c0                	xor    eax,eax
c00210ca:	31 d2                	xor    edx,edx
c00210cc:	5b                   	pop    ebx
c00210cd:	5e                   	pop    esi
c00210ce:	c3                   	ret    
c00210cf:	83 ec 0c             	sub    esp,0xc
c00210d2:	68 24 07 00 00       	push   0x724
c00210d7:	e8 d6 51 ff ff       	call   c00162b2 <malloc>
c00210dc:	83 c4 10             	add    esp,0x10
c00210df:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00210e2:	89 c6                	mov    esi,eax
c00210e4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00210e7:	85 c9                	test   ecx,ecx
c00210e9:	75 39                	jne    c0021124 <SysSpawn(regs*)+0x6f>
c00210eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00210f0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00210f3:	52                   	push   edx
c00210f4:	50                   	push   eax
c00210f5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00210f8:	50                   	push   eax
c00210f9:	56                   	push   esi
c00210fa:	e8 d1 33 00 00       	call   c00244d0 <Process::Process(char const*, Process*, char**)>
c00210ff:	83 c4 10             	add    esp,0x10
c0021102:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0021109:	75 ba                	jne    c00210c5 <SysSpawn(regs*)+0x10>
c002110b:	83 ec 0c             	sub    esp,0xc
c002110e:	56                   	push   esi
c002110f:	e8 40 39 00 00       	call   c0024a54 <Process::createUserThread()>
c0021114:	8b 06                	mov    eax,DWORD PTR [esi]
c0021116:	83 c4 10             	add    esp,0x10
c0021119:	89 c2                	mov    edx,eax
c002111b:	83 c4 04             	add    esp,0x4
c002111e:	c1 fa 1f             	sar    edx,0x1f
c0021121:	5b                   	pop    ebx
c0021122:	5e                   	pop    esi
c0021123:	c3                   	ret    
c0021124:	31 c0                	xor    eax,eax
c0021126:	eb cb                	jmp    c00210f3 <SysSpawn(regs*)+0x3e>

c0021128 <SysGetEnv(regs*)>:
c0021128:	57                   	push   edi
c0021129:	56                   	push   esi
c002112a:	53                   	push   ebx
c002112b:	83 ec 1c             	sub    esp,0x1c
c002112e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0021132:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021137:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c002113a:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c002113d:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0021140:	51                   	push   ecx
c0021141:	e8 bd ed ff ff       	call   c001ff03 <KeGetProcessTotalEnvCount(Process*)>
c0021146:	83 c4 10             	add    esp,0x10
c0021149:	39 c7                	cmp    edi,eax
c002114b:	7c 14                	jl     c0021161 <SysGetEnv(regs*)+0x39>
c002114d:	85 f6                	test   esi,esi
c002114f:	75 0b                	jne    c002115c <SysGetEnv(regs*)+0x34>
c0021151:	83 c4 10             	add    esp,0x10
c0021154:	31 c0                	xor    eax,eax
c0021156:	5b                   	pop    ebx
c0021157:	31 d2                	xor    edx,edx
c0021159:	5e                   	pop    esi
c002115a:	5f                   	pop    edi
c002115b:	c3                   	ret    
c002115c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002115f:	eb f0                	jmp    c0021151 <SysGetEnv(regs*)+0x29>
c0021161:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021165:	83 ec 04             	sub    esp,0x4
c0021168:	57                   	push   edi
c0021169:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c002116f:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0021172:	57                   	push   edi
c0021173:	50                   	push   eax
c0021174:	e8 aa ed ff ff       	call   c001ff23 <KeGetProcessEnvPair(Process*, int)>
c0021179:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c002117c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021180:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0021184:	83 c4 0c             	add    esp,0xc
c0021187:	85 d2                	test   edx,edx
c0021189:	75 23                	jne    c00211ae <SysGetEnv(regs*)+0x86>
c002118b:	83 ec 0c             	sub    esp,0xc
c002118e:	50                   	push   eax
c002118f:	e8 dc f3 fd ff       	call   c0000570 <strlen>
c0021194:	89 3c 24             	mov    DWORD PTR [esp],edi
c0021197:	89 c3                	mov    ebx,eax
c0021199:	e8 d2 f3 fd ff       	call   c0000570 <strlen>
c002119e:	83 c4 10             	add    esp,0x10
c00211a1:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00211a5:	83 c4 10             	add    esp,0x10
c00211a8:	31 d2                	xor    edx,edx
c00211aa:	5b                   	pop    ebx
c00211ab:	5e                   	pop    esi
c00211ac:	5f                   	pop    edi
c00211ad:	c3                   	ret    
c00211ae:	83 ec 08             	sub    esp,0x8
c00211b1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00211b4:	50                   	push   eax
c00211b5:	56                   	push   esi
c00211b6:	e8 85 f4 fd ff       	call   c0000640 <strcpy>
c00211bb:	58                   	pop    eax
c00211bc:	5a                   	pop    edx
c00211bd:	68 44 25 03 c0       	push   0xc0032544
c00211c2:	56                   	push   esi
c00211c3:	e8 78 f6 fd ff       	call   c0000840 <strcat>
c00211c8:	59                   	pop    ecx
c00211c9:	5b                   	pop    ebx
c00211ca:	57                   	push   edi
c00211cb:	56                   	push   esi
c00211cc:	e8 6f f6 fd ff       	call   c0000840 <strcat>
c00211d1:	83 c4 10             	add    esp,0x10
c00211d4:	e9 78 ff ff ff       	jmp    c0021151 <SysGetEnv(regs*)+0x29>

c00211d9 <SysSetFatAttrib(regs*)>:
c00211d9:	57                   	push   edi
c00211da:	56                   	push   esi
c00211db:	53                   	push   ebx
c00211dc:	83 ec 1c             	sub    esp,0x1c
c00211df:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00211e3:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00211e6:	68 14 01 00 00       	push   0x114
c00211eb:	e8 c2 50 ff ff       	call   c00162b2 <malloc>
c00211f0:	83 c4 0c             	add    esp,0xc
c00211f3:	89 c3                	mov    ebx,eax
c00211f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00211fa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00211fd:	50                   	push   eax
c00211fe:	57                   	push   edi
c00211ff:	53                   	push   ebx
c0021200:	e8 43 91 ff ff       	call   c001a348 <File::File(char const*, Process*)>
c0021205:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0021208:	83 c4 0c             	add    esp,0xc
c002120b:	0f b6 d4             	movzx  edx,ah
c002120e:	0f b6 c0             	movzx  eax,al
c0021211:	52                   	push   edx
c0021212:	50                   	push   eax
c0021213:	53                   	push   ebx
c0021214:	e8 b5 93 ff ff       	call   c001a5ce <File::chfatattr(unsigned char, unsigned char)>
c0021219:	83 c4 10             	add    esp,0x10
c002121c:	85 db                	test   ebx,ebx
c002121e:	74 14                	je     c0021234 <SysSetFatAttrib(regs*)+0x5b>
c0021220:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021224:	8b 13                	mov    edx,DWORD PTR [ebx]
c0021226:	83 ec 0c             	sub    esp,0xc
c0021229:	53                   	push   ebx
c002122a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c002122d:	83 c4 10             	add    esp,0x10
c0021230:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021234:	85 c0                	test   eax,eax
c0021236:	0f 95 c0             	setne  al
c0021239:	31 d2                	xor    edx,edx
c002123b:	0f b6 c0             	movzx  eax,al
c002123e:	f7 d8                	neg    eax
c0021240:	83 d2 00             	adc    edx,0x0
c0021243:	83 c4 10             	add    esp,0x10
c0021246:	f7 da                	neg    edx
c0021248:	5b                   	pop    ebx
c0021249:	5e                   	pop    esi
c002124a:	5f                   	pop    edi
c002124b:	c3                   	ret    

c002124c <SysPipe(regs*)>:
c002124c:	57                   	push   edi
c002124d:	56                   	push   esi
c002124e:	53                   	push   ebx
c002124f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021253:	83 ec 0c             	sub    esp,0xc
c0021256:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0021259:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c002125c:	6a 20                	push   0x20
c002125e:	e8 4f 50 ff ff       	call   c00162b2 <malloc>
c0021263:	89 c3                	mov    ebx,eax
c0021265:	58                   	pop    eax
c0021266:	5a                   	pop    edx
c0021267:	68 00 50 00 00       	push   0x5000
c002126c:	53                   	push   ebx
c002126d:	e8 b2 59 ff ff       	call   c0016c24 <Pipe::Pipe(int)>
c0021272:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021275:	e8 38 67 ff ff       	call   c00179b2 <UnixFile::getFileDescriptor()>
c002127a:	89 07                	mov    DWORD PTR [edi],eax
c002127c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002127f:	e8 2e 67 ff ff       	call   c00179b2 <UnixFile::getFileDescriptor()>
c0021284:	83 c4 10             	add    esp,0x10
c0021287:	89 06                	mov    DWORD PTR [esi],eax
c0021289:	31 d2                	xor    edx,edx
c002128b:	5b                   	pop    ebx
c002128c:	31 c0                	xor    eax,eax
c002128e:	5e                   	pop    esi
c002128f:	5f                   	pop    edi
c0021290:	c3                   	ret    

c0021291 <SysGetUnixTime(regs*)>:
c0021291:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0021296:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002129c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00212a0:	e9 71 9a ff ff       	jmp    c001ad16 <Clock::timeInSecondsLocal()>

c00212a5 <string_ends_with(char const*, char const*)>:
c00212a5:	57                   	push   edi
c00212a6:	56                   	push   esi
c00212a7:	53                   	push   ebx
c00212a8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00212ac:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00212b0:	83 ec 0c             	sub    esp,0xc
c00212b3:	53                   	push   ebx
c00212b4:	e8 b7 f2 fd ff       	call   c0000570 <strlen>
c00212b9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00212bc:	89 c6                	mov    esi,eax
c00212be:	e8 ad f2 fd ff       	call   c0000570 <strlen>
c00212c3:	83 c4 10             	add    esp,0x10
c00212c6:	39 c6                	cmp    esi,eax
c00212c8:	7d 06                	jge    c00212d0 <string_ends_with(char const*, char const*)+0x2b>
c00212ca:	5b                   	pop    ebx
c00212cb:	31 c0                	xor    eax,eax
c00212cd:	5e                   	pop    esi
c00212ce:	5f                   	pop    edi
c00212cf:	c3                   	ret    
c00212d0:	83 ec 08             	sub    esp,0x8
c00212d3:	29 c6                	sub    esi,eax
c00212d5:	57                   	push   edi
c00212d6:	01 f3                	add    ebx,esi
c00212d8:	53                   	push   ebx
c00212d9:	e8 72 f4 fd ff       	call   c0000750 <strcmp>
c00212de:	83 c4 10             	add    esp,0x10
c00212e1:	85 c0                	test   eax,eax
c00212e3:	5b                   	pop    ebx
c00212e4:	0f 94 c0             	sete   al
c00212e7:	5e                   	pop    esi
c00212e8:	0f b6 c0             	movzx  eax,al
c00212eb:	5f                   	pop    edi
c00212ec:	c3                   	ret    

c00212ed <SysOpen(regs*)>:
c00212ed:	56                   	push   esi
c00212ee:	53                   	push   ebx
c00212ef:	81 ec 04 01 00 00    	sub    esp,0x104
c00212f5:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00212fc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00212ff:	85 c0                	test   eax,eax
c0021301:	0f 84 bc 01 00 00    	je     c00214c3 <SysOpen(regs*)+0x1d6>
c0021307:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c002130a:	85 c0                	test   eax,eax
c002130c:	0f 84 b1 01 00 00    	je     c00214c3 <SysOpen(regs*)+0x1d6>
c0021312:	6a 00                	push   0x0
c0021314:	68 46 25 03 c0       	push   0xc0032546
c0021319:	50                   	push   eax
c002131a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c002131e:	56                   	push   esi
c002131f:	e8 2c 8d ff ff       	call   c001a050 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0021324:	89 34 24             	mov    DWORD PTR [esp],esi
c0021327:	e8 44 f2 fd ff       	call   c0000570 <strlen>
c002132c:	83 c4 10             	add    esp,0x10
c002132f:	83 e8 01             	sub    eax,0x1
c0021332:	74 21                	je     c0021355 <SysOpen(regs*)+0x68>
c0021334:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0021338:	eb 12                	jmp    c002134c <SysOpen(regs*)+0x5f>
c002133a:	83 fa 3a             	cmp    edx,0x3a
c002133d:	74 12                	je     c0021351 <SysOpen(regs*)+0x64>
c002133f:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0021343:	83 e8 01             	sub    eax,0x1
c0021346:	74 0d                	je     c0021355 <SysOpen(regs*)+0x68>
c0021348:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c002134c:	83 fa 2e             	cmp    edx,0x2e
c002134f:	75 e9                	jne    c002133a <SysOpen(regs*)+0x4d>
c0021351:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0021355:	83 ec 08             	sub    esp,0x8
c0021358:	68 4a 25 03 c0       	push   0xc003254a
c002135d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021360:	50                   	push   eax
c0021361:	e8 3f ff ff ff       	call   c00212a5 <string_ends_with(char const*, char const*)>
c0021366:	83 c4 10             	add    esp,0x10
c0021369:	85 c0                	test   eax,eax
c002136b:	74 1d                	je     c002138a <SysOpen(regs*)+0x9d>
c002136d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021370:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0021376:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002137d:	81 c4 04 01 00 00    	add    esp,0x104
c0021383:	31 c0                	xor    eax,eax
c0021385:	31 d2                	xor    edx,edx
c0021387:	5b                   	pop    ebx
c0021388:	5e                   	pop    esi
c0021389:	c3                   	ret    
c002138a:	83 ec 08             	sub    esp,0x8
c002138d:	68 4f 25 03 c0       	push   0xc003254f
c0021392:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021395:	50                   	push   eax
c0021396:	e8 0a ff ff ff       	call   c00212a5 <string_ends_with(char const*, char const*)>
c002139b:	83 c4 10             	add    esp,0x10
c002139e:	85 c0                	test   eax,eax
c00213a0:	75 cb                	jne    c002136d <SysOpen(regs*)+0x80>
c00213a2:	83 ec 08             	sub    esp,0x8
c00213a5:	68 4b 25 03 c0       	push   0xc003254b
c00213aa:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00213ad:	50                   	push   eax
c00213ae:	e8 9d f3 fd ff       	call   c0000750 <strcmp>
c00213b3:	83 c4 10             	add    esp,0x10
c00213b6:	85 c0                	test   eax,eax
c00213b8:	74 b3                	je     c002136d <SysOpen(regs*)+0x80>
c00213ba:	83 ec 08             	sub    esp,0x8
c00213bd:	68 4a 25 03 c0       	push   0xc003254a
c00213c2:	56                   	push   esi
c00213c3:	e8 dd fe ff ff       	call   c00212a5 <string_ends_with(char const*, char const*)>
c00213c8:	83 c4 10             	add    esp,0x10
c00213cb:	85 c0                	test   eax,eax
c00213cd:	75 9e                	jne    c002136d <SysOpen(regs*)+0x80>
c00213cf:	83 ec 08             	sub    esp,0x8
c00213d2:	68 54 25 03 c0       	push   0xc0032554
c00213d7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00213da:	50                   	push   eax
c00213db:	e8 c5 fe ff ff       	call   c00212a5 <string_ends_with(char const*, char const*)>
c00213e0:	83 c4 10             	add    esp,0x10
c00213e3:	85 c0                	test   eax,eax
c00213e5:	0f 85 eb 00 00 00    	jne    c00214d6 <SysOpen(regs*)+0x1e9>
c00213eb:	83 ec 08             	sub    esp,0x8
c00213ee:	68 59 25 03 c0       	push   0xc0032559
c00213f3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00213f6:	50                   	push   eax
c00213f7:	e8 a9 fe ff ff       	call   c00212a5 <string_ends_with(char const*, char const*)>
c00213fc:	83 c4 10             	add    esp,0x10
c00213ff:	85 c0                	test   eax,eax
c0021401:	0f 85 cf 00 00 00    	jne    c00214d6 <SysOpen(regs*)+0x1e9>
c0021407:	83 ec 08             	sub    esp,0x8
c002140a:	68 55 25 03 c0       	push   0xc0032555
c002140f:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0021412:	51                   	push   ecx
c0021413:	e8 38 f3 fd ff       	call   c0000750 <strcmp>
c0021418:	83 c4 10             	add    esp,0x10
c002141b:	85 c0                	test   eax,eax
c002141d:	0f 84 b3 00 00 00    	je     c00214d6 <SysOpen(regs*)+0x1e9>
c0021423:	83 ec 08             	sub    esp,0x8
c0021426:	68 54 25 03 c0       	push   0xc0032554
c002142b:	56                   	push   esi
c002142c:	e8 74 fe ff ff       	call   c00212a5 <string_ends_with(char const*, char const*)>
c0021431:	83 c4 10             	add    esp,0x10
c0021434:	85 c0                	test   eax,eax
c0021436:	0f 85 9a 00 00 00    	jne    c00214d6 <SysOpen(regs*)+0x1e9>
c002143c:	83 ec 0c             	sub    esp,0xc
c002143f:	68 14 01 00 00       	push   0x114
c0021444:	e8 69 4e ff ff       	call   c00162b2 <malloc>
c0021449:	83 c4 0c             	add    esp,0xc
c002144c:	89 c6                	mov    esi,eax
c002144e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021453:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021456:	50                   	push   eax
c0021457:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c002145a:	52                   	push   edx
c002145b:	56                   	push   esi
c002145c:	e8 e7 8e ff ff       	call   c001a348 <File::File(char const*, Process*)>
c0021461:	83 c4 10             	add    esp,0x10
c0021464:	85 f6                	test   esi,esi
c0021466:	74 5b                	je     c00214c3 <SysOpen(regs*)+0x1d6>
c0021468:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c002146b:	0f b6 c2             	movzx  eax,dl
c002146e:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0021471:	89 d0                	mov    eax,edx
c0021473:	83 e0 01             	and    eax,0x1
c0021476:	f6 c2 02             	test   dl,0x2
c0021479:	74 03                	je     c002147e <SysOpen(regs*)+0x191>
c002147b:	83 c8 02             	or     eax,0x2
c002147e:	f6 c2 04             	test   dl,0x4
c0021481:	74 03                	je     c0021486 <SysOpen(regs*)+0x199>
c0021483:	83 c8 04             	or     eax,0x4
c0021486:	f6 c2 08             	test   dl,0x8
c0021489:	74 03                	je     c002148e <SysOpen(regs*)+0x1a1>
c002148b:	83 c8 0a             	or     eax,0xa
c002148e:	80 e2 10             	and    dl,0x10
c0021491:	74 03                	je     c0021496 <SysOpen(regs*)+0x1a9>
c0021493:	83 c8 12             	or     eax,0x12
c0021496:	83 ec 08             	sub    esp,0x8
c0021499:	50                   	push   eax
c002149a:	56                   	push   esi
c002149b:	e8 c6 8e ff ff       	call   c001a366 <File::open(FileOpenMode)>
c00214a0:	83 c4 10             	add    esp,0x10
c00214a3:	85 c0                	test   eax,eax
c00214a5:	75 1c                	jne    c00214c3 <SysOpen(regs*)+0x1d6>
c00214a7:	83 ec 0c             	sub    esp,0xc
c00214aa:	56                   	push   esi
c00214ab:	e8 02 65 ff ff       	call   c00179b2 <UnixFile::getFileDescriptor()>
c00214b0:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00214b3:	83 c4 10             	add    esp,0x10
c00214b6:	89 02                	mov    DWORD PTR [edx],eax
c00214b8:	c1 f8 1f             	sar    eax,0x1f
c00214bb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00214be:	e9 ba fe ff ff       	jmp    c002137d <SysOpen(regs*)+0x90>
c00214c3:	81 c4 04 01 00 00    	add    esp,0x104
c00214c9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00214ce:	ba ff ff ff ff       	mov    edx,0xffffffff
c00214d3:	5b                   	pop    ebx
c00214d4:	5e                   	pop    esi
c00214d5:	c3                   	ret    
c00214d6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00214d9:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00214df:	e9 92 fe ff ff       	jmp    c0021376 <SysOpen(regs*)+0x89>

c00214e4 <KeSystemCall(regs*, void*)>:
c00214e4:	53                   	push   ebx
c00214e5:	83 ec 08             	sub    esp,0x8
c00214e8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00214ec:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00214ef:	83 f8 3e             	cmp    eax,0x3e
c00214f2:	77 16                	ja     c002150a <KeSystemCall(regs*, void*)+0x26>
c00214f4:	8b 14 85 c0 3d 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcc240]
c00214fb:	85 d2                	test   edx,edx
c00214fd:	74 0b                	je     c002150a <KeSystemCall(regs*, void*)+0x26>
c00214ff:	83 ec 0c             	sub    esp,0xc
c0021502:	53                   	push   ebx
c0021503:	ff d2                	call   edx
c0021505:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0021508:	eb 0d                	jmp    c0021517 <KeSystemCall(regs*, void*)+0x33>
c002150a:	52                   	push   edx
c002150b:	52                   	push   edx
c002150c:	50                   	push   eax
c002150d:	68 5e 25 03 c0       	push   0xc003255e
c0021512:	e8 2a 7c ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0021517:	83 c4 10             	add    esp,0x10
c002151a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c002151f:	31 d2                	xor    edx,edx
c0021521:	83 c4 08             	add    esp,0x8
c0021524:	5b                   	pop    ebx
c0021525:	c3                   	ret    
c0021526:	66 90                	xchg   ax,ax

c0021528 <KeSwitchEndian16(unsigned short)>:
c0021528:	83 ec 04             	sub    esp,0x4
c002152b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002152f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0021533:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0021537:	c1 f8 08             	sar    eax,0x8
c002153a:	89 c2                	mov    edx,eax
c002153c:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0021540:	c1 e0 08             	shl    eax,0x8
c0021543:	09 d0                	or     eax,edx
c0021545:	83 c4 04             	add    esp,0x4
c0021548:	c3                   	ret    
c0021549:	8d 76 00             	lea    esi,[esi+0x0]

c002154c <KeSwitchEndian32(unsigned int)>:
c002154c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021550:	c1 e8 18             	shr    eax,0x18
c0021553:	89 c2                	mov    edx,eax
c0021555:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021559:	c1 e0 08             	shl    eax,0x8
c002155c:	25 00 00 ff 00       	and    eax,0xff0000
c0021561:	09 c2                	or     edx,eax
c0021563:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021567:	c1 e8 08             	shr    eax,0x8
c002156a:	25 00 ff 00 00       	and    eax,0xff00
c002156f:	09 c2                	or     edx,eax
c0021571:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021575:	c1 e0 18             	shl    eax,0x18
c0021578:	09 d0                	or     eax,edx
c002157a:	c3                   	ret    
c002157b:	90                   	nop

c002157c <EthernetCRC32(unsigned char*, int)>:
c002157c:	83 ec 10             	sub    esp,0x10
c002157f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021584:	75 0a                	jne    c0021590 <EthernetCRC32(unsigned char*, int)+0x14>
c0021586:	b8 00 00 00 00       	mov    eax,0x0
c002158b:	e9 8c 00 00 00       	jmp    c002161c <EthernetCRC32(unsigned char*, int)+0xa0>
c0021590:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0021595:	7f 09                	jg     c00215a0 <EthernetCRC32(unsigned char*, int)+0x24>
c0021597:	b8 00 00 00 00       	mov    eax,0x0
c002159c:	eb 7e                	jmp    c002161c <EthernetCRC32(unsigned char*, int)+0xa0>
c002159e:	66 90                	xchg   ax,ax
c00215a0:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c00215a8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00215b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00215b4:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c00215b8:	7d 5a                	jge    c0021614 <EthernetCRC32(unsigned char*, int)+0x98>
c00215ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00215be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00215c2:	01 d0                	add    eax,edx
c00215c4:	8a 00                	mov    al,BYTE PTR [eax]
c00215c6:	0f b6 c0             	movzx  eax,al
c00215c9:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c00215cd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00215d5:	8d 76 00             	lea    esi,[esi+0x0]
c00215d8:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c00215dd:	7f 2d                	jg     c002160c <EthernetCRC32(unsigned char*, int)+0x90>
c00215df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00215e3:	83 e0 01             	and    eax,0x1
c00215e6:	74 10                	je     c00215f8 <EthernetCRC32(unsigned char*, int)+0x7c>
c00215e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00215ec:	d1 e8                	shr    eax,1
c00215ee:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00215f3:	eb 0b                	jmp    c0021600 <EthernetCRC32(unsigned char*, int)+0x84>
c00215f5:	8d 76 00             	lea    esi,[esi+0x0]
c00215f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00215fc:	d1 e8                	shr    eax,1
c00215fe:	66 90                	xchg   ax,ax
c0021600:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021604:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0021609:	eb cd                	jmp    c00215d8 <EthernetCRC32(unsigned char*, int)+0x5c>
c002160b:	90                   	nop
c002160c:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0021611:	eb 9d                	jmp    c00215b0 <EthernetCRC32(unsigned char*, int)+0x34>
c0021613:	90                   	nop
c0021614:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021618:	f7 d0                	not    eax
c002161a:	66 90                	xchg   ax,ax
c002161c:	83 c4 10             	add    esp,0x10
c002161f:	c3                   	ret    

c0021620 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0021620:	83 ec 2c             	sub    esp,0x2c
c0021623:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021627:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c002162c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021630:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021634:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021638:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002163b:	0f b7 c0             	movzx  eax,ax
c002163e:	3d 06 08 00 00       	cmp    eax,0x806
c0021643:	75 13                	jne    c0021658 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0021645:	83 ec 0c             	sub    esp,0xc
c0021648:	68 72 25 03 c0       	push   0xc0032572
c002164d:	e8 ef 7a ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0021652:	83 c4 10             	add    esp,0x10
c0021655:	eb 25                	jmp    c002167c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0021657:	90                   	nop
c0021658:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002165c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002165f:	0f b7 c0             	movzx  eax,ax
c0021662:	3d 00 08 00 00       	cmp    eax,0x800
c0021667:	75 13                	jne    c002167c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0021669:	83 ec 0c             	sub    esp,0xc
c002166c:	68 88 25 03 c0       	push   0xc0032588
c0021671:	e8 cb 7a ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0021676:	83 c4 10             	add    esp,0x10
c0021679:	8d 76 00             	lea    esi,[esi+0x0]
c002167c:	90                   	nop
c002167d:	83 c4 2c             	add    esp,0x2c
c0021680:	c3                   	ret    

c0021681 <CmOpen(char const*)>:
c0021681:	57                   	push   edi
c0021682:	56                   	push   esi
c0021683:	53                   	push   ebx
c0021684:	83 ec 1c             	sub    esp,0x1c
c0021687:	6a 30                	push   0x30
c0021689:	e8 24 4c ff ff       	call   c00162b2 <malloc>
c002168e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0021695:	89 c3                	mov    ebx,eax
c0021697:	e8 16 4c ff ff       	call   c00162b2 <malloc>
c002169c:	83 c4 0c             	add    esp,0xc
c002169f:	89 c6                	mov    esi,eax
c00216a1:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c00216a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00216ab:	50                   	push   eax
c00216ac:	e8 97 8c ff ff       	call   c001a348 <File::File(char const*, Process*)>
c00216b1:	83 c4 0c             	add    esp,0xc
c00216b4:	89 33                	mov    DWORD PTR [ebx],esi
c00216b6:	8d 44 24 07          	lea    eax,[esp+0x7]
c00216ba:	50                   	push   eax
c00216bb:	8d 44 24 10          	lea    eax,[esp+0x10]
c00216bf:	50                   	push   eax
c00216c0:	56                   	push   esi
c00216c1:	e8 a2 8f ff ff       	call   c001a668 <File::stat(unsigned long long*, bool*)>
c00216c6:	5a                   	pop    edx
c00216c7:	59                   	pop    ecx
c00216c8:	6a 01                	push   0x1
c00216ca:	ff 33                	push   DWORD PTR [ebx]
c00216cc:	e8 95 8c ff ff       	call   c001a366 <File::open(FileOpenMode)>
c00216d1:	5e                   	pop    esi
c00216d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00216d6:	e8 d7 4b ff ff       	call   c00162b2 <malloc>
c00216db:	5a                   	pop    edx
c00216dc:	89 c7                	mov    edi,eax
c00216de:	8d 74 24 10          	lea    esi,[esp+0x10]
c00216e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00216e4:	8b 10                	mov    edx,DWORD PTR [eax]
c00216e6:	56                   	push   esi
c00216e7:	57                   	push   edi
c00216e8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00216ec:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00216f0:	50                   	push   eax
c00216f1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00216f4:	83 c4 14             	add    esp,0x14
c00216f7:	ff 33                	push   DWORD PTR [ebx]
c00216f9:	e8 c6 8c ff ff       	call   c001a3c4 <File::close()>
c00216fe:	59                   	pop    ecx
c00216ff:	58                   	pop    eax
c0021700:	6a 13                	push   0x13
c0021702:	ff 33                	push   DWORD PTR [ebx]
c0021704:	e8 5d 8c ff ff       	call   c001a366 <File::open(FileOpenMode)>
c0021709:	8b 03                	mov    eax,DWORD PTR [ebx]
c002170b:	8b 10                	mov    edx,DWORD PTR [eax]
c002170d:	89 34 24             	mov    DWORD PTR [esp],esi
c0021710:	57                   	push   edi
c0021711:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021715:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021719:	50                   	push   eax
c002171a:	ff 52 10             	call   DWORD PTR [edx+0x10]
c002171d:	83 c4 14             	add    esp,0x14
c0021720:	57                   	push   edi
c0021721:	e8 9c 4b ff ff       	call   c00162c2 <free>
c0021726:	83 c4 10             	add    esp,0x10
c0021729:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c002172c:	75 10                	jne    c002173e <CmOpen(char const*)+0xbd>
c002172e:	83 ec 0c             	sub    esp,0xc
c0021731:	68 9d 25 03 c0       	push   0xc003259d
c0021736:	e8 10 e9 ff ff       	call   c002004b <KePanic(char const*)>
c002173b:	83 c4 10             	add    esp,0x10
c002173e:	8d 7b 05             	lea    edi,[ebx+0x5]
c0021741:	50                   	push   eax
c0021742:	6a 00                	push   0x0
c0021744:	6a 00                	push   0x0
c0021746:	ff 33                	push   DWORD PTR [ebx]
c0021748:	e8 d7 8c ff ff       	call   c001a424 <File::seek(unsigned long long)>
c002174d:	8b 03                	mov    eax,DWORD PTR [ebx]
c002174f:	8b 10                	mov    edx,DWORD PTR [eax]
c0021751:	89 34 24             	mov    DWORD PTR [esp],esi
c0021754:	57                   	push   edi
c0021755:	6a 00                	push   0x0
c0021757:	6a 2b                	push   0x2b
c0021759:	50                   	push   eax
c002175a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c002175d:	83 c4 1c             	add    esp,0x1c
c0021760:	6a 00                	push   0x0
c0021762:	6a 00                	push   0x0
c0021764:	ff 33                	push   DWORD PTR [ebx]
c0021766:	e8 b9 8c ff ff       	call   c001a424 <File::seek(unsigned long long)>
c002176b:	83 c4 0c             	add    esp,0xc
c002176e:	6a 08                	push   0x8
c0021770:	68 ae 25 03 c0       	push   0xc00325ae
c0021775:	57                   	push   edi
c0021776:	e8 05 ec fd ff       	call   c0000380 <memcmp>
c002177b:	83 c4 10             	add    esp,0x10
c002177e:	85 c0                	test   eax,eax
c0021780:	74 10                	je     c0021792 <CmOpen(char const*)+0x111>
c0021782:	83 ec 0c             	sub    esp,0xc
c0021785:	68 b7 25 03 c0       	push   0xc00325b7
c002178a:	e8 bc e8 ff ff       	call   c002004b <KePanic(char const*)>
c002178f:	83 c4 10             	add    esp,0x10
c0021792:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0021796:	89 d8                	mov    eax,ebx
c0021798:	83 c4 10             	add    esp,0x10
c002179b:	5b                   	pop    ebx
c002179c:	5e                   	pop    esi
c002179d:	5f                   	pop    edi
c002179e:	c3                   	ret    

c002179f <CmClose(Reghive_Tag*)>:
c002179f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00217a3:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c00217a7:	74 0b                	je     c00217b4 <CmClose(Reghive_Tag*)+0x15>
c00217a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00217ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00217af:	e9 10 8c ff ff       	jmp    c001a3c4 <File::close()>
c00217b4:	c3                   	ret    

c00217b5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c00217b5:	53                   	push   ebx
c00217b6:	83 ec 18             	sub    esp,0x18
c00217b9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00217bd:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00217c1:	74 29                	je     c00217ec <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c00217c3:	50                   	push   eax
c00217c4:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c00217c9:	99                   	cdq    
c00217ca:	52                   	push   edx
c00217cb:	50                   	push   eax
c00217cc:	ff 33                	push   DWORD PTR [ebx]
c00217ce:	e8 51 8c ff ff       	call   c001a424 <File::seek(unsigned long long)>
c00217d3:	5a                   	pop    edx
c00217d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00217d6:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00217da:	8b 10                	mov    edx,DWORD PTR [eax]
c00217dc:	51                   	push   ecx
c00217dd:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00217e1:	6a 00                	push   0x0
c00217e3:	6a 2b                	push   0x2b
c00217e5:	50                   	push   eax
c00217e6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00217e9:	83 c4 20             	add    esp,0x20
c00217ec:	83 c4 18             	add    esp,0x18
c00217ef:	5b                   	pop    ebx
c00217f0:	c3                   	ret    

c00217f1 <CmGetString(Reghive_Tag*, int, char*)>:
c00217f1:	55                   	push   ebp
c00217f2:	57                   	push   edi
c00217f3:	56                   	push   esi
c00217f4:	53                   	push   ebx
c00217f5:	31 db                	xor    ebx,ebx
c00217f7:	83 ec 70             	sub    esp,0x70
c00217fa:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0021801:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0021805:	50                   	push   eax
c0021806:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c002180d:	55                   	push   ebp
c002180e:	e8 a2 ff ff ff       	call   c00217b5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021813:	83 c4 10             	add    esp,0x10
c0021816:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c002181b:	c1 e0 08             	shl    eax,0x8
c002181e:	89 c2                	mov    edx,eax
c0021820:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0021825:	09 d0                	or     eax,edx
c0021827:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c002182c:	c1 e0 08             	shl    eax,0x8
c002182f:	09 d0                	or     eax,edx
c0021831:	74 25                	je     c0021858 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0021833:	6b fb 0d             	imul   edi,ebx,0xd
c0021836:	52                   	push   edx
c0021837:	8d 54 24 39          	lea    edx,[esp+0x39]
c002183b:	52                   	push   edx
c002183c:	50                   	push   eax
c002183d:	55                   	push   ebp
c002183e:	e8 72 ff ff ff       	call   c00217b5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021843:	8d 74 24 49          	lea    esi,[esp+0x49]
c0021847:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c002184e:	b9 27 00 00 00       	mov    ecx,0x27
c0021853:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021855:	83 c4 10             	add    esp,0x10
c0021858:	83 c3 03             	add    ebx,0x3
c002185b:	83 fb 15             	cmp    ebx,0x15
c002185e:	75 b6                	jne    c0021816 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0021860:	83 c4 6c             	add    esp,0x6c
c0021863:	5b                   	pop    ebx
c0021864:	5e                   	pop    esi
c0021865:	5f                   	pop    edi
c0021866:	5d                   	pop    ebp
c0021867:	c3                   	ret    

c0021868 <CmEnterDirectory(Reghive_Tag*, int)>:
c0021868:	83 ec 40             	sub    esp,0x40
c002186b:	8d 44 24 09          	lea    eax,[esp+0x9]
c002186f:	50                   	push   eax
c0021870:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021874:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021878:	e8 38 ff ff ff       	call   c00217b5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c002187d:	83 c4 10             	add    esp,0x10
c0021880:	83 c8 ff             	or     eax,0xffffffff
c0021883:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0021888:	75 19                	jne    c00218a3 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c002188a:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c002188f:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0021894:	c1 e0 08             	shl    eax,0x8
c0021897:	09 c2                	or     edx,eax
c0021899:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c002189e:	c1 e0 10             	shl    eax,0x10
c00218a1:	09 d0                	or     eax,edx
c00218a3:	83 c4 3c             	add    esp,0x3c
c00218a6:	c3                   	ret    

c00218a7 <CmGetNext(Reghive_Tag*, int)>:
c00218a7:	83 ec 40             	sub    esp,0x40
c00218aa:	8d 44 24 09          	lea    eax,[esp+0x9]
c00218ae:	50                   	push   eax
c00218af:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00218b3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00218b7:	e8 f9 fe ff ff       	call   c00217b5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00218bc:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c00218c1:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00218c6:	c1 e0 08             	shl    eax,0x8
c00218c9:	09 c2                	or     edx,eax
c00218cb:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c00218d0:	83 c4 4c             	add    esp,0x4c
c00218d3:	c1 e0 10             	shl    eax,0x10
c00218d6:	09 d0                	or     eax,edx
c00218d8:	c3                   	ret    

c00218d9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c00218d9:	53                   	push   ebx
c00218da:	83 ec 18             	sub    esp,0x18
c00218dd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00218e1:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00218e5:	74 29                	je     c0021910 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c00218e7:	50                   	push   eax
c00218e8:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c00218ed:	99                   	cdq    
c00218ee:	52                   	push   edx
c00218ef:	50                   	push   eax
c00218f0:	ff 33                	push   DWORD PTR [ebx]
c00218f2:	e8 2d 8b ff ff       	call   c001a424 <File::seek(unsigned long long)>
c00218f7:	5a                   	pop    edx
c00218f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00218fa:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00218fe:	8b 10                	mov    edx,DWORD PTR [eax]
c0021900:	51                   	push   ecx
c0021901:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0021905:	6a 00                	push   0x0
c0021907:	6a 2b                	push   0x2b
c0021909:	50                   	push   eax
c002190a:	ff 52 10             	call   DWORD PTR [edx+0x10]
c002190d:	83 c4 20             	add    esp,0x20
c0021910:	83 c4 18             	add    esp,0x18
c0021913:	5b                   	pop    ebx
c0021914:	c3                   	ret    

c0021915 <CmFreeExtent(Reghive_Tag*, int)>:
c0021915:	53                   	push   ebx
c0021916:	83 ec 3c             	sub    esp,0x3c
c0021919:	6a 2b                	push   0x2b
c002191b:	6a 00                	push   0x0
c002191d:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0021921:	53                   	push   ebx
c0021922:	e8 c9 eb fd ff       	call   c00004f0 <memset>
c0021927:	83 c4 0c             	add    esp,0xc
c002192a:	53                   	push   ebx
c002192b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002192f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021933:	e8 a1 ff ff ff       	call   c00218d9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0021938:	83 c4 48             	add    esp,0x48
c002193b:	5b                   	pop    ebx
c002193c:	c3                   	ret    

c002193d <CmUpdateHeader(Reghive_Tag*)>:
c002193d:	83 ec 0c             	sub    esp,0xc
c0021940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021944:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0021948:	74 10                	je     c002195a <CmUpdateHeader(Reghive_Tag*)+0x1d>
c002194a:	52                   	push   edx
c002194b:	8d 50 05             	lea    edx,[eax+0x5]
c002194e:	52                   	push   edx
c002194f:	6a 00                	push   0x0
c0021951:	50                   	push   eax
c0021952:	e8 82 ff ff ff       	call   c00218d9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0021957:	83 c4 10             	add    esp,0x10
c002195a:	83 c4 0c             	add    esp,0xc
c002195d:	c3                   	ret    

c002195e <CmExpand(Reghive_Tag*, int)>:
c002195e:	57                   	push   edi
c002195f:	56                   	push   esi
c0021960:	83 ce ff             	or     esi,0xffffffff
c0021963:	53                   	push   ebx
c0021964:	83 ec 30             	sub    esp,0x30
c0021967:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002196b:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c002196f:	74 5f                	je     c00219d0 <CmExpand(Reghive_Tag*, int)+0x72>
c0021971:	31 d2                	xor    edx,edx
c0021973:	31 f6                	xor    esi,esi
c0021975:	50                   	push   eax
c0021976:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c002197a:	52                   	push   edx
c002197b:	50                   	push   eax
c002197c:	ff 33                	push   DWORD PTR [ebx]
c002197e:	e8 a1 8a ff ff       	call   c001a424 <File::seek(unsigned long long)>
c0021983:	83 c4 0c             	add    esp,0xc
c0021986:	6a 2b                	push   0x2b
c0021988:	6a 00                	push   0x0
c002198a:	8d 7c 24 11          	lea    edi,[esp+0x11]
c002198e:	57                   	push   edi
c002198f:	e8 5c eb fd ff       	call   c00004f0 <memset>
c0021994:	83 c4 10             	add    esp,0x10
c0021997:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c002199b:	7d 1b                	jge    c00219b8 <CmExpand(Reghive_Tag*, int)+0x5a>
c002199d:	83 ec 0c             	sub    esp,0xc
c00219a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00219a2:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c00219a6:	8b 10                	mov    edx,DWORD PTR [eax]
c00219a8:	46                   	inc    esi
c00219a9:	51                   	push   ecx
c00219aa:	57                   	push   edi
c00219ab:	6a 00                	push   0x0
c00219ad:	6a 2b                	push   0x2b
c00219af:	50                   	push   eax
c00219b0:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00219b3:	83 c4 20             	add    esp,0x20
c00219b6:	eb df                	jmp    c0021997 <CmExpand(Reghive_Tag*, int)+0x39>
c00219b8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00219bc:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c00219bf:	83 ec 0c             	sub    esp,0xc
c00219c2:	01 f2                	add    edx,esi
c00219c4:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c00219c7:	53                   	push   ebx
c00219c8:	e8 70 ff ff ff       	call   c002193d <CmUpdateHeader(Reghive_Tag*)>
c00219cd:	83 c4 10             	add    esp,0x10
c00219d0:	83 c4 30             	add    esp,0x30
c00219d3:	89 f0                	mov    eax,esi
c00219d5:	5b                   	pop    ebx
c00219d6:	5e                   	pop    esi
c00219d7:	5f                   	pop    edi
c00219d8:	c3                   	ret    

c00219d9 <CmFindUnusedExtent(Reghive_Tag*)>:
c00219d9:	55                   	push   ebp
c00219da:	57                   	push   edi
c00219db:	56                   	push   esi
c00219dc:	53                   	push   ebx
c00219dd:	83 cb ff             	or     ebx,0xffffffff
c00219e0:	83 ec 1c             	sub    esp,0x1c
c00219e3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00219e7:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c00219eb:	74 68                	je     c0021a55 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c00219ed:	be 2b 00 00 00       	mov    esi,0x2b
c00219f2:	51                   	push   ecx
c00219f3:	31 ff                	xor    edi,edi
c00219f5:	6a 00                	push   0x0
c00219f7:	31 db                	xor    ebx,ebx
c00219f9:	6a 00                	push   0x0
c00219fb:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00219fe:	e8 21 8a ff ff       	call   c001a424 <File::seek(unsigned long long)>
c0021a03:	83 c4 10             	add    esp,0x10
c0021a06:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0021a09:	76 3b                	jbe    c0021a46 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0021a0b:	83 ec 0c             	sub    esp,0xc
c0021a0e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021a11:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0021a15:	8b 10                	mov    edx,DWORD PTR [eax]
c0021a17:	51                   	push   ecx
c0021a18:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0021a1c:	51                   	push   ecx
c0021a1d:	6a 00                	push   0x0
c0021a1f:	6a 01                	push   0x1
c0021a21:	50                   	push   eax
c0021a22:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0021a25:	83 c4 20             	add    esp,0x20
c0021a28:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0021a2d:	74 26                	je     c0021a55 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0021a2f:	43                   	inc    ebx
c0021a30:	52                   	push   edx
c0021a31:	57                   	push   edi
c0021a32:	56                   	push   esi
c0021a33:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0021a36:	e8 e9 89 ff ff       	call   c001a424 <File::seek(unsigned long long)>
c0021a3b:	83 c6 2b             	add    esi,0x2b
c0021a3e:	83 d7 00             	adc    edi,0x0
c0021a41:	83 c4 10             	add    esp,0x10
c0021a44:	eb c0                	jmp    c0021a06 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0021a46:	50                   	push   eax
c0021a47:	50                   	push   eax
c0021a48:	6a 40                	push   0x40
c0021a4a:	55                   	push   ebp
c0021a4b:	e8 0e ff ff ff       	call   c002195e <CmExpand(Reghive_Tag*, int)>
c0021a50:	83 c4 10             	add    esp,0x10
c0021a53:	89 c3                	mov    ebx,eax
c0021a55:	83 c4 1c             	add    esp,0x1c
c0021a58:	89 d8                	mov    eax,ebx
c0021a5a:	5b                   	pop    ebx
c0021a5b:	5e                   	pop    esi
c0021a5c:	5f                   	pop    edi
c0021a5d:	5d                   	pop    ebp
c0021a5e:	c3                   	ret    

c0021a5f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0021a5f:	55                   	push   ebp
c0021a60:	57                   	push   edi
c0021a61:	56                   	push   esi
c0021a62:	53                   	push   ebx
c0021a63:	81 ec 88 00 00 00    	sub    esp,0x88
c0021a69:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0021a70:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0021a77:	e8 5d ff ff ff       	call   c00219d9 <CmFindUnusedExtent(Reghive_Tag*)>
c0021a7c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021a80:	83 c4 0c             	add    esp,0xc
c0021a83:	6a 2b                	push   0x2b
c0021a85:	6a 00                	push   0x0
c0021a87:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0021a8b:	55                   	push   ebp
c0021a8c:	e8 5f ea fd ff       	call   c00004f0 <memset>
c0021a91:	83 c4 10             	add    esp,0x10
c0021a94:	85 db                	test   ebx,ebx
c0021a96:	74 12                	je     c0021aaa <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0021a98:	51                   	push   ecx
c0021a99:	55                   	push   ebp
c0021a9a:	53                   	push   ebx
c0021a9b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0021aa2:	e8 0e fd ff ff       	call   c00217b5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021aa7:	83 c4 10             	add    esp,0x10
c0021aaa:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0021aae:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0021ab5:	b9 2b 00 00 00       	mov    ecx,0x2b
c0021aba:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021abc:	85 db                	test   ebx,ebx
c0021abe:	74 49                	je     c0021b09 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0021ac0:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0021ac5:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0021aca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021ace:	c1 e0 08             	shl    eax,0x8
c0021ad1:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0021ad7:	09 c8                	or     eax,ecx
c0021ad9:	74 11                	je     c0021aec <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0021adb:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0021adf:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0021ae3:	c1 e8 10             	shr    eax,0x10
c0021ae6:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0021aea:	eb 0f                	jmp    c0021afb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0021aec:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0021af1:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0021af6:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0021afb:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0021aff:	c1 ea 08             	shr    edx,0x8
c0021b02:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0021b07:	eb 0f                	jmp    c0021b18 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0021b09:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0021b0e:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0021b13:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0021b18:	52                   	push   edx
c0021b19:	8d 44 24 49          	lea    eax,[esp+0x49]
c0021b1d:	50                   	push   eax
c0021b1e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021b22:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0021b29:	e8 ab fd ff ff       	call   c00218d9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0021b2e:	83 c4 10             	add    esp,0x10
c0021b31:	85 db                	test   ebx,ebx
c0021b33:	74 12                	je     c0021b47 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0021b35:	50                   	push   eax
c0021b36:	55                   	push   ebp
c0021b37:	53                   	push   ebx
c0021b38:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0021b3f:	e8 95 fd ff ff       	call   c00218d9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0021b44:	83 c4 10             	add    esp,0x10
c0021b47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021b4b:	83 c4 7c             	add    esp,0x7c
c0021b4e:	5b                   	pop    ebx
c0021b4f:	5e                   	pop    esi
c0021b50:	5f                   	pop    edi
c0021b51:	5d                   	pop    ebp
c0021b52:	c3                   	ret    

c0021b53 <CmSetString(Reghive_Tag*, int, char const*)>:
c0021b53:	55                   	push   ebp
c0021b54:	57                   	push   edi
c0021b55:	56                   	push   esi
c0021b56:	53                   	push   ebx
c0021b57:	bb 27 00 00 00       	mov    ebx,0x27
c0021b5c:	81 ec 88 00 00 00    	sub    esp,0x88
c0021b62:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0021b69:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0021b70:	e8 fb e9 fd ff       	call   c0000570 <strlen>
c0021b75:	8d 48 26             	lea    ecx,[eax+0x26]
c0021b78:	89 c8                	mov    eax,ecx
c0021b7a:	99                   	cdq    
c0021b7b:	f7 fb                	idiv   ebx
c0021b7d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021b81:	83 c4 10             	add    esp,0x10
c0021b84:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0021b8a:	7e 10                	jle    c0021b9c <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0021b8c:	83 ec 0c             	sub    esp,0xc
c0021b8f:	68 c8 25 03 c0       	push   0xc00325c8
c0021b94:	e8 b2 e4 ff ff       	call   c002004b <KePanic(char const*)>
c0021b99:	83 c4 10             	add    esp,0x10
c0021b9c:	31 ff                	xor    edi,edi
c0021b9e:	50                   	push   eax
c0021b9f:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0021ba3:	53                   	push   ebx
c0021ba4:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0021bab:	56                   	push   esi
c0021bac:	e8 04 fc ff ff       	call   c00217b5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021bb1:	83 c4 10             	add    esp,0x10
c0021bb4:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c0021bb8:	89 d0                	mov    eax,edx
c0021bba:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c0021bbe:	c1 e0 08             	shl    eax,0x8
c0021bc1:	09 c2                	or     edx,eax
c0021bc3:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0021bc7:	c1 e2 08             	shl    edx,0x8
c0021bca:	09 c2                	or     edx,eax
c0021bcc:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0021bd0:	7e 76                	jle    c0021c48 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c0021bd2:	85 d2                	test   edx,edx
c0021bd4:	75 25                	jne    c0021bfb <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0021bd6:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0021bdb:	8d 44 24 45          	lea    eax,[esp+0x45]
c0021bdf:	50                   	push   eax
c0021be0:	6a 00                	push   0x0
c0021be2:	6a 00                	push   0x0
c0021be4:	56                   	push   esi
c0021be5:	e8 75 fe ff ff       	call   c0021a5f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0021bea:	83 c4 10             	add    esp,0x10
c0021bed:	89 c2                	mov    edx,eax
c0021bef:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0021bf2:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0021bf5:	c1 f8 10             	sar    eax,0x10
c0021bf8:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0021bfb:	55                   	push   ebp
c0021bfc:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c0021c00:	55                   	push   ebp
c0021c01:	52                   	push   edx
c0021c02:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0021c06:	56                   	push   esi
c0021c07:	e8 a9 fb ff ff       	call   c00217b5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021c0c:	83 c4 0c             	add    esp,0xc
c0021c0f:	6a 27                	push   0x27
c0021c11:	6a 00                	push   0x0
c0021c13:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0021c17:	51                   	push   ecx
c0021c18:	e8 d3 e8 fd ff       	call   c00004f0 <memset>
c0021c1d:	83 c4 0c             	add    esp,0xc
c0021c20:	6b c7 27             	imul   eax,edi,0x27
c0021c23:	6a 27                	push   0x27
c0021c25:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0021c2c:	50                   	push   eax
c0021c2d:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0021c31:	51                   	push   ecx
c0021c32:	e8 49 ea fd ff       	call   c0000680 <strncpy>
c0021c37:	83 c4 0c             	add    esp,0xc
c0021c3a:	55                   	push   ebp
c0021c3b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021c3f:	52                   	push   edx
c0021c40:	56                   	push   esi
c0021c41:	e8 93 fc ff ff       	call   c00218d9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0021c46:	eb 19                	jmp    c0021c61 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c0021c48:	85 d2                	test   edx,edx
c0021c4a:	74 18                	je     c0021c64 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c0021c4c:	51                   	push   ecx
c0021c4d:	51                   	push   ecx
c0021c4e:	52                   	push   edx
c0021c4f:	56                   	push   esi
c0021c50:	e8 c0 fc ff ff       	call   c0021915 <CmFreeExtent(Reghive_Tag*, int)>
c0021c55:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0021c59:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0021c5d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021c61:	83 c4 10             	add    esp,0x10
c0021c64:	47                   	inc    edi
c0021c65:	83 c3 03             	add    ebx,0x3
c0021c68:	83 ff 07             	cmp    edi,0x7
c0021c6b:	0f 85 43 ff ff ff    	jne    c0021bb4 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0021c71:	50                   	push   eax
c0021c72:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0021c76:	50                   	push   eax
c0021c77:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0021c7e:	56                   	push   esi
c0021c7f:	e8 55 fc ff ff       	call   c00218d9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0021c84:	81 c4 8c 00 00 00    	add    esp,0x8c
c0021c8a:	5b                   	pop    ebx
c0021c8b:	5e                   	pop    esi
c0021c8c:	5f                   	pop    edi
c0021c8d:	5d                   	pop    ebp
c0021c8e:	c3                   	ret    

c0021c8f <CmGetMatch(char*, char*, bool, bool*)>:
c0021c8f:	56                   	push   esi
c0021c90:	53                   	push   ebx
c0021c91:	50                   	push   eax
c0021c92:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0021c96:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0021c9b:	74 25                	je     c0021cc2 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0021c9d:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0021ca0:	31 db                	xor    ebx,ebx
c0021ca2:	50                   	push   eax
c0021ca3:	50                   	push   eax
c0021ca4:	8d 04 9d c0 3e 03 c0 	lea    eax,[ebx*4-0x3ffcc140]
c0021cab:	50                   	push   eax
c0021cac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021cb0:	e8 9b ea fd ff       	call   c0000750 <strcmp>
c0021cb5:	83 c4 10             	add    esp,0x10
c0021cb8:	85 c0                	test   eax,eax
c0021cba:	74 2e                	je     c0021cea <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0021cbc:	43                   	inc    ebx
c0021cbd:	83 fb 3f             	cmp    ebx,0x3f
c0021cc0:	75 e0                	jne    c0021ca2 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0021cc2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021cc5:	31 db                	xor    ebx,ebx
c0021cc7:	8d 04 9d c0 3e 03 c0 	lea    eax,[ebx*4-0x3ffcc140]
c0021cce:	51                   	push   ecx
c0021ccf:	51                   	push   ecx
c0021cd0:	50                   	push   eax
c0021cd1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021cd5:	e8 76 ea fd ff       	call   c0000750 <strcmp>
c0021cda:	83 c4 10             	add    esp,0x10
c0021cdd:	85 c0                	test   eax,eax
c0021cdf:	74 09                	je     c0021cea <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0021ce1:	43                   	inc    ebx
c0021ce2:	83 fb 3f             	cmp    ebx,0x3f
c0021ce5:	75 e0                	jne    c0021cc7 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0021ce7:	83 cb ff             	or     ebx,0xffffffff
c0021cea:	89 d8                	mov    eax,ebx
c0021cec:	5a                   	pop    edx
c0021ced:	5b                   	pop    ebx
c0021cee:	5e                   	pop    esi
c0021cef:	c3                   	ret    

c0021cf0 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0021cf0:	55                   	push   ebp
c0021cf1:	31 c0                	xor    eax,eax
c0021cf3:	57                   	push   edi
c0021cf4:	56                   	push   esi
c0021cf5:	53                   	push   ebx
c0021cf6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0021cfa:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0021cfe:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0021d00:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0021d04:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0021d07:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021d0b:	83 fd 1f             	cmp    ebp,0x1f
c0021d0e:	7f 0b                	jg     c0021d1b <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0021d10:	0f b6 c2             	movzx  eax,dl
c0021d13:	d3 e0                	shl    eax,cl
c0021d15:	09 07                	or     DWORD PTR [edi],eax
c0021d17:	b0 01                	mov    al,0x1
c0021d19:	01 33                	add    DWORD PTR [ebx],esi
c0021d1b:	5b                   	pop    ebx
c0021d1c:	5e                   	pop    esi
c0021d1d:	5f                   	pop    edi
c0021d1e:	5d                   	pop    ebp
c0021d1f:	c3                   	ret    

c0021d20 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0021d20:	57                   	push   edi
c0021d21:	56                   	push   esi
c0021d22:	53                   	push   ebx
c0021d23:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0021d27:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021d2b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0021d2f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0021d33:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0021d35:	7c 17                	jl     c0021d4e <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0021d37:	8b 17                	mov    edx,DWORD PTR [edi]
c0021d39:	b8 01 00 00 00       	mov    eax,0x1
c0021d3e:	d3 e0                	shl    eax,cl
c0021d40:	48                   	dec    eax
c0021d41:	21 d0                	and    eax,edx
c0021d43:	d3 ea                	shr    edx,cl
c0021d45:	89 17                	mov    DWORD PTR [edi],edx
c0021d47:	29 0b                	sub    DWORD PTR [ebx],ecx
c0021d49:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0021d4c:	eb 05                	jmp    c0021d53 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0021d4e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021d51:	31 c0                	xor    eax,eax
c0021d53:	5b                   	pop    ebx
c0021d54:	5e                   	pop    esi
c0021d55:	5f                   	pop    edi
c0021d56:	c3                   	ret    

c0021d57 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0021d57:	83 ec 40             	sub    esp,0x40
c0021d5a:	8d 44 24 09          	lea    eax,[esp+0x9]
c0021d5e:	50                   	push   eax
c0021d5f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021d63:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021d67:	e8 49 fa ff ff       	call   c00217b5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021d6c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021d70:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0021d74:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0021d78:	89 10                	mov    DWORD PTR [eax],edx
c0021d7a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021d7d:	83 c4 4c             	add    esp,0x4c
c0021d80:	c3                   	ret    

c0021d81 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0021d81:	55                   	push   ebp
c0021d82:	57                   	push   edi
c0021d83:	56                   	push   esi
c0021d84:	53                   	push   ebx
c0021d85:	83 ec 40             	sub    esp,0x40
c0021d88:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0021d8c:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0021d90:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0021d94:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0021d98:	53                   	push   ebx
c0021d99:	56                   	push   esi
c0021d9a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0021d9e:	e8 12 fa ff ff       	call   c00217b5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021da3:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0021da7:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0021dab:	83 c4 0c             	add    esp,0xc
c0021dae:	53                   	push   ebx
c0021daf:	56                   	push   esi
c0021db0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0021db4:	e8 20 fb ff ff       	call   c00218d9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0021db9:	83 c4 4c             	add    esp,0x4c
c0021dbc:	5b                   	pop    ebx
c0021dbd:	5e                   	pop    esi
c0021dbe:	5f                   	pop    edi
c0021dbf:	5d                   	pop    ebp
c0021dc0:	c3                   	ret    

c0021dc1 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0021dc1:	55                   	push   ebp
c0021dc2:	57                   	push   edi
c0021dc3:	56                   	push   esi
c0021dc4:	31 f6                	xor    esi,esi
c0021dc6:	53                   	push   ebx
c0021dc7:	31 db                	xor    ebx,ebx
c0021dc9:	83 ec 40             	sub    esp,0x40
c0021dcc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0021dd4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0021ddc:	6a 12                	push   0x12
c0021dde:	68 ee 00 00 00       	push   0xee
c0021de3:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0021de7:	e8 04 e7 fd ff       	call   c00004f0 <memset>
c0021dec:	83 c4 10             	add    esp,0x10
c0021def:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0021df3:	6a 08                	push   0x8
c0021df5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0021df9:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0021dfd:	50                   	push   eax
c0021dfe:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0021e02:	55                   	push   ebp
c0021e03:	57                   	push   edi
c0021e04:	e8 e7 fe ff ff       	call   c0021cf0 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0021e09:	83 c4 10             	add    esp,0x10
c0021e0c:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0021e10:	50                   	push   eax
c0021e11:	6a 06                	push   0x6
c0021e13:	55                   	push   ebp
c0021e14:	57                   	push   edi
c0021e15:	e8 06 ff ff ff       	call   c0021d20 <CmGetShift(unsigned int*, int*, int, bool*)>
c0021e1a:	83 c4 10             	add    esp,0x10
c0021e1d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0021e22:	74 07                	je     c0021e2b <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0021e24:	46                   	inc    esi
c0021e25:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0021e29:	eb e1                	jmp    c0021e0c <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0021e2b:	43                   	inc    ebx
c0021e2c:	83 fb 12             	cmp    ebx,0x12
c0021e2f:	75 c2                	jne    c0021df3 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0021e31:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0021e35:	31 db                	xor    ebx,ebx
c0021e37:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0021e3a:	50                   	push   eax
c0021e3b:	50                   	push   eax
c0021e3c:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c0021e41:	43                   	inc    ebx
c0021e42:	8d 04 85 c0 3e 03 c0 	lea    eax,[eax*4-0x3ffcc140]
c0021e49:	50                   	push   eax
c0021e4a:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0021e4e:	e8 ed e9 fd ff       	call   c0000840 <strcat>
c0021e53:	83 c4 10             	add    esp,0x10
c0021e56:	83 fb 18             	cmp    ebx,0x18
c0021e59:	75 df                	jne    c0021e3a <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0021e5b:	83 c4 3c             	add    esp,0x3c
c0021e5e:	31 c0                	xor    eax,eax
c0021e60:	5b                   	pop    ebx
c0021e61:	5e                   	pop    esi
c0021e62:	5f                   	pop    edi
c0021e63:	5d                   	pop    ebp
c0021e64:	c3                   	ret    

c0021e65 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0021e65:	83 ec 40             	sub    esp,0x40
c0021e68:	8d 44 24 09          	lea    eax,[esp+0x9]
c0021e6c:	50                   	push   eax
c0021e6d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021e71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021e75:	e8 3b f9 ff ff       	call   c00217b5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021e7a:	58                   	pop    eax
c0021e7b:	5a                   	pop    edx
c0021e7c:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0021e80:	8d 44 24 15          	lea    eax,[esp+0x15]
c0021e84:	50                   	push   eax
c0021e85:	e8 37 ff ff ff       	call   c0021dc1 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0021e8a:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0021e8f:	83 c4 4c             	add    esp,0x4c
c0021e92:	c3                   	ret    

c0021e93 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0021e93:	55                   	push   ebp
c0021e94:	57                   	push   edi
c0021e95:	56                   	push   esi
c0021e96:	53                   	push   ebx
c0021e97:	31 db                	xor    ebx,ebx
c0021e99:	83 ec 70             	sub    esp,0x70
c0021e9c:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0021ea3:	6a 30                	push   0x30
c0021ea5:	6a 00                	push   0x0
c0021ea7:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0021eab:	56                   	push   esi
c0021eac:	e8 3f e6 fd ff       	call   c00004f0 <memset>
c0021eb1:	83 c4 10             	add    esp,0x10
c0021eb4:	83 ec 0c             	sub    esp,0xc
c0021eb7:	57                   	push   edi
c0021eb8:	e8 b3 e6 fd ff       	call   c0000570 <strlen>
c0021ebd:	83 c4 10             	add    esp,0x10
c0021ec0:	39 d8                	cmp    eax,ebx
c0021ec2:	76 16                	jbe    c0021eda <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0021ec4:	83 ec 0c             	sub    esp,0xc
c0021ec7:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0021ecb:	50                   	push   eax
c0021ecc:	e8 5f ea fd ff       	call   c0000930 <toupper>
c0021ed1:	83 c4 10             	add    esp,0x10
c0021ed4:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0021ed7:	43                   	inc    ebx
c0021ed8:	eb da                	jmp    c0021eb4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0021eda:	31 f6                	xor    esi,esi
c0021edc:	52                   	push   edx
c0021edd:	31 ff                	xor    edi,edi
c0021edf:	6a 18                	push   0x18
c0021ee1:	6a 3f                	push   0x3f
c0021ee3:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021ee7:	50                   	push   eax
c0021ee8:	e8 03 e6 fd ff       	call   c00004f0 <memset>
c0021eed:	83 c4 10             	add    esp,0x10
c0021ef0:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c0021ef4:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c0021ef8:	84 c0                	test   al,al
c0021efa:	0f 84 b0 00 00 00    	je     c0021fb0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0021f00:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0021f04:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c0021f09:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0021f0d:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c0021f12:	8d 6e 01             	lea    ebp,[esi+0x1]
c0021f15:	83 ec 0c             	sub    esp,0xc
c0021f18:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0021f1c:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0021f20:	53                   	push   ebx
c0021f21:	e8 4a e6 fd ff       	call   c0000570 <strlen>
c0021f26:	83 c4 10             	add    esp,0x10
c0021f29:	85 c0                	test   eax,eax
c0021f2b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0021f2f:	74 0b                	je     c0021f3c <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0021f31:	50                   	push   eax
c0021f32:	6a 01                	push   0x1
c0021f34:	53                   	push   ebx
c0021f35:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021f39:	50                   	push   eax
c0021f3a:	eb 0a                	jmp    c0021f46 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0021f3c:	50                   	push   eax
c0021f3d:	6a 00                	push   0x0
c0021f3f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f43:	50                   	push   eax
c0021f44:	6a 00                	push   0x0
c0021f46:	e8 44 fd ff ff       	call   c0021c8f <CmGetMatch(char*, char*, bool, bool*)>
c0021f4b:	83 c4 10             	add    esp,0x10
c0021f4e:	83 f8 ff             	cmp    eax,0xffffffff
c0021f51:	75 1a                	jne    c0021f6d <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0021f53:	83 ec 0c             	sub    esp,0xc
c0021f56:	68 dd 25 03 c0       	push   0xc00325dd
c0021f5b:	e8 eb e0 ff ff       	call   c002004b <KePanic(char const*)>
c0021f60:	83 c4 10             	add    esp,0x10
c0021f63:	b8 02 00 00 00       	mov    eax,0x2
c0021f68:	e9 bc 00 00 00       	jmp    c0022029 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0021f6d:	83 ff 18             	cmp    edi,0x18
c0021f70:	75 1a                	jne    c0021f8c <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0021f72:	83 ec 0c             	sub    esp,0xc
c0021f75:	68 f2 25 03 c0       	push   0xc00325f2
c0021f7a:	e8 cc e0 ff ff       	call   c002004b <KePanic(char const*)>
c0021f7f:	83 c4 10             	add    esp,0x10
c0021f82:	b8 01 00 00 00       	mov    eax,0x1
c0021f87:	e9 9d 00 00 00       	jmp    c0022029 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0021f8c:	47                   	inc    edi
c0021f8d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0021f92:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0021f96:	74 02                	je     c0021f9a <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c0021f98:	89 ee                	mov    esi,ebp
c0021f9a:	83 ec 0c             	sub    esp,0xc
c0021f9d:	53                   	push   ebx
c0021f9e:	e8 cd e5 fd ff       	call   c0000570 <strlen>
c0021fa3:	83 c4 10             	add    esp,0x10
c0021fa6:	85 c0                	test   eax,eax
c0021fa8:	74 06                	je     c0021fb0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0021faa:	46                   	inc    esi
c0021fab:	e9 40 ff ff ff       	jmp    c0021ef0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c0021fb0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021fb8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0021fc0:	31 f6                	xor    esi,esi
c0021fc2:	50                   	push   eax
c0021fc3:	31 ff                	xor    edi,edi
c0021fc5:	6a 12                	push   0x12
c0021fc7:	68 ee 00 00 00       	push   0xee
c0021fcc:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0021fd3:	e8 18 e5 fd ff       	call   c00004f0 <memset>
c0021fd8:	83 c4 10             	add    esp,0x10
c0021fdb:	83 fe 17             	cmp    esi,0x17
c0021fde:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c0021fe2:	7e 26                	jle    c002200a <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c0021fe4:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0021fe8:	50                   	push   eax
c0021fe9:	6a 08                	push   0x8
c0021feb:	55                   	push   ebp
c0021fec:	53                   	push   ebx
c0021fed:	e8 2e fd ff ff       	call   c0021d20 <CmGetShift(unsigned int*, int*, int, bool*)>
c0021ff2:	83 c4 10             	add    esp,0x10
c0021ff5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0021ffa:	74 26                	je     c0022022 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c0021ffc:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0022003:	4e                   	dec    esi
c0022004:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0022007:	47                   	inc    edi
c0022008:	eb 1c                	jmp    c0022026 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c002200a:	6a 06                	push   0x6
c002200c:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c0022011:	50                   	push   eax
c0022012:	55                   	push   ebp
c0022013:	53                   	push   ebx
c0022014:	e8 d7 fc ff ff       	call   c0021cf0 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0022019:	83 c4 10             	add    esp,0x10
c002201c:	84 c0                	test   al,al
c002201e:	75 06                	jne    c0022026 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0022020:	eb c2                	jmp    c0021fe4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c0022022:	31 c0                	xor    eax,eax
c0022024:	eb 03                	jmp    c0022029 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0022026:	46                   	inc    esi
c0022027:	eb b2                	jmp    c0021fdb <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c0022029:	83 c4 6c             	add    esp,0x6c
c002202c:	5b                   	pop    ebx
c002202d:	5e                   	pop    esi
c002202e:	5f                   	pop    edi
c002202f:	5d                   	pop    ebp
c0022030:	c3                   	ret    

c0022031 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0022031:	53                   	push   ebx
c0022032:	83 ec 3c             	sub    esp,0x3c
c0022035:	6a 2b                	push   0x2b
c0022037:	6a 00                	push   0x0
c0022039:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c002203d:	53                   	push   ebx
c002203e:	e8 ad e4 fd ff       	call   c00004f0 <memset>
c0022043:	58                   	pop    eax
c0022044:	5a                   	pop    edx
c0022045:	8d 44 24 11          	lea    eax,[esp+0x11]
c0022049:	50                   	push   eax
c002204a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c002204e:	e8 40 fe ff ff       	call   c0021e93 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0022053:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0022058:	83 c4 0c             	add    esp,0xc
c002205b:	6a 15                	push   0x15
c002205d:	6a 00                	push   0x0
c002205f:	8d 44 24 27          	lea    eax,[esp+0x27]
c0022063:	50                   	push   eax
c0022064:	e8 87 e4 fd ff       	call   c00004f0 <memset>
c0022069:	53                   	push   ebx
c002206a:	6a 00                	push   0x0
c002206c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022070:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022074:	e8 e6 f9 ff ff       	call   c0021a5f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0022079:	83 c4 58             	add    esp,0x58
c002207c:	5b                   	pop    ebx
c002207d:	c3                   	ret    

c002207e <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c002207e:	56                   	push   esi
c002207f:	53                   	push   ebx
c0022080:	83 ec 48             	sub    esp,0x48
c0022083:	6a 12                	push   0x12
c0022085:	68 ff 00 00 00       	push   0xff
c002208a:	8d 74 24 0f          	lea    esi,[esp+0xf]
c002208e:	56                   	push   esi
c002208f:	e8 5c e4 fd ff       	call   c00004f0 <memset>
c0022094:	5a                   	pop    edx
c0022095:	59                   	pop    ecx
c0022096:	56                   	push   esi
c0022097:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c002209b:	e8 f3 fd ff ff       	call   c0021e93 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00220a0:	83 c4 10             	add    esp,0x10
c00220a3:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00220a7:	85 db                	test   ebx,ebx
c00220a9:	74 42                	je     c00220ed <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c00220ab:	50                   	push   eax
c00220ac:	8d 44 24 19          	lea    eax,[esp+0x19]
c00220b0:	50                   	push   eax
c00220b1:	53                   	push   ebx
c00220b2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00220b6:	e8 fa f6 ff ff       	call   c00217b5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00220bb:	83 c4 0c             	add    esp,0xc
c00220be:	6a 12                	push   0x12
c00220c0:	8d 44 24 21          	lea    eax,[esp+0x21]
c00220c4:	50                   	push   eax
c00220c5:	56                   	push   esi
c00220c6:	e8 b5 e2 fd ff       	call   c0000380 <memcmp>
c00220cb:	83 c4 10             	add    esp,0x10
c00220ce:	85 c0                	test   eax,eax
c00220d0:	74 1e                	je     c00220f0 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c00220d2:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c00220d7:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c00220dc:	c1 e3 08             	shl    ebx,0x8
c00220df:	09 d8                	or     eax,ebx
c00220e1:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c00220e6:	c1 e3 10             	shl    ebx,0x10
c00220e9:	09 c3                	or     ebx,eax
c00220eb:	eb ba                	jmp    c00220a7 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c00220ed:	83 cb ff             	or     ebx,0xffffffff
c00220f0:	89 d8                	mov    eax,ebx
c00220f2:	83 c4 44             	add    esp,0x44
c00220f5:	5b                   	pop    ebx
c00220f6:	5e                   	pop    esi
c00220f7:	c3                   	ret    

c00220f8 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c00220f8:	57                   	push   edi
c00220f9:	56                   	push   esi
c00220fa:	53                   	push   ebx
c00220fb:	83 ec 34             	sub    esp,0x34
c00220fe:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0022102:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0022106:	6a 2b                	push   0x2b
c0022108:	6a 00                	push   0x0
c002210a:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c002210e:	53                   	push   ebx
c002210f:	e8 dc e3 fd ff       	call   c00004f0 <memset>
c0022114:	58                   	pop    eax
c0022115:	5a                   	pop    edx
c0022116:	8d 44 24 11          	lea    eax,[esp+0x11]
c002211a:	50                   	push   eax
c002211b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c002211f:	e8 6f fd ff ff       	call   c0021e93 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0022124:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0022128:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c002212c:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0022130:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0022134:	53                   	push   ebx
c0022135:	6a 00                	push   0x0
c0022137:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c002213b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c002213f:	e8 1b f9 ff ff       	call   c0021a5f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0022144:	83 c4 50             	add    esp,0x50
c0022147:	5b                   	pop    ebx
c0022148:	5e                   	pop    esi
c0022149:	5f                   	pop    edi
c002214a:	c3                   	ret    

c002214b <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c002214b:	55                   	push   ebp
c002214c:	57                   	push   edi
c002214d:	56                   	push   esi
c002214e:	53                   	push   ebx
c002214f:	83 ec 40             	sub    esp,0x40
c0022152:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0022156:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002215a:	6a 2b                	push   0x2b
c002215c:	6a 00                	push   0x0
c002215e:	8d 74 24 11          	lea    esi,[esp+0x11]
c0022162:	56                   	push   esi
c0022163:	e8 88 e3 fd ff       	call   c00004f0 <memset>
c0022168:	5f                   	pop    edi
c0022169:	89 ef                	mov    edi,ebp
c002216b:	58                   	pop    eax
c002216c:	8d 44 24 11          	lea    eax,[esp+0x11]
c0022170:	50                   	push   eax
c0022171:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0022175:	e8 19 fd ff ff       	call   c0021e93 <CmConvertToInternalFilename(char const*, unsigned char*)>
c002217a:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c002217f:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0022184:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0022189:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c002218e:	83 c4 10             	add    esp,0x10
c0022191:	85 ed                	test   ebp,ebp
c0022193:	74 14                	je     c00221a9 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0022195:	51                   	push   ecx
c0022196:	51                   	push   ecx
c0022197:	57                   	push   edi
c0022198:	53                   	push   ebx
c0022199:	e8 09 f7 ff ff       	call   c00218a7 <CmGetNext(Reghive_Tag*, int)>
c002219e:	83 c4 10             	add    esp,0x10
c00221a1:	85 c0                	test   eax,eax
c00221a3:	74 04                	je     c00221a9 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00221a5:	89 c7                	mov    edi,eax
c00221a7:	eb e8                	jmp    c0022191 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c00221a9:	56                   	push   esi
c00221aa:	6a 00                	push   0x0
c00221ac:	57                   	push   edi
c00221ad:	53                   	push   ebx
c00221ae:	e8 ac f8 ff ff       	call   c0021a5f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00221b3:	83 c4 0c             	add    esp,0xc
c00221b6:	89 c7                	mov    edi,eax
c00221b8:	56                   	push   esi
c00221b9:	50                   	push   eax
c00221ba:	53                   	push   ebx
c00221bb:	e8 f5 f5 ff ff       	call   c00217b5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00221c0:	58                   	pop    eax
c00221c1:	5a                   	pop    edx
c00221c2:	6a 6c                	push   0x6c
c00221c4:	6a 00                	push   0x0
c00221c6:	6a 00                	push   0x0
c00221c8:	68 03 26 03 c0       	push   0xc0032603
c00221cd:	57                   	push   edi
c00221ce:	53                   	push   ebx
c00221cf:	e8 24 ff ff ff       	call   c00220f8 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c00221d4:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00221d8:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c00221dc:	c1 e8 10             	shr    eax,0x10
c00221df:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00221e3:	83 c4 1c             	add    esp,0x1c
c00221e6:	56                   	push   esi
c00221e7:	57                   	push   edi
c00221e8:	53                   	push   ebx
c00221e9:	e8 eb f6 ff ff       	call   c00218d9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00221ee:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c00221f3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00221f8:	c1 e0 08             	shl    eax,0x8
c00221fb:	09 c2                	or     edx,eax
c00221fd:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0022202:	83 c4 4c             	add    esp,0x4c
c0022205:	c1 e0 10             	shl    eax,0x10
c0022208:	5b                   	pop    ebx
c0022209:	09 d0                	or     eax,edx
c002220b:	5e                   	pop    esi
c002220c:	5f                   	pop    edi
c002220d:	5d                   	pop    ebp
c002220e:	c3                   	ret    

c002220f <zStrtok(char*, char const*)>:
c002220f:	55                   	push   ebp
c0022210:	57                   	push   edi
c0022211:	56                   	push   esi
c0022212:	53                   	push   ebx
c0022213:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022217:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002221b:	85 db                	test   ebx,ebx
c002221d:	74 2f                	je     c002224e <zStrtok(char*, char const*)+0x3f>
c002221f:	85 c0                	test   eax,eax
c0022221:	75 09                	jne    c002222c <zStrtok(char*, char const*)+0x1d>
c0022223:	a1 f0 f9 03 c0       	mov    eax,ds:0xc003f9f0
c0022228:	85 c0                	test   eax,eax
c002222a:	74 50                	je     c002227c <zStrtok(char*, char const*)+0x6d>
c002222c:	31 c9                	xor    ecx,ecx
c002222e:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0022232:	74 03                	je     c0022237 <zStrtok(char*, char const*)+0x28>
c0022234:	41                   	inc    ecx
c0022235:	eb f7                	jmp    c002222e <zStrtok(char*, char const*)+0x1f>
c0022237:	31 d2                	xor    edx,edx
c0022239:	39 ca                	cmp    edx,ecx
c002223b:	74 15                	je     c0022252 <zStrtok(char*, char const*)+0x43>
c002223d:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0022241:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0022244:	8d 3c 10             	lea    edi,[eax+edx*1]
c0022247:	39 ee                	cmp    esi,ebp
c0022249:	74 13                	je     c002225e <zStrtok(char*, char const*)+0x4f>
c002224b:	42                   	inc    edx
c002224c:	eb eb                	jmp    c0022239 <zStrtok(char*, char const*)+0x2a>
c002224e:	31 c0                	xor    eax,eax
c0022250:	eb 2a                	jmp    c002227c <zStrtok(char*, char const*)+0x6d>
c0022252:	c7 05 f0 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9f0,0x0
c002225c:	eb 1e                	jmp    c002227c <zStrtok(char*, char const*)+0x6d>
c002225e:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0022261:	39 ce                	cmp    esi,ecx
c0022263:	75 0a                	jne    c002226f <zStrtok(char*, char const*)+0x60>
c0022265:	40                   	inc    eax
c0022266:	a3 f0 f9 03 c0       	mov    ds:0xc003f9f0,eax
c002226b:	89 d8                	mov    eax,ebx
c002226d:	eb 0d                	jmp    c002227c <zStrtok(char*, char const*)+0x6d>
c002226f:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0022273:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0022276:	89 15 f0 f9 03 c0    	mov    DWORD PTR ds:0xc003f9f0,edx
c002227c:	5b                   	pop    ebx
c002227d:	5e                   	pop    esi
c002227e:	5f                   	pop    edi
c002227f:	5d                   	pop    ebp
c0022280:	c3                   	ret    

c0022281 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0022281:	57                   	push   edi
c0022282:	56                   	push   esi
c0022283:	53                   	push   ebx
c0022284:	81 ec 08 01 00 00    	sub    esp,0x108
c002228a:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0022291:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0022298:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c002229c:	53                   	push   ebx
c002229d:	e8 9e e3 fd ff       	call   c0000640 <strcpy>
c00222a2:	59                   	pop    ecx
c00222a3:	5e                   	pop    esi
c00222a4:	68 a5 29 03 c0       	push   0xc00329a5
c00222a9:	53                   	push   ebx
c00222aa:	bb 01 00 00 00       	mov    ebx,0x1
c00222af:	e8 5b ff ff ff       	call   c002220f <zStrtok(char*, char const*)>
c00222b4:	83 c4 10             	add    esp,0x10
c00222b7:	85 c0                	test   eax,eax
c00222b9:	74 3b                	je     c00222f6 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00222bb:	52                   	push   edx
c00222bc:	50                   	push   eax
c00222bd:	6a 01                	push   0x1
c00222bf:	57                   	push   edi
c00222c0:	e8 b9 fd ff ff       	call   c002207e <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c00222c5:	59                   	pop    ecx
c00222c6:	89 c3                	mov    ebx,eax
c00222c8:	5e                   	pop    esi
c00222c9:	68 a5 29 03 c0       	push   0xc00329a5
c00222ce:	6a 00                	push   0x0
c00222d0:	e8 3a ff ff ff       	call   c002220f <zStrtok(char*, char const*)>
c00222d5:	83 c4 10             	add    esp,0x10
c00222d8:	89 c6                	mov    esi,eax
c00222da:	85 c0                	test   eax,eax
c00222dc:	74 18                	je     c00222f6 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00222de:	52                   	push   edx
c00222df:	52                   	push   edx
c00222e0:	53                   	push   ebx
c00222e1:	57                   	push   edi
c00222e2:	e8 81 f5 ff ff       	call   c0021868 <CmEnterDirectory(Reghive_Tag*, int)>
c00222e7:	83 c4 10             	add    esp,0x10
c00222ea:	89 c3                	mov    ebx,eax
c00222ec:	83 f8 ff             	cmp    eax,0xffffffff
c00222ef:	74 05                	je     c00222f6 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00222f1:	50                   	push   eax
c00222f2:	56                   	push   esi
c00222f3:	53                   	push   ebx
c00222f4:	eb c9                	jmp    c00222bf <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c00222f6:	81 c4 00 01 00 00    	add    esp,0x100
c00222fc:	89 d8                	mov    eax,ebx
c00222fe:	5b                   	pop    ebx
c00222ff:	5e                   	pop    esi
c0022300:	5f                   	pop    edi
c0022301:	c3                   	ret    

c0022302 <CmDisplayTree(Reghive_Tag*, int, int)>:
c0022302:	55                   	push   ebp
c0022303:	57                   	push   edi
c0022304:	56                   	push   esi
c0022305:	53                   	push   ebx
c0022306:	83 ec 5c             	sub    esp,0x5c
c0022309:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c002230d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0022311:	85 db                	test   ebx,ebx
c0022313:	0f 8e 84 00 00 00    	jle    c002239d <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0022319:	31 ed                	xor    ebp,ebp
c002231b:	57                   	push   edi
c002231c:	6a 32                	push   0x32
c002231e:	6a 00                	push   0x0
c0022320:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0022324:	57                   	push   edi
c0022325:	e8 c6 e1 fd ff       	call   c00004f0 <memset>
c002232a:	83 c4 0c             	add    esp,0xc
c002232d:	57                   	push   edi
c002232e:	53                   	push   ebx
c002232f:	56                   	push   esi
c0022330:	e8 30 fb ff ff       	call   c0021e65 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0022335:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022339:	83 c4 10             	add    esp,0x10
c002233c:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0022340:	7d 13                	jge    c0022355 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0022342:	83 ec 0c             	sub    esp,0xc
c0022345:	45                   	inc    ebp
c0022346:	68 4b 2d 03 c0       	push   0xc0032d4b
c002234b:	e8 f1 6d ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0022350:	83 c4 10             	add    esp,0x10
c0022353:	eb e7                	jmp    c002233c <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0022355:	51                   	push   ecx
c0022356:	57                   	push   edi
c0022357:	53                   	push   ebx
c0022358:	68 09 26 03 c0       	push   0xc0032609
c002235d:	e8 df 6d ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0022362:	83 c4 10             	add    esp,0x10
c0022365:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c002236a:	75 1e                	jne    c002238a <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c002236c:	52                   	push   edx
c002236d:	52                   	push   edx
c002236e:	53                   	push   ebx
c002236f:	56                   	push   esi
c0022370:	e8 f3 f4 ff ff       	call   c0021868 <CmEnterDirectory(Reghive_Tag*, int)>
c0022375:	83 c4 0c             	add    esp,0xc
c0022378:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c002237c:	8d 51 04             	lea    edx,[ecx+0x4]
c002237f:	52                   	push   edx
c0022380:	50                   	push   eax
c0022381:	56                   	push   esi
c0022382:	e8 7b ff ff ff       	call   c0022302 <CmDisplayTree(Reghive_Tag*, int, int)>
c0022387:	83 c4 10             	add    esp,0x10
c002238a:	50                   	push   eax
c002238b:	50                   	push   eax
c002238c:	53                   	push   ebx
c002238d:	56                   	push   esi
c002238e:	e8 14 f5 ff ff       	call   c00218a7 <CmGetNext(Reghive_Tag*, int)>
c0022393:	83 c4 10             	add    esp,0x10
c0022396:	89 c3                	mov    ebx,eax
c0022398:	e9 74 ff ff ff       	jmp    c0022311 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c002239d:	83 c4 5c             	add    esp,0x5c
c00223a0:	5b                   	pop    ebx
c00223a1:	5e                   	pop    esi
c00223a2:	5f                   	pop    edi
c00223a3:	5d                   	pop    ebp
c00223a4:	c3                   	ret    

c00223a5 <CmSplitFinalSlashInPlace(char*)>:
c00223a5:	53                   	push   ebx
c00223a6:	83 ec 14             	sub    esp,0x14
c00223a9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00223ad:	53                   	push   ebx
c00223ae:	e8 bd e1 fd ff       	call   c0000570 <strlen>
c00223b3:	83 c4 10             	add    esp,0x10
c00223b6:	48                   	dec    eax
c00223b7:	85 c0                	test   eax,eax
c00223b9:	74 15                	je     c00223d0 <CmSplitFinalSlashInPlace(char*)+0x2b>
c00223bb:	8d 14 03             	lea    edx,[ebx+eax*1]
c00223be:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00223c2:	75 09                	jne    c00223cd <CmSplitFinalSlashInPlace(char*)+0x28>
c00223c4:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00223c7:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00223cb:	eb 05                	jmp    c00223d2 <CmSplitFinalSlashInPlace(char*)+0x2d>
c00223cd:	48                   	dec    eax
c00223ce:	eb e7                	jmp    c00223b7 <CmSplitFinalSlashInPlace(char*)+0x12>
c00223d0:	31 c0                	xor    eax,eax
c00223d2:	83 c4 08             	add    esp,0x8
c00223d5:	5b                   	pop    ebx
c00223d6:	c3                   	ret    

c00223d7 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00223d7:	55                   	push   ebp
c00223d8:	57                   	push   edi
c00223d9:	56                   	push   esi
c00223da:	53                   	push   ebx
c00223db:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00223e1:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c00223e8:	8a 13                	mov    dl,BYTE PTR [ebx]
c00223ea:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00223ed:	80 fa 40             	cmp    dl,0x40
c00223f0:	75 1c                	jne    c002240e <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c00223f2:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c00223f5:	85 c9                	test   ecx,ecx
c00223f7:	0f 84 09 01 00 00    	je     c0022506 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c00223fd:	8d 43 01             	lea    eax,[ebx+0x1]
c0022400:	83 f9 3a             	cmp    ecx,0x3a
c0022403:	74 04                	je     c0022409 <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c0022405:	89 c3                	mov    ebx,eax
c0022407:	eb e9                	jmp    c00223f2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0022409:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c002240c:	89 c3                	mov    ebx,eax
c002240e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0022412:	50                   	push   eax
c0022413:	6a 40                	push   0x40
c0022415:	6a 00                	push   0x0
c0022417:	8d 44 24 24          	lea    eax,[esp+0x24]
c002241b:	50                   	push   eax
c002241c:	e8 cf e0 fd ff       	call   c00004f0 <memset>
c0022421:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0022428:	31 c0                	xor    eax,eax
c002242a:	83 c4 10             	add    esp,0x10
c002242d:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c0022432:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0022435:	89 d1                	mov    ecx,edx
c0022437:	85 d2                	test   edx,edx
c0022439:	0f 84 c7 00 00 00    	je     c0022506 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c002243f:	3d c7 00 00 00       	cmp    eax,0xc7
c0022444:	0f 8f bc 00 00 00    	jg     c0022506 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c002244a:	83 fa 0a             	cmp    edx,0xa
c002244d:	0f 85 a4 00 00 00    	jne    c00224f7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c0022453:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0022458:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c002245d:	89 c8                	mov    eax,ecx
c002245f:	a8 df                	test   al,0xdf
c0022461:	0f 94 c2             	sete   dl
c0022464:	83 f9 23             	cmp    ecx,0x23
c0022467:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c002246c:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c0022470:	80 e2 01             	and    dl,0x1
c0022473:	75 4a                	jne    c00224bf <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0022475:	83 e8 09             	sub    eax,0x9
c0022478:	3c 01                	cmp    al,0x1
c002247a:	76 43                	jbe    c00224bf <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c002247c:	83 f9 5b             	cmp    ecx,0x5b
c002247f:	75 42                	jne    c00224c3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0022481:	83 fe 40             	cmp    esi,0x40
c0022484:	75 39                	jne    c00224bf <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0022486:	83 ec 0c             	sub    esp,0xc
c0022489:	8d 54 24 65          	lea    edx,[esp+0x65]
c002248d:	52                   	push   edx
c002248e:	e8 dd e0 fd ff       	call   c0000570 <strlen>
c0022493:	83 c4 10             	add    esp,0x10
c0022496:	83 f8 3f             	cmp    eax,0x3f
c0022499:	77 6b                	ja     c0022506 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c002249b:	50                   	push   eax
c002249c:	50                   	push   eax
c002249d:	8d 54 24 61          	lea    edx,[esp+0x61]
c00224a1:	52                   	push   edx
c00224a2:	8d 54 24 24          	lea    edx,[esp+0x24]
c00224a6:	52                   	push   edx
c00224a7:	e8 94 e1 fd ff       	call   c0000640 <strcpy>
c00224ac:	58                   	pop    eax
c00224ad:	8d 54 24 24          	lea    edx,[esp+0x24]
c00224b1:	52                   	push   edx
c00224b2:	e8 b9 e0 fd ff       	call   c0000570 <strlen>
c00224b7:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c00224bc:	83 c4 10             	add    esp,0x10
c00224bf:	31 d2                	xor    edx,edx
c00224c1:	eb 3b                	jmp    c00224fe <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c00224c3:	83 fe 40             	cmp    esi,0x40
c00224c6:	74 06                	je     c00224ce <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c00224c8:	8d 44 24 58          	lea    eax,[esp+0x58]
c00224cc:	eb 20                	jmp    c00224ee <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c00224ce:	50                   	push   eax
c00224cf:	50                   	push   eax
c00224d0:	55                   	push   ebp
c00224d1:	8d 44 24 24          	lea    eax,[esp+0x24]
c00224d5:	50                   	push   eax
c00224d6:	e8 75 e2 fd ff       	call   c0000750 <strcmp>
c00224db:	83 c4 10             	add    esp,0x10
c00224de:	85 c0                	test   eax,eax
c00224e0:	75 dd                	jne    c00224bf <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c00224e2:	eb e4                	jmp    c00224c8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c00224e4:	8d 50 01             	lea    edx,[eax+0x1]
c00224e7:	83 f9 3d             	cmp    ecx,0x3d
c00224ea:	74 1e                	je     c002250a <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c00224ec:	89 d0                	mov    eax,edx
c00224ee:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00224f1:	85 c9                	test   ecx,ecx
c00224f3:	75 ef                	jne    c00224e4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c00224f5:	eb 0f                	jmp    c0022506 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c00224f7:	8d 50 01             	lea    edx,[eax+0x1]
c00224fa:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c00224fe:	47                   	inc    edi
c00224ff:	89 d0                	mov    eax,edx
c0022501:	e9 2c ff ff ff       	jmp    c0022432 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c0022506:	31 c0                	xor    eax,eax
c0022508:	eb 33                	jmp    c002253d <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c002250a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002250e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0022511:	50                   	push   eax
c0022512:	50                   	push   eax
c0022513:	8d 44 24 60          	lea    eax,[esp+0x60]
c0022517:	50                   	push   eax
c0022518:	53                   	push   ebx
c0022519:	e8 32 e2 fd ff       	call   c0000750 <strcmp>
c002251e:	83 c4 10             	add    esp,0x10
c0022521:	85 c0                	test   eax,eax
c0022523:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022527:	75 96                	jne    c00224bf <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0022529:	51                   	push   ecx
c002252a:	51                   	push   ecx
c002252b:	52                   	push   edx
c002252c:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0022533:	e8 08 e1 fd ff       	call   c0000640 <strcpy>
c0022538:	83 c4 10             	add    esp,0x10
c002253b:	b0 01                	mov    al,0x1
c002253d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0022543:	5b                   	pop    ebx
c0022544:	5e                   	pop    esi
c0022545:	5f                   	pop    edi
c0022546:	5d                   	pop    ebp
c0022547:	c3                   	ret    

c0022548 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0022548:	57                   	push   edi
c0022549:	56                   	push   esi
c002254a:	53                   	push   ebx
c002254b:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022551:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0022558:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c002255f:	53                   	push   ebx
c0022560:	e8 0b e0 fd ff       	call   c0000570 <strlen>
c0022565:	89 34 24             	mov    DWORD PTR [esp],esi
c0022568:	89 c7                	mov    edi,eax
c002256a:	e8 01 e0 fd ff       	call   c0000570 <strlen>
c002256f:	83 c4 10             	add    esp,0x10
c0022572:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0022576:	3d ff 00 00 00       	cmp    eax,0xff
c002257b:	0f 87 d3 00 00 00    	ja     c0022654 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0022581:	57                   	push   edi
c0022582:	57                   	push   edi
c0022583:	56                   	push   esi
c0022584:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0022588:	56                   	push   esi
c0022589:	e8 b2 e0 fd ff       	call   c0000640 <strcpy>
c002258e:	58                   	pop    eax
c002258f:	5a                   	pop    edx
c0022590:	68 a5 29 03 c0       	push   0xc00329a5
c0022595:	56                   	push   esi
c0022596:	e8 a5 e2 fd ff       	call   c0000840 <strcat>
c002259b:	59                   	pop    ecx
c002259c:	5f                   	pop    edi
c002259d:	53                   	push   ebx
c002259e:	56                   	push   esi
c002259f:	e8 9c e2 fd ff       	call   c0000840 <strcat>
c00225a4:	58                   	pop    eax
c00225a5:	5a                   	pop    edx
c00225a6:	68 13 26 03 c0       	push   0xc0032613
c00225ab:	56                   	push   esi
c00225ac:	e8 8f e2 fd ff       	call   c0000840 <strcat>
c00225b1:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00225b8:	e8 f5 3c ff ff       	call   c00162b2 <malloc>
c00225bd:	83 c4 0c             	add    esp,0xc
c00225c0:	89 c3                	mov    ebx,eax
c00225c2:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c00225c8:	56                   	push   esi
c00225c9:	50                   	push   eax
c00225ca:	e8 79 7d ff ff       	call   c001a348 <File::File(char const*, Process*)>
c00225cf:	83 c4 10             	add    esp,0x10
c00225d2:	85 db                	test   ebx,ebx
c00225d4:	74 7e                	je     c0022654 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00225d6:	51                   	push   ecx
c00225d7:	51                   	push   ecx
c00225d8:	6a 01                	push   0x1
c00225da:	53                   	push   ebx
c00225db:	e8 86 7d ff ff       	call   c001a366 <File::open(FileOpenMode)>
c00225e0:	83 c4 10             	add    esp,0x10
c00225e3:	85 c0                	test   eax,eax
c00225e5:	74 08                	je     c00225ef <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c00225e7:	83 ec 0c             	sub    esp,0xc
c00225ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c00225ec:	53                   	push   ebx
c00225ed:	eb 5f                	jmp    c002264e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c00225ef:	52                   	push   edx
c00225f0:	8d 44 24 17          	lea    eax,[esp+0x17]
c00225f4:	50                   	push   eax
c00225f5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00225f9:	50                   	push   eax
c00225fa:	53                   	push   ebx
c00225fb:	e8 68 80 ff ff       	call   c001a668 <File::stat(unsigned long long*, bool*)>
c0022600:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0022604:	83 c4 10             	add    esp,0x10
c0022607:	89 c1                	mov    ecx,eax
c0022609:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c002260d:	74 31                	je     c0022640 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c002260f:	83 ec 0c             	sub    esp,0xc
c0022612:	50                   	push   eax
c0022613:	e8 9a 3c ff ff       	call   c00162b2 <malloc>
c0022618:	89 c6                	mov    esi,eax
c002261a:	58                   	pop    eax
c002261b:	8b 03                	mov    eax,DWORD PTR [ebx]
c002261d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0022621:	52                   	push   edx
c0022622:	56                   	push   esi
c0022623:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0022627:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002262b:	53                   	push   ebx
c002262c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c002262f:	83 c4 20             	add    esp,0x20
c0022632:	85 c0                	test   eax,eax
c0022634:	75 0a                	jne    c0022640 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0022636:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002263a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c002263e:	74 18                	je     c0022658 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0022640:	83 ec 0c             	sub    esp,0xc
c0022643:	53                   	push   ebx
c0022644:	e8 7b 7d ff ff       	call   c001a3c4 <File::close()>
c0022649:	8b 03                	mov    eax,DWORD PTR [ebx]
c002264b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002264e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022651:	83 c4 10             	add    esp,0x10
c0022654:	31 c0                	xor    eax,eax
c0022656:	eb 3b                	jmp    c0022693 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0022658:	83 ec 0c             	sub    esp,0xc
c002265b:	53                   	push   ebx
c002265c:	e8 63 7d ff ff       	call   c001a3c4 <File::close()>
c0022661:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022663:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022666:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022669:	83 c4 0c             	add    esp,0xc
c002266c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0022673:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c002267a:	56                   	push   esi
c002267b:	e8 57 fd ff ff       	call   c00223d7 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0022680:	89 34 24             	mov    DWORD PTR [esp],esi
c0022683:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022687:	e8 36 3c ff ff       	call   c00162c2 <free>
c002268c:	83 c4 10             	add    esp,0x10
c002268f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022693:	81 c4 20 01 00 00    	add    esp,0x120
c0022699:	5b                   	pop    ebx
c002269a:	5e                   	pop    esi
c002269b:	5f                   	pop    edi
c002269c:	c3                   	ret    

c002269d <Reg::getLine(char*, char*, char*)>:
c002269d:	57                   	push   edi
c002269e:	56                   	push   esi
c002269f:	53                   	push   ebx
c00226a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00226a4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00226a8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00226ac:	57                   	push   edi
c00226ad:	56                   	push   esi
c00226ae:	53                   	push   ebx
c00226af:	68 18 26 03 c0       	push   0xc0032618
c00226b4:	e8 8f fe ff ff       	call   c0022548 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00226b9:	83 c4 10             	add    esp,0x10
c00226bc:	84 c0                	test   al,al
c00226be:	75 10                	jne    c00226d0 <Reg::getLine(char*, char*, char*)+0x33>
c00226c0:	57                   	push   edi
c00226c1:	56                   	push   esi
c00226c2:	53                   	push   ebx
c00226c3:	68 3d 26 03 c0       	push   0xc003263d
c00226c8:	e8 7b fe ff ff       	call   c0022548 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00226cd:	83 c4 10             	add    esp,0x10
c00226d0:	5b                   	pop    ebx
c00226d1:	5e                   	pop    esi
c00226d2:	5f                   	pop    edi
c00226d3:	c3                   	ret    

c00226d4 <Reg::readInt(char*, char*, int*)>:
c00226d4:	55                   	push   ebp
c00226d5:	57                   	push   edi
c00226d6:	56                   	push   esi
c00226d7:	53                   	push   ebx
c00226d8:	81 ec f0 00 00 00    	sub    esp,0xf0
c00226de:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00226e2:	55                   	push   ebp
c00226e3:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00226ea:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00226f1:	e8 a7 ff ff ff       	call   c002269d <Reg::getLine(char*, char*, char*)>
c00226f6:	83 c4 10             	add    esp,0x10
c00226f9:	84 c0                	test   al,al
c00226fb:	0f 84 b6 00 00 00    	je     c00227b7 <Reg::readInt(char*, char*, int*)+0xe3>
c0022701:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0022706:	83 fa 2b             	cmp    edx,0x2b
c0022709:	74 0c                	je     c0022717 <Reg::readInt(char*, char*, int*)+0x43>
c002270b:	83 fa 2d             	cmp    edx,0x2d
c002270e:	75 0e                	jne    c002271e <Reg::readInt(char*, char*, int*)+0x4a>
c0022710:	ba 01 00 00 00       	mov    edx,0x1
c0022715:	eb 0b                	jmp    c0022722 <Reg::readInt(char*, char*, int*)+0x4e>
c0022717:	ba 01 00 00 00       	mov    edx,0x1
c002271c:	eb 02                	jmp    c0022720 <Reg::readInt(char*, char*, int*)+0x4c>
c002271e:	31 d2                	xor    edx,edx
c0022720:	31 c0                	xor    eax,eax
c0022722:	be 0a 00 00 00       	mov    esi,0xa
c0022727:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c002272c:	75 21                	jne    c002274f <Reg::readInt(char*, char*, int*)+0x7b>
c002272e:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0022733:	83 f9 78             	cmp    ecx,0x78
c0022736:	75 0a                	jne    c0022742 <Reg::readInt(char*, char*, int*)+0x6e>
c0022738:	83 c2 02             	add    edx,0x2
c002273b:	be 10 00 00 00       	mov    esi,0x10
c0022740:	eb 0d                	jmp    c002274f <Reg::readInt(char*, char*, int*)+0x7b>
c0022742:	83 f9 62             	cmp    ecx,0x62
c0022745:	75 08                	jne    c002274f <Reg::readInt(char*, char*, int*)+0x7b>
c0022747:	83 c2 02             	add    edx,0x2
c002274a:	be 02 00 00 00       	mov    esi,0x2
c002274f:	01 d5                	add    ebp,edx
c0022751:	31 d2                	xor    edx,edx
c0022753:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0022757:	83 f9 0d             	cmp    ecx,0xd
c002275a:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c002275e:	0f 94 c3             	sete   bl
c0022761:	85 c9                	test   ecx,ecx
c0022763:	89 df                	mov    edi,ebx
c0022765:	0f 94 c3             	sete   bl
c0022768:	09 df                	or     edi,ebx
c002276a:	89 fb                	mov    ebx,edi
c002276c:	83 e7 01             	and    edi,0x1
c002276f:	75 35                	jne    c00227a6 <Reg::readInt(char*, char*, int*)+0xd2>
c0022771:	0f af d6             	imul   edx,esi
c0022774:	83 fe 10             	cmp    esi,0x10
c0022777:	75 26                	jne    c002279f <Reg::readInt(char*, char*, int*)+0xcb>
c0022779:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002277d:	83 ef 41             	sub    edi,0x41
c0022780:	89 fb                	mov    ebx,edi
c0022782:	80 fb 05             	cmp    bl,0x5
c0022785:	77 06                	ja     c002278d <Reg::readInt(char*, char*, int*)+0xb9>
c0022787:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c002278b:	eb 16                	jmp    c00227a3 <Reg::readInt(char*, char*, int*)+0xcf>
c002278d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022791:	83 eb 61             	sub    ebx,0x61
c0022794:	80 fb 05             	cmp    bl,0x5
c0022797:	77 06                	ja     c002279f <Reg::readInt(char*, char*, int*)+0xcb>
c0022799:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c002279d:	eb 04                	jmp    c00227a3 <Reg::readInt(char*, char*, int*)+0xcf>
c002279f:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c00227a3:	45                   	inc    ebp
c00227a4:	eb ad                	jmp    c0022753 <Reg::readInt(char*, char*, int*)+0x7f>
c00227a6:	84 c0                	test   al,al
c00227a8:	74 02                	je     c00227ac <Reg::readInt(char*, char*, int*)+0xd8>
c00227aa:	f7 da                	neg    edx
c00227ac:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00227b3:	89 10                	mov    DWORD PTR [eax],edx
c00227b5:	88 d8                	mov    al,bl
c00227b7:	81 c4 ec 00 00 00    	add    esp,0xec
c00227bd:	5b                   	pop    ebx
c00227be:	5e                   	pop    esi
c00227bf:	5f                   	pop    edi
c00227c0:	5d                   	pop    ebp
c00227c1:	c3                   	ret    

c00227c2 <Reg::readString(char*, char*, char*, int)>:
c00227c2:	57                   	push   edi
c00227c3:	56                   	push   esi
c00227c4:	53                   	push   ebx
c00227c5:	81 ec d4 00 00 00    	sub    esp,0xd4
c00227cb:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00227d2:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00227d6:	57                   	push   edi
c00227d7:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00227de:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00227e5:	e8 b3 fe ff ff       	call   c002269d <Reg::getLine(char*, char*, char*)>
c00227ea:	83 c4 10             	add    esp,0x10
c00227ed:	89 c6                	mov    esi,eax
c00227ef:	84 c0                	test   al,al
c00227f1:	74 44                	je     c0022837 <Reg::readString(char*, char*, char*, int)+0x75>
c00227f3:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00227fa:	31 c0                	xor    eax,eax
c00227fc:	4a                   	dec    edx
c00227fd:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0022800:	84 c9                	test   cl,cl
c0022802:	74 0f                	je     c0022813 <Reg::readString(char*, char*, char*, int)+0x51>
c0022804:	39 c2                	cmp    edx,eax
c0022806:	7e 0b                	jle    c0022813 <Reg::readString(char*, char*, char*, int)+0x51>
c0022808:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c002280b:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0022810:	40                   	inc    eax
c0022811:	eb ea                	jmp    c00227fd <Reg::readString(char*, char*, char*, int)+0x3b>
c0022813:	83 ec 0c             	sub    esp,0xc
c0022816:	53                   	push   ebx
c0022817:	e8 54 dd fd ff       	call   c0000570 <strlen>
c002281c:	83 c4 10             	add    esp,0x10
c002281f:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0022824:	75 11                	jne    c0022837 <Reg::readString(char*, char*, char*, int)+0x75>
c0022826:	83 ec 0c             	sub    esp,0xc
c0022829:	53                   	push   ebx
c002282a:	e8 41 dd fd ff       	call   c0000570 <strlen>
c002282f:	83 c4 10             	add    esp,0x10
c0022832:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0022837:	81 c4 d0 00 00 00    	add    esp,0xd0
c002283d:	89 f0                	mov    eax,esi
c002283f:	5b                   	pop    ebx
c0022840:	5e                   	pop    esi
c0022841:	5f                   	pop    edi
c0022842:	c3                   	ret    

c0022843 <Reg::readBool(char*, char*, bool*)>:
c0022843:	83 ec 20             	sub    esp,0x20
c0022846:	8d 44 24 10          	lea    eax,[esp+0x10]
c002284a:	50                   	push   eax
c002284b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002284f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022853:	e8 7c fe ff ff       	call   c00226d4 <Reg::readInt(char*, char*, int*)>
c0022858:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c002285d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0022861:	0f 95 02             	setne  BYTE PTR [edx]
c0022864:	83 c4 2c             	add    esp,0x2c
c0022867:	c3                   	ret    

c0022868 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0022868:	53                   	push   ebx
c0022869:	83 ec 1c             	sub    esp,0x1c
c002286c:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0022870:	8d 44 24 13          	lea    eax,[esp+0x13]
c0022874:	50                   	push   eax
c0022875:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022879:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002287d:	e8 c1 ff ff ff       	call   c0022843 <Reg::readBool(char*, char*, bool*)>
c0022882:	83 c4 10             	add    esp,0x10
c0022885:	84 c0                	test   al,al
c0022887:	74 04                	je     c002288d <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0022889:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c002288d:	88 d8                	mov    al,bl
c002288f:	83 c4 18             	add    esp,0x18
c0022892:	5b                   	pop    ebx
c0022893:	c3                   	ret    

c0022894 <Reg::readIntWithDefault(char*, char*, int)>:
c0022894:	53                   	push   ebx
c0022895:	83 ec 1c             	sub    esp,0x1c
c0022898:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002289c:	8d 44 24 10          	lea    eax,[esp+0x10]
c00228a0:	50                   	push   eax
c00228a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00228a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00228a9:	e8 26 fe ff ff       	call   c00226d4 <Reg::readInt(char*, char*, int*)>
c00228ae:	83 c4 10             	add    esp,0x10
c00228b1:	84 c0                	test   al,al
c00228b3:	74 04                	je     c00228b9 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00228b5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00228b9:	89 d8                	mov    eax,ebx
c00228bb:	83 c4 18             	add    esp,0x18
c00228be:	5b                   	pop    ebx
c00228bf:	c3                   	ret    

c00228c0 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00228c0:	57                   	push   edi
c00228c1:	56                   	push   esi
c00228c2:	56                   	push   esi
c00228c3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00228c7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00228cb:	56                   	push   esi
c00228cc:	57                   	push   edi
c00228cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00228d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00228d5:	e8 e8 fe ff ff       	call   c00227c2 <Reg::readString(char*, char*, char*, int)>
c00228da:	83 c4 10             	add    esp,0x10
c00228dd:	84 c0                	test   al,al
c00228df:	75 1a                	jne    c00228fb <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c00228e1:	51                   	push   ecx
c00228e2:	56                   	push   esi
c00228e3:	6a 00                	push   0x0
c00228e5:	57                   	push   edi
c00228e6:	e8 05 dc fd ff       	call   c00004f0 <memset>
c00228eb:	8d 4e ff             	lea    ecx,[esi-0x1]
c00228ee:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00228f2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00228f4:	83 c4 10             	add    esp,0x10
c00228f7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00228fb:	89 f8                	mov    eax,edi
c00228fd:	5a                   	pop    edx
c00228fe:	5e                   	pop    esi
c00228ff:	5f                   	pop    edi
c0022900:	c3                   	ret    

c0022901 <SysEject(regs*)>:
c0022901:	83 ec 0c             	sub    esp,0xc
c0022904:	83 ca ff             	or     edx,0xffffffff
c0022907:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002290b:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c002290e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0022913:	83 e9 41             	sub    ecx,0x41
c0022916:	83 f9 19             	cmp    ecx,0x19
c0022919:	77 18                	ja     c0022933 <SysEject(regs*)+0x32>
c002291b:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c0022922:	85 c9                	test   ecx,ecx
c0022924:	74 0d                	je     c0022933 <SysEject(regs*)+0x32>
c0022926:	83 ec 0c             	sub    esp,0xc
c0022929:	51                   	push   ecx
c002292a:	e8 1b 9c ff ff       	call   c001c54a <LogicalDisk::eject()>
c002292f:	83 c4 10             	add    esp,0x10
c0022932:	99                   	cdq    
c0022933:	83 c4 0c             	add    esp,0xc
c0022936:	c3                   	ret    

c0022937 <SysExit(regs*)>:
c0022937:	83 ec 18             	sub    esp,0x18
c002293a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002293e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0022941:	e8 f2 2b 00 00       	call   c0025538 <terminateTask(int)>
c0022946:	83 c8 ff             	or     eax,0xffffffff
c0022949:	83 c4 1c             	add    esp,0x1c
c002294c:	89 c2                	mov    edx,eax
c002294e:	c3                   	ret    

c002294f <SysGetCwd(regs*)>:
c002294f:	83 ec 10             	sub    esp,0x10
c0022952:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022956:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0022959:	ff 70 20             	push   DWORD PTR [eax+0x20]
c002295c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0022961:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0022964:	e8 93 76 ff ff       	call   c0019ffc <Fs::getcwd(Process*, char*, int)>
c0022969:	83 c4 1c             	add    esp,0x1c
c002296c:	99                   	cdq    
c002296d:	c3                   	ret    

c002296e <SysGetPID(regs*)>:
c002296e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0022973:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0022976:	8b 00                	mov    eax,DWORD PTR [eax]
c0022978:	99                   	cdq    
c0022979:	c3                   	ret    

c002297a <SysGetRAMData(regs*)>:
c002297a:	8b 0d ec a9 03 c0    	mov    ecx,DWORD PTR ds:0xc003a9ec
c0022980:	69 05 e8 a9 03 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc003a9e8,0xc8
c002298a:	99                   	cdq    
c002298b:	f7 f9                	idiv   ecx
c002298d:	c1 e0 18             	shl    eax,0x18
c0022990:	09 c8                	or     eax,ecx
c0022992:	99                   	cdq    
c0022993:	c3                   	ret    

c0022994 <SysGetVGAPtr(regs*)>:
c0022994:	55                   	push   ebp
c0022995:	57                   	push   edi
c0022996:	56                   	push   esi
c0022997:	53                   	push   ebx
c0022998:	83 ec 18             	sub    esp,0x18
c002299b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002299f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00229a2:	e8 5d 26 00 00       	call   c0025004 <Thr::processFromPID(int)>
c00229a7:	83 c4 10             	add    esp,0x10
c00229aa:	89 c1                	mov    ecx,eax
c00229ac:	b8 01 00 00 00       	mov    eax,0x1
c00229b1:	85 c9                	test   ecx,ecx
c00229b3:	74 57                	je     c0022a0c <SysGetVGAPtr(regs*)+0x78>
c00229b5:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c00229bb:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00229bf:	74 0c                	je     c00229cd <SysGetVGAPtr(regs*)+0x39>
c00229c1:	83 ec 0c             	sub    esp,0xc
c00229c4:	55                   	push   ebp
c00229c5:	e8 8b 45 ff ff       	call   c0016f55 <setActiveTerminal(VgaText*)>
c00229ca:	83 c4 10             	add    esp,0x10
c00229cd:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00229d0:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00229d3:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c00229d8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00229da:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00229dd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00229e0:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c00229e6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00229e9:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00229ec:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c00229f2:	50                   	push   eax
c00229f3:	50                   	push   eax
c00229f4:	68 58 26 03 c0       	push   0xc0032658
c00229f9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00229fc:	05 a8 0f 00 00       	add    eax,0xfa8
c0022a01:	50                   	push   eax
c0022a02:	e8 39 dc fd ff       	call   c0000640 <strcpy>
c0022a07:	83 c4 10             	add    esp,0x10
c0022a0a:	31 c0                	xor    eax,eax
c0022a0c:	83 c4 0c             	add    esp,0xc
c0022a0f:	31 d2                	xor    edx,edx
c0022a11:	5b                   	pop    ebx
c0022a12:	5e                   	pop    esi
c0022a13:	5f                   	pop    edi
c0022a14:	5d                   	pop    ebp
c0022a15:	c3                   	ret    
c0022a16:	66 90                	xchg   ax,ax

c0022a18 <SysKill(regs*)>:
c0022a18:	53                   	push   ebx
c0022a19:	83 ec 08             	sub    esp,0x8
c0022a1c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022a20:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0022a24:	75 16                	jne    c0022a3c <SysKill(regs*)+0x24>
c0022a26:	83 ec 0c             	sub    esp,0xc
c0022a29:	68 62 26 03 c0       	push   0xc0032662
c0022a2e:	e8 18 d6 ff ff       	call   c002004b <KePanic(char const*)>
c0022a33:	83 c4 10             	add    esp,0x10
c0022a36:	e9 89 00 00 00       	jmp    c0022ac4 <SysKill(regs*)+0xac>
c0022a3b:	90                   	nop
c0022a3c:	83 ec 0c             	sub    esp,0xc
c0022a3f:	68 ec 01 04 c0       	push   0xc00401ec
c0022a44:	e8 e3 bd 00 00       	call   c002e82c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0022a49:	8d 76 00             	lea    esi,[esi+0x0]
c0022a4c:	83 c4 10             	add    esp,0x10
c0022a4f:	85 c0                	test   eax,eax
c0022a51:	74 19                	je     c0022a6c <SysKill(regs*)+0x54>
c0022a53:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0022a56:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0022a59:	39 0a                	cmp    DWORD PTR [edx],ecx
c0022a5b:	74 33                	je     c0022a90 <SysKill(regs*)+0x78>
c0022a5d:	52                   	push   edx
c0022a5e:	52                   	push   edx
c0022a5f:	50                   	push   eax
c0022a60:	68 ec 01 04 c0       	push   0xc00401ec
c0022a65:	e8 e2 c0 00 00       	call   c002eb4c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0022a6a:	eb e0                	jmp    c0022a4c <SysKill(regs*)+0x34>
c0022a6c:	83 ec 0c             	sub    esp,0xc
c0022a6f:	68 e0 01 04 c0       	push   0xc00401e0
c0022a74:	e8 b3 bd 00 00       	call   c002e82c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0022a79:	8d 76 00             	lea    esi,[esi+0x0]
c0022a7c:	83 c4 10             	add    esp,0x10
c0022a7f:	85 c0                	test   eax,eax
c0022a81:	74 41                	je     c0022ac4 <SysKill(regs*)+0xac>
c0022a83:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0022a86:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0022a89:	39 0a                	cmp    DWORD PTR [edx],ecx
c0022a8b:	75 27                	jne    c0022ab4 <SysKill(regs*)+0x9c>
c0022a8d:	8d 76 00             	lea    esi,[esi+0x0]
c0022a90:	51                   	push   ecx
c0022a91:	51                   	push   ecx
c0022a92:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0022a95:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0022a9a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0022a9d:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0022aa3:	e8 46 da ff ff       	call   c00204ee <KeRaiseSignal(SigHandlerBlock*, int)>
c0022aa8:	83 c4 10             	add    esp,0x10
c0022aab:	31 c0                	xor    eax,eax
c0022aad:	31 d2                	xor    edx,edx
c0022aaf:	eb 1b                	jmp    c0022acc <SysKill(regs*)+0xb4>
c0022ab1:	8d 76 00             	lea    esi,[esi+0x0]
c0022ab4:	52                   	push   edx
c0022ab5:	52                   	push   edx
c0022ab6:	50                   	push   eax
c0022ab7:	68 e0 01 04 c0       	push   0xc00401e0
c0022abc:	e8 8b c0 00 00       	call   c002eb4c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0022ac1:	eb b9                	jmp    c0022a7c <SysKill(regs*)+0x64>
c0022ac3:	90                   	nop
c0022ac4:	83 c8 ff             	or     eax,0xffffffff
c0022ac7:	89 c2                	mov    edx,eax
c0022ac9:	8d 76 00             	lea    esi,[esi+0x0]
c0022acc:	83 c4 08             	add    esp,0x8
c0022acf:	5b                   	pop    ebx
c0022ad0:	c3                   	ret    

c0022ad1 <SysLoadDLL(regs*)>:
c0022ad1:	56                   	push   esi
c0022ad2:	53                   	push   ebx
c0022ad3:	31 d2                	xor    edx,edx
c0022ad5:	51                   	push   ecx
c0022ad6:	b8 01 00 00 00       	mov    eax,0x1
c0022adb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022adf:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0022ae3:	0f 84 8c 00 00 00    	je     c0022b75 <SysLoadDLL(regs*)+0xa4>
c0022ae9:	83 ec 0c             	sub    esp,0xc
c0022aec:	68 14 01 00 00       	push   0x114
c0022af1:	e8 bc 37 ff ff       	call   c00162b2 <malloc>
c0022af6:	83 c4 0c             	add    esp,0xc
c0022af9:	89 c3                	mov    ebx,eax
c0022afb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0022b00:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0022b03:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0022b06:	53                   	push   ebx
c0022b07:	e8 3c 78 ff ff       	call   c001a348 <File::File(char const*, Process*)>
c0022b0c:	83 c4 10             	add    esp,0x10
c0022b0f:	31 d2                	xor    edx,edx
c0022b11:	b8 02 00 00 00       	mov    eax,0x2
c0022b16:	85 db                	test   ebx,ebx
c0022b18:	74 5b                	je     c0022b75 <SysLoadDLL(regs*)+0xa4>
c0022b1a:	83 ec 0c             	sub    esp,0xc
c0022b1d:	53                   	push   ebx
c0022b1e:	e8 07 7b ff ff       	call   c001a62a <File::exists()>
c0022b23:	83 c4 10             	add    esp,0x10
c0022b26:	84 c0                	test   al,al
c0022b28:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022b2a:	75 11                	jne    c0022b3d <SysLoadDLL(regs*)+0x6c>
c0022b2c:	83 ec 0c             	sub    esp,0xc
c0022b2f:	53                   	push   ebx
c0022b30:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022b33:	83 c4 10             	add    esp,0x10
c0022b36:	b8 03 00 00 00       	mov    eax,0x3
c0022b3b:	eb 36                	jmp    c0022b73 <SysLoadDLL(regs*)+0xa2>
c0022b3d:	83 ec 0c             	sub    esp,0xc
c0022b40:	53                   	push   ebx
c0022b41:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022b44:	58                   	pop    eax
c0022b45:	5a                   	pop    edx
c0022b46:	6a 00                	push   0x0
c0022b48:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0022b4b:	e8 81 15 00 00       	call   c00240d1 <Thr::loadDLL(char const*, bool)>
c0022b50:	83 c4 10             	add    esp,0x10
c0022b53:	89 c1                	mov    ecx,eax
c0022b55:	31 d2                	xor    edx,edx
c0022b57:	b8 04 00 00 00       	mov    eax,0x4
c0022b5c:	85 c9                	test   ecx,ecx
c0022b5e:	74 15                	je     c0022b75 <SysLoadDLL(regs*)+0xa4>
c0022b60:	53                   	push   ebx
c0022b61:	53                   	push   ebx
c0022b62:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0022b68:	51                   	push   ecx
c0022b69:	e8 b5 17 00 00       	call   c0024323 <Thr::executeDLL(unsigned long, void*)>
c0022b6e:	83 c4 10             	add    esp,0x10
c0022b71:	31 c0                	xor    eax,eax
c0022b73:	31 d2                	xor    edx,edx
c0022b75:	59                   	pop    ecx
c0022b76:	5b                   	pop    ebx
c0022b77:	5e                   	pop    esi
c0022b78:	c3                   	ret    

c0022b79 <SysRead(regs*)>:
c0022b79:	57                   	push   edi
c0022b7a:	56                   	push   esi
c0022b7b:	53                   	push   ebx
c0022b7c:	83 ec 10             	sub    esp,0x10
c0022b7f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022b83:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0022b86:	83 f8 02             	cmp    eax,0x2
c0022b89:	77 10                	ja     c0022b9b <SysRead(regs*)+0x22>
c0022b8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0022b90:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0022b93:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0022b99:	eb 0e                	jmp    c0022ba9 <SysRead(regs*)+0x30>
c0022b9b:	83 ec 0c             	sub    esp,0xc
c0022b9e:	50                   	push   eax
c0022b9f:	e8 0b 51 ff ff       	call   c0017caf <KeGetFileFromDescriptor(int)>
c0022ba4:	83 c4 10             	add    esp,0x10
c0022ba7:	89 c1                	mov    ecx,eax
c0022ba9:	83 c8 ff             	or     eax,0xffffffff
c0022bac:	85 c9                	test   ecx,ecx
c0022bae:	89 c2                	mov    edx,eax
c0022bb0:	74 28                	je     c0022bda <SysRead(regs*)+0x61>
c0022bb2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022bba:	31 ff                	xor    edi,edi
c0022bbc:	83 ec 0c             	sub    esp,0xc
c0022bbf:	8b 01                	mov    eax,DWORD PTR [ecx]
c0022bc1:	8d 54 24 18          	lea    edx,[esp+0x18]
c0022bc5:	52                   	push   edx
c0022bc6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0022bc9:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0022bcc:	57                   	push   edi
c0022bcd:	56                   	push   esi
c0022bce:	51                   	push   ecx
c0022bcf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0022bd2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0022bd6:	83 c4 20             	add    esp,0x20
c0022bd9:	99                   	cdq    
c0022bda:	83 c4 10             	add    esp,0x10
c0022bdd:	5b                   	pop    ebx
c0022bde:	5e                   	pop    esi
c0022bdf:	5f                   	pop    edi
c0022be0:	c3                   	ret    

c0022be1 <SysRegisterSignal(regs*)>:
c0022be1:	83 ec 18             	sub    esp,0x18
c0022be4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022be8:	6a 00                	push   0x0
c0022bea:	6a 00                	push   0x0
c0022bec:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0022bef:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0022bf2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0022bf7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0022bfa:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0022c00:	e8 b3 d8 ff ff       	call   c00204b8 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0022c05:	83 c4 2c             	add    esp,0x2c
c0022c08:	99                   	cdq    
c0022c09:	c3                   	ret    

c0022c0a <SysRegistryGetTypeFromPath(regs*)>:
c0022c0a:	57                   	push   edi
c0022c0b:	56                   	push   esi
c0022c0c:	53                   	push   ebx
c0022c0d:	81 ec 38 01 00 00    	sub    esp,0x138
c0022c13:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0022c1a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0022c1d:	68 83 26 03 c0       	push   0xc0032683
c0022c22:	e8 1a 65 ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0022c27:	5a                   	pop    edx
c0022c28:	59                   	pop    ecx
c0022c29:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0022c2c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0022c2f:	e8 4d f6 ff ff       	call   c0022281 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0022c34:	5f                   	pop    edi
c0022c35:	89 c6                	mov    esi,eax
c0022c37:	5a                   	pop    edx
c0022c38:	50                   	push   eax
c0022c39:	68 a3 26 03 c0       	push   0xc00326a3
c0022c3e:	e8 fe 64 ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0022c43:	83 c4 10             	add    esp,0x10
c0022c46:	85 f6                	test   esi,esi
c0022c48:	74 28                	je     c0022c72 <SysRegistryGetTypeFromPath(regs*)+0x68>
c0022c4a:	50                   	push   eax
c0022c4b:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0022c4f:	57                   	push   edi
c0022c50:	56                   	push   esi
c0022c51:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0022c54:	e8 0c f2 ff ff       	call   c0021e65 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0022c59:	83 c4 0c             	add    esp,0xc
c0022c5c:	89 c3                	mov    ebx,eax
c0022c5e:	57                   	push   edi
c0022c5f:	50                   	push   eax
c0022c60:	68 ab 26 03 c0       	push   0xc00326ab
c0022c65:	e8 d7 64 ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0022c6a:	89 d8                	mov    eax,ebx
c0022c6c:	83 c4 10             	add    esp,0x10
c0022c6f:	99                   	cdq    
c0022c70:	eb 05                	jmp    c0022c77 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0022c72:	83 c8 ff             	or     eax,0xffffffff
c0022c75:	89 c2                	mov    edx,eax
c0022c77:	81 c4 30 01 00 00    	add    esp,0x130
c0022c7d:	5b                   	pop    ebx
c0022c7e:	5e                   	pop    esi
c0022c7f:	5f                   	pop    edi
c0022c80:	c3                   	ret    

c0022c81 <SysRegistryReadExtent(regs*)>:
c0022c81:	83 ec 1c             	sub    esp,0x1c
c0022c84:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022c88:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0022c8b:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0022c8e:	85 c0                	test   eax,eax
c0022c90:	79 1f                	jns    c0022cb1 <SysRegistryReadExtent(regs*)+0x30>
c0022c92:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0022c97:	52                   	push   edx
c0022c98:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0022c9c:	52                   	push   edx
c0022c9d:	50                   	push   eax
c0022c9e:	51                   	push   ecx
c0022c9f:	e8 b3 f0 ff ff       	call   c0021d57 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0022ca4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022ca8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022cac:	83 c4 10             	add    esp,0x10
c0022caf:	eb 14                	jmp    c0022cc5 <SysRegistryReadExtent(regs*)+0x44>
c0022cb1:	83 ec 04             	sub    esp,0x4
c0022cb4:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0022cb7:	50                   	push   eax
c0022cb8:	51                   	push   ecx
c0022cb9:	e8 33 eb ff ff       	call   c00217f1 <CmGetString(Reghive_Tag*, int, char*)>
c0022cbe:	83 c4 10             	add    esp,0x10
c0022cc1:	31 c0                	xor    eax,eax
c0022cc3:	31 d2                	xor    edx,edx
c0022cc5:	83 c4 1c             	add    esp,0x1c
c0022cc8:	c3                   	ret    

c0022cc9 <SysRegistryPathToExtentLookup(regs*)>:
c0022cc9:	53                   	push   ebx
c0022cca:	83 ec 10             	sub    esp,0x10
c0022ccd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022cd1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0022cd4:	68 c1 26 03 c0       	push   0xc00326c1
c0022cd9:	e8 63 64 ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0022cde:	58                   	pop    eax
c0022cdf:	5a                   	pop    edx
c0022ce0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0022ce3:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0022ce6:	e8 96 f5 ff ff       	call   c0022281 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0022ceb:	83 c4 18             	add    esp,0x18
c0022cee:	99                   	cdq    
c0022cef:	5b                   	pop    ebx
c0022cf0:	c3                   	ret    

c0022cf1 <SysRegistryEnterDirectory(regs*)>:
c0022cf1:	53                   	push   ebx
c0022cf2:	83 ec 10             	sub    esp,0x10
c0022cf5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022cf9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0022cfc:	68 e4 26 03 c0       	push   0xc00326e4
c0022d01:	e8 3b 64 ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0022d06:	58                   	pop    eax
c0022d07:	5a                   	pop    edx
c0022d08:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0022d0b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0022d0e:	e8 55 eb ff ff       	call   c0021868 <CmEnterDirectory(Reghive_Tag*, int)>
c0022d13:	83 c4 18             	add    esp,0x18
c0022d16:	99                   	cdq    
c0022d17:	5b                   	pop    ebx
c0022d18:	c3                   	ret    

c0022d19 <SysRegistryGetNext(regs*)>:
c0022d19:	53                   	push   ebx
c0022d1a:	83 ec 10             	sub    esp,0x10
c0022d1d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022d21:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0022d24:	68 02 27 03 c0       	push   0xc0032702
c0022d29:	e8 13 64 ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0022d2e:	58                   	pop    eax
c0022d2f:	5a                   	pop    edx
c0022d30:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0022d33:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0022d36:	e8 6c eb ff ff       	call   c00218a7 <CmGetNext(Reghive_Tag*, int)>
c0022d3b:	83 c4 18             	add    esp,0x18
c0022d3e:	99                   	cdq    
c0022d3f:	5b                   	pop    ebx
c0022d40:	c3                   	ret    

c0022d41 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0022d41:	57                   	push   edi
c0022d42:	56                   	push   esi
c0022d43:	53                   	push   ebx
c0022d44:	81 ec 34 01 00 00    	sub    esp,0x134
c0022d4a:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0022d51:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0022d55:	57                   	push   edi
c0022d56:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0022d59:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0022d5c:	e8 04 f1 ff ff       	call   c0021e65 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0022d61:	89 c3                	mov    ebx,eax
c0022d63:	58                   	pop    eax
c0022d64:	5a                   	pop    edx
c0022d65:	57                   	push   edi
c0022d66:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0022d69:	e8 d2 d8 fd ff       	call   c0000640 <strcpy>
c0022d6e:	89 d8                	mov    eax,ebx
c0022d70:	81 c4 40 01 00 00    	add    esp,0x140
c0022d76:	99                   	cdq    
c0022d77:	5b                   	pop    ebx
c0022d78:	5e                   	pop    esi
c0022d79:	5f                   	pop    edi
c0022d7a:	c3                   	ret    

c0022d7b <SysRegistryOpen(regs*)>:
c0022d7b:	83 ec 18             	sub    esp,0x18
c0022d7e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022d82:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0022d85:	e8 f7 e8 ff ff       	call   c0021681 <CmOpen(char const*)>
c0022d8a:	83 c4 1c             	add    esp,0x1c
c0022d8d:	99                   	cdq    
c0022d8e:	c3                   	ret    

c0022d8f <SysRegistryClose(regs*)>:
c0022d8f:	83 ec 18             	sub    esp,0x18
c0022d92:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022d96:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0022d99:	e8 01 ea ff ff       	call   c002179f <CmClose(Reghive_Tag*)>
c0022d9e:	31 c0                	xor    eax,eax
c0022da0:	31 d2                	xor    edx,edx
c0022da2:	83 c4 1c             	add    esp,0x1c
c0022da5:	c3                   	ret    

c0022da6 <SysSbrk(regs*)>:
c0022da6:	56                   	push   esi
c0022da7:	53                   	push   ebx
c0022da8:	50                   	push   eax
c0022da9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0022dae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022db2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0022db5:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0022db8:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0022dbe:	85 db                	test   ebx,ebx
c0022dc0:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0022dc3:	74 02                	je     c0022dc7 <SysSbrk(regs*)+0x21>
c0022dc5:	79 06                	jns    c0022dcd <SysSbrk(regs*)+0x27>
c0022dc7:	89 f0                	mov    eax,esi
c0022dc9:	31 d2                	xor    edx,edx
c0022dcb:	eb 2a                	jmp    c0022df7 <SysSbrk(regs*)+0x51>
c0022dcd:	83 c8 ff             	or     eax,0xffffffff
c0022dd0:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0022dd6:	89 c2                	mov    edx,eax
c0022dd8:	77 1d                	ja     c0022df7 <SysSbrk(regs*)+0x51>
c0022dda:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0022de0:	50                   	push   eax
c0022de1:	c1 ea 0c             	shr    edx,0xc
c0022de4:	68 07 0c 00 00       	push   0xc07
c0022de9:	52                   	push   edx
c0022dea:	51                   	push   ecx
c0022deb:	e8 30 58 ff ff       	call   c0018620 <VAS::allocatePages(int, int)>
c0022df0:	89 f0                	mov    eax,esi
c0022df2:	31 d2                	xor    edx,edx
c0022df4:	83 c4 10             	add    esp,0x10
c0022df7:	59                   	pop    ecx
c0022df8:	5b                   	pop    ebx
c0022df9:	5e                   	pop    esi
c0022dfa:	c3                   	ret    

c0022dfb <SysSetCwd(regs*)>:
c0022dfb:	83 ec 14             	sub    esp,0x14
c0022dfe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022e02:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0022e05:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0022e0a:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0022e0d:	e8 b7 78 ff ff       	call   c001a6c9 <Fs::setcwd(Process*, char*)>
c0022e12:	83 c4 1c             	add    esp,0x1c
c0022e15:	99                   	cdq    
c0022e16:	c3                   	ret    

c0022e17 <SysSetTime(regs*)>:
c0022e17:	55                   	push   ebp
c0022e18:	31 c9                	xor    ecx,ecx
c0022e1a:	57                   	push   edi
c0022e1b:	bd 0c 00 00 00       	mov    ebp,0xc
c0022e20:	56                   	push   esi
c0022e21:	53                   	push   ebx
c0022e22:	31 db                	xor    ebx,ebx
c0022e24:	83 ec 10             	sub    esp,0x10
c0022e27:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022e2b:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0022e2e:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0022e31:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0022e34:	89 c2                	mov    edx,eax
c0022e36:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0022e3c:	83 e2 1f             	and    edx,0x1f
c0022e3f:	c1 e7 10             	shl    edi,0x10
c0022e42:	42                   	inc    edx
c0022e43:	c1 e8 05             	shr    eax,0x5
c0022e46:	88 d1                	mov    cl,dl
c0022e48:	31 d2                	xor    edx,edx
c0022e4a:	f7 f5                	div    ebp
c0022e4c:	89 dd                	mov    ebp,ebx
c0022e4e:	88 d5                	mov    ch,dl
c0022e50:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0022e56:	0f b7 c1             	movzx  eax,cx
c0022e59:	31 d2                	xor    edx,edx
c0022e5b:	09 f8                	or     eax,edi
c0022e5d:	bf 3c 00 00 00       	mov    edi,0x3c
c0022e62:	89 c1                	mov    ecx,eax
c0022e64:	89 f0                	mov    eax,esi
c0022e66:	f7 f7                	div    edi
c0022e68:	c1 e2 10             	shl    edx,0x10
c0022e6b:	09 d5                	or     ebp,edx
c0022e6d:	31 d2                	xor    edx,edx
c0022e6f:	89 eb                	mov    ebx,ebp
c0022e71:	f7 f7                	div    edi
c0022e73:	bf 10 0e 00 00       	mov    edi,0xe10
c0022e78:	88 d7                	mov    bh,dl
c0022e7a:	89 f0                	mov    eax,esi
c0022e7c:	31 d2                	xor    edx,edx
c0022e7e:	f7 f7                	div    edi
c0022e80:	bf 18 00 00 00       	mov    edi,0x18
c0022e85:	31 d2                	xor    edx,edx
c0022e87:	f7 f7                	div    edi
c0022e89:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0022e8e:	88 d3                	mov    bl,dl
c0022e90:	53                   	push   ebx
c0022e91:	51                   	push   ecx
c0022e92:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0022e98:	e8 39 80 ff ff       	call   c001aed6 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0022e9d:	83 c4 1c             	add    esp,0x1c
c0022ea0:	83 f0 01             	xor    eax,0x1
c0022ea3:	5b                   	pop    ebx
c0022ea4:	0f b6 c0             	movzx  eax,al
c0022ea7:	5e                   	pop    esi
c0022ea8:	31 d2                	xor    edx,edx
c0022eaa:	5f                   	pop    edi
c0022eab:	5d                   	pop    ebp
c0022eac:	c3                   	ret    

c0022ead <SysSymlink(regs*)>:
c0022ead:	56                   	push   esi
c0022eae:	83 c8 ff             	or     eax,0xffffffff
c0022eb1:	53                   	push   ebx
c0022eb2:	89 c2                	mov    edx,eax
c0022eb4:	81 ec 34 02 00 00    	sub    esp,0x234
c0022eba:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c0022ec1:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0022ec5:	74 50                	je     c0022f17 <SysSymlink(regs*)+0x6a>
c0022ec7:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0022eca:	85 c9                	test   ecx,ecx
c0022ecc:	74 49                	je     c0022f17 <SysSymlink(regs*)+0x6a>
c0022ece:	6a 01                	push   0x1
c0022ed0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0022ed5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0022ed8:	05 0c 01 00 00       	add    eax,0x10c
c0022edd:	50                   	push   eax
c0022ede:	51                   	push   ecx
c0022edf:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0022ee3:	56                   	push   esi
c0022ee4:	e8 67 71 ff ff       	call   c001a050 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0022ee9:	6a 01                	push   0x1
c0022eeb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0022ef0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0022ef3:	05 0c 01 00 00       	add    eax,0x10c
c0022ef8:	50                   	push   eax
c0022ef9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0022efc:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0022f03:	53                   	push   ebx
c0022f04:	e8 47 71 ff ff       	call   c001a050 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0022f09:	83 c4 18             	add    esp,0x18
c0022f0c:	56                   	push   esi
c0022f0d:	53                   	push   ebx
c0022f0e:	e8 4c 6d ff ff       	call   c0019c5f <KeCreateSymlink(char const*, char const*)>
c0022f13:	83 c4 10             	add    esp,0x10
c0022f16:	99                   	cdq    
c0022f17:	81 c4 34 02 00 00    	add    esp,0x234
c0022f1d:	5b                   	pop    ebx
c0022f1e:	5e                   	pop    esi
c0022f1f:	c3                   	ret    

c0022f20 <SysTimezone(regs*)>:
c0022f20:	53                   	push   ebx
c0022f21:	83 ec 08             	sub    esp,0x8
c0022f24:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022f28:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0022f2c:	75 17                	jne    c0022f45 <SysTimezone(regs*)+0x25>
c0022f2e:	83 ec 0c             	sub    esp,0xc
c0022f31:	68 19 27 03 c0       	push   0xc0032719
c0022f36:	e8 06 62 ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0022f3b:	83 c8 ff             	or     eax,0xffffffff
c0022f3e:	83 c4 10             	add    esp,0x10
c0022f41:	89 c2                	mov    edx,eax
c0022f43:	eb 20                	jmp    c0022f65 <SysTimezone(regs*)+0x45>
c0022f45:	83 ec 0c             	sub    esp,0xc
c0022f48:	68 2e 27 03 c0       	push   0xc003272e
c0022f4d:	e8 ef 61 ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0022f52:	58                   	pop    eax
c0022f53:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0022f56:	e8 e5 7c ff ff       	call   c001ac40 <User::loadClockSettings(int)>
c0022f5b:	83 c4 10             	add    esp,0x10
c0022f5e:	b8 01 00 00 00       	mov    eax,0x1
c0022f63:	31 d2                	xor    edx,edx
c0022f65:	83 c4 08             	add    esp,0x8
c0022f68:	5b                   	pop    ebx
c0022f69:	c3                   	ret    

c0022f6a <SysTruncate(regs*)>:
c0022f6a:	55                   	push   ebp
c0022f6b:	57                   	push   edi
c0022f6c:	31 ff                	xor    edi,edi
c0022f6e:	56                   	push   esi
c0022f6f:	53                   	push   ebx
c0022f70:	83 ec 0c             	sub    esp,0xc
c0022f73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022f77:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0022f7a:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0022f7d:	89 ce                	mov    esi,ecx
c0022f7f:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0022f83:	0f 84 9a 00 00 00    	je     c0023023 <SysTruncate(regs*)+0xb9>
c0022f89:	83 ec 0c             	sub    esp,0xc
c0022f8c:	68 14 01 00 00       	push   0x114
c0022f91:	e8 1c 33 ff ff       	call   c00162b2 <malloc>
c0022f96:	83 c4 0c             	add    esp,0xc
c0022f99:	89 c3                	mov    ebx,eax
c0022f9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0022fa0:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0022fa3:	55                   	push   ebp
c0022fa4:	53                   	push   ebx
c0022fa5:	e8 9e 73 ff ff       	call   c001a348 <File::File(char const*, Process*)>
c0022faa:	83 c4 10             	add    esp,0x10
c0022fad:	31 d2                	xor    edx,edx
c0022faf:	b8 03 00 00 00       	mov    eax,0x3
c0022fb4:	85 db                	test   ebx,ebx
c0022fb6:	0f 84 a2 00 00 00    	je     c002305e <SysTruncate(regs*)+0xf4>
c0022fbc:	51                   	push   ecx
c0022fbd:	51                   	push   ecx
c0022fbe:	6a 02                	push   0x2
c0022fc0:	53                   	push   ebx
c0022fc1:	e8 a0 73 ff ff       	call   c001a366 <File::open(FileOpenMode)>
c0022fc6:	83 c4 10             	add    esp,0x10
c0022fc9:	85 c0                	test   eax,eax
c0022fcb:	74 13                	je     c0022fe0 <SysTruncate(regs*)+0x76>
c0022fcd:	83 ec 0c             	sub    esp,0xc
c0022fd0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022fd2:	53                   	push   ebx
c0022fd3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022fd6:	83 c4 10             	add    esp,0x10
c0022fd9:	b8 04 00 00 00       	mov    eax,0x4
c0022fde:	eb 7c                	jmp    c002305c <SysTruncate(regs*)+0xf2>
c0022fe0:	52                   	push   edx
c0022fe1:	57                   	push   edi
c0022fe2:	56                   	push   esi
c0022fe3:	53                   	push   ebx
c0022fe4:	e8 91 74 ff ff       	call   c001a47a <File::truncate(unsigned long long)>
c0022fe9:	83 c4 10             	add    esp,0x10
c0022fec:	85 c0                	test   eax,eax
c0022fee:	74 1b                	je     c002300b <SysTruncate(regs*)+0xa1>
c0022ff0:	83 ec 0c             	sub    esp,0xc
c0022ff3:	53                   	push   ebx
c0022ff4:	e8 cb 73 ff ff       	call   c001a3c4 <File::close()>
c0022ff9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022ffb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022ffe:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023001:	83 c4 10             	add    esp,0x10
c0023004:	b8 05 00 00 00       	mov    eax,0x5
c0023009:	eb 51                	jmp    c002305c <SysTruncate(regs*)+0xf2>
c002300b:	83 ec 0c             	sub    esp,0xc
c002300e:	53                   	push   ebx
c002300f:	e8 b0 73 ff ff       	call   c001a3c4 <File::close()>
c0023014:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023016:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023019:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002301c:	83 c4 10             	add    esp,0x10
c002301f:	31 c0                	xor    eax,eax
c0023021:	eb 39                	jmp    c002305c <SysTruncate(regs*)+0xf2>
c0023023:	31 d2                	xor    edx,edx
c0023025:	b8 01 00 00 00       	mov    eax,0x1
c002302a:	83 fd 02             	cmp    ebp,0x2
c002302d:	7e 2f                	jle    c002305e <SysTruncate(regs*)+0xf4>
c002302f:	83 ec 0c             	sub    esp,0xc
c0023032:	51                   	push   ecx
c0023033:	e8 77 4c ff ff       	call   c0017caf <KeGetFileFromDescriptor(int)>
c0023038:	83 c4 10             	add    esp,0x10
c002303b:	89 c1                	mov    ecx,eax
c002303d:	31 d2                	xor    edx,edx
c002303f:	b8 02 00 00 00       	mov    eax,0x2
c0023044:	85 c9                	test   ecx,ecx
c0023046:	74 16                	je     c002305e <SysTruncate(regs*)+0xf4>
c0023048:	50                   	push   eax
c0023049:	57                   	push   edi
c002304a:	56                   	push   esi
c002304b:	51                   	push   ecx
c002304c:	e8 29 74 ff ff       	call   c001a47a <File::truncate(unsigned long long)>
c0023051:	83 c4 10             	add    esp,0x10
c0023054:	85 c0                	test   eax,eax
c0023056:	0f 95 c0             	setne  al
c0023059:	0f b6 c0             	movzx  eax,al
c002305c:	31 d2                	xor    edx,edx
c002305e:	83 c4 0c             	add    esp,0xc
c0023061:	5b                   	pop    ebx
c0023062:	5e                   	pop    esi
c0023063:	5f                   	pop    edi
c0023064:	5d                   	pop    ebp
c0023065:	c3                   	ret    

c0023066 <SysWrite(regs*)>:
c0023066:	57                   	push   edi
c0023067:	56                   	push   esi
c0023068:	53                   	push   ebx
c0023069:	83 ec 10             	sub    esp,0x10
c002306c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0023070:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0023073:	83 f8 02             	cmp    eax,0x2
c0023076:	77 10                	ja     c0023088 <SysWrite(regs*)+0x22>
c0023078:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002307d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023080:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0023086:	eb 0e                	jmp    c0023096 <SysWrite(regs*)+0x30>
c0023088:	83 ec 0c             	sub    esp,0xc
c002308b:	50                   	push   eax
c002308c:	e8 1e 4c ff ff       	call   c0017caf <KeGetFileFromDescriptor(int)>
c0023091:	83 c4 10             	add    esp,0x10
c0023094:	89 c1                	mov    ecx,eax
c0023096:	83 c8 ff             	or     eax,0xffffffff
c0023099:	85 c9                	test   ecx,ecx
c002309b:	89 c2                	mov    edx,eax
c002309d:	74 28                	je     c00230c7 <SysWrite(regs*)+0x61>
c002309f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00230a7:	31 ff                	xor    edi,edi
c00230a9:	83 ec 0c             	sub    esp,0xc
c00230ac:	8b 01                	mov    eax,DWORD PTR [ecx]
c00230ae:	8d 54 24 18          	lea    edx,[esp+0x18]
c00230b2:	52                   	push   edx
c00230b3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00230b6:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00230b9:	57                   	push   edi
c00230ba:	56                   	push   esi
c00230bb:	51                   	push   ecx
c00230bc:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00230bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00230c3:	83 c4 20             	add    esp,0x20
c00230c6:	99                   	cdq    
c00230c7:	83 c4 10             	add    esp,0x10
c00230ca:	5b                   	pop    ebx
c00230cb:	5e                   	pop    esi
c00230cc:	5f                   	pop    edi
c00230cd:	c3                   	ret    

c00230ce <SysWsbe(regs*)>:
c00230ce:	57                   	push   edi
c00230cf:	b9 0b 00 00 00       	mov    ecx,0xb
c00230d4:	56                   	push   esi
c00230d5:	be 6d 27 03 c0       	mov    esi,0xc003276d
c00230da:	53                   	push   ebx
c00230db:	83 ec 30             	sub    esp,0x30
c00230de:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00230e2:	fc                   	cld    
c00230e3:	83 ec 0c             	sub    esp,0xc
c00230e6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00230e8:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00230ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00230f1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00230f4:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00230fa:	8b 06                	mov    eax,DWORD PTR [esi]
c00230fc:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00230ff:	57                   	push   edi
c0023100:	e8 6b d4 fd ff       	call   c0000570 <strlen>
c0023105:	5a                   	pop    edx
c0023106:	8d 54 24 0c          	lea    edx,[esp+0xc]
c002310a:	52                   	push   edx
c002310b:	31 d2                	xor    edx,edx
c002310d:	57                   	push   edi
c002310e:	52                   	push   edx
c002310f:	50                   	push   eax
c0023110:	56                   	push   esi
c0023111:	ff d3                	call   ebx
c0023113:	83 c4 14             	add    esp,0x14
c0023116:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002311a:	ff 70 24             	push   DWORD PTR [eax+0x24]
c002311d:	e8 16 24 00 00       	call   c0025538 <terminateTask(int)>
c0023122:	83 c4 40             	add    esp,0x40
c0023125:	b8 ef be ad de       	mov    eax,0xdeadbeef
c002312a:	5b                   	pop    ebx
c002312b:	31 d2                	xor    edx,edx
c002312d:	5e                   	pop    esi
c002312e:	5f                   	pop    edi
c002312f:	c3                   	ret    

c0023130 <SysYield(regs*)>:
c0023130:	83 ec 0c             	sub    esp,0xc
c0023133:	fa                   	cli    
c0023134:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002313a:	e8 59 1a 00 00       	call   c0024b98 <schedule()>
c002313f:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0023144:	48                   	dec    eax
c0023145:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002314a:	75 01                	jne    c002314d <SysYield(regs*)+0x1d>
c002314c:	fb                   	sti    
c002314d:	31 c0                	xor    eax,eax
c002314f:	31 d2                	xor    edx,edx
c0023151:	83 c4 0c             	add    esp,0xc
c0023154:	c3                   	ret    

c0023155 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0023155:	55                   	push   ebp
c0023156:	57                   	push   edi
c0023157:	56                   	push   esi
c0023158:	53                   	push   ebx
c0023159:	81 ec 2c 10 00 00    	sub    esp,0x102c
c002315f:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0023167:	0f 95 c0             	setne  al
c002316a:	31 d2                	xor    edx,edx
c002316c:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0023174:	0f 94 c2             	sete   dl
c0023177:	85 c2                	test   edx,eax
c0023179:	74 34                	je     c00231af <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c002317b:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0023186:	74 27                	je     c00231af <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0023188:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c002318f:	05 00 10 00 00       	add    eax,0x1000
c0023194:	89 c1                	mov    ecx,eax
c0023196:	25 00 f0 ff ff       	and    eax,0xfffff000
c002319b:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c00231a1:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00231a8:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c00231af:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00231b6:	83 ec 0c             	sub    esp,0xc
c00231b9:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00231bf:	6a 01                	push   0x1
c00231c1:	e8 43 4c ff ff       	call   c0017e09 <Virt::allocateKernelVirtualPages(int)>
c00231c6:	83 c4 10             	add    esp,0x10
c00231c9:	89 c3                	mov    ebx,eax
c00231cb:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00231d1:	0f 86 25 01 00 00    	jbe    c00232fc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c00231d7:	c1 ee 0c             	shr    esi,0xc
c00231da:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00231e1:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00231e5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00231ed:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00231f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00231f8:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00231ff:	29 ef                	sub    edi,ebp
c0023201:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0023205:	0f 83 f8 00 00 00    	jae    c0023303 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c002320b:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0023211:	76 05                	jbe    c0023218 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0023213:	bf 00 10 00 00       	mov    edi,0x1000
c0023218:	83 ec 0c             	sub    esp,0xc
c002321b:	31 d2                	xor    edx,edx
c002321d:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0023224:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023226:	8d 44 24 28          	lea    eax,[esp+0x28]
c002322a:	50                   	push   eax
c002322b:	8d 74 24 30          	lea    esi,[esp+0x30]
c002322f:	56                   	push   esi
c0023230:	52                   	push   edx
c0023231:	57                   	push   edi
c0023232:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0023239:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c002323c:	83 c4 20             	add    esp,0x20
c002323f:	85 c0                	test   eax,eax
c0023241:	75 06                	jne    c0023249 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c0023243:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0023247:	74 13                	je     c002325c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c0023249:	83 ec 0c             	sub    esp,0xc
c002324c:	53                   	push   ebx
c002324d:	e8 d5 4e ff ff       	call   c0018127 <Virt::freeKernelVirtualPages(unsigned long)>
c0023252:	83 c4 10             	add    esp,0x10
c0023255:	31 c0                	xor    eax,eax
c0023257:	e9 7c 01 00 00       	jmp    c00233d8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c002325c:	fa                   	cli    
c002325d:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0023263:	e8 53 33 ff ff       	call   c00165bb <Phys::allocatePage()>
c0023268:	6a 07                	push   0x7
c002326a:	89 c7                	mov    edi,eax
c002326c:	53                   	push   ebx
c002326d:	50                   	push   eax
c002326e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023273:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023276:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c002327c:	e8 9b 52 ff ff       	call   c001851c <VAS::mapPage(unsigned long, unsigned long, int)>
c0023281:	83 c4 0c             	add    esp,0xc
c0023284:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c002328b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023291:	6a 00                	push   0x0
c0023293:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023298:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002329b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00232a1:	e8 dc 50 ff ff       	call   c0018382 <VAS::mapOtherVASIn(bool, VAS*)>
c00232a6:	58                   	pop    eax
c00232a7:	5a                   	pop    edx
c00232a8:	68 07 0c 00 00       	push   0xc07
c00232ad:	55                   	push   ebp
c00232ae:	57                   	push   edi
c00232af:	89 df                	mov    edi,ebx
c00232b1:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00232b8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00232be:	6a 00                	push   0x0
c00232c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00232c5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00232c8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00232ce:	e8 9b 54 ff ff       	call   c001876e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00232d3:	b9 00 10 00 00       	mov    ecx,0x1000
c00232d8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00232da:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00232df:	83 c4 20             	add    esp,0x20
c00232e2:	48                   	dec    eax
c00232e3:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00232e8:	85 c0                	test   eax,eax
c00232ea:	75 01                	jne    c00232ed <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c00232ec:	fb                   	sti    
c00232ed:	81 c5 00 10 00 00    	add    ebp,0x1000
c00232f3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00232f7:	e9 f1 fe ff ff       	jmp    c00231ed <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c00232fc:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0023303:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c002330a:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0023310:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0023316:	0f 86 ae 00 00 00    	jbe    c00233ca <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c002331c:	fa                   	cli    
c002331d:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0023323:	c1 ee 0c             	shr    esi,0xc
c0023326:	51                   	push   ecx
c0023327:	31 ff                	xor    edi,edi
c0023329:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0023330:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023336:	6a 00                	push   0x0
c0023338:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002333d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023340:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023346:	e8 37 50 ff ff       	call   c0018382 <VAS::mapOtherVASIn(bool, VAS*)>
c002334b:	83 c4 10             	add    esp,0x10
c002334e:	e8 68 32 ff ff       	call   c00165bb <Phys::allocatePage()>
c0023353:	47                   	inc    edi
c0023354:	6a 07                	push   0x7
c0023356:	53                   	push   ebx
c0023357:	50                   	push   eax
c0023358:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002335c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0023362:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0023365:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c002336b:	e8 ac 51 ff ff       	call   c001851c <VAS::mapPage(unsigned long, unsigned long, int)>
c0023370:	58                   	pop    eax
c0023371:	5a                   	pop    edx
c0023372:	68 07 0c 00 00       	push   0xc07
c0023377:	55                   	push   ebp
c0023378:	81 c5 00 10 00 00    	add    ebp,0x1000
c002337e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023382:	50                   	push   eax
c0023383:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c002338a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023390:	6a 00                	push   0x0
c0023392:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023397:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002339a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00233a0:	e8 c9 53 ff ff       	call   c001876e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00233a5:	83 c4 1c             	add    esp,0x1c
c00233a8:	68 00 10 00 00       	push   0x1000
c00233ad:	6a 00                	push   0x0
c00233af:	53                   	push   ebx
c00233b0:	e8 3b d1 fd ff       	call   c00004f0 <memset>
c00233b5:	83 c4 10             	add    esp,0x10
c00233b8:	39 fe                	cmp    esi,edi
c00233ba:	77 92                	ja     c002334e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c00233bc:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00233c1:	48                   	dec    eax
c00233c2:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00233c7:	75 01                	jne    c00233ca <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c00233c9:	fb                   	sti    
c00233ca:	83 ec 0c             	sub    esp,0xc
c00233cd:	53                   	push   ebx
c00233ce:	e8 54 4d ff ff       	call   c0018127 <Virt::freeKernelVirtualPages(unsigned long)>
c00233d3:	83 c4 10             	add    esp,0x10
c00233d6:	b0 01                	mov    al,0x1
c00233d8:	81 c4 2c 10 00 00    	add    esp,0x102c
c00233de:	5b                   	pop    ebx
c00233df:	5e                   	pop    esi
c00233e0:	5f                   	pop    edi
c00233e1:	5d                   	pop    ebp
c00233e2:	c3                   	ret    

c00233e3 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00233e3:	55                   	push   ebp
c00233e4:	57                   	push   edi
c00233e5:	56                   	push   esi
c00233e6:	53                   	push   ebx
c00233e7:	83 ec 48             	sub    esp,0x48
c00233ea:	68 14 01 00 00       	push   0x114
c00233ef:	e8 be 2e ff ff       	call   c00162b2 <malloc>
c00233f4:	83 c4 0c             	add    esp,0xc
c00233f7:	89 c6                	mov    esi,eax
c00233f9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00233fd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0023401:	50                   	push   eax
c0023402:	e8 41 6f ff ff       	call   c001a348 <File::File(char const*, Process*)>
c0023407:	58                   	pop    eax
c0023408:	5a                   	pop    edx
c0023409:	6a 01                	push   0x1
c002340b:	56                   	push   esi
c002340c:	e8 55 6f ff ff       	call   c001a366 <File::open(FileOpenMode)>
c0023411:	83 c4 10             	add    esp,0x10
c0023414:	85 c0                	test   eax,eax
c0023416:	0f 85 43 01 00 00    	jne    c002355f <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c002341c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0023424:	83 ec 0c             	sub    esp,0xc
c0023427:	6a 34                	push   0x34
c0023429:	e8 84 2e ff ff       	call   c00162b2 <malloc>
c002342e:	89 c3                	mov    ebx,eax
c0023430:	58                   	pop    eax
c0023431:	8b 06                	mov    eax,DWORD PTR [esi]
c0023433:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0023437:	57                   	push   edi
c0023438:	53                   	push   ebx
c0023439:	6a 00                	push   0x0
c002343b:	6a 34                	push   0x34
c002343d:	56                   	push   esi
c002343e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023441:	83 c4 20             	add    esp,0x20
c0023444:	85 c0                	test   eax,eax
c0023446:	0f 85 13 01 00 00    	jne    c002355f <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c002344c:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0023452:	0f 85 07 01 00 00    	jne    c002355f <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023458:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002345b:	85 c0                	test   eax,eax
c002345d:	0f 84 fc 00 00 00    	je     c002355f <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023463:	31 d2                	xor    edx,edx
c0023465:	55                   	push   ebp
c0023466:	52                   	push   edx
c0023467:	50                   	push   eax
c0023468:	56                   	push   esi
c0023469:	e8 b6 6f ff ff       	call   c001a424 <File::seek(unsigned long long)>
c002346e:	83 c4 10             	add    esp,0x10
c0023471:	85 c0                	test   eax,eax
c0023473:	0f 85 e6 00 00 00    	jne    c002355f <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023479:	83 ec 0c             	sub    esp,0xc
c002347c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c002347f:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0023483:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0023487:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c002348b:	0f af c2             	imul   eax,edx
c002348e:	50                   	push   eax
c002348f:	e8 1e 2e ff ff       	call   c00162b2 <malloc>
c0023494:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0023496:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002349a:	89 3c 24             	mov    DWORD PTR [esp],edi
c002349d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00234a1:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00234a5:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00234a9:	0f af c2             	imul   eax,edx
c00234ac:	99                   	cdq    
c00234ad:	52                   	push   edx
c00234ae:	50                   	push   eax
c00234af:	56                   	push   esi
c00234b0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00234b3:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00234b6:	83 c4 20             	add    esp,0x20
c00234b9:	85 c0                	test   eax,eax
c00234bb:	0f 84 9e 00 00 00    	je     c002355f <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00234c1:	31 d2                	xor    edx,edx
c00234c3:	51                   	push   ecx
c00234c4:	52                   	push   edx
c00234c5:	50                   	push   eax
c00234c6:	56                   	push   esi
c00234c7:	e8 58 6f ff ff       	call   c001a424 <File::seek(unsigned long long)>
c00234cc:	83 c4 10             	add    esp,0x10
c00234cf:	85 c0                	test   eax,eax
c00234d1:	0f 85 88 00 00 00    	jne    c002355f <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00234d7:	83 ec 0c             	sub    esp,0xc
c00234da:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00234de:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00234e2:	31 ed                	xor    ebp,ebp
c00234e4:	0f af c2             	imul   eax,edx
c00234e7:	50                   	push   eax
c00234e8:	e8 c5 2d ff ff       	call   c00162b2 <malloc>
c00234ed:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00234ef:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00234f3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00234f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00234fa:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00234fe:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0023502:	0f af c2             	imul   eax,edx
c0023505:	99                   	cdq    
c0023506:	52                   	push   edx
c0023507:	50                   	push   eax
c0023508:	56                   	push   esi
c0023509:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c002350c:	83 c4 20             	add    esp,0x20
c002350f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0023517:	0f b7 fd             	movzx  edi,bp
c002351a:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c002351e:	73 7d                	jae    c002359d <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0023520:	c1 e7 05             	shl    edi,0x5
c0023523:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0023527:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c002352a:	75 6b                	jne    c0023597 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c002352c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c002352f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023533:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0023536:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002353a:	52                   	push   edx
c002353b:	31 d2                	xor    edx,edx
c002353d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0023540:	52                   	push   edx
c0023541:	50                   	push   eax
c0023542:	56                   	push   esi
c0023543:	e8 dc 6e ff ff       	call   c001a424 <File::seek(unsigned long long)>
c0023548:	83 c4 10             	add    esp,0x10
c002354b:	85 c0                	test   eax,eax
c002354d:	74 17                	je     c0023566 <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c002354f:	83 ec 0c             	sub    esp,0xc
c0023552:	68 99 27 03 c0       	push   0xc0032799
c0023557:	e8 e5 5b ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c002355c:	83 c4 10             	add    esp,0x10
c002355f:	31 c0                	xor    eax,eax
c0023561:	e9 87 00 00 00       	jmp    c00235ed <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0023566:	83 ec 0c             	sub    esp,0xc
c0023569:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c002356c:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c002356f:	50                   	push   eax
c0023570:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0023574:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023578:	56                   	push   esi
c0023579:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c002357d:	e8 d3 fb ff ff       	call   c0023155 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0023582:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0023586:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c002358a:	83 c4 20             	add    esp,0x20
c002358d:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0023591:	73 04                	jae    c0023597 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0023593:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023597:	45                   	inc    ebp
c0023598:	e9 7a ff ff ff       	jmp    c0023517 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c002359d:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00235a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00235a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00235a9:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c00235af:	83 ec 0c             	sub    esp,0xc
c00235b2:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c00235b8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00235bd:	05 00 10 00 00       	add    eax,0x1000
c00235c2:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00235c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00235c9:	e8 f4 2c ff ff       	call   c00162c2 <free>
c00235ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00235d1:	e8 ec 2c ff ff       	call   c00162c2 <free>
c00235d6:	58                   	pop    eax
c00235d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00235db:	e8 e2 2c ff ff       	call   c00162c2 <free>
c00235e0:	89 34 24             	mov    DWORD PTR [esp],esi
c00235e3:	e8 dc 6d ff ff       	call   c001a3c4 <File::close()>
c00235e8:	83 c4 10             	add    esp,0x10
c00235eb:	b0 01                	mov    al,0x1
c00235ed:	83 c4 3c             	add    esp,0x3c
c00235f0:	5b                   	pop    ebx
c00235f1:	5e                   	pop    esi
c00235f2:	5f                   	pop    edi
c00235f3:	5d                   	pop    ebp
c00235f4:	c3                   	ret    

c00235f5 <Thr::runtimeReferenceHelper()>:
c00235f5:	83 ec 18             	sub    esp,0x18
c00235f8:	68 a1 27 03 c0       	push   0xc00327a1
c00235fd:	e8 3f 5b ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0023602:	fa                   	cli    
c0023603:	83 c4 10             	add    esp,0x10
c0023606:	eb fe                	jmp    c0023606 <Thr::runtimeReferenceHelper()+0x11>

c0023608 <Thr::getAddressOfKernelSymbol(char const*)>:
c0023608:	57                   	push   edi
c0023609:	56                   	push   esi
c002360a:	53                   	push   ebx
c002360b:	31 db                	xor    ebx,ebx
c002360d:	39 1d a0 01 04 c0    	cmp    DWORD PTR ds:0xc00401a0,ebx
c0023613:	7e 3c                	jle    c0023651 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0023615:	8b 34 9d 20 01 04 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffbfee0]
c002361c:	31 ff                	xor    edi,edi
c002361e:	39 3c 9d 20 00 04 c0 	cmp    DWORD PTR [ebx*4-0x3ffbffe0],edi
c0023625:	7e 27                	jle    c002364e <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0023627:	50                   	push   eax
c0023628:	50                   	push   eax
c0023629:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002362d:	8b 06                	mov    eax,DWORD PTR [esi]
c002362f:	03 04 9d a0 00 04 c0 	add    eax,DWORD PTR [ebx*4-0x3ffbff60]
c0023636:	50                   	push   eax
c0023637:	e8 14 d1 fd ff       	call   c0000750 <strcmp>
c002363c:	83 c4 10             	add    esp,0x10
c002363f:	85 c0                	test   eax,eax
c0023641:	75 05                	jne    c0023648 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0023643:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0023646:	eb 0b                	jmp    c0023653 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0023648:	83 c6 10             	add    esi,0x10
c002364b:	47                   	inc    edi
c002364c:	eb d0                	jmp    c002361e <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c002364e:	43                   	inc    ebx
c002364f:	eb bc                	jmp    c002360d <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0023651:	31 c0                	xor    eax,eax
c0023653:	5b                   	pop    ebx
c0023654:	5e                   	pop    esi
c0023655:	5f                   	pop    edi
c0023656:	c3                   	ret    

c0023657 <Thr::loadKernelSymbolTable(char const*)>:
c0023657:	55                   	push   ebp
c0023658:	57                   	push   edi
c0023659:	56                   	push   esi
c002365a:	53                   	push   ebx
c002365b:	83 ec 68             	sub    esp,0x68
c002365e:	8b 35 f8 01 04 c0    	mov    esi,DWORD PTR ds:0xc00401f8
c0023664:	68 14 01 00 00       	push   0x114
c0023669:	e8 44 2c ff ff       	call   c00162b2 <malloc>
c002366e:	83 c4 0c             	add    esp,0xc
c0023671:	89 c3                	mov    ebx,eax
c0023673:	56                   	push   esi
c0023674:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0023678:	50                   	push   eax
c0023679:	e8 ca 6c ff ff       	call   c001a348 <File::File(char const*, Process*)>
c002367e:	5e                   	pop    esi
c002367f:	5f                   	pop    edi
c0023680:	6a 01                	push   0x1
c0023682:	53                   	push   ebx
c0023683:	e8 de 6c ff ff       	call   c001a366 <File::open(FileOpenMode)>
c0023688:	83 c4 10             	add    esp,0x10
c002368b:	85 c0                	test   eax,eax
c002368d:	74 0a                	je     c0023699 <Thr::loadKernelSymbolTable(char const*)+0x42>
c002368f:	83 ec 0c             	sub    esp,0xc
c0023692:	68 c3 27 03 c0       	push   0xc00327c3
c0023697:	eb 34                	jmp    c00236cd <Thr::loadKernelSymbolTable(char const*)+0x76>
c0023699:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00236a1:	83 ec 0c             	sub    esp,0xc
c00236a4:	6a 34                	push   0x34
c00236a6:	e8 07 2c ff ff       	call   c00162b2 <malloc>
c00236ab:	59                   	pop    ecx
c00236ac:	89 c7                	mov    edi,eax
c00236ae:	8d 74 24 34          	lea    esi,[esp+0x34]
c00236b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00236b4:	56                   	push   esi
c00236b5:	57                   	push   edi
c00236b6:	6a 00                	push   0x0
c00236b8:	6a 34                	push   0x34
c00236ba:	53                   	push   ebx
c00236bb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00236be:	83 c4 20             	add    esp,0x20
c00236c1:	85 c0                	test   eax,eax
c00236c3:	74 17                	je     c00236dc <Thr::loadKernelSymbolTable(char const*)+0x85>
c00236c5:	83 ec 0c             	sub    esp,0xc
c00236c8:	68 da 27 03 c0       	push   0xc00327da
c00236cd:	e8 79 c9 ff ff       	call   c002004b <KePanic(char const*)>
c00236d2:	83 c4 10             	add    esp,0x10
c00236d5:	31 c0                	xor    eax,eax
c00236d7:	e9 31 02 00 00       	jmp    c002390d <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c00236dc:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00236e2:	75 e1                	jne    c00236c5 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00236e4:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00236e7:	85 c0                	test   eax,eax
c00236e9:	74 da                	je     c00236c5 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00236eb:	52                   	push   edx
c00236ec:	31 d2                	xor    edx,edx
c00236ee:	52                   	push   edx
c00236ef:	50                   	push   eax
c00236f0:	53                   	push   ebx
c00236f1:	e8 2e 6d ff ff       	call   c001a424 <File::seek(unsigned long long)>
c00236f6:	83 c4 10             	add    esp,0x10
c00236f9:	85 c0                	test   eax,eax
c00236fb:	75 c8                	jne    c00236c5 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00236fd:	83 ec 0c             	sub    esp,0xc
c0023700:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0023704:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0023708:	31 ed                	xor    ebp,ebp
c002370a:	0f af c2             	imul   eax,edx
c002370d:	50                   	push   eax
c002370e:	e8 9f 2b ff ff       	call   c00162b2 <malloc>
c0023713:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0023715:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023719:	89 34 24             	mov    DWORD PTR [esp],esi
c002371c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023720:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0023724:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0023728:	0f af c2             	imul   eax,edx
c002372b:	99                   	cdq    
c002372c:	52                   	push   edx
c002372d:	50                   	push   eax
c002372e:	53                   	push   ebx
c002372f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023732:	83 c4 20             	add    esp,0x20
c0023735:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c002373d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0023745:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002374d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0023755:	0f b7 f5             	movzx  esi,bp
c0023758:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c002375c:	0f 83 a7 00 00 00    	jae    c0023809 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0023762:	6b f6 28             	imul   esi,esi,0x28
c0023765:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0023769:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c002376c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023770:	50                   	push   eax
c0023771:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0023775:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0023779:	8b 16                	mov    edx,DWORD PTR [esi]
c002377b:	6b c0 28             	imul   eax,eax,0x28
c002377e:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0023782:	89 d0                	mov    eax,edx
c0023784:	31 d2                	xor    edx,edx
c0023786:	52                   	push   edx
c0023787:	50                   	push   eax
c0023788:	53                   	push   ebx
c0023789:	e8 96 6c ff ff       	call   c001a424 <File::seek(unsigned long long)>
c002378e:	83 c4 0c             	add    esp,0xc
c0023791:	6a 20                	push   0x20
c0023793:	6a 00                	push   0x0
c0023795:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0023799:	52                   	push   edx
c002379a:	e8 51 cd fd ff       	call   c00004f0 <memset>
c002379f:	58                   	pop    eax
c00237a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00237a2:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00237a6:	51                   	push   ecx
c00237a7:	8d 54 24 40          	lea    edx,[esp+0x40]
c00237ab:	52                   	push   edx
c00237ac:	6a 00                	push   0x0
c00237ae:	6a 1f                	push   0x1f
c00237b0:	53                   	push   ebx
c00237b1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00237b4:	83 c4 18             	add    esp,0x18
c00237b7:	68 f1 27 03 c0       	push   0xc00327f1
c00237bc:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00237c0:	52                   	push   edx
c00237c1:	e8 8a cf fd ff       	call   c0000750 <strcmp>
c00237c6:	83 c4 10             	add    esp,0x10
c00237c9:	85 c0                	test   eax,eax
c00237cb:	75 0f                	jne    c00237dc <Thr::loadKernelSymbolTable(char const*)+0x185>
c00237cd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00237d0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00237d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00237d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00237dc:	50                   	push   eax
c00237dd:	50                   	push   eax
c00237de:	68 f9 27 03 c0       	push   0xc00327f9
c00237e3:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00237e7:	50                   	push   eax
c00237e8:	e8 63 cf fd ff       	call   c0000750 <strcmp>
c00237ed:	83 c4 10             	add    esp,0x10
c00237f0:	85 c0                	test   eax,eax
c00237f2:	75 0f                	jne    c0023803 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00237f4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00237f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00237fb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00237ff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023803:	45                   	inc    ebp
c0023804:	e9 4c ff ff ff       	jmp    c0023755 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0023809:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002380e:	75 10                	jne    c0023820 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0023810:	83 ec 0c             	sub    esp,0xc
c0023813:	68 01 28 03 c0       	push   0xc0032801
c0023818:	e8 2e c8 ff ff       	call   c002004b <KePanic(char const*)>
c002381d:	83 c4 10             	add    esp,0x10
c0023820:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0023825:	75 10                	jne    c0023837 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0023827:	83 ec 0c             	sub    esp,0xc
c002382a:	68 01 28 03 c0       	push   0xc0032801
c002382f:	e8 17 c8 ff ff       	call   c002004b <KePanic(char const*)>
c0023834:	83 c4 10             	add    esp,0x10
c0023837:	31 d2                	xor    edx,edx
c0023839:	50                   	push   eax
c002383a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002383e:	52                   	push   edx
c002383f:	50                   	push   eax
c0023840:	53                   	push   ebx
c0023841:	e8 de 6b ff ff       	call   c001a424 <File::seek(unsigned long long)>
c0023846:	5a                   	pop    edx
c0023847:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002384b:	e8 62 2a ff ff       	call   c00162b2 <malloc>
c0023850:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023854:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023858:	31 c9                	xor    ecx,ecx
c002385a:	5e                   	pop    esi
c002385b:	8b 03                	mov    eax,DWORD PTR [ebx]
c002385d:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0023861:	55                   	push   ebp
c0023862:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023866:	51                   	push   ecx
c0023867:	52                   	push   edx
c0023868:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c002386c:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0023870:	53                   	push   ebx
c0023871:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023874:	83 c4 14             	add    esp,0x14
c0023877:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002387b:	e8 32 2a ff ff       	call   c00162b2 <malloc>
c0023880:	89 c6                	mov    esi,eax
c0023882:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023884:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0023887:	56                   	push   esi
c0023888:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002388c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0023890:	51                   	push   ecx
c0023891:	52                   	push   edx
c0023892:	53                   	push   ebx
c0023893:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023896:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002389a:	8b 15 a0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401a0
c00238a0:	83 c4 1c             	add    esp,0x1c
c00238a3:	c1 e8 04             	shr    eax,0x4
c00238a6:	89 04 95 20 00 04 c0 	mov    DWORD PTR [edx*4-0x3ffbffe0],eax
c00238ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00238b1:	31 d2                	xor    edx,edx
c00238b3:	52                   	push   edx
c00238b4:	50                   	push   eax
c00238b5:	53                   	push   ebx
c00238b6:	e8 69 6b ff ff       	call   c001a424 <File::seek(unsigned long long)>
c00238bb:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00238bd:	31 d2                	xor    edx,edx
c00238bf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00238c2:	56                   	push   esi
c00238c3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00238c7:	52                   	push   edx
c00238c8:	50                   	push   eax
c00238c9:	53                   	push   ebx
c00238ca:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00238cd:	83 c4 14             	add    esp,0x14
c00238d0:	53                   	push   ebx
c00238d1:	e8 ee 6a ff ff       	call   c001a3c4 <File::close()>
c00238d6:	5d                   	pop    ebp
c00238d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00238db:	e8 e2 29 ff ff       	call   c00162c2 <free>
c00238e0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00238e3:	e8 da 29 ff ff       	call   c00162c2 <free>
c00238e8:	a1 a0 01 04 c0       	mov    eax,ds:0xc00401a0
c00238ed:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00238f1:	8d 50 01             	lea    edx,[eax+0x1]
c00238f4:	89 0c 85 20 01 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfee0],ecx
c00238fb:	89 34 85 a0 00 04 c0 	mov    DWORD PTR [eax*4-0x3ffbff60],esi
c0023902:	89 15 a0 01 04 c0    	mov    DWORD PTR ds:0xc00401a0,edx
c0023908:	83 c4 10             	add    esp,0x10
c002390b:	b0 01                	mov    al,0x1
c002390d:	83 c4 5c             	add    esp,0x5c
c0023910:	5b                   	pop    ebx
c0023911:	5e                   	pop    esi
c0023912:	5f                   	pop    edi
c0023913:	5d                   	pop    ebp
c0023914:	c3                   	ret    

c0023915 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0023915:	55                   	push   ebp
c0023916:	57                   	push   edi
c0023917:	56                   	push   esi
c0023918:	53                   	push   ebx
c0023919:	81 ec 68 03 00 00    	sub    esp,0x368
c002391f:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0023926:	8b 1d f8 01 04 c0    	mov    ebx,DWORD PTR ds:0xc00401f8
c002392c:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0023930:	68 14 01 00 00       	push   0x114
c0023935:	e8 78 29 ff ff       	call   c00162b2 <malloc>
c002393a:	83 c4 0c             	add    esp,0xc
c002393d:	89 c5                	mov    ebp,eax
c002393f:	53                   	push   ebx
c0023940:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0023947:	50                   	push   eax
c0023948:	e8 fb 69 ff ff       	call   c001a348 <File::File(char const*, Process*)>
c002394d:	5e                   	pop    esi
c002394e:	5f                   	pop    edi
c002394f:	6a 01                	push   0x1
c0023951:	55                   	push   ebp
c0023952:	e8 0f 6a ff ff       	call   c001a366 <File::open(FileOpenMode)>
c0023957:	83 c4 10             	add    esp,0x10
c002395a:	85 c0                	test   eax,eax
c002395c:	0f 85 aa 06 00 00    	jne    c002400c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0023962:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c002396a:	83 ec 0c             	sub    esp,0xc
c002396d:	6a 34                	push   0x34
c002396f:	e8 3e 29 ff ff       	call   c00162b2 <malloc>
c0023974:	5b                   	pop    ebx
c0023975:	89 c7                	mov    edi,eax
c0023977:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c002397b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002397e:	53                   	push   ebx
c002397f:	57                   	push   edi
c0023980:	6a 00                	push   0x0
c0023982:	6a 34                	push   0x34
c0023984:	55                   	push   ebp
c0023985:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023988:	83 c4 20             	add    esp,0x20
c002398b:	85 c0                	test   eax,eax
c002398d:	0f 85 79 06 00 00    	jne    c002400c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0023993:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0023999:	0f 85 6d 06 00 00    	jne    c002400c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c002399f:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00239a2:	85 c0                	test   eax,eax
c00239a4:	0f 84 62 06 00 00    	je     c002400c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00239aa:	31 d2                	xor    edx,edx
c00239ac:	51                   	push   ecx
c00239ad:	52                   	push   edx
c00239ae:	50                   	push   eax
c00239af:	55                   	push   ebp
c00239b0:	e8 6f 6a ff ff       	call   c001a424 <File::seek(unsigned long long)>
c00239b5:	83 c4 10             	add    esp,0x10
c00239b8:	85 c0                	test   eax,eax
c00239ba:	0f 85 4c 06 00 00    	jne    c002400c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00239c0:	83 ec 0c             	sub    esp,0xc
c00239c3:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00239c6:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00239ca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00239ce:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00239d2:	0f af c2             	imul   eax,edx
c00239d5:	50                   	push   eax
c00239d6:	e8 d7 28 ff ff       	call   c00162b2 <malloc>
c00239db:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00239de:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00239e2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00239e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00239e9:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00239ed:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00239f1:	0f af c2             	imul   eax,edx
c00239f4:	99                   	cdq    
c00239f5:	52                   	push   edx
c00239f6:	50                   	push   eax
c00239f7:	55                   	push   ebp
c00239f8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00239fb:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c00239fe:	83 c4 20             	add    esp,0x20
c0023a01:	85 c0                	test   eax,eax
c0023a03:	0f 84 03 06 00 00    	je     c002400c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0023a09:	52                   	push   edx
c0023a0a:	31 d2                	xor    edx,edx
c0023a0c:	52                   	push   edx
c0023a0d:	50                   	push   eax
c0023a0e:	55                   	push   ebp
c0023a0f:	e8 10 6a ff ff       	call   c001a424 <File::seek(unsigned long long)>
c0023a14:	83 c4 10             	add    esp,0x10
c0023a17:	85 c0                	test   eax,eax
c0023a19:	0f 85 ed 05 00 00    	jne    c002400c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0023a1f:	83 ec 0c             	sub    esp,0xc
c0023a22:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0023a26:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0023a2a:	31 f6                	xor    esi,esi
c0023a2c:	0f af c2             	imul   eax,edx
c0023a2f:	50                   	push   eax
c0023a30:	e8 7d 28 ff ff       	call   c00162b2 <malloc>
c0023a35:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0023a38:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0023a3c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023a3f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0023a43:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0023a47:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0023a4b:	0f af c2             	imul   eax,edx
c0023a4e:	99                   	cdq    
c0023a4f:	52                   	push   edx
c0023a50:	50                   	push   eax
c0023a51:	55                   	push   ebp
c0023a52:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023a55:	83 c4 20             	add    esp,0x20
c0023a58:	0f b7 de             	movzx  ebx,si
c0023a5b:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c0023a5f:	0f 83 87 00 00 00    	jae    c0023aec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0023a65:	c1 e3 05             	shl    ebx,0x5
c0023a68:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0023a6c:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0023a6f:	75 75                	jne    c0023ae6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0023a71:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023a74:	31 d2                	xor    edx,edx
c0023a76:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023a7a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0023a7d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023a81:	50                   	push   eax
c0023a82:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0023a85:	52                   	push   edx
c0023a86:	50                   	push   eax
c0023a87:	55                   	push   ebp
c0023a88:	e8 97 69 ff ff       	call   c001a424 <File::seek(unsigned long long)>
c0023a8d:	83 c4 10             	add    esp,0x10
c0023a90:	85 c0                	test   eax,eax
c0023a92:	0f 85 74 05 00 00    	jne    c002400c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0023a98:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0023a9f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0023aa2:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0023aa6:	31 d2                	xor    edx,edx
c0023aa8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0023aac:	83 ec 0c             	sub    esp,0xc
c0023aaf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023ab3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0023aba:	50                   	push   eax
c0023abb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023abf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023ac3:	52                   	push   edx
c0023ac4:	50                   	push   eax
c0023ac5:	55                   	push   ebp
c0023ac6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023ac9:	83 c4 1c             	add    esp,0x1c
c0023acc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0023acf:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0023ad2:	50                   	push   eax
c0023ad3:	6a 00                	push   0x0
c0023ad5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ad9:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0023add:	50                   	push   eax
c0023ade:	e8 0d ca fd ff       	call   c00004f0 <memset>
c0023ae3:	83 c4 10             	add    esp,0x10
c0023ae6:	46                   	inc    esi
c0023ae7:	e9 6c ff ff ff       	jmp    c0023a58 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0023aec:	53                   	push   ebx
c0023aed:	31 db                	xor    ebx,ebx
c0023aef:	68 00 01 00 00       	push   0x100
c0023af4:	6a 00                	push   0x0
c0023af6:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0023afa:	50                   	push   eax
c0023afb:	e8 f0 c9 fd ff       	call   c00004f0 <memset>
c0023b00:	83 c4 0c             	add    esp,0xc
c0023b03:	68 00 01 00 00       	push   0x100
c0023b08:	6a 00                	push   0x0
c0023b0a:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0023b11:	50                   	push   eax
c0023b12:	e8 d9 c9 fd ff       	call   c00004f0 <memset>
c0023b17:	83 c4 10             	add    esp,0x10
c0023b1a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023b22:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0023b2a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0023b32:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0023b3a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0023b42:	0f b7 f3             	movzx  esi,bx
c0023b45:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c0023b49:	0f 83 2d 01 00 00    	jae    c0023c7c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0023b4f:	6b f6 28             	imul   esi,esi,0x28
c0023b52:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0023b56:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0023b59:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023b5d:	52                   	push   edx
c0023b5e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0023b62:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0023b66:	8b 06                	mov    eax,DWORD PTR [esi]
c0023b68:	6b d2 28             	imul   edx,edx,0x28
c0023b6b:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0023b6f:	31 d2                	xor    edx,edx
c0023b71:	52                   	push   edx
c0023b72:	50                   	push   eax
c0023b73:	55                   	push   ebp
c0023b74:	e8 ab 68 ff ff       	call   c001a424 <File::seek(unsigned long long)>
c0023b79:	83 c4 0c             	add    esp,0xc
c0023b7c:	6a 20                	push   0x20
c0023b7e:	6a 00                	push   0x0
c0023b80:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0023b87:	51                   	push   ecx
c0023b88:	e8 63 c9 fd ff       	call   c00004f0 <memset>
c0023b8d:	59                   	pop    ecx
c0023b8e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023b91:	8d 54 24 58          	lea    edx,[esp+0x58]
c0023b95:	52                   	push   edx
c0023b96:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0023b9d:	51                   	push   ecx
c0023b9e:	6a 00                	push   0x0
c0023ba0:	6a 1f                	push   0x1f
c0023ba2:	55                   	push   ebp
c0023ba3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023ba6:	83 c4 1c             	add    esp,0x1c
c0023ba9:	6a 09                	push   0x9
c0023bab:	68 1b 28 03 c0       	push   0xc003281b
c0023bb0:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0023bb7:	51                   	push   ecx
c0023bb8:	e8 c3 c7 fd ff       	call   c0000380 <memcmp>
c0023bbd:	83 c4 10             	add    esp,0x10
c0023bc0:	85 c0                	test   eax,eax
c0023bc2:	75 21                	jne    c0023be5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0023bc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023bc8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0023bcc:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0023bd0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023bd4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0023bd7:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0023bde:	89 d0                	mov    eax,edx
c0023be0:	40                   	inc    eax
c0023be1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023be5:	50                   	push   eax
c0023be6:	6a 09                	push   0x9
c0023be8:	68 25 28 03 c0       	push   0xc0032825
c0023bed:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0023bf4:	50                   	push   eax
c0023bf5:	e8 86 c7 fd ff       	call   c0000380 <memcmp>
c0023bfa:	83 c4 10             	add    esp,0x10
c0023bfd:	85 c0                	test   eax,eax
c0023bff:	75 21                	jne    c0023c22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0023c01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023c05:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023c09:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0023c0d:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c0023c11:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0023c14:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0023c1b:	89 d0                	mov    eax,edx
c0023c1d:	40                   	inc    eax
c0023c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023c22:	50                   	push   eax
c0023c23:	50                   	push   eax
c0023c24:	68 f1 27 03 c0       	push   0xc00327f1
c0023c29:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0023c30:	50                   	push   eax
c0023c31:	e8 1a cb fd ff       	call   c0000750 <strcmp>
c0023c36:	83 c4 10             	add    esp,0x10
c0023c39:	85 c0                	test   eax,eax
c0023c3b:	75 0f                	jne    c0023c4c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0023c3d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0023c40:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023c44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023c48:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023c4c:	50                   	push   eax
c0023c4d:	50                   	push   eax
c0023c4e:	68 f9 27 03 c0       	push   0xc00327f9
c0023c53:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0023c5a:	50                   	push   eax
c0023c5b:	e8 f0 ca fd ff       	call   c0000750 <strcmp>
c0023c60:	83 c4 10             	add    esp,0x10
c0023c63:	85 c0                	test   eax,eax
c0023c65:	75 0f                	jne    c0023c76 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0023c67:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0023c6a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023c6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023c72:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0023c76:	43                   	inc    ebx
c0023c77:	e9 c6 fe ff ff       	jmp    c0023b42 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0023c7c:	31 d2                	xor    edx,edx
c0023c7e:	50                   	push   eax
c0023c7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023c83:	52                   	push   edx
c0023c84:	50                   	push   eax
c0023c85:	55                   	push   ebp
c0023c86:	e8 99 67 ff ff       	call   c001a424 <File::seek(unsigned long long)>
c0023c8b:	58                   	pop    eax
c0023c8c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0023c90:	e8 1d 26 ff ff       	call   c00162b2 <malloc>
c0023c95:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0023c98:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0023c9c:	31 d2                	xor    edx,edx
c0023c9e:	58                   	pop    eax
c0023c9f:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0023ca3:	53                   	push   ebx
c0023ca4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0023ca8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0023cac:	52                   	push   edx
c0023cad:	50                   	push   eax
c0023cae:	55                   	push   ebp
c0023caf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023cb2:	83 c4 14             	add    esp,0x14
c0023cb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0023cb9:	e8 f4 25 ff ff       	call   c00162b2 <malloc>
c0023cbe:	31 d2                	xor    edx,edx
c0023cc0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0023cc4:	83 c4 0c             	add    esp,0xc
c0023cc7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023ccb:	52                   	push   edx
c0023ccc:	50                   	push   eax
c0023ccd:	55                   	push   ebp
c0023cce:	e8 51 67 ff ff       	call   c001a424 <File::seek(unsigned long long)>
c0023cd3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0023cd6:	31 d2                	xor    edx,edx
c0023cd8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023cdb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023cdf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0023ce3:	52                   	push   edx
c0023ce4:	50                   	push   eax
c0023ce5:	55                   	push   ebp
c0023ce6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023ce9:	83 c4 20             	add    esp,0x20
c0023cec:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c0023cf1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0023cf9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0023cfd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0023d01:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0023d05:	0f 84 05 03 00 00    	je     c0024010 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c0023d0b:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0023d12:	31 d2                	xor    edx,edx
c0023d14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023d18:	c1 e8 03             	shr    eax,0x3
c0023d1b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0023d1f:	51                   	push   ecx
c0023d20:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023d24:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0023d28:	52                   	push   edx
c0023d29:	50                   	push   eax
c0023d2a:	55                   	push   ebp
c0023d2b:	e8 f4 66 ff ff       	call   c001a424 <File::seek(unsigned long long)>
c0023d30:	5b                   	pop    ebx
c0023d31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023d35:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0023d3c:	e8 71 25 ff ff       	call   c00162b2 <malloc>
c0023d41:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0023d44:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023d48:	31 d2                	xor    edx,edx
c0023d4a:	5e                   	pop    esi
c0023d4b:	8d 44 24 58          	lea    eax,[esp+0x58]
c0023d4f:	50                   	push   eax
c0023d50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023d54:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0023d58:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0023d5f:	52                   	push   edx
c0023d60:	50                   	push   eax
c0023d61:	55                   	push   ebp
c0023d62:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023d65:	83 c4 20             	add    esp,0x20
c0023d68:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0023d70:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0023d74:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c0023d78:	0f 8d 76 02 00 00    	jge    c0023ff4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c0023d7e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0023d82:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023d86:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c0023d8b:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0023d8e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0023d92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023d96:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c0023d9a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023d9e:	c1 e8 08             	shr    eax,0x8
c0023da1:	89 c6                	mov    esi,eax
c0023da3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0023da7:	c1 e6 04             	shl    esi,0x4
c0023daa:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0023dae:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0023db1:	85 db                	test   ebx,ebx
c0023db3:	0f 85 b3 00 00 00    	jne    c0023e6c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0023db9:	83 ec 0c             	sub    esp,0xc
c0023dbc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0023dc0:	03 06                	add    eax,DWORD PTR [esi]
c0023dc2:	50                   	push   eax
c0023dc3:	e8 40 f8 ff ff       	call   c0023608 <Thr::getAddressOfKernelSymbol(char const*)>
c0023dc8:	83 c4 10             	add    esp,0x10
c0023dcb:	89 c3                	mov    ebx,eax
c0023dcd:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c0023dd2:	85 c0                	test   eax,eax
c0023dd4:	0f 85 92 00 00 00    	jne    c0023e6c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0023dda:	83 ec 0c             	sub    esp,0xc
c0023ddd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0023de1:	03 06                	add    eax,DWORD PTR [esi]
c0023de3:	50                   	push   eax
c0023de4:	e8 4f c4 ff ff       	call   c0020238 <KeResolveCompatibilitySymbol(char*)>
c0023de9:	83 c4 10             	add    esp,0x10
c0023dec:	89 c3                	mov    ebx,eax
c0023dee:	85 c0                	test   eax,eax
c0023df0:	75 7a                	jne    c0023e6c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0023df2:	51                   	push   ecx
c0023df3:	51                   	push   ecx
c0023df4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023df8:	03 06                	add    eax,DWORD PTR [esi]
c0023dfa:	50                   	push   eax
c0023dfb:	68 2f 28 03 c0       	push   0xc003282f
c0023e00:	e8 3c 53 ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0023e05:	58                   	pop    eax
c0023e06:	5a                   	pop    edx
c0023e07:	68 49 28 03 c0       	push   0xc0032849
c0023e0c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0023e13:	50                   	push   eax
c0023e14:	e8 27 c8 fd ff       	call   c0000640 <strcpy>
c0023e19:	59                   	pop    ecx
c0023e1a:	58                   	pop    eax
c0023e1b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023e1f:	03 06                	add    eax,DWORD PTR [esi]
c0023e21:	50                   	push   eax
c0023e22:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0023e29:	50                   	push   eax
c0023e2a:	e8 11 ca fd ff       	call   c0000840 <strcat>
c0023e2f:	58                   	pop    eax
c0023e30:	5a                   	pop    edx
c0023e31:	68 e3 28 03 c0       	push   0xc00328e3
c0023e36:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0023e3d:	50                   	push   eax
c0023e3e:	e8 fd c9 fd ff       	call   c0000840 <strcat>
c0023e43:	83 c4 10             	add    esp,0x10
c0023e46:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0023e4b:	0f 84 5d 01 00 00    	je     c0023fae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0023e51:	83 ec 0c             	sub    esp,0xc
c0023e54:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0023e5b:	50                   	push   eax
c0023e5c:	e8 ea c1 ff ff       	call   c002004b <KePanic(char const*)>
c0023e61:	83 c4 10             	add    esp,0x10
c0023e64:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0023e68:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c0023e6c:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0023e71:	83 f8 01             	cmp    eax,0x1
c0023e74:	0f 85 8f 00 00 00    	jne    c0023f09 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c0023e7a:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0023e81:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0023e85:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0023e89:	01 ce                	add    esi,ecx
c0023e8b:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0023e93:	0f 94 c0             	sete   al
c0023e96:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0023e9e:	0f 94 c2             	sete   dl
c0023ea1:	09 c2                	or     edx,eax
c0023ea3:	8b 06                	mov    eax,DWORD PTR [esi]
c0023ea5:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0023eaa:	0f b6 d2             	movzx  edx,dl
c0023ead:	74 41                	je     c0023ef0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c0023eaf:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c0023eb2:	85 d2                	test   edx,edx
c0023eb4:	75 15                	jne    c0023ecb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c0023eb6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0023eba:	66 83 f8 0c          	cmp    ax,0xc
c0023ebe:	76 05                	jbe    c0023ec5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c0023ec0:	b8 0c 00 00 00       	mov    eax,0xc
c0023ec5:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0023ec9:	76 37                	jbe    c0023f02 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0023ecb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0023ecf:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0023ed4:	0f 84 d4 00 00 00    	je     c0023fae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0023eda:	83 ec 0c             	sub    esp,0xc
c0023edd:	68 60 28 03 c0       	push   0xc0032860
c0023ee2:	e8 64 c1 ff ff       	call   c002004b <KePanic(char const*)>
c0023ee7:	83 c4 10             	add    esp,0x10
c0023eea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0023eee:	eb 12                	jmp    c0023f02 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0023ef0:	01 c1                	add    ecx,eax
c0023ef2:	85 d2                	test   edx,edx
c0023ef4:	75 0c                	jne    c0023f02 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0023ef6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0023efa:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0023efe:	77 02                	ja     c0023f02 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0023f00:	01 d9                	add    ecx,ebx
c0023f02:	89 0e                	mov    DWORD PTR [esi],ecx
c0023f04:	e9 e2 00 00 00       	jmp    c0023feb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0023f09:	83 f8 02             	cmp    eax,0x2
c0023f0c:	75 77                	jne    c0023f85 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c0023f0e:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0023f15:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c0023f19:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c0023f1d:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0023f25:	74 21                	je     c0023f48 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0023f27:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0023f2f:	74 17                	je     c0023f48 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0023f31:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c0023f35:	b8 0a 00 00 00       	mov    eax,0xa
c0023f3a:	83 fa 0e             	cmp    edx,0xe
c0023f3d:	77 03                	ja     c0023f42 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c0023f3f:	8d 42 fc             	lea    eax,[edx-0x4]
c0023f42:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0023f46:	76 17                	jbe    c0023f5f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c0023f48:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0023f4d:	74 5f                	je     c0023fae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0023f4f:	83 ec 0c             	sub    esp,0xc
c0023f52:	68 7c 28 03 c0       	push   0xc003287c
c0023f57:	e8 ef c0 ff ff       	call   c002004b <KePanic(char const*)>
c0023f5c:	83 c4 10             	add    esp,0x10
c0023f5f:	8b 06                	mov    eax,DWORD PTR [esi]
c0023f61:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0023f66:	74 13                	je     c0023f7b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c0023f68:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023f6c:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c0023f73:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c0023f77:	01 d0                	add    eax,edx
c0023f79:	eb 04                	jmp    c0023f7f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0023f7b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0023f7f:	01 c3                	add    ebx,eax
c0023f81:	89 1e                	mov    DWORD PTR [esi],ebx
c0023f83:	eb 66                	jmp    c0023feb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0023f85:	52                   	push   edx
c0023f86:	52                   	push   edx
c0023f87:	50                   	push   eax
c0023f88:	68 98 28 03 c0       	push   0xc0032898
c0023f8d:	e8 af 51 ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0023f92:	83 c4 10             	add    esp,0x10
c0023f95:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0023f9a:	74 12                	je     c0023fae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0023f9c:	83 ec 0c             	sub    esp,0xc
c0023f9f:	68 a3 28 03 c0       	push   0xc00328a3
c0023fa4:	e8 a2 c0 ff ff       	call   c002004b <KePanic(char const*)>
c0023fa9:	83 c4 10             	add    esp,0x10
c0023fac:	eb 3d                	jmp    c0023feb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0023fae:	83 ec 0c             	sub    esp,0xc
c0023fb1:	55                   	push   ebp
c0023fb2:	e8 0d 64 ff ff       	call   c001a3c4 <File::close()>
c0023fb7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023fba:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0023fbd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023fc0:	59                   	pop    ecx
c0023fc1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023fc5:	e8 f8 22 ff ff       	call   c00162c2 <free>
c0023fca:	5b                   	pop    ebx
c0023fcb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023fcf:	e8 ee 22 ff ff       	call   c00162c2 <free>
c0023fd4:	89 3c 24             	mov    DWORD PTR [esp],edi
c0023fd7:	e8 e6 22 ff ff       	call   c00162c2 <free>
c0023fdc:	5e                   	pop    esi
c0023fdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023fe1:	e8 dc 22 ff ff       	call   c00162c2 <free>
c0023fe6:	83 c4 10             	add    esp,0x10
c0023fe9:	eb 21                	jmp    c002400c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0023feb:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0023fef:	e9 7c fd ff ff       	jmp    c0023d70 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c0023ff4:	83 ec 0c             	sub    esp,0xc
c0023ff7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023ffb:	e8 c2 22 ff ff       	call   c00162c2 <free>
c0024000:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0024004:	83 c4 10             	add    esp,0x10
c0024007:	e9 f1 fc ff ff       	jmp    c0023cfd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c002400c:	31 c0                	xor    eax,eax
c002400e:	eb 33                	jmp    c0024043 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c0024010:	83 ec 0c             	sub    esp,0xc
c0024013:	55                   	push   ebp
c0024014:	e8 ab 63 ff ff       	call   c001a3c4 <File::close()>
c0024019:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002401c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c002401f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024022:	58                   	pop    eax
c0024023:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024027:	e8 96 22 ff ff       	call   c00162c2 <free>
c002402c:	89 3c 24             	mov    DWORD PTR [esp],edi
c002402f:	e8 8e 22 ff ff       	call   c00162c2 <free>
c0024034:	5a                   	pop    edx
c0024035:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024039:	e8 84 22 ff ff       	call   c00162c2 <free>
c002403e:	83 c4 10             	add    esp,0x10
c0024041:	b0 01                	mov    al,0x1
c0024043:	81 c4 5c 03 00 00    	add    esp,0x35c
c0024049:	5b                   	pop    ebx
c002404a:	5e                   	pop    esi
c002404b:	5f                   	pop    edi
c002404c:	5d                   	pop    ebp
c002404d:	c3                   	ret    

c002404e <Thr::getDriverBaseFromAddress(unsigned long)>:
c002404e:	56                   	push   esi
c002404f:	31 d2                	xor    edx,edx
c0024051:	53                   	push   ebx
c0024052:	8b 1d 00 fa 03 c0    	mov    ebx,DWORD PTR ds:0xc003fa00
c0024058:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002405c:	39 d3                	cmp    ebx,edx
c002405e:	7e 1b                	jle    c002407b <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0024060:	8b 04 95 20 fc 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc03e0]
c0024067:	39 c8                	cmp    eax,ecx
c0024069:	77 0d                	ja     c0024078 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c002406b:	8b 34 95 20 fa 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffc05e0]
c0024072:	01 c6                	add    esi,eax
c0024074:	39 ce                	cmp    esi,ecx
c0024076:	77 05                	ja     c002407d <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0024078:	42                   	inc    edx
c0024079:	eb e1                	jmp    c002405c <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c002407b:	31 c0                	xor    eax,eax
c002407d:	5b                   	pop    ebx
c002407e:	5e                   	pop    esi
c002407f:	c3                   	ret    

c0024080 <Thr::getDriverNameFromAddress(unsigned long)>:
c0024080:	53                   	push   ebx
c0024081:	31 c0                	xor    eax,eax
c0024083:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024087:	8b 1d 00 fa 03 c0    	mov    ebx,DWORD PTR ds:0xc003fa00
c002408d:	39 c3                	cmp    ebx,eax
c002408f:	7e 22                	jle    c00240b3 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0024091:	8b 14 85 20 fc 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc03e0]
c0024098:	39 ca                	cmp    edx,ecx
c002409a:	77 14                	ja     c00240b0 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c002409c:	03 14 85 20 fa 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffc05e0]
c00240a3:	39 ca                	cmp    edx,ecx
c00240a5:	76 09                	jbe    c00240b0 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00240a7:	8b 04 85 20 fe 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc01e0]
c00240ae:	eb 05                	jmp    c00240b5 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00240b0:	40                   	inc    eax
c00240b1:	eb da                	jmp    c002408d <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00240b3:	31 c0                	xor    eax,eax
c00240b5:	5b                   	pop    ebx
c00240b6:	c3                   	ret    

c00240b7 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00240b7:	53                   	push   ebx
c00240b8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00240bc:	53                   	push   ebx
c00240bd:	e8 8c ff ff ff       	call   c002404e <Thr::getDriverBaseFromAddress(unsigned long)>
c00240c2:	5a                   	pop    edx
c00240c3:	31 d2                	xor    edx,edx
c00240c5:	85 c0                	test   eax,eax
c00240c7:	74 04                	je     c00240cd <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00240c9:	89 da                	mov    edx,ebx
c00240cb:	29 c2                	sub    edx,eax
c00240cd:	89 d0                	mov    eax,edx
c00240cf:	5b                   	pop    ebx
c00240d0:	c3                   	ret    

c00240d1 <Thr::loadDLL(char const*, bool)>:
c00240d1:	55                   	push   ebp
c00240d2:	57                   	push   edi
c00240d3:	56                   	push   esi
c00240d4:	53                   	push   ebx
c00240d5:	81 ec 34 01 00 00    	sub    esp,0x134
c00240db:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00240e2:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00240e9:	56                   	push   esi
c00240ea:	68 bb 28 03 c0       	push   0xc00328bb
c00240ef:	e8 4d 50 ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c00240f4:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00240fb:	e8 b2 21 ff ff       	call   c00162b2 <malloc>
c0024100:	83 c4 0c             	add    esp,0xc
c0024103:	89 c3                	mov    ebx,eax
c0024105:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c002410b:	56                   	push   esi
c002410c:	50                   	push   eax
c002410d:	e8 36 62 ff ff       	call   c001a348 <File::File(char const*, Process*)>
c0024112:	83 c4 10             	add    esp,0x10
c0024115:	85 db                	test   ebx,ebx
c0024117:	75 3c                	jne    c0024155 <Thr::loadDLL(char const*, bool)+0x84>
c0024119:	89 f8                	mov    eax,edi
c002411b:	84 c0                	test   al,al
c002411d:	0f 84 f3 01 00 00    	je     c0024316 <Thr::loadDLL(char const*, bool)+0x245>
c0024123:	55                   	push   ebp
c0024124:	55                   	push   ebp
c0024125:	68 cc 28 03 c0       	push   0xc00328cc
c002412a:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c002412e:	55                   	push   ebp
c002412f:	e8 0c c5 fd ff       	call   c0000640 <strcpy>
c0024134:	58                   	pop    eax
c0024135:	5a                   	pop    edx
c0024136:	56                   	push   esi
c0024137:	55                   	push   ebp
c0024138:	e8 03 c7 fd ff       	call   c0000840 <strcat>
c002413d:	59                   	pop    ecx
c002413e:	58                   	pop    eax
c002413f:	68 e3 28 03 c0       	push   0xc00328e3
c0024144:	55                   	push   ebp
c0024145:	e8 f6 c6 fd ff       	call   c0000840 <strcat>
c002414a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c002414d:	e8 f9 be ff ff       	call   c002004b <KePanic(char const*)>
c0024152:	83 c4 10             	add    esp,0x10
c0024155:	51                   	push   ecx
c0024156:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c002415a:	50                   	push   eax
c002415b:	8d 44 24 20          	lea    eax,[esp+0x20]
c002415f:	50                   	push   eax
c0024160:	53                   	push   ebx
c0024161:	e8 02 65 ff ff       	call   c001a668 <File::stat(unsigned long long*, bool*)>
c0024166:	83 c4 10             	add    esp,0x10
c0024169:	89 c5                	mov    ebp,eax
c002416b:	85 db                	test   ebx,ebx
c002416d:	74 0c                	je     c002417b <Thr::loadDLL(char const*, bool)+0xaa>
c002416f:	83 ec 0c             	sub    esp,0xc
c0024172:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024174:	53                   	push   ebx
c0024175:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024178:	83 c4 10             	add    esp,0x10
c002417b:	83 ec 0c             	sub    esp,0xc
c002417e:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c0024183:	50                   	push   eax
c0024184:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024188:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002418c:	55                   	push   ebp
c002418d:	68 e5 28 03 c0       	push   0xc00328e5
c0024192:	e8 aa 4f ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0024197:	83 c4 20             	add    esp,0x20
c002419a:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c002419f:	75 0a                	jne    c00241ab <Thr::loadDLL(char const*, bool)+0xda>
c00241a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00241a5:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00241a9:	75 3c                	jne    c00241e7 <Thr::loadDLL(char const*, bool)+0x116>
c00241ab:	89 f8                	mov    eax,edi
c00241ad:	84 c0                	test   al,al
c00241af:	0f 84 49 01 00 00    	je     c00242fe <Thr::loadDLL(char const*, bool)+0x22d>
c00241b5:	51                   	push   ecx
c00241b6:	51                   	push   ecx
c00241b7:	68 06 29 03 c0       	push   0xc0032906
c00241bc:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00241c0:	53                   	push   ebx
c00241c1:	e8 7a c4 fd ff       	call   c0000640 <strcpy>
c00241c6:	5d                   	pop    ebp
c00241c7:	58                   	pop    eax
c00241c8:	56                   	push   esi
c00241c9:	53                   	push   ebx
c00241ca:	e8 71 c6 fd ff       	call   c0000840 <strcat>
c00241cf:	58                   	pop    eax
c00241d0:	5a                   	pop    edx
c00241d1:	68 e3 28 03 c0       	push   0xc00328e3
c00241d6:	53                   	push   ebx
c00241d7:	e8 64 c6 fd ff       	call   c0000840 <strcat>
c00241dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00241df:	e8 67 be ff ff       	call   c002004b <KePanic(char const*)>
c00241e4:	83 c4 10             	add    esp,0x10
c00241e7:	52                   	push   edx
c00241e8:	6a 03                	push   0x3
c00241ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00241ee:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00241f2:	05 ff 0f 00 00       	add    eax,0xfff
c00241f7:	83 d2 00             	adc    edx,0x0
c00241fa:	0f ac d0 0c          	shrd   eax,edx,0xc
c00241fe:	50                   	push   eax
c00241ff:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c0024205:	e8 16 44 ff ff       	call   c0018620 <VAS::allocatePages(int, int)>
c002420a:	59                   	pop    ecx
c002420b:	89 c3                	mov    ebx,eax
c002420d:	5d                   	pop    ebp
c002420e:	50                   	push   eax
c002420f:	68 62 0d 03 c0       	push   0xc0030d62
c0024214:	e8 28 4f ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0024219:	89 34 24             	mov    DWORD PTR [esp],esi
c002421c:	e8 4f c3 fd ff       	call   c0000570 <strlen>
c0024221:	8b 2d 00 fa 03 c0    	mov    ebp,DWORD PTR ds:0xc003fa00
c0024227:	40                   	inc    eax
c0024228:	89 04 24             	mov    DWORD PTR [esp],eax
c002422b:	e8 82 20 ff ff       	call   c00162b2 <malloc>
c0024230:	89 04 ad 20 fe 03 c0 	mov    DWORD PTR [ebp*4-0x3ffc01e0],eax
c0024237:	58                   	pop    eax
c0024238:	a1 00 fa 03 c0       	mov    eax,ds:0xc003fa00
c002423d:	5a                   	pop    edx
c002423e:	56                   	push   esi
c002423f:	ff 34 85 20 fe 03 c0 	push   DWORD PTR [eax*4-0x3ffc01e0]
c0024246:	e8 f5 c3 fd ff       	call   c0000640 <strcpy>
c002424b:	a1 00 fa 03 c0       	mov    eax,ds:0xc003fa00
c0024250:	8d 50 01             	lea    edx,[eax+0x1]
c0024253:	89 1c 85 20 fc 03 c0 	mov    DWORD PTR [eax*4-0x3ffc03e0],ebx
c002425a:	89 15 00 fa 03 c0    	mov    DWORD PTR ds:0xc003fa00,edx
c0024260:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0024264:	83 c4 0c             	add    esp,0xc
c0024267:	89 14 85 20 fa 03 c0 	mov    DWORD PTR [eax*4-0x3ffc05e0],edx
c002426e:	6a 01                	push   0x1
c0024270:	53                   	push   ebx
c0024271:	56                   	push   esi
c0024272:	e8 9e f6 ff ff       	call   c0023915 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0024277:	83 c4 10             	add    esp,0x10
c002427a:	0f b6 c0             	movzx  eax,al
c002427d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024281:	85 c0                	test   eax,eax
c0024283:	0f 85 89 00 00 00    	jne    c0024312 <Thr::loadDLL(char const*, bool)+0x241>
c0024289:	89 f8                	mov    eax,edi
c002428b:	84 c0                	test   al,al
c002428d:	74 73                	je     c0024302 <Thr::loadDLL(char const*, bool)+0x231>
c002428f:	83 ec 0c             	sub    esp,0xc
c0024292:	68 1f 29 03 c0       	push   0xc003291f
c0024297:	e8 af bd ff ff       	call   c002004b <KePanic(char const*)>
c002429c:	83 c4 10             	add    esp,0x10
c002429f:	eb 61                	jmp    c0024302 <Thr::loadDLL(char const*, bool)+0x231>
c00242a1:	50                   	push   eax
c00242a2:	50                   	push   eax
c00242a3:	89 e8                	mov    eax,ebp
c00242a5:	c1 e0 0c             	shl    eax,0xc
c00242a8:	01 d8                	add    eax,ebx
c00242aa:	50                   	push   eax
c00242ab:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c00242b1:	e8 52 3e ff ff       	call   c0018108 <VAS::getPageTableEntry(unsigned long)>
c00242b6:	83 c4 10             	add    esp,0x10
c00242b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00242bb:	a8 60                	test   al,0x60
c00242bd:	75 11                	jne    c00242d0 <Thr::loadDLL(char const*, bool)+0x1ff>
c00242bf:	83 ec 0c             	sub    esp,0xc
c00242c2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00242c7:	50                   	push   eax
c00242c8:	e8 85 22 ff ff       	call   c0016552 <Phys::freePage(unsigned long)>
c00242cd:	83 c4 10             	add    esp,0x10
c00242d0:	45                   	inc    ebp
c00242d1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00242d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00242d9:	05 ff 0f 00 00       	add    eax,0xfff
c00242de:	bf 00 00 00 00       	mov    edi,0x0
c00242e3:	83 d2 00             	adc    edx,0x0
c00242e6:	0f ac d0 0c          	shrd   eax,edx,0xc
c00242ea:	c1 ea 0c             	shr    edx,0xc
c00242ed:	39 c5                	cmp    ebp,eax
c00242ef:	89 d1                	mov    ecx,edx
c00242f1:	89 f8                	mov    eax,edi
c00242f3:	19 c8                	sbb    eax,ecx
c00242f5:	72 aa                	jb     c00242a1 <Thr::loadDLL(char const*, bool)+0x1d0>
c00242f7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00242fc:	75 18                	jne    c0024316 <Thr::loadDLL(char const*, bool)+0x245>
c00242fe:	31 db                	xor    ebx,ebx
c0024300:	eb 14                	jmp    c0024316 <Thr::loadDLL(char const*, bool)+0x245>
c0024302:	83 ec 0c             	sub    esp,0xc
c0024305:	68 3e 29 03 c0       	push   0xc003293e
c002430a:	e8 3c bd ff ff       	call   c002004b <KePanic(char const*)>
c002430f:	83 c4 10             	add    esp,0x10
c0024312:	31 ed                	xor    ebp,ebp
c0024314:	eb bb                	jmp    c00242d1 <Thr::loadDLL(char const*, bool)+0x200>
c0024316:	81 c4 2c 01 00 00    	add    esp,0x12c
c002431c:	89 d8                	mov    eax,ebx
c002431e:	5b                   	pop    ebx
c002431f:	5e                   	pop    esi
c0024320:	5f                   	pop    edi
c0024321:	5d                   	pop    ebp
c0024322:	c3                   	ret    

c0024323 <Thr::executeDLL(unsigned long, void*)>:
c0024323:	56                   	push   esi
c0024324:	53                   	push   ebx
c0024325:	52                   	push   edx
c0024326:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002432a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002432e:	85 db                	test   ebx,ebx
c0024330:	75 10                	jne    c0024342 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0024332:	83 ec 0c             	sub    esp,0xc
c0024335:	68 5a 29 03 c0       	push   0xc003295a
c002433a:	e8 0c bd ff ff       	call   c002004b <KePanic(char const*)>
c002433f:	83 c4 10             	add    esp,0x10
c0024342:	50                   	push   eax
c0024343:	50                   	push   eax
c0024344:	53                   	push   ebx
c0024345:	68 84 29 03 c0       	push   0xc0032984
c002434a:	e8 f2 4d ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c002434f:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0024353:	89 d8                	mov    eax,ebx
c0024355:	83 c4 14             	add    esp,0x14
c0024358:	5b                   	pop    ebx
c0024359:	5e                   	pop    esi
c002435a:	ff e0                	jmp    eax

c002435c <userModeEntryPoint(void*)>:
c002435c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0024361:	83 e8 01             	sub    eax,0x1
c0024364:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0024369:	75 01                	jne    c002436c <userModeEntryPoint(void*)+0x10>
c002436b:	fb                   	sti    
c002436c:	fb                   	sti    
c002436d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024372:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0024375:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c002437b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002437f:	e9 bb be fd ff       	jmp    c000023f <goToUsermode>

c0024384 <changeTSS>:
c0024384:	83 ec 14             	sub    esp,0x14
c0024387:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002438c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c002438f:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0024394:	c1 e2 15             	shl    edx,0x15
c0024397:	29 d0                	sub    eax,edx
c0024399:	50                   	push   eax
c002439a:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002439f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00243a5:	05 7c 11 00 00       	add    eax,0x117c
c00243aa:	50                   	push   eax
c00243ab:	e8 a0 33 ff ff       	call   c0017750 <TSS::setESP(unsigned long)>
c00243b0:	83 c4 1c             	add    esp,0x1c
c00243b3:	c3                   	ret    

c00243b4 <switchToThread(ThreadControlBlock*)>:
c00243b4:	57                   	push   edi
c00243b5:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c00243bb:	56                   	push   esi
c00243bc:	85 c9                	test   ecx,ecx
c00243be:	53                   	push   ebx
c00243bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00243c3:	0f 85 8b 00 00 00    	jne    c0024454 <switchToThread(ThreadControlBlock*)+0xa0>
c00243c9:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c00243cd:	81 fa ff 00 00 00    	cmp    edx,0xff
c00243d3:	74 7b                	je     c0024450 <switchToThread(ThreadControlBlock*)+0x9c>
c00243d5:	b8 00 04 00 00       	mov    eax,0x400
c00243da:	29 d0                	sub    eax,edx
c00243dc:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00243df:	d1 f8                	sar    eax,1
c00243e1:	01 d0                	add    eax,edx
c00243e3:	90                   	nop
c00243e4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00243e7:	e8 66 28 00 00       	call   c0026c52 <HalQueryPerformanceCounter()>
c00243ec:	a3 10 02 04 c0       	mov    ds:0xc0040210,eax
c00243f1:	89 15 14 02 04 c0    	mov    DWORD PTR ds:0xc0040214,edx
c00243f7:	89 c6                	mov    esi,eax
c00243f9:	89 d7                	mov    edi,edx
c00243fb:	2b 35 00 02 04 c0    	sub    esi,DWORD PTR ds:0xc0040200
c0024401:	a3 00 02 04 c0       	mov    ds:0xc0040200,eax
c0024406:	1b 3d 04 02 04 c0    	sbb    edi,DWORD PTR ds:0xc0040204
c002440c:	89 35 08 02 04 c0    	mov    DWORD PTR ds:0xc0040208,esi
c0024412:	89 3d 0c 02 04 c0    	mov    DWORD PTR ds:0xc004020c,edi
c0024418:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c002441e:	89 15 04 02 04 c0    	mov    DWORD PTR ds:0xc0040204,edx
c0024424:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0024427:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c002442a:	01 c6                	add    esi,eax
c002442c:	11 d7                	adc    edi,edx
c002442e:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0024431:	83 ec 0c             	sub    esp,0xc
c0024434:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0024437:	53                   	push   ebx
c0024438:	e8 3a be fd ff       	call   c0000277 <switchToThreadASM>
c002443d:	0f 20 c0             	mov    eax,cr0
c0024440:	83 c8 08             	or     eax,0x8
c0024443:	0f 22 c0             	mov    cr0,eax
c0024446:	83 c4 10             	add    esp,0x10
c0024449:	5b                   	pop    ebx
c002444a:	5e                   	pop    esi
c002444b:	5f                   	pop    edi
c002444c:	c3                   	ret    
c002444d:	8d 76 00             	lea    esi,[esi+0x0]
c0024450:	31 c0                	xor    eax,eax
c0024452:	eb 90                	jmp    c00243e4 <switchToThread(ThreadControlBlock*)+0x30>
c0024454:	5b                   	pop    ebx
c0024455:	c7 05 c8 01 04 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x1
c002445f:	5e                   	pop    esi
c0024460:	5f                   	pop    edi
c0024461:	c3                   	ret    
c0024462:	66 90                	xchg   ax,ax

c0024464 <Process::addArgs(char**)>:
c0024464:	57                   	push   edi
c0024465:	56                   	push   esi
c0024466:	53                   	push   ebx
c0024467:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002446b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c002446f:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0024479:	85 ff                	test   edi,edi
c002447b:	74 4f                	je     c00244cc <Process::addArgs(char**)+0x68>
c002447d:	8b 07                	mov    eax,DWORD PTR [edi]
c002447f:	85 c0                	test   eax,eax
c0024481:	74 49                	je     c00244cc <Process::addArgs(char**)+0x68>
c0024483:	31 db                	xor    ebx,ebx
c0024485:	8d 76 00             	lea    esi,[esi+0x0]
c0024488:	83 ec 0c             	sub    esp,0xc
c002448b:	50                   	push   eax
c002448c:	e8 df c0 fd ff       	call   c0000570 <strlen>
c0024491:	83 c0 01             	add    eax,0x1
c0024494:	89 04 24             	mov    DWORD PTR [esp],eax
c0024497:	e8 16 1e ff ff       	call   c00162b2 <malloc>
c002449c:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c00244a3:	5a                   	pop    edx
c00244a4:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00244a7:	59                   	pop    ecx
c00244a8:	83 c3 01             	add    ebx,0x1
c00244ab:	52                   	push   edx
c00244ac:	50                   	push   eax
c00244ad:	e8 8e c1 fd ff       	call   c0000640 <strcpy>
c00244b2:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c00244b8:	83 c4 10             	add    esp,0x10
c00244bb:	83 c1 01             	add    ecx,0x1
c00244be:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c00244c4:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00244c7:	85 c0                	test   eax,eax
c00244c9:	75 bd                	jne    c0024488 <Process::addArgs(char**)+0x24>
c00244cb:	90                   	nop
c00244cc:	5b                   	pop    ebx
c00244cd:	5e                   	pop    esi
c00244ce:	5f                   	pop    edi
c00244cf:	c3                   	ret    

c00244d0 <Process::Process(char const*, Process*, char**)>:
c00244d0:	56                   	push   esi
c00244d1:	53                   	push   ebx
c00244d2:	83 ec 14             	sub    esp,0x14
c00244d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00244d9:	05 0c 02 00 00       	add    eax,0x20c
c00244de:	bb 07 00 00 00       	mov    ebx,0x7
c00244e3:	89 c6                	mov    esi,eax
c00244e5:	8d 76 00             	lea    esi,[esi+0x0]
c00244e8:	85 db                	test   ebx,ebx
c00244ea:	78 14                	js     c0024500 <Process::Process(char const*, Process*, char**)+0x30>
c00244ec:	83 ec 0c             	sub    esp,0xc
c00244ef:	56                   	push   esi
c00244f0:	e8 63 a6 00 00       	call   c002eb58 <ThreadControlBlock::ThreadControlBlock()>
c00244f5:	83 c4 10             	add    esp,0x10
c00244f8:	83 c6 5f             	add    esi,0x5f
c00244fb:	83 eb 01             	sub    ebx,0x1
c00244fe:	eb e8                	jmp    c00244e8 <Process::Process(char const*, Process*, char**)+0x18>
c0024500:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024504:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c002450b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002450f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0024516:	83 ec 0c             	sub    esp,0xc
c0024519:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002451d:	e8 1e b9 ff ff       	call   c001fe40 <KeNewProcessEnv(Process*)>
c0024522:	83 c4 10             	add    esp,0x10
c0024525:	89 c2                	mov    edx,eax
c0024527:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002452b:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0024531:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024535:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c002453e:	a1 c0 3f 03 c0       	mov    eax,ds:0xc0033fc0
c0024543:	8d 50 01             	lea    edx,[eax+0x1]
c0024546:	89 15 c0 3f 03 c0    	mov    DWORD PTR ds:0xc0033fc0,edx
c002454c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0024550:	89 02                	mov    DWORD PTR [edx],eax
c0024552:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c002455a:	83 ec 0c             	sub    esp,0xc
c002455d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024561:	e8 4c 1d ff ff       	call   c00162b2 <malloc>
c0024566:	83 c4 10             	add    esp,0x10
c0024569:	89 c3                	mov    ebx,eax
c002456b:	83 ec 08             	sub    esp,0x8
c002456e:	6a 00                	push   0x0
c0024570:	53                   	push   ebx
c0024571:	e8 ee 42 ff ff       	call   c0018864 <VAS::VAS(bool)>
c0024576:	83 c4 10             	add    esp,0x10
c0024579:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002457d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0024583:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024587:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0024591:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024595:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0024599:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c002459f:	e8 c2 be ff ff       	call   c0020466 <KeInitSignals()>
c00245a4:	89 c2                	mov    edx,eax
c00245a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00245aa:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00245b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00245b4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00245ba:	85 c0                	test   eax,eax
c00245bc:	74 42                	je     c0024600 <Process::Process(char const*, Process*, char**)+0x130>
c00245be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00245c2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00245c8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00245ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00245d2:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00245d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00245dc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00245e2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00245e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00245ec:	05 0c 01 00 00       	add    eax,0x10c
c00245f1:	83 ec 08             	sub    esp,0x8
c00245f4:	52                   	push   edx
c00245f5:	50                   	push   eax
c00245f6:	e8 45 c0 fd ff       	call   c0000640 <strcpy>
c00245fb:	83 c4 10             	add    esp,0x10
c00245fe:	eb 64                	jmp    c0024664 <Process::Process(char const*, Process*, char**)+0x194>
c0024600:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0024608:	83 ec 0c             	sub    esp,0xc
c002460b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002460f:	e8 9e 1c ff ff       	call   c00162b2 <malloc>
c0024614:	83 c4 10             	add    esp,0x10
c0024617:	89 c3                	mov    ebx,eax
c0024619:	83 ec 08             	sub    esp,0x8
c002461c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024620:	53                   	push   ebx
c0024621:	e8 3c 2e ff ff       	call   c0017462 <VgaText::VgaText(char const*)>
c0024626:	83 c4 10             	add    esp,0x10
c0024629:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002462d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0024633:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024637:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002463d:	83 ec 0c             	sub    esp,0xc
c0024640:	50                   	push   eax
c0024641:	e8 ba 26 ff ff       	call   c0016d00 <addToTerminalCycle(VgaText*)>
c0024646:	83 c4 10             	add    esp,0x10
c0024649:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002464d:	05 0c 01 00 00       	add    eax,0x10c
c0024652:	83 ec 08             	sub    esp,0x8
c0024655:	68 a3 29 03 c0       	push   0xc00329a3
c002465a:	50                   	push   eax
c002465b:	e8 e0 bf fd ff       	call   c0000640 <strcpy>
c0024660:	83 c4 10             	add    esp,0x10
c0024663:	90                   	nop
c0024664:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024668:	83 c0 0c             	add    eax,0xc
c002466b:	83 ec 08             	sub    esp,0x8
c002466e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024672:	50                   	push   eax
c0024673:	e8 c8 bf fd ff       	call   c0000640 <strcpy>
c0024678:	83 c4 10             	add    esp,0x10
c002467b:	83 ec 08             	sub    esp,0x8
c002467e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0024682:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024686:	e8 d9 fd ff ff       	call   c0024464 <Process::addArgs(char**)>
c002468b:	83 c4 10             	add    esp,0x10
c002468e:	83 ec 08             	sub    esp,0x8
c0024691:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024695:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024699:	e8 45 ed ff ff       	call   c00233e3 <Thr::loadProgramIntoMemory(Process*, char const*)>
c002469e:	83 c4 10             	add    esp,0x10
c00246a1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00246a5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00246a9:	83 f0 01             	xor    eax,0x1
c00246ac:	88 c2                	mov    dl,al
c00246ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00246b2:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c00246b8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00246bd:	83 ec 04             	sub    esp,0x4
c00246c0:	50                   	push   eax
c00246c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00246c5:	68 fc 29 03 c0       	push   0xc00329fc
c00246ca:	e8 72 4a ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c00246cf:	83 c4 10             	add    esp,0x10
c00246d2:	90                   	nop
c00246d3:	83 c4 14             	add    esp,0x14
c00246d6:	5b                   	pop    ebx
c00246d7:	5e                   	pop    esi
c00246d8:	c3                   	ret    
c00246d9:	90                   	nop
c00246da:	66 90                	xchg   ax,ax

c00246dc <Process::Process(bool, char const*, Process*, char**)>:
c00246dc:	56                   	push   esi
c00246dd:	53                   	push   ebx
c00246de:	83 ec 24             	sub    esp,0x24
c00246e1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00246e5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00246e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00246ed:	05 0c 02 00 00       	add    eax,0x20c
c00246f2:	bb 07 00 00 00       	mov    ebx,0x7
c00246f7:	89 c6                	mov    esi,eax
c00246f9:	8d 76 00             	lea    esi,[esi+0x0]
c00246fc:	85 db                	test   ebx,ebx
c00246fe:	78 14                	js     c0024714 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0024700:	83 ec 0c             	sub    esp,0xc
c0024703:	56                   	push   esi
c0024704:	e8 4f a4 00 00       	call   c002eb58 <ThreadControlBlock::ThreadControlBlock()>
c0024709:	83 c4 10             	add    esp,0x10
c002470c:	83 c6 5f             	add    esi,0x5f
c002470f:	83 eb 01             	sub    ebx,0x1
c0024712:	eb e8                	jmp    c00246fc <Process::Process(bool, char const*, Process*, char**)+0x20>
c0024714:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024718:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c002471f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024723:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c002472a:	83 ec 0c             	sub    esp,0xc
c002472d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024731:	e8 0a b7 ff ff       	call   c001fe40 <KeNewProcessEnv(Process*)>
c0024736:	83 c4 10             	add    esp,0x10
c0024739:	89 c2                	mov    edx,eax
c002473b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002473f:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0024745:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024749:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0024752:	a1 c0 3f 03 c0       	mov    eax,ds:0xc0033fc0
c0024757:	8d 50 01             	lea    edx,[eax+0x1]
c002475a:	89 15 c0 3f 03 c0    	mov    DWORD PTR ds:0xc0033fc0,edx
c0024760:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024764:	89 02                	mov    DWORD PTR [edx],eax
c0024766:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c002476e:	83 ec 0c             	sub    esp,0xc
c0024771:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0024775:	e8 38 1b ff ff       	call   c00162b2 <malloc>
c002477a:	83 c4 10             	add    esp,0x10
c002477d:	89 c3                	mov    ebx,eax
c002477f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0024784:	83 ec 08             	sub    esp,0x8
c0024787:	50                   	push   eax
c0024788:	53                   	push   ebx
c0024789:	e8 d6 40 ff ff       	call   c0018864 <VAS::VAS(bool)>
c002478e:	83 c4 10             	add    esp,0x10
c0024791:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024795:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c002479b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002479f:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00247a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00247ad:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00247b1:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00247b7:	e8 aa bc ff ff       	call   c0020466 <KeInitSignals()>
c00247bc:	89 c2                	mov    edx,eax
c00247be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00247c2:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00247c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00247cc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00247d2:	85 c0                	test   eax,eax
c00247d4:	74 42                	je     c0024818 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c00247d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00247da:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00247e0:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00247e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00247ea:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00247f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00247f4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00247fa:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0024800:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024804:	05 0c 01 00 00       	add    eax,0x10c
c0024809:	83 ec 08             	sub    esp,0x8
c002480c:	52                   	push   edx
c002480d:	50                   	push   eax
c002480e:	e8 2d be fd ff       	call   c0000640 <strcpy>
c0024813:	83 c4 10             	add    esp,0x10
c0024816:	eb 64                	jmp    c002487c <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0024818:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0024820:	83 ec 0c             	sub    esp,0xc
c0024823:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0024827:	e8 86 1a ff ff       	call   c00162b2 <malloc>
c002482c:	83 c4 10             	add    esp,0x10
c002482f:	89 c3                	mov    ebx,eax
c0024831:	83 ec 08             	sub    esp,0x8
c0024834:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0024838:	53                   	push   ebx
c0024839:	e8 24 2c ff ff       	call   c0017462 <VgaText::VgaText(char const*)>
c002483e:	83 c4 10             	add    esp,0x10
c0024841:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024845:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c002484b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002484f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0024855:	83 ec 0c             	sub    esp,0xc
c0024858:	50                   	push   eax
c0024859:	e8 a2 24 ff ff       	call   c0016d00 <addToTerminalCycle(VgaText*)>
c002485e:	83 c4 10             	add    esp,0x10
c0024861:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024865:	05 0c 01 00 00       	add    eax,0x10c
c002486a:	83 ec 08             	sub    esp,0x8
c002486d:	68 a3 29 03 c0       	push   0xc00329a3
c0024872:	50                   	push   eax
c0024873:	e8 c8 bd fd ff       	call   c0000640 <strcpy>
c0024878:	83 c4 10             	add    esp,0x10
c002487b:	90                   	nop
c002487c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024880:	83 c0 0c             	add    eax,0xc
c0024883:	83 ec 08             	sub    esp,0x8
c0024886:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002488a:	50                   	push   eax
c002488b:	e8 b0 bd fd ff       	call   c0000640 <strcpy>
c0024890:	83 c4 10             	add    esp,0x10
c0024893:	83 ec 08             	sub    esp,0x8
c0024896:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002489a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002489e:	e8 c1 fb ff ff       	call   c0024464 <Process::addArgs(char**)>
c00248a3:	83 c4 10             	add    esp,0x10
c00248a6:	90                   	nop
c00248a7:	83 c4 24             	add    esp,0x24
c00248aa:	5b                   	pop    ebx
c00248ab:	5e                   	pop    esi
c00248ac:	c3                   	ret    
c00248ad:	8d 76 00             	lea    esi,[esi+0x0]

c00248b0 <taskStartupFunction>:
c00248b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00248b5:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00248b8:	c3                   	ret    
c00248b9:	90                   	nop
c00248ba:	66 90                	xchg   ax,ax

c00248bc <Semaphore::Semaphore(int)>:
c00248bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00248c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00248c4:	89 10                	mov    DWORD PTR [eax],edx
c00248c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00248ca:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00248d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00248d5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00248dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00248e0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00248e7:	90                   	nop
c00248e8:	c3                   	ret    
c00248e9:	90                   	nop
c00248ea:	66 90                	xchg   ax,ax

c00248ec <Mutex::Mutex()>:
c00248ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00248f0:	6a 01                	push   0x1
c00248f2:	50                   	push   eax
c00248f3:	e8 c4 ff ff ff       	call   c00248bc <Semaphore::Semaphore(int)>
c00248f8:	83 c4 08             	add    esp,0x8
c00248fb:	90                   	nop
c00248fc:	c3                   	ret    
c00248fd:	8d 76 00             	lea    esi,[esi+0x0]

c0024900 <KeDisablePreemption()>:
c0024900:	a1 ac 01 04 c0       	mov    eax,ds:0xc00401ac
c0024905:	85 c0                	test   eax,eax
c0024907:	75 13                	jne    c002491c <KeDisablePreemption()+0x1c>
c0024909:	8a 15 c0 a9 03 c0    	mov    dl,BYTE PTR ds:0xc003a9c0
c002490f:	c6 05 c0 a9 03 c0 00 	mov    BYTE PTR ds:0xc003a9c0,0x0
c0024916:	88 15 a8 01 04 c0    	mov    BYTE PTR ds:0xc00401a8,dl
c002491c:	83 c0 01             	add    eax,0x1
c002491f:	a3 ac 01 04 c0       	mov    ds:0xc00401ac,eax
c0024924:	c3                   	ret    
c0024925:	8d 76 00             	lea    esi,[esi+0x0]

c0024928 <KeRestorePreemption()>:
c0024928:	a1 ac 01 04 c0       	mov    eax,ds:0xc00401ac
c002492d:	83 e8 01             	sub    eax,0x1
c0024930:	a3 ac 01 04 c0       	mov    ds:0xc00401ac,eax
c0024935:	75 0d                	jne    c0024944 <KeRestorePreemption()+0x1c>
c0024937:	a0 a8 01 04 c0       	mov    al,ds:0xc00401a8
c002493c:	a2 c0 a9 03 c0       	mov    ds:0xc003a9c0,al
c0024941:	8d 76 00             	lea    esi,[esi+0x0]
c0024944:	c3                   	ret    
c0024945:	90                   	nop
c0024946:	66 90                	xchg   ax,ax

c0024948 <Process::createThread(void (*)(void*), void*, int)>:
c0024948:	57                   	push   edi
c0024949:	31 c9                	xor    ecx,ecx
c002494b:	56                   	push   esi
c002494c:	53                   	push   ebx
c002494d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024951:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0024958:	89 f2                	mov    edx,esi
c002495a:	66 90                	xchg   ax,ax
c002495c:	0f b7 c2             	movzx  eax,dx
c002495f:	80 e2 01             	and    dl,0x1
c0024962:	74 14                	je     c0024978 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0024964:	d1 f8                	sar    eax,1
c0024966:	83 c1 01             	add    ecx,0x1
c0024969:	89 c2                	mov    edx,eax
c002496b:	83 f9 10             	cmp    ecx,0x10
c002496e:	75 ec                	jne    c002495c <Process::createThread(void (*)(void*), void*, int)+0x14>
c0024970:	31 db                	xor    ebx,ebx
c0024972:	89 d8                	mov    eax,ebx
c0024974:	5b                   	pop    ebx
c0024975:	5e                   	pop    esi
c0024976:	5f                   	pop    edi
c0024977:	c3                   	ret    
c0024978:	b8 01 00 00 00       	mov    eax,0x1
c002497d:	d3 e0                	shl    eax,cl
c002497f:	09 c6                	or     esi,eax
c0024981:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0024984:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c002498b:	01 c0                	add    eax,eax
c002498d:	01 c8                	add    eax,ecx
c002498f:	8d 04 80             	lea    eax,[eax+eax*4]
c0024992:	01 d8                	add    eax,ebx
c0024994:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c002499b:	75 0b                	jne    c00249a8 <Process::createThread(void (*)(void*), void*, int)+0x60>
c002499d:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00249a7:	90                   	nop
c00249a8:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00249ae:	83 ec 0c             	sub    esp,0xc
c00249b1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00249b4:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00249b7:	01 c0                	add    eax,eax
c00249b9:	01 c8                	add    eax,ecx
c00249bb:	8d 3c 80             	lea    edi,[eax+eax*4]
c00249be:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00249c1:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00249c7:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c00249cd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00249d1:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00249d7:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00249dd:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00249e3:	89 ca                	mov    edx,ecx
c00249e5:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c00249ec:	f7 da                	neg    edx
c00249ee:	c1 e2 15             	shl    edx,0x15
c00249f1:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00249f7:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00249fd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0024a01:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0024a0b:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0024a11:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0024a15:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0024a1b:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0024a25:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0024a2f:	68 00 01 00 00       	push   0x100
c0024a34:	e8 79 18 ff ff       	call   c00162b2 <malloc>
c0024a39:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0024a3c:	58                   	pop    eax
c0024a3d:	5a                   	pop    edx
c0024a3e:	53                   	push   ebx
c0024a3f:	68 ec 01 04 c0       	push   0xc00401ec
c0024a44:	e8 a7 9e 00 00       	call   c002e8f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0024a49:	83 c4 10             	add    esp,0x10
c0024a4c:	89 d8                	mov    eax,ebx
c0024a4e:	5b                   	pop    ebx
c0024a4f:	5e                   	pop    esi
c0024a50:	5f                   	pop    edi
c0024a51:	c3                   	ret    
c0024a52:	66 90                	xchg   ax,ax

c0024a54 <Process::createUserThread()>:
c0024a54:	83 ec 0c             	sub    esp,0xc
c0024a57:	68 80 00 00 00       	push   0x80
c0024a5c:	6a 00                	push   0x0
c0024a5e:	68 5c 43 02 c0       	push   0xc002435c
c0024a63:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024a67:	50                   	push   eax
c0024a68:	e8 db fe ff ff       	call   c0024948 <Process::createThread(void (*)(void*), void*, int)>
c0024a6d:	83 c4 1c             	add    esp,0x1c
c0024a70:	c3                   	ret    
c0024a71:	8d 76 00             	lea    esi,[esi+0x0]

c0024a74 <setupMultitasking(void (*)())>:
c0024a74:	56                   	push   esi
c0024a75:	53                   	push   ebx
c0024a76:	83 ec 04             	sub    esp,0x4
c0024a79:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024a7d:	eb 11                	jmp    c0024a90 <setupMultitasking(void (*)())+0x1c>
c0024a7f:	90                   	nop
c0024a80:	83 ec 0c             	sub    esp,0xc
c0024a83:	68 ec 01 04 c0       	push   0xc00401ec
c0024a88:	e8 a7 9d 00 00       	call   c002e834 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0024a8d:	83 c4 10             	add    esp,0x10
c0024a90:	83 ec 0c             	sub    esp,0xc
c0024a93:	68 ec 01 04 c0       	push   0xc00401ec
c0024a98:	e8 73 9d 00 00       	call   c002e810 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0024a9d:	83 c4 10             	add    esp,0x10
c0024aa0:	84 c0                	test   al,al
c0024aa2:	74 dc                	je     c0024a80 <setupMultitasking(void (*)())+0xc>
c0024aa4:	83 ec 0c             	sub    esp,0xc
c0024aa7:	68 24 07 00 00       	push   0x724
c0024aac:	e8 01 18 ff ff       	call   c00162b2 <malloc>
c0024ab1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0024ab8:	89 c3                	mov    ebx,eax
c0024aba:	6a 00                	push   0x0
c0024abc:	68 a7 29 03 c0       	push   0xc00329a7
c0024ac1:	6a 01                	push   0x1
c0024ac3:	50                   	push   eax
c0024ac4:	e8 13 fc ff ff       	call   c00246dc <Process::Process(bool, char const*, Process*, char**)>
c0024ac9:	83 c4 14             	add    esp,0x14
c0024acc:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0024ad2:	89 1d f8 01 04 c0    	mov    DWORD PTR ds:0xc00401f8,ebx
c0024ad8:	50                   	push   eax
c0024ad9:	e8 77 24 ff ff       	call   c0016f55 <setActiveTerminal(VgaText*)>
c0024ade:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0024ae5:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0024aef:	83 c8 01             	or     eax,0x1
c0024af2:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0024af9:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0024aff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0024b02:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0024b0c:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0024b12:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0024b18:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0024b22:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0024b2c:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0024b36:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0024b3c:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0024b46:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0024b4c:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0024b56:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0024b5d:	e8 50 17 ff ff       	call   c00162b2 <malloc>
c0024b62:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0024b68:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0024b6e:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0024b74:	5a                   	pop    edx
c0024b75:	59                   	pop    ecx
c0024b76:	68 a3 29 03 c0       	push   0xc00329a3
c0024b7b:	50                   	push   eax
c0024b7c:	e8 bf ba fd ff       	call   c0000640 <strcpy>
c0024b81:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0024b88:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0024b8c:	83 c4 14             	add    esp,0x14
c0024b8f:	5b                   	pop    ebx
c0024b90:	5e                   	pop    esi
c0024b91:	e9 d3 b6 fd ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0024b96:	66 90                	xchg   ax,ax

c0024b98 <schedule()>:
c0024b98:	8b 15 cc 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401cc
c0024b9e:	85 d2                	test   edx,edx
c0024ba0:	74 0e                	je     c0024bb0 <schedule()+0x18>
c0024ba2:	c7 05 c8 01 04 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x1
c0024bac:	c3                   	ret    
c0024bad:	8d 76 00             	lea    esi,[esi+0x0]
c0024bb0:	53                   	push   ebx
c0024bb1:	83 ec 14             	sub    esp,0x14
c0024bb4:	68 ec 01 04 c0       	push   0xc00401ec
c0024bb9:	e8 52 9c 00 00       	call   c002e810 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0024bbe:	83 c4 10             	add    esp,0x10
c0024bc1:	84 c0                	test   al,al
c0024bc3:	75 3f                	jne    c0024c04 <schedule()+0x6c>
c0024bc5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024bca:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024bcd:	83 fa 01             	cmp    edx,0x1
c0024bd0:	74 3a                	je     c0024c0c <schedule()+0x74>
c0024bd2:	66 90                	xchg   ax,ax
c0024bd4:	83 ec 0c             	sub    esp,0xc
c0024bd7:	68 ec 01 04 c0       	push   0xc00401ec
c0024bdc:	e8 4b 9c 00 00       	call   c002e82c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0024be1:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c0024be8:	89 c3                	mov    ebx,eax
c0024bea:	e8 45 9c 00 00       	call   c002e834 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0024bef:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0024bf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024bf9:	e8 b6 f7 ff ff       	call   c00243b4 <switchToThread(ThreadControlBlock*)>
c0024bfe:	83 c4 10             	add    esp,0x10
c0024c01:	8d 76 00             	lea    esi,[esi+0x0]
c0024c04:	83 c4 08             	add    esp,0x8
c0024c07:	5b                   	pop    ebx
c0024c08:	c3                   	ret    
c0024c09:	8d 76 00             	lea    esi,[esi+0x0]
c0024c0c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0024c13:	83 ec 08             	sub    esp,0x8
c0024c16:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024c1b:	50                   	push   eax
c0024c1c:	68 ec 01 04 c0       	push   0xc00401ec
c0024c21:	e8 ca 9c 00 00       	call   c002e8f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0024c26:	83 c4 10             	add    esp,0x10
c0024c29:	eb a9                	jmp    c0024bd4 <schedule()+0x3c>
c0024c2b:	90                   	nop

c0024c2c <Semaphore::tryAcquire()>:
c0024c2c:	53                   	push   ebx
c0024c2d:	83 ec 08             	sub    esp,0x8
c0024c30:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024c34:	fa                   	cli    
c0024c35:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0024c3a:	8d 50 01             	lea    edx,[eax+0x1]
c0024c3d:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0024c43:	8b 15 cc 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401cc
c0024c49:	8d 5a 01             	lea    ebx,[edx+0x1]
c0024c4c:	89 1d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ebx
c0024c52:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0024c55:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0024c57:	7c 33                	jl     c0024c8c <Semaphore::tryAcquire()+0x60>
c0024c59:	89 15 cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,edx
c0024c5f:	85 d2                	test   edx,edx
c0024c61:	75 0d                	jne    c0024c70 <Semaphore::tryAcquire()+0x44>
c0024c63:	8b 15 c8 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401c8
c0024c69:	85 d2                	test   edx,edx
c0024c6b:	75 6f                	jne    c0024cdc <Semaphore::tryAcquire()+0xb0>
c0024c6d:	8d 76 00             	lea    esi,[esi+0x0]
c0024c70:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0024c75:	85 c0                	test   eax,eax
c0024c77:	74 0b                	je     c0024c84 <Semaphore::tryAcquire()+0x58>
c0024c79:	8d 76 00             	lea    esi,[esi+0x0]
c0024c7c:	31 c0                	xor    eax,eax
c0024c7e:	83 c4 08             	add    esp,0x8
c0024c81:	5b                   	pop    ebx
c0024c82:	c3                   	ret    
c0024c83:	90                   	nop
c0024c84:	fb                   	sti    
c0024c85:	83 c4 08             	add    esp,0x8
c0024c88:	5b                   	pop    ebx
c0024c89:	c3                   	ret    
c0024c8a:	66 90                	xchg   ax,ax
c0024c8c:	83 c3 01             	add    ebx,0x1
c0024c8f:	89 15 cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,edx
c0024c95:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0024c98:	85 d2                	test   edx,edx
c0024c9a:	75 24                	jne    c0024cc0 <Semaphore::tryAcquire()+0x94>
c0024c9c:	8b 0d c8 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401c8
c0024ca2:	85 c9                	test   ecx,ecx
c0024ca4:	74 1a                	je     c0024cc0 <Semaphore::tryAcquire()+0x94>
c0024ca6:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0024cb0:	e8 e3 fe ff ff       	call   c0024b98 <schedule()>
c0024cb5:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0024cba:	83 e8 01             	sub    eax,0x1
c0024cbd:	8d 76 00             	lea    esi,[esi+0x0]
c0024cc0:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0024cc5:	85 c0                	test   eax,eax
c0024cc7:	75 0b                	jne    c0024cd4 <Semaphore::tryAcquire()+0xa8>
c0024cc9:	fb                   	sti    
c0024cca:	b0 01                	mov    al,0x1
c0024ccc:	83 c4 08             	add    esp,0x8
c0024ccf:	5b                   	pop    ebx
c0024cd0:	c3                   	ret    
c0024cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0024cd4:	b0 01                	mov    al,0x1
c0024cd6:	83 c4 08             	add    esp,0x8
c0024cd9:	5b                   	pop    ebx
c0024cda:	c3                   	ret    
c0024cdb:	90                   	nop
c0024cdc:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0024ce6:	e8 ad fe ff ff       	call   c0024b98 <schedule()>
c0024ceb:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0024cf0:	83 e8 01             	sub    eax,0x1
c0024cf3:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0024cf8:	85 c0                	test   eax,eax
c0024cfa:	75 80                	jne    c0024c7c <Semaphore::tryAcquire()+0x50>
c0024cfc:	eb 86                	jmp    c0024c84 <Semaphore::tryAcquire()+0x58>
c0024cfe:	66 90                	xchg   ax,ax

c0024d00 <Semaphore::assertLocked(char const*)>:
c0024d00:	83 ec 0c             	sub    esp,0xc
c0024d03:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024d07:	fa                   	cli    
c0024d08:	8b 0d d0 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401d0
c0024d0e:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0024d13:	83 c1 01             	add    ecx,0x1
c0024d16:	89 0d d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,ecx
c0024d1c:	8d 48 01             	lea    ecx,[eax+0x1]
c0024d1f:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c0024d25:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0024d27:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0024d2a:	7c 28                	jl     c0024d54 <Semaphore::assertLocked(char const*)+0x54>
c0024d2c:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0024d31:	85 c0                	test   eax,eax
c0024d33:	75 0b                	jne    c0024d40 <Semaphore::assertLocked(char const*)+0x40>
c0024d35:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0024d3a:	85 c0                	test   eax,eax
c0024d3c:	75 32                	jne    c0024d70 <Semaphore::assertLocked(char const*)+0x70>
c0024d3e:	66 90                	xchg   ax,ax
c0024d40:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0024d45:	83 e8 01             	sub    eax,0x1
c0024d48:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0024d4d:	75 01                	jne    c0024d50 <Semaphore::assertLocked(char const*)+0x50>
c0024d4f:	fb                   	sti    
c0024d50:	83 c4 0c             	add    esp,0xc
c0024d53:	c3                   	ret    
c0024d54:	83 ec 0c             	sub    esp,0xc
c0024d57:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0024d5b:	52                   	push   edx
c0024d5c:	e8 ea b2 ff ff       	call   c002004b <KePanic(char const*)>
c0024d61:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0024d66:	83 c4 10             	add    esp,0x10
c0024d69:	83 e8 01             	sub    eax,0x1
c0024d6c:	eb be                	jmp    c0024d2c <Semaphore::assertLocked(char const*)+0x2c>
c0024d6e:	66 90                	xchg   ax,ax
c0024d70:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0024d7a:	e8 19 fe ff ff       	call   c0024b98 <schedule()>
c0024d7f:	eb bf                	jmp    c0024d40 <Semaphore::assertLocked(char const*)+0x40>
c0024d81:	8d 76 00             	lea    esi,[esi+0x0]

c0024d84 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0024d84:	83 ec 0c             	sub    esp,0xc
c0024d87:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024d8c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024d90:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024d93:	e8 00 fe ff ff       	call   c0024b98 <schedule()>
c0024d98:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0024d9d:	83 e8 01             	sub    eax,0x1
c0024da0:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0024da5:	75 01                	jne    c0024da8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0024da7:	fb                   	sti    
c0024da8:	83 c4 0c             	add    esp,0xc
c0024dab:	c3                   	ret    

c0024dac <blockTask(TaskState)>:
c0024dac:	83 ec 0c             	sub    esp,0xc
c0024daf:	fa                   	cli    
c0024db0:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0024db5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024db9:	83 c0 01             	add    eax,0x1
c0024dbc:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0024dc1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024dc6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024dc9:	e8 ca fd ff ff       	call   c0024b98 <schedule()>
c0024dce:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0024dd3:	83 e8 01             	sub    eax,0x1
c0024dd6:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0024ddb:	75 03                	jne    c0024de0 <blockTask(TaskState)+0x34>
c0024ddd:	fb                   	sti    
c0024dde:	66 90                	xchg   ax,ax
c0024de0:	83 c4 0c             	add    esp,0xc
c0024de3:	c3                   	ret    

c0024de4 <waitTask(int, int*, int)>:
c0024de4:	83 ec 18             	sub    esp,0x18
c0024de7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024dec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024df0:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0024df3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0024df7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024dfc:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0024dff:	6a 07                	push   0x7
c0024e01:	e8 a6 ff ff ff       	call   c0024dac <blockTask(TaskState)>
c0024e06:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024e0b:	83 c4 10             	add    esp,0x10
c0024e0e:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0024e11:	85 d2                	test   edx,edx
c0024e13:	74 0b                	je     c0024e20 <waitTask(int, int*, int)+0x3c>
c0024e15:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0024e18:	89 02                	mov    DWORD PTR [edx],eax
c0024e1a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024e1f:	90                   	nop
c0024e20:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0024e23:	83 c4 0c             	add    esp,0xc
c0024e26:	c3                   	ret    
c0024e27:	90                   	nop

c0024e28 <milliTenthSleepUntil(unsigned int)>:
c0024e28:	83 ec 0c             	sub    esp,0xc
c0024e2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e2f:	39 05 ec f3 03 c0    	cmp    DWORD PTR ds:0xc003f3ec,eax
c0024e35:	76 05                	jbe    c0024e3c <milliTenthSleepUntil(unsigned int)+0x14>
c0024e37:	90                   	nop
c0024e38:	83 c4 0c             	add    esp,0xc
c0024e3b:	c3                   	ret    
c0024e3c:	fa                   	cli    
c0024e3d:	8b 15 d0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401d0
c0024e43:	83 ec 08             	sub    esp,0x8
c0024e46:	83 c2 01             	add    edx,0x1
c0024e49:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c0024e4f:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0024e55:	83 c1 01             	add    ecx,0x1
c0024e58:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c0024e5e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0024e64:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0024e67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024e6c:	50                   	push   eax
c0024e6d:	68 e0 01 04 c0       	push   0xc00401e0
c0024e72:	e8 79 9a 00 00       	call   c002e8f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0024e77:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0024e7e:	e8 29 ff ff ff       	call   c0024dac <blockTask(TaskState)>
c0024e83:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0024e88:	83 c4 10             	add    esp,0x10
c0024e8b:	83 e8 01             	sub    eax,0x1
c0024e8e:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0024e93:	85 c0                	test   eax,eax
c0024e95:	75 09                	jne    c0024ea0 <milliTenthSleepUntil(unsigned int)+0x78>
c0024e97:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0024e9c:	85 c0                	test   eax,eax
c0024e9e:	75 14                	jne    c0024eb4 <milliTenthSleepUntil(unsigned int)+0x8c>
c0024ea0:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0024ea5:	83 e8 01             	sub    eax,0x1
c0024ea8:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0024ead:	75 89                	jne    c0024e38 <milliTenthSleepUntil(unsigned int)+0x10>
c0024eaf:	fb                   	sti    
c0024eb0:	83 c4 0c             	add    esp,0xc
c0024eb3:	c3                   	ret    
c0024eb4:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0024ebe:	e8 d5 fc ff ff       	call   c0024b98 <schedule()>
c0024ec3:	eb db                	jmp    c0024ea0 <milliTenthSleepUntil(unsigned int)+0x78>
c0024ec5:	8d 76 00             	lea    esi,[esi+0x0]

c0024ec8 <milliTenthSleep(unsigned int)>:
c0024ec8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024ecc:	a1 ec f3 03 c0       	mov    eax,ds:0xc003f3ec
c0024ed1:	01 c2                	add    edx,eax
c0024ed3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0024ed7:	e9 4c ff ff ff       	jmp    c0024e28 <milliTenthSleepUntil(unsigned int)>

c0024edc <sleep(unsigned int)>:
c0024edc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024ee0:	8d 04 80             	lea    eax,[eax+eax*4]
c0024ee3:	8d 04 80             	lea    eax,[eax+eax*4]
c0024ee6:	8d 04 80             	lea    eax,[eax+eax*4]
c0024ee9:	8d 04 80             	lea    eax,[eax+eax*4]
c0024eec:	c1 e0 04             	shl    eax,0x4
c0024eef:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024ef3:	eb d3                	jmp    c0024ec8 <milliTenthSleep(unsigned int)>
c0024ef5:	90                   	nop
c0024ef6:	66 90                	xchg   ax,ax

c0024ef8 <Semaphore::acquire()>:
c0024ef8:	83 ec 0c             	sub    esp,0xc
c0024efb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024eff:	fa                   	cli    
c0024f00:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0024f05:	83 c0 01             	add    eax,0x1
c0024f08:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0024f0d:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0024f12:	8d 48 01             	lea    ecx,[eax+0x1]
c0024f15:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c0024f1b:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0024f1e:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0024f20:	7d 2e                	jge    c0024f50 <Semaphore::acquire()+0x58>
c0024f22:	83 c1 01             	add    ecx,0x1
c0024f25:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0024f28:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0024f2d:	85 c0                	test   eax,eax
c0024f2f:	75 0b                	jne    c0024f3c <Semaphore::acquire()+0x44>
c0024f31:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0024f36:	85 c0                	test   eax,eax
c0024f38:	75 66                	jne    c0024fa0 <Semaphore::acquire()+0xa8>
c0024f3a:	66 90                	xchg   ax,ax
c0024f3c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0024f41:	83 e8 01             	sub    eax,0x1
c0024f44:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0024f49:	75 01                	jne    c0024f4c <Semaphore::acquire()+0x54>
c0024f4b:	fb                   	sti    
c0024f4c:	83 c4 0c             	add    esp,0xc
c0024f4f:	c3                   	ret    
c0024f50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024f55:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0024f5c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0024f5f:	85 c9                	test   ecx,ecx
c0024f61:	74 51                	je     c0024fb4 <Semaphore::acquire()+0xbc>
c0024f63:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0024f66:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0024f6c:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0024f6f:	90                   	nop
c0024f70:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024f75:	83 ec 0c             	sub    esp,0xc
c0024f78:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0024f7b:	68 28 2a 03 c0       	push   0xc0032a28
c0024f80:	e8 bc 41 ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0024f85:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0024f8c:	e8 1b fe ff ff       	call   c0024dac <blockTask(TaskState)>
c0024f91:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0024f96:	83 c4 10             	add    esp,0x10
c0024f99:	83 e8 01             	sub    eax,0x1
c0024f9c:	eb 8a                	jmp    c0024f28 <Semaphore::acquire()+0x30>
c0024f9e:	66 90                	xchg   ax,ax
c0024fa0:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0024faa:	e8 e9 fb ff ff       	call   c0024b98 <schedule()>
c0024faf:	eb 8b                	jmp    c0024f3c <Semaphore::acquire()+0x44>
c0024fb1:	8d 76 00             	lea    esi,[esi+0x0]
c0024fb4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024fb9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0024fbc:	eb b2                	jmp    c0024f70 <Semaphore::acquire()+0x78>
c0024fbe:	66 90                	xchg   ax,ax

c0024fc0 <taskReturned>:
c0024fc0:	83 ec 18             	sub    esp,0x18
c0024fc3:	68 48 2a 03 c0       	push   0xc0032a48
c0024fc8:	e8 7e b0 ff ff       	call   c002004b <KePanic(char const*)>
c0024fcd:	83 c4 10             	add    esp,0x10
c0024fd0:	83 ec 0c             	sub    esp,0xc
c0024fd3:	6a 02                	push   0x2
c0024fd5:	e8 d2 fd ff ff       	call   c0024dac <blockTask(TaskState)>
c0024fda:	fa                   	cli    
c0024fdb:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0024fe0:	83 c0 01             	add    eax,0x1
c0024fe3:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0024fe8:	e8 ab fb ff ff       	call   c0024b98 <schedule()>
c0024fed:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0024ff2:	83 c4 10             	add    esp,0x10
c0024ff5:	83 e8 01             	sub    eax,0x1
c0024ff8:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0024ffd:	85 c0                	test   eax,eax
c0024fff:	75 cf                	jne    c0024fd0 <taskReturned+0x10>
c0025001:	fb                   	sti    
c0025002:	eb cc                	jmp    c0024fd0 <taskReturned+0x10>

c0025004 <Thr::processFromPID(int)>:
c0025004:	57                   	push   edi
c0025005:	56                   	push   esi
c0025006:	53                   	push   ebx
c0025007:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002500b:	fa                   	cli    
c002500c:	8b 0d d0 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401d0
c0025012:	83 ec 0c             	sub    esp,0xc
c0025015:	83 c1 01             	add    ecx,0x1
c0025018:	68 ec 01 04 c0       	push   0xc00401ec
c002501d:	89 0d d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,ecx
c0025023:	e8 04 98 00 00       	call   c002e82c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025028:	83 c4 10             	add    esp,0x10
c002502b:	89 c7                	mov    edi,eax
c002502d:	eb 15                	jmp    c0025044 <Thr::processFromPID(int)+0x40>
c002502f:	90                   	nop
c0025030:	83 ec 0c             	sub    esp,0xc
c0025033:	68 ec 01 04 c0       	push   0xc00401ec
c0025038:	e8 ef 97 00 00       	call   c002e82c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c002503d:	83 c4 10             	add    esp,0x10
c0025040:	39 f8                	cmp    eax,edi
c0025042:	74 50                	je     c0025094 <Thr::processFromPID(int)+0x90>
c0025044:	83 ec 0c             	sub    esp,0xc
c0025047:	68 ec 01 04 c0       	push   0xc00401ec
c002504c:	e8 db 97 00 00       	call   c002e82c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025051:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c0025058:	89 c3                	mov    ebx,eax
c002505a:	e8 d5 97 00 00       	call   c002e834 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c002505f:	58                   	pop    eax
c0025060:	5a                   	pop    edx
c0025061:	53                   	push   ebx
c0025062:	68 ec 01 04 c0       	push   0xc00401ec
c0025067:	e8 84 98 00 00       	call   c002e8f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c002506c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c002506f:	83 c4 10             	add    esp,0x10
c0025072:	39 30                	cmp    DWORD PTR [eax],esi
c0025074:	75 ba                	jne    c0025030 <Thr::processFromPID(int)+0x2c>
c0025076:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002507b:	83 e8 01             	sub    eax,0x1
c002507e:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025083:	74 0b                	je     c0025090 <Thr::processFromPID(int)+0x8c>
c0025085:	8d 76 00             	lea    esi,[esi+0x0]
c0025088:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c002508b:	5b                   	pop    ebx
c002508c:	5e                   	pop    esi
c002508d:	5f                   	pop    edi
c002508e:	c3                   	ret    
c002508f:	90                   	nop
c0025090:	fb                   	sti    
c0025091:	eb f5                	jmp    c0025088 <Thr::processFromPID(int)+0x84>
c0025093:	90                   	nop
c0025094:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025099:	83 e8 01             	sub    eax,0x1
c002509c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00250a1:	75 05                	jne    c00250a8 <Thr::processFromPID(int)+0xa4>
c00250a3:	fb                   	sti    
c00250a4:	5b                   	pop    ebx
c00250a5:	5e                   	pop    esi
c00250a6:	5f                   	pop    edi
c00250a7:	c3                   	ret    
c00250a8:	5b                   	pop    ebx
c00250a9:	31 c0                	xor    eax,eax
c00250ab:	5e                   	pop    esi
c00250ac:	5f                   	pop    edi
c00250ad:	c3                   	ret    
c00250ae:	66 90                	xchg   ax,ax

c00250b0 <unblockTask(ThreadControlBlock*)>:
c00250b0:	53                   	push   ebx
c00250b1:	83 ec 08             	sub    esp,0x8
c00250b4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00250b8:	fa                   	cli    
c00250b9:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00250be:	83 c0 01             	add    eax,0x1
c00250c1:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00250c6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00250c9:	85 c0                	test   eax,eax
c00250cb:	74 67                	je     c0025134 <unblockTask(ThreadControlBlock*)+0x84>
c00250cd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00250d0:	83 f8 01             	cmp    eax,0x1
c00250d3:	74 37                	je     c002510c <unblockTask(ThreadControlBlock*)+0x5c>
c00250d5:	83 ec 0c             	sub    esp,0xc
c00250d8:	68 ec 01 04 c0       	push   0xc00401ec
c00250dd:	e8 4a 97 00 00       	call   c002e82c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00250e2:	83 c4 10             	add    esp,0x10
c00250e5:	85 c0                	test   eax,eax
c00250e7:	75 1b                	jne    c0025104 <unblockTask(ThreadControlBlock*)+0x54>
c00250e9:	eb 5d                	jmp    c0025148 <unblockTask(ThreadControlBlock*)+0x98>
c00250eb:	90                   	nop
c00250ec:	83 ec 08             	sub    esp,0x8
c00250ef:	50                   	push   eax
c00250f0:	68 ec 01 04 c0       	push   0xc00401ec
c00250f5:	e8 52 9a 00 00       	call   c002eb4c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00250fa:	83 c4 10             	add    esp,0x10
c00250fd:	85 c0                	test   eax,eax
c00250ff:	74 47                	je     c0025148 <unblockTask(ThreadControlBlock*)+0x98>
c0025101:	8d 76 00             	lea    esi,[esi+0x0]
c0025104:	39 c3                	cmp    ebx,eax
c0025106:	75 e4                	jne    c00250ec <unblockTask(ThreadControlBlock*)+0x3c>
c0025108:	eb 12                	jmp    c002511c <unblockTask(ThreadControlBlock*)+0x6c>
c002510a:	66 90                	xchg   ax,ax
c002510c:	83 ec 0c             	sub    esp,0xc
c002510f:	68 c5 29 03 c0       	push   0xc00329c5
c0025114:	e8 28 40 ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0025119:	83 c4 10             	add    esp,0x10
c002511c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025121:	83 e8 01             	sub    eax,0x1
c0025124:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025129:	75 01                	jne    c002512c <unblockTask(ThreadControlBlock*)+0x7c>
c002512b:	fb                   	sti    
c002512c:	83 c4 08             	add    esp,0x8
c002512f:	5b                   	pop    ebx
c0025130:	c3                   	ret    
c0025131:	8d 76 00             	lea    esi,[esi+0x0]
c0025134:	83 ec 0c             	sub    esp,0xc
c0025137:	68 ae 29 03 c0       	push   0xc00329ae
c002513c:	e8 00 40 ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0025141:	83 c4 10             	add    esp,0x10
c0025144:	eb d6                	jmp    c002511c <unblockTask(ThreadControlBlock*)+0x6c>
c0025146:	66 90                	xchg   ax,ax
c0025148:	83 ec 08             	sub    esp,0x8
c002514b:	53                   	push   ebx
c002514c:	68 ec 01 04 c0       	push   0xc00401ec
c0025151:	e8 9a 97 00 00       	call   c002e8f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025156:	83 c4 10             	add    esp,0x10
c0025159:	eb c1                	jmp    c002511c <unblockTask(ThreadControlBlock*)+0x6c>
c002515b:	90                   	nop

c002515c <cleanupTerminatedTask(ThreadControlBlock*)>:
c002515c:	55                   	push   ebp
c002515d:	57                   	push   edi
c002515e:	56                   	push   esi
c002515f:	53                   	push   ebx
c0025160:	83 ec 1c             	sub    esp,0x1c
c0025163:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0025167:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c002516a:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0025170:	85 ed                	test   ebp,ebp
c0025172:	7e 28                	jle    c002519c <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0025174:	31 f6                	xor    esi,esi
c0025176:	66 90                	xchg   ax,ax
c0025178:	83 ec 0c             	sub    esp,0xc
c002517b:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0025182:	83 c6 01             	add    esi,0x1
c0025185:	57                   	push   edi
c0025186:	e8 37 11 ff ff       	call   c00162c2 <free>
c002518b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c002518e:	83 c4 10             	add    esp,0x10
c0025191:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0025197:	7f df                	jg     c0025178 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0025199:	8d 76 00             	lea    esi,[esi+0x0]
c002519c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00251a6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00251ab:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00251ae:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00251b1:	d3 c0                	rol    eax,cl
c00251b3:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c00251ba:	21 c8                	and    eax,ecx
c00251bc:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c00251c3:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00251c6:	89 f7                	mov    edi,esi
c00251c8:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00251d0:	0f 85 72 01 00 00    	jne    c0025348 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00251d6:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00251dc:	85 ed                	test   ebp,ebp
c00251de:	74 1c                	je     c00251fc <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00251e0:	83 ec 0c             	sub    esp,0xc
c00251e3:	55                   	push   ebp
c00251e4:	e8 73 ab ff ff       	call   c001fd5c <EnvVarContainer::~EnvVarContainer()>
c00251e9:	59                   	pop    ecx
c00251ea:	5e                   	pop    esi
c00251eb:	6a 0c                	push   0xc
c00251ed:	55                   	push   ebp
c00251ee:	e8 21 3e ff ff       	call   c0019014 <operator delete(void*, unsigned long)>
c00251f3:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00251f6:	83 c4 10             	add    esp,0x10
c00251f9:	89 f7                	mov    edi,esi
c00251fb:	90                   	nop
c00251fc:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0025202:	85 c0                	test   eax,eax
c0025204:	0f 84 b2 00 00 00    	je     c00252bc <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c002520a:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c002520d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0025211:	31 c9                	xor    ecx,ecx
c0025213:	eb 17                	jmp    c002522c <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0025215:	8d 76 00             	lea    esi,[esi+0x0]
c0025218:	83 c1 01             	add    ecx,0x1
c002521b:	83 f9 10             	cmp    ecx,0x10
c002521e:	0f 84 98 00 00 00    	je     c00252bc <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0025224:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c002522a:	66 90                	xchg   ax,ax
c002522c:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0025233:	d3 fa                	sar    edx,cl
c0025235:	80 e2 01             	and    dl,0x1
c0025238:	74 de                	je     c0025218 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c002523a:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c002523d:	01 d2                	add    edx,edx
c002523f:	01 ca                	add    edx,ecx
c0025241:	8d 14 92             	lea    edx,[edx+edx*4]
c0025244:	01 d0                	add    eax,edx
c0025246:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c002524c:	83 fd 07             	cmp    ebp,0x7
c002524f:	75 c7                	jne    c0025218 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0025251:	05 40 02 00 00       	add    eax,0x240
c0025256:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0025259:	83 fd ff             	cmp    ebp,0xffffffff
c002525c:	0f 8c ee 00 00 00    	jl     c0025350 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0025262:	0f 84 ac 01 00 00    	je     c0025414 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0025268:	85 ed                	test   ebp,ebp
c002526a:	0f 84 90 01 00 00    	je     c0025400 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0025270:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0025272:	75 a4                	jne    c0025218 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0025274:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c002527a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002527e:	01 d0                	add    eax,edx
c0025280:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0025284:	83 ec 0c             	sub    esp,0xc
c0025287:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c002528d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025290:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0025296:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c002529d:	50                   	push   eax
c002529e:	e8 0d fe ff ff       	call   c00250b0 <unblockTask(ThreadControlBlock*)>
c00252a3:	83 c4 10             	add    esp,0x10
c00252a6:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00252a9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00252ad:	89 f7                	mov    edi,esi
c00252af:	83 c1 01             	add    ecx,0x1
c00252b2:	83 f9 10             	cmp    ecx,0x10
c00252b5:	0f 85 69 ff ff ff    	jne    c0025224 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00252bb:	90                   	nop
c00252bc:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00252c2:	85 c0                	test   eax,eax
c00252c4:	74 62                	je     c0025328 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00252c6:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00252cc:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00252d2:	74 54                	je     c0025328 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00252d4:	83 ec 0c             	sub    esp,0xc
c00252d7:	68 ec 01 04 c0       	push   0xc00401ec
c00252dc:	e8 4b 95 00 00       	call   c002e82c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00252e1:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c00252e8:	89 c7                	mov    edi,eax
c00252ea:	e8 21 95 00 00       	call   c002e810 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00252ef:	83 c4 10             	add    esp,0x10
c00252f2:	84 c0                	test   al,al
c00252f4:	0f 84 ce 00 00 00    	je     c00253c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c00252fa:	66 90                	xchg   ax,ax
c00252fc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00252ff:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0025305:	85 d2                	test   edx,edx
c0025307:	74 0f                	je     c0025318 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0025309:	83 ec 0c             	sub    esp,0xc
c002530c:	8b 02                	mov    eax,DWORD PTR [edx]
c002530e:	52                   	push   edx
c002530f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0025312:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025315:	83 c4 10             	add    esp,0x10
c0025318:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0025322:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0025325:	8d 76 00             	lea    esi,[esi+0x0]
c0025328:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c002532e:	85 db                	test   ebx,ebx
c0025330:	74 16                	je     c0025348 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0025332:	83 ec 0c             	sub    esp,0xc
c0025335:	53                   	push   ebx
c0025336:	e8 73 30 ff ff       	call   c00183ae <VAS::~VAS()>
c002533b:	58                   	pop    eax
c002533c:	5a                   	pop    edx
c002533d:	6a 14                	push   0x14
c002533f:	53                   	push   ebx
c0025340:	e8 cf 3c ff ff       	call   c0019014 <operator delete(void*, unsigned long)>
c0025345:	83 c4 10             	add    esp,0x10
c0025348:	83 c4 1c             	add    esp,0x1c
c002534b:	5b                   	pop    ebx
c002534c:	5e                   	pop    esi
c002534d:	5f                   	pop    edi
c002534e:	5d                   	pop    ebp
c002534f:	c3                   	ret    
c0025350:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025354:	83 ec 0c             	sub    esp,0xc
c0025357:	68 7c 2a 03 c0       	push   0xc0032a7c
c002535c:	e8 ea ac ff ff       	call   c002004b <KePanic(char const*)>
c0025361:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0025364:	83 c4 10             	add    esp,0x10
c0025367:	89 f7                	mov    edi,esi
c0025369:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002536d:	e9 a6 fe ff ff       	jmp    c0025218 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0025372:	66 90                	xchg   ax,ax
c0025374:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002537a:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0025380:	75 1e                	jne    c00253a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0025382:	83 ec 0c             	sub    esp,0xc
c0025385:	68 e4 2a 03 c0       	push   0xc0032ae4
c002538a:	e8 b2 3d ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c002538f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0025396:	e8 11 fa ff ff       	call   c0024dac <blockTask(TaskState)>
c002539b:	83 c4 10             	add    esp,0x10
c002539e:	66 90                	xchg   ax,ax
c00253a0:	83 ec 08             	sub    esp,0x8
c00253a3:	56                   	push   esi
c00253a4:	68 ec 01 04 c0       	push   0xc00401ec
c00253a9:	e8 42 95 00 00       	call   c002e8f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00253ae:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c00253b5:	e8 72 94 00 00       	call   c002e82c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00253ba:	83 c4 10             	add    esp,0x10
c00253bd:	39 f8                	cmp    eax,edi
c00253bf:	0f 84 37 ff ff ff    	je     c00252fc <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c00253c5:	8d 76 00             	lea    esi,[esi+0x0]
c00253c8:	83 ec 0c             	sub    esp,0xc
c00253cb:	68 ec 01 04 c0       	push   0xc00401ec
c00253d0:	e8 57 94 00 00       	call   c002e82c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00253d5:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c00253dc:	89 c6                	mov    esi,eax
c00253de:	e8 51 94 00 00       	call   c002e834 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00253e3:	83 c4 10             	add    esp,0x10
c00253e6:	39 f3                	cmp    ebx,esi
c00253e8:	74 b6                	je     c00253a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00253ea:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00253ed:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00253f0:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00253f6:	75 a8                	jne    c00253a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00253f8:	e9 77 ff ff ff       	jmp    c0025374 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c00253fd:	8d 76 00             	lea    esi,[esi+0x0]
c0025400:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025404:	83 ec 0c             	sub    esp,0xc
c0025407:	68 b0 2a 03 c0       	push   0xc0032ab0
c002540c:	e9 4b ff ff ff       	jmp    c002535c <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0025411:	8d 76 00             	lea    esi,[esi+0x0]
c0025414:	8b 36                	mov    esi,DWORD PTR [esi]
c0025416:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002541a:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c002541d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025420:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0025426:	01 d7                	add    edi,edx
c0025428:	89 f8                	mov    eax,edi
c002542a:	e9 51 fe ff ff       	jmp    c0025280 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c002542f:	90                   	nop

c0025430 <cleanerTaskFunction(void*)>:
c0025430:	53                   	push   ebx
c0025431:	83 ec 08             	sub    esp,0x8
c0025434:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025439:	83 e8 01             	sub    eax,0x1
c002543c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025441:	75 01                	jne    c0025444 <cleanerTaskFunction(void*)+0x14>
c0025443:	fb                   	sti    
c0025444:	fa                   	cli    
c0025445:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002544a:	80 3d b4 01 04 c0 00 	cmp    BYTE PTR ds:0xc00401b4,0x0
c0025451:	8d 50 01             	lea    edx,[eax+0x1]
c0025454:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c002545a:	0f 84 c4 00 00 00    	je     c0025524 <cleanerTaskFunction(void*)+0xf4>
c0025460:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025465:	85 c0                	test   eax,eax
c0025467:	75 03                	jne    c002546c <cleanerTaskFunction(void*)+0x3c>
c0025469:	fb                   	sti    
c002546a:	66 90                	xchg   ax,ax
c002546c:	c6 05 b4 01 04 c0 00 	mov    BYTE PTR ds:0xc00401b4,0x0
c0025473:	fa                   	cli    
c0025474:	8b 15 d0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401d0
c002547a:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c0025480:	83 c2 01             	add    edx,0x1
c0025483:	83 c1 01             	add    ecx,0x1
c0025486:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c002548c:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c0025492:	fa                   	cli    
c0025493:	8b 1d d0 01 04 c0    	mov    ebx,DWORD PTR ds:0xc00401d0
c0025499:	83 c3 01             	add    ebx,0x1
c002549c:	89 1d d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,ebx
c00254a2:	eb 28                	jmp    c00254cc <cleanerTaskFunction(void*)+0x9c>
c00254a4:	83 ec 0c             	sub    esp,0xc
c00254a7:	68 d4 01 04 c0       	push   0xc00401d4
c00254ac:	e8 7b 93 00 00       	call   c002e82c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00254b1:	c7 04 24 d4 01 04 c0 	mov    DWORD PTR [esp],0xc00401d4
c00254b8:	89 c3                	mov    ebx,eax
c00254ba:	e8 75 93 00 00       	call   c002e834 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00254bf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00254c2:	e8 95 fc ff ff       	call   c002515c <cleanupTerminatedTask(ThreadControlBlock*)>
c00254c7:	83 c4 10             	add    esp,0x10
c00254ca:	66 90                	xchg   ax,ax
c00254cc:	83 ec 0c             	sub    esp,0xc
c00254cf:	68 d4 01 04 c0       	push   0xc00401d4
c00254d4:	e8 37 93 00 00       	call   c002e810 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00254d9:	83 c4 10             	add    esp,0x10
c00254dc:	84 c0                	test   al,al
c00254de:	74 c4                	je     c00254a4 <cleanerTaskFunction(void*)+0x74>
c00254e0:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00254e5:	83 e8 01             	sub    eax,0x1
c00254e8:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00254ed:	75 01                	jne    c00254f0 <cleanerTaskFunction(void*)+0xc0>
c00254ef:	fb                   	sti    
c00254f0:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00254f5:	83 e8 01             	sub    eax,0x1
c00254f8:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00254fd:	0f 85 31 ff ff ff    	jne    c0025434 <cleanerTaskFunction(void*)+0x4>
c0025503:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0025508:	85 c0                	test   eax,eax
c002550a:	0f 84 24 ff ff ff    	je     c0025434 <cleanerTaskFunction(void*)+0x4>
c0025510:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c002551a:	e8 79 f6 ff ff       	call   c0024b98 <schedule()>
c002551f:	e9 10 ff ff ff       	jmp    c0025434 <cleanerTaskFunction(void*)+0x4>
c0025524:	83 ec 0c             	sub    esp,0xc
c0025527:	6a 02                	push   0x2
c0025529:	e8 56 f8 ff ff       	call   c0024d84 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c002552e:	83 c4 10             	add    esp,0x10
c0025531:	e9 36 ff ff ff       	jmp    c002546c <cleanerTaskFunction(void*)+0x3c>
c0025536:	66 90                	xchg   ax,ax

c0025538 <terminateTask(int)>:
c0025538:	83 ec 14             	sub    esp,0x14
c002553b:	fa                   	cli    
c002553c:	8b 15 d0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401d0
c0025542:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c0025548:	83 c2 01             	add    edx,0x1
c002554b:	83 c1 01             	add    ecx,0x1
c002554e:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025554:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c002555a:	fa                   	cli    
c002555b:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025560:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025564:	83 c0 01             	add    eax,0x1
c0025567:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002556c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025571:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0025574:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025579:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c002557c:	50                   	push   eax
c002557d:	68 d4 01 04 c0       	push   0xc00401d4
c0025582:	e8 69 93 00 00       	call   c002e8f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025587:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002558c:	83 c4 10             	add    esp,0x10
c002558f:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0025596:	a1 b0 01 04 c0       	mov    eax,ds:0xc00401b0
c002559b:	85 c0                	test   eax,eax
c002559d:	74 65                	je     c0025604 <terminateTask(int)+0xcc>
c002559f:	83 ec 0c             	sub    esp,0xc
c00255a2:	c6 05 b4 01 04 c0 01 	mov    BYTE PTR ds:0xc00401b4,0x1
c00255a9:	50                   	push   eax
c00255aa:	e8 01 fb ff ff       	call   c00250b0 <unblockTask(ThreadControlBlock*)>
c00255af:	83 c4 10             	add    esp,0x10
c00255b2:	66 90                	xchg   ax,ax
c00255b4:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00255b9:	83 e8 01             	sub    eax,0x1
c00255bc:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00255c1:	75 01                	jne    c00255c4 <terminateTask(int)+0x8c>
c00255c3:	fb                   	sti    
c00255c4:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00255c9:	83 e8 01             	sub    eax,0x1
c00255cc:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00255d1:	75 09                	jne    c00255dc <terminateTask(int)+0xa4>
c00255d3:	83 3d c8 01 04 c0 00 	cmp    DWORD PTR ds:0xc00401c8,0x0
c00255da:	75 3c                	jne    c0025618 <terminateTask(int)+0xe0>
c00255dc:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00255e1:	83 e8 01             	sub    eax,0x1
c00255e4:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00255e9:	75 01                	jne    c00255ec <terminateTask(int)+0xb4>
c00255eb:	fb                   	sti    
c00255ec:	fa                   	cli    
c00255ed:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00255f2:	83 c0 01             	add    eax,0x1
c00255f5:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00255fa:	66 90                	xchg   ax,ax
c00255fc:	e8 97 f5 ff ff       	call   c0024b98 <schedule()>
c0025601:	eb d9                	jmp    c00255dc <terminateTask(int)+0xa4>
c0025603:	90                   	nop
c0025604:	83 ec 0c             	sub    esp,0xc
c0025607:	68 dc 29 03 c0       	push   0xc00329dc
c002560c:	e8 30 3b ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0025611:	83 c4 10             	add    esp,0x10
c0025614:	eb 9e                	jmp    c00255b4 <terminateTask(int)+0x7c>
c0025616:	66 90                	xchg   ax,ax
c0025618:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0025622:	eb d8                	jmp    c00255fc <terminateTask(int)+0xc4>

c0025624 <Thr::terminateFromIRQ(int)>:
c0025624:	83 ec 18             	sub    esp,0x18
c0025627:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002562b:	50                   	push   eax
c002562c:	e8 07 ff ff ff       	call   c0025538 <terminateTask(int)>
c0025631:	90                   	nop
c0025632:	66 90                	xchg   ax,ax

c0025634 <Semaphore::release()>:
c0025634:	83 ec 0c             	sub    esp,0xc
c0025637:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002563b:	fa                   	cli    
c002563c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025641:	83 c0 01             	add    eax,0x1
c0025644:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025649:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c002564e:	8d 48 01             	lea    ecx,[eax+0x1]
c0025651:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c0025657:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c002565a:	85 c9                	test   ecx,ecx
c002565c:	74 42                	je     c00256a0 <Semaphore::release()+0x6c>
c002565e:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0025661:	83 ec 0c             	sub    esp,0xc
c0025664:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0025667:	51                   	push   ecx
c0025668:	e8 43 fa ff ff       	call   c00250b0 <unblockTask(ThreadControlBlock*)>
c002566d:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0025672:	83 c4 10             	add    esp,0x10
c0025675:	83 e8 01             	sub    eax,0x1
c0025678:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c002567d:	85 c0                	test   eax,eax
c002567f:	75 0b                	jne    c002568c <Semaphore::release()+0x58>
c0025681:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0025686:	85 c0                	test   eax,eax
c0025688:	75 22                	jne    c00256ac <Semaphore::release()+0x78>
c002568a:	66 90                	xchg   ax,ax
c002568c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025691:	83 e8 01             	sub    eax,0x1
c0025694:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025699:	75 01                	jne    c002569c <Semaphore::release()+0x68>
c002569b:	fb                   	sti    
c002569c:	83 c4 0c             	add    esp,0xc
c002569f:	c3                   	ret    
c00256a0:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00256a3:	83 e9 01             	sub    ecx,0x1
c00256a6:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00256a9:	eb cd                	jmp    c0025678 <Semaphore::release()+0x44>
c00256ab:	90                   	nop
c00256ac:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c00256b6:	e8 dd f4 ff ff       	call   c0024b98 <schedule()>
c00256bb:	eb cf                	jmp    c002568c <Semaphore::release()+0x58>
c00256bd:	8d 76 00             	lea    esi,[esi+0x0]

c00256c0 <__static_initialization_and_destruction_0(int, int)>:
c00256c0:	83 ec 0c             	sub    esp,0xc
c00256c3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00256c8:	0f 85 8e 00 00 00    	jne    c002575c <__static_initialization_and_destruction_0(int, int)+0x9c>
c00256ce:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00256d6:	0f 85 80 00 00 00    	jne    c002575c <__static_initialization_and_destruction_0(int, int)+0x9c>
c00256dc:	83 ec 0c             	sub    esp,0xc
c00256df:	68 ec 01 04 c0       	push   0xc00401ec
c00256e4:	e8 bb 94 00 00       	call   c002eba4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00256e9:	83 c4 10             	add    esp,0x10
c00256ec:	83 ec 04             	sub    esp,0x4
c00256ef:	68 c0 36 03 c0       	push   0xc00336c0
c00256f4:	68 ec 01 04 c0       	push   0xc00401ec
c00256f9:	68 54 eb 02 c0       	push   0xc002eb54
c00256fe:	e8 c1 38 ff ff       	call   c0018fc4 <__cxa_atexit>
c0025703:	83 c4 10             	add    esp,0x10
c0025706:	83 ec 0c             	sub    esp,0xc
c0025709:	68 e0 01 04 c0       	push   0xc00401e0
c002570e:	e8 91 94 00 00       	call   c002eba4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0025713:	83 c4 10             	add    esp,0x10
c0025716:	83 ec 04             	sub    esp,0x4
c0025719:	68 c0 36 03 c0       	push   0xc00336c0
c002571e:	68 e0 01 04 c0       	push   0xc00401e0
c0025723:	68 54 eb 02 c0       	push   0xc002eb54
c0025728:	e8 97 38 ff ff       	call   c0018fc4 <__cxa_atexit>
c002572d:	83 c4 10             	add    esp,0x10
c0025730:	83 ec 0c             	sub    esp,0xc
c0025733:	68 d4 01 04 c0       	push   0xc00401d4
c0025738:	e8 67 94 00 00       	call   c002eba4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c002573d:	83 c4 10             	add    esp,0x10
c0025740:	83 ec 04             	sub    esp,0x4
c0025743:	68 c0 36 03 c0       	push   0xc00336c0
c0025748:	68 d4 01 04 c0       	push   0xc00401d4
c002574d:	68 54 eb 02 c0       	push   0xc002eb54
c0025752:	e8 6d 38 ff ff       	call   c0018fc4 <__cxa_atexit>
c0025757:	83 c4 10             	add    esp,0x10
c002575a:	66 90                	xchg   ax,ax
c002575c:	90                   	nop
c002575d:	83 c4 0c             	add    esp,0xc
c0025760:	c3                   	ret    
c0025761:	8d 76 00             	lea    esi,[esi+0x0]

c0025764 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0025764:	83 ec 0c             	sub    esp,0xc
c0025767:	83 ec 08             	sub    esp,0x8
c002576a:	68 ff ff 00 00       	push   0xffff
c002576f:	6a 01                	push   0x1
c0025771:	e8 4a ff ff ff       	call   c00256c0 <__static_initialization_and_destruction_0(int, int)>
c0025776:	83 c4 10             	add    esp,0x10
c0025779:	83 c4 0c             	add    esp,0xc
c002577c:	c3                   	ret    

c002577d <Vm::inbv(unsigned short)>:
c002577d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025781:	66 81 fa fe fe       	cmp    dx,0xfefe
c0025786:	75 06                	jne    c002578e <Vm::inbv(unsigned short)+0x11>
c0025788:	a0 2c 02 04 c0       	mov    al,ds:0xc004022c
c002578d:	c3                   	ret    
c002578e:	ec                   	in     al,dx
c002578f:	c3                   	ret    

c0025790 <Vm::outbv(unsigned short, unsigned char)>:
c0025790:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025798:	66 81 fa fe fe       	cmp    dx,0xfefe
c002579d:	75 25                	jne    c00257c4 <Vm::outbv(unsigned short, unsigned char)+0x34>
c002579f:	8b 0d 2c 02 04 c0    	mov    ecx,DWORD PTR ds:0xc004022c
c00257a5:	8d 51 01             	lea    edx,[ecx+0x1]
c00257a8:	88 81 40 02 04 c0    	mov    BYTE PTR [ecx-0x3ffbfdc0],al
c00257ae:	89 15 2c 02 04 c0    	mov    DWORD PTR ds:0xc004022c,edx
c00257b4:	83 fa 20             	cmp    edx,0x20
c00257b7:	75 0c                	jne    c00257c5 <Vm::outbv(unsigned short, unsigned char)+0x35>
c00257b9:	c7 05 2c 02 04 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x1f
c00257c3:	c3                   	ret    
c00257c4:	ee                   	out    dx,al
c00257c5:	c3                   	ret    

c00257c6 <Vm::realToLinear(unsigned short, unsigned short)>:
c00257c6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00257cb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00257d0:	c1 e0 04             	shl    eax,0x4
c00257d3:	01 d0                	add    eax,edx
c00257d5:	c3                   	ret    

c00257d6 <Vm::getSegment(unsigned int)>:
c00257d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00257da:	c1 e8 10             	shr    eax,0x10
c00257dd:	c3                   	ret    

c00257de <Vm::getOffset(unsigned int)>:
c00257de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00257e2:	c3                   	ret    

c00257e3 <Vm::mainloop2()>:
c00257e3:	83 ec 18             	sub    esp,0x18
c00257e6:	fa                   	cli    
c00257e7:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c00257ed:	6a 02                	push   0x2
c00257ef:	c6 05 25 02 04 c0 01 	mov    BYTE PTR ds:0xc0040225,0x1
c00257f6:	e8 89 f5 ff ff       	call   c0024d84 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00257fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025800:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0025804:	52                   	push   edx
c0025805:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0025809:	52                   	push   edx
c002580a:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c002580e:	52                   	push   edx
c002580f:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0025813:	50                   	push   eax
c0025814:	e8 f6 a9 fd ff       	call   c000020f <goToVM86>
c0025819:	83 c4 2c             	add    esp,0x2c
c002581c:	c3                   	ret    

c002581d <Vm::mainVm8086Loop(void*)>:
c002581d:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025822:	48                   	dec    eax
c0025823:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025828:	75 01                	jne    c002582b <Vm::mainVm8086Loop(void*)+0xe>
c002582a:	fb                   	sti    
c002582b:	eb b6                	jmp    c00257e3 <Vm::mainloop2()>

c002582d <Vm::mainloop3(unsigned long)>:
c002582d:	83 ec 18             	sub    esp,0x18
c0025830:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025834:	fa                   	cli    
c0025835:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002583b:	6a 02                	push   0x2
c002583d:	c6 05 24 02 04 c0 01 	mov    BYTE PTR ds:0xc0040224,0x1
c0025844:	a3 20 02 04 c0       	mov    ds:0xc0040220,eax
c0025849:	e8 36 f5 ff ff       	call   c0024d84 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c002584e:	83 c4 1c             	add    esp,0x1c
c0025851:	eb 90                	jmp    c00257e3 <Vm::mainloop2()>

c0025853 <Vm::initialise8086()>:
c0025853:	83 ec 0c             	sub    esp,0xc
c0025856:	68 80 00 00 00       	push   0x80
c002585b:	6a 00                	push   0x0
c002585d:	68 1d 58 02 c0       	push   0xc002581d
c0025862:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0025868:	e8 db f0 ff ff       	call   c0024948 <Process::createThread(void (*)(void*), void*, int)>
c002586d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0025874:	a3 28 02 04 c0       	mov    ds:0xc0040228,eax
c0025879:	68 00 01 00 00       	push   0x100
c002587e:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0025883:	6a 00                	push   0x0
c0025885:	6a 00                	push   0x0
c0025887:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c002588d:	e8 84 2e ff ff       	call   c0018716 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0025892:	83 c4 2c             	add    esp,0x2c
c0025895:	c3                   	ret    

c0025896 <Vm::finish8086()>:
c0025896:	53                   	push   ebx
c0025897:	83 ec 08             	sub    esp,0x8
c002589a:	fa                   	cli    
c002589b:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c00258a1:	80 3d 24 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040224,0x0
c00258a8:	75 15                	jne    c00258bf <Vm::finish8086()+0x29>
c00258aa:	e8 e9 f2 ff ff       	call   c0024b98 <schedule()>
c00258af:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00258b4:	48                   	dec    eax
c00258b5:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00258ba:	75 de                	jne    c002589a <Vm::finish8086()+0x4>
c00258bc:	fb                   	sti    
c00258bd:	eb db                	jmp    c002589a <Vm::finish8086()+0x4>
c00258bf:	83 ec 0c             	sub    esp,0xc
c00258c2:	8b 1d 20 02 04 c0    	mov    ebx,DWORD PTR ds:0xc0040220
c00258c8:	ff 35 28 02 04 c0    	push   DWORD PTR ds:0xc0040228
c00258ce:	c6 05 24 02 04 c0 00 	mov    BYTE PTR ds:0xc0040224,0x0
c00258d5:	e8 d6 f7 ff ff       	call   c00250b0 <unblockTask(ThreadControlBlock*)>
c00258da:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00258df:	83 c4 10             	add    esp,0x10
c00258e2:	8d 50 ff             	lea    edx,[eax-0x1]
c00258e5:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c00258eb:	85 d2                	test   edx,edx
c00258ed:	75 01                	jne    c00258f0 <Vm::finish8086()+0x5a>
c00258ef:	fb                   	sti    
c00258f0:	89 d8                	mov    eax,ebx
c00258f2:	83 c4 08             	add    esp,0x8
c00258f5:	5b                   	pop    ebx
c00258f6:	c3                   	ret    

c00258f7 <Vm::getOutput8086(unsigned char*)>:
c00258f7:	57                   	push   edi
c00258f8:	8b 0d 2c 02 04 c0    	mov    ecx,DWORD PTR ds:0xc004022c
c00258fe:	56                   	push   esi
c00258ff:	be 40 02 04 c0       	mov    esi,0xc0040240
c0025904:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0025908:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002590a:	a1 2c 02 04 c0       	mov    eax,ds:0xc004022c
c002590f:	5e                   	pop    esi
c0025910:	c7 05 2c 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x0
c002591a:	5f                   	pop    edi
c002591b:	c3                   	ret    

c002591c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c002591c:	55                   	push   ebp
c002591d:	57                   	push   edi
c002591e:	56                   	push   esi
c002591f:	53                   	push   ebx
c0025920:	83 ec 0c             	sub    esp,0xc
c0025923:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0025927:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002592b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002592f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025933:	fa                   	cli    
c0025934:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002593a:	80 3d 25 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040225,0x0
c0025941:	75 15                	jne    c0025958 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0025943:	e8 50 f2 ff ff       	call   c0024b98 <schedule()>
c0025948:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002594d:	48                   	dec    eax
c002594e:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025953:	75 de                	jne    c0025933 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0025955:	fb                   	sti    
c0025956:	eb db                	jmp    c0025933 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0025958:	a1 28 02 04 c0       	mov    eax,ds:0xc0040228
c002595d:	c7 05 2c 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x0
c0025967:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c002596b:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c002596f:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0025973:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0025977:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c002597b:	0f b7 ff             	movzx  edi,di
c002597e:	0f b7 f6             	movzx  esi,si
c0025981:	50                   	push   eax
c0025982:	6a 20                	push   0x20
c0025984:	6a 00                	push   0x0
c0025986:	68 40 02 04 c0       	push   0xc0040240
c002598b:	e8 60 ab fd ff       	call   c00004f0 <memset>
c0025990:	5a                   	pop    edx
c0025991:	59                   	pop    ecx
c0025992:	57                   	push   edi
c0025993:	56                   	push   esi
c0025994:	e8 2d fe ff ff       	call   c00257c6 <Vm::realToLinear(unsigned short, unsigned short)>
c0025999:	83 c4 10             	add    esp,0x10
c002599c:	89 c7                	mov    edi,eax
c002599e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00259a2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00259a6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00259a8:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00259ad:	c6 05 25 02 04 c0 00 	mov    BYTE PTR ds:0xc0040225,0x0
c00259b4:	48                   	dec    eax
c00259b5:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00259ba:	75 01                	jne    c00259bd <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c00259bc:	fb                   	sti    
c00259bd:	83 ec 0c             	sub    esp,0xc
c00259c0:	ff 35 28 02 04 c0    	push   DWORD PTR ds:0xc0040228
c00259c6:	e8 e5 f6 ff ff       	call   c00250b0 <unblockTask(ThreadControlBlock*)>
c00259cb:	83 c4 1c             	add    esp,0x1c
c00259ce:	b0 01                	mov    al,0x1
c00259d0:	5b                   	pop    ebx
c00259d1:	5e                   	pop    esi
c00259d2:	5f                   	pop    edi
c00259d3:	5d                   	pop    ebp
c00259d4:	c3                   	ret    

c00259d5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00259d5:	55                   	push   ebp
c00259d6:	57                   	push   edi
c00259d7:	56                   	push   esi
c00259d8:	53                   	push   ebx
c00259d9:	83 ec 34             	sub    esp,0x34
c00259dc:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00259e0:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00259e4:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00259e8:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c00259ec:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00259f0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00259f4:	68 0c 2b 03 c0       	push   0xc0032b0c
c00259f9:	e8 43 37 ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c00259fe:	83 c4 10             	add    esp,0x10
c0025a01:	fa                   	cli    
c0025a02:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025a08:	8a 1d 25 02 04 c0    	mov    bl,BYTE PTR ds:0xc0040225
c0025a0e:	84 db                	test   bl,bl
c0025a10:	75 15                	jne    c0025a27 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0025a12:	e8 81 f1 ff ff       	call   c0024b98 <schedule()>
c0025a17:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025a1c:	48                   	dec    eax
c0025a1d:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025a22:	75 dd                	jne    c0025a01 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0025a24:	fb                   	sti    
c0025a25:	eb da                	jmp    c0025a01 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0025a27:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025a2b:	a1 28 02 04 c0       	mov    eax,ds:0xc0040228
c0025a30:	c7 05 2c 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x0
c0025a3a:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0025a3e:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0025a42:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0025a46:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0025a4a:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0025a4e:	50                   	push   eax
c0025a4f:	6a 20                	push   0x20
c0025a51:	6a 00                	push   0x0
c0025a53:	68 40 02 04 c0       	push   0xc0040240
c0025a58:	e8 93 aa fd ff       	call   c00004f0 <memset>
c0025a5d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0025a64:	e8 49 08 ff ff       	call   c00162b2 <malloc>
c0025a69:	83 c4 0c             	add    esp,0xc
c0025a6c:	89 c5                	mov    ebp,eax
c0025a6e:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0025a74:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025a78:	50                   	push   eax
c0025a79:	e8 ca 48 ff ff       	call   c001a348 <File::File(char const*, Process*)>
c0025a7e:	83 c4 10             	add    esp,0x10
c0025a81:	85 ed                	test   ebp,ebp
c0025a83:	75 0a                	jne    c0025a8f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0025a85:	83 ec 0c             	sub    esp,0xc
c0025a88:	68 2e 2b 03 c0       	push   0xc0032b2e
c0025a8d:	eb 2b                	jmp    c0025aba <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0025a8f:	50                   	push   eax
c0025a90:	8d 44 24 17          	lea    eax,[esp+0x17]
c0025a94:	50                   	push   eax
c0025a95:	8d 44 24 20          	lea    eax,[esp+0x20]
c0025a99:	50                   	push   eax
c0025a9a:	55                   	push   ebp
c0025a9b:	e8 c8 4b ff ff       	call   c001a668 <File::stat(unsigned long long*, bool*)>
c0025aa0:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0025aa4:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0025aa8:	83 c4 10             	add    esp,0x10
c0025aab:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0025ab0:	74 27                	je     c0025ad9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0025ab2:	83 ec 0c             	sub    esp,0xc
c0025ab5:	68 42 2b 03 c0       	push   0xc0032b42
c0025aba:	e8 8c a5 ff ff       	call   c002004b <KePanic(char const*)>
c0025abf:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025ac4:	83 c4 10             	add    esp,0x10
c0025ac7:	48                   	dec    eax
c0025ac8:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025acd:	85 c0                	test   eax,eax
c0025acf:	75 01                	jne    c0025ad2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0025ad1:	fb                   	sti    
c0025ad2:	31 db                	xor    ebx,ebx
c0025ad4:	e9 90 00 00 00       	jmp    c0025b69 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0025ad9:	51                   	push   ecx
c0025ada:	51                   	push   ecx
c0025adb:	6a 01                	push   0x1
c0025add:	55                   	push   ebp
c0025ade:	e8 83 48 ff ff       	call   c001a366 <File::open(FileOpenMode)>
c0025ae3:	83 c4 10             	add    esp,0x10
c0025ae6:	85 c0                	test   eax,eax
c0025ae8:	74 26                	je     c0025b10 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0025aea:	83 ec 0c             	sub    esp,0xc
c0025aed:	68 5b 2b 03 c0       	push   0xc0032b5b
c0025af2:	e8 54 a5 ff ff       	call   c002004b <KePanic(char const*)>
c0025af7:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025afc:	83 c4 10             	add    esp,0x10
c0025aff:	48                   	dec    eax
c0025b00:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025b05:	85 c0                	test   eax,eax
c0025b07:	75 c9                	jne    c0025ad2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0025b09:	fb                   	sti    
c0025b0a:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0025b0e:	eb 59                	jmp    c0025b69 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0025b10:	0f b7 ff             	movzx  edi,di
c0025b13:	50                   	push   eax
c0025b14:	0f b7 f6             	movzx  esi,si
c0025b17:	50                   	push   eax
c0025b18:	57                   	push   edi
c0025b19:	56                   	push   esi
c0025b1a:	e8 a7 fc ff ff       	call   c00257c6 <Vm::realToLinear(unsigned short, unsigned short)>
c0025b1f:	5a                   	pop    edx
c0025b20:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0025b23:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0025b27:	51                   	push   ecx
c0025b28:	50                   	push   eax
c0025b29:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0025b2d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0025b31:	55                   	push   ebp
c0025b32:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0025b35:	83 c4 14             	add    esp,0x14
c0025b38:	55                   	push   ebp
c0025b39:	e8 86 48 ff ff       	call   c001a3c4 <File::close()>
c0025b3e:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025b43:	83 c4 10             	add    esp,0x10
c0025b46:	48                   	dec    eax
c0025b47:	c6 05 25 02 04 c0 00 	mov    BYTE PTR ds:0xc0040225,0x0
c0025b4e:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025b53:	85 c0                	test   eax,eax
c0025b55:	75 01                	jne    c0025b58 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0025b57:	fb                   	sti    
c0025b58:	83 ec 0c             	sub    esp,0xc
c0025b5b:	ff 35 28 02 04 c0    	push   DWORD PTR ds:0xc0040228
c0025b61:	e8 4a f5 ff ff       	call   c00250b0 <unblockTask(ThreadControlBlock*)>
c0025b66:	83 c4 10             	add    esp,0x10
c0025b69:	83 c4 2c             	add    esp,0x2c
c0025b6c:	88 d8                	mov    al,bl
c0025b6e:	5b                   	pop    ebx
c0025b6f:	5e                   	pop    esi
c0025b70:	5f                   	pop    edi
c0025b71:	5d                   	pop    ebp
c0025b72:	c3                   	ret    

c0025b73 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0025b73:	57                   	push   edi
c0025b74:	56                   	push   esi
c0025b75:	53                   	push   ebx
c0025b76:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025b7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025b7e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0025b82:	83 e8 06             	sub    eax,0x6
c0025b85:	0f b7 c0             	movzx  eax,ax
c0025b88:	50                   	push   eax
c0025b89:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0025b8e:	50                   	push   eax
c0025b8f:	e8 32 fc ff ff       	call   c00257c6 <Vm::realToLinear(unsigned short, unsigned short)>
c0025b94:	5a                   	pop    edx
c0025b95:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0025b98:	59                   	pop    ecx
c0025b99:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0025b9c:	8d 51 fa             	lea    edx,[ecx-0x6]
c0025b9f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0025ba5:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0025ba8:	8d 56 02             	lea    edx,[esi+0x2]
c0025bab:	66 89 10             	mov    WORD PTR [eax],dx
c0025bae:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0025bb2:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0025bb6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0025bb9:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0025bbd:	0f b6 f1             	movzx  esi,cl
c0025bc0:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0025bc4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0025bca:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0025bce:	0f b6 d5             	movzx  edx,ch
c0025bd1:	74 0a                	je     c0025bdd <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c0025bd3:	c1 e2 08             	shl    edx,0x8
c0025bd6:	09 f2                	or     edx,esi
c0025bd8:	80 ce 02             	or     dh,0x2
c0025bdb:	eb 08                	jmp    c0025be5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c0025bdd:	c1 e2 08             	shl    edx,0x8
c0025be0:	09 f2                	or     edx,esi
c0025be2:	80 e6 fd             	and    dh,0xfd
c0025be5:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0025be9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025bee:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0025bf2:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0025bfa:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0025bfd:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0025c05:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0025c08:	5b                   	pop    ebx
c0025c09:	5e                   	pop    esi
c0025c0a:	5f                   	pop    edi
c0025c0b:	c3                   	ret    

c0025c0c <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0025c0c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025c11:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025c16:	c1 e0 04             	shl    eax,0x4
c0025c19:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0025c1c:	c3                   	ret    

c0025c1d <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0025c1d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025c22:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025c27:	c1 e0 04             	shl    eax,0x4
c0025c2a:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0025c2e:	c3                   	ret    

c0025c2f <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0025c2f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025c34:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025c39:	c1 e0 04             	shl    eax,0x4
c0025c3c:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0025c3f:	c3                   	ret    

c0025c40 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0025c40:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025c45:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025c4a:	c1 e0 04             	shl    eax,0x4
c0025c4d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0025c51:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0025c54:	c3                   	ret    

c0025c55 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0025c55:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025c5a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025c5f:	c1 e0 04             	shl    eax,0x4
c0025c62:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0025c66:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0025c6a:	c3                   	ret    

c0025c6b <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0025c6b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025c70:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025c75:	c1 e0 04             	shl    eax,0x4
c0025c78:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0025c7c:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0025c7f:	c3                   	ret    

c0025c80 <Vm::faultHandler(regs*)>:
c0025c80:	55                   	push   ebp
c0025c81:	57                   	push   edi
c0025c82:	56                   	push   esi
c0025c83:	53                   	push   ebx
c0025c84:	83 ec 2c             	sub    esp,0x2c
c0025c87:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0025c8b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025c8e:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0025c92:	0f b7 f8             	movzx  edi,ax
c0025c95:	52                   	push   edx
c0025c96:	0f b7 c0             	movzx  eax,ax
c0025c99:	50                   	push   eax
c0025c9a:	e8 27 fb ff ff       	call   c00257c6 <Vm::realToLinear(unsigned short, unsigned short)>
c0025c9f:	5a                   	pop    edx
c0025ca0:	59                   	pop    ecx
c0025ca1:	89 c1                	mov    ecx,eax
c0025ca3:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0025ca6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025caa:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0025caf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0025cb3:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0025cb6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025cba:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0025cbf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025cc3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0025cc7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0025ccb:	e8 f6 fa ff ff       	call   c00257c6 <Vm::realToLinear(unsigned short, unsigned short)>
c0025cd0:	5e                   	pop    esi
c0025cd1:	be 06 00 00 00       	mov    esi,0x6
c0025cd6:	5d                   	pop    ebp
c0025cd7:	31 ed                	xor    ebp,ebp
c0025cd9:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025cde:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0025ce1:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0025ce7:	0f 84 74 02 00 00    	je     c0025f61 <Vm::faultHandler(regs*)+0x2e1>
c0025ced:	0f 87 94 00 00 00    	ja     c0025d87 <Vm::faultHandler(regs*)+0x107>
c0025cf3:	83 fa 66             	cmp    edx,0x66
c0025cf6:	0f 84 e2 01 00 00    	je     c0025ede <Vm::faultHandler(regs*)+0x25e>
c0025cfc:	77 47                	ja     c0025d45 <Vm::faultHandler(regs*)+0xc5>
c0025cfe:	83 fa 36             	cmp    edx,0x36
c0025d01:	0f 84 ca 01 00 00    	je     c0025ed1 <Vm::faultHandler(regs*)+0x251>
c0025d07:	77 1a                	ja     c0025d23 <Vm::faultHandler(regs*)+0xa3>
c0025d09:	83 fa 26             	cmp    edx,0x26
c0025d0c:	0f 84 98 01 00 00    	je     c0025eaa <Vm::faultHandler(regs*)+0x22a>
c0025d12:	83 fa 2e             	cmp    edx,0x2e
c0025d15:	0f 85 21 06 00 00    	jne    c002633c <Vm::faultHandler(regs*)+0x6bc>
c0025d1b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0025d1e:	31 f6                	xor    esi,esi
c0025d20:	41                   	inc    ecx
c0025d21:	eb bb                	jmp    c0025cde <Vm::faultHandler(regs*)+0x5e>
c0025d23:	83 fa 64             	cmp    edx,0x64
c0025d26:	0f 84 8b 01 00 00    	je     c0025eb7 <Vm::faultHandler(regs*)+0x237>
c0025d2c:	0f 87 92 01 00 00    	ja     c0025ec4 <Vm::faultHandler(regs*)+0x244>
c0025d32:	83 fa 3e             	cmp    edx,0x3e
c0025d35:	0f 85 01 06 00 00    	jne    c002633c <Vm::faultHandler(regs*)+0x6bc>
c0025d3b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0025d3e:	be 01 00 00 00       	mov    esi,0x1
c0025d43:	eb db                	jmp    c0025d20 <Vm::faultHandler(regs*)+0xa0>
c0025d45:	83 fa 6d             	cmp    edx,0x6d
c0025d48:	0f 84 34 03 00 00    	je     c0026082 <Vm::faultHandler(regs*)+0x402>
c0025d4e:	77 17                	ja     c0025d67 <Vm::faultHandler(regs*)+0xe7>
c0025d50:	83 fa 67             	cmp    edx,0x67
c0025d53:	0f 84 92 01 00 00    	je     c0025eeb <Vm::faultHandler(regs*)+0x26b>
c0025d59:	83 fa 6c             	cmp    edx,0x6c
c0025d5c:	0f 84 b1 02 00 00    	je     c0026013 <Vm::faultHandler(regs*)+0x393>
c0025d62:	e9 d5 05 00 00       	jmp    c002633c <Vm::faultHandler(regs*)+0x6bc>
c0025d67:	83 fa 6f             	cmp    edx,0x6f
c0025d6a:	0f 84 3d 04 00 00    	je     c00261ad <Vm::faultHandler(regs*)+0x52d>
c0025d70:	0f 82 9f 03 00 00    	jb     c0026115 <Vm::faultHandler(regs*)+0x495>
c0025d76:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0025d7c:	0f 84 76 01 00 00    	je     c0025ef8 <Vm::faultHandler(regs*)+0x278>
c0025d82:	e9 b5 05 00 00       	jmp    c002633c <Vm::faultHandler(regs*)+0x6bc>
c0025d87:	81 fa ec 00 00 00    	cmp    edx,0xec
c0025d8d:	0f 84 51 05 00 00    	je     c00262e4 <Vm::faultHandler(regs*)+0x664>
c0025d93:	0f 87 a9 00 00 00    	ja     c0025e42 <Vm::faultHandler(regs*)+0x1c2>
c0025d99:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0025d9f:	0f 84 d0 04 00 00    	je     c0026275 <Vm::faultHandler(regs*)+0x5f5>
c0025da5:	77 78                	ja     c0025e1f <Vm::faultHandler(regs*)+0x19f>
c0025da7:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0025dad:	0f 84 0e 02 00 00    	je     c0025fc1 <Vm::faultHandler(regs*)+0x341>
c0025db3:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0025db9:	0f 85 7d 05 00 00    	jne    c002633c <Vm::faultHandler(regs*)+0x6bc>
c0025dbf:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0025dc3:	89 d1                	mov    ecx,edx
c0025dc5:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0025dc8:	c1 e1 08             	shl    ecx,0x8
c0025dcb:	09 ca                	or     edx,ecx
c0025dcd:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0025dd0:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0025dd4:	89 d1                	mov    ecx,edx
c0025dd6:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0025dda:	c1 e1 08             	shl    ecx,0x8
c0025ddd:	09 ca                	or     edx,ecx
c0025ddf:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0025de2:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0025de6:	89 d1                	mov    ecx,edx
c0025de8:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0025dec:	c1 e1 08             	shl    ecx,0x8
c0025def:	09 ca                	or     edx,ecx
c0025df1:	81 ca 00 02 02 00    	or     edx,0x20200
c0025df7:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0025dfa:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0025dfe:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0025e04:	d1 e8                	shr    eax,1
c0025e06:	83 e0 01             	and    eax,0x1
c0025e09:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0025e0c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0025e0f:	83 c0 06             	add    eax,0x6
c0025e12:	25 ff ff 00 00       	and    eax,0xffff
c0025e17:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0025e1a:	e9 19 05 00 00       	jmp    c0026338 <Vm::faultHandler(regs*)+0x6b8>
c0025e1f:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0025e25:	0f 84 8f 04 00 00    	je     c00262ba <Vm::faultHandler(regs*)+0x63a>
c0025e2b:	0f 82 60 04 00 00    	jb     c0026291 <Vm::faultHandler(regs*)+0x611>
c0025e31:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0025e37:	0f 84 94 04 00 00    	je     c00262d1 <Vm::faultHandler(regs*)+0x651>
c0025e3d:	e9 fa 04 00 00       	jmp    c002633c <Vm::faultHandler(regs*)+0x6bc>
c0025e42:	81 fa ef 00 00 00    	cmp    edx,0xef
c0025e48:	0f 84 d7 04 00 00    	je     c0026325 <Vm::faultHandler(regs*)+0x6a5>
c0025e4e:	77 2e                	ja     c0025e7e <Vm::faultHandler(regs*)+0x1fe>
c0025e50:	81 fa ed 00 00 00    	cmp    edx,0xed
c0025e56:	0f 84 a4 04 00 00    	je     c0026300 <Vm::faultHandler(regs*)+0x680>
c0025e5c:	81 fa ee 00 00 00    	cmp    edx,0xee
c0025e62:	0f 85 d4 04 00 00    	jne    c002633c <Vm::faultHandler(regs*)+0x6bc>
c0025e68:	50                   	push   eax
c0025e69:	50                   	push   eax
c0025e6a:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0025e6e:	50                   	push   eax
c0025e6f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0025e73:	50                   	push   eax
c0025e74:	e8 17 f9 ff ff       	call   c0025790 <Vm::outbv(unsigned short, unsigned char)>
c0025e79:	e9 9f 04 00 00       	jmp    c002631d <Vm::faultHandler(regs*)+0x69d>
c0025e7e:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0025e84:	0f 84 6d 01 00 00    	je     c0025ff7 <Vm::faultHandler(regs*)+0x377>
c0025e8a:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0025e90:	0f 84 6f 01 00 00    	je     c0026005 <Vm::faultHandler(regs*)+0x385>
c0025e96:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0025e9c:	0f 85 9a 04 00 00    	jne    c002633c <Vm::faultHandler(regs*)+0x6bc>
c0025ea2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0025ea5:	e9 76 fe ff ff       	jmp    c0025d20 <Vm::faultHandler(regs*)+0xa0>
c0025eaa:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0025ead:	be 02 00 00 00       	mov    esi,0x2
c0025eb2:	e9 69 fe ff ff       	jmp    c0025d20 <Vm::faultHandler(regs*)+0xa0>
c0025eb7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0025eba:	be 03 00 00 00       	mov    esi,0x3
c0025ebf:	e9 5c fe ff ff       	jmp    c0025d20 <Vm::faultHandler(regs*)+0xa0>
c0025ec4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0025ec7:	be 04 00 00 00       	mov    esi,0x4
c0025ecc:	e9 4f fe ff ff       	jmp    c0025d20 <Vm::faultHandler(regs*)+0xa0>
c0025ed1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0025ed4:	be 05 00 00 00       	mov    esi,0x5
c0025ed9:	e9 42 fe ff ff       	jmp    c0025d20 <Vm::faultHandler(regs*)+0xa0>
c0025ede:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0025ee1:	bd 01 00 00 00       	mov    ebp,0x1
c0025ee6:	e9 35 fe ff ff       	jmp    c0025d20 <Vm::faultHandler(regs*)+0xa0>
c0025eeb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0025eee:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0025ef3:	e9 28 fe ff ff       	jmp    c0025d20 <Vm::faultHandler(regs*)+0xa0>
c0025ef8:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0025efb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025eff:	83 e5 01             	and    ebp,0x1
c0025f02:	74 30                	je     c0025f34 <Vm::faultHandler(regs*)+0x2b4>
c0025f04:	83 e9 04             	sub    ecx,0x4
c0025f07:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0025f0d:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0025f13:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0025f16:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0025f19:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0025f1f:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0025f23:	0f 84 0c 04 00 00    	je     c0026335 <Vm::faultHandler(regs*)+0x6b5>
c0025f29:	80 ce 02             	or     dh,0x2
c0025f2c:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0025f2f:	e9 01 04 00 00       	jmp    c0026335 <Vm::faultHandler(regs*)+0x6b5>
c0025f34:	83 e9 02             	sub    ecx,0x2
c0025f37:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0025f3d:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0025f40:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0025f44:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0025f4a:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0025f4e:	74 05                	je     c0025f55 <Vm::faultHandler(regs*)+0x2d5>
c0025f50:	80 ce 02             	or     dh,0x2
c0025f53:	eb 03                	jmp    c0025f58 <Vm::faultHandler(regs*)+0x2d8>
c0025f55:	80 e6 fd             	and    dh,0xfd
c0025f58:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0025f5c:	e9 d4 03 00 00       	jmp    c0026335 <Vm::faultHandler(regs*)+0x6b5>
c0025f61:	83 e5 01             	and    ebp,0x1
c0025f64:	74 2a                	je     c0025f90 <Vm::faultHandler(regs*)+0x310>
c0025f66:	8b 10                	mov    edx,DWORD PTR [eax]
c0025f68:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0025f6e:	81 ca 00 02 02 00    	or     edx,0x20200
c0025f74:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0025f77:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f79:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0025f7f:	c1 e8 09             	shr    eax,0x9
c0025f82:	83 e0 01             	and    eax,0x1
c0025f85:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0025f88:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0025f8b:	83 c0 04             	add    eax,0x4
c0025f8e:	eb 24                	jmp    c0025fb4 <Vm::faultHandler(regs*)+0x334>
c0025f90:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0025f93:	81 ca 00 02 02 00    	or     edx,0x20200
c0025f99:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0025f9c:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0025f9f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0025fa5:	c1 e8 09             	shr    eax,0x9
c0025fa8:	83 e0 01             	and    eax,0x1
c0025fab:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0025fae:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0025fb1:	83 c0 02             	add    eax,0x2
c0025fb4:	25 ff ff 00 00       	and    eax,0xffff
c0025fb9:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0025fbc:	e9 74 03 00 00       	jmp    c0026335 <Vm::faultHandler(regs*)+0x6b5>
c0025fc1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0025fc5:	3d ee 00 00 00       	cmp    eax,0xee
c0025fca:	75 10                	jne    c0025fdc <Vm::faultHandler(regs*)+0x35c>
c0025fcc:	83 ec 0c             	sub    esp,0xc
c0025fcf:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0025fd2:	e8 56 f8 ff ff       	call   c002582d <Vm::mainloop3(unsigned long)>
c0025fd7:	e9 44 03 00 00       	jmp    c0026320 <Vm::faultHandler(regs*)+0x6a0>
c0025fdc:	83 ec 0c             	sub    esp,0xc
c0025fdf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0025fe3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0025fe7:	51                   	push   ecx
c0025fe8:	50                   	push   eax
c0025fe9:	53                   	push   ebx
c0025fea:	e8 84 fb ff ff       	call   c0025b73 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0025fef:	83 c4 20             	add    esp,0x20
c0025ff2:	e9 41 03 00 00       	jmp    c0026338 <Vm::faultHandler(regs*)+0x6b8>
c0025ff7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025ffc:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0026000:	e9 30 03 00 00       	jmp    c0026335 <Vm::faultHandler(regs*)+0x6b5>
c0026005:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002600a:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c002600e:	e9 22 03 00 00       	jmp    c0026335 <Vm::faultHandler(regs*)+0x6b5>
c0026013:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0026016:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c002601b:	74 2b                	je     c0026048 <Vm::faultHandler(regs*)+0x3c8>
c002601d:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0026024:	76 22                	jbe    c0026048 <Vm::faultHandler(regs*)+0x3c8>
c0026026:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c002602a:	50                   	push   eax
c002602b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c002602f:	50                   	push   eax
c0026030:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0026034:	50                   	push   eax
c0026035:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026039:	50                   	push   eax
c002603a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c002603e:	50                   	push   eax
c002603f:	6a 6c                	push   0x6c
c0026041:	6a 6c                	push   0x6c
c0026043:	e9 bd 01 00 00       	jmp    c0026205 <Vm::faultHandler(regs*)+0x585>
c0026048:	83 ec 0c             	sub    esp,0xc
c002604b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c002604f:	0f b7 f6             	movzx  esi,si
c0026052:	50                   	push   eax
c0026053:	e8 25 f7 ff ff       	call   c002577d <Vm::inbv(unsigned short)>
c0026058:	83 c4 0c             	add    esp,0xc
c002605b:	0f b6 c0             	movzx  eax,al
c002605e:	50                   	push   eax
c002605f:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0026063:	50                   	push   eax
c0026064:	56                   	push   esi
c0026065:	e8 d6 fb ff ff       	call   c0025c40 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c002606a:	83 c4 10             	add    esp,0x10
c002606d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0026070:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0026074:	74 03                	je     c0026079 <Vm::faultHandler(regs*)+0x3f9>
c0026076:	48                   	dec    eax
c0026077:	eb 01                	jmp    c002607a <Vm::faultHandler(regs*)+0x3fa>
c0026079:	40                   	inc    eax
c002607a:	0f b7 c0             	movzx  eax,ax
c002607d:	e9 8b 00 00 00       	jmp    c002610d <Vm::faultHandler(regs*)+0x48d>
c0026082:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0026085:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0026088:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c002608d:	74 29                	je     c00260b8 <Vm::faultHandler(regs*)+0x438>
c002608f:	3d ff ff 00 00       	cmp    eax,0xffff
c0026094:	76 22                	jbe    c00260b8 <Vm::faultHandler(regs*)+0x438>
c0026096:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c002609a:	50                   	push   eax
c002609b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c002609f:	50                   	push   eax
c00260a0:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00260a4:	50                   	push   eax
c00260a5:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00260a9:	50                   	push   eax
c00260aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00260ae:	50                   	push   eax
c00260af:	6a 6d                	push   0x6d
c00260b1:	6a 6d                	push   0x6d
c00260b3:	e9 4d 01 00 00       	jmp    c0026205 <Vm::faultHandler(regs*)+0x585>
c00260b8:	0f b7 c8             	movzx  ecx,ax
c00260bb:	0f b7 f6             	movzx  esi,si
c00260be:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00260c1:	83 e5 01             	and    ebp,0x1
c00260c4:	74 20                	je     c00260e6 <Vm::faultHandler(regs*)+0x466>
c00260c6:	ed                   	in     eax,dx
c00260c7:	55                   	push   ebp
c00260c8:	50                   	push   eax
c00260c9:	51                   	push   ecx
c00260ca:	56                   	push   esi
c00260cb:	e8 9b fb ff ff       	call   c0025c6b <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00260d0:	83 c4 10             	add    esp,0x10
c00260d3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00260d6:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00260da:	74 05                	je     c00260e1 <Vm::faultHandler(regs*)+0x461>
c00260dc:	83 e8 04             	sub    eax,0x4
c00260df:	eb 27                	jmp    c0026108 <Vm::faultHandler(regs*)+0x488>
c00260e1:	83 c0 04             	add    eax,0x4
c00260e4:	eb 22                	jmp    c0026108 <Vm::faultHandler(regs*)+0x488>
c00260e6:	66 ed                	in     ax,dx
c00260e8:	0f b7 c0             	movzx  eax,ax
c00260eb:	57                   	push   edi
c00260ec:	50                   	push   eax
c00260ed:	51                   	push   ecx
c00260ee:	56                   	push   esi
c00260ef:	e8 61 fb ff ff       	call   c0025c55 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00260f4:	83 c4 10             	add    esp,0x10
c00260f7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00260fa:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00260fe:	74 05                	je     c0026105 <Vm::faultHandler(regs*)+0x485>
c0026100:	83 e8 02             	sub    eax,0x2
c0026103:	eb 03                	jmp    c0026108 <Vm::faultHandler(regs*)+0x488>
c0026105:	83 c0 02             	add    eax,0x2
c0026108:	25 ff ff 00 00       	and    eax,0xffff
c002610d:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0026110:	e9 20 02 00 00       	jmp    c0026335 <Vm::faultHandler(regs*)+0x6b5>
c0026115:	8d 46 ff             	lea    eax,[esi-0x1]
c0026118:	0f b6 f0             	movzx  esi,al
c002611b:	83 fe 05             	cmp    esi,0x5
c002611e:	77 23                	ja     c0026143 <Vm::faultHandler(regs*)+0x4c3>
c0026120:	ff 24 b5 d0 2b 03 c0 	jmp    DWORD PTR [esi*4-0x3ffcd430]
c0026127:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c002612c:	eb 15                	jmp    c0026143 <Vm::faultHandler(regs*)+0x4c3>
c002612e:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0026132:	eb 0f                	jmp    c0026143 <Vm::faultHandler(regs*)+0x4c3>
c0026134:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0026138:	eb 09                	jmp    c0026143 <Vm::faultHandler(regs*)+0x4c3>
c002613a:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c002613e:	eb 03                	jmp    c0026143 <Vm::faultHandler(regs*)+0x4c3>
c0026140:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0026143:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0026146:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c002614b:	74 29                	je     c0026176 <Vm::faultHandler(regs*)+0x4f6>
c002614d:	3d ff ff 00 00       	cmp    eax,0xffff
c0026152:	76 22                	jbe    c0026176 <Vm::faultHandler(regs*)+0x4f6>
c0026154:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026158:	50                   	push   eax
c0026159:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c002615d:	50                   	push   eax
c002615e:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0026162:	50                   	push   eax
c0026163:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026167:	50                   	push   eax
c0026168:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c002616c:	50                   	push   eax
c002616d:	6a 6e                	push   0x6e
c002616f:	6a 6e                	push   0x6e
c0026171:	e9 8f 00 00 00       	jmp    c0026205 <Vm::faultHandler(regs*)+0x585>
c0026176:	0f b7 c0             	movzx  eax,ax
c0026179:	52                   	push   edx
c002617a:	52                   	push   edx
c002617b:	50                   	push   eax
c002617c:	57                   	push   edi
c002617d:	e8 8a fa ff ff       	call   c0025c0c <Vm::readByteFromReal(unsigned short, unsigned short)>
c0026182:	59                   	pop    ecx
c0026183:	0f b6 c0             	movzx  eax,al
c0026186:	5e                   	pop    esi
c0026187:	50                   	push   eax
c0026188:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c002618c:	50                   	push   eax
c002618d:	e8 fe f5 ff ff       	call   c0025790 <Vm::outbv(unsigned short, unsigned char)>
c0026192:	83 c4 10             	add    esp,0x10
c0026195:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0026198:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c002619c:	74 03                	je     c00261a1 <Vm::faultHandler(regs*)+0x521>
c002619e:	48                   	dec    eax
c002619f:	eb 01                	jmp    c00261a2 <Vm::faultHandler(regs*)+0x522>
c00261a1:	40                   	inc    eax
c00261a2:	0f b7 c0             	movzx  eax,ax
c00261a5:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00261a8:	e9 88 01 00 00       	jmp    c0026335 <Vm::faultHandler(regs*)+0x6b5>
c00261ad:	8d 46 ff             	lea    eax,[esi-0x1]
c00261b0:	0f b6 f0             	movzx  esi,al
c00261b3:	83 fe 05             	cmp    esi,0x5
c00261b6:	77 1e                	ja     c00261d6 <Vm::faultHandler(regs*)+0x556>
c00261b8:	ff 24 b5 e8 2b 03 c0 	jmp    DWORD PTR [esi*4-0x3ffcd418]
c00261bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00261c3:	eb 11                	jmp    c00261d6 <Vm::faultHandler(regs*)+0x556>
c00261c5:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00261c8:	eb 0c                	jmp    c00261d6 <Vm::faultHandler(regs*)+0x556>
c00261ca:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00261cd:	eb 07                	jmp    c00261d6 <Vm::faultHandler(regs*)+0x556>
c00261cf:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00261d2:	eb 02                	jmp    c00261d6 <Vm::faultHandler(regs*)+0x556>
c00261d4:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00261d6:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00261d9:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00261de:	74 37                	je     c0026217 <Vm::faultHandler(regs*)+0x597>
c00261e0:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00261e6:	76 2f                	jbe    c0026217 <Vm::faultHandler(regs*)+0x597>
c00261e8:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00261ec:	50                   	push   eax
c00261ed:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00261f1:	50                   	push   eax
c00261f2:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00261f6:	50                   	push   eax
c00261f7:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00261fb:	50                   	push   eax
c00261fc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026200:	50                   	push   eax
c0026201:	6a 6f                	push   0x6f
c0026203:	6a 6f                	push   0x6f
c0026205:	68 74 2b 03 c0       	push   0xc0032b74
c002620a:	e8 32 2f ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c002620f:	83 c4 20             	add    esp,0x20
c0026212:	e9 83 01 00 00       	jmp    c002639a <Vm::faultHandler(regs*)+0x71a>
c0026217:	0f b7 d7             	movzx  edx,di
c002621a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c002621d:	0f b7 c6             	movzx  eax,si
c0026220:	81 e1 00 04 00 00    	and    ecx,0x400
c0026226:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0026229:	83 e5 01             	and    ebp,0x1
c002622c:	74 1d                	je     c002624b <Vm::faultHandler(regs*)+0x5cb>
c002622e:	55                   	push   ebp
c002622f:	55                   	push   ebp
c0026230:	50                   	push   eax
c0026231:	52                   	push   edx
c0026232:	e8 f8 f9 ff ff       	call   c0025c2f <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0026237:	83 c4 10             	add    esp,0x10
c002623a:	89 fa                	mov    edx,edi
c002623c:	ef                   	out    dx,eax
c002623d:	85 c9                	test   ecx,ecx
c002623f:	74 05                	je     c0026246 <Vm::faultHandler(regs*)+0x5c6>
c0026241:	83 ee 04             	sub    esi,0x4
c0026244:	eb 21                	jmp    c0026267 <Vm::faultHandler(regs*)+0x5e7>
c0026246:	83 c6 04             	add    esi,0x4
c0026249:	eb 1c                	jmp    c0026267 <Vm::faultHandler(regs*)+0x5e7>
c002624b:	55                   	push   ebp
c002624c:	55                   	push   ebp
c002624d:	50                   	push   eax
c002624e:	52                   	push   edx
c002624f:	e8 c9 f9 ff ff       	call   c0025c1d <Vm::readWordFromReal(unsigned short, unsigned short)>
c0026254:	83 c4 10             	add    esp,0x10
c0026257:	89 fa                	mov    edx,edi
c0026259:	66 ef                	out    dx,ax
c002625b:	85 c9                	test   ecx,ecx
c002625d:	74 05                	je     c0026264 <Vm::faultHandler(regs*)+0x5e4>
c002625f:	83 ee 02             	sub    esi,0x2
c0026262:	eb 03                	jmp    c0026267 <Vm::faultHandler(regs*)+0x5e7>
c0026264:	83 c6 02             	add    esi,0x2
c0026267:	81 e6 ff ff 00 00    	and    esi,0xffff
c002626d:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0026270:	e9 c0 00 00 00       	jmp    c0026335 <Vm::faultHandler(regs*)+0x6b5>
c0026275:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c002627c:	83 ec 0c             	sub    esp,0xc
c002627f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026283:	50                   	push   eax
c0026284:	e8 f4 f4 ff ff       	call   c002577d <Vm::inbv(unsigned short)>
c0026289:	0f b6 c0             	movzx  eax,al
c002628c:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c002628f:	eb 3a                	jmp    c00262cb <Vm::faultHandler(regs*)+0x64b>
c0026291:	83 e5 01             	and    ebp,0x1
c0026294:	74 07                	je     c002629d <Vm::faultHandler(regs*)+0x61d>
c0026296:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c002629a:	ed                   	in     eax,dx
c002629b:	eb 14                	jmp    c00262b1 <Vm::faultHandler(regs*)+0x631>
c002629d:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00262a0:	66 31 f6             	xor    si,si
c00262a3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00262a6:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00262aa:	66 ed                	in     ax,dx
c00262ac:	0f b7 c0             	movzx  eax,ax
c00262af:	09 f0                	or     eax,esi
c00262b1:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00262b4:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00262b8:	eb 7e                	jmp    c0026338 <Vm::faultHandler(regs*)+0x6b8>
c00262ba:	52                   	push   edx
c00262bb:	52                   	push   edx
c00262bc:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00262c0:	50                   	push   eax
c00262c1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00262c5:	50                   	push   eax
c00262c6:	e8 c5 f4 ff ff       	call   c0025790 <Vm::outbv(unsigned short, unsigned char)>
c00262cb:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00262cf:	eb 4f                	jmp    c0026320 <Vm::faultHandler(regs*)+0x6a0>
c00262d1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00262d4:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00262d8:	83 e5 01             	and    ebp,0x1
c00262db:	74 03                	je     c00262e0 <Vm::faultHandler(regs*)+0x660>
c00262dd:	ef                   	out    dx,eax
c00262de:	eb d4                	jmp    c00262b4 <Vm::faultHandler(regs*)+0x634>
c00262e0:	66 ef                	out    dx,ax
c00262e2:	eb d0                	jmp    c00262b4 <Vm::faultHandler(regs*)+0x634>
c00262e4:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00262eb:	83 ec 0c             	sub    esp,0xc
c00262ee:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00262f2:	50                   	push   eax
c00262f3:	e8 85 f4 ff ff       	call   c002577d <Vm::inbv(unsigned short)>
c00262f8:	0f b6 c0             	movzx  eax,al
c00262fb:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00262fe:	eb 1d                	jmp    c002631d <Vm::faultHandler(regs*)+0x69d>
c0026300:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0026303:	83 e5 01             	and    ebp,0x1
c0026306:	74 03                	je     c002630b <Vm::faultHandler(regs*)+0x68b>
c0026308:	ed                   	in     eax,dx
c0026309:	eb 0d                	jmp    c0026318 <Vm::faultHandler(regs*)+0x698>
c002630b:	66 ed                	in     ax,dx
c002630d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0026310:	0f b7 c0             	movzx  eax,ax
c0026313:	66 31 d2             	xor    dx,dx
c0026316:	09 d0                	or     eax,edx
c0026318:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c002631b:	eb 18                	jmp    c0026335 <Vm::faultHandler(regs*)+0x6b5>
c002631d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026320:	83 c4 10             	add    esp,0x10
c0026323:	eb 13                	jmp    c0026338 <Vm::faultHandler(regs*)+0x6b8>
c0026325:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0026328:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c002632b:	83 e5 01             	and    ebp,0x1
c002632e:	74 03                	je     c0026333 <Vm::faultHandler(regs*)+0x6b3>
c0026330:	ef                   	out    dx,eax
c0026331:	eb 02                	jmp    c0026335 <Vm::faultHandler(regs*)+0x6b5>
c0026333:	66 ef                	out    dx,ax
c0026335:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026338:	b0 01                	mov    al,0x1
c002633a:	eb 60                	jmp    c002639c <Vm::faultHandler(regs*)+0x71c>
c002633c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026340:	50                   	push   eax
c0026341:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0026345:	50                   	push   eax
c0026346:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c002634a:	50                   	push   eax
c002634b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c002634f:	50                   	push   eax
c0026350:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026354:	50                   	push   eax
c0026355:	52                   	push   edx
c0026356:	52                   	push   edx
c0026357:	68 a1 2b 03 c0       	push   0xc0032ba1
c002635c:	e8 e0 2d ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0026361:	83 c4 20             	add    esp,0x20
c0026364:	83 ec 0c             	sub    esp,0xc
c0026367:	6a 60                	push   0x60
c0026369:	e8 0f f4 ff ff       	call   c002577d <Vm::inbv(unsigned short)>
c002636e:	83 c4 10             	add    esp,0x10
c0026371:	0f b6 d0             	movzx  edx,al
c0026374:	83 fa 1c             	cmp    edx,0x1c
c0026377:	74 05                	je     c002637e <Vm::faultHandler(regs*)+0x6fe>
c0026379:	83 fa 5a             	cmp    edx,0x5a
c002637c:	75 e6                	jne    c0026364 <Vm::faultHandler(regs*)+0x6e4>
c002637e:	0f b6 c0             	movzx  eax,al
c0026381:	83 f8 1c             	cmp    eax,0x1c
c0026384:	74 05                	je     c002638b <Vm::faultHandler(regs*)+0x70b>
c0026386:	83 f8 5a             	cmp    eax,0x5a
c0026389:	75 0f                	jne    c002639a <Vm::faultHandler(regs*)+0x71a>
c002638b:	83 ec 0c             	sub    esp,0xc
c002638e:	6a 60                	push   0x60
c0026390:	e8 e8 f3 ff ff       	call   c002577d <Vm::inbv(unsigned short)>
c0026395:	83 c4 10             	add    esp,0x10
c0026398:	eb e4                	jmp    c002637e <Vm::faultHandler(regs*)+0x6fe>
c002639a:	31 c0                	xor    eax,eax
c002639c:	83 c4 2c             	add    esp,0x2c
c002639f:	5b                   	pop    ebx
c00263a0:	5e                   	pop    esi
c00263a1:	5f                   	pop    edi
c00263a2:	5d                   	pop    ebp
c00263a3:	c3                   	ret    

c00263a4 <noCopro(unsigned long)>:
c00263a4:	c3                   	ret    

c00263a5 <nmiHandler(regs*, void*)>:
c00263a5:	83 ec 0c             	sub    esp,0xc
c00263a8:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00263ad:	83 ec 0c             	sub    esp,0xc
c00263b0:	50                   	push   eax
c00263b1:	e8 fc f6 fe ff       	call   c0015ab2 <Computer::handleNMI()>
c00263b6:	83 c4 10             	add    esp,0x10
c00263b9:	90                   	nop
c00263ba:	83 c4 0c             	add    esp,0xc
c00263bd:	c3                   	ret    

c00263be <doubleFault(regs*, void*)>:
c00263be:	55                   	push   ebp
c00263bf:	89 e5                	mov    ebp,esp
c00263c1:	83 ec 08             	sub    esp,0x8
c00263c4:	83 ec 0c             	sub    esp,0xc
c00263c7:	68 00 2c 03 c0       	push   0xc0032c00
c00263cc:	e8 7a 9c ff ff       	call   c002004b <KePanic(char const*)>
c00263d1:	83 c4 10             	add    esp,0x10
c00263d4:	90                   	nop
c00263d5:	c9                   	leave  
c00263d6:	c3                   	ret    

c00263d7 <displayDebugInfo(regs*)>:
c00263d7:	83 ec 1c             	sub    esp,0x1c
c00263da:	0f 20 c0             	mov    eax,cr0
c00263dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00263e1:	0f 20 d0             	mov    eax,cr2
c00263e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00263e8:	0f 20 d8             	mov    eax,cr3
c00263eb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00263ef:	0f 20 e0             	mov    eax,cr4
c00263f2:	89 04 24             	mov    DWORD PTR [esp],eax
c00263f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00263f9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00263fc:	83 ec 08             	sub    esp,0x8
c00263ff:	50                   	push   eax
c0026400:	68 1c 2c 03 c0       	push   0xc0032c1c
c0026405:	e8 37 2d ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c002640a:	83 c4 10             	add    esp,0x10
c002640d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026411:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0026414:	83 ec 08             	sub    esp,0x8
c0026417:	50                   	push   eax
c0026418:	68 0d 2c 03 c0       	push   0xc0032c0d
c002641d:	e8 1f 2d ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0026422:	83 c4 10             	add    esp,0x10
c0026425:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026429:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c002642c:	83 ec 08             	sub    esp,0x8
c002642f:	50                   	push   eax
c0026430:	68 18 2c 03 c0       	push   0xc0032c18
c0026435:	e8 07 2d ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c002643a:	83 c4 10             	add    esp,0x10
c002643d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026441:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0026444:	83 ec 08             	sub    esp,0x8
c0026447:	50                   	push   eax
c0026448:	68 27 2c 03 c0       	push   0xc0032c27
c002644d:	e8 ef 2c ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0026452:	83 c4 10             	add    esp,0x10
c0026455:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026459:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c002645c:	83 ec 08             	sub    esp,0x8
c002645f:	50                   	push   eax
c0026460:	68 32 2c 03 c0       	push   0xc0032c32
c0026465:	e8 d7 2c ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c002646a:	83 c4 10             	add    esp,0x10
c002646d:	83 ec 08             	sub    esp,0x8
c0026470:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026474:	68 3d 2c 03 c0       	push   0xc0032c3d
c0026479:	e8 c3 2c ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c002647e:	83 c4 10             	add    esp,0x10
c0026481:	83 ec 08             	sub    esp,0x8
c0026484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0026488:	68 48 2c 03 c0       	push   0xc0032c48
c002648d:	e8 af 2c ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0026492:	83 c4 10             	add    esp,0x10
c0026495:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026499:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c002649c:	c1 e0 05             	shl    eax,0x5
c002649f:	8d 90 e0 3f 03 c0    	lea    edx,[eax-0x3ffcc020]
c00264a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00264a9:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00264ac:	83 ec 04             	sub    esp,0x4
c00264af:	52                   	push   edx
c00264b0:	50                   	push   eax
c00264b1:	68 53 2c 03 c0       	push   0xc0032c53
c00264b6:	e8 86 2c ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c00264bb:	83 c4 10             	add    esp,0x10
c00264be:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00264c3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00264c9:	83 ec 0c             	sub    esp,0xc
c00264cc:	50                   	push   eax
c00264cd:	e8 83 0a ff ff       	call   c0016f55 <setActiveTerminal(VgaText*)>
c00264d2:	83 c4 10             	add    esp,0x10
c00264d5:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00264da:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00264e0:	83 ec 08             	sub    esp,0x8
c00264e3:	68 62 2c 03 c0       	push   0xc0032c62
c00264e8:	50                   	push   eax
c00264e9:	e8 b4 0d ff ff       	call   c00172a2 <VgaText::puts(char const*)>
c00264ee:	83 c4 10             	add    esp,0x10
c00264f1:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00264f6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00264fc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026500:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0026503:	83 ec 08             	sub    esp,0x8
c0026506:	52                   	push   edx
c0026507:	50                   	push   eax
c0026508:	e8 4f 0d ff ff       	call   c001725c <VgaText::putx(unsigned int)>
c002650d:	83 c4 10             	add    esp,0x10
c0026510:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026515:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002651b:	83 ec 08             	sub    esp,0x8
c002651e:	68 70 2c 03 c0       	push   0xc0032c70
c0026523:	50                   	push   eax
c0026524:	e8 79 0d ff ff       	call   c00172a2 <VgaText::puts(char const*)>
c0026529:	83 c4 10             	add    esp,0x10
c002652c:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026531:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026537:	ba 00 20 00 c2       	mov    edx,0xc2002000
c002653c:	8b 12                	mov    edx,DWORD PTR [edx]
c002653e:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0026541:	83 c2 0c             	add    edx,0xc
c0026544:	83 ec 08             	sub    esp,0x8
c0026547:	52                   	push   edx
c0026548:	50                   	push   eax
c0026549:	e8 54 0d ff ff       	call   c00172a2 <VgaText::puts(char const*)>
c002654e:	83 c4 10             	add    esp,0x10
c0026551:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026556:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002655c:	83 ec 08             	sub    esp,0x8
c002655f:	68 79 2c 03 c0       	push   0xc0032c79
c0026564:	50                   	push   eax
c0026565:	e8 38 0d ff ff       	call   c00172a2 <VgaText::puts(char const*)>
c002656a:	83 c4 10             	add    esp,0x10
c002656d:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026572:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026578:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002657c:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c002657f:	83 ec 08             	sub    esp,0x8
c0026582:	52                   	push   edx
c0026583:	50                   	push   eax
c0026584:	e8 d3 0c ff ff       	call   c001725c <VgaText::putx(unsigned int)>
c0026589:	83 c4 10             	add    esp,0x10
c002658c:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026591:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026597:	83 ec 08             	sub    esp,0x8
c002659a:	68 81 2c 03 c0       	push   0xc0032c81
c002659f:	50                   	push   eax
c00265a0:	e8 fd 0c ff ff       	call   c00172a2 <VgaText::puts(char const*)>
c00265a5:	83 c4 10             	add    esp,0x10
c00265a8:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00265ad:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00265b3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00265b7:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00265ba:	83 ec 08             	sub    esp,0x8
c00265bd:	52                   	push   edx
c00265be:	50                   	push   eax
c00265bf:	e8 98 0c ff ff       	call   c001725c <VgaText::putx(unsigned int)>
c00265c4:	83 c4 10             	add    esp,0x10
c00265c7:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00265cc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00265d2:	83 ec 08             	sub    esp,0x8
c00265d5:	68 89 2c 03 c0       	push   0xc0032c89
c00265da:	50                   	push   eax
c00265db:	e8 c2 0c ff ff       	call   c00172a2 <VgaText::puts(char const*)>
c00265e0:	83 c4 10             	add    esp,0x10
c00265e3:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00265e8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00265ee:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00265f2:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c00265f5:	83 ec 08             	sub    esp,0x8
c00265f8:	52                   	push   edx
c00265f9:	50                   	push   eax
c00265fa:	e8 5d 0c ff ff       	call   c001725c <VgaText::putx(unsigned int)>
c00265ff:	83 c4 10             	add    esp,0x10
c0026602:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026607:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002660d:	83 ec 08             	sub    esp,0x8
c0026610:	68 91 2c 03 c0       	push   0xc0032c91
c0026615:	50                   	push   eax
c0026616:	e8 87 0c ff ff       	call   c00172a2 <VgaText::puts(char const*)>
c002661b:	83 c4 10             	add    esp,0x10
c002661e:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026623:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026629:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002662d:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0026630:	83 ec 08             	sub    esp,0x8
c0026633:	52                   	push   edx
c0026634:	50                   	push   eax
c0026635:	e8 22 0c ff ff       	call   c001725c <VgaText::putx(unsigned int)>
c002663a:	83 c4 10             	add    esp,0x10
c002663d:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026642:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026648:	83 ec 08             	sub    esp,0x8
c002664b:	68 99 2c 03 c0       	push   0xc0032c99
c0026650:	50                   	push   eax
c0026651:	e8 4c 0c ff ff       	call   c00172a2 <VgaText::puts(char const*)>
c0026656:	83 c4 10             	add    esp,0x10
c0026659:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002665e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026664:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026668:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c002666b:	83 ec 08             	sub    esp,0x8
c002666e:	52                   	push   edx
c002666f:	50                   	push   eax
c0026670:	e8 e7 0b ff ff       	call   c001725c <VgaText::putx(unsigned int)>
c0026675:	83 c4 10             	add    esp,0x10
c0026678:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002667d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026683:	83 ec 08             	sub    esp,0x8
c0026686:	68 a1 2c 03 c0       	push   0xc0032ca1
c002668b:	50                   	push   eax
c002668c:	e8 11 0c ff ff       	call   c00172a2 <VgaText::puts(char const*)>
c0026691:	83 c4 10             	add    esp,0x10
c0026694:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026699:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002669f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00266a3:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00266a6:	83 ec 08             	sub    esp,0x8
c00266a9:	52                   	push   edx
c00266aa:	50                   	push   eax
c00266ab:	e8 ac 0b ff ff       	call   c001725c <VgaText::putx(unsigned int)>
c00266b0:	83 c4 10             	add    esp,0x10
c00266b3:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00266b8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00266be:	83 ec 08             	sub    esp,0x8
c00266c1:	68 a9 2c 03 c0       	push   0xc0032ca9
c00266c6:	50                   	push   eax
c00266c7:	e8 d6 0b ff ff       	call   c00172a2 <VgaText::puts(char const*)>
c00266cc:	83 c4 10             	add    esp,0x10
c00266cf:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00266d4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00266da:	83 ec 08             	sub    esp,0x8
c00266dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00266e1:	50                   	push   eax
c00266e2:	e8 75 0b ff ff       	call   c001725c <VgaText::putx(unsigned int)>
c00266e7:	83 c4 10             	add    esp,0x10
c00266ea:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00266ef:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00266f5:	83 ec 08             	sub    esp,0x8
c00266f8:	68 b2 2c 03 c0       	push   0xc0032cb2
c00266fd:	50                   	push   eax
c00266fe:	e8 9f 0b ff ff       	call   c00172a2 <VgaText::puts(char const*)>
c0026703:	83 c4 10             	add    esp,0x10
c0026706:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002670b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026711:	83 ec 08             	sub    esp,0x8
c0026714:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026718:	50                   	push   eax
c0026719:	e8 3e 0b ff ff       	call   c001725c <VgaText::putx(unsigned int)>
c002671e:	83 c4 10             	add    esp,0x10
c0026721:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026726:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002672c:	83 ec 08             	sub    esp,0x8
c002672f:	68 ba 2c 03 c0       	push   0xc0032cba
c0026734:	50                   	push   eax
c0026735:	e8 68 0b ff ff       	call   c00172a2 <VgaText::puts(char const*)>
c002673a:	83 c4 10             	add    esp,0x10
c002673d:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026742:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026748:	83 ec 08             	sub    esp,0x8
c002674b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002674f:	50                   	push   eax
c0026750:	e8 07 0b ff ff       	call   c001725c <VgaText::putx(unsigned int)>
c0026755:	83 c4 10             	add    esp,0x10
c0026758:	fa                   	cli    
c0026759:	f4                   	hlt    
c002675a:	eb fe                	jmp    c002675a <displayDebugInfo(regs*)+0x383>

c002675c <HalSystemIdle()>:
c002675c:	56                   	push   esi
c002675d:	53                   	push   ebx
c002675e:	83 ec 14             	sub    esp,0x14
c0026761:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026766:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002676c:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0026772:	83 e0 04             	and    eax,0x4
c0026775:	0f b6 c0             	movzx  eax,al
c0026778:	85 c0                	test   eax,eax
c002677a:	0f 95 c0             	setne  al
c002677d:	0f b6 c0             	movzx  eax,al
c0026780:	85 c0                	test   eax,eax
c0026782:	74 4c                	je     c00267d0 <HalSystemIdle()+0x74>
c0026784:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026789:	83 ec 08             	sub    esp,0x8
c002678c:	68 e1 00 00 00       	push   0xe1
c0026791:	50                   	push   eax
c0026792:	e8 25 f1 fe ff       	call   c00158bc <Computer::rdmsr(unsigned int)>
c0026797:	83 c4 10             	add    esp,0x10
c002679a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002679e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00267a2:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00267a7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00267ab:	83 e2 02             	and    edx,0x2
c00267ae:	89 d3                	mov    ebx,edx
c00267b0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00267b4:	83 e2 00             	and    edx,0x0
c00267b7:	89 d6                	mov    esi,edx
c00267b9:	56                   	push   esi
c00267ba:	53                   	push   ebx
c00267bb:	68 e1 00 00 00       	push   0xe1
c00267c0:	50                   	push   eax
c00267c1:	e8 22 f1 fe ff       	call   c00158e8 <Computer::wrmsr(unsigned int, unsigned long long)>
c00267c6:	83 c4 10             	add    esp,0x10
c00267c9:	e8 c6 99 fd ff       	call   c0000194 <doTPAUSE>
c00267ce:	eb 01                	jmp    c00267d1 <HalSystemIdle()+0x75>
c00267d0:	f4                   	hlt    
c00267d1:	90                   	nop
c00267d2:	83 c4 14             	add    esp,0x14
c00267d5:	5b                   	pop    ebx
c00267d6:	5e                   	pop    esi
c00267d7:	c3                   	ret    

c00267d8 <displayProgramFault(char const*)>:
c00267d8:	83 ec 0c             	sub    esp,0xc
c00267db:	83 ec 0c             	sub    esp,0xc
c00267de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00267e2:	e8 5a 29 ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c00267e7:	83 c4 10             	add    esp,0x10
c00267ea:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00267ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00267f1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00267f4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00267fa:	85 c0                	test   eax,eax
c00267fc:	74 21                	je     c002681f <displayProgramFault(char const*)+0x47>
c00267fe:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0026803:	8b 00                	mov    eax,DWORD PTR [eax]
c0026805:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0026808:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002680e:	6a 04                	push   0x4
c0026810:	6a 0f                	push   0xf
c0026812:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0026816:	50                   	push   eax
c0026817:	e8 f8 0a ff ff       	call   c0017314 <VgaText::puts(char const*, VgaColour, VgaColour)>
c002681c:	83 c4 10             	add    esp,0x10
c002681f:	90                   	nop
c0026820:	83 c4 0c             	add    esp,0xc
c0026823:	c3                   	ret    

c0026824 <gpFault(regs*, void*)>:
c0026824:	83 ec 1c             	sub    esp,0x1c
c0026827:	c7 05 74 02 04 c0 80 5c 02 c0 	mov    DWORD PTR ds:0xc0040274,0xc0025c80
c0026831:	a1 74 02 04 c0       	mov    eax,ds:0xc0040274
c0026836:	85 c0                	test   eax,eax
c0026838:	74 1e                	je     c0026858 <gpFault(regs*, void*)+0x34>
c002683a:	a1 74 02 04 c0       	mov    eax,ds:0xc0040274
c002683f:	83 ec 0c             	sub    esp,0xc
c0026842:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026846:	ff d0                	call   eax
c0026848:	83 c4 10             	add    esp,0x10
c002684b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002684f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0026854:	85 c0                	test   eax,eax
c0026856:	75 2e                	jne    c0026886 <gpFault(regs*, void*)+0x62>
c0026858:	83 ec 0c             	sub    esp,0xc
c002685b:	68 c2 2c 03 c0       	push   0xc0032cc2
c0026860:	e8 73 ff ff ff       	call   c00267d8 <displayProgramFault(char const*)>
c0026865:	83 c4 10             	add    esp,0x10
c0026868:	83 ec 0c             	sub    esp,0xc
c002686b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002686f:	e8 63 fb ff ff       	call   c00263d7 <displayDebugInfo(regs*)>
c0026874:	83 c4 10             	add    esp,0x10
c0026877:	83 ec 0c             	sub    esp,0xc
c002687a:	6a 00                	push   0x0
c002687c:	e8 a3 ed ff ff       	call   c0025624 <Thr::terminateFromIRQ(int)>
c0026881:	83 c4 10             	add    esp,0x10
c0026884:	eb 01                	jmp    c0026887 <gpFault(regs*, void*)+0x63>
c0026886:	90                   	nop
c0026887:	83 c4 1c             	add    esp,0x1c
c002688a:	c3                   	ret    

c002688b <pgFault(regs*, void*)>:
c002688b:	83 ec 1c             	sub    esp,0x1c
c002688e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026892:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0026895:	0f 20 d0             	mov    eax,cr2
c0026898:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002689c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00268a0:	83 ec 04             	sub    esp,0x4
c00268a3:	52                   	push   edx
c00268a4:	50                   	push   eax
c00268a5:	68 a0 2d 03 c0       	push   0xc0032da0
c00268aa:	e8 92 28 ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c00268af:	83 c4 10             	add    esp,0x10
c00268b2:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00268b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00268b9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00268bc:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00268c2:	0f 20 d2             	mov    edx,cr2
c00268c5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00268c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00268cd:	83 ec 08             	sub    esp,0x8
c00268d0:	52                   	push   edx
c00268d1:	50                   	push   eax
c00268d2:	e8 b5 22 ff ff       	call   c0018b8c <VAS::tryLoadBackOffDisk(unsigned long)>
c00268d7:	83 c4 10             	add    esp,0x10
c00268da:	0f b6 c0             	movzx  eax,al
c00268dd:	85 c0                	test   eax,eax
c00268df:	75 2e                	jne    c002690f <pgFault(regs*, void*)+0x84>
c00268e1:	83 ec 0c             	sub    esp,0xc
c00268e4:	68 db 2c 03 c0       	push   0xc0032cdb
c00268e9:	e8 ea fe ff ff       	call   c00267d8 <displayProgramFault(char const*)>
c00268ee:	83 c4 10             	add    esp,0x10
c00268f1:	83 ec 0c             	sub    esp,0xc
c00268f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00268f8:	e8 da fa ff ff       	call   c00263d7 <displayDebugInfo(regs*)>
c00268fd:	83 c4 10             	add    esp,0x10
c0026900:	83 ec 0c             	sub    esp,0xc
c0026903:	6a 00                	push   0x0
c0026905:	e8 1a ed ff ff       	call   c0025624 <Thr::terminateFromIRQ(int)>
c002690a:	83 c4 10             	add    esp,0x10
c002690d:	eb 01                	jmp    c0026910 <pgFault(regs*, void*)+0x85>
c002690f:	90                   	nop
c0026910:	83 c4 1c             	add    esp,0x1c
c0026913:	c3                   	ret    

c0026914 <otherISRHandler(regs*, void*)>:
c0026914:	83 ec 0c             	sub    esp,0xc
c0026917:	83 ec 0c             	sub    esp,0xc
c002691a:	68 c8 2d 03 c0       	push   0xc0032dc8
c002691f:	e8 b4 fe ff ff       	call   c00267d8 <displayProgramFault(char const*)>
c0026924:	83 c4 10             	add    esp,0x10
c0026927:	83 ec 0c             	sub    esp,0xc
c002692a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002692e:	e8 a4 fa ff ff       	call   c00263d7 <displayDebugInfo(regs*)>
c0026933:	83 c4 10             	add    esp,0x10
c0026936:	83 ec 0c             	sub    esp,0xc
c0026939:	6a 00                	push   0x0
c002693b:	e8 e4 ec ff ff       	call   c0025624 <Thr::terminateFromIRQ(int)>
c0026940:	83 c4 10             	add    esp,0x10
c0026943:	90                   	nop
c0026944:	83 c4 0c             	add    esp,0xc
c0026947:	c3                   	ret    

c0026948 <opcodeFault(regs*, void*)>:
c0026948:	55                   	push   ebp
c0026949:	89 e5                	mov    ebp,esp
c002694b:	83 ec 08             	sub    esp,0x8
c002694e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026951:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0026954:	83 ec 08             	sub    esp,0x8
c0026957:	50                   	push   eax
c0026958:	68 e6 2c 03 c0       	push   0xc0032ce6
c002695d:	e8 df 27 ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0026962:	83 c4 10             	add    esp,0x10
c0026965:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002696a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026970:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0026976:	0f b6 c0             	movzx  eax,al
c0026979:	85 c0                	test   eax,eax
c002697b:	74 21                	je     c002699e <opcodeFault(regs*, void*)+0x56>
c002697d:	83 ec 0c             	sub    esp,0xc
c0026980:	68 f0 2d 03 c0       	push   0xc0032df0
c0026985:	e8 b7 27 ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c002698a:	83 c4 10             	add    esp,0x10
c002698d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026990:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0026993:	8d 50 19             	lea    edx,[eax+0x19]
c0026996:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026999:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c002699c:	eb 2b                	jmp    c00269c9 <opcodeFault(regs*, void*)+0x81>
c002699e:	83 ec 0c             	sub    esp,0xc
c00269a1:	68 f4 2c 03 c0       	push   0xc0032cf4
c00269a6:	e8 2d fe ff ff       	call   c00267d8 <displayProgramFault(char const*)>
c00269ab:	83 c4 10             	add    esp,0x10
c00269ae:	83 ec 0c             	sub    esp,0xc
c00269b1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00269b4:	e8 1e fa ff ff       	call   c00263d7 <displayDebugInfo(regs*)>
c00269b9:	83 c4 10             	add    esp,0x10
c00269bc:	83 ec 0c             	sub    esp,0xc
c00269bf:	6a 00                	push   0x0
c00269c1:	e8 5e ec ff ff       	call   c0025624 <Thr::terminateFromIRQ(int)>
c00269c6:	83 c4 10             	add    esp,0x10
c00269c9:	c9                   	leave  
c00269ca:	c3                   	ret    

c00269cb <i386SaveCoprocessor(void*)>:
c00269cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00269cf:	83 c0 3f             	add    eax,0x3f
c00269d2:	83 e0 c0             	and    eax,0xffffffc0
c00269d5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00269d9:	ff 25 70 02 04 c0    	jmp    DWORD PTR ds:0xc0040270

c00269df <i386LoadCoprocessor(void*)>:
c00269df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00269e3:	83 c0 3f             	add    eax,0x3f
c00269e6:	83 e0 c0             	and    eax,0xffffffc0
c00269e9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00269ed:	ff 25 6c 02 04 c0    	jmp    DWORD PTR ds:0xc004026c

c00269f3 <x87EmulHandler(regs*, void*)>:
c00269f3:	53                   	push   ebx
c00269f4:	83 ec 08             	sub    esp,0x8
c00269f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00269fc:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0026a00:	74 10                	je     c0026a12 <x87EmulHandler(regs*, void*)+0x1f>
c0026a02:	83 ec 0c             	sub    esp,0xc
c0026a05:	68 01 2d 03 c0       	push   0xc0032d01
c0026a0a:	e8 3c 96 ff ff       	call   c002004b <KePanic(char const*)>
c0026a0f:	83 c4 10             	add    esp,0x10
c0026a12:	0f 20 c0             	mov    eax,cr0
c0026a15:	a8 08                	test   al,0x8
c0026a17:	74 59                	je     c0026a72 <x87EmulHandler(regs*, void*)+0x7f>
c0026a19:	0f 06                	clts   
c0026a1b:	a1 68 02 04 c0       	mov    eax,ds:0xc0040268
c0026a20:	85 c0                	test   eax,eax
c0026a22:	74 0e                	je     c0026a32 <x87EmulHandler(regs*, void*)+0x3f>
c0026a24:	83 ec 0c             	sub    esp,0xc
c0026a27:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0026a2a:	e8 9c ff ff ff       	call   c00269cb <i386SaveCoprocessor(void*)>
c0026a2f:	83 c4 10             	add    esp,0x10
c0026a32:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0026a38:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0026a3c:	75 12                	jne    c0026a50 <x87EmulHandler(regs*, void*)+0x5d>
c0026a3e:	83 ec 0c             	sub    esp,0xc
c0026a41:	68 40 02 00 00       	push   0x240
c0026a46:	e8 67 f8 fe ff       	call   c00162b2 <malloc>
c0026a4b:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0026a4e:	eb 10                	jmp    c0026a60 <x87EmulHandler(regs*, void*)+0x6d>
c0026a50:	83 ec 0c             	sub    esp,0xc
c0026a53:	a1 68 02 04 c0       	mov    eax,ds:0xc0040268
c0026a58:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0026a5b:	e8 7f ff ff ff       	call   c00269df <i386LoadCoprocessor(void*)>
c0026a60:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0026a65:	83 c4 10             	add    esp,0x10
c0026a68:	a3 68 02 04 c0       	mov    ds:0xc0040268,eax
c0026a6d:	83 c4 08             	add    esp,0x8
c0026a70:	5b                   	pop    ebx
c0026a71:	c3                   	ret    
c0026a72:	83 ec 0c             	sub    esp,0xc
c0026a75:	68 15 2d 03 c0       	push   0xc0032d15
c0026a7a:	e8 c2 26 ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0026a7f:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0026a87:	83 c4 18             	add    esp,0x18
c0026a8a:	5b                   	pop    ebx
c0026a8b:	e9 94 eb ff ff       	jmp    c0025624 <Thr::terminateFromIRQ(int)>

c0026a90 <HalInitialiseCoprocessor()>:
c0026a90:	83 ec 10             	sub    esp,0x10
c0026a93:	c7 05 68 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0040268,0x0
c0026a9d:	6a 00                	push   0x0
c0026a9f:	68 f3 69 02 c0       	push   0xc00269f3
c0026aa4:	6a 07                	push   0x7
c0026aa6:	e8 63 4c ff ff       	call   c001b70e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0026aab:	e8 a0 70 00 00       	call   c002db50 <avxDetect>
c0026ab0:	83 c4 10             	add    esp,0x10
c0026ab3:	85 c0                	test   eax,eax
c0026ab5:	74 1c                	je     c0026ad3 <HalInitialiseCoprocessor()+0x43>
c0026ab7:	c7 05 70 02 04 c0 7a db 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc002db7a
c0026ac1:	c7 05 6c 02 04 c0 8b db 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc002db8b
c0026acb:	83 c4 0c             	add    esp,0xc
c0026ace:	e9 c9 70 00 00       	jmp    c002db9c <avxInit>
c0026ad3:	e8 e8 73 00 00       	call   c002dec0 <sseDetect>
c0026ad8:	85 c0                	test   eax,eax
c0026ada:	74 1c                	je     c0026af8 <HalInitialiseCoprocessor()+0x68>
c0026adc:	c7 05 70 02 04 c0 d8 de 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc002ded8
c0026ae6:	c7 05 6c 02 04 c0 e0 de 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc002dee0
c0026af0:	83 c4 0c             	add    esp,0xc
c0026af3:	e9 f0 73 00 00       	jmp    c002dee8 <sseInit>
c0026af8:	e8 09 74 00 00       	call   c002df06 <x87Detect>
c0026afd:	85 c0                	test   eax,eax
c0026aff:	74 1c                	je     c0026b1d <HalInitialiseCoprocessor()+0x8d>
c0026b01:	c7 05 70 02 04 c0 21 df 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc002df21
c0026b0b:	c7 05 6c 02 04 c0 28 df 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc002df28
c0026b15:	83 c4 0c             	add    esp,0xc
c0026b18:	e9 12 74 00 00       	jmp    c002df2f <x87Init>
c0026b1d:	c7 05 70 02 04 c0 a4 63 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc00263a4
c0026b27:	c7 05 6c 02 04 c0 a4 63 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc00263a4
c0026b31:	0f 20 c0             	mov    eax,cr0
c0026b34:	83 c8 04             	or     eax,0x4
c0026b37:	0f 22 c0             	mov    cr0,eax
c0026b3a:	83 c4 0c             	add    esp,0xc
c0026b3d:	c3                   	ret    

c0026b3e <HalPanic(char const*)>:
c0026b3e:	53                   	push   ebx
c0026b3f:	83 ec 10             	sub    esp,0x10
c0026b42:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026b46:	fa                   	cli    
c0026b47:	53                   	push   ebx
c0026b48:	68 2b 2d 03 c0       	push   0xc0032d2b
c0026b4d:	e8 ef 25 ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0026b52:	a1 64 02 04 c0       	mov    eax,ds:0xc0040264
c0026b57:	83 c4 10             	add    esp,0x10
c0026b5a:	85 c0                	test   eax,eax
c0026b5c:	74 09                	je     c0026b67 <HalPanic(char const*)+0x29>
c0026b5e:	83 ec 0c             	sub    esp,0xc
c0026b61:	53                   	push   ebx
c0026b62:	ff d0                	call   eax
c0026b64:	83 c4 10             	add    esp,0x10
c0026b67:	a1 08 aa 03 c0       	mov    eax,ds:0xc003aa08
c0026b6c:	85 c0                	test   eax,eax
c0026b6e:	0f 84 dc 00 00 00    	je     c0026c50 <HalPanic(char const*)+0x112>
c0026b74:	52                   	push   edx
c0026b75:	6a 01                	push   0x1
c0026b77:	6a 0f                	push   0xf
c0026b79:	50                   	push   eax
c0026b7a:	e8 31 02 ff ff       	call   c0016db0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0026b7f:	59                   	pop    ecx
c0026b80:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026b86:	e8 15 04 ff ff       	call   c0016fa0 <VgaText::clearScreen()>
c0026b8b:	58                   	pop    eax
c0026b8c:	5a                   	pop    edx
c0026b8d:	68 14 0e 03 c0       	push   0xc0030e14
c0026b92:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026b98:	e8 4b 02 ff ff       	call   c0016de8 <VgaText::setTitle(char*)>
c0026b9d:	83 c4 0c             	add    esp,0xc
c0026ba0:	6a 01                	push   0x1
c0026ba2:	6a 0f                	push   0xf
c0026ba4:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026baa:	e8 01 02 ff ff       	call   c0016db0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0026baf:	59                   	pop    ecx
c0026bb0:	58                   	pop    eax
c0026bb1:	68 44 2d 03 c0       	push   0xc0032d44
c0026bb6:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026bbc:	e8 e1 06 ff ff       	call   c00172a2 <VgaText::puts(char const*)>
c0026bc1:	83 c4 0c             	add    esp,0xc
c0026bc4:	6a 0f                	push   0xf
c0026bc6:	6a 01                	push   0x1
c0026bc8:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026bce:	e8 dd 01 ff ff       	call   c0016db0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0026bd3:	58                   	pop    eax
c0026bd4:	5a                   	pop    edx
c0026bd5:	68 4d 2d 03 c0       	push   0xc0032d4d
c0026bda:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026be0:	e8 bd 06 ff ff       	call   c00172a2 <VgaText::puts(char const*)>
c0026be5:	83 c4 0c             	add    esp,0xc
c0026be8:	6a 01                	push   0x1
c0026bea:	6a 0f                	push   0xf
c0026bec:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026bf2:	e8 b9 01 ff ff       	call   c0016db0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0026bf7:	59                   	pop    ecx
c0026bf8:	58                   	pop    eax
c0026bf9:	68 91 2d 03 c0       	push   0xc0032d91
c0026bfe:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026c04:	e8 99 06 ff ff       	call   c00172a2 <VgaText::puts(char const*)>
c0026c09:	58                   	pop    eax
c0026c0a:	5a                   	pop    edx
c0026c0b:	68 5a 2d 03 c0       	push   0xc0032d5a
c0026c10:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026c16:	e8 87 06 ff ff       	call   c00172a2 <VgaText::puts(char const*)>
c0026c1b:	59                   	pop    ecx
c0026c1c:	58                   	pop    eax
c0026c1d:	68 94 2d 03 c0       	push   0xc0032d94
c0026c22:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026c28:	e8 75 06 ff ff       	call   c00172a2 <VgaText::puts(char const*)>
c0026c2d:	58                   	pop    eax
c0026c2e:	5a                   	pop    edx
c0026c2f:	53                   	push   ebx
c0026c30:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026c36:	e8 67 06 ff ff       	call   c00172a2 <VgaText::puts(char const*)>
c0026c3b:	59                   	pop    ecx
c0026c3c:	5b                   	pop    ebx
c0026c3d:	68 91 2d 03 c0       	push   0xc0032d91
c0026c42:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026c48:	e8 55 06 ff ff       	call   c00172a2 <VgaText::puts(char const*)>
c0026c4d:	83 c4 10             	add    esp,0x10
c0026c50:	eb fe                	jmp    c0026c50 <HalPanic(char const*)+0x112>

c0026c52 <HalQueryPerformanceCounter()>:
c0026c52:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026c57:	31 d2                	xor    edx,edx
c0026c59:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0026c5f:	31 c0                	xor    eax,eax
c0026c61:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0026c68:	74 02                	je     c0026c6c <HalQueryPerformanceCounter()+0x1a>
c0026c6a:	0f 31                	rdtsc  
c0026c6c:	c3                   	ret    

c0026c6d <HalInitialise()>:
c0026c6d:	53                   	push   ebx
c0026c6e:	83 ec 08             	sub    esp,0x8
c0026c71:	e8 c8 4c ff ff       	call   c001b93e <setupINTS()>
c0026c76:	80 3d e0 f6 03 c0 00 	cmp    BYTE PTR ds:0xc003f6e0,0x0
c0026c7d:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026c82:	75 0f                	jne    c0026c93 <HalInitialise()+0x26>
c0026c84:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0026c8a:	83 e2 fe             	and    edx,0xfffffffe
c0026c8d:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0026c93:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0026c99:	c6 05 60 02 04 c0 00 	mov    BYTE PTR ds:0xc0040260,0x0
c0026ca0:	83 e2 fe             	and    edx,0xfffffffe
c0026ca3:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0026ca9:	e8 9e 02 00 00       	call   c0026f4c <picOpen()>
c0026cae:	80 3d 60 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040260,0x0
c0026cb5:	74 0a                	je     c0026cc1 <HalInitialise()+0x54>
c0026cb7:	e8 e0 01 00 00       	call   c0026e9c <picDisable()>
c0026cbc:	e8 03 68 00 00       	call   c002d4c4 <apicOpen()>
c0026cc1:	bb 0f 00 00 00       	mov    ebx,0xf
c0026cc6:	50                   	push   eax
c0026cc7:	6a 00                	push   0x0
c0026cc9:	68 14 69 02 c0       	push   0xc0026914
c0026cce:	6a 00                	push   0x0
c0026cd0:	e8 39 4a ff ff       	call   c001b70e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0026cd5:	83 c4 0c             	add    esp,0xc
c0026cd8:	6a 00                	push   0x0
c0026cda:	68 14 69 02 c0       	push   0xc0026914
c0026cdf:	6a 01                	push   0x1
c0026ce1:	e8 28 4a ff ff       	call   c001b70e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0026ce6:	83 c4 0c             	add    esp,0xc
c0026ce9:	6a 00                	push   0x0
c0026ceb:	68 a5 63 02 c0       	push   0xc00263a5
c0026cf0:	6a 02                	push   0x2
c0026cf2:	e8 17 4a ff ff       	call   c001b70e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0026cf7:	83 c4 0c             	add    esp,0xc
c0026cfa:	6a 00                	push   0x0
c0026cfc:	68 14 69 02 c0       	push   0xc0026914
c0026d01:	6a 03                	push   0x3
c0026d03:	e8 06 4a ff ff       	call   c001b70e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0026d08:	83 c4 0c             	add    esp,0xc
c0026d0b:	6a 00                	push   0x0
c0026d0d:	68 14 69 02 c0       	push   0xc0026914
c0026d12:	6a 04                	push   0x4
c0026d14:	e8 f5 49 ff ff       	call   c001b70e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0026d19:	83 c4 0c             	add    esp,0xc
c0026d1c:	6a 00                	push   0x0
c0026d1e:	68 14 69 02 c0       	push   0xc0026914
c0026d23:	6a 05                	push   0x5
c0026d25:	e8 e4 49 ff ff       	call   c001b70e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0026d2a:	83 c4 0c             	add    esp,0xc
c0026d2d:	6a 00                	push   0x0
c0026d2f:	68 48 69 02 c0       	push   0xc0026948
c0026d34:	6a 06                	push   0x6
c0026d36:	e8 d3 49 ff ff       	call   c001b70e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0026d3b:	83 c4 0c             	add    esp,0xc
c0026d3e:	6a 00                	push   0x0
c0026d40:	68 be 63 02 c0       	push   0xc00263be
c0026d45:	6a 08                	push   0x8
c0026d47:	e8 c2 49 ff ff       	call   c001b70e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0026d4c:	83 c4 0c             	add    esp,0xc
c0026d4f:	6a 00                	push   0x0
c0026d51:	68 14 69 02 c0       	push   0xc0026914
c0026d56:	6a 09                	push   0x9
c0026d58:	e8 b1 49 ff ff       	call   c001b70e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0026d5d:	83 c4 0c             	add    esp,0xc
c0026d60:	6a 00                	push   0x0
c0026d62:	68 14 69 02 c0       	push   0xc0026914
c0026d67:	6a 0a                	push   0xa
c0026d69:	e8 a0 49 ff ff       	call   c001b70e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0026d6e:	83 c4 0c             	add    esp,0xc
c0026d71:	6a 00                	push   0x0
c0026d73:	68 14 69 02 c0       	push   0xc0026914
c0026d78:	6a 0b                	push   0xb
c0026d7a:	e8 8f 49 ff ff       	call   c001b70e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0026d7f:	83 c4 0c             	add    esp,0xc
c0026d82:	6a 00                	push   0x0
c0026d84:	68 24 68 02 c0       	push   0xc0026824
c0026d89:	6a 0d                	push   0xd
c0026d8b:	e8 7e 49 ff ff       	call   c001b70e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0026d90:	83 c4 0c             	add    esp,0xc
c0026d93:	6a 00                	push   0x0
c0026d95:	68 8b 68 02 c0       	push   0xc002688b
c0026d9a:	6a 0e                	push   0xe
c0026d9c:	e8 6d 49 ff ff       	call   c001b70e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0026da1:	83 c4 10             	add    esp,0x10
c0026da4:	50                   	push   eax
c0026da5:	6a 00                	push   0x0
c0026da7:	68 14 69 02 c0       	push   0xc0026914
c0026dac:	53                   	push   ebx
c0026dad:	43                   	inc    ebx
c0026dae:	e8 5b 49 ff ff       	call   c001b70e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0026db3:	83 c4 10             	add    esp,0x10
c0026db6:	83 fb 1e             	cmp    ebx,0x1e
c0026db9:	75 e9                	jne    c0026da4 <HalInitialise()+0x137>
c0026dbb:	50                   	push   eax
c0026dbc:	6a 00                	push   0x0
c0026dbe:	68 e4 14 02 c0       	push   0xc00214e4
c0026dc3:	6a 60                	push   0x60
c0026dc5:	e8 44 49 ff ff       	call   c001b70e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0026dca:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026dcf:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0026dd9:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0026de0:	e8 cd f4 fe ff       	call   c00162b2 <malloc>
c0026de5:	89 04 24             	mov    DWORD PTR [esp],eax
c0026de8:	89 c3                	mov    ebx,eax
c0026dea:	e8 3b 09 00 00       	call   c002772a <RTC::RTC()>
c0026def:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0026df9:	5a                   	pop    edx
c0026dfa:	59                   	pop    ecx
c0026dfb:	53                   	push   ebx
c0026dfc:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0026e02:	e8 bb 43 ff ff       	call   c001b1c2 <Device::addChild(Device*)>
c0026e07:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026e09:	6a 00                	push   0x0
c0026e0b:	6a 00                	push   0x0
c0026e0d:	6a 00                	push   0x0
c0026e0f:	53                   	push   ebx
c0026e10:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0026e13:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026e18:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0026e1e:	83 c4 28             	add    esp,0x28
c0026e21:	5b                   	pop    ebx
c0026e22:	c3                   	ret    

c0026e23 <HalMakeBeep(int)>:
c0026e23:	53                   	push   ebx
c0026e24:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0026e28:	85 db                	test   ebx,ebx
c0026e2a:	75 07                	jne    c0026e33 <HalMakeBeep(int)+0x10>
c0026e2c:	e4 61                	in     al,0x61
c0026e2e:	83 e0 fc             	and    eax,0xfffffffc
c0026e31:	eb 26                	jmp    c0026e59 <HalMakeBeep(int)+0x36>
c0026e33:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026e38:	99                   	cdq    
c0026e39:	f7 fb                	idiv   ebx
c0026e3b:	89 c1                	mov    ecx,eax
c0026e3d:	b0 b6                	mov    al,0xb6
c0026e3f:	e6 43                	out    0x43,al
c0026e41:	88 c8                	mov    al,cl
c0026e43:	e6 42                	out    0x42,al
c0026e45:	89 c8                	mov    eax,ecx
c0026e47:	c1 e8 08             	shr    eax,0x8
c0026e4a:	e6 42                	out    0x42,al
c0026e4c:	e4 61                	in     al,0x61
c0026e4e:	89 c2                	mov    edx,eax
c0026e50:	83 ca 03             	or     edx,0x3
c0026e53:	38 d0                	cmp    al,dl
c0026e55:	74 04                	je     c0026e5b <HalMakeBeep(int)+0x38>
c0026e57:	88 d0                	mov    al,dl
c0026e59:	e6 61                	out    0x61,al
c0026e5b:	5b                   	pop    ebx
c0026e5c:	c3                   	ret    

c0026e5d <HalGetRand()>:
c0026e5d:	31 c0                	xor    eax,eax
c0026e5f:	c3                   	ret    

c0026e60 <HalEndOfInterrupt(int)>:
c0026e60:	80 3d 60 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040260,0x0
c0026e67:	74 23                	je     c0026e8c <HalEndOfInterrupt(int)+0x2c>
c0026e69:	83 ec 14             	sub    esp,0x14
c0026e6c:	6a 1b                	push   0x1b
c0026e6e:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0026e74:	e8 43 ea fe ff       	call   c00158bc <Computer::rdmsr(unsigned int)>
c0026e79:	25 00 f0 ff ff       	and    eax,0xfffff000
c0026e7e:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0026e88:	83 c4 1c             	add    esp,0x1c
c0026e8b:	c3                   	ret    
c0026e8c:	e9 3f 02 00 00       	jmp    c00270d0 <picEOI(int)>

c0026e91 <HalRestart()>:
c0026e91:	c3                   	ret    

c0026e92 <HalShutdown()>:
c0026e92:	c3                   	ret    

c0026e93 <HalSleep()>:
c0026e93:	c3                   	ret    

c0026e94 <picIoWait()>:
c0026e94:	eb 00                	jmp    c0026e96 <picIoWait()+0x2>
c0026e96:	eb 00                	jmp    c0026e98 <picIoWait()+0x4>
c0026e98:	90                   	nop
c0026e99:	c3                   	ret    
c0026e9a:	66 90                	xchg   ax,ax

c0026e9c <picDisable()>:
c0026e9c:	83 ec 10             	sub    esp,0x10
c0026e9f:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0026ea6:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0026eab:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026eaf:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026eb4:	ee                   	out    dx,al
c0026eb5:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0026ebc:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0026ec1:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0026ec5:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0026eca:	ee                   	out    dx,al
c0026ecb:	90                   	nop
c0026ecc:	83 c4 10             	add    esp,0x10
c0026ecf:	c3                   	ret    

c0026ed0 <picGetIRQReg(int)>:
c0026ed0:	83 ec 10             	sub    esp,0x10
c0026ed3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026ed7:	0f b6 c0             	movzx  eax,al
c0026eda:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0026ee1:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0026ee5:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026ee9:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026eee:	ee                   	out    dx,al
c0026eef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026ef3:	0f b6 c0             	movzx  eax,al
c0026ef6:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0026efd:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026f01:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026f05:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026f0a:	ee                   	out    dx,al
c0026f0b:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0026f12:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0026f17:	89 c2                	mov    edx,eax
c0026f19:	ec                   	in     al,dx
c0026f1a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026f1e:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026f22:	0f b6 c0             	movzx  eax,al
c0026f25:	c1 e0 08             	shl    eax,0x8
c0026f28:	89 c1                	mov    ecx,eax
c0026f2a:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0026f31:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0026f36:	89 c2                	mov    edx,eax
c0026f38:	ec                   	in     al,dx
c0026f39:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0026f3d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0026f41:	0f b6 c0             	movzx  eax,al
c0026f44:	09 c8                	or     eax,ecx
c0026f46:	83 c4 10             	add    esp,0x10
c0026f49:	c3                   	ret    
c0026f4a:	66 90                	xchg   ax,ax

c0026f4c <picOpen()>:
c0026f4c:	83 ec 50             	sub    esp,0x50
c0026f4f:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0026f56:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0026f5b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0026f5f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026f63:	ee                   	out    dx,al
c0026f64:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0026f6b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0026f70:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0026f74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026f78:	ee                   	out    dx,al
c0026f79:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0026f81:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0026f89:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0026f90:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026f94:	89 c2                	mov    edx,eax
c0026f96:	ec                   	in     al,dx
c0026f97:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0026f9b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0026f9f:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0026fa3:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0026faa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026fae:	89 c2                	mov    edx,eax
c0026fb0:	ec                   	in     al,dx
c0026fb1:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0026fb5:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0026fb9:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0026fbd:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0026fc4:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0026fc9:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0026fcd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026fd1:	ee                   	out    dx,al
c0026fd2:	e8 bd fe ff ff       	call   c0026e94 <picIoWait()>
c0026fd7:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0026fde:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0026fe3:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0026fe7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0026feb:	ee                   	out    dx,al
c0026fec:	e8 a3 fe ff ff       	call   c0026e94 <picIoWait()>
c0026ff1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0026ff5:	0f b6 c0             	movzx  eax,al
c0026ff8:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0026fff:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0027003:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0027007:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002700b:	ee                   	out    dx,al
c002700c:	e8 83 fe ff ff       	call   c0026e94 <picIoWait()>
c0027011:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0027015:	0f b6 c0             	movzx  eax,al
c0027018:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c002701f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0027023:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0027027:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002702b:	ee                   	out    dx,al
c002702c:	e8 63 fe ff ff       	call   c0026e94 <picIoWait()>
c0027031:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0027038:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c002703d:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0027041:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0027045:	ee                   	out    dx,al
c0027046:	e8 49 fe ff ff       	call   c0026e94 <picIoWait()>
c002704b:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0027052:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0027057:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c002705b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002705f:	ee                   	out    dx,al
c0027060:	e8 2f fe ff ff       	call   c0026e94 <picIoWait()>
c0027065:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c002706c:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0027071:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0027075:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0027079:	ee                   	out    dx,al
c002707a:	e8 15 fe ff ff       	call   c0026e94 <picIoWait()>
c002707f:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0027086:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c002708b:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c002708f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0027093:	ee                   	out    dx,al
c0027094:	e8 fb fd ff ff       	call   c0026e94 <picIoWait()>
c0027099:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c002709e:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c00270a5:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c00270a9:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00270ad:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00270b1:	ee                   	out    dx,al
c00270b2:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c00270b7:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00270be:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00270c2:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c00270c6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00270ca:	ee                   	out    dx,al
c00270cb:	90                   	nop
c00270cc:	83 c4 50             	add    esp,0x50
c00270cf:	c3                   	ret    

c00270d0 <picEOI(int)>:
c00270d0:	83 ec 10             	sub    esp,0x10
c00270d3:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00270d8:	75 1e                	jne    c00270f8 <picEOI(int)+0x28>
c00270da:	6a 0b                	push   0xb
c00270dc:	e8 ef fd ff ff       	call   c0026ed0 <picGetIRQReg(int)>
c00270e1:	83 c4 04             	add    esp,0x4
c00270e4:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00270e9:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c00270ee:	25 80 00 00 00       	and    eax,0x80
c00270f3:	74 73                	je     c0027168 <picEOI(int)+0x98>
c00270f5:	8d 76 00             	lea    esi,[esi+0x0]
c00270f8:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00270fd:	75 31                	jne    c0027130 <picEOI(int)+0x60>
c00270ff:	6a 0b                	push   0xb
c0027101:	e8 ca fd ff ff       	call   c0026ed0 <picGetIRQReg(int)>
c0027106:	83 c4 04             	add    esp,0x4
c0027109:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c002710e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0027112:	98                   	cwde   
c0027113:	85 c0                	test   eax,eax
c0027115:	78 19                	js     c0027130 <picEOI(int)+0x60>
c0027117:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c002711e:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0027123:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0027127:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002712c:	ee                   	out    dx,al
c002712d:	eb 3d                	jmp    c002716c <picEOI(int)+0x9c>
c002712f:	90                   	nop
c0027130:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0027135:	7e 19                	jle    c0027150 <picEOI(int)+0x80>
c0027137:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c002713e:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0027143:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0027147:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002714c:	ee                   	out    dx,al
c002714d:	8d 76 00             	lea    esi,[esi+0x0]
c0027150:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0027157:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c002715c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0027160:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0027165:	ee                   	out    dx,al
c0027166:	eb 04                	jmp    c002716c <picEOI(int)+0x9c>
c0027168:	90                   	nop
c0027169:	8d 76 00             	lea    esi,[esi+0x0]
c002716c:	83 c4 10             	add    esp,0x10
c002716f:	c3                   	ret    

c0027170 <RTC::open(int, int, void*)>:
c0027170:	31 c0                	xor    eax,eax
c0027172:	c3                   	ret    
c0027173:	90                   	nop

c0027174 <RTC::close(int, int, void*)>:
c0027174:	31 c0                	xor    eax,eax
c0027176:	c3                   	ret    
c0027177:	90                   	nop

c0027178 <RTC::timeInSecondsUTC()>:
c0027178:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002717c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0027182:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0027188:	c3                   	ret    
c0027189:	90                   	nop

c002718a <RTC::timeInDatetimeUTC()>:
c002718a:	53                   	push   ebx
c002718b:	83 ec 14             	sub    esp,0x14
c002718e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0027192:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027196:	8b 10                	mov    edx,DWORD PTR [eax]
c0027198:	50                   	push   eax
c0027199:	ff 52 24             	call   DWORD PTR [edx+0x24]
c002719c:	83 c4 0c             	add    esp,0xc
c002719f:	52                   	push   edx
c00271a0:	50                   	push   eax
c00271a1:	53                   	push   ebx
c00271a2:	e8 8f 3d ff ff       	call   c001af36 <secondsToDatetime(unsigned long long)>
c00271a7:	89 d8                	mov    eax,ebx
c00271a9:	83 c4 14             	add    esp,0x14
c00271ac:	5b                   	pop    ebx
c00271ad:	c2 04 00             	ret    0x4

c00271b0 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00271b0:	56                   	push   esi
c00271b1:	53                   	push   ebx
c00271b2:	83 ec 14             	sub    esp,0x14
c00271b5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00271b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00271bb:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00271be:	8d 44 24 08          	lea    eax,[esp+0x8]
c00271c2:	52                   	push   edx
c00271c3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00271c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00271cb:	50                   	push   eax
c00271cc:	e8 65 3d ff ff       	call   c001af36 <secondsToDatetime(unsigned long long)>
c00271d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00271d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00271d9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00271dd:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00271e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00271e5:	89 f0                	mov    eax,esi
c00271e7:	83 c4 20             	add    esp,0x20
c00271ea:	5b                   	pop    ebx
c00271eb:	5e                   	pop    esi
c00271ec:	ff e0                	jmp    eax

c00271ee <RTC::~RTC()>:
c00271ee:	83 ec 0c             	sub    esp,0xc
c00271f1:	ba 30 2e 03 c0       	mov    edx,0xc0032e30
c00271f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271fa:	89 10                	mov    DWORD PTR [eax],edx
c00271fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027200:	83 ec 0c             	sub    esp,0xc
c0027203:	50                   	push   eax
c0027204:	e8 bf 3a ff ff       	call   c001acc8 <Clock::~Clock()>
c0027209:	83 c4 10             	add    esp,0x10
c002720c:	90                   	nop
c002720d:	83 c4 0c             	add    esp,0xc
c0027210:	c3                   	ret    
c0027211:	90                   	nop

c0027212 <RTC::~RTC()>:
c0027212:	83 ec 0c             	sub    esp,0xc
c0027215:	83 ec 0c             	sub    esp,0xc
c0027218:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002721c:	e8 cd ff ff ff       	call   c00271ee <RTC::~RTC()>
c0027221:	83 c4 10             	add    esp,0x10
c0027224:	83 ec 08             	sub    esp,0x8
c0027227:	68 60 01 00 00       	push   0x160
c002722c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027230:	e8 df 1d ff ff       	call   c0019014 <operator delete(void*, unsigned long)>
c0027235:	83 c4 10             	add    esp,0x10
c0027238:	83 c4 0c             	add    esp,0xc
c002723b:	c3                   	ret    

c002723c <RTC::get_update_in_progress_flag()>:
c002723c:	83 ec 14             	sub    esp,0x14
c002723f:	6a 0a                	push   0xa
c0027241:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027247:	e8 28 e7 fe ff       	call   c0015974 <Computer::readCMOS(unsigned char)>
c002724c:	83 c4 1c             	add    esp,0x1c
c002724f:	0f b6 c0             	movzx  eax,al
c0027252:	c1 e8 07             	shr    eax,0x7
c0027255:	c3                   	ret    

c0027256 <RTC::completeRTCRefresh()>:
c0027256:	55                   	push   ebp
c0027257:	57                   	push   edi
c0027258:	56                   	push   esi
c0027259:	53                   	push   ebx
c002725a:	83 ec 3c             	sub    esp,0x3c
c002725d:	8b 1d ec f3 03 c0    	mov    ebx,DWORD PTR ds:0xc003f3ec
c0027263:	83 ec 0c             	sub    esp,0xc
c0027266:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c002726a:	e8 cd ff ff ff       	call   c002723c <RTC::get_update_in_progress_flag()>
c002726f:	83 c4 10             	add    esp,0x10
c0027272:	84 c0                	test   al,al
c0027274:	74 0e                	je     c0027284 <RTC::completeRTCRefresh()+0x2e>
c0027276:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c002727c:	3b 05 ec f3 03 c0    	cmp    eax,DWORD PTR ds:0xc003f3ec
c0027282:	73 df                	jae    c0027263 <RTC::completeRTCRefresh()+0xd>
c0027284:	51                   	push   ecx
c0027285:	51                   	push   ecx
c0027286:	6a 00                	push   0x0
c0027288:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002728e:	e8 e1 e6 fe ff       	call   c0015974 <Computer::readCMOS(unsigned char)>
c0027293:	5b                   	pop    ebx
c0027294:	89 c7                	mov    edi,eax
c0027296:	5e                   	pop    esi
c0027297:	6a 02                	push   0x2
c0027299:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002729f:	e8 d0 e6 fe ff       	call   c0015974 <Computer::readCMOS(unsigned char)>
c00272a4:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00272a8:	5d                   	pop    ebp
c00272a9:	58                   	pop    eax
c00272aa:	6a 04                	push   0x4
c00272ac:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00272b2:	e8 bd e6 fe ff       	call   c0015974 <Computer::readCMOS(unsigned char)>
c00272b7:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00272bb:	58                   	pop    eax
c00272bc:	5a                   	pop    edx
c00272bd:	6a 07                	push   0x7
c00272bf:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00272c5:	e8 aa e6 fe ff       	call   c0015974 <Computer::readCMOS(unsigned char)>
c00272ca:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c00272ce:	59                   	pop    ecx
c00272cf:	5b                   	pop    ebx
c00272d0:	6a 08                	push   0x8
c00272d2:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00272d8:	e8 97 e6 fe ff       	call   c0015974 <Computer::readCMOS(unsigned char)>
c00272dd:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c00272e1:	5e                   	pop    esi
c00272e2:	5d                   	pop    ebp
c00272e3:	6a 09                	push   0x9
c00272e5:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00272eb:	e8 84 e6 fe ff       	call   c0015974 <Computer::readCMOS(unsigned char)>
c00272f0:	0f b6 c0             	movzx  eax,al
c00272f3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00272f7:	83 c4 10             	add    esp,0x10
c00272fa:	8b 1d ec f3 03 c0    	mov    ebx,DWORD PTR ds:0xc003f3ec
c0027300:	83 ec 0c             	sub    esp,0xc
c0027303:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0027307:	e8 30 ff ff ff       	call   c002723c <RTC::get_update_in_progress_flag()>
c002730c:	83 c4 10             	add    esp,0x10
c002730f:	84 c0                	test   al,al
c0027311:	74 0e                	je     c0027321 <RTC::completeRTCRefresh()+0xcb>
c0027313:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0027319:	3b 05 ec f3 03 c0    	cmp    eax,DWORD PTR ds:0xc003f3ec
c002731f:	73 df                	jae    c0027300 <RTC::completeRTCRefresh()+0xaa>
c0027321:	51                   	push   ecx
c0027322:	51                   	push   ecx
c0027323:	6a 00                	push   0x0
c0027325:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002732b:	e8 44 e6 fe ff       	call   c0015974 <Computer::readCMOS(unsigned char)>
c0027330:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0027334:	5b                   	pop    ebx
c0027335:	5e                   	pop    esi
c0027336:	6a 02                	push   0x2
c0027338:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002733e:	e8 31 e6 fe ff       	call   c0015974 <Computer::readCMOS(unsigned char)>
c0027343:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0027347:	5d                   	pop    ebp
c0027348:	58                   	pop    eax
c0027349:	6a 04                	push   0x4
c002734b:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027351:	e8 1e e6 fe ff       	call   c0015974 <Computer::readCMOS(unsigned char)>
c0027356:	88 c3                	mov    bl,al
c0027358:	58                   	pop    eax
c0027359:	5a                   	pop    edx
c002735a:	6a 07                	push   0x7
c002735c:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027362:	e8 0d e6 fe ff       	call   c0015974 <Computer::readCMOS(unsigned char)>
c0027367:	59                   	pop    ecx
c0027368:	89 c6                	mov    esi,eax
c002736a:	5d                   	pop    ebp
c002736b:	6a 08                	push   0x8
c002736d:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027373:	e8 fc e5 fe ff       	call   c0015974 <Computer::readCMOS(unsigned char)>
c0027378:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c002737c:	58                   	pop    eax
c002737d:	5a                   	pop    edx
c002737e:	6a 09                	push   0x9
c0027380:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027386:	e8 e9 e5 fe ff       	call   c0015974 <Computer::readCMOS(unsigned char)>
c002738b:	89 f9                	mov    ecx,edi
c002738d:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0027391:	0f b6 e8             	movzx  ebp,al
c0027394:	83 c4 10             	add    esp,0x10
c0027397:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c002739b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00273a0:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c00273a5:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00273a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00273ad:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00273b1:	0f 94 c0             	sete   al
c00273b4:	0f b6 fb             	movzx  edi,bl
c00273b7:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c00273bb:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c00273c0:	0f 94 c2             	sete   dl
c00273c3:	21 d0                	and    eax,edx
c00273c5:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c00273c9:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00273cd:	0f 94 c2             	sete   dl
c00273d0:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00273d4:	21 c2                	and    edx,eax
c00273d6:	89 f0                	mov    eax,esi
c00273d8:	0f b6 c0             	movzx  eax,al
c00273db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00273df:	89 f0                	mov    eax,esi
c00273e1:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c00273e5:	0f 94 c0             	sete   al
c00273e8:	21 d0                	and    eax,edx
c00273ea:	31 d2                	xor    edx,edx
c00273ec:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c00273f0:	0f 94 c2             	sete   dl
c00273f3:	85 c2                	test   edx,eax
c00273f5:	75 27                	jne    c002741e <RTC::completeRTCRefresh()+0x1c8>
c00273f7:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00273fb:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c00273ff:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0027403:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0027407:	89 f0                	mov    eax,esi
c0027409:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c002740d:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0027411:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0027415:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0027419:	e9 dc fe ff ff       	jmp    c00272fa <RTC::completeRTCRefresh()+0xa4>
c002741e:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0027422:	75 d3                	jne    c00273f7 <RTC::completeRTCRefresh()+0x1a1>
c0027424:	52                   	push   edx
c0027425:	52                   	push   edx
c0027426:	6a 0b                	push   0xb
c0027428:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002742e:	e8 41 e5 fe ff       	call   c0015974 <Computer::readCMOS(unsigned char)>
c0027433:	83 c4 10             	add    esp,0x10
c0027436:	a8 04                	test   al,0x4
c0027438:	75 7a                	jne    c00274b4 <RTC::completeRTCRefresh()+0x25e>
c002743a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002743e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0027442:	83 e1 0f             	and    ecx,0xf
c0027445:	c1 ea 04             	shr    edx,0x4
c0027448:	c1 ef 04             	shr    edi,0x4
c002744b:	6b d2 0a             	imul   edx,edx,0xa
c002744e:	83 e6 0f             	and    esi,0xf
c0027451:	01 d1                	add    ecx,edx
c0027453:	c1 ed 04             	shr    ebp,0x4
c0027456:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c002745a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002745e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0027462:	c1 ea 04             	shr    edx,0x4
c0027465:	83 e1 0f             	and    ecx,0xf
c0027468:	6b d2 0a             	imul   edx,edx,0xa
c002746b:	6b ed 0a             	imul   ebp,ebp,0xa
c002746e:	01 d1                	add    ecx,edx
c0027470:	89 fa                	mov    edx,edi
c0027472:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0027476:	83 e2 07             	and    edx,0x7
c0027479:	89 d9                	mov    ecx,ebx
c002747b:	6b d2 0a             	imul   edx,edx,0xa
c002747e:	83 e1 0f             	and    ecx,0xf
c0027481:	83 e3 80             	and    ebx,0xffffff80
c0027484:	01 d1                	add    ecx,edx
c0027486:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002748a:	09 cb                	or     ebx,ecx
c002748c:	c1 ea 04             	shr    edx,0x4
c002748f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0027493:	6b d2 0a             	imul   edx,edx,0xa
c0027496:	83 e1 0f             	and    ecx,0xf
c0027499:	01 d6                	add    esi,edx
c002749b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002749f:	c1 ea 04             	shr    edx,0x4
c00274a2:	6b d2 0a             	imul   edx,edx,0xa
c00274a5:	01 d1                	add    ecx,edx
c00274a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00274ab:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00274af:	83 e2 0f             	and    edx,0xf
c00274b2:	01 d5                	add    ebp,edx
c00274b4:	a8 02                	test   al,0x2
c00274b6:	75 15                	jne    c00274cd <RTC::completeRTCRefresh()+0x277>
c00274b8:	f6 c3 80             	test   bl,0x80
c00274bb:	74 10                	je     c00274cd <RTC::completeRTCRefresh()+0x277>
c00274bd:	83 e3 7f             	and    ebx,0x7f
c00274c0:	b9 18 00 00 00       	mov    ecx,0x18
c00274c5:	8d 43 0c             	lea    eax,[ebx+0xc]
c00274c8:	99                   	cdq    
c00274c9:	f7 f9                	idiv   ecx
c00274cb:	88 d3                	mov    bl,dl
c00274cd:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c00274d3:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c00274d9:	77 06                	ja     c00274e1 <RTC::completeRTCRefresh()+0x28b>
c00274db:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c00274e1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00274e6:	31 c9                	xor    ecx,ecx
c00274e8:	c1 e0 10             	shl    eax,0x10
c00274eb:	89 cd                	mov    ebp,ecx
c00274ed:	c1 e7 10             	shl    edi,0x10
c00274f0:	31 d2                	xor    edx,edx
c00274f2:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00274f8:	09 c5                	or     ebp,eax
c00274fa:	89 f0                	mov    eax,esi
c00274fc:	89 e9                	mov    ecx,ebp
c00274fe:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0027502:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0027506:	88 c2                	mov    dl,al
c0027508:	88 d9                	mov    cl,bl
c002750a:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c002750e:	0f b7 c2             	movzx  eax,dx
c0027511:	09 f8                	or     eax,edi
c0027513:	89 c2                	mov    edx,eax
c0027515:	50                   	push   eax
c0027516:	50                   	push   eax
c0027517:	51                   	push   ecx
c0027518:	52                   	push   edx
c0027519:	e8 99 38 ff ff       	call   c001adb7 <datetimeToSeconds(datetime_t)>
c002751e:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0027522:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0027528:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c002752e:	83 c4 4c             	add    esp,0x4c
c0027531:	5b                   	pop    ebx
c0027532:	5e                   	pop    esi
c0027533:	5f                   	pop    edi
c0027534:	5d                   	pop    ebp
c0027535:	c3                   	ret    

c0027536 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0027536:	55                   	push   ebp
c0027537:	57                   	push   edi
c0027538:	56                   	push   esi
c0027539:	53                   	push   ebx
c002753a:	83 ec 30             	sub    esp,0x30
c002753d:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0027541:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0027545:	6a 00                	push   0x0
c0027547:	6a 00                	push   0x0
c0027549:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002754f:	e8 3a e5 fe ff       	call   c0015a8e <Computer::writeCMOS(unsigned char, unsigned char)>
c0027554:	83 c4 0c             	add    esp,0xc
c0027557:	6a 00                	push   0x0
c0027559:	6a 02                	push   0x2
c002755b:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027561:	e8 28 e5 fe ff       	call   c0015a8e <Computer::writeCMOS(unsigned char, unsigned char)>
c0027566:	31 d2                	xor    edx,edx
c0027568:	89 f9                	mov    ecx,edi
c002756a:	89 f8                	mov    eax,edi
c002756c:	c1 e9 10             	shr    ecx,0x10
c002756f:	0f b6 c4             	movzx  eax,ah
c0027572:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0027576:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c002757a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002757e:	b9 64 00 00 00       	mov    ecx,0x64
c0027583:	89 f0                	mov    eax,esi
c0027585:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0027589:	89 f0                	mov    eax,esi
c002758b:	0f b6 c4             	movzx  eax,ah
c002758e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0027592:	89 f0                	mov    eax,esi
c0027594:	c1 e8 10             	shr    eax,0x10
c0027597:	f7 f1                	div    ecx
c0027599:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002759d:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00275a1:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00275a5:	59                   	pop    ecx
c00275a6:	5b                   	pop    ebx
c00275a7:	89 fb                	mov    ebx,edi
c00275a9:	6a 0b                	push   0xb
c00275ab:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00275b1:	e8 be e3 fe ff       	call   c0015974 <Computer::readCMOS(unsigned char)>
c00275b6:	83 c4 10             	add    esp,0x10
c00275b9:	89 c5                	mov    ebp,eax
c00275bb:	a8 04                	test   al,0x4
c00275bd:	75 6e                	jne    c002762d <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c00275bf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00275c3:	31 d2                	xor    edx,edx
c00275c5:	0f b6 c1             	movzx  eax,cl
c00275c8:	b9 0a 00 00 00       	mov    ecx,0xa
c00275cd:	f7 f1                	div    ecx
c00275cf:	c1 e0 04             	shl    eax,0x4
c00275d2:	09 d0                	or     eax,edx
c00275d4:	31 d2                	xor    edx,edx
c00275d6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00275da:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00275df:	f7 f1                	div    ecx
c00275e1:	c1 e0 04             	shl    eax,0x4
c00275e4:	09 d0                	or     eax,edx
c00275e6:	31 d2                	xor    edx,edx
c00275e8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00275ec:	0f b6 c3             	movzx  eax,bl
c00275ef:	f7 f1                	div    ecx
c00275f1:	c1 e0 04             	shl    eax,0x4
c00275f4:	09 d0                	or     eax,edx
c00275f6:	31 d2                	xor    edx,edx
c00275f8:	89 c3                	mov    ebx,eax
c00275fa:	89 f0                	mov    eax,esi
c00275fc:	0f b6 c0             	movzx  eax,al
c00275ff:	f7 f1                	div    ecx
c0027601:	c1 e0 04             	shl    eax,0x4
c0027604:	09 d0                	or     eax,edx
c0027606:	31 d2                	xor    edx,edx
c0027608:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002760c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0027611:	f7 f1                	div    ecx
c0027613:	c1 e0 04             	shl    eax,0x4
c0027616:	09 d0                	or     eax,edx
c0027618:	31 d2                	xor    edx,edx
c002761a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002761e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0027622:	f7 f1                	div    ecx
c0027624:	c1 e0 04             	shl    eax,0x4
c0027627:	09 d0                	or     eax,edx
c0027629:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002762d:	83 e5 02             	and    ebp,0x2
c0027630:	75 1e                	jne    c0027650 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0027632:	0f b6 c3             	movzx  eax,bl
c0027635:	83 f8 0b             	cmp    eax,0xb
c0027638:	76 10                	jbe    c002764a <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c002763a:	8d 53 f4             	lea    edx,[ebx-0xc]
c002763d:	88 d3                	mov    bl,dl
c002763f:	84 d2                	test   dl,dl
c0027641:	75 02                	jne    c0027645 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0027643:	b3 0c                	mov    bl,0xc
c0027645:	83 cb 80             	or     ebx,0xffffff80
c0027648:	eb 06                	jmp    c0027650 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c002764a:	85 c0                	test   eax,eax
c002764c:	75 02                	jne    c0027650 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c002764e:	b3 0c                	mov    bl,0xc
c0027650:	0f b6 db             	movzx  ebx,bl
c0027653:	50                   	push   eax
c0027654:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0027659:	52                   	push   edx
c002765a:	6a 00                	push   0x0
c002765c:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027662:	e8 27 e4 fe ff       	call   c0015a8e <Computer::writeCMOS(unsigned char, unsigned char)>
c0027667:	83 c4 0c             	add    esp,0xc
c002766a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002766f:	50                   	push   eax
c0027670:	6a 02                	push   0x2
c0027672:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027678:	e8 11 e4 fe ff       	call   c0015a8e <Computer::writeCMOS(unsigned char, unsigned char)>
c002767d:	83 c4 0c             	add    esp,0xc
c0027680:	53                   	push   ebx
c0027681:	6a 04                	push   0x4
c0027683:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027689:	e8 00 e4 fe ff       	call   c0015a8e <Computer::writeCMOS(unsigned char, unsigned char)>
c002768e:	83 c4 0c             	add    esp,0xc
c0027691:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0027696:	52                   	push   edx
c0027697:	6a 07                	push   0x7
c0027699:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002769f:	e8 ea e3 fe ff       	call   c0015a8e <Computer::writeCMOS(unsigned char, unsigned char)>
c00276a4:	83 c4 0c             	add    esp,0xc
c00276a7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00276ac:	50                   	push   eax
c00276ad:	6a 08                	push   0x8
c00276af:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00276b5:	e8 d4 e3 fe ff       	call   c0015a8e <Computer::writeCMOS(unsigned char, unsigned char)>
c00276ba:	83 c4 0c             	add    esp,0xc
c00276bd:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c00276c2:	55                   	push   ebp
c00276c3:	6a 09                	push   0x9
c00276c5:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00276cb:	e8 be e3 fe ff       	call   c0015a8e <Computer::writeCMOS(unsigned char, unsigned char)>
c00276d0:	5a                   	pop    edx
c00276d1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00276d5:	e8 7c fb ff ff       	call   c0027256 <RTC::completeRTCRefresh()>
c00276da:	83 c4 3c             	add    esp,0x3c
c00276dd:	b0 01                	mov    al,0x1
c00276df:	5b                   	pop    ebx
c00276e0:	5e                   	pop    esi
c00276e1:	5f                   	pop    edi
c00276e2:	5d                   	pop    ebp
c00276e3:	c3                   	ret    

c00276e4 <rtcIRQHandler(regs*, void*)>:
c00276e4:	53                   	push   ebx
c00276e5:	83 ec 10             	sub    esp,0x10
c00276e8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00276ec:	6a 0c                	push   0xc
c00276ee:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00276f4:	e8 7b e2 fe ff       	call   c0015974 <Computer::readCMOS(unsigned char)>
c00276f9:	83 c4 10             	add    esp,0x10
c00276fc:	a8 80                	test   al,0x80
c00276fe:	74 24                	je     c0027724 <rtcIRQHandler(regs*, void*)+0x40>
c0027700:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0027707:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c002770e:	66 ff 05 78 02 04 c0 	inc    WORD PTR ds:0xc0040278
c0027715:	75 0d                	jne    c0027724 <rtcIRQHandler(regs*, void*)+0x40>
c0027717:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c002771b:	83 c4 08             	add    esp,0x8
c002771e:	5b                   	pop    ebx
c002771f:	e9 32 fb ff ff       	jmp    c0027256 <RTC::completeRTCRefresh()>
c0027724:	83 c4 08             	add    esp,0x8
c0027727:	5b                   	pop    ebx
c0027728:	c3                   	ret    
c0027729:	90                   	nop

c002772a <RTC::RTC()>:
c002772a:	83 ec 1c             	sub    esp,0x1c
c002772d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027731:	83 ec 08             	sub    esp,0x8
c0027734:	68 13 2e 03 c0       	push   0xc0032e13
c0027739:	50                   	push   eax
c002773a:	e8 53 35 ff ff       	call   c001ac92 <Clock::Clock(char const*)>
c002773f:	83 c4 10             	add    esp,0x10
c0027742:	ba 30 2e 03 c0       	mov    edx,0xc0032e30
c0027747:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002774b:	89 10                	mov    DWORD PTR [eax],edx
c002774d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027751:	83 ec 0c             	sub    esp,0xc
c0027754:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027758:	6a 01                	push   0x1
c002775a:	68 e4 76 02 c0       	push   0xc00276e4
c002775f:	6a 08                	push   0x8
c0027761:	50                   	push   eax
c0027762:	e8 07 3a ff ff       	call   c001b16e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0027767:	83 c4 20             	add    esp,0x20
c002776a:	89 c2                	mov    edx,eax
c002776c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027770:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0027776:	fa                   	cli    
c0027777:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002777c:	83 c0 01             	add    eax,0x1
c002777f:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0027784:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027789:	83 ec 08             	sub    esp,0x8
c002778c:	6a 0b                	push   0xb
c002778e:	50                   	push   eax
c002778f:	e8 e0 e1 fe ff       	call   c0015974 <Computer::readCMOS(unsigned char)>
c0027794:	83 c4 10             	add    esp,0x10
c0027797:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002779b:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00277a0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00277a4:	83 ca 10             	or     edx,0x10
c00277a7:	0f b6 d2             	movzx  edx,dl
c00277aa:	83 ec 04             	sub    esp,0x4
c00277ad:	52                   	push   edx
c00277ae:	6a 0b                	push   0xb
c00277b0:	50                   	push   eax
c00277b1:	e8 d8 e2 fe ff       	call   c0015a8e <Computer::writeCMOS(unsigned char, unsigned char)>
c00277b6:	83 c4 10             	add    esp,0x10
c00277b9:	83 ec 0c             	sub    esp,0xc
c00277bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00277c0:	e8 91 fa ff ff       	call   c0027256 <RTC::completeRTCRefresh()>
c00277c5:	83 c4 10             	add    esp,0x10
c00277c8:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00277cd:	83 e8 01             	sub    eax,0x1
c00277d0:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00277d5:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00277da:	85 c0                	test   eax,eax
c00277dc:	75 01                	jne    c00277df <RTC::RTC()+0xb5>
c00277de:	fb                   	sti    
c00277df:	90                   	nop
c00277e0:	83 c4 1c             	add    esp,0x1c
c00277e3:	c3                   	ret    

c00277e4 <HalConsoleScroll(int, int)>:
c00277e4:	83 ec 10             	sub    esp,0x10
c00277e7:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c00277ef:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00277f7:	90                   	nop
c00277f8:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00277fd:	0f 8f e1 00 00 00    	jg     c00278e4 <HalConsoleScroll(int, int)+0x100>
c0027803:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002780b:	90                   	nop
c002780c:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0027814:	0f 8f be 00 00 00    	jg     c00278d8 <HalConsoleScroll(int, int)+0xf4>
c002781a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002781e:	89 d0                	mov    eax,edx
c0027820:	c1 e0 02             	shl    eax,0x2
c0027823:	01 d0                	add    eax,edx
c0027825:	c1 e0 05             	shl    eax,0x5
c0027828:	89 c2                	mov    edx,eax
c002782a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002782e:	01 d0                	add    eax,edx
c0027830:	89 c2                	mov    edx,eax
c0027832:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027836:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0027839:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002783d:	89 d0                	mov    eax,edx
c002783f:	c1 e0 02             	shl    eax,0x2
c0027842:	01 d0                	add    eax,edx
c0027844:	c1 e0 05             	shl    eax,0x5
c0027847:	89 c2                	mov    edx,eax
c0027849:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002784d:	01 d0                	add    eax,edx
c002784f:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0027855:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027859:	01 c2                	add    edx,eax
c002785b:	8a 01                	mov    al,BYTE PTR [ecx]
c002785d:	88 02                	mov    BYTE PTR [edx],al
c002785f:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0027864:	75 66                	jne    c00278cc <HalConsoleScroll(int, int)+0xe8>
c0027866:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002786a:	83 e0 01             	and    eax,0x1
c002786d:	74 39                	je     c00278a8 <HalConsoleScroll(int, int)+0xc4>
c002786f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027873:	83 e0 0f             	and    eax,0xf
c0027876:	88 c2                	mov    dl,al
c0027878:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002787c:	c1 e0 04             	shl    eax,0x4
c002787f:	09 d0                	or     eax,edx
c0027881:	88 c1                	mov    cl,al
c0027883:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027887:	89 d0                	mov    eax,edx
c0027889:	c1 e0 02             	shl    eax,0x2
c002788c:	01 d0                	add    eax,edx
c002788e:	c1 e0 05             	shl    eax,0x5
c0027891:	89 c2                	mov    edx,eax
c0027893:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027897:	01 d0                	add    eax,edx
c0027899:	89 c2                	mov    edx,eax
c002789b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002789f:	01 d0                	add    eax,edx
c00278a1:	88 ca                	mov    dl,cl
c00278a3:	88 10                	mov    BYTE PTR [eax],dl
c00278a5:	eb 25                	jmp    c00278cc <HalConsoleScroll(int, int)+0xe8>
c00278a7:	90                   	nop
c00278a8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00278ac:	89 d0                	mov    eax,edx
c00278ae:	c1 e0 02             	shl    eax,0x2
c00278b1:	01 d0                	add    eax,edx
c00278b3:	c1 e0 05             	shl    eax,0x5
c00278b6:	89 c2                	mov    edx,eax
c00278b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00278bc:	01 d0                	add    eax,edx
c00278be:	89 c2                	mov    edx,eax
c00278c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00278c4:	01 d0                	add    eax,edx
c00278c6:	c6 00 20             	mov    BYTE PTR [eax],0x20
c00278c9:	8d 76 00             	lea    esi,[esi+0x0]
c00278cc:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c00278d1:	e9 36 ff ff ff       	jmp    c002780c <HalConsoleScroll(int, int)+0x28>
c00278d6:	66 90                	xchg   ax,ax
c00278d8:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00278dd:	e9 16 ff ff ff       	jmp    c00277f8 <HalConsoleScroll(int, int)+0x14>
c00278e2:	66 90                	xchg   ax,ax
c00278e4:	90                   	nop
c00278e5:	83 c4 10             	add    esp,0x10
c00278e8:	c3                   	ret    
c00278e9:	8d 76 00             	lea    esi,[esi+0x0]

c00278ec <HalConsoleWriteCharacter(char, int, int, int, int)>:
c00278ec:	83 ec 14             	sub    esp,0x14
c00278ef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00278f3:	88 04 24             	mov    BYTE PTR [esp],al
c00278f6:	8a 04 24             	mov    al,BYTE PTR [esp]
c00278f9:	0f b6 c0             	movzx  eax,al
c00278fc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0027900:	89 d1                	mov    ecx,edx
c0027902:	83 e1 0f             	and    ecx,0xf
c0027905:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0027909:	c1 e2 04             	shl    edx,0x4
c002790c:	0f b6 d2             	movzx  edx,dl
c002790f:	09 ca                	or     edx,ecx
c0027911:	c1 e2 08             	shl    edx,0x8
c0027914:	09 d0                	or     eax,edx
c0027916:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c002791b:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0027923:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0027927:	89 d0                	mov    eax,edx
c0027929:	c1 e0 02             	shl    eax,0x2
c002792c:	01 d0                	add    eax,edx
c002792e:	c1 e0 04             	shl    eax,0x4
c0027931:	89 c2                	mov    edx,eax
c0027933:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0027937:	01 d0                	add    eax,edx
c0027939:	01 c0                	add    eax,eax
c002793b:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c002793f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027943:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0027948:	66 89 02             	mov    WORD PTR [edx],ax
c002794b:	90                   	nop
c002794c:	83 c4 14             	add    esp,0x14
c002794f:	c3                   	ret    

c0027950 <HalConsoleCursorUpdate(int, int)>:
c0027950:	83 ec 20             	sub    esp,0x20
c0027953:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027957:	89 c2                	mov    edx,eax
c0027959:	c1 e2 02             	shl    edx,0x2
c002795c:	01 d0                	add    eax,edx
c002795e:	c1 e0 04             	shl    eax,0x4
c0027961:	89 c2                	mov    edx,eax
c0027963:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0027967:	01 d0                	add    eax,edx
c0027969:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c002796e:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0027975:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c002797a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002797e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0027982:	ee                   	out    dx,al
c0027983:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0027988:	0f b6 c0             	movzx  eax,al
c002798b:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0027992:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0027996:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c002799a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002799e:	ee                   	out    dx,al
c002799f:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c00279a6:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c00279ab:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00279af:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00279b3:	ee                   	out    dx,al
c00279b4:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00279b9:	c1 e8 08             	shr    eax,0x8
c00279bc:	0f b6 c0             	movzx  eax,al
c00279bf:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c00279c6:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00279ca:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00279ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00279d2:	ee                   	out    dx,al
c00279d3:	90                   	nop
c00279d4:	83 c4 20             	add    esp,0x20
c00279d7:	c3                   	ret    

c00279d8 <FAT::getName()>:
c00279d8:	b8 64 2e 03 c0       	mov    eax,0xc0032e64
c00279dd:	c3                   	ret    
c00279de:	66 90                	xchg   ax,ax

c00279e0 <FAT::tell(void*, unsigned long long*)>:
c00279e0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00279e5:	75 09                	jne    c00279f0 <FAT::tell(void*, unsigned long long*)+0x10>
c00279e7:	b8 04 00 00 00       	mov    eax,0x4
c00279ec:	c3                   	ret    
c00279ed:	8d 76 00             	lea    esi,[esi+0x0]
c00279f0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00279f5:	75 09                	jne    c0027a00 <FAT::tell(void*, unsigned long long*)+0x20>
c00279f7:	b8 04 00 00 00       	mov    eax,0x4
c00279fc:	c3                   	ret    
c00279fd:	8d 76 00             	lea    esi,[esi+0x0]
c0027a00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027a04:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0027a07:	ba 00 00 00 00       	mov    edx,0x0
c0027a0c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0027a10:	89 01                	mov    DWORD PTR [ecx],eax
c0027a12:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0027a15:	b8 00 00 00 00       	mov    eax,0x0
c0027a1a:	c3                   	ret    
c0027a1b:	90                   	nop

c0027a1c <FAT::stat(void*, unsigned long long*)>:
c0027a1c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0027a21:	75 09                	jne    c0027a2c <FAT::stat(void*, unsigned long long*)+0x10>
c0027a23:	b8 04 00 00 00       	mov    eax,0x4
c0027a28:	c3                   	ret    
c0027a29:	8d 76 00             	lea    esi,[esi+0x0]
c0027a2c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0027a31:	75 09                	jne    c0027a3c <FAT::stat(void*, unsigned long long*)+0x20>
c0027a33:	b8 04 00 00 00       	mov    eax,0x4
c0027a38:	c3                   	ret    
c0027a39:	8d 76 00             	lea    esi,[esi+0x0]
c0027a3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027a40:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0027a43:	ba 00 00 00 00       	mov    edx,0x0
c0027a48:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0027a4c:	89 01                	mov    DWORD PTR [ecx],eax
c0027a4e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0027a51:	b8 00 00 00 00       	mov    eax,0x0
c0027a56:	c3                   	ret    
c0027a57:	90                   	nop

c0027a58 <FAT::~FAT()>:
c0027a58:	83 ec 0c             	sub    esp,0xc
c0027a5b:	ba b0 2e 03 c0       	mov    edx,0xc0032eb0
c0027a60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a64:	89 10                	mov    DWORD PTR [eax],edx
c0027a66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a6a:	83 ec 0c             	sub    esp,0xc
c0027a6d:	50                   	push   eax
c0027a6e:	e8 57 25 ff ff       	call   c0019fca <Filesystem::~Filesystem()>
c0027a73:	83 c4 10             	add    esp,0x10
c0027a76:	90                   	nop
c0027a77:	83 c4 0c             	add    esp,0xc
c0027a7a:	c3                   	ret    
c0027a7b:	90                   	nop

c0027a7c <FAT::~FAT()>:
c0027a7c:	83 ec 0c             	sub    esp,0xc
c0027a7f:	83 ec 0c             	sub    esp,0xc
c0027a82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a86:	e8 cd ff ff ff       	call   c0027a58 <FAT::~FAT()>
c0027a8b:	83 c4 10             	add    esp,0x10
c0027a8e:	83 ec 08             	sub    esp,0x8
c0027a91:	6a 08                	push   0x8
c0027a93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a97:	e8 78 15 ff ff       	call   c0019014 <operator delete(void*, unsigned long)>
c0027a9c:	83 c4 10             	add    esp,0x10
c0027a9f:	83 c4 0c             	add    esp,0xc
c0027aa2:	c3                   	ret    
c0027aa3:	90                   	nop

c0027aa4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0027aa4:	83 ec 1c             	sub    esp,0x1c
c0027aa7:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0027aae:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0027ab3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027ab7:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0027abe:	83 f8 ff             	cmp    eax,0xffffffff
c0027ac1:	75 35                	jne    c0027af8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0027ac3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0027ac7:	88 c2                	mov    dl,al
c0027ac9:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027ace:	01 d0                	add    eax,edx
c0027ad0:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0027ad4:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c0027ada:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027ade:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c0027ae5:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027aea:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0027aee:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c0027af5:	eb 19                	jmp    c0027b10 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0027af7:	90                   	nop
c0027af8:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0027afc:	88 c2                	mov    dl,al
c0027afe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027b02:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0027b09:	01 d0                	add    eax,edx
c0027b0b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0027b0f:	90                   	nop
c0027b10:	83 ec 04             	sub    esp,0x4
c0027b13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0027b17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0027b1b:	8d 44 24 15          	lea    eax,[esp+0x15]
c0027b1f:	50                   	push   eax
c0027b20:	e8 5a d5 fd ff       	call   c000507f <f_getlabel>
c0027b25:	83 c4 10             	add    esp,0x10
c0027b28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027b2c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0027b31:	75 09                	jne    c0027b3c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0027b33:	b8 00 00 00 00       	mov    eax,0x0
c0027b38:	eb 0a                	jmp    c0027b44 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0027b3a:	66 90                	xchg   ax,ax
c0027b3c:	b8 01 00 00 00       	mov    eax,0x1
c0027b41:	8d 76 00             	lea    esi,[esi+0x0]
c0027b44:	83 c4 1c             	add    esp,0x1c
c0027b47:	c3                   	ret    

c0027b48 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0027b48:	57                   	push   edi
c0027b49:	83 ec 58             	sub    esp,0x58
c0027b4c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0027b54:	8d 54 24 10          	lea    edx,[esp+0x10]
c0027b58:	b8 00 00 00 00       	mov    eax,0x0
c0027b5d:	b9 0f 00 00 00       	mov    ecx,0xf
c0027b62:	fc                   	cld    
c0027b63:	89 d7                	mov    edi,edx
c0027b65:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0027b67:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0027b6b:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0027b72:	83 f8 ff             	cmp    eax,0xffffffff
c0027b75:	75 35                	jne    c0027bac <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0027b77:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0027b7b:	88 c2                	mov    dl,al
c0027b7d:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027b82:	01 d0                	add    eax,edx
c0027b84:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0027b88:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c0027b8e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0027b92:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c0027b99:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027b9e:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0027ba2:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c0027ba9:	eb 19                	jmp    c0027bc4 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0027bab:	90                   	nop
c0027bac:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0027bb0:	88 c2                	mov    dl,al
c0027bb2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0027bb6:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0027bbd:	01 d0                	add    eax,edx
c0027bbf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0027bc3:	90                   	nop
c0027bc4:	83 ec 08             	sub    esp,0x8
c0027bc7:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0027bcb:	8d 44 24 18          	lea    eax,[esp+0x18]
c0027bcf:	50                   	push   eax
c0027bd0:	e8 6b 8c fd ff       	call   c0000840 <strcat>
c0027bd5:	83 c4 10             	add    esp,0x10
c0027bd8:	83 ec 0c             	sub    esp,0xc
c0027bdb:	8d 44 24 18          	lea    eax,[esp+0x18]
c0027bdf:	50                   	push   eax
c0027be0:	e8 eb d5 fd ff       	call   c00051d0 <f_setlabel>
c0027be5:	83 c4 10             	add    esp,0x10
c0027be8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0027bec:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0027bf1:	75 09                	jne    c0027bfc <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0027bf3:	b8 00 00 00 00       	mov    eax,0x0
c0027bf8:	eb 0a                	jmp    c0027c04 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0027bfa:	66 90                	xchg   ax,ax
c0027bfc:	b8 01 00 00 00       	mov    eax,0x1
c0027c01:	8d 76 00             	lea    esi,[esi+0x0]
c0027c04:	83 c4 58             	add    esp,0x58
c0027c07:	5f                   	pop    edi
c0027c08:	c3                   	ret    
c0027c09:	90                   	nop
c0027c0a:	66 90                	xchg   ax,ax

c0027c0c <FAT::format(LogicalDisk*, int, char const*, int)>:
c0027c0c:	83 ec 2c             	sub    esp,0x2c
c0027c0f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0027c17:	83 ec 08             	sub    esp,0x8
c0027c1a:	68 88 2e 03 c0       	push   0xc0032e88
c0027c1f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0027c23:	e8 28 8b fd ff       	call   c0000750 <strcmp>
c0027c28:	83 c4 10             	add    esp,0x10
c0027c2b:	85 c0                	test   eax,eax
c0027c2d:	0f 94 c0             	sete   al
c0027c30:	0f b6 c0             	movzx  eax,al
c0027c33:	85 c0                	test   eax,eax
c0027c35:	74 0d                	je     c0027c44 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0027c37:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0027c3f:	e9 c0 00 00 00       	jmp    c0027d04 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0027c44:	83 ec 08             	sub    esp,0x8
c0027c47:	68 7a 2e 03 c0       	push   0xc0032e7a
c0027c4c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0027c50:	e8 fb 8a fd ff       	call   c0000750 <strcmp>
c0027c55:	83 c4 10             	add    esp,0x10
c0027c58:	85 c0                	test   eax,eax
c0027c5a:	0f 94 c0             	sete   al
c0027c5d:	0f b6 c0             	movzx  eax,al
c0027c60:	85 c0                	test   eax,eax
c0027c62:	74 10                	je     c0027c74 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0027c64:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0027c6c:	e9 93 00 00 00       	jmp    c0027d04 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0027c71:	8d 76 00             	lea    esi,[esi+0x0]
c0027c74:	83 ec 08             	sub    esp,0x8
c0027c77:	68 80 2e 03 c0       	push   0xc0032e80
c0027c7c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0027c80:	e8 cb 8a fd ff       	call   c0000750 <strcmp>
c0027c85:	83 c4 10             	add    esp,0x10
c0027c88:	85 c0                	test   eax,eax
c0027c8a:	0f 94 c0             	sete   al
c0027c8d:	0f b6 c0             	movzx  eax,al
c0027c90:	85 c0                	test   eax,eax
c0027c92:	74 0c                	je     c0027ca0 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0027c94:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0027c9c:	eb 66                	jmp    c0027d04 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0027c9e:	66 90                	xchg   ax,ax
c0027ca0:	83 ec 08             	sub    esp,0x8
c0027ca3:	68 3c f0 02 c0       	push   0xc002f03c
c0027ca8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0027cac:	e8 9f 8a fd ff       	call   c0000750 <strcmp>
c0027cb1:	83 c4 10             	add    esp,0x10
c0027cb4:	85 c0                	test   eax,eax
c0027cb6:	0f 94 c0             	sete   al
c0027cb9:	0f b6 c0             	movzx  eax,al
c0027cbc:	85 c0                	test   eax,eax
c0027cbe:	74 0c                	je     c0027ccc <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0027cc0:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0027cc8:	eb 3a                	jmp    c0027d04 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0027cca:	66 90                	xchg   ax,ax
c0027ccc:	83 ec 08             	sub    esp,0x8
c0027ccf:	68 86 2e 03 c0       	push   0xc0032e86
c0027cd4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0027cd8:	e8 73 8a fd ff       	call   c0000750 <strcmp>
c0027cdd:	83 c4 10             	add    esp,0x10
c0027ce0:	85 c0                	test   eax,eax
c0027ce2:	0f 94 c0             	sete   al
c0027ce5:	0f b6 c0             	movzx  eax,al
c0027ce8:	85 c0                	test   eax,eax
c0027cea:	74 0c                	je     c0027cf8 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0027cec:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0027cf4:	eb 0e                	jmp    c0027d04 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0027cf6:	66 90                	xchg   ax,ax
c0027cf8:	b8 08 00 00 00       	mov    eax,0x8
c0027cfd:	e9 ea 00 00 00       	jmp    c0027dec <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0027d02:	66 90                	xchg   ax,ax
c0027d04:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0027d0b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0027d10:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0027d14:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0027d1b:	83 f8 ff             	cmp    eax,0xffffffff
c0027d1e:	75 34                	jne    c0027d54 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0027d20:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0027d24:	88 c2                	mov    dl,al
c0027d26:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027d2b:	01 d0                	add    eax,edx
c0027d2d:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0027d31:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c0027d37:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0027d3b:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c0027d42:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027d47:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0027d4b:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c0027d52:	eb 18                	jmp    c0027d6c <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0027d54:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0027d58:	88 c2                	mov    dl,al
c0027d5a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0027d5e:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0027d65:	01 d0                	add    eax,edx
c0027d67:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0027d6b:	90                   	nop
c0027d6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0027d70:	88 04 24             	mov    BYTE PTR [esp],al
c0027d73:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0027d77:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027d7b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0027d83:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0027d88:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0027d90:	83 ec 0c             	sub    esp,0xc
c0027d93:	68 00 20 00 00       	push   0x2000
c0027d98:	e8 15 e5 fe ff       	call   c00162b2 <malloc>
c0027d9d:	83 c4 10             	add    esp,0x10
c0027da0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0027da4:	68 00 20 00 00       	push   0x2000
c0027da9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027dad:	8d 44 24 08          	lea    eax,[esp+0x8]
c0027db1:	50                   	push   eax
c0027db2:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0027db6:	50                   	push   eax
c0027db7:	e8 11 d7 fd ff       	call   c00054cd <f_mkfs>
c0027dbc:	83 c4 10             	add    esp,0x10
c0027dbf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0027dc3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027dc8:	75 0a                	jne    c0027dd4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0027dca:	b8 00 00 00 00       	mov    eax,0x0
c0027dcf:	eb 1b                	jmp    c0027dec <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0027dd1:	8d 76 00             	lea    esi,[esi+0x0]
c0027dd4:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0027dd9:	75 09                	jne    c0027de4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0027ddb:	b8 09 00 00 00       	mov    eax,0x9
c0027de0:	eb 0a                	jmp    c0027dec <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0027de2:	66 90                	xchg   ax,ax
c0027de4:	b8 01 00 00 00       	mov    eax,0x1
c0027de9:	8d 76 00             	lea    esi,[esi+0x0]
c0027dec:	83 c4 2c             	add    esp,0x2c
c0027def:	c3                   	ret    

c0027df0 <FAT::tryMount(LogicalDisk*, int)>:
c0027df0:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0027df6:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027dfb:	83 f8 14             	cmp    eax,0x14
c0027dfe:	75 18                	jne    c0027e18 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0027e00:	83 ec 0c             	sub    esp,0xc
c0027e03:	68 8c 2e 03 c0       	push   0xc0032e8c
c0027e08:	e8 3e 82 ff ff       	call   c002004b <KePanic(char const*)>
c0027e0d:	83 c4 10             	add    esp,0x10
c0027e10:	b0 00                	mov    al,0x0
c0027e12:	e9 ed 01 00 00       	jmp    c0028004 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0027e17:	90                   	nop
c0027e18:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0027e1f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0027e25:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0027e2b:	3d 00 02 00 00       	cmp    eax,0x200
c0027e30:	74 0a                	je     c0027e3c <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0027e32:	b0 00                	mov    al,0x0
c0027e34:	e9 cb 01 00 00       	jmp    c0028004 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0027e39:	8d 76 00             	lea    esi,[esi+0x0]
c0027e3c:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0027e44:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0027e4b:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0027e52:	83 f8 ff             	cmp    eax,0xffffffff
c0027e55:	74 09                	je     c0027e60 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0027e57:	b0 01                	mov    al,0x1
c0027e59:	e9 a6 01 00 00       	jmp    c0028004 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0027e5e:	66 90                	xchg   ax,ax
c0027e60:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0027e6a:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0027e72:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0027e79:	88 c2                	mov    dl,al
c0027e7b:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027e80:	01 d0                	add    eax,edx
c0027e82:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0027e89:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c0027e8f:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0027e96:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c0027e9d:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027ea2:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0027ea9:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c0027eb0:	83 ec 0c             	sub    esp,0xc
c0027eb3:	68 34 02 00 00       	push   0x234
c0027eb8:	e8 f5 e3 fe ff       	call   c00162b2 <malloc>
c0027ebd:	83 c4 10             	add    esp,0x10
c0027ec0:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0027ec7:	83 ec 04             	sub    esp,0x4
c0027eca:	6a 00                	push   0x0
c0027ecc:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0027ed3:	50                   	push   eax
c0027ed4:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0027edb:	e8 c8 bd fd ff       	call   c0003ca8 <f_mount>
c0027ee0:	83 c4 10             	add    esp,0x10
c0027ee3:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0027eea:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0027ef2:	74 1c                	je     c0027f10 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0027ef4:	83 ec 0c             	sub    esp,0xc
c0027ef7:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0027efe:	e8 cf e3 fe ff       	call   c00162d2 <rfree>
c0027f03:	83 c4 10             	add    esp,0x10
c0027f06:	b0 00                	mov    al,0x0
c0027f08:	e9 f7 00 00 00       	jmp    c0028004 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0027f0d:	8d 76 00             	lea    esi,[esi+0x0]
c0027f10:	83 ec 04             	sub    esp,0x4
c0027f13:	68 00 01 00 00       	push   0x100
c0027f18:	6a 00                	push   0x0
c0027f1a:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0027f21:	50                   	push   eax
c0027f22:	e8 c9 85 fd ff       	call   c00004f0 <memset>
c0027f27:	83 c4 10             	add    esp,0x10
c0027f2a:	83 ec 08             	sub    esp,0x8
c0027f2d:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0027f34:	50                   	push   eax
c0027f35:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0027f3c:	50                   	push   eax
c0027f3d:	e8 fe 88 fd ff       	call   c0000840 <strcat>
c0027f42:	83 c4 10             	add    esp,0x10
c0027f45:	83 ec 08             	sub    esp,0x8
c0027f48:	68 9a 2e 03 c0       	push   0xc0032e9a
c0027f4d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0027f54:	50                   	push   eax
c0027f55:	e8 e6 88 fd ff       	call   c0000840 <strcat>
c0027f5a:	83 c4 10             	add    esp,0x10
c0027f5d:	83 ec 04             	sub    esp,0x4
c0027f60:	6a 01                	push   0x1
c0027f62:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0027f69:	50                   	push   eax
c0027f6a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0027f6e:	50                   	push   eax
c0027f6f:	e8 96 bd fd ff       	call   c0003d0a <f_open>
c0027f74:	83 c4 10             	add    esp,0x10
c0027f77:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0027f7e:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0027f85:	85 c0                	test   eax,eax
c0027f87:	74 0b                	je     c0027f94 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0027f89:	78 31                	js     c0027fbc <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0027f8b:	83 e8 04             	sub    eax,0x4
c0027f8e:	83 f8 01             	cmp    eax,0x1
c0027f91:	77 29                	ja     c0027fbc <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0027f93:	90                   	nop
c0027f94:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0027f9c:	83 ec 0c             	sub    esp,0xc
c0027f9f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0027fa3:	50                   	push   eax
c0027fa4:	e8 30 c5 fd ff       	call   c00044d9 <f_close>
c0027fa9:	83 c4 10             	add    esp,0x10
c0027fac:	90                   	nop
c0027fad:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0027fb5:	85 c0                	test   eax,eax
c0027fb7:	74 43                	je     c0027ffc <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0027fb9:	eb 31                	jmp    c0027fec <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0027fbb:	90                   	nop
c0027fbc:	83 ec 0c             	sub    esp,0xc
c0027fbf:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0027fc6:	e8 07 e3 fe ff       	call   c00162d2 <rfree>
c0027fcb:	83 c4 10             	add    esp,0x10
c0027fce:	83 ec 04             	sub    esp,0x4
c0027fd1:	6a 00                	push   0x0
c0027fd3:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0027fda:	50                   	push   eax
c0027fdb:	6a 00                	push   0x0
c0027fdd:	e8 c6 bc fd ff       	call   c0003ca8 <f_mount>
c0027fe2:	83 c4 10             	add    esp,0x10
c0027fe5:	b0 00                	mov    al,0x0
c0027fe7:	eb 1b                	jmp    c0028004 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0027fe9:	8d 76 00             	lea    esi,[esi+0x0]
c0027fec:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027ff1:	83 c0 01             	add    eax,0x1
c0027ff4:	a3 80 02 04 c0       	mov    ds:0xc0040280,eax
c0027ff9:	8d 76 00             	lea    esi,[esi+0x0]
c0027ffc:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0028003:	90                   	nop
c0028004:	81 c4 4c 03 00 00    	add    esp,0x34c
c002800a:	c3                   	ret    
c002800b:	90                   	nop

c002800c <FAT::allocateSwapfile(char const*, int)>:
c002800c:	55                   	push   ebp
c002800d:	57                   	push   edi
c002800e:	56                   	push   esi
c002800f:	53                   	push   ebx
c0028010:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0028016:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0028021:	83 ec 0c             	sub    esp,0xc
c0028024:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c002802b:	e8 82 e2 fe ff       	call   c00162b2 <malloc>
c0028030:	83 c4 10             	add    esp,0x10
c0028033:	89 c7                	mov    edi,eax
c0028035:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002803a:	83 ec 04             	sub    esp,0x4
c002803d:	50                   	push   eax
c002803e:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0028045:	57                   	push   edi
c0028046:	e8 fd 22 ff ff       	call   c001a348 <File::File(char const*, Process*)>
c002804b:	83 c4 10             	add    esp,0x10
c002804e:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0028055:	83 ec 04             	sub    esp,0x4
c0028058:	8d 44 24 13          	lea    eax,[esp+0x13]
c002805c:	50                   	push   eax
c002805d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028061:	50                   	push   eax
c0028062:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028069:	e8 fa 25 ff ff       	call   c001a668 <File::stat(unsigned long long*, bool*)>
c002806e:	83 c4 10             	add    esp,0x10
c0028071:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0028078:	c1 e0 14             	shl    eax,0x14
c002807b:	89 c7                	mov    edi,eax
c002807d:	89 c5                	mov    ebp,eax
c002807f:	c1 fd 1f             	sar    ebp,0x1f
c0028082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028086:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002808a:	89 f9                	mov    ecx,edi
c002808c:	31 c1                	xor    ecx,eax
c002808e:	89 cb                	mov    ebx,ecx
c0028090:	89 e9                	mov    ecx,ebp
c0028092:	31 d1                	xor    ecx,edx
c0028094:	89 ce                	mov    esi,ecx
c0028096:	89 f0                	mov    eax,esi
c0028098:	09 d8                	or     eax,ebx
c002809a:	0f 84 9c 00 00 00    	je     c002813c <FAT::allocateSwapfile(char const*, int)+0x130>
c00280a0:	83 ec 0c             	sub    esp,0xc
c00280a3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00280aa:	e8 85 24 ff ff       	call   c001a534 <File::unlink()>
c00280af:	83 c4 10             	add    esp,0x10
c00280b2:	83 ec 08             	sub    esp,0x8
c00280b5:	6a 12                	push   0x12
c00280b7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00280be:	e8 a3 22 ff ff       	call   c001a366 <File::open(FileOpenMode)>
c00280c3:	83 c4 10             	add    esp,0x10
c00280c6:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00280cd:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00280d3:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00280da:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00280e1:	c1 e0 14             	shl    eax,0x14
c00280e4:	83 ec 04             	sub    esp,0x4
c00280e7:	6a 01                	push   0x1
c00280e9:	50                   	push   eax
c00280ea:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c00280f1:	e8 6a d2 fd ff       	call   c0005360 <f_expand>
c00280f6:	83 c4 10             	add    esp,0x10
c00280f9:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0028100:	8b 00                	mov    eax,DWORD PTR [eax]
c0028102:	83 c0 10             	add    eax,0x10
c0028105:	8b 00                	mov    eax,DWORD PTR [eax]
c0028107:	83 ec 0c             	sub    esp,0xc
c002810a:	8d 54 24 24          	lea    edx,[esp+0x24]
c002810e:	52                   	push   edx
c002810f:	8d 54 24 30          	lea    edx,[esp+0x30]
c0028113:	52                   	push   edx
c0028114:	6a 00                	push   0x0
c0028116:	68 00 04 00 00       	push   0x400
c002811b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0028122:	ff d0                	call   eax
c0028124:	83 c4 20             	add    esp,0x20
c0028127:	83 ec 0c             	sub    esp,0xc
c002812a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028131:	e8 8e 22 ff ff       	call   c001a3c4 <File::close()>
c0028136:	83 c4 10             	add    esp,0x10
c0028139:	8d 76 00             	lea    esi,[esi+0x0]
c002813c:	83 ec 08             	sub    esp,0x8
c002813f:	6a 01                	push   0x1
c0028141:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028148:	e8 19 22 ff ff       	call   c001a366 <File::open(FileOpenMode)>
c002814d:	83 c4 10             	add    esp,0x10
c0028150:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0028157:	8b 00                	mov    eax,DWORD PTR [eax]
c0028159:	83 c0 0c             	add    eax,0xc
c002815c:	8b 00                	mov    eax,DWORD PTR [eax]
c002815e:	83 ec 0c             	sub    esp,0xc
c0028161:	8d 54 24 24          	lea    edx,[esp+0x24]
c0028165:	52                   	push   edx
c0028166:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c002816a:	52                   	push   edx
c002816b:	6a 00                	push   0x0
c002816d:	6a 04                	push   0x4
c002816f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0028176:	ff d0                	call   eax
c0028178:	83 c4 20             	add    esp,0x20
c002817b:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0028182:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0028188:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c002818f:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0028196:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0028199:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c00281a0:	83 ec 0c             	sub    esp,0xc
c00281a3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00281aa:	e8 15 22 ff ff       	call   c001a3c4 <File::close()>
c00281af:	83 c4 10             	add    esp,0x10
c00281b2:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c00281b9:	ba 00 00 00 00       	mov    edx,0x0
c00281be:	81 c4 3c 04 00 00    	add    esp,0x43c
c00281c4:	5b                   	pop    ebx
c00281c5:	5e                   	pop    esi
c00281c6:	5f                   	pop    edi
c00281c7:	5d                   	pop    ebp
c00281c8:	c3                   	ret    
c00281c9:	90                   	nop
c00281ca:	66 90                	xchg   ax,ax

c00281cc <FAT::readDir(void*, unsigned long, void*, int*)>:
c00281cc:	57                   	push   edi
c00281cd:	56                   	push   esi
c00281ce:	53                   	push   ebx
c00281cf:	81 ec 50 02 00 00    	sub    esp,0x250
c00281d5:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00281dd:	74 0d                	je     c00281ec <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c00281df:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00281e7:	75 0f                	jne    c00281f8 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c00281e9:	8d 76 00             	lea    esi,[esi+0x0]
c00281ec:	b8 04 00 00 00       	mov    eax,0x4
c00281f1:	e9 3a 01 00 00       	jmp    c0028330 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00281f6:	66 90                	xchg   ax,ax
c00281f8:	83 ec 08             	sub    esp,0x8
c00281fb:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0028202:	50                   	push   eax
c0028203:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c002820a:	e8 97 c5 fd ff       	call   c00047a6 <f_readdir>
c002820f:	83 c4 10             	add    esp,0x10
c0028212:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0028219:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0028220:	83 ec 0c             	sub    esp,0xc
c0028223:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c002822a:	83 c0 16             	add    eax,0x16
c002822d:	50                   	push   eax
c002822e:	e8 3d 83 fd ff       	call   c0000570 <strlen>
c0028233:	83 c4 10             	add    esp,0x10
c0028236:	ba 00 00 00 00       	mov    edx,0x0
c002823b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002823f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0028243:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c002824a:	0f b6 c0             	movzx  eax,al
c002824d:	83 e0 10             	and    eax,0x10
c0028250:	74 0a                	je     c002825c <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0028252:	b8 02 00 00 00       	mov    eax,0x2
c0028257:	eb 0b                	jmp    c0028264 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0028259:	8d 76 00             	lea    esi,[esi+0x0]
c002825c:	b8 01 00 00 00       	mov    eax,0x1
c0028261:	8d 76 00             	lea    esi,[esi+0x0]
c0028264:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0028268:	83 ec 08             	sub    esp,0x8
c002826b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0028272:	83 c0 16             	add    eax,0x16
c0028275:	50                   	push   eax
c0028276:	8d 44 24 14          	lea    eax,[esp+0x14]
c002827a:	83 c0 10             	add    eax,0x10
c002827d:	50                   	push   eax
c002827e:	e8 bd 83 fd ff       	call   c0000640 <strcpy>
c0028283:	83 c4 10             	add    esp,0x10
c0028286:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c002828d:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0028294:	8d 44 24 08          	lea    eax,[esp+0x8]
c0028298:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c002829f:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00282a6:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00282ad:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00282b4:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00282bb:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00282c2:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00282c9:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00282d0:	89 c6                	mov    esi,eax
c00282d2:	89 d7                	mov    edi,edx
c00282d4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00282d6:	89 c8                	mov    eax,ecx
c00282d8:	89 fa                	mov    edx,edi
c00282da:	89 f3                	mov    ebx,esi
c00282dc:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00282e3:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00282ea:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00282f1:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00282f8:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00282fe:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0028305:	0f be c0             	movsx  eax,al
c0028308:	85 c0                	test   eax,eax
c002830a:	75 08                	jne    c0028314 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c002830c:	b8 07 00 00 00       	mov    eax,0x7
c0028311:	eb 1d                	jmp    c0028330 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0028313:	90                   	nop
c0028314:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c002831b:	85 c0                	test   eax,eax
c002831d:	75 09                	jne    c0028328 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c002831f:	b8 00 00 00 00       	mov    eax,0x0
c0028324:	eb 0a                	jmp    c0028330 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0028326:	66 90                	xchg   ax,ax
c0028328:	b8 01 00 00 00       	mov    eax,0x1
c002832d:	8d 76 00             	lea    esi,[esi+0x0]
c0028330:	81 c4 50 02 00 00    	add    esp,0x250
c0028336:	5b                   	pop    ebx
c0028337:	5e                   	pop    esi
c0028338:	5f                   	pop    edi
c0028339:	c3                   	ret    
c002833a:	66 90                	xchg   ax,ax

c002833c <FAT::read(void*, unsigned long, void*, int*)>:
c002833c:	83 ec 1c             	sub    esp,0x1c
c002833f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0028344:	74 0a                	je     c0028350 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0028346:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002834b:	75 0b                	jne    c0028358 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c002834d:	8d 76 00             	lea    esi,[esi+0x0]
c0028350:	b8 04 00 00 00       	mov    eax,0x4
c0028355:	eb 41                	jmp    c0028398 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0028357:	90                   	nop
c0028358:	8d 44 24 08          	lea    eax,[esp+0x8]
c002835c:	50                   	push   eax
c002835d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0028361:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0028365:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028369:	e8 5f bc fd ff       	call   c0003fcd <f_read>
c002836e:	83 c4 10             	add    esp,0x10
c0028371:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028375:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028379:	89 c2                	mov    edx,eax
c002837b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002837f:	89 10                	mov    DWORD PTR [eax],edx
c0028381:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028385:	85 c0                	test   eax,eax
c0028387:	75 07                	jne    c0028390 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0028389:	b8 00 00 00 00       	mov    eax,0x0
c002838e:	eb 08                	jmp    c0028398 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0028390:	b8 01 00 00 00       	mov    eax,0x1
c0028395:	8d 76 00             	lea    esi,[esi+0x0]
c0028398:	83 c4 1c             	add    esp,0x1c
c002839b:	c3                   	ret    

c002839c <FAT::write(void*, unsigned long, void*, int*)>:
c002839c:	83 ec 1c             	sub    esp,0x1c
c002839f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00283a4:	74 0a                	je     c00283b0 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c00283a6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00283ab:	75 0b                	jne    c00283b8 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c00283ad:	8d 76 00             	lea    esi,[esi+0x0]
c00283b0:	b8 04 00 00 00       	mov    eax,0x4
c00283b5:	eb 41                	jmp    c00283f8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00283b7:	90                   	nop
c00283b8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00283bc:	50                   	push   eax
c00283bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00283c1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00283c5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00283c9:	e8 fe bd fd ff       	call   c00041cc <f_write>
c00283ce:	83 c4 10             	add    esp,0x10
c00283d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00283d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00283d9:	89 c2                	mov    edx,eax
c00283db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00283df:	89 10                	mov    DWORD PTR [eax],edx
c00283e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00283e5:	85 c0                	test   eax,eax
c00283e7:	75 07                	jne    c00283f0 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c00283e9:	b8 00 00 00 00       	mov    eax,0x0
c00283ee:	eb 08                	jmp    c00283f8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00283f0:	b8 01 00 00 00       	mov    eax,0x1
c00283f5:	8d 76 00             	lea    esi,[esi+0x0]
c00283f8:	83 c4 1c             	add    esp,0x1c
c00283fb:	c3                   	ret    

c00283fc <FAT::close(void*)>:
c00283fc:	83 ec 1c             	sub    esp,0x1c
c00283ff:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0028404:	75 0a                	jne    c0028410 <FAT::close(void*)+0x14>
c0028406:	b8 04 00 00 00       	mov    eax,0x4
c002840b:	eb 3f                	jmp    c002844c <FAT::close(void*)+0x50>
c002840d:	8d 76 00             	lea    esi,[esi+0x0]
c0028410:	83 ec 0c             	sub    esp,0xc
c0028413:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028417:	e8 bd c0 fd ff       	call   c00044d9 <f_close>
c002841c:	83 c4 10             	add    esp,0x10
c002841f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028423:	83 ec 0c             	sub    esp,0xc
c0028426:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002842a:	e8 93 de fe ff       	call   c00162c2 <free>
c002842f:	83 c4 10             	add    esp,0x10
c0028432:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028436:	85 c0                	test   eax,eax
c0028438:	75 0a                	jne    c0028444 <FAT::close(void*)+0x48>
c002843a:	b8 00 00 00 00       	mov    eax,0x0
c002843f:	eb 0b                	jmp    c002844c <FAT::close(void*)+0x50>
c0028441:	8d 76 00             	lea    esi,[esi+0x0]
c0028444:	b8 01 00 00 00       	mov    eax,0x1
c0028449:	8d 76 00             	lea    esi,[esi+0x0]
c002844c:	83 c4 1c             	add    esp,0x1c
c002844f:	c3                   	ret    

c0028450 <FAT::closeDir(void*)>:
c0028450:	83 ec 1c             	sub    esp,0x1c
c0028453:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0028458:	75 0a                	jne    c0028464 <FAT::closeDir(void*)+0x14>
c002845a:	b8 04 00 00 00       	mov    eax,0x4
c002845f:	eb 3f                	jmp    c00284a0 <FAT::closeDir(void*)+0x50>
c0028461:	8d 76 00             	lea    esi,[esi+0x0]
c0028464:	83 ec 0c             	sub    esp,0xc
c0028467:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002846b:	e8 14 c3 fd ff       	call   c0004784 <f_closedir>
c0028470:	83 c4 10             	add    esp,0x10
c0028473:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028477:	83 ec 0c             	sub    esp,0xc
c002847a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002847e:	e8 3f de fe ff       	call   c00162c2 <free>
c0028483:	83 c4 10             	add    esp,0x10
c0028486:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002848a:	85 c0                	test   eax,eax
c002848c:	75 0a                	jne    c0028498 <FAT::closeDir(void*)+0x48>
c002848e:	b8 00 00 00 00       	mov    eax,0x0
c0028493:	eb 0b                	jmp    c00284a0 <FAT::closeDir(void*)+0x50>
c0028495:	8d 76 00             	lea    esi,[esi+0x0]
c0028498:	b8 01 00 00 00       	mov    eax,0x1
c002849d:	8d 76 00             	lea    esi,[esi+0x0]
c00284a0:	83 c4 1c             	add    esp,0x1c
c00284a3:	c3                   	ret    

c00284a4 <FAT::truncate(void*, unsigned long long)>:
c00284a4:	83 ec 2c             	sub    esp,0x2c
c00284a7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00284ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00284af:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00284b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00284b7:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00284bc:	75 0a                	jne    c00284c8 <FAT::truncate(void*, unsigned long long)+0x24>
c00284be:	b8 04 00 00 00       	mov    eax,0x4
c00284c3:	eb 47                	jmp    c002850c <FAT::truncate(void*, unsigned long long)+0x68>
c00284c5:	8d 76 00             	lea    esi,[esi+0x0]
c00284c8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00284cc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00284cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00284d3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00284db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00284df:	83 ec 08             	sub    esp,0x8
c00284e2:	50                   	push   eax
c00284e3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00284e7:	e8 1c c0 fd ff       	call   c0004508 <f_lseek>
c00284ec:	83 c4 10             	add    esp,0x10
c00284ef:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00284f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00284f7:	85 c0                	test   eax,eax
c00284f9:	75 09                	jne    c0028504 <FAT::truncate(void*, unsigned long long)+0x60>
c00284fb:	b8 00 00 00 00       	mov    eax,0x0
c0028500:	eb 0a                	jmp    c002850c <FAT::truncate(void*, unsigned long long)+0x68>
c0028502:	66 90                	xchg   ax,ax
c0028504:	b8 01 00 00 00       	mov    eax,0x1
c0028509:	8d 76 00             	lea    esi,[esi+0x0]
c002850c:	83 c4 2c             	add    esp,0x2c
c002850f:	c3                   	ret    

c0028510 <FAT::seek(void*, unsigned long long)>:
c0028510:	83 ec 2c             	sub    esp,0x2c
c0028513:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028517:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002851b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002851f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028523:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0028528:	75 0a                	jne    c0028534 <FAT::seek(void*, unsigned long long)+0x24>
c002852a:	b8 04 00 00 00       	mov    eax,0x4
c002852f:	eb 33                	jmp    c0028564 <FAT::seek(void*, unsigned long long)+0x54>
c0028531:	8d 76 00             	lea    esi,[esi+0x0]
c0028534:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028538:	83 ec 08             	sub    esp,0x8
c002853b:	50                   	push   eax
c002853c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0028540:	e8 c3 bf fd ff       	call   c0004508 <f_lseek>
c0028545:	83 c4 10             	add    esp,0x10
c0028548:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002854c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0028550:	85 c0                	test   eax,eax
c0028552:	75 08                	jne    c002855c <FAT::seek(void*, unsigned long long)+0x4c>
c0028554:	b8 00 00 00 00       	mov    eax,0x0
c0028559:	eb 09                	jmp    c0028564 <FAT::seek(void*, unsigned long long)+0x54>
c002855b:	90                   	nop
c002855c:	b8 01 00 00 00       	mov    eax,0x1
c0028561:	8d 76 00             	lea    esi,[esi+0x0]
c0028564:	83 c4 2c             	add    esp,0x2c
c0028567:	c3                   	ret    

c0028568 <fatWrapperReadDisk>:
c0028568:	53                   	push   ebx
c0028569:	83 ec 18             	sub    esp,0x18
c002856c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028570:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0028574:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028579:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c0028580:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0028584:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0028588:	ba 00 00 00 00       	mov    edx,0x0
c002858d:	83 ec 0c             	sub    esp,0xc
c0028590:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028594:	53                   	push   ebx
c0028595:	52                   	push   edx
c0028596:	50                   	push   eax
c0028597:	51                   	push   ecx
c0028598:	e8 17 40 ff ff       	call   c001c5b4 <LogicalDisk::read(unsigned long long, int, void*)>
c002859d:	83 c4 20             	add    esp,0x20
c00285a0:	83 c4 18             	add    esp,0x18
c00285a3:	5b                   	pop    ebx
c00285a4:	c3                   	ret    
c00285a5:	8d 76 00             	lea    esi,[esi+0x0]

c00285a8 <fatWrapperWriteDisk>:
c00285a8:	53                   	push   ebx
c00285a9:	83 ec 18             	sub    esp,0x18
c00285ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00285b0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00285b4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00285b9:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c00285c0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00285c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00285c8:	ba 00 00 00 00       	mov    edx,0x0
c00285cd:	83 ec 0c             	sub    esp,0xc
c00285d0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00285d4:	53                   	push   ebx
c00285d5:	52                   	push   edx
c00285d6:	50                   	push   eax
c00285d7:	51                   	push   ecx
c00285d8:	e8 43 40 ff ff       	call   c001c620 <LogicalDisk::write(unsigned long long, int, void*)>
c00285dd:	83 c4 20             	add    esp,0x20
c00285e0:	83 c4 18             	add    esp,0x18
c00285e3:	5b                   	pop    ebx
c00285e4:	c3                   	ret    
c00285e5:	8d 76 00             	lea    esi,[esi+0x0]

c00285e8 <fatWrapperIoctl>:
c00285e8:	53                   	push   ebx
c00285e9:	83 ec 28             	sub    esp,0x28
c00285ec:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00285f0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00285f4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00285f8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00285fc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028601:	83 f8 02             	cmp    eax,0x2
c0028604:	75 32                	jne    c0028638 <fatWrapperIoctl+0x50>
c0028606:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002860a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002860e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028613:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c002861a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0028620:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0028626:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002862a:	66 89 02             	mov    WORD PTR [edx],ax
c002862d:	b8 00 00 00 00       	mov    eax,0x0
c0028632:	e9 c5 00 00 00       	jmp    c00286fc <fatWrapperIoctl+0x114>
c0028637:	90                   	nop
c0028638:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002863d:	83 f8 01             	cmp    eax,0x1
c0028640:	75 6a                	jne    c00286ac <fatWrapperIoctl+0xc4>
c0028642:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028646:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002864a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002864f:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0028656:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002865c:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0028662:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0028668:	89 c8                	mov    eax,ecx
c002866a:	89 da                	mov    edx,ebx
c002866c:	0f a4 c2 0a          	shld   edx,eax,0xa
c0028670:	c1 e0 0a             	shl    eax,0xa
c0028673:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0028678:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c002867f:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0028685:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c002868b:	89 cb                	mov    ebx,ecx
c002868d:	c1 fb 1f             	sar    ebx,0x1f
c0028690:	53                   	push   ebx
c0028691:	51                   	push   ecx
c0028692:	52                   	push   edx
c0028693:	50                   	push   eax
c0028694:	e8 a7 5b 00 00       	call   c002e240 <__udivdi3>
c0028699:	83 c4 10             	add    esp,0x10
c002869c:	89 c2                	mov    edx,eax
c002869e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00286a2:	89 10                	mov    DWORD PTR [eax],edx
c00286a4:	b8 00 00 00 00       	mov    eax,0x0
c00286a9:	eb 51                	jmp    c00286fc <fatWrapperIoctl+0x114>
c00286ab:	90                   	nop
c00286ac:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00286b1:	85 c0                	test   eax,eax
c00286b3:	75 07                	jne    c00286bc <fatWrapperIoctl+0xd4>
c00286b5:	b8 00 00 00 00       	mov    eax,0x0
c00286ba:	eb 40                	jmp    c00286fc <fatWrapperIoctl+0x114>
c00286bc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00286c1:	83 f8 03             	cmp    eax,0x3
c00286c4:	75 1a                	jne    c00286e0 <fatWrapperIoctl+0xf8>
c00286c6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00286ca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00286ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00286d2:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00286d8:	b8 00 00 00 00       	mov    eax,0x0
c00286dd:	eb 1d                	jmp    c00286fc <fatWrapperIoctl+0x114>
c00286df:	90                   	nop
c00286e0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00286e5:	83 f8 04             	cmp    eax,0x4
c00286e8:	75 0a                	jne    c00286f4 <fatWrapperIoctl+0x10c>
c00286ea:	b8 00 00 00 00       	mov    eax,0x0
c00286ef:	eb 0b                	jmp    c00286fc <fatWrapperIoctl+0x114>
c00286f1:	8d 76 00             	lea    esi,[esi+0x0]
c00286f4:	b8 04 00 00 00       	mov    eax,0x4
c00286f9:	8d 76 00             	lea    esi,[esi+0x0]
c00286fc:	83 c4 28             	add    esp,0x28
c00286ff:	5b                   	pop    ebx
c0028700:	c3                   	ret    
c0028701:	90                   	nop
c0028702:	66 90                	xchg   ax,ax

c0028704 <FAT::FAT()>:
c0028704:	83 ec 1c             	sub    esp,0x1c
c0028707:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002870b:	83 ec 0c             	sub    esp,0xc
c002870e:	50                   	push   eax
c002870f:	e8 92 18 ff ff       	call   c0019fa6 <Filesystem::Filesystem()>
c0028714:	83 c4 10             	add    esp,0x10
c0028717:	ba b0 2e 03 c0       	mov    edx,0xc0032eb0
c002871c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028720:	89 10                	mov    DWORD PTR [eax],edx
c0028722:	c7 05 80 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0040280,0x0
c002872c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0028734:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0028739:	7f 19                	jg     c0028754 <FAT::FAT()+0x50>
c002873b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002873f:	c7 04 85 a0 02 04 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffbfd60],0xffffffff
c002874a:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c002874f:	eb e3                	jmp    c0028734 <FAT::FAT()+0x30>
c0028751:	8d 76 00             	lea    esi,[esi+0x0]
c0028754:	90                   	nop
c0028755:	83 c4 1c             	add    esp,0x1c
c0028758:	c3                   	ret    
c0028759:	90                   	nop
c002875a:	66 90                	xchg   ax,ax

c002875c <FAT::fixFilepath(char*)>:
c002875c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028760:	8a 00                	mov    al,BYTE PTR [eax]
c0028762:	0f be c0             	movsx  eax,al
c0028765:	83 f8 40             	cmp    eax,0x40
c0028768:	7e 2e                	jle    c0028798 <FAT::fixFilepath(char*)+0x3c>
c002876a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002876e:	8a 00                	mov    al,BYTE PTR [eax]
c0028770:	83 e8 41             	sub    eax,0x41
c0028773:	88 c2                	mov    dl,al
c0028775:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028779:	88 10                	mov    BYTE PTR [eax],dl
c002877b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002877f:	8a 00                	mov    al,BYTE PTR [eax]
c0028781:	0f be c0             	movsx  eax,al
c0028784:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c002878b:	83 c0 30             	add    eax,0x30
c002878e:	88 c2                	mov    dl,al
c0028790:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028794:	88 10                	mov    BYTE PTR [eax],dl
c0028796:	66 90                	xchg   ax,ax
c0028798:	90                   	nop
c0028799:	c3                   	ret    
c002879a:	66 90                	xchg   ax,ax

c002879c <FAT::open(char const*, void**, FileOpenMode)>:
c002879c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00287a2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00287aa:	74 0c                	je     c00287b8 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c00287ac:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00287b4:	75 0e                	jne    c00287c4 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c00287b6:	66 90                	xchg   ax,ax
c00287b8:	b8 04 00 00 00       	mov    eax,0x4
c00287bd:	e9 46 01 00 00       	jmp    c0028908 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c00287c2:	66 90                	xchg   ax,ax
c00287c4:	83 ec 08             	sub    esp,0x8
c00287c7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00287ce:	8d 44 24 14          	lea    eax,[esp+0x14]
c00287d2:	50                   	push   eax
c00287d3:	e8 68 7e fd ff       	call   c0000640 <strcpy>
c00287d8:	83 c4 10             	add    esp,0x10
c00287db:	83 ec 08             	sub    esp,0x8
c00287de:	8d 44 24 10          	lea    eax,[esp+0x10]
c00287e2:	50                   	push   eax
c00287e3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00287ea:	e8 6d ff ff ff       	call   c002875c <FAT::fixFilepath(char*)>
c00287ef:	83 c4 10             	add    esp,0x10
c00287f2:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00287fa:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028801:	83 e0 01             	and    eax,0x1
c0028804:	74 12                	je     c0028818 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0028806:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c002880d:	83 c8 01             	or     eax,0x1
c0028810:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028817:	90                   	nop
c0028818:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002881f:	83 e0 04             	and    eax,0x4
c0028822:	74 24                	je     c0028848 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0028824:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c002882b:	83 c8 30             	or     eax,0x30
c002882e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028835:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c002883c:	83 c8 02             	or     eax,0x2
c002883f:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028846:	66 90                	xchg   ax,ax
c0028848:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002884f:	83 e0 02             	and    eax,0x2
c0028852:	74 14                	je     c0028868 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0028854:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c002885b:	83 c8 02             	or     eax,0x2
c002885e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028865:	8d 76 00             	lea    esi,[esi+0x0]
c0028868:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002886f:	83 e0 08             	and    eax,0x8
c0028872:	74 14                	je     c0028888 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0028874:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c002887b:	83 c8 04             	or     eax,0x4
c002887e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028885:	8d 76 00             	lea    esi,[esi+0x0]
c0028888:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002888f:	83 e0 10             	and    eax,0x10
c0028892:	74 14                	je     c00288a8 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0028894:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c002889b:	83 c8 08             	or     eax,0x8
c002889e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00288a5:	8d 76 00             	lea    esi,[esi+0x0]
c00288a8:	83 ec 0c             	sub    esp,0xc
c00288ab:	68 28 02 00 00       	push   0x228
c00288b0:	e8 fd d9 fe ff       	call   c00162b2 <malloc>
c00288b5:	83 c4 10             	add    esp,0x10
c00288b8:	89 c2                	mov    edx,eax
c00288ba:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00288c1:	89 10                	mov    DWORD PTR [eax],edx
c00288c3:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00288cb:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00288d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00288d4:	83 ec 04             	sub    esp,0x4
c00288d7:	52                   	push   edx
c00288d8:	8d 54 24 10          	lea    edx,[esp+0x10]
c00288dc:	52                   	push   edx
c00288dd:	50                   	push   eax
c00288de:	e8 27 b4 fd ff       	call   c0003d0a <f_open>
c00288e3:	83 c4 10             	add    esp,0x10
c00288e6:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00288ed:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00288f5:	74 09                	je     c0028900 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c00288f7:	b8 01 00 00 00       	mov    eax,0x1
c00288fc:	eb 0a                	jmp    c0028908 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c00288fe:	66 90                	xchg   ax,ax
c0028900:	b8 00 00 00 00       	mov    eax,0x0
c0028905:	8d 76 00             	lea    esi,[esi+0x0]
c0028908:	81 c4 1c 01 00 00    	add    esp,0x11c
c002890e:	c3                   	ret    
c002890f:	90                   	nop

c0028910 <FAT::openDir(char const*, void**)>:
c0028910:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0028916:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002891e:	74 0c                	je     c002892c <FAT::openDir(char const*, void**)+0x1c>
c0028920:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0028928:	75 0e                	jne    c0028938 <FAT::openDir(char const*, void**)+0x28>
c002892a:	66 90                	xchg   ax,ax
c002892c:	b8 04 00 00 00       	mov    eax,0x4
c0028931:	e9 82 00 00 00       	jmp    c00289b8 <FAT::openDir(char const*, void**)+0xa8>
c0028936:	66 90                	xchg   ax,ax
c0028938:	83 ec 08             	sub    esp,0x8
c002893b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028942:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028946:	50                   	push   eax
c0028947:	e8 f4 7c fd ff       	call   c0000640 <strcpy>
c002894c:	83 c4 10             	add    esp,0x10
c002894f:	83 ec 08             	sub    esp,0x8
c0028952:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028956:	50                   	push   eax
c0028957:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002895e:	e8 f9 fd ff ff       	call   c002875c <FAT::fixFilepath(char*)>
c0028963:	83 c4 10             	add    esp,0x10
c0028966:	83 ec 0c             	sub    esp,0xc
c0028969:	6a 30                	push   0x30
c002896b:	e8 42 d9 fe ff       	call   c00162b2 <malloc>
c0028970:	83 c4 10             	add    esp,0x10
c0028973:	89 c2                	mov    edx,eax
c0028975:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002897c:	89 10                	mov    DWORD PTR [eax],edx
c002897e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028985:	8b 00                	mov    eax,DWORD PTR [eax]
c0028987:	83 ec 08             	sub    esp,0x8
c002898a:	8d 54 24 14          	lea    edx,[esp+0x14]
c002898e:	52                   	push   edx
c002898f:	50                   	push   eax
c0028990:	e8 24 bd fd ff       	call   c00046b9 <f_opendir>
c0028995:	83 c4 10             	add    esp,0x10
c0028998:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002899f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00289a7:	74 07                	je     c00289b0 <FAT::openDir(char const*, void**)+0xa0>
c00289a9:	b8 01 00 00 00       	mov    eax,0x1
c00289ae:	eb 08                	jmp    c00289b8 <FAT::openDir(char const*, void**)+0xa8>
c00289b0:	b8 00 00 00 00       	mov    eax,0x0
c00289b5:	8d 76 00             	lea    esi,[esi+0x0]
c00289b8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00289be:	c3                   	ret    
c00289bf:	90                   	nop

c00289c0 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00289c0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00289c6:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00289ce:	75 0c                	jne    c00289dc <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c00289d0:	b8 04 00 00 00       	mov    eax,0x4
c00289d5:	e9 d6 00 00 00       	jmp    c0028ab0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00289da:	66 90                	xchg   ax,ax
c00289dc:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00289e4:	75 0a                	jne    c00289f0 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c00289e6:	b8 04 00 00 00       	mov    eax,0x4
c00289eb:	e9 c0 00 00 00       	jmp    c0028ab0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00289f0:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00289f8:	75 0a                	jne    c0028a04 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c00289fa:	b8 04 00 00 00       	mov    eax,0x4
c00289ff:	e9 ac 00 00 00       	jmp    c0028ab0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028a04:	83 ec 08             	sub    esp,0x8
c0028a07:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0028a0e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0028a15:	50                   	push   eax
c0028a16:	e8 25 7c fd ff       	call   c0000640 <strcpy>
c0028a1b:	83 c4 10             	add    esp,0x10
c0028a1e:	83 ec 08             	sub    esp,0x8
c0028a21:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0028a28:	50                   	push   eax
c0028a29:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0028a30:	e8 27 fd ff ff       	call   c002875c <FAT::fixFilepath(char*)>
c0028a35:	83 c4 10             	add    esp,0x10
c0028a38:	83 ec 08             	sub    esp,0x8
c0028a3b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0028a3f:	50                   	push   eax
c0028a40:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0028a47:	50                   	push   eax
c0028a48:	e8 eb bd fd ff       	call   c0004838 <f_stat>
c0028a4d:	83 c4 10             	add    esp,0x10
c0028a50:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0028a57:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0028a5e:	85 c0                	test   eax,eax
c0028a60:	74 0a                	je     c0028a6c <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0028a62:	83 f8 04             	cmp    eax,0x4
c0028a65:	74 39                	je     c0028aa0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0028a67:	eb 3f                	jmp    c0028aa8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0028a69:	8d 76 00             	lea    esi,[esi+0x0]
c0028a6c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0028a70:	0f b6 c0             	movzx  eax,al
c0028a73:	83 e0 10             	and    eax,0x10
c0028a76:	0f 95 c2             	setne  dl
c0028a79:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0028a80:	88 10                	mov    BYTE PTR [eax],dl
c0028a82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a86:	ba 00 00 00 00       	mov    edx,0x0
c0028a8b:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0028a92:	89 01                	mov    DWORD PTR [ecx],eax
c0028a94:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0028a97:	b8 00 00 00 00       	mov    eax,0x0
c0028a9c:	eb 12                	jmp    c0028ab0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028a9e:	66 90                	xchg   ax,ax
c0028aa0:	b8 02 00 00 00       	mov    eax,0x2
c0028aa5:	eb 09                	jmp    c0028ab0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028aa7:	90                   	nop
c0028aa8:	b8 01 00 00 00       	mov    eax,0x1
c0028aad:	8d 76 00             	lea    esi,[esi+0x0]
c0028ab0:	81 c4 2c 02 00 00    	add    esp,0x22c
c0028ab6:	c3                   	ret    
c0028ab7:	90                   	nop

c0028ab8 <FAT::unlink(char const*)>:
c0028ab8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0028abe:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0028ac6:	75 08                	jne    c0028ad0 <FAT::unlink(char const*)+0x18>
c0028ac8:	b8 04 00 00 00       	mov    eax,0x4
c0028acd:	eb 61                	jmp    c0028b30 <FAT::unlink(char const*)+0x78>
c0028acf:	90                   	nop
c0028ad0:	83 ec 08             	sub    esp,0x8
c0028ad3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028ada:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028ade:	50                   	push   eax
c0028adf:	e8 5c 7b fd ff       	call   c0000640 <strcpy>
c0028ae4:	83 c4 10             	add    esp,0x10
c0028ae7:	83 ec 08             	sub    esp,0x8
c0028aea:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028aee:	50                   	push   eax
c0028aef:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028af6:	e8 61 fc ff ff       	call   c002875c <FAT::fixFilepath(char*)>
c0028afb:	83 c4 10             	add    esp,0x10
c0028afe:	83 ec 0c             	sub    esp,0xc
c0028b01:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028b05:	50                   	push   eax
c0028b06:	e8 9f bf fd ff       	call   c0004aaa <f_unlink>
c0028b0b:	83 c4 10             	add    esp,0x10
c0028b0e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0028b15:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0028b1c:	85 c0                	test   eax,eax
c0028b1e:	75 08                	jne    c0028b28 <FAT::unlink(char const*)+0x70>
c0028b20:	b8 00 00 00 00       	mov    eax,0x0
c0028b25:	eb 09                	jmp    c0028b30 <FAT::unlink(char const*)+0x78>
c0028b27:	90                   	nop
c0028b28:	b8 01 00 00 00       	mov    eax,0x1
c0028b2d:	8d 76 00             	lea    esi,[esi+0x0]
c0028b30:	81 c4 1c 01 00 00    	add    esp,0x11c
c0028b36:	c3                   	ret    
c0028b37:	90                   	nop

c0028b38 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0028b38:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0028b3e:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0028b45:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0028b4c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0028b50:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0028b54:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0028b5c:	75 0a                	jne    c0028b68 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0028b5e:	b8 04 00 00 00       	mov    eax,0x4
c0028b63:	e9 7c 01 00 00       	jmp    c0028ce4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0028b68:	83 ec 08             	sub    esp,0x8
c0028b6b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0028b72:	8d 44 24 24          	lea    eax,[esp+0x24]
c0028b76:	50                   	push   eax
c0028b77:	e8 c4 7a fd ff       	call   c0000640 <strcpy>
c0028b7c:	83 c4 10             	add    esp,0x10
c0028b7f:	83 ec 08             	sub    esp,0x8
c0028b82:	8d 44 24 20          	lea    eax,[esp+0x20]
c0028b86:	50                   	push   eax
c0028b87:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0028b8e:	e8 c9 fb ff ff       	call   c002875c <FAT::fixFilepath(char*)>
c0028b93:	83 c4 10             	add    esp,0x10
c0028b96:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0028b9e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0028ba6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028bab:	83 e0 01             	and    eax,0x1
c0028bae:	74 14                	je     c0028bc4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c0028bb0:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0028bb7:	83 c8 01             	or     eax,0x1
c0028bba:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0028bc1:	8d 76 00             	lea    esi,[esi+0x0]
c0028bc4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028bc9:	83 e0 02             	and    eax,0x2
c0028bcc:	74 12                	je     c0028be0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c0028bce:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0028bd5:	83 c8 20             	or     eax,0x20
c0028bd8:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0028bdf:	90                   	nop
c0028be0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028be5:	83 e0 04             	and    eax,0x4
c0028be8:	74 12                	je     c0028bfc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c0028bea:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0028bf1:	83 c8 04             	or     eax,0x4
c0028bf4:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0028bfb:	90                   	nop
c0028bfc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028c01:	83 e0 08             	and    eax,0x8
c0028c04:	74 12                	je     c0028c18 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c0028c06:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0028c0d:	83 c8 02             	or     eax,0x2
c0028c10:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0028c17:	90                   	nop
c0028c18:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028c1d:	83 e0 01             	and    eax,0x1
c0028c20:	74 12                	je     c0028c34 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0028c22:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0028c29:	83 c8 01             	or     eax,0x1
c0028c2c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0028c33:	90                   	nop
c0028c34:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028c39:	83 e0 02             	and    eax,0x2
c0028c3c:	74 12                	je     c0028c50 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c0028c3e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0028c45:	83 c8 20             	or     eax,0x20
c0028c48:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0028c4f:	90                   	nop
c0028c50:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028c55:	83 e0 04             	and    eax,0x4
c0028c58:	74 12                	je     c0028c6c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c0028c5a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0028c61:	83 c8 04             	or     eax,0x4
c0028c64:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0028c6b:	90                   	nop
c0028c6c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028c71:	83 e0 08             	and    eax,0x8
c0028c74:	74 12                	je     c0028c88 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c0028c76:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0028c7d:	83 c8 02             	or     eax,0x2
c0028c80:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0028c87:	90                   	nop
c0028c88:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0028c8f:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0028c96:	09 d0                	or     eax,edx
c0028c98:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0028c9f:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0028ca7:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0028caf:	83 ec 04             	sub    esp,0x4
c0028cb2:	52                   	push   edx
c0028cb3:	50                   	push   eax
c0028cb4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0028cb8:	50                   	push   eax
c0028cb9:	e8 61 c2 fd ff       	call   c0004f1f <f_chmod>
c0028cbe:	83 c4 10             	add    esp,0x10
c0028cc1:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0028cc8:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0028ccf:	85 c0                	test   eax,eax
c0028cd1:	75 09                	jne    c0028cdc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c0028cd3:	b8 00 00 00 00       	mov    eax,0x0
c0028cd8:	eb 0a                	jmp    c0028ce4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0028cda:	66 90                	xchg   ax,ax
c0028cdc:	b8 01 00 00 00       	mov    eax,0x1
c0028ce1:	8d 76 00             	lea    esi,[esi+0x0]
c0028ce4:	81 c4 2c 01 00 00    	add    esp,0x12c
c0028cea:	c3                   	ret    
c0028ceb:	90                   	nop

c0028cec <FAT::rename(char const*, char const*)>:
c0028cec:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0028cf2:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0028cfa:	74 0c                	je     c0028d08 <FAT::rename(char const*, char const*)+0x1c>
c0028cfc:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0028d04:	75 0e                	jne    c0028d14 <FAT::rename(char const*, char const*)+0x28>
c0028d06:	66 90                	xchg   ax,ax
c0028d08:	b8 04 00 00 00       	mov    eax,0x4
c0028d0d:	e9 9e 00 00 00       	jmp    c0028db0 <FAT::rename(char const*, char const*)+0xc4>
c0028d12:	66 90                	xchg   ax,ax
c0028d14:	83 ec 08             	sub    esp,0x8
c0028d17:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0028d1e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0028d25:	50                   	push   eax
c0028d26:	e8 15 79 fd ff       	call   c0000640 <strcpy>
c0028d2b:	83 c4 10             	add    esp,0x10
c0028d2e:	83 ec 08             	sub    esp,0x8
c0028d31:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0028d38:	50                   	push   eax
c0028d39:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0028d40:	e8 17 fa ff ff       	call   c002875c <FAT::fixFilepath(char*)>
c0028d45:	83 c4 10             	add    esp,0x10
c0028d48:	83 ec 08             	sub    esp,0x8
c0028d4b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0028d52:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028d56:	50                   	push   eax
c0028d57:	e8 e4 78 fd ff       	call   c0000640 <strcpy>
c0028d5c:	83 c4 10             	add    esp,0x10
c0028d5f:	83 ec 08             	sub    esp,0x8
c0028d62:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028d66:	50                   	push   eax
c0028d67:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0028d6e:	e8 e9 f9 ff ff       	call   c002875c <FAT::fixFilepath(char*)>
c0028d73:	83 c4 10             	add    esp,0x10
c0028d76:	83 ec 08             	sub    esp,0x8
c0028d79:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028d7d:	50                   	push   eax
c0028d7e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0028d85:	50                   	push   eax
c0028d86:	e8 dc bf fd ff       	call   c0004d67 <f_rename>
c0028d8b:	83 c4 10             	add    esp,0x10
c0028d8e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0028d95:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0028d9c:	85 c0                	test   eax,eax
c0028d9e:	75 08                	jne    c0028da8 <FAT::rename(char const*, char const*)+0xbc>
c0028da0:	b8 00 00 00 00       	mov    eax,0x0
c0028da5:	eb 09                	jmp    c0028db0 <FAT::rename(char const*, char const*)+0xc4>
c0028da7:	90                   	nop
c0028da8:	b8 01 00 00 00       	mov    eax,0x1
c0028dad:	8d 76 00             	lea    esi,[esi+0x0]
c0028db0:	81 c4 1c 02 00 00    	add    esp,0x21c
c0028db6:	c3                   	ret    
c0028db7:	90                   	nop

c0028db8 <FAT::mkdir(char const*)>:
c0028db8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0028dbe:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0028dc6:	75 08                	jne    c0028dd0 <FAT::mkdir(char const*)+0x18>
c0028dc8:	b8 04 00 00 00       	mov    eax,0x4
c0028dcd:	eb 61                	jmp    c0028e30 <FAT::mkdir(char const*)+0x78>
c0028dcf:	90                   	nop
c0028dd0:	83 ec 08             	sub    esp,0x8
c0028dd3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028dda:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028dde:	50                   	push   eax
c0028ddf:	e8 5c 78 fd ff       	call   c0000640 <strcpy>
c0028de4:	83 c4 10             	add    esp,0x10
c0028de7:	83 ec 08             	sub    esp,0x8
c0028dea:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028dee:	50                   	push   eax
c0028def:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028df6:	e8 61 f9 ff ff       	call   c002875c <FAT::fixFilepath(char*)>
c0028dfb:	83 c4 10             	add    esp,0x10
c0028dfe:	83 ec 0c             	sub    esp,0xc
c0028e01:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028e05:	50                   	push   eax
c0028e06:	e8 c1 bd fd ff       	call   c0004bcc <f_mkdir>
c0028e0b:	83 c4 10             	add    esp,0x10
c0028e0e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0028e15:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0028e1c:	85 c0                	test   eax,eax
c0028e1e:	75 08                	jne    c0028e28 <FAT::mkdir(char const*)+0x70>
c0028e20:	b8 00 00 00 00       	mov    eax,0x0
c0028e25:	eb 09                	jmp    c0028e30 <FAT::mkdir(char const*)+0x78>
c0028e27:	90                   	nop
c0028e28:	b8 01 00 00 00       	mov    eax,0x1
c0028e2d:	8d 76 00             	lea    esi,[esi+0x0]
c0028e30:	81 c4 1c 01 00 00    	add    esp,0x11c
c0028e36:	c3                   	ret    
c0028e37:	90                   	nop

c0028e38 <FAT::exists(char const*)>:
c0028e38:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0028e3e:	83 ec 08             	sub    esp,0x8
c0028e41:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0028e48:	8d 44 24 10          	lea    eax,[esp+0x10]
c0028e4c:	50                   	push   eax
c0028e4d:	e8 ee 77 fd ff       	call   c0000640 <strcpy>
c0028e52:	83 c4 10             	add    esp,0x10
c0028e55:	83 ec 08             	sub    esp,0x8
c0028e58:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0028e5c:	50                   	push   eax
c0028e5d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0028e64:	e8 f3 f8 ff ff       	call   c002875c <FAT::fixFilepath(char*)>
c0028e69:	83 c4 10             	add    esp,0x10
c0028e6c:	83 ec 08             	sub    esp,0x8
c0028e6f:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0028e76:	50                   	push   eax
c0028e77:	8d 44 24 10          	lea    eax,[esp+0x10]
c0028e7b:	50                   	push   eax
c0028e7c:	e8 b7 b9 fd ff       	call   c0004838 <f_stat>
c0028e81:	83 c4 10             	add    esp,0x10
c0028e84:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0028e8b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0028e92:	85 c0                	test   eax,eax
c0028e94:	75 06                	jne    c0028e9c <FAT::exists(char const*)+0x64>
c0028e96:	b0 01                	mov    al,0x1
c0028e98:	eb 06                	jmp    c0028ea0 <FAT::exists(char const*)+0x68>
c0028e9a:	66 90                	xchg   ax,ax
c0028e9c:	b0 00                	mov    al,0x0
c0028e9e:	66 90                	xchg   ax,ax
c0028ea0:	81 c4 2c 02 00 00    	add    esp,0x22c
c0028ea6:	c3                   	ret    
c0028ea7:	90                   	nop

c0028ea8 <isoReadDiscSectorHelper>:
c0028ea8:	83 ec 2c             	sub    esp,0x2c
c0028eab:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0028eaf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0028eb3:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0028eb8:	83 e8 41             	sub    eax,0x41
c0028ebb:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c0028ec2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0028ec6:	ba 00 00 00 00       	mov    edx,0x0
c0028ecb:	83 ec 0c             	sub    esp,0xc
c0028ece:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0028ed2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0028ed6:	52                   	push   edx
c0028ed7:	50                   	push   eax
c0028ed8:	51                   	push   ecx
c0028ed9:	e8 d6 36 ff ff       	call   c001c5b4 <LogicalDisk::read(unsigned long long, int, void*)>
c0028ede:	83 c4 20             	add    esp,0x20
c0028ee1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0028ee5:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0028eea:	74 0c                	je     c0028ef8 <isoReadDiscSectorHelper+0x50>
c0028eec:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028ef0:	c1 e0 0b             	shl    eax,0xb
c0028ef3:	eb 0b                	jmp    c0028f00 <isoReadDiscSectorHelper+0x58>
c0028ef5:	8d 76 00             	lea    esi,[esi+0x0]
c0028ef8:	b8 00 00 00 00       	mov    eax,0x0
c0028efd:	8d 76 00             	lea    esi,[esi+0x0]
c0028f00:	83 c4 2c             	add    esp,0x2c
c0028f03:	c3                   	ret    

c0028f04 <iso_kprintf>:
c0028f04:	83 ec 0c             	sub    esp,0xc
c0028f07:	83 ec 08             	sub    esp,0x8
c0028f0a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0028f0e:	68 5e 2c 03 c0       	push   0xc0032c5e
c0028f13:	e8 29 02 ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0028f18:	83 c4 10             	add    esp,0x10
c0028f1b:	90                   	nop
c0028f1c:	83 c4 0c             	add    esp,0xc
c0028f1f:	c3                   	ret    

c0028f20 <iso_kprintfd>:
c0028f20:	83 ec 0c             	sub    esp,0xc
c0028f23:	83 ec 08             	sub    esp,0x8
c0028f26:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0028f2a:	68 aa 12 03 c0       	push   0xc00312aa
c0028f2f:	e8 0d 02 ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0028f34:	83 c4 10             	add    esp,0x10
c0028f37:	90                   	nop
c0028f38:	83 c4 0c             	add    esp,0xc
c0028f3b:	c3                   	ret    

c0028f3c <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0028f3c:	b8 08 00 00 00       	mov    eax,0x8
c0028f41:	c3                   	ret    

c0028f42 <ISO9660::truncate(void*, unsigned long long)>:
c0028f42:	b8 01 00 00 00       	mov    eax,0x1
c0028f47:	c3                   	ret    

c0028f48 <ISO9660::getName()>:
c0028f48:	b8 14 2f 03 c0       	mov    eax,0xc0032f14
c0028f4d:	c3                   	ret    

c0028f4e <ISO9660::closeDir(void*)>:
c0028f4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028f52:	8b 00                	mov    eax,DWORD PTR [eax]
c0028f54:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0028f57:	90                   	nop

c0028f58 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0028f58:	b8 01 00 00 00       	mov    eax,0x1
c0028f5d:	c3                   	ret    

c0028f5e <ISO9660::unlink(char const*)>:
c0028f5e:	b8 01 00 00 00       	mov    eax,0x1
c0028f63:	c3                   	ret    

c0028f64 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0028f64:	b8 03 00 00 00       	mov    eax,0x3
c0028f69:	c3                   	ret    

c0028f6a <ISO9660::rename(char const*, char const*)>:
c0028f6a:	b8 01 00 00 00       	mov    eax,0x1
c0028f6f:	c3                   	ret    

c0028f70 <ISO9660::mkdir(char const*)>:
c0028f70:	b8 01 00 00 00       	mov    eax,0x1
c0028f75:	c3                   	ret    

c0028f76 <ISO9660::~ISO9660()>:
c0028f76:	83 ec 0c             	sub    esp,0xc
c0028f79:	ba 54 30 03 c0       	mov    edx,0xc0033054
c0028f7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f82:	89 10                	mov    DWORD PTR [eax],edx
c0028f84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f88:	83 ec 0c             	sub    esp,0xc
c0028f8b:	50                   	push   eax
c0028f8c:	e8 39 10 ff ff       	call   c0019fca <Filesystem::~Filesystem()>
c0028f91:	83 c4 10             	add    esp,0x10
c0028f94:	90                   	nop
c0028f95:	83 c4 0c             	add    esp,0xc
c0028f98:	c3                   	ret    
c0028f99:	90                   	nop

c0028f9a <ISO9660::~ISO9660()>:
c0028f9a:	83 ec 0c             	sub    esp,0xc
c0028f9d:	83 ec 0c             	sub    esp,0xc
c0028fa0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fa4:	e8 cd ff ff ff       	call   c0028f76 <ISO9660::~ISO9660()>
c0028fa9:	83 c4 10             	add    esp,0x10
c0028fac:	83 ec 08             	sub    esp,0x8
c0028faf:	6a 08                	push   0x8
c0028fb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fb5:	e8 5a 00 ff ff       	call   c0019014 <operator delete(void*, unsigned long)>
c0028fba:	83 c4 10             	add    esp,0x10
c0028fbd:	83 c4 0c             	add    esp,0xc
c0028fc0:	c3                   	ret    
c0028fc1:	90                   	nop

c0028fc2 <ISO9660::exists(char const*)>:
c0028fc2:	83 ec 18             	sub    esp,0x18
c0028fc5:	68 2f 2f 03 c0       	push   0xc0032f2f
c0028fca:	e8 7c 70 ff ff       	call   c002004b <KePanic(char const*)>
c0028fcf:	31 c0                	xor    eax,eax
c0028fd1:	83 c4 1c             	add    esp,0x1c
c0028fd4:	c3                   	ret    
c0028fd5:	90                   	nop

c0028fd6 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0028fd6:	56                   	push   esi
c0028fd7:	53                   	push   ebx
c0028fd8:	53                   	push   ebx
c0028fd9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0028fdd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0028fe1:	85 db                	test   ebx,ebx
c0028fe3:	0f 84 ca 00 00 00    	je     c00290b3 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0028fe9:	85 f6                	test   esi,esi
c0028feb:	0f 84 c2 00 00 00    	je     c00290b3 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0028ff1:	b8 03 00 00 00       	mov    eax,0x3
c0028ff6:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0028ffb:	0f 85 b7 00 00 00    	jne    c00290b8 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0029001:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0029003:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c002900a:	38 0d 80 03 04 c0    	cmp    BYTE PTR ds:0xc0040380,cl
c0029010:	74 1b                	je     c002902d <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0029012:	85 c0                	test   eax,eax
c0029014:	74 10                	je     c0029026 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c0029016:	83 ec 0c             	sub    esp,0xc
c0029019:	68 4d 2f 03 c0       	push   0xc0032f4d
c002901e:	e8 28 70 ff ff       	call   c002004b <KePanic(char const*)>
c0029023:	83 c4 10             	add    esp,0x10
c0029026:	8a 03                	mov    al,BYTE PTR [ebx]
c0029028:	a2 80 03 04 c0       	mov    ds:0xc0040380,al
c002902d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029030:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0029037:	85 c0                	test   eax,eax
c0029039:	74 09                	je     c0029044 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c002903b:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0029042:	74 48                	je     c002908c <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c0029044:	83 ec 0c             	sub    esp,0xc
c0029047:	68 5d 2f 03 c0       	push   0xc0032f5d
c002904c:	e8 f0 00 ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0029051:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029054:	83 c4 10             	add    esp,0x10
c0029057:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c002905e:	85 c0                	test   eax,eax
c0029060:	74 17                	je     c0029079 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c0029062:	83 ec 0c             	sub    esp,0xc
c0029065:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c002906c:	68 7d 2f 03 c0       	push   0xc0032f7d
c0029071:	e8 cb 00 ff ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0029076:	83 c4 10             	add    esp,0x10
c0029079:	83 ec 0c             	sub    esp,0xc
c002907c:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c0029083:	50                   	push   eax
c0029084:	e8 6d da fd ff       	call   c0006af6 <init_percd>
c0029089:	83 c4 10             	add    esp,0x10
c002908c:	83 c3 03             	add    ebx,0x3
c002908f:	51                   	push   ecx
c0029090:	51                   	push   ecx
c0029091:	6a 00                	push   0x0
c0029093:	53                   	push   ebx
c0029094:	e8 24 d5 fd ff       	call   c00065bd <iso_open>
c0029099:	83 c4 10             	add    esp,0x10
c002909c:	89 c2                	mov    edx,eax
c002909e:	b8 01 00 00 00       	mov    eax,0x1
c00290a3:	83 fa ff             	cmp    edx,0xffffffff
c00290a6:	74 10                	je     c00290b8 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c00290a8:	83 c2 32             	add    edx,0x32
c00290ab:	31 c0                	xor    eax,eax
c00290ad:	01 d2                	add    edx,edx
c00290af:	89 16                	mov    DWORD PTR [esi],edx
c00290b1:	eb 05                	jmp    c00290b8 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c00290b3:	b8 04 00 00 00       	mov    eax,0x4
c00290b8:	5a                   	pop    edx
c00290b9:	5b                   	pop    ebx
c00290ba:	5e                   	pop    esi
c00290bb:	c3                   	ret    

c00290bc <ISO9660::read(void*, unsigned long, void*, int*)>:
c00290bc:	53                   	push   ebx
c00290bd:	83 ec 08             	sub    esp,0x8
c00290c0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00290c4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00290c8:	85 c0                	test   eax,eax
c00290ca:	74 2d                	je     c00290f9 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c00290cc:	85 db                	test   ebx,ebx
c00290ce:	74 29                	je     c00290f9 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c00290d0:	b9 02 00 00 00       	mov    ecx,0x2
c00290d5:	52                   	push   edx
c00290d6:	99                   	cdq    
c00290d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290db:	f7 f9                	idiv   ecx
c00290dd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00290e1:	83 e8 32             	sub    eax,0x32
c00290e4:	50                   	push   eax
c00290e5:	e8 7b d5 fd ff       	call   c0006665 <iso_read>
c00290ea:	83 c4 10             	add    esp,0x10
c00290ed:	89 03                	mov    DWORD PTR [ebx],eax
c00290ef:	09 d0                	or     eax,edx
c00290f1:	0f 94 c0             	sete   al
c00290f4:	0f b6 c0             	movzx  eax,al
c00290f7:	eb 05                	jmp    c00290fe <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c00290f9:	b8 04 00 00 00       	mov    eax,0x4
c00290fe:	83 c4 08             	add    esp,0x8
c0029101:	5b                   	pop    ebx
c0029102:	c3                   	ret    
c0029103:	90                   	nop

c0029104 <ISO9660::seek(void*, unsigned long long)>:
c0029104:	57                   	push   edi
c0029105:	56                   	push   esi
c0029106:	b8 04 00 00 00       	mov    eax,0x4
c002910b:	51                   	push   ecx
c002910c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029110:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0029114:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0029118:	85 d2                	test   edx,edx
c002911a:	74 26                	je     c0029142 <ISO9660::seek(void*, unsigned long long)+0x3e>
c002911c:	6a 00                	push   0x0
c002911e:	b9 02 00 00 00       	mov    ecx,0x2
c0029123:	57                   	push   edi
c0029124:	89 d0                	mov    eax,edx
c0029126:	56                   	push   esi
c0029127:	99                   	cdq    
c0029128:	f7 f9                	idiv   ecx
c002912a:	83 e8 32             	sub    eax,0x32
c002912d:	50                   	push   eax
c002912e:	e8 48 d6 fd ff       	call   c000677b <iso_seek>
c0029133:	83 c4 10             	add    esp,0x10
c0029136:	31 f0                	xor    eax,esi
c0029138:	31 fa                	xor    edx,edi
c002913a:	09 d0                	or     eax,edx
c002913c:	0f 95 c0             	setne  al
c002913f:	0f b6 c0             	movzx  eax,al
c0029142:	5a                   	pop    edx
c0029143:	5e                   	pop    esi
c0029144:	5f                   	pop    edi
c0029145:	c3                   	ret    

c0029146 <ISO9660::tell(void*, unsigned long long*)>:
c0029146:	53                   	push   ebx
c0029147:	83 ec 08             	sub    esp,0x8
c002914a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002914e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0029152:	85 c0                	test   eax,eax
c0029154:	74 24                	je     c002917a <ISO9660::tell(void*, unsigned long long*)+0x34>
c0029156:	85 db                	test   ebx,ebx
c0029158:	74 20                	je     c002917a <ISO9660::tell(void*, unsigned long long*)+0x34>
c002915a:	83 ec 0c             	sub    esp,0xc
c002915d:	b9 02 00 00 00       	mov    ecx,0x2
c0029162:	99                   	cdq    
c0029163:	f7 f9                	idiv   ecx
c0029165:	83 e8 32             	sub    eax,0x32
c0029168:	50                   	push   eax
c0029169:	e8 91 d6 fd ff       	call   c00067ff <iso_tell>
c002916e:	83 c4 10             	add    esp,0x10
c0029171:	89 03                	mov    DWORD PTR [ebx],eax
c0029173:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0029176:	31 c0                	xor    eax,eax
c0029178:	eb 05                	jmp    c002917f <ISO9660::tell(void*, unsigned long long*)+0x39>
c002917a:	b8 04 00 00 00       	mov    eax,0x4
c002917f:	83 c4 08             	add    esp,0x8
c0029182:	5b                   	pop    ebx
c0029183:	c3                   	ret    

c0029184 <ISO9660::stat(void*, unsigned long long*)>:
c0029184:	53                   	push   ebx
c0029185:	83 ec 14             	sub    esp,0x14
c0029188:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c002918c:	68 a1 2f 03 c0       	push   0xc0032fa1
c0029191:	e8 ab ff fe ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0029196:	83 c4 10             	add    esp,0x10
c0029199:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002919e:	74 2c                	je     c00291cc <ISO9660::stat(void*, unsigned long long*)+0x48>
c00291a0:	85 db                	test   ebx,ebx
c00291a2:	74 28                	je     c00291cc <ISO9660::stat(void*, unsigned long long*)+0x48>
c00291a4:	83 ec 0c             	sub    esp,0xc
c00291a7:	b9 02 00 00 00       	mov    ecx,0x2
c00291ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00291b0:	99                   	cdq    
c00291b1:	f7 f9                	idiv   ecx
c00291b3:	83 e8 32             	sub    eax,0x32
c00291b6:	50                   	push   eax
c00291b7:	e8 74 d6 fd ff       	call   c0006830 <iso_total>
c00291bc:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00291c3:	89 03                	mov    DWORD PTR [ebx],eax
c00291c5:	83 c4 10             	add    esp,0x10
c00291c8:	31 c0                	xor    eax,eax
c00291ca:	eb 05                	jmp    c00291d1 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c00291cc:	b8 04 00 00 00       	mov    eax,0x4
c00291d1:	83 c4 08             	add    esp,0x8
c00291d4:	5b                   	pop    ebx
c00291d5:	c3                   	ret    

c00291d6 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00291d6:	55                   	push   ebp
c00291d7:	57                   	push   edi
c00291d8:	56                   	push   esi
c00291d9:	53                   	push   ebx
c00291da:	83 ec 18             	sub    esp,0x18
c00291dd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00291e1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00291e5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00291e9:	68 a9 2f 03 c0       	push   0xc0032fa9
c00291ee:	e8 4e ff fe ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c00291f3:	83 c4 10             	add    esp,0x10
c00291f6:	85 ff                	test   edi,edi
c00291f8:	0f 94 c0             	sete   al
c00291fb:	85 f6                	test   esi,esi
c00291fd:	0f 94 c2             	sete   dl
c0029200:	09 d0                	or     eax,edx
c0029202:	a8 01                	test   al,0x1
c0029204:	0f 85 dd 00 00 00    	jne    c00292e7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c002920a:	85 db                	test   ebx,ebx
c002920c:	0f 84 d5 00 00 00    	je     c00292e7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c0029212:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0029215:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c002921b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0029222:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c0029229:	8a 0b                	mov    cl,BYTE PTR [ebx]
c002922b:	38 0d 80 03 04 c0    	cmp    BYTE PTR ds:0xc0040380,cl
c0029231:	74 1b                	je     c002924e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c0029233:	85 c0                	test   eax,eax
c0029235:	74 10                	je     c0029247 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c0029237:	83 ec 0c             	sub    esp,0xc
c002923a:	68 4d 2f 03 c0       	push   0xc0032f4d
c002923f:	e8 07 6e ff ff       	call   c002004b <KePanic(char const*)>
c0029244:	83 c4 10             	add    esp,0x10
c0029247:	8a 03                	mov    al,BYTE PTR [ebx]
c0029249:	a2 80 03 04 c0       	mov    ds:0xc0040380,al
c002924e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029251:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0029258:	85 c0                	test   eax,eax
c002925a:	74 09                	je     c0029265 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c002925c:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0029263:	74 51                	je     c00292b6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c0029265:	83 ec 0c             	sub    esp,0xc
c0029268:	68 b1 2f 03 c0       	push   0xc0032fb1
c002926d:	e8 cf fe fe ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c0029272:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029275:	83 c4 10             	add    esp,0x10
c0029278:	83 3c 85 7c f2 03 c0 00 	cmp    DWORD PTR [eax*4-0x3ffc0d84],0x0
c0029280:	74 21                	je     c00292a3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c0029282:	83 ec 0c             	sub    esp,0xc
c0029285:	68 d1 2f 03 c0       	push   0xc0032fd1
c002928a:	e8 b2 fe fe ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c002928f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029292:	83 c4 10             	add    esp,0x10
c0029295:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c002929c:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00292a3:	83 ec 0c             	sub    esp,0xc
c00292a6:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c00292ad:	50                   	push   eax
c00292ae:	e8 43 d8 fd ff       	call   c0006af6 <init_percd>
c00292b3:	83 c4 10             	add    esp,0x10
c00292b6:	83 c3 03             	add    ebx,0x3
c00292b9:	52                   	push   edx
c00292ba:	52                   	push   edx
c00292bb:	6a 00                	push   0x0
c00292bd:	53                   	push   ebx
c00292be:	e8 fa d2 fd ff       	call   c00065bd <iso_open>
c00292c3:	83 c4 10             	add    esp,0x10
c00292c6:	89 c5                	mov    ebp,eax
c00292c8:	83 f8 ff             	cmp    eax,0xffffffff
c00292cb:	75 21                	jne    c00292ee <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c00292cd:	50                   	push   eax
c00292ce:	50                   	push   eax
c00292cf:	6a 01                	push   0x1
c00292d1:	53                   	push   ebx
c00292d2:	e8 e6 d2 fd ff       	call   c00065bd <iso_open>
c00292d7:	83 c4 10             	add    esp,0x10
c00292da:	ba 02 00 00 00       	mov    edx,0x2
c00292df:	40                   	inc    eax
c00292e0:	74 2b                	je     c002930d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c00292e2:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00292e5:	eb 24                	jmp    c002930b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c00292e7:	ba 04 00 00 00       	mov    edx,0x4
c00292ec:	eb 1f                	jmp    c002930d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c00292ee:	83 ec 0c             	sub    esp,0xc
c00292f1:	50                   	push   eax
c00292f2:	e8 39 d5 fd ff       	call   c0006830 <iso_total>
c00292f7:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c00292fe:	89 07                	mov    DWORD PTR [edi],eax
c0029300:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0029303:	e8 3f d3 fd ff       	call   c0006647 <iso_close>
c0029308:	83 c4 10             	add    esp,0x10
c002930b:	31 d2                	xor    edx,edx
c002930d:	83 c4 0c             	add    esp,0xc
c0029310:	89 d0                	mov    eax,edx
c0029312:	5b                   	pop    ebx
c0029313:	5e                   	pop    esi
c0029314:	5f                   	pop    edi
c0029315:	5d                   	pop    ebp
c0029316:	c3                   	ret    
c0029317:	90                   	nop

c0029318 <ISO9660::close(void*)>:
c0029318:	83 ec 0c             	sub    esp,0xc
c002931b:	b8 04 00 00 00       	mov    eax,0x4
c0029320:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029324:	85 d2                	test   edx,edx
c0029326:	74 1b                	je     c0029343 <ISO9660::close(void*)+0x2b>
c0029328:	83 ec 0c             	sub    esp,0xc
c002932b:	b9 02 00 00 00       	mov    ecx,0x2
c0029330:	89 d0                	mov    eax,edx
c0029332:	99                   	cdq    
c0029333:	f7 f9                	idiv   ecx
c0029335:	83 e8 32             	sub    eax,0x32
c0029338:	50                   	push   eax
c0029339:	e8 09 d3 fd ff       	call   c0006647 <iso_close>
c002933e:	83 c4 10             	add    esp,0x10
c0029341:	31 c0                	xor    eax,eax
c0029343:	83 c4 0c             	add    esp,0xc
c0029346:	c3                   	ret    
c0029347:	90                   	nop

c0029348 <ISO9660::openDir(char const*, void**)>:
c0029348:	56                   	push   esi
c0029349:	53                   	push   ebx
c002934a:	50                   	push   eax
c002934b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002934f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0029353:	85 db                	test   ebx,ebx
c0029355:	0f 84 bd 00 00 00    	je     c0029418 <ISO9660::openDir(char const*, void**)+0xd0>
c002935b:	85 f6                	test   esi,esi
c002935d:	0f 84 b5 00 00 00    	je     c0029418 <ISO9660::openDir(char const*, void**)+0xd0>
c0029363:	8a 13                	mov    dl,BYTE PTR [ebx]
c0029365:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c002936c:	38 15 80 03 04 c0    	cmp    BYTE PTR ds:0xc0040380,dl
c0029372:	74 1b                	je     c002938f <ISO9660::openDir(char const*, void**)+0x47>
c0029374:	85 c0                	test   eax,eax
c0029376:	74 10                	je     c0029388 <ISO9660::openDir(char const*, void**)+0x40>
c0029378:	83 ec 0c             	sub    esp,0xc
c002937b:	68 4d 2f 03 c0       	push   0xc0032f4d
c0029380:	e8 c6 6c ff ff       	call   c002004b <KePanic(char const*)>
c0029385:	83 c4 10             	add    esp,0x10
c0029388:	8a 03                	mov    al,BYTE PTR [ebx]
c002938a:	a2 80 03 04 c0       	mov    ds:0xc0040380,al
c002938f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029392:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0029399:	85 c0                	test   eax,eax
c002939b:	74 10                	je     c00293ad <ISO9660::openDir(char const*, void**)+0x65>
c002939d:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00293a4:	74 1a                	je     c00293c0 <ISO9660::openDir(char const*, void**)+0x78>
c00293a6:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00293ad:	83 ec 0c             	sub    esp,0xc
c00293b0:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c00293b7:	50                   	push   eax
c00293b8:	e8 39 d7 fd ff       	call   c0006af6 <init_percd>
c00293bd:	83 c4 10             	add    esp,0x10
c00293c0:	83 c3 03             	add    ebx,0x3
c00293c3:	50                   	push   eax
c00293c4:	50                   	push   eax
c00293c5:	6a 01                	push   0x1
c00293c7:	53                   	push   ebx
c00293c8:	e8 f0 d1 fd ff       	call   c00065bd <iso_open>
c00293cd:	83 c4 10             	add    esp,0x10
c00293d0:	89 c3                	mov    ebx,eax
c00293d2:	83 f8 ff             	cmp    eax,0xffffffff
c00293d5:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00293da:	75 1c                	jne    c00293f8 <ISO9660::openDir(char const*, void**)+0xb0>
c00293dc:	53                   	push   ebx
c00293dd:	53                   	push   ebx
c00293de:	68 f5 2f 03 c0       	push   0xc0032ff5
c00293e3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00293e9:	e8 b4 de fe ff       	call   c00172a2 <VgaText::puts(char const*)>
c00293ee:	83 c4 10             	add    esp,0x10
c00293f1:	b8 01 00 00 00       	mov    eax,0x1
c00293f6:	eb 25                	jmp    c002941d <ISO9660::openDir(char const*, void**)+0xd5>
c00293f8:	01 db                	add    ebx,ebx
c00293fa:	51                   	push   ecx
c00293fb:	83 c3 65             	add    ebx,0x65
c00293fe:	51                   	push   ecx
c00293ff:	68 08 30 03 c0       	push   0xc0033008
c0029404:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c002940a:	e8 93 de fe ff       	call   c00172a2 <VgaText::puts(char const*)>
c002940f:	89 1e                	mov    DWORD PTR [esi],ebx
c0029411:	83 c4 10             	add    esp,0x10
c0029414:	31 c0                	xor    eax,eax
c0029416:	eb 05                	jmp    c002941d <ISO9660::openDir(char const*, void**)+0xd5>
c0029418:	b8 04 00 00 00       	mov    eax,0x4
c002941d:	5a                   	pop    edx
c002941e:	5b                   	pop    ebx
c002941f:	5e                   	pop    esi
c0029420:	c3                   	ret    
c0029421:	90                   	nop

c0029422 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0029422:	55                   	push   ebp
c0029423:	57                   	push   edi
c0029424:	56                   	push   esi
c0029425:	53                   	push   ebx
c0029426:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002942c:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0029433:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c002943a:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0029442:	0f 84 e7 00 00 00    	je     c002952f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c0029448:	85 db                	test   ebx,ebx
c002944a:	0f 84 df 00 00 00    	je     c002952f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c0029450:	83 ec 0c             	sub    esp,0xc
c0029453:	68 1b 30 03 c0       	push   0xc003301b
c0029458:	e8 e4 fc fe ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c002945d:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0029464:	b9 02 00 00 00       	mov    ecx,0x2
c0029469:	99                   	cdq    
c002946a:	f7 f9                	idiv   ecx
c002946c:	83 e8 32             	sub    eax,0x32
c002946f:	89 04 24             	mov    DWORD PTR [esp],eax
c0029472:	e8 0b d4 fd ff       	call   c0006882 <iso_readdir>
c0029477:	83 c4 10             	add    esp,0x10
c002947a:	89 c6                	mov    esi,eax
c002947c:	85 c0                	test   eax,eax
c002947e:	75 37                	jne    c00294b7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c0029480:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0029485:	56                   	push   esi
c0029486:	56                   	push   esi
c0029487:	68 26 30 03 c0       	push   0xc0033026
c002948c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029492:	e8 0b de fe ff       	call   c00172a2 <VgaText::puts(char const*)>
c0029497:	83 c4 0c             	add    esp,0xc
c002949a:	68 10 01 00 00       	push   0x110
c002949f:	6a 00                	push   0x0
c00294a1:	57                   	push   edi
c00294a2:	e8 49 70 fd ff       	call   c00004f0 <memset>
c00294a7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00294ad:	83 c4 10             	add    esp,0x10
c00294b0:	b8 01 00 00 00       	mov    eax,0x1
c00294b5:	eb 7d                	jmp    c0029534 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c00294b7:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c00294bd:	8d 68 08             	lea    ebp,[eax+0x8]
c00294c0:	83 ec 0c             	sub    esp,0xc
c00294c3:	55                   	push   ebp
c00294c4:	e8 a7 70 fd ff       	call   c0000570 <strlen>
c00294c9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00294d1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00294d5:	83 c4 10             	add    esp,0x10
c00294d8:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c00294dc:	75 0a                	jne    c00294e8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c00294de:	b8 02 00 00 00       	mov    eax,0x2
c00294e3:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c00294e6:	74 05                	je     c00294ed <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c00294e8:	b8 01 00 00 00       	mov    eax,0x1
c00294ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00294f1:	50                   	push   eax
c00294f2:	50                   	push   eax
c00294f3:	55                   	push   ebp
c00294f4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00294f8:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00294fc:	50                   	push   eax
c00294fd:	e8 3e 71 fd ff       	call   c0000640 <strcpy>
c0029502:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0029509:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002950b:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0029511:	5a                   	pop    edx
c0029512:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0029517:	59                   	pop    ecx
c0029518:	68 39 30 03 c0       	push   0xc0033039
c002951d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029523:	e8 7a dd fe ff       	call   c00172a2 <VgaText::puts(char const*)>
c0029528:	83 c4 10             	add    esp,0x10
c002952b:	31 c0                	xor    eax,eax
c002952d:	eb 05                	jmp    c0029534 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c002952f:	b8 04 00 00 00       	mov    eax,0x4
c0029534:	81 c4 1c 01 00 00    	add    esp,0x11c
c002953a:	5b                   	pop    ebx
c002953b:	5e                   	pop    esi
c002953c:	5f                   	pop    edi
c002953d:	5d                   	pop    ebp
c002953e:	c3                   	ret    

c002953f <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c002953f:	57                   	push   edi
c0029540:	56                   	push   esi
c0029541:	53                   	push   ebx
c0029542:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0029546:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002954a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c002954e:	39 35 84 03 04 c0    	cmp    DWORD PTR ds:0xc0040384,esi
c0029554:	0f be cb             	movsx  ecx,bl
c0029557:	75 0b                	jne    c0029564 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c0029559:	0f be 05 80 42 03 c0 	movsx  eax,BYTE PTR ds:0xc0034280
c0029560:	39 c8                	cmp    eax,ecx
c0029562:	74 47                	je     c00295ab <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0029564:	83 ec 0c             	sub    esp,0xc
c0029567:	31 d2                	xor    edx,edx
c0029569:	68 a0 03 04 c0       	push   0xc00403a0
c002956e:	6a 01                	push   0x1
c0029570:	52                   	push   edx
c0029571:	56                   	push   esi
c0029572:	ff 34 8d 7c f2 03 c0 	push   DWORD PTR [ecx*4-0x3ffc0d84]
c0029579:	e8 36 30 ff ff       	call   c001c5b4 <LogicalDisk::read(unsigned long long, int, void*)>
c002957e:	83 c4 20             	add    esp,0x20
c0029581:	85 c0                	test   eax,eax
c0029583:	75 0e                	jne    c0029593 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c0029585:	89 35 84 03 04 c0    	mov    DWORD PTR ds:0xc0040384,esi
c002958b:	88 1d 80 42 03 c0    	mov    BYTE PTR ds:0xc0034280,bl
c0029591:	eb 18                	jmp    c00295ab <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0029593:	50                   	push   eax
c0029594:	68 00 08 00 00       	push   0x800
c0029599:	6a 00                	push   0x0
c002959b:	57                   	push   edi
c002959c:	e8 4f 6f fd ff       	call   c00004f0 <memset>
c00295a1:	83 c4 10             	add    esp,0x10
c00295a4:	b8 01 00 00 00       	mov    eax,0x1
c00295a9:	eb 0e                	jmp    c00295b9 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c00295ab:	be a0 03 04 c0       	mov    esi,0xc00403a0
c00295b0:	b9 00 08 00 00       	mov    ecx,0x800
c00295b5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00295b7:	31 c0                	xor    eax,eax
c00295b9:	5b                   	pop    ebx
c00295ba:	5e                   	pop    esi
c00295bb:	5f                   	pop    edi
c00295bc:	c3                   	ret    
c00295bd:	90                   	nop

c00295be <ISO9660::tryMount(LogicalDisk*, int)>:
c00295be:	53                   	push   ebx
c00295bf:	81 ec 0c 08 00 00    	sub    esp,0x80c
c00295c5:	c7 05 84 03 04 c0 ef be ad de 	mov    DWORD PTR ds:0xc0040384,0xdeadbeef
c00295cf:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c00295d6:	8d 58 41             	lea    ebx,[eax+0x41]
c00295d9:	0f be db             	movsx  ebx,bl
c00295dc:	53                   	push   ebx
c00295dd:	8d 44 24 08          	lea    eax,[esp+0x8]
c00295e1:	50                   	push   eax
c00295e2:	6a 10                	push   0x10
c00295e4:	e8 56 ff ff ff       	call   c002953f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00295e9:	83 c4 10             	add    esp,0x10
c00295ec:	31 d2                	xor    edx,edx
c00295ee:	85 c0                	test   eax,eax
c00295f0:	75 33                	jne    c0029625 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00295f2:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00295f7:	75 2c                	jne    c0029625 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00295f9:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00295fe:	75 25                	jne    c0029625 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029600:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0029605:	75 1e                	jne    c0029625 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029607:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c002960c:	75 17                	jne    c0029625 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c002960e:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0029613:	75 10                	jne    c0029625 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029615:	83 ec 0c             	sub    esp,0xc
c0029618:	53                   	push   ebx
c0029619:	e8 d8 d4 fd ff       	call   c0006af6 <init_percd>
c002961e:	83 c4 10             	add    esp,0x10
c0029621:	40                   	inc    eax
c0029622:	0f 95 c2             	setne  dl
c0029625:	88 d0                	mov    al,dl
c0029627:	81 c4 08 08 00 00    	add    esp,0x808
c002962d:	5b                   	pop    ebx
c002962e:	c3                   	ret    
c002962f:	90                   	nop

c0029630 <ISO9660::ISO9660()>:
c0029630:	83 ec 0c             	sub    esp,0xc
c0029633:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029637:	83 ec 0c             	sub    esp,0xc
c002963a:	50                   	push   eax
c002963b:	e8 66 09 ff ff       	call   c0019fa6 <Filesystem::Filesystem()>
c0029640:	83 c4 10             	add    esp,0x10
c0029643:	ba 54 30 03 c0       	mov    edx,0xc0033054
c0029648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002964c:	89 10                	mov    DWORD PTR [eax],edx
c002964e:	e8 b5 d5 fd ff       	call   c0006c08 <fs_iso9660_init>
c0029653:	90                   	nop
c0029654:	83 c4 0c             	add    esp,0xc
c0029657:	c3                   	ret    

c0029658 <SoundCard::beginPlayback()>:
c0029658:	c7 44 24 04 b8 30 03 c0 	mov    DWORD PTR [esp+0x4],0xc00330b8
c0029660:	e9 e6 69 ff ff       	jmp    c002004b <KePanic(char const*)>
c0029665:	90                   	nop

c0029666 <SoundCard::stopPlayback()>:
c0029666:	c7 44 24 04 b8 30 03 c0 	mov    DWORD PTR [esp+0x4],0xc00330b8
c002966e:	e9 d8 69 ff ff       	jmp    c002004b <KePanic(char const*)>
c0029673:	90                   	nop

c0029674 <SoundCard::SoundCard(char const*)>:
c0029674:	83 ec 1c             	sub    esp,0x1c
c0029677:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002967b:	83 ec 08             	sub    esp,0x8
c002967e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0029682:	50                   	push   eax
c0029683:	e8 9c 1c ff ff       	call   c001b324 <Device::Device(char const*)>
c0029688:	83 c4 10             	add    esp,0x10
c002968b:	ba 04 31 03 c0       	mov    edx,0xc0033104
c0029690:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029694:	89 10                	mov    DWORD PTR [eax],edx
c0029696:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002969a:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c00296a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00296a5:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c00296af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00296b3:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c00296bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00296c1:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c00296cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00296cf:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00296d9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00296e1:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00296e6:	7f 1a                	jg     c0029702 <SoundCard::SoundCard(char const*)+0x8e>
c00296e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00296ec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00296f0:	83 c2 54             	add    edx,0x54
c00296f3:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00296fb:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0029700:	eb df                	jmp    c00296e1 <SoundCard::SoundCard(char const*)+0x6d>
c0029702:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029706:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c002970d:	90                   	nop
c002970e:	83 c4 1c             	add    esp,0x1c
c0029711:	c3                   	ret    

c0029712 <SoundCard::~SoundCard()>:
c0029712:	83 ec 0c             	sub    esp,0xc
c0029715:	ba 04 31 03 c0       	mov    edx,0xc0033104
c002971a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002971e:	89 10                	mov    DWORD PTR [eax],edx
c0029720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029724:	83 ec 0c             	sub    esp,0xc
c0029727:	50                   	push   eax
c0029728:	e8 97 19 ff ff       	call   c001b0c4 <Device::~Device()>
c002972d:	83 c4 10             	add    esp,0x10
c0029730:	90                   	nop
c0029731:	83 c4 0c             	add    esp,0xc
c0029734:	c3                   	ret    
c0029735:	90                   	nop

c0029736 <SoundCard::~SoundCard()>:
c0029736:	83 ec 0c             	sub    esp,0xc
c0029739:	83 ec 0c             	sub    esp,0xc
c002973c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029740:	e8 cd ff ff ff       	call   c0029712 <SoundCard::~SoundCard()>
c0029745:	83 c4 10             	add    esp,0x10
c0029748:	83 ec 08             	sub    esp,0x8
c002974b:	68 e8 01 00 00       	push   0x1e8
c0029750:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029754:	e8 bb f8 fe ff       	call   c0019014 <operator delete(void*, unsigned long)>
c0029759:	83 c4 10             	add    esp,0x10
c002975c:	83 c4 0c             	add    esp,0xc
c002975f:	c3                   	ret    

c0029760 <SoundCard::configureRates(int, int, int)>:
c0029760:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0029764:	31 c0                	xor    eax,eax
c0029766:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c002976d:	75 20                	jne    c002978f <SoundCard::configureRates(int, int, int)+0x2f>
c002976f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029773:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0029779:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002977d:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0029783:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029787:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c002978d:	b0 01                	mov    al,0x1
c002978f:	c3                   	ret    

c0029790 <SoundCard::getSamples16(int, short*)>:
c0029790:	55                   	push   ebp
c0029791:	57                   	push   edi
c0029792:	31 ff                	xor    edi,edi
c0029794:	56                   	push   esi
c0029795:	53                   	push   ebx
c0029796:	31 db                	xor    ebx,ebx
c0029798:	83 ec 10             	sub    esp,0x10
c002979b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002979f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00297a3:	8d 04 36             	lea    eax,[esi+esi*1]
c00297a6:	50                   	push   eax
c00297a7:	6a 00                	push   0x0
c00297a9:	55                   	push   ebp
c00297aa:	e8 41 6d fd ff       	call   c00004f0 <memset>
c00297af:	83 c4 10             	add    esp,0x10
c00297b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00297b6:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c00297bd:	85 c0                	test   eax,eax
c00297bf:	74 1b                	je     c00297dc <SoundCard::getSamples16(int, short*)+0x4c>
c00297c1:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c00297c5:	75 15                	jne    c00297dc <SoundCard::getSamples16(int, short*)+0x4c>
c00297c7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00297cb:	55                   	push   ebp
c00297cc:	56                   	push   esi
c00297cd:	50                   	push   eax
c00297ce:	e8 f1 02 00 00       	call   c0029ac4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c00297d3:	83 c4 10             	add    esp,0x10
c00297d6:	39 c7                	cmp    edi,eax
c00297d8:	7d 02                	jge    c00297dc <SoundCard::getSamples16(int, short*)+0x4c>
c00297da:	89 c7                	mov    edi,eax
c00297dc:	43                   	inc    ebx
c00297dd:	83 fb 20             	cmp    ebx,0x20
c00297e0:	75 d0                	jne    c00297b2 <SoundCard::getSamples16(int, short*)+0x22>
c00297e2:	83 c4 0c             	add    esp,0xc
c00297e5:	89 f8                	mov    eax,edi
c00297e7:	5b                   	pop    ebx
c00297e8:	5e                   	pop    esi
c00297e9:	5f                   	pop    edi
c00297ea:	5d                   	pop    ebp
c00297eb:	c3                   	ret    

c00297ec <SoundCard::getSamples32(int, int*)>:
c00297ec:	55                   	push   ebp
c00297ed:	57                   	push   edi
c00297ee:	31 ff                	xor    edi,edi
c00297f0:	56                   	push   esi
c00297f1:	31 f6                	xor    esi,esi
c00297f3:	53                   	push   ebx
c00297f4:	83 ec 10             	sub    esp,0x10
c00297f7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00297fb:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00297ff:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0029803:	c1 e0 02             	shl    eax,0x2
c0029806:	50                   	push   eax
c0029807:	6a 00                	push   0x0
c0029809:	55                   	push   ebp
c002980a:	e8 e1 6c fd ff       	call   c00004f0 <memset>
c002980f:	83 c4 10             	add    esp,0x10
c0029812:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0029819:	85 c0                	test   eax,eax
c002981b:	74 1b                	je     c0029838 <SoundCard::getSamples32(int, int*)+0x4c>
c002981d:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0029821:	75 15                	jne    c0029838 <SoundCard::getSamples32(int, int*)+0x4c>
c0029823:	53                   	push   ebx
c0029824:	55                   	push   ebp
c0029825:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0029829:	50                   	push   eax
c002982a:	e8 61 03 00 00       	call   c0029b90 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c002982f:	83 c4 10             	add    esp,0x10
c0029832:	39 c6                	cmp    esi,eax
c0029834:	7d 02                	jge    c0029838 <SoundCard::getSamples32(int, int*)+0x4c>
c0029836:	89 c6                	mov    esi,eax
c0029838:	47                   	inc    edi
c0029839:	83 ff 20             	cmp    edi,0x20
c002983c:	75 d4                	jne    c0029812 <SoundCard::getSamples32(int, int*)+0x26>
c002983e:	85 f6                	test   esi,esi
c0029840:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c0029847:	75 0f                	jne    c0029858 <SoundCard::getSamples32(int, int*)+0x6c>
c0029849:	85 c0                	test   eax,eax
c002984b:	74 1b                	je     c0029868 <SoundCard::getSamples32(int, int*)+0x7c>
c002984d:	83 ec 0c             	sub    esp,0xc
c0029850:	8b 03                	mov    eax,DWORD PTR [ebx]
c0029852:	53                   	push   ebx
c0029853:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0029856:	eb 0d                	jmp    c0029865 <SoundCard::getSamples32(int, int*)+0x79>
c0029858:	85 c0                	test   eax,eax
c002985a:	75 0c                	jne    c0029868 <SoundCard::getSamples32(int, int*)+0x7c>
c002985c:	83 ec 0c             	sub    esp,0xc
c002985f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0029861:	53                   	push   ebx
c0029862:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0029865:	83 c4 10             	add    esp,0x10
c0029868:	83 c4 0c             	add    esp,0xc
c002986b:	89 f0                	mov    eax,esi
c002986d:	5b                   	pop    ebx
c002986e:	5e                   	pop    esi
c002986f:	5f                   	pop    edi
c0029870:	5d                   	pop    ebp
c0029871:	c3                   	ret    

c0029872 <SoundCard::addChannel(SoundPort*)>:
c0029872:	83 ec 0c             	sub    esp,0xc
c0029875:	31 c0                	xor    eax,eax
c0029877:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002987b:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0029883:	74 1b                	je     c00298a0 <SoundCard::addChannel(SoundPort*)+0x2e>
c0029885:	40                   	inc    eax
c0029886:	83 f8 20             	cmp    eax,0x20
c0029889:	75 f0                	jne    c002987b <SoundCard::addChannel(SoundPort*)+0x9>
c002988b:	83 ec 0c             	sub    esp,0xc
c002988e:	68 dd 30 03 c0       	push   0xc00330dd
c0029893:	e8 b3 67 ff ff       	call   c002004b <KePanic(char const*)>
c0029898:	83 c4 10             	add    esp,0x10
c002989b:	83 c8 ff             	or     eax,0xffffffff
c002989e:	eb 0b                	jmp    c00298ab <SoundCard::addChannel(SoundPort*)+0x39>
c00298a0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00298a4:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c00298ab:	83 c4 0c             	add    esp,0xc
c00298ae:	c3                   	ret    
c00298af:	90                   	nop

c00298b0 <SoundCard::removeChannel(int)>:
c00298b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00298b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00298b8:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c00298c3:	c3                   	ret    

c00298c4 <SoundPort::SoundPort(int, int, int, int)>:
c00298c4:	83 ec 0c             	sub    esp,0xc
c00298c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298cb:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00298d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298d6:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c00298da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298de:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00298e2:	89 10                	mov    DWORD PTR [eax],edx
c00298e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00298ec:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00298ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298f3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00298f7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00298fa:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c00298ff:	75 13                	jne    c0029914 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0029901:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029905:	8b 00                	mov    eax,DWORD PTR [eax]
c0029907:	05 a0 0f 00 00       	add    eax,0xfa0
c002990c:	01 c0                	add    eax,eax
c002990e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0029912:	66 90                	xchg   ax,ax
c0029914:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029918:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002991c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002991f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029923:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c002992a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002992e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0029931:	c1 e0 02             	shl    eax,0x2
c0029934:	83 ec 0c             	sub    esp,0xc
c0029937:	50                   	push   eax
c0029938:	e8 75 c9 fe ff       	call   c00162b2 <malloc>
c002993d:	83 c4 10             	add    esp,0x10
c0029940:	89 c2                	mov    edx,eax
c0029942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029946:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0029949:	90                   	nop
c002994a:	83 c4 0c             	add    esp,0xc
c002994d:	c3                   	ret    
c002994e:	66 90                	xchg   ax,ax

c0029950 <SoundPort::~SoundPort()>:
c0029950:	83 ec 0c             	sub    esp,0xc
c0029953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029957:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002995a:	85 c0                	test   eax,eax
c002995c:	74 1e                	je     c002997c <SoundPort::~SoundPort()+0x2c>
c002995e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029962:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0029965:	83 ec 0c             	sub    esp,0xc
c0029968:	50                   	push   eax
c0029969:	e8 54 c9 fe ff       	call   c00162c2 <free>
c002996e:	83 c4 10             	add    esp,0x10
c0029971:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029975:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c002997c:	90                   	nop
c002997d:	83 c4 0c             	add    esp,0xc
c0029980:	c3                   	ret    
c0029981:	90                   	nop
c0029982:	66 90                	xchg   ax,ax

c0029984 <SoundPort::unpause()>:
c0029984:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029988:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c002998c:	c3                   	ret    
c002998d:	90                   	nop
c002998e:	66 90                	xchg   ax,ax

c0029990 <SoundPort::pause()>:
c0029990:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029994:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0029998:	c3                   	ret    
c0029999:	90                   	nop
c002999a:	66 90                	xchg   ax,ax

c002999c <SoundPort::getBufferUsed()>:
c002999c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00299a0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00299a3:	c3                   	ret    

c00299a4 <SoundPort::getBufferSize()>:
c00299a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00299a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00299ab:	c3                   	ret    

c00299ac <SoundPort::buffer16(short*, int)>:
c00299ac:	55                   	push   ebp
c00299ad:	57                   	push   edi
c00299ae:	56                   	push   esi
c00299af:	53                   	push   ebx
c00299b0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00299b4:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00299b8:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00299bb:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c00299be:	74 68                	je     c0029a28 <SoundPort::buffer16(short*, int)+0x7c>
c00299c0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00299c4:	85 c9                	test   ecx,ecx
c00299c6:	7e 60                	jle    c0029a28 <SoundPort::buffer16(short*, int)+0x7c>
c00299c8:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c00299cc:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c00299cf:	c1 e1 0f             	shl    ecx,0xf
c00299d2:	8d 70 01             	lea    esi,[eax+0x1]
c00299d5:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c00299d8:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c00299db:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00299de:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00299e1:	74 4d                	je     c0029a30 <SoundPort::buffer16(short*, int)+0x84>
c00299e3:	31 f6                	xor    esi,esi
c00299e5:	eb 21                	jmp    c0029a08 <SoundPort::buffer16(short*, int)+0x5c>
c00299e7:	90                   	nop
c00299e8:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c00299ed:	8d 79 01             	lea    edi,[ecx+0x1]
c00299f0:	c1 e3 0f             	shl    ebx,0xf
c00299f3:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c00299f6:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c00299f9:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c00299fc:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00299ff:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029a02:	74 1c                	je     c0029a20 <SoundPort::buffer16(short*, int)+0x74>
c0029a04:	89 c6                	mov    esi,eax
c0029a06:	66 90                	xchg   ax,ax
c0029a08:	8d 46 01             	lea    eax,[esi+0x1]
c0029a0b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0029a0f:	75 d7                	jne    c00299e8 <SoundPort::buffer16(short*, int)+0x3c>
c0029a11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0029a15:	8d 76 00             	lea    esi,[esi+0x0]
c0029a18:	5b                   	pop    ebx
c0029a19:	5e                   	pop    esi
c0029a1a:	5f                   	pop    edi
c0029a1b:	5d                   	pop    ebp
c0029a1c:	c3                   	ret    
c0029a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0029a20:	5b                   	pop    ebx
c0029a21:	8d 46 02             	lea    eax,[esi+0x2]
c0029a24:	5e                   	pop    esi
c0029a25:	5f                   	pop    edi
c0029a26:	5d                   	pop    ebp
c0029a27:	c3                   	ret    
c0029a28:	5b                   	pop    ebx
c0029a29:	31 c0                	xor    eax,eax
c0029a2b:	5e                   	pop    esi
c0029a2c:	5f                   	pop    edi
c0029a2d:	5d                   	pop    ebp
c0029a2e:	c3                   	ret    
c0029a2f:	90                   	nop
c0029a30:	b8 01 00 00 00       	mov    eax,0x1
c0029a35:	eb e1                	jmp    c0029a18 <SoundPort::buffer16(short*, int)+0x6c>
c0029a37:	90                   	nop

c0029a38 <SoundPort::buffer32(int*, int)>:
c0029a38:	55                   	push   ebp
c0029a39:	57                   	push   edi
c0029a3a:	56                   	push   esi
c0029a3b:	53                   	push   ebx
c0029a3c:	83 ec 04             	sub    esp,0x4
c0029a3f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0029a43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029a47:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029a4a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0029a4e:	89 04 24             	mov    DWORD PTR [esp],eax
c0029a51:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029a54:	74 5a                	je     c0029ab0 <SoundPort::buffer32(int*, int)+0x78>
c0029a56:	85 c0                	test   eax,eax
c0029a58:	7e 56                	jle    c0029ab0 <SoundPort::buffer32(int*, int)+0x78>
c0029a5a:	8d 71 01             	lea    esi,[ecx+0x1]
c0029a5d:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0029a60:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0029a63:	8b 37                	mov    esi,DWORD PTR [edi]
c0029a65:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0029a68:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029a6b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029a6e:	74 4c                	je     c0029abc <SoundPort::buffer32(int*, int)+0x84>
c0029a70:	31 f6                	xor    esi,esi
c0029a72:	eb 1c                	jmp    c0029a90 <SoundPort::buffer32(int*, int)+0x58>
c0029a74:	8d 69 01             	lea    ebp,[ecx+0x1]
c0029a77:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0029a7a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0029a7d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0029a80:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0029a84:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029a87:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029a8a:	74 18                	je     c0029aa4 <SoundPort::buffer32(int*, int)+0x6c>
c0029a8c:	89 de                	mov    esi,ebx
c0029a8e:	66 90                	xchg   ax,ax
c0029a90:	8d 5e 01             	lea    ebx,[esi+0x1]
c0029a93:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0029a96:	75 dc                	jne    c0029a74 <SoundPort::buffer32(int*, int)+0x3c>
c0029a98:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0029a9b:	90                   	nop
c0029a9c:	83 c4 04             	add    esp,0x4
c0029a9f:	5b                   	pop    ebx
c0029aa0:	5e                   	pop    esi
c0029aa1:	5f                   	pop    edi
c0029aa2:	5d                   	pop    ebp
c0029aa3:	c3                   	ret    
c0029aa4:	83 c4 04             	add    esp,0x4
c0029aa7:	8d 46 02             	lea    eax,[esi+0x2]
c0029aaa:	5b                   	pop    ebx
c0029aab:	5e                   	pop    esi
c0029aac:	5f                   	pop    edi
c0029aad:	5d                   	pop    ebp
c0029aae:	c3                   	ret    
c0029aaf:	90                   	nop
c0029ab0:	83 c4 04             	add    esp,0x4
c0029ab3:	31 c0                	xor    eax,eax
c0029ab5:	5b                   	pop    ebx
c0029ab6:	5e                   	pop    esi
c0029ab7:	5f                   	pop    edi
c0029ab8:	5d                   	pop    ebp
c0029ab9:	c3                   	ret    
c0029aba:	66 90                	xchg   ax,ax
c0029abc:	b8 01 00 00 00       	mov    eax,0x1
c0029ac1:	eb d9                	jmp    c0029a9c <SoundPort::buffer32(int*, int)+0x64>
c0029ac3:	90                   	nop

c0029ac4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0029ac4:	57                   	push   edi
c0029ac5:	56                   	push   esi
c0029ac6:	53                   	push   ebx
c0029ac7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0029acb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0029acf:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0029ad5:	39 03                	cmp    DWORD PTR [ebx],eax
c0029ad7:	74 13                	je     c0029aec <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0029ad9:	83 ec 0c             	sub    esp,0xc
c0029adc:	68 30 31 03 c0       	push   0xc0033130
c0029ae1:	e8 65 65 ff ff       	call   c002004b <KePanic(char const*)>
c0029ae6:	83 c4 10             	add    esp,0x10
c0029ae9:	8d 76 00             	lea    esi,[esi+0x0]
c0029aec:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c0029af2:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0029af5:	74 11                	je     c0029b08 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c0029af7:	83 ec 0c             	sub    esp,0xc
c0029afa:	68 6f 31 03 c0       	push   0xc003316f
c0029aff:	e8 47 65 ff ff       	call   c002004b <KePanic(char const*)>
c0029b04:	83 c4 10             	add    esp,0x10
c0029b07:	90                   	nop
c0029b08:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c0029b0e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0029b11:	74 11                	je     c0029b24 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c0029b13:	83 ec 0c             	sub    esp,0xc
c0029b16:	68 6f 31 03 c0       	push   0xc003316f
c0029b1b:	e8 2b 65 ff ff       	call   c002004b <KePanic(char const*)>
c0029b20:	83 c4 10             	add    esp,0x10
c0029b23:	90                   	nop
c0029b24:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0029b27:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c0029b2b:	7e 07                	jle    c0029b34 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0029b2d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0029b31:	8d 76 00             	lea    esi,[esi+0x0]
c0029b34:	85 f6                	test   esi,esi
c0029b36:	7e 2c                	jle    c0029b64 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0029b38:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0029b3c:	8d 3c 36             	lea    edi,[esi+esi*1]
c0029b3f:	31 c9                	xor    ecx,ecx
c0029b41:	01 d7                	add    edi,edx
c0029b43:	90                   	nop
c0029b44:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0029b47:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c0029b4a:	85 c0                	test   eax,eax
c0029b4c:	79 06                	jns    c0029b54 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c0029b4e:	05 ff 7f 00 00       	add    eax,0x7fff
c0029b53:	90                   	nop
c0029b54:	c1 f8 0f             	sar    eax,0xf
c0029b57:	83 c1 04             	add    ecx,0x4
c0029b5a:	66 01 02             	add    WORD PTR [edx],ax
c0029b5d:	83 c2 02             	add    edx,0x2
c0029b60:	39 d7                	cmp    edi,edx
c0029b62:	75 e0                	jne    c0029b44 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0029b64:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0029b67:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0029b6a:	83 ec 04             	sub    esp,0x4
c0029b6d:	29 f0                	sub    eax,esi
c0029b6f:	c1 e0 02             	shl    eax,0x2
c0029b72:	50                   	push   eax
c0029b73:	8d 04 b2             	lea    eax,[edx+esi*4]
c0029b76:	50                   	push   eax
c0029b77:	52                   	push   edx
c0029b78:	e8 53 68 fd ff       	call   c00003d0 <memmove>
c0029b7d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0029b80:	83 c4 10             	add    esp,0x10
c0029b83:	29 f0                	sub    eax,esi
c0029b85:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0029b88:	89 f0                	mov    eax,esi
c0029b8a:	5b                   	pop    ebx
c0029b8b:	5e                   	pop    esi
c0029b8c:	5f                   	pop    edi
c0029b8d:	c3                   	ret    
c0029b8e:	66 90                	xchg   ax,ax

c0029b90 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0029b90:	57                   	push   edi
c0029b91:	56                   	push   esi
c0029b92:	53                   	push   ebx
c0029b93:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0029b97:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0029b9b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0029b9f:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0029ba5:	39 06                	cmp    DWORD PTR [esi],eax
c0029ba7:	74 13                	je     c0029bbc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c0029ba9:	83 ec 0c             	sub    esp,0xc
c0029bac:	68 50 31 03 c0       	push   0xc0033150
c0029bb1:	e8 95 64 ff ff       	call   c002004b <KePanic(char const*)>
c0029bb6:	83 c4 10             	add    esp,0x10
c0029bb9:	8d 76 00             	lea    esi,[esi+0x0]
c0029bbc:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c0029bc2:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0029bc5:	74 11                	je     c0029bd8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c0029bc7:	83 ec 0c             	sub    esp,0xc
c0029bca:	68 8b 31 03 c0       	push   0xc003318b
c0029bcf:	e8 77 64 ff ff       	call   c002004b <KePanic(char const*)>
c0029bd4:	83 c4 10             	add    esp,0x10
c0029bd7:	90                   	nop
c0029bd8:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c0029bde:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0029be1:	74 11                	je     c0029bf4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c0029be3:	83 ec 0c             	sub    esp,0xc
c0029be6:	68 8b 31 03 c0       	push   0xc003318b
c0029beb:	e8 5b 64 ff ff       	call   c002004b <KePanic(char const*)>
c0029bf0:	83 c4 10             	add    esp,0x10
c0029bf3:	90                   	nop
c0029bf4:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0029bf7:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c0029bfb:	7e 07                	jle    c0029c04 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c0029bfd:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0029c01:	8d 76 00             	lea    esi,[esi+0x0]
c0029c04:	85 ff                	test   edi,edi
c0029c06:	7e 1c                	jle    c0029c24 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c0029c08:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0029c0f:	31 c0                	xor    eax,eax
c0029c11:	8d 76 00             	lea    esi,[esi+0x0]
c0029c14:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0029c17:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c0029c1a:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c0029c1d:	83 c0 04             	add    eax,0x4
c0029c20:	39 c1                	cmp    ecx,eax
c0029c22:	75 f0                	jne    c0029c14 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0029c24:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0029c27:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0029c2a:	83 ec 04             	sub    esp,0x4
c0029c2d:	29 f8                	sub    eax,edi
c0029c2f:	c1 e0 02             	shl    eax,0x2
c0029c32:	50                   	push   eax
c0029c33:	8d 04 ba             	lea    eax,[edx+edi*4]
c0029c36:	50                   	push   eax
c0029c37:	52                   	push   edx
c0029c38:	e8 93 67 fd ff       	call   c00003d0 <memmove>
c0029c3d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0029c40:	83 c4 10             	add    esp,0x10
c0029c43:	29 f8                	sub    eax,edi
c0029c45:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0029c48:	89 f8                	mov    eax,edi
c0029c4a:	5b                   	pop    ebx
c0029c4b:	5e                   	pop    esi
c0029c4c:	5f                   	pop    edi
c0029c4d:	c3                   	ret    

c0029c4e <PCI::open(int, int, void*)>:
c0029c4e:	83 ec 18             	sub    esp,0x18
c0029c51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0029c55:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0029c59:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0029c5f:	8b 10                	mov    edx,DWORD PTR [eax]
c0029c61:	50                   	push   eax
c0029c62:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0029c65:	31 c0                	xor    eax,eax
c0029c67:	83 c4 1c             	add    esp,0x1c
c0029c6a:	c3                   	ret    
c0029c6b:	90                   	nop

c0029c6c <PCI::close(int, int, void*)>:
c0029c6c:	31 c0                	xor    eax,eax
c0029c6e:	c3                   	ret    
c0029c6f:	90                   	nop

c0029c70 <PCI::PCI()>:
c0029c70:	83 ec 0c             	sub    esp,0xc
c0029c73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c77:	83 ec 08             	sub    esp,0x8
c0029c7a:	68 a7 31 03 c0       	push   0xc00331a7
c0029c7f:	50                   	push   eax
c0029c80:	e8 9f 0e ff ff       	call   c001ab24 <Bus::Bus(char const*)>
c0029c85:	83 c4 10             	add    esp,0x10
c0029c88:	ba 50 32 03 c0       	mov    edx,0xc0033250
c0029c8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c91:	89 10                	mov    DWORD PTR [eax],edx
c0029c93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c97:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0029ca1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ca5:	a3 a0 0b 04 c0       	mov    ds:0xc0040ba0,eax
c0029caa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029cae:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0029cb4:	0f b6 d0             	movzx  edx,al
c0029cb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029cbb:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0029cc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029cc6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0029ccc:	0f b6 d0             	movzx  edx,al
c0029ccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029cd3:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0029cd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029cdc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0029ce2:	8d 50 01             	lea    edx,[eax+0x1]
c0029ce5:	88 d1                	mov    cl,dl
c0029ce7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0029ceb:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0029cf1:	0f b6 d0             	movzx  edx,al
c0029cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029cf8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0029cfc:	83 c9 c0             	or     ecx,0xffffffc0
c0029cff:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0029d03:	90                   	nop
c0029d04:	83 c4 0c             	add    esp,0xc
c0029d07:	c3                   	ret    

c0029d08 <PCI::readBAR8(unsigned int, int)>:
c0029d08:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0029d0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0029d10:	f6 c2 01             	test   dl,0x1
c0029d13:	74 07                	je     c0029d1c <PCI::readBAR8(unsigned int, int)+0x14>
c0029d15:	83 e2 fc             	and    edx,0xfffffffc
c0029d18:	01 c2                	add    edx,eax
c0029d1a:	ec                   	in     al,dx
c0029d1b:	c3                   	ret    
c0029d1c:	83 e2 f0             	and    edx,0xfffffff0
c0029d1f:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0029d22:	c3                   	ret    
c0029d23:	90                   	nop

c0029d24 <PCI::readBAR16(unsigned int, int)>:
c0029d24:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0029d28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0029d2c:	f6 c2 01             	test   dl,0x1
c0029d2f:	74 08                	je     c0029d39 <PCI::readBAR16(unsigned int, int)+0x15>
c0029d31:	83 e2 fc             	and    edx,0xfffffffc
c0029d34:	01 c2                	add    edx,eax
c0029d36:	66 ed                	in     ax,dx
c0029d38:	c3                   	ret    
c0029d39:	83 e2 f0             	and    edx,0xfffffff0
c0029d3c:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0029d40:	c3                   	ret    
c0029d41:	90                   	nop

c0029d42 <PCI::readBAR32(unsigned int, int)>:
c0029d42:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0029d46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0029d4a:	f6 c2 01             	test   dl,0x1
c0029d4d:	74 07                	je     c0029d56 <PCI::readBAR32(unsigned int, int)+0x14>
c0029d4f:	83 e2 fc             	and    edx,0xfffffffc
c0029d52:	01 c2                	add    edx,eax
c0029d54:	ed                   	in     eax,dx
c0029d55:	c3                   	ret    
c0029d56:	83 e2 f0             	and    edx,0xfffffff0
c0029d59:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0029d5c:	c3                   	ret    
c0029d5d:	90                   	nop

c0029d5e <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0029d5e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0029d62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0029d66:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0029d6a:	f6 c2 01             	test   dl,0x1
c0029d6d:	74 07                	je     c0029d76 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0029d6f:	83 e2 fc             	and    edx,0xfffffffc
c0029d72:	01 ca                	add    edx,ecx
c0029d74:	ee                   	out    dx,al
c0029d75:	c3                   	ret    
c0029d76:	83 e2 f0             	and    edx,0xfffffff0
c0029d79:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0029d7c:	c3                   	ret    
c0029d7d:	90                   	nop

c0029d7e <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0029d7e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0029d82:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0029d86:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0029d8a:	f6 c2 01             	test   dl,0x1
c0029d8d:	74 08                	je     c0029d97 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0029d8f:	83 e2 fc             	and    edx,0xfffffffc
c0029d92:	01 ca                	add    edx,ecx
c0029d94:	66 ef                	out    dx,ax
c0029d96:	c3                   	ret    
c0029d97:	83 e2 f0             	and    edx,0xfffffff0
c0029d9a:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0029d9e:	c3                   	ret    
c0029d9f:	90                   	nop

c0029da0 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0029da0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0029da4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0029da8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0029dac:	f6 c2 01             	test   dl,0x1
c0029daf:	74 07                	je     c0029db8 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0029db1:	83 e2 fc             	and    edx,0xfffffffc
c0029db4:	01 ca                	add    edx,ecx
c0029db6:	ef                   	out    dx,eax
c0029db7:	c3                   	ret    
c0029db8:	83 e2 f0             	and    edx,0xfffffff0
c0029dbb:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0029dbe:	c3                   	ret    
c0029dbf:	90                   	nop

c0029dc0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0029dc0:	55                   	push   ebp
c0029dc1:	57                   	push   edi
c0029dc2:	56                   	push   esi
c0029dc3:	53                   	push   ebx
c0029dc4:	83 ec 0c             	sub    esp,0xc
c0029dc7:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c0029dcc:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0029dd0:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0029dd4:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0029dd8:	83 fe 07             	cmp    esi,0x7
c0029ddb:	76 10                	jbe    c0029ded <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0029ddd:	83 ec 0c             	sub    esp,0xc
c0029de0:	68 af 31 03 c0       	push   0xc00331af
c0029de5:	e8 61 62 ff ff       	call   c002004b <KePanic(char const*)>
c0029dea:	83 c4 10             	add    esp,0x10
c0029ded:	0f b6 db             	movzx  ebx,bl
c0029df0:	83 fb 0f             	cmp    ebx,0xf
c0029df3:	76 10                	jbe    c0029e05 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c0029df5:	83 ec 0c             	sub    esp,0xc
c0029df8:	68 df 31 03 c0       	push   0xc00331df
c0029dfd:	e8 49 62 ff ff       	call   c002004b <KePanic(char const*)>
c0029e02:	83 c4 10             	add    esp,0x10
c0029e05:	8d 04 36             	lea    eax,[esi+esi*1]
c0029e08:	ba f8 0c 00 00       	mov    edx,0xcf8
c0029e0d:	83 c8 f0             	or     eax,0xfffffff0
c0029e10:	ee                   	out    dx,al
c0029e11:	ba fa 0c 00 00       	mov    edx,0xcfa
c0029e16:	89 e8                	mov    eax,ebp
c0029e18:	ee                   	out    dx,al
c0029e19:	83 c4 0c             	add    esp,0xc
c0029e1c:	89 d8                	mov    eax,ebx
c0029e1e:	89 f9                	mov    ecx,edi
c0029e20:	c1 e0 08             	shl    eax,0x8
c0029e23:	0f b6 d9             	movzx  ebx,cl
c0029e26:	83 e3 fc             	and    ebx,0xfffffffc
c0029e29:	09 d8                	or     eax,ebx
c0029e2b:	5b                   	pop    ebx
c0029e2c:	0d 00 c0 ff ff       	or     eax,0xffffc000
c0029e31:	5e                   	pop    esi
c0029e32:	5f                   	pop    edi
c0029e33:	5d                   	pop    ebp
c0029e34:	c3                   	ret    
c0029e35:	90                   	nop

c0029e36 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0029e36:	57                   	push   edi
c0029e37:	56                   	push   esi
c0029e38:	53                   	push   ebx
c0029e39:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0029e3d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0029e41:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0029e47:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0029e4b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0029e4f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0029e53:	83 ff 01             	cmp    edi,0x1
c0029e56:	75 3f                	jne    c0029e97 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c0029e58:	89 de                	mov    esi,ebx
c0029e5a:	0f b6 c0             	movzx  eax,al
c0029e5d:	81 e6 fc 00 00 00    	and    esi,0xfc
c0029e63:	c1 e0 10             	shl    eax,0x10
c0029e66:	0f b6 c9             	movzx  ecx,cl
c0029e69:	09 f0                	or     eax,esi
c0029e6b:	c1 e1 08             	shl    ecx,0x8
c0029e6e:	0f b6 d2             	movzx  edx,dl
c0029e71:	09 c8                	or     eax,ecx
c0029e73:	c1 e2 0b             	shl    edx,0xb
c0029e76:	09 d0                	or     eax,edx
c0029e78:	ba f8 0c 00 00       	mov    edx,0xcf8
c0029e7d:	0d 00 00 00 80       	or     eax,0x80000000
c0029e82:	ef                   	out    dx,eax
c0029e83:	ba fc 0c 00 00       	mov    edx,0xcfc
c0029e88:	ed                   	in     eax,dx
c0029e89:	83 e3 02             	and    ebx,0x2
c0029e8c:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c0029e93:	d3 e8                	shr    eax,cl
c0029e95:	eb 44                	jmp    c0029edb <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c0029e97:	83 ff 02             	cmp    edi,0x2
c0029e9a:	75 2d                	jne    c0029ec9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c0029e9c:	83 ec 0c             	sub    esp,0xc
c0029e9f:	0f b6 c9             	movzx  ecx,cl
c0029ea2:	0f b6 d2             	movzx  edx,dl
c0029ea5:	0f b6 fb             	movzx  edi,bl
c0029ea8:	0f b6 c0             	movzx  eax,al
c0029eab:	57                   	push   edi
c0029eac:	51                   	push   ecx
c0029ead:	52                   	push   edx
c0029eae:	50                   	push   eax
c0029eaf:	56                   	push   esi
c0029eb0:	e8 0b ff ff ff       	call   c0029dc0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0029eb5:	89 c2                	mov    edx,eax
c0029eb7:	ed                   	in     eax,dx
c0029eb8:	83 e3 02             	and    ebx,0x2
c0029ebb:	83 c4 20             	add    esp,0x20
c0029ebe:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c0029ec5:	d3 e8                	shr    eax,cl
c0029ec7:	eb 12                	jmp    c0029edb <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c0029ec9:	83 ec 0c             	sub    esp,0xc
c0029ecc:	68 0f 32 03 c0       	push   0xc003320f
c0029ed1:	e8 75 61 ff ff       	call   c002004b <KePanic(char const*)>
c0029ed6:	83 c4 10             	add    esp,0x10
c0029ed9:	31 c0                	xor    eax,eax
c0029edb:	5b                   	pop    ebx
c0029edc:	5e                   	pop    esi
c0029edd:	5f                   	pop    edi
c0029ede:	c3                   	ret    
c0029edf:	90                   	nop

c0029ee0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0029ee0:	83 ec 18             	sub    esp,0x18
c0029ee3:	6a 00                	push   0x0
c0029ee5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0029eea:	50                   	push   eax
c0029eeb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0029ef0:	50                   	push   eax
c0029ef1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0029ef6:	50                   	push   eax
c0029ef7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0029efb:	e8 36 ff ff ff       	call   c0029e36 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0029f00:	83 c4 2c             	add    esp,0x2c
c0029f03:	c3                   	ret    

c0029f04 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0029f04:	83 ec 18             	sub    esp,0x18
c0029f07:	6a 0e                	push   0xe
c0029f09:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0029f0e:	50                   	push   eax
c0029f0f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0029f14:	50                   	push   eax
c0029f15:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0029f1a:	50                   	push   eax
c0029f1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0029f1f:	e8 12 ff ff ff       	call   c0029e36 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0029f24:	83 c4 2c             	add    esp,0x2c
c0029f27:	0f b6 c0             	movzx  eax,al
c0029f2a:	c3                   	ret    
c0029f2b:	90                   	nop

c0029f2c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0029f2c:	55                   	push   ebp
c0029f2d:	57                   	push   edi
c0029f2e:	56                   	push   esi
c0029f2f:	53                   	push   ebx
c0029f30:	83 ec 18             	sub    esp,0x18
c0029f33:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0029f38:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0029f3d:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0029f42:	6a 0a                	push   0xa
c0029f44:	56                   	push   esi
c0029f45:	55                   	push   ebp
c0029f46:	57                   	push   edi
c0029f47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0029f4b:	e8 e6 fe ff ff       	call   c0029e36 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0029f50:	83 c4 14             	add    esp,0x14
c0029f53:	89 c3                	mov    ebx,eax
c0029f55:	6a 0a                	push   0xa
c0029f57:	0f b6 db             	movzx  ebx,bl
c0029f5a:	56                   	push   esi
c0029f5b:	55                   	push   ebp
c0029f5c:	57                   	push   edi
c0029f5d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0029f61:	e8 d0 fe ff ff       	call   c0029e36 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0029f66:	83 c4 2c             	add    esp,0x2c
c0029f69:	25 00 ff 00 00       	and    eax,0xff00
c0029f6e:	09 d8                	or     eax,ebx
c0029f70:	5b                   	pop    ebx
c0029f71:	5e                   	pop    esi
c0029f72:	5f                   	pop    edi
c0029f73:	5d                   	pop    ebp
c0029f74:	c3                   	ret    
c0029f75:	90                   	nop

c0029f76 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0029f76:	83 ec 18             	sub    esp,0x18
c0029f79:	6a 08                	push   0x8
c0029f7b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0029f80:	50                   	push   eax
c0029f81:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0029f86:	50                   	push   eax
c0029f87:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0029f8c:	50                   	push   eax
c0029f8d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0029f91:	e8 a0 fe ff ff       	call   c0029e36 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0029f96:	83 c4 2c             	add    esp,0x2c
c0029f99:	0f b6 c4             	movzx  eax,ah
c0029f9c:	c3                   	ret    
c0029f9d:	90                   	nop

c0029f9e <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0029f9e:	83 ec 18             	sub    esp,0x18
c0029fa1:	6a 08                	push   0x8
c0029fa3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0029fa8:	50                   	push   eax
c0029fa9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0029fae:	50                   	push   eax
c0029faf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0029fb4:	50                   	push   eax
c0029fb5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0029fb9:	e8 78 fe ff ff       	call   c0029e36 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0029fbe:	83 c4 2c             	add    esp,0x2c
c0029fc1:	c3                   	ret    

c0029fc2 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0029fc2:	83 ec 18             	sub    esp,0x18
c0029fc5:	6a 3c                	push   0x3c
c0029fc7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0029fcc:	50                   	push   eax
c0029fcd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0029fd2:	50                   	push   eax
c0029fd3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0029fd8:	50                   	push   eax
c0029fd9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0029fdd:	e8 54 fe ff ff       	call   c0029e36 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0029fe2:	83 c4 2c             	add    esp,0x2c
c0029fe5:	c3                   	ret    

c0029fe6 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0029fe6:	83 ec 18             	sub    esp,0x18
c0029fe9:	6a 18                	push   0x18
c0029feb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0029ff0:	50                   	push   eax
c0029ff1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0029ff6:	50                   	push   eax
c0029ff7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0029ffc:	50                   	push   eax
c0029ffd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a001:	e8 30 fe ff ff       	call   c0029e36 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a006:	83 c4 2c             	add    esp,0x2c
c002a009:	0f b6 c4             	movzx  eax,ah
c002a00c:	c3                   	ret    
c002a00d:	90                   	nop

c002a00e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a00e:	55                   	push   ebp
c002a00f:	57                   	push   edi
c002a010:	56                   	push   esi
c002a011:	53                   	push   ebx
c002a012:	83 ec 28             	sub    esp,0x28
c002a015:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002a019:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c002a01e:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c002a023:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c002a028:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c002a02f:	8d 43 12             	lea    eax,[ebx+0x12]
c002a032:	83 c3 10             	add    ebx,0x10
c002a035:	0f b6 c0             	movzx  eax,al
c002a038:	0f b6 db             	movzx  ebx,bl
c002a03b:	50                   	push   eax
c002a03c:	51                   	push   ecx
c002a03d:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c002a041:	57                   	push   edi
c002a042:	55                   	push   ebp
c002a043:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002a047:	e8 ea fd ff ff       	call   c0029e36 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a04c:	83 c4 14             	add    esp,0x14
c002a04f:	89 c6                	mov    esi,eax
c002a051:	53                   	push   ebx
c002a052:	c1 e6 10             	shl    esi,0x10
c002a055:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002a059:	51                   	push   ecx
c002a05a:	57                   	push   edi
c002a05b:	55                   	push   ebp
c002a05c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002a060:	e8 d1 fd ff ff       	call   c0029e36 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a065:	83 c4 3c             	add    esp,0x3c
c002a068:	0f b7 c0             	movzx  eax,ax
c002a06b:	5b                   	pop    ebx
c002a06c:	09 f0                	or     eax,esi
c002a06e:	5e                   	pop    esi
c002a06f:	5f                   	pop    edi
c002a070:	5d                   	pop    ebp
c002a071:	c3                   	ret    

c002a072 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c002a072:	55                   	push   ebp
c002a073:	57                   	push   edi
c002a074:	56                   	push   esi
c002a075:	53                   	push   ebx
c002a076:	83 ec 0c             	sub    esp,0xc
c002a079:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002a07d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002a081:	89 f5                	mov    ebp,esi
c002a083:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c002a089:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002a08d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002a091:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002a095:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002a099:	83 f9 01             	cmp    ecx,0x1
c002a09c:	75 5d                	jne    c002a0fb <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c002a09e:	0f b6 c8             	movzx  ecx,al
c002a0a1:	0f b6 d2             	movzx  edx,dl
c002a0a4:	c1 e1 10             	shl    ecx,0x10
c002a0a7:	c1 e2 0b             	shl    edx,0xb
c002a0aa:	89 f0                	mov    eax,esi
c002a0ac:	25 fc 00 00 00       	and    eax,0xfc
c002a0b1:	09 c1                	or     ecx,eax
c002a0b3:	89 e8                	mov    eax,ebp
c002a0b5:	0f b6 c0             	movzx  eax,al
c002a0b8:	c1 e0 08             	shl    eax,0x8
c002a0bb:	09 c1                	or     ecx,eax
c002a0bd:	09 d1                	or     ecx,edx
c002a0bf:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a0c4:	81 c9 00 00 00 80    	or     ecx,0x80000000
c002a0ca:	89 c8                	mov    eax,ecx
c002a0cc:	ef                   	out    dx,eax
c002a0cd:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a0d2:	ed                   	in     eax,dx
c002a0d3:	0f b7 db             	movzx  ebx,bx
c002a0d6:	83 e6 02             	and    esi,0x2
c002a0d9:	74 0a                	je     c002a0e5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c002a0db:	0f b7 d0             	movzx  edx,ax
c002a0de:	c1 e3 10             	shl    ebx,0x10
c002a0e1:	09 d3                	or     ebx,edx
c002a0e3:	eb 05                	jmp    c002a0ea <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c002a0e5:	66 31 c0             	xor    ax,ax
c002a0e8:	09 c3                	or     ebx,eax
c002a0ea:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a0ef:	89 c8                	mov    eax,ecx
c002a0f1:	ef                   	out    dx,eax
c002a0f2:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a0f7:	89 d8                	mov    eax,ebx
c002a0f9:	eb 41                	jmp    c002a13c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c002a0fb:	83 f9 02             	cmp    ecx,0x2
c002a0fe:	75 45                	jne    c002a145 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c002a100:	83 ec 0c             	sub    esp,0xc
c002a103:	0f b6 d2             	movzx  edx,dl
c002a106:	89 f1                	mov    ecx,esi
c002a108:	0f b6 c0             	movzx  eax,al
c002a10b:	0f b6 f1             	movzx  esi,cl
c002a10e:	89 e9                	mov    ecx,ebp
c002a110:	56                   	push   esi
c002a111:	0f b6 c9             	movzx  ecx,cl
c002a114:	51                   	push   ecx
c002a115:	52                   	push   edx
c002a116:	50                   	push   eax
c002a117:	57                   	push   edi
c002a118:	e8 a3 fc ff ff       	call   c0029dc0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a11d:	89 c2                	mov    edx,eax
c002a11f:	ed                   	in     eax,dx
c002a120:	83 c4 20             	add    esp,0x20
c002a123:	0f b7 db             	movzx  ebx,bx
c002a126:	f6 c2 02             	test   dl,0x2
c002a129:	74 0c                	je     c002a137 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c002a12b:	0f b7 c8             	movzx  ecx,ax
c002a12e:	89 d8                	mov    eax,ebx
c002a130:	c1 e0 10             	shl    eax,0x10
c002a133:	09 c8                	or     eax,ecx
c002a135:	eb 05                	jmp    c002a13c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c002a137:	66 31 c0             	xor    ax,ax
c002a13a:	09 d8                	or     eax,ebx
c002a13c:	ef                   	out    dx,eax
c002a13d:	83 c4 0c             	add    esp,0xc
c002a140:	5b                   	pop    ebx
c002a141:	5e                   	pop    esi
c002a142:	5f                   	pop    edi
c002a143:	5d                   	pop    ebp
c002a144:	c3                   	ret    
c002a145:	c7 44 24 20 0f 32 03 c0 	mov    DWORD PTR [esp+0x20],0xc003320f
c002a14d:	83 c4 0c             	add    esp,0xc
c002a150:	5b                   	pop    ebx
c002a151:	5e                   	pop    esi
c002a152:	5f                   	pop    edi
c002a153:	5d                   	pop    ebp
c002a154:	e9 f2 5e ff ff       	jmp    c002004b <KePanic(char const*)>
c002a159:	90                   	nop

c002a15a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c002a15a:	55                   	push   ebp
c002a15b:	57                   	push   edi
c002a15c:	56                   	push   esi
c002a15d:	53                   	push   ebx
c002a15e:	81 ec 4c 01 00 00    	sub    esp,0x14c
c002a164:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c002a16b:	80 3d ac 0b 04 c0 00 	cmp    BYTE PTR ds:0xc0040bac,0x0
c002a172:	0f 85 bd 00 00 00    	jne    c002a235 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c002a178:	83 ec 0c             	sub    esp,0xc
c002a17b:	68 14 01 00 00       	push   0x114
c002a180:	e8 2d c1 fe ff       	call   c00162b2 <malloc>
c002a185:	83 c4 0c             	add    esp,0xc
c002a188:	89 c3                	mov    ebx,eax
c002a18a:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c002a190:	68 15 32 03 c0       	push   0xc0033215
c002a195:	50                   	push   eax
c002a196:	e8 ad 01 ff ff       	call   c001a348 <File::File(char const*, Process*)>
c002a19b:	83 c4 10             	add    esp,0x10
c002a19e:	85 db                	test   ebx,ebx
c002a1a0:	0f 84 67 02 00 00    	je     c002a40d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002a1a6:	56                   	push   esi
c002a1a7:	56                   	push   esi
c002a1a8:	6a 01                	push   0x1
c002a1aa:	53                   	push   ebx
c002a1ab:	e8 b6 01 ff ff       	call   c001a366 <File::open(FileOpenMode)>
c002a1b0:	83 c4 10             	add    esp,0x10
c002a1b3:	85 c0                	test   eax,eax
c002a1b5:	0f 85 52 02 00 00    	jne    c002a40d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002a1bb:	52                   	push   edx
c002a1bc:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c002a1c0:	50                   	push   eax
c002a1c1:	8d 44 24 48          	lea    eax,[esp+0x48]
c002a1c5:	50                   	push   eax
c002a1c6:	53                   	push   ebx
c002a1c7:	e8 9c 04 ff ff       	call   c001a668 <File::stat(unsigned long long*, bool*)>
c002a1cc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002a1d0:	40                   	inc    eax
c002a1d1:	89 04 24             	mov    DWORD PTR [esp],eax
c002a1d4:	e8 d9 c0 fe ff       	call   c00162b2 <malloc>
c002a1d9:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c002a1dd:	a3 a8 0b 04 c0       	mov    ds:0xc0040ba8,eax
c002a1e2:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c002a1e6:	59                   	pop    ecx
c002a1e7:	8b 13                	mov    edx,DWORD PTR [ebx]
c002a1e9:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c002a1ed:	51                   	push   ecx
c002a1ee:	50                   	push   eax
c002a1ef:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002a1f3:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002a1f7:	53                   	push   ebx
c002a1f8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c002a1fb:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c002a1ff:	83 c4 20             	add    esp,0x20
c002a202:	89 c8                	mov    eax,ecx
c002a204:	99                   	cdq    
c002a205:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c002a209:	0f 85 fe 01 00 00    	jne    c002a40d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002a20f:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c002a213:	0f 85 f4 01 00 00    	jne    c002a40d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002a219:	83 ec 0c             	sub    esp,0xc
c002a21c:	53                   	push   ebx
c002a21d:	e8 a2 01 ff ff       	call   c001a3c4 <File::close()>
c002a222:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002a226:	c6 05 ac 0b 04 c0 01 	mov    BYTE PTR ds:0xc0040bac,0x1
c002a22d:	a3 a4 0b 04 c0       	mov    ds:0xc0040ba4,eax
c002a232:	83 c4 10             	add    esp,0x10
c002a235:	a1 a4 0b 04 c0       	mov    eax,ds:0xc0040ba4
c002a23a:	8b 1d a8 0b 04 c0    	mov    ebx,DWORD PTR ds:0xc0040ba8
c002a240:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002a244:	31 f6                	xor    esi,esi
c002a246:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c002a24e:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c002a255:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c002a25a:	31 c9                	xor    ecx,ecx
c002a25c:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c002a264:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c002a269:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c002a271:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002a275:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c002a27d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c002a281:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c002a285:	0f 8e 82 01 00 00    	jle    c002a40d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002a28b:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c002a28e:	d4 40                	aam    0x40
c002a290:	d5 39                	aad    0x39
c002a292:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c002a296:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c002a29a:	d4 40                	aam    0x40
c002a29c:	d5 39                	aad    0x39
c002a29e:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002a2a2:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c002a2a6:	d4 40                	aam    0x40
c002a2a8:	d5 39                	aad    0x39
c002a2aa:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c002a2ae:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c002a2b2:	d4 40                	aam    0x40
c002a2b4:	d5 39                	aad    0x39
c002a2b6:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c002a2ba:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c002a2be:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c002a2c2:	3c 56                	cmp    al,0x56
c002a2c4:	74 43                	je     c002a309 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c002a2c6:	d4 40                	aam    0x40
c002a2c8:	d5 39                	aad    0x39
c002a2ca:	8d 48 d0             	lea    ecx,[eax-0x30]
c002a2cd:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c002a2d1:	0f b6 c9             	movzx  ecx,cl
c002a2d4:	c1 e1 04             	shl    ecx,0x4
c002a2d7:	d4 40                	aam    0x40
c002a2d9:	d5 39                	aad    0x39
c002a2db:	83 e8 30             	sub    eax,0x30
c002a2de:	0f b6 c0             	movzx  eax,al
c002a2e1:	09 c1                	or     ecx,eax
c002a2e3:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c002a2e7:	c1 e1 04             	shl    ecx,0x4
c002a2ea:	d4 40                	aam    0x40
c002a2ec:	d5 39                	aad    0x39
c002a2ee:	83 e8 30             	sub    eax,0x30
c002a2f1:	0f b6 c0             	movzx  eax,al
c002a2f4:	09 c1                	or     ecx,eax
c002a2f6:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c002a2fa:	c1 e1 04             	shl    ecx,0x4
c002a2fd:	d4 40                	aam    0x40
c002a2ff:	d5 39                	aad    0x39
c002a301:	83 e8 30             	sub    eax,0x30
c002a304:	0f b6 c0             	movzx  eax,al
c002a307:	09 c1                	or     ecx,eax
c002a309:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c002a30d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c002a311:	3c 58                	cmp    al,0x58
c002a313:	74 47                	je     c002a35c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c002a315:	d4 40                	aam    0x40
c002a317:	d5 39                	aad    0x39
c002a319:	8d 50 d0             	lea    edx,[eax-0x30]
c002a31c:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c002a320:	0f b6 d2             	movzx  edx,dl
c002a323:	c1 e2 04             	shl    edx,0x4
c002a326:	d4 40                	aam    0x40
c002a328:	d5 39                	aad    0x39
c002a32a:	83 e8 30             	sub    eax,0x30
c002a32d:	0f b6 c0             	movzx  eax,al
c002a330:	09 c2                	or     edx,eax
c002a332:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c002a336:	c1 e2 04             	shl    edx,0x4
c002a339:	d4 40                	aam    0x40
c002a33b:	d5 39                	aad    0x39
c002a33d:	83 e8 30             	sub    eax,0x30
c002a340:	0f b6 c0             	movzx  eax,al
c002a343:	09 c2                	or     edx,eax
c002a345:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c002a349:	c1 e2 04             	shl    edx,0x4
c002a34c:	d4 40                	aam    0x40
c002a34e:	d5 39                	aad    0x39
c002a350:	83 e8 30             	sub    eax,0x30
c002a353:	0f b6 c0             	movzx  eax,al
c002a356:	09 c2                	or     edx,eax
c002a358:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002a35c:	83 c6 10             	add    esi,0x10
c002a35f:	8d 7c 24 40          	lea    edi,[esp+0x40]
c002a363:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c002a367:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c002a36b:	83 fa 0a             	cmp    edx,0xa
c002a36e:	74 0b                	je     c002a37b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c002a370:	47                   	inc    edi
c002a371:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c002a375:	75 19                	jne    c002a390 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c002a377:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c002a37b:	31 c0                	xor    eax,eax
c002a37d:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c002a382:	0f 94 c0             	sete   al
c002a385:	01 c6                	add    esi,eax
c002a387:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c002a38c:	75 0b                	jne    c002a399 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c002a38e:	eb 14                	jmp    c002a3a4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c002a390:	46                   	inc    esi
c002a391:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c002a394:	c6 07 00             	mov    BYTE PTR [edi],0x0
c002a397:	eb ca                	jmp    c002a363 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c002a399:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c002a39e:	0f 85 dd fe ff ff    	jne    c002a281 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c002a3a4:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c002a3a9:	74 10                	je     c002a3bb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c002a3ab:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c002a3b0:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c002a3b5:	0f 85 c6 fe ff ff    	jne    c002a281 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c002a3bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002a3bf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002a3c3:	83 e8 30             	sub    eax,0x30
c002a3c6:	83 ef 30             	sub    edi,0x30
c002a3c9:	c1 e0 04             	shl    eax,0x4
c002a3cc:	09 f8                	or     eax,edi
c002a3ce:	0f b6 c0             	movzx  eax,al
c002a3d1:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c002a3d5:	0f 85 a6 fe ff ff    	jne    c002a281 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c002a3db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002a3df:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c002a3e3:	83 e8 30             	sub    eax,0x30
c002a3e6:	83 ef 30             	sub    edi,0x30
c002a3e9:	c1 e0 04             	shl    eax,0x4
c002a3ec:	09 f8                	or     eax,edi
c002a3ee:	0f b6 c0             	movzx  eax,al
c002a3f1:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c002a3f5:	0f 85 86 fe ff ff    	jne    c002a281 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c002a3fb:	50                   	push   eax
c002a3fc:	50                   	push   eax
c002a3fd:	8d 44 24 48          	lea    eax,[esp+0x48]
c002a401:	50                   	push   eax
c002a402:	55                   	push   ebp
c002a403:	e8 38 62 fd ff       	call   c0000640 <strcpy>
c002a408:	83 c4 10             	add    esp,0x10
c002a40b:	eb 06                	jmp    c002a413 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c002a40d:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c002a411:	31 ed                	xor    ebp,ebp
c002a413:	81 c4 4c 01 00 00    	add    esp,0x14c
c002a419:	89 e8                	mov    eax,ebp
c002a41b:	5b                   	pop    ebx
c002a41c:	5e                   	pop    esi
c002a41d:	5f                   	pop    edi
c002a41e:	5d                   	pop    ebp
c002a41f:	c3                   	ret    

c002a420 <PCI::checkBus(unsigned char)>:
c002a420:	56                   	push   esi
c002a421:	53                   	push   ebx
c002a422:	31 db                	xor    ebx,ebx
c002a424:	51                   	push   ecx
c002a425:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002a42a:	52                   	push   edx
c002a42b:	53                   	push   ebx
c002a42c:	43                   	inc    ebx
c002a42d:	56                   	push   esi
c002a42e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a432:	e8 03 03 00 00       	call   c002a73a <PCI::checkDevice(unsigned char, unsigned char)>
c002a437:	83 c4 10             	add    esp,0x10
c002a43a:	83 fb 20             	cmp    ebx,0x20
c002a43d:	75 eb                	jne    c002a42a <PCI::checkBus(unsigned char)+0xa>
c002a43f:	58                   	pop    eax
c002a440:	5b                   	pop    ebx
c002a441:	5e                   	pop    esi
c002a442:	c3                   	ret    
c002a443:	90                   	nop

c002a444 <PCI::foundDevice(PCIDeviceInfo)>:
c002a444:	55                   	push   ebp
c002a445:	57                   	push   edi
c002a446:	56                   	push   esi
c002a447:	53                   	push   ebx
c002a448:	83 ec 1c             	sub    esp,0x1c
c002a44b:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c002a450:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002a454:	3d ff ff 00 00       	cmp    eax,0xffff
c002a459:	0f 84 57 01 00 00    	je     c002a5b6 <PCI::foundDevice(PCIDeviceInfo)+0x172>
c002a45f:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c002a464:	66 3d 06 04          	cmp    ax,0x406
c002a468:	75 2c                	jne    c002a496 <PCI::foundDevice(PCIDeviceInfo)+0x52>
c002a46a:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c002a46f:	50                   	push   eax
c002a470:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c002a475:	50                   	push   eax
c002a476:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c002a47b:	50                   	push   eax
c002a47c:	53                   	push   ebx
c002a47d:	e8 64 fb ff ff       	call   c0029fe6 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c002a482:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c002a486:	0f b6 c0             	movzx  eax,al
c002a489:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c002a48d:	83 c4 2c             	add    esp,0x2c
c002a490:	5b                   	pop    ebx
c002a491:	5e                   	pop    esi
c002a492:	5f                   	pop    edi
c002a493:	5d                   	pop    ebp
c002a494:	eb 8a                	jmp    c002a420 <PCI::checkBus(unsigned char)>
c002a496:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002a49a:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c002a4a0:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002a4a4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c002a4a8:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c002a4ad:	85 d2                	test   edx,edx
c002a4af:	74 36                	je     c002a4e7 <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c002a4b1:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c002a4b4:	85 c9                	test   ecx,ecx
c002a4b6:	74 2b                	je     c002a4e3 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c002a4b8:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c002a4be:	31 ee                	xor    esi,ebp
c002a4c0:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c002a4c6:	75 1b                	jne    c002a4e3 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c002a4c8:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c002a4cc:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c002a4d2:	75 0f                	jne    c002a4e3 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c002a4d4:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c002a4db:	39 f9                	cmp    ecx,edi
c002a4dd:	0f 84 d3 00 00 00    	je     c002a5b6 <PCI::foundDevice(PCIDeviceInfo)+0x172>
c002a4e3:	8b 12                	mov    edx,DWORD PTR [edx]
c002a4e5:	eb c6                	jmp    c002a4ad <PCI::foundDevice(PCIDeviceInfo)+0x69>
c002a4e7:	3d 01 06 00 00       	cmp    eax,0x601
c002a4ec:	75 19                	jne    c002a507 <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c002a4ee:	83 ec 0c             	sub    esp,0xc
c002a4f1:	68 64 01 00 00       	push   0x164
c002a4f6:	e8 b7 bd fe ff       	call   c00162b2 <malloc>
c002a4fb:	89 c5                	mov    ebp,eax
c002a4fd:	89 04 24             	mov    DWORD PTR [esp],eax
c002a500:	e8 a1 0e 00 00       	call   c002b3a6 <SATABus::SATABus()>
c002a505:	eb 1e                	jmp    c002a525 <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c002a507:	3d 01 01 00 00       	cmp    eax,0x101
c002a50c:	75 62                	jne    c002a570 <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c002a50e:	83 ec 0c             	sub    esp,0xc
c002a511:	68 70 02 00 00       	push   0x270
c002a516:	e8 97 bd fe ff       	call   c00162b2 <malloc>
c002a51b:	89 c5                	mov    ebp,eax
c002a51d:	89 04 24             	mov    DWORD PTR [esp],eax
c002a520:	e8 e5 02 00 00       	call   c002a80a <IDE::IDE()>
c002a525:	5f                   	pop    edi
c002a526:	58                   	pop    eax
c002a527:	55                   	push   ebp
c002a528:	53                   	push   ebx
c002a529:	e8 94 0c ff ff       	call   c001b1c2 <Device::addChild(Device*)>
c002a52e:	83 ec 1c             	sub    esp,0x1c
c002a531:	b9 09 00 00 00       	mov    ecx,0x9
c002a536:	fc                   	cld    
c002a537:	89 e7                	mov    edi,esp
c002a539:	8d 74 24 60          	lea    esi,[esp+0x60]
c002a53d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002a53f:	55                   	push   ebp
c002a540:	e8 c3 0b ff ff       	call   c001b108 <Device::preOpenPCI(PCIDeviceInfo)>
c002a545:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c002a548:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c002a54c:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c002a554:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c002a55c:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c002a564:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c002a567:	83 c4 4c             	add    esp,0x4c
c002a56a:	5b                   	pop    ebx
c002a56b:	5e                   	pop    esi
c002a56c:	5f                   	pop    edi
c002a56d:	5d                   	pop    ebp
c002a56e:	ff e0                	jmp    eax
c002a570:	83 ec 0c             	sub    esp,0xc
c002a573:	68 58 01 00 00       	push   0x158
c002a578:	e8 35 bd fe ff       	call   c00162b2 <malloc>
c002a57d:	89 c5                	mov    ebp,eax
c002a57f:	58                   	pop    eax
c002a580:	5a                   	pop    edx
c002a581:	68 2e 32 03 c0       	push   0xc003322e
c002a586:	55                   	push   ebp
c002a587:	e8 ea 0e ff ff       	call   c001b476 <DriverlessDevice::DriverlessDevice(char const*)>
c002a58c:	59                   	pop    ecx
c002a58d:	5e                   	pop    esi
c002a58e:	55                   	push   ebp
c002a58f:	53                   	push   ebx
c002a590:	e8 2d 0c ff ff       	call   c001b1c2 <Device::addChild(Device*)>
c002a595:	83 c4 10             	add    esp,0x10
c002a598:	b9 09 00 00 00       	mov    ecx,0x9
c002a59d:	fc                   	cld    
c002a59e:	8d 7c 24 34          	lea    edi,[esp+0x34]
c002a5a2:	89 fe                	mov    esi,edi
c002a5a4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002a5a6:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c002a5aa:	83 c4 1c             	add    esp,0x1c
c002a5ad:	5b                   	pop    ebx
c002a5ae:	5e                   	pop    esi
c002a5af:	5f                   	pop    edi
c002a5b0:	5d                   	pop    ebp
c002a5b1:	e9 52 0b ff ff       	jmp    c001b108 <Device::preOpenPCI(PCIDeviceInfo)>
c002a5b6:	83 c4 1c             	add    esp,0x1c
c002a5b9:	5b                   	pop    ebx
c002a5ba:	5e                   	pop    esi
c002a5bb:	5f                   	pop    edi
c002a5bc:	5d                   	pop    ebp
c002a5bd:	c3                   	ret    

c002a5be <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c002a5be:	55                   	push   ebp
c002a5bf:	57                   	push   edi
c002a5c0:	56                   	push   esi
c002a5c1:	53                   	push   ebx
c002a5c2:	83 ec 68             	sub    esp,0x68
c002a5c5:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c002a5c9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c002a5d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002a5d4:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c002a5db:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c002a5e0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002a5e4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c002a5eb:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c002a5f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002a5f4:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c002a5f9:	6a 0c                	push   0xc
c002a5fb:	57                   	push   edi
c002a5fc:	53                   	push   ebx
c002a5fd:	56                   	push   esi
c002a5fe:	55                   	push   ebp
c002a5ff:	e8 32 f8 ff ff       	call   c0029e36 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a604:	83 c4 20             	add    esp,0x20
c002a607:	57                   	push   edi
c002a608:	53                   	push   ebx
c002a609:	56                   	push   esi
c002a60a:	55                   	push   ebp
c002a60b:	e8 1c f9 ff ff       	call   c0029f2c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c002a610:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c002a615:	57                   	push   edi
c002a616:	53                   	push   ebx
c002a617:	56                   	push   esi
c002a618:	55                   	push   ebp
c002a619:	e8 a4 f9 ff ff       	call   c0029fc2 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c002a61e:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c002a622:	83 c4 14             	add    esp,0x14
c002a625:	6a 3c                	push   0x3c
c002a627:	57                   	push   edi
c002a628:	53                   	push   ebx
c002a629:	56                   	push   esi
c002a62a:	55                   	push   ebp
c002a62b:	e8 06 f8 ff ff       	call   c0029e36 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a630:	0f b6 c4             	movzx  eax,ah
c002a633:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002a637:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c002a63b:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c002a63f:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002a644:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c002a64a:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c002a650:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002a654:	83 c4 20             	add    esp,0x20
c002a657:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c002a65c:	74 30                	je     c002a68e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c002a65e:	31 c0                	xor    eax,eax
c002a660:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c002a664:	7e 28                	jle    c002a68e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c002a666:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c002a66e:	39 cb                	cmp    ebx,ecx
c002a670:	75 19                	jne    c002a68b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c002a672:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c002a67a:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c002a67e:	75 0b                	jne    c002a68b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c002a680:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c002a687:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c002a68b:	40                   	inc    eax
c002a68c:	eb d2                	jmp    c002a660 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c002a68e:	31 d2                	xor    edx,edx
c002a690:	83 ec 0c             	sub    esp,0xc
c002a693:	57                   	push   edi
c002a694:	53                   	push   ebx
c002a695:	56                   	push   esi
c002a696:	52                   	push   edx
c002a697:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c002a69b:	55                   	push   ebp
c002a69c:	e8 6d f9 ff ff       	call   c002a00e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a6a1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002a6a5:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c002a6a9:	42                   	inc    edx
c002a6aa:	83 c4 20             	add    esp,0x20
c002a6ad:	83 fa 06             	cmp    edx,0x6
c002a6b0:	75 de                	jne    c002a690 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c002a6b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002a6b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a6ba:	c1 e2 08             	shl    edx,0x8
c002a6bd:	83 ec 0c             	sub    esp,0xc
c002a6c0:	0f b6 c4             	movzx  eax,ah
c002a6c3:	09 d0                	or     eax,edx
c002a6c5:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c002a6ca:	6a 02                	push   0x2
c002a6cc:	57                   	push   edi
c002a6cd:	53                   	push   ebx
c002a6ce:	56                   	push   esi
c002a6cf:	55                   	push   ebp
c002a6d0:	e8 61 f7 ff ff       	call   c0029e36 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a6d5:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c002a6da:	83 c4 20             	add    esp,0x20
c002a6dd:	57                   	push   edi
c002a6de:	53                   	push   ebx
c002a6df:	56                   	push   esi
c002a6e0:	55                   	push   ebp
c002a6e1:	e8 90 f8 ff ff       	call   c0029f76 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c002a6e6:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c002a6ea:	57                   	push   edi
c002a6eb:	53                   	push   ebx
c002a6ec:	56                   	push   esi
c002a6ed:	55                   	push   ebp
c002a6ee:	e8 ed f7 ff ff       	call   c0029ee0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002a6f3:	b9 09 00 00 00       	mov    ecx,0x9
c002a6f8:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c002a6fd:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c002a701:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c002a705:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c002a709:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c002a70d:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c002a711:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c002a715:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c002a719:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c002a71d:	83 ec 0c             	sub    esp,0xc
c002a720:	fc                   	cld    
c002a721:	89 e7                	mov    edi,esp
c002a723:	8d 74 24 58          	lea    esi,[esp+0x58]
c002a727:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002a729:	55                   	push   ebp
c002a72a:	e8 15 fd ff ff       	call   c002a444 <PCI::foundDevice(PCIDeviceInfo)>
c002a72f:	81 c4 8c 00 00 00    	add    esp,0x8c
c002a735:	5b                   	pop    ebx
c002a736:	5e                   	pop    esi
c002a737:	5f                   	pop    edi
c002a738:	5d                   	pop    ebp
c002a739:	c3                   	ret    

c002a73a <PCI::checkDevice(unsigned char, unsigned char)>:
c002a73a:	55                   	push   ebp
c002a73b:	57                   	push   edi
c002a73c:	56                   	push   esi
c002a73d:	53                   	push   ebx
c002a73e:	83 ec 0c             	sub    esp,0xc
c002a741:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c002a745:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c002a74a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c002a74f:	6a 00                	push   0x0
c002a751:	56                   	push   esi
c002a752:	57                   	push   edi
c002a753:	55                   	push   ebp
c002a754:	e8 87 f7 ff ff       	call   c0029ee0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002a759:	6a 00                	push   0x0
c002a75b:	56                   	push   esi
c002a75c:	57                   	push   edi
c002a75d:	55                   	push   ebp
c002a75e:	e8 5b fe ff ff       	call   c002a5be <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002a763:	83 c4 20             	add    esp,0x20
c002a766:	6a 00                	push   0x0
c002a768:	56                   	push   esi
c002a769:	57                   	push   edi
c002a76a:	55                   	push   ebp
c002a76b:	e8 94 f7 ff ff       	call   c0029f04 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002a770:	83 c4 10             	add    esp,0x10
c002a773:	a8 80                	test   al,0x80
c002a775:	74 2d                	je     c002a7a4 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c002a777:	bb 01 00 00 00       	mov    ebx,0x1
c002a77c:	53                   	push   ebx
c002a77d:	56                   	push   esi
c002a77e:	57                   	push   edi
c002a77f:	55                   	push   ebp
c002a780:	e8 5b f7 ff ff       	call   c0029ee0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002a785:	83 c4 10             	add    esp,0x10
c002a788:	0f b7 c0             	movzx  eax,ax
c002a78b:	3d ff ff 00 00       	cmp    eax,0xffff
c002a790:	74 0c                	je     c002a79e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c002a792:	53                   	push   ebx
c002a793:	56                   	push   esi
c002a794:	57                   	push   edi
c002a795:	55                   	push   ebp
c002a796:	e8 23 fe ff ff       	call   c002a5be <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002a79b:	83 c4 10             	add    esp,0x10
c002a79e:	43                   	inc    ebx
c002a79f:	83 fb 08             	cmp    ebx,0x8
c002a7a2:	75 d8                	jne    c002a77c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c002a7a4:	83 c4 0c             	add    esp,0xc
c002a7a7:	5b                   	pop    ebx
c002a7a8:	5e                   	pop    esi
c002a7a9:	5f                   	pop    edi
c002a7aa:	5d                   	pop    ebp
c002a7ab:	c3                   	ret    

c002a7ac <PCI::detect()>:
c002a7ac:	56                   	push   esi
c002a7ad:	53                   	push   ebx
c002a7ae:	53                   	push   ebx
c002a7af:	31 db                	xor    ebx,ebx
c002a7b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002a7b5:	6a 00                	push   0x0
c002a7b7:	6a 00                	push   0x0
c002a7b9:	6a 00                	push   0x0
c002a7bb:	56                   	push   esi
c002a7bc:	e8 43 f7 ff ff       	call   c0029f04 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002a7c1:	83 c4 10             	add    esp,0x10
c002a7c4:	a8 80                	test   al,0x80
c002a7c6:	75 21                	jne    c002a7e9 <PCI::detect()+0x3d>
c002a7c8:	51                   	push   ecx
c002a7c9:	51                   	push   ecx
c002a7ca:	6a 00                	push   0x0
c002a7cc:	56                   	push   esi
c002a7cd:	e8 4e fc ff ff       	call   c002a420 <PCI::checkBus(unsigned char)>
c002a7d2:	83 c4 10             	add    esp,0x10
c002a7d5:	eb 2a                	jmp    c002a801 <PCI::detect()+0x55>
c002a7d7:	52                   	push   edx
c002a7d8:	52                   	push   edx
c002a7d9:	53                   	push   ebx
c002a7da:	43                   	inc    ebx
c002a7db:	56                   	push   esi
c002a7dc:	e8 3f fc ff ff       	call   c002a420 <PCI::checkBus(unsigned char)>
c002a7e1:	83 c4 10             	add    esp,0x10
c002a7e4:	83 fb 08             	cmp    ebx,0x8
c002a7e7:	74 18                	je     c002a801 <PCI::detect()+0x55>
c002a7e9:	53                   	push   ebx
c002a7ea:	6a 00                	push   0x0
c002a7ec:	6a 00                	push   0x0
c002a7ee:	56                   	push   esi
c002a7ef:	e8 ec f6 ff ff       	call   c0029ee0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002a7f4:	83 c4 10             	add    esp,0x10
c002a7f7:	0f b7 c0             	movzx  eax,ax
c002a7fa:	3d ff ff 00 00       	cmp    eax,0xffff
c002a7ff:	74 d6                	je     c002a7d7 <PCI::detect()+0x2b>
c002a801:	58                   	pop    eax
c002a802:	5b                   	pop    ebx
c002a803:	5e                   	pop    esi
c002a804:	c3                   	ret    
c002a805:	90                   	nop

c002a806 <IDE::close(int, int, void*)>:
c002a806:	83 c8 ff             	or     eax,0xffffffff
c002a809:	c3                   	ret    

c002a80a <IDE::IDE()>:
c002a80a:	83 ec 0c             	sub    esp,0xc
c002a80d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a811:	83 ec 08             	sub    esp,0x8
c002a814:	68 74 32 03 c0       	push   0xc0033274
c002a819:	50                   	push   eax
c002a81a:	e8 fd 0c ff ff       	call   c001b51c <HardDiskController::HardDiskController(char const*)>
c002a81f:	83 c4 10             	add    esp,0x10
c002a822:	ba 04 33 03 c0       	mov    edx,0xc0033304
c002a827:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a82b:	89 10                	mov    DWORD PTR [eax],edx
c002a82d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a831:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c002a838:	90                   	nop
c002a839:	83 c4 0c             	add    esp,0xc
c002a83c:	c3                   	ret    
c002a83d:	90                   	nop

c002a83e <IDE::prepareInterrupt(unsigned char)>:
c002a83e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002a843:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002a847:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c002a84f:	c3                   	ret    

c002a850 <selectDrive(unsigned char, unsigned char)>:
c002a850:	c3                   	ret    
c002a851:	90                   	nop

c002a852 <IDE::getBase(unsigned char)>:
c002a852:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c002a857:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002a85b:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c002a863:	c3                   	ret    

c002a864 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c002a864:	55                   	push   ebp
c002a865:	57                   	push   edi
c002a866:	56                   	push   esi
c002a867:	53                   	push   ebx
c002a868:	83 ec 1c             	sub    esp,0x1c
c002a86b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002a86f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002a873:	8d 4b f8             	lea    ecx,[ebx-0x8]
c002a876:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002a87a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002a87e:	80 f9 03             	cmp    cl,0x3
c002a881:	77 4f                	ja     c002a8d2 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c002a883:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002a887:	0f b6 fa             	movzx  edi,dl
c002a88a:	0f b6 db             	movzx  ebx,bl
c002a88d:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c002a890:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c002a895:	80 ca 80             	or     dl,0x80
c002a898:	52                   	push   edx
c002a899:	6a 0c                	push   0xc
c002a89b:	57                   	push   edi
c002a89c:	56                   	push   esi
c002a89d:	e8 c2 ff ff ff       	call   c002a864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002a8a2:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c002a8a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002a8ab:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002a8af:	ee                   	out    dx,al
c002a8b0:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002a8b5:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c002a8b9:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002a8bd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002a8c1:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002a8c9:	83 c4 2c             	add    esp,0x2c
c002a8cc:	5b                   	pop    ebx
c002a8cd:	5e                   	pop    esi
c002a8ce:	5f                   	pop    edi
c002a8cf:	5d                   	pop    ebp
c002a8d0:	eb 92                	jmp    c002a864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002a8d2:	0f b6 cb             	movzx  ecx,bl
c002a8d5:	83 f9 07             	cmp    ecx,0x7
c002a8d8:	77 12                	ja     c002a8ec <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c002a8da:	0f b6 d2             	movzx  edx,dl
c002a8dd:	0f b6 db             	movzx  ebx,bl
c002a8e0:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c002a8e8:	01 da                	add    edx,ebx
c002a8ea:	eb 2f                	jmp    c002a91b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002a8ec:	83 f9 0d             	cmp    ecx,0xd
c002a8ef:	77 13                	ja     c002a904 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c002a8f1:	0f b6 d2             	movzx  edx,dl
c002a8f4:	0f b6 db             	movzx  ebx,bl
c002a8f7:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c002a8fe:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002a902:	eb 17                	jmp    c002a91b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002a904:	83 f9 15             	cmp    ecx,0x15
c002a907:	77 13                	ja     c002a91c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c002a909:	0f b6 d2             	movzx  edx,dl
c002a90c:	0f b6 db             	movzx  ebx,bl
c002a90f:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c002a917:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002a91b:	ee                   	out    dx,al
c002a91c:	83 c4 1c             	add    esp,0x1c
c002a91f:	5b                   	pop    ebx
c002a920:	5e                   	pop    esi
c002a921:	5f                   	pop    edi
c002a922:	5d                   	pop    ebp
c002a923:	c3                   	ret    

c002a924 <IDE::read(unsigned char, unsigned char)>:
c002a924:	55                   	push   ebp
c002a925:	57                   	push   edi
c002a926:	56                   	push   esi
c002a927:	53                   	push   ebx
c002a928:	83 ec 1c             	sub    esp,0x1c
c002a92b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002a92f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002a933:	8d 43 f8             	lea    eax,[ebx-0x8]
c002a936:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c002a93a:	3c 03                	cmp    al,0x3
c002a93c:	77 40                	ja     c002a97e <IDE::read(unsigned char, unsigned char)+0x5a>
c002a93e:	0f b6 f9             	movzx  edi,cl
c002a941:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c002a944:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002a949:	0c 80                	or     al,0x80
c002a94b:	50                   	push   eax
c002a94c:	6a 0c                	push   0xc
c002a94e:	57                   	push   edi
c002a94f:	56                   	push   esi
c002a950:	e8 0f ff ff ff       	call   c002a864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002a955:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c002a95a:	0f b6 d3             	movzx  edx,bl
c002a95d:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c002a961:	ec                   	in     al,dx
c002a962:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002a966:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c002a96b:	52                   	push   edx
c002a96c:	6a 0c                	push   0xc
c002a96e:	57                   	push   edi
c002a96f:	56                   	push   esi
c002a970:	e8 ef fe ff ff       	call   c002a864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002a975:	83 c4 20             	add    esp,0x20
c002a978:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002a97c:	eb 4c                	jmp    c002a9ca <IDE::read(unsigned char, unsigned char)+0xa6>
c002a97e:	0f b6 d3             	movzx  edx,bl
c002a981:	83 fa 07             	cmp    edx,0x7
c002a984:	77 12                	ja     c002a998 <IDE::read(unsigned char, unsigned char)+0x74>
c002a986:	0f b6 c9             	movzx  ecx,cl
c002a989:	0f b6 d3             	movzx  edx,bl
c002a98c:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c002a994:	01 c2                	add    edx,eax
c002a996:	eb 31                	jmp    c002a9c9 <IDE::read(unsigned char, unsigned char)+0xa5>
c002a998:	83 fa 0d             	cmp    edx,0xd
c002a99b:	77 13                	ja     c002a9b0 <IDE::read(unsigned char, unsigned char)+0x8c>
c002a99d:	0f b6 c9             	movzx  ecx,cl
c002a9a0:	0f b6 d3             	movzx  edx,bl
c002a9a3:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c002a9aa:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002a9ae:	eb 19                	jmp    c002a9c9 <IDE::read(unsigned char, unsigned char)+0xa5>
c002a9b0:	31 c0                	xor    eax,eax
c002a9b2:	83 fa 15             	cmp    edx,0x15
c002a9b5:	77 13                	ja     c002a9ca <IDE::read(unsigned char, unsigned char)+0xa6>
c002a9b7:	0f b6 c9             	movzx  ecx,cl
c002a9ba:	0f b6 d3             	movzx  edx,bl
c002a9bd:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c002a9c5:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002a9c9:	ec                   	in     al,dx
c002a9ca:	83 c4 1c             	add    esp,0x1c
c002a9cd:	5b                   	pop    ebx
c002a9ce:	5e                   	pop    esi
c002a9cf:	5f                   	pop    edi
c002a9d0:	5d                   	pop    ebp
c002a9d1:	c3                   	ret    

c002a9d2 <IDE::waitInterrupt(unsigned char)>:
c002a9d2:	55                   	push   ebp
c002a9d3:	57                   	push   edi
c002a9d4:	56                   	push   esi
c002a9d5:	53                   	push   ebx
c002a9d6:	31 db                	xor    ebx,ebx
c002a9d8:	83 ec 0c             	sub    esp,0xc
c002a9db:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002a9df:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c002a9e4:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002a9ec:	89 e8                	mov    eax,ebp
c002a9ee:	84 c0                	test   al,al
c002a9f0:	75 30                	jne    c002aa22 <IDE::waitInterrupt(unsigned char)+0x50>
c002a9f2:	50                   	push   eax
c002a9f3:	6a 0c                	push   0xc
c002a9f5:	56                   	push   esi
c002a9f6:	57                   	push   edi
c002a9f7:	e8 28 ff ff ff       	call   c002a924 <IDE::read(unsigned char, unsigned char)>
c002a9fc:	83 c4 10             	add    esp,0x10
c002a9ff:	a8 01                	test   al,0x1
c002aa01:	75 27                	jne    c002aa2a <IDE::waitInterrupt(unsigned char)+0x58>
c002aa03:	f6 c3 04             	test   bl,0x4
c002aa06:	75 12                	jne    c002aa1a <IDE::waitInterrupt(unsigned char)+0x48>
c002aa08:	83 fb 32             	cmp    ebx,0x32
c002aa0b:	7e 0d                	jle    c002aa1a <IDE::waitInterrupt(unsigned char)+0x48>
c002aa0d:	83 ec 0c             	sub    esp,0xc
c002aa10:	6a 64                	push   0x64
c002aa12:	e8 b1 a4 ff ff       	call   c0024ec8 <milliTenthSleep(unsigned int)>
c002aa17:	83 c4 10             	add    esp,0x10
c002aa1a:	83 fb 3c             	cmp    ebx,0x3c
c002aa1d:	74 0b                	je     c002aa2a <IDE::waitInterrupt(unsigned char)+0x58>
c002aa1f:	43                   	inc    ebx
c002aa20:	eb c2                	jmp    c002a9e4 <IDE::waitInterrupt(unsigned char)+0x12>
c002aa22:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002aa2a:	83 c4 0c             	add    esp,0xc
c002aa2d:	89 e8                	mov    eax,ebp
c002aa2f:	5b                   	pop    ebx
c002aa30:	5e                   	pop    esi
c002aa31:	5f                   	pop    edi
c002aa32:	5d                   	pop    ebp
c002aa33:	c3                   	ret    

c002aa34 <ideChannel0IRQHandler(regs*, void*)>:
c002aa34:	83 ec 10             	sub    esp,0x10
c002aa37:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002aa3b:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c002aa42:	6a 07                	push   0x7
c002aa44:	6a 00                	push   0x0
c002aa46:	50                   	push   eax
c002aa47:	e8 d8 fe ff ff       	call   c002a924 <IDE::read(unsigned char, unsigned char)>
c002aa4c:	83 c4 1c             	add    esp,0x1c
c002aa4f:	c3                   	ret    

c002aa50 <ideChannel1IRQHandler(regs*, void*)>:
c002aa50:	83 ec 10             	sub    esp,0x10
c002aa53:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002aa57:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c002aa5e:	6a 07                	push   0x7
c002aa60:	6a 01                	push   0x1
c002aa62:	50                   	push   eax
c002aa63:	e8 bc fe ff ff       	call   c002a924 <IDE::read(unsigned char, unsigned char)>
c002aa68:	83 c4 1c             	add    esp,0x1c
c002aa6b:	c3                   	ret    

c002aa6c <IDE::enableIRQs(unsigned char, bool)>:
c002aa6c:	57                   	push   edi
c002aa6d:	b8 02 00 00 00       	mov    eax,0x2
c002aa72:	56                   	push   esi
c002aa73:	53                   	push   ebx
c002aa74:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002aa78:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002aa7c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c002aa81:	74 02                	je     c002aa85 <IDE::enableIRQs(unsigned char, bool)+0x19>
c002aa83:	31 c0                	xor    eax,eax
c002aa85:	0f b6 db             	movzx  ebx,bl
c002aa88:	bf 04 00 00 00       	mov    edi,0x4
c002aa8d:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c002aa94:	50                   	push   eax
c002aa95:	6a 0c                	push   0xc
c002aa97:	53                   	push   ebx
c002aa98:	56                   	push   esi
c002aa99:	e8 c6 fd ff ff       	call   c002a864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002aa9e:	83 c4 10             	add    esp,0x10
c002aaa1:	50                   	push   eax
c002aaa2:	6a 0c                	push   0xc
c002aaa4:	53                   	push   ebx
c002aaa5:	56                   	push   esi
c002aaa6:	e8 79 fe ff ff       	call   c002a924 <IDE::read(unsigned char, unsigned char)>
c002aaab:	83 c4 10             	add    esp,0x10
c002aaae:	4f                   	dec    edi
c002aaaf:	75 f0                	jne    c002aaa1 <IDE::enableIRQs(unsigned char, bool)+0x35>
c002aab1:	5b                   	pop    ebx
c002aab2:	5e                   	pop    esi
c002aab3:	5f                   	pop    edi
c002aab4:	c3                   	ret    
c002aab5:	90                   	nop

c002aab6 <IDE::open(int, int, void*)>:
c002aab6:	55                   	push   ebp
c002aab7:	57                   	push   edi
c002aab8:	56                   	push   esi
c002aab9:	53                   	push   ebx
c002aaba:	83 ec 1c             	sub    esp,0x1c
c002aabd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002aac1:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002aaca:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c002aad3:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002aada:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002aae1:	0f 85 de 02 00 00    	jne    c002adc5 <IDE::open(int, int, void*)+0x30f>
c002aae7:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002aaed:	88 04 24             	mov    BYTE PTR [esp],al
c002aaf0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002aaf3:	83 e0 7f             	and    eax,0x7f
c002aaf6:	83 f8 05             	cmp    eax,0x5
c002aaf9:	74 05                	je     c002ab00 <IDE::open(int, int, void*)+0x4a>
c002aafb:	83 f8 0f             	cmp    eax,0xf
c002aafe:	75 32                	jne    c002ab32 <IDE::open(int, int, void*)+0x7c>
c002ab00:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c002ab06:	83 e0 fc             	and    eax,0xfffffffc
c002ab09:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002ab10:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c002ab16:	83 e0 fc             	and    eax,0xfffffffc
c002ab19:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002ab20:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c002ab26:	83 e0 fc             	and    eax,0xfffffffc
c002ab29:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002ab30:	eb 14                	jmp    c002ab46 <IDE::open(int, int, void*)+0x90>
c002ab32:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002ab3c:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002ab46:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c002ab4d:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002ab54:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002ab58:	89 c6                	mov    esi,eax
c002ab5a:	bf f8 0c 00 00       	mov    edi,0xcf8
c002ab5f:	c1 e6 10             	shl    esi,0x10
c002ab62:	89 e8                	mov    eax,ebp
c002ab64:	89 fa                	mov    edx,edi
c002ab66:	c1 e0 0b             	shl    eax,0xb
c002ab69:	09 f0                	or     eax,esi
c002ab6b:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c002ab72:	c1 e6 08             	shl    esi,0x8
c002ab75:	09 c6                	or     esi,eax
c002ab77:	89 f0                	mov    eax,esi
c002ab79:	0d 08 00 00 80       	or     eax,0x80000008
c002ab7e:	ef                   	out    dx,eax
c002ab7f:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c002ab84:	89 ca                	mov    edx,ecx
c002ab86:	ed                   	in     eax,dx
c002ab87:	c1 e8 10             	shr    eax,0x10
c002ab8a:	3d ff ff 00 00       	cmp    eax,0xffff
c002ab8f:	0f 84 f9 00 00 00    	je     c002ac8e <IDE::open(int, int, void*)+0x1d8>
c002ab95:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c002ab9b:	89 fa                	mov    edx,edi
c002ab9d:	89 f0                	mov    eax,esi
c002ab9f:	ef                   	out    dx,eax
c002aba0:	b0 fe                	mov    al,0xfe
c002aba2:	89 ca                	mov    edx,ecx
c002aba4:	ee                   	out    dx,al
c002aba5:	89 f0                	mov    eax,esi
c002aba7:	89 fa                	mov    edx,edi
c002aba9:	ef                   	out    dx,eax
c002abaa:	89 ca                	mov    edx,ecx
c002abac:	ed                   	in     eax,dx
c002abad:	3c fe                	cmp    al,0xfe
c002abaf:	0f 85 a9 00 00 00    	jne    c002ac5e <IDE::open(int, int, void*)+0x1a8>
c002abb5:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c002abbb:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c002abc2:	74 33                	je     c002abf7 <IDE::open(int, int, void*)+0x141>
c002abc4:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c002abca:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002abce:	40                   	inc    eax
c002abcf:	83 ec 0c             	sub    esp,0xc
c002abd2:	0f b6 c0             	movzx  eax,al
c002abd5:	50                   	push   eax
c002abd6:	55                   	push   ebp
c002abd7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002abdb:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c002abe1:	51                   	push   ecx
c002abe2:	e8 35 37 ff ff       	call   c001e31c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c002abe7:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c002abec:	83 c4 1c             	add    esp,0x1c
c002abef:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002abf5:	eb 0a                	jmp    c002ac01 <IDE::open(int, int, void*)+0x14b>
c002abf7:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002ac01:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c002ac08:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002ac0f:	c1 e1 10             	shl    ecx,0x10
c002ac12:	c1 e0 08             	shl    eax,0x8
c002ac15:	bf f8 0c 00 00       	mov    edi,0xcf8
c002ac1a:	09 c1                	or     ecx,eax
c002ac1c:	89 fa                	mov    edx,edi
c002ac1e:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002ac25:	c1 e0 0b             	shl    eax,0xb
c002ac28:	09 c1                	or     ecx,eax
c002ac2a:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002ac30:	89 c8                	mov    eax,ecx
c002ac32:	ef                   	out    dx,eax
c002ac33:	be fc 0c 00 00       	mov    esi,0xcfc
c002ac38:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c002ac3e:	89 f2                	mov    edx,esi
c002ac40:	ee                   	out    dx,al
c002ac41:	89 c8                	mov    eax,ecx
c002ac43:	89 fa                	mov    edx,edi
c002ac45:	ef                   	out    dx,eax
c002ac46:	89 f2                	mov    edx,esi
c002ac48:	ed                   	in     eax,dx
c002ac49:	0f b6 c0             	movzx  eax,al
c002ac4c:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c002ac52:	74 4a                	je     c002ac9e <IDE::open(int, int, void*)+0x1e8>
c002ac54:	83 ec 0c             	sub    esp,0xc
c002ac57:	68 8c 32 03 c0       	push   0xc003328c
c002ac5c:	eb 38                	jmp    c002ac96 <IDE::open(int, int, void*)+0x1e0>
c002ac5e:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c002ac67:	75 1b                	jne    c002ac84 <IDE::open(int, int, void*)+0x1ce>
c002ac69:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c002ac6d:	3d 80 00 00 00       	cmp    eax,0x80
c002ac72:	74 07                	je     c002ac7b <IDE::open(int, int, void*)+0x1c5>
c002ac74:	3d 8a 00 00 00       	cmp    eax,0x8a
c002ac79:	75 09                	jne    c002ac84 <IDE::open(int, int, void*)+0x1ce>
c002ac7b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002ac82:	eb 1a                	jmp    c002ac9e <IDE::open(int, int, void*)+0x1e8>
c002ac84:	83 ec 0c             	sub    esp,0xc
c002ac87:	68 94 32 03 c0       	push   0xc0033294
c002ac8c:	eb 08                	jmp    c002ac96 <IDE::open(int, int, void*)+0x1e0>
c002ac8e:	83 ec 0c             	sub    esp,0xc
c002ac91:	68 c5 32 03 c0       	push   0xc00332c5
c002ac96:	e8 b0 53 ff ff       	call   c002004b <KePanic(char const*)>
c002ac9b:	83 c4 10             	add    esp,0x10
c002ac9e:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c002aca5:	74 1a                	je     c002acc1 <IDE::open(int, int, void*)+0x20b>
c002aca7:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c002acad:	83 e0 fc             	and    eax,0xfffffffc
c002acb0:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c002acb7:	83 c0 08             	add    eax,0x8
c002acba:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c002acc1:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c002acc7:	89 c2                	mov    edx,eax
c002acc9:	83 e2 0f             	and    edx,0xf
c002accc:	83 fa 08             	cmp    edx,0x8
c002accf:	75 0a                	jne    c002acdb <IDE::open(int, int, void*)+0x225>
c002acd1:	83 e8 02             	sub    eax,0x2
c002acd4:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002acdb:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002ace1:	89 c2                	mov    edx,eax
c002ace3:	83 e2 0f             	and    edx,0xf
c002ace6:	83 fa 08             	cmp    edx,0x8
c002ace9:	75 0a                	jne    c002acf5 <IDE::open(int, int, void*)+0x23f>
c002aceb:	83 e8 02             	sub    eax,0x2
c002acee:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002acf5:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c002acfc:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002ad03:	89 d0                	mov    eax,edx
c002ad05:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002ad08:	8d 7a 01             	lea    edi,[edx+0x1]
c002ad0b:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002ad0f:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002ad13:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c002ad17:	83 e1 3f             	and    ecx,0x3f
c002ad1a:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c002ad1e:	89 f9                	mov    ecx,edi
c002ad20:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002ad27:	0f b6 c9             	movzx  ecx,cl
c002ad2a:	8d 78 02             	lea    edi,[eax+0x2]
c002ad2d:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002ad30:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002ad34:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c002ad38:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c002ad3c:	83 e2 3f             	and    edx,0x3f
c002ad3f:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c002ad43:	89 f9                	mov    ecx,edi
c002ad45:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c002ad4b:	0f b6 d1             	movzx  edx,cl
c002ad4e:	8d 78 03             	lea    edi,[eax+0x3]
c002ad51:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002ad54:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002ad58:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c002ad5c:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c002ad60:	83 e1 3f             	and    ecx,0x3f
c002ad63:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c002ad67:	89 f9                	mov    ecx,edi
c002ad69:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c002ad6f:	0f b6 c9             	movzx  ecx,cl
c002ad72:	8d 78 04             	lea    edi,[eax+0x4]
c002ad75:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002ad78:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002ad7c:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002ad80:	89 fa                	mov    edx,edi
c002ad82:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c002ad88:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c002ad8c:	83 e2 3f             	and    edx,0x3f
c002ad8f:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c002ad93:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c002ad9a:	66 85 f6             	test   si,si
c002ad9d:	74 65                	je     c002ae04 <IDE::open(int, int, void*)+0x34e>
c002ad9f:	89 f9                	mov    ecx,edi
c002ada1:	83 c0 05             	add    eax,0x5
c002ada4:	0f b6 d1             	movzx  edx,cl
c002ada7:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002adaa:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002adae:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002adb2:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002adb8:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c002adbc:	83 e0 3f             	and    eax,0x3f
c002adbf:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c002adc3:	eb 3f                	jmp    c002ae04 <IDE::open(int, int, void*)+0x34e>
c002adc5:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c002adcb:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002add2:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002add9:	05 06 02 00 00       	add    eax,0x206
c002adde:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002ade5:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c002adec:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002adf3:	05 06 02 00 00       	add    eax,0x206
c002adf8:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002adff:	e9 bd fe ff ff       	jmp    c002acc1 <IDE::open(int, int, void*)+0x20b>
c002ae04:	50                   	push   eax
c002ae05:	50                   	push   eax
c002ae06:	6a 00                	push   0x0
c002ae08:	53                   	push   ebx
c002ae09:	e8 30 fa ff ff       	call   c002a83e <IDE::prepareInterrupt(unsigned char)>
c002ae0e:	5a                   	pop    edx
c002ae0f:	59                   	pop    ecx
c002ae10:	6a 01                	push   0x1
c002ae12:	53                   	push   ebx
c002ae13:	e8 26 fa ff ff       	call   c002a83e <IDE::prepareInterrupt(unsigned char)>
c002ae18:	83 c4 0c             	add    esp,0xc
c002ae1b:	6a 00                	push   0x0
c002ae1d:	6a 00                	push   0x0
c002ae1f:	53                   	push   ebx
c002ae20:	e8 47 fc ff ff       	call   c002aa6c <IDE::enableIRQs(unsigned char, bool)>
c002ae25:	83 c4 0c             	add    esp,0xc
c002ae28:	6a 00                	push   0x0
c002ae2a:	6a 01                	push   0x1
c002ae2c:	53                   	push   ebx
c002ae2d:	e8 3a fc ff ff       	call   c002aa6c <IDE::enableIRQs(unsigned char, bool)>
c002ae32:	83 c4 10             	add    esp,0x10
c002ae35:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c002ae3c:	74 34                	je     c002ae72 <IDE::open(int, int, void*)+0x3bc>
c002ae3e:	83 ec 0c             	sub    esp,0xc
c002ae41:	53                   	push   ebx
c002ae42:	6a 01                	push   0x1
c002ae44:	68 34 aa 02 c0       	push   0xc002aa34
c002ae49:	6a 0e                	push   0xe
c002ae4b:	53                   	push   ebx
c002ae4c:	e8 1d 03 ff ff       	call   c001b16e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002ae51:	83 c4 14             	add    esp,0x14
c002ae54:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002ae5a:	53                   	push   ebx
c002ae5b:	6a 01                	push   0x1
c002ae5d:	68 50 aa 02 c0       	push   0xc002aa50
c002ae62:	6a 0f                	push   0xf
c002ae64:	53                   	push   ebx
c002ae65:	e8 04 03 ff ff       	call   c001b16e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002ae6a:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002ae70:	eb 38                	jmp    c002aeaa <IDE::open(int, int, void*)+0x3f4>
c002ae72:	83 ec 0c             	sub    esp,0xc
c002ae75:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c002ae7f:	53                   	push   ebx
c002ae80:	6a 00                	push   0x0
c002ae82:	68 34 aa 02 c0       	push   0xc002aa34
c002ae87:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002ae8d:	53                   	push   ebx
c002ae8e:	e8 db 02 ff ff       	call   c001b16e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002ae93:	83 c4 14             	add    esp,0x14
c002ae96:	53                   	push   ebx
c002ae97:	6a 00                	push   0x0
c002ae99:	68 50 aa 02 c0       	push   0xc002aa50
c002ae9e:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c002aea4:	53                   	push   ebx
c002aea5:	e8 c4 02 ff ff       	call   c001b16e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002aeaa:	8b 03                	mov    eax,DWORD PTR [ebx]
c002aeac:	83 c4 20             	add    esp,0x20
c002aeaf:	83 ec 0c             	sub    esp,0xc
c002aeb2:	53                   	push   ebx
c002aeb3:	ff 50 18             	call   DWORD PTR [eax+0x18]
c002aeb6:	83 c4 0c             	add    esp,0xc
c002aeb9:	6a 07                	push   0x7
c002aebb:	6a 00                	push   0x0
c002aebd:	53                   	push   ebx
c002aebe:	e8 61 fa ff ff       	call   c002a924 <IDE::read(unsigned char, unsigned char)>
c002aec3:	83 c4 0c             	add    esp,0xc
c002aec6:	6a 07                	push   0x7
c002aec8:	6a 01                	push   0x1
c002aeca:	53                   	push   ebx
c002aecb:	e8 54 fa ff ff       	call   c002a924 <IDE::read(unsigned char, unsigned char)>
c002aed0:	83 c4 0c             	add    esp,0xc
c002aed3:	6a 01                	push   0x1
c002aed5:	6a 00                	push   0x0
c002aed7:	53                   	push   ebx
c002aed8:	e8 8f fb ff ff       	call   c002aa6c <IDE::enableIRQs(unsigned char, bool)>
c002aedd:	83 c4 0c             	add    esp,0xc
c002aee0:	6a 01                	push   0x1
c002aee2:	6a 01                	push   0x1
c002aee4:	53                   	push   ebx
c002aee5:	e8 82 fb ff ff       	call   c002aa6c <IDE::enableIRQs(unsigned char, bool)>
c002aeea:	83 c4 2c             	add    esp,0x2c
c002aeed:	31 c0                	xor    eax,eax
c002aeef:	5b                   	pop    ebx
c002aef0:	5e                   	pop    esi
c002aef1:	5f                   	pop    edi
c002aef2:	5d                   	pop    ebp
c002aef3:	c3                   	ret    

c002aef4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c002aef4:	55                   	push   ebp
c002aef5:	57                   	push   edi
c002aef6:	56                   	push   esi
c002aef7:	53                   	push   ebx
c002aef8:	83 ec 1c             	sub    esp,0x1c
c002aefb:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002aeff:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002af03:	8d 42 f8             	lea    eax,[edx-0x8]
c002af06:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002af0a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002af0e:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002af12:	3c 03                	cmp    al,0x3
c002af14:	77 5a                	ja     c002af70 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c002af16:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002af1a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002af1e:	0f b6 db             	movzx  ebx,bl
c002af21:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c002af24:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002af29:	0c 80                	or     al,0x80
c002af2b:	50                   	push   eax
c002af2c:	6a 0c                	push   0xc
c002af2e:	53                   	push   ebx
c002af2f:	56                   	push   esi
c002af30:	e8 2f f9 ff ff       	call   c002a864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002af35:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c002af3a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002af3e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002af42:	0f b6 d2             	movzx  edx,dl
c002af45:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c002af49:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002af4b:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002af50:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c002af54:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002af58:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002af5c:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002af64:	83 c4 2c             	add    esp,0x2c
c002af67:	5b                   	pop    ebx
c002af68:	5e                   	pop    esi
c002af69:	5f                   	pop    edi
c002af6a:	5d                   	pop    ebp
c002af6b:	e9 f4 f8 ff ff       	jmp    c002a864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002af70:	0f b6 c2             	movzx  eax,dl
c002af73:	83 f8 07             	cmp    eax,0x7
c002af76:	77 12                	ja     c002af8a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c002af78:	0f b6 c2             	movzx  eax,dl
c002af7b:	0f b6 db             	movzx  ebx,bl
c002af7e:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c002af86:	01 c2                	add    edx,eax
c002af88:	eb 2f                	jmp    c002afb9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c002af8a:	83 f8 0d             	cmp    eax,0xd
c002af8d:	77 13                	ja     c002afa2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c002af8f:	0f b6 db             	movzx  ebx,bl
c002af92:	0f b6 d2             	movzx  edx,dl
c002af95:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c002af9c:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002afa0:	eb 17                	jmp    c002afb9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c002afa2:	83 f8 15             	cmp    eax,0x15
c002afa5:	77 14                	ja     c002afbb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c002afa7:	0f b6 db             	movzx  ebx,bl
c002afaa:	0f b6 d2             	movzx  edx,dl
c002afad:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c002afb5:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002afb9:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002afbb:	83 c4 1c             	add    esp,0x1c
c002afbe:	5b                   	pop    ebx
c002afbf:	5e                   	pop    esi
c002afc0:	5f                   	pop    edi
c002afc1:	5d                   	pop    ebp
c002afc2:	c3                   	ret    
c002afc3:	90                   	nop

c002afc4 <IDE::detect()>:
c002afc4:	55                   	push   ebp
c002afc5:	57                   	push   edi
c002afc6:	56                   	push   esi
c002afc7:	53                   	push   ebx
c002afc8:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002afce:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c002afd5:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002afdc:	0f 85 a4 02 00 00    	jne    c002b286 <IDE::detect()+0x2c2>
c002afe2:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c002afe9:	31 f6                	xor    esi,esi
c002afeb:	31 ed                	xor    ebp,ebp
c002afed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002aff5:	89 e8                	mov    eax,ebp
c002aff7:	c1 e0 06             	shl    eax,0x6
c002affa:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002b002:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002b006:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002b00a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002b00e:	c1 e0 04             	shl    eax,0x4
c002b011:	83 c8 a0             	or     eax,0xffffffa0
c002b014:	0f b6 c0             	movzx  eax,al
c002b017:	50                   	push   eax
c002b018:	6a 06                	push   0x6
c002b01a:	56                   	push   esi
c002b01b:	53                   	push   ebx
c002b01c:	e8 43 f8 ff ff       	call   c002a864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b021:	83 c4 0c             	add    esp,0xc
c002b024:	6a 0c                	push   0xc
c002b026:	56                   	push   esi
c002b027:	53                   	push   ebx
c002b028:	e8 f7 f8 ff ff       	call   c002a924 <IDE::read(unsigned char, unsigned char)>
c002b02d:	83 c4 0c             	add    esp,0xc
c002b030:	6a 0c                	push   0xc
c002b032:	56                   	push   esi
c002b033:	53                   	push   ebx
c002b034:	e8 eb f8 ff ff       	call   c002a924 <IDE::read(unsigned char, unsigned char)>
c002b039:	83 c4 0c             	add    esp,0xc
c002b03c:	6a 0c                	push   0xc
c002b03e:	56                   	push   esi
c002b03f:	53                   	push   ebx
c002b040:	e8 df f8 ff ff       	call   c002a924 <IDE::read(unsigned char, unsigned char)>
c002b045:	83 c4 0c             	add    esp,0xc
c002b048:	6a 0c                	push   0xc
c002b04a:	56                   	push   esi
c002b04b:	53                   	push   ebx
c002b04c:	e8 d3 f8 ff ff       	call   c002a924 <IDE::read(unsigned char, unsigned char)>
c002b051:	68 ec 00 00 00       	push   0xec
c002b056:	6a 07                	push   0x7
c002b058:	56                   	push   esi
c002b059:	53                   	push   ebx
c002b05a:	e8 05 f8 ff ff       	call   c002a864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b05f:	83 c4 1c             	add    esp,0x1c
c002b062:	6a 0c                	push   0xc
c002b064:	56                   	push   esi
c002b065:	53                   	push   ebx
c002b066:	e8 b9 f8 ff ff       	call   c002a924 <IDE::read(unsigned char, unsigned char)>
c002b06b:	83 c4 0c             	add    esp,0xc
c002b06e:	6a 0c                	push   0xc
c002b070:	56                   	push   esi
c002b071:	53                   	push   ebx
c002b072:	e8 ad f8 ff ff       	call   c002a924 <IDE::read(unsigned char, unsigned char)>
c002b077:	83 c4 0c             	add    esp,0xc
c002b07a:	6a 0c                	push   0xc
c002b07c:	56                   	push   esi
c002b07d:	53                   	push   ebx
c002b07e:	e8 a1 f8 ff ff       	call   c002a924 <IDE::read(unsigned char, unsigned char)>
c002b083:	83 c4 0c             	add    esp,0xc
c002b086:	6a 0c                	push   0xc
c002b088:	56                   	push   esi
c002b089:	53                   	push   ebx
c002b08a:	e8 95 f8 ff ff       	call   c002a924 <IDE::read(unsigned char, unsigned char)>
c002b08f:	83 c4 0c             	add    esp,0xc
c002b092:	6a 0c                	push   0xc
c002b094:	56                   	push   esi
c002b095:	53                   	push   ebx
c002b096:	e8 89 f8 ff ff       	call   c002a924 <IDE::read(unsigned char, unsigned char)>
c002b09b:	83 c4 10             	add    esp,0x10
c002b09e:	84 c0                	test   al,al
c002b0a0:	0f 84 60 01 00 00    	je     c002b206 <IDE::detect()+0x242>
c002b0a6:	31 ff                	xor    edi,edi
c002b0a8:	50                   	push   eax
c002b0a9:	6a 0c                	push   0xc
c002b0ab:	56                   	push   esi
c002b0ac:	53                   	push   ebx
c002b0ad:	e8 72 f8 ff ff       	call   c002a924 <IDE::read(unsigned char, unsigned char)>
c002b0b2:	83 c4 10             	add    esp,0x10
c002b0b5:	a8 01                	test   al,0x1
c002b0b7:	0f 85 6a 01 00 00    	jne    c002b227 <IDE::detect()+0x263>
c002b0bd:	a8 80                	test   al,0x80
c002b0bf:	75 04                	jne    c002b0c5 <IDE::detect()+0x101>
c002b0c1:	a8 08                	test   al,0x8
c002b0c3:	75 23                	jne    c002b0e8 <IDE::detect()+0x124>
c002b0c5:	47                   	inc    edi
c002b0c6:	81 ff 17 01 00 00    	cmp    edi,0x117
c002b0cc:	7e da                	jle    c002b0a8 <IDE::detect()+0xe4>
c002b0ce:	83 ec 0c             	sub    esp,0xc
c002b0d1:	6a 32                	push   0x32
c002b0d3:	e8 f0 9d ff ff       	call   c0024ec8 <milliTenthSleep(unsigned int)>
c002b0d8:	83 c4 10             	add    esp,0x10
c002b0db:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c002b0e1:	75 c5                	jne    c002b0a8 <IDE::detect()+0xe4>
c002b0e3:	e9 3f 01 00 00       	jmp    c002b227 <IDE::detect()+0x263>
c002b0e8:	31 c9                	xor    ecx,ecx
c002b0ea:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002b0ee:	8d 7c 24 10          	lea    edi,[esp+0x10]
c002b0f2:	83 ec 0c             	sub    esp,0xc
c002b0f5:	68 80 00 00 00       	push   0x80
c002b0fa:	57                   	push   edi
c002b0fb:	6a 00                	push   0x0
c002b0fd:	56                   	push   esi
c002b0fe:	53                   	push   ebx
c002b0ff:	e8 f0 fd ff ff       	call   c002aef4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002b104:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002b109:	89 e8                	mov    eax,ebp
c002b10b:	89 d1                	mov    ecx,edx
c002b10d:	c1 e0 06             	shl    eax,0x6
c002b110:	01 d8                	add    eax,ebx
c002b112:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002b119:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c002b120:	89 f2                	mov    edx,esi
c002b122:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002b128:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002b12c:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c002b132:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002b136:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002b13d:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c002b145:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002b14c:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c002b154:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002b15a:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002b161:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c002b167:	8d 54 24 58          	lea    edx,[esp+0x58]
c002b16b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002b16f:	83 c4 20             	add    esp,0x20
c002b172:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c002b175:	83 c0 02             	add    eax,0x2
c002b178:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002b17e:	83 c7 02             	add    edi,0x2
c002b181:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c002b184:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002b18a:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002b18e:	75 e2                	jne    c002b172 <IDE::detect()+0x1ae>
c002b190:	89 e8                	mov    eax,ebp
c002b192:	c1 e0 06             	shl    eax,0x6
c002b195:	01 d8                	add    eax,ebx
c002b197:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c002b19e:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c002b1a5:	c1 ea 09             	shr    edx,0x9
c002b1a8:	83 e2 01             	and    edx,0x1
c002b1ab:	80 e1 01             	and    cl,0x1
c002b1ae:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c002b1b4:	75 22                	jne    c002b1d8 <IDE::detect()+0x214>
c002b1b6:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c002b1bd:	74 46                	je     c002b205 <IDE::detect()+0x241>
c002b1bf:	83 ec 0c             	sub    esp,0xc
c002b1c2:	68 7c 01 00 00       	push   0x17c
c002b1c7:	e8 e6 b0 fe ff       	call   c00162b2 <malloc>
c002b1cc:	89 c7                	mov    edi,eax
c002b1ce:	89 04 24             	mov    DWORD PTR [esp],eax
c002b1d1:	e8 2e 05 00 00       	call   c002b704 <ATA::ATA()>
c002b1d6:	eb 17                	jmp    c002b1ef <IDE::detect()+0x22b>
c002b1d8:	83 ec 0c             	sub    esp,0xc
c002b1db:	68 84 01 00 00       	push   0x184
c002b1e0:	e8 cd b0 fe ff       	call   c00162b2 <malloc>
c002b1e5:	89 c7                	mov    edi,eax
c002b1e7:	89 04 24             	mov    DWORD PTR [esp],eax
c002b1ea:	e8 59 0e 00 00       	call   c002c048 <ATAPI::ATAPI()>
c002b1ef:	5a                   	pop    edx
c002b1f0:	59                   	pop    ecx
c002b1f1:	57                   	push   edi
c002b1f2:	53                   	push   ebx
c002b1f3:	e8 ca ff fe ff       	call   c001b1c2 <Device::addChild(Device*)>
c002b1f8:	8b 07                	mov    eax,DWORD PTR [edi]
c002b1fa:	53                   	push   ebx
c002b1fb:	55                   	push   ebp
c002b1fc:	6a 00                	push   0x0
c002b1fe:	57                   	push   edi
c002b1ff:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002b202:	83 c4 20             	add    esp,0x20
c002b205:	45                   	inc    ebp
c002b206:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c002b20b:	74 0d                	je     c002b21a <IDE::detect()+0x256>
c002b20d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c002b215:	e9 db fd ff ff       	jmp    c002aff5 <IDE::detect()+0x31>
c002b21a:	4e                   	dec    esi
c002b21b:	74 69                	je     c002b286 <IDE::detect()+0x2c2>
c002b21d:	be 01 00 00 00       	mov    esi,0x1
c002b222:	e9 c6 fd ff ff       	jmp    c002afed <IDE::detect()+0x29>
c002b227:	50                   	push   eax
c002b228:	6a 04                	push   0x4
c002b22a:	56                   	push   esi
c002b22b:	53                   	push   ebx
c002b22c:	e8 f3 f6 ff ff       	call   c002a924 <IDE::read(unsigned char, unsigned char)>
c002b231:	83 c4 0c             	add    esp,0xc
c002b234:	89 c7                	mov    edi,eax
c002b236:	6a 05                	push   0x5
c002b238:	56                   	push   esi
c002b239:	53                   	push   ebx
c002b23a:	e8 e5 f6 ff ff       	call   c002a924 <IDE::read(unsigned char, unsigned char)>
c002b23f:	83 c4 10             	add    esp,0x10
c002b242:	89 f9                	mov    ecx,edi
c002b244:	0f b6 c0             	movzx  eax,al
c002b247:	0f b6 f9             	movzx  edi,cl
c002b24a:	83 ff 14             	cmp    edi,0x14
c002b24d:	75 07                	jne    c002b256 <IDE::detect()+0x292>
c002b24f:	3d eb 00 00 00       	cmp    eax,0xeb
c002b254:	eb 0a                	jmp    c002b260 <IDE::detect()+0x29c>
c002b256:	3d 96 00 00 00       	cmp    eax,0x96
c002b25b:	75 a9                	jne    c002b206 <IDE::detect()+0x242>
c002b25d:	83 ff 69             	cmp    edi,0x69
c002b260:	75 a4                	jne    c002b206 <IDE::detect()+0x242>
c002b262:	68 a1 00 00 00       	push   0xa1
c002b267:	6a 07                	push   0x7
c002b269:	56                   	push   esi
c002b26a:	53                   	push   ebx
c002b26b:	e8 f4 f5 ff ff       	call   c002a864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b270:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c002b277:	e8 4c 9c ff ff       	call   c0024ec8 <milliTenthSleep(unsigned int)>
c002b27c:	83 c4 10             	add    esp,0x10
c002b27f:	b1 01                	mov    cl,0x1
c002b281:	e9 64 fe ff ff       	jmp    c002b0ea <IDE::detect()+0x126>
c002b286:	81 c4 1c 02 00 00    	add    esp,0x21c
c002b28c:	5b                   	pop    ebx
c002b28d:	5e                   	pop    esi
c002b28e:	5f                   	pop    edi
c002b28f:	5d                   	pop    ebp
c002b290:	c3                   	ret    
c002b291:	90                   	nop

c002b292 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c002b292:	55                   	push   ebp
c002b293:	57                   	push   edi
c002b294:	56                   	push   esi
c002b295:	53                   	push   ebx
c002b296:	83 ec 1c             	sub    esp,0x1c
c002b299:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002b29d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002b2a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002b2a5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002b2a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002b2ad:	88 c3                	mov    bl,al
c002b2af:	25 ff 00 00 00       	and    eax,0xff
c002b2b4:	0f 84 88 00 00 00    	je     c002b342 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b2ba:	83 ec 0c             	sub    esp,0xc
c002b2bd:	89 c7                	mov    edi,eax
c002b2bf:	68 ef 32 03 c0       	push   0xc00332ef
c002b2c4:	e8 78 de fe ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c002b2c9:	83 c4 10             	add    esp,0x10
c002b2cc:	83 ff 01             	cmp    edi,0x1
c002b2cf:	74 6b                	je     c002b33c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c002b2d1:	83 ff 02             	cmp    edi,0x2
c002b2d4:	75 58                	jne    c002b32e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c002b2d6:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c002b2db:	01 ff                	add    edi,edi
c002b2dd:	50                   	push   eax
c002b2de:	09 fe                	or     esi,edi
c002b2e0:	6a 01                	push   0x1
c002b2e2:	89 f0                	mov    eax,esi
c002b2e4:	0f b6 f0             	movzx  esi,al
c002b2e7:	c1 e6 06             	shl    esi,0x6
c002b2ea:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c002b2f2:	50                   	push   eax
c002b2f3:	55                   	push   ebp
c002b2f4:	e8 2b f6 ff ff       	call   c002a924 <IDE::read(unsigned char, unsigned char)>
c002b2f9:	83 c4 10             	add    esp,0x10
c002b2fc:	a8 01                	test   al,0x1
c002b2fe:	74 02                	je     c002b302 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c002b300:	b3 07                	mov    bl,0x7
c002b302:	a8 02                	test   al,0x2
c002b304:	74 02                	je     c002b308 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c002b306:	b3 03                	mov    bl,0x3
c002b308:	a8 04                	test   al,0x4
c002b30a:	74 02                	je     c002b30e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c002b30c:	b3 14                	mov    bl,0x14
c002b30e:	a8 08                	test   al,0x8
c002b310:	74 02                	je     c002b314 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c002b312:	b3 03                	mov    bl,0x3
c002b314:	a8 10                	test   al,0x10
c002b316:	74 02                	je     c002b31a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c002b318:	b3 15                	mov    bl,0x15
c002b31a:	a8 20                	test   al,0x20
c002b31c:	74 02                	je     c002b320 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c002b31e:	b3 03                	mov    bl,0x3
c002b320:	a8 40                	test   al,0x40
c002b322:	74 02                	je     c002b326 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c002b324:	b3 16                	mov    bl,0x16
c002b326:	a8 80                	test   al,0x80
c002b328:	74 18                	je     c002b342 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b32a:	b3 0d                	mov    bl,0xd
c002b32c:	eb 14                	jmp    c002b342 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b32e:	83 ff 03             	cmp    edi,0x3
c002b331:	74 0d                	je     c002b340 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c002b333:	83 ff 04             	cmp    edi,0x4
c002b336:	75 0a                	jne    c002b342 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b338:	b3 08                	mov    bl,0x8
c002b33a:	eb 06                	jmp    c002b342 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b33c:	b3 13                	mov    bl,0x13
c002b33e:	eb 02                	jmp    c002b342 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b340:	b3 17                	mov    bl,0x17
c002b342:	83 c4 1c             	add    esp,0x1c
c002b345:	88 d8                	mov    al,bl
c002b347:	5b                   	pop    ebx
c002b348:	5e                   	pop    esi
c002b349:	5f                   	pop    edi
c002b34a:	5d                   	pop    ebp
c002b34b:	c3                   	ret    

c002b34c <IDE::polling(unsigned char, unsigned int)>:
c002b34c:	57                   	push   edi
c002b34d:	56                   	push   esi
c002b34e:	53                   	push   ebx
c002b34f:	bb 04 00 00 00       	mov    ebx,0x4
c002b354:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c002b358:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002b35d:	52                   	push   edx
c002b35e:	6a 0c                	push   0xc
c002b360:	56                   	push   esi
c002b361:	57                   	push   edi
c002b362:	e8 bd f5 ff ff       	call   c002a924 <IDE::read(unsigned char, unsigned char)>
c002b367:	83 c4 10             	add    esp,0x10
c002b36a:	4b                   	dec    ebx
c002b36b:	75 f0                	jne    c002b35d <IDE::polling(unsigned char, unsigned int)+0x11>
c002b36d:	bb a0 86 01 00       	mov    ebx,0x186a0
c002b372:	50                   	push   eax
c002b373:	6a 0c                	push   0xc
c002b375:	56                   	push   esi
c002b376:	57                   	push   edi
c002b377:	e8 a8 f5 ff ff       	call   c002a924 <IDE::read(unsigned char, unsigned char)>
c002b37c:	83 c4 10             	add    esp,0x10
c002b37f:	a8 01                	test   al,0x1
c002b381:	75 17                	jne    c002b39a <IDE::polling(unsigned char, unsigned int)+0x4e>
c002b383:	a8 20                	test   al,0x20
c002b385:	75 0f                	jne    c002b396 <IDE::polling(unsigned char, unsigned int)+0x4a>
c002b387:	4b                   	dec    ebx
c002b388:	74 10                	je     c002b39a <IDE::polling(unsigned char, unsigned int)+0x4e>
c002b38a:	a8 80                	test   al,0x80
c002b38c:	75 e4                	jne    c002b372 <IDE::polling(unsigned char, unsigned int)+0x26>
c002b38e:	a8 08                	test   al,0x8
c002b390:	74 e0                	je     c002b372 <IDE::polling(unsigned char, unsigned int)+0x26>
c002b392:	31 c0                	xor    eax,eax
c002b394:	eb 06                	jmp    c002b39c <IDE::polling(unsigned char, unsigned int)+0x50>
c002b396:	b0 01                	mov    al,0x1
c002b398:	eb 02                	jmp    c002b39c <IDE::polling(unsigned char, unsigned int)+0x50>
c002b39a:	b0 02                	mov    al,0x2
c002b39c:	5b                   	pop    ebx
c002b39d:	5e                   	pop    esi
c002b39e:	5f                   	pop    edi
c002b39f:	c3                   	ret    

c002b3a0 <SATABus::close(int, int, void*)>:
c002b3a0:	31 c0                	xor    eax,eax
c002b3a2:	c3                   	ret    
c002b3a3:	90                   	nop

c002b3a4 <SATABus::detect()>:
c002b3a4:	c3                   	ret    
c002b3a5:	90                   	nop

c002b3a6 <SATABus::SATABus()>:
c002b3a6:	83 ec 0c             	sub    esp,0xc
c002b3a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b3ad:	83 ec 08             	sub    esp,0x8
c002b3b0:	68 28 33 03 c0       	push   0xc0033328
c002b3b5:	50                   	push   eax
c002b3b6:	e8 61 01 ff ff       	call   c001b51c <HardDiskController::HardDiskController(char const*)>
c002b3bb:	83 c4 10             	add    esp,0x10
c002b3be:	ba 54 33 03 c0       	mov    edx,0xc0033354
c002b3c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b3c7:	89 10                	mov    DWORD PTR [eax],edx
c002b3c9:	83 ec 0c             	sub    esp,0xc
c002b3cc:	6a 50                	push   0x50
c002b3ce:	e8 b7 b2 fe ff       	call   c001668a <Phys::allocateContiguousPages(int)>
c002b3d3:	83 c4 10             	add    esp,0x10
c002b3d6:	89 c2                	mov    edx,eax
c002b3d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b3dc:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002b3e2:	83 ec 0c             	sub    esp,0xc
c002b3e5:	6a 50                	push   0x50
c002b3e7:	e8 1d ca fe ff       	call   c0017e09 <Virt::allocateKernelVirtualPages(int)>
c002b3ec:	83 c4 10             	add    esp,0x10
c002b3ef:	89 c2                	mov    edx,eax
c002b3f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b3f5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002b3fb:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c002b400:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002b404:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c002b40a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002b40e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002b414:	83 ec 0c             	sub    esp,0xc
c002b417:	6a 03                	push   0x3
c002b419:	6a 50                	push   0x50
c002b41b:	51                   	push   ecx
c002b41c:	52                   	push   edx
c002b41d:	50                   	push   eax
c002b41e:	e8 f3 d2 fe ff       	call   c0018716 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c002b423:	83 c4 20             	add    esp,0x20
c002b426:	90                   	nop
c002b427:	83 c4 0c             	add    esp,0xc
c002b42a:	c3                   	ret    
c002b42b:	90                   	nop

c002b42c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c002b42c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002b430:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c002b433:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002b436:	09 c2                	or     edx,eax
c002b438:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002b43c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002b442:	8b 08                	mov    ecx,DWORD PTR [eax]
c002b444:	31 c0                	xor    eax,eax
c002b446:	c1 e9 08             	shr    ecx,0x8
c002b449:	83 e1 0f             	and    ecx,0xf
c002b44c:	39 c8                	cmp    eax,ecx
c002b44e:	74 0a                	je     c002b45a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c002b450:	f6 c2 01             	test   dl,0x1
c002b453:	74 08                	je     c002b45d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c002b455:	d1 ea                	shr    edx,1
c002b457:	40                   	inc    eax
c002b458:	eb f2                	jmp    c002b44c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c002b45a:	83 c8 ff             	or     eax,0xffffffff
c002b45d:	c3                   	ret    

c002b45e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c002b45e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002b462:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c002b465:	89 c2                	mov    edx,eax
c002b467:	c1 ea 08             	shr    edx,0x8
c002b46a:	83 e2 0f             	and    edx,0xf
c002b46d:	4a                   	dec    edx
c002b46e:	75 32                	jne    c002b4a2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002b470:	83 e0 0f             	and    eax,0xf
c002b473:	83 f8 03             	cmp    eax,0x3
c002b476:	75 2a                	jne    c002b4a2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002b478:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c002b47b:	b8 02 00 00 00       	mov    eax,0x2
c002b480:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c002b486:	74 1c                	je     c002b4a4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002b488:	b8 04 00 00 00       	mov    eax,0x4
c002b48d:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c002b493:	74 0f                	je     c002b4a4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002b495:	31 c0                	xor    eax,eax
c002b497:	83 fa 03             	cmp    edx,0x3
c002b49a:	0f 94 c0             	sete   al
c002b49d:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c002b4a1:	c3                   	ret    
c002b4a2:	31 c0                	xor    eax,eax
c002b4a4:	c3                   	ret    
c002b4a5:	90                   	nop

c002b4a6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c002b4a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002b4aa:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b4ad:	0f ba e2 0f          	bt     edx,0xf
c002b4b1:	72 f7                	jb     c002b4aa <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c002b4b3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b4b6:	83 ca 10             	or     edx,0x10
c002b4b9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002b4bc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b4bf:	83 ca 01             	or     edx,0x1
c002b4c2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002b4c5:	c3                   	ret    

c002b4c6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c002b4c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002b4ca:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b4cd:	83 e2 fe             	and    edx,0xfffffffe
c002b4d0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002b4d3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b4d6:	83 e2 ef             	and    edx,0xffffffef
c002b4d9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002b4dc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b4df:	0f ba e2 0e          	bt     edx,0xe
c002b4e3:	72 f7                	jb     c002b4dc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002b4e5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b4e8:	0f ba e2 0f          	bt     edx,0xf
c002b4ec:	72 ee                	jb     c002b4dc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002b4ee:	c3                   	ret    
c002b4ef:	90                   	nop

c002b4f0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c002b4f0:	55                   	push   ebp
c002b4f1:	57                   	push   edi
c002b4f2:	56                   	push   esi
c002b4f3:	53                   	push   ebx
c002b4f4:	83 ec 1c             	sub    esp,0x1c
c002b4f7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002b4fb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002b4ff:	53                   	push   ebx
c002b500:	56                   	push   esi
c002b501:	e8 c0 ff ff ff       	call   c002b4c6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002b506:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c002b50a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c002b510:	83 ec 0c             	sub    esp,0xc
c002b513:	c1 e5 0a             	shl    ebp,0xa
c002b516:	01 e8                	add    eax,ebp
c002b518:	89 03                	mov    DWORD PTR [ebx],eax
c002b51a:	8b 03                	mov    eax,DWORD PTR [ebx]
c002b51c:	68 00 04 00 00       	push   0x400
c002b521:	6a 00                	push   0x0
c002b523:	50                   	push   eax
c002b524:	e8 c7 4f fd ff       	call   c00004f0 <memset>
c002b529:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c002b52f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c002b533:	01 e8                	add    eax,ebp
c002b535:	83 c4 1c             	add    esp,0x1c
c002b538:	89 03                	mov    DWORD PTR [ebx],eax
c002b53a:	c1 e2 08             	shl    edx,0x8
c002b53d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002b544:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c002b54a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c002b550:	01 f8                	add    eax,edi
c002b552:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002b555:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c002b558:	68 00 01 00 00       	push   0x100
c002b55d:	6a 00                	push   0x0
c002b55f:	50                   	push   eax
c002b560:	e8 8b 4f fd ff       	call   c00004f0 <memset>
c002b565:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c002b56b:	01 fa                	add    edx,edi
c002b56d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002b571:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c002b574:	c1 e7 0d             	shl    edi,0xd
c002b577:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002b57e:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c002b584:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c002b58a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002b58e:	31 ff                	xor    edi,edi
c002b590:	83 c4 10             	add    esp,0x10
c002b593:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c002b599:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002b59d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c002b5a3:	83 c5 20             	add    ebp,0x20
c002b5a6:	01 f8                	add    eax,edi
c002b5a8:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002b5ab:	52                   	push   edx
c002b5ac:	68 00 01 00 00       	push   0x100
c002b5b1:	6a 00                	push   0x0
c002b5b3:	50                   	push   eax
c002b5b4:	e8 37 4f fd ff       	call   c00004f0 <memset>
c002b5b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002b5bd:	83 c4 10             	add    esp,0x10
c002b5c0:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c002b5c6:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c002b5cd:	01 f8                	add    eax,edi
c002b5cf:	81 c7 00 01 00 00    	add    edi,0x100
c002b5d5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002b5d8:	81 ff 00 20 00 00    	cmp    edi,0x2000
c002b5de:	75 b3                	jne    c002b593 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c002b5e0:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c002b5e7:	50                   	push   eax
c002b5e8:	50                   	push   eax
c002b5e9:	53                   	push   ebx
c002b5ea:	56                   	push   esi
c002b5eb:	e8 b6 fe ff ff       	call   c002b4a6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c002b5f0:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c002b5f7:	83 c4 2c             	add    esp,0x2c
c002b5fa:	5b                   	pop    ebx
c002b5fb:	5e                   	pop    esi
c002b5fc:	5f                   	pop    edi
c002b5fd:	5d                   	pop    ebp
c002b5fe:	c3                   	ret    
c002b5ff:	90                   	nop

c002b600 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c002b600:	55                   	push   ebp
c002b601:	57                   	push   edi
c002b602:	56                   	push   esi
c002b603:	53                   	push   ebx
c002b604:	31 db                	xor    ebx,ebx
c002b606:	83 ec 0c             	sub    esp,0xc
c002b609:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002b60d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002b611:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c002b614:	f7 c7 01 00 00 00    	test   edi,0x1
c002b61a:	74 7a                	je     c002b696 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c002b61c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002b620:	89 d8                	mov    eax,ebx
c002b622:	c1 e0 07             	shl    eax,0x7
c002b625:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c002b62c:	55                   	push   ebp
c002b62d:	56                   	push   esi
c002b62e:	e8 2b fe ff ff       	call   c002b45e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c002b633:	5a                   	pop    edx
c002b634:	83 f8 01             	cmp    eax,0x1
c002b637:	59                   	pop    ecx
c002b638:	75 21                	jne    c002b65b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c002b63a:	50                   	push   eax
c002b63b:	53                   	push   ebx
c002b63c:	55                   	push   ebp
c002b63d:	56                   	push   esi
c002b63e:	e8 ad fe ff ff       	call   c002b4f0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002b643:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c002b64a:	e8 63 ac fe ff       	call   c00162b2 <malloc>
c002b64f:	89 c5                	mov    ebp,eax
c002b651:	89 04 24             	mov    DWORD PTR [esp],eax
c002b654:	e8 bb 10 00 00       	call   c002c714 <SATA::SATA()>
c002b659:	eb 24                	jmp    c002b67f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c002b65b:	83 f8 04             	cmp    eax,0x4
c002b65e:	75 36                	jne    c002b696 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c002b660:	51                   	push   ecx
c002b661:	53                   	push   ebx
c002b662:	55                   	push   ebp
c002b663:	56                   	push   esi
c002b664:	e8 87 fe ff ff       	call   c002b4f0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002b669:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c002b670:	e8 3d ac fe ff       	call   c00162b2 <malloc>
c002b675:	89 c5                	mov    ebp,eax
c002b677:	89 04 24             	mov    DWORD PTR [esp],eax
c002b67a:	e8 2b 18 00 00       	call   c002ceaa <SATAPI::SATAPI()>
c002b67f:	58                   	pop    eax
c002b680:	5a                   	pop    edx
c002b681:	55                   	push   ebp
c002b682:	56                   	push   esi
c002b683:	e8 3a fb fe ff       	call   c001b1c2 <Device::addChild(Device*)>
c002b688:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c002b68b:	56                   	push   esi
c002b68c:	6a 00                	push   0x0
c002b68e:	53                   	push   ebx
c002b68f:	55                   	push   ebp
c002b690:	ff 52 08             	call   DWORD PTR [edx+0x8]
c002b693:	83 c4 20             	add    esp,0x20
c002b696:	d1 ef                	shr    edi,1
c002b698:	43                   	inc    ebx
c002b699:	83 fb 20             	cmp    ebx,0x20
c002b69c:	0f 85 72 ff ff ff    	jne    c002b614 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c002b6a2:	83 c4 0c             	add    esp,0xc
c002b6a5:	5b                   	pop    ebx
c002b6a6:	5e                   	pop    esi
c002b6a7:	5f                   	pop    edi
c002b6a8:	5d                   	pop    ebp
c002b6a9:	c3                   	ret    

c002b6aa <SATABus::open(int, int, void*)>:
c002b6aa:	53                   	push   ebx
c002b6ab:	83 ec 08             	sub    esp,0x8
c002b6ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002b6b2:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c002b6b8:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002b6be:	e8 3d 92 ff ff       	call   c0024900 <KeDisablePreemption()>
c002b6c3:	52                   	push   edx
c002b6c4:	52                   	push   edx
c002b6c5:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c002b6cb:	53                   	push   ebx
c002b6cc:	e8 2f ff ff ff       	call   c002b600 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c002b6d1:	e8 52 92 ff ff       	call   c0024928 <KeRestorePreemption()>
c002b6d6:	31 c0                	xor    eax,eax
c002b6d8:	83 c4 18             	add    esp,0x18
c002b6db:	5b                   	pop    ebx
c002b6dc:	c3                   	ret    
c002b6dd:	90                   	nop

c002b6de <ATA::close(int, int, void*)>:
c002b6de:	83 ec 0c             	sub    esp,0xc
c002b6e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b6e5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002b6eb:	85 c0                	test   eax,eax
c002b6ed:	74 0c                	je     c002b6fb <ATA::close(int, int, void*)+0x1d>
c002b6ef:	83 ec 0c             	sub    esp,0xc
c002b6f2:	8b 10                	mov    edx,DWORD PTR [eax]
c002b6f4:	50                   	push   eax
c002b6f5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002b6f8:	83 c4 10             	add    esp,0x10
c002b6fb:	31 c0                	xor    eax,eax
c002b6fd:	83 c4 0c             	add    esp,0xc
c002b700:	c3                   	ret    
c002b701:	90                   	nop

c002b702 <ATA::powerSaving(PowerSavingLevel)>:
c002b702:	c3                   	ret    
c002b703:	90                   	nop

c002b704 <ATA::ATA()>:
c002b704:	83 ec 0c             	sub    esp,0xc
c002b707:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b70b:	83 ec 04             	sub    esp,0x4
c002b70e:	68 00 02 00 00       	push   0x200
c002b713:	68 2d 34 03 c0       	push   0xc003342d
c002b718:	50                   	push   eax
c002b719:	e8 88 fe fe ff       	call   c001b5a6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002b71e:	83 c4 10             	add    esp,0x10
c002b721:	ba 94 33 03 c0       	mov    edx,0xc0033394
c002b726:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b72a:	89 10                	mov    DWORD PTR [eax],edx
c002b72c:	90                   	nop
c002b72d:	83 c4 0c             	add    esp,0xc
c002b730:	c3                   	ret    
c002b731:	90                   	nop

c002b732 <ATA::flush(bool)>:
c002b732:	53                   	push   ebx
c002b733:	83 ec 08             	sub    esp,0x8
c002b736:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002b73a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002b73f:	83 f8 01             	cmp    eax,0x1
c002b742:	19 c0                	sbb    eax,eax
c002b744:	83 e0 fd             	and    eax,0xfffffffd
c002b747:	05 ea 00 00 00       	add    eax,0xea
c002b74c:	50                   	push   eax
c002b74d:	6a 07                	push   0x7
c002b74f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002b756:	50                   	push   eax
c002b757:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002b75d:	e8 02 f1 ff ff       	call   c002a864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b762:	83 c4 0c             	add    esp,0xc
c002b765:	6a 00                	push   0x0
c002b767:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002b76e:	50                   	push   eax
c002b76f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002b775:	e8 d2 fb ff ff       	call   c002b34c <IDE::polling(unsigned char, unsigned int)>
c002b77a:	83 c4 18             	add    esp,0x18
c002b77d:	5b                   	pop    ebx
c002b77e:	c3                   	ret    
c002b77f:	90                   	nop

c002b780 <ATA::readyForCommand()>:
c002b780:	56                   	push   esi
c002b781:	53                   	push   ebx
c002b782:	53                   	push   ebx
c002b783:	31 db                	xor    ebx,ebx
c002b785:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002b789:	51                   	push   ecx
c002b78a:	6a 0c                	push   0xc
c002b78c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002b793:	50                   	push   eax
c002b794:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002b79a:	e8 85 f1 ff ff       	call   c002a924 <IDE::read(unsigned char, unsigned char)>
c002b79f:	83 c4 10             	add    esp,0x10
c002b7a2:	a8 88                	test   al,0x88
c002b7a4:	74 1f                	je     c002b7c5 <ATA::readyForCommand()+0x45>
c002b7a6:	43                   	inc    ebx
c002b7a7:	83 fb 63             	cmp    ebx,0x63
c002b7aa:	7e dd                	jle    c002b789 <ATA::readyForCommand()+0x9>
c002b7ac:	83 ec 0c             	sub    esp,0xc
c002b7af:	6a 0a                	push   0xa
c002b7b1:	e8 12 97 ff ff       	call   c0024ec8 <milliTenthSleep(unsigned int)>
c002b7b6:	83 c4 10             	add    esp,0x10
c002b7b9:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002b7bf:	75 c8                	jne    c002b789 <ATA::readyForCommand()+0x9>
c002b7c1:	31 c0                	xor    eax,eax
c002b7c3:	eb 02                	jmp    c002b7c7 <ATA::readyForCommand()+0x47>
c002b7c5:	b0 01                	mov    al,0x1
c002b7c7:	5a                   	pop    edx
c002b7c8:	5b                   	pop    ebx
c002b7c9:	5e                   	pop    esi
c002b7ca:	c3                   	ret    
c002b7cb:	90                   	nop

c002b7cc <ATA::access(unsigned long long, int, void*, bool)>:
c002b7cc:	55                   	push   ebp
c002b7cd:	57                   	push   edi
c002b7ce:	56                   	push   esi
c002b7cf:	53                   	push   ebx
c002b7d0:	83 ec 2c             	sub    esp,0x2c
c002b7d3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002b7d7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002b7db:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002b7df:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002b7e3:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002b7e7:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002b7eb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002b7ef:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002b7f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002b7f9:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002b7ff:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002b803:	c1 e0 06             	shl    eax,0x6
c002b806:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c002b80e:	74 5d                	je     c002b86d <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c002b810:	89 fa                	mov    edx,edi
c002b812:	89 f0                	mov    eax,esi
c002b814:	0f ac d0 1c          	shrd   eax,edx,0x1c
c002b818:	c1 ea 1c             	shr    edx,0x1c
c002b81b:	89 d1                	mov    ecx,edx
c002b81d:	09 c1                	or     ecx,eax
c002b81f:	74 25                	je     c002b846 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c002b821:	31 ed                	xor    ebp,ebp
c002b823:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c002b82a:	89 fa                	mov    edx,edi
c002b82c:	89 f0                	mov    eax,esi
c002b82e:	0f ad d0             	shrd   eax,edx,cl
c002b831:	d3 ea                	shr    edx,cl
c002b833:	f6 c1 20             	test   cl,0x20
c002b836:	74 02                	je     c002b83a <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c002b838:	89 d0                	mov    eax,edx
c002b83a:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c002b83e:	45                   	inc    ebp
c002b83f:	83 fd 06             	cmp    ebp,0x6
c002b842:	75 df                	jne    c002b823 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c002b844:	eb 76                	jmp    c002b8bc <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c002b846:	89 f0                	mov    eax,esi
c002b848:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c002b84d:	89 fa                	mov    edx,edi
c002b84f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002b856:	0f ac d0 10          	shrd   eax,edx,0x10
c002b85a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002b85f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002b863:	c1 ee 18             	shr    esi,0x18
c002b866:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c002b86b:	eb 56                	jmp    c002b8c3 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002b86d:	6a 00                	push   0x0
c002b86f:	6a 3f                	push   0x3f
c002b871:	57                   	push   edi
c002b872:	56                   	push   esi
c002b873:	e8 c8 2a 00 00       	call   c002e340 <__umoddi3>
c002b878:	83 c4 10             	add    esp,0x10
c002b87b:	40                   	inc    eax
c002b87c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002b880:	6a 00                	push   0x0
c002b882:	68 f0 03 00 00       	push   0x3f0
c002b887:	57                   	push   edi
c002b888:	56                   	push   esi
c002b889:	e8 b2 29 00 00       	call   c002e240 <__udivdi3>
c002b88e:	83 c4 10             	add    esp,0x10
c002b891:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c002b896:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002b89d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002b8a2:	6a 00                	push   0x0
c002b8a4:	6a 3f                	push   0x3f
c002b8a6:	57                   	push   edi
c002b8a7:	56                   	push   esi
c002b8a8:	e8 93 29 00 00       	call   c002e240 <__udivdi3>
c002b8ad:	83 c4 10             	add    esp,0x10
c002b8b0:	83 e0 0f             	and    eax,0xf
c002b8b3:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c002b8b8:	89 c6                	mov    esi,eax
c002b8ba:	eb 07                	jmp    c002b8c3 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002b8bc:	31 f6                	xor    esi,esi
c002b8be:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c002b8c3:	bf 01 00 00 00       	mov    edi,0x1
c002b8c8:	50                   	push   eax
c002b8c9:	6a 00                	push   0x0
c002b8cb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002b8d2:	50                   	push   eax
c002b8d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002b8d7:	e8 90 f1 ff ff       	call   c002aa6c <IDE::enableIRQs(unsigned char, bool)>
c002b8dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002b8df:	e8 9c fe ff ff       	call   c002b780 <ATA::readyForCommand()>
c002b8e4:	83 c4 10             	add    esp,0x10
c002b8e7:	84 c0                	test   al,al
c002b8e9:	0f 84 69 02 00 00    	je     c002bb58 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c002b8ef:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002b8f5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002b8fb:	c1 e0 04             	shl    eax,0x4
c002b8fe:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c002b905:	09 c6                	or     esi,eax
c002b907:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c002b90c:	75 05                	jne    c002b913 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c002b90e:	83 ce a0             	or     esi,0xffffffa0
c002b911:	eb 03                	jmp    c002b916 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c002b913:	83 ce e0             	or     esi,0xffffffe0
c002b916:	89 f0                	mov    eax,esi
c002b918:	0f b6 f0             	movzx  esi,al
c002b91b:	56                   	push   esi
c002b91c:	6a 06                	push   0x6
c002b91e:	51                   	push   ecx
c002b91f:	52                   	push   edx
c002b920:	e8 3f ef ff ff       	call   c002a864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b925:	83 c4 10             	add    esp,0x10
c002b928:	6a 00                	push   0x0
c002b92a:	6a 01                	push   0x1
c002b92c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002b933:	50                   	push   eax
c002b934:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002b93a:	e8 25 ef ff ff       	call   c002a864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b93f:	83 c4 10             	add    esp,0x10
c002b942:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c002b947:	83 f8 02             	cmp    eax,0x2
c002b94a:	75 6e                	jne    c002b9ba <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c002b94c:	6a 00                	push   0x0
c002b94e:	6a 08                	push   0x8
c002b950:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002b957:	50                   	push   eax
c002b958:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002b95e:	e8 01 ef ff ff       	call   c002a864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b963:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002b968:	50                   	push   eax
c002b969:	6a 09                	push   0x9
c002b96b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002b972:	50                   	push   eax
c002b973:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002b979:	e8 e6 ee ff ff       	call   c002a864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b97e:	83 c4 20             	add    esp,0x20
c002b981:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002b986:	50                   	push   eax
c002b987:	6a 0a                	push   0xa
c002b989:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002b990:	50                   	push   eax
c002b991:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002b997:	e8 c8 ee ff ff       	call   c002a864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b99c:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c002b9a1:	50                   	push   eax
c002b9a2:	6a 0b                	push   0xb
c002b9a4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002b9ab:	50                   	push   eax
c002b9ac:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002b9b2:	e8 ad ee ff ff       	call   c002a864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b9b7:	83 c4 20             	add    esp,0x20
c002b9ba:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c002b9bf:	50                   	push   eax
c002b9c0:	6a 02                	push   0x2
c002b9c2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002b9c9:	50                   	push   eax
c002b9ca:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002b9d0:	e8 8f ee ff ff       	call   c002a864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b9d5:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002b9da:	50                   	push   eax
c002b9db:	6a 03                	push   0x3
c002b9dd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002b9e4:	50                   	push   eax
c002b9e5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002b9eb:	e8 74 ee ff ff       	call   c002a864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b9f0:	83 c4 20             	add    esp,0x20
c002b9f3:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002b9f8:	50                   	push   eax
c002b9f9:	6a 04                	push   0x4
c002b9fb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002ba02:	50                   	push   eax
c002ba03:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002ba09:	e8 56 ee ff ff       	call   c002a864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002ba0e:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002ba13:	50                   	push   eax
c002ba14:	6a 05                	push   0x5
c002ba16:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002ba1d:	50                   	push   eax
c002ba1e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002ba24:	e8 3b ee ff ff       	call   c002a864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002ba29:	83 c4 20             	add    esp,0x20
c002ba2c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002ba31:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c002ba36:	74 11                	je     c002ba49 <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c002ba38:	b8 30 00 00 00       	mov    eax,0x30
c002ba3d:	83 fa 02             	cmp    edx,0x2
c002ba40:	75 16                	jne    c002ba58 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c002ba42:	b8 34 00 00 00       	mov    eax,0x34
c002ba47:	eb 0f                	jmp    c002ba58 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c002ba49:	b8 20 00 00 00       	mov    eax,0x20
c002ba4e:	83 fa 02             	cmp    edx,0x2
c002ba51:	75 05                	jne    c002ba58 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c002ba53:	b8 24 00 00 00       	mov    eax,0x24
c002ba58:	50                   	push   eax
c002ba59:	6a 07                	push   0x7
c002ba5b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002ba62:	50                   	push   eax
c002ba63:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002ba69:	e8 f6 ed ff ff       	call   c002a864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002ba6e:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002ba72:	83 c4 10             	add    esp,0x10
c002ba75:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c002ba7a:	85 f6                	test   esi,esi
c002ba7c:	0f 84 b3 00 00 00    	je     c002bb35 <ATA::access(unsigned long long, int, void*, bool)+0x369>
c002ba82:	50                   	push   eax
c002ba83:	6a 01                	push   0x1
c002ba85:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002ba8c:	50                   	push   eax
c002ba8d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002ba93:	e8 b4 f8 ff ff       	call   c002b34c <IDE::polling(unsigned char, unsigned int)>
c002ba98:	83 c4 10             	add    esp,0x10
c002ba9b:	0f b6 f8             	movzx  edi,al
c002ba9e:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002baa4:	85 ff                	test   edi,edi
c002baa6:	74 1d                	je     c002bac5 <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c002baa8:	57                   	push   edi
c002baa9:	0f b6 d2             	movzx  edx,dl
c002baac:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002bab3:	50                   	push   eax
c002bab4:	52                   	push   edx
c002bab5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002babb:	e8 d2 f7 ff ff       	call   c002b292 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002bac0:	e9 90 00 00 00       	jmp    c002bb55 <ATA::access(unsigned long long, int, void*, bool)+0x389>
c002bac5:	85 ed                	test   ebp,ebp
c002bac7:	74 3b                	je     c002bb04 <ATA::access(unsigned long long, int, void*, bool)+0x338>
c002bac9:	31 c9                	xor    ecx,ecx
c002bacb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002bacf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002bad3:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c002bad7:	50                   	push   eax
c002bad8:	50                   	push   eax
c002bad9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bae0:	50                   	push   eax
c002bae1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bae7:	e8 66 ed ff ff       	call   c002a852 <IDE::getBase(unsigned char)>
c002baec:	89 c2                	mov    edx,eax
c002baee:	89 f8                	mov    eax,edi
c002baf0:	66 ef                	out    dx,ax
c002baf2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002baf6:	83 c4 10             	add    esp,0x10
c002baf9:	41                   	inc    ecx
c002bafa:	81 f9 00 01 00 00    	cmp    ecx,0x100
c002bb00:	75 c9                	jne    c002bacb <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c002bb02:	eb 23                	jmp    c002bb27 <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c002bb04:	0f b6 d2             	movzx  edx,dl
c002bb07:	51                   	push   ecx
c002bb08:	51                   	push   ecx
c002bb09:	52                   	push   edx
c002bb0a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bb10:	e8 3d ed ff ff       	call   c002a852 <IDE::getBase(unsigned char)>
c002bb15:	b9 00 01 00 00       	mov    ecx,0x100
c002bb1a:	89 c2                	mov    edx,eax
c002bb1c:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002bb20:	fc                   	cld    
c002bb21:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002bb24:	83 c4 10             	add    esp,0x10
c002bb27:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002bb2f:	4e                   	dec    esi
c002bb30:	e9 45 ff ff ff       	jmp    c002ba7a <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c002bb35:	31 ff                	xor    edi,edi
c002bb37:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002bb3c:	74 1a                	je     c002bb58 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c002bb3e:	50                   	push   eax
c002bb3f:	50                   	push   eax
c002bb40:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c002bb45:	83 f8 02             	cmp    eax,0x2
c002bb48:	0f 94 c0             	sete   al
c002bb4b:	0f b6 c0             	movzx  eax,al
c002bb4e:	50                   	push   eax
c002bb4f:	53                   	push   ebx
c002bb50:	e8 dd fb ff ff       	call   c002b732 <ATA::flush(bool)>
c002bb55:	83 c4 10             	add    esp,0x10
c002bb58:	83 c4 2c             	add    esp,0x2c
c002bb5b:	89 f8                	mov    eax,edi
c002bb5d:	5b                   	pop    ebx
c002bb5e:	5e                   	pop    esi
c002bb5f:	5f                   	pop    edi
c002bb60:	5d                   	pop    ebp
c002bb61:	c3                   	ret    

c002bb62 <ATA::detectCHS()>:
c002bb62:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002bb66:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002bb6c:	c1 e0 06             	shl    eax,0x6
c002bb6f:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002bb75:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002bb7f:	c7 44 24 04 78 33 03 c0 	mov    DWORD PTR [esp+0x4],0xc0033378
c002bb87:	e9 bf 44 ff ff       	jmp    c002004b <KePanic(char const*)>

c002bb8c <ATA::open(int, int, void*)>:
c002bb8c:	53                   	push   ebx
c002bb8d:	83 ec 08             	sub    esp,0x8
c002bb90:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002bb94:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002bb98:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002bb9c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002bba2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002bba8:	c1 e0 06             	shl    eax,0x6
c002bbab:	01 d0                	add    eax,edx
c002bbad:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002bbb4:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002bbba:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002bbc1:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002bbcb:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002bbd1:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002bbd8:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002bbdf:	75 0c                	jne    c002bbed <ATA::open(int, int, void*)+0x61>
c002bbe1:	83 ec 0c             	sub    esp,0xc
c002bbe4:	53                   	push   ebx
c002bbe5:	e8 78 ff ff ff       	call   c002bb62 <ATA::detectCHS()>
c002bbea:	83 c4 10             	add    esp,0x10
c002bbed:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002bbf3:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002bbf9:	c1 e0 06             	shl    eax,0x6
c002bbfc:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c002bc03:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002bc0d:	d1 e8                	shr    eax,1
c002bc0f:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002bc15:	6a 04                	push   0x4
c002bc17:	6a 0c                	push   0xc
c002bc19:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bc20:	50                   	push   eax
c002bc21:	52                   	push   edx
c002bc22:	e8 3d ec ff ff       	call   c002a864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bc27:	90                   	nop
c002bc28:	90                   	nop
c002bc29:	6a 00                	push   0x0
c002bc2b:	6a 0c                	push   0xc
c002bc2d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bc34:	50                   	push   eax
c002bc35:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bc3b:	e8 24 ec ff ff       	call   c002a864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bc40:	83 c4 14             	add    esp,0x14
c002bc43:	53                   	push   ebx
c002bc44:	e8 c5 f9 fe ff       	call   c001b60e <PhysicalDisk::startCache()>
c002bc49:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002bc4c:	e8 f9 0b ff ff       	call   c001c84a <createPartitionsForDisk(PhysicalDisk*)>
c002bc51:	31 c0                	xor    eax,eax
c002bc53:	83 c4 18             	add    esp,0x18
c002bc56:	5b                   	pop    ebx
c002bc57:	c3                   	ret    

c002bc58 <combineCharAndColour(char, unsigned char)>:
c002bc58:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002bc5d:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c002bc63:	c1 e0 08             	shl    eax,0x8
c002bc66:	09 d0                	or     eax,edx
c002bc68:	c3                   	ret    

c002bc69 <combineColours(unsigned char, unsigned char)>:
c002bc69:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002bc6e:	c1 e0 04             	shl    eax,0x4
c002bc71:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c002bc75:	c3                   	ret    

c002bc76 <ATA::read(unsigned long long, int, void*)>:
c002bc76:	55                   	push   ebp
c002bc77:	57                   	push   edi
c002bc78:	56                   	push   esi
c002bc79:	be 04 00 00 00       	mov    esi,0x4
c002bc7e:	53                   	push   ebx
c002bc7f:	83 ec 0c             	sub    esp,0xc
c002bc82:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002bc86:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002bc8a:	8d 7b ff             	lea    edi,[ebx-0x1]
c002bc8d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002bc91:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002bc95:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002bc9b:	0f 87 a1 01 00 00    	ja     c002be42 <ATA::read(unsigned long long, int, void*)+0x1cc>
c002bca1:	be 06 00 00 00       	mov    esi,0x6
c002bca6:	85 c9                	test   ecx,ecx
c002bca8:	0f 84 94 01 00 00    	je     c002be42 <ATA::read(unsigned long long, int, void*)+0x1cc>
c002bcae:	55                   	push   ebp
c002bcaf:	55                   	push   ebp
c002bcb0:	6a 00                	push   0x0
c002bcb2:	51                   	push   ecx
c002bcb3:	53                   	push   ebx
c002bcb4:	52                   	push   edx
c002bcb5:	50                   	push   eax
c002bcb6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002bcba:	e8 0d fb ff ff       	call   c002b7cc <ATA::access(unsigned long long, int, void*, bool)>
c002bcbf:	83 c4 20             	add    esp,0x20
c002bcc2:	89 c6                	mov    esi,eax
c002bcc4:	85 c0                	test   eax,eax
c002bcc6:	0f 85 71 01 00 00    	jne    c002be3d <ATA::read(unsigned long long, int, void*)+0x1c7>
c002bccc:	03 1d b4 0b 04 c0    	add    ebx,DWORD PTR ds:0xc0040bb4
c002bcd2:	89 da                	mov    edx,ebx
c002bcd4:	50                   	push   eax
c002bcd5:	bd 10 27 00 00       	mov    ebp,0x2710
c002bcda:	50                   	push   eax
c002bcdb:	89 1d b4 0b 04 c0    	mov    DWORD PTR ds:0xc0040bb4,ebx
c002bce1:	6a 0f                	push   0xf
c002bce3:	6a 00                	push   0x0
c002bce5:	e8 7f ff ff ff       	call   c002bc69 <combineColours(unsigned char, unsigned char)>
c002bcea:	59                   	pop    ecx
c002bceb:	b9 0a 00 00 00       	mov    ecx,0xa
c002bcf0:	5b                   	pop    ebx
c002bcf1:	0f b6 d8             	movzx  ebx,al
c002bcf4:	89 d0                	mov    eax,edx
c002bcf6:	53                   	push   ebx
c002bcf7:	99                   	cdq    
c002bcf8:	f7 fd                	idiv   ebp
c002bcfa:	99                   	cdq    
c002bcfb:	f7 f9                	idiv   ecx
c002bcfd:	83 c2 30             	add    edx,0x30
c002bd00:	0f b6 d2             	movzx  edx,dl
c002bd03:	52                   	push   edx
c002bd04:	e8 4f ff ff ff       	call   c002bc58 <combineCharAndColour(char, unsigned char)>
c002bd09:	5f                   	pop    edi
c002bd0a:	bf e8 03 00 00       	mov    edi,0x3e8
c002bd0f:	5a                   	pop    edx
c002bd10:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002bd16:	53                   	push   ebx
c002bd17:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002bd1c:	99                   	cdq    
c002bd1d:	f7 ff                	idiv   edi
c002bd1f:	99                   	cdq    
c002bd20:	f7 f9                	idiv   ecx
c002bd22:	8d 42 30             	lea    eax,[edx+0x30]
c002bd25:	0f b6 c0             	movzx  eax,al
c002bd28:	50                   	push   eax
c002bd29:	e8 2a ff ff ff       	call   c002bc58 <combineCharAndColour(char, unsigned char)>
c002bd2e:	5f                   	pop    edi
c002bd2f:	bf 64 00 00 00       	mov    edi,0x64
c002bd34:	5a                   	pop    edx
c002bd35:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002bd3b:	53                   	push   ebx
c002bd3c:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002bd41:	99                   	cdq    
c002bd42:	f7 ff                	idiv   edi
c002bd44:	99                   	cdq    
c002bd45:	f7 f9                	idiv   ecx
c002bd47:	8d 42 30             	lea    eax,[edx+0x30]
c002bd4a:	0f b6 c0             	movzx  eax,al
c002bd4d:	50                   	push   eax
c002bd4e:	e8 05 ff ff ff       	call   c002bc58 <combineCharAndColour(char, unsigned char)>
c002bd53:	5a                   	pop    edx
c002bd54:	5a                   	pop    edx
c002bd55:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002bd5b:	53                   	push   ebx
c002bd5c:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002bd61:	99                   	cdq    
c002bd62:	f7 f9                	idiv   ecx
c002bd64:	99                   	cdq    
c002bd65:	f7 f9                	idiv   ecx
c002bd67:	8d 42 30             	lea    eax,[edx+0x30]
c002bd6a:	0f b6 c0             	movzx  eax,al
c002bd6d:	50                   	push   eax
c002bd6e:	e8 e5 fe ff ff       	call   c002bc58 <combineCharAndColour(char, unsigned char)>
c002bd73:	5a                   	pop    edx
c002bd74:	5a                   	pop    edx
c002bd75:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002bd7b:	53                   	push   ebx
c002bd7c:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002bd81:	99                   	cdq    
c002bd82:	f7 f9                	idiv   ecx
c002bd84:	83 c2 30             	add    edx,0x30
c002bd87:	0f b6 d2             	movzx  edx,dl
c002bd8a:	52                   	push   edx
c002bd8b:	e8 c8 fe ff ff       	call   c002bc58 <combineCharAndColour(char, unsigned char)>
c002bd90:	5a                   	pop    edx
c002bd91:	5a                   	pop    edx
c002bd92:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002bd98:	53                   	push   ebx
c002bd99:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002bd9e:	99                   	cdq    
c002bd9f:	f7 fd                	idiv   ebp
c002bda1:	99                   	cdq    
c002bda2:	f7 f9                	idiv   ecx
c002bda4:	8d 42 30             	lea    eax,[edx+0x30]
c002bda7:	0f b6 c0             	movzx  eax,al
c002bdaa:	50                   	push   eax
c002bdab:	e8 a8 fe ff ff       	call   c002bc58 <combineCharAndColour(char, unsigned char)>
c002bdb0:	5d                   	pop    ebp
c002bdb1:	bd e8 03 00 00       	mov    ebp,0x3e8
c002bdb6:	5a                   	pop    edx
c002bdb7:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002bdbd:	53                   	push   ebx
c002bdbe:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002bdc3:	99                   	cdq    
c002bdc4:	f7 fd                	idiv   ebp
c002bdc6:	99                   	cdq    
c002bdc7:	f7 f9                	idiv   ecx
c002bdc9:	8d 42 30             	lea    eax,[edx+0x30]
c002bdcc:	0f b6 c0             	movzx  eax,al
c002bdcf:	50                   	push   eax
c002bdd0:	e8 83 fe ff ff       	call   c002bc58 <combineCharAndColour(char, unsigned char)>
c002bdd5:	5d                   	pop    ebp
c002bdd6:	5a                   	pop    edx
c002bdd7:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002bddd:	53                   	push   ebx
c002bdde:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002bde3:	99                   	cdq    
c002bde4:	f7 ff                	idiv   edi
c002bde6:	99                   	cdq    
c002bde7:	f7 f9                	idiv   ecx
c002bde9:	8d 42 30             	lea    eax,[edx+0x30]
c002bdec:	0f b6 c0             	movzx  eax,al
c002bdef:	50                   	push   eax
c002bdf0:	e8 63 fe ff ff       	call   c002bc58 <combineCharAndColour(char, unsigned char)>
c002bdf5:	5f                   	pop    edi
c002bdf6:	5d                   	pop    ebp
c002bdf7:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002bdfd:	53                   	push   ebx
c002bdfe:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002be03:	99                   	cdq    
c002be04:	f7 f9                	idiv   ecx
c002be06:	99                   	cdq    
c002be07:	f7 f9                	idiv   ecx
c002be09:	8d 42 30             	lea    eax,[edx+0x30]
c002be0c:	0f b6 c0             	movzx  eax,al
c002be0f:	50                   	push   eax
c002be10:	e8 43 fe ff ff       	call   c002bc58 <combineCharAndColour(char, unsigned char)>
c002be15:	5a                   	pop    edx
c002be16:	5f                   	pop    edi
c002be17:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002be1d:	53                   	push   ebx
c002be1e:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002be23:	99                   	cdq    
c002be24:	f7 f9                	idiv   ecx
c002be26:	83 c2 30             	add    edx,0x30
c002be29:	0f b6 d2             	movzx  edx,dl
c002be2c:	52                   	push   edx
c002be2d:	e8 26 fe ff ff       	call   c002bc58 <combineCharAndColour(char, unsigned char)>
c002be32:	83 c4 10             	add    esp,0x10
c002be35:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002be3b:	eb 05                	jmp    c002be42 <ATA::read(unsigned long long, int, void*)+0x1cc>
c002be3d:	be 01 00 00 00       	mov    esi,0x1
c002be42:	83 c4 0c             	add    esp,0xc
c002be45:	89 f0                	mov    eax,esi
c002be47:	5b                   	pop    ebx
c002be48:	5e                   	pop    esi
c002be49:	5f                   	pop    edi
c002be4a:	5d                   	pop    ebp
c002be4b:	c3                   	ret    

c002be4c <ATA::write(unsigned long long, int, void*)>:
c002be4c:	55                   	push   ebp
c002be4d:	57                   	push   edi
c002be4e:	56                   	push   esi
c002be4f:	be 04 00 00 00       	mov    esi,0x4
c002be54:	53                   	push   ebx
c002be55:	83 ec 0c             	sub    esp,0xc
c002be58:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002be5c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002be60:	8d 7b ff             	lea    edi,[ebx-0x1]
c002be63:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002be67:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002be6b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002be71:	0f 87 9c 01 00 00    	ja     c002c013 <ATA::write(unsigned long long, int, void*)+0x1c7>
c002be77:	be 06 00 00 00       	mov    esi,0x6
c002be7c:	85 c9                	test   ecx,ecx
c002be7e:	0f 84 8f 01 00 00    	je     c002c013 <ATA::write(unsigned long long, int, void*)+0x1c7>
c002be84:	55                   	push   ebp
c002be85:	55                   	push   ebp
c002be86:	6a 01                	push   0x1
c002be88:	51                   	push   ecx
c002be89:	53                   	push   ebx
c002be8a:	52                   	push   edx
c002be8b:	50                   	push   eax
c002be8c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002be90:	e8 37 f9 ff ff       	call   c002b7cc <ATA::access(unsigned long long, int, void*, bool)>
c002be95:	83 c4 20             	add    esp,0x20
c002be98:	89 c6                	mov    esi,eax
c002be9a:	85 c0                	test   eax,eax
c002be9c:	0f 85 6c 01 00 00    	jne    c002c00e <ATA::write(unsigned long long, int, void*)+0x1c2>
c002bea2:	01 1d b0 0b 04 c0    	add    DWORD PTR ds:0xc0040bb0,ebx
c002bea8:	bd 10 27 00 00       	mov    ebp,0x2710
c002bead:	50                   	push   eax
c002beae:	50                   	push   eax
c002beaf:	6a 0f                	push   0xf
c002beb1:	6a 00                	push   0x0
c002beb3:	e8 b1 fd ff ff       	call   c002bc69 <combineColours(unsigned char, unsigned char)>
c002beb8:	5a                   	pop    edx
c002beb9:	0f b6 d8             	movzx  ebx,al
c002bebc:	59                   	pop    ecx
c002bebd:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002bec2:	53                   	push   ebx
c002bec3:	b9 0a 00 00 00       	mov    ecx,0xa
c002bec8:	99                   	cdq    
c002bec9:	f7 fd                	idiv   ebp
c002becb:	99                   	cdq    
c002becc:	f7 f9                	idiv   ecx
c002bece:	8d 42 30             	lea    eax,[edx+0x30]
c002bed1:	0f b6 c0             	movzx  eax,al
c002bed4:	50                   	push   eax
c002bed5:	e8 7e fd ff ff       	call   c002bc58 <combineCharAndColour(char, unsigned char)>
c002beda:	5f                   	pop    edi
c002bedb:	bf e8 03 00 00       	mov    edi,0x3e8
c002bee0:	5a                   	pop    edx
c002bee1:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002bee7:	53                   	push   ebx
c002bee8:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002beed:	99                   	cdq    
c002beee:	f7 ff                	idiv   edi
c002bef0:	99                   	cdq    
c002bef1:	f7 f9                	idiv   ecx
c002bef3:	8d 42 30             	lea    eax,[edx+0x30]
c002bef6:	0f b6 c0             	movzx  eax,al
c002bef9:	50                   	push   eax
c002befa:	e8 59 fd ff ff       	call   c002bc58 <combineCharAndColour(char, unsigned char)>
c002beff:	5f                   	pop    edi
c002bf00:	bf 64 00 00 00       	mov    edi,0x64
c002bf05:	5a                   	pop    edx
c002bf06:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002bf0c:	53                   	push   ebx
c002bf0d:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002bf12:	99                   	cdq    
c002bf13:	f7 ff                	idiv   edi
c002bf15:	99                   	cdq    
c002bf16:	f7 f9                	idiv   ecx
c002bf18:	8d 42 30             	lea    eax,[edx+0x30]
c002bf1b:	0f b6 c0             	movzx  eax,al
c002bf1e:	50                   	push   eax
c002bf1f:	e8 34 fd ff ff       	call   c002bc58 <combineCharAndColour(char, unsigned char)>
c002bf24:	5a                   	pop    edx
c002bf25:	5a                   	pop    edx
c002bf26:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002bf2c:	53                   	push   ebx
c002bf2d:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002bf32:	99                   	cdq    
c002bf33:	f7 f9                	idiv   ecx
c002bf35:	99                   	cdq    
c002bf36:	f7 f9                	idiv   ecx
c002bf38:	8d 42 30             	lea    eax,[edx+0x30]
c002bf3b:	0f b6 c0             	movzx  eax,al
c002bf3e:	50                   	push   eax
c002bf3f:	e8 14 fd ff ff       	call   c002bc58 <combineCharAndColour(char, unsigned char)>
c002bf44:	5a                   	pop    edx
c002bf45:	5a                   	pop    edx
c002bf46:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002bf4c:	53                   	push   ebx
c002bf4d:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002bf52:	99                   	cdq    
c002bf53:	f7 f9                	idiv   ecx
c002bf55:	8d 42 30             	lea    eax,[edx+0x30]
c002bf58:	0f b6 c0             	movzx  eax,al
c002bf5b:	50                   	push   eax
c002bf5c:	e8 f7 fc ff ff       	call   c002bc58 <combineCharAndColour(char, unsigned char)>
c002bf61:	5a                   	pop    edx
c002bf62:	5a                   	pop    edx
c002bf63:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002bf69:	53                   	push   ebx
c002bf6a:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002bf6f:	99                   	cdq    
c002bf70:	f7 fd                	idiv   ebp
c002bf72:	99                   	cdq    
c002bf73:	f7 f9                	idiv   ecx
c002bf75:	8d 42 30             	lea    eax,[edx+0x30]
c002bf78:	0f b6 c0             	movzx  eax,al
c002bf7b:	50                   	push   eax
c002bf7c:	e8 d7 fc ff ff       	call   c002bc58 <combineCharAndColour(char, unsigned char)>
c002bf81:	5d                   	pop    ebp
c002bf82:	bd e8 03 00 00       	mov    ebp,0x3e8
c002bf87:	5a                   	pop    edx
c002bf88:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002bf8e:	53                   	push   ebx
c002bf8f:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002bf94:	99                   	cdq    
c002bf95:	f7 fd                	idiv   ebp
c002bf97:	99                   	cdq    
c002bf98:	f7 f9                	idiv   ecx
c002bf9a:	8d 42 30             	lea    eax,[edx+0x30]
c002bf9d:	0f b6 c0             	movzx  eax,al
c002bfa0:	50                   	push   eax
c002bfa1:	e8 b2 fc ff ff       	call   c002bc58 <combineCharAndColour(char, unsigned char)>
c002bfa6:	5d                   	pop    ebp
c002bfa7:	5a                   	pop    edx
c002bfa8:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002bfae:	53                   	push   ebx
c002bfaf:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002bfb4:	99                   	cdq    
c002bfb5:	f7 ff                	idiv   edi
c002bfb7:	99                   	cdq    
c002bfb8:	f7 f9                	idiv   ecx
c002bfba:	8d 42 30             	lea    eax,[edx+0x30]
c002bfbd:	0f b6 c0             	movzx  eax,al
c002bfc0:	50                   	push   eax
c002bfc1:	e8 92 fc ff ff       	call   c002bc58 <combineCharAndColour(char, unsigned char)>
c002bfc6:	5f                   	pop    edi
c002bfc7:	5d                   	pop    ebp
c002bfc8:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002bfce:	53                   	push   ebx
c002bfcf:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002bfd4:	99                   	cdq    
c002bfd5:	f7 f9                	idiv   ecx
c002bfd7:	99                   	cdq    
c002bfd8:	f7 f9                	idiv   ecx
c002bfda:	8d 42 30             	lea    eax,[edx+0x30]
c002bfdd:	0f b6 c0             	movzx  eax,al
c002bfe0:	50                   	push   eax
c002bfe1:	e8 72 fc ff ff       	call   c002bc58 <combineCharAndColour(char, unsigned char)>
c002bfe6:	5a                   	pop    edx
c002bfe7:	5f                   	pop    edi
c002bfe8:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002bfee:	53                   	push   ebx
c002bfef:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002bff4:	99                   	cdq    
c002bff5:	f7 f9                	idiv   ecx
c002bff7:	83 c2 30             	add    edx,0x30
c002bffa:	0f b6 d2             	movzx  edx,dl
c002bffd:	52                   	push   edx
c002bffe:	e8 55 fc ff ff       	call   c002bc58 <combineCharAndColour(char, unsigned char)>
c002c003:	83 c4 10             	add    esp,0x10
c002c006:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002c00c:	eb 05                	jmp    c002c013 <ATA::write(unsigned long long, int, void*)+0x1c7>
c002c00e:	be 01 00 00 00       	mov    esi,0x1
c002c013:	83 c4 0c             	add    esp,0xc
c002c016:	89 f0                	mov    eax,esi
c002c018:	5b                   	pop    ebx
c002c019:	5e                   	pop    esi
c002c01a:	5f                   	pop    edi
c002c01b:	5d                   	pop    ebp
c002c01c:	c3                   	ret    
c002c01d:	90                   	nop

c002c01e <ATAPI::write(unsigned long long, int, void*)>:
c002c01e:	b8 03 00 00 00       	mov    eax,0x3
c002c023:	c3                   	ret    

c002c024 <ATAPI::close(int, int, void*)>:
c002c024:	83 ec 0c             	sub    esp,0xc
c002c027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c02b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002c031:	85 c0                	test   eax,eax
c002c033:	74 0c                	je     c002c041 <ATAPI::close(int, int, void*)+0x1d>
c002c035:	83 ec 0c             	sub    esp,0xc
c002c038:	8b 10                	mov    edx,DWORD PTR [eax]
c002c03a:	50                   	push   eax
c002c03b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002c03e:	83 c4 10             	add    esp,0x10
c002c041:	31 c0                	xor    eax,eax
c002c043:	83 c4 0c             	add    esp,0xc
c002c046:	c3                   	ret    
c002c047:	90                   	nop

c002c048 <ATAPI::ATAPI()>:
c002c048:	83 ec 0c             	sub    esp,0xc
c002c04b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c04f:	83 ec 04             	sub    esp,0x4
c002c052:	68 00 08 00 00       	push   0x800
c002c057:	68 cd 34 03 c0       	push   0xc00334cd
c002c05c:	50                   	push   eax
c002c05d:	e8 44 f5 fe ff       	call   c001b5a6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002c062:	83 c4 10             	add    esp,0x10
c002c065:	ba dc 33 03 c0       	mov    edx,0xc00333dc
c002c06a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c06e:	89 10                	mov    DWORD PTR [eax],edx
c002c070:	90                   	nop
c002c071:	83 c4 0c             	add    esp,0xc
c002c074:	c3                   	ret    
c002c075:	90                   	nop

c002c076 <ATAPI::readyForCommand()>:
c002c076:	56                   	push   esi
c002c077:	53                   	push   ebx
c002c078:	53                   	push   ebx
c002c079:	31 db                	xor    ebx,ebx
c002c07b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002c07f:	51                   	push   ecx
c002c080:	6a 0c                	push   0xc
c002c082:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002c089:	50                   	push   eax
c002c08a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002c090:	e8 8f e8 ff ff       	call   c002a924 <IDE::read(unsigned char, unsigned char)>
c002c095:	83 c4 10             	add    esp,0x10
c002c098:	a8 88                	test   al,0x88
c002c09a:	74 25                	je     c002c0c1 <ATAPI::readyForCommand()+0x4b>
c002c09c:	43                   	inc    ebx
c002c09d:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c002c0a3:	7e da                	jle    c002c07f <ATAPI::readyForCommand()+0x9>
c002c0a5:	83 ec 0c             	sub    esp,0xc
c002c0a8:	68 5e 01 00 00       	push   0x15e
c002c0ad:	e8 16 8e ff ff       	call   c0024ec8 <milliTenthSleep(unsigned int)>
c002c0b2:	83 c4 10             	add    esp,0x10
c002c0b5:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c002c0bb:	75 c2                	jne    c002c07f <ATAPI::readyForCommand()+0x9>
c002c0bd:	31 c0                	xor    eax,eax
c002c0bf:	eb 02                	jmp    c002c0c3 <ATAPI::readyForCommand()+0x4d>
c002c0c1:	b0 01                	mov    al,0x1
c002c0c3:	5a                   	pop    edx
c002c0c4:	5b                   	pop    ebx
c002c0c5:	5e                   	pop    esi
c002c0c6:	c3                   	ret    
c002c0c7:	90                   	nop

c002c0c8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002c0c8:	55                   	push   ebp
c002c0c9:	57                   	push   edi
c002c0ca:	56                   	push   esi
c002c0cb:	53                   	push   ebx
c002c0cc:	83 ec 20             	sub    esp,0x20
c002c0cf:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002c0d3:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002c0d7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002c0db:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002c0df:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002c0e3:	6a 01                	push   0x1
c002c0e5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c0ec:	50                   	push   eax
c002c0ed:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c0f3:	e8 74 e9 ff ff       	call   c002aa6c <IDE::enableIRQs(unsigned char, bool)>
c002c0f8:	5e                   	pop    esi
c002c0f9:	58                   	pop    eax
c002c0fa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c101:	50                   	push   eax
c002c102:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c108:	e8 31 e7 ff ff       	call   c002a83e <IDE::prepareInterrupt(unsigned char)>
c002c10d:	89 3c 24             	mov    DWORD PTR [esp],edi
c002c110:	e8 61 ff ff ff       	call   c002c076 <ATAPI::readyForCommand()>
c002c115:	83 c4 10             	add    esp,0x10
c002c118:	84 c0                	test   al,al
c002c11a:	75 0a                	jne    c002c126 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002c11c:	bb 01 00 00 00       	mov    ebx,0x1
c002c121:	e9 60 02 00 00       	jmp    c002c386 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c002c126:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c002c12c:	c1 e0 04             	shl    eax,0x4
c002c12f:	0f b6 c0             	movzx  eax,al
c002c132:	50                   	push   eax
c002c133:	6a 06                	push   0x6
c002c135:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c13c:	50                   	push   eax
c002c13d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c143:	e8 1c e7 ff ff       	call   c002a864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c148:	6a 00                	push   0x0
c002c14a:	6a 01                	push   0x1
c002c14c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c153:	50                   	push   eax
c002c154:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c15a:	e8 05 e7 ff ff       	call   c002a864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c15f:	83 c4 20             	add    esp,0x20
c002c162:	0f b6 c3             	movzx  eax,bl
c002c165:	0f b6 df             	movzx  ebx,bh
c002c168:	50                   	push   eax
c002c169:	6a 04                	push   0x4
c002c16b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c172:	50                   	push   eax
c002c173:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c179:	e8 e6 e6 ff ff       	call   c002a864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c17e:	53                   	push   ebx
c002c17f:	6a 05                	push   0x5
c002c181:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c188:	50                   	push   eax
c002c189:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c18f:	e8 d0 e6 ff ff       	call   c002a864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c194:	83 c4 20             	add    esp,0x20
c002c197:	68 a0 00 00 00       	push   0xa0
c002c19c:	6a 07                	push   0x7
c002c19e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c1a5:	50                   	push   eax
c002c1a6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c1ac:	e8 b3 e6 ff ff       	call   c002a864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c1b1:	83 c4 0c             	add    esp,0xc
c002c1b4:	6a 01                	push   0x1
c002c1b6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c1bd:	50                   	push   eax
c002c1be:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c1c4:	e8 83 f1 ff ff       	call   c002b34c <IDE::polling(unsigned char, unsigned int)>
c002c1c9:	83 c4 10             	add    esp,0x10
c002c1cc:	0f b6 d8             	movzx  ebx,al
c002c1cf:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c002c1d5:	85 db                	test   ebx,ebx
c002c1d7:	74 20                	je     c002c1f9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c002c1d9:	53                   	push   ebx
c002c1da:	0f b6 c0             	movzx  eax,al
c002c1dd:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c002c1e4:	52                   	push   edx
c002c1e5:	50                   	push   eax
c002c1e6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c1ec:	e8 a1 f0 ff ff       	call   c002b292 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002c1f1:	83 c4 10             	add    esp,0x10
c002c1f4:	e9 8d 01 00 00       	jmp    c002c386 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c002c1f9:	0f b6 c0             	movzx  eax,al
c002c1fc:	53                   	push   ebx
c002c1fd:	53                   	push   ebx
c002c1fe:	50                   	push   eax
c002c1ff:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c205:	e8 48 e6 ff ff       	call   c002a852 <IDE::getBase(unsigned char)>
c002c20a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002c20e:	b9 06 00 00 00       	mov    ecx,0x6
c002c213:	89 c2                	mov    edx,eax
c002c215:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002c218:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002c21c:	83 c4 10             	add    esp,0x10
c002c21f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c002c224:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002c228:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002c22e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002c235:	85 db                	test   ebx,ebx
c002c237:	0f 84 ec 00 00 00    	je     c002c329 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c002c23d:	51                   	push   ecx
c002c23e:	51                   	push   ecx
c002c23f:	52                   	push   edx
c002c240:	50                   	push   eax
c002c241:	e8 8c e7 ff ff       	call   c002a9d2 <IDE::waitInterrupt(unsigned char)>
c002c246:	83 c4 10             	add    esp,0x10
c002c249:	84 c0                	test   al,al
c002c24b:	0f 84 cb fe ff ff    	je     c002c11c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002c251:	56                   	push   esi
c002c252:	56                   	push   esi
c002c253:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c25a:	50                   	push   eax
c002c25b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c261:	e8 d8 e5 ff ff       	call   c002a83e <IDE::prepareInterrupt(unsigned char)>
c002c266:	83 c4 0c             	add    esp,0xc
c002c269:	6a 04                	push   0x4
c002c26b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c272:	50                   	push   eax
c002c273:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c279:	e8 a6 e6 ff ff       	call   c002a924 <IDE::read(unsigned char, unsigned char)>
c002c27e:	83 c4 0c             	add    esp,0xc
c002c281:	89 c6                	mov    esi,eax
c002c283:	6a 05                	push   0x5
c002c285:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c28c:	50                   	push   eax
c002c28d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c293:	e8 8c e6 ff ff       	call   c002a924 <IDE::read(unsigned char, unsigned char)>
c002c298:	89 f1                	mov    ecx,esi
c002c29a:	0f b6 c0             	movzx  eax,al
c002c29d:	0f b6 f1             	movzx  esi,cl
c002c2a0:	c1 e0 08             	shl    eax,0x8
c002c2a3:	09 c6                	or     esi,eax
c002c2a5:	d1 fe                	sar    esi,1
c002c2a7:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c002c2ab:	83 c4 10             	add    esp,0x10
c002c2ae:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002c2b3:	74 41                	je     c002c2f6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c002c2b5:	31 c9                	xor    ecx,ecx
c002c2b7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002c2bd:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002c2c4:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c002c2c8:	75 0a                	jne    c002c2d4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c002c2ca:	01 c9                	add    ecx,ecx
c002c2cc:	01 cd                	add    ebp,ecx
c002c2ce:	4b                   	dec    ebx
c002c2cf:	e9 54 ff ff ff       	jmp    c002c228 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c002c2d4:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c002c2d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002c2dd:	51                   	push   ecx
c002c2de:	51                   	push   ecx
c002c2df:	52                   	push   edx
c002c2e0:	50                   	push   eax
c002c2e1:	e8 6c e5 ff ff       	call   c002a852 <IDE::getBase(unsigned char)>
c002c2e6:	89 c2                	mov    edx,eax
c002c2e8:	89 f0                	mov    eax,esi
c002c2ea:	66 ef                	out    dx,ax
c002c2ec:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002c2f0:	83 c4 10             	add    esp,0x10
c002c2f3:	41                   	inc    ecx
c002c2f4:	eb c1                	jmp    c002c2b7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c002c2f6:	31 f6                	xor    esi,esi
c002c2f8:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002c2fe:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002c305:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c002c309:	75 06                	jne    c002c311 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c002c30b:	01 f6                	add    esi,esi
c002c30d:	01 f5                	add    ebp,esi
c002c30f:	eb bd                	jmp    c002c2ce <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c002c311:	51                   	push   ecx
c002c312:	51                   	push   ecx
c002c313:	52                   	push   edx
c002c314:	50                   	push   eax
c002c315:	e8 38 e5 ff ff       	call   c002a852 <IDE::getBase(unsigned char)>
c002c31a:	89 c2                	mov    edx,eax
c002c31c:	66 ed                	in     ax,dx
c002c31e:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002c323:	83 c4 10             	add    esp,0x10
c002c326:	46                   	inc    esi
c002c327:	eb cf                	jmp    c002c2f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c002c329:	51                   	push   ecx
c002c32a:	51                   	push   ecx
c002c32b:	52                   	push   edx
c002c32c:	50                   	push   eax
c002c32d:	e8 a0 e6 ff ff       	call   c002a9d2 <IDE::waitInterrupt(unsigned char)>
c002c332:	83 c4 10             	add    esp,0x10
c002c335:	84 c0                	test   al,al
c002c337:	0f 84 df fd ff ff    	je     c002c11c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002c33d:	bb a0 86 01 00       	mov    ebx,0x186a0
c002c342:	52                   	push   edx
c002c343:	52                   	push   edx
c002c344:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c34b:	50                   	push   eax
c002c34c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c352:	e8 e7 e4 ff ff       	call   c002a83e <IDE::prepareInterrupt(unsigned char)>
c002c357:	83 c4 10             	add    esp,0x10
c002c35a:	50                   	push   eax
c002c35b:	50                   	push   eax
c002c35c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c363:	50                   	push   eax
c002c364:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c36a:	e8 e3 e4 ff ff       	call   c002a852 <IDE::getBase(unsigned char)>
c002c36f:	8d 50 07             	lea    edx,[eax+0x7]
c002c372:	ec                   	in     al,dx
c002c373:	83 c4 10             	add    esp,0x10
c002c376:	a8 88                	test   al,0x88
c002c378:	74 0a                	je     c002c384 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c002c37a:	4b                   	dec    ebx
c002c37b:	75 dd                	jne    c002c35a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c002c37d:	bb 02 00 00 00       	mov    ebx,0x2
c002c382:	eb 02                	jmp    c002c386 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c002c384:	31 db                	xor    ebx,ebx
c002c386:	83 c4 1c             	add    esp,0x1c
c002c389:	89 d8                	mov    eax,ebx
c002c38b:	5b                   	pop    ebx
c002c38c:	5e                   	pop    esi
c002c38d:	5f                   	pop    edi
c002c38e:	5d                   	pop    ebp
c002c38f:	c3                   	ret    

c002c390 <ATAPI::diskRemoved()>:
c002c390:	53                   	push   ebx
c002c391:	83 ec 14             	sub    esp,0x14
c002c394:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002c398:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002c39f:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c002c3a5:	e8 90 01 ff ff       	call   c001c53a <LogicalDisk::unmount()>
c002c3aa:	58                   	pop    eax
c002c3ab:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002c3b1:	e8 62 0b ff ff       	call   c001cf18 <VCache::writeWriteBuffer()>
c002c3b6:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c002c3bc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002c3c0:	83 c4 18             	add    esp,0x18
c002c3c3:	5b                   	pop    ebx
c002c3c4:	e9 3f 0b ff ff       	jmp    c001cf08 <VCache::invalidateReadBuffer()>
c002c3c9:	90                   	nop

c002c3ca <ATAPI::eject()>:
c002c3ca:	57                   	push   edi
c002c3cb:	b9 03 00 00 00       	mov    ecx,0x3
c002c3d0:	53                   	push   ebx
c002c3d1:	83 ec 14             	sub    esp,0x14
c002c3d4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002c3d8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002c3dc:	fc                   	cld    
c002c3dd:	31 c0                	xor    eax,eax
c002c3df:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002c3e1:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002c3e6:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002c3eb:	50                   	push   eax
c002c3ec:	50                   	push   eax
c002c3ed:	6a 00                	push   0x0
c002c3ef:	6a 00                	push   0x0
c002c3f1:	6a 00                	push   0x0
c002c3f3:	6a 02                	push   0x2
c002c3f5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002c3f9:	50                   	push   eax
c002c3fa:	53                   	push   ebx
c002c3fb:	e8 c8 fc ff ff       	call   c002c0c8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002c400:	83 c4 14             	add    esp,0x14
c002c403:	53                   	push   ebx
c002c404:	e8 87 ff ff ff       	call   c002c390 <ATAPI::diskRemoved()>
c002c409:	83 c4 24             	add    esp,0x24
c002c40c:	31 c0                	xor    eax,eax
c002c40e:	5b                   	pop    ebx
c002c40f:	5f                   	pop    edi
c002c410:	c3                   	ret    
c002c411:	90                   	nop

c002c412 <ATAPI::diskInserted()>:
c002c412:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002c416:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c002c41d:	c3                   	ret    

c002c41e <ATAPI::detectMedia()>:
c002c41e:	56                   	push   esi
c002c41f:	53                   	push   ebx
c002c420:	83 ec 28             	sub    esp,0x28
c002c423:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002c427:	6a 0c                	push   0xc
c002c429:	6a 00                	push   0x0
c002c42b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002c42f:	56                   	push   esi
c002c430:	e8 bb 40 fd ff       	call   c00004f0 <memset>
c002c435:	58                   	pop    eax
c002c436:	5a                   	pop    edx
c002c437:	6a 00                	push   0x0
c002c439:	6a 00                	push   0x0
c002c43b:	6a 00                	push   0x0
c002c43d:	6a 00                	push   0x0
c002c43f:	56                   	push   esi
c002c440:	53                   	push   ebx
c002c441:	e8 82 fc ff ff       	call   c002c0c8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002c446:	83 c4 1c             	add    esp,0x1c
c002c449:	6a 0c                	push   0xc
c002c44b:	6a 00                	push   0x0
c002c44d:	56                   	push   esi
c002c44e:	e8 9d 40 fd ff       	call   c00004f0 <memset>
c002c453:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002c458:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002c45d:	59                   	pop    ecx
c002c45e:	58                   	pop    eax
c002c45f:	6a 01                	push   0x1
c002c461:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002c465:	50                   	push   eax
c002c466:	6a 00                	push   0x0
c002c468:	6a 12                	push   0x12
c002c46a:	56                   	push   esi
c002c46b:	53                   	push   ebx
c002c46c:	e8 57 fc ff ff       	call   c002c0c8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002c471:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002c475:	83 c4 20             	add    esp,0x20
c002c478:	83 e0 7f             	and    eax,0x7f
c002c47b:	83 f8 70             	cmp    eax,0x70
c002c47e:	74 15                	je     c002c495 <ATAPI::detectMedia()+0x77>
c002c480:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002c487:	75 0c                	jne    c002c495 <ATAPI::detectMedia()+0x77>
c002c489:	83 ec 0c             	sub    esp,0xc
c002c48c:	53                   	push   ebx
c002c48d:	e8 80 ff ff ff       	call   c002c412 <ATAPI::diskInserted()>
c002c492:	83 c4 10             	add    esp,0x10
c002c495:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002c499:	83 e0 0f             	and    eax,0xf
c002c49c:	83 f8 02             	cmp    eax,0x2
c002c49f:	75 1b                	jne    c002c4bc <ATAPI::detectMedia()+0x9e>
c002c4a1:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002c4a6:	75 2d                	jne    c002c4d5 <ATAPI::detectMedia()+0xb7>
c002c4a8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002c4af:	74 24                	je     c002c4d5 <ATAPI::detectMedia()+0xb7>
c002c4b1:	83 ec 0c             	sub    esp,0xc
c002c4b4:	53                   	push   ebx
c002c4b5:	e8 d6 fe ff ff       	call   c002c390 <ATAPI::diskRemoved()>
c002c4ba:	eb 16                	jmp    c002c4d2 <ATAPI::detectMedia()+0xb4>
c002c4bc:	85 c0                	test   eax,eax
c002c4be:	75 15                	jne    c002c4d5 <ATAPI::detectMedia()+0xb7>
c002c4c0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002c4c7:	75 0c                	jne    c002c4d5 <ATAPI::detectMedia()+0xb7>
c002c4c9:	83 ec 0c             	sub    esp,0xc
c002c4cc:	53                   	push   ebx
c002c4cd:	e8 40 ff ff ff       	call   c002c412 <ATAPI::diskInserted()>
c002c4d2:	83 c4 10             	add    esp,0x10
c002c4d5:	83 c4 24             	add    esp,0x24
c002c4d8:	5b                   	pop    ebx
c002c4d9:	5e                   	pop    esi
c002c4da:	c3                   	ret    
c002c4db:	90                   	nop

c002c4dc <ATAPI::open(int, int, void*)>:
c002c4dc:	56                   	push   esi
c002c4dd:	53                   	push   ebx
c002c4de:	50                   	push   eax
c002c4df:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002c4e3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002c4e7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002c4eb:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002c4f1:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002c4f7:	c1 e0 06             	shl    eax,0x6
c002c4fa:	01 d0                	add    eax,edx
c002c4fc:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002c503:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c002c509:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c002c510:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002c51a:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002c520:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002c527:	6a 04                	push   0x4
c002c529:	6a 0c                	push   0xc
c002c52b:	51                   	push   ecx
c002c52c:	52                   	push   edx
c002c52d:	e8 32 e3 ff ff       	call   c002a864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c532:	90                   	nop
c002c533:	90                   	nop
c002c534:	6a 00                	push   0x0
c002c536:	6a 0c                	push   0xc
c002c538:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c53f:	50                   	push   eax
c002c540:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c546:	e8 19 e3 ff ff       	call   c002a864 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c54b:	83 c4 14             	add    esp,0x14
c002c54e:	68 78 01 00 00       	push   0x178
c002c553:	e8 5a 9d fe ff       	call   c00162b2 <malloc>
c002c558:	83 c4 0c             	add    esp,0xc
c002c55b:	89 c6                	mov    esi,eax
c002c55d:	6a 00                	push   0x0
c002c55f:	68 ff ff ff 7f       	push   0x7fffffff
c002c564:	6a 00                	push   0x0
c002c566:	6a 00                	push   0x0
c002c568:	53                   	push   ebx
c002c569:	68 7f 35 03 c0       	push   0xc003357f
c002c56e:	50                   	push   eax
c002c56f:	e8 04 fe fe ff       	call   c001c378 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002c574:	83 c4 14             	add    esp,0x14
c002c577:	56                   	push   esi
c002c578:	e8 bb fe fe ff       	call   c001c438 <LogicalDisk::assignDriveLetter()>
c002c57d:	5a                   	pop    edx
c002c57e:	0f be c0             	movsx  eax,al
c002c581:	59                   	pop    ecx
c002c582:	50                   	push   eax
c002c583:	68 c4 33 03 c0       	push   0xc00333c4
c002c588:	e8 b4 cb fe ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c002c58d:	58                   	pop    eax
c002c58e:	5a                   	pop    edx
c002c58f:	56                   	push   esi
c002c590:	53                   	push   ebx
c002c591:	e8 2c ec fe ff       	call   c001b1c2 <Device::addChild(Device*)>
c002c596:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c002c59c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002c59f:	e8 6a f0 fe ff       	call   c001b60e <PhysicalDisk::startCache()>
c002c5a4:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002c5ab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002c5ae:	e8 6b fe ff ff       	call   c002c41e <ATAPI::detectMedia()>
c002c5b3:	83 c4 14             	add    esp,0x14
c002c5b6:	31 c0                	xor    eax,eax
c002c5b8:	5b                   	pop    ebx
c002c5b9:	5e                   	pop    esi
c002c5ba:	c3                   	ret    
c002c5bb:	90                   	nop

c002c5bc <ATAPI::read(unsigned long long, int, void*)>:
c002c5bc:	55                   	push   ebp
c002c5bd:	57                   	push   edi
c002c5be:	56                   	push   esi
c002c5bf:	53                   	push   ebx
c002c5c0:	83 ec 1c             	sub    esp,0x1c
c002c5c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002c5c7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002c5cb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002c5cf:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002c5d6:	74 3c                	je     c002c614 <ATAPI::read(unsigned long long, int, void*)+0x58>
c002c5d8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002c5dc:	b9 03 00 00 00       	mov    ecx,0x3
c002c5e1:	fc                   	cld    
c002c5e2:	31 c0                	xor    eax,eax
c002c5e4:	0f ce                	bswap  esi
c002c5e6:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002c5e8:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002c5ed:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c002c5f1:	89 e8                	mov    eax,ebp
c002c5f3:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002c5f7:	50                   	push   eax
c002c5f8:	50                   	push   eax
c002c5f9:	55                   	push   ebp
c002c5fa:	c1 e5 0b             	shl    ebp,0xb
c002c5fd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002c601:	6a 00                	push   0x0
c002c603:	55                   	push   ebp
c002c604:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002c608:	50                   	push   eax
c002c609:	53                   	push   ebx
c002c60a:	e8 b9 fa ff ff       	call   c002c0c8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002c60f:	83 c4 20             	add    esp,0x20
c002c612:	eb 1a                	jmp    c002c62e <ATAPI::read(unsigned long long, int, void*)+0x72>
c002c614:	83 ec 0c             	sub    esp,0xc
c002c617:	53                   	push   ebx
c002c618:	e8 01 fe ff ff       	call   c002c41e <ATAPI::detectMedia()>
c002c61d:	83 c4 10             	add    esp,0x10
c002c620:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002c627:	75 af                	jne    c002c5d8 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002c629:	b8 02 00 00 00       	mov    eax,0x2
c002c62e:	83 c4 1c             	add    esp,0x1c
c002c631:	5b                   	pop    ebx
c002c632:	5e                   	pop    esi
c002c633:	5f                   	pop    edi
c002c634:	5d                   	pop    ebp
c002c635:	c3                   	ret    

c002c636 <SATA::close(int, int, void*)>:
c002c636:	83 ec 0c             	sub    esp,0xc
c002c639:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c63d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002c643:	85 c0                	test   eax,eax
c002c645:	74 0c                	je     c002c653 <SATA::close(int, int, void*)+0x1d>
c002c647:	83 ec 0c             	sub    esp,0xc
c002c64a:	8b 10                	mov    edx,DWORD PTR [eax]
c002c64c:	50                   	push   eax
c002c64d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002c650:	83 c4 10             	add    esp,0x10
c002c653:	31 c0                	xor    eax,eax
c002c655:	83 c4 0c             	add    esp,0xc
c002c658:	c3                   	ret    
c002c659:	90                   	nop

c002c65a <SATA::powerSaving(PowerSavingLevel)>:
c002c65a:	c3                   	ret    
c002c65b:	90                   	nop

c002c65c <SATA::open(int, int, void*)>:
c002c65c:	56                   	push   esi
c002c65d:	53                   	push   ebx
c002c65e:	83 ec 10             	sub    esp,0x10
c002c661:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002c665:	68 0c 34 03 c0       	push   0xc003340c
c002c66a:	e8 d2 ca fe ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c002c66f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002c673:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002c67d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002c683:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002c68d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002c691:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002c69b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002c6a1:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002c6a8:	e8 0e 9f fe ff       	call   c00165bb <Phys::allocatePage()>
c002c6ad:	89 c6                	mov    esi,eax
c002c6af:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002c6b5:	81 c6 00 10 00 00    	add    esi,0x1000
c002c6bb:	e8 fb 9e fe ff       	call   c00165bb <Phys::allocatePage()>
c002c6c0:	83 c4 10             	add    esp,0x10
c002c6c3:	39 c6                	cmp    esi,eax
c002c6c5:	74 10                	je     c002c6d7 <SATA::open(int, int, void*)+0x7b>
c002c6c7:	83 ec 0c             	sub    esp,0xc
c002c6ca:	68 18 34 03 c0       	push   0xc0033418
c002c6cf:	e8 77 39 ff ff       	call   c002004b <KePanic(char const*)>
c002c6d4:	83 c4 10             	add    esp,0x10
c002c6d7:	83 ec 0c             	sub    esp,0xc
c002c6da:	6a 02                	push   0x2
c002c6dc:	e8 28 b7 fe ff       	call   c0017e09 <Virt::allocateKernelVirtualPages(int)>
c002c6e1:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002c6e7:	6a 03                	push   0x3
c002c6e9:	50                   	push   eax
c002c6ea:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c002c6f0:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c002c6f6:	e8 21 be fe ff       	call   c001851c <VAS::mapPage(unsigned long, unsigned long, int)>
c002c6fb:	83 c4 14             	add    esp,0x14
c002c6fe:	53                   	push   ebx
c002c6ff:	e8 0a ef fe ff       	call   c001b60e <PhysicalDisk::startCache()>
c002c704:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002c707:	e8 3e 01 ff ff       	call   c001c84a <createPartitionsForDisk(PhysicalDisk*)>
c002c70c:	83 c4 14             	add    esp,0x14
c002c70f:	31 c0                	xor    eax,eax
c002c711:	5b                   	pop    ebx
c002c712:	5e                   	pop    esi
c002c713:	c3                   	ret    

c002c714 <SATA::SATA()>:
c002c714:	83 ec 0c             	sub    esp,0xc
c002c717:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c71b:	83 ec 04             	sub    esp,0x4
c002c71e:	68 00 02 00 00       	push   0x200
c002c723:	68 2c 34 03 c0       	push   0xc003342c
c002c728:	50                   	push   eax
c002c729:	e8 78 ee fe ff       	call   c001b5a6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002c72e:	83 c4 10             	add    esp,0x10
c002c731:	ba 9c 34 03 c0       	mov    edx,0xc003349c
c002c736:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c73a:	89 10                	mov    DWORD PTR [eax],edx
c002c73c:	90                   	nop
c002c73d:	83 c4 0c             	add    esp,0xc
c002c740:	c3                   	ret    
c002c741:	90                   	nop

c002c742 <SATA::access(unsigned long long, int, void*, bool)>:
c002c742:	55                   	push   ebp
c002c743:	57                   	push   edi
c002c744:	56                   	push   esi
c002c745:	53                   	push   ebx
c002c746:	83 ec 2c             	sub    esp,0x2c
c002c749:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002c74d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002c751:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002c755:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002c759:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002c75d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002c761:	fa                   	cli    
c002c762:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002c768:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c002c76d:	7e 10                	jle    c002c77f <SATA::access(unsigned long long, int, void*, bool)+0x3d>
c002c76f:	83 ec 0c             	sub    esp,0xc
c002c772:	68 3c 34 03 c0       	push   0xc003343c
c002c777:	e8 cf 38 ff ff       	call   c002004b <KePanic(char const*)>
c002c77c:	83 c4 10             	add    esp,0x10
c002c77f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002c785:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c002c78b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002c791:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002c795:	89 d0                	mov    eax,edx
c002c797:	c1 e0 07             	shl    eax,0x7
c002c79a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002c79e:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002c7a8:	51                   	push   ecx
c002c7a9:	8d 42 02             	lea    eax,[edx+0x2]
c002c7ac:	51                   	push   ecx
c002c7ad:	c1 e0 07             	shl    eax,0x7
c002c7b0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002c7b4:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002c7b8:	50                   	push   eax
c002c7b9:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c002c7bf:	e8 68 ec ff ff       	call   c002b42c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002c7c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002c7c8:	83 c4 10             	add    esp,0x10
c002c7cb:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c002c7d0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002c7d4:	0f 84 aa 01 00 00    	je     c002c984 <SATA::access(unsigned long long, int, void*, bool)+0x242>
c002c7da:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002c7de:	c1 e0 09             	shl    eax,0x9
c002c7e1:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002c7e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002c7ea:	74 0e                	je     c002c7fa <SATA::access(unsigned long long, int, void*, bool)+0xb8>
c002c7ec:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c002c7f2:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c002c7f6:	89 c1                	mov    ecx,eax
c002c7f8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002c7fa:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002c800:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002c804:	8d 42 02             	lea    eax,[edx+0x2]
c002c807:	c1 e0 07             	shl    eax,0x7
c002c80a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002c80e:	8b 00                	mov    eax,DWORD PTR [eax]
c002c810:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002c816:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002c81c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002c820:	c1 e1 05             	shl    ecx,0x5
c002c823:	01 c8                	add    eax,ecx
c002c825:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002c829:	83 e1 01             	and    ecx,0x1
c002c82c:	89 ce                	mov    esi,ecx
c002c82e:	8a 08                	mov    cl,BYTE PTR [eax]
c002c830:	c1 e6 06             	shl    esi,0x6
c002c833:	83 e1 bf             	and    ecx,0xffffffbf
c002c836:	09 f1                	or     ecx,esi
c002c838:	88 08                	mov    BYTE PTR [eax],cl
c002c83a:	8b 08                	mov    ecx,DWORD PTR [eax]
c002c83c:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c002c842:	81 c9 05 00 01 00    	or     ecx,0x10005
c002c848:	89 08                	mov    DWORD PTR [eax],ecx
c002c84a:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002c850:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c002c856:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c002c85c:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c002c85f:	50                   	push   eax
c002c860:	68 90 00 00 00       	push   0x90
c002c865:	6a 00                	push   0x0
c002c867:	56                   	push   esi
c002c868:	e8 83 3c fd ff       	call   c00004f0 <memset>
c002c86d:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002c873:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c002c879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002c87d:	83 c4 10             	add    esp,0x10
c002c880:	48                   	dec    eax
c002c881:	25 ff ff 3f 00       	and    eax,0x3fffff
c002c886:	89 c1                	mov    ecx,eax
c002c888:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c002c88e:	25 00 00 c0 ff       	and    eax,0xffc00000
c002c893:	09 c8                	or     eax,ecx
c002c895:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c002c89b:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c002c8a1:	83 c8 80             	or     eax,0xffffff80
c002c8a4:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c002c8aa:	66 8b 06             	mov    ax,WORD PTR [esi]
c002c8ad:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002c8b1:	25 00 7f 00 00       	and    eax,0x7f00
c002c8b6:	0d 27 80 ff ff       	or     eax,0xffff8027
c002c8bb:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002c8c0:	66 89 06             	mov    WORD PTR [esi],ax
c002c8c3:	b0 35                	mov    al,0x35
c002c8c5:	75 02                	jne    c002c8c9 <SATA::access(unsigned long long, int, void*, bool)+0x187>
c002c8c7:	b0 25                	mov    al,0x25
c002c8c9:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c002c8cc:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c002c8d0:	89 e8                	mov    eax,ebp
c002c8d2:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c002c8d6:	c1 e8 10             	shr    eax,0x10
c002c8d9:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c002c8dc:	89 e8                	mov    eax,ebp
c002c8de:	c1 e8 18             	shr    eax,0x18
c002c8e1:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c002c8e4:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c002c8e8:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c002c8eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002c8ef:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c002c8f2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002c8f6:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c002c8fa:	89 d6                	mov    esi,edx
c002c8fc:	31 c0                	xor    eax,eax
c002c8fe:	c1 e6 07             	shl    esi,0x7
c002c901:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c002c905:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c002c90b:	80 e1 88             	and    cl,0x88
c002c90e:	74 0a                	je     c002c91a <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c002c910:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002c915:	74 0a                	je     c002c921 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c002c917:	40                   	inc    eax
c002c918:	eb eb                	jmp    c002c905 <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c002c91a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002c91f:	75 0a                	jne    c002c92b <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c002c921:	83 ec 0c             	sub    esp,0xc
c002c924:	68 75 34 03 c0       	push   0xc0033475
c002c929:	eb 36                	jmp    c002c961 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c002c92b:	b8 01 00 00 00       	mov    eax,0x1
c002c930:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002c934:	c1 e2 07             	shl    edx,0x7
c002c937:	d3 e0                	shl    eax,cl
c002c939:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c002c93d:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c002c943:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c002c949:	85 c8                	test   eax,ecx
c002c94b:	74 2b                	je     c002c978 <SATA::access(unsigned long long, int, void*, bool)+0x236>
c002c94d:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c002c953:	0f ba e1 1e          	bt     ecx,0x1e
c002c957:	73 ea                	jae    c002c943 <SATA::access(unsigned long long, int, void*, bool)+0x201>
c002c959:	83 ec 0c             	sub    esp,0xc
c002c95c:	68 83 34 03 c0       	push   0xc0033483
c002c961:	e8 db c7 fe ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c002c966:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002c96b:	83 c4 10             	add    esp,0x10
c002c96e:	48                   	dec    eax
c002c96f:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002c974:	85 c0                	test   eax,eax
c002c976:	eb 17                	jmp    c002c98f <SATA::access(unsigned long long, int, void*, bool)+0x24d>
c002c978:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c002c97e:	0f ba e0 1e          	bt     eax,0x1e
c002c982:	73 15                	jae    c002c999 <SATA::access(unsigned long long, int, void*, bool)+0x257>
c002c984:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002c989:	48                   	dec    eax
c002c98a:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002c98f:	75 01                	jne    c002c992 <SATA::access(unsigned long long, int, void*, bool)+0x250>
c002c991:	fb                   	sti    
c002c992:	b8 01 00 00 00       	mov    eax,0x1
c002c997:	eb 29                	jmp    c002c9c2 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c002c999:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002c99e:	75 10                	jne    c002c9b0 <SATA::access(unsigned long long, int, void*, bool)+0x26e>
c002c9a0:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c002c9a6:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c002c9aa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002c9ae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002c9b0:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002c9b5:	48                   	dec    eax
c002c9b6:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002c9bb:	75 03                	jne    c002c9c0 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c002c9bd:	fb                   	sti    
c002c9be:	eb 02                	jmp    c002c9c2 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c002c9c0:	31 c0                	xor    eax,eax
c002c9c2:	83 c4 2c             	add    esp,0x2c
c002c9c5:	5b                   	pop    ebx
c002c9c6:	5e                   	pop    esi
c002c9c7:	5f                   	pop    edi
c002c9c8:	5d                   	pop    ebp
c002c9c9:	c3                   	ret    

c002c9ca <SATA::read(unsigned long long, int, void*)>:
c002c9ca:	55                   	push   ebp
c002c9cb:	57                   	push   edi
c002c9cc:	56                   	push   esi
c002c9cd:	be 04 00 00 00       	mov    esi,0x4
c002c9d2:	53                   	push   ebx
c002c9d3:	83 ec 0c             	sub    esp,0xc
c002c9d6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002c9da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002c9de:	8d 7b ff             	lea    edi,[ebx-0x1]
c002c9e1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002c9e5:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002c9e9:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002c9ef:	0f 87 1a 02 00 00    	ja     c002cc0f <SATA::read(unsigned long long, int, void*)+0x245>
c002c9f5:	be 06 00 00 00       	mov    esi,0x6
c002c9fa:	85 c9                	test   ecx,ecx
c002c9fc:	0f 84 0d 02 00 00    	je     c002cc0f <SATA::read(unsigned long long, int, void*)+0x245>
c002ca02:	56                   	push   esi
c002ca03:	56                   	push   esi
c002ca04:	6a 00                	push   0x0
c002ca06:	51                   	push   ecx
c002ca07:	53                   	push   ebx
c002ca08:	52                   	push   edx
c002ca09:	50                   	push   eax
c002ca0a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002ca0e:	e8 2f fd ff ff       	call   c002c742 <SATA::access(unsigned long long, int, void*, bool)>
c002ca13:	83 c4 20             	add    esp,0x20
c002ca16:	89 c6                	mov    esi,eax
c002ca18:	85 c0                	test   eax,eax
c002ca1a:	0f 85 ea 01 00 00    	jne    c002cc0a <SATA::read(unsigned long long, int, void*)+0x240>
c002ca20:	01 1d b4 0b 04 c0    	add    DWORD PTR ds:0xc0040bb4,ebx
c002ca26:	bb 0a 00 00 00       	mov    ebx,0xa
c002ca2b:	50                   	push   eax
c002ca2c:	50                   	push   eax
c002ca2d:	6a 0f                	push   0xf
c002ca2f:	6a 00                	push   0x0
c002ca31:	e8 33 f2 ff ff       	call   c002bc69 <combineColours(unsigned char, unsigned char)>
c002ca36:	5a                   	pop    edx
c002ca37:	0f b6 c0             	movzx  eax,al
c002ca3a:	59                   	pop    ecx
c002ca3b:	b9 10 27 00 00       	mov    ecx,0x2710
c002ca40:	50                   	push   eax
c002ca41:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002ca46:	99                   	cdq    
c002ca47:	f7 f9                	idiv   ecx
c002ca49:	99                   	cdq    
c002ca4a:	f7 fb                	idiv   ebx
c002ca4c:	8d 42 30             	lea    eax,[edx+0x30]
c002ca4f:	0f b6 c0             	movzx  eax,al
c002ca52:	50                   	push   eax
c002ca53:	e8 00 f2 ff ff       	call   c002bc58 <combineCharAndColour(char, unsigned char)>
c002ca58:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002ca5e:	5f                   	pop    edi
c002ca5f:	5d                   	pop    ebp
c002ca60:	bd e8 03 00 00       	mov    ebp,0x3e8
c002ca65:	6a 0f                	push   0xf
c002ca67:	6a 00                	push   0x0
c002ca69:	e8 fb f1 ff ff       	call   c002bc69 <combineColours(unsigned char, unsigned char)>
c002ca6e:	5a                   	pop    edx
c002ca6f:	0f b6 c0             	movzx  eax,al
c002ca72:	59                   	pop    ecx
c002ca73:	50                   	push   eax
c002ca74:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002ca79:	99                   	cdq    
c002ca7a:	f7 fd                	idiv   ebp
c002ca7c:	99                   	cdq    
c002ca7d:	f7 fb                	idiv   ebx
c002ca7f:	8d 42 30             	lea    eax,[edx+0x30]
c002ca82:	0f b6 c0             	movzx  eax,al
c002ca85:	50                   	push   eax
c002ca86:	e8 cd f1 ff ff       	call   c002bc58 <combineCharAndColour(char, unsigned char)>
c002ca8b:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002ca91:	5f                   	pop    edi
c002ca92:	bf 64 00 00 00       	mov    edi,0x64
c002ca97:	58                   	pop    eax
c002ca98:	6a 0f                	push   0xf
c002ca9a:	6a 00                	push   0x0
c002ca9c:	e8 c8 f1 ff ff       	call   c002bc69 <combineColours(unsigned char, unsigned char)>
c002caa1:	5a                   	pop    edx
c002caa2:	0f b6 c0             	movzx  eax,al
c002caa5:	59                   	pop    ecx
c002caa6:	50                   	push   eax
c002caa7:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002caac:	99                   	cdq    
c002caad:	f7 ff                	idiv   edi
c002caaf:	99                   	cdq    
c002cab0:	f7 fb                	idiv   ebx
c002cab2:	8d 42 30             	lea    eax,[edx+0x30]
c002cab5:	0f b6 c0             	movzx  eax,al
c002cab8:	50                   	push   eax
c002cab9:	e8 9a f1 ff ff       	call   c002bc58 <combineCharAndColour(char, unsigned char)>
c002cabe:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002cac4:	58                   	pop    eax
c002cac5:	5a                   	pop    edx
c002cac6:	6a 0f                	push   0xf
c002cac8:	6a 00                	push   0x0
c002caca:	e8 9a f1 ff ff       	call   c002bc69 <combineColours(unsigned char, unsigned char)>
c002cacf:	59                   	pop    ecx
c002cad0:	0f b6 c0             	movzx  eax,al
c002cad3:	5a                   	pop    edx
c002cad4:	50                   	push   eax
c002cad5:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002cada:	99                   	cdq    
c002cadb:	f7 fb                	idiv   ebx
c002cadd:	99                   	cdq    
c002cade:	f7 fb                	idiv   ebx
c002cae0:	8d 42 30             	lea    eax,[edx+0x30]
c002cae3:	0f b6 c0             	movzx  eax,al
c002cae6:	50                   	push   eax
c002cae7:	e8 6c f1 ff ff       	call   c002bc58 <combineCharAndColour(char, unsigned char)>
c002caec:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002caf2:	59                   	pop    ecx
c002caf3:	58                   	pop    eax
c002caf4:	6a 0f                	push   0xf
c002caf6:	6a 00                	push   0x0
c002caf8:	e8 6c f1 ff ff       	call   c002bc69 <combineColours(unsigned char, unsigned char)>
c002cafd:	5a                   	pop    edx
c002cafe:	0f b6 c0             	movzx  eax,al
c002cb01:	59                   	pop    ecx
c002cb02:	50                   	push   eax
c002cb03:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002cb08:	99                   	cdq    
c002cb09:	f7 fb                	idiv   ebx
c002cb0b:	8d 42 30             	lea    eax,[edx+0x30]
c002cb0e:	0f b6 c0             	movzx  eax,al
c002cb11:	50                   	push   eax
c002cb12:	e8 41 f1 ff ff       	call   c002bc58 <combineCharAndColour(char, unsigned char)>
c002cb17:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002cb1d:	58                   	pop    eax
c002cb1e:	5a                   	pop    edx
c002cb1f:	6a 0f                	push   0xf
c002cb21:	6a 00                	push   0x0
c002cb23:	e8 41 f1 ff ff       	call   c002bc69 <combineColours(unsigned char, unsigned char)>
c002cb28:	59                   	pop    ecx
c002cb29:	0f b6 c0             	movzx  eax,al
c002cb2c:	5a                   	pop    edx
c002cb2d:	b9 10 27 00 00       	mov    ecx,0x2710
c002cb32:	50                   	push   eax
c002cb33:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002cb38:	99                   	cdq    
c002cb39:	f7 f9                	idiv   ecx
c002cb3b:	99                   	cdq    
c002cb3c:	f7 fb                	idiv   ebx
c002cb3e:	8d 42 30             	lea    eax,[edx+0x30]
c002cb41:	0f b6 c0             	movzx  eax,al
c002cb44:	50                   	push   eax
c002cb45:	e8 0e f1 ff ff       	call   c002bc58 <combineCharAndColour(char, unsigned char)>
c002cb4a:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002cb50:	59                   	pop    ecx
c002cb51:	58                   	pop    eax
c002cb52:	6a 0f                	push   0xf
c002cb54:	6a 00                	push   0x0
c002cb56:	e8 0e f1 ff ff       	call   c002bc69 <combineColours(unsigned char, unsigned char)>
c002cb5b:	5a                   	pop    edx
c002cb5c:	0f b6 c0             	movzx  eax,al
c002cb5f:	59                   	pop    ecx
c002cb60:	50                   	push   eax
c002cb61:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002cb66:	99                   	cdq    
c002cb67:	f7 fd                	idiv   ebp
c002cb69:	99                   	cdq    
c002cb6a:	f7 fb                	idiv   ebx
c002cb6c:	8d 42 30             	lea    eax,[edx+0x30]
c002cb6f:	0f b6 c0             	movzx  eax,al
c002cb72:	50                   	push   eax
c002cb73:	e8 e0 f0 ff ff       	call   c002bc58 <combineCharAndColour(char, unsigned char)>
c002cb78:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002cb7e:	5d                   	pop    ebp
c002cb7f:	58                   	pop    eax
c002cb80:	6a 0f                	push   0xf
c002cb82:	6a 00                	push   0x0
c002cb84:	e8 e0 f0 ff ff       	call   c002bc69 <combineColours(unsigned char, unsigned char)>
c002cb89:	5a                   	pop    edx
c002cb8a:	0f b6 c0             	movzx  eax,al
c002cb8d:	59                   	pop    ecx
c002cb8e:	50                   	push   eax
c002cb8f:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002cb94:	99                   	cdq    
c002cb95:	f7 ff                	idiv   edi
c002cb97:	99                   	cdq    
c002cb98:	f7 fb                	idiv   ebx
c002cb9a:	8d 42 30             	lea    eax,[edx+0x30]
c002cb9d:	0f b6 c0             	movzx  eax,al
c002cba0:	50                   	push   eax
c002cba1:	e8 b2 f0 ff ff       	call   c002bc58 <combineCharAndColour(char, unsigned char)>
c002cba6:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002cbac:	5f                   	pop    edi
c002cbad:	5d                   	pop    ebp
c002cbae:	6a 0f                	push   0xf
c002cbb0:	6a 00                	push   0x0
c002cbb2:	e8 b2 f0 ff ff       	call   c002bc69 <combineColours(unsigned char, unsigned char)>
c002cbb7:	5a                   	pop    edx
c002cbb8:	0f b6 c0             	movzx  eax,al
c002cbbb:	59                   	pop    ecx
c002cbbc:	50                   	push   eax
c002cbbd:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002cbc2:	99                   	cdq    
c002cbc3:	f7 fb                	idiv   ebx
c002cbc5:	99                   	cdq    
c002cbc6:	f7 fb                	idiv   ebx
c002cbc8:	8d 42 30             	lea    eax,[edx+0x30]
c002cbcb:	0f b6 c0             	movzx  eax,al
c002cbce:	50                   	push   eax
c002cbcf:	e8 84 f0 ff ff       	call   c002bc58 <combineCharAndColour(char, unsigned char)>
c002cbd4:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002cbda:	5f                   	pop    edi
c002cbdb:	5d                   	pop    ebp
c002cbdc:	6a 0f                	push   0xf
c002cbde:	6a 00                	push   0x0
c002cbe0:	e8 84 f0 ff ff       	call   c002bc69 <combineColours(unsigned char, unsigned char)>
c002cbe5:	5a                   	pop    edx
c002cbe6:	0f b6 c0             	movzx  eax,al
c002cbe9:	59                   	pop    ecx
c002cbea:	50                   	push   eax
c002cbeb:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002cbf0:	99                   	cdq    
c002cbf1:	f7 fb                	idiv   ebx
c002cbf3:	83 c2 30             	add    edx,0x30
c002cbf6:	0f b6 d2             	movzx  edx,dl
c002cbf9:	52                   	push   edx
c002cbfa:	e8 59 f0 ff ff       	call   c002bc58 <combineCharAndColour(char, unsigned char)>
c002cbff:	83 c4 10             	add    esp,0x10
c002cc02:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002cc08:	eb 05                	jmp    c002cc0f <SATA::read(unsigned long long, int, void*)+0x245>
c002cc0a:	be 01 00 00 00       	mov    esi,0x1
c002cc0f:	83 c4 0c             	add    esp,0xc
c002cc12:	89 f0                	mov    eax,esi
c002cc14:	5b                   	pop    ebx
c002cc15:	5e                   	pop    esi
c002cc16:	5f                   	pop    edi
c002cc17:	5d                   	pop    ebp
c002cc18:	c3                   	ret    
c002cc19:	90                   	nop

c002cc1a <SATA::write(unsigned long long, int, void*)>:
c002cc1a:	55                   	push   ebp
c002cc1b:	b8 04 00 00 00       	mov    eax,0x4
c002cc20:	57                   	push   edi
c002cc21:	56                   	push   esi
c002cc22:	53                   	push   ebx
c002cc23:	83 ec 1c             	sub    esp,0x1c
c002cc26:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002cc2a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c002cc2e:	8d 75 ff             	lea    esi,[ebp-0x1]
c002cc31:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002cc35:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c002cc39:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002cc3f:	0f 87 32 02 00 00    	ja     c002ce77 <SATA::write(unsigned long long, int, void*)+0x25d>
c002cc45:	b8 06 00 00 00       	mov    eax,0x6
c002cc4a:	85 ff                	test   edi,edi
c002cc4c:	0f 84 25 02 00 00    	je     c002ce77 <SATA::write(unsigned long long, int, void*)+0x25d>
c002cc52:	89 ee                	mov    esi,ebp
c002cc54:	c1 e6 09             	shl    esi,0x9
c002cc57:	01 fe                	add    esi,edi
c002cc59:	89 c8                	mov    eax,ecx
c002cc5b:	89 da                	mov    edx,ebx
c002cc5d:	83 c0 01             	add    eax,0x1
c002cc60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002cc64:	83 d2 00             	adc    edx,0x0
c002cc67:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002cc6b:	50                   	push   eax
c002cc6c:	50                   	push   eax
c002cc6d:	6a 01                	push   0x1
c002cc6f:	57                   	push   edi
c002cc70:	81 c7 00 02 00 00    	add    edi,0x200
c002cc76:	6a 01                	push   0x1
c002cc78:	53                   	push   ebx
c002cc79:	51                   	push   ecx
c002cc7a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002cc7e:	e8 bf fa ff ff       	call   c002c742 <SATA::access(unsigned long long, int, void*, bool)>
c002cc83:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c002cc87:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002cc8b:	83 c4 20             	add    esp,0x20
c002cc8e:	39 f7                	cmp    edi,esi
c002cc90:	75 c7                	jne    c002cc59 <SATA::write(unsigned long long, int, void*)+0x3f>
c002cc92:	bb 0a 00 00 00       	mov    ebx,0xa
c002cc97:	01 2d b0 0b 04 c0    	add    DWORD PTR ds:0xc0040bb0,ebp
c002cc9d:	bd 10 27 00 00       	mov    ebp,0x2710
c002cca2:	50                   	push   eax
c002cca3:	50                   	push   eax
c002cca4:	6a 0f                	push   0xf
c002cca6:	6a 00                	push   0x0
c002cca8:	e8 bc ef ff ff       	call   c002bc69 <combineColours(unsigned char, unsigned char)>
c002ccad:	5a                   	pop    edx
c002ccae:	0f b6 c0             	movzx  eax,al
c002ccb1:	59                   	pop    ecx
c002ccb2:	50                   	push   eax
c002ccb3:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002ccb8:	99                   	cdq    
c002ccb9:	f7 fd                	idiv   ebp
c002ccbb:	99                   	cdq    
c002ccbc:	f7 fb                	idiv   ebx
c002ccbe:	8d 42 30             	lea    eax,[edx+0x30]
c002ccc1:	0f b6 c0             	movzx  eax,al
c002ccc4:	50                   	push   eax
c002ccc5:	e8 8e ef ff ff       	call   c002bc58 <combineCharAndColour(char, unsigned char)>
c002ccca:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002ccd0:	5e                   	pop    esi
c002ccd1:	5f                   	pop    edi
c002ccd2:	bf e8 03 00 00       	mov    edi,0x3e8
c002ccd7:	6a 0f                	push   0xf
c002ccd9:	6a 00                	push   0x0
c002ccdb:	e8 89 ef ff ff       	call   c002bc69 <combineColours(unsigned char, unsigned char)>
c002cce0:	5a                   	pop    edx
c002cce1:	0f b6 c0             	movzx  eax,al
c002cce4:	59                   	pop    ecx
c002cce5:	50                   	push   eax
c002cce6:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002cceb:	99                   	cdq    
c002ccec:	f7 ff                	idiv   edi
c002ccee:	99                   	cdq    
c002ccef:	f7 fb                	idiv   ebx
c002ccf1:	8d 42 30             	lea    eax,[edx+0x30]
c002ccf4:	0f b6 c0             	movzx  eax,al
c002ccf7:	50                   	push   eax
c002ccf8:	e8 5b ef ff ff       	call   c002bc58 <combineCharAndColour(char, unsigned char)>
c002ccfd:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002cd03:	5e                   	pop    esi
c002cd04:	be 64 00 00 00       	mov    esi,0x64
c002cd09:	58                   	pop    eax
c002cd0a:	6a 0f                	push   0xf
c002cd0c:	6a 00                	push   0x0
c002cd0e:	e8 56 ef ff ff       	call   c002bc69 <combineColours(unsigned char, unsigned char)>
c002cd13:	5a                   	pop    edx
c002cd14:	0f b6 c0             	movzx  eax,al
c002cd17:	59                   	pop    ecx
c002cd18:	50                   	push   eax
c002cd19:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002cd1e:	99                   	cdq    
c002cd1f:	f7 fe                	idiv   esi
c002cd21:	99                   	cdq    
c002cd22:	f7 fb                	idiv   ebx
c002cd24:	8d 42 30             	lea    eax,[edx+0x30]
c002cd27:	0f b6 c0             	movzx  eax,al
c002cd2a:	50                   	push   eax
c002cd2b:	e8 28 ef ff ff       	call   c002bc58 <combineCharAndColour(char, unsigned char)>
c002cd30:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002cd36:	58                   	pop    eax
c002cd37:	5a                   	pop    edx
c002cd38:	6a 0f                	push   0xf
c002cd3a:	6a 00                	push   0x0
c002cd3c:	e8 28 ef ff ff       	call   c002bc69 <combineColours(unsigned char, unsigned char)>
c002cd41:	59                   	pop    ecx
c002cd42:	0f b6 c0             	movzx  eax,al
c002cd45:	5a                   	pop    edx
c002cd46:	50                   	push   eax
c002cd47:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002cd4c:	99                   	cdq    
c002cd4d:	f7 fb                	idiv   ebx
c002cd4f:	99                   	cdq    
c002cd50:	f7 fb                	idiv   ebx
c002cd52:	8d 42 30             	lea    eax,[edx+0x30]
c002cd55:	0f b6 c0             	movzx  eax,al
c002cd58:	50                   	push   eax
c002cd59:	e8 fa ee ff ff       	call   c002bc58 <combineCharAndColour(char, unsigned char)>
c002cd5e:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002cd64:	59                   	pop    ecx
c002cd65:	58                   	pop    eax
c002cd66:	6a 0f                	push   0xf
c002cd68:	6a 00                	push   0x0
c002cd6a:	e8 fa ee ff ff       	call   c002bc69 <combineColours(unsigned char, unsigned char)>
c002cd6f:	5a                   	pop    edx
c002cd70:	0f b6 c0             	movzx  eax,al
c002cd73:	59                   	pop    ecx
c002cd74:	50                   	push   eax
c002cd75:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002cd7a:	99                   	cdq    
c002cd7b:	f7 fb                	idiv   ebx
c002cd7d:	83 c2 30             	add    edx,0x30
c002cd80:	0f b6 d2             	movzx  edx,dl
c002cd83:	52                   	push   edx
c002cd84:	e8 cf ee ff ff       	call   c002bc58 <combineCharAndColour(char, unsigned char)>
c002cd89:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002cd8f:	58                   	pop    eax
c002cd90:	5a                   	pop    edx
c002cd91:	6a 0f                	push   0xf
c002cd93:	6a 00                	push   0x0
c002cd95:	e8 cf ee ff ff       	call   c002bc69 <combineColours(unsigned char, unsigned char)>
c002cd9a:	59                   	pop    ecx
c002cd9b:	0f b6 c0             	movzx  eax,al
c002cd9e:	5a                   	pop    edx
c002cd9f:	50                   	push   eax
c002cda0:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002cda5:	99                   	cdq    
c002cda6:	f7 fd                	idiv   ebp
c002cda8:	99                   	cdq    
c002cda9:	f7 fb                	idiv   ebx
c002cdab:	8d 42 30             	lea    eax,[edx+0x30]
c002cdae:	0f b6 c0             	movzx  eax,al
c002cdb1:	50                   	push   eax
c002cdb2:	e8 a1 ee ff ff       	call   c002bc58 <combineCharAndColour(char, unsigned char)>
c002cdb7:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002cdbd:	59                   	pop    ecx
c002cdbe:	5d                   	pop    ebp
c002cdbf:	6a 0f                	push   0xf
c002cdc1:	6a 00                	push   0x0
c002cdc3:	e8 a1 ee ff ff       	call   c002bc69 <combineColours(unsigned char, unsigned char)>
c002cdc8:	5a                   	pop    edx
c002cdc9:	0f b6 c0             	movzx  eax,al
c002cdcc:	59                   	pop    ecx
c002cdcd:	50                   	push   eax
c002cdce:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002cdd3:	99                   	cdq    
c002cdd4:	f7 ff                	idiv   edi
c002cdd6:	99                   	cdq    
c002cdd7:	f7 fb                	idiv   ebx
c002cdd9:	8d 42 30             	lea    eax,[edx+0x30]
c002cddc:	0f b6 c0             	movzx  eax,al
c002cddf:	50                   	push   eax
c002cde0:	e8 73 ee ff ff       	call   c002bc58 <combineCharAndColour(char, unsigned char)>
c002cde5:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002cdeb:	5f                   	pop    edi
c002cdec:	5d                   	pop    ebp
c002cded:	6a 0f                	push   0xf
c002cdef:	6a 00                	push   0x0
c002cdf1:	e8 73 ee ff ff       	call   c002bc69 <combineColours(unsigned char, unsigned char)>
c002cdf6:	5a                   	pop    edx
c002cdf7:	0f b6 c0             	movzx  eax,al
c002cdfa:	59                   	pop    ecx
c002cdfb:	50                   	push   eax
c002cdfc:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002ce01:	99                   	cdq    
c002ce02:	f7 fe                	idiv   esi
c002ce04:	99                   	cdq    
c002ce05:	f7 fb                	idiv   ebx
c002ce07:	8d 42 30             	lea    eax,[edx+0x30]
c002ce0a:	0f b6 c0             	movzx  eax,al
c002ce0d:	50                   	push   eax
c002ce0e:	e8 45 ee ff ff       	call   c002bc58 <combineCharAndColour(char, unsigned char)>
c002ce13:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002ce19:	5e                   	pop    esi
c002ce1a:	5f                   	pop    edi
c002ce1b:	6a 0f                	push   0xf
c002ce1d:	6a 00                	push   0x0
c002ce1f:	e8 45 ee ff ff       	call   c002bc69 <combineColours(unsigned char, unsigned char)>
c002ce24:	5d                   	pop    ebp
c002ce25:	0f b6 c0             	movzx  eax,al
c002ce28:	5a                   	pop    edx
c002ce29:	50                   	push   eax
c002ce2a:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002ce2f:	99                   	cdq    
c002ce30:	f7 fb                	idiv   ebx
c002ce32:	99                   	cdq    
c002ce33:	f7 fb                	idiv   ebx
c002ce35:	8d 42 30             	lea    eax,[edx+0x30]
c002ce38:	0f b6 c0             	movzx  eax,al
c002ce3b:	50                   	push   eax
c002ce3c:	e8 17 ee ff ff       	call   c002bc58 <combineCharAndColour(char, unsigned char)>
c002ce41:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002ce47:	59                   	pop    ecx
c002ce48:	5e                   	pop    esi
c002ce49:	6a 0f                	push   0xf
c002ce4b:	6a 00                	push   0x0
c002ce4d:	e8 17 ee ff ff       	call   c002bc69 <combineColours(unsigned char, unsigned char)>
c002ce52:	5f                   	pop    edi
c002ce53:	0f b6 c0             	movzx  eax,al
c002ce56:	5d                   	pop    ebp
c002ce57:	50                   	push   eax
c002ce58:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002ce5d:	99                   	cdq    
c002ce5e:	f7 fb                	idiv   ebx
c002ce60:	83 c2 30             	add    edx,0x30
c002ce63:	0f b6 d2             	movzx  edx,dl
c002ce66:	52                   	push   edx
c002ce67:	e8 ec ed ff ff       	call   c002bc58 <combineCharAndColour(char, unsigned char)>
c002ce6c:	83 c4 10             	add    esp,0x10
c002ce6f:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002ce75:	31 c0                	xor    eax,eax
c002ce77:	83 c4 1c             	add    esp,0x1c
c002ce7a:	5b                   	pop    ebx
c002ce7b:	5e                   	pop    esi
c002ce7c:	5f                   	pop    edi
c002ce7d:	5d                   	pop    ebp
c002ce7e:	c3                   	ret    
c002ce7f:	90                   	nop

c002ce80 <SATAPI::write(unsigned long long, int, void*)>:
c002ce80:	b8 03 00 00 00       	mov    eax,0x3
c002ce85:	c3                   	ret    

c002ce86 <SATAPI::close(int, int, void*)>:
c002ce86:	83 ec 0c             	sub    esp,0xc
c002ce89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ce8d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002ce93:	85 c0                	test   eax,eax
c002ce95:	74 0c                	je     c002cea3 <SATAPI::close(int, int, void*)+0x1d>
c002ce97:	83 ec 0c             	sub    esp,0xc
c002ce9a:	8b 10                	mov    edx,DWORD PTR [eax]
c002ce9c:	50                   	push   eax
c002ce9d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002cea0:	83 c4 10             	add    esp,0x10
c002cea3:	31 c0                	xor    eax,eax
c002cea5:	83 c4 0c             	add    esp,0xc
c002cea8:	c3                   	ret    
c002cea9:	90                   	nop

c002ceaa <SATAPI::SATAPI()>:
c002ceaa:	83 ec 0c             	sub    esp,0xc
c002cead:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ceb1:	83 ec 04             	sub    esp,0x4
c002ceb4:	68 00 08 00 00       	push   0x800
c002ceb9:	68 cc 34 03 c0       	push   0xc00334cc
c002cebe:	50                   	push   eax
c002cebf:	e8 e2 e6 fe ff       	call   c001b5a6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002cec4:	83 c4 10             	add    esp,0x10
c002cec7:	ba c0 35 03 c0       	mov    edx,0xc00335c0
c002cecc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ced0:	89 10                	mov    DWORD PTR [eax],edx
c002ced2:	90                   	nop
c002ced3:	83 c4 0c             	add    esp,0xc
c002ced6:	c3                   	ret    
c002ced7:	90                   	nop

c002ced8 <SATAPI::diskRemoved()>:
c002ced8:	c3                   	ret    
c002ced9:	90                   	nop

c002ceda <SATAPI::diskInserted()>:
c002ceda:	83 ec 18             	sub    esp,0x18
c002cedd:	68 d8 34 03 c0       	push   0xc00334d8
c002cee2:	e8 5a c2 fe ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c002cee7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002ceeb:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c002cef2:	83 c4 1c             	add    esp,0x1c
c002cef5:	c3                   	ret    

c002cef6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c002cef6:	55                   	push   ebp
c002cef7:	57                   	push   edi
c002cef8:	56                   	push   esi
c002cef9:	53                   	push   ebx
c002cefa:	83 ec 34             	sub    esp,0x34
c002cefd:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c002cf01:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002cf05:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c002cf09:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002cf0d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c002cf11:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c002cf17:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002cf1d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002cf21:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c002cf27:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002cf2b:	83 c0 02             	add    eax,0x2
c002cf2e:	c1 e0 07             	shl    eax,0x7
c002cf31:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002cf35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002cf39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002cf3d:	c1 e0 07             	shl    eax,0x7
c002cf40:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002cf44:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002cf48:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002cf52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002cf56:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002cf5c:	e8 cb e4 ff ff       	call   c002b42c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002cf61:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002cf65:	83 c4 10             	add    esp,0x10
c002cf68:	b8 01 00 00 00       	mov    eax,0x1
c002cf6d:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c002cf72:	0f 84 53 02 00 00    	je     c002d1cb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c002cf78:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002cf7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002cf82:	8b 00                	mov    eax,DWORD PTR [eax]
c002cf84:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002cf8a:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002cf90:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002cf94:	c1 e1 05             	shl    ecx,0x5
c002cf97:	01 c8                	add    eax,ecx
c002cf99:	8b 08                	mov    ecx,DWORD PTR [eax]
c002cf9b:	81 e1 80 ff 00 00    	and    ecx,0xff80
c002cfa1:	81 c9 25 00 01 00    	or     ecx,0x10025
c002cfa7:	89 08                	mov    DWORD PTR [eax],ecx
c002cfa9:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002cfaf:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c002cfb5:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002cfbb:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002cfbe:	8d 7b 40             	lea    edi,[ebx+0x40]
c002cfc1:	50                   	push   eax
c002cfc2:	68 90 00 00 00       	push   0x90
c002cfc7:	6a 00                	push   0x0
c002cfc9:	53                   	push   ebx
c002cfca:	e8 21 35 fd ff       	call   c00004f0 <memset>
c002cfcf:	b9 0c 00 00 00       	mov    ecx,0xc
c002cfd4:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c002cfd8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002cfda:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c002cfe0:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002cfe4:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002cfea:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c002cfee:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002cff2:	48                   	dec    eax
c002cff3:	25 ff ff 3f 00       	and    eax,0x3fffff
c002cff8:	89 c1                	mov    ecx,eax
c002cffa:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002d000:	25 00 00 c0 ff       	and    eax,0xffc00000
c002d005:	09 c8                	or     eax,ecx
c002d007:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002d00d:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c002d013:	83 c8 80             	or     eax,0xffffff80
c002d016:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c002d01c:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002d01f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002d023:	25 00 7f 00 00       	and    eax,0x7f00
c002d028:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c002d02c:	0d 27 80 ff ff       	or     eax,0xffff8027
c002d031:	66 89 03             	mov    WORD PTR [ebx],ax
c002d034:	89 d0                	mov    eax,edx
c002d036:	c1 ea 18             	shr    edx,0x18
c002d039:	c1 e8 10             	shr    eax,0x10
c002d03c:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c002d03f:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c002d042:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c002d046:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002d049:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002d04d:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c002d050:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002d054:	83 c4 10             	add    esp,0x10
c002d057:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002d05b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002d05f:	31 c0                	xor    eax,eax
c002d061:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c002d067:	80 e1 88             	and    cl,0x88
c002d06a:	74 0a                	je     c002d076 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c002d06c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002d071:	74 0a                	je     c002d07d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c002d073:	40                   	inc    eax
c002d074:	eb eb                	jmp    c002d061 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c002d076:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002d07b:	75 43                	jne    c002d0c0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c002d07d:	83 ec 0c             	sub    esp,0xc
c002d080:	68 f0 34 03 c0       	push   0xc00334f0
c002d085:	e8 b7 c0 fe ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c002d08a:	58                   	pop    eax
c002d08b:	5a                   	pop    edx
c002d08c:	68 05 35 03 c0       	push   0xc0033505
c002d091:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c002d097:	e8 06 a2 fe ff       	call   c00172a2 <VgaText::puts(char const*)>
c002d09c:	59                   	pop    ecx
c002d09d:	5b                   	pop    ebx
c002d09e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002d0a2:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002d0a8:	e8 19 e4 ff ff       	call   c002b4c6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002d0ad:	5e                   	pop    esi
c002d0ae:	5f                   	pop    edi
c002d0af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002d0b3:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002d0b9:	e8 e8 e3 ff ff       	call   c002b4a6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c002d0be:	eb 48                	jmp    c002d108 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c002d0c0:	be 01 00 00 00       	mov    esi,0x1
c002d0c5:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002d0c9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002d0cd:	d3 e6                	shl    esi,cl
c002d0cf:	c1 e7 07             	shl    edi,0x7
c002d0d2:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c002d0d8:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c002d0dd:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c002d0e1:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c002d0e7:	85 c6                	test   esi,eax
c002d0e9:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c002d0ef:	0f 84 a3 00 00 00    	je     c002d198 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c002d0f5:	0f ba e0 1e          	bt     eax,0x1e
c002d0f9:	73 1a                	jae    c002d115 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c002d0fb:	83 ec 0c             	sub    esp,0xc
c002d0fe:	68 17 35 03 c0       	push   0xc0033517
c002d103:	e8 39 c0 fe ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c002d108:	83 c4 10             	add    esp,0x10
c002d10b:	b8 01 00 00 00       	mov    eax,0x1
c002d110:	e9 b6 00 00 00       	jmp    c002d1cb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c002d115:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c002d11b:	83 f8 0d             	cmp    eax,0xd
c002d11e:	77 0a                	ja     c002d12a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c002d120:	83 ec 0c             	sub    esp,0xc
c002d123:	68 c8 00 00 00       	push   0xc8
c002d128:	eb 28                	jmp    c002d152 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c002d12a:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c002d130:	83 f8 0d             	cmp    eax,0xd
c002d133:	77 0a                	ja     c002d13f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c002d135:	83 ec 0c             	sub    esp,0xc
c002d138:	68 58 02 00 00       	push   0x258
c002d13d:	eb 13                	jmp    c002d152 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c002d13f:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c002d145:	83 f8 06             	cmp    eax,0x6
c002d148:	77 10                	ja     c002d15a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c002d14a:	83 ec 0c             	sub    esp,0xc
c002d14d:	68 dc 05 00 00       	push   0x5dc
c002d152:	e8 71 7d ff ff       	call   c0024ec8 <milliTenthSleep(unsigned int)>
c002d157:	83 c4 10             	add    esp,0x10
c002d15a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002d15e:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c002d161:	75 06                	jne    c002d169 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c002d163:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c002d167:	74 15                	je     c002d17e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c002d169:	83 fb 06             	cmp    ebx,0x6
c002d16c:	77 10                	ja     c002d17e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c002d16e:	83 ec 0c             	sub    esp,0xc
c002d171:	68 c4 09 00 00       	push   0x9c4
c002d176:	e8 4d 7d ff ff       	call   c0024ec8 <milliTenthSleep(unsigned int)>
c002d17b:	83 c4 10             	add    esp,0x10
c002d17e:	43                   	inc    ebx
c002d17f:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c002d185:	0f 85 56 ff ff ff    	jne    c002d0e1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c002d18b:	83 ec 0c             	sub    esp,0xc
c002d18e:	68 2a 35 03 c0       	push   0xc003352a
c002d193:	e9 6b ff ff ff       	jmp    c002d103 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c002d198:	0f ba e0 1e          	bt     eax,0x1e
c002d19c:	73 0d                	jae    c002d1ab <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c002d19e:	83 ec 0c             	sub    esp,0xc
c002d1a1:	68 3e 35 03 c0       	push   0xc003353e
c002d1a6:	e9 58 ff ff ff       	jmp    c002d103 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c002d1ab:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c002d1b0:	74 17                	je     c002d1c9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c002d1b2:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c002d1b7:	74 10                	je     c002d1c9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c002d1b9:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c002d1bf:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c002d1c3:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c002d1c7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002d1c9:	31 c0                	xor    eax,eax
c002d1cb:	83 c4 2c             	add    esp,0x2c
c002d1ce:	5b                   	pop    ebx
c002d1cf:	5e                   	pop    esi
c002d1d0:	5f                   	pop    edi
c002d1d1:	5d                   	pop    ebp
c002d1d2:	c3                   	ret    
c002d1d3:	90                   	nop

c002d1d4 <SATAPI::eject()>:
c002d1d4:	57                   	push   edi
c002d1d5:	b9 03 00 00 00       	mov    ecx,0x3
c002d1da:	83 ec 18             	sub    esp,0x18
c002d1dd:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002d1e1:	fc                   	cld    
c002d1e2:	31 c0                	xor    eax,eax
c002d1e4:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002d1e6:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002d1eb:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002d1f0:	50                   	push   eax
c002d1f1:	6a 00                	push   0x0
c002d1f3:	6a 00                	push   0x0
c002d1f5:	6a 00                	push   0x0
c002d1f7:	6a 00                	push   0x0
c002d1f9:	6a 02                	push   0x2
c002d1fb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002d1ff:	50                   	push   eax
c002d200:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002d204:	e8 ed fc ff ff       	call   c002cef6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002d209:	31 c0                	xor    eax,eax
c002d20b:	83 c4 38             	add    esp,0x38
c002d20e:	5f                   	pop    edi
c002d20f:	c3                   	ret    

c002d210 <SATAPI::detectMedia()>:
c002d210:	53                   	push   ebx
c002d211:	83 ec 14             	sub    esp,0x14
c002d214:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002d218:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002d21e:	e8 f5 fc fe ff       	call   c001cf18 <VCache::writeWriteBuffer()>
c002d223:	59                   	pop    ecx
c002d224:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002d22a:	e8 d9 fc fe ff       	call   c001cf08 <VCache::invalidateReadBuffer()>
c002d22f:	c7 04 24 53 35 03 c0 	mov    DWORD PTR [esp],0xc0033553
c002d236:	e8 06 bf fe ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c002d23b:	83 c4 10             	add    esp,0x10
c002d23e:	31 c0                	xor    eax,eax
c002d240:	8b 14 85 80 f3 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc0c80]
c002d247:	85 d2                	test   edx,edx
c002d249:	74 0f                	je     c002d25a <SATAPI::detectMedia()+0x4a>
c002d24b:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c002d251:	75 07                	jne    c002d25a <SATAPI::detectMedia()+0x4a>
c002d253:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c002d25a:	40                   	inc    eax
c002d25b:	83 f8 1a             	cmp    eax,0x1a
c002d25e:	75 e0                	jne    c002d240 <SATAPI::detectMedia()+0x30>
c002d260:	83 c4 08             	add    esp,0x8
c002d263:	5b                   	pop    ebx
c002d264:	c3                   	ret    
c002d265:	90                   	nop

c002d266 <SATAPI::open(int, int, void*)>:
c002d266:	56                   	push   esi
c002d267:	53                   	push   ebx
c002d268:	51                   	push   ecx
c002d269:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002d26d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002d271:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002d27b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002d281:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002d28b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002d28f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002d299:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002d29f:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002d2a6:	e8 10 93 fe ff       	call   c00165bb <Phys::allocatePage()>
c002d2ab:	89 c6                	mov    esi,eax
c002d2ad:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002d2b3:	81 c6 00 10 00 00    	add    esi,0x1000
c002d2b9:	e8 fd 92 fe ff       	call   c00165bb <Phys::allocatePage()>
c002d2be:	39 c6                	cmp    esi,eax
c002d2c0:	74 10                	je     c002d2d2 <SATAPI::open(int, int, void*)+0x6c>
c002d2c2:	83 ec 0c             	sub    esp,0xc
c002d2c5:	68 68 35 03 c0       	push   0xc0033568
c002d2ca:	e8 7c 2d ff ff       	call   c002004b <KePanic(char const*)>
c002d2cf:	83 c4 10             	add    esp,0x10
c002d2d2:	83 ec 0c             	sub    esp,0xc
c002d2d5:	6a 02                	push   0x2
c002d2d7:	e8 2d ab fe ff       	call   c0017e09 <Virt::allocateKernelVirtualPages(int)>
c002d2dc:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c002d2e2:	6a 03                	push   0x3
c002d2e4:	50                   	push   eax
c002d2e5:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002d2eb:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c002d2f1:	e8 26 b2 fe ff       	call   c001851c <VAS::mapPage(unsigned long, unsigned long, int)>
c002d2f6:	83 c4 14             	add    esp,0x14
c002d2f9:	68 78 01 00 00       	push   0x178
c002d2fe:	e8 af 8f fe ff       	call   c00162b2 <malloc>
c002d303:	83 c4 0c             	add    esp,0xc
c002d306:	89 c6                	mov    esi,eax
c002d308:	6a 00                	push   0x0
c002d30a:	68 ff ff ff 7f       	push   0x7fffffff
c002d30f:	6a 00                	push   0x0
c002d311:	6a 00                	push   0x0
c002d313:	53                   	push   ebx
c002d314:	68 7e 35 03 c0       	push   0xc003357e
c002d319:	50                   	push   eax
c002d31a:	e8 59 f0 fe ff       	call   c001c378 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002d31f:	83 c4 14             	add    esp,0x14
c002d322:	56                   	push   esi
c002d323:	e8 10 f1 fe ff       	call   c001c438 <LogicalDisk::assignDriveLetter()>
c002d328:	5a                   	pop    edx
c002d329:	0f be c0             	movsx  eax,al
c002d32c:	59                   	pop    ecx
c002d32d:	50                   	push   eax
c002d32e:	68 c4 33 03 c0       	push   0xc00333c4
c002d333:	e8 09 be fe ff       	call   c0019141 <Dbg::kprintf(char const*, ...)>
c002d338:	58                   	pop    eax
c002d339:	5a                   	pop    edx
c002d33a:	56                   	push   esi
c002d33b:	53                   	push   ebx
c002d33c:	e8 81 de fe ff       	call   c001b1c2 <Device::addChild(Device*)>
c002d341:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c002d347:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002d34a:	e8 bf e2 fe ff       	call   c001b60e <PhysicalDisk::startCache()>
c002d34f:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002d356:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002d359:	e8 b2 fe ff ff       	call   c002d210 <SATAPI::detectMedia()>
c002d35e:	83 c4 14             	add    esp,0x14
c002d361:	31 c0                	xor    eax,eax
c002d363:	5b                   	pop    ebx
c002d364:	5e                   	pop    esi
c002d365:	c3                   	ret    

c002d366 <SATAPI::read(unsigned long long, int, void*)>:
c002d366:	57                   	push   edi
c002d367:	56                   	push   esi
c002d368:	53                   	push   ebx
c002d369:	83 ec 30             	sub    esp,0x30
c002d36c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002d370:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c002d374:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c002d378:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002d37c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002d380:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002d384:	83 fe 04             	cmp    esi,0x4
c002d387:	7e 10                	jle    c002d399 <SATAPI::read(unsigned long long, int, void*)+0x33>
c002d389:	83 ec 0c             	sub    esp,0xc
c002d38c:	68 8c 35 03 c0       	push   0xc003358c
c002d391:	e8 b5 2c ff ff       	call   c002004b <KePanic(char const*)>
c002d396:	83 c4 10             	add    esp,0x10
c002d399:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002d39f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002d3a5:	51                   	push   ecx
c002d3a6:	50                   	push   eax
c002d3a7:	83 c0 02             	add    eax,0x2
c002d3aa:	c1 e0 07             	shl    eax,0x7
c002d3ad:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c002d3b3:	50                   	push   eax
c002d3b4:	52                   	push   edx
c002d3b5:	e8 36 e1 ff ff       	call   c002b4f0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002d3ba:	8d 7c 24 28          	lea    edi,[esp+0x28]
c002d3be:	b9 03 00 00 00       	mov    ecx,0x3
c002d3c3:	fc                   	cld    
c002d3c4:	31 c0                	xor    eax,eax
c002d3c6:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002d3c8:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c002d3cd:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c002d3d2:	83 c4 0c             	add    esp,0xc
c002d3d5:	6a 00                	push   0x0
c002d3d7:	6a 00                	push   0x0
c002d3d9:	6a 00                	push   0x0
c002d3db:	6a 00                	push   0x0
c002d3dd:	6a 02                	push   0x2
c002d3df:	8d 44 24 30          	lea    eax,[esp+0x30]
c002d3e3:	50                   	push   eax
c002d3e4:	53                   	push   ebx
c002d3e5:	e8 0c fb ff ff       	call   c002cef6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002d3ea:	83 c4 20             	add    esp,0x20
c002d3ed:	85 c0                	test   eax,eax
c002d3ef:	75 44                	jne    c002d435 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c002d3f1:	8d 7c 24 24          	lea    edi,[esp+0x24]
c002d3f5:	b9 03 00 00 00       	mov    ecx,0x3
c002d3fa:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002d3fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002d400:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c002d405:	0f c8                	bswap  eax
c002d407:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c002d40b:	89 f0                	mov    eax,esi
c002d40d:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c002d411:	50                   	push   eax
c002d412:	56                   	push   esi
c002d413:	c1 e6 0b             	shl    esi,0xb
c002d416:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002d41a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002d41e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002d422:	56                   	push   esi
c002d423:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c002d427:	50                   	push   eax
c002d428:	53                   	push   ebx
c002d429:	e8 c8 fa ff ff       	call   c002cef6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002d42e:	83 c4 20             	add    esp,0x20
c002d431:	85 c0                	test   eax,eax
c002d433:	74 14                	je     c002d449 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c002d435:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002d439:	83 ec 0c             	sub    esp,0xc
c002d43c:	53                   	push   ebx
c002d43d:	e8 ce fd ff ff       	call   c002d210 <SATAPI::detectMedia()>
c002d442:	83 c4 10             	add    esp,0x10
c002d445:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002d449:	83 c4 30             	add    esp,0x30
c002d44c:	5b                   	pop    ebx
c002d44d:	5e                   	pop    esi
c002d44e:	5f                   	pop    edi
c002d44f:	c3                   	ret    

c002d450 <IOAPIC::close(int, int, void*)>:
c002d450:	b8 00 00 00 00       	mov    eax,0x0
c002d455:	c3                   	ret    

c002d456 <apicGetBase()>:
c002d456:	55                   	push   ebp
c002d457:	89 e5                	mov    ebp,esp
c002d459:	83 ec 18             	sub    esp,0x18
c002d45c:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002d461:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c002d467:	83 e0 08             	and    eax,0x8
c002d46a:	0f b6 c0             	movzx  eax,al
c002d46d:	85 c0                	test   eax,eax
c002d46f:	75 07                	jne    c002d478 <apicGetBase()+0x22>
c002d471:	b8 00 00 00 00       	mov    eax,0x0
c002d476:	eb 21                	jmp    c002d499 <apicGetBase()+0x43>
c002d478:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002d47d:	83 ec 08             	sub    esp,0x8
c002d480:	6a 1b                	push   0x1b
c002d482:	50                   	push   eax
c002d483:	e8 34 84 fe ff       	call   c00158bc <Computer::rdmsr(unsigned int)>
c002d488:	83 c4 10             	add    esp,0x10
c002d48b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002d48e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002d491:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002d494:	25 00 00 ff ff       	and    eax,0xffff0000
c002d499:	c9                   	leave  
c002d49a:	c3                   	ret    
c002d49b:	90                   	nop

c002d49c <IOAPIC::IOAPIC()>:
c002d49c:	83 ec 0c             	sub    esp,0xc
c002d49f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d4a3:	83 ec 08             	sub    esp,0x8
c002d4a6:	68 f0 35 03 c0       	push   0xc00335f0
c002d4ab:	50                   	push   eax
c002d4ac:	e8 73 de fe ff       	call   c001b324 <Device::Device(char const*)>
c002d4b1:	83 c4 10             	add    esp,0x10
c002d4b4:	ba 00 36 03 c0       	mov    edx,0xc0033600
c002d4b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d4bd:	89 10                	mov    DWORD PTR [eax],edx
c002d4bf:	90                   	nop
c002d4c0:	83 c4 0c             	add    esp,0xc
c002d4c3:	c3                   	ret    

c002d4c4 <apicOpen()>:
c002d4c4:	55                   	push   ebp
c002d4c5:	89 e5                	mov    ebp,esp
c002d4c7:	53                   	push   ebx
c002d4c8:	83 ec 34             	sub    esp,0x34
c002d4cb:	a0 00 0c 04 c0       	mov    al,ds:0xc0040c00
c002d4d0:	83 f0 01             	xor    eax,0x1
c002d4d3:	0f b6 c0             	movzx  eax,al
c002d4d6:	85 c0                	test   eax,eax
c002d4d8:	0f 84 a3 00 00 00    	je     c002d581 <apicOpen()+0xbd>
c002d4de:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c002d4e2:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c002d4e7:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c002d4eb:	0f b6 c0             	movzx  eax,al
c002d4ee:	39 c2                	cmp    edx,eax
c002d4f0:	0f 83 84 00 00 00    	jae    c002d57a <apicOpen()+0xb6>
c002d4f6:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c002d4fd:	83 ec 0c             	sub    esp,0xc
c002d500:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c002d503:	e8 aa 8d fe ff       	call   c00162b2 <malloc>
c002d508:	83 c4 10             	add    esp,0x10
c002d50b:	89 c3                	mov    ebx,eax
c002d50d:	83 ec 0c             	sub    esp,0xc
c002d510:	53                   	push   ebx
c002d511:	e8 86 ff ff ff       	call   c002d49c <IOAPIC::IOAPIC()>
c002d516:	83 c4 10             	add    esp,0x10
c002d519:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c002d51c:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c002d520:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002d523:	89 14 85 e0 0b 04 c0 	mov    DWORD PTR [eax*4-0x3ffbf420],edx
c002d52a:	a1 c0 0b 04 c0       	mov    eax,ds:0xc0040bc0
c002d52f:	83 c0 01             	add    eax,0x1
c002d532:	a3 c0 0b 04 c0       	mov    ds:0xc0040bc0,eax
c002d537:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002d53c:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c002d542:	83 ec 08             	sub    esp,0x8
c002d545:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c002d548:	50                   	push   eax
c002d549:	e8 74 dc fe ff       	call   c001b1c2 <Device::addChild(Device*)>
c002d54e:	83 c4 10             	add    esp,0x10
c002d551:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002d554:	8b 00                	mov    eax,DWORD PTR [eax]
c002d556:	83 c0 08             	add    eax,0x8
c002d559:	8b 00                	mov    eax,DWORD PTR [eax]
c002d55b:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c002d55f:	6a 00                	push   0x0
c002d561:	6a 00                	push   0x0
c002d563:	52                   	push   edx
c002d564:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c002d567:	ff d0                	call   eax
c002d569:	83 c4 10             	add    esp,0x10
c002d56c:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c002d56f:	83 c0 01             	add    eax,0x1
c002d572:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c002d575:	e9 68 ff ff ff       	jmp    c002d4e2 <apicOpen()+0x1e>
c002d57a:	c6 05 00 0c 04 c0 01 	mov    BYTE PTR ds:0xc0040c00,0x1
c002d581:	e8 d0 fe ff ff       	call   c002d456 <apicGetBase()>
c002d586:	05 f0 00 00 00       	add    eax,0xf0
c002d58b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002d58e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002d591:	8b 00                	mov    eax,DWORD PTR [eax]
c002d593:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c002d596:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c002d59d:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c002d5a4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002d5a7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002d5aa:	89 10                	mov    DWORD PTR [eax],edx
c002d5ac:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c002d5b3:	a1 30 f6 03 c0       	mov    eax,ds:0xc003f630
c002d5b8:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c002d5bb:	7d 7c                	jge    c002d639 <apicOpen()+0x175>
c002d5bd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002d5c0:	8b 04 85 40 f6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc09c0]
c002d5c7:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c002d5ca:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002d5cd:	8b 04 85 40 f6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc09c0]
c002d5d4:	c1 e8 08             	shr    eax,0x8
c002d5d7:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c002d5db:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002d5de:	8b 04 85 40 f6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc09c0]
c002d5e5:	c1 e8 18             	shr    eax,0x18
c002d5e8:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c002d5eb:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c002d5ef:	3d ff 00 00 00       	cmp    eax,0xff
c002d5f4:	75 3a                	jne    c002d630 <apicOpen()+0x16c>
c002d5f6:	e8 5b fe ff ff       	call   c002d456 <apicGetBase()>
c002d5fb:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c002d5ff:	83 fa 01             	cmp    edx,0x1
c002d602:	75 07                	jne    c002d60b <apicOpen()+0x147>
c002d604:	ba 60 03 00 00       	mov    edx,0x360
c002d609:	eb 05                	jmp    c002d610 <apicOpen()+0x14c>
c002d60b:	ba 50 03 00 00       	mov    edx,0x350
c002d610:	01 d0                	add    eax,edx
c002d612:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002d615:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002d618:	8b 00                	mov    eax,DWORD PTR [eax]
c002d61a:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002d61d:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c002d624:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c002d628:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002d62b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002d62e:	89 10                	mov    DWORD PTR [eax],edx
c002d630:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c002d634:	e9 7a ff ff ff       	jmp    c002d5b3 <apicOpen()+0xef>
c002d639:	90                   	nop
c002d63a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002d63d:	c9                   	leave  
c002d63e:	c3                   	ret    
c002d63f:	90                   	nop

c002d640 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002d640:	55                   	push   ebp
c002d641:	89 e5                	mov    ebp,esp
c002d643:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002d646:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002d64c:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002d64f:	72 1d                	jb     c002d66e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002d651:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002d654:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002d65a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002d65d:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002d663:	01 d0                	add    eax,edx
c002d665:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002d668:	73 04                	jae    c002d66e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002d66a:	b0 01                	mov    al,0x1
c002d66c:	eb 02                	jmp    c002d670 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c002d66e:	b0 00                	mov    al,0x0
c002d670:	5d                   	pop    ebp
c002d671:	c3                   	ret    

c002d672 <IOAPIC::read(int)>:
c002d672:	55                   	push   ebp
c002d673:	89 e5                	mov    ebp,esp
c002d675:	83 ec 10             	sub    esp,0x10
c002d678:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002d67b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002d681:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002d684:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002d687:	0f b6 d0             	movzx  edx,al
c002d68a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002d68d:	89 10                	mov    DWORD PTR [eax],edx
c002d68f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002d692:	83 c0 10             	add    eax,0x10
c002d695:	8b 00                	mov    eax,DWORD PTR [eax]
c002d697:	c9                   	leave  
c002d698:	c3                   	ret    
c002d699:	90                   	nop

c002d69a <IOAPIC::open(int, int, void*)>:
c002d69a:	55                   	push   ebp
c002d69b:	89 e5                	mov    ebp,esp
c002d69d:	57                   	push   edi
c002d69e:	56                   	push   esi
c002d69f:	53                   	push   ebx
c002d6a0:	83 ec 04             	sub    esp,0x4
c002d6a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002d6a6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002d6a9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002d6af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002d6b2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002d6b8:	8b 14 85 20 f7 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc08e0]
c002d6bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002d6c2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002d6c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002d6cb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002d6d1:	8b 14 85 a0 f7 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc0860]
c002d6d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002d6db:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002d6e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002d6e4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002d6ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002d6ed:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002d6f3:	0f b6 f0             	movzx  esi,al
c002d6f6:	89 d0                	mov    eax,edx
c002d6f8:	ba 00 00 00 00       	mov    edx,0x0
c002d6fd:	89 c7                	mov    edi,eax
c002d6ff:	83 e7 ff             	and    edi,0xffffffff
c002d702:	89 f9                	mov    ecx,edi
c002d704:	0f b6 da             	movzx  ebx,dl
c002d707:	89 c8                	mov    eax,ecx
c002d709:	89 da                	mov    edx,ebx
c002d70b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002d70e:	8d 5e 08             	lea    ebx,[esi+0x8]
c002d711:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002d715:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002d719:	83 e0 00             	and    eax,0x0
c002d71c:	09 d0                	or     eax,edx
c002d71e:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002d722:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002d725:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002d72b:	8d 50 01             	lea    edx,[eax+0x1]
c002d72e:	88 d1                	mov    cl,dl
c002d730:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002d733:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c002d739:	0f b6 d0             	movzx  edx,al
c002d73c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002d73f:	83 c2 08             	add    edx,0x8
c002d742:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002d746:	0f b6 c9             	movzx  ecx,cl
c002d749:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002d74f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002d753:	6a 01                	push   0x1
c002d755:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002d758:	e8 15 ff ff ff       	call   c002d672 <IOAPIC::read(int)>
c002d75d:	83 c4 08             	add    esp,0x8
c002d760:	c1 f8 10             	sar    eax,0x10
c002d763:	0f b6 c0             	movzx  eax,al
c002d766:	8d 50 01             	lea    edx,[eax+0x1]
c002d769:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002d76c:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002d772:	b8 00 00 00 00       	mov    eax,0x0
c002d777:	8d 65 f4             	lea    esp,[ebp-0xc]
c002d77a:	5b                   	pop    ebx
c002d77b:	5e                   	pop    esi
c002d77c:	5f                   	pop    edi
c002d77d:	5d                   	pop    ebp
c002d77e:	c3                   	ret    
c002d77f:	90                   	nop

c002d780 <IOAPIC::write(int, int)>:
c002d780:	55                   	push   ebp
c002d781:	89 e5                	mov    ebp,esp
c002d783:	83 ec 10             	sub    esp,0x10
c002d786:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002d789:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002d78f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002d792:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002d795:	0f b6 d0             	movzx  edx,al
c002d798:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002d79b:	89 10                	mov    DWORD PTR [eax],edx
c002d79d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002d7a0:	8d 50 10             	lea    edx,[eax+0x10]
c002d7a3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002d7a6:	89 02                	mov    DWORD PTR [edx],eax
c002d7a8:	90                   	nop
c002d7a9:	c9                   	leave  
c002d7aa:	c3                   	ret    
c002d7ab:	90                   	nop

c002d7ac <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002d7ac:	55                   	push   ebp
c002d7ad:	89 e5                	mov    ebp,esp
c002d7af:	53                   	push   ebx
c002d7b0:	83 ec 2c             	sub    esp,0x2c
c002d7b3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002d7b6:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002d7b9:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002d7bc:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c002d7bf:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002d7c2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002d7c5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002d7c8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002d7cb:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002d7ce:	88 d8                	mov    al,bl
c002d7d0:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c002d7d3:	88 c8                	mov    al,cl
c002d7d5:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002d7d8:	88 d0                	mov    al,dl
c002d7da:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002d7dd:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002d7e1:	83 c0 08             	add    eax,0x8
c002d7e4:	01 c0                	add    eax,eax
c002d7e6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002d7e9:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002d7ed:	83 c0 08             	add    eax,0x8
c002d7f0:	01 c0                	add    eax,eax
c002d7f2:	83 c0 01             	add    eax,0x1
c002d7f5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002d7f8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002d7fb:	50                   	push   eax
c002d7fc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002d7ff:	e8 6e fe ff ff       	call   c002d672 <IOAPIC::read(int)>
c002d804:	83 c4 08             	add    esp,0x8
c002d807:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002d80a:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c002d811:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002d814:	c1 e0 18             	shl    eax,0x18
c002d817:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002d81a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002d81d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002d820:	52                   	push   edx
c002d821:	50                   	push   eax
c002d822:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002d825:	e8 56 ff ff ff       	call   c002d780 <IOAPIC::write(int, int)>
c002d82a:	83 c4 0c             	add    esp,0xc
c002d82d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002d830:	50                   	push   eax
c002d831:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002d834:	e8 39 fe ff ff       	call   c002d672 <IOAPIC::read(int)>
c002d839:	83 c4 08             	add    esp,0x8
c002d83c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002d83f:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002d846:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002d84d:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c002d854:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c002d858:	85 c0                	test   eax,eax
c002d85a:	74 09                	je     c002d865 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c002d85c:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c002d863:	eb 07                	jmp    c002d86c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c002d865:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002d86c:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c002d870:	85 c0                	test   eax,eax
c002d872:	74 09                	je     c002d87d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c002d874:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002d87b:	eb 07                	jmp    c002d884 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c002d87d:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c002d884:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c002d88b:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002d88f:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002d892:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c002d895:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002d898:	52                   	push   edx
c002d899:	50                   	push   eax
c002d89a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002d89d:	e8 de fe ff ff       	call   c002d780 <IOAPIC::write(int, int)>
c002d8a2:	83 c4 0c             	add    esp,0xc
c002d8a5:	90                   	nop
c002d8a6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002d8a9:	c9                   	leave  
c002d8aa:	c3                   	ret    
c002d8ab:	90                   	nop

c002d8ac <APICTimer::close(int, int, void*)>:
c002d8ac:	b8 00 00 00 00       	mov    eax,0x0
c002d8b1:	c3                   	ret    
c002d8b2:	66 90                	xchg   ax,ax

c002d8b4 <apicTimerHandler(regs*, void*)>:
c002d8b4:	83 ec 0c             	sub    esp,0xc
c002d8b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002d8bb:	8b 08                	mov    ecx,DWORD PTR [eax]
c002d8bd:	b8 10 27 00 00       	mov    eax,0x2710
c002d8c2:	ba 00 00 00 00       	mov    edx,0x0
c002d8c7:	f7 f1                	div    ecx
c002d8c9:	83 ec 0c             	sub    esp,0xc
c002d8cc:	50                   	push   eax
c002d8cd:	e8 62 f3 fe ff       	call   c001cc34 <timerHandler(unsigned int)>
c002d8d2:	83 c4 10             	add    esp,0x10
c002d8d5:	90                   	nop
c002d8d6:	83 c4 0c             	add    esp,0xc
c002d8d9:	c3                   	ret    
c002d8da:	66 90                	xchg   ax,ax

c002d8dc <APICTimer::open(int, int, void*)>:
c002d8dc:	83 ec 0c             	sub    esp,0xc
c002d8df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d8e3:	8b 00                	mov    eax,DWORD PTR [eax]
c002d8e5:	83 c0 24             	add    eax,0x24
c002d8e8:	8b 00                	mov    eax,DWORD PTR [eax]
c002d8ea:	83 ec 08             	sub    esp,0x8
c002d8ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002d8f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002d8f5:	ff d0                	call   eax
c002d8f7:	83 c4 10             	add    esp,0x10
c002d8fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d8fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002d902:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002d908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d90c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002d910:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002d916:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002d91a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002d920:	83 ec 0c             	sub    esp,0xc
c002d923:	51                   	push   ecx
c002d924:	6a 01                	push   0x1
c002d926:	68 b4 d8 02 c0       	push   0xc002d8b4
c002d92b:	52                   	push   edx
c002d92c:	50                   	push   eax
c002d92d:	e8 3c d8 fe ff       	call   c001b16e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002d932:	83 c4 20             	add    esp,0x20
c002d935:	89 c2                	mov    edx,eax
c002d937:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d93b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002d941:	b8 00 00 00 00       	mov    eax,0x0
c002d946:	83 c4 0c             	add    esp,0xc
c002d949:	c3                   	ret    
c002d94a:	66 90                	xchg   ax,ax

c002d94c <APICTimer::write(int)>:
c002d94c:	83 ec 0c             	sub    esp,0xc
c002d94f:	83 ec 0c             	sub    esp,0xc
c002d952:	68 24 36 03 c0       	push   0xc0033624
c002d957:	e8 ef 26 ff ff       	call   c002004b <KePanic(char const*)>
c002d95c:	83 c4 10             	add    esp,0x10
c002d95f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d963:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002d967:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002d96d:	90                   	nop
c002d96e:	83 c4 0c             	add    esp,0xc
c002d971:	c3                   	ret    
c002d972:	66 90                	xchg   ax,ax

c002d974 <APICTimer::APICTimer()>:
c002d974:	83 ec 0c             	sub    esp,0xc
c002d977:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d97b:	83 ec 08             	sub    esp,0x8
c002d97e:	68 34 36 03 c0       	push   0xc0033634
c002d983:	50                   	push   eax
c002d984:	e8 df f1 fe ff       	call   c001cb68 <Timer::Timer(char const*)>
c002d989:	83 c4 10             	add    esp,0x10
c002d98c:	ba 48 36 03 c0       	mov    edx,0xc0033648
c002d991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d995:	89 10                	mov    DWORD PTR [eax],edx
c002d997:	90                   	nop
c002d998:	83 c4 0c             	add    esp,0xc
c002d99b:	c3                   	ret    

c002d99c <PIT::write(int)>:
c002d99c:	83 ec 10             	sub    esp,0x10
c002d99f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002d9a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002d9a7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002d9ad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002d9b1:	a3 04 0c 04 c0       	mov    ds:0xc0040c04,eax
c002d9b6:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002d9bb:	89 c2                	mov    edx,eax
c002d9bd:	c1 fa 1f             	sar    edx,0x1f
c002d9c0:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002d9c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002d9c8:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002d9cf:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002d9d4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002d9d8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002d9dd:	ee                   	out    dx,al
c002d9de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002d9e2:	0f b6 c0             	movzx  eax,al
c002d9e5:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002d9ec:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002d9f0:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002d9f4:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002d9f9:	ee                   	out    dx,al
c002d9fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002d9fe:	c1 f8 08             	sar    eax,0x8
c002da01:	0f b6 c0             	movzx  eax,al
c002da04:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002da0b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002da0f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002da13:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002da18:	ee                   	out    dx,al
c002da19:	90                   	nop
c002da1a:	83 c4 10             	add    esp,0x10
c002da1d:	c3                   	ret    
c002da1e:	66 90                	xchg   ax,ax

c002da20 <pitHandler(regs*, void*)>:
c002da20:	83 ec 0c             	sub    esp,0xc
c002da23:	8b 0d 04 0c 04 c0    	mov    ecx,DWORD PTR ds:0xc0040c04
c002da29:	b8 10 27 00 00       	mov    eax,0x2710
c002da2e:	89 c2                	mov    edx,eax
c002da30:	c1 fa 1f             	sar    edx,0x1f
c002da33:	f7 f9                	idiv   ecx
c002da35:	83 ec 0c             	sub    esp,0xc
c002da38:	50                   	push   eax
c002da39:	e8 f6 f1 fe ff       	call   c001cc34 <timerHandler(unsigned int)>
c002da3e:	83 c4 10             	add    esp,0x10
c002da41:	90                   	nop
c002da42:	83 c4 0c             	add    esp,0xc
c002da45:	c3                   	ret    
c002da46:	66 90                	xchg   ax,ax

c002da48 <PIT::open(int, int, void*)>:
c002da48:	83 ec 0c             	sub    esp,0xc
c002da4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002da4f:	8b 00                	mov    eax,DWORD PTR [eax]
c002da51:	83 c0 24             	add    eax,0x24
c002da54:	8b 00                	mov    eax,DWORD PTR [eax]
c002da56:	83 ec 08             	sub    esp,0x8
c002da59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002da5d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002da61:	ff d0                	call   eax
c002da63:	83 c4 10             	add    esp,0x10
c002da66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002da6a:	83 ec 0c             	sub    esp,0xc
c002da6d:	6a 00                	push   0x0
c002da6f:	6a 01                	push   0x1
c002da71:	68 20 da 02 c0       	push   0xc002da20
c002da76:	6a 00                	push   0x0
c002da78:	50                   	push   eax
c002da79:	e8 f0 d6 fe ff       	call   c001b16e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002da7e:	83 c4 20             	add    esp,0x20
c002da81:	89 c2                	mov    edx,eax
c002da83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002da87:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002da8d:	b8 00 00 00 00       	mov    eax,0x0
c002da92:	83 c4 0c             	add    esp,0xc
c002da95:	c3                   	ret    
c002da96:	66 90                	xchg   ax,ax

c002da98 <PIT::close(int, int, void*)>:
c002da98:	83 ec 0c             	sub    esp,0xc
c002da9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002da9f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002daa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002daad:	6a 01                	push   0x1
c002daaf:	68 20 da 02 c0       	push   0xc002da20
c002dab4:	6a 00                	push   0x0
c002dab6:	50                   	push   eax
c002dab7:	e8 e8 d6 fe ff       	call   c001b1a4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002dabc:	83 c4 10             	add    esp,0x10
c002dabf:	b8 00 00 00 00       	mov    eax,0x0
c002dac4:	83 c4 0c             	add    esp,0xc
c002dac7:	c3                   	ret    

c002dac8 <PIT::PIT()>:
c002dac8:	83 ec 0c             	sub    esp,0xc
c002dacb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dacf:	83 ec 08             	sub    esp,0x8
c002dad2:	68 70 36 03 c0       	push   0xc0033670
c002dad7:	50                   	push   eax
c002dad8:	e8 8b f0 fe ff       	call   c001cb68 <Timer::Timer(char const*)>
c002dadd:	83 c4 10             	add    esp,0x10
c002dae0:	ba 98 36 03 c0       	mov    edx,0xc0033698
c002dae5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dae9:	89 10                	mov    DWORD PTR [eax],edx
c002daeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002daef:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002daf5:	0f b6 d0             	movzx  edx,al
c002daf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dafc:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002db03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002db07:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002db0d:	0f b6 d0             	movzx  edx,al
c002db10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002db14:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002db19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002db1d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002db23:	8d 50 01             	lea    edx,[eax+0x1]
c002db26:	88 d1                	mov    cl,dl
c002db28:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002db2c:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c002db32:	0f b6 d0             	movzx  edx,al
c002db35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002db39:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002db3d:	83 e1 3f             	and    ecx,0x3f
c002db40:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002db44:	90                   	nop
c002db45:	83 c4 0c             	add    esp,0xc
c002db48:	c3                   	ret    
c002db49:	66 90                	xchg   ax,ax
c002db4b:	66 90                	xchg   ax,ax
c002db4d:	66 90                	xchg   ax,ax
c002db4f:	90                   	nop

c002db50 <avxDetect>:
c002db50:	b8 01 00 00 00       	mov    eax,0x1
c002db55:	0f a2                	cpuid  
c002db57:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c002db5d:	74 15                	je     c002db74 <avxDetect.noAVX>
c002db5f:	b8 01 00 00 00       	mov    eax,0x1
c002db64:	0f a2                	cpuid  
c002db66:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c002db6c:	74 06                	je     c002db74 <avxDetect.noAVX>
c002db6e:	b8 01 00 00 00       	mov    eax,0x1
c002db73:	c3                   	ret    

c002db74 <avxDetect.noAVX>:
c002db74:	b8 00 00 00 00       	mov    eax,0x0
c002db79:	c3                   	ret    

c002db7a <avxSave>:
c002db7a:	53                   	push   ebx
c002db7b:	52                   	push   edx
c002db7c:	31 c0                	xor    eax,eax
c002db7e:	48                   	dec    eax
c002db7f:	89 c2                	mov    edx,eax
c002db81:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002db85:	0f ae 23             	xsave  [ebx]
c002db88:	5a                   	pop    edx
c002db89:	5b                   	pop    ebx
c002db8a:	c3                   	ret    

c002db8b <avxLoad>:
c002db8b:	53                   	push   ebx
c002db8c:	52                   	push   edx
c002db8d:	31 c0                	xor    eax,eax
c002db8f:	48                   	dec    eax
c002db90:	89 c2                	mov    edx,eax
c002db92:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002db96:	0f ae 2b             	xrstor [ebx]
c002db99:	5a                   	pop    edx
c002db9a:	5b                   	pop    ebx
c002db9b:	c3                   	ret    

c002db9c <avxInit>:
c002db9c:	e8 47 03 00 00       	call   c002dee8 <sseInit>
c002dba1:	50                   	push   eax
c002dba2:	51                   	push   ecx
c002dba3:	0f 20 e0             	mov    eax,cr4
c002dba6:	0d 00 00 04 00       	or     eax,0x40000
c002dbab:	0f 22 e0             	mov    cr4,eax
c002dbae:	31 c9                	xor    ecx,ecx
c002dbb0:	0f 01 d0             	xgetbv 
c002dbb3:	0d 07 00 00 00       	or     eax,0x7
c002dbb8:	0f 01 d1             	xsetbv 
c002dbbb:	59                   	pop    ecx
c002dbbc:	58                   	pop    eax
c002dbbd:	c3                   	ret    

c002dbbe <avxClose>:
c002dbbe:	c3                   	ret    
c002dbbf:	90                   	nop

c002dbc0 <isr0>:
c002dbc0:	fa                   	cli    
c002dbc1:	68 00 00 00 00       	push   0x0
c002dbc6:	68 00 00 00 00       	push   0x0
c002dbcb:	e9 56 01 00 00       	jmp    c002dd26 <int_common_stub>

c002dbd0 <isr1>:
c002dbd0:	fa                   	cli    
c002dbd1:	6a 00                	push   0x0
c002dbd3:	6a 01                	push   0x1
c002dbd5:	e9 4c 01 00 00       	jmp    c002dd26 <int_common_stub>

c002dbda <isr2>:
c002dbda:	fa                   	cli    
c002dbdb:	6a 00                	push   0x0
c002dbdd:	6a 02                	push   0x2
c002dbdf:	e9 42 01 00 00       	jmp    c002dd26 <int_common_stub>

c002dbe4 <isr3>:
c002dbe4:	fa                   	cli    
c002dbe5:	6a 00                	push   0x0
c002dbe7:	6a 03                	push   0x3
c002dbe9:	e9 38 01 00 00       	jmp    c002dd26 <int_common_stub>

c002dbee <isr4>:
c002dbee:	fa                   	cli    
c002dbef:	6a 00                	push   0x0
c002dbf1:	6a 04                	push   0x4
c002dbf3:	e9 2e 01 00 00       	jmp    c002dd26 <int_common_stub>

c002dbf8 <isr5>:
c002dbf8:	fa                   	cli    
c002dbf9:	6a 00                	push   0x0
c002dbfb:	6a 05                	push   0x5
c002dbfd:	e9 24 01 00 00       	jmp    c002dd26 <int_common_stub>

c002dc02 <isr6>:
c002dc02:	fa                   	cli    
c002dc03:	6a 00                	push   0x0
c002dc05:	6a 06                	push   0x6
c002dc07:	e9 1a 01 00 00       	jmp    c002dd26 <int_common_stub>

c002dc0c <isr7>:
c002dc0c:	fa                   	cli    
c002dc0d:	6a 00                	push   0x0
c002dc0f:	6a 07                	push   0x7
c002dc11:	e9 10 01 00 00       	jmp    c002dd26 <int_common_stub>

c002dc16 <isr8>:
c002dc16:	fa                   	cli    
c002dc17:	6a 08                	push   0x8
c002dc19:	e9 08 01 00 00       	jmp    c002dd26 <int_common_stub>

c002dc1e <isr9>:
c002dc1e:	fa                   	cli    
c002dc1f:	6a 00                	push   0x0
c002dc21:	6a 09                	push   0x9
c002dc23:	e9 fe 00 00 00       	jmp    c002dd26 <int_common_stub>

c002dc28 <isr10>:
c002dc28:	fa                   	cli    
c002dc29:	6a 0a                	push   0xa
c002dc2b:	e9 f6 00 00 00       	jmp    c002dd26 <int_common_stub>

c002dc30 <isr11>:
c002dc30:	fa                   	cli    
c002dc31:	6a 0b                	push   0xb
c002dc33:	e9 ee 00 00 00       	jmp    c002dd26 <int_common_stub>

c002dc38 <isr12>:
c002dc38:	fa                   	cli    
c002dc39:	6a 0c                	push   0xc
c002dc3b:	e9 e6 00 00 00       	jmp    c002dd26 <int_common_stub>

c002dc40 <isr13>:
c002dc40:	fa                   	cli    
c002dc41:	6a 0d                	push   0xd
c002dc43:	53                   	push   ebx
c002dc44:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002dc48:	81 fb 16 de 02 c0    	cmp    ebx,0xc002de16
c002dc4e:	5b                   	pop    ebx
c002dc4f:	0f 84 c3 01 00 00    	je     c002de18 <finishSignal2>
c002dc55:	e9 cc 00 00 00       	jmp    c002dd26 <int_common_stub>

c002dc5a <isr14>:
c002dc5a:	fa                   	cli    
c002dc5b:	6a 0e                	push   0xe
c002dc5d:	e9 c4 00 00 00       	jmp    c002dd26 <int_common_stub>

c002dc62 <isr15>:
c002dc62:	fa                   	cli    
c002dc63:	6a 00                	push   0x0
c002dc65:	6a 0f                	push   0xf
c002dc67:	e9 ba 00 00 00       	jmp    c002dd26 <int_common_stub>

c002dc6c <isr16>:
c002dc6c:	fa                   	cli    
c002dc6d:	6a 00                	push   0x0
c002dc6f:	6a 10                	push   0x10
c002dc71:	e9 b0 00 00 00       	jmp    c002dd26 <int_common_stub>

c002dc76 <isr17>:
c002dc76:	fa                   	cli    
c002dc77:	6a 00                	push   0x0
c002dc79:	6a 11                	push   0x11
c002dc7b:	e9 a6 00 00 00       	jmp    c002dd26 <int_common_stub>

c002dc80 <isr18>:
c002dc80:	fa                   	cli    
c002dc81:	6a 00                	push   0x0
c002dc83:	6a 12                	push   0x12
c002dc85:	e9 9c 00 00 00       	jmp    c002dd26 <int_common_stub>

c002dc8a <irq3>:
c002dc8a:	fa                   	cli    
c002dc8b:	6a 00                	push   0x0
c002dc8d:	6a 23                	push   0x23
c002dc8f:	e9 92 00 00 00       	jmp    c002dd26 <int_common_stub>

c002dc94 <irq4>:
c002dc94:	fa                   	cli    
c002dc95:	6a 00                	push   0x0
c002dc97:	6a 24                	push   0x24
c002dc99:	e9 88 00 00 00       	jmp    c002dd26 <int_common_stub>

c002dc9e <irq5>:
c002dc9e:	fa                   	cli    
c002dc9f:	6a 00                	push   0x0
c002dca1:	6a 25                	push   0x25
c002dca3:	e9 7e 00 00 00       	jmp    c002dd26 <int_common_stub>

c002dca8 <irq6>:
c002dca8:	fa                   	cli    
c002dca9:	6a 00                	push   0x0
c002dcab:	6a 26                	push   0x26
c002dcad:	e9 74 00 00 00       	jmp    c002dd26 <int_common_stub>

c002dcb2 <irq7>:
c002dcb2:	fa                   	cli    
c002dcb3:	6a 00                	push   0x0
c002dcb5:	6a 27                	push   0x27
c002dcb7:	e9 6a 00 00 00       	jmp    c002dd26 <int_common_stub>

c002dcbc <irq8>:
c002dcbc:	fa                   	cli    
c002dcbd:	6a 00                	push   0x0
c002dcbf:	6a 28                	push   0x28
c002dcc1:	e9 60 00 00 00       	jmp    c002dd26 <int_common_stub>

c002dcc6 <irq9>:
c002dcc6:	fa                   	cli    
c002dcc7:	6a 00                	push   0x0
c002dcc9:	6a 29                	push   0x29
c002dccb:	e9 56 00 00 00       	jmp    c002dd26 <int_common_stub>

c002dcd0 <irq10>:
c002dcd0:	fa                   	cli    
c002dcd1:	6a 00                	push   0x0
c002dcd3:	6a 2a                	push   0x2a
c002dcd5:	e9 4c 00 00 00       	jmp    c002dd26 <int_common_stub>

c002dcda <irq11>:
c002dcda:	fa                   	cli    
c002dcdb:	6a 00                	push   0x0
c002dcdd:	6a 2b                	push   0x2b
c002dcdf:	e9 42 00 00 00       	jmp    c002dd26 <int_common_stub>

c002dce4 <irq12>:
c002dce4:	fa                   	cli    
c002dce5:	6a 00                	push   0x0
c002dce7:	6a 2c                	push   0x2c
c002dce9:	e9 38 00 00 00       	jmp    c002dd26 <int_common_stub>

c002dcee <irq13>:
c002dcee:	fa                   	cli    
c002dcef:	6a 00                	push   0x0
c002dcf1:	6a 2d                	push   0x2d
c002dcf3:	e9 2e 00 00 00       	jmp    c002dd26 <int_common_stub>

c002dcf8 <irq14>:
c002dcf8:	fa                   	cli    
c002dcf9:	6a 00                	push   0x0
c002dcfb:	6a 2e                	push   0x2e
c002dcfd:	e9 24 00 00 00       	jmp    c002dd26 <int_common_stub>

c002dd02 <irq15>:
c002dd02:	fa                   	cli    
c002dd03:	6a 00                	push   0x0
c002dd05:	6a 2f                	push   0x2f
c002dd07:	e9 1a 00 00 00       	jmp    c002dd26 <int_common_stub>

c002dd0c <irq1>:
c002dd0c:	fa                   	cli    
c002dd0d:	6a 00                	push   0x0
c002dd0f:	6a 21                	push   0x21
c002dd11:	eb 13                	jmp    c002dd26 <int_common_stub>

c002dd13 <irq2>:
c002dd13:	fa                   	cli    
c002dd14:	6a 00                	push   0x0
c002dd16:	6a 22                	push   0x22
c002dd18:	eb 0c                	jmp    c002dd26 <int_common_stub>

c002dd1a <isr96>:
c002dd1a:	6a 00                	push   0x0
c002dd1c:	6a 60                	push   0x60
c002dd1e:	fb                   	sti    
c002dd1f:	eb 37                	jmp    c002dd58 <syscall_common_stub>

c002dd21 <irq0>:
c002dd21:	fa                   	cli    
c002dd22:	6a 00                	push   0x0
c002dd24:	6a 20                	push   0x20

c002dd26 <int_common_stub>:
c002dd26:	60                   	pusha  
c002dd27:	1e                   	push   ds
c002dd28:	06                   	push   es
c002dd29:	0f a0                	push   fs
c002dd2b:	0f a8                	push   gs
c002dd2d:	66 b8 10 00          	mov    ax,0x10
c002dd31:	66 8e d8             	mov    ds,ax
c002dd34:	66 8e c0             	mov    es,ax
c002dd37:	66 8e e0             	mov    fs,ax
c002dd3a:	66 8e e8             	mov    gs,ax
c002dd3d:	54                   	push   esp
c002dd3e:	fc                   	cld    
c002dd3f:	e8 40 d9 fe ff       	call   c001b684 <int_handler>
c002dd44:	81 c4 04 00 00 00    	add    esp,0x4
c002dd4a:	0f a9                	pop    gs
c002dd4c:	0f a1                	pop    fs
c002dd4e:	07                   	pop    es
c002dd4f:	1f                   	pop    ds
c002dd50:	61                   	popa   
c002dd51:	81 c4 08 00 00 00    	add    esp,0x8
c002dd57:	cf                   	iret   

c002dd58 <syscall_common_stub>:
c002dd58:	60                   	pusha  
c002dd59:	1e                   	push   ds
c002dd5a:	06                   	push   es
c002dd5b:	0f a0                	push   fs
c002dd5d:	0f a8                	push   gs
c002dd5f:	66 b8 10 00          	mov    ax,0x10
c002dd63:	66 8e d8             	mov    ds,ax
c002dd66:	66 8e c0             	mov    es,ax
c002dd69:	66 8e e0             	mov    fs,ax
c002dd6c:	66 8e e8             	mov    gs,ax
c002dd6f:	54                   	push   esp
c002dd70:	fc                   	cld    
c002dd71:	e8 0e d9 fe ff       	call   c001b684 <int_handler>
c002dd76:	81 c4 04 00 00 00    	add    esp,0x4
c002dd7c:	0f a9                	pop    gs
c002dd7e:	0f a1                	pop    fs
c002dd80:	07                   	pop    es
c002dd81:	1f                   	pop    ds
c002dd82:	e8 db 28 ff ff       	call   c0020662 <KiCheckSignalZ>
c002dd87:	3d 00 00 00 00       	cmp    eax,0x0
c002dd8c:	0f 84 c0 00 00 00    	je     c002de52 <skipSignals>
c002dd92:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c002dd97:	61                   	popa   
c002dd98:	53                   	push   ebx
c002dd99:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c002dd9f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c002dda2:	5b                   	pop    ebx
c002dda3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c002dda8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c002ddab:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c002ddae:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002ddb1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c002ddb4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c002ddb7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c002ddba:	81 c4 08 00 00 00    	add    esp,0x8
c002ddc0:	5e                   	pop    esi
c002ddc1:	5b                   	pop    ebx
c002ddc2:	59                   	pop    ecx
c002ddc3:	5a                   	pop    edx
c002ddc4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c002ddc7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c002ddca:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002ddcd:	52                   	push   edx
c002ddce:	51                   	push   ecx
c002ddcf:	53                   	push   ebx
c002ddd0:	56                   	push   esi
c002ddd1:	81 ec 08 00 00 00    	sub    esp,0x8
c002ddd7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c002ddda:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c002dddd:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c002dde0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002dde3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002dde6:	60                   	pusha  
c002dde7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c002dded:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c002ddf0:	89 e3                	mov    ebx,esp
c002ddf2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c002ddf5:	52                   	push   edx
c002ddf6:	68 16 de 02 c0       	push   0xc002de16
c002ddfb:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c002ddfe:	89 dc                	mov    esp,ebx
c002de00:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c002de03:	68 23 00 00 00       	push   0x23
c002de08:	51                   	push   ecx
c002de09:	68 02 02 00 00       	push   0x202
c002de0e:	68 1b 00 00 00       	push   0x1b
c002de13:	ff 36                	push   DWORD PTR [esi]
c002de15:	cf                   	iret   

c002de16 <finishSignal>:
c002de16:	cd 0f                	int    0xf

c002de18 <finishSignal2>:
c002de18:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c002de1e:	e8 bc 28 ff ff       	call   c00206df <KiFinishSignalZ>
c002de23:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c002de29:	68 23 00 00 00       	push   0x23
c002de2e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c002de31:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c002de34:	68 1b 00 00 00       	push   0x1b
c002de39:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c002de3c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002de3f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002de42:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002de45:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c002de48:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c002de4b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c002de4e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c002de51:	cf                   	iret   

c002de52 <skipSignals>:
c002de52:	61                   	popa   
c002de53:	81 c4 08 00 00 00    	add    esp,0x8
c002de59:	cf                   	iret   
c002de5a:	90                   	nop
c002de5b:	90                   	nop

c002de5c <irq16>:
c002de5c:	fa                   	cli    
c002de5d:	6a 00                	push   0x0
c002de5f:	6a 30                	push   0x30
c002de61:	e9 c0 fe ff ff       	jmp    c002dd26 <int_common_stub>

c002de66 <irq17>:
c002de66:	fa                   	cli    
c002de67:	6a 00                	push   0x0
c002de69:	6a 31                	push   0x31
c002de6b:	e9 b6 fe ff ff       	jmp    c002dd26 <int_common_stub>

c002de70 <irq18>:
c002de70:	fa                   	cli    
c002de71:	6a 00                	push   0x0
c002de73:	6a 32                	push   0x32
c002de75:	e9 ac fe ff ff       	jmp    c002dd26 <int_common_stub>

c002de7a <irq19>:
c002de7a:	fa                   	cli    
c002de7b:	6a 00                	push   0x0
c002de7d:	6a 33                	push   0x33
c002de7f:	e9 a2 fe ff ff       	jmp    c002dd26 <int_common_stub>

c002de84 <irq20>:
c002de84:	fa                   	cli    
c002de85:	6a 00                	push   0x0
c002de87:	6a 34                	push   0x34
c002de89:	e9 98 fe ff ff       	jmp    c002dd26 <int_common_stub>

c002de8e <irq21>:
c002de8e:	fa                   	cli    
c002de8f:	6a 00                	push   0x0
c002de91:	6a 35                	push   0x35
c002de93:	e9 8e fe ff ff       	jmp    c002dd26 <int_common_stub>

c002de98 <irq22>:
c002de98:	fa                   	cli    
c002de99:	6a 00                	push   0x0
c002de9b:	6a 36                	push   0x36
c002de9d:	e9 84 fe ff ff       	jmp    c002dd26 <int_common_stub>

c002dea2 <irq23>:
c002dea2:	fa                   	cli    
c002dea3:	6a 00                	push   0x0
c002dea5:	6a 37                	push   0x37
c002dea7:	e9 7a fe ff ff       	jmp    c002dd26 <int_common_stub>
c002deac:	66 90                	xchg   ax,ax
c002deae:	66 90                	xchg   ax,ax

c002deb0 <i386GetRDRAND>:
c002deb0:	b9 64 00 00 00       	mov    ecx,0x64

c002deb5 <retry>:
c002deb5:	0f c7 f0             	rdrand eax
c002deb8:	72 05                	jb     c002debf <retry.done>
c002deba:	e2 f9                	loop   c002deb5 <retry>

c002debc <retry.fail>:
c002debc:	31 c0                	xor    eax,eax
c002debe:	c3                   	ret    

c002debf <retry.done>:
c002debf:	c3                   	ret    

c002dec0 <sseDetect>:
c002dec0:	b8 01 00 00 00       	mov    eax,0x1
c002dec5:	0f a2                	cpuid  
c002dec7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002decd:	74 06                	je     c002ded5 <sseDetect.noSSE>
c002decf:	b8 01 00 00 00       	mov    eax,0x1
c002ded4:	c3                   	ret    

c002ded5 <sseDetect.noSSE>:
c002ded5:	31 c0                	xor    eax,eax
c002ded7:	c3                   	ret    

c002ded8 <sseSave>:
c002ded8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002dedc:	0f ae 00             	fxsave [eax]
c002dedf:	c3                   	ret    

c002dee0 <sseLoad>:
c002dee0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002dee4:	0f ae 08             	fxrstor [eax]
c002dee7:	c3                   	ret    

c002dee8 <sseInit>:
c002dee8:	e8 42 00 00 00       	call   c002df2f <x87Init>
c002deed:	0f 20 e0             	mov    eax,cr4
c002def0:	66 0d 00 06          	or     ax,0x600
c002def4:	0f 22 e0             	mov    cr4,eax
c002def7:	c3                   	ret    

c002def8 <sseClose>:
c002def8:	c3                   	ret    
c002def9:	66 90                	xchg   ax,ax
c002defb:	66 90                	xchg   ax,ax
c002defd:	66 90                	xchg   ax,ax
c002deff:	90                   	nop

c002df00 <value_37F>:
c002df00:	7f 03                	jg     c002df05 <value_37A+0x1>

c002df02 <value_37E>:
c002df02:	7e 03                	jle    c002df07 <x87Detect+0x1>

c002df04 <value_37A>:
c002df04:	7a 03                	jp     c002df09 <x87Detect+0x3>

c002df06 <x87Detect>:
c002df06:	b8 01 00 00 00       	mov    eax,0x1
c002df0b:	0f a2                	cpuid  
c002df0d:	f7 c2 01 00 00 00    	test   edx,0x1
c002df13:	74 06                	je     c002df1b <x87Detect.nox87>
c002df15:	b8 01 00 00 00       	mov    eax,0x1
c002df1a:	c3                   	ret    

c002df1b <x87Detect.nox87>:
c002df1b:	b8 00 00 00 00       	mov    eax,0x0
c002df20:	c3                   	ret    

c002df21 <x87Save>:
c002df21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002df25:	dd 30                	fnsave [eax]
c002df27:	c3                   	ret    

c002df28 <x87Load>:
c002df28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002df2c:	dd 20                	frstor [eax]
c002df2e:	c3                   	ret    

c002df2f <x87Init>:
c002df2f:	0f 20 c0             	mov    eax,cr0
c002df32:	66 25 fb ff          	and    ax,0xfffb
c002df36:	66 0d 22 00          	or     ax,0x22
c002df3a:	0f 22 c0             	mov    cr0,eax
c002df3d:	db e3                	fninit 
c002df3f:	0f 06                	clts   
c002df41:	d9 2d 04 df 02 c0    	fldcw  WORD PTR ds:0xc002df04
c002df47:	c3                   	ret    

c002df48 <x87Close>:
c002df48:	c3                   	ret    
c002df49:	66 90                	xchg   ax,ax
c002df4b:	90                   	nop

c002df4c <__do_global_ctors_aux>:
c002df4c:	a1 00 ef 02 c0       	mov    eax,ds:0xc002ef00
c002df51:	83 f8 ff             	cmp    eax,0xffffffff
c002df54:	74 1a                	je     c002df70 <__do_global_ctors_aux+0x24>
c002df56:	55                   	push   ebp
c002df57:	89 e5                	mov    ebp,esp
c002df59:	53                   	push   ebx
c002df5a:	52                   	push   edx
c002df5b:	bb 00 ef 02 c0       	mov    ebx,0xc002ef00
c002df60:	ff d0                	call   eax
c002df62:	83 eb 04             	sub    ebx,0x4
c002df65:	8b 03                	mov    eax,DWORD PTR [ebx]
c002df67:	83 f8 ff             	cmp    eax,0xffffffff
c002df6a:	75 f4                	jne    c002df60 <__do_global_ctors_aux+0x14>
c002df6c:	58                   	pop    eax
c002df6d:	5b                   	pop    ebx
c002df6e:	5d                   	pop    ebp
c002df6f:	c3                   	ret    
c002df70:	c3                   	ret    
c002df71:	66 90                	xchg   ax,ax
c002df73:	90                   	nop

c002df74 <__divdi3>:
c002df74:	55                   	push   ebp
c002df75:	57                   	push   edi
c002df76:	56                   	push   esi
c002df77:	53                   	push   ebx
c002df78:	83 ec 1c             	sub    esp,0x1c
c002df7b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002df7f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002df83:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002df86:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002df8a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002df8e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002df92:	85 db                	test   ebx,ebx
c002df94:	0f 88 8e 00 00 00    	js     c002e028 <__divdi3+0xb4>
c002df9a:	89 dd                	mov    ebp,ebx
c002df9c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002dfa4:	89 d3                	mov    ebx,edx
c002dfa6:	85 d2                	test   edx,edx
c002dfa8:	79 0d                	jns    c002dfb7 <__divdi3+0x43>
c002dfaa:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002dfae:	f7 d8                	neg    eax
c002dfb0:	83 d2 00             	adc    edx,0x0
c002dfb3:	f7 da                	neg    edx
c002dfb5:	89 d3                	mov    ebx,edx
c002dfb7:	89 c7                	mov    edi,eax
c002dfb9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002dfbc:	85 db                	test   ebx,ebx
c002dfbe:	75 48                	jne    c002e008 <__divdi3+0x94>
c002dfc0:	39 ef                	cmp    edi,ebp
c002dfc2:	76 24                	jbe    c002dfe8 <__divdi3+0x74>
c002dfc4:	89 ea                	mov    edx,ebp
c002dfc6:	f7 f7                	div    edi
c002dfc8:	89 c1                	mov    ecx,eax
c002dfca:	31 f6                	xor    esi,esi
c002dfcc:	89 c8                	mov    eax,ecx
c002dfce:	89 f2                	mov    edx,esi
c002dfd0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002dfd4:	85 c9                	test   ecx,ecx
c002dfd6:	74 07                	je     c002dfdf <__divdi3+0x6b>
c002dfd8:	f7 d8                	neg    eax
c002dfda:	83 d2 00             	adc    edx,0x0
c002dfdd:	f7 da                	neg    edx
c002dfdf:	83 c4 1c             	add    esp,0x1c
c002dfe2:	5b                   	pop    ebx
c002dfe3:	5e                   	pop    esi
c002dfe4:	5f                   	pop    edi
c002dfe5:	5d                   	pop    ebp
c002dfe6:	c3                   	ret    
c002dfe7:	90                   	nop
c002dfe8:	85 ff                	test   edi,edi
c002dfea:	75 0b                	jne    c002dff7 <__divdi3+0x83>
c002dfec:	b8 01 00 00 00       	mov    eax,0x1
c002dff1:	31 d2                	xor    edx,edx
c002dff3:	f7 f3                	div    ebx
c002dff5:	89 c7                	mov    edi,eax
c002dff7:	31 d2                	xor    edx,edx
c002dff9:	89 e8                	mov    eax,ebp
c002dffb:	f7 f7                	div    edi
c002dffd:	89 c6                	mov    esi,eax
c002dfff:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002e002:	f7 f7                	div    edi
c002e004:	89 c1                	mov    ecx,eax
c002e006:	eb c4                	jmp    c002dfcc <__divdi3+0x58>
c002e008:	39 eb                	cmp    ebx,ebp
c002e00a:	77 3c                	ja     c002e048 <__divdi3+0xd4>
c002e00c:	0f bd f3             	bsr    esi,ebx
c002e00f:	83 f6 1f             	xor    esi,0x1f
c002e012:	75 40                	jne    c002e054 <__divdi3+0xe0>
c002e014:	39 eb                	cmp    ebx,ebp
c002e016:	72 09                	jb     c002e021 <__divdi3+0xad>
c002e018:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002e01b:	0f 87 97 00 00 00    	ja     c002e0b8 <__divdi3+0x144>
c002e021:	b9 01 00 00 00       	mov    ecx,0x1
c002e026:	eb a4                	jmp    c002dfcc <__divdi3+0x58>
c002e028:	f7 d9                	neg    ecx
c002e02a:	83 d3 00             	adc    ebx,0x0
c002e02d:	f7 db                	neg    ebx
c002e02f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002e032:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002e036:	89 dd                	mov    ebp,ebx
c002e038:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002e040:	e9 5f ff ff ff       	jmp    c002dfa4 <__divdi3+0x30>
c002e045:	8d 76 00             	lea    esi,[esi+0x0]
c002e048:	31 f6                	xor    esi,esi
c002e04a:	31 c9                	xor    ecx,ecx
c002e04c:	e9 7b ff ff ff       	jmp    c002dfcc <__divdi3+0x58>
c002e051:	8d 76 00             	lea    esi,[esi+0x0]
c002e054:	b8 20 00 00 00       	mov    eax,0x20
c002e059:	29 f0                	sub    eax,esi
c002e05b:	89 f1                	mov    ecx,esi
c002e05d:	d3 e3                	shl    ebx,cl
c002e05f:	89 fa                	mov    edx,edi
c002e061:	88 c1                	mov    cl,al
c002e063:	d3 ea                	shr    edx,cl
c002e065:	09 da                	or     edx,ebx
c002e067:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002e06b:	89 f1                	mov    ecx,esi
c002e06d:	d3 e7                	shl    edi,cl
c002e06f:	89 eb                	mov    ebx,ebp
c002e071:	88 c1                	mov    cl,al
c002e073:	d3 eb                	shr    ebx,cl
c002e075:	89 f1                	mov    ecx,esi
c002e077:	d3 e5                	shl    ebp,cl
c002e079:	8b 14 24             	mov    edx,DWORD PTR [esp]
c002e07c:	88 c1                	mov    cl,al
c002e07e:	d3 ea                	shr    edx,cl
c002e080:	09 d5                	or     ebp,edx
c002e082:	89 e8                	mov    eax,ebp
c002e084:	89 da                	mov    edx,ebx
c002e086:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002e08a:	89 d3                	mov    ebx,edx
c002e08c:	89 c5                	mov    ebp,eax
c002e08e:	f7 e7                	mul    edi
c002e090:	39 d3                	cmp    ebx,edx
c002e092:	72 18                	jb     c002e0ac <__divdi3+0x138>
c002e094:	74 0a                	je     c002e0a0 <__divdi3+0x12c>
c002e096:	89 e9                	mov    ecx,ebp
c002e098:	31 f6                	xor    esi,esi
c002e09a:	e9 2d ff ff ff       	jmp    c002dfcc <__divdi3+0x58>
c002e09f:	90                   	nop
c002e0a0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002e0a3:	89 f1                	mov    ecx,esi
c002e0a5:	d3 e7                	shl    edi,cl
c002e0a7:	39 c7                	cmp    edi,eax
c002e0a9:	73 eb                	jae    c002e096 <__divdi3+0x122>
c002e0ab:	90                   	nop
c002e0ac:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002e0af:	31 f6                	xor    esi,esi
c002e0b1:	e9 16 ff ff ff       	jmp    c002dfcc <__divdi3+0x58>
c002e0b6:	66 90                	xchg   ax,ax
c002e0b8:	31 c9                	xor    ecx,ecx
c002e0ba:	e9 0d ff ff ff       	jmp    c002dfcc <__divdi3+0x58>
c002e0bf:	90                   	nop

c002e0c0 <__moddi3>:
c002e0c0:	55                   	push   ebp
c002e0c1:	57                   	push   edi
c002e0c2:	56                   	push   esi
c002e0c3:	53                   	push   ebx
c002e0c4:	83 ec 2c             	sub    esp,0x2c
c002e0c7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002e0cb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002e0cf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002e0d3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002e0d7:	85 db                	test   ebx,ebx
c002e0d9:	0f 88 85 00 00 00    	js     c002e164 <__moddi3+0xa4>
c002e0df:	89 de                	mov    esi,ebx
c002e0e1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002e0e9:	89 d7                	mov    edi,edx
c002e0eb:	85 d2                	test   edx,edx
c002e0ed:	79 09                	jns    c002e0f8 <__moddi3+0x38>
c002e0ef:	f7 d8                	neg    eax
c002e0f1:	83 d2 00             	adc    edx,0x0
c002e0f4:	f7 da                	neg    edx
c002e0f6:	89 d7                	mov    edi,edx
c002e0f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002e0fc:	89 cd                	mov    ebp,ecx
c002e0fe:	85 ff                	test   edi,edi
c002e100:	75 52                	jne    c002e154 <__moddi3+0x94>
c002e102:	89 c3                	mov    ebx,eax
c002e104:	39 f0                	cmp    eax,esi
c002e106:	76 24                	jbe    c002e12c <__moddi3+0x6c>
c002e108:	89 c8                	mov    eax,ecx
c002e10a:	89 f2                	mov    edx,esi
c002e10c:	f7 f3                	div    ebx
c002e10e:	89 d6                	mov    esi,edx
c002e110:	89 f0                	mov    eax,esi
c002e112:	31 d2                	xor    edx,edx
c002e114:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002e118:	85 c9                	test   ecx,ecx
c002e11a:	74 07                	je     c002e123 <__moddi3+0x63>
c002e11c:	f7 d8                	neg    eax
c002e11e:	83 d2 00             	adc    edx,0x0
c002e121:	f7 da                	neg    edx
c002e123:	83 c4 2c             	add    esp,0x2c
c002e126:	5b                   	pop    ebx
c002e127:	5e                   	pop    esi
c002e128:	5f                   	pop    edi
c002e129:	5d                   	pop    ebp
c002e12a:	c3                   	ret    
c002e12b:	90                   	nop
c002e12c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002e130:	85 db                	test   ebx,ebx
c002e132:	75 0d                	jne    c002e141 <__moddi3+0x81>
c002e134:	b8 01 00 00 00       	mov    eax,0x1
c002e139:	31 d2                	xor    edx,edx
c002e13b:	f7 f7                	div    edi
c002e13d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002e141:	89 f0                	mov    eax,esi
c002e143:	31 d2                	xor    edx,edx
c002e145:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002e149:	f7 f7                	div    edi
c002e14b:	89 e8                	mov    eax,ebp
c002e14d:	f7 f7                	div    edi
c002e14f:	89 d6                	mov    esi,edx
c002e151:	eb bd                	jmp    c002e110 <__moddi3+0x50>
c002e153:	90                   	nop
c002e154:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002e158:	39 f7                	cmp    edi,esi
c002e15a:	76 20                	jbe    c002e17c <__moddi3+0xbc>
c002e15c:	89 c8                	mov    eax,ecx
c002e15e:	89 f2                	mov    edx,esi
c002e160:	eb b2                	jmp    c002e114 <__moddi3+0x54>
c002e162:	66 90                	xchg   ax,ax
c002e164:	f7 d9                	neg    ecx
c002e166:	83 d3 00             	adc    ebx,0x0
c002e169:	f7 db                	neg    ebx
c002e16b:	89 de                	mov    esi,ebx
c002e16d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c002e175:	e9 6f ff ff ff       	jmp    c002e0e9 <__moddi3+0x29>
c002e17a:	66 90                	xchg   ax,ax
c002e17c:	0f bd c7             	bsr    eax,edi
c002e17f:	83 f0 1f             	xor    eax,0x1f
c002e182:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002e186:	75 24                	jne    c002e1ac <__moddi3+0xec>
c002e188:	39 f7                	cmp    edi,esi
c002e18a:	72 06                	jb     c002e192 <__moddi3+0xd2>
c002e18c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002e190:	77 0c                	ja     c002e19e <__moddi3+0xde>
c002e192:	89 e9                	mov    ecx,ebp
c002e194:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002e198:	19 fe                	sbb    esi,edi
c002e19a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002e19e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002e1a2:	89 f2                	mov    edx,esi
c002e1a4:	e9 6b ff ff ff       	jmp    c002e114 <__moddi3+0x54>
c002e1a9:	8d 76 00             	lea    esi,[esi+0x0]
c002e1ac:	b8 20 00 00 00       	mov    eax,0x20
c002e1b1:	89 c2                	mov    edx,eax
c002e1b3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002e1b7:	29 da                	sub    edx,ebx
c002e1b9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002e1bd:	88 d9                	mov    cl,bl
c002e1bf:	d3 e7                	shl    edi,cl
c002e1c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002e1c5:	88 d1                	mov    cl,dl
c002e1c7:	d3 e8                	shr    eax,cl
c002e1c9:	09 c7                	or     edi,eax
c002e1cb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002e1cf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002e1d3:	89 d8                	mov    eax,ebx
c002e1d5:	88 d9                	mov    cl,bl
c002e1d7:	d3 e7                	shl    edi,cl
c002e1d9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002e1dd:	89 f3                	mov    ebx,esi
c002e1df:	88 d1                	mov    cl,dl
c002e1e1:	d3 eb                	shr    ebx,cl
c002e1e3:	89 c7                	mov    edi,eax
c002e1e5:	88 c1                	mov    cl,al
c002e1e7:	d3 e6                	shl    esi,cl
c002e1e9:	89 e8                	mov    eax,ebp
c002e1eb:	88 d1                	mov    cl,dl
c002e1ed:	d3 e8                	shr    eax,cl
c002e1ef:	09 f0                	or     eax,esi
c002e1f1:	89 f9                	mov    ecx,edi
c002e1f3:	d3 e5                	shl    ebp,cl
c002e1f5:	89 da                	mov    edx,ebx
c002e1f7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002e1fb:	89 d3                	mov    ebx,edx
c002e1fd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002e201:	89 c6                	mov    esi,eax
c002e203:	89 d1                	mov    ecx,edx
c002e205:	39 d3                	cmp    ebx,edx
c002e207:	72 27                	jb     c002e230 <__moddi3+0x170>
c002e209:	74 21                	je     c002e22c <__moddi3+0x16c>
c002e20b:	29 f5                	sub    ebp,esi
c002e20d:	19 cb                	sbb    ebx,ecx
c002e20f:	89 de                	mov    esi,ebx
c002e211:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c002e215:	d3 e6                	shl    esi,cl
c002e217:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002e21b:	89 f9                	mov    ecx,edi
c002e21d:	d3 ed                	shr    ebp,cl
c002e21f:	09 ee                	or     esi,ebp
c002e221:	89 f0                	mov    eax,esi
c002e223:	d3 eb                	shr    ebx,cl
c002e225:	89 da                	mov    edx,ebx
c002e227:	e9 e8 fe ff ff       	jmp    c002e114 <__moddi3+0x54>
c002e22c:	39 c5                	cmp    ebp,eax
c002e22e:	73 db                	jae    c002e20b <__moddi3+0x14b>
c002e230:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002e234:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002e238:	89 d1                	mov    ecx,edx
c002e23a:	89 c6                	mov    esi,eax
c002e23c:	eb cd                	jmp    c002e20b <__moddi3+0x14b>
c002e23e:	66 90                	xchg   ax,ax

c002e240 <__udivdi3>:
c002e240:	55                   	push   ebp
c002e241:	57                   	push   edi
c002e242:	56                   	push   esi
c002e243:	53                   	push   ebx
c002e244:	83 ec 1c             	sub    esp,0x1c
c002e247:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002e24b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002e24f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002e253:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002e257:	85 d2                	test   edx,edx
c002e259:	75 41                	jne    c002e29c <__udivdi3+0x5c>
c002e25b:	39 f7                	cmp    edi,esi
c002e25d:	76 15                	jbe    c002e274 <__udivdi3+0x34>
c002e25f:	89 e8                	mov    eax,ebp
c002e261:	89 f2                	mov    edx,esi
c002e263:	f7 f7                	div    edi
c002e265:	31 db                	xor    ebx,ebx
c002e267:	89 da                	mov    edx,ebx
c002e269:	83 c4 1c             	add    esp,0x1c
c002e26c:	5b                   	pop    ebx
c002e26d:	5e                   	pop    esi
c002e26e:	5f                   	pop    edi
c002e26f:	5d                   	pop    ebp
c002e270:	c3                   	ret    
c002e271:	8d 76 00             	lea    esi,[esi+0x0]
c002e274:	89 f9                	mov    ecx,edi
c002e276:	85 ff                	test   edi,edi
c002e278:	75 0b                	jne    c002e285 <__udivdi3+0x45>
c002e27a:	b8 01 00 00 00       	mov    eax,0x1
c002e27f:	31 d2                	xor    edx,edx
c002e281:	f7 f7                	div    edi
c002e283:	89 c1                	mov    ecx,eax
c002e285:	31 d2                	xor    edx,edx
c002e287:	89 f0                	mov    eax,esi
c002e289:	f7 f1                	div    ecx
c002e28b:	89 c3                	mov    ebx,eax
c002e28d:	89 e8                	mov    eax,ebp
c002e28f:	f7 f1                	div    ecx
c002e291:	89 da                	mov    edx,ebx
c002e293:	83 c4 1c             	add    esp,0x1c
c002e296:	5b                   	pop    ebx
c002e297:	5e                   	pop    esi
c002e298:	5f                   	pop    edi
c002e299:	5d                   	pop    ebp
c002e29a:	c3                   	ret    
c002e29b:	90                   	nop
c002e29c:	39 f2                	cmp    edx,esi
c002e29e:	77 1c                	ja     c002e2bc <__udivdi3+0x7c>
c002e2a0:	0f bd da             	bsr    ebx,edx
c002e2a3:	83 f3 1f             	xor    ebx,0x1f
c002e2a6:	75 24                	jne    c002e2cc <__udivdi3+0x8c>
c002e2a8:	39 f2                	cmp    edx,esi
c002e2aa:	72 08                	jb     c002e2b4 <__udivdi3+0x74>
c002e2ac:	39 ef                	cmp    edi,ebp
c002e2ae:	0f 87 84 00 00 00    	ja     c002e338 <__udivdi3+0xf8>
c002e2b4:	b8 01 00 00 00       	mov    eax,0x1
c002e2b9:	eb ac                	jmp    c002e267 <__udivdi3+0x27>
c002e2bb:	90                   	nop
c002e2bc:	31 db                	xor    ebx,ebx
c002e2be:	31 c0                	xor    eax,eax
c002e2c0:	89 da                	mov    edx,ebx
c002e2c2:	83 c4 1c             	add    esp,0x1c
c002e2c5:	5b                   	pop    ebx
c002e2c6:	5e                   	pop    esi
c002e2c7:	5f                   	pop    edi
c002e2c8:	5d                   	pop    ebp
c002e2c9:	c3                   	ret    
c002e2ca:	66 90                	xchg   ax,ax
c002e2cc:	b8 20 00 00 00       	mov    eax,0x20
c002e2d1:	29 d8                	sub    eax,ebx
c002e2d3:	88 d9                	mov    cl,bl
c002e2d5:	d3 e2                	shl    edx,cl
c002e2d7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002e2db:	89 fa                	mov    edx,edi
c002e2dd:	88 c1                	mov    cl,al
c002e2df:	d3 ea                	shr    edx,cl
c002e2e1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002e2e5:	09 d1                	or     ecx,edx
c002e2e7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002e2eb:	88 d9                	mov    cl,bl
c002e2ed:	d3 e7                	shl    edi,cl
c002e2ef:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002e2f3:	89 f7                	mov    edi,esi
c002e2f5:	88 c1                	mov    cl,al
c002e2f7:	d3 ef                	shr    edi,cl
c002e2f9:	88 d9                	mov    cl,bl
c002e2fb:	d3 e6                	shl    esi,cl
c002e2fd:	89 ea                	mov    edx,ebp
c002e2ff:	88 c1                	mov    cl,al
c002e301:	d3 ea                	shr    edx,cl
c002e303:	09 d6                	or     esi,edx
c002e305:	89 f0                	mov    eax,esi
c002e307:	89 fa                	mov    edx,edi
c002e309:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002e30d:	89 d7                	mov    edi,edx
c002e30f:	89 c6                	mov    esi,eax
c002e311:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002e315:	39 d7                	cmp    edi,edx
c002e317:	72 13                	jb     c002e32c <__udivdi3+0xec>
c002e319:	74 09                	je     c002e324 <__udivdi3+0xe4>
c002e31b:	89 f0                	mov    eax,esi
c002e31d:	31 db                	xor    ebx,ebx
c002e31f:	e9 43 ff ff ff       	jmp    c002e267 <__udivdi3+0x27>
c002e324:	88 d9                	mov    cl,bl
c002e326:	d3 e5                	shl    ebp,cl
c002e328:	39 c5                	cmp    ebp,eax
c002e32a:	73 ef                	jae    c002e31b <__udivdi3+0xdb>
c002e32c:	8d 46 ff             	lea    eax,[esi-0x1]
c002e32f:	31 db                	xor    ebx,ebx
c002e331:	e9 31 ff ff ff       	jmp    c002e267 <__udivdi3+0x27>
c002e336:	66 90                	xchg   ax,ax
c002e338:	31 c0                	xor    eax,eax
c002e33a:	e9 28 ff ff ff       	jmp    c002e267 <__udivdi3+0x27>
c002e33f:	90                   	nop

c002e340 <__umoddi3>:
c002e340:	55                   	push   ebp
c002e341:	57                   	push   edi
c002e342:	56                   	push   esi
c002e343:	53                   	push   ebx
c002e344:	83 ec 1c             	sub    esp,0x1c
c002e347:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002e34b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002e34f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002e353:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002e357:	89 da                	mov    edx,ebx
c002e359:	85 c0                	test   eax,eax
c002e35b:	75 37                	jne    c002e394 <__umoddi3+0x54>
c002e35d:	39 df                	cmp    edi,ebx
c002e35f:	76 13                	jbe    c002e374 <__umoddi3+0x34>
c002e361:	89 f0                	mov    eax,esi
c002e363:	f7 f7                	div    edi
c002e365:	89 d0                	mov    eax,edx
c002e367:	31 d2                	xor    edx,edx
c002e369:	83 c4 1c             	add    esp,0x1c
c002e36c:	5b                   	pop    ebx
c002e36d:	5e                   	pop    esi
c002e36e:	5f                   	pop    edi
c002e36f:	5d                   	pop    ebp
c002e370:	c3                   	ret    
c002e371:	8d 76 00             	lea    esi,[esi+0x0]
c002e374:	89 fd                	mov    ebp,edi
c002e376:	85 ff                	test   edi,edi
c002e378:	75 0b                	jne    c002e385 <__umoddi3+0x45>
c002e37a:	b8 01 00 00 00       	mov    eax,0x1
c002e37f:	31 d2                	xor    edx,edx
c002e381:	f7 f7                	div    edi
c002e383:	89 c5                	mov    ebp,eax
c002e385:	89 d8                	mov    eax,ebx
c002e387:	31 d2                	xor    edx,edx
c002e389:	f7 f5                	div    ebp
c002e38b:	89 f0                	mov    eax,esi
c002e38d:	f7 f5                	div    ebp
c002e38f:	89 d0                	mov    eax,edx
c002e391:	eb d4                	jmp    c002e367 <__umoddi3+0x27>
c002e393:	90                   	nop
c002e394:	89 f1                	mov    ecx,esi
c002e396:	39 d8                	cmp    eax,ebx
c002e398:	76 0a                	jbe    c002e3a4 <__umoddi3+0x64>
c002e39a:	89 f0                	mov    eax,esi
c002e39c:	83 c4 1c             	add    esp,0x1c
c002e39f:	5b                   	pop    ebx
c002e3a0:	5e                   	pop    esi
c002e3a1:	5f                   	pop    edi
c002e3a2:	5d                   	pop    ebp
c002e3a3:	c3                   	ret    
c002e3a4:	0f bd e8             	bsr    ebp,eax
c002e3a7:	83 f5 1f             	xor    ebp,0x1f
c002e3aa:	75 1c                	jne    c002e3c8 <__umoddi3+0x88>
c002e3ac:	39 d8                	cmp    eax,ebx
c002e3ae:	72 04                	jb     c002e3b4 <__umoddi3+0x74>
c002e3b0:	39 f7                	cmp    edi,esi
c002e3b2:	77 08                	ja     c002e3bc <__umoddi3+0x7c>
c002e3b4:	89 da                	mov    edx,ebx
c002e3b6:	29 fe                	sub    esi,edi
c002e3b8:	19 c2                	sbb    edx,eax
c002e3ba:	89 f1                	mov    ecx,esi
c002e3bc:	89 c8                	mov    eax,ecx
c002e3be:	83 c4 1c             	add    esp,0x1c
c002e3c1:	5b                   	pop    ebx
c002e3c2:	5e                   	pop    esi
c002e3c3:	5f                   	pop    edi
c002e3c4:	5d                   	pop    ebp
c002e3c5:	c3                   	ret    
c002e3c6:	66 90                	xchg   ax,ax
c002e3c8:	ba 20 00 00 00       	mov    edx,0x20
c002e3cd:	29 ea                	sub    edx,ebp
c002e3cf:	89 e9                	mov    ecx,ebp
c002e3d1:	d3 e0                	shl    eax,cl
c002e3d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002e3d7:	89 f8                	mov    eax,edi
c002e3d9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002e3dd:	88 d1                	mov    cl,dl
c002e3df:	d3 e8                	shr    eax,cl
c002e3e1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002e3e5:	09 c1                	or     ecx,eax
c002e3e7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002e3eb:	89 e9                	mov    ecx,ebp
c002e3ed:	d3 e7                	shl    edi,cl
c002e3ef:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002e3f3:	89 d8                	mov    eax,ebx
c002e3f5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002e3f9:	88 d1                	mov    cl,dl
c002e3fb:	d3 e8                	shr    eax,cl
c002e3fd:	89 c7                	mov    edi,eax
c002e3ff:	89 e9                	mov    ecx,ebp
c002e401:	d3 e3                	shl    ebx,cl
c002e403:	89 f0                	mov    eax,esi
c002e405:	88 d1                	mov    cl,dl
c002e407:	d3 e8                	shr    eax,cl
c002e409:	09 d8                	or     eax,ebx
c002e40b:	89 e9                	mov    ecx,ebp
c002e40d:	d3 e6                	shl    esi,cl
c002e40f:	89 f3                	mov    ebx,esi
c002e411:	89 fa                	mov    edx,edi
c002e413:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002e417:	89 d1                	mov    ecx,edx
c002e419:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002e41d:	89 c6                	mov    esi,eax
c002e41f:	89 d7                	mov    edi,edx
c002e421:	39 d1                	cmp    ecx,edx
c002e423:	72 27                	jb     c002e44c <__umoddi3+0x10c>
c002e425:	74 21                	je     c002e448 <__umoddi3+0x108>
c002e427:	89 ca                	mov    edx,ecx
c002e429:	29 f3                	sub    ebx,esi
c002e42b:	19 fa                	sbb    edx,edi
c002e42d:	89 d0                	mov    eax,edx
c002e42f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002e433:	d3 e0                	shl    eax,cl
c002e435:	89 e9                	mov    ecx,ebp
c002e437:	d3 eb                	shr    ebx,cl
c002e439:	09 d8                	or     eax,ebx
c002e43b:	d3 ea                	shr    edx,cl
c002e43d:	83 c4 1c             	add    esp,0x1c
c002e440:	5b                   	pop    ebx
c002e441:	5e                   	pop    esi
c002e442:	5f                   	pop    edi
c002e443:	5d                   	pop    ebp
c002e444:	c3                   	ret    
c002e445:	8d 76 00             	lea    esi,[esi+0x0]
c002e448:	39 c3                	cmp    ebx,eax
c002e44a:	73 db                	jae    c002e427 <__umoddi3+0xe7>
c002e44c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002e450:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c002e454:	89 d7                	mov    edi,edx
c002e456:	89 c6                	mov    esi,eax
c002e458:	eb cd                	jmp    c002e427 <__umoddi3+0xe7>

Disassembly of section .init:

c002e45a <_init>:
c002e45a:	55                   	push   ebp
c002e45b:	89 e5                	mov    ebp,esp
c002e45d:	e8 92 1c fd ff       	call   c00000f4 <frame_dummy>
c002e462:	e8 e5 fa ff ff       	call   c002df4c <__do_global_ctors_aux>
c002e467:	5d                   	pop    ebp
c002e468:	c3                   	ret    

Disassembly of section .fini:

c002e469 <_fini>:
c002e469:	55                   	push   ebp
c002e46a:	89 e5                	mov    ebp,esp
c002e46c:	e8 13 1c fd ff       	call   c0000084 <__do_global_dtors_aux>
c002e471:	5d                   	pop    ebp
c002e472:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c002e474 <Computer::~Computer()>:
c002e474:	83 ec 0c             	sub    esp,0xc
c002e477:	ba 24 0c 03 c0       	mov    edx,0xc0030c24
c002e47c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e480:	89 10                	mov    DWORD PTR [eax],edx
c002e482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e486:	83 ec 0c             	sub    esp,0xc
c002e489:	50                   	push   eax
c002e48a:	e8 35 cc fe ff       	call   c001b0c4 <Device::~Device()>
c002e48f:	83 c4 10             	add    esp,0x10
c002e492:	90                   	nop
c002e493:	83 c4 0c             	add    esp,0xc
c002e496:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c002e498 <Computer::~Computer()>:
c002e498:	83 ec 0c             	sub    esp,0xc
c002e49b:	83 ec 0c             	sub    esp,0xc
c002e49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e4a2:	e8 cd ff ff ff       	call   c002e474 <Computer::~Computer()>
c002e4a7:	83 c4 10             	add    esp,0x10
c002e4aa:	83 ec 08             	sub    esp,0x8
c002e4ad:	68 70 01 00 00       	push   0x170
c002e4b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e4b6:	e8 59 ab fe ff       	call   c0019014 <operator delete(void*, unsigned long)>
c002e4bb:	83 c4 10             	add    esp,0x10
c002e4be:	83 c4 0c             	add    esp,0xc
c002e4c1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c002e4c2 <idleCommon()>:
c002e4c2:	83 ec 0c             	sub    esp,0xc
c002e4c5:	fa                   	cli    
c002e4c6:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002e4cc:	e8 c7 66 ff ff       	call   c0024b98 <schedule()>
c002e4d1:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002e4d6:	48                   	dec    eax
c002e4d7:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002e4dc:	75 01                	jne    c002e4df <idleCommon()+0x1d>
c002e4de:	fb                   	sti    
c002e4df:	83 c4 0c             	add    esp,0xc
c002e4e2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c002e4e4 <LinkedList<UnixFile>::~LinkedList()>:
c002e4e4:	90                   	nop
c002e4e5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002e4e6 <LinkedList<UnixFile>::LinkedList()>:
c002e4e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e4ea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002e4f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e4f4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002e4fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e4ff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002e506:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e50a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002e510:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e514:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002e51b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e51f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002e526:	90                   	nop
c002e527:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002e528 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002e528:	83 ec 0c             	sub    esp,0xc
c002e52b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002e530:	75 10                	jne    c002e542 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002e532:	83 ec 0c             	sub    esp,0xc
c002e535:	68 38 0e 03 c0       	push   0xc0030e38
c002e53a:	e8 0c 1b ff ff       	call   c002004b <KePanic(char const*)>
c002e53f:	83 c4 10             	add    esp,0x10
c002e542:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e546:	8b 00                	mov    eax,DWORD PTR [eax]
c002e548:	85 c0                	test   eax,eax
c002e54a:	74 34                	je     c002e580 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002e54c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e550:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e553:	85 c0                	test   eax,eax
c002e555:	74 29                	je     c002e580 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002e557:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e55b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e55e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e562:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002e565:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e569:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e56d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002e570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e574:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e577:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002e57e:	eb 65                	jmp    c002e5e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002e580:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e584:	8b 00                	mov    eax,DWORD PTR [eax]
c002e586:	85 c0                	test   eax,eax
c002e588:	75 4b                	jne    c002e5d5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002e58a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e58e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e591:	85 c0                	test   eax,eax
c002e593:	75 40                	jne    c002e5d5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002e595:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e599:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e59d:	89 10                	mov    DWORD PTR [eax],edx
c002e59f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e5a3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e5a7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002e5aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e5ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e5b1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002e5b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e5bc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002e5bf:	85 c0                	test   eax,eax
c002e5c1:	74 22                	je     c002e5e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002e5c3:	83 ec 0c             	sub    esp,0xc
c002e5c6:	68 5a 0e 03 c0       	push   0xc0030e5a
c002e5cb:	e8 7b 1a ff ff       	call   c002004b <KePanic(char const*)>
c002e5d0:	83 c4 10             	add    esp,0x10
c002e5d3:	eb 10                	jmp    c002e5e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002e5d5:	83 ec 0c             	sub    esp,0xc
c002e5d8:	68 64 0e 03 c0       	push   0xc0030e64
c002e5dd:	e8 69 1a ff ff       	call   c002004b <KePanic(char const*)>
c002e5e2:	83 c4 10             	add    esp,0x10
c002e5e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e5e9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002e5ec:	8d 50 01             	lea    edx,[eax+0x1]
c002e5ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e5f3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002e5f6:	90                   	nop
c002e5f7:	83 c4 0c             	add    esp,0xc
c002e5fa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002e5fc <LinkedList<UnixFile>::getFirstElement()>:
c002e5fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e600:	8b 00                	mov    eax,DWORD PTR [eax]
c002e602:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002e604 <LinkedList<UnixFile>::removeFirst()>:
c002e604:	83 ec 0c             	sub    esp,0xc
c002e607:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e60b:	8b 00                	mov    eax,DWORD PTR [eax]
c002e60d:	85 c0                	test   eax,eax
c002e60f:	75 12                	jne    c002e623 <LinkedList<UnixFile>::removeFirst()+0x1f>
c002e611:	83 ec 0c             	sub    esp,0xc
c002e614:	68 70 0e 03 c0       	push   0xc0030e70
c002e619:	e8 2d 1a ff ff       	call   c002004b <KePanic(char const*)>
c002e61e:	83 c4 10             	add    esp,0x10
c002e621:	eb 7e                	jmp    c002e6a1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002e623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e627:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e62a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002e62d:	85 c0                	test   eax,eax
c002e62f:	74 10                	je     c002e641 <LinkedList<UnixFile>::removeFirst()+0x3d>
c002e631:	83 ec 0c             	sub    esp,0xc
c002e634:	68 bb 0e 03 c0       	push   0xc0030ebb
c002e639:	e8 0d 1a ff ff       	call   c002004b <KePanic(char const*)>
c002e63e:	83 c4 10             	add    esp,0x10
c002e641:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e645:	8b 00                	mov    eax,DWORD PTR [eax]
c002e647:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002e64a:	85 c0                	test   eax,eax
c002e64c:	75 33                	jne    c002e681 <LinkedList<UnixFile>::removeFirst()+0x7d>
c002e64e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e652:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002e658:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e65c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002e663:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e667:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002e66a:	83 f8 01             	cmp    eax,0x1
c002e66d:	74 21                	je     c002e690 <LinkedList<UnixFile>::removeFirst()+0x8c>
c002e66f:	83 ec 0c             	sub    esp,0xc
c002e672:	68 94 0e 03 c0       	push   0xc0030e94
c002e677:	e8 cf 19 ff ff       	call   c002004b <KePanic(char const*)>
c002e67c:	83 c4 10             	add    esp,0x10
c002e67f:	eb 0f                	jmp    c002e690 <LinkedList<UnixFile>::removeFirst()+0x8c>
c002e681:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e685:	8b 00                	mov    eax,DWORD PTR [eax]
c002e687:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002e68a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e68e:	89 10                	mov    DWORD PTR [eax],edx
c002e690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e694:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002e697:	8d 50 ff             	lea    edx,[eax-0x1]
c002e69a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e69e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002e6a1:	83 c4 0c             	add    esp,0xc
c002e6a4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002e6a6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002e6a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002e6aa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002e6ad:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c002e6ae <DriverlessDevice::~DriverlessDevice()>:
c002e6ae:	ba e8 1a 03 c0       	mov    edx,0xc0031ae8
c002e6b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e6b7:	89 10                	mov    DWORD PTR [eax],edx
c002e6b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e6bd:	50                   	push   eax
c002e6be:	e8 01 ca fe ff       	call   c001b0c4 <Device::~Device()>
c002e6c3:	83 c4 04             	add    esp,0x4
c002e6c6:	90                   	nop
c002e6c7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002e6c8 <DriverlessDevice::~DriverlessDevice()>:
c002e6c8:	83 ec 0c             	sub    esp,0xc
c002e6cb:	83 ec 0c             	sub    esp,0xc
c002e6ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e6d2:	e8 d7 ff ff ff       	call   c002e6ae <DriverlessDevice::~DriverlessDevice()>
c002e6d7:	83 c4 10             	add    esp,0x10
c002e6da:	83 ec 08             	sub    esp,0x8
c002e6dd:	68 58 01 00 00       	push   0x158
c002e6e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e6e6:	e8 29 a9 fe ff       	call   c0019014 <operator delete(void*, unsigned long)>
c002e6eb:	83 c4 10             	add    esp,0x10
c002e6ee:	83 c4 0c             	add    esp,0xc
c002e6f1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002e6f2 <LinkedList<Device>::addElement(Device*)>:
c002e6f2:	83 ec 0c             	sub    esp,0xc
c002e6f5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002e6fa:	75 10                	jne    c002e70c <LinkedList<Device>::addElement(Device*)+0x1a>
c002e6fc:	83 ec 0c             	sub    esp,0xc
c002e6ff:	68 38 0e 03 c0       	push   0xc0030e38
c002e704:	e8 42 19 ff ff       	call   c002004b <KePanic(char const*)>
c002e709:	83 c4 10             	add    esp,0x10
c002e70c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e710:	8b 00                	mov    eax,DWORD PTR [eax]
c002e712:	85 c0                	test   eax,eax
c002e714:	74 3a                	je     c002e750 <LinkedList<Device>::addElement(Device*)+0x5e>
c002e716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e71a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e71d:	85 c0                	test   eax,eax
c002e71f:	74 2f                	je     c002e750 <LinkedList<Device>::addElement(Device*)+0x5e>
c002e721:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e725:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e728:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e72c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002e732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e736:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e73a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002e73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e741:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e744:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002e74e:	eb 68                	jmp    c002e7b8 <LinkedList<Device>::addElement(Device*)+0xc6>
c002e750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e754:	8b 00                	mov    eax,DWORD PTR [eax]
c002e756:	85 c0                	test   eax,eax
c002e758:	75 4e                	jne    c002e7a8 <LinkedList<Device>::addElement(Device*)+0xb6>
c002e75a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e75e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e761:	85 c0                	test   eax,eax
c002e763:	75 43                	jne    c002e7a8 <LinkedList<Device>::addElement(Device*)+0xb6>
c002e765:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e769:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e76d:	89 10                	mov    DWORD PTR [eax],edx
c002e76f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e773:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e777:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002e77a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e77e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e781:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002e78b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e78f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002e792:	85 c0                	test   eax,eax
c002e794:	74 22                	je     c002e7b8 <LinkedList<Device>::addElement(Device*)+0xc6>
c002e796:	83 ec 0c             	sub    esp,0xc
c002e799:	68 5a 0e 03 c0       	push   0xc0030e5a
c002e79e:	e8 a8 18 ff ff       	call   c002004b <KePanic(char const*)>
c002e7a3:	83 c4 10             	add    esp,0x10
c002e7a6:	eb 10                	jmp    c002e7b8 <LinkedList<Device>::addElement(Device*)+0xc6>
c002e7a8:	83 ec 0c             	sub    esp,0xc
c002e7ab:	68 64 0e 03 c0       	push   0xc0030e64
c002e7b0:	e8 96 18 ff ff       	call   c002004b <KePanic(char const*)>
c002e7b5:	83 c4 10             	add    esp,0x10
c002e7b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e7bc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002e7bf:	8d 50 01             	lea    edx,[eax+0x1]
c002e7c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e7c6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002e7c9:	90                   	nop
c002e7ca:	83 c4 0c             	add    esp,0xc
c002e7cd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c002e7ce <LinkedList<Device>::LinkedList()>:
c002e7ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e7d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002e7d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e7dc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002e7e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e7e7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002e7ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e7f2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002e7f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e7fc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002e803:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e807:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002e80e:	90                   	nop
c002e80f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002e810 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002e810:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e814:	8b 00                	mov    eax,DWORD PTR [eax]
c002e816:	85 c0                	test   eax,eax
c002e818:	75 0e                	jne    c002e828 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002e81a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e81e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e821:	85 c0                	test   eax,eax
c002e823:	75 03                	jne    c002e828 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002e825:	b0 01                	mov    al,0x1
c002e827:	c3                   	ret    
c002e828:	b0 00                	mov    al,0x0
c002e82a:	90                   	nop
c002e82b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002e82c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002e82c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e830:	8b 00                	mov    eax,DWORD PTR [eax]
c002e832:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c002e834 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c002e834:	83 ec 0c             	sub    esp,0xc
c002e837:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e83b:	8b 00                	mov    eax,DWORD PTR [eax]
c002e83d:	85 c0                	test   eax,eax
c002e83f:	75 17                	jne    c002e858 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c002e841:	83 ec 0c             	sub    esp,0xc
c002e844:	68 70 0e 03 c0       	push   0xc0030e70
c002e849:	e8 fd 17 ff ff       	call   c002004b <KePanic(char const*)>
c002e84e:	83 c4 10             	add    esp,0x10
c002e851:	e9 96 00 00 00       	jmp    c002e8ec <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c002e856:	66 90                	xchg   ax,ax
c002e858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e85c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e85f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002e862:	85 c0                	test   eax,eax
c002e864:	0f 95 c0             	setne  al
c002e867:	0f b6 c0             	movzx  eax,al
c002e86a:	85 c0                	test   eax,eax
c002e86c:	74 12                	je     c002e880 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c002e86e:	83 ec 0c             	sub    esp,0xc
c002e871:	68 bb 0e 03 c0       	push   0xc0030ebb
c002e876:	e8 d0 17 ff ff       	call   c002004b <KePanic(char const*)>
c002e87b:	83 c4 10             	add    esp,0x10
c002e87e:	66 90                	xchg   ax,ax
c002e880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e884:	8b 00                	mov    eax,DWORD PTR [eax]
c002e886:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002e889:	85 c0                	test   eax,eax
c002e88b:	0f 94 c0             	sete   al
c002e88e:	0f b6 c0             	movzx  eax,al
c002e891:	85 c0                	test   eax,eax
c002e893:	74 33                	je     c002e8c8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c002e895:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e899:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002e89f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e8a3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002e8aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e8ae:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002e8b1:	83 f8 01             	cmp    eax,0x1
c002e8b4:	74 22                	je     c002e8d8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c002e8b6:	83 ec 0c             	sub    esp,0xc
c002e8b9:	68 94 0e 03 c0       	push   0xc0030e94
c002e8be:	e8 88 17 ff ff       	call   c002004b <KePanic(char const*)>
c002e8c3:	83 c4 10             	add    esp,0x10
c002e8c6:	eb 10                	jmp    c002e8d8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c002e8c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e8cc:	8b 00                	mov    eax,DWORD PTR [eax]
c002e8ce:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c002e8d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e8d5:	89 10                	mov    DWORD PTR [eax],edx
c002e8d7:	90                   	nop
c002e8d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e8dc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002e8df:	8d 50 ff             	lea    edx,[eax-0x1]
c002e8e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e8e6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002e8e9:	8d 76 00             	lea    esi,[esi+0x0]
c002e8ec:	83 c4 0c             	add    esp,0xc
c002e8ef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002e8f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002e8f0:	83 ec 0c             	sub    esp,0xc
c002e8f3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002e8f8:	75 12                	jne    c002e90c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c002e8fa:	83 ec 0c             	sub    esp,0xc
c002e8fd:	68 38 0e 03 c0       	push   0xc0030e38
c002e902:	e8 44 17 ff ff       	call   c002004b <KePanic(char const*)>
c002e907:	83 c4 10             	add    esp,0x10
c002e90a:	66 90                	xchg   ax,ax
c002e90c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e910:	8b 00                	mov    eax,DWORD PTR [eax]
c002e912:	85 c0                	test   eax,eax
c002e914:	74 36                	je     c002e94c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002e916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e91a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e91d:	85 c0                	test   eax,eax
c002e91f:	74 2b                	je     c002e94c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002e921:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e925:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e928:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e92c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002e92f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e933:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e937:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002e93a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e93e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e941:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002e948:	eb 6a                	jmp    c002e9b4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002e94a:	66 90                	xchg   ax,ax
c002e94c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e950:	8b 00                	mov    eax,DWORD PTR [eax]
c002e952:	85 c0                	test   eax,eax
c002e954:	75 4e                	jne    c002e9a4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002e956:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e95a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e95d:	85 c0                	test   eax,eax
c002e95f:	75 43                	jne    c002e9a4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002e961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e965:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e969:	89 10                	mov    DWORD PTR [eax],edx
c002e96b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e96f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e973:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002e976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e97a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e97d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002e984:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e988:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002e98b:	85 c0                	test   eax,eax
c002e98d:	74 25                	je     c002e9b4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002e98f:	83 ec 0c             	sub    esp,0xc
c002e992:	68 5a 0e 03 c0       	push   0xc0030e5a
c002e997:	e8 af 16 ff ff       	call   c002004b <KePanic(char const*)>
c002e99c:	83 c4 10             	add    esp,0x10
c002e99f:	eb 13                	jmp    c002e9b4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002e9a1:	8d 76 00             	lea    esi,[esi+0x0]
c002e9a4:	83 ec 0c             	sub    esp,0xc
c002e9a7:	68 64 0e 03 c0       	push   0xc0030e64
c002e9ac:	e8 9a 16 ff ff       	call   c002004b <KePanic(char const*)>
c002e9b1:	83 c4 10             	add    esp,0x10
c002e9b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e9b8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002e9bb:	8d 50 01             	lea    edx,[eax+0x1]
c002e9be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e9c2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002e9c5:	90                   	nop
c002e9c6:	83 c4 0c             	add    esp,0xc
c002e9c9:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c002e9cc <ACPI::~ACPI()>:
c002e9cc:	83 ec 0c             	sub    esp,0xc
c002e9cf:	ba 88 21 03 c0       	mov    edx,0xc0032188
c002e9d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e9d8:	89 10                	mov    DWORD PTR [eax],edx
c002e9da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e9de:	83 ec 0c             	sub    esp,0xc
c002e9e1:	50                   	push   eax
c002e9e2:	e8 dd c6 fe ff       	call   c001b0c4 <Device::~Device()>
c002e9e7:	83 c4 10             	add    esp,0x10
c002e9ea:	90                   	nop
c002e9eb:	83 c4 0c             	add    esp,0xc
c002e9ee:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002e9f0 <ACPI::~ACPI()>:
c002e9f0:	83 ec 0c             	sub    esp,0xc
c002e9f3:	83 ec 0c             	sub    esp,0xc
c002e9f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e9fa:	e8 cd ff ff ff       	call   c002e9cc <ACPI::~ACPI()>
c002e9ff:	83 c4 10             	add    esp,0x10
c002ea02:	83 ec 08             	sub    esp,0x8
c002ea05:	68 64 12 00 00       	push   0x1264
c002ea0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ea0e:	e8 01 a6 fe ff       	call   c0019014 <operator delete(void*, unsigned long)>
c002ea13:	83 c4 10             	add    esp,0x10
c002ea16:	83 c4 0c             	add    esp,0xc
c002ea19:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002ea1c <LinkedList<Device>::~LinkedList()>:
c002ea1c:	90                   	nop
c002ea1d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c002ea20 <LinkedList<Device>::isEmpty()>:
c002ea20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ea24:	8b 00                	mov    eax,DWORD PTR [eax]
c002ea26:	85 c0                	test   eax,eax
c002ea28:	75 0e                	jne    c002ea38 <LinkedList<Device>::isEmpty()+0x18>
c002ea2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ea2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ea31:	85 c0                	test   eax,eax
c002ea33:	75 03                	jne    c002ea38 <LinkedList<Device>::isEmpty()+0x18>
c002ea35:	b0 01                	mov    al,0x1
c002ea37:	c3                   	ret    
c002ea38:	b0 00                	mov    al,0x0
c002ea3a:	90                   	nop
c002ea3b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002ea3c <LinkedList<Device>::getFirstElement()>:
c002ea3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ea40:	8b 00                	mov    eax,DWORD PTR [eax]
c002ea42:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c002ea44 <LinkedList<Device>::removeFirst()>:
c002ea44:	83 ec 0c             	sub    esp,0xc
c002ea47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea4b:	8b 00                	mov    eax,DWORD PTR [eax]
c002ea4d:	85 c0                	test   eax,eax
c002ea4f:	75 17                	jne    c002ea68 <LinkedList<Device>::removeFirst()+0x24>
c002ea51:	83 ec 0c             	sub    esp,0xc
c002ea54:	68 70 0e 03 c0       	push   0xc0030e70
c002ea59:	e8 ed 15 ff ff       	call   c002004b <KePanic(char const*)>
c002ea5e:	83 c4 10             	add    esp,0x10
c002ea61:	e9 92 00 00 00       	jmp    c002eaf8 <LinkedList<Device>::removeFirst()+0xb4>
c002ea66:	66 90                	xchg   ax,ax
c002ea68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea6c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ea6f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c002ea75:	85 c0                	test   eax,eax
c002ea77:	74 13                	je     c002ea8c <LinkedList<Device>::removeFirst()+0x48>
c002ea79:	83 ec 0c             	sub    esp,0xc
c002ea7c:	68 bb 0e 03 c0       	push   0xc0030ebb
c002ea81:	e8 c5 15 ff ff       	call   c002004b <KePanic(char const*)>
c002ea86:	83 c4 10             	add    esp,0x10
c002ea89:	8d 76 00             	lea    esi,[esi+0x0]
c002ea8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea90:	8b 00                	mov    eax,DWORD PTR [eax]
c002ea92:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c002ea98:	85 c0                	test   eax,eax
c002ea9a:	75 34                	jne    c002ead0 <LinkedList<Device>::removeFirst()+0x8c>
c002ea9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eaa0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002eaa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eaaa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002eab1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eab5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002eab8:	83 f8 01             	cmp    eax,0x1
c002eabb:	74 27                	je     c002eae4 <LinkedList<Device>::removeFirst()+0xa0>
c002eabd:	83 ec 0c             	sub    esp,0xc
c002eac0:	68 94 0e 03 c0       	push   0xc0030e94
c002eac5:	e8 81 15 ff ff       	call   c002004b <KePanic(char const*)>
c002eaca:	83 c4 10             	add    esp,0x10
c002eacd:	eb 15                	jmp    c002eae4 <LinkedList<Device>::removeFirst()+0xa0>
c002eacf:	90                   	nop
c002ead0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ead4:	8b 00                	mov    eax,DWORD PTR [eax]
c002ead6:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002eadc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eae0:	89 10                	mov    DWORD PTR [eax],edx
c002eae2:	66 90                	xchg   ax,ax
c002eae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eae8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002eaeb:	8d 50 ff             	lea    edx,[eax-0x1]
c002eaee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eaf2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002eaf5:	8d 76 00             	lea    esi,[esi+0x0]
c002eaf8:	83 c4 0c             	add    esp,0xc
c002eafb:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002eafc <CPU::~CPU()>:
c002eafc:	83 ec 0c             	sub    esp,0xc
c002eaff:	ba 30 23 03 c0       	mov    edx,0xc0032330
c002eb04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb08:	89 10                	mov    DWORD PTR [eax],edx
c002eb0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb0e:	83 ec 0c             	sub    esp,0xc
c002eb11:	50                   	push   eax
c002eb12:	e8 ad c5 fe ff       	call   c001b0c4 <Device::~Device()>
c002eb17:	83 c4 10             	add    esp,0x10
c002eb1a:	90                   	nop
c002eb1b:	83 c4 0c             	add    esp,0xc
c002eb1e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c002eb20 <CPU::~CPU()>:
c002eb20:	83 ec 0c             	sub    esp,0xc
c002eb23:	83 ec 0c             	sub    esp,0xc
c002eb26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002eb2a:	e8 cd ff ff ff       	call   c002eafc <CPU::~CPU()>
c002eb2f:	83 c4 10             	add    esp,0x10
c002eb32:	83 ec 08             	sub    esp,0x8
c002eb35:	68 94 11 00 00       	push   0x1194
c002eb3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002eb3e:	e8 d1 a4 fe ff       	call   c0019014 <operator delete(void*, unsigned long)>
c002eb43:	83 c4 10             	add    esp,0x10
c002eb46:	83 c4 0c             	add    esp,0xc
c002eb49:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c002eb4c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c002eb4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002eb50:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002eb53:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c002eb54 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c002eb54:	90                   	nop
c002eb55:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c002eb58 <ThreadControlBlock::ThreadControlBlock()>:
c002eb58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eb5c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002eb63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eb67:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002eb6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eb72:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c002eb79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eb7d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c002eb84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eb88:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c002eb8f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eb93:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002eb97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eb9b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c002eb9f:	90                   	nop
c002eba0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002eba4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002eba4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eba8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ebae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ebb2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ebb9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ebbd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002ebc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ebc8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ebce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ebd2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ebd9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ebdd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002ebe4:	90                   	nop
c002ebe5:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002ebe6 <PCI::~PCI()>:
c002ebe6:	83 ec 0c             	sub    esp,0xc
c002ebe9:	ba 50 32 03 c0       	mov    edx,0xc0033250
c002ebee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ebf2:	89 10                	mov    DWORD PTR [eax],edx
c002ebf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ebf8:	83 ec 0c             	sub    esp,0xc
c002ebfb:	50                   	push   eax
c002ebfc:	e8 5b bf fe ff       	call   c001ab5c <Bus::~Bus()>
c002ec01:	83 c4 10             	add    esp,0x10
c002ec04:	90                   	nop
c002ec05:	83 c4 0c             	add    esp,0xc
c002ec08:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002ec0a <PCI::~PCI()>:
c002ec0a:	83 ec 0c             	sub    esp,0xc
c002ec0d:	83 ec 0c             	sub    esp,0xc
c002ec10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ec14:	e8 cd ff ff ff       	call   c002ebe6 <PCI::~PCI()>
c002ec19:	83 c4 10             	add    esp,0x10
c002ec1c:	83 ec 08             	sub    esp,0x8
c002ec1f:	68 5c 01 00 00       	push   0x15c
c002ec24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ec28:	e8 e7 a3 fe ff       	call   c0019014 <operator delete(void*, unsigned long)>
c002ec2d:	83 c4 10             	add    esp,0x10
c002ec30:	83 c4 0c             	add    esp,0xc
c002ec33:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002ec34 <IDE::~IDE()>:
c002ec34:	83 ec 0c             	sub    esp,0xc
c002ec37:	ba 04 33 03 c0       	mov    edx,0xc0033304
c002ec3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec40:	89 10                	mov    DWORD PTR [eax],edx
c002ec42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec46:	83 ec 0c             	sub    esp,0xc
c002ec49:	50                   	push   eax
c002ec4a:	e8 05 c9 fe ff       	call   c001b554 <HardDiskController::~HardDiskController()>
c002ec4f:	83 c4 10             	add    esp,0x10
c002ec52:	90                   	nop
c002ec53:	83 c4 0c             	add    esp,0xc
c002ec56:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002ec58 <IDE::~IDE()>:
c002ec58:	83 ec 0c             	sub    esp,0xc
c002ec5b:	83 ec 0c             	sub    esp,0xc
c002ec5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ec62:	e8 cd ff ff ff       	call   c002ec34 <IDE::~IDE()>
c002ec67:	83 c4 10             	add    esp,0x10
c002ec6a:	83 ec 08             	sub    esp,0x8
c002ec6d:	68 70 02 00 00       	push   0x270
c002ec72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ec76:	e8 99 a3 fe ff       	call   c0019014 <operator delete(void*, unsigned long)>
c002ec7b:	83 c4 10             	add    esp,0x10
c002ec7e:	83 c4 0c             	add    esp,0xc
c002ec81:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c002ec82 <SATABus::~SATABus()>:
c002ec82:	83 ec 0c             	sub    esp,0xc
c002ec85:	ba 54 33 03 c0       	mov    edx,0xc0033354
c002ec8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec8e:	89 10                	mov    DWORD PTR [eax],edx
c002ec90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec94:	83 ec 0c             	sub    esp,0xc
c002ec97:	50                   	push   eax
c002ec98:	e8 b7 c8 fe ff       	call   c001b554 <HardDiskController::~HardDiskController()>
c002ec9d:	83 c4 10             	add    esp,0x10
c002eca0:	90                   	nop
c002eca1:	83 c4 0c             	add    esp,0xc
c002eca4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002eca6 <SATABus::~SATABus()>:
c002eca6:	83 ec 0c             	sub    esp,0xc
c002eca9:	83 ec 0c             	sub    esp,0xc
c002ecac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ecb0:	e8 cd ff ff ff       	call   c002ec82 <SATABus::~SATABus()>
c002ecb5:	83 c4 10             	add    esp,0x10
c002ecb8:	83 ec 08             	sub    esp,0x8
c002ecbb:	68 64 01 00 00       	push   0x164
c002ecc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ecc4:	e8 4b a3 fe ff       	call   c0019014 <operator delete(void*, unsigned long)>
c002ecc9:	83 c4 10             	add    esp,0x10
c002eccc:	83 c4 0c             	add    esp,0xc
c002eccf:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c002ecd0 <ATA::~ATA()>:
c002ecd0:	83 ec 0c             	sub    esp,0xc
c002ecd3:	ba 94 33 03 c0       	mov    edx,0xc0033394
c002ecd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecdc:	89 10                	mov    DWORD PTR [eax],edx
c002ecde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ece2:	83 ec 0c             	sub    esp,0xc
c002ece5:	50                   	push   eax
c002ece6:	e8 4b c9 fe ff       	call   c001b636 <PhysicalDisk::~PhysicalDisk()>
c002eceb:	83 c4 10             	add    esp,0x10
c002ecee:	90                   	nop
c002ecef:	83 c4 0c             	add    esp,0xc
c002ecf2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002ecf4 <ATA::~ATA()>:
c002ecf4:	83 ec 0c             	sub    esp,0xc
c002ecf7:	83 ec 0c             	sub    esp,0xc
c002ecfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ecfe:	e8 cd ff ff ff       	call   c002ecd0 <ATA::~ATA()>
c002ed03:	83 c4 10             	add    esp,0x10
c002ed06:	83 ec 08             	sub    esp,0x8
c002ed09:	68 7c 01 00 00       	push   0x17c
c002ed0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ed12:	e8 fd a2 fe ff       	call   c0019014 <operator delete(void*, unsigned long)>
c002ed17:	83 c4 10             	add    esp,0x10
c002ed1a:	83 c4 0c             	add    esp,0xc
c002ed1d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002ed1e <ATAPI::~ATAPI()>:
c002ed1e:	83 ec 0c             	sub    esp,0xc
c002ed21:	ba dc 33 03 c0       	mov    edx,0xc00333dc
c002ed26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed2a:	89 10                	mov    DWORD PTR [eax],edx
c002ed2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed30:	83 ec 0c             	sub    esp,0xc
c002ed33:	50                   	push   eax
c002ed34:	e8 fd c8 fe ff       	call   c001b636 <PhysicalDisk::~PhysicalDisk()>
c002ed39:	83 c4 10             	add    esp,0x10
c002ed3c:	90                   	nop
c002ed3d:	83 c4 0c             	add    esp,0xc
c002ed40:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c002ed42 <ATAPI::~ATAPI()>:
c002ed42:	83 ec 0c             	sub    esp,0xc
c002ed45:	83 ec 0c             	sub    esp,0xc
c002ed48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ed4c:	e8 cd ff ff ff       	call   c002ed1e <ATAPI::~ATAPI()>
c002ed51:	83 c4 10             	add    esp,0x10
c002ed54:	83 ec 08             	sub    esp,0x8
c002ed57:	68 84 01 00 00       	push   0x184
c002ed5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ed60:	e8 af a2 fe ff       	call   c0019014 <operator delete(void*, unsigned long)>
c002ed65:	83 c4 10             	add    esp,0x10
c002ed68:	83 c4 0c             	add    esp,0xc
c002ed6b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002ed6c <SATA::~SATA()>:
c002ed6c:	83 ec 0c             	sub    esp,0xc
c002ed6f:	ba 9c 34 03 c0       	mov    edx,0xc003349c
c002ed74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed78:	89 10                	mov    DWORD PTR [eax],edx
c002ed7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed7e:	83 ec 0c             	sub    esp,0xc
c002ed81:	50                   	push   eax
c002ed82:	e8 af c8 fe ff       	call   c001b636 <PhysicalDisk::~PhysicalDisk()>
c002ed87:	83 c4 10             	add    esp,0x10
c002ed8a:	90                   	nop
c002ed8b:	83 c4 0c             	add    esp,0xc
c002ed8e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c002ed90 <SATA::~SATA()>:
c002ed90:	83 ec 0c             	sub    esp,0xc
c002ed93:	83 ec 0c             	sub    esp,0xc
c002ed96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ed9a:	e8 cd ff ff ff       	call   c002ed6c <SATA::~SATA()>
c002ed9f:	83 c4 10             	add    esp,0x10
c002eda2:	83 ec 08             	sub    esp,0x8
c002eda5:	68 7c 01 00 00       	push   0x17c
c002edaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002edae:	e8 61 a2 fe ff       	call   c0019014 <operator delete(void*, unsigned long)>
c002edb3:	83 c4 10             	add    esp,0x10
c002edb6:	83 c4 0c             	add    esp,0xc
c002edb9:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002edba <SATAPI::~SATAPI()>:
c002edba:	83 ec 0c             	sub    esp,0xc
c002edbd:	ba c0 35 03 c0       	mov    edx,0xc00335c0
c002edc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edc6:	89 10                	mov    DWORD PTR [eax],edx
c002edc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edcc:	83 ec 0c             	sub    esp,0xc
c002edcf:	50                   	push   eax
c002edd0:	e8 61 c8 fe ff       	call   c001b636 <PhysicalDisk::~PhysicalDisk()>
c002edd5:	83 c4 10             	add    esp,0x10
c002edd8:	90                   	nop
c002edd9:	83 c4 0c             	add    esp,0xc
c002eddc:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002edde <SATAPI::~SATAPI()>:
c002edde:	83 ec 0c             	sub    esp,0xc
c002ede1:	83 ec 0c             	sub    esp,0xc
c002ede4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ede8:	e8 cd ff ff ff       	call   c002edba <SATAPI::~SATAPI()>
c002eded:	83 c4 10             	add    esp,0x10
c002edf0:	83 ec 08             	sub    esp,0x8
c002edf3:	68 84 01 00 00       	push   0x184
c002edf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002edfc:	e8 13 a2 fe ff       	call   c0019014 <operator delete(void*, unsigned long)>
c002ee01:	83 c4 10             	add    esp,0x10
c002ee04:	83 c4 0c             	add    esp,0xc
c002ee07:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c002ee08 <IOAPIC::~IOAPIC()>:
c002ee08:	83 ec 0c             	sub    esp,0xc
c002ee0b:	ba 00 36 03 c0       	mov    edx,0xc0033600
c002ee10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee14:	89 10                	mov    DWORD PTR [eax],edx
c002ee16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee1a:	83 ec 0c             	sub    esp,0xc
c002ee1d:	50                   	push   eax
c002ee1e:	e8 a1 c2 fe ff       	call   c001b0c4 <Device::~Device()>
c002ee23:	83 c4 10             	add    esp,0x10
c002ee26:	90                   	nop
c002ee27:	83 c4 0c             	add    esp,0xc
c002ee2a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002ee2c <IOAPIC::~IOAPIC()>:
c002ee2c:	83 ec 0c             	sub    esp,0xc
c002ee2f:	83 ec 0c             	sub    esp,0xc
c002ee32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ee36:	e8 cd ff ff ff       	call   c002ee08 <IOAPIC::~IOAPIC()>
c002ee3b:	83 c4 10             	add    esp,0x10
c002ee3e:	83 ec 08             	sub    esp,0x8
c002ee41:	68 68 01 00 00       	push   0x168
c002ee46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ee4a:	e8 c5 a1 fe ff       	call   c0019014 <operator delete(void*, unsigned long)>
c002ee4f:	83 c4 10             	add    esp,0x10
c002ee52:	83 c4 0c             	add    esp,0xc
c002ee55:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002ee58 <APICTimer::~APICTimer()>:
c002ee58:	83 ec 0c             	sub    esp,0xc
c002ee5b:	ba 48 36 03 c0       	mov    edx,0xc0033648
c002ee60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee64:	89 10                	mov    DWORD PTR [eax],edx
c002ee66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee6a:	83 ec 0c             	sub    esp,0xc
c002ee6d:	50                   	push   eax
c002ee6e:	e8 2d dd fe ff       	call   c001cba0 <Timer::~Timer()>
c002ee73:	83 c4 10             	add    esp,0x10
c002ee76:	90                   	nop
c002ee77:	83 c4 0c             	add    esp,0xc
c002ee7a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c002ee7c <APICTimer::~APICTimer()>:
c002ee7c:	83 ec 0c             	sub    esp,0xc
c002ee7f:	83 ec 0c             	sub    esp,0xc
c002ee82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ee86:	e8 cd ff ff ff       	call   c002ee58 <APICTimer::~APICTimer()>
c002ee8b:	83 c4 10             	add    esp,0x10
c002ee8e:	83 ec 08             	sub    esp,0x8
c002ee91:	68 60 01 00 00       	push   0x160
c002ee96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ee9a:	e8 75 a1 fe ff       	call   c0019014 <operator delete(void*, unsigned long)>
c002ee9f:	83 c4 10             	add    esp,0x10
c002eea2:	83 c4 0c             	add    esp,0xc
c002eea5:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002eea8 <PIT::~PIT()>:
c002eea8:	83 ec 0c             	sub    esp,0xc
c002eeab:	ba 98 36 03 c0       	mov    edx,0xc0033698
c002eeb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eeb4:	89 10                	mov    DWORD PTR [eax],edx
c002eeb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eeba:	83 ec 0c             	sub    esp,0xc
c002eebd:	50                   	push   eax
c002eebe:	e8 dd dc fe ff       	call   c001cba0 <Timer::~Timer()>
c002eec3:	83 c4 10             	add    esp,0x10
c002eec6:	90                   	nop
c002eec7:	83 c4 0c             	add    esp,0xc
c002eeca:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002eecc <PIT::~PIT()>:
c002eecc:	83 ec 0c             	sub    esp,0xc
c002eecf:	83 ec 0c             	sub    esp,0xc
c002eed2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002eed6:	e8 cd ff ff ff       	call   c002eea8 <PIT::~PIT()>
c002eedb:	83 c4 10             	add    esp,0x10
c002eede:	83 ec 08             	sub    esp,0x8
c002eee1:	68 5c 01 00 00       	push   0x15c
c002eee6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002eeea:	e8 25 a1 fe ff       	call   c0019014 <operator delete(void*, unsigned long)>
c002eeef:	83 c4 10             	add    esp,0x10
c002eef2:	83 c4 0c             	add    esp,0xc
c002eef5:	c3                   	ret    

Disassembly of section userkernel:

c0035000 <KiDefaultSignalHandlerAbort(int)>:
c0035000:	57                   	push   edi
c0035001:	b9 07 00 00 00       	mov    ecx,0x7
c0035006:	56                   	push   esi
c0035007:	be 61 24 03 c0       	mov    esi,0xc0032461
c003500c:	83 ec 24             	sub    esp,0x24
c003500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0035013:	fc                   	cld    
c0035014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0035016:	8d 44 24 04          	lea    eax,[esp+0x4]
c003501a:	50                   	push   eax
c003501b:	6a 00                	push   0x0
c003501d:	6a 38                	push   0x38
c003501f:	6a 01                	push   0x1
c0035021:	e8 2c 00 00 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0035026:	83 c4 34             	add    esp,0x34
c0035029:	5e                   	pop    esi
c003502a:	5f                   	pop    edi
c003502b:	c3                   	ret    

c003502c <KiDefaultSignalHandlerTerminate(int)>:
c003502c:	57                   	push   edi
c003502d:	b9 08 00 00 00       	mov    ecx,0x8
c0035032:	56                   	push   esi
c0035033:	be 7d 24 03 c0       	mov    esi,0xc003247d
c0035038:	83 ec 24             	sub    esp,0x24
c003503b:	89 e7                	mov    edi,esp
c003503d:	fc                   	cld    
c003503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0035040:	54                   	push   esp
c0035041:	6a 00                	push   0x0
c0035043:	6a 37                	push   0x37
c0035045:	6a 01                	push   0x1
c0035047:	e8 06 00 00 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c003504c:	83 c4 34             	add    esp,0x34
c003504f:	5e                   	pop    esi
c0035050:	5f                   	pop    edi
c0035051:	c3                   	ret    

c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0035052:	53                   	push   ebx
c0035053:	83 ec 10             	sub    esp,0x10
c0035056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c003505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c003505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0035062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0035066:	cd 60                	int    0x60
c0035068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c003506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0035070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0035074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0035078:	83 c4 10             	add    esp,0x10
c003507b:	5b                   	pop    ebx
c003507c:	c3                   	ret    

Disassembly of section align_previous:

c0036000 <DO_NOT_DELETE()>:
c0036000:	c3                   	ret    
